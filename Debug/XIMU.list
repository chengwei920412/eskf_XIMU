
XIMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aea8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001080  0800afb8  0800afb8  0001afb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c038  0800c038  00020388  2**0
                  CONTENTS
  4 .ARM          00000000  0800c038  0800c038  00020388  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c038  0800c038  00020388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c038  0800c038  0001c038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c03c  0800c03c  0001c03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000388  20000000  0800c040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018a8  20000388  0800c3c8  00020388  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001c30  0800c3c8  00021c30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY
 12 .debug_info   000311f0  00000000  00000000  000203b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006450  00000000  00000000  000515a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001976a  00000000  00000000  000579f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001478  00000000  00000000  00071160  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000040f0  00000000  00000000  000725d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001bd39  00000000  00000000  000766c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00019e47  00000000  00000000  00092401  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00082d2c  00000000  00000000  000ac248  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      000000f0  00000000  00000000  0012ef74  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056fc  00000000  00000000  0012f064  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000388 	.word	0x20000388
 800012c:	00000000 	.word	0x00000000
 8000130:	0800afa0 	.word	0x0800afa0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000038c 	.word	0x2000038c
 800014c:	0800afa0 	.word	0x0800afa0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_f2iz>:
 8000b68:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b70:	d30f      	bcc.n	8000b92 <__aeabi_f2iz+0x2a>
 8000b72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_f2iz+0x30>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b84:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b88:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8c:	bf18      	it	ne
 8000b8e:	4240      	negne	r0, r0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr
 8000b98:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b9c:	d101      	bne.n	8000ba2 <__aeabi_f2iz+0x3a>
 8000b9e:	0242      	lsls	r2, r0, #9
 8000ba0:	d105      	bne.n	8000bae <__aeabi_f2iz+0x46>
 8000ba2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000ba6:	bf08      	it	eq
 8000ba8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bac:	4770      	bx	lr
 8000bae:	f04f 0000 	mov.w	r0, #0
 8000bb2:	4770      	bx	lr

08000bb4 <mpu_set_bypass.part.1>:
/**
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
 8000bb4:	b570      	push	{r4, r5, r6, lr}
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;

    if (bypass_on) {
 8000bb6:	4606      	mov	r6, r0
int mpu_set_bypass(unsigned char bypass_on)
 8000bb8:	b082      	sub	sp, #8
 8000bba:	4c36      	ldr	r4, [pc, #216]	; (8000c94 <mpu_set_bypass.part.1+0xe0>)
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8000bbc:	f10d 0507 	add.w	r5, sp, #7
 8000bc0:	e9d4 3200 	ldrd	r3, r2, [r4]
 8000bc4:	7810      	ldrb	r0, [r2, #0]
 8000bc6:	7919      	ldrb	r1, [r3, #4]
 8000bc8:	2201      	movs	r2, #1
 8000bca:	462b      	mov	r3, r5
    if (bypass_on) {
 8000bcc:	b33e      	cbz	r6, 8000c1e <mpu_set_bypass.part.1+0x6a>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8000bce:	f003 f817 	bl	8003c00 <i2c_read>
 8000bd2:	2800      	cmp	r0, #0
 8000bd4:	d15a      	bne.n	8000c8c <mpu_set_bypass.part.1+0xd8>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
 8000bd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8000bda:	6861      	ldr	r1, [r4, #4]
        tmp &= ~BIT_AUX_IF_EN;
 8000bdc:	f023 0320 	bic.w	r3, r3, #32
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8000be0:	6822      	ldr	r2, [r4, #0]
        tmp &= ~BIT_AUX_IF_EN;
 8000be2:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8000be6:	7808      	ldrb	r0, [r1, #0]
 8000be8:	462b      	mov	r3, r5
 8000bea:	7911      	ldrb	r1, [r2, #4]
 8000bec:	2201      	movs	r2, #1
 8000bee:	f002 fff7 	bl	8003be0 <i2c_write>
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	d14a      	bne.n	8000c8c <mpu_set_bypass.part.1+0xd8>
            return -1;
        delay_ms(3);
 8000bf6:	2003      	movs	r0, #3
 8000bf8:	f003 f812 	bl	8003c20 <delay_ms>
        tmp = BIT_BYPASS_EN;
 8000bfc:	2202      	movs	r2, #2
        if (st.chip_cfg.active_low_int)
 8000bfe:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
        tmp = BIT_BYPASS_EN;
 8000c02:	f88d 2007 	strb.w	r2, [sp, #7]
        if (st.chip_cfg.active_low_int)
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d03e      	beq.n	8000c88 <mpu_set_bypass.part.1+0xd4>
            tmp |= BIT_ACTL;
 8000c0a:	2382      	movs	r3, #130	; 0x82
 8000c0c:	22b2      	movs	r2, #178	; 0xb2
 8000c0e:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.latched_int)
 8000c12:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8000c16:	b343      	cbz	r3, 8000c6a <mpu_set_bypass.part.1+0xb6>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8000c18:	f88d 2007 	strb.w	r2, [sp, #7]
 8000c1c:	e025      	b.n	8000c6a <mpu_set_bypass.part.1+0xb6>
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8000c1e:	f002 ffef 	bl	8003c00 <i2c_read>
 8000c22:	bb98      	cbnz	r0, 8000c8c <mpu_set_bypass.part.1+0xd8>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8000c24:	7aa2      	ldrb	r2, [r4, #10]
 8000c26:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000c2a:	07d2      	lsls	r2, r2, #31
            tmp |= BIT_AUX_IF_EN;
 8000c2c:	bf4c      	ite	mi
 8000c2e:	f043 0320 	orrmi.w	r3, r3, #32
        else
            tmp &= ~BIT_AUX_IF_EN;
 8000c32:	f003 03df 	andpl.w	r3, r3, #223	; 0xdf
 8000c36:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8000c3a:	e9d4 2100 	ldrd	r2, r1, [r4]
 8000c3e:	462b      	mov	r3, r5
 8000c40:	7808      	ldrb	r0, [r1, #0]
 8000c42:	7911      	ldrb	r1, [r2, #4]
 8000c44:	2201      	movs	r2, #1
 8000c46:	f002 ffcb 	bl	8003be0 <i2c_write>
 8000c4a:	b9f8      	cbnz	r0, 8000c8c <mpu_set_bypass.part.1+0xd8>
            return -1;
        delay_ms(3);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f002 ffe7 	bl	8003c20 <delay_ms>
        if (st.chip_cfg.active_low_int)
 8000c52:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8000c56:	b1ab      	cbz	r3, 8000c84 <mpu_set_bypass.part.1+0xd0>
 8000c58:	21b0      	movs	r1, #176	; 0xb0
            tmp = BIT_ACTL;
 8000c5a:	2380      	movs	r3, #128	; 0x80
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
 8000c5c:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8000c60:	f88d 3007 	strb.w	r3, [sp, #7]
 8000c64:	b10a      	cbz	r2, 8000c6a <mpu_set_bypass.part.1+0xb6>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8000c66:	f88d 1007 	strb.w	r1, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8000c6a:	e9d4 1200 	ldrd	r1, r2, [r4]
 8000c6e:	462b      	mov	r3, r5
 8000c70:	7810      	ldrb	r0, [r2, #0]
 8000c72:	7dc9      	ldrb	r1, [r1, #23]
 8000c74:	2201      	movs	r2, #1
 8000c76:	f002 ffb3 	bl	8003be0 <i2c_write>
 8000c7a:	b938      	cbnz	r0, 8000c8c <mpu_set_bypass.part.1+0xd8>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
 8000c7c:	2000      	movs	r0, #0
    st.chip_cfg.bypass_mode = bypass_on;
 8000c7e:	74a6      	strb	r6, [r4, #18]
}
 8000c80:	b002      	add	sp, #8
 8000c82:	bd70      	pop	{r4, r5, r6, pc}
        if (st.chip_cfg.active_low_int)
 8000c84:	2130      	movs	r1, #48	; 0x30
 8000c86:	e7e9      	b.n	8000c5c <mpu_set_bypass.part.1+0xa8>
        if (st.chip_cfg.active_low_int)
 8000c88:	2232      	movs	r2, #50	; 0x32
 8000c8a:	e7c2      	b.n	8000c12 <mpu_set_bypass.part.1+0x5e>
            return -1;
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	e7f6      	b.n	8000c80 <mpu_set_bypass.part.1+0xcc>
 8000c92:	bf00      	nop
 8000c94:	20000000 	.word	0x20000000

08000c98 <mpu_set_bypass.part.1.constprop.7>:
int mpu_set_bypass(unsigned char bypass_on)
 8000c98:	b510      	push	{r4, lr}
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8000c9a:	4c20      	ldr	r4, [pc, #128]	; (8000d1c <mpu_set_bypass.part.1.constprop.7+0x84>)
int mpu_set_bypass(unsigned char bypass_on)
 8000c9c:	b082      	sub	sp, #8
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8000c9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000ca2:	7911      	ldrb	r1, [r2, #4]
 8000ca4:	7818      	ldrb	r0, [r3, #0]
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f10d 0307 	add.w	r3, sp, #7
 8000cac:	f002 ffa8 	bl	8003c00 <i2c_read>
 8000cb0:	bb88      	cbnz	r0, 8000d16 <mpu_set_bypass.part.1.constprop.7+0x7e>
        tmp &= ~BIT_AUX_IF_EN;
 8000cb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8000cb6:	6861      	ldr	r1, [r4, #4]
        tmp &= ~BIT_AUX_IF_EN;
 8000cb8:	f023 0320 	bic.w	r3, r3, #32
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8000cbc:	6822      	ldr	r2, [r4, #0]
        tmp &= ~BIT_AUX_IF_EN;
 8000cbe:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8000cc2:	7808      	ldrb	r0, [r1, #0]
 8000cc4:	f10d 0307 	add.w	r3, sp, #7
 8000cc8:	7911      	ldrb	r1, [r2, #4]
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f002 ff88 	bl	8003be0 <i2c_write>
 8000cd0:	bb08      	cbnz	r0, 8000d16 <mpu_set_bypass.part.1.constprop.7+0x7e>
        delay_ms(3);
 8000cd2:	2003      	movs	r0, #3
 8000cd4:	f002 ffa4 	bl	8003c20 <delay_ms>
        tmp = BIT_BYPASS_EN;
 8000cd8:	2202      	movs	r2, #2
        if (st.chip_cfg.active_low_int)
 8000cda:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
        tmp = BIT_BYPASS_EN;
 8000cde:	f88d 2007 	strb.w	r2, [sp, #7]
        if (st.chip_cfg.active_low_int)
 8000ce2:	b1b3      	cbz	r3, 8000d12 <mpu_set_bypass.part.1.constprop.7+0x7a>
            tmp |= BIT_ACTL;
 8000ce4:	2382      	movs	r3, #130	; 0x82
 8000ce6:	22b2      	movs	r2, #178	; 0xb2
 8000ce8:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.latched_int)
 8000cec:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8000cf0:	b10b      	cbz	r3, 8000cf6 <mpu_set_bypass.part.1.constprop.7+0x5e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8000cf2:	f88d 2007 	strb.w	r2, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8000cf6:	e9d4 1200 	ldrd	r1, r2, [r4]
 8000cfa:	f10d 0307 	add.w	r3, sp, #7
 8000cfe:	7810      	ldrb	r0, [r2, #0]
 8000d00:	7dc9      	ldrb	r1, [r1, #23]
 8000d02:	2201      	movs	r2, #1
 8000d04:	f002 ff6c 	bl	8003be0 <i2c_write>
 8000d08:	b928      	cbnz	r0, 8000d16 <mpu_set_bypass.part.1.constprop.7+0x7e>
    st.chip_cfg.bypass_mode = bypass_on;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	74a3      	strb	r3, [r4, #18]
}
 8000d0e:	b002      	add	sp, #8
 8000d10:	bd10      	pop	{r4, pc}
        if (st.chip_cfg.active_low_int)
 8000d12:	2232      	movs	r2, #50	; 0x32
 8000d14:	e7ea      	b.n	8000cec <mpu_set_bypass.part.1.constprop.7+0x54>
            return -1;
 8000d16:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1a:	e7f8      	b.n	8000d0e <mpu_set_bypass.part.1.constprop.7+0x76>
 8000d1c:	20000000 	.word	0x20000000

08000d20 <mpu_reset_fifo>:
{
 8000d20:	b570      	push	{r4, r5, r6, lr}
    if (!(st.chip_cfg.sensors))
 8000d22:	4c53      	ldr	r4, [pc, #332]	; (8000e70 <mpu_reset_fifo+0x150>)
{
 8000d24:	b082      	sub	sp, #8
    if (!(st.chip_cfg.sensors))
 8000d26:	7aa3      	ldrb	r3, [r4, #10]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f000 809c 	beq.w	8000e66 <mpu_reset_fifo+0x146>
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000d2e:	e9d4 2100 	ldrd	r2, r1, [r4]
    data = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	ad02      	add	r5, sp, #8
 8000d36:	f805 3d01 	strb.w	r3, [r5, #-1]!
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000d3a:	7808      	ldrb	r0, [r1, #0]
 8000d3c:	462b      	mov	r3, r5
 8000d3e:	7c51      	ldrb	r1, [r2, #17]
 8000d40:	2201      	movs	r2, #1
 8000d42:	f002 ff4d 	bl	8003be0 <i2c_write>
 8000d46:	2800      	cmp	r0, #0
 8000d48:	f040 808d 	bne.w	8000e66 <mpu_reset_fifo+0x146>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8000d4c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000d50:	7951      	ldrb	r1, [r2, #5]
 8000d52:	7818      	ldrb	r0, [r3, #0]
 8000d54:	2201      	movs	r2, #1
 8000d56:	462b      	mov	r3, r5
 8000d58:	f002 ff42 	bl	8003be0 <i2c_write>
 8000d5c:	2800      	cmp	r0, #0
 8000d5e:	f040 8082 	bne.w	8000e66 <mpu_reset_fifo+0x146>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000d62:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000d66:	7911      	ldrb	r1, [r2, #4]
 8000d68:	7818      	ldrb	r0, [r3, #0]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	462b      	mov	r3, r5
 8000d6e:	f002 ff37 	bl	8003be0 <i2c_write>
 8000d72:	2800      	cmp	r0, #0
 8000d74:	d177      	bne.n	8000e66 <mpu_reset_fifo+0x146>
 8000d76:	e9d4 2100 	ldrd	r2, r1, [r4]
    if (st.chip_cfg.dmp_on) {
 8000d7a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000d7e:	7808      	ldrb	r0, [r1, #0]
 8000d80:	7911      	ldrb	r1, [r2, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d13b      	bne.n	8000dfe <mpu_reset_fifo+0xde>
        data = BIT_FIFO_RST;
 8000d86:	2604      	movs	r6, #4
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000d88:	462b      	mov	r3, r5
 8000d8a:	2201      	movs	r2, #1
        data = BIT_FIFO_RST;
 8000d8c:	f88d 6007 	strb.w	r6, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000d90:	f002 ff26 	bl	8003be0 <i2c_write>
 8000d94:	2800      	cmp	r0, #0
 8000d96:	d166      	bne.n	8000e66 <mpu_reset_fifo+0x146>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8000d98:	7ca3      	ldrb	r3, [r4, #18]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d161      	bne.n	8000e62 <mpu_reset_fifo+0x142>
 8000d9e:	7aa3      	ldrb	r3, [r4, #10]
            data = BIT_FIFO_EN;
 8000da0:	f013 0f01 	tst.w	r3, #1
 8000da4:	bf14      	ite	ne
 8000da6:	2160      	movne	r1, #96	; 0x60
 8000da8:	2140      	moveq	r1, #64	; 0x40
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000daa:	e9d4 3200 	ldrd	r3, r2, [r4]
 8000dae:	f88d 1007 	strb.w	r1, [sp, #7]
 8000db2:	7810      	ldrb	r0, [r2, #0]
 8000db4:	7919      	ldrb	r1, [r3, #4]
 8000db6:	2201      	movs	r2, #1
 8000db8:	462b      	mov	r3, r5
 8000dba:	f002 ff11 	bl	8003be0 <i2c_write>
 8000dbe:	2800      	cmp	r0, #0
 8000dc0:	d151      	bne.n	8000e66 <mpu_reset_fifo+0x146>
        if (st.chip_cfg.int_enable)
 8000dc2:	7c63      	ldrb	r3, [r4, #17]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000dc4:	6861      	ldr	r1, [r4, #4]
        if (st.chip_cfg.int_enable)
 8000dc6:	3300      	adds	r3, #0
 8000dc8:	bf18      	it	ne
 8000dca:	2301      	movne	r3, #1
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000dcc:	6822      	ldr	r2, [r4, #0]
        if (st.chip_cfg.int_enable)
 8000dce:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000dd2:	7808      	ldrb	r0, [r1, #0]
 8000dd4:	462b      	mov	r3, r5
 8000dd6:	7c51      	ldrb	r1, [r2, #17]
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f002 ff01 	bl	8003be0 <i2c_write>
 8000dde:	2800      	cmp	r0, #0
 8000de0:	d141      	bne.n	8000e66 <mpu_reset_fifo+0x146>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8000de2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000de6:	7818      	ldrb	r0, [r3, #0]
 8000de8:	7951      	ldrb	r1, [r2, #5]
 8000dea:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <mpu_reset_fifo+0x154>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	f002 fef7 	bl	8003be0 <i2c_write>
 8000df2:	3000      	adds	r0, #0
 8000df4:	bf18      	it	ne
 8000df6:	2001      	movne	r0, #1
 8000df8:	4240      	negs	r0, r0
}
 8000dfa:	b002      	add	sp, #8
 8000dfc:	bd70      	pop	{r4, r5, r6, pc}
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8000dfe:	260c      	movs	r6, #12
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000e00:	462b      	mov	r3, r5
 8000e02:	2201      	movs	r2, #1
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8000e04:	f88d 6007 	strb.w	r6, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000e08:	f002 feea 	bl	8003be0 <i2c_write>
 8000e0c:	bb58      	cbnz	r0, 8000e66 <mpu_reset_fifo+0x146>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8000e0e:	7aa3      	ldrb	r3, [r4, #10]
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8000e10:	22c0      	movs	r2, #192	; 0xc0
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8000e12:	07db      	lsls	r3, r3, #31
            data |= BIT_AUX_IF_EN;
 8000e14:	bf48      	it	mi
 8000e16:	23e0      	movmi	r3, #224	; 0xe0
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8000e18:	f88d 2007 	strb.w	r2, [sp, #7]
            data |= BIT_AUX_IF_EN;
 8000e1c:	bf48      	it	mi
 8000e1e:	f88d 3007 	strbmi.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000e22:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000e26:	7911      	ldrb	r1, [r2, #4]
 8000e28:	7818      	ldrb	r0, [r3, #0]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	462b      	mov	r3, r5
 8000e2e:	f002 fed7 	bl	8003be0 <i2c_write>
 8000e32:	b9c0      	cbnz	r0, 8000e66 <mpu_reset_fifo+0x146>
        if (st.chip_cfg.int_enable)
 8000e34:	7c63      	ldrb	r3, [r4, #17]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000e36:	6861      	ldr	r1, [r4, #4]
            data = BIT_DMP_INT_EN;
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	bf18      	it	ne
 8000e3c:	2302      	movne	r3, #2
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000e3e:	6822      	ldr	r2, [r4, #0]
 8000e40:	f88d 3007 	strb.w	r3, [sp, #7]
 8000e44:	7808      	ldrb	r0, [r1, #0]
 8000e46:	462b      	mov	r3, r5
 8000e48:	7c51      	ldrb	r1, [r2, #17]
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f002 fec8 	bl	8003be0 <i2c_write>
 8000e50:	b948      	cbnz	r0, 8000e66 <mpu_reset_fifo+0x146>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8000e52:	e9d4 2100 	ldrd	r2, r1, [r4]
        data = 0;
 8000e56:	f88d 0007 	strb.w	r0, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8000e5a:	7808      	ldrb	r0, [r1, #0]
 8000e5c:	462b      	mov	r3, r5
 8000e5e:	7951      	ldrb	r1, [r2, #5]
 8000e60:	e7c4      	b.n	8000dec <mpu_reset_fifo+0xcc>
            data = BIT_FIFO_EN;
 8000e62:	2140      	movs	r1, #64	; 0x40
 8000e64:	e7a1      	b.n	8000daa <mpu_reset_fifo+0x8a>
        return -1;
 8000e66:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000e6a:	b002      	add	sp, #8
 8000e6c:	bd70      	pop	{r4, r5, r6, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000000 	.word	0x20000000
 8000e74:	20000010 	.word	0x20000010

08000e78 <mpu_lp_accel_mode>:
{
 8000e78:	b570      	push	{r4, r5, r6, lr}
    if (rate > 40)
 8000e7a:	2828      	cmp	r0, #40	; 0x28
{
 8000e7c:	b082      	sub	sp, #8
    if (rate > 40)
 8000e7e:	f200 80ac 	bhi.w	8000fda <mpu_lp_accel_mode+0x162>
 8000e82:	4c5b      	ldr	r4, [pc, #364]	; (8000ff0 <mpu_lp_accel_mode+0x178>)
 8000e84:	4605      	mov	r5, r0
 8000e86:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    if (!rate) {
 8000e8a:	b9b8      	cbnz	r0, 8000ebc <mpu_lp_accel_mode+0x44>
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	f040 8082 	bne.w	8000f96 <mpu_lp_accel_mode+0x11e>
 8000e92:	ae01      	add	r6, sp, #4
        tmp[0] = 0;
 8000e94:	f44f 63e0 	mov.w	r3, #1792	; 0x700
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8000e98:	e9d4 1200 	ldrd	r1, r2, [r4]
        tmp[0] = 0;
 8000e9c:	f8ad 3004 	strh.w	r3, [sp, #4]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8000ea0:	7810      	ldrb	r0, [r2, #0]
 8000ea2:	4633      	mov	r3, r6
 8000ea4:	7d49      	ldrb	r1, [r1, #21]
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	f002 fe9a 	bl	8003be0 <i2c_write>
 8000eac:	4605      	mov	r5, r0
 8000eae:	2800      	cmp	r0, #0
 8000eb0:	f040 8093 	bne.w	8000fda <mpu_lp_accel_mode+0x162>
        st.chip_cfg.lp_accel_mode = 0;
 8000eb4:	7520      	strb	r0, [r4, #20]
}
 8000eb6:	4628      	mov	r0, r5
 8000eb8:	b002      	add	sp, #8
 8000eba:	bd70      	pop	{r4, r5, r6, pc}
    if (st.chip_cfg.latched_int == enable)
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d142      	bne.n	8000f46 <mpu_lp_accel_mode+0xce>
 8000ec0:	ae01      	add	r6, sp, #4
    if (rate == 1)
 8000ec2:	2d01      	cmp	r5, #1
 8000ec4:	d05a      	beq.n	8000f7c <mpu_lp_accel_mode+0x104>
    else if (rate == 2)
 8000ec6:	2d02      	cmp	r5, #2
 8000ec8:	f000 8081 	beq.w	8000fce <mpu_lp_accel_mode+0x156>
    else if (rate <= 5)
 8000ecc:	2d05      	cmp	r5, #5
 8000ece:	d95e      	bls.n	8000f8e <mpu_lp_accel_mode+0x116>
    else if (rate <= 10)
 8000ed0:	2d0a      	cmp	r5, #10
 8000ed2:	f200 8085 	bhi.w	8000fe0 <mpu_lp_accel_mode+0x168>
        tmp[0] = INV_LPA_10HZ;
 8000ed6:	2305      	movs	r3, #5
 8000ed8:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 8000edc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000ee0:	7a51      	ldrb	r1, [r2, #9]
 8000ee2:	7818      	ldrb	r0, [r3, #0]
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	4633      	mov	r3, r6
 8000ee8:	f002 fe7a 	bl	8003be0 <i2c_write>
 8000eec:	2800      	cmp	r0, #0
 8000eee:	d174      	bne.n	8000fda <mpu_lp_accel_mode+0x162>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 8000ef0:	e9d4 1200 	ldrd	r1, r2, [r4]
    tmp[0] = BIT_LPA_CYCLE;
 8000ef4:	2320      	movs	r3, #32
 8000ef6:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 8000efa:	7810      	ldrb	r0, [r2, #0]
 8000efc:	4633      	mov	r3, r6
 8000efe:	7d49      	ldrb	r1, [r1, #21]
 8000f00:	2201      	movs	r2, #1
 8000f02:	f002 fe6d 	bl	8003be0 <i2c_write>
 8000f06:	4605      	mov	r5, r0
 8000f08:	2800      	cmp	r0, #0
 8000f0a:	d166      	bne.n	8000fda <mpu_lp_accel_mode+0x162>
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8000f0c:	2108      	movs	r1, #8
    st.chip_cfg.lp_accel_mode = 1;
 8000f0e:	2201      	movs	r2, #1
    if (st.chip_cfg.dmp_on)
 8000f10:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    st.chip_cfg.clk_src = 0;
 8000f14:	7320      	strb	r0, [r4, #12]
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8000f16:	72a1      	strb	r1, [r4, #10]
    st.chip_cfg.lp_accel_mode = 1;
 8000f18:	7522      	strb	r2, [r4, #20]
    if (st.chip_cfg.dmp_on)
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1cb      	bne.n	8000eb6 <mpu_lp_accel_mode+0x3e>
        if (enable && st.chip_cfg.int_enable)
 8000f1e:	7c63      	ldrb	r3, [r4, #17]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8000f20:	7420      	strb	r0, [r4, #16]
        if (enable && st.chip_cfg.int_enable)
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1c7      	bne.n	8000eb6 <mpu_lp_accel_mode+0x3e>
            tmp = BIT_DATA_RDY_EN;
 8000f26:	eb0d 0301 	add.w	r3, sp, r1
 8000f2a:	f803 2d05 	strb.w	r2, [r3, #-5]!
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8000f2e:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000f32:	7800      	ldrb	r0, [r0, #0]
 8000f34:	7c49      	ldrb	r1, [r1, #17]
 8000f36:	f002 fe53 	bl	8003be0 <i2c_write>
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	d1bb      	bne.n	8000eb6 <mpu_lp_accel_mode+0x3e>
        st.chip_cfg.int_enable = tmp;
 8000f3e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000f42:	7463      	strb	r3, [r4, #17]
 8000f44:	e7b7      	b.n	8000eb6 <mpu_lp_accel_mode+0x3e>
        return 0;

    if (enable)
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8000f46:	2230      	movs	r2, #48	; 0x30
    else
        tmp = 0;
    if (st.chip_cfg.bypass_mode)
 8000f48:	7ca3      	ldrb	r3, [r4, #18]
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8000f4a:	f88d 2004 	strb.w	r2, [sp, #4]
    if (st.chip_cfg.bypass_mode)
 8000f4e:	b9cb      	cbnz	r3, 8000f84 <mpu_lp_accel_mode+0x10c>
 8000f50:	22b0      	movs	r2, #176	; 0xb0
        tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
 8000f52:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8000f56:	b10b      	cbz	r3, 8000f5c <mpu_lp_accel_mode+0xe4>
        tmp |= BIT_ACTL;
 8000f58:	f88d 2004 	strb.w	r2, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8000f5c:	ae01      	add	r6, sp, #4
 8000f5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000f62:	7dd1      	ldrb	r1, [r2, #23]
 8000f64:	7818      	ldrb	r0, [r3, #0]
 8000f66:	2201      	movs	r2, #1
 8000f68:	4633      	mov	r3, r6
 8000f6a:	f002 fe39 	bl	8003be0 <i2c_write>
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	d1a7      	bne.n	8000ec2 <mpu_lp_accel_mode+0x4a>
        return -1;
    st.chip_cfg.latched_int = enable;
 8000f72:	2301      	movs	r3, #1
    if (rate == 1)
 8000f74:	2d01      	cmp	r5, #1
    st.chip_cfg.latched_int = enable;
 8000f76:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    if (rate == 1)
 8000f7a:	d1a4      	bne.n	8000ec6 <mpu_lp_accel_mode+0x4e>
        tmp[0] = INV_LPA_1_25HZ;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	f88d 3004 	strb.w	r3, [sp, #4]
 8000f82:	e7ab      	b.n	8000edc <mpu_lp_accel_mode+0x64>
        tmp |= BIT_BYPASS_EN;
 8000f84:	2332      	movs	r3, #50	; 0x32
 8000f86:	22b2      	movs	r2, #178	; 0xb2
 8000f88:	f88d 3004 	strb.w	r3, [sp, #4]
 8000f8c:	e7e1      	b.n	8000f52 <mpu_lp_accel_mode+0xda>
        tmp[0] = INV_LPA_5HZ;
 8000f8e:	2304      	movs	r3, #4
 8000f90:	f88d 3004 	strb.w	r3, [sp, #4]
 8000f94:	e7a2      	b.n	8000edc <mpu_lp_accel_mode+0x64>
    if (st.chip_cfg.bypass_mode)
 8000f96:	7ca3      	ldrb	r3, [r4, #18]
        tmp = 0;
 8000f98:	f88d 0004 	strb.w	r0, [sp, #4]
    if (st.chip_cfg.bypass_mode)
 8000f9c:	b1db      	cbz	r3, 8000fd6 <mpu_lp_accel_mode+0x15e>
        tmp |= BIT_BYPASS_EN;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	2282      	movs	r2, #130	; 0x82
 8000fa2:	f88d 3004 	strb.w	r3, [sp, #4]
    if (st.chip_cfg.active_low_int)
 8000fa6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8000faa:	b10b      	cbz	r3, 8000fb0 <mpu_lp_accel_mode+0x138>
        tmp |= BIT_ACTL;
 8000fac:	f88d 2004 	strb.w	r2, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8000fb0:	ae01      	add	r6, sp, #4
 8000fb2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000fb6:	7dd1      	ldrb	r1, [r2, #23]
 8000fb8:	7818      	ldrb	r0, [r3, #0]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4633      	mov	r3, r6
 8000fbe:	f002 fe0f 	bl	8003be0 <i2c_write>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	f47f af66 	bne.w	8000e94 <mpu_lp_accel_mode+0x1c>
    st.chip_cfg.latched_int = enable;
 8000fc8:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
 8000fcc:	e762      	b.n	8000e94 <mpu_lp_accel_mode+0x1c>
        tmp[0] = INV_LPA_2_5HZ;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	f88d 3004 	strb.w	r3, [sp, #4]
 8000fd4:	e782      	b.n	8000edc <mpu_lp_accel_mode+0x64>
    if (st.chip_cfg.bypass_mode)
 8000fd6:	2280      	movs	r2, #128	; 0x80
 8000fd8:	e7e5      	b.n	8000fa6 <mpu_lp_accel_mode+0x12e>
        return -1;
 8000fda:	f04f 35ff 	mov.w	r5, #4294967295
 8000fde:	e76a      	b.n	8000eb6 <mpu_lp_accel_mode+0x3e>
    else if (rate <= 20)
 8000fe0:	2d14      	cmp	r5, #20
        tmp[0] = INV_LPA_20HZ;
 8000fe2:	bf94      	ite	ls
 8000fe4:	2306      	movls	r3, #6
        tmp[0] = INV_LPA_40HZ;
 8000fe6:	2307      	movhi	r3, #7
 8000fe8:	f88d 3004 	strb.w	r3, [sp, #4]
 8000fec:	e776      	b.n	8000edc <mpu_lp_accel_mode+0x64>
 8000fee:	bf00      	nop
 8000ff0:	20000000 	.word	0x20000000

08000ff4 <mpu_set_sample_rate>:
{
 8000ff4:	b570      	push	{r4, r5, r6, lr}
    if (!(st.chip_cfg.sensors))
 8000ff6:	4c62      	ldr	r4, [pc, #392]	; (8001180 <mpu_set_sample_rate+0x18c>)
{
 8000ff8:	b082      	sub	sp, #8
    if (!(st.chip_cfg.sensors))
 8000ffa:	7aa3      	ldrb	r3, [r4, #10]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 80af 	beq.w	8001160 <mpu_set_sample_rate+0x16c>
    if (st.chip_cfg.dmp_on)
 8001002:	f894 6024 	ldrb.w	r6, [r4, #36]	; 0x24
 8001006:	2e00      	cmp	r6, #0
 8001008:	f040 80aa 	bne.w	8001160 <mpu_set_sample_rate+0x16c>
        if (st.chip_cfg.lp_accel_mode) {
 800100c:	7d23      	ldrb	r3, [r4, #20]
 800100e:	4605      	mov	r5, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d15a      	bne.n	80010ca <mpu_set_sample_rate+0xd6>
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 8001014:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001018:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 800101c:	462a      	mov	r2, r5
 800101e:	bf28      	it	cs
 8001020:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
        data = 1000 / rate - 1;
 8001024:	2a04      	cmp	r2, #4
 8001026:	bf38      	it	cc
 8001028:	2204      	movcc	r2, #4
 800102a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800102e:	fb95 f2f2 	sdiv	r2, r5, r2
 8001032:	ab02      	add	r3, sp, #8
 8001034:	3a01      	subs	r2, #1
 8001036:	f803 2d05 	strb.w	r2, [r3, #-5]!
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 800103a:	7800      	ldrb	r0, [r0, #0]
 800103c:	7849      	ldrb	r1, [r1, #1]
 800103e:	2201      	movs	r2, #1
 8001040:	f002 fdce 	bl	8003be0 <i2c_write>
 8001044:	4606      	mov	r6, r0
 8001046:	2800      	cmp	r0, #0
 8001048:	f040 808a 	bne.w	8001160 <mpu_set_sample_rate+0x16c>
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 800104c:	f89d 3003 	ldrb.w	r3, [sp, #3]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 8001050:	8d21      	ldrh	r1, [r4, #40]	; 0x28
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8001052:	3301      	adds	r3, #1
 8001054:	fb95 f3f3 	sdiv	r3, r5, r3
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 8001058:	2964      	cmp	r1, #100	; 0x64
 800105a:	460a      	mov	r2, r1
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 800105c:	81e3      	strh	r3, [r4, #14]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 800105e:	bf28      	it	cs
 8001060:	2264      	movcs	r2, #100	; 0x64
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8001062:	b1c1      	cbz	r1, 8001096 <mpu_set_sample_rate+0xa2>
 8001064:	4293      	cmp	r3, r2
 8001066:	d316      	bcc.n	8001096 <mpu_set_sample_rate+0xa2>
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8001068:	e9d4 1000 	ldrd	r1, r0, [r4]
    div = st.chip_cfg.sample_rate / rate - 1;
 800106c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001070:	ab02      	add	r3, sp, #8
 8001072:	3a01      	subs	r2, #1
 8001074:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8001078:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
 800107c:	7800      	ldrb	r0, [r0, #0]
 800107e:	2201      	movs	r2, #1
 8001080:	f002 fdae 	bl	8003be0 <i2c_write>
 8001084:	2800      	cmp	r0, #0
 8001086:	d179      	bne.n	800117c <mpu_set_sample_rate+0x188>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 8001088:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800108c:	89e3      	ldrh	r3, [r4, #14]
 800108e:	3201      	adds	r2, #1
 8001090:	fb93 f2f2 	sdiv	r2, r3, r2
 8001094:	8522      	strh	r2, [r4, #40]	; 0x28
    if (!(st.chip_cfg.sensors))
 8001096:	7aa2      	ldrb	r2, [r4, #10]
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8001098:	085b      	lsrs	r3, r3, #1
    if (!(st.chip_cfg.sensors))
 800109a:	b19a      	cbz	r2, 80010c4 <mpu_set_sample_rate+0xd0>
    if (lpf >= 188)
 800109c:	2bbb      	cmp	r3, #187	; 0xbb
 800109e:	d92b      	bls.n	80010f8 <mpu_set_sample_rate+0x104>
        data = INV_FILTER_188HZ;
 80010a0:	2301      	movs	r3, #1
 80010a2:	f88d 3004 	strb.w	r3, [sp, #4]
    if (st.chip_cfg.lpf == data)
 80010a6:	7ae2      	ldrb	r2, [r4, #11]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d00b      	beq.n	80010c4 <mpu_set_sample_rate+0xd0>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 80010ac:	e9d4 2300 	ldrd	r2, r3, [r4]
 80010b0:	7891      	ldrb	r1, [r2, #2]
 80010b2:	7818      	ldrb	r0, [r3, #0]
 80010b4:	2201      	movs	r2, #1
 80010b6:	ab01      	add	r3, sp, #4
 80010b8:	f002 fd92 	bl	8003be0 <i2c_write>
 80010bc:	b910      	cbnz	r0, 80010c4 <mpu_set_sample_rate+0xd0>
    st.chip_cfg.lpf = data;
 80010be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80010c2:	72e3      	strb	r3, [r4, #11]
}
 80010c4:	4630      	mov	r0, r6
 80010c6:	b002      	add	sp, #8
 80010c8:	bd70      	pop	{r4, r5, r6, pc}
            if (rate && (rate <= 40)) {
 80010ca:	1e43      	subs	r3, r0, #1
 80010cc:	2b27      	cmp	r3, #39	; 0x27
 80010ce:	d91b      	bls.n	8001108 <mpu_set_sample_rate+0x114>
    if (st.chip_cfg.latched_int == enable)
 80010d0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80010d4:	bb0b      	cbnz	r3, 800111a <mpu_set_sample_rate+0x126>
 80010d6:	ae01      	add	r6, sp, #4
        tmp[0] = 0;
 80010d8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80010dc:	e9d4 1200 	ldrd	r1, r2, [r4]
        tmp[0] = 0;
 80010e0:	f8ad 3004 	strh.w	r3, [sp, #4]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80010e4:	7810      	ldrb	r0, [r2, #0]
 80010e6:	4633      	mov	r3, r6
 80010e8:	7d49      	ldrb	r1, [r1, #21]
 80010ea:	2202      	movs	r2, #2
 80010ec:	f002 fd78 	bl	8003be0 <i2c_write>
 80010f0:	2800      	cmp	r0, #0
 80010f2:	d18f      	bne.n	8001014 <mpu_set_sample_rate+0x20>
        st.chip_cfg.lp_accel_mode = 0;
 80010f4:	7520      	strb	r0, [r4, #20]
 80010f6:	e78d      	b.n	8001014 <mpu_set_sample_rate+0x20>
    else if (lpf >= 98)
 80010f8:	2b61      	cmp	r3, #97	; 0x61
 80010fa:	d80a      	bhi.n	8001112 <mpu_set_sample_rate+0x11e>
    else if (lpf >= 42)
 80010fc:	2b29      	cmp	r3, #41	; 0x29
 80010fe:	d927      	bls.n	8001150 <mpu_set_sample_rate+0x15c>
        data = INV_FILTER_42HZ;
 8001100:	2303      	movs	r3, #3
 8001102:	f88d 3004 	strb.w	r3, [sp, #4]
 8001106:	e7ce      	b.n	80010a6 <mpu_set_sample_rate+0xb2>
                mpu_lp_accel_mode(rate);
 8001108:	f7ff feb6 	bl	8000e78 <mpu_lp_accel_mode>
}
 800110c:	4630      	mov	r0, r6
 800110e:	b002      	add	sp, #8
 8001110:	bd70      	pop	{r4, r5, r6, pc}
        data = INV_FILTER_98HZ;
 8001112:	2302      	movs	r3, #2
 8001114:	f88d 3004 	strb.w	r3, [sp, #4]
 8001118:	e7c5      	b.n	80010a6 <mpu_set_sample_rate+0xb2>
    if (st.chip_cfg.bypass_mode)
 800111a:	7ca3      	ldrb	r3, [r4, #18]
        tmp = 0;
 800111c:	f88d 6004 	strb.w	r6, [sp, #4]
    if (st.chip_cfg.bypass_mode)
 8001120:	b32b      	cbz	r3, 800116e <mpu_set_sample_rate+0x17a>
        tmp |= BIT_BYPASS_EN;
 8001122:	2302      	movs	r3, #2
 8001124:	2282      	movs	r2, #130	; 0x82
 8001126:	f88d 3004 	strb.w	r3, [sp, #4]
    if (st.chip_cfg.active_low_int)
 800112a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800112e:	b10b      	cbz	r3, 8001134 <mpu_set_sample_rate+0x140>
        tmp |= BIT_ACTL;
 8001130:	f88d 2004 	strb.w	r2, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001134:	ae01      	add	r6, sp, #4
 8001136:	e9d4 2300 	ldrd	r2, r3, [r4]
 800113a:	7dd1      	ldrb	r1, [r2, #23]
 800113c:	7818      	ldrb	r0, [r3, #0]
 800113e:	2201      	movs	r2, #1
 8001140:	4633      	mov	r3, r6
 8001142:	f002 fd4d 	bl	8003be0 <i2c_write>
 8001146:	2800      	cmp	r0, #0
 8001148:	d1c6      	bne.n	80010d8 <mpu_set_sample_rate+0xe4>
    st.chip_cfg.latched_int = enable;
 800114a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
 800114e:	e7c3      	b.n	80010d8 <mpu_set_sample_rate+0xe4>
    else if (lpf >= 20)
 8001150:	2b13      	cmp	r3, #19
 8001152:	d808      	bhi.n	8001166 <mpu_set_sample_rate+0x172>
    else if (lpf >= 10)
 8001154:	2b09      	cmp	r3, #9
 8001156:	d90c      	bls.n	8001172 <mpu_set_sample_rate+0x17e>
        data = INV_FILTER_10HZ;
 8001158:	2305      	movs	r3, #5
 800115a:	f88d 3004 	strb.w	r3, [sp, #4]
 800115e:	e7a2      	b.n	80010a6 <mpu_set_sample_rate+0xb2>
        return -1;
 8001160:	f04f 36ff 	mov.w	r6, #4294967295
 8001164:	e7ae      	b.n	80010c4 <mpu_set_sample_rate+0xd0>
        data = INV_FILTER_20HZ;
 8001166:	2304      	movs	r3, #4
 8001168:	f88d 3004 	strb.w	r3, [sp, #4]
 800116c:	e79b      	b.n	80010a6 <mpu_set_sample_rate+0xb2>
    if (st.chip_cfg.bypass_mode)
 800116e:	2280      	movs	r2, #128	; 0x80
 8001170:	e7db      	b.n	800112a <mpu_set_sample_rate+0x136>
        data = INV_FILTER_5HZ;
 8001172:	2206      	movs	r2, #6
 8001174:	4613      	mov	r3, r2
 8001176:	f88d 2004 	strb.w	r2, [sp, #4]
 800117a:	e794      	b.n	80010a6 <mpu_set_sample_rate+0xb2>
 800117c:	89e3      	ldrh	r3, [r4, #14]
 800117e:	e78a      	b.n	8001096 <mpu_set_sample_rate+0xa2>
 8001180:	20000000 	.word	0x20000000

08001184 <mpu_set_sensors>:
{
 8001184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001186:	4605      	mov	r5, r0
 8001188:	4c76      	ldr	r4, [pc, #472]	; (8001364 <mpu_set_sensors+0x1e0>)
 800118a:	b083      	sub	sp, #12
 800118c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8001190:	7d59      	ldrb	r1, [r3, #21]
    if (sensors & INV_XYZ_GYRO)
 8001192:	f015 0370 	ands.w	r3, r5, #112	; 0x70
 8001196:	7810      	ldrb	r0, [r2, #0]
 8001198:	d07d      	beq.n	8001296 <mpu_set_sensors+0x112>
        data = INV_CLK_PLL;
 800119a:	2301      	movs	r3, #1
 800119c:	f88d 3006 	strb.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 80011a0:	f10d 0606 	add.w	r6, sp, #6
 80011a4:	4633      	mov	r3, r6
 80011a6:	2201      	movs	r2, #1
 80011a8:	f002 fd1a 	bl	8003be0 <i2c_write>
 80011ac:	2800      	cmp	r0, #0
 80011ae:	f040 80d3 	bne.w	8001358 <mpu_set_sensors+0x1d4>
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 80011b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    data = 0;
 80011b6:	f88d 0006 	strb.w	r0, [sp, #6]
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 80011ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011be:	7323      	strb	r3, [r4, #12]
    if (!(sensors & INV_X_GYRO))
 80011c0:	066b      	lsls	r3, r5, #25
 80011c2:	d578      	bpl.n	80012b6 <mpu_set_sensors+0x132>
 80011c4:	2338      	movs	r3, #56	; 0x38
 80011c6:	2139      	movs	r1, #57	; 0x39
 80011c8:	2201      	movs	r2, #1
 80011ca:	f04f 0e3a 	mov.w	lr, #58	; 0x3a
 80011ce:	f04f 0c3b 	mov.w	ip, #59	; 0x3b
 80011d2:	2703      	movs	r7, #3
 80011d4:	2002      	movs	r0, #2
    if (!(sensors & INV_Y_GYRO))
 80011d6:	f015 0f20 	tst.w	r5, #32
 80011da:	d104      	bne.n	80011e6 <mpu_set_sensors+0x62>
        data |= BIT_STBY_YG;
 80011dc:	4673      	mov	r3, lr
 80011de:	4661      	mov	r1, ip
 80011e0:	463a      	mov	r2, r7
 80011e2:	f88d 0006 	strb.w	r0, [sp, #6]
    if (!(sensors & INV_Z_GYRO))
 80011e6:	06e8      	lsls	r0, r5, #27
        data |= BIT_STBY_ZG;
 80011e8:	bf5c      	itt	pl
 80011ea:	460b      	movpl	r3, r1
 80011ec:	f88d 2006 	strbpl.w	r2, [sp, #6]
    if (!(sensors & INV_XYZ_ACCEL))
 80011f0:	0729      	lsls	r1, r5, #28
        data |= BIT_STBY_XYZA;
 80011f2:	bf58      	it	pl
 80011f4:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 80011f8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80011fc:	7d91      	ldrb	r1, [r2, #22]
 80011fe:	7818      	ldrb	r0, [r3, #0]
 8001200:	2201      	movs	r2, #1
 8001202:	4633      	mov	r3, r6
 8001204:	f002 fcec 	bl	8003be0 <i2c_write>
 8001208:	4602      	mov	r2, r0
 800120a:	2800      	cmp	r0, #0
 800120c:	f040 80a4 	bne.w	8001358 <mpu_set_sensors+0x1d4>
 8001210:	e9d4 3100 	ldrd	r3, r1, [r4]
 8001214:	7808      	ldrb	r0, [r1, #0]
    if (sensors && (sensors != INV_XYZ_ACCEL))
 8001216:	2d00      	cmp	r5, #0
 8001218:	d05d      	beq.n	80012d6 <mpu_set_sensors+0x152>
 800121a:	2d08      	cmp	r5, #8
 800121c:	d071      	beq.n	8001302 <mpu_set_sensors+0x17e>
    if (st.chip_cfg.latched_int == enable)
 800121e:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 8001222:	2900      	cmp	r1, #0
 8001224:	d17b      	bne.n	800131e <mpu_set_sensors+0x19a>
 8001226:	f10d 0707 	add.w	r7, sp, #7
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 800122a:	7919      	ldrb	r1, [r3, #4]
 800122c:	2201      	movs	r2, #1
 800122e:	463b      	mov	r3, r7
 8001230:	f002 fce6 	bl	8003c00 <i2c_read>
 8001234:	2800      	cmp	r0, #0
 8001236:	d16d      	bne.n	8001314 <mpu_set_sensors+0x190>
    if (sensors & INV_XYZ_COMPASS) {
 8001238:	07ea      	lsls	r2, r5, #31
 800123a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800123e:	d554      	bpl.n	80012ea <mpu_set_sensors+0x166>
        data = AKM_SINGLE_MEASUREMENT;
 8001240:	2111      	movs	r1, #17
    if (st.chip_cfg.dmp_on)
 8001242:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
        user_ctrl |= BIT_AUX_IF_EN;
 8001246:	f043 0320 	orr.w	r3, r3, #32
 800124a:	f88d 1006 	strb.w	r1, [sp, #6]
    if (st.chip_cfg.dmp_on)
 800124e:	2a00      	cmp	r2, #0
 8001250:	d054      	beq.n	80012fc <mpu_set_sensors+0x178>
        user_ctrl |= BIT_DMP_EN;
 8001252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001256:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 800125a:	e9d4 1200 	ldrd	r1, r2, [r4]
 800125e:	4633      	mov	r3, r6
 8001260:	7810      	ldrb	r0, [r2, #0]
 8001262:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 8001266:	2201      	movs	r2, #1
 8001268:	f002 fcba 	bl	8003be0 <i2c_write>
 800126c:	2800      	cmp	r0, #0
 800126e:	d151      	bne.n	8001314 <mpu_set_sensors+0x190>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8001270:	e9d4 1200 	ldrd	r1, r2, [r4]
 8001274:	463b      	mov	r3, r7
 8001276:	7810      	ldrb	r0, [r2, #0]
 8001278:	7909      	ldrb	r1, [r1, #4]
 800127a:	2201      	movs	r2, #1
 800127c:	f002 fcb0 	bl	8003be0 <i2c_write>
 8001280:	4606      	mov	r6, r0
 8001282:	2800      	cmp	r0, #0
 8001284:	d146      	bne.n	8001314 <mpu_set_sensors+0x190>
    delay_ms(50);
 8001286:	2032      	movs	r0, #50	; 0x32
    st.chip_cfg.sensors = sensors;
 8001288:	72a5      	strb	r5, [r4, #10]
    st.chip_cfg.lp_accel_mode = 0;
 800128a:	7526      	strb	r6, [r4, #20]
    delay_ms(50);
 800128c:	f002 fcc8 	bl	8003c20 <delay_ms>
}
 8001290:	4630      	mov	r0, r6
 8001292:	b003      	add	sp, #12
 8001294:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (sensors)
 8001296:	b9dd      	cbnz	r5, 80012d0 <mpu_set_sensors+0x14c>
        data = BIT_SLEEP;
 8001298:	2340      	movs	r3, #64	; 0x40
 800129a:	ae02      	add	r6, sp, #8
 800129c:	f806 3d02 	strb.w	r3, [r6, #-2]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 80012a0:	4633      	mov	r3, r6
 80012a2:	2201      	movs	r2, #1
 80012a4:	f002 fc9c 	bl	8003be0 <i2c_write>
 80012a8:	2800      	cmp	r0, #0
 80012aa:	d155      	bne.n	8001358 <mpu_set_sensors+0x1d4>
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 80012ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80012b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012b4:	7323      	strb	r3, [r4, #12]
        data |= BIT_STBY_XG;
 80012b6:	2204      	movs	r2, #4
 80012b8:	233c      	movs	r3, #60	; 0x3c
 80012ba:	f88d 2006 	strb.w	r2, [sp, #6]
 80012be:	213d      	movs	r1, #61	; 0x3d
 80012c0:	2205      	movs	r2, #5
 80012c2:	f04f 0e3e 	mov.w	lr, #62	; 0x3e
 80012c6:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 80012ca:	2707      	movs	r7, #7
 80012cc:	2006      	movs	r0, #6
 80012ce:	e782      	b.n	80011d6 <mpu_set_sensors+0x52>
        data = 0;
 80012d0:	f88d 3006 	strb.w	r3, [sp, #6]
 80012d4:	e764      	b.n	80011a0 <mpu_set_sensors+0x1c>
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 80012d6:	f10d 0707 	add.w	r7, sp, #7
 80012da:	7919      	ldrb	r1, [r3, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	463b      	mov	r3, r7
 80012e0:	f002 fc8e 	bl	8003c00 <i2c_read>
 80012e4:	b9b0      	cbnz	r0, 8001314 <mpu_set_sensors+0x190>
 80012e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
        data = AKM_POWER_DOWN;
 80012ea:	2110      	movs	r1, #16
    if (st.chip_cfg.dmp_on)
 80012ec:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
        user_ctrl &= ~BIT_AUX_IF_EN;
 80012f0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80012f4:	f88d 1006 	strb.w	r1, [sp, #6]
    if (st.chip_cfg.dmp_on)
 80012f8:	2a00      	cmp	r2, #0
 80012fa:	d1aa      	bne.n	8001252 <mpu_set_sensors+0xce>
        user_ctrl &= ~BIT_DMP_EN;
 80012fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001300:	e7a9      	b.n	8001256 <mpu_set_sensors+0xd2>
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8001302:	f10d 0707 	add.w	r7, sp, #7
 8001306:	7919      	ldrb	r1, [r3, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	463b      	mov	r3, r7
 800130c:	f002 fc78 	bl	8003c00 <i2c_read>
 8001310:	2800      	cmp	r0, #0
 8001312:	d0e8      	beq.n	80012e6 <mpu_set_sensors+0x162>
        return -1;
 8001314:	f04f 36ff 	mov.w	r6, #4294967295
}
 8001318:	4630      	mov	r0, r6
 800131a:	b003      	add	sp, #12
 800131c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (st.chip_cfg.bypass_mode)
 800131e:	7ca1      	ldrb	r1, [r4, #18]
        tmp = 0;
 8001320:	f88d 2007 	strb.w	r2, [sp, #7]
    if (st.chip_cfg.bypass_mode)
 8001324:	b1b1      	cbz	r1, 8001354 <mpu_set_sensors+0x1d0>
        tmp |= BIT_BYPASS_EN;
 8001326:	2202      	movs	r2, #2
 8001328:	2182      	movs	r1, #130	; 0x82
 800132a:	f88d 2007 	strb.w	r2, [sp, #7]
    if (st.chip_cfg.active_low_int)
 800132e:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8001332:	b10a      	cbz	r2, 8001338 <mpu_set_sensors+0x1b4>
        tmp |= BIT_ACTL;
 8001334:	f88d 1007 	strb.w	r1, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001338:	f10d 0707 	add.w	r7, sp, #7
 800133c:	7dd9      	ldrb	r1, [r3, #23]
 800133e:	2201      	movs	r2, #1
 8001340:	463b      	mov	r3, r7
 8001342:	f002 fc4d 	bl	8003be0 <i2c_write>
 8001346:	b908      	cbnz	r0, 800134c <mpu_set_sensors+0x1c8>
    st.chip_cfg.latched_int = enable;
 8001348:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
 800134c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8001350:	7810      	ldrb	r0, [r2, #0]
 8001352:	e76a      	b.n	800122a <mpu_set_sensors+0xa6>
    if (st.chip_cfg.bypass_mode)
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	e7ea      	b.n	800132e <mpu_set_sensors+0x1aa>
        st.chip_cfg.sensors = 0;
 8001358:	2300      	movs	r3, #0
        return -1;
 800135a:	f04f 36ff 	mov.w	r6, #4294967295
        st.chip_cfg.sensors = 0;
 800135e:	72a3      	strb	r3, [r4, #10]
        return -1;
 8001360:	e796      	b.n	8001290 <mpu_set_sensors+0x10c>
 8001362:	bf00      	nop
 8001364:	20000000 	.word	0x20000000

08001368 <mpu_init>:
    data[0] = BIT_RESET;
 8001368:	2380      	movs	r3, #128	; 0x80
{
 800136a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136c:	b085      	sub	sp, #20
    data[0] = BIT_RESET;
 800136e:	ad04      	add	r5, sp, #16
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001370:	4c71      	ldr	r4, [pc, #452]	; (8001538 <mpu_init+0x1d0>)
    data[0] = BIT_RESET;
 8001372:	f805 3d08 	strb.w	r3, [r5, #-8]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001376:	e9d4 2100 	ldrd	r2, r1, [r4]
 800137a:	462b      	mov	r3, r5
 800137c:	7808      	ldrb	r0, [r1, #0]
 800137e:	7d51      	ldrb	r1, [r2, #21]
 8001380:	2201      	movs	r2, #1
 8001382:	f002 fc2d 	bl	8003be0 <i2c_write>
 8001386:	2800      	cmp	r0, #0
 8001388:	f040 81a9 	bne.w	80016de <mpu_init+0x376>
 800138c:	4606      	mov	r6, r0
    delay_ms(100);
 800138e:	2064      	movs	r0, #100	; 0x64
 8001390:	f002 fc46 	bl	8003c20 <delay_ms>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001394:	e9d4 3200 	ldrd	r3, r2, [r4]
    data[0] = 0x00;
 8001398:	f88d 6008 	strb.w	r6, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800139c:	7810      	ldrb	r0, [r2, #0]
 800139e:	7d59      	ldrb	r1, [r3, #21]
 80013a0:	2201      	movs	r2, #1
 80013a2:	462b      	mov	r3, r5
 80013a4:	f002 fc1c 	bl	8003be0 <i2c_write>
 80013a8:	2800      	cmp	r0, #0
 80013aa:	f040 8198 	bne.w	80016de <mpu_init+0x376>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 80013ae:	e9d4 2100 	ldrd	r2, r1, [r4]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 80013b2:	2348      	movs	r3, #72	; 0x48
   st.chip_cfg.accel_half = 0;
 80013b4:	74e0      	strb	r0, [r4, #19]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 80013b6:	f88d 3008 	strb.w	r3, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 80013ba:	7808      	ldrb	r0, [r1, #0]
 80013bc:	462b      	mov	r3, r5
 80013be:	7a11      	ldrb	r1, [r2, #8]
 80013c0:	2201      	movs	r2, #1
 80013c2:	f002 fc0d 	bl	8003be0 <i2c_write>
 80013c6:	2800      	cmp	r0, #0
 80013c8:	f040 8189 	bne.w	80016de <mpu_init+0x376>
    st.chip_cfg.sample_rate = 0xFFFF;
 80013cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    st.chip_cfg.clk_src = INV_CLK_PLL;
 80013d0:	2701      	movs	r7, #1
    st.chip_cfg.gyro_fsr = 0xFF;
 80013d2:	f04f 36ff 	mov.w	r6, #4294967295
    st.chip_cfg.fifo_enable = 0xFF;
 80013d6:	f04f 0eff 	mov.w	lr, #255	; 0xff
        data = INV_FSR_2000DPS << 3;
 80013da:	f04f 0c18 	mov.w	ip, #24
    st.chip_cfg.fifo_enable = 0xFF;
 80013de:	7422      	strb	r2, [r4, #16]
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 80013e0:	8522      	strh	r2, [r4, #40]	; 0x28
        data = INV_FSR_2000DPS << 3;
 80013e2:	ad04      	add	r5, sp, #16
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 80013e4:	6862      	ldr	r2, [r4, #4]
 80013e6:	6821      	ldr	r1, [r4, #0]
        data = INV_FSR_2000DPS << 3;
 80013e8:	f805 cd0c 	strb.w	ip, [r5, #-12]!
    st.chip_cfg.lp_accel_mode = 0;
 80013ec:	82a0      	strh	r0, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 80013ee:	f8c4 0016 	str.w	r0, [r4, #22]
    st.chip_cfg.dmp_on = 0;
 80013f2:	6260      	str	r0, [r4, #36]	; 0x24
    st.chip_cfg.gyro_fsr = 0xFF;
 80013f4:	60a6      	str	r6, [r4, #8]
    st.chip_cfg.sample_rate = 0xFFFF;
 80013f6:	81e6      	strh	r6, [r4, #14]
    st.chip_cfg.bypass_mode = 0xFF;
 80013f8:	f884 e012 	strb.w	lr, [r4, #18]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 80013fc:	7327      	strb	r7, [r4, #12]
    st.chip_cfg.active_low_int = 1;
 80013fe:	8467      	strh	r7, [r4, #34]	; 0x22
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8001400:	f8c4 001a 	str.w	r0, [r4, #26]
 8001404:	f8c4 001e 	str.w	r0, [r4, #30]
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8001408:	7810      	ldrb	r0, [r2, #0]
 800140a:	7989      	ldrb	r1, [r1, #6]
 800140c:	462b      	mov	r3, r5
 800140e:	463a      	mov	r2, r7
 8001410:	f002 fbe6 	bl	8003be0 <i2c_write>
 8001414:	2800      	cmp	r0, #0
 8001416:	f040 808b 	bne.w	8001530 <mpu_init+0x1c8>
    st.chip_cfg.gyro_fsr = data >> 3;
 800141a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if (!(st.chip_cfg.sensors))
 800141e:	7aa2      	ldrb	r2, [r4, #10]
    st.chip_cfg.gyro_fsr = data >> 3;
 8001420:	08db      	lsrs	r3, r3, #3
 8001422:	7223      	strb	r3, [r4, #8]
    if (!(st.chip_cfg.sensors))
 8001424:	2a00      	cmp	r2, #0
 8001426:	f000 815a 	beq.w	80016de <mpu_init+0x376>
    if (st.chip_cfg.accel_fsr == (data >> 3))
 800142a:	7a63      	ldrb	r3, [r4, #9]
        data = INV_FSR_2G << 3;
 800142c:	f88d 0004 	strb.w	r0, [sp, #4]
    if (st.chip_cfg.accel_fsr == (data >> 3))
 8001430:	b193      	cbz	r3, 8001458 <mpu_init+0xf0>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8001432:	e9d4 1300 	ldrd	r1, r3, [r4]
 8001436:	463a      	mov	r2, r7
 8001438:	7818      	ldrb	r0, [r3, #0]
 800143a:	79c9      	ldrb	r1, [r1, #7]
 800143c:	462b      	mov	r3, r5
 800143e:	f002 fbcf 	bl	8003be0 <i2c_write>
 8001442:	2800      	cmp	r0, #0
 8001444:	f040 814b 	bne.w	80016de <mpu_init+0x376>
    st.chip_cfg.accel_fsr = data >> 3;
 8001448:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if (!(st.chip_cfg.sensors))
 800144c:	7aa2      	ldrb	r2, [r4, #10]
    st.chip_cfg.accel_fsr = data >> 3;
 800144e:	08db      	lsrs	r3, r3, #3
 8001450:	7263      	strb	r3, [r4, #9]
    if (!(st.chip_cfg.sensors))
 8001452:	2a00      	cmp	r2, #0
 8001454:	f000 8143 	beq.w	80016de <mpu_init+0x376>
        data = INV_FILTER_42HZ;
 8001458:	2203      	movs	r2, #3
    if (st.chip_cfg.lpf == data)
 800145a:	7ae3      	ldrb	r3, [r4, #11]
        data = INV_FILTER_42HZ;
 800145c:	f88d 2004 	strb.w	r2, [sp, #4]
    if (st.chip_cfg.lpf == data)
 8001460:	4293      	cmp	r3, r2
 8001462:	d00d      	beq.n	8001480 <mpu_init+0x118>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8001464:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001468:	7891      	ldrb	r1, [r2, #2]
 800146a:	7818      	ldrb	r0, [r3, #0]
 800146c:	2201      	movs	r2, #1
 800146e:	462b      	mov	r3, r5
 8001470:	f002 fbb6 	bl	8003be0 <i2c_write>
 8001474:	2800      	cmp	r0, #0
 8001476:	f040 8132 	bne.w	80016de <mpu_init+0x376>
    st.chip_cfg.lpf = data;
 800147a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800147e:	72e3      	strb	r3, [r4, #11]
    if (mpu_set_sample_rate(1000))
 8001480:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001484:	f7ff fdb6 	bl	8000ff4 <mpu_set_sample_rate>
 8001488:	2800      	cmp	r0, #0
 800148a:	f040 8128 	bne.w	80016de <mpu_init+0x376>
    if (st.chip_cfg.dmp_on)
 800148e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001492:	b9c3      	cbnz	r3, 80014c6 <mpu_init+0x15e>
        if (!(st.chip_cfg.sensors))
 8001494:	7aa2      	ldrb	r2, [r4, #10]
 8001496:	2a00      	cmp	r2, #0
 8001498:	f000 8121 	beq.w	80016de <mpu_init+0x376>
        if (sensors || st.chip_cfg.lp_accel_mode)
 800149c:	7d22      	ldrb	r2, [r4, #20]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 800149e:	7423      	strb	r3, [r4, #16]
        if (sensors || st.chip_cfg.lp_accel_mode)
 80014a0:	2a00      	cmp	r2, #0
 80014a2:	f000 8125 	beq.w	80016f0 <mpu_init+0x388>
        if (enable && st.chip_cfg.int_enable)
 80014a6:	7c63      	ldrb	r3, [r4, #17]
 80014a8:	b96b      	cbnz	r3, 80014c6 <mpu_init+0x15e>
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 80014aa:	e9d4 1300 	ldrd	r1, r3, [r4]
            tmp = BIT_DATA_RDY_EN;
 80014ae:	2201      	movs	r2, #1
 80014b0:	f88d 2004 	strb.w	r2, [sp, #4]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 80014b4:	7818      	ldrb	r0, [r3, #0]
 80014b6:	7c49      	ldrb	r1, [r1, #17]
 80014b8:	462b      	mov	r3, r5
 80014ba:	f002 fb91 	bl	8003be0 <i2c_write>
 80014be:	b910      	cbnz	r0, 80014c6 <mpu_init+0x15e>
        st.chip_cfg.int_enable = tmp;
 80014c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80014c4:	7463      	strb	r3, [r4, #17]
    if (st.chip_cfg.bypass_mode == bypass_on)
 80014c6:	7ca3      	ldrb	r3, [r4, #18]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	f040 8105 	bne.w	80016d8 <mpu_init+0x370>
{
 80014ce:	260c      	movs	r6, #12
    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 80014d0:	462b      	mov	r3, r5
 80014d2:	2201      	movs	r2, #1
 80014d4:	2100      	movs	r1, #0
 80014d6:	4630      	mov	r0, r6
 80014d8:	f002 fb92 	bl	8003c00 <i2c_read>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 80014dc:	1c73      	adds	r3, r6, #1
        if (!result && (data[0] == AKM_WHOAMI))
 80014de:	b918      	cbnz	r0, 80014e8 <mpu_init+0x180>
 80014e0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80014e4:	2a48      	cmp	r2, #72	; 0x48
 80014e6:	d02b      	beq.n	8001540 <mpu_init+0x1d8>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 80014e8:	b2de      	uxtb	r6, r3
 80014ea:	2e10      	cmp	r6, #16
 80014ec:	d1f0      	bne.n	80014d0 <mpu_init+0x168>
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 80014ee:	89e3      	ldrh	r3, [r4, #14]
 80014f0:	2b09      	cmp	r3, #9
 80014f2:	f240 80f4 	bls.w	80016de <mpu_init+0x376>
    div = st.chip_cfg.sample_rate / rate - 1;
 80014f6:	4911      	ldr	r1, [pc, #68]	; (800153c <mpu_init+0x1d4>)
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 80014f8:	6822      	ldr	r2, [r4, #0]
    div = st.chip_cfg.sample_rate / rate - 1;
 80014fa:	fba1 1303 	umull	r1, r3, r1, r3
 80014fe:	08db      	lsrs	r3, r3, #3
 8001500:	3b01      	subs	r3, #1
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8001502:	6860      	ldr	r0, [r4, #4]
    div = st.chip_cfg.sample_rate / rate - 1;
 8001504:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8001508:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
 800150c:	462b      	mov	r3, r5
 800150e:	7800      	ldrb	r0, [r0, #0]
 8001510:	2201      	movs	r2, #1
 8001512:	f002 fb65 	bl	8003be0 <i2c_write>
 8001516:	4606      	mov	r6, r0
 8001518:	2800      	cmp	r0, #0
 800151a:	f040 80e0 	bne.w	80016de <mpu_init+0x376>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 800151e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001522:	89e3      	ldrh	r3, [r4, #14]
 8001524:	3201      	adds	r2, #1
 8001526:	fb93 f3f2 	sdiv	r3, r3, r2
 800152a:	8523      	strh	r3, [r4, #40]	; 0x28
    mpu_set_sensors(0);
 800152c:	f7ff fe2a 	bl	8001184 <mpu_set_sensors>
}
 8001530:	4630      	mov	r0, r6
 8001532:	b005      	add	sp, #20
 8001534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001536:	bf00      	nop
 8001538:	20000000 	.word	0x20000000
 800153c:	cccccccd 	.word	0xcccccccd
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;

    data[0] = AKM_POWER_DOWN;
 8001540:	2710      	movs	r7, #16
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001542:	4630      	mov	r0, r6
 8001544:	462b      	mov	r3, r5
 8001546:	2201      	movs	r2, #1
 8001548:	210a      	movs	r1, #10
    st.chip_cfg.compass_addr = akm_addr;
 800154a:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    data[0] = AKM_POWER_DOWN;
 800154e:	f88d 7004 	strb.w	r7, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001552:	f002 fb45 	bl	8003be0 <i2c_write>
 8001556:	2800      	cmp	r0, #0
 8001558:	d1c9      	bne.n	80014ee <mpu_init+0x186>
        return -1;
    delay_ms(1);

    data[0] = AKM_FUSE_ROM_ACCESS;
 800155a:	261f      	movs	r6, #31
    delay_ms(1);
 800155c:	2001      	movs	r0, #1
 800155e:	f002 fb5f 	bl	8003c20 <delay_ms>
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001562:	462b      	mov	r3, r5
 8001564:	2201      	movs	r2, #1
 8001566:	210a      	movs	r1, #10
 8001568:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    data[0] = AKM_FUSE_ROM_ACCESS;
 800156c:	f88d 6004 	strb.w	r6, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001570:	f002 fb36 	bl	8003be0 <i2c_write>
 8001574:	2800      	cmp	r0, #0
 8001576:	d1ba      	bne.n	80014ee <mpu_init+0x186>
        return -1;
    delay_ms(1);
 8001578:	2001      	movs	r0, #1
 800157a:	f002 fb51 	bl	8003c20 <delay_ms>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 800157e:	462b      	mov	r3, r5
 8001580:	2203      	movs	r2, #3
 8001582:	4639      	mov	r1, r7
 8001584:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8001588:	f002 fb3a 	bl	8003c00 <i2c_read>
 800158c:	2800      	cmp	r0, #0
 800158e:	d1ae      	bne.n	80014ee <mpu_init+0x186>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8001590:	f89d 2004 	ldrb.w	r2, [sp, #4]
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8001594:	f89d 0005 	ldrb.w	r0, [sp, #5]
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 8001598:	f89d 6006 	ldrb.w	r6, [sp, #6]
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 800159c:	3280      	adds	r2, #128	; 0x80
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 800159e:	3080      	adds	r0, #128	; 0x80
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 80015a0:	3680      	adds	r6, #128	; 0x80
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 80015a2:	85a2      	strh	r2, [r4, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 80015a4:	85e0      	strh	r0, [r4, #46]	; 0x2e

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80015a6:	462b      	mov	r3, r5
 80015a8:	2201      	movs	r2, #1
 80015aa:	210a      	movs	r1, #10
 80015ac:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 80015b0:	8626      	strh	r6, [r4, #48]	; 0x30
    data[0] = AKM_POWER_DOWN;
 80015b2:	f88d 7004 	strb.w	r7, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80015b6:	f002 fb13 	bl	8003be0 <i2c_write>
 80015ba:	4606      	mov	r6, r0
 80015bc:	2800      	cmp	r0, #0
 80015be:	d196      	bne.n	80014ee <mpu_init+0x186>
        return -1;
    delay_ms(1);
 80015c0:	2001      	movs	r0, #1
 80015c2:	f002 fb2d 	bl	8003c20 <delay_ms>
    if (st.chip_cfg.bypass_mode == bypass_on)
 80015c6:	7ca3      	ldrb	r3, [r4, #18]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f040 808d 	bne.w	80016e8 <mpu_init+0x380>

    mpu_set_bypass(0);

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 80015ce:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = 0x40;
 80015d2:	2140      	movs	r1, #64	; 0x40
 80015d4:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 80015d8:	7e91      	ldrb	r1, [r2, #26]
 80015da:	7818      	ldrb	r0, [r3, #0]
 80015dc:	2201      	movs	r2, #1
 80015de:	462b      	mov	r3, r5
 80015e0:	f002 fafe 	bl	8003be0 <i2c_write>
 80015e4:	2800      	cmp	r0, #0
 80015e6:	d182      	bne.n	80014ee <mpu_init+0x186>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 80015e8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 80015ec:	6862      	ldr	r2, [r4, #4]
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 80015ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 80015f2:	6821      	ldr	r1, [r4, #0]
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 80015f4:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 80015f8:	7810      	ldrb	r0, [r2, #0]
 80015fa:	7f89      	ldrb	r1, [r1, #30]
 80015fc:	462b      	mov	r3, r5
 80015fe:	2201      	movs	r2, #1
 8001600:	f002 faee 	bl	8003be0 <i2c_write>
 8001604:	2800      	cmp	r0, #0
 8001606:	f47f af72 	bne.w	80014ee <mpu_init+0x186>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 800160a:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = AKM_REG_ST1;
 800160e:	2102      	movs	r1, #2
 8001610:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 8001614:	7fd1      	ldrb	r1, [r2, #31]
 8001616:	7818      	ldrb	r0, [r3, #0]
 8001618:	2201      	movs	r2, #1
 800161a:	462b      	mov	r3, r5
 800161c:	f002 fae0 	bl	8003be0 <i2c_write>
 8001620:	2800      	cmp	r0, #0
 8001622:	f47f af64 	bne.w	80014ee <mpu_init+0x186>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 8001626:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = BIT_SLAVE_EN | 8;
 800162a:	2188      	movs	r1, #136	; 0x88
 800162c:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 8001630:	f892 1020 	ldrb.w	r1, [r2, #32]
 8001634:	7818      	ldrb	r0, [r3, #0]
 8001636:	2201      	movs	r2, #1
 8001638:	462b      	mov	r3, r5
 800163a:	f002 fad1 	bl	8003be0 <i2c_write>
 800163e:	2800      	cmp	r0, #0
 8001640:	f47f af55 	bne.w	80014ee <mpu_init+0x186>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8001644:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = st.chip_cfg.compass_addr;
 8001648:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 800164c:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8001650:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 8001654:	7818      	ldrb	r0, [r3, #0]
 8001656:	2201      	movs	r2, #1
 8001658:	462b      	mov	r3, r5
 800165a:	f002 fac1 	bl	8003be0 <i2c_write>
 800165e:	2800      	cmp	r0, #0
 8001660:	f47f af45 	bne.w	80014ee <mpu_init+0x186>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8001664:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = AKM_REG_CNTL;
 8001668:	210a      	movs	r1, #10
 800166a:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 800166e:	f892 1022 	ldrb.w	r1, [r2, #34]	; 0x22
 8001672:	7818      	ldrb	r0, [r3, #0]
 8001674:	2201      	movs	r2, #1
 8001676:	462b      	mov	r3, r5
 8001678:	f002 fab2 	bl	8003be0 <i2c_write>
 800167c:	2800      	cmp	r0, #0
 800167e:	f47f af36 	bne.w	80014ee <mpu_init+0x186>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8001682:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = BIT_SLAVE_EN | 1;
 8001686:	2181      	movs	r1, #129	; 0x81
 8001688:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 800168c:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 8001690:	7818      	ldrb	r0, [r3, #0]
 8001692:	2201      	movs	r2, #1
 8001694:	462b      	mov	r3, r5
 8001696:	f002 faa3 	bl	8003be0 <i2c_write>
 800169a:	2800      	cmp	r0, #0
 800169c:	f47f af27 	bne.w	80014ee <mpu_init+0x186>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 80016a0:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = AKM_SINGLE_MEASUREMENT;
 80016a4:	2111      	movs	r1, #17
 80016a6:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 80016aa:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
 80016ae:	7818      	ldrb	r0, [r3, #0]
 80016b0:	2201      	movs	r2, #1
 80016b2:	462b      	mov	r3, r5
 80016b4:	f002 fa94 	bl	8003be0 <i2c_write>
 80016b8:	2800      	cmp	r0, #0
 80016ba:	f47f af18 	bne.w	80014ee <mpu_init+0x186>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 80016be:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = 0x03;
 80016c2:	2103      	movs	r1, #3
 80016c4:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 80016c8:	f892 1027 	ldrb.w	r1, [r2, #39]	; 0x27
 80016cc:	7818      	ldrb	r0, [r3, #0]
 80016ce:	2201      	movs	r2, #1
 80016d0:	462b      	mov	r3, r5
 80016d2:	f002 fa85 	bl	8003be0 <i2c_write>
 80016d6:	e70a      	b.n	80014ee <mpu_init+0x186>
 80016d8:	f7ff fade 	bl	8000c98 <mpu_set_bypass.part.1.constprop.7>
 80016dc:	e6f7      	b.n	80014ce <mpu_init+0x166>
        return -1;
 80016de:	f04f 36ff 	mov.w	r6, #4294967295
}
 80016e2:	4630      	mov	r0, r6
 80016e4:	b005      	add	sp, #20
 80016e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016e8:	4630      	mov	r0, r6
 80016ea:	f7ff fa63 	bl	8000bb4 <mpu_set_bypass.part.1>
 80016ee:	e76e      	b.n	80015ce <mpu_init+0x266>
            tmp = 0x00;
 80016f0:	f88d 2004 	strb.w	r2, [sp, #4]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 80016f4:	e9d4 1300 	ldrd	r1, r3, [r4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	7818      	ldrb	r0, [r3, #0]
 80016fc:	7c49      	ldrb	r1, [r1, #17]
 80016fe:	462b      	mov	r3, r5
 8001700:	f002 fa6e 	bl	8003be0 <i2c_write>
 8001704:	2800      	cmp	r0, #0
 8001706:	f43f aedb 	beq.w	80014c0 <mpu_init+0x158>
 800170a:	e6dc      	b.n	80014c6 <mpu_init+0x15e>

0800170c <mpu_read_fifo_stream>:
{
 800170c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!st.chip_cfg.dmp_on)
 8001710:	4d24      	ldr	r5, [pc, #144]	; (80017a4 <mpu_read_fifo_stream+0x98>)
{
 8001712:	b082      	sub	sp, #8
    if (!st.chip_cfg.dmp_on)
 8001714:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8001718:	2b00      	cmp	r3, #0
 800171a:	d038      	beq.n	800178e <mpu_read_fifo_stream+0x82>
    if (!st.chip_cfg.sensors)
 800171c:	7aab      	ldrb	r3, [r5, #10]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d035      	beq.n	800178e <mpu_read_fifo_stream+0x82>
 8001722:	4617      	mov	r7, r2
    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8001724:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001728:	4688      	mov	r8, r1
 800172a:	4606      	mov	r6, r0
 800172c:	7b11      	ldrb	r1, [r2, #12]
 800172e:	7818      	ldrb	r0, [r3, #0]
 8001730:	2202      	movs	r2, #2
 8001732:	ab01      	add	r3, sp, #4
 8001734:	f002 fa64 	bl	8003c00 <i2c_read>
 8001738:	bb48      	cbnz	r0, 800178e <mpu_read_fifo_stream+0x82>
    fifo_count = (tmp[0] << 8) | tmp[1];
 800173a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800173e:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8001742:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    if (fifo_count < length) {
 8001746:	42b4      	cmp	r4, r6
 8001748:	d320      	bcc.n	800178c <mpu_read_fifo_stream+0x80>
 800174a:	e9d5 2300 	ldrd	r2, r3, [r5]
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 800174e:	8859      	ldrh	r1, [r3, #2]
 8001750:	7818      	ldrb	r0, [r3, #0]
 8001752:	ebb4 0f51 	cmp.w	r4, r1, lsr #1
 8001756:	d90c      	bls.n	8001772 <mpu_read_fifo_stream+0x66>
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8001758:	7cd1      	ldrb	r1, [r2, #19]
 800175a:	ab01      	add	r3, sp, #4
 800175c:	2201      	movs	r2, #1
 800175e:	f002 fa4f 	bl	8003c00 <i2c_read>
 8001762:	b9a0      	cbnz	r0, 800178e <mpu_read_fifo_stream+0x82>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8001764:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001768:	06db      	lsls	r3, r3, #27
 800176a:	d415      	bmi.n	8001798 <mpu_read_fifo_stream+0x8c>
 800176c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001770:	7818      	ldrb	r0, [r3, #0]
    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 8001772:	7b51      	ldrb	r1, [r2, #13]
 8001774:	4643      	mov	r3, r8
 8001776:	b2f2      	uxtb	r2, r6
 8001778:	f002 fa42 	bl	8003c00 <i2c_read>
 800177c:	b938      	cbnz	r0, 800178e <mpu_read_fifo_stream+0x82>
    more[0] = fifo_count / length - 1;
 800177e:	fbb4 f4f6 	udiv	r4, r4, r6
 8001782:	3c01      	subs	r4, #1
 8001784:	703c      	strb	r4, [r7, #0]
}
 8001786:	b002      	add	sp, #8
 8001788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        more[0] = 0;
 800178c:	7038      	strb	r0, [r7, #0]
        return -1;
 800178e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001792:	b002      	add	sp, #8
 8001794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            mpu_reset_fifo();
 8001798:	f7ff fac2 	bl	8000d20 <mpu_reset_fifo>
            return -2;
 800179c:	f06f 0001 	mvn.w	r0, #1
 80017a0:	e7f1      	b.n	8001786 <mpu_read_fifo_stream+0x7a>
 80017a2:	bf00      	nop
 80017a4:	20000000 	.word	0x20000000

080017a8 <mpu_write_mem>:
    if (!data)
 80017a8:	b35a      	cbz	r2, 8001802 <mpu_write_mem+0x5a>
{
 80017aa:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!st.chip_cfg.sensors)
 80017ac:	4c16      	ldr	r4, [pc, #88]	; (8001808 <mpu_write_mem+0x60>)
{
 80017ae:	b083      	sub	sp, #12
    if (!st.chip_cfg.sensors)
 80017b0:	7aa3      	ldrb	r3, [r4, #10]
 80017b2:	b313      	cbz	r3, 80017fa <mpu_write_mem+0x52>
    if (tmp[1] + length > st.hw->bank_size)
 80017b4:	6867      	ldr	r7, [r4, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80017b6:	b2c3      	uxtb	r3, r0
    if (tmp[1] + length > st.hw->bank_size)
 80017b8:	897d      	ldrh	r5, [r7, #10]
 80017ba:	185e      	adds	r6, r3, r1
    tmp[0] = (unsigned char)(mem_addr >> 8);
 80017bc:	0a00      	lsrs	r0, r0, #8
    if (tmp[1] + length > st.hw->bank_size)
 80017be:	42ae      	cmp	r6, r5
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80017c0:	f88d 3005 	strb.w	r3, [sp, #5]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 80017c4:	f88d 0004 	strb.w	r0, [sp, #4]
    if (tmp[1] + length > st.hw->bank_size)
 80017c8:	dc17      	bgt.n	80017fa <mpu_write_mem+0x52>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80017ca:	6823      	ldr	r3, [r4, #0]
 80017cc:	4615      	mov	r5, r2
 80017ce:	460e      	mov	r6, r1
 80017d0:	7838      	ldrb	r0, [r7, #0]
 80017d2:	7ed9      	ldrb	r1, [r3, #27]
 80017d4:	2202      	movs	r2, #2
 80017d6:	ab01      	add	r3, sp, #4
 80017d8:	f002 fa02 	bl	8003be0 <i2c_write>
 80017dc:	b968      	cbnz	r0, 80017fa <mpu_write_mem+0x52>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 80017de:	e9d4 1000 	ldrd	r1, r0, [r4]
 80017e2:	462b      	mov	r3, r5
 80017e4:	b2f2      	uxtb	r2, r6
 80017e6:	7e09      	ldrb	r1, [r1, #24]
 80017e8:	7800      	ldrb	r0, [r0, #0]
 80017ea:	f002 f9f9 	bl	8003be0 <i2c_write>
 80017ee:	3000      	adds	r0, #0
 80017f0:	bf18      	it	ne
 80017f2:	2001      	movne	r0, #1
 80017f4:	4240      	negs	r0, r0
}
 80017f6:	b003      	add	sp, #12
 80017f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
 80017fa:	f04f 30ff 	mov.w	r0, #4294967295
}
 80017fe:	b003      	add	sp, #12
 8001800:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
 8001802:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001806:	4770      	bx	lr
 8001808:	20000000 	.word	0x20000000

0800180c <mpu_load_firmware>:
{
 800180c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (st.chip_cfg.dmp_loaded)
 8001810:	4d4f      	ldr	r5, [pc, #316]	; (8001950 <mpu_load_firmware+0x144>)
{
 8001812:	b08b      	sub	sp, #44	; 0x2c
    if (st.chip_cfg.dmp_loaded)
 8001814:	f895 4025 	ldrb.w	r4, [r5, #37]	; 0x25
 8001818:	2c00      	cmp	r4, #0
 800181a:	d172      	bne.n	8001902 <mpu_load_firmware+0xf6>
    if (!firmware)
 800181c:	2900      	cmp	r1, #0
 800181e:	d070      	beq.n	8001902 <mpu_load_firmware+0xf6>
 8001820:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001824:	9101      	str	r1, [sp, #4]
 8001826:	4681      	mov	r9, r0
    for (ii = 0; ii < length; ii += this_write) {
 8001828:	2800      	cmp	r0, #0
 800182a:	f000 808c 	beq.w	8001946 <mpu_load_firmware+0x13a>
        this_write = min(LOAD_CHUNK, length - ii);
 800182e:	2810      	cmp	r0, #16
 8001830:	4606      	mov	r6, r0
 8001832:	bfa8      	it	ge
 8001834:	2610      	movge	r6, #16
    if (!st.chip_cfg.sensors)
 8001836:	7aab      	ldrb	r3, [r5, #10]
        this_write = min(LOAD_CHUNK, length - ii);
 8001838:	fa1f fb86 	uxth.w	fp, r6
    if (!st.chip_cfg.sensors)
 800183c:	2b00      	cmp	r3, #0
 800183e:	d060      	beq.n	8001902 <mpu_load_firmware+0xf6>
    if (tmp[1] + length > st.hw->bank_size)
 8001840:	6869      	ldr	r1, [r5, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8001842:	f8ad 4014 	strh.w	r4, [sp, #20]
    if (tmp[1] + length > st.hw->bank_size)
 8001846:	894b      	ldrh	r3, [r1, #10]
 8001848:	42b3      	cmp	r3, r6
 800184a:	db5a      	blt.n	8001902 <mpu_load_firmware+0xf6>
 800184c:	9f01      	ldr	r7, [sp, #4]
 800184e:	f10d 0a14 	add.w	sl, sp, #20
 8001852:	e035      	b.n	80018c0 <mpu_load_firmware+0xb4>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8001854:	682b      	ldr	r3, [r5, #0]
 8001856:	7808      	ldrb	r0, [r1, #0]
 8001858:	2202      	movs	r2, #2
 800185a:	7ed9      	ldrb	r1, [r3, #27]
 800185c:	4653      	mov	r3, sl
 800185e:	f002 f9bf 	bl	8003be0 <i2c_write>
 8001862:	2800      	cmp	r0, #0
 8001864:	d14d      	bne.n	8001902 <mpu_load_firmware+0xf6>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8001866:	e9d5 1300 	ldrd	r1, r3, [r5]
 800186a:	4642      	mov	r2, r8
 800186c:	7818      	ldrb	r0, [r3, #0]
 800186e:	7e09      	ldrb	r1, [r1, #24]
 8001870:	ab06      	add	r3, sp, #24
 8001872:	f002 f9c5 	bl	8003c00 <i2c_read>
 8001876:	2800      	cmp	r0, #0
 8001878:	d143      	bne.n	8001902 <mpu_load_firmware+0xf6>
        if (memcmp(firmware+ii, cur, this_write))
 800187a:	4632      	mov	r2, r6
 800187c:	4638      	mov	r0, r7
 800187e:	a906      	add	r1, sp, #24
 8001880:	f006 fd30 	bl	80082e4 <memcmp>
 8001884:	2800      	cmp	r0, #0
 8001886:	d141      	bne.n	800190c <mpu_load_firmware+0x100>
    for (ii = 0; ii < length; ii += this_write) {
 8001888:	445c      	add	r4, fp
 800188a:	b2a4      	uxth	r4, r4
 800188c:	45a1      	cmp	r9, r4
 800188e:	d942      	bls.n	8001916 <mpu_load_firmware+0x10a>
        this_write = min(LOAD_CHUNK, length - ii);
 8001890:	eba9 0604 	sub.w	r6, r9, r4
 8001894:	2e10      	cmp	r6, #16
 8001896:	bfa8      	it	ge
 8001898:	2610      	movge	r6, #16
    if (!data)
 800189a:	9b01      	ldr	r3, [sp, #4]
        this_write = min(LOAD_CHUNK, length - ii);
 800189c:	fa1f fb86 	uxth.w	fp, r6
    if (!data)
 80018a0:	191f      	adds	r7, r3, r4
 80018a2:	d02e      	beq.n	8001902 <mpu_load_firmware+0xf6>
    if (!st.chip_cfg.sensors)
 80018a4:	7aab      	ldrb	r3, [r5, #10]
 80018a6:	b363      	cbz	r3, 8001902 <mpu_load_firmware+0xf6>
    tmp[0] = (unsigned char)(mem_addr >> 8);
 80018a8:	0a22      	lsrs	r2, r4, #8
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80018aa:	b2e3      	uxtb	r3, r4
    if (tmp[1] + length > st.hw->bank_size)
 80018ac:	6869      	ldr	r1, [r5, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 80018ae:	f88d 2014 	strb.w	r2, [sp, #20]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80018b2:	f88d 3015 	strb.w	r3, [sp, #21]
    if (tmp[1] + length > st.hw->bank_size)
 80018b6:	8948      	ldrh	r0, [r1, #10]
 80018b8:	b2b2      	uxth	r2, r6
 80018ba:	4413      	add	r3, r2
 80018bc:	4283      	cmp	r3, r0
 80018be:	dc20      	bgt.n	8001902 <mpu_load_firmware+0xf6>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80018c0:	682b      	ldr	r3, [r5, #0]
 80018c2:	7808      	ldrb	r0, [r1, #0]
 80018c4:	2202      	movs	r2, #2
 80018c6:	7ed9      	ldrb	r1, [r3, #27]
 80018c8:	4653      	mov	r3, sl
 80018ca:	f002 f989 	bl	8003be0 <i2c_write>
 80018ce:	b9c0      	cbnz	r0, 8001902 <mpu_load_firmware+0xf6>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 80018d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80018d4:	fa5f f886 	uxtb.w	r8, r6
 80018d8:	7e11      	ldrb	r1, [r2, #24]
 80018da:	7818      	ldrb	r0, [r3, #0]
 80018dc:	4642      	mov	r2, r8
 80018de:	463b      	mov	r3, r7
 80018e0:	f002 f97e 	bl	8003be0 <i2c_write>
 80018e4:	b968      	cbnz	r0, 8001902 <mpu_load_firmware+0xf6>
    if (!st.chip_cfg.sensors)
 80018e6:	7aab      	ldrb	r3, [r5, #10]
 80018e8:	b15b      	cbz	r3, 8001902 <mpu_load_firmware+0xf6>
    tmp[0] = (unsigned char)(mem_addr >> 8);
 80018ea:	0a22      	lsrs	r2, r4, #8
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80018ec:	b2e3      	uxtb	r3, r4
    if (tmp[1] + length > st.hw->bank_size)
 80018ee:	6869      	ldr	r1, [r5, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80018f0:	f88d 3015 	strb.w	r3, [sp, #21]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 80018f4:	f88d 2014 	strb.w	r2, [sp, #20]
 80018f8:	b2b6      	uxth	r6, r6
    if (tmp[1] + length > st.hw->bank_size)
 80018fa:	894a      	ldrh	r2, [r1, #10]
 80018fc:	4433      	add	r3, r6
 80018fe:	4293      	cmp	r3, r2
 8001900:	dda8      	ble.n	8001854 <mpu_load_firmware+0x48>
            return -1;
 8001902:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001906:	b00b      	add	sp, #44	; 0x2c
 8001908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return -2;
 800190c:	f06f 0001 	mvn.w	r0, #1
}
 8001910:	b00b      	add	sp, #44	; 0x2c
 8001912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001916:	9802      	ldr	r0, [sp, #8]
    tmp[0] = start_addr >> 8;
 8001918:	0a03      	lsrs	r3, r0, #8
 800191a:	f88d 3014 	strb.w	r3, [sp, #20]
    tmp[1] = start_addr & 0xFF;
 800191e:	f88d 0015 	strb.w	r0, [sp, #21]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8001922:	e9d5 1200 	ldrd	r1, r2, [r5]
 8001926:	4653      	mov	r3, sl
 8001928:	7810      	ldrb	r0, [r2, #0]
 800192a:	7f49      	ldrb	r1, [r1, #29]
 800192c:	2202      	movs	r2, #2
 800192e:	f002 f957 	bl	8003be0 <i2c_write>
 8001932:	2800      	cmp	r0, #0
 8001934:	d1e5      	bne.n	8001902 <mpu_load_firmware+0xf6>
    st.chip_cfg.dmp_loaded = 1;
 8001936:	2301      	movs	r3, #1
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8001938:	9a03      	ldr	r2, [sp, #12]
    st.chip_cfg.dmp_loaded = 1;
 800193a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 800193e:	84ea      	strh	r2, [r5, #38]	; 0x26
}
 8001940:	b00b      	add	sp, #44	; 0x2c
 8001942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001946:	f10d 0a14 	add.w	sl, sp, #20
 800194a:	4610      	mov	r0, r2
 800194c:	e7e4      	b.n	8001918 <mpu_load_firmware+0x10c>
 800194e:	bf00      	nop
 8001950:	20000000 	.word	0x20000000

08001954 <mpu_set_dmp_state>:
{
 8001954:	b570      	push	{r4, r5, r6, lr}
    if (st.chip_cfg.dmp_on == enable)
 8001956:	4c6a      	ldr	r4, [pc, #424]	; (8001b00 <mpu_set_dmp_state+0x1ac>)
{
 8001958:	b082      	sub	sp, #8
    if (st.chip_cfg.dmp_on == enable)
 800195a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800195e:	4282      	cmp	r2, r0
 8001960:	d066      	beq.n	8001a30 <mpu_set_dmp_state+0xdc>
 8001962:	4603      	mov	r3, r0
    if (enable) {
 8001964:	2800      	cmp	r0, #0
 8001966:	d03c      	beq.n	80019e2 <mpu_set_dmp_state+0x8e>
        if (!st.chip_cfg.dmp_loaded)
 8001968:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80c4 	beq.w	8001afa <mpu_set_dmp_state+0x1a6>
    if (st.chip_cfg.dmp_on) {
 8001972:	2a00      	cmp	r2, #0
 8001974:	d05f      	beq.n	8001a36 <mpu_set_dmp_state+0xe2>
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001976:	e9d4 1200 	ldrd	r1, r2, [r4]
            tmp = 0x00;
 800197a:	2300      	movs	r3, #0
 800197c:	ad02      	add	r5, sp, #8
 800197e:	f805 3d01 	strb.w	r3, [r5, #-1]!
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001982:	7810      	ldrb	r0, [r2, #0]
 8001984:	462b      	mov	r3, r5
 8001986:	7c49      	ldrb	r1, [r1, #17]
 8001988:	2201      	movs	r2, #1
 800198a:	f002 f929 	bl	8003be0 <i2c_write>
 800198e:	b910      	cbnz	r0, 8001996 <mpu_set_dmp_state+0x42>
        st.chip_cfg.int_enable = tmp;
 8001990:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001994:	7463      	strb	r3, [r4, #17]
    if (st.chip_cfg.bypass_mode == bypass_on)
 8001996:	7ca3      	ldrb	r3, [r4, #18]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d170      	bne.n	8001a7e <mpu_set_dmp_state+0x12a>
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 800199c:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 800199e:	f7ff fb29 	bl	8000ff4 <mpu_set_sample_rate>
        tmp = 0;
 80019a2:	2100      	movs	r1, #0
 80019a4:	ab02      	add	r3, sp, #8
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 80019a6:	6862      	ldr	r2, [r4, #4]
        tmp = 0;
 80019a8:	f803 1d02 	strb.w	r1, [r3, #-2]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 80019ac:	7810      	ldrb	r0, [r2, #0]
 80019ae:	2123      	movs	r1, #35	; 0x23
 80019b0:	2201      	movs	r2, #1
 80019b2:	f002 f915 	bl	8003be0 <i2c_write>
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 80019b6:	e9d4 1000 	ldrd	r1, r0, [r4]
            tmp = BIT_DMP_INT_EN;
 80019ba:	2302      	movs	r3, #2
        st.chip_cfg.dmp_on = 1;
 80019bc:	2201      	movs	r2, #1
            tmp = BIT_DMP_INT_EN;
 80019be:	f88d 3007 	strb.w	r3, [sp, #7]
        st.chip_cfg.dmp_on = 1;
 80019c2:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 80019c6:	462b      	mov	r3, r5
 80019c8:	7c49      	ldrb	r1, [r1, #17]
 80019ca:	7800      	ldrb	r0, [r0, #0]
 80019cc:	f002 f908 	bl	8003be0 <i2c_write>
 80019d0:	b910      	cbnz	r0, 80019d8 <mpu_set_dmp_state+0x84>
        st.chip_cfg.int_enable = tmp;
 80019d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80019d6:	7463      	strb	r3, [r4, #17]
        mpu_reset_fifo();
 80019d8:	f7ff f9a2 	bl	8000d20 <mpu_reset_fifo>
    return 0;
 80019dc:	2000      	movs	r0, #0
}
 80019de:	b002      	add	sp, #8
 80019e0:	bd70      	pop	{r4, r5, r6, pc}
 80019e2:	6861      	ldr	r1, [r4, #4]
 80019e4:	7808      	ldrb	r0, [r1, #0]
    if (st.chip_cfg.dmp_on) {
 80019e6:	2a00      	cmp	r2, #0
 80019e8:	d138      	bne.n	8001a5c <mpu_set_dmp_state+0x108>
        if (!st.chip_cfg.sensors)
 80019ea:	7aa3      	ldrb	r3, [r4, #10]
 80019ec:	f10d 0507 	add.w	r5, sp, #7
 80019f0:	b173      	cbz	r3, 8001a10 <mpu_set_dmp_state+0xbc>
            tmp = 0x00;
 80019f2:	ad02      	add	r5, sp, #8
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 80019f4:	6821      	ldr	r1, [r4, #0]
            tmp = 0x00;
 80019f6:	f805 2d01 	strb.w	r2, [r5, #-1]!
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 80019fa:	462b      	mov	r3, r5
 80019fc:	7c49      	ldrb	r1, [r1, #17]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f002 f8ee 	bl	8003be0 <i2c_write>
 8001a04:	b910      	cbnz	r0, 8001a0c <mpu_set_dmp_state+0xb8>
        st.chip_cfg.int_enable = tmp;
 8001a06:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001a0a:	7463      	strb	r3, [r4, #17]
 8001a0c:	6863      	ldr	r3, [r4, #4]
 8001a0e:	7818      	ldrb	r0, [r3, #0]
        st.chip_cfg.dmp_on = 0;
 8001a10:	2600      	movs	r6, #0
        tmp = st.chip_cfg.fifo_enable;
 8001a12:	7c21      	ldrb	r1, [r4, #16]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001a14:	462b      	mov	r3, r5
 8001a16:	2201      	movs	r2, #1
        tmp = st.chip_cfg.fifo_enable;
 8001a18:	f88d 1007 	strb.w	r1, [sp, #7]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001a1c:	2123      	movs	r1, #35	; 0x23
 8001a1e:	f002 f8df 	bl	8003be0 <i2c_write>
        st.chip_cfg.dmp_on = 0;
 8001a22:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
        mpu_reset_fifo();
 8001a26:	f7ff f97b 	bl	8000d20 <mpu_reset_fifo>
 8001a2a:	4630      	mov	r0, r6
}
 8001a2c:	b002      	add	sp, #8
 8001a2e:	bd70      	pop	{r4, r5, r6, pc}
        return 0;
 8001a30:	2000      	movs	r0, #0
}
 8001a32:	b002      	add	sp, #8
 8001a34:	bd70      	pop	{r4, r5, r6, pc}
        if (!st.chip_cfg.sensors)
 8001a36:	7aa3      	ldrb	r3, [r4, #10]
 8001a38:	f10d 0507 	add.w	r5, sp, #7
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0aa      	beq.n	8001996 <mpu_set_dmp_state+0x42>
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001a40:	e9d4 1000 	ldrd	r1, r0, [r4]
            tmp = 0x00;
 8001a44:	ad02      	add	r5, sp, #8
 8001a46:	f805 2d01 	strb.w	r2, [r5, #-1]!
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001a4a:	462b      	mov	r3, r5
 8001a4c:	7c49      	ldrb	r1, [r1, #17]
 8001a4e:	7800      	ldrb	r0, [r0, #0]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f002 f8c5 	bl	8003be0 <i2c_write>
 8001a56:	2800      	cmp	r0, #0
 8001a58:	d09a      	beq.n	8001990 <mpu_set_dmp_state+0x3c>
 8001a5a:	e79c      	b.n	8001996 <mpu_set_dmp_state+0x42>
            tmp = 0x00;
 8001a5c:	ad02      	add	r5, sp, #8
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001a5e:	6822      	ldr	r2, [r4, #0]
            tmp = 0x00;
 8001a60:	f805 3d01 	strb.w	r3, [r5, #-1]!
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001a64:	7c51      	ldrb	r1, [r2, #17]
 8001a66:	462b      	mov	r3, r5
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f002 f8b9 	bl	8003be0 <i2c_write>
 8001a6e:	2800      	cmp	r0, #0
 8001a70:	d1cc      	bne.n	8001a0c <mpu_set_dmp_state+0xb8>
        st.chip_cfg.int_enable = tmp;
 8001a72:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001a76:	6863      	ldr	r3, [r4, #4]
 8001a78:	7462      	strb	r2, [r4, #17]
 8001a7a:	7818      	ldrb	r0, [r3, #0]
 8001a7c:	e7c8      	b.n	8001a10 <mpu_set_dmp_state+0xbc>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001a7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001a82:	7911      	ldrb	r1, [r2, #4]
 8001a84:	7818      	ldrb	r0, [r3, #0]
 8001a86:	2201      	movs	r2, #1
 8001a88:	462b      	mov	r3, r5
 8001a8a:	f002 f8b9 	bl	8003c00 <i2c_read>
 8001a8e:	2800      	cmp	r0, #0
 8001a90:	d184      	bne.n	800199c <mpu_set_dmp_state+0x48>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8001a92:	7aa2      	ldrb	r2, [r4, #10]
 8001a94:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001a98:	07d2      	lsls	r2, r2, #31
            tmp |= BIT_AUX_IF_EN;
 8001a9a:	bf4c      	ite	mi
 8001a9c:	f043 0320 	orrmi.w	r3, r3, #32
            tmp &= ~BIT_AUX_IF_EN;
 8001aa0:	f003 03df 	andpl.w	r3, r3, #223	; 0xdf
 8001aa4:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001aa8:	e9d4 1200 	ldrd	r1, r2, [r4]
 8001aac:	462b      	mov	r3, r5
 8001aae:	7810      	ldrb	r0, [r2, #0]
 8001ab0:	7909      	ldrb	r1, [r1, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f002 f894 	bl	8003be0 <i2c_write>
 8001ab8:	2800      	cmp	r0, #0
 8001aba:	f47f af6f 	bne.w	800199c <mpu_set_dmp_state+0x48>
        delay_ms(3);
 8001abe:	2003      	movs	r0, #3
 8001ac0:	f002 f8ae 	bl	8003c20 <delay_ms>
        if (st.chip_cfg.active_low_int)
 8001ac4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001ac8:	b1ab      	cbz	r3, 8001af6 <mpu_set_dmp_state+0x1a2>
 8001aca:	21b0      	movs	r1, #176	; 0xb0
            tmp = BIT_ACTL;
 8001acc:	2380      	movs	r3, #128	; 0x80
        if (st.chip_cfg.latched_int)
 8001ace:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8001ad2:	f88d 3007 	strb.w	r3, [sp, #7]
 8001ad6:	b10a      	cbz	r2, 8001adc <mpu_set_dmp_state+0x188>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8001ad8:	f88d 1007 	strb.w	r1, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001adc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001ae0:	7dd1      	ldrb	r1, [r2, #23]
 8001ae2:	7818      	ldrb	r0, [r3, #0]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	462b      	mov	r3, r5
 8001ae8:	f002 f87a 	bl	8003be0 <i2c_write>
 8001aec:	2800      	cmp	r0, #0
 8001aee:	f47f af55 	bne.w	800199c <mpu_set_dmp_state+0x48>
    st.chip_cfg.bypass_mode = bypass_on;
 8001af2:	74a0      	strb	r0, [r4, #18]
 8001af4:	e752      	b.n	800199c <mpu_set_dmp_state+0x48>
        if (st.chip_cfg.active_low_int)
 8001af6:	2130      	movs	r1, #48	; 0x30
 8001af8:	e7e9      	b.n	8001ace <mpu_set_dmp_state+0x17a>
            return -1;
 8001afa:	f04f 30ff 	mov.w	r0, #4294967295
 8001afe:	e76e      	b.n	80019de <mpu_set_dmp_state+0x8a>
 8001b00:	20000000 	.word	0x20000000

08001b04 <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
 8001b04:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8001b06:	4e2b      	ldr	r6, [pc, #172]	; (8001bb4 <mpu_get_compass_reg+0xb0>)
{
 8001b08:	b085      	sub	sp, #20
    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8001b0a:	7ab3      	ldrb	r3, [r6, #10]
 8001b0c:	07db      	lsls	r3, r3, #31
 8001b0e:	d548      	bpl.n	8001ba2 <mpu_get_compass_reg+0x9e>
        return -1;
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
 8001b10:	e9d6 2300 	ldrd	r2, r3, [r6]
 8001b14:	460d      	mov	r5, r1
 8001b16:	4604      	mov	r4, r0
 8001b18:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
 8001b1c:	7818      	ldrb	r0, [r3, #0]
 8001b1e:	2208      	movs	r2, #8
 8001b20:	ab01      	add	r3, sp, #4
 8001b22:	f002 f86d 	bl	8003c00 <i2c_read>
 8001b26:	4607      	mov	r7, r0
 8001b28:	2800      	cmp	r0, #0
 8001b2a:	d13a      	bne.n	8001ba2 <mpu_get_compass_reg+0x9e>
        return -2;
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
 8001b2c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d137      	bne.n	8001ba8 <mpu_get_compass_reg+0xa4>
        return -2;
    if (tmp[7] & AKM_OVERFLOW)
 8001b38:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	db36      	blt.n	8001bae <mpu_get_compass_reg+0xaa>
        return -3;
#endif
    data[0] = (tmp[2] << 8) | tmp[1];
 8001b40:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001b44:	f89d 1005 	ldrb.w	r1, [sp, #5]
    data[1] = (tmp[4] << 8) | tmp[3];
    data[2] = (tmp[6] << 8) | tmp[5];
 8001b48:	f89d 000a 	ldrb.w	r0, [sp, #10]
    data[0] = (tmp[2] << 8) | tmp[1];
 8001b4c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
    data[1] = (tmp[4] << 8) | tmp[3];
 8001b50:	f89d c008 	ldrb.w	ip, [sp, #8]
 8001b54:	f89d 2007 	ldrb.w	r2, [sp, #7]
    data[2] = (tmp[6] << 8) | tmp[5];
 8001b58:	f89d 3009 	ldrb.w	r3, [sp, #9]
    data[1] = (tmp[4] << 8) | tmp[3];
 8001b5c:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    data[2] = (tmp[6] << 8) | tmp[5];
 8001b60:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    data[0] = (tmp[2] << 8) | tmp[1];
 8001b64:	b209      	sxth	r1, r1
    data[1] = (tmp[4] << 8) | tmp[3];
 8001b66:	b212      	sxth	r2, r2
    data[2] = (tmp[6] << 8) | tmp[5];
 8001b68:	b21b      	sxth	r3, r3
    data[0] = (tmp[2] << 8) | tmp[1];
 8001b6a:	8021      	strh	r1, [r4, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
 8001b6c:	8062      	strh	r2, [r4, #2]
    data[2] = (tmp[6] << 8) | tmp[5];
 8001b6e:	80a3      	strh	r3, [r4, #4]

    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
 8001b70:	f9b6 002c 	ldrsh.w	r0, [r6, #44]	; 0x2c
 8001b74:	fb01 f100 	mul.w	r1, r1, r0
 8001b78:	1209      	asrs	r1, r1, #8
 8001b7a:	8021      	strh	r1, [r4, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
 8001b7c:	f9b6 102e 	ldrsh.w	r1, [r6, #46]	; 0x2e
 8001b80:	fb02 f201 	mul.w	r2, r2, r1
 8001b84:	1212      	asrs	r2, r2, #8
 8001b86:	8062      	strh	r2, [r4, #2]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
 8001b88:	f9b6 2030 	ldrsh.w	r2, [r6, #48]	; 0x30
 8001b8c:	fb03 f302 	mul.w	r3, r3, r2
 8001b90:	121b      	asrs	r3, r3, #8
 8001b92:	80a3      	strh	r3, [r4, #4]

    if (timestamp)
 8001b94:	b115      	cbz	r5, 8001b9c <mpu_get_compass_reg+0x98>
        get_ms(timestamp);
 8001b96:	4628      	mov	r0, r5
 8001b98:	f002 f844 	bl	8003c24 <get_ms>
    return 0;
#else
    return -1;
#endif
}
 8001b9c:	4638      	mov	r0, r7
 8001b9e:	b005      	add	sp, #20
 8001ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
 8001ba2:	f04f 37ff 	mov.w	r7, #4294967295
 8001ba6:	e7f9      	b.n	8001b9c <mpu_get_compass_reg+0x98>
        return -2;
 8001ba8:	f06f 0701 	mvn.w	r7, #1
 8001bac:	e7f6      	b.n	8001b9c <mpu_get_compass_reg+0x98>
        return -3;
 8001bae:	f06f 0702 	mvn.w	r7, #2
 8001bb2:	e7f3      	b.n	8001b9c <mpu_get_compass_reg+0x98>
 8001bb4:	20000000 	.word	0x20000000

08001bb8 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 8001bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8001bbc:	4b59      	ldr	r3, [pc, #356]	; (8001d24 <dmp_enable_feature+0x16c>)
{
 8001bbe:	b087      	sub	sp, #28
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8001bc0:	ad06      	add	r5, sp, #24
 8001bc2:	f845 3d0c 	str.w	r3, [r5, #-12]!
{
 8001bc6:	4604      	mov	r4, r0
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
    mpu_write_mem(D_0_104, 4, tmp);
 8001bc8:	462a      	mov	r2, r5
 8001bca:	2104      	movs	r1, #4
 8001bcc:	2068      	movs	r0, #104	; 0x68
 8001bce:	f7ff fdeb 	bl	80017a8 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 8001bd2:	23a3      	movs	r3, #163	; 0xa3
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8001bd4:	f014 0840 	ands.w	r8, r4, #64	; 0x40
    tmp[0] = 0xA3;
 8001bd8:	f88d 300c 	strb.w	r3, [sp, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8001bdc:	f000 809b 	beq.w	8001d16 <dmp_enable_feature+0x15e>
        tmp[1] = 0xC0;
 8001be0:	21c0      	movs	r1, #192	; 0xc0
        tmp[2] = 0xC8;
 8001be2:	22c8      	movs	r2, #200	; 0xc8
        tmp[3] = 0xC2;
 8001be4:	23c2      	movs	r3, #194	; 0xc2
        tmp[1] = 0xC0;
 8001be6:	f88d 100d 	strb.w	r1, [sp, #13]
        tmp[2] = 0xC8;
 8001bea:	f88d 200e 	strb.w	r2, [sp, #14]
        tmp[3] = 0xC2;
 8001bee:	f88d 300f 	strb.w	r3, [sp, #15]
    } else {
        tmp[1] = 0xA3;
        tmp[2] = 0xA3;
        tmp[3] = 0xA3;
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8001bf2:	f414 77c0 	ands.w	r7, r4, #384	; 0x180
        tmp[4] = 0xC4;
        tmp[5] = 0xCC;
 8001bf6:	bf15      	itete	ne
 8001bf8:	23c6      	movne	r3, #198	; 0xc6
        tmp[6] = 0xC6;
    } else {
        tmp[4] = 0xA3;
        tmp[5] = 0xA3;
 8001bfa:	23a3      	moveq	r3, #163	; 0xa3
        tmp[4] = 0xC4;
 8001bfc:	f64c 42c4 	movwne	r2, #52420	; 0xccc4
        tmp[4] = 0xA3;
 8001c00:	f24a 32a3 	movweq	r2, #41891	; 0xa3a3
        tmp[5] = 0xA3;
 8001c04:	f88d 3012 	strb.w	r3, [sp, #18]
        tmp[6] = 0xA3;
    }
    tmp[7] = 0xA3;
 8001c08:	23a3      	movs	r3, #163	; 0xa3
        tmp[4] = 0xA3;
 8001c0a:	f8ad 2010 	strh.w	r2, [sp, #16]
    tmp[8] = 0xA3;
    tmp[9] = 0xA3;
    mpu_write_mem(CFG_15,10,tmp);
 8001c0e:	210a      	movs	r1, #10
 8001c10:	462a      	mov	r2, r5
 8001c12:	f640 20a7 	movw	r0, #2727	; 0xaa7
    tmp[7] = 0xA3;
 8001c16:	f88d 3013 	strb.w	r3, [sp, #19]
    tmp[8] = 0xA3;
 8001c1a:	f88d 3014 	strb.w	r3, [sp, #20]
    tmp[9] = 0xA3;
 8001c1e:	f88d 3015 	strb.w	r3, [sp, #21]
    mpu_write_mem(CFG_15,10,tmp);
 8001c22:	f7ff fdc1 	bl	80017a8 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
        tmp[0] = DINA20;
    else
        tmp[0] = 0xD8;
 8001c26:	f014 0903 	ands.w	r9, r4, #3
 8001c2a:	bf14      	ite	ne
 8001c2c:	2320      	movne	r3, #32
 8001c2e:	23d8      	moveq	r3, #216	; 0xd8
    mpu_write_mem(CFG_27,1,tmp);
 8001c30:	462a      	mov	r2, r5
 8001c32:	2101      	movs	r1, #1
 8001c34:	f640 20b6 	movw	r0, #2742	; 0xab6
 8001c38:	f88d 300c 	strb.w	r3, [sp, #12]
 8001c3c:	f7ff fdb4 	bl	80017a8 <mpu_write_mem>
{
    if (enable) {
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8001c40:	466b      	mov	r3, sp
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8001c42:	466e      	mov	r6, sp
    if (mask & DMP_FEATURE_GYRO_CAL)
 8001c44:	06a0      	lsls	r0, r4, #26
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8001c46:	bf4c      	ite	mi
 8001c48:	4a37      	ldrmi	r2, [pc, #220]	; (8001d28 <dmp_enable_feature+0x170>)
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8001c4a:	4a38      	ldrpl	r2, [pc, #224]	; (8001d2c <dmp_enable_feature+0x174>)
 8001c4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c4e:	c303      	stmia	r3!, {r0, r1}
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8001c50:	2109      	movs	r1, #9
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8001c52:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8001c54:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8001c58:	4632      	mov	r2, r6
 8001c5a:	f7ff fda5 	bl	80017a8 <mpu_write_mem>
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8001c5e:	b157      	cbz	r7, 8001c76 <dmp_enable_feature+0xbe>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 8001c60:	05e1      	lsls	r1, r4, #23
            tmp[0] = 0xB2;
 8001c62:	bf4c      	ite	mi
 8001c64:	4b32      	ldrmi	r3, [pc, #200]	; (8001d30 <dmp_enable_feature+0x178>)
            tmp[0] = DINAC0;
 8001c66:	4b33      	ldrpl	r3, [pc, #204]	; (8001d34 <dmp_enable_feature+0x17c>)
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8001c68:	462a      	mov	r2, r5
 8001c6a:	2104      	movs	r1, #4
 8001c6c:	f640 20a2 	movw	r0, #2722	; 0xaa2
            tmp[0] = DINAC0;
 8001c70:	9303      	str	r3, [sp, #12]
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8001c72:	f7ff fd99 	bl	80017a8 <mpu_write_mem>
    if (mask & DMP_FEATURE_LP_QUAT)
 8001c76:	0762      	lsls	r2, r4, #29
        regs[1] = DINBC2;
        regs[2] = DINBC4;
        regs[3] = DINBC6;
    }
    else
        memset(regs, 0x8B, 4);
 8001c78:	bf54      	ite	pl
 8001c7a:	f04f 338b 	movpl.w	r3, #2341178251	; 0x8b8b8b8b
        regs[0] = DINBC0;
 8001c7e:	4b2e      	ldrmi	r3, [pc, #184]	; (8001d38 <dmp_enable_feature+0x180>)

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8001c80:	4632      	mov	r2, r6
 8001c82:	2104      	movs	r1, #4
 8001c84:	f640 2098 	movw	r0, #2712	; 0xa98
        memset(regs, 0x8B, 4);
 8001c88:	9300      	str	r3, [sp, #0]
    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8001c8a:	f7ff fd8d 	bl	80017a8 <mpu_write_mem>

    return mpu_reset_fifo();
 8001c8e:	f7ff f847 	bl	8000d20 <mpu_reset_fifo>
    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8001c92:	06e3      	lsls	r3, r4, #27
        regs[0] = DINA20;
        regs[1] = DINA28;
        regs[2] = DINA30;
        regs[3] = DINA38;
    } else
        memset(regs, 0xA3, 4);
 8001c94:	bf54      	ite	pl
 8001c96:	f04f 33a3 	movpl.w	r3, #2745410467	; 0xa3a3a3a3
        regs[0] = DINA20;
 8001c9a:	4b28      	ldrmi	r3, [pc, #160]	; (8001d3c <dmp_enable_feature+0x184>)

    mpu_write_mem(CFG_8, 4, regs);
 8001c9c:	4632      	mov	r2, r6
 8001c9e:	2104      	movs	r1, #4
 8001ca0:	f640 209e 	movw	r0, #2718	; 0xa9e
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8001ca4:	4d26      	ldr	r5, [pc, #152]	; (8001d40 <dmp_enable_feature+0x188>)
        memset(regs, 0xA3, 4);
 8001ca6:	9300      	str	r3, [sp, #0]
    mpu_write_mem(CFG_8, 4, regs);
 8001ca8:	f7ff fd7e 	bl	80017a8 <mpu_write_mem>

    return mpu_reset_fifo();
 8001cac:	f7ff f838 	bl	8000d20 <mpu_reset_fifo>
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8001cb0:	f044 0308 	orr.w	r3, r4, #8
 8001cb4:	816b      	strh	r3, [r5, #10]
    mpu_reset_fifo();
 8001cb6:	f7ff f833 	bl	8000d20 <mpu_reset_fifo>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8001cba:	f1b8 0f00 	cmp.w	r8, #0
 8001cbe:	d11c      	bne.n	8001cfa <dmp_enable_feature+0x142>
    dmp.packet_length = 0;
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	2114      	movs	r1, #20
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	f04f 0e0a 	mov.w	lr, #10
 8001cca:	f04f 0c1a 	mov.w	ip, #26
 8001cce:	2616      	movs	r6, #22
 8001cd0:	2006      	movs	r0, #6
 8001cd2:	f885 800e 	strb.w	r8, [r5, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8001cd6:	b11f      	cbz	r7, 8001ce0 <dmp_enable_feature+0x128>
        dmp.packet_length += 6;
 8001cd8:	4673      	mov	r3, lr
 8001cda:	4661      	mov	r1, ip
 8001cdc:	4632      	mov	r2, r6
 8001cde:	73a8      	strb	r0, [r5, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 8001ce0:	f014 0f14 	tst.w	r4, #20
        dmp.packet_length += 16;
 8001ce4:	bf1c      	itt	ne
 8001ce6:	460b      	movne	r3, r1
 8001ce8:	73aa      	strbne	r2, [r5, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8001cea:	f1b9 0f00 	cmp.w	r9, #0
 8001cee:	d000      	beq.n	8001cf2 <dmp_enable_feature+0x13a>
        dmp.packet_length += 4;
 8001cf0:	73ab      	strb	r3, [r5, #14]
}
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	b007      	add	sp, #28
 8001cf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        dmp.packet_length += 6;
 8001cfa:	f04f 0806 	mov.w	r8, #6
 8001cfe:	230a      	movs	r3, #10
 8001d00:	211a      	movs	r1, #26
 8001d02:	2216      	movs	r2, #22
 8001d04:	f04f 0e10 	mov.w	lr, #16
 8001d08:	f04f 0c20 	mov.w	ip, #32
 8001d0c:	261c      	movs	r6, #28
 8001d0e:	200c      	movs	r0, #12
 8001d10:	f885 800e 	strb.w	r8, [r5, #14]
 8001d14:	e7df      	b.n	8001cd6 <dmp_enable_feature+0x11e>
        tmp[1] = 0xA3;
 8001d16:	f88d 300d 	strb.w	r3, [sp, #13]
        tmp[2] = 0xA3;
 8001d1a:	f88d 300e 	strb.w	r3, [sp, #14]
        tmp[3] = 0xA3;
 8001d1e:	f88d 300f 	strb.w	r3, [sp, #15]
 8001d22:	e766      	b.n	8001bf2 <dmp_enable_feature+0x3a>
 8001d24:	09e3ca02 	.word	0x09e3ca02
 8001d28:	0800afc4 	.word	0x0800afc4
 8001d2c:	0800afd0 	.word	0x0800afd0
 8001d30:	9bb68bb2 	.word	0x9bb68bb2
 8001d34:	90b480b0 	.word	0x90b480b0
 8001d38:	c6c4c2c0 	.word	0xc6c4c2c0
 8001d3c:	38302820 	.word	0x38302820
 8001d40:	200003a4 	.word	0x200003a4

08001d44 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 8001d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned char ii = 0;

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 8001d48:	2500      	movs	r5, #0
{
 8001d4a:	b095      	sub	sp, #84	; 0x54
 8001d4c:	9c1e      	ldr	r4, [sp, #120]	; 0x78

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8001d4e:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8001f14 <dmp_read_fifo+0x1d0>
{
 8001d52:	4681      	mov	r9, r0
 8001d54:	460f      	mov	r7, r1
 8001d56:	4616      	mov	r6, r2
    sensors[0] = 0;
 8001d58:	8025      	strh	r5, [r4, #0]
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8001d5a:	f898 000e 	ldrb.w	r0, [r8, #14]
 8001d5e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8001d60:	a90c      	add	r1, sp, #48	; 0x30
{
 8001d62:	9305      	str	r3, [sp, #20]
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8001d64:	f7ff fcd2 	bl	800170c <mpu_read_fifo_stream>
 8001d68:	2800      	cmp	r0, #0
 8001d6a:	f040 80c9 	bne.w	8001f00 <dmp_read_fifo+0x1bc>
        return -1;

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8001d6e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8001d72:	4605      	mov	r5, r0
 8001d74:	f013 0f14 	tst.w	r3, #20
 8001d78:	f040 8086 	bne.w	8001e88 <dmp_read_fifo+0x144>
 8001d7c:	2208      	movs	r2, #8
 8001d7e:	2105      	movs	r1, #5
 8001d80:	9206      	str	r2, [sp, #24]
 8001d82:	2204      	movs	r2, #4
 8001d84:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8001d88:	2203      	movs	r2, #3
 8001d8a:	9001      	str	r0, [sp, #4]
 8001d8c:	f04f 0a0b 	mov.w	sl, #11
 8001d90:	f04f 0c0a 	mov.w	ip, #10
 8001d94:	f04f 0b09 	mov.w	fp, #9
 8001d98:	f04f 0807 	mov.w	r8, #7
 8001d9c:	f04f 0e06 	mov.w	lr, #6
 8001da0:	2102      	movs	r1, #2
 8001da2:	2001      	movs	r0, #1
 8001da4:	9202      	str	r2, [sp, #8]
        }
        sensors[0] |= INV_WXYZ_QUAT;
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8001da6:	065a      	lsls	r2, r3, #25
 8001da8:	d53a      	bpl.n	8001e20 <dmp_read_fifo+0xdc>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001daa:	9a01      	ldr	r2, [sp, #4]
 8001dac:	ae14      	add	r6, sp, #80	; 0x50
 8001dae:	4416      	add	r6, r2
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001db0:	9a02      	ldr	r2, [sp, #8]
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001db2:	9607      	str	r6, [sp, #28]
 8001db4:	ae14      	add	r6, sp, #80	; 0x50
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001db6:	1871      	adds	r1, r6, r1
 8001db8:	4432      	add	r2, r6
 8001dba:	9109      	str	r1, [sp, #36]	; 0x24
 8001dbc:	920a      	str	r2, [sp, #40]	; 0x28
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8001dbe:	9904      	ldr	r1, [sp, #16]
 8001dc0:	9a03      	ldr	r2, [sp, #12]
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001dc2:	1830      	adds	r0, r6, r0
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8001dc4:	4432      	add	r2, r6
 8001dc6:	4431      	add	r1, r6
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001dc8:	9e07      	ldr	r6, [sp, #28]
 8001dca:	9008      	str	r0, [sp, #32]
        ii += 6;
        sensors[0] |= INV_XYZ_ACCEL;
 8001dcc:	f8cd b008 	str.w	fp, [sp, #8]
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001dd0:	f816 bc20 	ldrb.w	fp, [r6, #-32]
 8001dd4:	9e08      	ldr	r6, [sp, #32]
        sensors[0] |= INV_XYZ_ACCEL;
 8001dd6:	4640      	mov	r0, r8
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001dd8:	f816 8c20 	ldrb.w	r8, [r6, #-32]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001ddc:	9e09      	ldr	r6, [sp, #36]	; 0x24
        sensors[0] |= INV_XYZ_ACCEL;
 8001dde:	e9cd ca03 	strd	ip, sl, [sp, #12]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001de2:	f816 ac20 	ldrb.w	sl, [r6, #-32]
 8001de6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
        sensors[0] |= INV_XYZ_ACCEL;
 8001de8:	f8cd e004 	str.w	lr, [sp, #4]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001dec:	f816 ec20 	ldrb.w	lr, [r6, #-32]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8001df0:	f812 6c20 	ldrb.w	r6, [r2, #-32]
 8001df4:	910b      	str	r1, [sp, #44]	; 0x2c
 8001df6:	4632      	mov	r2, r6
 8001df8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001dfa:	ea48 280b 	orr.w	r8, r8, fp, lsl #8
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8001dfe:	f816 cc20 	ldrb.w	ip, [r6, #-32]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001e02:	ea4e 2e0a 	orr.w	lr, lr, sl, lsl #8
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8001e06:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001e0a:	f8a7 8000 	strh.w	r8, [r7]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001e0e:	f8a7 e002 	strh.w	lr, [r7, #2]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8001e12:	f8a7 c004 	strh.w	ip, [r7, #4]
        sensors[0] |= INV_XYZ_ACCEL;
 8001e16:	8827      	ldrh	r7, [r4, #0]
 8001e18:	9906      	ldr	r1, [sp, #24]
 8001e1a:	f047 0708 	orr.w	r7, r7, #8
 8001e1e:	8027      	strh	r7, [r4, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8001e20:	f413 7fc0 	tst.w	r3, #384	; 0x180
 8001e24:	d029      	beq.n	8001e7a <dmp_read_fifo+0x136>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001e26:	9e01      	ldr	r6, [sp, #4]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001e28:	9a02      	ldr	r2, [sp, #8]
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001e2a:	ab14      	add	r3, sp, #80	; 0x50
 8001e2c:	441e      	add	r6, r3
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001e2e:	eb03 0c01 	add.w	ip, r3, r1
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001e32:	4418      	add	r0, r3
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001e34:	441a      	add	r2, r3
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8001e36:	9b03      	ldr	r3, [sp, #12]
 8001e38:	a914      	add	r1, sp, #80	; 0x50
 8001e3a:	440b      	add	r3, r1
 8001e3c:	461f      	mov	r7, r3
 8001e3e:	9b04      	ldr	r3, [sp, #16]
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001e40:	f810 0c20 	ldrb.w	r0, [r0, #-32]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8001e44:	440b      	add	r3, r1
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001e46:	f81c cc20 	ldrb.w	ip, [ip, #-32]
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001e4a:	f816 1c20 	ldrb.w	r1, [r6, #-32]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001e4e:	f812 2c20 	ldrb.w	r2, [r2, #-32]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8001e52:	f817 6c20 	ldrb.w	r6, [r7, #-32]
 8001e56:	f813 3c20 	ldrb.w	r3, [r3, #-32]
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001e5a:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8001e5e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001e62:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001e66:	f8a9 1000 	strh.w	r1, [r9]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001e6a:	f8a9 2002 	strh.w	r2, [r9, #2]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8001e6e:	f8a9 3004 	strh.w	r3, [r9, #4]
        ii += 6;
        sensors[0] |= INV_XYZ_GYRO;
 8001e72:	8823      	ldrh	r3, [r4, #0]
 8001e74:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001e78:	8023      	strh	r3, [r4, #0]
    }

    get_ms(timestamp);
 8001e7a:	9805      	ldr	r0, [sp, #20]
 8001e7c:	f001 fed2 	bl	8003c24 <get_ms>
    return 0;
}
 8001e80:	4628      	mov	r0, r5
 8001e82:	b015      	add	sp, #84	; 0x54
 8001e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e88:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
 8001e8c:	ba09      	rev	r1, r1
        quat_q14[1] = quat[1] >> 16;
 8001e8e:	ea4f 4c21 	mov.w	ip, r1, asr #16
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8001e92:	fb0c f00c 	mul.w	r0, ip, ip
 8001e96:	fa92 fe82 	rev.w	lr, r2
        quat_q14[0] = quat[0] >> 16;
 8001e9a:	ea4f 4c2e 	mov.w	ip, lr, asr #16
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8001e9e:	fb0c 0c0c 	mla	ip, ip, ip, r0
 8001ea2:	980e      	ldr	r0, [sp, #56]	; 0x38
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8001ea4:	6071      	str	r1, [r6, #4]
 8001ea6:	ba00      	rev	r0, r0
        quat_q14[2] = quat[2] >> 16;
 8001ea8:	1402      	asrs	r2, r0, #16
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8001eaa:	fb02 cc02 	mla	ip, r2, r2, ip
 8001eae:	990f      	ldr	r1, [sp, #60]	; 0x3c
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8001eb0:	f8c6 e000 	str.w	lr, [r6]
 8001eb4:	ba09      	rev	r1, r1
        quat_q14[3] = quat[3] >> 16;
 8001eb6:	140a      	asrs	r2, r1, #16
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8001eb8:	fb02 c202 	mla	r2, r2, r2, ip
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 8001ebc:	f102 4271 	add.w	r2, r2, #4043309056	; 0xf1000000
 8001ec0:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8001ec4:	e9c6 0102 	strd	r0, r1, [r6, #8]
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 8001ec8:	d81d      	bhi.n	8001f06 <dmp_read_fifo+0x1c2>
        sensors[0] |= INV_WXYZ_QUAT;
 8001eca:	8822      	ldrh	r2, [r4, #0]
 8001ecc:	2015      	movs	r0, #21
 8001ece:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ed2:	8022      	strh	r2, [r4, #0]
 8001ed4:	2218      	movs	r2, #24
 8001ed6:	9206      	str	r2, [sp, #24]
 8001ed8:	2214      	movs	r2, #20
 8001eda:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8001ede:	2213      	movs	r2, #19
 8001ee0:	9202      	str	r2, [sp, #8]
 8001ee2:	2210      	movs	r2, #16
 8001ee4:	f04f 0a1b 	mov.w	sl, #27
 8001ee8:	f04f 0c1a 	mov.w	ip, #26
 8001eec:	f04f 0b19 	mov.w	fp, #25
 8001ef0:	f04f 0817 	mov.w	r8, #23
 8001ef4:	f04f 0e16 	mov.w	lr, #22
 8001ef8:	2112      	movs	r1, #18
 8001efa:	2011      	movs	r0, #17
 8001efc:	9201      	str	r2, [sp, #4]
 8001efe:	e752      	b.n	8001da6 <dmp_read_fifo+0x62>
        return -1;
 8001f00:	f04f 35ff 	mov.w	r5, #4294967295
 8001f04:	e7bc      	b.n	8001e80 <dmp_read_fifo+0x13c>
            mpu_reset_fifo();
 8001f06:	f7fe ff0b 	bl	8000d20 <mpu_reset_fifo>
            sensors[0] = 0;
 8001f0a:	8025      	strh	r5, [r4, #0]
            return -1;
 8001f0c:	f04f 35ff 	mov.w	r5, #4294967295
 8001f10:	e7b6      	b.n	8001e80 <dmp_read_fifo+0x13c>
 8001f12:	bf00      	nop
 8001f14:	200003a4 	.word	0x200003a4

08001f18 <DMP_Init>:

int DMP_Init(void){
 8001f18:	b530      	push	{r4, r5, lr}
 8001f1a:	b087      	sub	sp, #28

	struct int_param_s interrupt_config;//empty

	if (mpu_init(&interrupt_config)){
 8001f1c:	4668      	mov	r0, sp
 8001f1e:	f7ff fa23 	bl	8001368 <mpu_init>
 8001f22:	b110      	cbz	r0, 8001f2a <DMP_Init+0x12>
		return 1;
 8001f24:	2001      	movs	r0, #1
	if (mpu_set_dmp_state(1)){
		return 8;
	}

	return 0;
}
 8001f26:	b007      	add	sp, #28
 8001f28:	bd30      	pop	{r4, r5, pc}
	if (mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS)){
 8001f2a:	2079      	movs	r0, #121	; 0x79
 8001f2c:	f7ff f92a 	bl	8001184 <mpu_set_sensors>
 8001f30:	2800      	cmp	r0, #0
 8001f32:	d16d      	bne.n	8002010 <DMP_Init+0xf8>
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8001f34:	23c8      	movs	r3, #200	; 0xc8
 8001f36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f3a:	493b      	ldr	r1, [pc, #236]	; (8002028 <DMP_Init+0x110>)
 8001f3c:	f640 30f6 	movw	r0, #3062	; 0xbf6
 8001f40:	f7ff fc64 	bl	800180c <mpu_load_firmware>
	if(dmp_load_motion_driver_firmware()){
 8001f44:	2800      	cmp	r0, #0
 8001f46:	d166      	bne.n	8002016 <DMP_Init+0xfe>
    gyro_regs[0] = gyro_axes[orient & 3];
 8001f48:	f64c 514c 	movw	r1, #52556	; 0xcd4c
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8001f4c:	206c      	movs	r0, #108	; 0x6c
    accel_regs[0] = accel_axes[orient & 3];
 8001f4e:	f64c 140c 	movw	r4, #51468	; 0xc90c
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8001f52:	232c      	movs	r3, #44	; 0x2c
    gyro_regs[0] = gyro_axes[orient & 3];
 8001f54:	f8ad 1004 	strh.w	r1, [sp, #4]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8001f58:	f88d 0006 	strb.w	r0, [sp, #6]
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8001f5c:	aa01      	add	r2, sp, #4
 8001f5e:	2103      	movs	r1, #3
 8001f60:	f240 4026 	movw	r0, #1062	; 0x426
    accel_regs[0] = accel_axes[orient & 3];
 8001f64:	f8ad 400c 	strh.w	r4, [sp, #12]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8001f68:	f88d 300e 	strb.w	r3, [sp, #14]
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8001f6c:	f7ff fc1c 	bl	80017a8 <mpu_write_mem>
 8001f70:	2800      	cmp	r0, #0
 8001f72:	d154      	bne.n	800201e <DMP_Init+0x106>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8001f74:	ac03      	add	r4, sp, #12
 8001f76:	4622      	mov	r2, r4
 8001f78:	2103      	movs	r1, #3
 8001f7a:	f240 402a 	movw	r0, #1066	; 0x42a
 8001f7e:	f7ff fc13 	bl	80017a8 <mpu_write_mem>
 8001f82:	2800      	cmp	r0, #0
 8001f84:	d14b      	bne.n	800201e <DMP_Init+0x106>
    memcpy(gyro_regs, gyro_sign, 3);
 8001f86:	f245 6236 	movw	r2, #22070	; 0x5636
 8001f8a:	2176      	movs	r1, #118	; 0x76
    memcpy(accel_regs, accel_sign, 3);
 8001f8c:	f244 6026 	movw	r0, #17958	; 0x4626
 8001f90:	2366      	movs	r3, #102	; 0x66
    memcpy(gyro_regs, gyro_sign, 3);
 8001f92:	f8ad 2004 	strh.w	r2, [sp, #4]
 8001f96:	f88d 1006 	strb.w	r1, [sp, #6]
    memcpy(accel_regs, accel_sign, 3);
 8001f9a:	f8ad 000c 	strh.w	r0, [sp, #12]
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8001f9e:	aa01      	add	r2, sp, #4
 8001fa0:	2103      	movs	r1, #3
 8001fa2:	f44f 6088 	mov.w	r0, #1088	; 0x440
    memcpy(accel_regs, accel_sign, 3);
 8001fa6:	f88d 300e 	strb.w	r3, [sp, #14]
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8001faa:	f7ff fbfd 	bl	80017a8 <mpu_write_mem>
 8001fae:	bbb0      	cbnz	r0, 800201e <DMP_Init+0x106>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8001fb0:	4622      	mov	r2, r4
 8001fb2:	2103      	movs	r1, #3
 8001fb4:	f240 4031 	movw	r0, #1073	; 0x431
 8001fb8:	f7ff fbf6 	bl	80017a8 <mpu_write_mem>
 8001fbc:	bb78      	cbnz	r0, 800201e <DMP_Init+0x106>
    dmp.orient = orient;
 8001fbe:	2388      	movs	r3, #136	; 0x88
 8001fc0:	4d1a      	ldr	r5, [pc, #104]	; (800202c <DMP_Init+0x114>)
	if(dmp_enable_feature(dmp_features)){
 8001fc2:	f44f 70b8 	mov.w	r0, #368	; 0x170
    dmp.orient = orient;
 8001fc6:	812b      	strh	r3, [r5, #8]
	if(dmp_enable_feature(dmp_features)){
 8001fc8:	f7ff fdf6 	bl	8001bb8 <dmp_enable_feature>
 8001fcc:	bb28      	cbnz	r0, 800201a <DMP_Init+0x102>
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8001fce:	f44f 7280 	mov.w	r2, #256	; 0x100
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8001fd2:	4b17      	ldr	r3, [pc, #92]	; (8002030 <DMP_Init+0x118>)
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8001fd4:	f8ad 2004 	strh.w	r2, [sp, #4]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8001fd8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001fdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if (mpu_write_mem(D_0_22, 2, tmp))
 8001fe0:	aa01      	add	r2, sp, #4
 8001fe2:	2102      	movs	r1, #2
 8001fe4:	f240 2016 	movw	r0, #534	; 0x216
 8001fe8:	f7ff fbde 	bl	80017a8 <mpu_write_mem>
 8001fec:	b9c8      	cbnz	r0, 8002022 <DMP_Init+0x10a>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8001fee:	4622      	mov	r2, r4
 8001ff0:	210c      	movs	r1, #12
 8001ff2:	f640 20c1 	movw	r0, #2753	; 0xac1
 8001ff6:	f7ff fbd7 	bl	80017a8 <mpu_write_mem>
 8001ffa:	b990      	cbnz	r0, 8002022 <DMP_Init+0x10a>
    dmp.fifo_rate = rate;
 8001ffc:	2364      	movs	r3, #100	; 0x64
	if (mpu_set_dmp_state(1)){
 8001ffe:	2001      	movs	r0, #1
    dmp.fifo_rate = rate;
 8002000:	81ab      	strh	r3, [r5, #12]
	if (mpu_set_dmp_state(1)){
 8002002:	f7ff fca7 	bl	8001954 <mpu_set_dmp_state>
		return 8;
 8002006:	2800      	cmp	r0, #0
 8002008:	bf14      	ite	ne
 800200a:	2008      	movne	r0, #8
 800200c:	2000      	moveq	r0, #0
 800200e:	e78a      	b.n	8001f26 <DMP_Init+0xe>
		return 2;
 8002010:	2002      	movs	r0, #2
}
 8002012:	b007      	add	sp, #28
 8002014:	bd30      	pop	{r4, r5, pc}
		return 4;//ERROR
 8002016:	2004      	movs	r0, #4
 8002018:	e785      	b.n	8001f26 <DMP_Init+0xe>
		return 6;
 800201a:	2006      	movs	r0, #6
 800201c:	e783      	b.n	8001f26 <DMP_Init+0xe>
		return 5;
 800201e:	2005      	movs	r0, #5
 8002020:	e781      	b.n	8001f26 <DMP_Init+0xe>
		return 7;
 8002022:	2007      	movs	r0, #7
 8002024:	e77f      	b.n	8001f26 <DMP_Init+0xe>
 8002026:	bf00      	nop
 8002028:	0800b0ac 	.word	0x0800b0ac
 800202c:	200003a4 	.word	0x200003a4
 8002030:	0800afb8 	.word	0x0800afb8

08002034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002034:	b530      	push	{r4, r5, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002036:	2201      	movs	r2, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002038:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800203a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800203e:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002040:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
{
 8002044:	b095      	sub	sp, #84	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002046:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002048:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800204a:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800204c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800204e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002050:	9113      	str	r1, [sp, #76]	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002052:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002054:	9405      	str	r4, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002056:	9401      	str	r4, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002058:	940d      	str	r4, [sp, #52]	; 0x34
 800205a:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800205e:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002062:	e9cd 4408 	strd	r4, r4, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002066:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800206a:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800206c:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800206e:	f003 fdb9 	bl	8005be4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002072:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002074:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002078:	4629      	mov	r1, r5
 800207a:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800207c:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800207e:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002080:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002082:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002084:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002086:	f003 ffa5 	bl	8005fd4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800208a:	2310      	movs	r3, #16
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800208c:	a801      	add	r0, sp, #4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800208e:	9404      	str	r4, [sp, #16]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002090:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002092:	f004 f88b 	bl	80061ac <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002096:	b015      	add	sp, #84	; 0x54
 8002098:	bd30      	pop	{r4, r5, pc}
 800209a:	bf00      	nop

0800209c <main>:
{
 800209c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ximu_state = XIMU_STATE_STM_INIT;
 80020a0:	2400      	movs	r4, #0
 80020a2:	4fb7      	ldr	r7, [pc, #732]	; (8002380 <main+0x2e4>)
{
 80020a4:	b0b7      	sub	sp, #220	; 0xdc
	ximu_state = XIMU_STATE_STM_INIT;
 80020a6:	703c      	strb	r4, [r7, #0]
  HAL_Init();
 80020a8:	f002 f90e 	bl	80042c8 <HAL_Init>
  SystemClock_Config();
 80020ac:	f7ff ffc2 	bl	8002034 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
 80020b4:	e9cd 442c 	strd	r4, r4, [sp, #176]	; 0xb0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b8:	4db2      	ldr	r5, [pc, #712]	; (8002384 <main+0x2e8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80020ba:	4622      	mov	r2, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020bc:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80020be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c2:	f043 0310 	orr.w	r3, r3, #16
 80020c6:	61ab      	str	r3, [r5, #24]
 80020c8:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80020ca:	48af      	ldr	r0, [pc, #700]	; (8002388 <main+0x2ec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	9302      	str	r3, [sp, #8]
 80020d2:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020d4:	69ab      	ldr	r3, [r5, #24]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d6:	f04f 0901 	mov.w	r9, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020da:	f043 0320 	orr.w	r3, r3, #32
 80020de:	61ab      	str	r3, [r5, #24]
 80020e0:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020e6:	f003 0320 	and.w	r3, r3, #32
 80020ea:	9303      	str	r3, [sp, #12]
 80020ec:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	69ab      	ldr	r3, [r5, #24]
  hi2c1.Instance = I2C1;
 80020f0:	4ea6      	ldr	r6, [pc, #664]	; (800238c <main+0x2f0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	f043 0304 	orr.w	r3, r3, #4
 80020f6:	61ab      	str	r3, [r5, #24]
 80020f8:	69ab      	ldr	r3, [r5, #24]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020fa:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	9304      	str	r3, [sp, #16]
 8002104:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002106:	69ab      	ldr	r3, [r5, #24]
  htim2.Instance = TIM2;
 8002108:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 80023c0 <main+0x324>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800210c:	f043 0308 	orr.w	r3, r3, #8
 8002110:	61ab      	str	r3, [r5, #24]
 8002112:	69ab      	ldr	r3, [r5, #24]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	9305      	str	r3, [sp, #20]
 800211a:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800211c:	f002 fb80 	bl	8004820 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002120:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002124:	a92a      	add	r1, sp, #168	; 0xa8
 8002126:	4898      	ldr	r0, [pc, #608]	; (8002388 <main+0x2ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002128:	e9cd 392a 	strd	r3, r9, [sp, #168]	; 0xa8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	942c      	str	r4, [sp, #176]	; 0xb0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002132:	f002 fa7b 	bl	800462c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002136:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002138:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800213a:	ea43 0309 	orr.w	r3, r3, r9
 800213e:	616b      	str	r3, [r5, #20]
 8002140:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002142:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002144:	ea03 0309 	and.w	r3, r3, r9
 8002148:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800214a:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 800214c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800214e:	f002 f903 	bl	8004358 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002152:	200f      	movs	r0, #15
 8002154:	f002 f936 	bl	80043c4 <HAL_NVIC_EnableIRQ>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002158:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Instance = I2C1;
 800215c:	498c      	ldr	r1, [pc, #560]	; (8002390 <main+0x2f4>)
  hi2c1.Init.ClockSpeed = 100000;
 800215e:	4a8d      	ldr	r2, [pc, #564]	; (8002394 <main+0x2f8>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002160:	4630      	mov	r0, r6
  hi2c1.Init.ClockSpeed = 100000;
 8002162:	e9c6 1200 	strd	r1, r2, [r6]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002166:	6133      	str	r3, [r6, #16]
  hi2c1.Init.OwnAddress1 = 0;
 8002168:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hi2c1.Init.OwnAddress2 = 0;
 800216c:	e9c6 4405 	strd	r4, r4, [r6, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002170:	e9c6 4407 	strd	r4, r4, [r6, #28]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002174:	f002 fd78 	bl	8004c68 <HAL_I2C_Init>
  MX_USB_DEVICE_Init();
 8002178:	f005 fd9e 	bl	8007cb8 <MX_USB_DEVICE_Init>
  htim2.Init.Period = 1250;
 800217c:	f240 42e2 	movw	r2, #1250	; 0x4e2
  htim2.Init.Prescaler = 7200;
 8002180:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
  htim2.Instance = TIM2;
 8002184:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002188:	4658      	mov	r0, fp
  htim2.Init.Period = 1250;
 800218a:	f8cb 200c 	str.w	r2, [fp, #12]
  htim2.Init.Prescaler = 7200;
 800218e:	f8cb 3004 	str.w	r3, [fp, #4]
  htim2.Instance = TIM2;
 8002192:	f8cb 1000 	str.w	r1, [fp]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002196:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
 800219a:	e9cd 442c 	strd	r4, r4, [sp, #176]	; 0xb0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800219e:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a2:	f8cb 4008 	str.w	r4, [fp, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a6:	f8cb 4010 	str.w	r4, [fp, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021aa:	f8cb 4018 	str.w	r4, [fp, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021ae:	f004 f87f 	bl	80062b0 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021b2:	a92a      	add	r1, sp, #168	; 0xa8
 80021b4:	4658      	mov	r0, fp
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021b6:	f8cd a0a8 	str.w	sl, [sp, #168]	; 0xa8
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021ba:	f004 f8d7 	bl	800636c <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021be:	a921      	add	r1, sp, #132	; 0x84
 80021c0:	4658      	mov	r0, fp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c2:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021c6:	f004 fa2b 	bl	8006620 <HAL_TIMEx_MasterConfigSynchronization>
  htim3.Init.Period = 50;
 80021ca:	2232      	movs	r2, #50	; 0x32
  htim3.Init.Prescaler = 7200;
 80021cc:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
  htim3.Instance = TIM3;
 80021d0:	4d71      	ldr	r5, [pc, #452]	; (8002398 <main+0x2fc>)
 80021d2:	4972      	ldr	r1, [pc, #456]	; (800239c <main+0x300>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021d4:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 7200;
 80021d6:	606b      	str	r3, [r5, #4]
  htim3.Init.Period = 50;
 80021d8:	60ea      	str	r2, [r5, #12]
  htim3.Instance = TIM3;
 80021da:	6029      	str	r1, [r5, #0]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021dc:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
 80021e0:	e9cd 442c 	strd	r4, r4, [sp, #176]	; 0xb0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e4:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e8:	60ac      	str	r4, [r5, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ea:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ec:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021ee:	f004 f85f 	bl	80062b0 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021f2:	a92a      	add	r1, sp, #168	; 0xa8
 80021f4:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f6:	f8cd a0a8 	str.w	sl, [sp, #168]	; 0xa8
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021fa:	f004 f8b7 	bl	800636c <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021fe:	a921      	add	r1, sp, #132	; 0x84
 8002200:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002202:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002206:	f004 fa0b 	bl	8006620 <HAL_TIMEx_MasterConfigSynchronization>
  huart1.Init.BaudRate = 115200;
 800220a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 800220e:	220c      	movs	r2, #12
  huart1.Instance = USART1;
 8002210:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 80023c4 <main+0x328>
 8002214:	4b62      	ldr	r3, [pc, #392]	; (80023a0 <main+0x304>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002216:	4650      	mov	r0, sl
  huart1.Init.BaudRate = 115200;
 8002218:	e9ca 3100 	strd	r3, r1, [sl]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800221c:	f8ca 2014 	str.w	r2, [sl, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002220:	e9ca 4402 	strd	r4, r4, [sl, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002224:	f8ca 4010 	str.w	r4, [sl, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002228:	e9ca 4406 	strd	r4, r4, [sl, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800222c:	f004 fa1e 	bl	800666c <HAL_UART_Init>
  systickInit();
 8002230:	f001 ffee 	bl	8004210 <systickInit>
  HAL_TIM_Base_Start_IT(&htim2);
 8002234:	4658      	mov	r0, fp
 8002236:	f004 f889 	bl	800634c <HAL_TIM_Base_Start_IT>
  led_set(LED_INIT);
 800223a:	20cc      	movs	r0, #204	; 0xcc
 800223c:	f001 fcc4 	bl	8003bc8 <led_set>
  HAL_Delay(1000);//blink to show system (stm32, especially the crystal) is ok
 8002240:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002244:	f002 f864 	bl	8004310 <HAL_Delay>
  led_set(LED_FAULT);//Will not notice LED blinking unless the following initialization takes longer than expected
 8002248:	20aa      	movs	r0, #170	; 0xaa
  ximu_state = XIMU_STATE_DMP_INIT;
 800224a:	f887 9000 	strb.w	r9, [r7]
  led_set(LED_FAULT);//Will not notice LED blinking unless the following initialization takes longer than expected
 800224e:	f001 fcbb 	bl	8003bc8 <led_set>
  mpu_set_i2c(&hi2c1);
 8002252:	4630      	mov	r0, r6
 8002254:	f001 fcbe 	bl	8003bd4 <mpu_set_i2c>
  ms5611_set_i2c(&hi2c1);
 8002258:	4630      	mov	r0, r6
 800225a:	f001 fceb 	bl	8003c34 <ms5611_set_i2c>
  ms5611_init();
 800225e:	f001 fcef 	bl	8003c40 <ms5611_init>
  ms5611_update();
 8002262:	f001 fd6d 	bl	8003d40 <ms5611_update>
  GNSS_set_huart(&huart1);
 8002266:	4650      	mov	r0, sl
 8002268:	f001 fa40 	bl	80036ec <GNSS_set_huart>
  GNSS_Init();
 800226c:	f001 fa44 	bl	80036f8 <GNSS_Init>
  int dmp_state = DMP_Init();
 8002270:	f7ff fe52 	bl	8001f18 <DMP_Init>
  if (dmp_state){
 8002274:	b100      	cbz	r0, 8002278 <main+0x1dc>
 8002276:	e7fe      	b.n	8002276 <main+0x1da>
 8002278:	4606      	mov	r6, r0
  while (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){
 800227a:	4c4a      	ldr	r4, [pc, #296]	; (80023a4 <main+0x308>)
  HAL_TIM_Base_Start_IT(&htim3);//start updating sensor data
 800227c:	4628      	mov	r0, r5
 800227e:	f004 f865 	bl	800634c <HAL_TIM_Base_Start_IT>
  led_set(LED_DISCONNECTED);//Fault cleared
 8002282:	4630      	mov	r0, r6
  ximu_state = XIMU_STATE_GPS_INIT;
 8002284:	f887 8000 	strb.w	r8, [r7]
  led_set(LED_DISCONNECTED);//Fault cleared
 8002288:	f001 fc9e 	bl	8003bc8 <led_set>
  while (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){
 800228c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8002290:	2b03      	cmp	r3, #3
 8002292:	d006      	beq.n	80022a2 <main+0x206>
	  led_set(LED_DISCONNECTED);//wait for connection
 8002294:	2000      	movs	r0, #0
 8002296:	f001 fc97 	bl	8003bc8 <led_set>
  while (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){
 800229a:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d1f8      	bne.n	8002294 <main+0x1f8>
  led_set(LED_IDLE);//connection formed
 80022a2:	20ff      	movs	r0, #255	; 0xff
 80022a4:	f001 fc90 	bl	8003bc8 <led_set>
 80022a8:	4e3f      	ldr	r6, [pc, #252]	; (80023a8 <main+0x30c>)
	  q1.pData[0] = 1.2;
 80022aa:	f8df b11c 	ldr.w	fp, [pc, #284]	; 80023c8 <main+0x32c>
	  q1.pData[1] = 2.1;
 80022ae:	f8df a11c 	ldr.w	sl, [pc, #284]	; 80023cc <main+0x330>
	  q1.pData[2] = 3.23;
 80022b2:	f8df 911c 	ldr.w	r9, [pc, #284]	; 80023d0 <main+0x334>
	  q1.pData[3] = 5.04;
 80022b6:	f8df 811c 	ldr.w	r8, [pc, #284]	; 80023d4 <main+0x338>
 80022ba:	ad12      	add	r5, sp, #72	; 0x48
	  led_set(LED_MEASURING);
 80022bc:	20fe      	movs	r0, #254	; 0xfe
 80022be:	f001 fc83 	bl	8003bc8 <led_set>
	  float32_t v_data[3*1] = {0.1,0.2,0.3};
 80022c2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
	  float32_t q1_data[4*1] = {0};
 80022c6:	2300      	movs	r3, #0
	  float32_t R_data[3*3] = {1,2,3,4,5,6,7,8,9};
 80022c8:	4f38      	ldr	r7, [pc, #224]	; (80023ac <main+0x310>)
	  float32_t v_data[3*1] = {0.1,0.2,0.3};
 80022ca:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	  float32_t R_data[3*3] = {1,2,3,4,5,6,7,8,9};
 80022ce:	ac21      	add	r4, sp, #132	; 0x84
	  float32_t jacob_data[3*4] = {0};
 80022d0:	4619      	mov	r1, r3
 80022d2:	2230      	movs	r2, #48	; 0x30
 80022d4:	a82a      	add	r0, sp, #168	; 0xa8
	  float32_t q1_data[4*1] = {0};
 80022d6:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 80022da:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
	  float32_t q2_data[4*1] = {0};
 80022de:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 80022e2:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
	  float32_t q_res_data[4*1] = {0};
 80022e6:	e9cd 331d 	strd	r3, r3, [sp, #116]	; 0x74
 80022ea:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
	  float32_t jacob_data[3*4] = {0};
 80022ee:	f006 f813 	bl	8008318 <memset>
	  float32_t R_data[3*3] = {1,2,3,4,5,6,7,8,9};
 80022f2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80022f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022f6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80022f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022fa:	683f      	ldr	r7, [r7, #0]
	  arm_mat_init_f32(&q1,4,1,q1_data);
 80022fc:	ab15      	add	r3, sp, #84	; 0x54
 80022fe:	a806      	add	r0, sp, #24
 8002300:	2201      	movs	r2, #1
 8002302:	2104      	movs	r1, #4
	  float32_t R_data[3*3] = {1,2,3,4,5,6,7,8,9};
 8002304:	6027      	str	r7, [r4, #0]
	  arm_mat_init_f32(&q1,4,1,q1_data);
 8002306:	f005 ff9d 	bl	8008244 <arm_mat_init_f32>
	  arm_mat_init_f32(&q2,4,1,q2_data);
 800230a:	ab19      	add	r3, sp, #100	; 0x64
 800230c:	a808      	add	r0, sp, #32
 800230e:	2201      	movs	r2, #1
 8002310:	2104      	movs	r1, #4
 8002312:	f005 ff97 	bl	8008244 <arm_mat_init_f32>
	  arm_mat_init_f32(&q_res,4,1,q_res_data);
 8002316:	ab1d      	add	r3, sp, #116	; 0x74
 8002318:	a80a      	add	r0, sp, #40	; 0x28
 800231a:	2201      	movs	r2, #1
 800231c:	2104      	movs	r1, #4
 800231e:	f005 ff91 	bl	8008244 <arm_mat_init_f32>
	  arm_mat_init_f32(&v,3,1,v_data);
 8002322:	462b      	mov	r3, r5
 8002324:	a80c      	add	r0, sp, #48	; 0x30
 8002326:	2201      	movs	r2, #1
 8002328:	2103      	movs	r1, #3
 800232a:	f005 ff8b 	bl	8008244 <arm_mat_init_f32>
	  arm_mat_init_f32(&jacob,4,3,jacob_data);
 800232e:	ab2a      	add	r3, sp, #168	; 0xa8
 8002330:	a80e      	add	r0, sp, #56	; 0x38
 8002332:	2203      	movs	r2, #3
 8002334:	2104      	movs	r1, #4
 8002336:	f005 ff85 	bl	8008244 <arm_mat_init_f32>
	  arm_mat_init_f32(&R,3,3,R_data);
 800233a:	2203      	movs	r2, #3
 800233c:	ab21      	add	r3, sp, #132	; 0x84
 800233e:	a810      	add	r0, sp, #64	; 0x40
 8002340:	4611      	mov	r1, r2
 8002342:	f005 ff7f 	bl	8008244 <arm_mat_init_f32>
	  q2.pData[0] = -0.3;
 8002346:	4f1a      	ldr	r7, [pc, #104]	; (80023b0 <main+0x314>)
	  q1.pData[0] = 1.2;
 8002348:	9a07      	ldr	r2, [sp, #28]
	  q2.pData[0] = -0.3;
 800234a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	  q2.pData[1] = 0.978;
 800234c:	4c19      	ldr	r4, [pc, #100]	; (80023b4 <main+0x318>)
	  q2.pData[2] = 0.12;
 800234e:	481a      	ldr	r0, [pc, #104]	; (80023b8 <main+0x31c>)
	  q2.pData[3] = 3.22;
 8002350:	491a      	ldr	r1, [pc, #104]	; (80023bc <main+0x320>)
	  q1.pData[0] = 1.2;
 8002352:	f8c2 b000 	str.w	fp, [r2]
	  q1.pData[1] = 2.1;
 8002356:	f8c2 a004 	str.w	sl, [r2, #4]
	  q1.pData[2] = 3.23;
 800235a:	f8c2 9008 	str.w	r9, [r2, #8]
	  q1.pData[3] = 5.04;
 800235e:	f8c2 800c 	str.w	r8, [r2, #12]
	  q2.pData[0] = -0.3;
 8002362:	601f      	str	r7, [r3, #0]
	  q2.pData[1] = 0.978;
 8002364:	605c      	str	r4, [r3, #4]
	  q2.pData[2] = 0.12;
 8002366:	6098      	str	r0, [r3, #8]
	  q2.pData[3] = 3.22;
 8002368:	60d9      	str	r1, [r3, #12]
	  __NOP();
 800236a:	bf00      	nop
	  arm_mat_trans_f32(&R,&R);
 800236c:	a910      	add	r1, sp, #64	; 0x40
 800236e:	4608      	mov	r0, r1
 8002370:	f005 ff10 	bl	8008194 <arm_mat_trans_f32>
	  __NOP();
 8002374:	bf00      	nop
	  HAL_Delay(10);
 8002376:	200a      	movs	r0, #10
 8002378:	f001 ffca 	bl	8004310 <HAL_Delay>
 800237c:	e79e      	b.n	80022bc <main+0x220>
 800237e:	bf00      	nop
 8002380:	20000790 	.word	0x20000790
 8002384:	40021000 	.word	0x40021000
 8002388:	40011000 	.word	0x40011000
 800238c:	200006a0 	.word	0x200006a0
 8002390:	40005400 	.word	0x40005400
 8002394:	000186a0 	.word	0x000186a0
 8002398:	200006f4 	.word	0x200006f4
 800239c:	40000400 	.word	0x40000400
 80023a0:	40013800 	.word	0x40013800
 80023a4:	20000d2c 	.word	0x20000d2c
 80023a8:	0800aff4 	.word	0x0800aff4
 80023ac:	0800b000 	.word	0x0800b000
 80023b0:	be99999a 	.word	0xbe99999a
 80023b4:	3f7a5e35 	.word	0x3f7a5e35
 80023b8:	3df5c28f 	.word	0x3df5c28f
 80023bc:	404e147b 	.word	0x404e147b
 80023c0:	200007d8 	.word	0x200007d8
 80023c4:	20000794 	.word	0x20000794
 80023c8:	3f99999a 	.word	0x3f99999a
 80023cc:	40066666 	.word	0x40066666
 80023d0:	404eb852 	.word	0x404eb852
 80023d4:	40a147ae 	.word	0x40a147ae

080023d8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop

080023dc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <HAL_MspInit+0x3c>)
{
 80023de:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80023e0:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST 
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 80023e2:	490e      	ldr	r1, [pc, #56]	; (800241c <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 80023e4:	f042 0201 	orr.w	r2, r2, #1
 80023e8:	619a      	str	r2, [r3, #24]
 80023ea:	699a      	ldr	r2, [r3, #24]
 80023ec:	f002 0201 	and.w	r2, r2, #1
 80023f0:	9200      	str	r2, [sp, #0]
 80023f2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023f4:	69da      	ldr	r2, [r3, #28]
 80023f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023fa:	61da      	str	r2, [r3, #28]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002402:	9301      	str	r3, [sp, #4]
 8002404:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8002406:	684b      	ldr	r3, [r1, #4]
 8002408:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800240c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002410:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002412:	b002      	add	sp, #8
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	40010000 	.word	0x40010000

08002420 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	2300      	movs	r3, #0
{
 8002422:	b530      	push	{r4, r5, lr}
  if(hi2c->Instance==I2C1)
 8002424:	6801      	ldr	r1, [r0, #0]
 8002426:	4a14      	ldr	r2, [pc, #80]	; (8002478 <HAL_I2C_MspInit+0x58>)
{
 8002428:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C1)
 800242a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002430:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hi2c->Instance==I2C1)
 8002434:	d001      	beq.n	800243a <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002436:	b007      	add	sp, #28
 8002438:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800243a:	20c0      	movs	r0, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800243c:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800243e:	2512      	movs	r5, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002440:	4c0e      	ldr	r4, [pc, #56]	; (800247c <HAL_I2C_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002442:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002444:	69a3      	ldr	r3, [r4, #24]
 8002446:	f043 0308 	orr.w	r3, r3, #8
 800244a:	61a3      	str	r3, [r4, #24]
 800244c:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800244e:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002456:	480a      	ldr	r0, [pc, #40]	; (8002480 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002458:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800245a:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800245c:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800245e:	f002 f8e5 	bl	800462c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002462:	69e3      	ldr	r3, [r4, #28]
 8002464:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002468:	61e3      	str	r3, [r4, #28]
 800246a:	69e3      	ldr	r3, [r4, #28]
 800246c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002470:	9301      	str	r3, [sp, #4]
 8002472:	9b01      	ldr	r3, [sp, #4]
}
 8002474:	b007      	add	sp, #28
 8002476:	bd30      	pop	{r4, r5, pc}
 8002478:	40005400 	.word	0x40005400
 800247c:	40021000 	.word	0x40021000
 8002480:	40010c00 	.word	0x40010c00

08002484 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002484:	b510      	push	{r4, lr}
  if(htim_base->Instance==TIM2)
 8002486:	6803      	ldr	r3, [r0, #0]
{
 8002488:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 800248a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800248e:	d019      	beq.n	80024c4 <HAL_TIM_Base_MspInit+0x40>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8002490:	4a17      	ldr	r2, [pc, #92]	; (80024f0 <HAL_TIM_Base_MspInit+0x6c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d001      	beq.n	800249a <HAL_TIM_Base_MspInit+0x16>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002496:	b002      	add	sp, #8
 8002498:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800249a:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 800249c:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <HAL_TIM_Base_MspInit+0x70>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800249e:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024a0:	69dc      	ldr	r4, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80024a2:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024a4:	f044 0402 	orr.w	r4, r4, #2
 80024a8:	61dc      	str	r4, [r3, #28]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	9301      	str	r3, [sp, #4]
 80024b2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80024b4:	f001 ff50 	bl	8004358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024b8:	201d      	movs	r0, #29
}
 80024ba:	b002      	add	sp, #8
 80024bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024c0:	f001 bf80 	b.w	80043c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024c4:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024c6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80024ca:	69dc      	ldr	r4, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024cc:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024ce:	f044 0401 	orr.w	r4, r4, #1
 80024d2:	61dc      	str	r4, [r3, #28]
 80024d4:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024d6:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024e0:	f001 ff3a 	bl	8004358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024e4:	201c      	movs	r0, #28
}
 80024e6:	b002      	add	sp, #8
 80024e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024ec:	f001 bf6a 	b.w	80043c4 <HAL_NVIC_EnableIRQ>
 80024f0:	40000400 	.word	0x40000400
 80024f4:	40021000 	.word	0x40021000

080024f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024f8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fa:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 80024fc:	6802      	ldr	r2, [r0, #0]
 80024fe:	4b26      	ldr	r3, [pc, #152]	; (8002598 <HAL_UART_MspInit+0xa0>)
{
 8002500:	b086      	sub	sp, #24
  if(huart->Instance==USART1)
 8002502:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002508:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART1)
 800250c:	d001      	beq.n	8002512 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800250e:	b006      	add	sp, #24
 8002510:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002512:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002516:	4606      	mov	r6, r0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002518:	2002      	movs	r0, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800251a:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 800251c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002526:	619a      	str	r2, [r3, #24]
 8002528:	699a      	ldr	r2, [r3, #24]
 800252a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800252e:	9200      	str	r2, [sp, #0]
 8002530:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002532:	699a      	ldr	r2, [r3, #24]
 8002534:	f042 0204 	orr.w	r2, r2, #4
 8002538:	619a      	str	r2, [r3, #24]
 800253a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800253c:	9102      	str	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002544:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002546:	9003      	str	r0, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002548:	4814      	ldr	r0, [pc, #80]	; (800259c <HAL_UART_MspInit+0xa4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800254c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254e:	f002 f86d 	bl	800462c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002552:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002556:	a902      	add	r1, sp, #8
 8002558:	4810      	ldr	r0, [pc, #64]	; (800259c <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800255a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	e9cd 4403 	strd	r4, r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002560:	f002 f864 	bl	800462c <HAL_GPIO_Init>
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002564:	2080      	movs	r0, #128	; 0x80
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002566:	2220      	movs	r2, #32
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800256c:	4d0c      	ldr	r5, [pc, #48]	; (80025a0 <HAL_UART_MspInit+0xa8>)
 800256e:	490d      	ldr	r1, [pc, #52]	; (80025a4 <HAL_UART_MspInit+0xac>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002570:	60e8      	str	r0, [r5, #12]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002572:	4628      	mov	r0, r5
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002574:	e9c5 4401 	strd	r4, r4, [r5, #4]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002578:	e9c5 4404 	strd	r4, r4, [r5, #16]
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800257c:	6029      	str	r1, [r5, #0]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800257e:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002582:	f001 ff45 	bl	8004410 <HAL_DMA_Init>
 8002586:	b918      	cbnz	r0, 8002590 <HAL_UART_MspInit+0x98>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002588:	6375      	str	r5, [r6, #52]	; 0x34
 800258a:	626e      	str	r6, [r5, #36]	; 0x24
}
 800258c:	b006      	add	sp, #24
 800258e:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8002590:	f7ff ff22 	bl	80023d8 <Error_Handler>
 8002594:	e7f8      	b.n	8002588 <HAL_UART_MspInit+0x90>
 8002596:	bf00      	nop
 8002598:	40013800 	.word	0x40013800
 800259c:	40010800 	.word	0x40010800
 80025a0:	20000734 	.word	0x20000734
 80025a4:	40020058 	.word	0x40020058

080025a8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop

080025ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ac:	e7fe      	b.n	80025ac <HardFault_Handler>
 80025ae:	bf00      	nop

080025b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025b0:	e7fe      	b.n	80025b0 <MemManage_Handler>
 80025b2:	bf00      	nop

080025b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025b4:	e7fe      	b.n	80025b4 <BusFault_Handler>
 80025b6:	bf00      	nop

080025b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025b8:	e7fe      	b.n	80025b8 <UsageFault_Handler>
 80025ba:	bf00      	nop

080025bc <SVC_Handler>:
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop

080025c0 <DebugMon_Handler>:
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop

080025c4 <PendSV_Handler>:
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop

080025c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ca:	f001 fe8f 	bl	80042ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systick_Inc();
  /* USER CODE END SysTick_IRQn 1 */
}
 80025ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  systick_Inc();
 80025d2:	f001 be4d 	b.w	8004270 <systick_Inc>
 80025d6:	bf00      	nop

080025d8 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80025d8:	4801      	ldr	r0, [pc, #4]	; (80025e0 <DMA1_Channel5_IRQHandler+0x8>)
 80025da:	f001 bf91 	b.w	8004500 <HAL_DMA_IRQHandler>
 80025de:	bf00      	nop
 80025e0:	20000734 	.word	0x20000734

080025e4 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80025e4:	4801      	ldr	r0, [pc, #4]	; (80025ec <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80025e6:	f002 bf57 	b.w	8005498 <HAL_PCD_IRQHandler>
 80025ea:	bf00      	nop
 80025ec:	200019c0 	.word	0x200019c0

080025f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025f2:	4803      	ldr	r0, [pc, #12]	; (8002600 <TIM2_IRQHandler+0x10>)
 80025f4:	f003 ff6a 	bl	80064cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  led_update();
  /* USER CODE END TIM2_IRQn 1 */
}
 80025f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  led_update();
 80025fc:	f001 bac8 	b.w	8003b90 <led_update>
 8002600:	200007d8 	.word	0x200007d8

08002604 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002604:	b530      	push	{r4, r5, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//this timer runs on 200Hz
	if (timer_index % 2 == 0){
 8002606:	4c65      	ldr	r4, [pc, #404]	; (800279c <TIM3_IRQHandler+0x198>)
{
 8002608:	b0f1      	sub	sp, #452	; 0x1c4
	if (timer_index % 2 == 0){
 800260a:	f9b4 3000 	ldrsh.w	r3, [r4]
 800260e:	f013 0501 	ands.w	r5, r3, #1
 8002612:	d022      	beq.n	800265a <TIM3_IRQHandler+0x56>
			CDC_Transmit_FS(str,strlen(str));
		  }

	}

	if (timer_index % 10 == 0){
 8002614:	4a62      	ldr	r2, [pc, #392]	; (80027a0 <TIM3_IRQHandler+0x19c>)
 8002616:	17d9      	asrs	r1, r3, #31
 8002618:	fb82 0203 	smull	r0, r2, r2, r3
 800261c:	ebc1 02a2 	rsb	r2, r1, r2, asr #2
 8002620:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002624:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 8002628:	b212      	sxth	r2, r2
 800262a:	2a00      	cmp	r2, #0
 800262c:	d03a      	beq.n	80026a4 <TIM3_IRQHandler+0xa0>
		//code here runs on 20Hz
		ms5611_timer_update();
	}

	if (timer_index % 20 == 0){
 800262e:	4a5c      	ldr	r2, [pc, #368]	; (80027a0 <TIM3_IRQHandler+0x19c>)
 8002630:	fb82 0203 	smull	r0, r2, r2, r3
 8002634:	ebc1 01e2 	rsb	r1, r1, r2, asr #3
 8002638:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800263c:	eba3 0181 	sub.w	r1, r3, r1, lsl #2
 8002640:	b209      	sxth	r1, r1
 8002642:	b301      	cbz	r1, 8002686 <TIM3_IRQHandler+0x82>
			XIMU_sens.lon = GNSS.GNGGA.lon;
			XIMU_sens.gps_ts = millis();
		}
	}

	timer_index++;
 8002644:	3301      	adds	r3, #1
 8002646:	b21b      	sxth	r3, r3
	if (timer_index == 200){
 8002648:	2bc8      	cmp	r3, #200	; 0xc8
		timer_index = 0;
 800264a:	bf08      	it	eq
 800264c:	2300      	moveq	r3, #0
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800264e:	4855      	ldr	r0, [pc, #340]	; (80027a4 <TIM3_IRQHandler+0x1a0>)
		timer_index = 0;
 8002650:	8023      	strh	r3, [r4, #0]
  HAL_TIM_IRQHandler(&htim3);
 8002652:	f003 ff3b 	bl	80064cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002656:	b071      	add	sp, #452	; 0x1c4
 8002658:	bd30      	pop	{r4, r5, pc}
		  int status = dmp_read_fifo(gyro, accel, quat, &timestamp, &sensors,&more);
 800265a:	f10d 0209 	add.w	r2, sp, #9
 800265e:	f10d 030a 	add.w	r3, sp, #10
 8002662:	e9cd 3200 	strd	r3, r2, [sp]
 8002666:	a804      	add	r0, sp, #16
 8002668:	a906      	add	r1, sp, #24
 800266a:	aa08      	add	r2, sp, #32
 800266c:	ab03      	add	r3, sp, #12
		  short gyro[3] = {0,0,0}, accel[3] = {0,0,0}, sensors;
 800266e:	9504      	str	r5, [sp, #16]
 8002670:	f8ad 5014 	strh.w	r5, [sp, #20]
 8002674:	9506      	str	r5, [sp, #24]
 8002676:	f8ad 501c 	strh.w	r5, [sp, #28]
		  int status = dmp_read_fifo(gyro, accel, quat, &timestamp, &sensors,&more);
 800267a:	f7ff fb63 	bl	8001d44 <dmp_read_fifo>
		  if (status == 0){
 800267e:	b1b8      	cbz	r0, 80026b0 <TIM3_IRQHandler+0xac>
 8002680:	f9b4 3000 	ldrsh.w	r3, [r4]
 8002684:	e7c6      	b.n	8002614 <TIM3_IRQHandler+0x10>
		int status = mpu_get_compass_reg(data,NULL);
 8002686:	a80c      	add	r0, sp, #48	; 0x30
 8002688:	f7ff fa3c 	bl	8001b04 <mpu_get_compass_reg>
		if (status == 0){
 800268c:	2800      	cmp	r0, #0
 800268e:	d06a      	beq.n	8002766 <TIM3_IRQHandler+0x162>
		GNSS_RX_Update();
 8002690:	f001 f83e 	bl	8003710 <GNSS_RX_Update>
		if (GNSS.GNGGA.status != 0){//data is valid
 8002694:	4b44      	ldr	r3, [pc, #272]	; (80027a8 <TIM3_IRQHandler+0x1a4>)
 8002696:	f8d3 24a4 	ldr.w	r2, [r3, #1188]	; 0x4a4
 800269a:	2a00      	cmp	r2, #0
 800269c:	d151      	bne.n	8002742 <TIM3_IRQHandler+0x13e>
 800269e:	f9b4 3000 	ldrsh.w	r3, [r4]
 80026a2:	e7cf      	b.n	8002644 <TIM3_IRQHandler+0x40>
		ms5611_timer_update();
 80026a4:	f001 fcb8 	bl	8004018 <ms5611_timer_update>
 80026a8:	f9b4 3000 	ldrsh.w	r3, [r4]
 80026ac:	17d9      	asrs	r1, r3, #31
 80026ae:	e7be      	b.n	800262e <TIM3_IRQHandler+0x2a>
			  XIMU_sens.q0 = quat[0];
 80026b0:	9808      	ldr	r0, [sp, #32]
 80026b2:	f7fd fea7 	bl	8000404 <__aeabi_i2d>
 80026b6:	4d3d      	ldr	r5, [pc, #244]	; (80027ac <TIM3_IRQHandler+0x1a8>)
 80026b8:	e9c5 0100 	strd	r0, r1, [r5]
			  XIMU_sens.q1 = quat[1];
 80026bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80026be:	f7fd fea1 	bl	8000404 <__aeabi_i2d>
 80026c2:	e9c5 0102 	strd	r0, r1, [r5, #8]
			  XIMU_sens.q2 = quat[2];
 80026c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80026c8:	f7fd fe9c 	bl	8000404 <__aeabi_i2d>
 80026cc:	e9c5 0104 	strd	r0, r1, [r5, #16]
			  XIMU_sens.q3 = quat[3];
 80026d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80026d2:	f7fd fe97 	bl	8000404 <__aeabi_i2d>
 80026d6:	e9c5 0106 	strd	r0, r1, [r5, #24]
			  XIMU_sens.ax = accel[0];
 80026da:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 80026de:	f7fd fe91 	bl	8000404 <__aeabi_i2d>
 80026e2:	e9c5 0108 	strd	r0, r1, [r5, #32]
			  XIMU_sens.ay = accel[1];
 80026e6:	f9bd 001a 	ldrsh.w	r0, [sp, #26]
 80026ea:	f7fd fe8b 	bl	8000404 <__aeabi_i2d>
 80026ee:	e9c5 010a 	strd	r0, r1, [r5, #40]	; 0x28
			  XIMU_sens.az = accel[2];
 80026f2:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80026f6:	f7fd fe85 	bl	8000404 <__aeabi_i2d>
 80026fa:	e9c5 010c 	strd	r0, r1, [r5, #48]	; 0x30
			  XIMU_sens.gx = gyro[0];
 80026fe:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8002702:	f7fd fe7f 	bl	8000404 <__aeabi_i2d>
 8002706:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
			  XIMU_sens.gy = gyro[1];
 800270a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 800270e:	f7fd fe79 	bl	8000404 <__aeabi_i2d>
 8002712:	e9c5 0110 	strd	r0, r1, [r5, #64]	; 0x40
			  XIMU_sens.gz = gyro[2];
 8002716:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 800271a:	f7fd fe73 	bl	8000404 <__aeabi_i2d>
 800271e:	e9c5 0112 	strd	r0, r1, [r5, #72]	; 0x48
			  XIMU_sens.qag_ts = millis();
 8002722:	f001 fd95 	bl	8004250 <millis>
 8002726:	6528      	str	r0, [r5, #80]	; 0x50
			  calc_absolute_acceleration();
 8002728:	f000 f978 	bl	8002a1c <calc_absolute_acceleration>
			build_data_str(str);
 800272c:	a80c      	add	r0, sp, #48	; 0x30
 800272e:	f000 fe23 	bl	8003378 <build_data_str>
			CDC_Transmit_FS(str,strlen(str));
 8002732:	a80c      	add	r0, sp, #48	; 0x30
 8002734:	f7fd fd0c 	bl	8000150 <strlen>
 8002738:	b281      	uxth	r1, r0
 800273a:	a80c      	add	r0, sp, #48	; 0x30
 800273c:	f005 fb0e 	bl	8007d5c <CDC_Transmit_FS>
 8002740:	e79e      	b.n	8002680 <TIM3_IRQHandler+0x7c>
			XIMU_sens.lat = GNSS.GNGGA.lat;
 8002742:	4d1a      	ldr	r5, [pc, #104]	; (80027ac <TIM3_IRQHandler+0x1a8>)
 8002744:	f503 6290 	add.w	r2, r3, #1152	; 0x480
			XIMU_sens.lon = GNSS.GNGGA.lon;
 8002748:	f503 6393 	add.w	r3, r3, #1176	; 0x498
			XIMU_sens.lat = GNSS.GNGGA.lat;
 800274c:	e9d2 0100 	ldrd	r0, r1, [r2]
			XIMU_sens.lon = GNSS.GNGGA.lon;
 8002750:	e9d3 2300 	ldrd	r2, r3, [r3]
			XIMU_sens.lat = GNSS.GNGGA.lat;
 8002754:	e9c5 0124 	strd	r0, r1, [r5, #144]	; 0x90
			XIMU_sens.lon = GNSS.GNGGA.lon;
 8002758:	e9c5 2326 	strd	r2, r3, [r5, #152]	; 0x98
			XIMU_sens.gps_ts = millis();
 800275c:	f001 fd78 	bl	8004250 <millis>
 8002760:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
 8002764:	e79b      	b.n	800269e <TIM3_IRQHandler+0x9a>
			XIMU_sens.mx = data[0];
 8002766:	f9bd 0030 	ldrsh.w	r0, [sp, #48]	; 0x30
 800276a:	f7fd fe4b 	bl	8000404 <__aeabi_i2d>
 800276e:	4d0f      	ldr	r5, [pc, #60]	; (80027ac <TIM3_IRQHandler+0x1a8>)
 8002770:	e9c5 0116 	strd	r0, r1, [r5, #88]	; 0x58
			XIMU_sens.my = data[1];
 8002774:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 8002778:	f7fd fe44 	bl	8000404 <__aeabi_i2d>
 800277c:	e9c5 0118 	strd	r0, r1, [r5, #96]	; 0x60
			XIMU_sens.mz = data[2];
 8002780:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 8002784:	f7fd fe3e 	bl	8000404 <__aeabi_i2d>
 8002788:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
			calibrate_mag_reading();
 800278c:	f000 f87c 	bl	8002888 <calibrate_mag_reading>
			XIMU_sens.m_ts = millis();
 8002790:	f001 fd5e 	bl	8004250 <millis>
 8002794:	6728      	str	r0, [r5, #112]	; 0x70
			calc_magnetic_orientation();
 8002796:	f000 fb2d 	bl	8002df4 <calc_magnetic_orientation>
 800279a:	e779      	b.n	8002690 <TIM3_IRQHandler+0x8c>
 800279c:	200003b4 	.word	0x200003b4
 80027a0:	66666667 	.word	0x66666667
 80027a4:	200006f4 	.word	0x200006f4
 80027a8:	20000850 	.word	0x20000850
 80027ac:	200005f8 	.word	0x200005f8

080027b0 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80027b0:	4a0c      	ldr	r2, [pc, #48]	; (80027e4 <_sbrk+0x34>)
{
 80027b2:	b508      	push	{r3, lr}
	if (heap_end == 0)
 80027b4:	6813      	ldr	r3, [r2, #0]
 80027b6:	b133      	cbz	r3, 80027c6 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80027b8:	4669      	mov	r1, sp
 80027ba:	4418      	add	r0, r3
 80027bc:	4288      	cmp	r0, r1
 80027be:	d809      	bhi.n	80027d4 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80027c0:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80027c6:	4908      	ldr	r1, [pc, #32]	; (80027e8 <_sbrk+0x38>)
 80027c8:	460b      	mov	r3, r1
 80027ca:	6011      	str	r1, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80027cc:	4669      	mov	r1, sp
 80027ce:	4418      	add	r0, r3
 80027d0:	4288      	cmp	r0, r1
 80027d2:	d9f5      	bls.n	80027c0 <_sbrk+0x10>
		errno = ENOMEM;
 80027d4:	f005 fd42 	bl	800825c <__errno>
 80027d8:	220c      	movs	r2, #12
		return (caddr_t) -1;
 80027da:	f04f 33ff 	mov.w	r3, #4294967295
		errno = ENOMEM;
 80027de:	6002      	str	r2, [r0, #0]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd08      	pop	{r3, pc}
 80027e4:	200003b8 	.word	0x200003b8
 80027e8:	20001c30 	.word	0x20001c30

080027ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027ec:	b430      	push	{r4, r5}

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80027ee:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80027f2:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR |= 0x00000001U;
 80027f6:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <SystemInit+0x44>)
  RCC->CFGR &= 0xF8FF0000U;
 80027f8:	4a0e      	ldr	r2, [pc, #56]	; (8002834 <SystemInit+0x48>)
  RCC->CR |= 0x00000001U;
 80027fa:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80027fc:	480e      	ldr	r0, [pc, #56]	; (8002838 <SystemInit+0x4c>)
  RCC->CR |= 0x00000001U;
 80027fe:	f041 0101 	orr.w	r1, r1, #1
 8002802:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= 0xF8FF0000U;
 8002804:	6859      	ldr	r1, [r3, #4]
 8002806:	400a      	ands	r2, r1
 8002808:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002810:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002814:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800281c:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002824:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000U;
 8002826:	609d      	str	r5, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002828:	6084      	str	r4, [r0, #8]
#endif 
}
 800282a:	bc30      	pop	{r4, r5}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40021000 	.word	0x40021000
 8002834:	f8ff0000 	.word	0xf8ff0000
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800283c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800283e:	e003      	b.n	8002848 <LoopCopyDataInit>

08002840 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002842:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002844:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002846:	3104      	adds	r1, #4

08002848 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002848:	480a      	ldr	r0, [pc, #40]	; (8002874 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800284a:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800284c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800284e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002850:	d3f6      	bcc.n	8002840 <CopyDataInit>
  ldr r2, =_sbss
 8002852:	4a0a      	ldr	r2, [pc, #40]	; (800287c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002854:	e002      	b.n	800285c <LoopFillZerobss>

08002856 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002856:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002858:	f842 3b04 	str.w	r3, [r2], #4

0800285c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800285e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002860:	d3f9      	bcc.n	8002856 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002862:	f7ff ffc3 	bl	80027ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002866:	f005 fcff 	bl	8008268 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800286a:	f7ff fc17 	bl	800209c <main>
  bx lr
 800286e:	4770      	bx	lr
  ldr r3, =_sidata
 8002870:	0800c040 	.word	0x0800c040
  ldr r0, =_sdata
 8002874:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002878:	20000388 	.word	0x20000388
  ldr r2, =_sbss
 800287c:	20000388 	.word	0x20000388
  ldr r3, = _ebss
 8002880:	20001c30 	.word	0x20001c30

08002884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002884:	e7fe      	b.n	8002884 <ADC1_2_IRQHandler>
	...

08002888 <calibrate_mag_reading>:
#include "dataProcessing.h"
#include "string.h"
#include "stdlib.h"
#include "math.h"

void calibrate_mag_reading(){
 8002888:	e92d 4fd0 	stmdb	sp!, {r4, r6, r7, r8, r9, sl, fp, lr}

	double m[3]; //magnatic readings minus offset

	m[0] = XIMU_sens.mx - MAG_X_OFFSET;
 800288c:	a34a      	add	r3, pc, #296	; (adr r3, 80029b8 <calibrate_mag_reading+0x130>)
 800288e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002892:	4c61      	ldr	r4, [pc, #388]	; (8002a18 <calibrate_mag_reading+0x190>)
void calibrate_mag_reading(){
 8002894:	b082      	sub	sp, #8
	m[0] = XIMU_sens.mx - MAG_X_OFFSET;
 8002896:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
 800289a:	f7fd fc65 	bl	8000168 <__aeabi_dsub>
	m[1] = XIMU_sens.my - MAG_Y_OFFSET;
 800289e:	a348      	add	r3, pc, #288	; (adr r3, 80029c0 <calibrate_mag_reading+0x138>)
 80028a0:	e9d3 2300 	ldrd	r2, r3, [r3]
	m[0] = XIMU_sens.mx - MAG_X_OFFSET;
 80028a4:	4606      	mov	r6, r0
 80028a6:	460f      	mov	r7, r1
	m[1] = XIMU_sens.my - MAG_Y_OFFSET;
 80028a8:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
 80028ac:	f7fd fc5c 	bl	8000168 <__aeabi_dsub>
	m[2] = XIMU_sens.mz - MAG_Z_OFFSET;
 80028b0:	a345      	add	r3, pc, #276	; (adr r3, 80029c8 <calibrate_mag_reading+0x140>)
 80028b2:	e9d3 2300 	ldrd	r2, r3, [r3]
	m[1] = XIMU_sens.my - MAG_Y_OFFSET;
 80028b6:	4682      	mov	sl, r0
 80028b8:	468b      	mov	fp, r1
	m[2] = XIMU_sens.mz - MAG_Z_OFFSET;
 80028ba:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
 80028be:	f7fd fc55 	bl	800016c <__adddf3>

	XIMU_sens.mx = MAG_TRANSF_11*m[0] + MAG_TRANSF_12*m[1] + MAG_TRANSF_13*m[2];
 80028c2:	a343      	add	r3, pc, #268	; (adr r3, 80029d0 <calibrate_mag_reading+0x148>)
 80028c4:	e9d3 2300 	ldrd	r2, r3, [r3]
	m[2] = XIMU_sens.mz - MAG_Z_OFFSET;
 80028c8:	e9cd 0100 	strd	r0, r1, [sp]
	XIMU_sens.mx = MAG_TRANSF_11*m[0] + MAG_TRANSF_12*m[1] + MAG_TRANSF_13*m[2];
 80028cc:	4630      	mov	r0, r6
 80028ce:	4639      	mov	r1, r7
 80028d0:	f7fd fe02 	bl	80004d8 <__aeabi_dmul>
 80028d4:	a340      	add	r3, pc, #256	; (adr r3, 80029d8 <calibrate_mag_reading+0x150>)
 80028d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028da:	4680      	mov	r8, r0
 80028dc:	4689      	mov	r9, r1
 80028de:	4650      	mov	r0, sl
 80028e0:	4659      	mov	r1, fp
 80028e2:	f7fd fdf9 	bl	80004d8 <__aeabi_dmul>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4640      	mov	r0, r8
 80028ec:	4649      	mov	r1, r9
 80028ee:	f7fd fc3d 	bl	800016c <__adddf3>
 80028f2:	a33b      	add	r3, pc, #236	; (adr r3, 80029e0 <calibrate_mag_reading+0x158>)
 80028f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f8:	4680      	mov	r8, r0
 80028fa:	4689      	mov	r9, r1
 80028fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002900:	f7fd fdea 	bl	80004d8 <__aeabi_dmul>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4640      	mov	r0, r8
 800290a:	4649      	mov	r1, r9
 800290c:	f7fd fc2e 	bl	800016c <__adddf3>
	XIMU_sens.my = MAG_TRANSF_21*m[0] + MAG_TRANSF_22*m[1] + MAG_TRANSF_23*m[2];
 8002910:	a335      	add	r3, pc, #212	; (adr r3, 80029e8 <calibrate_mag_reading+0x160>)
 8002912:	e9d3 2300 	ldrd	r2, r3, [r3]
	XIMU_sens.mx = MAG_TRANSF_11*m[0] + MAG_TRANSF_12*m[1] + MAG_TRANSF_13*m[2];
 8002916:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
	XIMU_sens.my = MAG_TRANSF_21*m[0] + MAG_TRANSF_22*m[1] + MAG_TRANSF_23*m[2];
 800291a:	4630      	mov	r0, r6
 800291c:	4639      	mov	r1, r7
 800291e:	f7fd fddb 	bl	80004d8 <__aeabi_dmul>
 8002922:	a333      	add	r3, pc, #204	; (adr r3, 80029f0 <calibrate_mag_reading+0x168>)
 8002924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002928:	4680      	mov	r8, r0
 800292a:	4689      	mov	r9, r1
 800292c:	4650      	mov	r0, sl
 800292e:	4659      	mov	r1, fp
 8002930:	f7fd fdd2 	bl	80004d8 <__aeabi_dmul>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4640      	mov	r0, r8
 800293a:	4649      	mov	r1, r9
 800293c:	f7fd fc16 	bl	800016c <__adddf3>
 8002940:	a32d      	add	r3, pc, #180	; (adr r3, 80029f8 <calibrate_mag_reading+0x170>)
 8002942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002946:	4680      	mov	r8, r0
 8002948:	4689      	mov	r9, r1
 800294a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800294e:	f7fd fdc3 	bl	80004d8 <__aeabi_dmul>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4640      	mov	r0, r8
 8002958:	4649      	mov	r1, r9
 800295a:	f7fd fc07 	bl	800016c <__adddf3>
	XIMU_sens.mz = MAG_TRANSF_31*m[0] + MAG_TRANSF_32*m[1] + MAG_TRANSF_33*m[2];
 800295e:	a328      	add	r3, pc, #160	; (adr r3, 8002a00 <calibrate_mag_reading+0x178>)
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
	XIMU_sens.my = MAG_TRANSF_21*m[0] + MAG_TRANSF_22*m[1] + MAG_TRANSF_23*m[2];
 8002964:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
	XIMU_sens.mz = MAG_TRANSF_31*m[0] + MAG_TRANSF_32*m[1] + MAG_TRANSF_33*m[2];
 8002968:	4630      	mov	r0, r6
 800296a:	4639      	mov	r1, r7
 800296c:	f7fd fdb4 	bl	80004d8 <__aeabi_dmul>
 8002970:	a325      	add	r3, pc, #148	; (adr r3, 8002a08 <calibrate_mag_reading+0x180>)
 8002972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002976:	4606      	mov	r6, r0
 8002978:	460f      	mov	r7, r1
 800297a:	4650      	mov	r0, sl
 800297c:	4659      	mov	r1, fp
 800297e:	f7fd fdab 	bl	80004d8 <__aeabi_dmul>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4630      	mov	r0, r6
 8002988:	4639      	mov	r1, r7
 800298a:	f7fd fbef 	bl	800016c <__adddf3>
 800298e:	a320      	add	r3, pc, #128	; (adr r3, 8002a10 <calibrate_mag_reading+0x188>)
 8002990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002994:	4606      	mov	r6, r0
 8002996:	460f      	mov	r7, r1
 8002998:	e9dd 0100 	ldrd	r0, r1, [sp]
 800299c:	f7fd fd9c 	bl	80004d8 <__aeabi_dmul>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4630      	mov	r0, r6
 80029a6:	4639      	mov	r1, r7
 80029a8:	f7fd fbe0 	bl	800016c <__adddf3>
 80029ac:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
}
 80029b0:	b002      	add	sp, #8
 80029b2:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 80029b6:	bf00      	nop
 80029b8:	810624dd 	.word	0x810624dd
 80029bc:	40615795 	.word	0x40615795
 80029c0:	189374bc 	.word	0x189374bc
 80029c4:	40706804 	.word	0x40706804
 80029c8:	fdf3b646 	.word	0xfdf3b646
 80029cc:	405268d4 	.word	0x405268d4
 80029d0:	51eb851f 	.word	0x51eb851f
 80029d4:	3ff31eb8 	.word	0x3ff31eb8
 80029d8:	e5604189 	.word	0xe5604189
 80029dc:	bfab22d0 	.word	0xbfab22d0
 80029e0:	53f7ced9 	.word	0x53f7ced9
 80029e4:	3faba5e3 	.word	0x3faba5e3
 80029e8:	020c49ba 	.word	0x020c49ba
 80029ec:	bfa6872b 	.word	0xbfa6872b
 80029f0:	78d4fdf4 	.word	0x78d4fdf4
 80029f4:	3ff326e9 	.word	0x3ff326e9
 80029f8:	47ae147b 	.word	0x47ae147b
 80029fc:	3f847ae1 	.word	0x3f847ae1
 8002a00:	76c8b439 	.word	0x76c8b439
 8002a04:	bf9a9fbe 	.word	0xbf9a9fbe
 8002a08:	76c8b439 	.word	0x76c8b439
 8002a0c:	bf8a9fbe 	.word	0xbf8a9fbe
 8002a10:	a5e353f8 	.word	0xa5e353f8
 8002a14:	3ff2c49b 	.word	0x3ff2c49b
 8002a18:	200005f8 	.word	0x200005f8

08002a1c <calc_absolute_acceleration>:

void calc_absolute_acceleration() {
 8002a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	double ax = XIMU_sens.ax,	ay = XIMU_sens.ay,	az = XIMU_sens.az;
 8002a20:	49c9      	ldr	r1, [pc, #804]	; (8002d48 <calc_absolute_acceleration+0x32c>)
void calc_absolute_acceleration() {
 8002a22:	b099      	sub	sp, #100	; 0x64
	double q0 = XIMU_sens.q0,	q1 = XIMU_sens.q1,	q2 = XIMU_sens.q2,	q3 = XIMU_sens.q3;
 8002a24:	e9d1 8900 	ldrd	r8, r9, [r1]
 8002a28:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
	double ax = XIMU_sens.ax,	ay = XIMU_sens.ay,	az = XIMU_sens.az;
 8002a2c:	e9d1 4508 	ldrd	r4, r5, [r1, #32]
 8002a30:	e9d1 ab0c 	ldrd	sl, fp, [r1, #48]	; 0x30
	double q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3, norm_2;
	q0q0 = q0 * q0;
 8002a34:	4642      	mov	r2, r8
 8002a36:	464b      	mov	r3, r9
	double ax = XIMU_sens.ax,	ay = XIMU_sens.ay,	az = XIMU_sens.az;
 8002a38:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002a3c:	e9d1 450a 	ldrd	r4, r5, [r1, #40]	; 0x28
 8002a40:	e9cd ab04 	strd	sl, fp, [sp, #16]
	double q0 = XIMU_sens.q0,	q1 = XIMU_sens.q1,	q2 = XIMU_sens.q2,	q3 = XIMU_sens.q3;
 8002a44:	e9d1 ab06 	ldrd	sl, fp, [r1, #24]
	double ax = XIMU_sens.ax,	ay = XIMU_sens.ay,	az = XIMU_sens.az;
 8002a48:	e9cd 4500 	strd	r4, r5, [sp]
	double q0 = XIMU_sens.q0,	q1 = XIMU_sens.q1,	q2 = XIMU_sens.q2,	q3 = XIMU_sens.q3;
 8002a4c:	e9d1 4504 	ldrd	r4, r5, [r1, #16]
	q0q0 = q0 * q0;
 8002a50:	4640      	mov	r0, r8
 8002a52:	4649      	mov	r1, r9
 8002a54:	f7fd fd40 	bl	80004d8 <__aeabi_dmul>
	q0q1 = q0 * q1;
 8002a58:	4632      	mov	r2, r6
	q0q0 = q0 * q0;
 8002a5a:	e9cd 0106 	strd	r0, r1, [sp, #24]
	q0q1 = q0 * q1;
 8002a5e:	463b      	mov	r3, r7
 8002a60:	4640      	mov	r0, r8
 8002a62:	4649      	mov	r1, r9
 8002a64:	f7fd fd38 	bl	80004d8 <__aeabi_dmul>
	q0q2 = q0 * q2;
 8002a68:	4622      	mov	r2, r4
	q0q1 = q0 * q1;
 8002a6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	q0q2 = q0 * q2;
 8002a6e:	462b      	mov	r3, r5
 8002a70:	4640      	mov	r0, r8
 8002a72:	4649      	mov	r1, r9
 8002a74:	f7fd fd30 	bl	80004d8 <__aeabi_dmul>
	q0q3 = q0 * q3;
 8002a78:	4652      	mov	r2, sl
	q0q2 = q0 * q2;
 8002a7a:	e9cd 0108 	strd	r0, r1, [sp, #32]
	q0q3 = q0 * q3;
 8002a7e:	465b      	mov	r3, fp
 8002a80:	4640      	mov	r0, r8
 8002a82:	4649      	mov	r1, r9
 8002a84:	f7fd fd28 	bl	80004d8 <__aeabi_dmul>
	q1q1 = q1 * q1;
 8002a88:	4632      	mov	r2, r6
	q0q3 = q0 * q3;
 8002a8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	q1q1 = q1 * q1;
 8002a8e:	463b      	mov	r3, r7
 8002a90:	4630      	mov	r0, r6
 8002a92:	4639      	mov	r1, r7
 8002a94:	f7fd fd20 	bl	80004d8 <__aeabi_dmul>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002aa0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8002aa4:	f7fd fb62 	bl	800016c <__adddf3>
	q1q2 = q1 * q2;
 8002aa8:	4622      	mov	r2, r4
 8002aaa:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8002aae:	462b      	mov	r3, r5
 8002ab0:	4630      	mov	r0, r6
 8002ab2:	4639      	mov	r1, r7
 8002ab4:	f7fd fd10 	bl	80004d8 <__aeabi_dmul>
	q1q3 = q1 * q3;
 8002ab8:	4652      	mov	r2, sl
	q1q2 = q1 * q2;
 8002aba:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	q1q3 = q1 * q3;
 8002abe:	465b      	mov	r3, fp
 8002ac0:	4630      	mov	r0, r6
 8002ac2:	4639      	mov	r1, r7
 8002ac4:	f7fd fd08 	bl	80004d8 <__aeabi_dmul>
	q2q2 = q2 * q2;
 8002ac8:	4622      	mov	r2, r4
	q1q3 = q1 * q3;
 8002aca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	q2q2 = q2 * q2;
 8002ace:	462b      	mov	r3, r5
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	f7fd fd00 	bl	80004d8 <__aeabi_dmul>
	q2q3 = q2 * q3;
 8002ad8:	4652      	mov	r2, sl
	q2q2 = q2 * q2;
 8002ada:	4680      	mov	r8, r0
 8002adc:	4689      	mov	r9, r1
	q2q3 = q2 * q3;
 8002ade:	465b      	mov	r3, fp
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	4629      	mov	r1, r5
 8002ae4:	f7fd fcf8 	bl	80004d8 <__aeabi_dmul>
	q3q3 = q3 * q3;
 8002ae8:	4652      	mov	r2, sl
	q2q3 = q2 * q3;
 8002aea:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
	q3q3 = q3 * q3;
 8002aee:	465b      	mov	r3, fp
 8002af0:	4650      	mov	r0, sl
 8002af2:	4659      	mov	r1, fp
 8002af4:	f7fd fcf0 	bl	80004d8 <__aeabi_dmul>
 8002af8:	e9dd 4500 	ldrd	r4, r5, [sp]
 8002afc:	4682      	mov	sl, r0
 8002afe:	468b      	mov	fp, r1
 8002b00:	4622      	mov	r2, r4
 8002b02:	462b      	mov	r3, r5
 8002b04:	4620      	mov	r0, r4
 8002b06:	4629      	mov	r1, r5
 8002b08:	f7fd fb30 	bl	800016c <__adddf3>
	norm_2 = q0q0 + q1q1 + q2q2 + q3q3;
 8002b0c:	4652      	mov	r2, sl
 8002b0e:	4604      	mov	r4, r0
 8002b10:	460d      	mov	r5, r1
 8002b12:	465b      	mov	r3, fp
 8002b14:	4640      	mov	r0, r8
 8002b16:	4649      	mov	r1, r9
 8002b18:	f7fd fb28 	bl	800016c <__adddf3>
 8002b1c:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 8002b20:	4632      	mov	r2, r6
 8002b22:	463b      	mov	r3, r7
 8002b24:	f7fd fb22 	bl	800016c <__adddf3>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	4987      	ldr	r1, [pc, #540]	; (8002d4c <calc_absolute_acceleration+0x330>)
 8002b30:	f7fd fdfc 	bl	800072c <__aeabi_ddiv>

	XIMU_u.ax_abs = (ax*q0q0 + 2*az*q0q2 - 2*ay*q0q3 + ax*q1q1 + 2*ay*q1q2 + 2*az*q1q3 - ax*q2q2 - ax*q3q3)/norm_2;
 8002b34:	4632      	mov	r2, r6
 8002b36:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8002b3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b3e:	463b      	mov	r3, r7
 8002b40:	f7fd fcca 	bl	80004d8 <__aeabi_dmul>
 8002b44:	4642      	mov	r2, r8
 8002b46:	4606      	mov	r6, r0
 8002b48:	460f      	mov	r7, r1
 8002b4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b4e:	464b      	mov	r3, r9
 8002b50:	f7fd fcc2 	bl	80004d8 <__aeabi_dmul>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4630      	mov	r0, r6
 8002b5a:	4639      	mov	r1, r7
 8002b5c:	f7fd fb04 	bl	8000168 <__aeabi_dsub>
 8002b60:	4622      	mov	r2, r4
 8002b62:	4606      	mov	r6, r0
 8002b64:	460f      	mov	r7, r1
 8002b66:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8002b6a:	462b      	mov	r3, r5
 8002b6c:	f7fd fcb4 	bl	80004d8 <__aeabi_dmul>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4630      	mov	r0, r6
 8002b76:	4639      	mov	r1, r7
 8002b78:	f7fd faf8 	bl	800016c <__adddf3>
 8002b7c:	4652      	mov	r2, sl
 8002b7e:	4606      	mov	r6, r0
 8002b80:	460f      	mov	r7, r1
 8002b82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b86:	465b      	mov	r3, fp
 8002b88:	f7fd fca6 	bl	80004d8 <__aeabi_dmul>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4630      	mov	r0, r6
 8002b92:	4639      	mov	r1, r7
 8002b94:	f7fd fae8 	bl	8000168 <__aeabi_dsub>
 8002b98:	4622      	mov	r2, r4
 8002b9a:	4606      	mov	r6, r0
 8002b9c:	460f      	mov	r7, r1
 8002b9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002ba2:	462b      	mov	r3, r5
 8002ba4:	f7fd fc98 	bl	80004d8 <__aeabi_dmul>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4630      	mov	r0, r6
 8002bae:	4639      	mov	r1, r7
 8002bb0:	f7fd fada 	bl	8000168 <__aeabi_dsub>
 8002bb4:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8002bb8:	4604      	mov	r4, r0
 8002bba:	460d      	mov	r5, r1
 8002bbc:	4632      	mov	r2, r6
 8002bbe:	463b      	mov	r3, r7
 8002bc0:	4630      	mov	r0, r6
 8002bc2:	4639      	mov	r1, r7
 8002bc4:	f7fd fad2 	bl	800016c <__adddf3>
 8002bc8:	4606      	mov	r6, r0
 8002bca:	460f      	mov	r7, r1
 8002bcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	f7fd faca 	bl	800016c <__adddf3>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4630      	mov	r0, r6
 8002bde:	4639      	mov	r1, r7
 8002be0:	f7fd fac4 	bl	800016c <__adddf3>
 8002be4:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8002be8:	4632      	mov	r2, r6
 8002bea:	463b      	mov	r3, r7
 8002bec:	f7fd fc74 	bl	80004d8 <__aeabi_dmul>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	4629      	mov	r1, r5
 8002bf8:	f7fd fab8 	bl	800016c <__adddf3>
 8002bfc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8002c00:	f7fd fc6a 	bl	80004d8 <__aeabi_dmul>
 8002c04:	4c52      	ldr	r4, [pc, #328]	; (8002d50 <calc_absolute_acceleration+0x334>)
 8002c06:	4632      	mov	r2, r6
 8002c08:	e9c4 0100 	strd	r0, r1, [r4]
 8002c0c:	463b      	mov	r3, r7
 8002c0e:	4630      	mov	r0, r6
 8002c10:	4639      	mov	r1, r7
 8002c12:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002c16:	f7fd faa9 	bl	800016c <__adddf3>
	XIMU_u.ay_abs = (ay*q0q0 - 2*az*q0q1 + 2*ax*q0q3 - ay*q1q1 + 2*ax*q1q2 + ay*q2q2 + 2*az*q2q3 - ay*q3q3)/norm_2;
 8002c1a:	4642      	mov	r2, r8
 8002c1c:	4604      	mov	r4, r0
 8002c1e:	460d      	mov	r5, r1
 8002c20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002c24:	464b      	mov	r3, r9
 8002c26:	f7fd faa1 	bl	800016c <__adddf3>
 8002c2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002c2e:	f7fd fc53 	bl	80004d8 <__aeabi_dmul>
 8002c32:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8002c36:	4606      	mov	r6, r0
 8002c38:	460f      	mov	r7, r1
 8002c3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002c3e:	f7fd fc4b 	bl	80004d8 <__aeabi_dmul>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	4630      	mov	r0, r6
 8002c48:	4639      	mov	r1, r7
 8002c4a:	f7fd fa8d 	bl	8000168 <__aeabi_dsub>
 8002c4e:	4622      	mov	r2, r4
 8002c50:	4606      	mov	r6, r0
 8002c52:	460f      	mov	r7, r1
 8002c54:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8002c58:	462b      	mov	r3, r5
 8002c5a:	f7fd fc3d 	bl	80004d8 <__aeabi_dmul>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4630      	mov	r0, r6
 8002c64:	4639      	mov	r1, r7
 8002c66:	f7fd fa81 	bl	800016c <__adddf3>
 8002c6a:	4652      	mov	r2, sl
 8002c6c:	4606      	mov	r6, r0
 8002c6e:	460f      	mov	r7, r1
 8002c70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002c74:	465b      	mov	r3, fp
 8002c76:	f7fd fc2f 	bl	80004d8 <__aeabi_dmul>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4630      	mov	r0, r6
 8002c80:	4639      	mov	r1, r7
 8002c82:	f7fd fa71 	bl	8000168 <__aeabi_dsub>
 8002c86:	4622      	mov	r2, r4
 8002c88:	4606      	mov	r6, r0
 8002c8a:	460f      	mov	r7, r1
 8002c8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002c90:	462b      	mov	r3, r5
 8002c92:	f7fd fc21 	bl	80004d8 <__aeabi_dmul>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4630      	mov	r0, r6
 8002c9c:	4639      	mov	r1, r7
 8002c9e:	f7fd fa63 	bl	8000168 <__aeabi_dsub>
 8002ca2:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8002ca6:	4604      	mov	r4, r0
 8002ca8:	460d      	mov	r5, r1
 8002caa:	4610      	mov	r0, r2
 8002cac:	4619      	mov	r1, r3
 8002cae:	f7fd fa5d 	bl	800016c <__adddf3>
 8002cb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002cb6:	4606      	mov	r6, r0
 8002cb8:	460f      	mov	r7, r1
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f7fd fa55 	bl	800016c <__adddf3>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4630      	mov	r0, r6
 8002cc8:	4639      	mov	r1, r7
 8002cca:	f7fd fa4f 	bl	800016c <__adddf3>
 8002cce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002cd2:	4632      	mov	r2, r6
 8002cd4:	463b      	mov	r3, r7
 8002cd6:	f7fd fbff 	bl	80004d8 <__aeabi_dmul>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4620      	mov	r0, r4
 8002ce0:	4629      	mov	r1, r5
 8002ce2:	f7fd fa43 	bl	800016c <__adddf3>
 8002ce6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8002cea:	f7fd fbf5 	bl	80004d8 <__aeabi_dmul>
 8002cee:	4c18      	ldr	r4, [pc, #96]	; (8002d50 <calc_absolute_acceleration+0x334>)
 8002cf0:	4632      	mov	r2, r6
 8002cf2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002cf6:	463b      	mov	r3, r7
 8002cf8:	4630      	mov	r0, r6
 8002cfa:	4639      	mov	r1, r7
 8002cfc:	f7fd fa36 	bl	800016c <__adddf3>
	XIMU_u.az_abs = (az*q0q0 + 2*ay*q0q1 - 2*ax*q0q2 - az*q1q1 + 2*ax*q1q3 - az*q2q2 + 2*ay*q2q3 + az*q3q3)/norm_2;
 8002d00:	4652      	mov	r2, sl
 8002d02:	4604      	mov	r4, r0
 8002d04:	460d      	mov	r5, r1
 8002d06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002d0a:	465b      	mov	r3, fp
 8002d0c:	f7fd fa2e 	bl	800016c <__adddf3>
 8002d10:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8002d14:	4652      	mov	r2, sl
 8002d16:	465b      	mov	r3, fp
 8002d18:	f7fd fbde 	bl	80004d8 <__aeabi_dmul>
 8002d1c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8002d20:	4606      	mov	r6, r0
 8002d22:	460f      	mov	r7, r1
 8002d24:	4650      	mov	r0, sl
 8002d26:	4659      	mov	r1, fp
 8002d28:	f7fd fbd6 	bl	80004d8 <__aeabi_dmul>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4630      	mov	r0, r6
 8002d32:	4639      	mov	r1, r7
 8002d34:	f7fd fa18 	bl	8000168 <__aeabi_dsub>
 8002d38:	4622      	mov	r2, r4
 8002d3a:	4606      	mov	r6, r0
 8002d3c:	460f      	mov	r7, r1
 8002d3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002d42:	462b      	mov	r3, r5
 8002d44:	e006      	b.n	8002d54 <calc_absolute_acceleration+0x338>
 8002d46:	bf00      	nop
 8002d48:	200005f8 	.word	0x200005f8
 8002d4c:	3ff00000 	.word	0x3ff00000
 8002d50:	20000778 	.word	0x20000778
 8002d54:	f7fd fbc0 	bl	80004d8 <__aeabi_dmul>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4630      	mov	r0, r6
 8002d5e:	4639      	mov	r1, r7
 8002d60:	f7fd fa04 	bl	800016c <__adddf3>
 8002d64:	4642      	mov	r2, r8
 8002d66:	4606      	mov	r6, r0
 8002d68:	460f      	mov	r7, r1
 8002d6a:	464b      	mov	r3, r9
 8002d6c:	4650      	mov	r0, sl
 8002d6e:	4659      	mov	r1, fp
 8002d70:	f7fd fbb2 	bl	80004d8 <__aeabi_dmul>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4630      	mov	r0, r6
 8002d7a:	4639      	mov	r1, r7
 8002d7c:	f7fd f9f4 	bl	8000168 <__aeabi_dsub>
 8002d80:	4622      	mov	r2, r4
 8002d82:	4606      	mov	r6, r0
 8002d84:	460f      	mov	r7, r1
 8002d86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002d8a:	462b      	mov	r3, r5
 8002d8c:	f7fd fba4 	bl	80004d8 <__aeabi_dmul>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4630      	mov	r0, r6
 8002d96:	4639      	mov	r1, r7
 8002d98:	f7fd f9e6 	bl	8000168 <__aeabi_dsub>
 8002d9c:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8002da0:	4604      	mov	r4, r0
 8002da2:	460d      	mov	r5, r1
 8002da4:	4610      	mov	r0, r2
 8002da6:	4619      	mov	r1, r3
 8002da8:	f7fd f9e0 	bl	800016c <__adddf3>
 8002dac:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8002db0:	4606      	mov	r6, r0
 8002db2:	460f      	mov	r7, r1
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	f7fd f9d8 	bl	800016c <__adddf3>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4630      	mov	r0, r6
 8002dc2:	4639      	mov	r1, r7
 8002dc4:	f7fd f9d2 	bl	800016c <__adddf3>
 8002dc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002dcc:	f7fd fb84 	bl	80004d8 <__aeabi_dmul>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	4629      	mov	r1, r5
 8002dd8:	f7fd f9c8 	bl	800016c <__adddf3>
 8002ddc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8002de0:	f7fd fb7a 	bl	80004d8 <__aeabi_dmul>
 8002de4:	4c02      	ldr	r4, [pc, #8]	; (8002df0 <calc_absolute_acceleration+0x3d4>)
 8002de6:	e9c4 0104 	strd	r0, r1, [r4, #16]
}
 8002dea:	b019      	add	sp, #100	; 0x64
 8002dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002df0:	20000778 	.word	0x20000778

08002df4 <calc_magnetic_orientation>:
	v[0] /= norm;
	v[1] /= norm;
	v[2] /= norm;
}

void calc_magnetic_orientation(){
 8002df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	double g[3];
	g[0] = -XIMU_sens.ax;
 8002df8:	4cd8      	ldr	r4, [pc, #864]	; (800315c <calc_magnetic_orientation+0x368>)
void calc_magnetic_orientation(){
 8002dfa:	b091      	sub	sp, #68	; 0x44
	g[0] = -XIMU_sens.ax;
 8002dfc:	e9d4 8908 	ldrd	r8, r9, [r4, #32]
	g[1] = -XIMU_sens.ay;
	g[2] = -XIMU_sens.az;
 8002e00:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 8002e04:	4642      	mov	r2, r8
	g[1] = -XIMU_sens.ay;
 8002e06:	e9d4 ab0a 	ldrd	sl, fp, [r4, #40]	; 0x28
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 8002e0a:	464b      	mov	r3, r9
	g[2] = -XIMU_sens.az;
 8002e0c:	e9cd 0100 	strd	r0, r1, [sp]
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 8002e10:	4640      	mov	r0, r8
 8002e12:	4649      	mov	r1, r9
 8002e14:	f7fd fb60 	bl	80004d8 <__aeabi_dmul>
 8002e18:	4652      	mov	r2, sl
 8002e1a:	4606      	mov	r6, r0
 8002e1c:	460f      	mov	r7, r1
 8002e1e:	465b      	mov	r3, fp
 8002e20:	4650      	mov	r0, sl
 8002e22:	4659      	mov	r1, fp
 8002e24:	f7fd fb58 	bl	80004d8 <__aeabi_dmul>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4630      	mov	r0, r6
 8002e2e:	4639      	mov	r1, r7
 8002e30:	f7fd f99c 	bl	800016c <__adddf3>
 8002e34:	4606      	mov	r6, r0
 8002e36:	460f      	mov	r7, r1
 8002e38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	f7fd fb4a 	bl	80004d8 <__aeabi_dmul>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4630      	mov	r0, r6
 8002e4a:	4639      	mov	r1, r7
 8002e4c:	f7fd f98e 	bl	800016c <__adddf3>
 8002e50:	f007 fe9a 	bl	800ab88 <sqrt>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	2000      	movs	r0, #0
 8002e5a:	49c1      	ldr	r1, [pc, #772]	; (8003160 <calc_magnetic_orientation+0x36c>)
 8002e5c:	f7fd fc66 	bl	800072c <__aeabi_ddiv>
 8002e60:	4606      	mov	r6, r0
 8002e62:	460f      	mov	r7, r1
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4640      	mov	r0, r8
 8002e6a:	4649      	mov	r1, r9
 8002e6c:	f7fd fb34 	bl	80004d8 <__aeabi_dmul>
 8002e70:	4684      	mov	ip, r0
 8002e72:	460d      	mov	r5, r1
 8002e74:	4632      	mov	r2, r6
 8002e76:	463b      	mov	r3, r7
 8002e78:	4650      	mov	r0, sl
 8002e7a:	4659      	mov	r1, fp
 8002e7c:	f8cd c00c 	str.w	ip, [sp, #12]
 8002e80:	9509      	str	r5, [sp, #36]	; 0x24
 8002e82:	f7fd fb29 	bl	80004d8 <__aeabi_dmul>
 8002e86:	4684      	mov	ip, r0
 8002e88:	460d      	mov	r5, r1
 8002e8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002e8e:	4632      	mov	r2, r6
 8002e90:	463b      	mov	r3, r7
 8002e92:	f8cd c020 	str.w	ip, [sp, #32]
 8002e96:	950a      	str	r5, [sp, #40]	; 0x28
 8002e98:	f7fd fb1e 	bl	80004d8 <__aeabi_dmul>
	 * 		+Z	-------------------------	-Z
	 *
	 */

	double m[3];
	m[0] = XIMU_sens.my;
 8002e9c:	e9d4 8918 	ldrd	r8, r9, [r4, #96]	; 0x60
	m[1] = XIMU_sens.mx;
 8002ea0:	e9d4 6716 	ldrd	r6, r7, [r4, #88]	; 0x58
	m[2] = -XIMU_sens.mz;
 8002ea4:	e9d4 ab1a 	ldrd	sl, fp, [r4, #104]	; 0x68
 8002ea8:	4684      	mov	ip, r0
 8002eaa:	460d      	mov	r5, r1
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 8002eac:	4642      	mov	r2, r8
 8002eae:	464b      	mov	r3, r9
 8002eb0:	4640      	mov	r0, r8
 8002eb2:	4649      	mov	r1, r9
 8002eb4:	f8cd c000 	str.w	ip, [sp]
 8002eb8:	950b      	str	r5, [sp, #44]	; 0x2c
 8002eba:	f7fd fb0d 	bl	80004d8 <__aeabi_dmul>
 8002ebe:	4632      	mov	r2, r6
 8002ec0:	4604      	mov	r4, r0
 8002ec2:	460d      	mov	r5, r1
 8002ec4:	463b      	mov	r3, r7
 8002ec6:	4630      	mov	r0, r6
 8002ec8:	4639      	mov	r1, r7
 8002eca:	f7fd fb05 	bl	80004d8 <__aeabi_dmul>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	4629      	mov	r1, r5
 8002ed6:	f7fd f949 	bl	800016c <__adddf3>
 8002eda:	4652      	mov	r2, sl
 8002edc:	4604      	mov	r4, r0
 8002ede:	460d      	mov	r5, r1
 8002ee0:	465b      	mov	r3, fp
 8002ee2:	4650      	mov	r0, sl
 8002ee4:	4659      	mov	r1, fp
 8002ee6:	f7fd faf7 	bl	80004d8 <__aeabi_dmul>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4620      	mov	r0, r4
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	f7fd f93b 	bl	800016c <__adddf3>
 8002ef6:	f007 fe47 	bl	800ab88 <sqrt>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	2000      	movs	r0, #0
 8002f00:	4997      	ldr	r1, [pc, #604]	; (8003160 <calc_magnetic_orientation+0x36c>)
 8002f02:	f7fd fc13 	bl	800072c <__aeabi_ddiv>
 8002f06:	4604      	mov	r4, r0
 8002f08:	460d      	mov	r5, r1
	v[0] /= norm;
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4640      	mov	r0, r8
 8002f10:	4649      	mov	r1, r9
 8002f12:	f7fd fae1 	bl	80004d8 <__aeabi_dmul>
	v[1] /= norm;
 8002f16:	4622      	mov	r2, r4
	v[0] /= norm;
 8002f18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
	v[1] /= norm;
 8002f1c:	462b      	mov	r3, r5
 8002f1e:	4630      	mov	r0, r6
 8002f20:	4639      	mov	r1, r7
 8002f22:	f7fd fad9 	bl	80004d8 <__aeabi_dmul>
 8002f26:	4622      	mov	r2, r4
 8002f28:	4680      	mov	r8, r0
 8002f2a:	4689      	mov	r9, r1
 8002f2c:	462b      	mov	r3, r5
 8002f2e:	4650      	mov	r0, sl
 8002f30:	4659      	mov	r1, fp
 8002f32:	f7fd fad1 	bl	80004d8 <__aeabi_dmul>
	normalize(m);

	//step1: cross gravity(negative acceleration) and magnetic field to get reference direction of East
	double East_ref[3] = {0};

	East_ref[0] = g[1]*m[2] - g[2]*m[1];
 8002f36:	9a08      	ldr	r2, [sp, #32]
 8002f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f3a:	4682      	mov	sl, r0
 8002f3c:	468b      	mov	fp, r1
 8002f3e:	f7fd facb 	bl	80004d8 <__aeabi_dmul>
 8002f42:	9d00      	ldr	r5, [sp, #0]
 8002f44:	460f      	mov	r7, r1
 8002f46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002f48:	4606      	mov	r6, r0
 8002f4a:	f101 4400 	add.w	r4, r1, #2147483648	; 0x80000000
 8002f4e:	462a      	mov	r2, r5
 8002f50:	4623      	mov	r3, r4
 8002f52:	4640      	mov	r0, r8
 8002f54:	4649      	mov	r1, r9
 8002f56:	f7fd fabf 	bl	80004d8 <__aeabi_dmul>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4630      	mov	r0, r6
 8002f60:	4639      	mov	r1, r7
 8002f62:	f7fd f901 	bl	8000168 <__aeabi_dsub>
	East_ref[1] = g[2]*m[0] - g[0]*m[2];
 8002f66:	462a      	mov	r2, r5
 8002f68:	4623      	mov	r3, r4
	East_ref[0] = g[1]*m[2] - g[2]*m[1];
 8002f6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
	East_ref[1] = g[2]*m[0] - g[0]*m[2];
 8002f6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002f72:	9500      	str	r5, [sp, #0]
 8002f74:	f7fd fab0 	bl	80004d8 <__aeabi_dmul>
 8002f78:	4652      	mov	r2, sl
 8002f7a:	465b      	mov	r3, fp
 8002f7c:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8002f80:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8002f84:	4606      	mov	r6, r0
 8002f86:	460f      	mov	r7, r1
 8002f88:	4650      	mov	r0, sl
 8002f8a:	4659      	mov	r1, fp
 8002f8c:	f7fd faa4 	bl	80004d8 <__aeabi_dmul>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4630      	mov	r0, r6
 8002f96:	4639      	mov	r1, r7
 8002f98:	f7fd f8e6 	bl	8000168 <__aeabi_dsub>
 8002f9c:	f10b 4500 	add.w	r5, fp, #2147483648	; 0x80000000
 8002fa0:	e9cd 0106 	strd	r0, r1, [sp, #24]
	East_ref[2] = g[0]*m[1] - g[1]*m[0];
 8002fa4:	4652      	mov	r2, sl
 8002fa6:	462b      	mov	r3, r5
 8002fa8:	4640      	mov	r0, r8
 8002faa:	4649      	mov	r1, r9
 8002fac:	f8cd a00c 	str.w	sl, [sp, #12]
 8002fb0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8002fb4:	f7fd fa90 	bl	80004d8 <__aeabi_dmul>
 8002fb8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002fba:	4680      	mov	r8, r0
 8002fbc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8002fc0:	4689      	mov	r9, r1
 8002fc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002fc6:	9a08      	ldr	r2, [sp, #32]
 8002fc8:	4633      	mov	r3, r6
 8002fca:	f7fd fa85 	bl	80004d8 <__aeabi_dmul>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4640      	mov	r0, r8
 8002fd4:	4649      	mov	r1, r9
 8002fd6:	f7fd f8c7 	bl	8000168 <__aeabi_dsub>
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 8002fda:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
	East_ref[2] = g[0]*m[1] - g[1]*m[0];
 8002fde:	4682      	mov	sl, r0
 8002fe0:	468b      	mov	fp, r1
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 8002fe2:	4642      	mov	r2, r8
 8002fe4:	464b      	mov	r3, r9
 8002fe6:	4640      	mov	r0, r8
 8002fe8:	4649      	mov	r1, r9
 8002fea:	f7fd fa75 	bl	80004d8 <__aeabi_dmul>
 8002fee:	4680      	mov	r8, r0
 8002ff0:	4689      	mov	r9, r1
 8002ff2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	f7fd fa6d 	bl	80004d8 <__aeabi_dmul>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4640      	mov	r0, r8
 8003004:	4649      	mov	r1, r9
 8003006:	f7fd f8b1 	bl	800016c <__adddf3>
 800300a:	4652      	mov	r2, sl
 800300c:	4680      	mov	r8, r0
 800300e:	4689      	mov	r9, r1
 8003010:	465b      	mov	r3, fp
 8003012:	4650      	mov	r0, sl
 8003014:	4659      	mov	r1, fp
 8003016:	f7fd fa5f 	bl	80004d8 <__aeabi_dmul>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4640      	mov	r0, r8
 8003020:	4649      	mov	r1, r9
 8003022:	f7fd f8a3 	bl	800016c <__adddf3>
 8003026:	f007 fdaf 	bl	800ab88 <sqrt>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	2000      	movs	r0, #0
 8003030:	494b      	ldr	r1, [pc, #300]	; (8003160 <calc_magnetic_orientation+0x36c>)
 8003032:	f7fd fb7b 	bl	800072c <__aeabi_ddiv>
 8003036:	4680      	mov	r8, r0
 8003038:	4689      	mov	r9, r1
	v[0] /= norm;
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003042:	f7fd fa49 	bl	80004d8 <__aeabi_dmul>
	v[1] /= norm;
 8003046:	4642      	mov	r2, r8
 8003048:	464b      	mov	r3, r9
	v[0] /= norm;
 800304a:	e9cd 0104 	strd	r0, r1, [sp, #16]
	v[1] /= norm;
 800304e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003052:	f7fd fa41 	bl	80004d8 <__aeabi_dmul>
	v[2] /= norm;
 8003056:	4642      	mov	r2, r8
	v[1] /= norm;
 8003058:	e9cd 0106 	strd	r0, r1, [sp, #24]
	v[2] /= norm;
 800305c:	464b      	mov	r3, r9
 800305e:	4650      	mov	r0, sl
 8003060:	4659      	mov	r1, fp
 8003062:	f7fd fa39 	bl	80004d8 <__aeabi_dmul>
	normalize(East_ref);

	//step2: cross East and gravity(negative acceleration) to get reference direction of North
	double North_ref[3] = {0};

	North_ref[0] = East_ref[1]*g[2] - East_ref[2]*g[1];
 8003066:	9f00      	ldr	r7, [sp, #0]
	v[2] /= norm;
 8003068:	4682      	mov	sl, r0
 800306a:	468b      	mov	fp, r1
	North_ref[0] = East_ref[1]*g[2] - East_ref[2]*g[1];
 800306c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003070:	463a      	mov	r2, r7
 8003072:	4623      	mov	r3, r4
 8003074:	f7fd fa30 	bl	80004d8 <__aeabi_dmul>
 8003078:	9a08      	ldr	r2, [sp, #32]
 800307a:	4680      	mov	r8, r0
 800307c:	4689      	mov	r9, r1
 800307e:	4633      	mov	r3, r6
 8003080:	4650      	mov	r0, sl
 8003082:	4659      	mov	r1, fp
 8003084:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8003088:	f7fd fa26 	bl	80004d8 <__aeabi_dmul>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4640      	mov	r0, r8
 8003092:	4649      	mov	r1, r9
 8003094:	f7fd f868 	bl	8000168 <__aeabi_dsub>
	North_ref[1] = East_ref[2]*g[0] - East_ref[0]*g[2];
 8003098:	462b      	mov	r3, r5
	North_ref[0] = East_ref[1]*g[2] - East_ref[2]*g[1];
 800309a:	4682      	mov	sl, r0
 800309c:	468b      	mov	fp, r1
	North_ref[1] = East_ref[2]*g[0] - East_ref[0]*g[2];
 800309e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80030a2:	9a03      	ldr	r2, [sp, #12]
 80030a4:	f7fd fa18 	bl	80004d8 <__aeabi_dmul>
 80030a8:	463a      	mov	r2, r7
 80030aa:	4680      	mov	r8, r0
 80030ac:	4689      	mov	r9, r1
 80030ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030b2:	4623      	mov	r3, r4
 80030b4:	9700      	str	r7, [sp, #0]
 80030b6:	f7fd fa0f 	bl	80004d8 <__aeabi_dmul>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4640      	mov	r0, r8
 80030c0:	4649      	mov	r1, r9
 80030c2:	f7fd f851 	bl	8000168 <__aeabi_dsub>
	North_ref[2] = East_ref[0]*g[1] - East_ref[1]*g[0];
 80030c6:	4633      	mov	r3, r6
	North_ref[1] = East_ref[2]*g[0] - East_ref[0]*g[2];
 80030c8:	4680      	mov	r8, r0
 80030ca:	4689      	mov	r9, r1
	North_ref[2] = East_ref[0]*g[1] - East_ref[1]*g[0];
 80030cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030d0:	9a08      	ldr	r2, [sp, #32]
 80030d2:	f7fd fa01 	bl	80004d8 <__aeabi_dmul>
 80030d6:	462b      	mov	r3, r5
 80030d8:	4606      	mov	r6, r0
 80030da:	460f      	mov	r7, r1
 80030dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80030e0:	9a03      	ldr	r2, [sp, #12]
 80030e2:	f7fd f9f9 	bl	80004d8 <__aeabi_dmul>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4630      	mov	r0, r6
 80030ec:	4639      	mov	r1, r7
 80030ee:	f7fd f83b 	bl	8000168 <__aeabi_dsub>
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 80030f2:	4652      	mov	r2, sl
	North_ref[2] = East_ref[0]*g[1] - East_ref[1]*g[0];
 80030f4:	460f      	mov	r7, r1
 80030f6:	4606      	mov	r6, r0
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 80030f8:	465b      	mov	r3, fp
 80030fa:	4650      	mov	r0, sl
 80030fc:	4659      	mov	r1, fp
 80030fe:	f7fd f9eb 	bl	80004d8 <__aeabi_dmul>
 8003102:	4642      	mov	r2, r8
 8003104:	4604      	mov	r4, r0
 8003106:	460d      	mov	r5, r1
 8003108:	464b      	mov	r3, r9
 800310a:	4640      	mov	r0, r8
 800310c:	4649      	mov	r1, r9
 800310e:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8003112:	f7fd f9e1 	bl	80004d8 <__aeabi_dmul>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4620      	mov	r0, r4
 800311c:	4629      	mov	r1, r5
 800311e:	f7fd f825 	bl	800016c <__adddf3>
 8003122:	463b      	mov	r3, r7
 8003124:	4604      	mov	r4, r0
 8003126:	460d      	mov	r5, r1
 8003128:	4632      	mov	r2, r6
 800312a:	4639      	mov	r1, r7
 800312c:	4630      	mov	r0, r6
 800312e:	f7fd f9d3 	bl	80004d8 <__aeabi_dmul>
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	4620      	mov	r0, r4
 8003138:	4629      	mov	r1, r5
 800313a:	f7fd f817 	bl	800016c <__adddf3>
 800313e:	f007 fd23 	bl	800ab88 <sqrt>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	2000      	movs	r0, #0
 8003148:	4905      	ldr	r1, [pc, #20]	; (8003160 <calc_magnetic_orientation+0x36c>)
 800314a:	f7fd faef 	bl	800072c <__aeabi_ddiv>
 800314e:	4689      	mov	r9, r1
 8003150:	4680      	mov	r8, r0
	v[0] /= norm;
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4650      	mov	r0, sl
 8003158:	e004      	b.n	8003164 <calc_magnetic_orientation+0x370>
 800315a:	bf00      	nop
 800315c:	200005f8 	.word	0x200005f8
 8003160:	3ff00000 	.word	0x3ff00000
 8003164:	4659      	mov	r1, fp
 8003166:	f7fd f9b7 	bl	80004d8 <__aeabi_dmul>
	v[1] /= norm;
 800316a:	464b      	mov	r3, r9
 800316c:	4642      	mov	r2, r8
	v[0] /= norm;
 800316e:	4682      	mov	sl, r0
 8003170:	468b      	mov	fp, r1
	v[1] /= norm;
 8003172:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003176:	f7fd f9af 	bl	80004d8 <__aeabi_dmul>
	v[2] /= norm;
 800317a:	464b      	mov	r3, r9
 800317c:	4642      	mov	r2, r8
	v[1] /= norm;
 800317e:	4605      	mov	r5, r0
 8003180:	460c      	mov	r4, r1
	v[2] /= norm;
 8003182:	4630      	mov	r0, r6
 8003184:	4639      	mov	r1, r7
 8003186:	f7fd f9a7 	bl	80004d8 <__aeabi_dmul>
	m10 = North_ref[0];	m11 = North_ref[1];	m12 = North_ref[2];
	m20 = -g[0];		m21 = -g[1];		m22 = -g[2];

	//conversion from transposed rotation matrix to quaternion
	double t;
	if (m22 < 0){
 800318a:	9f00      	ldr	r7, [sp, #0]
 800318c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
	v[2] /= norm;
 8003190:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	if (m22 < 0){
 8003194:	2200      	movs	r2, #0
 8003196:	4638      	mov	r0, r7
 8003198:	4649      	mov	r1, r9
 800319a:	2300      	movs	r3, #0
 800319c:	f7fd fc0e 	bl	80009bc <__aeabi_dcmplt>
 80031a0:	2800      	cmp	r0, #0
 80031a2:	f000 8088 	beq.w	80032b6 <calc_magnetic_orientation+0x4c2>
 80031a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80031aa:	4650      	mov	r0, sl
 80031ac:	4659      	mov	r1, fp
 80031ae:	f7fc ffdd 	bl	800016c <__adddf3>
 80031b2:	463a      	mov	r2, r7
 80031b4:	464b      	mov	r3, r9
 80031b6:	4682      	mov	sl, r0
 80031b8:	468b      	mov	fp, r1
 80031ba:	2000      	movs	r0, #0
 80031bc:	496b      	ldr	r1, [pc, #428]	; (800336c <calc_magnetic_orientation+0x578>)
 80031be:	f7fc ffd3 	bl	8000168 <__aeabi_dsub>
		if (m00 > m11){
 80031c2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80031c6:	4606      	mov	r6, r0
 80031c8:	4642      	mov	r2, r8
 80031ca:	464b      	mov	r3, r9
 80031cc:	460f      	mov	r7, r1
 80031ce:	4628      	mov	r0, r5
 80031d0:	4621      	mov	r1, r4
 80031d2:	f7fd fbf3 	bl	80009bc <__aeabi_dcmplt>
			t = 1 + m00 - m11 - m22;
 80031d6:	4642      	mov	r2, r8
 80031d8:	464b      	mov	r3, r9
		if (m00 > m11){
 80031da:	2800      	cmp	r0, #0
 80031dc:	d14c      	bne.n	8003278 <calc_magnetic_orientation+0x484>
			XIMU_observ.mag_ref_q0 = m12-m21;
			XIMU_observ.mag_ref_q1 = t;
			XIMU_observ.mag_ref_q2 = m01+m10;
			XIMU_observ.mag_ref_q3 = m20+m02;
		}else{
			t = 1 - m00 + m11 - m22;
 80031de:	4630      	mov	r0, r6
 80031e0:	4639      	mov	r1, r7
 80031e2:	f7fc ffc1 	bl	8000168 <__aeabi_dsub>
 80031e6:	462a      	mov	r2, r5
 80031e8:	4623      	mov	r3, r4
 80031ea:	f7fc ffbf 	bl	800016c <__adddf3>

			XIMU_observ.mag_ref_q0 = m20-m02;
 80031ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			t = 1 - m00 + m11 - m22;
 80031f2:	4604      	mov	r4, r0
 80031f4:	460d      	mov	r5, r1
			XIMU_observ.mag_ref_q0 = m20-m02;
 80031f6:	9803      	ldr	r0, [sp, #12]
 80031f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80031fa:	f7fc ffb5 	bl	8000168 <__aeabi_dsub>
 80031fe:	9a08      	ldr	r2, [sp, #32]
 8003200:	4680      	mov	r8, r0
 8003202:	4689      	mov	r9, r1
 8003204:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800320a:	f7fc ffaf 	bl	800016c <__adddf3>
 800320e:	4626      	mov	r6, r4
 8003210:	462f      	mov	r7, r5
 8003212:	e9cd 0106 	strd	r0, r1, [sp, #24]
			 XIMU_observ.mag_ref_q3 = m01-m10;
		 }
	 }

	//normalize
	XIMU_observ.mag_ref_q0 *= 0.5f / sqrt(t);
 8003216:	4620      	mov	r0, r4
 8003218:	4629      	mov	r1, r5
 800321a:	f007 fcb5 	bl	800ab88 <sqrt>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	2000      	movs	r0, #0
 8003224:	4952      	ldr	r1, [pc, #328]	; (8003370 <calc_magnetic_orientation+0x57c>)
 8003226:	f7fd fa81 	bl	800072c <__aeabi_ddiv>
 800322a:	4604      	mov	r4, r0
 800322c:	460d      	mov	r5, r1
 800322e:	4622      	mov	r2, r4
 8003230:	462b      	mov	r3, r5
 8003232:	4640      	mov	r0, r8
 8003234:	4649      	mov	r1, r9
 8003236:	f7fd f94f 	bl	80004d8 <__aeabi_dmul>
 800323a:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8003374 <calc_magnetic_orientation+0x580>
	XIMU_observ.mag_ref_q1 *= 0.5f / sqrt(t);
 800323e:	4622      	mov	r2, r4
	XIMU_observ.mag_ref_q0 *= 0.5f / sqrt(t);
 8003240:	e9c8 0100 	strd	r0, r1, [r8]
	XIMU_observ.mag_ref_q1 *= 0.5f / sqrt(t);
 8003244:	462b      	mov	r3, r5
 8003246:	4650      	mov	r0, sl
 8003248:	4659      	mov	r1, fp
 800324a:	f7fd f945 	bl	80004d8 <__aeabi_dmul>
	XIMU_observ.mag_ref_q2 *= 0.5f / sqrt(t);
 800324e:	4632      	mov	r2, r6
	XIMU_observ.mag_ref_q1 *= 0.5f / sqrt(t);
 8003250:	e9c8 0102 	strd	r0, r1, [r8, #8]
	XIMU_observ.mag_ref_q2 *= 0.5f / sqrt(t);
 8003254:	463b      	mov	r3, r7
 8003256:	4620      	mov	r0, r4
 8003258:	4629      	mov	r1, r5
 800325a:	f7fd f93d 	bl	80004d8 <__aeabi_dmul>
	XIMU_observ.mag_ref_q3 *= 0.5f / sqrt(t);
 800325e:	4622      	mov	r2, r4
	XIMU_observ.mag_ref_q2 *= 0.5f / sqrt(t);
 8003260:	e9c8 0104 	strd	r0, r1, [r8, #16]
	XIMU_observ.mag_ref_q3 *= 0.5f / sqrt(t);
 8003264:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003268:	462b      	mov	r3, r5
 800326a:	f7fd f935 	bl	80004d8 <__aeabi_dmul>
 800326e:	e9c8 0106 	strd	r0, r1, [r8, #24]
}
 8003272:	b011      	add	sp, #68	; 0x44
 8003274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			t = 1 + m00 - m11 - m22;
 8003278:	4630      	mov	r0, r6
 800327a:	4639      	mov	r1, r7
 800327c:	f7fc ff76 	bl	800016c <__adddf3>
 8003280:	462a      	mov	r2, r5
 8003282:	4623      	mov	r3, r4
 8003284:	f7fc ff70 	bl	8000168 <__aeabi_dsub>
 8003288:	9a08      	ldr	r2, [sp, #32]
 800328a:	4604      	mov	r4, r0
 800328c:	460d      	mov	r5, r1
 800328e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003294:	f7fc ff68 	bl	8000168 <__aeabi_dsub>
 8003298:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800329c:	4680      	mov	r8, r0
 800329e:	4689      	mov	r9, r1
 80032a0:	9803      	ldr	r0, [sp, #12]
 80032a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80032a4:	f7fc ff62 	bl	800016c <__adddf3>
 80032a8:	4656      	mov	r6, sl
 80032aa:	465f      	mov	r7, fp
 80032ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80032b0:	46a2      	mov	sl, r4
 80032b2:	46ab      	mov	fp, r5
 80032b4:	e7af      	b.n	8003216 <calc_magnetic_orientation+0x422>
 80032b6:	4652      	mov	r2, sl
 80032b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80032bc:	465b      	mov	r3, fp
 80032be:	f7fc ff53 	bl	8000168 <__aeabi_dsub>
 80032c2:	2200      	movs	r2, #0
 80032c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80032c8:	4b28      	ldr	r3, [pc, #160]	; (800336c <calc_magnetic_orientation+0x578>)
 80032ca:	9800      	ldr	r0, [sp, #0]
 80032cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80032ce:	f7fc ff4d 	bl	800016c <__adddf3>
		 if (m00 < -m11){
 80032d2:	e9dd 9a04 	ldrd	r9, sl, [sp, #16]
 80032d6:	4606      	mov	r6, r0
 80032d8:	460f      	mov	r7, r1
 80032da:	464a      	mov	r2, r9
 80032dc:	4653      	mov	r3, sl
 80032de:	4628      	mov	r0, r5
 80032e0:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80032e4:	f7fd fb88 	bl	80009f8 <__aeabi_dcmpgt>
 80032e8:	b9f0      	cbnz	r0, 8003328 <calc_magnetic_orientation+0x534>
			 t = 1 + m00 + m11 + m22;
 80032ea:	4632      	mov	r2, r6
 80032ec:	463b      	mov	r3, r7
 80032ee:	4648      	mov	r0, r9
 80032f0:	4651      	mov	r1, sl
 80032f2:	f7fc ff3b 	bl	800016c <__adddf3>
 80032f6:	462a      	mov	r2, r5
 80032f8:	4623      	mov	r3, r4
 80032fa:	f7fc ff37 	bl	800016c <__adddf3>
 80032fe:	9a08      	ldr	r2, [sp, #32]
 8003300:	4604      	mov	r4, r0
 8003302:	460d      	mov	r5, r1
 8003304:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800330a:	f7fc ff2d 	bl	8000168 <__aeabi_dsub>
			 XIMU_observ.mag_ref_q2 = m20-m02;
 800330e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003312:	4682      	mov	sl, r0
 8003314:	468b      	mov	fp, r1
 8003316:	9803      	ldr	r0, [sp, #12]
 8003318:	9909      	ldr	r1, [sp, #36]	; 0x24
 800331a:	f7fc ff25 	bl	8000168 <__aeabi_dsub>
 800331e:	46a0      	mov	r8, r4
 8003320:	4606      	mov	r6, r0
 8003322:	460f      	mov	r7, r1
 8003324:	46a9      	mov	r9, r5
 8003326:	e776      	b.n	8003216 <calc_magnetic_orientation+0x422>
			 t = 1 - m00 - m11 + m22;
 8003328:	464a      	mov	r2, r9
 800332a:	4653      	mov	r3, sl
 800332c:	4630      	mov	r0, r6
 800332e:	4639      	mov	r1, r7
 8003330:	f7fc ff1a 	bl	8000168 <__aeabi_dsub>
 8003334:	462a      	mov	r2, r5
 8003336:	4623      	mov	r3, r4
 8003338:	f7fc ff16 	bl	8000168 <__aeabi_dsub>
 800333c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003340:	4604      	mov	r4, r0
 8003342:	460d      	mov	r5, r1
 8003344:	9803      	ldr	r0, [sp, #12]
 8003346:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003348:	f7fc ff10 	bl	800016c <__adddf3>
 800334c:	9a08      	ldr	r2, [sp, #32]
 800334e:	4682      	mov	sl, r0
 8003350:	468b      	mov	fp, r1
 8003352:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003358:	f7fc ff08 	bl	800016c <__adddf3>
 800335c:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8003360:	4606      	mov	r6, r0
 8003362:	460f      	mov	r7, r1
 8003364:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003368:	e755      	b.n	8003216 <calc_magnetic_orientation+0x422>
 800336a:	bf00      	nop
 800336c:	3ff00000 	.word	0x3ff00000
 8003370:	3fe00000 	.word	0x3fe00000
 8003374:	20000818 	.word	0x20000818

08003378 <build_data_str>:

void calc_absolute_position();
void calc_absolute_altitude();

void build_data_str(char* str){
 8003378:	b570      	push	{r4, r5, r6, lr}

	char temp[30];
	char delim[2] = {'\t','\0'};
 800337a:	2309      	movs	r3, #9
	char term[2] = {'\n','\0'};
 800337c:	250a      	movs	r5, #10
void build_data_str(char* str){
 800337e:	4604      	mov	r4, r0


	itoa((int)(XIMU_sens.q0),temp,10);
 8003380:	4ecf      	ldr	r6, [pc, #828]	; (80036c0 <build_data_str+0x348>)
void build_data_str(char* str){
 8003382:	b08a      	sub	sp, #40	; 0x28
	itoa((int)(XIMU_sens.q0),temp,10);
 8003384:	e9d6 0100 	ldrd	r0, r1, [r6]
	char delim[2] = {'\t','\0'};
 8003388:	f8ad 3000 	strh.w	r3, [sp]
	char term[2] = {'\n','\0'};
 800338c:	f8ad 5004 	strh.w	r5, [sp, #4]
	itoa((int)(XIMU_sens.q0),temp,10);
 8003390:	f7fd fb52 	bl	8000a38 <__aeabi_d2iz>
 8003394:	462a      	mov	r2, r5
 8003396:	a902      	add	r1, sp, #8
 8003398:	f004 ffa2 	bl	80082e0 <itoa>
	strcpy(str,temp);
 800339c:	a902      	add	r1, sp, #8
 800339e:	4620      	mov	r0, r4
 80033a0:	f004 ffee 	bl	8008380 <stpcpy>
	strcat(str,delim);
 80033a4:	4669      	mov	r1, sp
 80033a6:	f004 fff4 	bl	8008392 <strcpy>

	itoa((int)(XIMU_sens.q1),temp,10);
 80033aa:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
 80033ae:	f7fd fb43 	bl	8000a38 <__aeabi_d2iz>
 80033b2:	462a      	mov	r2, r5
 80033b4:	a902      	add	r1, sp, #8
 80033b6:	f004 ff93 	bl	80082e0 <itoa>
 80033ba:	4620      	mov	r0, r4
 80033bc:	f7fc fec8 	bl	8000150 <strlen>
	strcat(str,temp);
 80033c0:	a902      	add	r1, sp, #8
 80033c2:	4420      	add	r0, r4
 80033c4:	f004 ffdc 	bl	8008380 <stpcpy>
	strcat(str,delim);
 80033c8:	4669      	mov	r1, sp
 80033ca:	f004 ffe2 	bl	8008392 <strcpy>

	itoa((int)(XIMU_sens.q2),temp,10);
 80033ce:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 80033d2:	f7fd fb31 	bl	8000a38 <__aeabi_d2iz>
 80033d6:	462a      	mov	r2, r5
 80033d8:	a902      	add	r1, sp, #8
 80033da:	f004 ff81 	bl	80082e0 <itoa>
 80033de:	4620      	mov	r0, r4
 80033e0:	f7fc feb6 	bl	8000150 <strlen>
	strcat(str,temp);
 80033e4:	a902      	add	r1, sp, #8
 80033e6:	4420      	add	r0, r4
 80033e8:	f004 ffca 	bl	8008380 <stpcpy>
	strcat(str,delim);
 80033ec:	4669      	mov	r1, sp
 80033ee:	f004 ffd0 	bl	8008392 <strcpy>

	itoa((int)(XIMU_sens.q3),temp,10);
 80033f2:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
 80033f6:	f7fd fb1f 	bl	8000a38 <__aeabi_d2iz>
 80033fa:	462a      	mov	r2, r5
 80033fc:	a902      	add	r1, sp, #8
 80033fe:	f004 ff6f 	bl	80082e0 <itoa>
 8003402:	4620      	mov	r0, r4
 8003404:	f7fc fea4 	bl	8000150 <strlen>
	strcat(str,temp);
 8003408:	a902      	add	r1, sp, #8
 800340a:	4420      	add	r0, r4
 800340c:	f004 ffb8 	bl	8008380 <stpcpy>
	strcat(str,delim);
 8003410:	4669      	mov	r1, sp
 8003412:	f004 ffbe 	bl	8008392 <strcpy>

	itoa((int)(XIMU_sens.ax*1000),temp,10);
 8003416:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
 800341a:	4baa      	ldr	r3, [pc, #680]	; (80036c4 <build_data_str+0x34c>)
 800341c:	2200      	movs	r2, #0
 800341e:	f7fd f85b 	bl	80004d8 <__aeabi_dmul>
 8003422:	f7fd fb09 	bl	8000a38 <__aeabi_d2iz>
 8003426:	462a      	mov	r2, r5
 8003428:	a902      	add	r1, sp, #8
 800342a:	f004 ff59 	bl	80082e0 <itoa>
 800342e:	4620      	mov	r0, r4
 8003430:	f7fc fe8e 	bl	8000150 <strlen>
	strcat(str,temp);
 8003434:	a902      	add	r1, sp, #8
 8003436:	4420      	add	r0, r4
 8003438:	f004 ffa2 	bl	8008380 <stpcpy>
	strcat(str,delim);
 800343c:	4669      	mov	r1, sp
 800343e:	f004 ffa8 	bl	8008392 <strcpy>

	itoa((int)(XIMU_sens.ay*1000),temp,10);
 8003442:	e9d6 010a 	ldrd	r0, r1, [r6, #40]	; 0x28
 8003446:	4b9f      	ldr	r3, [pc, #636]	; (80036c4 <build_data_str+0x34c>)
 8003448:	2200      	movs	r2, #0
 800344a:	f7fd f845 	bl	80004d8 <__aeabi_dmul>
 800344e:	f7fd faf3 	bl	8000a38 <__aeabi_d2iz>
 8003452:	462a      	mov	r2, r5
 8003454:	a902      	add	r1, sp, #8
 8003456:	f004 ff43 	bl	80082e0 <itoa>
 800345a:	4620      	mov	r0, r4
 800345c:	f7fc fe78 	bl	8000150 <strlen>
	strcat(str,temp);
 8003460:	a902      	add	r1, sp, #8
 8003462:	4420      	add	r0, r4
 8003464:	f004 ff8c 	bl	8008380 <stpcpy>
	strcat(str,delim);
 8003468:	4669      	mov	r1, sp
 800346a:	f004 ff92 	bl	8008392 <strcpy>

	itoa((int)(XIMU_sens.az*1000),temp,10);
 800346e:	e9d6 010c 	ldrd	r0, r1, [r6, #48]	; 0x30
 8003472:	4b94      	ldr	r3, [pc, #592]	; (80036c4 <build_data_str+0x34c>)
 8003474:	2200      	movs	r2, #0
 8003476:	f7fd f82f 	bl	80004d8 <__aeabi_dmul>
 800347a:	f7fd fadd 	bl	8000a38 <__aeabi_d2iz>
 800347e:	462a      	mov	r2, r5
 8003480:	a902      	add	r1, sp, #8
 8003482:	f004 ff2d 	bl	80082e0 <itoa>
 8003486:	4620      	mov	r0, r4
 8003488:	f7fc fe62 	bl	8000150 <strlen>
	strcat(str,temp);
 800348c:	a902      	add	r1, sp, #8
 800348e:	4420      	add	r0, r4
 8003490:	f004 ff76 	bl	8008380 <stpcpy>
	strcat(str,delim);
 8003494:	4669      	mov	r1, sp
 8003496:	f004 ff7c 	bl	8008392 <strcpy>

	itoa((int)(XIMU_sens.gx*1000),temp,10);
 800349a:	e9d6 010e 	ldrd	r0, r1, [r6, #56]	; 0x38
 800349e:	4b89      	ldr	r3, [pc, #548]	; (80036c4 <build_data_str+0x34c>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	f7fd f819 	bl	80004d8 <__aeabi_dmul>
 80034a6:	f7fd fac7 	bl	8000a38 <__aeabi_d2iz>
 80034aa:	462a      	mov	r2, r5
 80034ac:	a902      	add	r1, sp, #8
 80034ae:	f004 ff17 	bl	80082e0 <itoa>
 80034b2:	4620      	mov	r0, r4
 80034b4:	f7fc fe4c 	bl	8000150 <strlen>
	strcat(str,temp);
 80034b8:	a902      	add	r1, sp, #8
 80034ba:	4420      	add	r0, r4
 80034bc:	f004 ff60 	bl	8008380 <stpcpy>
	strcat(str,delim);
 80034c0:	4669      	mov	r1, sp
 80034c2:	f004 ff66 	bl	8008392 <strcpy>

	itoa((int)(XIMU_sens.gy*1000),temp,10);
 80034c6:	e9d6 0110 	ldrd	r0, r1, [r6, #64]	; 0x40
 80034ca:	4b7e      	ldr	r3, [pc, #504]	; (80036c4 <build_data_str+0x34c>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	f7fd f803 	bl	80004d8 <__aeabi_dmul>
 80034d2:	f7fd fab1 	bl	8000a38 <__aeabi_d2iz>
 80034d6:	462a      	mov	r2, r5
 80034d8:	a902      	add	r1, sp, #8
 80034da:	f004 ff01 	bl	80082e0 <itoa>
 80034de:	4620      	mov	r0, r4
 80034e0:	f7fc fe36 	bl	8000150 <strlen>
	strcat(str,temp);
 80034e4:	a902      	add	r1, sp, #8
 80034e6:	4420      	add	r0, r4
 80034e8:	f004 ff4a 	bl	8008380 <stpcpy>
	strcat(str,delim);
 80034ec:	4669      	mov	r1, sp
 80034ee:	f004 ff50 	bl	8008392 <strcpy>

	itoa((int)(XIMU_sens.gz*1000),temp,10);
 80034f2:	e9d6 0112 	ldrd	r0, r1, [r6, #72]	; 0x48
 80034f6:	4b73      	ldr	r3, [pc, #460]	; (80036c4 <build_data_str+0x34c>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	f7fc ffed 	bl	80004d8 <__aeabi_dmul>
 80034fe:	f7fd fa9b 	bl	8000a38 <__aeabi_d2iz>
 8003502:	462a      	mov	r2, r5
 8003504:	a902      	add	r1, sp, #8
 8003506:	f004 feeb 	bl	80082e0 <itoa>
 800350a:	4620      	mov	r0, r4
 800350c:	f7fc fe20 	bl	8000150 <strlen>
	strcat(str,temp);
 8003510:	a902      	add	r1, sp, #8
 8003512:	4420      	add	r0, r4
 8003514:	f004 ff34 	bl	8008380 <stpcpy>
	strcat(str,delim);
 8003518:	4669      	mov	r1, sp
 800351a:	f004 ff3a 	bl	8008392 <strcpy>

	itoa((int)(XIMU_sens.mx*1000),temp,10);
 800351e:	e9d6 0116 	ldrd	r0, r1, [r6, #88]	; 0x58
 8003522:	4b68      	ldr	r3, [pc, #416]	; (80036c4 <build_data_str+0x34c>)
 8003524:	2200      	movs	r2, #0
 8003526:	f7fc ffd7 	bl	80004d8 <__aeabi_dmul>
 800352a:	f7fd fa85 	bl	8000a38 <__aeabi_d2iz>
 800352e:	462a      	mov	r2, r5
 8003530:	a902      	add	r1, sp, #8
 8003532:	f004 fed5 	bl	80082e0 <itoa>
 8003536:	4620      	mov	r0, r4
 8003538:	f7fc fe0a 	bl	8000150 <strlen>
	strcat(str,temp);
 800353c:	a902      	add	r1, sp, #8
 800353e:	4420      	add	r0, r4
 8003540:	f004 ff1e 	bl	8008380 <stpcpy>
	strcat(str,delim);
 8003544:	4669      	mov	r1, sp
 8003546:	f004 ff24 	bl	8008392 <strcpy>

	itoa((int)(XIMU_sens.my*1000),temp,10);
 800354a:	e9d6 0118 	ldrd	r0, r1, [r6, #96]	; 0x60
 800354e:	4b5d      	ldr	r3, [pc, #372]	; (80036c4 <build_data_str+0x34c>)
 8003550:	2200      	movs	r2, #0
 8003552:	f7fc ffc1 	bl	80004d8 <__aeabi_dmul>
 8003556:	f7fd fa6f 	bl	8000a38 <__aeabi_d2iz>
 800355a:	462a      	mov	r2, r5
 800355c:	a902      	add	r1, sp, #8
 800355e:	f004 febf 	bl	80082e0 <itoa>
 8003562:	4620      	mov	r0, r4
 8003564:	f7fc fdf4 	bl	8000150 <strlen>
	strcat(str,temp);
 8003568:	a902      	add	r1, sp, #8
 800356a:	4420      	add	r0, r4
 800356c:	f004 ff08 	bl	8008380 <stpcpy>
	strcat(str,delim);
 8003570:	4669      	mov	r1, sp
 8003572:	f004 ff0e 	bl	8008392 <strcpy>

	itoa((int)(XIMU_sens.mz*1000),temp,10);
 8003576:	e9d6 011a 	ldrd	r0, r1, [r6, #104]	; 0x68
 800357a:	4b52      	ldr	r3, [pc, #328]	; (80036c4 <build_data_str+0x34c>)
 800357c:	2200      	movs	r2, #0
 800357e:	f7fc ffab 	bl	80004d8 <__aeabi_dmul>
 8003582:	f7fd fa59 	bl	8000a38 <__aeabi_d2iz>
 8003586:	462a      	mov	r2, r5
 8003588:	a902      	add	r1, sp, #8
 800358a:	f004 fea9 	bl	80082e0 <itoa>
 800358e:	4620      	mov	r0, r4
 8003590:	f7fc fdde 	bl	8000150 <strlen>
	strcat(str,temp);
 8003594:	a902      	add	r1, sp, #8
 8003596:	4420      	add	r0, r4
 8003598:	f004 fef2 	bl	8008380 <stpcpy>
	strcat(str,delim);
 800359c:	4669      	mov	r1, sp
 800359e:	f004 fef8 	bl	8008392 <strcpy>

	itoa((int)(XIMU_sens.pressure*1000),temp,10);
 80035a2:	e9d6 011e 	ldrd	r0, r1, [r6, #120]	; 0x78
 80035a6:	4b47      	ldr	r3, [pc, #284]	; (80036c4 <build_data_str+0x34c>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	f7fc ff95 	bl	80004d8 <__aeabi_dmul>
 80035ae:	f7fd fa43 	bl	8000a38 <__aeabi_d2iz>
 80035b2:	462a      	mov	r2, r5
 80035b4:	a902      	add	r1, sp, #8
 80035b6:	f004 fe93 	bl	80082e0 <itoa>
 80035ba:	4620      	mov	r0, r4
 80035bc:	f7fc fdc8 	bl	8000150 <strlen>
	strcat(str,temp);
 80035c0:	a902      	add	r1, sp, #8
 80035c2:	4420      	add	r0, r4
 80035c4:	f004 fedc 	bl	8008380 <stpcpy>
	strcat(str,delim);
 80035c8:	4669      	mov	r1, sp
 80035ca:	f004 fee2 	bl	8008392 <strcpy>

	itoa((int)(XIMU_sens.temperature*1000),temp,10);
 80035ce:	e9d6 0120 	ldrd	r0, r1, [r6, #128]	; 0x80
 80035d2:	4b3c      	ldr	r3, [pc, #240]	; (80036c4 <build_data_str+0x34c>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	f7fc ff7f 	bl	80004d8 <__aeabi_dmul>
 80035da:	f7fd fa2d 	bl	8000a38 <__aeabi_d2iz>
 80035de:	462a      	mov	r2, r5
 80035e0:	a902      	add	r1, sp, #8
 80035e2:	f004 fe7d 	bl	80082e0 <itoa>
 80035e6:	4620      	mov	r0, r4
 80035e8:	f7fc fdb2 	bl	8000150 <strlen>
	strcat(str,temp);
 80035ec:	a902      	add	r1, sp, #8
 80035ee:	4420      	add	r0, r4
 80035f0:	f004 fec6 	bl	8008380 <stpcpy>
	strcat(str,delim);
 80035f4:	4669      	mov	r1, sp
 80035f6:	f004 fecc 	bl	8008392 <strcpy>

	itoa((int)(XIMU_sens.lat*1000000),temp,10);
 80035fa:	a32f      	add	r3, pc, #188	; (adr r3, 80036b8 <build_data_str+0x340>)
 80035fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003600:	e9d6 0124 	ldrd	r0, r1, [r6, #144]	; 0x90
 8003604:	f7fc ff68 	bl	80004d8 <__aeabi_dmul>
 8003608:	f7fd fa16 	bl	8000a38 <__aeabi_d2iz>
 800360c:	462a      	mov	r2, r5
 800360e:	a902      	add	r1, sp, #8
 8003610:	f004 fe66 	bl	80082e0 <itoa>
 8003614:	4620      	mov	r0, r4
 8003616:	f7fc fd9b 	bl	8000150 <strlen>
	strcat(str,temp);
 800361a:	a902      	add	r1, sp, #8
 800361c:	4420      	add	r0, r4
 800361e:	f004 feaf 	bl	8008380 <stpcpy>
	strcat(str,delim);
 8003622:	4669      	mov	r1, sp
 8003624:	f004 feb5 	bl	8008392 <strcpy>

	itoa((int)(XIMU_sens.lon*1000000),temp,10);
 8003628:	a323      	add	r3, pc, #140	; (adr r3, 80036b8 <build_data_str+0x340>)
 800362a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362e:	e9d6 0126 	ldrd	r0, r1, [r6, #152]	; 0x98
 8003632:	f7fc ff51 	bl	80004d8 <__aeabi_dmul>
 8003636:	f7fd f9ff 	bl	8000a38 <__aeabi_d2iz>
 800363a:	462a      	mov	r2, r5
 800363c:	a902      	add	r1, sp, #8
 800363e:	f004 fe4f 	bl	80082e0 <itoa>
 8003642:	4620      	mov	r0, r4
 8003644:	f7fc fd84 	bl	8000150 <strlen>
	strcat(str,temp);
 8003648:	a902      	add	r1, sp, #8
 800364a:	4420      	add	r0, r4
 800364c:	f004 fe98 	bl	8008380 <stpcpy>
	strcat(str,delim);
 8003650:	4669      	mov	r1, sp
 8003652:	f004 fe9e 	bl	8008392 <strcpy>

	itoa((int)(XIMU_sens.qag_ts),temp,10);
 8003656:	462a      	mov	r2, r5
 8003658:	a902      	add	r1, sp, #8
 800365a:	6d30      	ldr	r0, [r6, #80]	; 0x50
 800365c:	f004 fe40 	bl	80082e0 <itoa>
 8003660:	4620      	mov	r0, r4
 8003662:	f7fc fd75 	bl	8000150 <strlen>
	strcat(str,temp);
 8003666:	a902      	add	r1, sp, #8
 8003668:	4420      	add	r0, r4
 800366a:	f004 fe89 	bl	8008380 <stpcpy>
	strcat(str,delim);
 800366e:	4669      	mov	r1, sp
 8003670:	f004 fe8f 	bl	8008392 <strcpy>

	itoa((int)(XIMU_sens.m_ts),temp,10);
 8003674:	462a      	mov	r2, r5
 8003676:	a902      	add	r1, sp, #8
 8003678:	6f30      	ldr	r0, [r6, #112]	; 0x70
 800367a:	f004 fe31 	bl	80082e0 <itoa>
 800367e:	4620      	mov	r0, r4
 8003680:	f7fc fd66 	bl	8000150 <strlen>
	strcat(str,temp);
 8003684:	a902      	add	r1, sp, #8
 8003686:	4420      	add	r0, r4
 8003688:	f004 fe7a 	bl	8008380 <stpcpy>
	strcat(str,delim);
 800368c:	4669      	mov	r1, sp
 800368e:	f004 fe80 	bl	8008392 <strcpy>

	itoa((int)(XIMU_sens.pt_ts),temp,10);
 8003692:	462a      	mov	r2, r5
 8003694:	a902      	add	r1, sp, #8
 8003696:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
 800369a:	f004 fe21 	bl	80082e0 <itoa>
 800369e:	4620      	mov	r0, r4
 80036a0:	f7fc fd56 	bl	8000150 <strlen>
	strcat(str,temp);
 80036a4:	a902      	add	r1, sp, #8
 80036a6:	4420      	add	r0, r4
 80036a8:	f004 fe6a 	bl	8008380 <stpcpy>
	strcat(str,delim);
 80036ac:	4669      	mov	r1, sp
 80036ae:	f004 fe70 	bl	8008392 <strcpy>

	itoa((int)(XIMU_sens.gps_ts),temp,10);
 80036b2:	462a      	mov	r2, r5
 80036b4:	e008      	b.n	80036c8 <build_data_str+0x350>
 80036b6:	bf00      	nop
 80036b8:	00000000 	.word	0x00000000
 80036bc:	412e8480 	.word	0x412e8480
 80036c0:	200005f8 	.word	0x200005f8
 80036c4:	408f4000 	.word	0x408f4000
 80036c8:	a902      	add	r1, sp, #8
 80036ca:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
 80036ce:	f004 fe07 	bl	80082e0 <itoa>
 80036d2:	4620      	mov	r0, r4
 80036d4:	f7fc fd3c 	bl	8000150 <strlen>
	strcat(str,temp);
 80036d8:	a902      	add	r1, sp, #8
 80036da:	4420      	add	r0, r4
 80036dc:	f004 fe50 	bl	8008380 <stpcpy>
	strcat(str,term);
 80036e0:	a901      	add	r1, sp, #4
 80036e2:	f004 fe56 	bl	8008392 <strcpy>
}
 80036e6:	b00a      	add	sp, #40	; 0x28
 80036e8:	bd70      	pop	{r4, r5, r6, pc}
 80036ea:	bf00      	nop

080036ec <GNSS_set_huart>:
 */

#include "gnss.h"

void GNSS_set_huart(UART_HandleTypeDef* huart){
	huartx = huart;
 80036ec:	4b01      	ldr	r3, [pc, #4]	; (80036f4 <GNSS_set_huart+0x8>)
 80036ee:	6018      	str	r0, [r3, #0]
}
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	20000d10 	.word	0x20000d10

080036f8 <GNSS_Init>:
 * initializes the GNSS interrupt.
 *
 * call this function before main loop.
 */
void GNSS_Init(){
	HAL_UART_Receive_DMA(huartx, GNSS.dma_buffer, DMA_BUFFER_SIZE);
 80036f8:	4b03      	ldr	r3, [pc, #12]	; (8003708 <GNSS_Init+0x10>)
 80036fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	4902      	ldr	r1, [pc, #8]	; (800370c <GNSS_Init+0x14>)
 8003702:	f003 b81d 	b.w	8006740 <HAL_UART_Receive_DMA>
 8003706:	bf00      	nop
 8003708:	20000d10 	.word	0x20000d10
 800370c:	20000850 	.word	0x20000850

08003710 <GNSS_RX_Update>:
	//https://www.devcoons.com/stm32-uart-receive-unknown-size-data-using-dma-and-freertos/
}

int GNSS_RX_Update(){
 8003710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003714:	b0b5      	sub	sp, #212	; 0xd4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003716:	b672      	cpsid	i

	__disable_irq();//I don't understand this
	int i = DMA_BUFFER_SIZE - huartx->hdmarx->Instance->CNDTR; //last byte received
 8003718:	4b85      	ldr	r3, [pc, #532]	; (8003930 <GNSS_RX_Update+0x220>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f5c3 6b80 	rsb	fp, r3, #1024	; 0x400
  __ASM volatile ("cpsie i" : : : "memory");
 8003726:	b662      	cpsie	i
	__enable_irq();//I don't understand this

	int new_information = 0;
 8003728:	f04f 0800 	mov.w	r8, #0
 800372c:	f8df a208 	ldr.w	sl, [pc, #520]	; 8003938 <GNSS_RX_Update+0x228>
		GNSS.message_buffer[counter] = '\n';
		GNSS.message_buffer[counter+1] = '\0';
		GNSS.start = end;

		//parse message if it is GNGGA
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8003730:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800393c <GNSS_RX_Update+0x22c>

		if (str != NULL){
			char fields[NUM_FIELDS][MAX_FIELD_SIZE];
			parse_GNGGA(GNSS.message_buffer,fields);
			//field 1: UTC time
			sscanf(fields[1],"%2d%2d%2d.%3d",&GNSS.GNGGA.UTC_Hour,&GNSS.GNGGA.UTC_Min,&GNSS.GNGGA.UTC_Second,&GNSS.GNGGA.UTC_Millis);
 8003734:	f50a 638e 	add.w	r3, sl, #1136	; 0x470
 8003738:	9303      	str	r3, [sp, #12]
		int counter = 0;
 800373a:	2700      	movs	r7, #0
		GNSS.message_buffer[counter] = '\n';
 800373c:	260a      	movs	r6, #10
 800373e:	f8da 4464 	ldr.w	r4, [sl, #1124]	; 0x464
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8003742:	4d7c      	ldr	r5, [pc, #496]	; (8003934 <GNSS_RX_Update+0x224>)
	while (GNSS.start != i){
 8003744:	455c      	cmp	r4, fp
 8003746:	f000 80e5 	beq.w	8003914 <GNSS_RX_Update+0x204>
		if (GNSS.dma_buffer[GNSS.start] != '$'){
 800374a:	f81a 3004 	ldrb.w	r3, [sl, r4]
 800374e:	2b24      	cmp	r3, #36	; 0x24
 8003750:	f040 80d4 	bne.w	80038fc <GNSS_RX_Update+0x1ec>
int GNSS_RX_Update(){
 8003754:	4623      	mov	r3, r4
 8003756:	e002      	b.n	800375e <GNSS_RX_Update+0x4e>
			if (GNSS.dma_buffer[end] == '\n'){
 8003758:	2a0a      	cmp	r2, #10
 800375a:	f000 80df 	beq.w	800391c <GNSS_RX_Update+0x20c>
		for(end = GNSS.start; end != i; end = (end + 1) % DMA_BUFFER_SIZE){
 800375e:	3301      	adds	r3, #1
 8003760:	425a      	negs	r2, r3
 8003762:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003766:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800376a:	bf58      	it	pl
 800376c:	4253      	negpl	r3, r2
 800376e:	459b      	cmp	fp, r3
 8003770:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8003774:	d1f0      	bne.n	8003758 <GNSS_RX_Update+0x48>
		if (GNSS.dma_buffer[end] != '\n'){break;}//if end not found, return.
 8003776:	2a0a      	cmp	r2, #10
 8003778:	f040 80cc 	bne.w	8003914 <GNSS_RX_Update+0x204>
		for(end = GNSS.start; end != i; end = (end + 1) % DMA_BUFFER_SIZE){
 800377c:	465b      	mov	r3, fp
 800377e:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8003940 <GNSS_RX_Update+0x230>
		int counter = 0;
 8003782:	2000      	movs	r0, #0
 8003784:	e000      	b.n	8003788 <GNSS_RX_Update+0x78>
			counter++;
 8003786:	4610      	mov	r0, r2
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 8003788:	1c61      	adds	r1, r4, #1
 800378a:	424a      	negs	r2, r1
 800378c:	f3c2 0209 	ubfx	r2, r2, #0, #10
			GNSS.message_buffer[counter] = GNSS.dma_buffer[j];
 8003790:	f81a e004 	ldrb.w	lr, [sl, r4]
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 8003794:	f3c1 0409 	ubfx	r4, r1, #0, #10
 8003798:	bf58      	it	pl
 800379a:	4254      	negpl	r4, r2
 800379c:	429c      	cmp	r4, r3
			GNSS.message_buffer[counter] = GNSS.dma_buffer[j];
 800379e:	f80c ef01 	strb.w	lr, [ip, #1]!
			counter++;
 80037a2:	f100 0201 	add.w	r2, r0, #1
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 80037a6:	d1ee      	bne.n	8003786 <GNSS_RX_Update+0x76>
 80037a8:	3002      	adds	r0, #2
		GNSS.message_buffer[counter+1] = '\0';
 80037aa:	eb0a 0300 	add.w	r3, sl, r0
		GNSS.message_buffer[counter] = '\n';
 80037ae:	4452      	add	r2, sl
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 80037b0:	4649      	mov	r1, r9
 80037b2:	4628      	mov	r0, r5
		GNSS.message_buffer[counter] = '\n';
 80037b4:	f882 6400 	strb.w	r6, [r2, #1024]	; 0x400
		GNSS.start = end;
 80037b8:	f8ca 4464 	str.w	r4, [sl, #1124]	; 0x464
		GNSS.message_buffer[counter+1] = '\0';
 80037bc:	f883 7400 	strb.w	r7, [r3, #1024]	; 0x400
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 80037c0:	f004 fdef 	bl	80083a2 <strstr>
		if (str != NULL){
 80037c4:	2800      	cmp	r0, #0
 80037c6:	d0bd      	beq.n	8003744 <GNSS_RX_Update+0x34>
        fields[current_field][current_pos]='\0';
 80037c8:	2500      	movs	r5, #0
 80037ca:	f89a 1400 	ldrb.w	r1, [sl, #1024]	; 0x400
    unsigned char* ch_ptr = msg;
 80037ce:	4b59      	ldr	r3, [pc, #356]	; (8003934 <GNSS_RX_Update+0x224>)
 80037d0:	aa07      	add	r2, sp, #28
    while (*ch_ptr != '\0'){
 80037d2:	2900      	cmp	r1, #0
 80037d4:	f000 80b9 	beq.w	800394a <GNSS_RX_Update+0x23a>
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 80037d8:	292c      	cmp	r1, #44	; 0x2c
 80037da:	f000 816c 	beq.w	8003ab6 <GNSS_RX_Update+0x3a6>
 80037de:	7858      	ldrb	r0, [r3, #1]
	        fields[current_field][current_pos] = *ch_ptr;
 80037e0:	7011      	strb	r1, [r2, #0]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 80037e2:	282c      	cmp	r0, #44	; 0x2c
	        ch_ptr++;
 80037e4:	f103 0101 	add.w	r1, r3, #1
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 80037e8:	f000 816c 	beq.w	8003ac4 <GNSS_RX_Update+0x3b4>
 80037ec:	2800      	cmp	r0, #0
 80037ee:	f000 816f 	beq.w	8003ad0 <GNSS_RX_Update+0x3c0>
 80037f2:	789c      	ldrb	r4, [r3, #2]
	        fields[current_field][current_pos] = *ch_ptr;
 80037f4:	7050      	strb	r0, [r2, #1]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 80037f6:	2c2c      	cmp	r4, #44	; 0x2c
	        ch_ptr++;
 80037f8:	f103 0102 	add.w	r1, r3, #2
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 80037fc:	f000 816a 	beq.w	8003ad4 <GNSS_RX_Update+0x3c4>
 8003800:	2c00      	cmp	r4, #0
 8003802:	f000 816d 	beq.w	8003ae0 <GNSS_RX_Update+0x3d0>
 8003806:	78d8      	ldrb	r0, [r3, #3]
	        fields[current_field][current_pos] = *ch_ptr;
 8003808:	7094      	strb	r4, [r2, #2]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 800380a:	282c      	cmp	r0, #44	; 0x2c
	        ch_ptr++;
 800380c:	f103 0103 	add.w	r1, r3, #3
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8003810:	f000 8168 	beq.w	8003ae4 <GNSS_RX_Update+0x3d4>
 8003814:	2800      	cmp	r0, #0
 8003816:	f000 8167 	beq.w	8003ae8 <GNSS_RX_Update+0x3d8>
 800381a:	791c      	ldrb	r4, [r3, #4]
	        fields[current_field][current_pos] = *ch_ptr;
 800381c:	70d0      	strb	r0, [r2, #3]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 800381e:	2c2c      	cmp	r4, #44	; 0x2c
	        ch_ptr++;
 8003820:	f103 0104 	add.w	r1, r3, #4
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8003824:	f000 8162 	beq.w	8003aec <GNSS_RX_Update+0x3dc>
 8003828:	2c00      	cmp	r4, #0
 800382a:	f000 8161 	beq.w	8003af0 <GNSS_RX_Update+0x3e0>
 800382e:	7958      	ldrb	r0, [r3, #5]
	        fields[current_field][current_pos] = *ch_ptr;
 8003830:	7114      	strb	r4, [r2, #4]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8003832:	282c      	cmp	r0, #44	; 0x2c
	        ch_ptr++;
 8003834:	f103 0105 	add.w	r1, r3, #5
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8003838:	f000 815c 	beq.w	8003af4 <GNSS_RX_Update+0x3e4>
 800383c:	2800      	cmp	r0, #0
 800383e:	f000 815b 	beq.w	8003af8 <GNSS_RX_Update+0x3e8>
 8003842:	799c      	ldrb	r4, [r3, #6]
	        fields[current_field][current_pos] = *ch_ptr;
 8003844:	7150      	strb	r0, [r2, #5]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8003846:	2c2c      	cmp	r4, #44	; 0x2c
	        ch_ptr++;
 8003848:	f103 0106 	add.w	r1, r3, #6
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 800384c:	f000 8158 	beq.w	8003b00 <GNSS_RX_Update+0x3f0>
 8003850:	2c00      	cmp	r4, #0
 8003852:	f000 8153 	beq.w	8003afc <GNSS_RX_Update+0x3ec>
 8003856:	79d8      	ldrb	r0, [r3, #7]
	        fields[current_field][current_pos] = *ch_ptr;
 8003858:	7194      	strb	r4, [r2, #6]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 800385a:	282c      	cmp	r0, #44	; 0x2c
	        ch_ptr++;
 800385c:	f103 0107 	add.w	r1, r3, #7
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8003860:	f000 8150 	beq.w	8003b04 <GNSS_RX_Update+0x3f4>
 8003864:	2800      	cmp	r0, #0
 8003866:	f000 814f 	beq.w	8003b08 <GNSS_RX_Update+0x3f8>
 800386a:	7a1c      	ldrb	r4, [r3, #8]
	        fields[current_field][current_pos] = *ch_ptr;
 800386c:	71d0      	strb	r0, [r2, #7]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 800386e:	2c2c      	cmp	r4, #44	; 0x2c
	        ch_ptr++;
 8003870:	f103 0108 	add.w	r1, r3, #8
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8003874:	f000 814a 	beq.w	8003b0c <GNSS_RX_Update+0x3fc>
 8003878:	2c00      	cmp	r4, #0
 800387a:	f000 8149 	beq.w	8003b10 <GNSS_RX_Update+0x400>
 800387e:	7a58      	ldrb	r0, [r3, #9]
	        fields[current_field][current_pos] = *ch_ptr;
 8003880:	7214      	strb	r4, [r2, #8]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8003882:	282c      	cmp	r0, #44	; 0x2c
	        ch_ptr++;
 8003884:	f103 0109 	add.w	r1, r3, #9
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8003888:	f000 8144 	beq.w	8003b14 <GNSS_RX_Update+0x404>
 800388c:	2800      	cmp	r0, #0
 800388e:	f000 8143 	beq.w	8003b18 <GNSS_RX_Update+0x408>
 8003892:	7a9c      	ldrb	r4, [r3, #10]
	        fields[current_field][current_pos] = *ch_ptr;
 8003894:	7250      	strb	r0, [r2, #9]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8003896:	2c2c      	cmp	r4, #44	; 0x2c
	        ch_ptr++;
 8003898:	f103 010a 	add.w	r1, r3, #10
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 800389c:	f000 813e 	beq.w	8003b1c <GNSS_RX_Update+0x40c>
 80038a0:	2c00      	cmp	r4, #0
 80038a2:	f000 813d 	beq.w	8003b20 <GNSS_RX_Update+0x410>
 80038a6:	7ad8      	ldrb	r0, [r3, #11]
	        fields[current_field][current_pos] = *ch_ptr;
 80038a8:	7294      	strb	r4, [r2, #10]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 80038aa:	282c      	cmp	r0, #44	; 0x2c
	        ch_ptr++;
 80038ac:	f103 010b 	add.w	r1, r3, #11
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 80038b0:	f000 8138 	beq.w	8003b24 <GNSS_RX_Update+0x414>
 80038b4:	2800      	cmp	r0, #0
 80038b6:	f000 8137 	beq.w	8003b28 <GNSS_RX_Update+0x418>
 80038ba:	7b1c      	ldrb	r4, [r3, #12]
	        fields[current_field][current_pos] = *ch_ptr;
 80038bc:	72d0      	strb	r0, [r2, #11]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 80038be:	2c2c      	cmp	r4, #44	; 0x2c
	        ch_ptr++;
 80038c0:	f103 010c 	add.w	r1, r3, #12
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 80038c4:	f000 8132 	beq.w	8003b2c <GNSS_RX_Update+0x41c>
 80038c8:	2c00      	cmp	r4, #0
 80038ca:	d03b      	beq.n	8003944 <GNSS_RX_Update+0x234>
 80038cc:	7b58      	ldrb	r0, [r3, #13]
	        ch_ptr++;
 80038ce:	f103 010d 	add.w	r1, r3, #13
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 80038d2:	282c      	cmp	r0, #44	; 0x2c
	        fields[current_field][current_pos] = *ch_ptr;
 80038d4:	7314      	strb	r4, [r2, #12]
	        current_pos++;
 80038d6:	f04f 030d 	mov.w	r3, #13
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 80038da:	d006      	beq.n	80038ea <GNSS_RX_Update+0x1da>
 80038dc:	b398      	cbz	r0, 8003946 <GNSS_RX_Update+0x236>
	        fields[current_field][current_pos] = *ch_ptr;
 80038de:	54d0      	strb	r0, [r2, r3]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 80038e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	        current_pos++;
 80038e4:	3301      	adds	r3, #1
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 80038e6:	282c      	cmp	r0, #44	; 0x2c
 80038e8:	d1f8      	bne.n	80038dc <GNSS_RX_Update+0x1cc>
        fields[current_field][current_pos]='\0';
 80038ea:	54d5      	strb	r5, [r2, r3]
	        ch_ptr++;
 80038ec:	1c4b      	adds	r3, r1, #1
 80038ee:	320c      	adds	r2, #12
 80038f0:	7849      	ldrb	r1, [r1, #1]
 80038f2:	e76e      	b.n	80037d2 <GNSS_RX_Update+0xc2>
				if (GNSS.dma_buffer[GNSS.start] == '$'){
 80038f4:	f81a 3004 	ldrb.w	r3, [sl, r4]
 80038f8:	2b24      	cmp	r3, #36	; 0x24
 80038fa:	d015      	beq.n	8003928 <GNSS_RX_Update+0x218>
			for(;GNSS.start != i;GNSS.start = (GNSS.start + 1) % DMA_BUFFER_SIZE){
 80038fc:	3401      	adds	r4, #1
 80038fe:	4263      	negs	r3, r4
 8003900:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003904:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003908:	bf58      	it	pl
 800390a:	425c      	negpl	r4, r3
 800390c:	455c      	cmp	r4, fp
 800390e:	d1f1      	bne.n	80038f4 <GNSS_RX_Update+0x1e4>
 8003910:	f8ca 4464 	str.w	r4, [sl, #1124]	; 0x464
			new_information = 1;
		}
	}

	return new_information;
}
 8003914:	4640      	mov	r0, r8
 8003916:	b035      	add	sp, #212	; 0xd4
 8003918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 800391c:	42a3      	cmp	r3, r4
 800391e:	f47f af2e 	bne.w	800377e <GNSS_RX_Update+0x6e>
 8003922:	2001      	movs	r0, #1
		int counter = 0;
 8003924:	2200      	movs	r2, #0
 8003926:	e740      	b.n	80037aa <GNSS_RX_Update+0x9a>
 8003928:	f8ca 4464 	str.w	r4, [sl, #1124]	; 0x464
 800392c:	e712      	b.n	8003754 <GNSS_RX_Update+0x44>
 800392e:	bf00      	nop
 8003930:	20000d10 	.word	0x20000d10
 8003934:	20000c50 	.word	0x20000c50
 8003938:	20000850 	.word	0x20000850
 800393c:	0800bcbc 	.word	0x0800bcbc
 8003940:	20000c4f 	.word	0x20000c4f
	        current_pos++;
 8003944:	230c      	movs	r3, #12
        fields[current_field][current_pos]='\0';
 8003946:	2100      	movs	r1, #0
 8003948:	54d1      	strb	r1, [r2, r3]
			sscanf(fields[1],"%2d%2d%2d.%3d",&GNSS.GNGGA.UTC_Hour,&GNSS.GNGGA.UTC_Min,&GNSS.GNGGA.UTC_Second,&GNSS.GNGGA.UTC_Millis);
 800394a:	4b79      	ldr	r3, [pc, #484]	; (8003b30 <GNSS_RX_Update+0x420>)
 800394c:	4979      	ldr	r1, [pc, #484]	; (8003b34 <GNSS_RX_Update+0x424>)
 800394e:	f103 0208 	add.w	r2, r3, #8
 8003952:	9201      	str	r2, [sp, #4]
 8003954:	9a03      	ldr	r2, [sp, #12]
 8003956:	a80a      	add	r0, sp, #40	; 0x28
 8003958:	9200      	str	r2, [sp, #0]
 800395a:	1f1a      	subs	r2, r3, #4
 800395c:	f004 fce4 	bl	8008328 <siscanf>
			GNSS.GNGGA.lat_raw = atof(fields[2]);
 8003960:	a80d      	add	r0, sp, #52	; 0x34
 8003962:	f004 fc73 	bl	800824c <atof>
 8003966:	f7fd f8af 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.North_South = fields[3][0];
 800396a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
			GNSS.GNGGA.lat_raw = atof(fields[2]);
 800396e:	f8ca 0478 	str.w	r0, [sl, #1144]	; 0x478
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 8003972:	a813      	add	r0, sp, #76	; 0x4c
			GNSS.GNGGA.North_South = fields[3][0];
 8003974:	f88a 3488 	strb.w	r3, [sl, #1160]	; 0x488
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 8003978:	f004 fc68 	bl	800824c <atof>
 800397c:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8003b4c <GNSS_RX_Update+0x43c>
			GNSS.GNGGA.East_West = fields[5][0];
 8003980:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 8003984:	e9c8 0100 	strd	r0, r1, [r8]
			GNSS.GNGGA.status = atoi(fields[6]);
 8003988:	a819      	add	r0, sp, #100	; 0x64
			GNSS.GNGGA.East_West = fields[5][0];
 800398a:	f88a 34a0 	strb.w	r3, [sl, #1184]	; 0x4a0
			GNSS.GNGGA.status = atoi(fields[6]);
 800398e:	f004 fc60 	bl	8008252 <atoi>
 8003992:	f8ca 04a4 	str.w	r0, [sl, #1188]	; 0x4a4
			GNSS.GNGGA.num_sat = atoi(fields[7]);
 8003996:	a81c      	add	r0, sp, #112	; 0x70
 8003998:	f004 fc5b 	bl	8008252 <atoi>
 800399c:	f8ca 04a8 	str.w	r0, [sl, #1192]	; 0x4a8
			GNSS.GNGGA.HDOP = atof(fields[8]);
 80039a0:	a81f      	add	r0, sp, #124	; 0x7c
 80039a2:	f004 fc53 	bl	800824c <atof>
 80039a6:	f7fd f88f 	bl	8000ac8 <__aeabi_d2f>
 80039aa:	f8ca 04ac 	str.w	r0, [sl, #1196]	; 0x4ac
			GNSS.GNGGA.MSL_alt = atof(fields[9]);
 80039ae:	a822      	add	r0, sp, #136	; 0x88
 80039b0:	f004 fc4c 	bl	800824c <atof>
 80039b4:	f7fd f888 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.MSL_Unit = fields[10][0];
 80039b8:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
			GNSS.GNGGA.MSL_alt = atof(fields[9]);
 80039bc:	f8ca 04b0 	str.w	r0, [sl, #1200]	; 0x4b0
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 80039c0:	a828      	add	r0, sp, #160	; 0xa0
			GNSS.GNGGA.MSL_Unit = fields[10][0];
 80039c2:	f88a 34b4 	strb.w	r3, [sl, #1204]	; 0x4b4
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 80039c6:	f004 fc41 	bl	800824c <atof>
 80039ca:	f7fd f87d 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 80039ce:	f8da 4478 	ldr.w	r4, [sl, #1144]	; 0x478
			GNSS.GNGGA.checksum[0] = fields[14][1];//fields[14][0] is always '*'
 80039d2:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
			GNSS.GNGGA.checksum[1] = fields[14][2];
 80039d6:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
			GNSS.GNGGA.Geoid_Unit = fields[12][0];
 80039da:	f89d 10ac 	ldrb.w	r1, [sp, #172]	; 0xac
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 80039de:	f8ca 04b8 	str.w	r0, [sl, #1208]	; 0x4b8
			GNSS.GNGGA.checksum[0] = fields[14][1];//fields[14][0] is always '*'
 80039e2:	f88a 24bd 	strb.w	r2, [sl, #1213]	; 0x4bd
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 80039e6:	4620      	mov	r0, r4
			GNSS.GNGGA.checksum[1] = fields[14][2];
 80039e8:	f88a 34be 	strb.w	r3, [sl, #1214]	; 0x4be
			GNSS.GNGGA.Geoid_Unit = fields[12][0];
 80039ec:	f88a 14bc 	strb.w	r1, [sl, #1212]	; 0x4bc
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 80039f0:	f7fc fd1a 	bl	8000428 <__aeabi_f2d>
	return ((int)raw / 100) + (fmod(raw,100)/60);
 80039f4:	2200      	movs	r2, #0
 80039f6:	4b50      	ldr	r3, [pc, #320]	; (8003b38 <GNSS_RX_Update+0x428>)
 80039f8:	f007 f86a 	bl	800aad0 <fmod>
 80039fc:	4606      	mov	r6, r0
 80039fe:	4620      	mov	r0, r4
 8003a00:	460f      	mov	r7, r1
 8003a02:	f7fd f8b1 	bl	8000b68 <__aeabi_f2iz>
 8003a06:	4b4d      	ldr	r3, [pc, #308]	; (8003b3c <GNSS_RX_Update+0x42c>)
 8003a08:	fb83 2300 	smull	r2, r3, r3, r0
 8003a0c:	17c0      	asrs	r0, r0, #31
 8003a0e:	ebc0 1063 	rsb	r0, r0, r3, asr #5
 8003a12:	f7fc fcf7 	bl	8000404 <__aeabi_i2d>
 8003a16:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	460d      	mov	r5, r1
 8003a1e:	4b48      	ldr	r3, [pc, #288]	; (8003b40 <GNSS_RX_Update+0x430>)
 8003a20:	4630      	mov	r0, r6
 8003a22:	4639      	mov	r1, r7
 8003a24:	f7fc fd58 	bl	80004d8 <__aeabi_dmul>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4620      	mov	r0, r4
 8003a2e:	4629      	mov	r1, r5
 8003a30:	f7fc fb9c 	bl	800016c <__adddf3>
			GNSS.GNGGA.lon = convert_raw_lat_lon(GNSS.GNGGA.lon_raw);
 8003a34:	e9d8 6700 	ldrd	r6, r7, [r8]
	return ((int)raw / 100) + (fmod(raw,100)/60);
 8003a38:	2200      	movs	r2, #0
 8003a3a:	460c      	mov	r4, r1
 8003a3c:	4605      	mov	r5, r0
 8003a3e:	4b3e      	ldr	r3, [pc, #248]	; (8003b38 <GNSS_RX_Update+0x428>)
 8003a40:	4630      	mov	r0, r6
 8003a42:	4639      	mov	r1, r7
 8003a44:	f007 f844 	bl	800aad0 <fmod>
 8003a48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003a4c:	4639      	mov	r1, r7
 8003a4e:	4630      	mov	r0, r6
 8003a50:	f7fc fff2 	bl	8000a38 <__aeabi_d2iz>
 8003a54:	4b39      	ldr	r3, [pc, #228]	; (8003b3c <GNSS_RX_Update+0x42c>)
			new_information = 1;
 8003a56:	f04f 0801 	mov.w	r8, #1
	return ((int)raw / 100) + (fmod(raw,100)/60);
 8003a5a:	fb83 2300 	smull	r2, r3, r3, r0
 8003a5e:	17c0      	asrs	r0, r0, #31
 8003a60:	ebc0 1063 	rsb	r0, r0, r3, asr #5
 8003a64:	f7fc fcce 	bl	8000404 <__aeabi_i2d>
 8003a68:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8003a6c:	4606      	mov	r6, r0
 8003a6e:	460f      	mov	r7, r1
 8003a70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a74:	4b32      	ldr	r3, [pc, #200]	; (8003b40 <GNSS_RX_Update+0x430>)
 8003a76:	f7fc fd2f 	bl	80004d8 <__aeabi_dmul>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4630      	mov	r0, r6
 8003a80:	4639      	mov	r1, r7
 8003a82:	f7fc fb73 	bl	800016c <__adddf3>
			GNSS.GNGGA.lat = GNSS.GNGGA.North_South == 'N' ? GNSS.GNGGA.lat : -GNSS.GNGGA.lat;
 8003a86:	f89a 3488 	ldrb.w	r3, [sl, #1160]	; 0x488
 8003a8a:	4a2e      	ldr	r2, [pc, #184]	; (8003b44 <GNSS_RX_Update+0x434>)
 8003a8c:	2b4e      	cmp	r3, #78	; 0x4e
 8003a8e:	bf18      	it	ne
 8003a90:	f104 4400 	addne.w	r4, r4, #2147483648	; 0x80000000
 8003a94:	4623      	mov	r3, r4
 8003a96:	462c      	mov	r4, r5
 8003a98:	461d      	mov	r5, r3
			GNSS.GNGGA.lon = GNSS.GNGGA.East_West == 'E' ? GNSS.GNGGA.lon : -GNSS.GNGGA.lon;
 8003a9a:	f89a 34a0 	ldrb.w	r3, [sl, #1184]	; 0x4a0
			GNSS.GNGGA.lat = GNSS.GNGGA.North_South == 'N' ? GNSS.GNGGA.lat : -GNSS.GNGGA.lat;
 8003a9e:	e9c2 4500 	strd	r4, r5, [r2]
			GNSS.GNGGA.lon = GNSS.GNGGA.East_West == 'E' ? GNSS.GNGGA.lon : -GNSS.GNGGA.lon;
 8003aa2:	2b45      	cmp	r3, #69	; 0x45
 8003aa4:	bf18      	it	ne
 8003aa6:	f101 4100 	addne.w	r1, r1, #2147483648	; 0x80000000
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4602      	mov	r2, r0
 8003aae:	4926      	ldr	r1, [pc, #152]	; (8003b48 <GNSS_RX_Update+0x438>)
 8003ab0:	e9c1 2300 	strd	r2, r3, [r1]
 8003ab4:	e641      	b.n	800373a <GNSS_RX_Update+0x2a>
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8003ab6:	4619      	mov	r1, r3
        current_pos = 0;
 8003ab8:	2300      	movs	r3, #0
        fields[current_field][current_pos]='\0';
 8003aba:	54d5      	strb	r5, [r2, r3]
	        ch_ptr++;
 8003abc:	1c4b      	adds	r3, r1, #1
 8003abe:	320c      	adds	r2, #12
 8003ac0:	7849      	ldrb	r1, [r1, #1]
 8003ac2:	e686      	b.n	80037d2 <GNSS_RX_Update+0xc2>
	        current_pos++;
 8003ac4:	2301      	movs	r3, #1
        fields[current_field][current_pos]='\0';
 8003ac6:	54d5      	strb	r5, [r2, r3]
	        ch_ptr++;
 8003ac8:	1c4b      	adds	r3, r1, #1
 8003aca:	320c      	adds	r2, #12
 8003acc:	7849      	ldrb	r1, [r1, #1]
 8003ace:	e680      	b.n	80037d2 <GNSS_RX_Update+0xc2>
	        current_pos++;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e738      	b.n	8003946 <GNSS_RX_Update+0x236>
 8003ad4:	2302      	movs	r3, #2
        fields[current_field][current_pos]='\0';
 8003ad6:	54d5      	strb	r5, [r2, r3]
	        ch_ptr++;
 8003ad8:	1c4b      	adds	r3, r1, #1
 8003ada:	320c      	adds	r2, #12
 8003adc:	7849      	ldrb	r1, [r1, #1]
 8003ade:	e678      	b.n	80037d2 <GNSS_RX_Update+0xc2>
	        current_pos++;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e730      	b.n	8003946 <GNSS_RX_Update+0x236>
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e700      	b.n	80038ea <GNSS_RX_Update+0x1da>
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e72c      	b.n	8003946 <GNSS_RX_Update+0x236>
 8003aec:	2304      	movs	r3, #4
 8003aee:	e6fc      	b.n	80038ea <GNSS_RX_Update+0x1da>
 8003af0:	2304      	movs	r3, #4
 8003af2:	e728      	b.n	8003946 <GNSS_RX_Update+0x236>
 8003af4:	2305      	movs	r3, #5
 8003af6:	e6f8      	b.n	80038ea <GNSS_RX_Update+0x1da>
 8003af8:	2305      	movs	r3, #5
 8003afa:	e724      	b.n	8003946 <GNSS_RX_Update+0x236>
 8003afc:	2306      	movs	r3, #6
 8003afe:	e722      	b.n	8003946 <GNSS_RX_Update+0x236>
 8003b00:	2306      	movs	r3, #6
 8003b02:	e6f2      	b.n	80038ea <GNSS_RX_Update+0x1da>
 8003b04:	2307      	movs	r3, #7
 8003b06:	e6f0      	b.n	80038ea <GNSS_RX_Update+0x1da>
 8003b08:	2307      	movs	r3, #7
 8003b0a:	e71c      	b.n	8003946 <GNSS_RX_Update+0x236>
 8003b0c:	2308      	movs	r3, #8
 8003b0e:	e6ec      	b.n	80038ea <GNSS_RX_Update+0x1da>
 8003b10:	2308      	movs	r3, #8
 8003b12:	e718      	b.n	8003946 <GNSS_RX_Update+0x236>
 8003b14:	2309      	movs	r3, #9
 8003b16:	e6e8      	b.n	80038ea <GNSS_RX_Update+0x1da>
 8003b18:	2309      	movs	r3, #9
 8003b1a:	e714      	b.n	8003946 <GNSS_RX_Update+0x236>
 8003b1c:	230a      	movs	r3, #10
 8003b1e:	e6e4      	b.n	80038ea <GNSS_RX_Update+0x1da>
 8003b20:	230a      	movs	r3, #10
 8003b22:	e710      	b.n	8003946 <GNSS_RX_Update+0x236>
 8003b24:	230b      	movs	r3, #11
 8003b26:	e6e0      	b.n	80038ea <GNSS_RX_Update+0x1da>
 8003b28:	230b      	movs	r3, #11
 8003b2a:	e70c      	b.n	8003946 <GNSS_RX_Update+0x236>
 8003b2c:	230c      	movs	r3, #12
 8003b2e:	e6dc      	b.n	80038ea <GNSS_RX_Update+0x1da>
 8003b30:	20000cbc 	.word	0x20000cbc
 8003b34:	0800bcc4 	.word	0x0800bcc4
 8003b38:	40590000 	.word	0x40590000
 8003b3c:	51eb851f 	.word	0x51eb851f
 8003b40:	3f911111 	.word	0x3f911111
 8003b44:	20000cd0 	.word	0x20000cd0
 8003b48:	20000ce8 	.word	0x20000ce8
 8003b4c:	20000ce0 	.word	0x20000ce0

08003b50 <I2C_read>:
 *      Author: yuche
 */

#include "i2c.h"

uint8_t I2C_read(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* output){
 8003b50:	b530      	push	{r4, r5, lr}
	int state = HAL_I2C_Mem_Read(i2cx,target_address << 1,register_address,sizeof(register_address),output,length,20);//timeout is magic. Do not touch
 8003b52:	2514      	movs	r5, #20
uint8_t I2C_read(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* output){
 8003b54:	b085      	sub	sp, #20
 8003b56:	9c08      	ldr	r4, [sp, #32]
	int state = HAL_I2C_Mem_Read(i2cx,target_address << 1,register_address,sizeof(register_address),output,length,20);//timeout is magic. Do not touch
 8003b58:	9301      	str	r3, [sp, #4]
 8003b5a:	0049      	lsls	r1, r1, #1
 8003b5c:	9502      	str	r5, [sp, #8]
 8003b5e:	9400      	str	r4, [sp, #0]
 8003b60:	2301      	movs	r3, #1
 8003b62:	f001 fa55 	bl	8005010 <HAL_I2C_Mem_Read>
	if (state != HAL_OK){
 8003b66:	b100      	cbz	r0, 8003b6a <I2C_read+0x1a>
		__NOP();
 8003b68:	bf00      	nop
	}
	return state;
}
 8003b6a:	b005      	add	sp, #20
 8003b6c:	bd30      	pop	{r4, r5, pc}
 8003b6e:	bf00      	nop

08003b70 <I2C_write>:

uint8_t I2C_write(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* input){
 8003b70:	b530      	push	{r4, r5, lr}
	int state =  HAL_I2C_Mem_Write(i2cx,target_address << 1,register_address,sizeof(register_address),input,length,20);//timeout is magic. Do not touch
 8003b72:	2514      	movs	r5, #20
uint8_t I2C_write(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* input){
 8003b74:	b085      	sub	sp, #20
 8003b76:	9c08      	ldr	r4, [sp, #32]
	int state =  HAL_I2C_Mem_Write(i2cx,target_address << 1,register_address,sizeof(register_address),input,length,20);//timeout is magic. Do not touch
 8003b78:	9301      	str	r3, [sp, #4]
 8003b7a:	0049      	lsls	r1, r1, #1
 8003b7c:	9502      	str	r5, [sp, #8]
 8003b7e:	9400      	str	r4, [sp, #0]
 8003b80:	2301      	movs	r3, #1
 8003b82:	f001 f929 	bl	8004dd8 <HAL_I2C_Mem_Write>
	if (state != HAL_OK){
 8003b86:	b100      	cbz	r0, 8003b8a <I2C_write+0x1a>
			__NOP();
 8003b88:	bf00      	nop
		}
	return state;
}
 8003b8a:	b005      	add	sp, #20
 8003b8c:	bd30      	pop	{r4, r5, pc}
 8003b8e:	bf00      	nop

08003b90 <led_update>:
#include "stm32f1xx_hal.h"

uint8_t led_pattern = LED_DISCONNECTED;
uint8_t led_state = 0;

void led_update(){
 8003b90:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,  1 - (led_pattern>>led_state) & 0x01);
 8003b92:	4b0a      	ldr	r3, [pc, #40]	; (8003bbc <led_update+0x2c>)
 8003b94:	4c0a      	ldr	r4, [pc, #40]	; (8003bc0 <led_update+0x30>)
 8003b96:	781a      	ldrb	r2, [r3, #0]
 8003b98:	7823      	ldrb	r3, [r4, #0]
 8003b9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b9e:	411a      	asrs	r2, r3
 8003ba0:	f1c2 0201 	rsb	r2, r2, #1
 8003ba4:	f002 0201 	and.w	r2, r2, #1
 8003ba8:	4806      	ldr	r0, [pc, #24]	; (8003bc4 <led_update+0x34>)
 8003baa:	f000 fe39 	bl	8004820 <HAL_GPIO_WritePin>
	led_state++;
 8003bae:	7823      	ldrb	r3, [r4, #0]
 8003bb0:	3301      	adds	r3, #1
	led_state = led_state % 8;
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	7023      	strb	r3, [r4, #0]
}
 8003bb8:	bd10      	pop	{r4, pc}
 8003bba:	bf00      	nop
 8003bbc:	200003bc 	.word	0x200003bc
 8003bc0:	200003bd 	.word	0x200003bd
 8003bc4:	40011000 	.word	0x40011000

08003bc8 <led_set>:

void led_set(uint8_t led_pattern_){
	led_pattern = led_pattern_;
 8003bc8:	4b01      	ldr	r3, [pc, #4]	; (8003bd0 <led_set+0x8>)
 8003bca:	7018      	strb	r0, [r3, #0]
}
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	200003bc 	.word	0x200003bc

08003bd4 <mpu_set_i2c>:

enum MPU9250_GYRO_FSR gyro_fsr = MPU9250_NUM_GYRO_FSR;
enum MPU9250_ACCEL_FSR accel_fsr = MPU9250_NUM_ACCEL_FSR;

void mpu_set_i2c(I2C_HandleTypeDef* i2cx){
	mpu_i2cx = i2cx;
 8003bd4:	4b01      	ldr	r3, [pc, #4]	; (8003bdc <mpu_set_i2c+0x8>)
 8003bd6:	6018      	str	r0, [r3, #0]
}
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	200005f0 	.word	0x200005f0

08003be0 <i2c_write>:
}

// Functions implemented for this platform(STM32F103) for DMP

int i2c_write(unsigned char slave_addr, unsigned char reg_addr,
		unsigned char length, unsigned char const *data){
 8003be0:	b510      	push	{r4, lr}
	return I2C_write(mpu_i2cx,slave_addr,reg_addr,length,data);
 8003be2:	4c06      	ldr	r4, [pc, #24]	; (8003bfc <i2c_write+0x1c>)
		unsigned char length, unsigned char const *data){
 8003be4:	b082      	sub	sp, #8
	return I2C_write(mpu_i2cx,slave_addr,reg_addr,length,data);
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	6824      	ldr	r4, [r4, #0]
 8003bea:	4613      	mov	r3, r2
 8003bec:	460a      	mov	r2, r1
 8003bee:	4601      	mov	r1, r0
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	f7ff ffbd 	bl	8003b70 <I2C_write>
}
 8003bf6:	b002      	add	sp, #8
 8003bf8:	bd10      	pop	{r4, pc}
 8003bfa:	bf00      	nop
 8003bfc:	200005f0 	.word	0x200005f0

08003c00 <i2c_read>:

int i2c_read(unsigned char slave_addr, unsigned char reg_addr,
		unsigned char length, unsigned char *data){
 8003c00:	b510      	push	{r4, lr}
	return I2C_read(mpu_i2cx,slave_addr,reg_addr,length,data);
 8003c02:	4c06      	ldr	r4, [pc, #24]	; (8003c1c <i2c_read+0x1c>)
		unsigned char length, unsigned char *data){
 8003c04:	b082      	sub	sp, #8
	return I2C_read(mpu_i2cx,slave_addr,reg_addr,length,data);
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	6824      	ldr	r4, [r4, #0]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	460a      	mov	r2, r1
 8003c0e:	4601      	mov	r1, r0
 8003c10:	4620      	mov	r0, r4
 8003c12:	f7ff ff9d 	bl	8003b50 <I2C_read>
}
 8003c16:	b002      	add	sp, #8
 8003c18:	bd10      	pop	{r4, pc}
 8003c1a:	bf00      	nop
 8003c1c:	200005f0 	.word	0x200005f0

08003c20 <delay_ms>:

void delay_ms(unsigned long num_ms){
	delay(num_ms);
 8003c20:	f000 bb1c 	b.w	800425c <delay>

08003c24 <get_ms>:
}

unsigned long get_ms(unsigned long *count){
 8003c24:	b510      	push	{r4, lr}
 8003c26:	4604      	mov	r4, r0
	*count = millis();
 8003c28:	f000 fb12 	bl	8004250 <millis>
 8003c2c:	6020      	str	r0, [r4, #0]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	bd10      	pop	{r4, pc}
 8003c32:	bf00      	nop

08003c34 <ms5611_set_i2c>:
/**
 * select a hal I2C to talk to MS5611
 * @param i2cx The i2c port to talk to MS5611
 */
void ms5611_set_i2c(I2C_HandleTypeDef* i2cx){
	ms5611_i2cx = i2cx;
 8003c34:	4b01      	ldr	r3, [pc, #4]	; (8003c3c <ms5611_set_i2c+0x8>)
 8003c36:	6018      	str	r0, [r3, #0]
}
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	200007d4 	.word	0x200007d4

08003c40 <ms5611_init>:
/**
 * Initialize MS5611: read and store factory calibration data.
 *
 * request ADC to start convert temperature data
 */
void ms5611_init(){
 8003c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c42:	24a2      	movs	r4, #162	; 0xa2
 8003c44:	b085      	sub	sp, #20
 8003c46:	4d39      	ldr	r5, [pc, #228]	; (8003d2c <ms5611_init+0xec>)
 8003c48:	4f39      	ldr	r7, [pc, #228]	; (8003d30 <ms5611_init+0xf0>)
 8003c4a:	ae03      	add	r6, sp, #12
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8003c4c:	4622      	mov	r2, r4
 8003c4e:	6838      	ldr	r0, [r7, #0]
 8003c50:	2302      	movs	r3, #2
 8003c52:	9600      	str	r6, [sp, #0]
 8003c54:	2177      	movs	r1, #119	; 0x77
 8003c56:	f7ff ff7b 	bl	8003b50 <I2C_read>
 8003c5a:	3402      	adds	r4, #2
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
		uint8_t reg_addr = MS5611_CMD_READ_PROM + (i << 1);//interval 2
		uint8_t buffer[2];
		ms5611_read_i2c(reg_addr,2,buffer);

		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 8003c5c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003c60:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8003c64:	b2e4      	uxtb	r4, r4
 8003c66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 8003c6a:	2cae      	cmp	r4, #174	; 0xae
		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 8003c6c:	f825 3b02 	strh.w	r3, [r5], #2
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 8003c70:	d1ec      	bne.n	8003c4c <ms5611_init+0xc>
/**
 * Start ADC conversion of raw temperature in MS5611.
 * The ADC data can be read 9.02ms later
 */
void ms5611_request_temperature(){
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8003c72:	2400      	movs	r4, #0
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8003c74:	4d2f      	ldr	r5, [pc, #188]	; (8003d34 <ms5611_init+0xf4>)
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8003c76:	4623      	mov	r3, r4
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8003c78:	782a      	ldrb	r2, [r5, #0]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8003c7a:	6838      	ldr	r0, [r7, #0]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8003c7c:	0052      	lsls	r2, r2, #1
 8003c7e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8003c82:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c86:	2177      	movs	r1, #119	; 0x77
 8003c88:	9600      	str	r6, [sp, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8003c8a:	f8ad 400c 	strh.w	r4, [sp, #12]
 8003c8e:	f88d 400e 	strb.w	r4, [sp, #14]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8003c92:	f7ff ff6d 	bl	8003b70 <I2C_write>
 * Read raw temperature from MS5611.
 */
void ms5611_update_temperature(){

	ms5611_request_temperature();
	delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8003c96:	200c      	movs	r0, #12
 8003c98:	f000 fae0 	bl	800425c <delay>
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8003c9c:	4622      	mov	r2, r4
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8003c9e:	f8ad 400c 	strh.w	r4, [sp, #12]
 8003ca2:	f88d 400e 	strb.w	r4, [sp, #14]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8003ca6:	2400      	movs	r4, #0
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8003ca8:	6838      	ldr	r0, [r7, #0]
 8003caa:	2303      	movs	r3, #3
 8003cac:	9600      	str	r6, [sp, #0]
 8003cae:	2177      	movs	r1, #119	; 0x77
 8003cb0:	f7ff ff4e 	bl	8003b50 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8003cb4:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8003cb8:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003cbc:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (temp != 0){
 8003cc6:	4313      	orrs	r3, r2
		raw_temperature = temp;
 8003cc8:	bf18      	it	ne
 8003cca:	4a1b      	ldrne	r2, [pc, #108]	; (8003d38 <ms5611_init+0xf8>)
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8003ccc:	6838      	ldr	r0, [r7, #0]
		raw_temperature = temp;
 8003cce:	bf18      	it	ne
 8003cd0:	6013      	strne	r3, [r2, #0]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8003cd2:	782a      	ldrb	r2, [r5, #0]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8003cd4:	4623      	mov	r3, r4
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8003cd6:	0052      	lsls	r2, r2, #1
 8003cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8003cdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ce0:	2177      	movs	r1, #119	; 0x77
 8003ce2:	9600      	str	r6, [sp, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8003ce4:	f8ad 400c 	strh.w	r4, [sp, #12]
 8003ce8:	f88d 400e 	strb.w	r4, [sp, #14]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8003cec:	f7ff ff40 	bl	8003b70 <I2C_write>
	delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8003cf0:	200c      	movs	r0, #12
 8003cf2:	f000 fab3 	bl	800425c <delay>
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8003cf6:	6838      	ldr	r0, [r7, #0]
 8003cf8:	4622      	mov	r2, r4
 8003cfa:	9600      	str	r6, [sp, #0]
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	2177      	movs	r1, #119	; 0x77
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8003d00:	f8ad 400c 	strh.w	r4, [sp, #12]
 8003d04:	f88d 400e 	strb.w	r4, [sp, #14]
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8003d08:	f7ff ff22 	bl	8003b50 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8003d0c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8003d10:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003d14:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8003d18:	021b      	lsls	r3, r3, #8
 8003d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (temp != 0){
 8003d1e:	4313      	orrs	r3, r2
		raw_pressure = temp;
 8003d20:	bf1c      	itt	ne
 8003d22:	4a06      	ldrne	r2, [pc, #24]	; (8003d3c <ms5611_init+0xfc>)
 8003d24:	6013      	strne	r3, [r2, #0]
}
 8003d26:	b005      	add	sp, #20
 8003d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20000d18 	.word	0x20000d18
 8003d30:	200007d4 	.word	0x200007d4
 8003d34:	2000003c 	.word	0x2000003c
 8003d38:	20000d24 	.word	0x20000d24
 8003d3c:	20000d14 	.word	0x20000d14

08003d40 <ms5611_update>:
}

/**
 *	Read raw temperature and pressure from MS5611
 */
void ms5611_update(){
 8003d40:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8003d42:	2400      	movs	r4, #0
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8003d44:	4f2f      	ldr	r7, [pc, #188]	; (8003e04 <ms5611_update+0xc4>)
void ms5611_update(){
 8003d46:	b085      	sub	sp, #20
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8003d48:	783a      	ldrb	r2, [r7, #0]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8003d4a:	4e2f      	ldr	r6, [pc, #188]	; (8003e08 <ms5611_update+0xc8>)
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8003d4c:	0052      	lsls	r2, r2, #1
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8003d4e:	ad03      	add	r5, sp, #12
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8003d50:	f042 0250 	orr.w	r2, r2, #80	; 0x50
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8003d54:	4623      	mov	r3, r4
 8003d56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d5a:	2177      	movs	r1, #119	; 0x77
 8003d5c:	6830      	ldr	r0, [r6, #0]
 8003d5e:	9500      	str	r5, [sp, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8003d60:	f8ad 400c 	strh.w	r4, [sp, #12]
 8003d64:	f88d 400e 	strb.w	r4, [sp, #14]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8003d68:	f7ff ff02 	bl	8003b70 <I2C_write>
	delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8003d6c:	200c      	movs	r0, #12
 8003d6e:	f000 fa75 	bl	800425c <delay>
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8003d72:	4622      	mov	r2, r4
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8003d74:	f8ad 400c 	strh.w	r4, [sp, #12]
 8003d78:	f88d 400e 	strb.w	r4, [sp, #14]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8003d7c:	2400      	movs	r4, #0
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8003d7e:	6830      	ldr	r0, [r6, #0]
 8003d80:	9500      	str	r5, [sp, #0]
 8003d82:	2303      	movs	r3, #3
 8003d84:	2177      	movs	r1, #119	; 0x77
 8003d86:	f7ff fee3 	bl	8003b50 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8003d8a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8003d8e:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003d92:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8003d96:	021b      	lsls	r3, r3, #8
 8003d98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (temp != 0){
 8003d9c:	4313      	orrs	r3, r2
		raw_temperature = temp;
 8003d9e:	bf18      	it	ne
 8003da0:	4a1a      	ldrne	r2, [pc, #104]	; (8003e0c <ms5611_update+0xcc>)
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8003da2:	f04f 0177 	mov.w	r1, #119	; 0x77
		raw_temperature = temp;
 8003da6:	bf18      	it	ne
 8003da8:	6013      	strne	r3, [r2, #0]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8003daa:	783a      	ldrb	r2, [r7, #0]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8003dac:	4623      	mov	r3, r4
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8003dae:	0052      	lsls	r2, r2, #1
 8003db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8003db4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003db8:	6830      	ldr	r0, [r6, #0]
 8003dba:	9500      	str	r5, [sp, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8003dbc:	f8ad 400c 	strh.w	r4, [sp, #12]
 8003dc0:	f88d 400e 	strb.w	r4, [sp, #14]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8003dc4:	f7ff fed4 	bl	8003b70 <I2C_write>
	delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8003dc8:	200c      	movs	r0, #12
 8003dca:	f000 fa47 	bl	800425c <delay>
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8003dce:	4622      	mov	r2, r4
 8003dd0:	6830      	ldr	r0, [r6, #0]
 8003dd2:	9500      	str	r5, [sp, #0]
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	2177      	movs	r1, #119	; 0x77
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8003dd8:	f8ad 400c 	strh.w	r4, [sp, #12]
 8003ddc:	f88d 400e 	strb.w	r4, [sp, #14]
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8003de0:	f7ff feb6 	bl	8003b50 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8003de4:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8003de8:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003dec:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8003df0:	021b      	lsls	r3, r3, #8
 8003df2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (temp != 0){
 8003df6:	4313      	orrs	r3, r2
		raw_pressure = temp;
 8003df8:	bf1c      	itt	ne
 8003dfa:	4a05      	ldrne	r2, [pc, #20]	; (8003e10 <ms5611_update+0xd0>)
 8003dfc:	6013      	strne	r3, [r2, #0]
	ms5611_update_temperature();
	ms5611_update_pressure();
}
 8003dfe:	b005      	add	sp, #20
 8003e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e02:	bf00      	nop
 8003e04:	2000003c 	.word	0x2000003c
 8003e08:	200007d4 	.word	0x200007d4
 8003e0c:	20000d24 	.word	0x20000d24
 8003e10:	20000d14 	.word	0x20000d14
 8003e14:	00000000 	.word	0x00000000

08003e18 <ms5611_get_pressure>:

/**
 * Get calibrated pressure, unit: mBar
 * @return calibrated pressure
 */
double ms5611_get_pressure(){
 8003e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 8003e1c:	4b74      	ldr	r3, [pc, #464]	; (8003ff0 <ms5611_get_pressure+0x1d8>)
 8003e1e:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8004014 <ms5611_get_pressure+0x1fc>
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	f8b8 3008 	ldrh.w	r3, [r8, #8]
double ms5611_get_pressure(){
 8003e28:	b085      	sub	sp, #20
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8003e2a:	f8b8 000a 	ldrh.w	r0, [r8, #10]
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 8003e2e:	eba2 2903 	sub.w	r9, r2, r3, lsl #8
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8003e32:	f7fc fae7 	bl	8000404 <__aeabi_i2d>
 8003e36:	2200      	movs	r2, #0
 8003e38:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8003e3c:	f7fc fb4c 	bl	80004d8 <__aeabi_dmul>
 8003e40:	4604      	mov	r4, r0
 8003e42:	4648      	mov	r0, r9
 8003e44:	460d      	mov	r5, r1
 8003e46:	f7fc facd 	bl	80003e4 <__aeabi_ui2d>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4620      	mov	r0, r4
 8003e50:	4629      	mov	r1, r5
 8003e52:	f7fc fb41 	bl	80004d8 <__aeabi_dmul>
 8003e56:	4604      	mov	r4, r0

	double OFF = fc[1] * (65536.0) + fc[3] * dT / (128);
 8003e58:	f8b8 0006 	ldrh.w	r0, [r8, #6]
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8003e5c:	460d      	mov	r5, r1
	double OFF = fc[1] * (65536.0) + fc[3] * dT / (128);
 8003e5e:	fb09 f000 	mul.w	r0, r9, r0
 8003e62:	09c0      	lsrs	r0, r0, #7
 8003e64:	f7fc fabe 	bl	80003e4 <__aeabi_ui2d>
 8003e68:	4606      	mov	r6, r0
 8003e6a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8003e6e:	460f      	mov	r7, r1
 8003e70:	f7fc fac8 	bl	8000404 <__aeabi_i2d>
 8003e74:	2200      	movs	r2, #0
 8003e76:	4b5f      	ldr	r3, [pc, #380]	; (8003ff4 <ms5611_get_pressure+0x1dc>)
 8003e78:	f7fc fb2e 	bl	80004d8 <__aeabi_dmul>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4630      	mov	r0, r6
 8003e82:	4639      	mov	r1, r7
 8003e84:	f7fc f972 	bl	800016c <__adddf3>
 8003e88:	4682      	mov	sl, r0
	double SENS = fc[0] * (32768.0) + fc[2] * dT / (256);
 8003e8a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8003e8e:	468b      	mov	fp, r1
 8003e90:	fb09 f000 	mul.w	r0, r9, r0
 8003e94:	0a00      	lsrs	r0, r0, #8
 8003e96:	f7fc faa5 	bl	80003e4 <__aeabi_ui2d>
 8003e9a:	4606      	mov	r6, r0
 8003e9c:	f8b8 0000 	ldrh.w	r0, [r8]
 8003ea0:	460f      	mov	r7, r1
 8003ea2:	f7fc faaf 	bl	8000404 <__aeabi_i2d>
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	4b53      	ldr	r3, [pc, #332]	; (8003ff8 <ms5611_get_pressure+0x1e0>)
 8003eaa:	f7fc fb15 	bl	80004d8 <__aeabi_dmul>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4630      	mov	r0, r6
 8003eb4:	4639      	mov	r1, r7
 8003eb6:	f7fc f959 	bl	800016c <__adddf3>

	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 8003eba:	4b50      	ldr	r3, [pc, #320]	; (8003ffc <ms5611_get_pressure+0x1e4>)
	double SENS = fc[0] * (32768.0) + fc[2] * dT / (256);
 8003ebc:	4606      	mov	r6, r0
	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 8003ebe:	6818      	ldr	r0, [r3, #0]
	double SENS = fc[0] * (32768.0) + fc[2] * dT / (256);
 8003ec0:	460f      	mov	r7, r1
	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 8003ec2:	f7fc fa8f 	bl	80003e4 <__aeabi_ui2d>

	double T2=0, OFF2=0, SENS2=0;
	if (TEMP < 2000){
 8003ec6:	2200      	movs	r2, #0
	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 8003ec8:	e9cd 0100 	strd	r0, r1, [sp]
	if (TEMP < 2000){
 8003ecc:	2300      	movs	r3, #0
 8003ece:	4620      	mov	r0, r4
 8003ed0:	4629      	mov	r1, r5
 8003ed2:	f7fc fd73 	bl	80009bc <__aeabi_dcmplt>
 8003ed6:	b9a8      	cbnz	r0, 8003f04 <ms5611_get_pressure+0xec>

	TEMP = TEMP - T2;
	OFF = OFF - OFF2;
	SENS = SENS - SENS2;

	P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit mbar
 8003ed8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003edc:	2200      	movs	r2, #0
 8003ede:	4b48      	ldr	r3, [pc, #288]	; (8004000 <ms5611_get_pressure+0x1e8>)
 8003ee0:	f7fc fafa 	bl	80004d8 <__aeabi_dmul>
 8003ee4:	4632      	mov	r2, r6
 8003ee6:	463b      	mov	r3, r7
 8003ee8:	f7fc faf6 	bl	80004d8 <__aeabi_dmul>
 8003eec:	4652      	mov	r2, sl
 8003eee:	465b      	mov	r3, fp
 8003ef0:	f7fc f93a 	bl	8000168 <__aeabi_dsub>
	return P / 100;//unit mbar
 8003ef4:	a338      	add	r3, pc, #224	; (adr r3, 8003fd8 <ms5611_get_pressure+0x1c0>)
 8003ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efa:	f7fc faed 	bl	80004d8 <__aeabi_dmul>
}
 8003efe:	b005      	add	sp, #20
 8003f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		OFF2 = 5 * (TEMP-2000) * (TEMP-2000) / 2;
 8003f04:	4622      	mov	r2, r4
 8003f06:	462b      	mov	r3, r5
 8003f08:	4620      	mov	r0, r4
 8003f0a:	4629      	mov	r1, r5
 8003f0c:	f7fc fae4 	bl	80004d8 <__aeabi_dmul>
 8003f10:	2200      	movs	r2, #0
 8003f12:	4b3c      	ldr	r3, [pc, #240]	; (8004004 <ms5611_get_pressure+0x1ec>)
 8003f14:	4680      	mov	r8, r0
 8003f16:	4689      	mov	r9, r1
 8003f18:	f7fc fade 	bl	80004d8 <__aeabi_dmul>
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 8003f1c:	2200      	movs	r2, #0
		OFF2 = 5 * (TEMP-2000) * (TEMP-2000) / 2;
 8003f1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 8003f22:	4b39      	ldr	r3, [pc, #228]	; (8004008 <ms5611_get_pressure+0x1f0>)
 8003f24:	4640      	mov	r0, r8
 8003f26:	4649      	mov	r1, r9
 8003f28:	f7fc fad6 	bl	80004d8 <__aeabi_dmul>
		if (TEMP < -1500){
 8003f2c:	a32c      	add	r3, pc, #176	; (adr r3, 8003fe0 <ms5611_get_pressure+0x1c8>)
 8003f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 8003f32:	4680      	mov	r8, r0
 8003f34:	4689      	mov	r9, r1
		if (TEMP < -1500){
 8003f36:	4620      	mov	r0, r4
 8003f38:	4629      	mov	r1, r5
 8003f3a:	f7fc fd3f 	bl	80009bc <__aeabi_dcmplt>
 8003f3e:	b3c8      	cbz	r0, 8003fb4 <ms5611_get_pressure+0x19c>
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 8003f40:	a329      	add	r3, pc, #164	; (adr r3, 8003fe8 <ms5611_get_pressure+0x1d0>)
 8003f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f46:	4620      	mov	r0, r4
 8003f48:	4629      	mov	r1, r5
 8003f4a:	f7fc f90f 	bl	800016c <__adddf3>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	f7fc fac1 	bl	80004d8 <__aeabi_dmul>
 8003f56:	4642      	mov	r2, r8
 8003f58:	4604      	mov	r4, r0
 8003f5a:	460d      	mov	r5, r1
 8003f5c:	464b      	mov	r3, r9
 8003f5e:	4630      	mov	r0, r6
 8003f60:	4639      	mov	r1, r7
 8003f62:	f7fc f901 	bl	8000168 <__aeabi_dsub>
			SENS2 = SENS2 + 11/2 * (TEMP + 1500) * (TEMP + 1500);
 8003f66:	2200      	movs	r2, #0
 8003f68:	4606      	mov	r6, r0
 8003f6a:	460f      	mov	r7, r1
 8003f6c:	4b27      	ldr	r3, [pc, #156]	; (800400c <ms5611_get_pressure+0x1f4>)
 8003f6e:	4620      	mov	r0, r4
 8003f70:	4629      	mov	r1, r5
 8003f72:	f7fc fab1 	bl	80004d8 <__aeabi_dmul>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4630      	mov	r0, r6
 8003f7c:	4639      	mov	r1, r7
 8003f7e:	f7fc f8f3 	bl	8000168 <__aeabi_dsub>
 8003f82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f86:	4606      	mov	r6, r0
 8003f88:	460f      	mov	r7, r1
 8003f8a:	4650      	mov	r0, sl
 8003f8c:	4659      	mov	r1, fp
 8003f8e:	f7fc f8eb 	bl	8000168 <__aeabi_dsub>
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 8003f92:	2200      	movs	r2, #0
 8003f94:	4680      	mov	r8, r0
 8003f96:	4689      	mov	r9, r1
 8003f98:	4b1d      	ldr	r3, [pc, #116]	; (8004010 <ms5611_get_pressure+0x1f8>)
 8003f9a:	4620      	mov	r0, r4
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	f7fc fa9b 	bl	80004d8 <__aeabi_dmul>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4640      	mov	r0, r8
 8003fa8:	4649      	mov	r1, r9
 8003faa:	f7fc f8dd 	bl	8000168 <__aeabi_dsub>
 8003fae:	4682      	mov	sl, r0
 8003fb0:	468b      	mov	fp, r1
 8003fb2:	e791      	b.n	8003ed8 <ms5611_get_pressure+0xc0>
 8003fb4:	4642      	mov	r2, r8
 8003fb6:	464b      	mov	r3, r9
 8003fb8:	4630      	mov	r0, r6
 8003fba:	4639      	mov	r1, r7
 8003fbc:	f7fc f8d4 	bl	8000168 <__aeabi_dsub>
 8003fc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003fc4:	4606      	mov	r6, r0
 8003fc6:	460f      	mov	r7, r1
 8003fc8:	4650      	mov	r0, sl
 8003fca:	4659      	mov	r1, fp
 8003fcc:	f7fc f8cc 	bl	8000168 <__aeabi_dsub>
 8003fd0:	4682      	mov	sl, r0
 8003fd2:	468b      	mov	fp, r1
 8003fd4:	e780      	b.n	8003ed8 <ms5611_get_pressure+0xc0>
 8003fd6:	bf00      	nop
 8003fd8:	47ae147b 	.word	0x47ae147b
 8003fdc:	3e947ae1 	.word	0x3e947ae1
 8003fe0:	00000000 	.word	0x00000000
 8003fe4:	c0ab5800 	.word	0xc0ab5800
 8003fe8:	00000000 	.word	0x00000000
 8003fec:	40ab5800 	.word	0x40ab5800
 8003ff0:	20000d24 	.word	0x20000d24
 8003ff4:	40f00000 	.word	0x40f00000
 8003ff8:	40e00000 	.word	0x40e00000
 8003ffc:	20000d14 	.word	0x20000d14
 8004000:	3ea00000 	.word	0x3ea00000
 8004004:	40040000 	.word	0x40040000
 8004008:	3ff40000 	.word	0x3ff40000
 800400c:	40140000 	.word	0x40140000
 8004010:	401c0000 	.word	0x401c0000
 8004014:	20000d18 	.word	0x20000d18

08004018 <ms5611_timer_update>:
void ms5611_timer_update(){
 8004018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (read_index == 0){
 800401c:	4c74      	ldr	r4, [pc, #464]	; (80041f0 <ms5611_timer_update+0x1d8>)
 800401e:	4d75      	ldr	r5, [pc, #468]	; (80041f4 <ms5611_timer_update+0x1dc>)
 8004020:	7826      	ldrb	r6, [r4, #0]
void ms5611_timer_update(){
 8004022:	b086      	sub	sp, #24
 8004024:	6828      	ldr	r0, [r5, #0]
	if (read_index == 0){
 8004026:	2e00      	cmp	r6, #0
 8004028:	d076      	beq.n	8004118 <ms5611_timer_update+0x100>
	}else if (read_index == TEMP_READ_INTERVAL - 1){
 800402a:	2e09      	cmp	r6, #9
	uint8_t buffer[3] = {0x00,0x00,0x00};
 800402c:	f04f 0600 	mov.w	r6, #0
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8004030:	f10d 0a14 	add.w	sl, sp, #20
 8004034:	4632      	mov	r2, r6
 8004036:	f8cd a000 	str.w	sl, [sp]
 800403a:	f04f 0303 	mov.w	r3, #3
 800403e:	f04f 0177 	mov.w	r1, #119	; 0x77
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8004042:	f8ad 6014 	strh.w	r6, [sp, #20]
 8004046:	f88d 6016 	strb.w	r6, [sp, #22]
	}else if (read_index == TEMP_READ_INTERVAL - 1){
 800404a:	d033      	beq.n	80040b4 <ms5611_timer_update+0x9c>
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 800404c:	f7ff fd80 	bl	8003b50 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8004050:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8004054:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8004058:	f89d 2016 	ldrb.w	r2, [sp, #22]
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (temp != 0){
 8004062:	4313      	orrs	r3, r2
		raw_pressure = temp;
 8004064:	bf18      	it	ne
 8004066:	4a64      	ldrne	r2, [pc, #400]	; (80041f8 <ms5611_timer_update+0x1e0>)
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8004068:	f04f 0600 	mov.w	r6, #0
		raw_pressure = temp;
 800406c:	bf18      	it	ne
 800406e:	6013      	strne	r3, [r2, #0]
		XIMU_sens.pressure = ms5611_get_pressure();
 8004070:	f7ff fed2 	bl	8003e18 <ms5611_get_pressure>
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8004074:	4a61      	ldr	r2, [pc, #388]	; (80041fc <ms5611_timer_update+0x1e4>)
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8004076:	682b      	ldr	r3, [r5, #0]
		XIMU_sens.pressure = ms5611_get_pressure();
 8004078:	4d61      	ldr	r5, [pc, #388]	; (8004200 <ms5611_timer_update+0x1e8>)
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 800407a:	7812      	ldrb	r2, [r2, #0]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 800407c:	f8cd a000 	str.w	sl, [sp]
		XIMU_sens.pressure = ms5611_get_pressure();
 8004080:	e9c5 011e 	strd	r0, r1, [r5, #120]	; 0x78
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8004084:	0052      	lsls	r2, r2, #1
 8004086:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 800408a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800408e:	2177      	movs	r1, #119	; 0x77
 8004090:	4618      	mov	r0, r3
 8004092:	4633      	mov	r3, r6
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8004094:	f8ad 6014 	strh.w	r6, [sp, #20]
 8004098:	f88d 6016 	strb.w	r6, [sp, #22]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 800409c:	f7ff fd68 	bl	8003b70 <I2C_write>
		read_index++;
 80040a0:	7823      	ldrb	r3, [r4, #0]
 80040a2:	3301      	adds	r3, #1
 80040a4:	7023      	strb	r3, [r4, #0]
	XIMU_sens.pt_ts = millis();
 80040a6:	f000 f8d3 	bl	8004250 <millis>
 80040aa:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
}
 80040ae:	b006      	add	sp, #24
 80040b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 80040b4:	f7ff fd4c 	bl	8003b50 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 80040b8:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80040bc:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80040c0:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80040c4:	021b      	lsls	r3, r3, #8
 80040c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (temp != 0){
 80040ca:	4313      	orrs	r3, r2
		raw_pressure = temp;
 80040cc:	bf18      	it	ne
 80040ce:	4a4a      	ldrne	r2, [pc, #296]	; (80041f8 <ms5611_timer_update+0x1e0>)
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80040d0:	f04f 0600 	mov.w	r6, #0
		raw_pressure = temp;
 80040d4:	bf18      	it	ne
 80040d6:	6013      	strne	r3, [r2, #0]
		XIMU_sens.pressure = ms5611_get_pressure();
 80040d8:	f7ff fe9e 	bl	8003e18 <ms5611_get_pressure>
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 80040dc:	4a47      	ldr	r2, [pc, #284]	; (80041fc <ms5611_timer_update+0x1e4>)
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80040de:	682b      	ldr	r3, [r5, #0]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 80040e0:	7812      	ldrb	r2, [r2, #0]
		XIMU_sens.pressure = ms5611_get_pressure();
 80040e2:	4d47      	ldr	r5, [pc, #284]	; (8004200 <ms5611_timer_update+0x1e8>)
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 80040e4:	0052      	lsls	r2, r2, #1
 80040e6:	f042 0250 	orr.w	r2, r2, #80	; 0x50
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80040ea:	f8cd a000 	str.w	sl, [sp]
 80040ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
		XIMU_sens.pressure = ms5611_get_pressure();
 80040f2:	e9c5 011e 	strd	r0, r1, [r5, #120]	; 0x78
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80040f6:	2177      	movs	r1, #119	; 0x77
 80040f8:	4618      	mov	r0, r3
 80040fa:	4633      	mov	r3, r6
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80040fc:	f8ad 6014 	strh.w	r6, [sp, #20]
 8004100:	f88d 6016 	strb.w	r6, [sp, #22]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8004104:	f7ff fd34 	bl	8003b70 <I2C_write>
		read_index = 0;
 8004108:	7026      	strb	r6, [r4, #0]
	XIMU_sens.pt_ts = millis();
 800410a:	f000 f8a1 	bl	8004250 <millis>
 800410e:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
}
 8004112:	b006      	add	sp, #24
 8004114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8004118:	f10d 0a14 	add.w	sl, sp, #20
 800411c:	4632      	mov	r2, r6
 800411e:	2303      	movs	r3, #3
 8004120:	2177      	movs	r1, #119	; 0x77
 8004122:	f8cd a000 	str.w	sl, [sp]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8004126:	f8ad 6014 	strh.w	r6, [sp, #20]
 800412a:	f88d 6016 	strb.w	r6, [sp, #22]
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 800412e:	f7ff fd0f 	bl	8003b50 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8004132:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8004136:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800413a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800413e:	0200      	lsls	r0, r0, #8
 8004140:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
	if (temp != 0){
 8004144:	4318      	orrs	r0, r3
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 8004146:	4e2f      	ldr	r6, [pc, #188]	; (8004204 <ms5611_timer_update+0x1ec>)
		raw_temperature = temp;
 8004148:	4b2f      	ldr	r3, [pc, #188]	; (8004208 <ms5611_timer_update+0x1f0>)
 800414a:	bf0c      	ite	eq
 800414c:	6818      	ldreq	r0, [r3, #0]
 800414e:	6018      	strne	r0, [r3, #0]
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 8004150:	8933      	ldrh	r3, [r6, #8]
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8004152:	eba0 2003 	sub.w	r0, r0, r3, lsl #8
 8004156:	f7fc f945 	bl	80003e4 <__aeabi_ui2d>
 800415a:	4680      	mov	r8, r0
 800415c:	4689      	mov	r9, r1
 800415e:	8970      	ldrh	r0, [r6, #10]
 8004160:	f7fc f950 	bl	8000404 <__aeabi_i2d>
 8004164:	2200      	movs	r2, #0
 8004166:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800416a:	f7fc f9b5 	bl	80004d8 <__aeabi_dmul>
 800416e:	4642      	mov	r2, r8
 8004170:	464b      	mov	r3, r9
 8004172:	f7fc f9b1 	bl	80004d8 <__aeabi_dmul>
 8004176:	2200      	movs	r2, #0
 8004178:	4b24      	ldr	r3, [pc, #144]	; (800420c <ms5611_timer_update+0x1f4>)
 800417a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800417e:	f7fb fff5 	bl	800016c <__adddf3>
	if (TEMP < 2000.0){
 8004182:	2200      	movs	r2, #0
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8004184:	4606      	mov	r6, r0
 8004186:	460f      	mov	r7, r1
	if (TEMP < 2000.0){
 8004188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800418c:	2300      	movs	r3, #0
 800418e:	f7fc fc15 	bl	80009bc <__aeabi_dcmplt>
 8004192:	b998      	cbnz	r0, 80041bc <ms5611_timer_update+0x1a4>
	return TEMP / 100.0;
 8004194:	a314      	add	r3, pc, #80	; (adr r3, 80041e8 <ms5611_timer_update+0x1d0>)
 8004196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419a:	4630      	mov	r0, r6
 800419c:	4639      	mov	r1, r7
 800419e:	f7fc f99b 	bl	80004d8 <__aeabi_dmul>
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80041a2:	4a16      	ldr	r2, [pc, #88]	; (80041fc <ms5611_timer_update+0x1e4>)
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80041a4:	682b      	ldr	r3, [r5, #0]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80041a6:	7812      	ldrb	r2, [r2, #0]
		XIMU_sens.temperature = ms5611_get_temperature();
 80041a8:	4d15      	ldr	r5, [pc, #84]	; (8004200 <ms5611_timer_update+0x1e8>)
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80041aa:	0052      	lsls	r2, r2, #1
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80041ac:	f8cd a000 	str.w	sl, [sp]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80041b0:	2600      	movs	r6, #0
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80041b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		XIMU_sens.temperature = ms5611_get_temperature();
 80041b6:	e9c5 0120 	strd	r0, r1, [r5, #128]	; 0x80
 80041ba:	e766      	b.n	800408a <ms5611_timer_update+0x72>
		T2 = dT * (dT / (2147483648.0));
 80041bc:	4642      	mov	r2, r8
 80041be:	464b      	mov	r3, r9
 80041c0:	4640      	mov	r0, r8
 80041c2:	4649      	mov	r1, r9
 80041c4:	f7fc f988 	bl	80004d8 <__aeabi_dmul>
 80041c8:	2200      	movs	r2, #0
 80041ca:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 80041ce:	f7fc f983 	bl	80004d8 <__aeabi_dmul>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	4630      	mov	r0, r6
 80041d8:	4639      	mov	r1, r7
 80041da:	f7fb ffc5 	bl	8000168 <__aeabi_dsub>
 80041de:	4606      	mov	r6, r0
 80041e0:	460f      	mov	r7, r1
 80041e2:	e7d7      	b.n	8004194 <ms5611_timer_update+0x17c>
 80041e4:	f3af 8000 	nop.w
 80041e8:	47ae147b 	.word	0x47ae147b
 80041ec:	3f847ae1 	.word	0x3f847ae1
 80041f0:	200003be 	.word	0x200003be
 80041f4:	200007d4 	.word	0x200007d4
 80041f8:	20000d14 	.word	0x20000d14
 80041fc:	2000003c 	.word	0x2000003c
 8004200:	200005f8 	.word	0x200005f8
 8004204:	20000d18 	.word	0x20000d18
 8004208:	20000d24 	.word	0x20000d24
 800420c:	409f4000 	.word	0x409f4000

08004210 <systickInit>:

static volatile uint32_t ticks = 0;

void systickInit(){

	   if (SysTick_Config(SystemCoreClock / SYSTICK_FREQ)){
 8004210:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <systickInit+0x30>)
 8004212:	4a0c      	ldr	r2, [pc, #48]	; (8004244 <systickInit+0x34>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	fba2 2303 	umull	r2, r3, r2, r3
 800421a:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800421c:	3b01      	subs	r3, #1
 800421e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004222:	d300      	bcc.n	8004226 <systickInit+0x16>
 8004224:	e7fe      	b.n	8004224 <systickInit+0x14>
void systickInit(){
 8004226:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004228:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800422a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800422c:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800422e:	4a06      	ldr	r2, [pc, #24]	; (8004248 <systickInit+0x38>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004230:	4c06      	ldr	r4, [pc, #24]	; (800424c <systickInit+0x3c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004232:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004234:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
		   while (1){ /* Error in initializing Systick */ }
	   }
}
 8004238:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800423a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800423c:	6011      	str	r1, [r2, #0]
 800423e:	4770      	bx	lr
 8004240:	20000038 	.word	0x20000038
 8004244:	10624dd3 	.word	0x10624dd3
 8004248:	e000e010 	.word	0xe000e010
 800424c:	e000ed00 	.word	0xe000ed00

08004250 <millis>:
/**
 * return milliseconds
 * @return time since systickInit in milliseconds
 */
uint32_t millis(){
	return ticks;
 8004250:	4b01      	ldr	r3, [pc, #4]	; (8004258 <millis+0x8>)
 8004252:	6818      	ldr	r0, [r3, #0]
}
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	200003c0 	.word	0x200003c0

0800425c <delay>:
	return ticks;
 800425c:	4a03      	ldr	r2, [pc, #12]	; (800426c <delay+0x10>)
 800425e:	6811      	ldr	r1, [r2, #0]
 8004260:	6813      	ldr	r3, [r2, #0]
 * delay milliseconds
 * @param ms milliseconds to delay
 */
void delay(uint32_t ms){
	uint32_t start = millis();
	while(millis() - start < ms){
 8004262:	1a5b      	subs	r3, r3, r1
 8004264:	4283      	cmp	r3, r0
 8004266:	d3fb      	bcc.n	8004260 <delay+0x4>
		//do nothing
	}
}
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	200003c0 	.word	0x200003c0

08004270 <systick_Inc>:
/**
 * add this function in stm32f1xx_it
 * called by the system to update systick accordingly
 */
void systick_Inc(void) {
  ticks++;
 8004270:	4a02      	ldr	r2, [pc, #8]	; (800427c <systick_Inc+0xc>)
 8004272:	6813      	ldr	r3, [r2, #0]
 8004274:	3301      	adds	r3, #1
 8004276:	6013      	str	r3, [r2, #0]
}
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	200003c0 	.word	0x200003c0

08004280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004280:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004286:	490d      	ldr	r1, [pc, #52]	; (80042bc <HAL_InitTick+0x3c>)
 8004288:	4a0d      	ldr	r2, [pc, #52]	; (80042c0 <HAL_InitTick+0x40>)
 800428a:	7809      	ldrb	r1, [r1, #0]
 800428c:	6812      	ldr	r2, [r2, #0]
 800428e:	fbb3 f3f1 	udiv	r3, r3, r1
{
 8004292:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004294:	fbb2 f0f3 	udiv	r0, r2, r3
 8004298:	f000 f8a2 	bl	80043e0 <HAL_SYSTICK_Config>
 800429c:	b908      	cbnz	r0, 80042a2 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800429e:	2d0f      	cmp	r5, #15
 80042a0:	d901      	bls.n	80042a6 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80042a2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80042a4:	bd38      	pop	{r3, r4, r5, pc}
 80042a6:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042a8:	4602      	mov	r2, r0
 80042aa:	4629      	mov	r1, r5
 80042ac:	f04f 30ff 	mov.w	r0, #4294967295
 80042b0:	f000 f852 	bl	8004358 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042b4:	4b03      	ldr	r3, [pc, #12]	; (80042c4 <HAL_InitTick+0x44>)
 80042b6:	4620      	mov	r0, r4
 80042b8:	601d      	str	r5, [r3, #0]
}
 80042ba:	bd38      	pop	{r3, r4, r5, pc}
 80042bc:	2000003d 	.word	0x2000003d
 80042c0:	20000038 	.word	0x20000038
 80042c4:	20000040 	.word	0x20000040

080042c8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042c8:	4a07      	ldr	r2, [pc, #28]	; (80042e8 <HAL_Init+0x20>)
{
 80042ca:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042cc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042ce:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042d0:	f043 0310 	orr.w	r3, r3, #16
 80042d4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042d6:	f000 f82d 	bl	8004334 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80042da:	2000      	movs	r0, #0
 80042dc:	f7ff ffd0 	bl	8004280 <HAL_InitTick>
  HAL_MspInit();
 80042e0:	f7fe f87c 	bl	80023dc <HAL_MspInit>
}
 80042e4:	2000      	movs	r0, #0
 80042e6:	bd08      	pop	{r3, pc}
 80042e8:	40022000 	.word	0x40022000

080042ec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80042ec:	4a03      	ldr	r2, [pc, #12]	; (80042fc <HAL_IncTick+0x10>)
 80042ee:	4b04      	ldr	r3, [pc, #16]	; (8004300 <HAL_IncTick+0x14>)
 80042f0:	6811      	ldr	r1, [r2, #0]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	440b      	add	r3, r1
 80042f6:	6013      	str	r3, [r2, #0]
}
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	20000d28 	.word	0x20000d28
 8004300:	2000003d 	.word	0x2000003d

08004304 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004304:	4b01      	ldr	r3, [pc, #4]	; (800430c <HAL_GetTick+0x8>)
 8004306:	6818      	ldr	r0, [r3, #0]
}
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	20000d28 	.word	0x20000d28

08004310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004310:	b538      	push	{r3, r4, r5, lr}
 8004312:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004314:	f7ff fff6 	bl	8004304 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004318:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800431a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800431c:	d002      	beq.n	8004324 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800431e:	4b04      	ldr	r3, [pc, #16]	; (8004330 <HAL_Delay+0x20>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004324:	f7ff ffee 	bl	8004304 <HAL_GetTick>
 8004328:	1b40      	subs	r0, r0, r5
 800432a:	42a0      	cmp	r0, r4
 800432c:	d3fa      	bcc.n	8004324 <HAL_Delay+0x14>
  {
  }
}
 800432e:	bd38      	pop	{r3, r4, r5, pc}
 8004330:	2000003d 	.word	0x2000003d

08004334 <HAL_NVIC_SetPriorityGrouping>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004334:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004338:	4a06      	ldr	r2, [pc, #24]	; (8004354 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800433a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800433c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800433e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004342:	400b      	ands	r3, r1
 8004344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800434c:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800434e:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	e000ed00 	.word	0xe000ed00

08004358 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004358:	4b18      	ldr	r3, [pc, #96]	; (80043bc <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800435a:	b430      	push	{r4, r5}
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004362:	f1c3 0507 	rsb	r5, r3, #7
 8004366:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004368:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800436c:	bf28      	it	cs
 800436e:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004370:	2c06      	cmp	r4, #6
 8004372:	d919      	bls.n	80043a8 <HAL_NVIC_SetPriority+0x50>
 8004374:	f04f 34ff 	mov.w	r4, #4294967295
 8004378:	3b03      	subs	r3, #3
 800437a:	409c      	lsls	r4, r3
 800437c:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004380:	f04f 32ff 	mov.w	r2, #4294967295
 8004384:	40aa      	lsls	r2, r5
 8004386:	ea21 0102 	bic.w	r1, r1, r2
 800438a:	fa01 f203 	lsl.w	r2, r1, r3
 800438e:	4322      	orrs	r2, r4
 8004390:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8004392:	2800      	cmp	r0, #0
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	db0a      	blt.n	80043ae <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004398:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800439c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80043a0:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80043a4:	bc30      	pop	{r4, r5}
 80043a6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043a8:	2400      	movs	r4, #0
 80043aa:	4623      	mov	r3, r4
 80043ac:	e7e8      	b.n	8004380 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ae:	4b04      	ldr	r3, [pc, #16]	; (80043c0 <HAL_NVIC_SetPriority+0x68>)
 80043b0:	f000 000f 	and.w	r0, r0, #15
 80043b4:	4403      	add	r3, r0
 80043b6:	761a      	strb	r2, [r3, #24]
 80043b8:	bc30      	pop	{r4, r5}
 80043ba:	4770      	bx	lr
 80043bc:	e000ed00 	.word	0xe000ed00
 80043c0:	e000ecfc 	.word	0xe000ecfc

080043c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80043c4:	2800      	cmp	r0, #0
 80043c6:	db07      	blt.n	80043d8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043c8:	2301      	movs	r3, #1
 80043ca:	f000 011f 	and.w	r1, r0, #31
 80043ce:	4a03      	ldr	r2, [pc, #12]	; (80043dc <HAL_NVIC_EnableIRQ+0x18>)
 80043d0:	408b      	lsls	r3, r1
 80043d2:	0940      	lsrs	r0, r0, #5
 80043d4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	e000e100 	.word	0xe000e100

080043e0 <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043e0:	3801      	subs	r0, #1
 80043e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80043e6:	d20d      	bcs.n	8004404 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043e8:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ea:	25f0      	movs	r5, #240	; 0xf0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043ec:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043ee:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043f0:	4b05      	ldr	r3, [pc, #20]	; (8004408 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043f2:	4c06      	ldr	r4, [pc, #24]	; (800440c <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043f4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043f6:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043fa:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 80043fc:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043fe:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004400:	6019      	str	r1, [r3, #0]
 8004402:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004404:	2001      	movs	r0, #1
 8004406:	4770      	bx	lr
 8004408:	e000e010 	.word	0xe000e010
 800440c:	e000ed00 	.word	0xe000ed00

08004410 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004410:	b350      	cbz	r0, 8004468 <HAL_DMA_Init+0x58>
 8004412:	4602      	mov	r2, r0
{
 8004414:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004416:	e9d0 3601 	ldrd	r3, r6, [r0, #4]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800441a:	2400      	movs	r4, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800441c:	2501      	movs	r5, #1
  tmp |=  hdma->Init.Direction        |
 800441e:	4333      	orrs	r3, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004420:	68d6      	ldr	r6, [r2, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004422:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004424:	4333      	orrs	r3, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004426:	4911      	ldr	r1, [pc, #68]	; (800446c <HAL_DMA_Init+0x5c>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004428:	6916      	ldr	r6, [r2, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800442a:	4f11      	ldr	r7, [pc, #68]	; (8004470 <HAL_DMA_Init+0x60>)
 800442c:	4401      	add	r1, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800442e:	4333      	orrs	r3, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004430:	6956      	ldr	r6, [r2, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004432:	fba7 7101 	umull	r7, r1, r7, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004436:	4333      	orrs	r3, r6
 8004438:	6996      	ldr	r6, [r2, #24]
          hdma->Init.Mode                | hdma->Init.Priority;
 800443a:	69d7      	ldr	r7, [r2, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800443c:	4333      	orrs	r3, r6
  tmp = hdma->Instance->CCR;
 800443e:	6806      	ldr	r6, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004440:	0909      	lsrs	r1, r1, #4
 8004442:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004444:	f426 567f 	bic.w	r6, r6, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 8004448:	433b      	orrs	r3, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800444a:	f026 0630 	bic.w	r6, r6, #48	; 0x30
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800444e:	6411      	str	r1, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004450:	4908      	ldr	r1, [pc, #32]	; (8004474 <HAL_DMA_Init+0x64>)
  tmp |=  hdma->Init.Direction        |
 8004452:	4333      	orrs	r3, r6
  hdma->DmaBaseAddress = DMA1;
 8004454:	63d1      	str	r1, [r2, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8004456:	6003      	str	r3, [r0, #0]
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;

  return HAL_OK;
 8004458:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800445a:	6394      	str	r4, [r2, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 800445c:	f882 4020 	strb.w	r4, [r2, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8004460:	f882 5021 	strb.w	r5, [r2, #33]	; 0x21
}
 8004464:	bcf0      	pop	{r4, r5, r6, r7}
 8004466:	4770      	bx	lr
    return HAL_ERROR;
 8004468:	2001      	movs	r0, #1
}
 800446a:	4770      	bx	lr
 800446c:	bffdfff8 	.word	0xbffdfff8
 8004470:	cccccccd 	.word	0xcccccccd
 8004474:	40020000 	.word	0x40020000

08004478 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004478:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800447a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800447e:	2c01      	cmp	r4, #1
 8004480:	d032      	beq.n	80044e8 <HAL_DMA_Start_IT+0x70>
 8004482:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004484:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8004488:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800448c:	42a5      	cmp	r5, r4
 800448e:	d125      	bne.n	80044dc <HAL_DMA_Start_IT+0x64>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004490:	2600      	movs	r6, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8004492:	f04f 0e02 	mov.w	lr, #2
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004496:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004498:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800449a:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800449c:	6c07      	ldr	r7, [r0, #64]	; 0x40
 800449e:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 80044a2:	40bd      	lsls	r5, r7
    __HAL_DMA_DISABLE(hdma);
 80044a4:	f026 0601 	bic.w	r6, r6, #1

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044a8:	6847      	ldr	r7, [r0, #4]
    hdma->State = HAL_DMA_STATE_BUSY;
 80044aa:	f880 e021 	strb.w	lr, [r0, #33]	; 0x21
    __HAL_DMA_DISABLE(hdma);
 80044ae:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80044b0:	f8cc 5004 	str.w	r5, [ip, #4]
  hdma->Instance->CNDTR = DataLength;
 80044b4:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 80044b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044b8:	2f10      	cmp	r7, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80044ba:	bf0b      	itete	eq
 80044bc:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80044be:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80044c0:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80044c2:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80044c4:	b19b      	cbz	r3, 80044ee <HAL_DMA_Start_IT+0x76>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	f043 030e 	orr.w	r3, r3, #14
 80044cc:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ce:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 80044d0:	6822      	ldr	r2, [r4, #0]
}
 80044d2:	4618      	mov	r0, r3
    __HAL_DMA_ENABLE(hdma);
 80044d4:	f042 0201 	orr.w	r2, r2, #1
 80044d8:	6022      	str	r2, [r4, #0]
}
 80044da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hdma); 
 80044dc:	2200      	movs	r2, #0
    status = HAL_BUSY;
 80044de:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma); 
 80044e0:	f880 2020 	strb.w	r2, [r0, #32]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 80044e8:	2302      	movs	r3, #2
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	f023 0304 	bic.w	r3, r3, #4
 80044f4:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	f043 030a 	orr.w	r3, r3, #10
 80044fc:	6023      	str	r3, [r4, #0]
 80044fe:	e7e6      	b.n	80044ce <HAL_DMA_Start_IT+0x56>

08004500 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004500:	2204      	movs	r2, #4
{
 8004502:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004504:	e9d0 610f 	ldrd	r6, r1, [r0, #60]	; 0x3c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004508:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800450a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800450c:	408a      	lsls	r2, r1
 800450e:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 8004510:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004512:	d01f      	beq.n	8004554 <HAL_DMA_IRQHandler+0x54>
 8004514:	076a      	lsls	r2, r5, #29
 8004516:	d51d      	bpl.n	8004554 <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	0691      	lsls	r1, r2, #26
 800451c:	d403      	bmi.n	8004526 <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	f022 0204 	bic.w	r2, r2, #4
 8004524:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004526:	4a3f      	ldr	r2, [pc, #252]	; (8004624 <HAL_DMA_IRQHandler+0x124>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d05c      	beq.n	80045e6 <HAL_DMA_IRQHandler+0xe6>
 800452c:	3214      	adds	r2, #20
 800452e:	4293      	cmp	r3, r2
 8004530:	d061      	beq.n	80045f6 <HAL_DMA_IRQHandler+0xf6>
 8004532:	3214      	adds	r2, #20
 8004534:	4293      	cmp	r3, r2
 8004536:	d068      	beq.n	800460a <HAL_DMA_IRQHandler+0x10a>
 8004538:	3214      	adds	r2, #20
 800453a:	4293      	cmp	r3, r2
 800453c:	d06b      	beq.n	8004616 <HAL_DMA_IRQHandler+0x116>
 800453e:	3214      	adds	r2, #20
 8004540:	4293      	cmp	r3, r2
 8004542:	d05d      	beq.n	8004600 <HAL_DMA_IRQHandler+0x100>
 8004544:	3214      	adds	r2, #20
 8004546:	4293      	cmp	r3, r2
 8004548:	bf0c      	ite	eq
 800454a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800454e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8004552:	e049      	b.n	80045e8 <HAL_DMA_IRQHandler+0xe8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004554:	2202      	movs	r2, #2
 8004556:	408a      	lsls	r2, r1
 8004558:	4222      	tst	r2, r4
 800455a:	d022      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xa2>
 800455c:	07aa      	lsls	r2, r5, #30
 800455e:	d520      	bpl.n	80045a2 <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	0691      	lsls	r1, r2, #26
 8004564:	d406      	bmi.n	8004574 <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 8004566:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	f022 020a 	bic.w	r2, r2, #10
 800456e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004570:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004574:	4a2b      	ldr	r2, [pc, #172]	; (8004624 <HAL_DMA_IRQHandler+0x124>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d02b      	beq.n	80045d2 <HAL_DMA_IRQHandler+0xd2>
 800457a:	3214      	adds	r2, #20
 800457c:	4293      	cmp	r3, r2
 800457e:	d042      	beq.n	8004606 <HAL_DMA_IRQHandler+0x106>
 8004580:	3214      	adds	r2, #20
 8004582:	4293      	cmp	r3, r2
 8004584:	d044      	beq.n	8004610 <HAL_DMA_IRQHandler+0x110>
 8004586:	3214      	adds	r2, #20
 8004588:	4293      	cmp	r3, r2
 800458a:	d036      	beq.n	80045fa <HAL_DMA_IRQHandler+0xfa>
 800458c:	3214      	adds	r2, #20
 800458e:	4293      	cmp	r3, r2
 8004590:	d044      	beq.n	800461c <HAL_DMA_IRQHandler+0x11c>
 8004592:	3214      	adds	r2, #20
 8004594:	4293      	cmp	r3, r2
 8004596:	bf0c      	ite	eq
 8004598:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800459c:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80045a0:	e018      	b.n	80045d4 <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80045a2:	2208      	movs	r2, #8
 80045a4:	408a      	lsls	r2, r1
 80045a6:	4222      	tst	r2, r4
 80045a8:	d01b      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xe2>
 80045aa:	072a      	lsls	r2, r5, #28
 80045ac:	d519      	bpl.n	80045e2 <HAL_DMA_IRQHandler+0xe2>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80045ae:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 80045b0:	2500      	movs	r5, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045b2:	681c      	ldr	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80045b4:	fa02 f101 	lsl.w	r1, r2, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045b8:	f024 040e 	bic.w	r4, r4, #14
 80045bc:	601c      	str	r4, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 80045be:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80045c0:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045c2:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80045c4:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80045c8:	f880 5020 	strb.w	r5, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80045cc:	b14b      	cbz	r3, 80045e2 <HAL_DMA_IRQHandler+0xe2>
}
 80045ce:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80045d0:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80045d2:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 80045d4:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80045d6:	4c14      	ldr	r4, [pc, #80]	; (8004628 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferCpltCallback != NULL)
 80045d8:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80045da:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 80045dc:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80045e0:	b93a      	cbnz	r2, 80045f2 <HAL_DMA_IRQHandler+0xf2>
}
 80045e2:	bc70      	pop	{r4, r5, r6}
 80045e4:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80045e6:	2304      	movs	r3, #4
 80045e8:	490f      	ldr	r1, [pc, #60]	; (8004628 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferHalfCpltCallback != NULL)
 80045ea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80045ec:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80045ee:	2a00      	cmp	r2, #0
 80045f0:	d0f7      	beq.n	80045e2 <HAL_DMA_IRQHandler+0xe2>
}
 80045f2:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 80045f4:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80045f6:	2340      	movs	r3, #64	; 0x40
 80045f8:	e7f6      	b.n	80045e8 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80045fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045fe:	e7e9      	b.n	80045d4 <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004600:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004604:	e7f0      	b.n	80045e8 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004606:	2320      	movs	r3, #32
 8004608:	e7e4      	b.n	80045d4 <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800460a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800460e:	e7eb      	b.n	80045e8 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004614:	e7de      	b.n	80045d4 <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004616:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800461a:	e7e5      	b.n	80045e8 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800461c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004620:	e7d8      	b.n	80045d4 <HAL_DMA_IRQHandler+0xd4>
 8004622:	bf00      	nop
 8004624:	40020008 	.word	0x40020008
 8004628:	40020000 	.word	0x40020000

0800462c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800462c:	680a      	ldr	r2, [r1, #0]
 800462e:	2a00      	cmp	r2, #0
 8004630:	f000 80db 	beq.w	80047ea <HAL_GPIO_Init+0x1be>
{
 8004634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00u;
 8004638:	f04f 0a00 	mov.w	sl, #0
{
 800463c:	b085      	sub	sp, #20
  uint32_t position = 0x00u;
 800463e:	4655      	mov	r5, sl
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004640:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 8004814 <HAL_GPIO_Init+0x1e8>
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004644:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 8004818 <HAL_GPIO_Init+0x1ec>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004648:	4f6d      	ldr	r7, [pc, #436]	; (8004800 <HAL_GPIO_Init+0x1d4>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800464a:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 800481c <HAL_GPIO_Init+0x1f0>
 800464e:	e003      	b.n	8004658 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8004650:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004652:	fa32 f305 	lsrs.w	r3, r2, r5
 8004656:	d078      	beq.n	800474a <HAL_GPIO_Init+0x11e>
    ioposition = (0x01uL << position);
 8004658:	2301      	movs	r3, #1
 800465a:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800465c:	ea02 0403 	and.w	r4, r2, r3
    if (iocurrent == ioposition)
 8004660:	42a3      	cmp	r3, r4
 8004662:	d1f5      	bne.n	8004650 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8004664:	684a      	ldr	r2, [r1, #4]
 8004666:	2a12      	cmp	r2, #18
 8004668:	f000 809e 	beq.w	80047a8 <HAL_GPIO_Init+0x17c>
 800466c:	f200 8087 	bhi.w	800477e <HAL_GPIO_Init+0x152>
 8004670:	2a02      	cmp	r2, #2
 8004672:	f000 809d 	beq.w	80047b0 <HAL_GPIO_Init+0x184>
 8004676:	d97c      	bls.n	8004772 <HAL_GPIO_Init+0x146>
 8004678:	2a03      	cmp	r2, #3
 800467a:	d069      	beq.n	8004750 <HAL_GPIO_Init+0x124>
 800467c:	2a11      	cmp	r2, #17
 800467e:	d102      	bne.n	8004686 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004680:	68cb      	ldr	r3, [r1, #12]
 8004682:	f103 0a04 	add.w	sl, r3, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004686:	2cff      	cmp	r4, #255	; 0xff
 8004688:	d866      	bhi.n	8004758 <HAL_GPIO_Init+0x12c>
 800468a:	4681      	mov	r9, r0
 800468c:	6803      	ldr	r3, [r0, #0]
 800468e:	00aa      	lsls	r2, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004690:	260f      	movs	r6, #15
 8004692:	fa06 fb02 	lsl.w	fp, r6, r2
 8004696:	ea23 030b 	bic.w	r3, r3, fp
 800469a:	fa0a f202 	lsl.w	r2, sl, r2
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c9 3000 	str.w	r3, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046a4:	684a      	ldr	r2, [r1, #4]
 80046a6:	00d3      	lsls	r3, r2, #3
 80046a8:	d561      	bpl.n	800476e <HAL_GPIO_Init+0x142>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80046aa:	f8dc 9018 	ldr.w	r9, [ip, #24]
 80046ae:	f025 0303 	bic.w	r3, r5, #3
 80046b2:	f049 0901 	orr.w	r9, r9, #1
 80046b6:	f8cc 9018 	str.w	r9, [ip, #24]
 80046ba:	f8dc 9018 	ldr.w	r9, [ip, #24]
 80046be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046c2:	f009 0901 	and.w	r9, r9, #1
 80046c6:	f8cd 900c 	str.w	r9, [sp, #12]
 80046ca:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80046ce:	f005 0903 	and.w	r9, r5, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80046d2:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80046d6:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80046da:	f8d3 b008 	ldr.w	fp, [r3, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80046de:	fa06 f609 	lsl.w	r6, r6, r9
 80046e2:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80046e6:	4570      	cmp	r0, lr
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80046e8:	9601      	str	r6, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80046ea:	d011      	beq.n	8004710 <HAL_GPIO_Init+0xe4>
 80046ec:	4540      	cmp	r0, r8
 80046ee:	d063      	beq.n	80047b8 <HAL_GPIO_Init+0x18c>
 80046f0:	4e44      	ldr	r6, [pc, #272]	; (8004804 <HAL_GPIO_Init+0x1d8>)
 80046f2:	42b0      	cmp	r0, r6
 80046f4:	d07a      	beq.n	80047ec <HAL_GPIO_Init+0x1c0>
 80046f6:	4e44      	ldr	r6, [pc, #272]	; (8004808 <HAL_GPIO_Init+0x1dc>)
 80046f8:	42b0      	cmp	r0, r6
 80046fa:	bf0c      	ite	eq
 80046fc:	f04f 0b03 	moveq.w	fp, #3
 8004700:	f04f 0b04 	movne.w	fp, #4
 8004704:	9e01      	ldr	r6, [sp, #4]
 8004706:	fa0b f909 	lsl.w	r9, fp, r9
 800470a:	ea46 0609 	orr.w	r6, r6, r9
 800470e:	9601      	str	r6, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 8004710:	609e      	str	r6, [r3, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8004712:	683b      	ldr	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004714:	03d6      	lsls	r6, r2, #15
          SET_BIT(EXTI->IMR, iocurrent);
 8004716:	bf4c      	ite	mi
 8004718:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800471a:	43a3      	bicpl	r3, r4
 800471c:	603b      	str	r3, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800471e:	687b      	ldr	r3, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004720:	0396      	lsls	r6, r2, #14
          SET_BIT(EXTI->EMR, iocurrent);
 8004722:	bf4c      	ite	mi
 8004724:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004726:	43a3      	bicpl	r3, r4
 8004728:	607b      	str	r3, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800472a:	68bb      	ldr	r3, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800472c:	02d6      	lsls	r6, r2, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 800472e:	bf4c      	ite	mi
 8004730:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004732:	43a3      	bicpl	r3, r4
 8004734:	60bb      	str	r3, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004736:	0292      	lsls	r2, r2, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 8004738:	68fb      	ldr	r3, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800473a:	d515      	bpl.n	8004768 <HAL_GPIO_Init+0x13c>
          SET_BIT(EXTI->FTSR, iocurrent);
 800473c:	431c      	orrs	r4, r3
 800473e:	60fc      	str	r4, [r7, #12]
 8004740:	680a      	ldr	r2, [r1, #0]
	position++;
 8004742:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004744:	fa32 f305 	lsrs.w	r3, r2, r5
 8004748:	d186      	bne.n	8004658 <HAL_GPIO_Init+0x2c>
  }
}
 800474a:	b005      	add	sp, #20
 800474c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004750:	2cff      	cmp	r4, #255	; 0xff
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004752:	f04f 0a00 	mov.w	sl, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004756:	d998      	bls.n	800468a <HAL_GPIO_Init+0x5e>
 8004758:	f105 4280 	add.w	r2, r5, #1073741824	; 0x40000000
 800475c:	3a08      	subs	r2, #8
 800475e:	6843      	ldr	r3, [r0, #4]
 8004760:	0092      	lsls	r2, r2, #2
 8004762:	f100 0904 	add.w	r9, r0, #4
 8004766:	e793      	b.n	8004690 <HAL_GPIO_Init+0x64>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004768:	ea23 0404 	bic.w	r4, r3, r4
 800476c:	60fc      	str	r4, [r7, #12]
 800476e:	680a      	ldr	r2, [r1, #0]
 8004770:	e76e      	b.n	8004650 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8004772:	b1a2      	cbz	r2, 800479e <HAL_GPIO_Init+0x172>
 8004774:	2a01      	cmp	r2, #1
 8004776:	d186      	bne.n	8004686 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004778:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 800477c:	e783      	b.n	8004686 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 800477e:	4e23      	ldr	r6, [pc, #140]	; (800480c <HAL_GPIO_Init+0x1e0>)
 8004780:	42b2      	cmp	r2, r6
 8004782:	d00c      	beq.n	800479e <HAL_GPIO_Init+0x172>
 8004784:	d920      	bls.n	80047c8 <HAL_GPIO_Init+0x19c>
 8004786:	4e22      	ldr	r6, [pc, #136]	; (8004810 <HAL_GPIO_Init+0x1e4>)
 8004788:	42b2      	cmp	r2, r6
 800478a:	d008      	beq.n	800479e <HAL_GPIO_Init+0x172>
 800478c:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8004790:	42b2      	cmp	r2, r6
 8004792:	d004      	beq.n	800479e <HAL_GPIO_Init+0x172>
 8004794:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8004798:	42b2      	cmp	r2, r6
 800479a:	f47f af74 	bne.w	8004686 <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800479e:	688a      	ldr	r2, [r1, #8]
 80047a0:	b9e2      	cbnz	r2, 80047dc <HAL_GPIO_Init+0x1b0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80047a2:	f04f 0a04 	mov.w	sl, #4
 80047a6:	e76e      	b.n	8004686 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80047a8:	68cb      	ldr	r3, [r1, #12]
 80047aa:	f103 0a0c 	add.w	sl, r3, #12
          break;
 80047ae:	e76a      	b.n	8004686 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80047b0:	68cb      	ldr	r3, [r1, #12]
 80047b2:	f103 0a08 	add.w	sl, r3, #8
          break;
 80047b6:	e766      	b.n	8004686 <HAL_GPIO_Init+0x5a>
 80047b8:	f04f 0b01 	mov.w	fp, #1
 80047bc:	fa0b f909 	lsl.w	r9, fp, r9
 80047c0:	ea46 0609 	orr.w	r6, r6, r9
 80047c4:	9601      	str	r6, [sp, #4]
 80047c6:	e7a3      	b.n	8004710 <HAL_GPIO_Init+0xe4>
      switch (GPIO_Init->Mode)
 80047c8:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 80047cc:	42b2      	cmp	r2, r6
 80047ce:	d0e6      	beq.n	800479e <HAL_GPIO_Init+0x172>
 80047d0:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80047d4:	42b2      	cmp	r2, r6
 80047d6:	f47f af56 	bne.w	8004686 <HAL_GPIO_Init+0x5a>
 80047da:	e7e0      	b.n	800479e <HAL_GPIO_Init+0x172>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80047dc:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80047de:	bf0c      	ite	eq
 80047e0:	6103      	streq	r3, [r0, #16]
            GPIOx->BRR = ioposition;
 80047e2:	6143      	strne	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047e4:	f04f 0a08 	mov.w	sl, #8
 80047e8:	e74d      	b.n	8004686 <HAL_GPIO_Init+0x5a>
 80047ea:	4770      	bx	lr
 80047ec:	f04f 0b02 	mov.w	fp, #2
 80047f0:	9e01      	ldr	r6, [sp, #4]
 80047f2:	fa0b f909 	lsl.w	r9, fp, r9
 80047f6:	ea46 0609 	orr.w	r6, r6, r9
 80047fa:	9601      	str	r6, [sp, #4]
 80047fc:	e788      	b.n	8004710 <HAL_GPIO_Init+0xe4>
 80047fe:	bf00      	nop
 8004800:	40010400 	.word	0x40010400
 8004804:	40011000 	.word	0x40011000
 8004808:	40011400 	.word	0x40011400
 800480c:	10210000 	.word	0x10210000
 8004810:	10310000 	.word	0x10310000
 8004814:	40021000 	.word	0x40021000
 8004818:	40010800 	.word	0x40010800
 800481c:	40010c00 	.word	0x40010c00

08004820 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004820:	b902      	cbnz	r2, 8004824 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004822:	0409      	lsls	r1, r1, #16
 8004824:	6101      	str	r1, [r0, #16]
  }
}
 8004826:	4770      	bx	lr

08004828 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004828:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 800482c:	4689      	mov	r9, r1
 800482e:	4616      	mov	r6, r2
 8004830:	461f      	mov	r7, r3
 8004832:	4605      	mov	r5, r0
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004834:	6800      	ldr	r0, [r0, #0]
{
 8004836:	b082      	sub	sp, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004838:	6804      	ldr	r4, [r0, #0]
 800483a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800483e:	6004      	str	r4, [r0, #0]
{
 8004840:	9c08      	ldr	r4, [sp, #32]
 8004842:	1c62      	adds	r2, r4, #1
 8004844:	d140      	bne.n	80048c8 <I2C_RequestMemoryWrite+0xa0>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004846:	6943      	ldr	r3, [r0, #20]
 8004848:	07db      	lsls	r3, r3, #31
 800484a:	d5fc      	bpl.n	8004846 <I2C_RequestMemoryWrite+0x1e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800484c:	f009 01fe 	and.w	r1, r9, #254	; 0xfe
 8004850:	6101      	str	r1, [r0, #16]
 8004852:	1c63      	adds	r3, r4, #1
 8004854:	d012      	beq.n	800487c <I2C_RequestMemoryWrite+0x54>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004856:	6943      	ldr	r3, [r0, #20]
 8004858:	079b      	lsls	r3, r3, #30
 800485a:	d412      	bmi.n	8004882 <I2C_RequestMemoryWrite+0x5a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800485c:	6943      	ldr	r3, [r0, #20]
 800485e:	055a      	lsls	r2, r3, #21
 8004860:	d43e      	bmi.n	80048e0 <I2C_RequestMemoryWrite+0xb8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004862:	f7ff fd4f 	bl	8004304 <HAL_GetTick>
 8004866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004868:	1ac0      	subs	r0, r0, r3
 800486a:	4284      	cmp	r4, r0
 800486c:	d350      	bcc.n	8004910 <I2C_RequestMemoryWrite+0xe8>
 800486e:	2c00      	cmp	r4, #0
 8004870:	d04e      	beq.n	8004910 <I2C_RequestMemoryWrite+0xe8>
 8004872:	6828      	ldr	r0, [r5, #0]
 8004874:	e7ed      	b.n	8004852 <I2C_RequestMemoryWrite+0x2a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004876:	6943      	ldr	r3, [r0, #20]
 8004878:	055a      	lsls	r2, r3, #21
 800487a:	d431      	bmi.n	80048e0 <I2C_RequestMemoryWrite+0xb8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800487c:	6943      	ldr	r3, [r0, #20]
 800487e:	0799      	lsls	r1, r3, #30
 8004880:	d5f9      	bpl.n	8004876 <I2C_RequestMemoryWrite+0x4e>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004882:	2300      	movs	r3, #0
 8004884:	9301      	str	r3, [sp, #4]
 8004886:	6943      	ldr	r3, [r0, #20]
 8004888:	9301      	str	r3, [sp, #4]
 800488a:	6983      	ldr	r3, [r0, #24]
 800488c:	9301      	str	r3, [sp, #4]
 800488e:	9b01      	ldr	r3, [sp, #4]
 8004890:	1c62      	adds	r2, r4, #1
 8004892:	d003      	beq.n	800489c <I2C_RequestMemoryWrite+0x74>
 8004894:	e04b      	b.n	800492e <I2C_RequestMemoryWrite+0x106>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004896:	6943      	ldr	r3, [r0, #20]
 8004898:	0559      	lsls	r1, r3, #21
 800489a:	d458      	bmi.n	800494e <I2C_RequestMemoryWrite+0x126>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800489c:	6943      	ldr	r3, [r0, #20]
 800489e:	061b      	lsls	r3, r3, #24
 80048a0:	d5f9      	bpl.n	8004896 <I2C_RequestMemoryWrite+0x6e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048a2:	2f01      	cmp	r7, #1
 80048a4:	d00a      	beq.n	80048bc <I2C_RequestMemoryWrite+0x94>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048a6:	0a33      	lsrs	r3, r6, #8
 80048a8:	6103      	str	r3, [r0, #16]
 80048aa:	1c67      	adds	r7, r4, #1
 80048ac:	d003      	beq.n	80048b6 <I2C_RequestMemoryWrite+0x8e>
 80048ae:	e084      	b.n	80049ba <I2C_RequestMemoryWrite+0x192>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048b0:	6943      	ldr	r3, [r0, #20]
 80048b2:	055a      	lsls	r2, r3, #21
 80048b4:	d467      	bmi.n	8004986 <I2C_RequestMemoryWrite+0x15e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048b6:	6943      	ldr	r3, [r0, #20]
 80048b8:	0619      	lsls	r1, r3, #24
 80048ba:	d5f9      	bpl.n	80048b0 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048bc:	b2f6      	uxtb	r6, r6
 80048be:	6106      	str	r6, [r0, #16]
  return HAL_OK;
 80048c0:	2000      	movs	r0, #0
}
 80048c2:	b002      	add	sp, #8
 80048c4:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048c8:	6943      	ldr	r3, [r0, #20]
 80048ca:	07d9      	lsls	r1, r3, #31
 80048cc:	d4be      	bmi.n	800484c <I2C_RequestMemoryWrite+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ce:	f7ff fd19 	bl	8004304 <HAL_GetTick>
 80048d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048d4:	1ac0      	subs	r0, r0, r3
 80048d6:	4284      	cmp	r4, r0
 80048d8:	d31a      	bcc.n	8004910 <I2C_RequestMemoryWrite+0xe8>
 80048da:	b1cc      	cbz	r4, 8004910 <I2C_RequestMemoryWrite+0xe8>
 80048dc:	6828      	ldr	r0, [r5, #0]
 80048de:	e7b0      	b.n	8004842 <I2C_RequestMemoryWrite+0x1a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048e0:	f46f 6480 	mvn.w	r4, #1024	; 0x400
      hi2c->PreviousState       = I2C_STATE_NONE;
 80048e4:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80048e6:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e8:	6803      	ldr	r3, [r0, #0]
 80048ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048ee:	6003      	str	r3, [r0, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048f0:	6144      	str	r4, [r0, #20]
    return HAL_ERROR;
 80048f2:	2001      	movs	r0, #1
      hi2c->PreviousState       = I2C_STATE_NONE;
 80048f4:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048f6:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048fa:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048fe:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004900:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004904:	f043 0304 	orr.w	r3, r3, #4
 8004908:	642b      	str	r3, [r5, #64]	; 0x40
}
 800490a:	b002      	add	sp, #8
 800490c:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004910:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004912:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004914:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004916:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800491a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800491e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004920:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004924:	f043 0320 	orr.w	r3, r3, #32
 8004928:	642b      	str	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 800492a:	2001      	movs	r0, #1
 800492c:	e7c9      	b.n	80048c2 <I2C_RequestMemoryWrite+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800492e:	6943      	ldr	r3, [r0, #20]
 8004930:	061a      	lsls	r2, r3, #24
 8004932:	d4b6      	bmi.n	80048a2 <I2C_RequestMemoryWrite+0x7a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004934:	6943      	ldr	r3, [r0, #20]
 8004936:	0559      	lsls	r1, r3, #21
 8004938:	d409      	bmi.n	800494e <I2C_RequestMemoryWrite+0x126>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493a:	f7ff fce3 	bl	8004304 <HAL_GetTick>
 800493e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004940:	1ac0      	subs	r0, r0, r3
 8004942:	4284      	cmp	r4, r0
 8004944:	d349      	bcc.n	80049da <I2C_RequestMemoryWrite+0x1b2>
 8004946:	2c00      	cmp	r4, #0
 8004948:	d047      	beq.n	80049da <I2C_RequestMemoryWrite+0x1b2>
 800494a:	6828      	ldr	r0, [r5, #0]
 800494c:	e7a0      	b.n	8004890 <I2C_RequestMemoryWrite+0x68>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 800494e:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8004950:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004952:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8004956:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004958:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800495a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800495e:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004962:	6c2b      	ldr	r3, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004964:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004968:	f043 0304 	orr.w	r3, r3, #4
 800496c:	642b      	str	r3, [r5, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800496e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004970:	2b04      	cmp	r3, #4
 8004972:	d001      	beq.n	8004978 <I2C_RequestMemoryWrite+0x150>
    return HAL_ERROR;
 8004974:	2001      	movs	r0, #1
 8004976:	e7a4      	b.n	80048c2 <I2C_RequestMemoryWrite+0x9a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004978:	682a      	ldr	r2, [r5, #0]
    return HAL_ERROR;
 800497a:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800497c:	6813      	ldr	r3, [r2, #0]
 800497e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004982:	6013      	str	r3, [r2, #0]
 8004984:	e79d      	b.n	80048c2 <I2C_RequestMemoryWrite+0x9a>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004986:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8004988:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800498a:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 800498e:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004990:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004992:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004996:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800499a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800499c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049a0:	f043 0304 	orr.w	r3, r3, #4
 80049a4:	642b      	str	r3, [r5, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049a6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d1e3      	bne.n	8004974 <I2C_RequestMemoryWrite+0x14c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ac:	682a      	ldr	r2, [r5, #0]
      return HAL_ERROR;
 80049ae:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b0:	6813      	ldr	r3, [r2, #0]
 80049b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	e783      	b.n	80048c2 <I2C_RequestMemoryWrite+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049ba:	6943      	ldr	r3, [r0, #20]
 80049bc:	061b      	lsls	r3, r3, #24
 80049be:	f53f af7d 	bmi.w	80048bc <I2C_RequestMemoryWrite+0x94>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049c2:	6943      	ldr	r3, [r0, #20]
 80049c4:	055b      	lsls	r3, r3, #21
 80049c6:	d4de      	bmi.n	8004986 <I2C_RequestMemoryWrite+0x15e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c8:	f7ff fc9c 	bl	8004304 <HAL_GetTick>
 80049cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ce:	1ac0      	subs	r0, r0, r3
 80049d0:	4284      	cmp	r4, r0
 80049d2:	d310      	bcc.n	80049f6 <I2C_RequestMemoryWrite+0x1ce>
 80049d4:	b17c      	cbz	r4, 80049f6 <I2C_RequestMemoryWrite+0x1ce>
 80049d6:	6828      	ldr	r0, [r5, #0]
 80049d8:	e767      	b.n	80048aa <I2C_RequestMemoryWrite+0x82>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049da:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80049dc:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049de:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049e0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049e4:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049e8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80049ea:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049ee:	f043 0320 	orr.w	r3, r3, #32
 80049f2:	642b      	str	r3, [r5, #64]	; 0x40
 80049f4:	e7bb      	b.n	800496e <I2C_RequestMemoryWrite+0x146>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049f6:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80049f8:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049fa:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049fc:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a00:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a04:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004a06:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a0a:	f043 0320 	orr.w	r3, r3, #32
 8004a0e:	642b      	str	r3, [r5, #64]	; 0x40
 8004a10:	e7c9      	b.n	80049a6 <I2C_RequestMemoryWrite+0x17e>
 8004a12:	bf00      	nop

08004a14 <I2C_RequestMemoryRead>:
{
 8004a14:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8004a18:	461f      	mov	r7, r3
 8004a1a:	4605      	mov	r5, r0
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a1c:	6800      	ldr	r0, [r0, #0]
{
 8004a1e:	4689      	mov	r9, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a20:	6801      	ldr	r1, [r0, #0]
{
 8004a22:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a24:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8004a28:	6001      	str	r1, [r0, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a2a:	6802      	ldr	r2, [r0, #0]
{
 8004a2c:	b082      	sub	sp, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
{
 8004a32:	9c08      	ldr	r4, [sp, #32]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a34:	6002      	str	r2, [r0, #0]
 8004a36:	1c61      	adds	r1, r4, #1
 8004a38:	d157      	bne.n	8004aea <I2C_RequestMemoryRead+0xd6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a3a:	6943      	ldr	r3, [r0, #20]
 8004a3c:	07da      	lsls	r2, r3, #31
 8004a3e:	d5fc      	bpl.n	8004a3a <I2C_RequestMemoryRead+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a40:	fa5f f989 	uxtb.w	r9, r9
 8004a44:	f009 03fe 	and.w	r3, r9, #254	; 0xfe
 8004a48:	6103      	str	r3, [r0, #16]
 8004a4a:	1c62      	adds	r2, r4, #1
 8004a4c:	d012      	beq.n	8004a74 <I2C_RequestMemoryRead+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a4e:	6943      	ldr	r3, [r0, #20]
 8004a50:	079a      	lsls	r2, r3, #30
 8004a52:	d412      	bmi.n	8004a7a <I2C_RequestMemoryRead+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a54:	6943      	ldr	r3, [r0, #20]
 8004a56:	0559      	lsls	r1, r3, #21
 8004a58:	d453      	bmi.n	8004b02 <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a5a:	f7ff fc53 	bl	8004304 <HAL_GetTick>
 8004a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a60:	1ac0      	subs	r0, r0, r3
 8004a62:	4284      	cmp	r4, r0
 8004a64:	d37c      	bcc.n	8004b60 <I2C_RequestMemoryRead+0x14c>
 8004a66:	2c00      	cmp	r4, #0
 8004a68:	d07a      	beq.n	8004b60 <I2C_RequestMemoryRead+0x14c>
 8004a6a:	6828      	ldr	r0, [r5, #0]
 8004a6c:	e7ed      	b.n	8004a4a <I2C_RequestMemoryRead+0x36>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a6e:	6943      	ldr	r3, [r0, #20]
 8004a70:	0559      	lsls	r1, r3, #21
 8004a72:	d446      	bmi.n	8004b02 <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a74:	6943      	ldr	r3, [r0, #20]
 8004a76:	079b      	lsls	r3, r3, #30
 8004a78:	d5f9      	bpl.n	8004a6e <I2C_RequestMemoryRead+0x5a>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	9301      	str	r3, [sp, #4]
 8004a7e:	6943      	ldr	r3, [r0, #20]
 8004a80:	9301      	str	r3, [sp, #4]
 8004a82:	6983      	ldr	r3, [r0, #24]
 8004a84:	9301      	str	r3, [sp, #4]
 8004a86:	9b01      	ldr	r3, [sp, #4]
 8004a88:	1c61      	adds	r1, r4, #1
 8004a8a:	d003      	beq.n	8004a94 <I2C_RequestMemoryRead+0x80>
 8004a8c:	e076      	b.n	8004b7c <I2C_RequestMemoryRead+0x168>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a8e:	6943      	ldr	r3, [r0, #20]
 8004a90:	055b      	lsls	r3, r3, #21
 8004a92:	d44e      	bmi.n	8004b32 <I2C_RequestMemoryRead+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a94:	6943      	ldr	r3, [r0, #20]
 8004a96:	061a      	lsls	r2, r3, #24
 8004a98:	d5f9      	bpl.n	8004a8e <I2C_RequestMemoryRead+0x7a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a9a:	2f01      	cmp	r7, #1
 8004a9c:	d17e      	bne.n	8004b9c <I2C_RequestMemoryRead+0x188>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a9e:	b2f6      	uxtb	r6, r6
 8004aa0:	6106      	str	r6, [r0, #16]
 8004aa2:	1c67      	adds	r7, r4, #1
 8004aa4:	d003      	beq.n	8004aae <I2C_RequestMemoryRead+0x9a>
 8004aa6:	e08d      	b.n	8004bc4 <I2C_RequestMemoryRead+0x1b0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aa8:	6943      	ldr	r3, [r0, #20]
 8004aaa:	0559      	lsls	r1, r3, #21
 8004aac:	d441      	bmi.n	8004b32 <I2C_RequestMemoryRead+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004aae:	6943      	ldr	r3, [r0, #20]
 8004ab0:	061e      	lsls	r6, r3, #24
 8004ab2:	d5f9      	bpl.n	8004aa8 <I2C_RequestMemoryRead+0x94>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ab4:	6803      	ldr	r3, [r0, #0]
 8004ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aba:	6003      	str	r3, [r0, #0]
 8004abc:	1c63      	adds	r3, r4, #1
 8004abe:	f040 80a1 	bne.w	8004c04 <I2C_RequestMemoryRead+0x1f0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ac2:	6943      	ldr	r3, [r0, #20]
 8004ac4:	07df      	lsls	r7, r3, #31
 8004ac6:	d5fc      	bpl.n	8004ac2 <I2C_RequestMemoryRead+0xae>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ac8:	f049 0901 	orr.w	r9, r9, #1
 8004acc:	f8c0 9010 	str.w	r9, [r0, #16]
 8004ad0:	1c62      	adds	r2, r4, #1
 8004ad2:	d003      	beq.n	8004adc <I2C_RequestMemoryRead+0xc8>
 8004ad4:	e0b2      	b.n	8004c3c <I2C_RequestMemoryRead+0x228>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ad6:	6943      	ldr	r3, [r0, #20]
 8004ad8:	055b      	lsls	r3, r3, #21
 8004ada:	d412      	bmi.n	8004b02 <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004adc:	6943      	ldr	r3, [r0, #20]
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	f013 0302 	ands.w	r3, r3, #2
 8004ae4:	d1f7      	bne.n	8004ad6 <I2C_RequestMemoryRead+0xc2>
  return HAL_OK;
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	e020      	b.n	8004b2c <I2C_RequestMemoryRead+0x118>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aea:	6943      	ldr	r3, [r0, #20]
 8004aec:	07db      	lsls	r3, r3, #31
 8004aee:	d4a7      	bmi.n	8004a40 <I2C_RequestMemoryRead+0x2c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af0:	f7ff fc08 	bl	8004304 <HAL_GetTick>
 8004af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004af6:	1ac0      	subs	r0, r0, r3
 8004af8:	4284      	cmp	r4, r0
 8004afa:	d331      	bcc.n	8004b60 <I2C_RequestMemoryRead+0x14c>
 8004afc:	b384      	cbz	r4, 8004b60 <I2C_RequestMemoryRead+0x14c>
 8004afe:	6828      	ldr	r0, [r5, #0]
 8004b00:	e799      	b.n	8004a36 <I2C_RequestMemoryRead+0x22>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b02:	f46f 6480 	mvn.w	r4, #1024	; 0x400
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b06:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b08:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b0a:	6803      	ldr	r3, [r0, #0]
 8004b0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b10:	6003      	str	r3, [r0, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b12:	6144      	str	r4, [r0, #20]
    return HAL_ERROR;
 8004b14:	2001      	movs	r0, #1
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b16:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b18:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b1c:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b20:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004b22:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b26:	f043 0304 	orr.w	r3, r3, #4
 8004b2a:	642b      	str	r3, [r5, #64]	; 0x40
}
 8004b2c:	b002      	add	sp, #8
 8004b2e:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b32:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b34:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b36:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8004b3a:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b3c:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b3e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b42:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b46:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8004b48:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b4c:	f043 0304 	orr.w	r3, r3, #4
 8004b50:	642b      	str	r3, [r5, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b52:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d02e      	beq.n	8004bb6 <I2C_RequestMemoryRead+0x1a2>
    return HAL_ERROR;
 8004b58:	2001      	movs	r0, #1
}
 8004b5a:	b002      	add	sp, #8
 8004b5c:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b60:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b62:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b64:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b66:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b6a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b6e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004b70:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b74:	f043 0320 	orr.w	r3, r3, #32
 8004b78:	642b      	str	r3, [r5, #64]	; 0x40
 8004b7a:	e7ed      	b.n	8004b58 <I2C_RequestMemoryRead+0x144>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b7c:	6943      	ldr	r3, [r0, #20]
 8004b7e:	0619      	lsls	r1, r3, #24
 8004b80:	d48b      	bmi.n	8004a9a <I2C_RequestMemoryRead+0x86>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b82:	6943      	ldr	r3, [r0, #20]
 8004b84:	055b      	lsls	r3, r3, #21
 8004b86:	d4d4      	bmi.n	8004b32 <I2C_RequestMemoryRead+0x11e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b88:	f7ff fbbc 	bl	8004304 <HAL_GetTick>
 8004b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b8e:	1ac0      	subs	r0, r0, r3
 8004b90:	4284      	cmp	r4, r0
 8004b92:	d345      	bcc.n	8004c20 <I2C_RequestMemoryRead+0x20c>
 8004b94:	2c00      	cmp	r4, #0
 8004b96:	d043      	beq.n	8004c20 <I2C_RequestMemoryRead+0x20c>
 8004b98:	6828      	ldr	r0, [r5, #0]
 8004b9a:	e775      	b.n	8004a88 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b9c:	0a33      	lsrs	r3, r6, #8
 8004b9e:	6103      	str	r3, [r0, #16]
 8004ba0:	1c63      	adds	r3, r4, #1
 8004ba2:	d003      	beq.n	8004bac <I2C_RequestMemoryRead+0x198>
 8004ba4:	e01e      	b.n	8004be4 <I2C_RequestMemoryRead+0x1d0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ba6:	6943      	ldr	r3, [r0, #20]
 8004ba8:	0559      	lsls	r1, r3, #21
 8004baa:	d4c2      	bmi.n	8004b32 <I2C_RequestMemoryRead+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bac:	6943      	ldr	r3, [r0, #20]
 8004bae:	061f      	lsls	r7, r3, #24
 8004bb0:	f53f af75 	bmi.w	8004a9e <I2C_RequestMemoryRead+0x8a>
 8004bb4:	e7f7      	b.n	8004ba6 <I2C_RequestMemoryRead+0x192>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb6:	682a      	ldr	r2, [r5, #0]
    return HAL_ERROR;
 8004bb8:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bba:	6813      	ldr	r3, [r2, #0]
 8004bbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	e7b3      	b.n	8004b2c <I2C_RequestMemoryRead+0x118>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bc4:	6943      	ldr	r3, [r0, #20]
 8004bc6:	061a      	lsls	r2, r3, #24
 8004bc8:	f53f af74 	bmi.w	8004ab4 <I2C_RequestMemoryRead+0xa0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bcc:	6943      	ldr	r3, [r0, #20]
 8004bce:	055b      	lsls	r3, r3, #21
 8004bd0:	d4af      	bmi.n	8004b32 <I2C_RequestMemoryRead+0x11e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd2:	f7ff fb97 	bl	8004304 <HAL_GetTick>
 8004bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bd8:	1ac0      	subs	r0, r0, r3
 8004bda:	4284      	cmp	r4, r0
 8004bdc:	d320      	bcc.n	8004c20 <I2C_RequestMemoryRead+0x20c>
 8004bde:	b1fc      	cbz	r4, 8004c20 <I2C_RequestMemoryRead+0x20c>
 8004be0:	6828      	ldr	r0, [r5, #0]
 8004be2:	e75e      	b.n	8004aa2 <I2C_RequestMemoryRead+0x8e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004be4:	6943      	ldr	r3, [r0, #20]
 8004be6:	061a      	lsls	r2, r3, #24
 8004be8:	f53f af59 	bmi.w	8004a9e <I2C_RequestMemoryRead+0x8a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bec:	6943      	ldr	r3, [r0, #20]
 8004bee:	055a      	lsls	r2, r3, #21
 8004bf0:	d49f      	bmi.n	8004b32 <I2C_RequestMemoryRead+0x11e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf2:	f7ff fb87 	bl	8004304 <HAL_GetTick>
 8004bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bf8:	1ac0      	subs	r0, r0, r3
 8004bfa:	4284      	cmp	r4, r0
 8004bfc:	d310      	bcc.n	8004c20 <I2C_RequestMemoryRead+0x20c>
 8004bfe:	b17c      	cbz	r4, 8004c20 <I2C_RequestMemoryRead+0x20c>
 8004c00:	6828      	ldr	r0, [r5, #0]
 8004c02:	e7cd      	b.n	8004ba0 <I2C_RequestMemoryRead+0x18c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c04:	6943      	ldr	r3, [r0, #20]
 8004c06:	07de      	lsls	r6, r3, #31
 8004c08:	f53f af5e 	bmi.w	8004ac8 <I2C_RequestMemoryRead+0xb4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0c:	f7ff fb7a 	bl	8004304 <HAL_GetTick>
 8004c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c12:	1ac0      	subs	r0, r0, r3
 8004c14:	4284      	cmp	r4, r0
 8004c16:	d3a3      	bcc.n	8004b60 <I2C_RequestMemoryRead+0x14c>
 8004c18:	2c00      	cmp	r4, #0
 8004c1a:	d0a1      	beq.n	8004b60 <I2C_RequestMemoryRead+0x14c>
 8004c1c:	6828      	ldr	r0, [r5, #0]
 8004c1e:	e74d      	b.n	8004abc <I2C_RequestMemoryRead+0xa8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c20:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c22:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c24:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c26:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c2a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c2e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004c30:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c34:	f043 0320 	orr.w	r3, r3, #32
 8004c38:	642b      	str	r3, [r5, #64]	; 0x40
 8004c3a:	e78a      	b.n	8004b52 <I2C_RequestMemoryRead+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c3c:	6943      	ldr	r3, [r0, #20]
 8004c3e:	43db      	mvns	r3, r3
 8004c40:	f013 0302 	ands.w	r3, r3, #2
 8004c44:	f43f af4f 	beq.w	8004ae6 <I2C_RequestMemoryRead+0xd2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c48:	6943      	ldr	r3, [r0, #20]
 8004c4a:	0559      	lsls	r1, r3, #21
 8004c4c:	f53f af59 	bmi.w	8004b02 <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c50:	f7ff fb58 	bl	8004304 <HAL_GetTick>
 8004c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c56:	1ac0      	subs	r0, r0, r3
 8004c58:	4284      	cmp	r4, r0
 8004c5a:	d381      	bcc.n	8004b60 <I2C_RequestMemoryRead+0x14c>
 8004c5c:	2c00      	cmp	r4, #0
 8004c5e:	f43f af7f 	beq.w	8004b60 <I2C_RequestMemoryRead+0x14c>
 8004c62:	6828      	ldr	r0, [r5, #0]
 8004c64:	e734      	b.n	8004ad0 <I2C_RequestMemoryRead+0xbc>
 8004c66:	bf00      	nop

08004c68 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	f000 8097 	beq.w	8004d9c <HAL_I2C_Init+0x134>
{
 8004c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c70:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004c74:	4604      	mov	r4, r0
 8004c76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 8087 	beq.w	8004d8e <HAL_I2C_Init+0x126>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c80:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8004c82:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004c88:	6813      	ldr	r3, [r2, #0]
 8004c8a:	f023 0301 	bic.w	r3, r3, #1
 8004c8e:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c90:	f001 fa6c 	bl	800616c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c94:	6862      	ldr	r2, [r4, #4]
 8004c96:	4b4b      	ldr	r3, [pc, #300]	; (8004dc4 <HAL_I2C_Init+0x15c>)
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d84b      	bhi.n	8004d34 <HAL_I2C_Init+0xcc>
 8004c9c:	4b4a      	ldr	r3, [pc, #296]	; (8004dc8 <HAL_I2C_Init+0x160>)
 8004c9e:	4298      	cmp	r0, r3
 8004ca0:	d97a      	bls.n	8004d98 <HAL_I2C_Init+0x130>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ca2:	1e43      	subs	r3, r0, #1
 8004ca4:	0052      	lsls	r2, r2, #1
 8004ca6:	fbb3 f2f2 	udiv	r2, r3, r2
  freqrange = I2C_FREQRANGE(pclk1);
 8004caa:	4948      	ldr	r1, [pc, #288]	; (8004dcc <HAL_I2C_Init+0x164>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cac:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8004cae:	fba1 1000 	umull	r1, r0, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cb2:	6859      	ldr	r1, [r3, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8004cb4:	0c80      	lsrs	r0, r0, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cb6:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004cba:	4301      	orrs	r1, r0
 8004cbc:	6059      	str	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cbe:	6a19      	ldr	r1, [r3, #32]
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004cc6:	4308      	orrs	r0, r1
 8004cc8:	6218      	str	r0, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004cca:	1c50      	adds	r0, r2, #1
 8004ccc:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8004cd0:	2804      	cmp	r0, #4
 8004cd2:	bf38      	it	cc
 8004cd4:	2004      	movcc	r0, #4
 8004cd6:	69d9      	ldr	r1, [r3, #28]
 8004cd8:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004cdc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ce0:	2500      	movs	r5, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8004ce2:	2620      	movs	r6, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ce4:	4308      	orrs	r0, r1
 8004ce6:	61d8      	str	r0, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ce8:	6819      	ldr	r1, [r3, #0]
 8004cea:	e9d4 2007 	ldrd	r2, r0, [r4, #28]
 8004cee:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8004cf2:	4302      	orrs	r2, r0
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cf8:	6899      	ldr	r1, [r3, #8]
 8004cfa:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 8004cfe:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8004d02:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004d06:	4302      	orrs	r2, r0
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d0c:	68d9      	ldr	r1, [r3, #12]
 8004d0e:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8004d12:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004d16:	4302      	orrs	r2, r0
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 8004d1c:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8004d1e:	4628      	mov	r0, r5
  __HAL_I2C_ENABLE(hi2c);
 8004d20:	f042 0201 	orr.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d26:	6425      	str	r5, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d28:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d2c:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d2e:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 8004d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d34:	4b26      	ldr	r3, [pc, #152]	; (8004dd0 <HAL_I2C_Init+0x168>)
 8004d36:	4298      	cmp	r0, r3
 8004d38:	d92e      	bls.n	8004d98 <HAL_I2C_Init+0x130>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d3a:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8004d3e:	4d23      	ldr	r5, [pc, #140]	; (8004dcc <HAL_I2C_Init+0x164>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d40:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8004d42:	fba5 6500 	umull	r6, r5, r5, r0
 8004d46:	0cad      	lsrs	r5, r5, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d48:	fb01 f105 	mul.w	r1, r1, r5
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d4c:	685e      	ldr	r6, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d4e:	4f21      	ldr	r7, [pc, #132]	; (8004dd4 <HAL_I2C_Init+0x16c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d50:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d54:	fba7 7101 	umull	r7, r1, r7, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d58:	4335      	orrs	r5, r6
 8004d5a:	605d      	str	r5, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d5c:	6a1d      	ldr	r5, [r3, #32]
 8004d5e:	0989      	lsrs	r1, r1, #6
 8004d60:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8004d64:	3101      	adds	r1, #1
 8004d66:	4329      	orrs	r1, r5
 8004d68:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d6a:	69d9      	ldr	r1, [r3, #28]
 8004d6c:	68a5      	ldr	r5, [r4, #8]
 8004d6e:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004d72:	3801      	subs	r0, #1
 8004d74:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004d78:	b995      	cbnz	r5, 8004da0 <HAL_I2C_Init+0x138>
 8004d7a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004d7e:	fbb0 f0f2 	udiv	r0, r0, r2
 8004d82:	3001      	adds	r0, #1
 8004d84:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8004d88:	b9c0      	cbnz	r0, 8004dbc <HAL_I2C_Init+0x154>
 8004d8a:	2001      	movs	r0, #1
 8004d8c:	e7a8      	b.n	8004ce0 <HAL_I2C_Init+0x78>
    hi2c->Lock = HAL_UNLOCKED;
 8004d8e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8004d92:	f7fd fb45 	bl	8002420 <HAL_I2C_MspInit>
 8004d96:	e773      	b.n	8004c80 <HAL_I2C_Init+0x18>
    return HAL_ERROR;
 8004d98:	2001      	movs	r0, #1
}
 8004d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8004d9c:	2001      	movs	r0, #1
}
 8004d9e:	4770      	bx	lr
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004da0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004da4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004da8:	fbb0 f0f2 	udiv	r0, r0, r2
 8004dac:	3001      	adds	r0, #1
 8004dae:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d0e9      	beq.n	8004d8a <HAL_I2C_Init+0x122>
 8004db6:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8004dba:	e791      	b.n	8004ce0 <HAL_I2C_Init+0x78>
 8004dbc:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004dc0:	e78e      	b.n	8004ce0 <HAL_I2C_Init+0x78>
 8004dc2:	bf00      	nop
 8004dc4:	000186a0 	.word	0x000186a0
 8004dc8:	001e847f 	.word	0x001e847f
 8004dcc:	431bde83 	.word	0x431bde83
 8004dd0:	003d08ff 	.word	0x003d08ff
 8004dd4:	10624dd3 	.word	0x10624dd3

08004dd8 <HAL_I2C_Mem_Write>:
{
 8004dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ddc:	4604      	mov	r4, r0
 8004dde:	b083      	sub	sp, #12
 8004de0:	469a      	mov	sl, r3
 8004de2:	460f      	mov	r7, r1
 8004de4:	4690      	mov	r8, r2
 8004de6:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8004dea:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 8004dec:	f7ff fa8a 	bl	8004304 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004df0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004df4:	2b20      	cmp	r3, #32
 8004df6:	d004      	beq.n	8004e02 <HAL_I2C_Mem_Write+0x2a>
      return HAL_BUSY;
 8004df8:	2702      	movs	r7, #2
}
 8004dfa:	4638      	mov	r0, r7
 8004dfc:	b003      	add	sp, #12
 8004dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e02:	4605      	mov	r5, r0
 8004e04:	e005      	b.n	8004e12 <HAL_I2C_Mem_Write+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e06:	f7ff fa7d 	bl	8004304 <HAL_GetTick>
 8004e0a:	1b40      	subs	r0, r0, r5
 8004e0c:	2819      	cmp	r0, #25
 8004e0e:	f200 80a6 	bhi.w	8004f5e <HAL_I2C_Mem_Write+0x186>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e12:	6822      	ldr	r2, [r4, #0]
 8004e14:	6993      	ldr	r3, [r2, #24]
 8004e16:	43db      	mvns	r3, r3
 8004e18:	f013 0b02 	ands.w	fp, r3, #2
 8004e1c:	d0f3      	beq.n	8004e06 <HAL_I2C_Mem_Write+0x2e>
    __HAL_LOCK(hi2c);
 8004e1e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d0e8      	beq.n	8004df8 <HAL_I2C_Mem_Write+0x20>
 8004e26:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e28:	6813      	ldr	r3, [r2, #0]
    __HAL_LOCK(hi2c);
 8004e2a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e2e:	07d8      	lsls	r0, r3, #31
 8004e30:	d402      	bmi.n	8004e38 <HAL_I2C_Mem_Write+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8004e32:	6813      	ldr	r3, [r2, #0]
 8004e34:	430b      	orrs	r3, r1
 8004e36:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e38:	f04f 0e21 	mov.w	lr, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e3c:	f04f 0c40 	mov.w	ip, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e40:	2000      	movs	r0, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e42:	6811      	ldr	r1, [r2, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e44:	4653      	mov	r3, sl
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e46:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8004e4a:	6011      	str	r1, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e4c:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e50:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e54:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8004e56:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e5a:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e5e:	4639      	mov	r1, r7
    hi2c->pBuffPtr    = pData;
 8004e60:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e62:	f5a0 3080 	sub.w	r0, r0, #65536	; 0x10000
    hi2c->pBuffPtr    = pData;
 8004e66:	6267      	str	r7, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e68:	4642      	mov	r2, r8
 8004e6a:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e6e:	62e0      	str	r0, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004e70:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e74:	4620      	mov	r0, r4
 8004e76:	f7ff fcd7 	bl	8004828 <I2C_RequestMemoryWrite>
 8004e7a:	4607      	mov	r7, r0
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	d14b      	bne.n	8004f18 <HAL_I2C_Mem_Write+0x140>
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 8004e84:	b1fa      	cbz	r2, 8004ec6 <HAL_I2C_Mem_Write+0xee>
 8004e86:	1c72      	adds	r2, r6, #1
 8004e88:	d003      	beq.n	8004e92 <HAL_I2C_Mem_Write+0xba>
 8004e8a:	e04a      	b.n	8004f22 <HAL_I2C_Mem_Write+0x14a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e8c:	695a      	ldr	r2, [r3, #20]
 8004e8e:	0551      	lsls	r1, r2, #21
 8004e90:	d42f      	bmi.n	8004ef2 <HAL_I2C_Mem_Write+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e92:	695a      	ldr	r2, [r3, #20]
 8004e94:	0610      	lsls	r0, r2, #24
 8004e96:	d5f9      	bpl.n	8004e8c <HAL_I2C_Mem_Write+0xb4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e98:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004e9c:	f8b4 8028 	ldrh.w	r8, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ea0:	46f4      	mov	ip, lr
 8004ea2:	f81c 1b01 	ldrb.w	r1, [ip], #1
      hi2c->XferSize--;
 8004ea6:	f108 32ff 	add.w	r2, r8, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004eaa:	6119      	str	r1, [r3, #16]
      hi2c->XferCount--;
 8004eac:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004eae:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8004eb0:	3901      	subs	r1, #1
 8004eb2:	b289      	uxth	r1, r1
 8004eb4:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004eb6:	6958      	ldr	r0, [r3, #20]
      hi2c->pBuffPtr++;
 8004eb8:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ebc:	0740      	lsls	r0, r0, #29
      hi2c->XferSize--;
 8004ebe:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ec0:	d5e0      	bpl.n	8004e84 <HAL_I2C_Mem_Write+0xac>
 8004ec2:	2a00      	cmp	r2, #0
 8004ec4:	d13c      	bne.n	8004f40 <HAL_I2C_Mem_Write+0x168>
 8004ec6:	1c72      	adds	r2, r6, #1
 8004ec8:	d003      	beq.n	8004ed2 <HAL_I2C_Mem_Write+0xfa>
 8004eca:	e05d      	b.n	8004f88 <HAL_I2C_Mem_Write+0x1b0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ecc:	695a      	ldr	r2, [r3, #20]
 8004ece:	0551      	lsls	r1, r2, #21
 8004ed0:	d468      	bmi.n	8004fa4 <HAL_I2C_Mem_Write+0x1cc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ed2:	695a      	ldr	r2, [r3, #20]
 8004ed4:	0750      	lsls	r0, r2, #29
 8004ed6:	d5f9      	bpl.n	8004ecc <HAL_I2C_Mem_Write+0xf4>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed8:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004eda:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee2:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004ee4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8004ee8:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eec:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 8004ef0:	e783      	b.n	8004dfa <HAL_I2C_Mem_Write+0x22>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ef2:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef4:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ef8:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004efa:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004efc:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004efe:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f02:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f06:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8004f08:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f0c:	f043 0304 	orr.w	r3, r3, #4
 8004f10:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d030      	beq.n	8004f7a <HAL_I2C_Mem_Write+0x1a2>
      return HAL_ERROR;
 8004f18:	2701      	movs	r7, #1
}
 8004f1a:	4638      	mov	r0, r7
 8004f1c:	b003      	add	sp, #12
 8004f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f22:	695a      	ldr	r2, [r3, #20]
 8004f24:	0612      	lsls	r2, r2, #24
 8004f26:	d4b7      	bmi.n	8004e98 <HAL_I2C_Mem_Write+0xc0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f28:	695a      	ldr	r2, [r3, #20]
 8004f2a:	0551      	lsls	r1, r2, #21
 8004f2c:	d4e1      	bmi.n	8004ef2 <HAL_I2C_Mem_Write+0x11a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2e:	f7ff f9e9 	bl	8004304 <HAL_GetTick>
 8004f32:	1b40      	subs	r0, r0, r5
 8004f34:	4286      	cmp	r6, r0
 8004f36:	d34f      	bcc.n	8004fd8 <HAL_I2C_Mem_Write+0x200>
 8004f38:	2e00      	cmp	r6, #0
 8004f3a:	d04d      	beq.n	8004fd8 <HAL_I2C_Mem_Write+0x200>
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	e7a2      	b.n	8004e86 <HAL_I2C_Mem_Write+0xae>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f40:	f89e 1001 	ldrb.w	r1, [lr, #1]
        hi2c->XferSize--;
 8004f44:	f1a8 0202 	sub.w	r2, r8, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f48:	6119      	str	r1, [r3, #16]
        hi2c->XferCount--;
 8004f4a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8004f4c:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 8004f4e:	3801      	subs	r0, #1
        hi2c->pBuffPtr++;
 8004f50:	f10e 0102 	add.w	r1, lr, #2
        hi2c->XferCount--;
 8004f54:	b280      	uxth	r0, r0
        hi2c->XferSize--;
 8004f56:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004f58:	6261      	str	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004f5a:	8560      	strh	r0, [r4, #42]	; 0x2a
 8004f5c:	e792      	b.n	8004e84 <HAL_I2C_Mem_Write+0xac>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f5e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004f60:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f68:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004f6e:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f72:	f043 0320 	orr.w	r3, r3, #32
 8004f76:	6423      	str	r3, [r4, #64]	; 0x40
 8004f78:	e73e      	b.n	8004df8 <HAL_I2C_Mem_Write+0x20>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f7a:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR;
 8004f7c:	2701      	movs	r7, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f7e:	6813      	ldr	r3, [r2, #0]
 8004f80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	e738      	b.n	8004dfa <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f88:	695a      	ldr	r2, [r3, #20]
 8004f8a:	0752      	lsls	r2, r2, #29
 8004f8c:	d4a4      	bmi.n	8004ed8 <HAL_I2C_Mem_Write+0x100>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f8e:	695a      	ldr	r2, [r3, #20]
 8004f90:	0551      	lsls	r1, r2, #21
 8004f92:	d407      	bmi.n	8004fa4 <HAL_I2C_Mem_Write+0x1cc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f94:	f7ff f9b6 	bl	8004304 <HAL_GetTick>
 8004f98:	1b40      	subs	r0, r0, r5
 8004f9a:	4286      	cmp	r6, r0
 8004f9c:	d32a      	bcc.n	8004ff4 <HAL_I2C_Mem_Write+0x21c>
 8004f9e:	b34e      	cbz	r6, 8004ff4 <HAL_I2C_Mem_Write+0x21c>
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	e790      	b.n	8004ec6 <HAL_I2C_Mem_Write+0xee>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fa4:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fa6:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8004faa:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fac:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fae:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fb0:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8004fba:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fbe:	f043 0304 	orr.w	r3, r3, #4
 8004fc2:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d1a6      	bne.n	8004f18 <HAL_I2C_Mem_Write+0x140>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fca:	6822      	ldr	r2, [r4, #0]
      return HAL_ERROR;
 8004fcc:	2701      	movs	r7, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fce:	6813      	ldr	r3, [r2, #0]
 8004fd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	e710      	b.n	8004dfa <HAL_I2C_Mem_Write+0x22>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004fd8:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004fda:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004fdc:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004fde:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004fe2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004fe6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004fe8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004fec:	f043 0320 	orr.w	r3, r3, #32
 8004ff0:	6423      	str	r3, [r4, #64]	; 0x40
 8004ff2:	e78e      	b.n	8004f12 <HAL_I2C_Mem_Write+0x13a>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ff4:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ff6:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ff8:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ffa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ffe:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005002:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005004:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005008:	f043 0320 	orr.w	r3, r3, #32
 800500c:	6423      	str	r3, [r4, #64]	; 0x40
 800500e:	e7d9      	b.n	8004fc4 <HAL_I2C_Mem_Write+0x1ec>

08005010 <HAL_I2C_Mem_Read>:
{
 8005010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005014:	4604      	mov	r4, r0
 8005016:	b087      	sub	sp, #28
 8005018:	469a      	mov	sl, r3
 800501a:	460f      	mov	r7, r1
 800501c:	4690      	mov	r8, r2
 800501e:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
 8005022:	9d12      	ldr	r5, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8005024:	f7ff f96e 	bl	8004304 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005028:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800502c:	2b20      	cmp	r3, #32
 800502e:	d004      	beq.n	800503a <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 8005030:	2702      	movs	r7, #2
}
 8005032:	4638      	mov	r0, r7
 8005034:	b007      	add	sp, #28
 8005036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800503a:	4606      	mov	r6, r0
 800503c:	e004      	b.n	8005048 <HAL_I2C_Mem_Read+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503e:	f7ff f961 	bl	8004304 <HAL_GetTick>
 8005042:	1b80      	subs	r0, r0, r6
 8005044:	2819      	cmp	r0, #25
 8005046:	d84d      	bhi.n	80050e4 <HAL_I2C_Mem_Read+0xd4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005048:	6822      	ldr	r2, [r4, #0]
 800504a:	6993      	ldr	r3, [r2, #24]
 800504c:	43db      	mvns	r3, r3
 800504e:	f013 0b02 	ands.w	fp, r3, #2
 8005052:	d0f4      	beq.n	800503e <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 8005054:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005058:	2b01      	cmp	r3, #1
 800505a:	d0e9      	beq.n	8005030 <HAL_I2C_Mem_Read+0x20>
 800505c:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800505e:	6813      	ldr	r3, [r2, #0]
    __HAL_LOCK(hi2c);
 8005060:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005064:	07db      	lsls	r3, r3, #31
 8005066:	d402      	bmi.n	800506e <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8005068:	6813      	ldr	r3, [r2, #0]
 800506a:	430b      	orrs	r3, r1
 800506c:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800506e:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005072:	f04f 0c40 	mov.w	ip, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005076:	2000      	movs	r0, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005078:	6811      	ldr	r1, [r2, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800507a:	4653      	mov	r3, sl
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800507c:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8005080:	6011      	str	r1, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005082:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005086:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800508a:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800508c:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005090:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005094:	4639      	mov	r1, r7
    hi2c->pBuffPtr    = pData;
 8005096:	9f10      	ldr	r7, [sp, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005098:	f5a0 3080 	sub.w	r0, r0, #65536	; 0x10000
    hi2c->pBuffPtr    = pData;
 800509c:	6267      	str	r7, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800509e:	4642      	mov	r2, r8
 80050a0:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050a4:	62e0      	str	r0, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80050a6:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050aa:	4620      	mov	r0, r4
 80050ac:	f7ff fcb2 	bl	8004a14 <I2C_RequestMemoryRead>
 80050b0:	4607      	mov	r7, r0
 80050b2:	b9a8      	cbnz	r0, 80050e0 <HAL_I2C_Mem_Read+0xd0>
    if (hi2c->XferSize == 0U)
 80050b4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80050b6:	6822      	ldr	r2, [r4, #0]
 80050b8:	bb13      	cbnz	r3, 8005100 <HAL_I2C_Mem_Read+0xf0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ba:	9002      	str	r0, [sp, #8]
 80050bc:	6953      	ldr	r3, [r2, #20]
 80050be:	9302      	str	r3, [sp, #8]
 80050c0:	6993      	ldr	r3, [r2, #24]
 80050c2:	9302      	str	r3, [sp, #8]
 80050c4:	9b02      	ldr	r3, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c6:	6813      	ldr	r3, [r2, #0]
 80050c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050cc:	6013      	str	r3, [r2, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ce:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80050d0:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80050d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80050d6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050da:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80050de:	e7a8      	b.n	8005032 <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 80050e0:	2701      	movs	r7, #1
 80050e2:	e7a6      	b.n	8005032 <HAL_I2C_Mem_Read+0x22>
        hi2c->State             = HAL_I2C_STATE_READY;
 80050e4:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050e6:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050ee:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80050f4:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050f8:	f043 0320 	orr.w	r3, r3, #32
 80050fc:	6423      	str	r3, [r4, #64]	; 0x40
 80050fe:	e797      	b.n	8005030 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8005100:	2b01      	cmp	r3, #1
 8005102:	d07c      	beq.n	80051fe <HAL_I2C_Mem_Read+0x1ee>
    else if (hi2c->XferSize == 2U)
 8005104:	2b02      	cmp	r3, #2
 8005106:	f000 811d 	beq.w	8005344 <HAL_I2C_Mem_Read+0x334>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800510a:	6811      	ldr	r1, [r2, #0]
 800510c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8005110:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005112:	9005      	str	r0, [sp, #20]
 8005114:	6951      	ldr	r1, [r2, #20]
 8005116:	9105      	str	r1, [sp, #20]
 8005118:	6992      	ldr	r2, [r2, #24]
 800511a:	9205      	str	r2, [sp, #20]
 800511c:	9a05      	ldr	r2, [sp, #20]
    while (hi2c->XferSize > 0U)
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0d5      	beq.n	80050ce <HAL_I2C_Mem_Read+0xbe>
      if (hi2c->XferSize <= 3U)
 8005122:	2b03      	cmp	r3, #3
 8005124:	d87e      	bhi.n	8005224 <HAL_I2C_Mem_Read+0x214>
        if (hi2c->XferSize == 1U)
 8005126:	2b01      	cmp	r3, #1
 8005128:	f000 80d8 	beq.w	80052dc <HAL_I2C_Mem_Read+0x2cc>
        else if (hi2c->XferSize == 2U)
 800512c:	2b02      	cmp	r3, #2
 800512e:	d04c      	beq.n	80051ca <HAL_I2C_Mem_Read+0x1ba>
 8005130:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005132:	6822      	ldr	r2, [r4, #0]
 8005134:	f040 80a7 	bne.w	8005286 <HAL_I2C_Mem_Read+0x276>
 8005138:	6953      	ldr	r3, [r2, #20]
 800513a:	0759      	lsls	r1, r3, #29
 800513c:	d5fc      	bpl.n	8005138 <HAL_I2C_Mem_Read+0x128>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800513e:	6813      	ldr	r3, [r2, #0]
 8005140:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005144:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005146:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005148:	6822      	ldr	r2, [r4, #0]
 800514a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800514c:	6912      	ldr	r2, [r2, #16]
 800514e:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8005150:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8005152:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005154:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005156:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8005158:	3101      	adds	r1, #1
          hi2c->XferSize--;
 800515a:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 800515c:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 800515e:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005160:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005162:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005164:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005166:	6822      	ldr	r2, [r4, #0]
 8005168:	f040 80ab 	bne.w	80052c2 <HAL_I2C_Mem_Read+0x2b2>
 800516c:	6953      	ldr	r3, [r2, #20]
 800516e:	0759      	lsls	r1, r3, #29
 8005170:	d5fc      	bpl.n	800516c <HAL_I2C_Mem_Read+0x15c>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005172:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005174:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005176:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800517a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800517c:	6913      	ldr	r3, [r2, #16]
 800517e:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8005180:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8005182:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005184:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005186:	3b01      	subs	r3, #1
 8005188:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 800518a:	3101      	adds	r1, #1
          hi2c->XferSize--;
 800518c:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 800518e:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8005190:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005192:	8522      	strh	r2, [r4, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8005194:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005196:	6822      	ldr	r2, [r4, #0]
 8005198:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800519a:	6912      	ldr	r2, [r2, #16]
 800519c:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 800519e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 80051a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 80051a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 80051a4:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 80051a6:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 80051a8:	3101      	adds	r1, #1
          hi2c->XferCount--;
 80051aa:	b292      	uxth	r2, r2
          hi2c->XferSize--;
 80051ac:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80051ae:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 80051b0:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 80051b2:	8523      	strh	r3, [r4, #40]	; 0x28
 80051b4:	e7b3      	b.n	800511e <HAL_I2C_Mem_Read+0x10e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051b6:	6953      	ldr	r3, [r2, #20]
 80051b8:	075b      	lsls	r3, r3, #29
 80051ba:	d40c      	bmi.n	80051d6 <HAL_I2C_Mem_Read+0x1c6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051bc:	f7ff f8a2 	bl	8004304 <HAL_GetTick>
 80051c0:	1b80      	subs	r0, r0, r6
 80051c2:	4285      	cmp	r5, r0
 80051c4:	d36b      	bcc.n	800529e <HAL_I2C_Mem_Read+0x28e>
 80051c6:	2d00      	cmp	r5, #0
 80051c8:	d069      	beq.n	800529e <HAL_I2C_Mem_Read+0x28e>
 80051ca:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051cc:	6822      	ldr	r2, [r4, #0]
 80051ce:	d1f2      	bne.n	80051b6 <HAL_I2C_Mem_Read+0x1a6>
 80051d0:	6953      	ldr	r3, [r2, #20]
 80051d2:	0759      	lsls	r1, r3, #29
 80051d4:	d5fc      	bpl.n	80051d0 <HAL_I2C_Mem_Read+0x1c0>
  __ASM volatile ("cpsid i" : : : "memory");
 80051d6:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d8:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051da:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e2:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80051e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80051ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80051ec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80051ee:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 80051f0:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80051f2:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80051f4:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80051f6:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80051f8:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80051fa:	8563      	strh	r3, [r4, #42]	; 0x2a
 80051fc:	e7ca      	b.n	8005194 <HAL_I2C_Mem_Read+0x184>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051fe:	6813      	ldr	r3, [r2, #0]
 8005200:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	9003      	str	r0, [sp, #12]
 800520c:	695a      	ldr	r2, [r3, #20]
 800520e:	9203      	str	r2, [sp, #12]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	9203      	str	r2, [sp, #12]
 8005214:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800521c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800521e:	b662      	cpsie	i
 8005220:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005222:	e77c      	b.n	800511e <HAL_I2C_Mem_Read+0x10e>
 8005224:	b945      	cbnz	r5, 8005238 <HAL_I2C_Mem_Read+0x228>
 8005226:	e07e      	b.n	8005326 <HAL_I2C_Mem_Read+0x316>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005228:	695a      	ldr	r2, [r3, #20]
 800522a:	06d1      	lsls	r1, r2, #27
 800522c:	d468      	bmi.n	8005300 <HAL_I2C_Mem_Read+0x2f0>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800522e:	f7ff f869 	bl	8004304 <HAL_GetTick>
 8005232:	1b80      	subs	r0, r0, r6
 8005234:	4285      	cmp	r5, r0
 8005236:	d332      	bcc.n	800529e <HAL_I2C_Mem_Read+0x28e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	695a      	ldr	r2, [r3, #20]
 800523c:	0650      	lsls	r0, r2, #25
 800523e:	d5f3      	bpl.n	8005228 <HAL_I2C_Mem_Read+0x218>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005240:	691a      	ldr	r2, [r3, #16]
 8005242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005244:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8005246:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005248:	6821      	ldr	r1, [r4, #0]
        hi2c->XferCount--;
 800524a:	3a01      	subs	r2, #1
 800524c:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 800524e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8005250:	8562      	strh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005252:	6948      	ldr	r0, [r1, #20]
        hi2c->pBuffPtr++;
 8005254:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8005256:	3b01      	subs	r3, #1
 8005258:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 800525a:	f102 0c01 	add.w	ip, r2, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800525e:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 8005260:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8005262:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005266:	f57f af5a 	bpl.w	800511e <HAL_I2C_Mem_Read+0x10e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800526a:	690b      	ldr	r3, [r1, #16]
 800526c:	7053      	strb	r3, [r2, #1]
          hi2c->XferSize--;
 800526e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005270:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8005272:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005274:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 8005276:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 8005278:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 800527a:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 800527c:	3101      	adds	r1, #1
          hi2c->XferSize--;
 800527e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005280:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8005282:	6261      	str	r1, [r4, #36]	; 0x24
 8005284:	e74b      	b.n	800511e <HAL_I2C_Mem_Read+0x10e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005286:	6953      	ldr	r3, [r2, #20]
 8005288:	075b      	lsls	r3, r3, #29
 800528a:	f53f af58 	bmi.w	800513e <HAL_I2C_Mem_Read+0x12e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528e:	f7ff f839 	bl	8004304 <HAL_GetTick>
 8005292:	1b80      	subs	r0, r0, r6
 8005294:	4285      	cmp	r5, r0
 8005296:	d302      	bcc.n	800529e <HAL_I2C_Mem_Read+0x28e>
 8005298:	2d00      	cmp	r5, #0
 800529a:	f47f af49 	bne.w	8005130 <HAL_I2C_Mem_Read+0x120>
          return HAL_ERROR;
 800529e:	2701      	movs	r7, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052a0:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80052a2:	2320      	movs	r3, #32
}
 80052a4:	4638      	mov	r0, r7
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052a6:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80052a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052ac:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80052b2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052b6:	f043 0320 	orr.w	r3, r3, #32
 80052ba:	6423      	str	r3, [r4, #64]	; 0x40
}
 80052bc:	b007      	add	sp, #28
 80052be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052c2:	6953      	ldr	r3, [r2, #20]
 80052c4:	075b      	lsls	r3, r3, #29
 80052c6:	f53f af54 	bmi.w	8005172 <HAL_I2C_Mem_Read+0x162>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ca:	f7ff f81b 	bl	8004304 <HAL_GetTick>
 80052ce:	1b80      	subs	r0, r0, r6
 80052d0:	4285      	cmp	r5, r0
 80052d2:	d3e4      	bcc.n	800529e <HAL_I2C_Mem_Read+0x28e>
 80052d4:	2d00      	cmp	r5, #0
 80052d6:	f47f af45 	bne.w	8005164 <HAL_I2C_Mem_Read+0x154>
 80052da:	e7e0      	b.n	800529e <HAL_I2C_Mem_Read+0x28e>
 80052dc:	b945      	cbnz	r5, 80052f0 <HAL_I2C_Mem_Read+0x2e0>
 80052de:	e02c      	b.n	800533a <HAL_I2C_Mem_Read+0x32a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80052e0:	695a      	ldr	r2, [r3, #20]
 80052e2:	06d1      	lsls	r1, r2, #27
 80052e4:	d40c      	bmi.n	8005300 <HAL_I2C_Mem_Read+0x2f0>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e6:	f7ff f80d 	bl	8004304 <HAL_GetTick>
 80052ea:	1b80      	subs	r0, r0, r6
 80052ec:	4285      	cmp	r5, r0
 80052ee:	d3d6      	bcc.n	800529e <HAL_I2C_Mem_Read+0x28e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	695a      	ldr	r2, [r3, #20]
 80052f4:	0650      	lsls	r0, r2, #25
 80052f6:	d5f3      	bpl.n	80052e0 <HAL_I2C_Mem_Read+0x2d0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f8:	691a      	ldr	r2, [r3, #16]
 80052fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052fc:	701a      	strb	r2, [r3, #0]
 80052fe:	e7b6      	b.n	800526e <HAL_I2C_Mem_Read+0x25e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005300:	f06f 0010 	mvn.w	r0, #16
          return HAL_ERROR;
 8005304:	2701      	movs	r7, #1
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005306:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8005308:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800530a:	6158      	str	r0, [r3, #20]
}
 800530c:	4638      	mov	r0, r7
      hi2c->PreviousState       = I2C_STATE_NONE;
 800530e:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005310:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005314:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005318:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800531a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800531e:	6423      	str	r3, [r4, #64]	; 0x40
}
 8005320:	b007      	add	sp, #28
 8005322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	695a      	ldr	r2, [r3, #20]
 800532a:	0652      	lsls	r2, r2, #25
 800532c:	d488      	bmi.n	8005240 <HAL_I2C_Mem_Read+0x230>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800532e:	695a      	ldr	r2, [r3, #20]
 8005330:	06d5      	lsls	r5, r2, #27
 8005332:	d4e5      	bmi.n	8005300 <HAL_I2C_Mem_Read+0x2f0>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005334:	f7fe ffe6 	bl	8004304 <HAL_GetTick>
 8005338:	e7b1      	b.n	800529e <HAL_I2C_Mem_Read+0x28e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	695a      	ldr	r2, [r3, #20]
 800533e:	0652      	lsls	r2, r2, #25
 8005340:	d5f5      	bpl.n	800532e <HAL_I2C_Mem_Read+0x31e>
 8005342:	e7d9      	b.n	80052f8 <HAL_I2C_Mem_Read+0x2e8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005344:	6813      	ldr	r3, [r2, #0]
 8005346:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800534a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800534c:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	9004      	str	r0, [sp, #16]
 8005352:	695a      	ldr	r2, [r3, #20]
 8005354:	9204      	str	r2, [sp, #16]
 8005356:	699a      	ldr	r2, [r3, #24]
 8005358:	9204      	str	r2, [sp, #16]
 800535a:	9a04      	ldr	r2, [sp, #16]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005362:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005364:	b662      	cpsie	i
 8005366:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005368:	e6d9      	b.n	800511e <HAL_I2C_Mem_Read+0x10e>
 800536a:	bf00      	nop

0800536c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800536c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800536e:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005370:	2800      	cmp	r0, #0
 8005372:	d074      	beq.n	800545e <HAL_PCD_Init+0xf2>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005374:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8005378:	4604      	mov	r4, r0
 800537a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800537e:	2b00      	cmp	r3, #0
 8005380:	d068      	beq.n	8005454 <HAL_PCD_Init+0xe8>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005382:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005384:	4626      	mov	r6, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8005386:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 800538a:	6820      	ldr	r0, [r4, #0]
 800538c:	f001 fa90 	bl	80068b0 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005390:	f856 cb10 	ldr.w	ip, [r6], #16
 8005394:	466d      	mov	r5, sp
 8005396:	4637      	mov	r7, r6
 8005398:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800539a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	1d27      	adds	r7, r4, #4
 80053a0:	602b      	str	r3, [r5, #0]
 80053a2:	4660      	mov	r0, ip
 80053a4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80053a8:	f001 fa70 	bl	800688c <USB_CoreInit>
 80053ac:	4605      	mov	r5, r0
 80053ae:	b130      	cbz	r0, 80053be <HAL_PCD_Init+0x52>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053b0:	2302      	movs	r3, #2
    return HAL_ERROR;
 80053b2:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053b4:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 80053b8:	4628      	mov	r0, r5
 80053ba:	b007      	add	sp, #28
 80053bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80053be:	4601      	mov	r1, r0
 80053c0:	6820      	ldr	r0, [r4, #0]
 80053c2:	f001 fa7f 	bl	80068c4 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053c6:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80053ca:	f1bc 0f00 	cmp.w	ip, #0
 80053ce:	d029      	beq.n	8005424 <HAL_PCD_Init+0xb8>
 80053d0:	4628      	mov	r0, r5
    hpcd->IN_ep[i].is_in = 1U;
 80053d2:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80053d6:	462a      	mov	r2, r5
    hpcd->IN_ep[i].is_in = 1U;
 80053d8:	eb04 1340 	add.w	r3, r4, r0, lsl #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053dc:	1c45      	adds	r5, r0, #1
    hpcd->IN_ep[i].num = i;
 80053de:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80053e2:	86d8      	strh	r0, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053e4:	b2e8      	uxtb	r0, r5
 80053e6:	4560      	cmp	r0, ip
    hpcd->IN_ep[i].is_in = 1U;
 80053e8:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80053ec:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 80053f0:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 80053f4:	641a      	str	r2, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053f6:	d3ef      	bcc.n	80053d8 <HAL_PCD_Init+0x6c>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053f8:	2300      	movs	r3, #0
    hpcd->OUT_ep[i].is_in = 0U;
 80053fa:	4619      	mov	r1, r3
 80053fc:	eb04 1243 	add.w	r2, r4, r3, lsl #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005400:	1c5d      	adds	r5, r3, #1
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005402:	f103 000a 	add.w	r0, r3, #10
    hpcd->OUT_ep[i].num = i;
 8005406:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800540a:	b2eb      	uxtb	r3, r5
    hpcd->OUT_ep[i].xfer_len = 0U;
 800540c:	0140      	lsls	r0, r0, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800540e:	4563      	cmp	r3, ip
    hpcd->OUT_ep[i].is_in = 0U;
 8005410:	f882 1129 	strb.w	r1, [r2, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005414:	f882 112b 	strb.w	r1, [r2, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005418:	f8c2 1138 	str.w	r1, [r2, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800541c:	f8c2 113c 	str.w	r1, [r2, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005420:	5021      	str	r1, [r4, r0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005422:	d3eb      	bcc.n	80053fc <HAL_PCD_Init+0x90>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005424:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005426:	466d      	mov	r5, sp
 8005428:	f8d4 c000 	ldr.w	ip, [r4]
 800542c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800542e:	6833      	ldr	r3, [r6, #0]
 8005430:	4660      	mov	r0, ip
 8005432:	602b      	str	r3, [r5, #0]
 8005434:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8005438:	f001 fa46 	bl	80068c8 <USB_DevInit>
 800543c:	4605      	mov	r5, r0
 800543e:	2800      	cmp	r0, #0
 8005440:	d1b6      	bne.n	80053b0 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_READY;
 8005442:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8005444:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  (void)USB_DevDisconnect(hpcd->Instance);
 8005448:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 800544a:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 800544e:	f001 fe59 	bl	8007104 <USB_DevDisconnect>
  return HAL_OK;
 8005452:	e7b1      	b.n	80053b8 <HAL_PCD_Init+0x4c>
    hpcd->Lock = HAL_UNLOCKED;
 8005454:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
    HAL_PCD_MspInit(hpcd);
 8005458:	f002 fd6c 	bl	8007f34 <HAL_PCD_MspInit>
 800545c:	e791      	b.n	8005382 <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 800545e:	2501      	movs	r5, #1
}
 8005460:	4628      	mov	r0, r5
 8005462:	b007      	add	sp, #28
 8005464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005466:	bf00      	nop

08005468 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8005468:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 800546c:	2b01      	cmp	r3, #1
 800546e:	d010      	beq.n	8005492 <HAL_PCD_Start+0x2a>
 8005470:	2101      	movs	r1, #1
{
 8005472:	b510      	push	{r4, lr}
 8005474:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005476:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800547a:	f002 fe89 	bl	8008190 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800547e:	6820      	ldr	r0, [r4, #0]
 8005480:	f001 fe3e 	bl	8007100 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005484:	6820      	ldr	r0, [r4, #0]
 8005486:	f001 fa09 	bl	800689c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800548a:	2000      	movs	r0, #0
 800548c:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8005490:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8005492:	2002      	movs	r0, #2
}
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop

08005498 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005498:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549c:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800549e:	6800      	ldr	r0, [r0, #0]
 80054a0:	f001 fe32 	bl	8007108 <USB_ReadInterrupts>
 80054a4:	0401      	lsls	r1, r0, #16
 80054a6:	6822      	ldr	r2, [r4, #0]
 80054a8:	d443      	bmi.n	8005532 <HAL_PCD_IRQHandler+0x9a>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80054aa:	4610      	mov	r0, r2
 80054ac:	f001 fe2c 	bl	8007108 <USB_ReadInterrupts>
 80054b0:	0546      	lsls	r6, r0, #21
 80054b2:	f100 8171 	bmi.w	8005798 <HAL_PCD_IRQHandler+0x300>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80054b6:	6820      	ldr	r0, [r4, #0]
 80054b8:	f001 fe26 	bl	8007108 <USB_ReadInterrupts>
 80054bc:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80054c0:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80054c2:	d007      	beq.n	80054d4 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80054c4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80054c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054cc:	041b      	lsls	r3, r3, #16
 80054ce:	0c1b      	lsrs	r3, r3, #16
 80054d0:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80054d4:	f001 fe18 	bl	8007108 <USB_ReadInterrupts>
 80054d8:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80054dc:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80054de:	d007      	beq.n	80054f0 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80054e0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80054e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054e8:	041b      	lsls	r3, r3, #16
 80054ea:	0c1b      	lsrs	r3, r3, #16
 80054ec:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80054f0:	f001 fe0a 	bl	8007108 <USB_ReadInterrupts>
 80054f4:	04c5      	lsls	r5, r0, #19
 80054f6:	f100 8131 	bmi.w	800575c <HAL_PCD_IRQHandler+0x2c4>
 80054fa:	6820      	ldr	r0, [r4, #0]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80054fc:	f001 fe04 	bl	8007108 <USB_ReadInterrupts>
 8005500:	0500      	lsls	r0, r0, #20
 8005502:	f100 8104 	bmi.w	800570e <HAL_PCD_IRQHandler+0x276>
#else
    HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005506:	6820      	ldr	r0, [r4, #0]
 8005508:	f001 fdfe 	bl	8007108 <USB_ReadInterrupts>
 800550c:	0582      	lsls	r2, r0, #22
 800550e:	f100 80f1 	bmi.w	80056f4 <HAL_PCD_IRQHandler+0x25c>
#else
    HAL_PCD_SOFCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005512:	6820      	ldr	r0, [r4, #0]
 8005514:	f001 fdf8 	bl	8007108 <USB_ReadInterrupts>
 8005518:	05c3      	lsls	r3, r0, #23
 800551a:	d508      	bpl.n	800552e <HAL_PCD_IRQHandler+0x96>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800551c:	6822      	ldr	r2, [r4, #0]
 800551e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005522:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005526:	041b      	lsls	r3, r3, #16
 8005528:	0c1b      	lsrs	r3, r3, #16
 800552a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 800552e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005532:	f8df a414 	ldr.w	sl, [pc, #1044]	; 8005948 <HAL_PCD_IRQHandler+0x4b0>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005536:	f8df b414 	ldr.w	fp, [pc, #1044]	; 800594c <HAL_PCD_IRQHandler+0x4b4>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800553a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800553e:	041f      	lsls	r7, r3, #16
 8005540:	d5b3      	bpl.n	80054aa <HAL_PCD_IRQHandler+0x12>
    wIstr = hpcd->Instance->ISTR;
 8005542:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
 8005546:	b289      	uxth	r1, r1
    if (epindex == 0U)
 8005548:	f011 050f 	ands.w	r5, r1, #15
 800554c:	d157      	bne.n	80055fe <HAL_PCD_IRQHandler+0x166>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800554e:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005552:	8813      	ldrh	r3, [r2, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005554:	f000 813e 	beq.w	80057d4 <HAL_PCD_IRQHandler+0x33c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005558:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800555a:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 800555e:	f040 817a 	bne.w	8005856 <HAL_PCD_IRQHandler+0x3be>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005562:	041b      	lsls	r3, r3, #16
 8005564:	d5e9      	bpl.n	800553a <HAL_PCD_IRQHandler+0xa2>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005566:	f640 738f 	movw	r3, #3983	; 0xf8f
 800556a:	8811      	ldrh	r1, [r2, #0]
 800556c:	400b      	ands	r3, r1
 800556e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005572:	8013      	strh	r3, [r2, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005574:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005578:	f894 1128 	ldrb.w	r1, [r4, #296]	; 0x128
 800557c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005580:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8005584:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8005588:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800558c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005590:	b19b      	cbz	r3, 80055ba <HAL_PCD_IRQHandler+0x122>
 8005592:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8005596:	b181      	cbz	r1, 80055ba <HAL_PCD_IRQHandler+0x122>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005598:	4610      	mov	r0, r2
 800559a:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 800559e:	f001 fdb9 	bl	8007114 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80055a2:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 80055a6:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80055aa:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 80055ac:	4413      	add	r3, r2
 80055ae:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80055b2:	4620      	mov	r0, r4
 80055b4:	f002 fce4 	bl	8007f80 <HAL_PCD_DataOutStageCallback>
 80055b8:	6822      	ldr	r2, [r4, #0]
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80055ba:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80055be:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 80055c8:	2900      	cmp	r1, #0
 80055ca:	f040 8198 	bne.w	80058fe <HAL_PCD_IRQHandler+0x466>
 80055ce:	5ac1      	ldrh	r1, [r0, r3]
 80055d0:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80055d4:	0409      	lsls	r1, r1, #16
 80055d6:	0c09      	lsrs	r1, r1, #16
 80055d8:	52c1      	strh	r1, [r0, r3]
 80055da:	5ac1      	ldrh	r1, [r0, r3]
 80055dc:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80055e0:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80055e4:	b289      	uxth	r1, r1
 80055e6:	52c1      	strh	r1, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80055e8:	8811      	ldrh	r1, [r2, #0]
 80055ea:	4bd6      	ldr	r3, [pc, #856]	; (8005944 <HAL_PCD_IRQHandler+0x4ac>)
 80055ec:	400b      	ands	r3, r1
 80055ee:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80055f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055fa:	8013      	strh	r3, [r2, #0]
 80055fc:	e79d      	b.n	800553a <HAL_PCD_IRQHandler+0xa2>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80055fe:	f832 6025 	ldrh.w	r6, [r2, r5, lsl #2]
 8005602:	b2b6      	uxth	r6, r6
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005604:	0431      	lsls	r1, r6, #16
 8005606:	d426      	bmi.n	8005656 <HAL_PCD_IRQHandler+0x1be>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005608:	0633      	lsls	r3, r6, #24
 800560a:	d596      	bpl.n	800553a <HAL_PCD_IRQHandler+0xa2>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800560c:	f832 1025 	ldrh.w	r1, [r2, r5, lsl #2]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005610:	eb04 1345 	add.w	r3, r4, r5, lsl #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005614:	ea0a 0101 	and.w	r1, sl, r1
 8005618:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800561c:	f822 1025 	strh.w	r1, [r2, r5, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005620:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8005624:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
        ep->xfer_buff += ep->xfer_count;
 8005628:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800562a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800562e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005632:	f8b1 1404 	ldrh.w	r1, [r1, #1028]	; 0x404

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8005636:	6c1d      	ldr	r5, [r3, #64]	; 0x40
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005638:	f3c1 0109 	ubfx	r1, r1, #0, #10
        ep->xfer_buff += ep->xfer_count;
 800563c:	1846      	adds	r6, r0, r1
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800563e:	6459      	str	r1, [r3, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8005640:	63de      	str	r6, [r3, #60]	; 0x3c
        if (ep->xfer_len == 0U)
 8005642:	2d00      	cmp	r5, #0
 8005644:	f040 80ef 	bne.w	8005826 <HAL_PCD_IRQHandler+0x38e>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005648:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800564c:	4620      	mov	r0, r4
 800564e:	f002 fc9f 	bl	8007f90 <HAL_PCD_DataInStageCallback>
 8005652:	6822      	ldr	r2, [r4, #0]
 8005654:	e771      	b.n	800553a <HAL_PCD_IRQHandler+0xa2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005656:	f640 738f 	movw	r3, #3983	; 0xf8f
 800565a:	f832 1025 	ldrh.w	r1, [r2, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 800565e:	016f      	lsls	r7, r5, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005660:	400b      	ands	r3, r1
 8005662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005666:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 800566a:	eb04 0907 	add.w	r9, r4, r7
 800566e:	f899 3134 	ldrb.w	r3, [r9, #308]	; 0x134
 8005672:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 810f 	beq.w	800589a <HAL_PCD_IRQHandler+0x402>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800567c:	f899 3128 	ldrb.w	r3, [r9, #296]	; 0x128
 8005680:	f832 c023 	ldrh.w	ip, [r2, r3, lsl #2]
 8005684:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005688:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800568c:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
 8005690:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005694:	4463      	add	r3, ip
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005696:	f000 811b 	beq.w	80058d0 <HAL_PCD_IRQHandler+0x438>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800569a:	3302      	adds	r3, #2
 800569c:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 80056a0:	f3c8 0809 	ubfx	r8, r8, #0, #10
            if (count != 0U)
 80056a4:	f1b8 0f00 	cmp.w	r8, #0
 80056a8:	f040 815d 	bne.w	8005966 <HAL_PCD_IRQHandler+0x4ce>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80056ac:	880b      	ldrh	r3, [r1, #0]
 80056ae:	ea0b 0303 	and.w	r3, fp, r3
 80056b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056ba:	800b      	strh	r3, [r1, #0]
 80056bc:	4427      	add	r7, r4
        ep->xfer_count += count;
 80056be:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
        ep->xfer_buff += count;
 80056c2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80056c6:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
        ep->xfer_count += count;
 80056ca:	4442      	add	r2, r8
        ep->xfer_buff += count;
 80056cc:	4443      	add	r3, r8
        ep->xfer_count += count;
 80056ce:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
        ep->xfer_buff += count;
 80056d2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80056d6:	2800      	cmp	r0, #0
 80056d8:	f000 80f7 	beq.w	80058ca <HAL_PCD_IRQHandler+0x432>
 80056dc:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80056e0:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 80056e4:	4590      	cmp	r8, r2
 80056e6:	f080 8114 	bcs.w	8005912 <HAL_PCD_IRQHandler+0x47a>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80056ea:	4620      	mov	r0, r4
 80056ec:	f002 fc48 	bl	8007f80 <HAL_PCD_DataOutStageCallback>
 80056f0:	6822      	ldr	r2, [r4, #0]
 80056f2:	e789      	b.n	8005608 <HAL_PCD_IRQHandler+0x170>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80056f4:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80056f6:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80056f8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80056fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005700:	041b      	lsls	r3, r3, #16
 8005702:	0c1b      	lsrs	r3, r3, #16
 8005704:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8005708:	f002 fc4a 	bl	8007fa0 <HAL_PCD_SOFCallback>
 800570c:	e701      	b.n	8005512 <HAL_PCD_IRQHandler+0x7a>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005714:	4618      	mov	r0, r3
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8005716:	f042 0208 	orr.w	r2, r2, #8
 800571a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800571e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8005722:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005726:	0412      	lsls	r2, r2, #16
 8005728:	0c12      	lsrs	r2, r2, #16
 800572a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800572e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8005732:	f042 0204 	orr.w	r2, r2, #4
 8005736:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800573a:	f001 fce5 	bl	8007108 <USB_ReadInterrupts>
 800573e:	04c1      	lsls	r1, r0, #19
 8005740:	d508      	bpl.n	8005754 <HAL_PCD_IRQHandler+0x2bc>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005742:	6822      	ldr	r2, [r4, #0]
 8005744:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005748:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800574c:	041b      	lsls	r3, r3, #16
 800574e:	0c1b      	lsrs	r3, r3, #16
 8005750:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 8005754:	4620      	mov	r0, r4
 8005756:	f002 fc39 	bl	8007fcc <HAL_PCD_SuspendCallback>
 800575a:	e6d4      	b.n	8005506 <HAL_PCD_IRQHandler+0x6e>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800575c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 800575e:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005760:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005764:	f023 0304 	bic.w	r3, r3, #4
 8005768:	041b      	lsls	r3, r3, #16
 800576a:	0c1b      	lsrs	r3, r3, #16
 800576c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005770:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005774:	f023 0308 	bic.w	r3, r3, #8
 8005778:	041b      	lsls	r3, r3, #16
 800577a:	0c1b      	lsrs	r3, r3, #16
 800577c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8005780:	f002 fc34 	bl	8007fec <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005784:	6820      	ldr	r0, [r4, #0]
 8005786:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800578a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800578e:	041b      	lsls	r3, r3, #16
 8005790:	0c1b      	lsrs	r3, r3, #16
 8005792:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8005796:	e6b1      	b.n	80054fc <HAL_PCD_IRQHandler+0x64>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005798:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 800579a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800579c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80057a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057a4:	041b      	lsls	r3, r3, #16
 80057a6:	0c1b      	lsrs	r3, r3, #16
 80057a8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80057ac:	f002 fbfc 	bl	8007fa8 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 80057b0:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	f43f ae7e 	beq.w	80054b6 <HAL_PCD_IRQHandler+0x1e>
  hpcd->USB_Address = address;
 80057ba:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 80057bc:	2301      	movs	r3, #1
  hpcd->USB_Address = address;
 80057be:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 80057c2:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80057c6:	4629      	mov	r1, r5
 80057c8:	6820      	ldr	r0, [r4, #0]
 80057ca:	f001 fc93 	bl	80070f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80057ce:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
 80057d2:	e670      	b.n	80054b6 <HAL_PCD_IRQHandler+0x1e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80057d4:	ea0a 0303 	and.w	r3, sl, r3
 80057d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057dc:	8013      	strh	r3, [r2, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80057de:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80057e2:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
        ep->xfer_buff += ep->xfer_count;
 80057e6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80057e8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80057ec:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80057f0:	f8b2 3404 	ldrh.w	r3, [r2, #1028]	; 0x404
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80057f4:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80057f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 80057fa:	441d      	add	r5, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80057fc:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80057fe:	63e5      	str	r5, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005800:	f002 fbc6 	bl	8007f90 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005804:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005808:	b31b      	cbz	r3, 8005852 <HAL_PCD_IRQHandler+0x3ba>
 800580a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800580c:	6822      	ldr	r2, [r4, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	f47f ae93 	bne.w	800553a <HAL_PCD_IRQHandler+0xa2>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005814:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8005818:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800581c:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005820:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8005824:	e689      	b.n	800553a <HAL_PCD_IRQHandler+0xa2>
  ep->xfer_count = 0U;
 8005826:	f04f 0c00 	mov.w	ip, #0
  ep->is_in = 1U;
 800582a:	2701      	movs	r7, #1
 800582c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005830:	4610      	mov	r0, r2
 8005832:	f003 0207 	and.w	r2, r3, #7
 8005836:	0151      	lsls	r1, r2, #5
  ep->xfer_buff = pBuf;
 8005838:	1863      	adds	r3, r4, r1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800583a:	3128      	adds	r1, #40	; 0x28
  ep->num = ep_addr & EP_ADDR_MSK;
 800583c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  ep->xfer_len = len;
 8005840:	e9c3 650f 	strd	r6, r5, [r3, #60]	; 0x3c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005844:	4421      	add	r1, r4
  ep->xfer_count = 0U;
 8005846:	f8c3 c044 	str.w	ip, [r3, #68]	; 0x44
  ep->is_in = 1U;
 800584a:	f883 7029 	strb.w	r7, [r3, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800584e:	f001 fab3 	bl	8006db8 <USB_EPStartXfer>
 8005852:	6822      	ldr	r2, [r4, #0]
 8005854:	e671      	b.n	800553a <HAL_PCD_IRQHandler+0xa2>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005856:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800585a:	f894 1128 	ldrb.w	r1, [r4, #296]	; 0x128
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800585e:	4610      	mov	r0, r2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005860:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005864:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005868:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800586c:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8005870:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005874:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005878:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800587c:	f001 fc4a 	bl	8007114 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005880:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005884:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8005886:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005888:	8811      	ldrh	r1, [r2, #0]
 800588a:	400b      	ands	r3, r1
 800588c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005890:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8005892:	f002 fb6f 	bl	8007f74 <HAL_PCD_SetupStageCallback>
 8005896:	6822      	ldr	r2, [r4, #0]
 8005898:	e64f      	b.n	800553a <HAL_PCD_IRQHandler+0xa2>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800589a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800589e:	f899 1128 	ldrb.w	r1, [r9, #296]	; 0x128
 80058a2:	3306      	adds	r3, #6
 80058a4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80058a8:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 80058ac:	f3c8 0809 	ubfx	r8, r8, #0, #10
          if (count != 0U)
 80058b0:	f1b8 0f00 	cmp.w	r8, #0
 80058b4:	f43f af02 	beq.w	80056bc <HAL_PCD_IRQHandler+0x224>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80058b8:	4610      	mov	r0, r2
 80058ba:	4643      	mov	r3, r8
 80058bc:	f8b9 212e 	ldrh.w	r2, [r9, #302]	; 0x12e
 80058c0:	f8d9 113c 	ldr.w	r1, [r9, #316]	; 0x13c
 80058c4:	f001 fc26 	bl	8007114 <USB_ReadPMA>
 80058c8:	e6f8      	b.n	80056bc <HAL_PCD_IRQHandler+0x224>
 80058ca:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 80058ce:	e70c      	b.n	80056ea <HAL_PCD_IRQHandler+0x252>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80058d0:	3306      	adds	r3, #6
 80058d2:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 80058d6:	f3c8 0809 	ubfx	r8, r8, #0, #10
            if (count != 0U)
 80058da:	f1b8 0f00 	cmp.w	r8, #0
 80058de:	f43f aee5 	beq.w	80056ac <HAL_PCD_IRQHandler+0x214>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80058e2:	4643      	mov	r3, r8
 80058e4:	4610      	mov	r0, r2
 80058e6:	f8b9 2132 	ldrh.w	r2, [r9, #306]	; 0x132
 80058ea:	f8d9 113c 	ldr.w	r1, [r9, #316]	; 0x13c
 80058ee:	f001 fc11 	bl	8007114 <USB_ReadPMA>
 80058f2:	f899 3128 	ldrb.w	r3, [r9, #296]	; 0x128
 80058f6:	6821      	ldr	r1, [r4, #0]
 80058f8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80058fc:	e6d6      	b.n	80056ac <HAL_PCD_IRQHandler+0x214>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80058fe:	293e      	cmp	r1, #62	; 0x3e
 8005900:	d826      	bhi.n	8005950 <HAL_PCD_IRQHandler+0x4b8>
 8005902:	084d      	lsrs	r5, r1, #1
 8005904:	07cf      	lsls	r7, r1, #31
 8005906:	bf48      	it	mi
 8005908:	3501      	addmi	r5, #1
 800590a:	02ad      	lsls	r5, r5, #10
 800590c:	b2ad      	uxth	r5, r5
 800590e:	52c5      	strh	r5, [r0, r3]
 8005910:	e66a      	b.n	80055e8 <HAL_PCD_IRQHandler+0x150>
  ep->xfer_count = 0U;
 8005912:	f04f 0c00 	mov.w	ip, #0
 8005916:	f001 0107 	and.w	r1, r1, #7
 800591a:	014f      	lsls	r7, r1, #5
  ep->xfer_buff = pBuf;
 800591c:	19e2      	adds	r2, r4, r7
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800591e:	f507 7794 	add.w	r7, r7, #296	; 0x128
  ep->num = ep_addr & EP_ADDR_MSK;
 8005922:	f882 1128 	strb.w	r1, [r2, #296]	; 0x128
  ep->xfer_len = len;
 8005926:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140
  ep->xfer_buff = pBuf;
 800592a:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
  ep->xfer_count = 0U;
 800592e:	f8c2 c144 	str.w	ip, [r2, #324]	; 0x144
  ep->is_in = 0U;
 8005932:	f882 c129 	strb.w	ip, [r2, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005936:	19e1      	adds	r1, r4, r7
 8005938:	6820      	ldr	r0, [r4, #0]
 800593a:	f001 fa3d 	bl	8006db8 <USB_EPStartXfer>
 800593e:	6822      	ldr	r2, [r4, #0]
 8005940:	e662      	b.n	8005608 <HAL_PCD_IRQHandler+0x170>
 8005942:	bf00      	nop
 8005944:	ffffbf8f 	.word	0xffffbf8f
 8005948:	ffff8f0f 	.word	0xffff8f0f
 800594c:	ffff8f8f 	.word	0xffff8f8f
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005950:	094d      	lsrs	r5, r1, #5
 8005952:	06ce      	lsls	r6, r1, #27
 8005954:	4906      	ldr	r1, [pc, #24]	; (8005970 <HAL_PCD_IRQHandler+0x4d8>)
 8005956:	bf08      	it	eq
 8005958:	f105 35ff 	addeq.w	r5, r5, #4294967295
 800595c:	ea41 2585 	orr.w	r5, r1, r5, lsl #10
 8005960:	b2ad      	uxth	r5, r5
 8005962:	52c5      	strh	r5, [r0, r3]
 8005964:	e640      	b.n	80055e8 <HAL_PCD_IRQHandler+0x150>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005966:	4610      	mov	r0, r2
 8005968:	4643      	mov	r3, r8
 800596a:	f8b9 2130 	ldrh.w	r2, [r9, #304]	; 0x130
 800596e:	e7bc      	b.n	80058ea <HAL_PCD_IRQHandler+0x452>
 8005970:	ffff8000 	.word	0xffff8000

08005974 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8005974:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
 8005978:	2a01      	cmp	r2, #1
 800597a:	d00d      	beq.n	8005998 <HAL_PCD_SetAddress+0x24>
{
 800597c:	b510      	push	{r4, lr}
 800597e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005980:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8005982:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8005986:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800598a:	6800      	ldr	r0, [r0, #0]
 800598c:	f001 fbb2 	bl	80070f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005990:	2000      	movs	r0, #0
 8005992:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 8005996:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8005998:	2002      	movs	r0, #2
}
 800599a:	4770      	bx	lr

0800599c <HAL_PCD_EP_Open>:
{
 800599c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599e:	f001 0507 	and.w	r5, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 80059a2:	0609      	lsls	r1, r1, #24
 80059a4:	ea4f 1445 	mov.w	r4, r5, lsl #5
 80059a8:	d41f      	bmi.n	80059ea <HAL_PCD_EP_Open+0x4e>
    ep->is_in = 0U;
 80059aa:	2700      	movs	r7, #0
 80059ac:	1906      	adds	r6, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059ae:	f504 7194 	add.w	r1, r4, #296	; 0x128
    ep->is_in = 0U;
 80059b2:	f886 7129 	strb.w	r7, [r6, #297]	; 0x129
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059b6:	4401      	add	r1, r0
  if (ep->is_in != 0U)
 80059b8:	784c      	ldrb	r4, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059ba:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 80059bc:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 80059be:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80059c0:	b104      	cbz	r4, 80059c4 <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 80059c2:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 80059c4:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80059c6:	bf04      	itt	eq
 80059c8:	2300      	moveq	r3, #0
 80059ca:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80059cc:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d012      	beq.n	80059fa <HAL_PCD_EP_Open+0x5e>
 80059d4:	2301      	movs	r3, #1
 80059d6:	4604      	mov	r4, r0
 80059d8:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80059dc:	6800      	ldr	r0, [r0, #0]
 80059de:	f000 ff8d 	bl	80068fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80059e2:	2000      	movs	r0, #0
 80059e4:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 80059e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->is_in = 1U;
 80059ea:	2701      	movs	r7, #1
 80059ec:	1906      	adds	r6, r0, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059ee:	f104 0128 	add.w	r1, r4, #40	; 0x28
    ep->is_in = 1U;
 80059f2:	f886 7029 	strb.w	r7, [r6, #41]	; 0x29
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059f6:	4401      	add	r1, r0
 80059f8:	e7de      	b.n	80059b8 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 80059fa:	2002      	movs	r0, #2
}
 80059fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059fe:	bf00      	nop

08005a00 <HAL_PCD_EP_Close>:
{
 8005a00:	f001 0207 	and.w	r2, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 8005a04:	0609      	lsls	r1, r1, #24
{
 8005a06:	b510      	push	{r4, lr}
 8005a08:	ea4f 1342 	mov.w	r3, r2, lsl #5
  if ((ep_addr & 0x80U) == 0x80U)
 8005a0c:	d416      	bmi.n	8005a3c <HAL_PCD_EP_Close+0x3c>
    ep->is_in = 0U;
 8005a0e:	2400      	movs	r4, #0
 8005a10:	18c1      	adds	r1, r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a12:	f503 7394 	add.w	r3, r3, #296	; 0x128
    ep->is_in = 0U;
 8005a16:	f881 4129 	strb.w	r4, [r1, #297]	; 0x129
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a1a:	18c1      	adds	r1, r0, r3
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005a1c:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8005a1e:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d015      	beq.n	8005a52 <HAL_PCD_EP_Close+0x52>
 8005a26:	2301      	movs	r3, #1
 8005a28:	4604      	mov	r4, r0
 8005a2a:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005a2e:	6800      	ldr	r0, [r0, #0]
 8005a30:	f001 f8ec 	bl	8006c0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a34:	2000      	movs	r0, #0
 8005a36:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 8005a3a:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 8005a3c:	2401      	movs	r4, #1
 8005a3e:	18c1      	adds	r1, r0, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a40:	3328      	adds	r3, #40	; 0x28
    ep->is_in = 1U;
 8005a42:	f881 4029 	strb.w	r4, [r1, #41]	; 0x29
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a46:	18c1      	adds	r1, r0, r3
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005a48:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8005a4a:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d1e9      	bne.n	8005a26 <HAL_PCD_EP_Close+0x26>
 8005a52:	2002      	movs	r0, #2
}
 8005a54:	bd10      	pop	{r4, pc}
 8005a56:	bf00      	nop

08005a58 <HAL_PCD_EP_Receive>:
{
 8005a58:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_count = 0U;
 8005a5a:	2600      	movs	r6, #0
 8005a5c:	f001 0107 	and.w	r1, r1, #7
 8005a60:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 8005a62:	1944      	adds	r4, r0, r5
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a64:	f505 7594 	add.w	r5, r5, #296	; 0x128
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a68:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep->xfer_buff = pBuf;
 8005a6c:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a70:	1941      	adds	r1, r0, r5
  ep->xfer_len = len;
 8005a72:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a76:	6800      	ldr	r0, [r0, #0]
  ep->xfer_count = 0U;
 8005a78:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 8005a7c:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a80:	f001 f99a 	bl	8006db8 <USB_EPStartXfer>
}
 8005a84:	4630      	mov	r0, r6
 8005a86:	bd70      	pop	{r4, r5, r6, pc}

08005a88 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005a88:	f001 0107 	and.w	r1, r1, #7
 8005a8c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8005a90:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop

08005a98 <HAL_PCD_EP_Transmit>:
{
 8005a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ep->xfer_count = 0U;
 8005a9a:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8005a9c:	2701      	movs	r7, #1
 8005a9e:	f001 0107 	and.w	r1, r1, #7
 8005aa2:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 8005aa4:	1944      	adds	r4, r0, r5
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005aa6:	3528      	adds	r5, #40	; 0x28
  ep->num = ep_addr & EP_ADDR_MSK;
 8005aa8:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep->xfer_len = len;
 8005aac:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005ab0:	1941      	adds	r1, r0, r5
 8005ab2:	6800      	ldr	r0, [r0, #0]
  ep->is_in = 1U;
 8005ab4:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
  ep->xfer_count = 0U;
 8005ab8:	6466      	str	r6, [r4, #68]	; 0x44
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005aba:	f001 f97d 	bl	8006db8 <USB_EPStartXfer>
}
 8005abe:	4630      	mov	r0, r6
 8005ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ac2:	bf00      	nop

08005ac4 <HAL_PCD_EP_SetStall>:
{
 8005ac4:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005ac6:	6843      	ldr	r3, [r0, #4]
 8005ac8:	f001 0507 	and.w	r5, r1, #7
 8005acc:	429d      	cmp	r5, r3
 8005ace:	d81b      	bhi.n	8005b08 <HAL_PCD_EP_SetStall+0x44>
  if ((0x80U & ep_addr) == 0x80U)
 8005ad0:	060b      	lsls	r3, r1, #24
 8005ad2:	d41b      	bmi.n	8005b0c <HAL_PCD_EP_SetStall+0x48>
    ep->is_in = 0U;
 8005ad4:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8005ad6:	0149      	lsls	r1, r1, #5
    ep->is_in = 0U;
 8005ad8:	1843      	adds	r3, r0, r1
 8005ada:	f883 4129 	strb.w	r4, [r3, #297]	; 0x129
  ep->is_stall = 1U;
 8005ade:	2301      	movs	r3, #1
    ep = &hpcd->OUT_ep[ep_addr];
 8005ae0:	f501 7294 	add.w	r2, r1, #296	; 0x128
 8005ae4:	1881      	adds	r1, r0, r2
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ae6:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8005ae8:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8005aea:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d01b      	beq.n	8005b2a <HAL_PCD_EP_SetStall+0x66>
 8005af2:	4604      	mov	r4, r0
 8005af4:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005af8:	6800      	ldr	r0, [r0, #0]
 8005afa:	f001 fa85 	bl	8007008 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005afe:	b1b5      	cbz	r5, 8005b2e <HAL_PCD_EP_SetStall+0x6a>
  __HAL_UNLOCK(hpcd);
 8005b00:	2000      	movs	r0, #0
 8005b02:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 8005b06:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005b08:	2001      	movs	r0, #1
}
 8005b0a:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8005b0c:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b0e:	016b      	lsls	r3, r5, #5
 8005b10:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 8005b14:	4403      	add	r3, r0
 8005b16:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 8005b1a:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b1c:	4401      	add	r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b1e:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8005b20:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8005b22:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d1e3      	bne.n	8005af2 <HAL_PCD_EP_SetStall+0x2e>
 8005b2a:	2002      	movs	r0, #2
}
 8005b2c:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005b2e:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8005b32:	6820      	ldr	r0, [r4, #0]
 8005b34:	f001 faec 	bl	8007110 <USB_EP0_OutStart>
 8005b38:	e7e2      	b.n	8005b00 <HAL_PCD_EP_SetStall+0x3c>
 8005b3a:	bf00      	nop

08005b3c <HAL_PCD_EP_ClrStall>:
{
 8005b3c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005b3e:	6843      	ldr	r3, [r0, #4]
 8005b40:	f001 020f 	and.w	r2, r1, #15
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d81e      	bhi.n	8005b86 <HAL_PCD_EP_ClrStall+0x4a>
 8005b48:	f001 0207 	and.w	r2, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 8005b4c:	0609      	lsls	r1, r1, #24
 8005b4e:	ea4f 1342 	mov.w	r3, r2, lsl #5
 8005b52:	d41a      	bmi.n	8005b8a <HAL_PCD_EP_ClrStall+0x4e>
    ep->is_in = 0U;
 8005b54:	2500      	movs	r5, #0
 8005b56:	18c4      	adds	r4, r0, r3
 8005b58:	f884 5129 	strb.w	r5, [r4, #297]	; 0x129
  ep->is_stall = 0U;
 8005b5c:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b5e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8005b62:	4401      	add	r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b64:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8005b66:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8005b68:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d01a      	beq.n	8005ba6 <HAL_PCD_EP_ClrStall+0x6a>
 8005b70:	2301      	movs	r3, #1
 8005b72:	4604      	mov	r4, r0
 8005b74:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b78:	6800      	ldr	r0, [r0, #0]
 8005b7a:	f001 fa67 	bl	800704c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005b7e:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
  return HAL_OK;
 8005b82:	4628      	mov	r0, r5
}
 8005b84:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005b86:	2001      	movs	r0, #1
}
 8005b88:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8005b8a:	2501      	movs	r5, #1
 8005b8c:	18c4      	adds	r4, r0, r3
 8005b8e:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
  ep->is_stall = 0U;
 8005b92:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b94:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8005b98:	4401      	add	r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b9a:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8005b9c:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8005b9e:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d1e4      	bne.n	8005b70 <HAL_PCD_EP_ClrStall+0x34>
 8005ba6:	2002      	movs	r0, #2
}
 8005ba8:	bd38      	pop	{r3, r4, r5, pc}
 8005baa:	bf00      	nop

08005bac <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005bac:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005bb0:	d00d      	beq.n	8005bce <HAL_PCDEx_PMAConfig+0x22>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bb2:	f001 0107 	and.w	r1, r1, #7
 8005bb6:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8005bba:	3028      	adds	r0, #40	; 0x28
 8005bbc:	b299      	uxth	r1, r3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005bbe:	b16a      	cbz	r2, 8005bdc <HAL_PCDEx_PMAConfig+0x30>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005bc0:	2201      	movs	r2, #1
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005bc2:	0c1b      	lsrs	r3, r3, #16
 8005bc4:	8143      	strh	r3, [r0, #10]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005bc6:	8101      	strh	r1, [r0, #8]
 8005bc8:	7302      	strb	r2, [r0, #12]
  }

  return HAL_OK;
}
 8005bca:	2000      	movs	r0, #0
 8005bcc:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8005bce:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8005bd2:	f500 7094 	add.w	r0, r0, #296	; 0x128
 8005bd6:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8005bd8:	2a00      	cmp	r2, #0
 8005bda:	d1f1      	bne.n	8005bc0 <HAL_PCDEx_PMAConfig+0x14>
    ep->pmaadress = (uint16_t)pmaadress;
 8005bdc:	80c1      	strh	r1, [r0, #6]
 8005bde:	7302      	strb	r2, [r0, #12]
}
 8005be0:	2000      	movs	r0, #0
 8005be2:	4770      	bx	lr

08005be4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005be4:	2800      	cmp	r0, #0
 8005be6:	f000 8155 	beq.w	8005e94 <HAL_RCC_OscConfig+0x2b0>
{
 8005bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bee:	6803      	ldr	r3, [r0, #0]
{
 8005bf0:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bf2:	07dd      	lsls	r5, r3, #31
 8005bf4:	4604      	mov	r4, r0
 8005bf6:	d535      	bpl.n	8005c64 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005bf8:	49a8      	ldr	r1, [pc, #672]	; (8005e9c <HAL_RCC_OscConfig+0x2b8>)
 8005bfa:	684a      	ldr	r2, [r1, #4]
 8005bfc:	f002 020c 	and.w	r2, r2, #12
 8005c00:	2a04      	cmp	r2, #4
 8005c02:	f000 8105 	beq.w	8005e10 <HAL_RCC_OscConfig+0x22c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c06:	684a      	ldr	r2, [r1, #4]
 8005c08:	f002 020c 	and.w	r2, r2, #12
 8005c0c:	2a08      	cmp	r2, #8
 8005c0e:	f000 80fb 	beq.w	8005e08 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c12:	6863      	ldr	r3, [r4, #4]
 8005c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c18:	d010      	beq.n	8005c3c <HAL_RCC_OscConfig+0x58>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 8120 	beq.w	8005e60 <HAL_RCC_OscConfig+0x27c>
 8005c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c24:	f000 8178 	beq.w	8005f18 <HAL_RCC_OscConfig+0x334>
 8005c28:	4b9c      	ldr	r3, [pc, #624]	; (8005e9c <HAL_RCC_OscConfig+0x2b8>)
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	e004      	b.n	8005c46 <HAL_RCC_OscConfig+0x62>
 8005c3c:	4a97      	ldr	r2, [pc, #604]	; (8005e9c <HAL_RCC_OscConfig+0x2b8>)
 8005c3e:	6813      	ldr	r3, [r2, #0]
 8005c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c44:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c46:	f7fe fb5d 	bl	8004304 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c4a:	4d94      	ldr	r5, [pc, #592]	; (8005e9c <HAL_RCC_OscConfig+0x2b8>)
        tickstart = HAL_GetTick();
 8005c4c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c4e:	e005      	b.n	8005c5c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c50:	f7fe fb58 	bl	8004304 <HAL_GetTick>
 8005c54:	1b80      	subs	r0, r0, r6
 8005c56:	2864      	cmp	r0, #100	; 0x64
 8005c58:	f200 80f5 	bhi.w	8005e46 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c5c:	682b      	ldr	r3, [r5, #0]
 8005c5e:	039a      	lsls	r2, r3, #14
 8005c60:	d5f6      	bpl.n	8005c50 <HAL_RCC_OscConfig+0x6c>
 8005c62:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c64:	079f      	lsls	r7, r3, #30
 8005c66:	d44d      	bmi.n	8005d04 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c68:	071a      	lsls	r2, r3, #28
 8005c6a:	d522      	bpl.n	8005cb2 <HAL_RCC_OscConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c6c:	69a3      	ldr	r3, [r4, #24]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 80ba 	beq.w	8005de8 <HAL_RCC_OscConfig+0x204>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c74:	2201      	movs	r2, #1
 8005c76:	4b8a      	ldr	r3, [pc, #552]	; (8005ea0 <HAL_RCC_OscConfig+0x2bc>)

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c78:	4d88      	ldr	r5, [pc, #544]	; (8005e9c <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_ENABLE();
 8005c7a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005c7c:	f7fe fb42 	bl	8004304 <HAL_GetTick>
 8005c80:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c82:	e005      	b.n	8005c90 <HAL_RCC_OscConfig+0xac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c84:	f7fe fb3e 	bl	8004304 <HAL_GetTick>
 8005c88:	1b80      	subs	r0, r0, r6
 8005c8a:	2802      	cmp	r0, #2
 8005c8c:	f200 80db 	bhi.w	8005e46 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c90:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c92:	079b      	lsls	r3, r3, #30
 8005c94:	d5f6      	bpl.n	8005c84 <HAL_RCC_OscConfig+0xa0>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005c96:	4b83      	ldr	r3, [pc, #524]	; (8005ea4 <HAL_RCC_OscConfig+0x2c0>)
 8005c98:	4a83      	ldr	r2, [pc, #524]	; (8005ea8 <HAL_RCC_OscConfig+0x2c4>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca0:	0a5b      	lsrs	r3, r3, #9
 8005ca2:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8005ca4:	bf00      	nop
  }
  while (Delay --);
 8005ca6:	9b01      	ldr	r3, [sp, #4]
 8005ca8:	1e5a      	subs	r2, r3, #1
 8005caa:	9201      	str	r2, [sp, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1f9      	bne.n	8005ca4 <HAL_RCC_OscConfig+0xc0>
 8005cb0:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cb2:	075d      	lsls	r5, r3, #29
 8005cb4:	d569      	bpl.n	8005d8a <HAL_RCC_OscConfig+0x1a6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cb6:	4b79      	ldr	r3, [pc, #484]	; (8005e9c <HAL_RCC_OscConfig+0x2b8>)
 8005cb8:	69da      	ldr	r2, [r3, #28]
 8005cba:	00d0      	lsls	r0, r2, #3
 8005cbc:	f100 80ec 	bmi.w	8005e98 <HAL_RCC_OscConfig+0x2b4>
      pwrclkchanged = SET;
 8005cc0:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cc2:	69da      	ldr	r2, [r3, #28]
 8005cc4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005cc8:	61da      	str	r2, [r3, #28]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd4:	4b75      	ldr	r3, [pc, #468]	; (8005eac <HAL_RCC_OscConfig+0x2c8>)
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	05d1      	lsls	r1, r2, #23
 8005cda:	f140 80a3 	bpl.w	8005e24 <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cde:	68e3      	ldr	r3, [r4, #12]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d037      	beq.n	8005d54 <HAL_RCC_OscConfig+0x170>
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 80e7 	beq.w	8005eb8 <HAL_RCC_OscConfig+0x2d4>
 8005cea:	2b05      	cmp	r3, #5
 8005cec:	4b6b      	ldr	r3, [pc, #428]	; (8005e9c <HAL_RCC_OscConfig+0x2b8>)
 8005cee:	6a1a      	ldr	r2, [r3, #32]
 8005cf0:	f000 811f 	beq.w	8005f32 <HAL_RCC_OscConfig+0x34e>
 8005cf4:	f022 0201 	bic.w	r2, r2, #1
 8005cf8:	621a      	str	r2, [r3, #32]
 8005cfa:	6a1a      	ldr	r2, [r3, #32]
 8005cfc:	f022 0204 	bic.w	r2, r2, #4
 8005d00:	621a      	str	r2, [r3, #32]
 8005d02:	e02c      	b.n	8005d5e <HAL_RCC_OscConfig+0x17a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d04:	4a65      	ldr	r2, [pc, #404]	; (8005e9c <HAL_RCC_OscConfig+0x2b8>)
 8005d06:	6851      	ldr	r1, [r2, #4]
 8005d08:	f011 0f0c 	tst.w	r1, #12
 8005d0c:	d061      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005d0e:	6851      	ldr	r1, [r2, #4]
 8005d10:	f001 010c 	and.w	r1, r1, #12
 8005d14:	2908      	cmp	r1, #8
 8005d16:	d059      	beq.n	8005dcc <HAL_RCC_OscConfig+0x1e8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d18:	6923      	ldr	r3, [r4, #16]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f000 80eb 	beq.w	8005ef6 <HAL_RCC_OscConfig+0x312>
        __HAL_RCC_HSI_ENABLE();
 8005d20:	2201      	movs	r2, #1
 8005d22:	4b63      	ldr	r3, [pc, #396]	; (8005eb0 <HAL_RCC_OscConfig+0x2cc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d24:	4d5d      	ldr	r5, [pc, #372]	; (8005e9c <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_ENABLE();
 8005d26:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005d28:	f7fe faec 	bl	8004304 <HAL_GetTick>
 8005d2c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d2e:	e005      	b.n	8005d3c <HAL_RCC_OscConfig+0x158>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d30:	f7fe fae8 	bl	8004304 <HAL_GetTick>
 8005d34:	1b80      	subs	r0, r0, r6
 8005d36:	2802      	cmp	r0, #2
 8005d38:	f200 8085 	bhi.w	8005e46 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d3c:	682b      	ldr	r3, [r5, #0]
 8005d3e:	0798      	lsls	r0, r3, #30
 8005d40:	d5f6      	bpl.n	8005d30 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d42:	682b      	ldr	r3, [r5, #0]
 8005d44:	6962      	ldr	r2, [r4, #20]
 8005d46:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005d4a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005d4e:	602b      	str	r3, [r5, #0]
 8005d50:	6823      	ldr	r3, [r4, #0]
 8005d52:	e789      	b.n	8005c68 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d54:	4a51      	ldr	r2, [pc, #324]	; (8005e9c <HAL_RCC_OscConfig+0x2b8>)
 8005d56:	6a13      	ldr	r3, [r2, #32]
 8005d58:	f043 0301 	orr.w	r3, r3, #1
 8005d5c:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8005d5e:	f7fe fad1 	bl	8004304 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d62:	4e4e      	ldr	r6, [pc, #312]	; (8005e9c <HAL_RCC_OscConfig+0x2b8>)
      tickstart = HAL_GetTick();
 8005d64:	4680      	mov	r8, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d66:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d6a:	e005      	b.n	8005d78 <HAL_RCC_OscConfig+0x194>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d6c:	f7fe faca 	bl	8004304 <HAL_GetTick>
 8005d70:	eba0 0008 	sub.w	r0, r0, r8
 8005d74:	42b8      	cmp	r0, r7
 8005d76:	d866      	bhi.n	8005e46 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d78:	6a33      	ldr	r3, [r6, #32]
 8005d7a:	079b      	lsls	r3, r3, #30
 8005d7c:	d5f6      	bpl.n	8005d6c <HAL_RCC_OscConfig+0x188>
    if (pwrclkchanged == SET)
 8005d7e:	b125      	cbz	r5, 8005d8a <HAL_RCC_OscConfig+0x1a6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d80:	4a46      	ldr	r2, [pc, #280]	; (8005e9c <HAL_RCC_OscConfig+0x2b8>)
 8005d82:	69d3      	ldr	r3, [r2, #28]
 8005d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d88:	61d3      	str	r3, [r2, #28]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d8a:	69e0      	ldr	r0, [r4, #28]
 8005d8c:	b1d0      	cbz	r0, 8005dc4 <HAL_RCC_OscConfig+0x1e0>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d8e:	4d43      	ldr	r5, [pc, #268]	; (8005e9c <HAL_RCC_OscConfig+0x2b8>)
 8005d90:	686a      	ldr	r2, [r5, #4]
 8005d92:	f002 020c 	and.w	r2, r2, #12
 8005d96:	2a08      	cmp	r2, #8
 8005d98:	f000 80d3 	beq.w	8005f42 <HAL_RCC_OscConfig+0x35e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d9c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005d9e:	f04f 0100 	mov.w	r1, #0
 8005da2:	4a44      	ldr	r2, [pc, #272]	; (8005eb4 <HAL_RCC_OscConfig+0x2d0>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005da4:	f000 80de 	beq.w	8005f64 <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_PLL_DISABLE();
 8005da8:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8005daa:	f7fe faab 	bl	8004304 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005dae:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8005db0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005db2:	e004      	b.n	8005dbe <HAL_RCC_OscConfig+0x1da>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005db4:	f7fe faa6 	bl	8004304 <HAL_GetTick>
 8005db8:	1b40      	subs	r0, r0, r5
 8005dba:	2802      	cmp	r0, #2
 8005dbc:	d843      	bhi.n	8005e46 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	019b      	lsls	r3, r3, #6
 8005dc2:	d4f7      	bmi.n	8005db4 <HAL_RCC_OscConfig+0x1d0>
  return HAL_OK;
 8005dc4:	2000      	movs	r0, #0
}
 8005dc6:	b002      	add	sp, #8
 8005dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005dcc:	6852      	ldr	r2, [r2, #4]
 8005dce:	03d6      	lsls	r6, r2, #15
 8005dd0:	d4a2      	bmi.n	8005d18 <HAL_RCC_OscConfig+0x134>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dd2:	4a32      	ldr	r2, [pc, #200]	; (8005e9c <HAL_RCC_OscConfig+0x2b8>)
 8005dd4:	6812      	ldr	r2, [r2, #0]
 8005dd6:	0795      	lsls	r5, r2, #30
 8005dd8:	d539      	bpl.n	8005e4e <HAL_RCC_OscConfig+0x26a>
 8005dda:	6922      	ldr	r2, [r4, #16]
 8005ddc:	2a01      	cmp	r2, #1
 8005dde:	d036      	beq.n	8005e4e <HAL_RCC_OscConfig+0x26a>
        return HAL_ERROR;
 8005de0:	2001      	movs	r0, #1
}
 8005de2:	b002      	add	sp, #8
 8005de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8005de8:	4a2d      	ldr	r2, [pc, #180]	; (8005ea0 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dea:	4d2c      	ldr	r5, [pc, #176]	; (8005e9c <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_DISABLE();
 8005dec:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005dee:	f7fe fa89 	bl	8004304 <HAL_GetTick>
 8005df2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005df4:	e004      	b.n	8005e00 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005df6:	f7fe fa85 	bl	8004304 <HAL_GetTick>
 8005dfa:	1b80      	subs	r0, r0, r6
 8005dfc:	2802      	cmp	r0, #2
 8005dfe:	d822      	bhi.n	8005e46 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e00:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e02:	079f      	lsls	r7, r3, #30
 8005e04:	d4f7      	bmi.n	8005df6 <HAL_RCC_OscConfig+0x212>
 8005e06:	e753      	b.n	8005cb0 <HAL_RCC_OscConfig+0xcc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005e08:	684a      	ldr	r2, [r1, #4]
 8005e0a:	03d0      	lsls	r0, r2, #15
 8005e0c:	f57f af01 	bpl.w	8005c12 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e10:	4a22      	ldr	r2, [pc, #136]	; (8005e9c <HAL_RCC_OscConfig+0x2b8>)
 8005e12:	6812      	ldr	r2, [r2, #0]
 8005e14:	0391      	lsls	r1, r2, #14
 8005e16:	f57f af25 	bpl.w	8005c64 <HAL_RCC_OscConfig+0x80>
 8005e1a:	6862      	ldr	r2, [r4, #4]
 8005e1c:	2a00      	cmp	r2, #0
 8005e1e:	f47f af21 	bne.w	8005c64 <HAL_RCC_OscConfig+0x80>
 8005e22:	e7dd      	b.n	8005de0 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e24:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e26:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e2c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005e2e:	f7fe fa69 	bl	8004304 <HAL_GetTick>
 8005e32:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e34:	6833      	ldr	r3, [r6, #0]
 8005e36:	05da      	lsls	r2, r3, #23
 8005e38:	f53f af51 	bmi.w	8005cde <HAL_RCC_OscConfig+0xfa>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e3c:	f7fe fa62 	bl	8004304 <HAL_GetTick>
 8005e40:	1bc0      	subs	r0, r0, r7
 8005e42:	2864      	cmp	r0, #100	; 0x64
 8005e44:	d9f6      	bls.n	8005e34 <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 8005e46:	2003      	movs	r0, #3
}
 8005e48:	b002      	add	sp, #8
 8005e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e4e:	4913      	ldr	r1, [pc, #76]	; (8005e9c <HAL_RCC_OscConfig+0x2b8>)
 8005e50:	6960      	ldr	r0, [r4, #20]
 8005e52:	680a      	ldr	r2, [r1, #0]
 8005e54:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8005e58:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8005e5c:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e5e:	e703      	b.n	8005c68 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e64:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005e68:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e6a:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e6c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e78:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005e7a:	f7fe fa43 	bl	8004304 <HAL_GetTick>
 8005e7e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e80:	e004      	b.n	8005e8c <HAL_RCC_OscConfig+0x2a8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e82:	f7fe fa3f 	bl	8004304 <HAL_GetTick>
 8005e86:	1b80      	subs	r0, r0, r6
 8005e88:	2864      	cmp	r0, #100	; 0x64
 8005e8a:	d8dc      	bhi.n	8005e46 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e8c:	682b      	ldr	r3, [r5, #0]
 8005e8e:	039b      	lsls	r3, r3, #14
 8005e90:	d4f7      	bmi.n	8005e82 <HAL_RCC_OscConfig+0x29e>
 8005e92:	e6e6      	b.n	8005c62 <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 8005e94:	2001      	movs	r0, #1
}
 8005e96:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8005e98:	2500      	movs	r5, #0
 8005e9a:	e71b      	b.n	8005cd4 <HAL_RCC_OscConfig+0xf0>
 8005e9c:	40021000 	.word	0x40021000
 8005ea0:	42420480 	.word	0x42420480
 8005ea4:	20000038 	.word	0x20000038
 8005ea8:	10624dd3 	.word	0x10624dd3
 8005eac:	40007000 	.word	0x40007000
 8005eb0:	42420000 	.word	0x42420000
 8005eb4:	42420060 	.word	0x42420060
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005eb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ebc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005ec0:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ec2:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ec4:	f022 0201 	bic.w	r2, r2, #1
 8005ec8:	621a      	str	r2, [r3, #32]
 8005eca:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ecc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ed0:	f022 0204 	bic.w	r2, r2, #4
 8005ed4:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 8005ed6:	f7fe fa15 	bl	8004304 <HAL_GetTick>
 8005eda:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005edc:	e004      	b.n	8005ee8 <HAL_RCC_OscConfig+0x304>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ede:	f7fe fa11 	bl	8004304 <HAL_GetTick>
 8005ee2:	1bc0      	subs	r0, r0, r7
 8005ee4:	4540      	cmp	r0, r8
 8005ee6:	d8ae      	bhi.n	8005e46 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ee8:	6a33      	ldr	r3, [r6, #32]
 8005eea:	0798      	lsls	r0, r3, #30
 8005eec:	d4f7      	bmi.n	8005ede <HAL_RCC_OscConfig+0x2fa>
    if (pwrclkchanged == SET)
 8005eee:	2d00      	cmp	r5, #0
 8005ef0:	f43f af4b 	beq.w	8005d8a <HAL_RCC_OscConfig+0x1a6>
 8005ef4:	e744      	b.n	8005d80 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_DISABLE();
 8005ef6:	4a34      	ldr	r2, [pc, #208]	; (8005fc8 <HAL_RCC_OscConfig+0x3e4>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ef8:	4d34      	ldr	r5, [pc, #208]	; (8005fcc <HAL_RCC_OscConfig+0x3e8>)
        __HAL_RCC_HSI_DISABLE();
 8005efa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005efc:	f7fe fa02 	bl	8004304 <HAL_GetTick>
 8005f00:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f02:	e004      	b.n	8005f0e <HAL_RCC_OscConfig+0x32a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f04:	f7fe f9fe 	bl	8004304 <HAL_GetTick>
 8005f08:	1b80      	subs	r0, r0, r6
 8005f0a:	2802      	cmp	r0, #2
 8005f0c:	d89b      	bhi.n	8005e46 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f0e:	682b      	ldr	r3, [r5, #0]
 8005f10:	0799      	lsls	r1, r3, #30
 8005f12:	d4f7      	bmi.n	8005f04 <HAL_RCC_OscConfig+0x320>
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	e6a7      	b.n	8005c68 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f1c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	e689      	b.n	8005c46 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f32:	f042 0204 	orr.w	r2, r2, #4
 8005f36:	621a      	str	r2, [r3, #32]
 8005f38:	6a1a      	ldr	r2, [r3, #32]
 8005f3a:	f042 0201 	orr.w	r2, r2, #1
 8005f3e:	621a      	str	r2, [r3, #32]
 8005f40:	e70d      	b.n	8005d5e <HAL_RCC_OscConfig+0x17a>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f42:	2801      	cmp	r0, #1
 8005f44:	f43f af4d 	beq.w	8005de2 <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 8005f48:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f4a:	6a22      	ldr	r2, [r4, #32]
 8005f4c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8005f50:	4291      	cmp	r1, r2
 8005f52:	f47f af45 	bne.w	8005de0 <HAL_RCC_OscConfig+0x1fc>
 8005f56:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005f58:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 8005f5c:	1a18      	subs	r0, r3, r0
 8005f5e:	bf18      	it	ne
 8005f60:	2001      	movne	r0, #1
 8005f62:	e73e      	b.n	8005de2 <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_PLL_DISABLE();
 8005f64:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8005f66:	f7fe f9cd 	bl	8004304 <HAL_GetTick>
 8005f6a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f6c:	e005      	b.n	8005f7a <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f6e:	f7fe f9c9 	bl	8004304 <HAL_GetTick>
 8005f72:	1b80      	subs	r0, r0, r6
 8005f74:	2802      	cmp	r0, #2
 8005f76:	f63f af66 	bhi.w	8005e46 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f7a:	682b      	ldr	r3, [r5, #0]
 8005f7c:	0199      	lsls	r1, r3, #6
 8005f7e:	d4f6      	bmi.n	8005f6e <HAL_RCC_OscConfig+0x38a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005f80:	6a22      	ldr	r2, [r4, #32]
 8005f82:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005f86:	d105      	bne.n	8005f94 <HAL_RCC_OscConfig+0x3b0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005f88:	686b      	ldr	r3, [r5, #4]
 8005f8a:	68a1      	ldr	r1, [r4, #8]
 8005f8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f90:	430b      	orrs	r3, r1
 8005f92:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005f94:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f96:	4b0d      	ldr	r3, [pc, #52]	; (8005fcc <HAL_RCC_OscConfig+0x3e8>)
 8005f98:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005f9a:	6859      	ldr	r1, [r3, #4]
 8005f9c:	4302      	orrs	r2, r0
 8005f9e:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8005fa2:	480b      	ldr	r0, [pc, #44]	; (8005fd0 <HAL_RCC_OscConfig+0x3ec>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8005fa8:	6005      	str	r5, [r0, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005faa:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 8005fac:	f7fe f9aa 	bl	8004304 <HAL_GetTick>
 8005fb0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005fb2:	e005      	b.n	8005fc0 <HAL_RCC_OscConfig+0x3dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fb4:	f7fe f9a6 	bl	8004304 <HAL_GetTick>
 8005fb8:	1b40      	subs	r0, r0, r5
 8005fba:	2802      	cmp	r0, #2
 8005fbc:	f63f af43 	bhi.w	8005e46 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	019a      	lsls	r2, r3, #6
 8005fc4:	d5f6      	bpl.n	8005fb4 <HAL_RCC_OscConfig+0x3d0>
 8005fc6:	e6fd      	b.n	8005dc4 <HAL_RCC_OscConfig+0x1e0>
 8005fc8:	42420000 	.word	0x42420000
 8005fcc:	40021000 	.word	0x40021000
 8005fd0:	42420060 	.word	0x42420060

08005fd4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005fd4:	b178      	cbz	r0, 8005ff6 <HAL_RCC_ClockConfig+0x22>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fd6:	4a5d      	ldr	r2, [pc, #372]	; (800614c <HAL_RCC_ClockConfig+0x178>)
 8005fd8:	6813      	ldr	r3, [r2, #0]
 8005fda:	f003 0307 	and.w	r3, r3, #7
 8005fde:	428b      	cmp	r3, r1
 8005fe0:	d20b      	bcs.n	8005ffa <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fe2:	6813      	ldr	r3, [r2, #0]
 8005fe4:	f023 0307 	bic.w	r3, r3, #7
 8005fe8:	430b      	orrs	r3, r1
 8005fea:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fec:	6813      	ldr	r3, [r2, #0]
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	428b      	cmp	r3, r1
 8005ff4:	d001      	beq.n	8005ffa <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8005ff6:	2001      	movs	r0, #1
}
 8005ff8:	4770      	bx	lr
{
 8005ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ffe:	6803      	ldr	r3, [r0, #0]
{
 8006000:	b086      	sub	sp, #24
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006002:	079d      	lsls	r5, r3, #30
 8006004:	d514      	bpl.n	8006030 <HAL_RCC_ClockConfig+0x5c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006006:	075c      	lsls	r4, r3, #29
 8006008:	d504      	bpl.n	8006014 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800600a:	4c51      	ldr	r4, [pc, #324]	; (8006150 <HAL_RCC_ClockConfig+0x17c>)
 800600c:	6862      	ldr	r2, [r4, #4]
 800600e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006012:	6062      	str	r2, [r4, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006014:	071a      	lsls	r2, r3, #28
 8006016:	d504      	bpl.n	8006022 <HAL_RCC_ClockConfig+0x4e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006018:	4c4d      	ldr	r4, [pc, #308]	; (8006150 <HAL_RCC_ClockConfig+0x17c>)
 800601a:	6862      	ldr	r2, [r4, #4]
 800601c:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8006020:	6062      	str	r2, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006022:	4c4b      	ldr	r4, [pc, #300]	; (8006150 <HAL_RCC_ClockConfig+0x17c>)
 8006024:	6885      	ldr	r5, [r0, #8]
 8006026:	6862      	ldr	r2, [r4, #4]
 8006028:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800602c:	432a      	orrs	r2, r5
 800602e:	6062      	str	r2, [r4, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006030:	07db      	lsls	r3, r3, #31
 8006032:	4604      	mov	r4, r0
 8006034:	460d      	mov	r5, r1
 8006036:	d520      	bpl.n	800607a <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006038:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800603a:	4b45      	ldr	r3, [pc, #276]	; (8006150 <HAL_RCC_ClockConfig+0x17c>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800603c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800603e:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006040:	d06f      	beq.n	8006122 <HAL_RCC_ClockConfig+0x14e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006042:	2a02      	cmp	r2, #2
 8006044:	d07e      	beq.n	8006144 <HAL_RCC_ClockConfig+0x170>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006046:	0798      	lsls	r0, r3, #30
 8006048:	d527      	bpl.n	800609a <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800604a:	4e41      	ldr	r6, [pc, #260]	; (8006150 <HAL_RCC_ClockConfig+0x17c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800604c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006050:	6873      	ldr	r3, [r6, #4]
 8006052:	f023 0303 	bic.w	r3, r3, #3
 8006056:	4313      	orrs	r3, r2
 8006058:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800605a:	f7fe f953 	bl	8004304 <HAL_GetTick>
 800605e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006060:	e004      	b.n	800606c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006062:	f7fe f94f 	bl	8004304 <HAL_GetTick>
 8006066:	1bc0      	subs	r0, r0, r7
 8006068:	4540      	cmp	r0, r8
 800606a:	d869      	bhi.n	8006140 <HAL_RCC_ClockConfig+0x16c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800606c:	6873      	ldr	r3, [r6, #4]
 800606e:	6862      	ldr	r2, [r4, #4]
 8006070:	f003 030c 	and.w	r3, r3, #12
 8006074:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006078:	d1f3      	bne.n	8006062 <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800607a:	4a34      	ldr	r2, [pc, #208]	; (800614c <HAL_RCC_ClockConfig+0x178>)
 800607c:	6813      	ldr	r3, [r2, #0]
 800607e:	f003 0307 	and.w	r3, r3, #7
 8006082:	42ab      	cmp	r3, r5
 8006084:	d90d      	bls.n	80060a2 <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006086:	6813      	ldr	r3, [r2, #0]
 8006088:	f023 0307 	bic.w	r3, r3, #7
 800608c:	432b      	orrs	r3, r5
 800608e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006090:	6813      	ldr	r3, [r2, #0]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	42ab      	cmp	r3, r5
 8006098:	d003      	beq.n	80060a2 <HAL_RCC_ClockConfig+0xce>
    return HAL_ERROR;
 800609a:	2001      	movs	r0, #1
}
 800609c:	b006      	add	sp, #24
 800609e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	0759      	lsls	r1, r3, #29
 80060a6:	d506      	bpl.n	80060b6 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060a8:	4929      	ldr	r1, [pc, #164]	; (8006150 <HAL_RCC_ClockConfig+0x17c>)
 80060aa:	68e0      	ldr	r0, [r4, #12]
 80060ac:	684a      	ldr	r2, [r1, #4]
 80060ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060b2:	4302      	orrs	r2, r0
 80060b4:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060b6:	071a      	lsls	r2, r3, #28
 80060b8:	d507      	bpl.n	80060ca <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80060ba:	4a25      	ldr	r2, [pc, #148]	; (8006150 <HAL_RCC_ClockConfig+0x17c>)
 80060bc:	6921      	ldr	r1, [r4, #16]
 80060be:	6853      	ldr	r3, [r2, #4]
 80060c0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80060c4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80060c8:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80060ca:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80060ce:	4b21      	ldr	r3, [pc, #132]	; (8006154 <HAL_RCC_ClockConfig+0x180>)
 80060d0:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80060d2:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80060d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060d8:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 80060dc:	491c      	ldr	r1, [pc, #112]	; (8006150 <HAL_RCC_ClockConfig+0x17c>)
 80060de:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80060e0:	f002 030c 	and.w	r3, r2, #12
 80060e4:	2b08      	cmp	r3, #8
 80060e6:	d11a      	bne.n	800611e <HAL_RCC_ClockConfig+0x14a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80060e8:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80060ec:	4423      	add	r3, r4
 80060ee:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80060f2:	03d3      	lsls	r3, r2, #15
 80060f4:	d418      	bmi.n	8006128 <HAL_RCC_ClockConfig+0x154>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80060f6:	4b18      	ldr	r3, [pc, #96]	; (8006158 <HAL_RCC_ClockConfig+0x184>)
 80060f8:	fb03 f300 	mul.w	r3, r3, r0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80060fc:	4a14      	ldr	r2, [pc, #80]	; (8006150 <HAL_RCC_ClockConfig+0x17c>)
 80060fe:	4817      	ldr	r0, [pc, #92]	; (800615c <HAL_RCC_ClockConfig+0x188>)
 8006100:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8006102:	4917      	ldr	r1, [pc, #92]	; (8006160 <HAL_RCC_ClockConfig+0x18c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006104:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006108:	5c80      	ldrb	r0, [r0, r2]
 800610a:	4a16      	ldr	r2, [pc, #88]	; (8006164 <HAL_RCC_ClockConfig+0x190>)
 800610c:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 800610e:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006110:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8006112:	f7fe f8b5 	bl	8004280 <HAL_InitTick>
  return HAL_OK;
 8006116:	2000      	movs	r0, #0
}
 8006118:	b006      	add	sp, #24
 800611a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSE_VALUE;
 800611e:	4b12      	ldr	r3, [pc, #72]	; (8006168 <HAL_RCC_ClockConfig+0x194>)
 8006120:	e7ec      	b.n	80060fc <HAL_RCC_ClockConfig+0x128>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006122:	039f      	lsls	r7, r3, #14
 8006124:	d491      	bmi.n	800604a <HAL_RCC_ClockConfig+0x76>
 8006126:	e7b8      	b.n	800609a <HAL_RCC_ClockConfig+0xc6>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006128:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800612a:	4b0f      	ldr	r3, [pc, #60]	; (8006168 <HAL_RCC_ClockConfig+0x194>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800612c:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006130:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006134:	4422      	add	r2, r4
 8006136:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800613a:	fbb3 f3f2 	udiv	r3, r3, r2
 800613e:	e7dd      	b.n	80060fc <HAL_RCC_ClockConfig+0x128>
        return HAL_TIMEOUT;
 8006140:	2003      	movs	r0, #3
 8006142:	e7ab      	b.n	800609c <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006144:	019e      	lsls	r6, r3, #6
 8006146:	d480      	bmi.n	800604a <HAL_RCC_ClockConfig+0x76>
 8006148:	e7a7      	b.n	800609a <HAL_RCC_ClockConfig+0xc6>
 800614a:	bf00      	nop
 800614c:	40022000 	.word	0x40022000
 8006150:	40021000 	.word	0x40021000
 8006154:	0800b024 	.word	0x0800b024
 8006158:	003d0900 	.word	0x003d0900
 800615c:	0800bca4 	.word	0x0800bca4
 8006160:	20000040 	.word	0x20000040
 8006164:	20000038 	.word	0x20000038
 8006168:	007a1200 	.word	0x007a1200

0800616c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800616c:	4b04      	ldr	r3, [pc, #16]	; (8006180 <HAL_RCC_GetPCLK1Freq+0x14>)
 800616e:	4905      	ldr	r1, [pc, #20]	; (8006184 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006170:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8006172:	4a05      	ldr	r2, [pc, #20]	; (8006188 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006174:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006178:	5ccb      	ldrb	r3, [r1, r3]
 800617a:	6810      	ldr	r0, [r2, #0]
}
 800617c:	40d8      	lsrs	r0, r3
 800617e:	4770      	bx	lr
 8006180:	40021000 	.word	0x40021000
 8006184:	0800bcb4 	.word	0x0800bcb4
 8006188:	20000038 	.word	0x20000038

0800618c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800618c:	4b04      	ldr	r3, [pc, #16]	; (80061a0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800618e:	4905      	ldr	r1, [pc, #20]	; (80061a4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006190:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8006192:	4a05      	ldr	r2, [pc, #20]	; (80061a8 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006194:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006198:	5ccb      	ldrb	r3, [r1, r3]
 800619a:	6810      	ldr	r0, [r2, #0]
}
 800619c:	40d8      	lsrs	r0, r3
 800619e:	4770      	bx	lr
 80061a0:	40021000 	.word	0x40021000
 80061a4:	0800bcb4 	.word	0x0800bcb4
 80061a8:	20000038 	.word	0x20000038

080061ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80061b2:	6800      	ldr	r0, [r0, #0]
{
 80061b4:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80061b6:	07c5      	lsls	r5, r0, #31
 80061b8:	d52a      	bpl.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061ba:	4b3a      	ldr	r3, [pc, #232]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80061bc:	69da      	ldr	r2, [r3, #28]
 80061be:	00d1      	lsls	r1, r2, #3
 80061c0:	d53d      	bpl.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061c2:	4b39      	ldr	r3, [pc, #228]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus       pwrclkchanged = RESET;
 80061c4:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	05d2      	lsls	r2, r2, #23
 80061ca:	d546      	bpl.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061cc:	4935      	ldr	r1, [pc, #212]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80061ce:	6860      	ldr	r0, [r4, #4]
 80061d0:	6a0a      	ldr	r2, [r1, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061d2:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 80061d6:	d00f      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 80061d8:	f400 7340 	and.w	r3, r0, #768	; 0x300
 80061dc:	4293      	cmp	r3, r2
 80061de:	d00b      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061e0:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061e2:	2600      	movs	r6, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061e4:	6a0b      	ldr	r3, [r1, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80061e6:	4a31      	ldr	r2, [pc, #196]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80061ec:	6017      	str	r7, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061ee:	6016      	str	r6, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80061f0:	6208      	str	r0, [r1, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80061f2:	07d8      	lsls	r0, r3, #31
 80061f4:	d445      	bmi.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 80061f6:	6860      	ldr	r0, [r4, #4]
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061f8:	4a2a      	ldr	r2, [pc, #168]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80061fa:	6a13      	ldr	r3, [r2, #32]
 80061fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006200:	4303      	orrs	r3, r0
 8006202:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006204:	b11d      	cbz	r5, 800620e <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006206:	69d3      	ldr	r3, [r2, #28]
 8006208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800620c:	61d3      	str	r3, [r2, #28]
 800620e:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006210:	0783      	lsls	r3, r0, #30
 8006212:	d506      	bpl.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006214:	4a23      	ldr	r2, [pc, #140]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8006216:	68a1      	ldr	r1, [r4, #8]
 8006218:	6853      	ldr	r3, [r2, #4]
 800621a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800621e:	430b      	orrs	r3, r1
 8006220:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006222:	f010 0010 	ands.w	r0, r0, #16
 8006226:	d007      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006228:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800622a:	4a1e      	ldr	r2, [pc, #120]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800622c:	68e1      	ldr	r1, [r4, #12]
 800622e:	6853      	ldr	r3, [r2, #4]
 8006230:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006234:	430b      	orrs	r3, r1
 8006236:	6053      	str	r3, [r2, #4]
}
 8006238:	b002      	add	sp, #8
 800623a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800623e:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8006240:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8006242:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006246:	61da      	str	r2, [r3, #28]
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800624e:	9301      	str	r3, [sp, #4]
 8006250:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006252:	4b15      	ldr	r3, [pc, #84]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	05d2      	lsls	r2, r2, #23
 8006258:	d4b8      	bmi.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800625a:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800625c:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800625e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006262:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006264:	f7fe f84e 	bl	8004304 <HAL_GetTick>
 8006268:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800626a:	6833      	ldr	r3, [r6, #0]
 800626c:	05db      	lsls	r3, r3, #23
 800626e:	d4ad      	bmi.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006270:	f7fe f848 	bl	8004304 <HAL_GetTick>
 8006274:	1bc0      	subs	r0, r0, r7
 8006276:	2864      	cmp	r0, #100	; 0x64
 8006278:	d9f7      	bls.n	800626a <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 800627a:	2003      	movs	r0, #3
}
 800627c:	b002      	add	sp, #8
 800627e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006282:	460e      	mov	r6, r1
        tickstart = HAL_GetTick();
 8006284:	f7fe f83e 	bl	8004304 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006288:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800628c:	4680      	mov	r8, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800628e:	6a33      	ldr	r3, [r6, #32]
 8006290:	079a      	lsls	r2, r3, #30
 8006292:	d4b0      	bmi.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006294:	f7fe f836 	bl	8004304 <HAL_GetTick>
 8006298:	eba0 0008 	sub.w	r0, r0, r8
 800629c:	42b8      	cmp	r0, r7
 800629e:	d9f6      	bls.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80062a0:	e7eb      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0xce>
 80062a2:	bf00      	nop
 80062a4:	40021000 	.word	0x40021000
 80062a8:	40007000 	.word	0x40007000
 80062ac:	42420440 	.word	0x42420440

080062b0 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062b0:	2800      	cmp	r0, #0
 80062b2:	d036      	beq.n	8006322 <HAL_TIM_Base_Init+0x72>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062b4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80062b8:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80062ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80062be:	4604      	mov	r4, r0
 80062c0:	b30b      	cbz	r3, 8006306 <HAL_TIM_Base_Init+0x56>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c2:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062c4:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062c6:	4e20      	ldr	r6, [pc, #128]	; (8006348 <HAL_TIM_Base_Init+0x98>)
  htim->State = HAL_TIM_STATE_BUSY;
 80062c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062cc:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 80062ce:	6813      	ldr	r3, [r2, #0]
 80062d0:	69a5      	ldr	r5, [r4, #24]
 80062d2:	68e0      	ldr	r0, [r4, #12]
 80062d4:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062d6:	d026      	beq.n	8006326 <HAL_TIM_Base_Init+0x76>
 80062d8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80062dc:	d018      	beq.n	8006310 <HAL_TIM_Base_Init+0x60>
 80062de:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80062e2:	42b2      	cmp	r2, r6
 80062e4:	d014      	beq.n	8006310 <HAL_TIM_Base_Init+0x60>
 80062e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80062ea:	42b2      	cmp	r2, r6
 80062ec:	d010      	beq.n	8006310 <HAL_TIM_Base_Init+0x60>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062f2:	432b      	orrs	r3, r5

  TIMx->CR1 = tmpcr1;
 80062f4:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062f6:	62d0      	str	r0, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062f8:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062fa:	2301      	movs	r3, #1
  return HAL_OK;
 80062fc:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 80062fe:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 8006300:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006304:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8006306:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800630a:	f7fc f8bb 	bl	8002484 <HAL_TIM_Base_MspInit>
 800630e:	e7d8      	b.n	80062c2 <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8006310:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006316:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006318:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800631a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800631e:	4333      	orrs	r3, r6
 8006320:	e7e5      	b.n	80062ee <HAL_TIM_Base_Init+0x3e>
    return HAL_ERROR;
 8006322:	2001      	movs	r0, #1
}
 8006324:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8006326:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800632c:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800632e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006334:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800633a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800633c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800633e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006340:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006342:	6963      	ldr	r3, [r4, #20]
 8006344:	6313      	str	r3, [r2, #48]	; 0x30
 8006346:	e7d8      	b.n	80062fa <HAL_TIM_Base_Init+0x4a>
 8006348:	40012c00 	.word	0x40012c00

0800634c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800634c:	6803      	ldr	r3, [r0, #0]
 800634e:	68da      	ldr	r2, [r3, #12]
 8006350:	f042 0201 	orr.w	r2, r2, #1
 8006354:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800635c:	2a06      	cmp	r2, #6
 800635e:	d003      	beq.n	8006368 <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	f042 0201 	orr.w	r2, r2, #1
 8006366:	601a      	str	r2, [r3, #0]
}
 8006368:	2000      	movs	r0, #0
 800636a:	4770      	bx	lr

0800636c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800636c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006370:	2b01      	cmp	r3, #1
 8006372:	d05a      	beq.n	800642a <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 8006374:	2202      	movs	r2, #2
{
 8006376:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8006378:	2501      	movs	r5, #1
  tmpsmcr = htim->Instance->SMCR;
 800637a:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800637c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006380:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8006382:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006384:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8006388:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 800638c:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 800638e:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8006392:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8006394:	d074      	beq.n	8006480 <HAL_TIM_ConfigClockSource+0x114>
 8006396:	d94a      	bls.n	800642e <HAL_TIM_ConfigClockSource+0xc2>
 8006398:	2c60      	cmp	r4, #96	; 0x60
 800639a:	d02d      	beq.n	80063f8 <HAL_TIM_ConfigClockSource+0x8c>
 800639c:	d956      	bls.n	800644c <HAL_TIM_ConfigClockSource+0xe0>
 800639e:	2c70      	cmp	r4, #112	; 0x70
 80063a0:	d01a      	beq.n	80063d8 <HAL_TIM_ConfigClockSource+0x6c>
 80063a2:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 80063a6:	d10e      	bne.n	80063c6 <HAL_TIM_ConfigClockSource+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063a8:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 80063ac:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80063ae:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063b0:	432a      	orrs	r2, r5
 80063b2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063b6:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063ba:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063bc:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063c4:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	bcf0      	pop	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_READY;
 80063ca:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 80063cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80063d0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  return HAL_OK;
 80063d4:	4618      	mov	r0, r3
}
 80063d6:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063d8:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 80063dc:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80063de:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063e0:	432a      	orrs	r2, r5
 80063e2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063e6:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063ea:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80063ec:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80063ee:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063f0:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80063f4:	609a      	str	r2, [r3, #8]
      break;
 80063f6:	e7e6      	b.n	80063c6 <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063f8:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063fa:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063fc:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006400:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006402:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006404:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8006406:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006408:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800640c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006410:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006414:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8006418:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800641a:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800641c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800641e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006422:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8006426:	609a      	str	r2, [r3, #8]
 8006428:	e7cd      	b.n	80063c6 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 800642a:	2002      	movs	r0, #2
}
 800642c:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800642e:	2c10      	cmp	r4, #16
 8006430:	d004      	beq.n	800643c <HAL_TIM_ConfigClockSource+0xd0>
 8006432:	d93d      	bls.n	80064b0 <HAL_TIM_ConfigClockSource+0x144>
 8006434:	2c20      	cmp	r4, #32
 8006436:	d001      	beq.n	800643c <HAL_TIM_ConfigClockSource+0xd0>
 8006438:	2c30      	cmp	r4, #48	; 0x30
 800643a:	d1c4      	bne.n	80063c6 <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 800643c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800643e:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8006442:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006446:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 8006448:	609c      	str	r4, [r3, #8]
 800644a:	e7bc      	b.n	80063c6 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800644c:	2c50      	cmp	r4, #80	; 0x50
 800644e:	d1ba      	bne.n	80063c6 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8006450:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006452:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006454:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006456:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800645a:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800645c:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800645e:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006460:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006464:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006468:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800646c:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800646e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006470:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8006472:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006474:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006478:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800647c:	609a      	str	r2, [r3, #8]
 800647e:	e7a2      	b.n	80063c6 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8006480:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006482:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006484:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006486:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800648a:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800648c:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800648e:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006490:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006494:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006498:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800649c:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800649e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064a0:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80064a2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80064a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064a8:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80064ac:	609a      	str	r2, [r3, #8]
 80064ae:	e78a      	b.n	80063c6 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80064b0:	2c00      	cmp	r4, #0
 80064b2:	d0c3      	beq.n	800643c <HAL_TIM_ConfigClockSource+0xd0>
 80064b4:	e787      	b.n	80063c6 <HAL_TIM_ConfigClockSource+0x5a>
 80064b6:	bf00      	nop

080064b8 <HAL_TIM_PeriodElapsedCallback>:
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop

080064bc <HAL_TIM_OC_DelayElapsedCallback>:
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop

080064c0 <HAL_TIM_IC_CaptureCallback>:
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop

080064c4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop

080064c8 <HAL_TIM_TriggerCallback>:
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop

080064cc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064cc:	6803      	ldr	r3, [r0, #0]
{
 80064ce:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064d0:	691a      	ldr	r2, [r3, #16]
{
 80064d2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064d4:	0791      	lsls	r1, r2, #30
 80064d6:	d502      	bpl.n	80064de <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	0792      	lsls	r2, r2, #30
 80064dc:	d45f      	bmi.n	800659e <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064de:	691a      	ldr	r2, [r3, #16]
 80064e0:	0750      	lsls	r0, r2, #29
 80064e2:	d502      	bpl.n	80064ea <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064e4:	68da      	ldr	r2, [r3, #12]
 80064e6:	0751      	lsls	r1, r2, #29
 80064e8:	d446      	bmi.n	8006578 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064ea:	691a      	ldr	r2, [r3, #16]
 80064ec:	0712      	lsls	r2, r2, #28
 80064ee:	d502      	bpl.n	80064f6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064f0:	68da      	ldr	r2, [r3, #12]
 80064f2:	0710      	lsls	r0, r2, #28
 80064f4:	d42e      	bmi.n	8006554 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064f6:	691a      	ldr	r2, [r3, #16]
 80064f8:	06d2      	lsls	r2, r2, #27
 80064fa:	d502      	bpl.n	8006502 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	06d0      	lsls	r0, r2, #27
 8006500:	d418      	bmi.n	8006534 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006502:	691a      	ldr	r2, [r3, #16]
 8006504:	07d1      	lsls	r1, r2, #31
 8006506:	d502      	bpl.n	800650e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006508:	68da      	ldr	r2, [r3, #12]
 800650a:	07d2      	lsls	r2, r2, #31
 800650c:	d45d      	bmi.n	80065ca <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800650e:	691a      	ldr	r2, [r3, #16]
 8006510:	0610      	lsls	r0, r2, #24
 8006512:	d502      	bpl.n	800651a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	0611      	lsls	r1, r2, #24
 8006518:	d45f      	bmi.n	80065da <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800651a:	691a      	ldr	r2, [r3, #16]
 800651c:	0652      	lsls	r2, r2, #25
 800651e:	d502      	bpl.n	8006526 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006520:	68da      	ldr	r2, [r3, #12]
 8006522:	0650      	lsls	r0, r2, #25
 8006524:	d461      	bmi.n	80065ea <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006526:	691a      	ldr	r2, [r3, #16]
 8006528:	0691      	lsls	r1, r2, #26
 800652a:	d502      	bpl.n	8006532 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800652c:	68da      	ldr	r2, [r3, #12]
 800652e:	0692      	lsls	r2, r2, #26
 8006530:	d443      	bmi.n	80065ba <HAL_TIM_IRQHandler+0xee>
}
 8006532:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006534:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006538:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800653a:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800653c:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800653e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006540:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006544:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006546:	d064      	beq.n	8006612 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8006548:	f7ff ffba 	bl	80064c0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800654c:	2200      	movs	r2, #0
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	7722      	strb	r2, [r4, #28]
 8006552:	e7d6      	b.n	8006502 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006554:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006558:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800655a:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800655c:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800655e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006560:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006562:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006564:	d152      	bne.n	800660c <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006566:	f7ff ffa9 	bl	80064bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800656a:	4620      	mov	r0, r4
 800656c:	f7ff ffaa 	bl	80064c4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006570:	2200      	movs	r2, #0
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	7722      	strb	r2, [r4, #28]
 8006576:	e7be      	b.n	80064f6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006578:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800657c:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800657e:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006580:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8006582:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006584:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006588:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800658a:	d13c      	bne.n	8006606 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800658c:	f7ff ff96 	bl	80064bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006590:	4620      	mov	r0, r4
 8006592:	f7ff ff97 	bl	80064c4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006596:	2200      	movs	r2, #0
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	7722      	strb	r2, [r4, #28]
 800659c:	e7a5      	b.n	80064ea <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800659e:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065a2:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065a4:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065a6:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065a8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065aa:	079b      	lsls	r3, r3, #30
 80065ac:	d025      	beq.n	80065fa <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80065ae:	f7ff ff87 	bl	80064c0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b2:	2200      	movs	r2, #0
 80065b4:	6823      	ldr	r3, [r4, #0]
 80065b6:	7722      	strb	r2, [r4, #28]
 80065b8:	e791      	b.n	80064de <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065ba:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80065be:	4620      	mov	r0, r4
}
 80065c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065c4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80065c6:	f000 b84d 	b.w	8006664 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065ca:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80065ce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065d0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80065d2:	f7ff ff71 	bl	80064b8 <HAL_TIM_PeriodElapsedCallback>
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	e799      	b.n	800650e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065da:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80065de:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065e0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80065e2:	f000 f841 	bl	8006668 <HAL_TIMEx_BreakCallback>
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	e797      	b.n	800651a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80065ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065f0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80065f2:	f7ff ff69 	bl	80064c8 <HAL_TIM_TriggerCallback>
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	e795      	b.n	8006526 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fa:	f7ff ff5f 	bl	80064bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065fe:	4620      	mov	r0, r4
 8006600:	f7ff ff60 	bl	80064c4 <HAL_TIM_PWM_PulseFinishedCallback>
 8006604:	e7d5      	b.n	80065b2 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8006606:	f7ff ff5b 	bl	80064c0 <HAL_TIM_IC_CaptureCallback>
 800660a:	e7c4      	b.n	8006596 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 800660c:	f7ff ff58 	bl	80064c0 <HAL_TIM_IC_CaptureCallback>
 8006610:	e7ae      	b.n	8006570 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006612:	f7ff ff53 	bl	80064bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006616:	4620      	mov	r0, r4
 8006618:	f7ff ff54 	bl	80064c4 <HAL_TIM_PWM_PulseFinishedCallback>
 800661c:	e796      	b.n	800654c <HAL_TIM_IRQHandler+0x80>
 800661e:	bf00      	nop

08006620 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006620:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8006624:	2a01      	cmp	r2, #1
 8006626:	d01a      	beq.n	800665e <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006628:	2202      	movs	r2, #2
{
 800662a:	b4f0      	push	{r4, r5, r6, r7}
 800662c:	4603      	mov	r3, r0
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800662e:	2500      	movs	r5, #0
  htim->State = HAL_TIM_STATE_READY;
 8006630:	2601      	movs	r6, #1
  tmpcr2 = htim->Instance->CR2;
 8006632:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006634:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8006638:	6860      	ldr	r0, [r4, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800663a:	e9d1 2700 	ldrd	r2, r7, [r1]
  tmpcr2 &= ~TIM_CR2_MMS;
 800663e:	f020 0170 	bic.w	r1, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006642:	4311      	orrs	r1, r2
  tmpsmcr = htim->Instance->SMCR;
 8006644:	68a2      	ldr	r2, [r4, #8]

  return HAL_OK;
 8006646:	4628      	mov	r0, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006648:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800664c:	433a      	orrs	r2, r7
  htim->Instance->CR2 = tmpcr2;
 800664e:	6061      	str	r1, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8006650:	60a2      	str	r2, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8006652:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006656:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
}
 800665a:	bcf0      	pop	{r4, r5, r6, r7}
 800665c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800665e:	2002      	movs	r0, #2
}
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop

08006664 <HAL_TIMEx_CommutCallback>:
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop

08006668 <HAL_TIMEx_BreakCallback>:
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop

0800666c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800666c:	2800      	cmp	r0, #0
 800666e:	d05e      	beq.n	800672e <HAL_UART_Init+0xc2>
{
 8006670:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006672:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8006676:	4604      	mov	r4, r0
 8006678:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800667c:	2b00      	cmp	r3, #0
 800667e:	d051      	beq.n	8006724 <HAL_UART_Init+0xb8>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006680:	2224      	movs	r2, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006682:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006684:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8006688:	68da      	ldr	r2, [r3, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800668a:	68e0      	ldr	r0, [r4, #12]
  __HAL_UART_DISABLE(huart);
 800668c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006690:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006692:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006694:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006696:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800669a:	4301      	orrs	r1, r0
 800669c:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800669e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80066a0:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 80066a4:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80066a8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80066aa:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80066ae:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80066b0:	430a      	orrs	r2, r1
 80066b2:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066b4:	695a      	ldr	r2, [r3, #20]
 80066b6:	69a0      	ldr	r0, [r4, #24]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80066b8:	491f      	ldr	r1, [pc, #124]	; (8006738 <HAL_UART_Init+0xcc>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80066be:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 80066c0:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066c2:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 80066c4:	d035      	beq.n	8006732 <HAL_UART_Init+0xc6>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80066c6:	f7ff fd51 	bl	800616c <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066ca:	6862      	ldr	r2, [r4, #4]
 80066cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80066d0:	0092      	lsls	r2, r2, #2
 80066d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80066d6:	fbb0 f0f2 	udiv	r0, r0, r2
 80066da:	2264      	movs	r2, #100	; 0x64
 80066dc:	4d17      	ldr	r5, [pc, #92]	; (800673c <HAL_UART_Init+0xd0>)
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	fba5 c100 	umull	ip, r1, r5, r0
 80066e4:	0949      	lsrs	r1, r1, #5
 80066e6:	fb02 0211 	mls	r2, r2, r1, r0
 80066ea:	0112      	lsls	r2, r2, #4
 80066ec:	3232      	adds	r2, #50	; 0x32
 80066ee:	fba5 0202 	umull	r0, r2, r5, r2
 80066f2:	0109      	lsls	r1, r1, #4
 80066f4:	eb01 1252 	add.w	r2, r1, r2, lsr #5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f8:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80066fa:	2120      	movs	r1, #32
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066fc:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066fe:	691a      	ldr	r2, [r3, #16]
  return HAL_OK;
 8006700:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006702:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006706:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006708:	695a      	ldr	r2, [r3, #20]
 800670a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800670e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006716:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006718:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800671a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800671e:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8006722:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8006724:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8006728:	f7fb fee6 	bl	80024f8 <HAL_UART_MspInit>
 800672c:	e7a8      	b.n	8006680 <HAL_UART_Init+0x14>
    return HAL_ERROR;
 800672e:	2001      	movs	r0, #1
}
 8006730:	4770      	bx	lr
    pclk = HAL_RCC_GetPCLK2Freq();
 8006732:	f7ff fd2b 	bl	800618c <HAL_RCC_GetPCLK2Freq>
 8006736:	e7c8      	b.n	80066ca <HAL_UART_Init+0x5e>
 8006738:	40013800 	.word	0x40013800
 800673c:	51eb851f 	.word	0x51eb851f

08006740 <HAL_UART_Receive_DMA>:
{
 8006740:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8006742:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
{
 8006746:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 8006748:	2c20      	cmp	r4, #32
 800674a:	d138      	bne.n	80067be <HAL_UART_Receive_DMA+0x7e>
    if ((pData == NULL) || (Size == 0U))
 800674c:	2900      	cmp	r1, #0
 800674e:	d039      	beq.n	80067c4 <HAL_UART_Receive_DMA+0x84>
 8006750:	2a00      	cmp	r2, #0
 8006752:	d037      	beq.n	80067c4 <HAL_UART_Receive_DMA+0x84>
    __HAL_LOCK(huart);
 8006754:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8006758:	2b01      	cmp	r3, #1
 800675a:	d030      	beq.n	80067be <HAL_UART_Receive_DMA+0x7e>
 800675c:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800675e:	2500      	movs	r5, #0
 8006760:	4613      	mov	r3, r2
    __HAL_LOCK(huart);
 8006762:	2601      	movs	r6, #1
 8006764:	460a      	mov	r2, r1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006766:	2122      	movs	r1, #34	; 0x22
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006768:	6b40      	ldr	r0, [r0, #52]	; 0x34
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800676a:	63e5      	str	r5, [r4, #60]	; 0x3c
    __HAL_LOCK(huart);
 800676c:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006770:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006774:	4e15      	ldr	r6, [pc, #84]	; (80067cc <HAL_UART_Receive_DMA+0x8c>)
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006776:	4916      	ldr	r1, [pc, #88]	; (80067d0 <HAL_UART_Receive_DMA+0x90>)
    huart->pRxBuffPtr = pData;
 8006778:	62a2      	str	r2, [r4, #40]	; 0x28
    huart->RxXferSize = Size;
 800677a:	85a3      	strh	r3, [r4, #44]	; 0x2c
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800677c:	6286      	str	r6, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800677e:	62c1      	str	r1, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006780:	4e14      	ldr	r6, [pc, #80]	; (80067d4 <HAL_UART_Receive_DMA+0x94>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006782:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferAbortCallback = NULL;
 8006784:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006786:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006788:	3104      	adds	r1, #4
 800678a:	f7fd fe75 	bl	8004478 <HAL_DMA_Start_IT>
    return HAL_OK;
 800678e:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	9501      	str	r5, [sp, #4]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	9201      	str	r2, [sp, #4]
 8006798:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 800679a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 800679e:	9201      	str	r2, [sp, #4]
 80067a0:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067a2:	68da      	ldr	r2, [r3, #12]
 80067a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067a8:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067aa:	695a      	ldr	r2, [r3, #20]
 80067ac:	f042 0201 	orr.w	r2, r2, #1
 80067b0:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067b2:	695a      	ldr	r2, [r3, #20]
 80067b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067b8:	615a      	str	r2, [r3, #20]
}
 80067ba:	b002      	add	sp, #8
 80067bc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80067be:	2002      	movs	r0, #2
}
 80067c0:	b002      	add	sp, #8
 80067c2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80067c4:	2001      	movs	r0, #1
}
 80067c6:	b002      	add	sp, #8
 80067c8:	bd70      	pop	{r4, r5, r6, pc}
 80067ca:	bf00      	nop
 80067cc:	080067dd 	.word	0x080067dd
 80067d0:	08006819 	.word	0x08006819
 80067d4:	08006829 	.word	0x08006829

080067d8 <HAL_UART_RxCpltCallback>:
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop

080067dc <UART_DMAReceiveCplt>:
{
 80067dc:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80067de:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f013 0320 	ands.w	r3, r3, #32
 80067e8:	d110      	bne.n	800680c <UART_DMAReceiveCplt+0x30>
    huart->RxState = HAL_UART_STATE_READY;
 80067ea:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067ec:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 80067ee:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067f0:	68d3      	ldr	r3, [r2, #12]
 80067f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067f6:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f8:	6953      	ldr	r3, [r2, #20]
 80067fa:	f023 0301 	bic.w	r3, r3, #1
 80067fe:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006800:	6953      	ldr	r3, [r2, #20]
 8006802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006806:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8006808:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 800680c:	f7ff ffe4 	bl	80067d8 <HAL_UART_RxCpltCallback>
}
 8006810:	bd08      	pop	{r3, pc}
 8006812:	bf00      	nop

08006814 <HAL_UART_RxHalfCpltCallback>:
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop

08006818 <UART_DMARxHalfCplt>:
{
 8006818:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800681a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800681c:	f7ff fffa 	bl	8006814 <HAL_UART_RxHalfCpltCallback>
}
 8006820:	bd08      	pop	{r3, pc}
 8006822:	bf00      	nop

08006824 <HAL_UART_ErrorCallback>:
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop

08006828 <UART_DMAError>:
{
 8006828:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800682a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	6950      	ldr	r0, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006830:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
 8006834:	2921      	cmp	r1, #33	; 0x21
 8006836:	d01c      	beq.n	8006872 <UART_DMAError+0x4a>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006838:	6950      	ldr	r0, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800683a:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 800683e:	2922      	cmp	r1, #34	; 0x22
 8006840:	d007      	beq.n	8006852 <UART_DMAError+0x2a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8006844:	4618      	mov	r0, r3
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006846:	f042 0210 	orr.w	r2, r2, #16
 800684a:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800684c:	f7ff ffea 	bl	8006824 <HAL_UART_ErrorCallback>
}
 8006850:	bd08      	pop	{r3, pc}
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006852:	0641      	lsls	r1, r0, #25
 8006854:	d5f5      	bpl.n	8006842 <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 8006856:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006858:	2020      	movs	r0, #32
    huart->RxXferCount = 0x00U;
 800685a:	85d9      	strh	r1, [r3, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800685c:	68d1      	ldr	r1, [r2, #12]
 800685e:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8006862:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006864:	6951      	ldr	r1, [r2, #20]
 8006866:	f021 0101 	bic.w	r1, r1, #1
 800686a:	6151      	str	r1, [r2, #20]
  huart->RxState = HAL_UART_STATE_READY;
 800686c:	f883 003a 	strb.w	r0, [r3, #58]	; 0x3a
 8006870:	e7e7      	b.n	8006842 <UART_DMAError+0x1a>
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006872:	0600      	lsls	r0, r0, #24
 8006874:	d5e0      	bpl.n	8006838 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 8006876:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8006878:	2020      	movs	r0, #32
    huart->TxXferCount = 0x00U;
 800687a:	84d9      	strh	r1, [r3, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800687c:	68d1      	ldr	r1, [r2, #12]
 800687e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8006882:	60d1      	str	r1, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8006884:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
 8006888:	e7d6      	b.n	8006838 <UART_DMAError+0x10>
 800688a:	bf00      	nop

0800688c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800688c:	b084      	sub	sp, #16
 800688e:	a801      	add	r0, sp, #4
 8006890:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8006894:	b004      	add	sp, #16
 8006896:	2000      	movs	r0, #0
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop

0800689c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800689c:	4602      	mov	r2, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800689e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80068a2:	2000      	movs	r0, #0
  USBx->CNTR |= winterruptmask;
 80068a4:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80068a8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
}
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop

080068b0 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80068b0:	f244 03ff 	movw	r3, #16639	; 0x40ff
{
 80068b4:	4602      	mov	r2, r0
  USBx->CNTR &= ~winterruptmask;
 80068b6:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40

  return HAL_OK;
}
 80068ba:	2000      	movs	r0, #0
  USBx->CNTR &= ~winterruptmask;
 80068bc:	400b      	ands	r3, r1
 80068be:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
}
 80068c2:	4770      	bx	lr

080068c4 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80068c4:	2000      	movs	r0, #0
 80068c6:	4770      	bx	lr

080068c8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80068c8:	b084      	sub	sp, #16
 80068ca:	b470      	push	{r4, r5, r6}
 80068cc:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80068ce:	2501      	movs	r5, #1

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80068d0:	2000      	movs	r0, #0
  USBx->CNTR = USB_CNTR_FRES;
 80068d2:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
  USBx->CNTR = 0;
 80068d6:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80068da:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80068de:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 80068e2:	f8b4 6040 	ldrh.w	r6, [r4, #64]	; 0x40
{
 80068e6:	ad04      	add	r5, sp, #16
  USBx->CNTR |= winterruptmask;
 80068e8:	f446 463f 	orr.w	r6, r6, #48896	; 0xbf00
 80068ec:	f8a4 6040 	strh.w	r6, [r4, #64]	; 0x40
{
 80068f0:	e885 000e 	stmia.w	r5, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80068f4:	bc70      	pop	{r4, r5, r6}
 80068f6:	b004      	add	sp, #16
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop

080068fc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068fc:	b470      	push	{r4, r5, r6}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80068fe:	780d      	ldrb	r5, [r1, #0]
{
 8006900:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006902:	f830 4025 	ldrh.w	r4, [r0, r5, lsl #2]
 8006906:	4abc      	ldr	r2, [pc, #752]	; (8006bf8 <USB_ActivateEndpoint+0x2fc>)

  /* initialize Endpoint */
  switch (ep->type)
 8006908:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800690a:	4022      	ands	r2, r4
  switch (ep->type)
 800690c:	2803      	cmp	r0, #3
 800690e:	f200 8142 	bhi.w	8006b96 <USB_ActivateEndpoint+0x29a>
 8006912:	e8df f000 	tbb	[pc, r0]
 8006916:	464e      	.short	0x464e
 8006918:	4a02      	.short	0x4a02
  HAL_StatusTypeDef ret = HAL_OK;
 800691a:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800691c:	f248 0480 	movw	r4, #32896	; 0x8080
 8006920:	4322      	orrs	r2, r4
 8006922:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006926:	780d      	ldrb	r5, [r1, #0]
 8006928:	4eb4      	ldr	r6, [pc, #720]	; (8006bfc <USB_ActivateEndpoint+0x300>)
 800692a:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800692e:	432c      	orrs	r4, r5
 8006930:	4032      	ands	r2, r6
 8006932:	4322      	orrs	r2, r4
 8006934:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  if (ep->doublebuffer == 0U)
 8006938:	7b0a      	ldrb	r2, [r1, #12]
 800693a:	2a00      	cmp	r2, #0
 800693c:	d13d      	bne.n	80069ba <USB_ActivateEndpoint+0xbe>
 800693e:	88cc      	ldrh	r4, [r1, #6]
 8006940:	780a      	ldrb	r2, [r1, #0]
  {
    if (ep->is_in != 0U)
 8006942:	784d      	ldrb	r5, [r1, #1]
 8006944:	0864      	lsrs	r4, r4, #1
 8006946:	0064      	lsls	r4, r4, #1
 8006948:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800694c:	2d00      	cmp	r5, #0
 800694e:	f000 80e8 	beq.w	8006b22 <USB_ActivateEndpoint+0x226>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006952:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8006956:	442a      	add	r2, r5
 8006958:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800695c:	780a      	ldrb	r2, [r1, #0]
 800695e:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8006962:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006966:	066d      	lsls	r5, r5, #25
 8006968:	d50b      	bpl.n	8006982 <USB_ActivateEndpoint+0x86>
 800696a:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800696e:	4026      	ands	r6, r4
 8006970:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
 8006974:	f046 06c0 	orr.w	r6, r6, #192	; 0xc0
 8006978:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 800697c:	780c      	ldrb	r4, [r1, #0]
 800697e:	eb03 0484 	add.w	r4, r3, r4, lsl #2

      if (ep->type != EP_TYPE_ISOC)
 8006982:	78cb      	ldrb	r3, [r1, #3]
 8006984:	2b01      	cmp	r3, #1
 8006986:	f000 8120 	beq.w	8006bca <USB_ActivateEndpoint+0x2ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800698a:	8822      	ldrh	r2, [r4, #0]
 800698c:	4b9c      	ldr	r3, [pc, #624]	; (8006c00 <USB_ActivateEndpoint+0x304>)
 800698e:	4013      	ands	r3, r2
 8006990:	f083 0320 	eor.w	r3, r3, #32
 8006994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800699c:	8023      	strh	r3, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 800699e:	bc70      	pop	{r4, r5, r6}
 80069a0:	4770      	bx	lr
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80069a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 80069a6:	2000      	movs	r0, #0
      break;
 80069a8:	e7b8      	b.n	800691c <USB_ActivateEndpoint+0x20>
      wEpRegVal |= USB_EP_INTERRUPT;
 80069aa:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80069ae:	2000      	movs	r0, #0
      break;
 80069b0:	e7b4      	b.n	800691c <USB_ActivateEndpoint+0x20>
      wEpRegVal |= USB_EP_CONTROL;
 80069b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 80069b6:	2000      	movs	r0, #0
      break;
 80069b8:	e7b0      	b.n	800691c <USB_ActivateEndpoint+0x20>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80069ba:	780c      	ldrb	r4, [r1, #0]
 80069bc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80069c0:	4032      	ands	r2, r6
 80069c2:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80069c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80069ca:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80069ce:	780a      	ldrb	r2, [r1, #0]
 80069d0:	890c      	ldrh	r4, [r1, #8]
 80069d2:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80069d6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80069da:	0864      	lsrs	r4, r4, #1
 80069dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069e0:	0064      	lsls	r4, r4, #1
 80069e2:	b2ad      	uxth	r5, r5
 80069e4:	5354      	strh	r4, [r2, r5]
 80069e6:	780a      	ldrb	r2, [r1, #0]
 80069e8:	894c      	ldrh	r4, [r1, #10]
 80069ea:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80069ee:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80069f2:	0864      	lsrs	r4, r4, #1
 80069f4:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 80069f8:	0064      	lsls	r4, r4, #1
 80069fa:	b2ad      	uxth	r5, r5
 80069fc:	5354      	strh	r4, [r2, r5]
    if (ep->is_in == 0U)
 80069fe:	784a      	ldrb	r2, [r1, #1]
 8006a00:	2a00      	cmp	r2, #0
 8006a02:	d142      	bne.n	8006a8a <USB_ActivateEndpoint+0x18e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a04:	780a      	ldrb	r2, [r1, #0]
 8006a06:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8006a0a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a0e:	046d      	lsls	r5, r5, #17
 8006a10:	d50b      	bpl.n	8006a2a <USB_ActivateEndpoint+0x12e>
 8006a12:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8006a16:	4026      	ands	r6, r4
 8006a18:	f446 4640 	orr.w	r6, r6, #49152	; 0xc000
 8006a1c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8006a20:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8006a24:	780c      	ldrb	r4, [r1, #0]
 8006a26:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a2a:	8822      	ldrh	r2, [r4, #0]
 8006a2c:	0656      	lsls	r6, r2, #25
 8006a2e:	d50c      	bpl.n	8006a4a <USB_ActivateEndpoint+0x14e>
 8006a30:	8822      	ldrh	r2, [r4, #0]
 8006a32:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006a36:	0512      	lsls	r2, r2, #20
 8006a38:	0d12      	lsrs	r2, r2, #20
 8006a3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a3e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006a42:	8022      	strh	r2, [r4, #0]
 8006a44:	780c      	ldrb	r4, [r1, #0]
 8006a46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a4a:	f248 0680 	movw	r6, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8006a4e:	8822      	ldrh	r2, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a50:	4d6c      	ldr	r5, [pc, #432]	; (8006c04 <USB_ActivateEndpoint+0x308>)
      PCD_TX_DTOG(USBx, ep->num);
 8006a52:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006a56:	0512      	lsls	r2, r2, #20
 8006a58:	0d12      	lsrs	r2, r2, #20
 8006a5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a5e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006a62:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a64:	780c      	ldrb	r4, [r1, #0]
 8006a66:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006a6a:	402a      	ands	r2, r5
 8006a6c:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8006a70:	4332      	orrs	r2, r6
 8006a72:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a76:	7809      	ldrb	r1, [r1, #0]
 8006a78:	4a61      	ldr	r2, [pc, #388]	; (8006c00 <USB_ActivateEndpoint+0x304>)
 8006a7a:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
 8006a7e:	4022      	ands	r2, r4
 8006a80:	4332      	orrs	r2, r6
 8006a82:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
}
 8006a86:	bc70      	pop	{r4, r5, r6}
 8006a88:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a8a:	780a      	ldrb	r2, [r1, #0]
 8006a8c:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8006a90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a94:	046d      	lsls	r5, r5, #17
 8006a96:	d50b      	bpl.n	8006ab0 <USB_ActivateEndpoint+0x1b4>
 8006a98:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8006a9c:	4026      	ands	r6, r4
 8006a9e:	f446 4640 	orr.w	r6, r6, #49152	; 0xc000
 8006aa2:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8006aa6:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8006aaa:	780c      	ldrb	r4, [r1, #0]
 8006aac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ab0:	8822      	ldrh	r2, [r4, #0]
 8006ab2:	0652      	lsls	r2, r2, #25
 8006ab4:	d50c      	bpl.n	8006ad0 <USB_ActivateEndpoint+0x1d4>
 8006ab6:	8822      	ldrh	r2, [r4, #0]
 8006ab8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006abc:	0512      	lsls	r2, r2, #20
 8006abe:	0d12      	lsrs	r2, r2, #20
 8006ac0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ac4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006ac8:	8022      	strh	r2, [r4, #0]
 8006aca:	780c      	ldrb	r4, [r1, #0]
 8006acc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_RX_DTOG(USBx, ep->num);
 8006ad0:	8822      	ldrh	r2, [r4, #0]
 8006ad2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006ad6:	0512      	lsls	r2, r2, #20
 8006ad8:	0d12      	lsrs	r2, r2, #20
 8006ada:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006ade:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ae2:	8022      	strh	r2, [r4, #0]
      if (ep->type != EP_TYPE_ISOC)
 8006ae4:	78ca      	ldrb	r2, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ae6:	780c      	ldrb	r4, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 8006ae8:	2a01      	cmp	r2, #1
 8006aea:	d061      	beq.n	8006bb0 <USB_ActivateEndpoint+0x2b4>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006aec:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8006af0:	4a43      	ldr	r2, [pc, #268]	; (8006c00 <USB_ActivateEndpoint+0x304>)
 8006af2:	402a      	ands	r2, r5
 8006af4:	f082 0220 	eor.w	r2, r2, #32
 8006af8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006afc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b00:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b04:	7809      	ldrb	r1, [r1, #0]
}
 8006b06:	bc70      	pop	{r4, r5, r6}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b08:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8006b0c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006b10:	0492      	lsls	r2, r2, #18
 8006b12:	0c92      	lsrs	r2, r2, #18
 8006b14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b1c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
}
 8006b20:	4770      	bx	lr
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006b22:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006b26:	690d      	ldr	r5, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006b28:	4432      	add	r2, r6
 8006b2a:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006b2e:	780a      	ldrb	r2, [r1, #0]
 8006b30:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8006b34:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8006b38:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8006b3c:	b2a4      	uxth	r4, r4
 8006b3e:	b365      	cbz	r5, 8006b9a <USB_ActivateEndpoint+0x29e>
 8006b40:	2d3e      	cmp	r5, #62	; 0x3e
 8006b42:	d84d      	bhi.n	8006be0 <USB_ActivateEndpoint+0x2e4>
 8006b44:	086e      	lsrs	r6, r5, #1
 8006b46:	07ed      	lsls	r5, r5, #31
 8006b48:	bf48      	it	mi
 8006b4a:	3601      	addmi	r6, #1
 8006b4c:	02b6      	lsls	r6, r6, #10
 8006b4e:	b2b6      	uxth	r6, r6
 8006b50:	5316      	strh	r6, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b52:	780c      	ldrb	r4, [r1, #0]
 8006b54:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8006b58:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8006b5c:	046e      	lsls	r6, r5, #17
 8006b5e:	d50e      	bpl.n	8006b7e <USB_ActivateEndpoint+0x282>
 8006b60:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006b64:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006b68:	0512      	lsls	r2, r2, #20
 8006b6a:	0d12      	lsrs	r2, r2, #20
 8006b6c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006b70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b74:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8006b78:	780a      	ldrb	r2, [r1, #0]
 8006b7a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b7e:	8811      	ldrh	r1, [r2, #0]
 8006b80:	4b20      	ldr	r3, [pc, #128]	; (8006c04 <USB_ActivateEndpoint+0x308>)
}
 8006b82:	bc70      	pop	{r4, r5, r6}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b84:	400b      	ands	r3, r1
 8006b86:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b92:	8013      	strh	r3, [r2, #0]
}
 8006b94:	4770      	bx	lr
      ret = HAL_ERROR;
 8006b96:	2001      	movs	r0, #1
 8006b98:	e6c0      	b.n	800691c <USB_ActivateEndpoint+0x20>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006b9a:	5b15      	ldrh	r5, [r2, r4]
 8006b9c:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8006ba0:	042d      	lsls	r5, r5, #16
 8006ba2:	0c2d      	lsrs	r5, r5, #16
 8006ba4:	5315      	strh	r5, [r2, r4]
 8006ba6:	5b15      	ldrh	r5, [r2, r4]
 8006ba8:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8006bac:	5315      	strh	r5, [r2, r4]
 8006bae:	e7d0      	b.n	8006b52 <USB_ActivateEndpoint+0x256>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bb0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006bb4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006bb8:	0512      	lsls	r2, r2, #20
 8006bba:	0d12      	lsrs	r2, r2, #20
 8006bbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006bc4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8006bc8:	e79c      	b.n	8006b04 <USB_ActivateEndpoint+0x208>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bca:	8823      	ldrh	r3, [r4, #0]
 8006bcc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006bd0:	051b      	lsls	r3, r3, #20
 8006bd2:	0d1b      	lsrs	r3, r3, #20
 8006bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bdc:	8023      	strh	r3, [r4, #0]
 8006bde:	e752      	b.n	8006a86 <USB_ActivateEndpoint+0x18a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006be0:	096e      	lsrs	r6, r5, #5
 8006be2:	06ed      	lsls	r5, r5, #27
 8006be4:	4d08      	ldr	r5, [pc, #32]	; (8006c08 <USB_ActivateEndpoint+0x30c>)
 8006be6:	bf08      	it	eq
 8006be8:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8006bec:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 8006bf0:	b2ad      	uxth	r5, r5
 8006bf2:	5315      	strh	r5, [r2, r4]
 8006bf4:	e7ad      	b.n	8006b52 <USB_ActivateEndpoint+0x256>
 8006bf6:	bf00      	nop
 8006bf8:	ffff898f 	.word	0xffff898f
 8006bfc:	ffff8f8f 	.word	0xffff8f8f
 8006c00:	ffff8fbf 	.word	0xffff8fbf
 8006c04:	ffffbf8f 	.word	0xffffbf8f
 8006c08:	ffff8000 	.word	0xffff8000

08006c0c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c0c:	b430      	push	{r4, r5}
 8006c0e:	780a      	ldrb	r2, [r1, #0]
  if (ep->doublebuffer == 0U)
 8006c10:	7b0d      	ldrb	r5, [r1, #12]
 8006c12:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8006c16:	784c      	ldrb	r4, [r1, #1]
 8006c18:	bb15      	cbnz	r5, 8006c60 <USB_DeactivateEndpoint+0x54>
  {
    if (ep->is_in != 0U)
 8006c1a:	2c00      	cmp	r4, #0
 8006c1c:	f000 8099 	beq.w	8006d52 <USB_DeactivateEndpoint+0x146>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c20:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 8006c24:	0664      	lsls	r4, r4, #25
 8006c26:	d50e      	bpl.n	8006c46 <USB_DeactivateEndpoint+0x3a>
 8006c28:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006c2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c30:	051b      	lsls	r3, r3, #20
 8006c32:	0d1b      	lsrs	r3, r3, #20
 8006c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c3c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006c40:	780b      	ldrb	r3, [r1, #0]
 8006c42:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c46:	881a      	ldrh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8006c48:	2000      	movs	r0, #0
 8006c4a:	bc30      	pop	{r4, r5}
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c4c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006c50:	0512      	lsls	r2, r2, #20
 8006c52:	0d12      	lsrs	r2, r2, #20
 8006c54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c5c:	801a      	strh	r2, [r3, #0]
}
 8006c5e:	4770      	bx	lr
    if (ep->is_in == 0U)
 8006c60:	2c00      	cmp	r4, #0
 8006c62:	d141      	bne.n	8006ce8 <USB_DeactivateEndpoint+0xdc>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c64:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 8006c68:	0464      	lsls	r4, r4, #17
 8006c6a:	d50e      	bpl.n	8006c8a <USB_DeactivateEndpoint+0x7e>
 8006c6c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006c70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c74:	051b      	lsls	r3, r3, #20
 8006c76:	0d1b      	lsrs	r3, r3, #20
 8006c78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c80:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006c84:	780b      	ldrb	r3, [r1, #0]
 8006c86:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c8a:	881a      	ldrh	r2, [r3, #0]
 8006c8c:	0655      	lsls	r5, r2, #25
 8006c8e:	d50c      	bpl.n	8006caa <USB_DeactivateEndpoint+0x9e>
 8006c90:	881a      	ldrh	r2, [r3, #0]
 8006c92:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006c96:	0512      	lsls	r2, r2, #20
 8006c98:	0d12      	lsrs	r2, r2, #20
 8006c9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c9e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006ca2:	801a      	strh	r2, [r3, #0]
 8006ca4:	780b      	ldrb	r3, [r1, #0]
 8006ca6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006caa:	f248 0580 	movw	r5, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8006cae:	881a      	ldrh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cb0:	4c3f      	ldr	r4, [pc, #252]	; (8006db0 <USB_DeactivateEndpoint+0x1a4>)
      PCD_TX_DTOG(USBx, ep->num);
 8006cb2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006cb6:	0512      	lsls	r2, r2, #20
 8006cb8:	0d12      	lsrs	r2, r2, #20
 8006cba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cbe:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006cc2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cc4:	780a      	ldrb	r2, [r1, #0]
 8006cc6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006cca:	4023      	ands	r3, r4
 8006ccc:	432b      	orrs	r3, r5
 8006cce:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cd2:	780a      	ldrb	r2, [r1, #0]
 8006cd4:	4b37      	ldr	r3, [pc, #220]	; (8006db4 <USB_DeactivateEndpoint+0x1a8>)
 8006cd6:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8006cda:	400b      	ands	r3, r1
 8006cdc:	431d      	orrs	r5, r3
 8006cde:	f820 5022 	strh.w	r5, [r0, r2, lsl #2]
}
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	bc30      	pop	{r4, r5}
 8006ce6:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ce8:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 8006cec:	0464      	lsls	r4, r4, #17
 8006cee:	d50e      	bpl.n	8006d0e <USB_DeactivateEndpoint+0x102>
 8006cf0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006cf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cf8:	051b      	lsls	r3, r3, #20
 8006cfa:	0d1b      	lsrs	r3, r3, #20
 8006cfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d04:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006d08:	780b      	ldrb	r3, [r1, #0]
 8006d0a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d0e:	881a      	ldrh	r2, [r3, #0]
 8006d10:	0652      	lsls	r2, r2, #25
 8006d12:	d43e      	bmi.n	8006d92 <USB_DeactivateEndpoint+0x186>
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d14:	f248 0580 	movw	r5, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8006d18:	881a      	ldrh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d1a:	4c26      	ldr	r4, [pc, #152]	; (8006db4 <USB_DeactivateEndpoint+0x1a8>)
      PCD_RX_DTOG(USBx, ep->num);
 8006d1c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006d20:	0512      	lsls	r2, r2, #20
 8006d22:	0d12      	lsrs	r2, r2, #20
 8006d24:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006d28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d2c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d2e:	780a      	ldrb	r2, [r1, #0]
 8006d30:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d34:	4023      	ands	r3, r4
 8006d36:	432b      	orrs	r3, r5
 8006d38:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d3c:	780a      	ldrb	r2, [r1, #0]
 8006d3e:	4b1c      	ldr	r3, [pc, #112]	; (8006db0 <USB_DeactivateEndpoint+0x1a4>)
 8006d40:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8006d44:	400b      	ands	r3, r1
 8006d46:	431d      	orrs	r5, r3
 8006d48:	f820 5022 	strh.w	r5, [r0, r2, lsl #2]
}
 8006d4c:	2000      	movs	r0, #0
 8006d4e:	bc30      	pop	{r4, r5}
 8006d50:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d52:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 8006d56:	0465      	lsls	r5, r4, #17
 8006d58:	d50e      	bpl.n	8006d78 <USB_DeactivateEndpoint+0x16c>
 8006d5a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d62:	051b      	lsls	r3, r3, #20
 8006d64:	0d1b      	lsrs	r3, r3, #20
 8006d66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d6e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006d72:	780b      	ldrb	r3, [r1, #0]
 8006d74:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d78:	881a      	ldrh	r2, [r3, #0]
}
 8006d7a:	2000      	movs	r0, #0
 8006d7c:	bc30      	pop	{r4, r5}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d7e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006d82:	0492      	lsls	r2, r2, #18
 8006d84:	0c92      	lsrs	r2, r2, #18
 8006d86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d8e:	801a      	strh	r2, [r3, #0]
}
 8006d90:	4770      	bx	lr
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d92:	881a      	ldrh	r2, [r3, #0]
 8006d94:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006d98:	0512      	lsls	r2, r2, #20
 8006d9a:	0d12      	lsrs	r2, r2, #20
 8006d9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006da0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006da4:	801a      	strh	r2, [r3, #0]
 8006da6:	780b      	ldrb	r3, [r1, #0]
 8006da8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006dac:	e7b2      	b.n	8006d14 <USB_DeactivateEndpoint+0x108>
 8006dae:	bf00      	nop
 8006db0:	ffffbf8f 	.word	0xffffbf8f
 8006db4:	ffff8fbf 	.word	0xffff8fbf

08006db8 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006db8:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006dba:	784c      	ldrb	r4, [r1, #1]
 8006dbc:	698b      	ldr	r3, [r1, #24]
 8006dbe:	2c01      	cmp	r4, #1
 8006dc0:	690a      	ldr	r2, [r1, #16]
 8006dc2:	d05a      	beq.n	8006e7a <USB_EPStartXfer+0xc2>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006dc4:	4293      	cmp	r3, r2
      ep->xfer_len -= len;
    }
    else
    {
      len = ep->xfer_len;
      ep->xfer_len = 0U;
 8006dc6:	bf98      	it	ls
 8006dc8:	2600      	movls	r6, #0
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8006dca:	7b0d      	ldrb	r5, [r1, #12]
      ep->xfer_len -= len;
 8006dcc:	bf88      	it	hi
 8006dce:	1a9e      	subhi	r6, r3, r2
 8006dd0:	618e      	str	r6, [r1, #24]
 8006dd2:	bf88      	it	hi
 8006dd4:	4613      	movhi	r3, r2
 8006dd6:	780a      	ldrb	r2, [r1, #0]
    if (ep->doublebuffer == 0U)
 8006dd8:	bb15      	cbnz	r5, 8006e20 <USB_EPStartXfer+0x68>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006dda:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8006dde:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 8006de2:	0112      	lsls	r2, r2, #4
 8006de4:	442c      	add	r4, r5
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f000 80a8 	beq.w	8006f3c <USB_EPStartXfer+0x184>
 8006dec:	2b3e      	cmp	r3, #62	; 0x3e
 8006dee:	f200 80c9 	bhi.w	8006f84 <USB_EPStartXfer+0x1cc>
 8006df2:	085d      	lsrs	r5, r3, #1
 8006df4:	07db      	lsls	r3, r3, #31
 8006df6:	bf48      	it	mi
 8006df8:	3501      	addmi	r5, #1
 8006dfa:	02ad      	lsls	r5, r5, #10
 8006dfc:	b2ad      	uxth	r5, r5
 8006dfe:	52a5      	strh	r5, [r4, r2]
 8006e00:	780a      	ldrb	r2, [r1, #0]
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e02:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8006e06:	4b7d      	ldr	r3, [pc, #500]	; (8006ffc <USB_EPStartXfer+0x244>)
  }

  return HAL_OK;
}
 8006e08:	bcf0      	pop	{r4, r5, r6, r7}
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e0a:	400b      	ands	r3, r1
 8006e0c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006e10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e18:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	4770      	bx	lr
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006e20:	2c00      	cmp	r4, #0
 8006e22:	d1ee      	bne.n	8006e02 <USB_EPStartXfer+0x4a>
 8006e24:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8006e28:	f200 4404 	addw	r4, r0, #1028	; 0x404
 8006e2c:	0112      	lsls	r2, r2, #4
 8006e2e:	442c      	add	r4, r5
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f040 80b3 	bne.w	8006f9c <USB_EPStartXfer+0x1e4>
 8006e36:	5aa5      	ldrh	r5, [r4, r2]
 8006e38:	4e71      	ldr	r6, [pc, #452]	; (8007000 <USB_EPStartXfer+0x248>)
 8006e3a:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8006e3e:	042d      	lsls	r5, r5, #16
 8006e40:	0c2d      	lsrs	r5, r5, #16
 8006e42:	52a5      	strh	r5, [r4, r2]
 8006e44:	5aa5      	ldrh	r5, [r4, r2]
 8006e46:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8006e4a:	52a5      	strh	r5, [r4, r2]
 8006e4c:	784c      	ldrb	r4, [r1, #1]
 8006e4e:	2c00      	cmp	r4, #0
 8006e50:	f040 80af 	bne.w	8006fb2 <USB_EPStartXfer+0x1fa>
 8006e54:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006e58:	780a      	ldrb	r2, [r1, #0]
 8006e5a:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 8006e5e:	0112      	lsls	r2, r2, #4
 8006e60:	441c      	add	r4, r3
 8006e62:	5aa3      	ldrh	r3, [r4, r2]
 8006e64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e68:	041b      	lsls	r3, r3, #16
 8006e6a:	0c1b      	lsrs	r3, r3, #16
 8006e6c:	52a3      	strh	r3, [r4, r2]
 8006e6e:	5aa3      	ldrh	r3, [r4, r2]
 8006e70:	4333      	orrs	r3, r6
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	52a3      	strh	r3, [r4, r2]
 8006e76:	780a      	ldrb	r2, [r1, #0]
 8006e78:	e7c3      	b.n	8006e02 <USB_EPStartXfer+0x4a>
    if (ep->xfer_len > ep->maxpacket)
 8006e7a:	4293      	cmp	r3, r2
      ep->xfer_len -= len;
 8006e7c:	bf86      	itte	hi
 8006e7e:	1a9c      	subhi	r4, r3, r2
 8006e80:	4613      	movhi	r3, r2
      ep->xfer_len = 0U;
 8006e82:	2400      	movls	r4, #0
 8006e84:	b29a      	uxth	r2, r3
    if (ep->doublebuffer == 0U)
 8006e86:	7b0d      	ldrb	r5, [r1, #12]
 8006e88:	3201      	adds	r2, #1
 8006e8a:	0856      	lsrs	r6, r2, #1
 8006e8c:	618c      	str	r4, [r1, #24]
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	694a      	ldr	r2, [r1, #20]
 8006e92:	f500 6780 	add.w	r7, r0, #1024	; 0x400
 8006e96:	b36d      	cbz	r5, 8006ef4 <USB_EPStartXfer+0x13c>
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e98:	780d      	ldrb	r5, [r1, #0]
 8006e9a:	f830 4025 	ldrh.w	r4, [r0, r5, lsl #2]
 8006e9e:	012d      	lsls	r5, r5, #4
 8006ea0:	0664      	lsls	r4, r4, #25
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ea2:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ea6:	d555      	bpl.n	8006f54 <USB_EPStartXfer+0x19c>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ea8:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 8006eac:	4464      	add	r4, ip
 8006eae:	5363      	strh	r3, [r4, r5]
        pmabuffer = ep->pmaaddr1;
 8006eb0:	894c      	ldrh	r4, [r1, #10]
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006eb2:	eb07 0444 	add.w	r4, r7, r4, lsl #1

  for (i = n; i != 0U; i--)
 8006eb6:	b13e      	cbz	r6, 8006ec8 <USB_EPStartXfer+0x110>
 8006eb8:	eb02 0346 	add.w	r3, r2, r6, lsl #1
 8006ebc:	f832 5b02 	ldrh.w	r5, [r2], #2
 8006ec0:	4293      	cmp	r3, r2
  {
    temp1 = *pBuf;
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
    *pdwVal = (uint16_t)temp2;
 8006ec2:	f824 5b04 	strh.w	r5, [r4], #4
  for (i = n; i != 0U; i--)
 8006ec6:	d1f9      	bne.n	8006ebc <USB_EPStartXfer+0x104>
 8006ec8:	780c      	ldrb	r4, [r1, #0]
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006eca:	784b      	ldrb	r3, [r1, #1]
 8006ecc:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d145      	bne.n	8006f60 <USB_EPStartXfer+0x1a8>
 8006ed4:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8006ed8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006edc:	051b      	lsls	r3, r3, #20
 8006ede:	0d1b      	lsrs	r3, r3, #20
 8006ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ee4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ee8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8006eec:	780a      	ldrb	r2, [r1, #0]
 8006eee:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006ef2:	e016      	b.n	8006f22 <USB_EPStartXfer+0x16a>
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ef4:	88cc      	ldrh	r4, [r1, #6]
 8006ef6:	eb07 0444 	add.w	r4, r7, r4, lsl #1
  for (i = n; i != 0U; i--)
 8006efa:	b13e      	cbz	r6, 8006f0c <USB_EPStartXfer+0x154>
 8006efc:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006f00:	f832 5b02 	ldrh.w	r5, [r2], #2
    *pdwVal = (uint16_t)temp2;
 8006f04:	f824 5b04 	strh.w	r5, [r4], #4
  for (i = n; i != 0U; i--)
 8006f08:	42a6      	cmp	r6, r4
 8006f0a:	d1f9      	bne.n	8006f00 <USB_EPStartXfer+0x148>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f0c:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8006f10:	780c      	ldrb	r4, [r1, #0]
 8006f12:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8006f16:	442a      	add	r2, r5
 8006f18:	0124      	lsls	r4, r4, #4
 8006f1a:	52a3      	strh	r3, [r4, r2]
 8006f1c:	780a      	ldrb	r2, [r1, #0]
 8006f1e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006f22:	8811      	ldrh	r1, [r2, #0]
 8006f24:	4b37      	ldr	r3, [pc, #220]	; (8007004 <USB_EPStartXfer+0x24c>)
}
 8006f26:	2000      	movs	r0, #0
 8006f28:	bcf0      	pop	{r4, r5, r6, r7}
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006f2a:	400b      	ands	r3, r1
 8006f2c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8006f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f38:	8013      	strh	r3, [r2, #0]
}
 8006f3a:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006f3c:	5aa3      	ldrh	r3, [r4, r2]
 8006f3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f42:	041b      	lsls	r3, r3, #16
 8006f44:	0c1b      	lsrs	r3, r3, #16
 8006f46:	52a3      	strh	r3, [r4, r2]
 8006f48:	5aa3      	ldrh	r3, [r4, r2]
 8006f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f4e:	52a3      	strh	r3, [r4, r2]
 8006f50:	780a      	ldrb	r2, [r1, #0]
 8006f52:	e756      	b.n	8006e02 <USB_EPStartXfer+0x4a>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f54:	f200 4404 	addw	r4, r0, #1028	; 0x404
 8006f58:	4464      	add	r4, ip
 8006f5a:	5363      	strh	r3, [r4, r5]
        pmabuffer = ep->pmaaddr0;
 8006f5c:	890c      	ldrh	r4, [r1, #8]
 8006f5e:	e7a8      	b.n	8006eb2 <USB_EPStartXfer+0xfa>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d1de      	bne.n	8006f22 <USB_EPStartXfer+0x16a>
 8006f64:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8006f68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f6c:	051b      	lsls	r3, r3, #20
 8006f6e:	0d1b      	lsrs	r3, r3, #20
 8006f70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f78:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8006f7c:	780a      	ldrb	r2, [r1, #0]
 8006f7e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006f82:	e7ce      	b.n	8006f22 <USB_EPStartXfer+0x16a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006f84:	095d      	lsrs	r5, r3, #5
 8006f86:	06df      	lsls	r7, r3, #27
 8006f88:	4b1d      	ldr	r3, [pc, #116]	; (8007000 <USB_EPStartXfer+0x248>)
 8006f8a:	bf08      	it	eq
 8006f8c:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8006f90:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	52a3      	strh	r3, [r4, r2]
 8006f98:	780a      	ldrb	r2, [r1, #0]
 8006f9a:	e732      	b.n	8006e02 <USB_EPStartXfer+0x4a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006f9c:	2b3e      	cmp	r3, #62	; 0x3e
 8006f9e:	d816      	bhi.n	8006fce <USB_EPStartXfer+0x216>
 8006fa0:	085d      	lsrs	r5, r3, #1
 8006fa2:	07de      	lsls	r6, r3, #31
 8006fa4:	bf48      	it	mi
 8006fa6:	3501      	addmi	r5, #1
 8006fa8:	02ad      	lsls	r5, r5, #10
 8006faa:	b2ad      	uxth	r5, r5
 8006fac:	52a5      	strh	r5, [r4, r2]
 8006fae:	784c      	ldrb	r4, [r1, #1]
 8006fb0:	b1d4      	cbz	r4, 8006fe8 <USB_EPStartXfer+0x230>
 8006fb2:	2c01      	cmp	r4, #1
 8006fb4:	780a      	ldrb	r2, [r1, #0]
 8006fb6:	f47f af24 	bne.w	8006e02 <USB_EPStartXfer+0x4a>
 8006fba:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8006fbe:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 8006fc2:	0112      	lsls	r2, r2, #4
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	442c      	add	r4, r5
 8006fc8:	52a3      	strh	r3, [r4, r2]
 8006fca:	780a      	ldrb	r2, [r1, #0]
 8006fcc:	e719      	b.n	8006e02 <USB_EPStartXfer+0x4a>
 8006fce:	095e      	lsrs	r6, r3, #5
 8006fd0:	06dd      	lsls	r5, r3, #27
 8006fd2:	4d0b      	ldr	r5, [pc, #44]	; (8007000 <USB_EPStartXfer+0x248>)
 8006fd4:	bf08      	it	eq
 8006fd6:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8006fda:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 8006fde:	b2ad      	uxth	r5, r5
 8006fe0:	52a5      	strh	r5, [r4, r2]
 8006fe2:	784c      	ldrb	r4, [r1, #1]
 8006fe4:	2c00      	cmp	r4, #0
 8006fe6:	d1e4      	bne.n	8006fb2 <USB_EPStartXfer+0x1fa>
 8006fe8:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8006fec:	780b      	ldrb	r3, [r1, #0]
 8006fee:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8006ff2:	4422      	add	r2, r4
 8006ff4:	011b      	lsls	r3, r3, #4
 8006ff6:	52d5      	strh	r5, [r2, r3]
 8006ff8:	780a      	ldrb	r2, [r1, #0]
 8006ffa:	e702      	b.n	8006e02 <USB_EPStartXfer+0x4a>
 8006ffc:	ffffbf8f 	.word	0xffffbf8f
 8007000:	ffff8000 	.word	0xffff8000
 8007004:	ffff8fbf 	.word	0xffff8fbf

08007008 <USB_EPSetStall>:
  if (ep->is_in != 0U)
 8007008:	784b      	ldrb	r3, [r1, #1]
 800700a:	780a      	ldrb	r2, [r1, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800700c:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
  if (ep->is_in != 0U)
 8007010:	b95b      	cbnz	r3, 800702a <USB_EPSetStall+0x22>
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007012:	4b0c      	ldr	r3, [pc, #48]	; (8007044 <USB_EPSetStall+0x3c>)
 8007014:	400b      	ands	r3, r1
 8007016:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800701a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800701e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007022:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8007026:	2000      	movs	r0, #0
 8007028:	4770      	bx	lr
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800702a:	4b07      	ldr	r3, [pc, #28]	; (8007048 <USB_EPSetStall+0x40>)
 800702c:	400b      	ands	r3, r1
 800702e:	f083 0310 	eor.w	r3, r3, #16
 8007032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800703a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800703e:	2000      	movs	r0, #0
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	ffffbf8f 	.word	0xffffbf8f
 8007048:	ffff8fbf 	.word	0xffff8fbf

0800704c <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 800704c:	7b0b      	ldrb	r3, [r1, #12]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d139      	bne.n	80070c6 <USB_EPClearStall+0x7a>
{
 8007052:	b410      	push	{r4}
 8007054:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in != 0U)
 8007056:	784c      	ldrb	r4, [r1, #1]
 8007058:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800705c:	b314      	cbz	r4, 80070a4 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800705e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007062:	0652      	lsls	r2, r2, #25
 8007064:	d50b      	bpl.n	800707e <USB_EPClearStall+0x32>
 8007066:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800706a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800706e:	0512      	lsls	r2, r2, #20
 8007070:	0d12      	lsrs	r2, r2, #20
 8007072:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007076:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800707a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800707e:	78cb      	ldrb	r3, [r1, #3]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d01d      	beq.n	80070c0 <USB_EPClearStall+0x74>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007084:	780a      	ldrb	r2, [r1, #0]
 8007086:	4b19      	ldr	r3, [pc, #100]	; (80070ec <USB_EPClearStall+0xa0>)
 8007088:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
}
 800708c:	bc10      	pop	{r4}
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800708e:	400b      	ands	r3, r1
 8007090:	f083 0320 	eor.w	r3, r3, #32
 8007094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800709c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80070a0:	2000      	movs	r0, #0
 80070a2:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070a4:	f830 4023 	ldrh.w	r4, [r0, r3, lsl #2]
 80070a8:	0464      	lsls	r4, r4, #17
 80070aa:	d40e      	bmi.n	80070ca <USB_EPClearStall+0x7e>
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80070ac:	8811      	ldrh	r1, [r2, #0]
 80070ae:	4b10      	ldr	r3, [pc, #64]	; (80070f0 <USB_EPClearStall+0xa4>)
 80070b0:	400b      	ands	r3, r1
 80070b2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80070b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070be:	8013      	strh	r3, [r2, #0]
}
 80070c0:	2000      	movs	r0, #0
 80070c2:	bc10      	pop	{r4}
 80070c4:	4770      	bx	lr
 80070c6:	2000      	movs	r0, #0
 80070c8:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070ca:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80070ce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80070d2:	0512      	lsls	r2, r2, #20
 80070d4:	0d12      	lsrs	r2, r2, #20
 80070d6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80070da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80070de:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 80070e2:	780a      	ldrb	r2, [r1, #0]
 80070e4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80070e8:	e7e0      	b.n	80070ac <USB_EPClearStall+0x60>
 80070ea:	bf00      	nop
 80070ec:	ffff8fbf 	.word	0xffff8fbf
 80070f0:	ffffbf8f 	.word	0xffffbf8f

080070f4 <USB_SetDevAddress>:
  if (address == 0U)
 80070f4:	b911      	cbnz	r1, 80070fc <USB_SetDevAddress+0x8>
    USBx->DADDR = USB_DADDR_EF;
 80070f6:	2380      	movs	r3, #128	; 0x80
 80070f8:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 80070fc:	2000      	movs	r0, #0
 80070fe:	4770      	bx	lr

08007100 <USB_DevConnect>:
 8007100:	2000      	movs	r0, #0
 8007102:	4770      	bx	lr

08007104 <USB_DevDisconnect>:
 8007104:	2000      	movs	r0, #0
 8007106:	4770      	bx	lr

08007108 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 8007108:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop

08007110 <USB_EP0_OutStart>:
}
 8007110:	2000      	movs	r0, #0
 8007112:	4770      	bx	lr

08007114 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007114:	eb00 0242 	add.w	r2, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 8007118:	0858      	lsrs	r0, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800711a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800711e:	d01a      	beq.n	8007156 <USB_ReadPMA+0x42>
{
 8007120:	b4f0      	push	{r4, r5, r6, r7}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007122:	4617      	mov	r7, r2
  for (i = n; i != 0U; i--)
 8007124:	4606      	mov	r6, r0
 8007126:	1c8d      	adds	r5, r1, #2
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007128:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 800712c:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 800712e:	b2a4      	uxth	r4, r4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007130:	ea4f 2c14 	mov.w	ip, r4, lsr #8
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007134:	f805 4c02 	strb.w	r4, [r5, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007138:	f805 cc01 	strb.w	ip, [r5, #-1]
 800713c:	f105 0502 	add.w	r5, r5, #2
  for (i = n; i != 0U; i--)
 8007140:	d1f2      	bne.n	8007128 <USB_ReadPMA+0x14>
  if ((wNBytes % 2U) != 0U)
  {
    temp = *pdwVal;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
  }
}
 8007142:	bcf0      	pop	{r4, r5, r6, r7}
 8007144:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8007148:	eb02 0280 	add.w	r2, r2, r0, lsl #2
  if ((wNBytes % 2U) != 0U)
 800714c:	07d8      	lsls	r0, r3, #31
    temp = *pdwVal;
 800714e:	bf44      	itt	mi
 8007150:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007152:	700b      	strbmi	r3, [r1, #0]
}
 8007154:	4770      	bx	lr
  if ((wNBytes % 2U) != 0U)
 8007156:	07db      	lsls	r3, r3, #31
    temp = *pdwVal;
 8007158:	bf44      	itt	mi
 800715a:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800715c:	700b      	strbmi	r3, [r1, #0]
 800715e:	4770      	bx	lr

08007160 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007160:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8007164:	b183      	cbz	r3, 8007188 <USBD_CDC_EP0_RxReady+0x28>
{
 8007166:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007168:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800716c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8007170:	28ff      	cmp	r0, #255	; 0xff
 8007172:	d007      	beq.n	8007184 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800717a:	4621      	mov	r1, r4
 800717c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800717e:	23ff      	movs	r3, #255	; 0xff
 8007180:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8007184:	2000      	movs	r0, #0
 8007186:	bd10      	pop	{r4, pc}
 8007188:	2000      	movs	r0, #0
 800718a:	4770      	bx	lr

0800718c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800718c:	2343      	movs	r3, #67	; 0x43
 800718e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8007190:	4800      	ldr	r0, [pc, #0]	; (8007194 <USBD_CDC_GetFSCfgDesc+0x8>)
 8007192:	4770      	bx	lr
 8007194:	2000007c 	.word	0x2000007c

08007198 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007198:	2343      	movs	r3, #67	; 0x43
 800719a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800719c:	4800      	ldr	r0, [pc, #0]	; (80071a0 <USBD_CDC_GetHSCfgDesc+0x8>)
 800719e:	4770      	bx	lr
 80071a0:	200000c0 	.word	0x200000c0

080071a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80071a4:	2343      	movs	r3, #67	; 0x43
 80071a6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80071a8:	4800      	ldr	r0, [pc, #0]	; (80071ac <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80071aa:	4770      	bx	lr
 80071ac:	20000110 	.word	0x20000110

080071b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80071b0:	230a      	movs	r3, #10
 80071b2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80071b4:	4800      	ldr	r0, [pc, #0]	; (80071b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80071b6:	4770      	bx	lr
 80071b8:	20000104 	.word	0x20000104

080071bc <USBD_CDC_DataOut>:
{
 80071bc:	b538      	push	{r3, r4, r5, lr}
 80071be:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071c0:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80071c4:	f000 ffda 	bl	800817c <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 80071c8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80071cc:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 80071d0:	b14b      	cbz	r3, 80071e6 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80071d2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80071d6:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80071e0:	4798      	blx	r3
    return USBD_OK;
 80071e2:	2000      	movs	r0, #0
}
 80071e4:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80071e6:	2002      	movs	r0, #2
}
 80071e8:	bd38      	pop	{r3, r4, r5, pc}
 80071ea:	bf00      	nop

080071ec <USBD_CDC_DataIn>:
{
 80071ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071ee:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 80071f2:	b1d6      	cbz	r6, 800722a <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80071f4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80071f8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80071fc:	69df      	ldr	r7, [r3, #28]
 80071fe:	b14f      	cbz	r7, 8007214 <USBD_CDC_DataIn+0x28>
 8007200:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 8007204:	eb02 1541 	add.w	r5, r2, r1, lsl #5
 8007208:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800720a:	fbb7 f4f2 	udiv	r4, r7, r2
 800720e:	fb02 7414 	mls	r4, r2, r4, r7
 8007212:	b11c      	cbz	r4, 800721c <USBD_CDC_DataIn+0x30>
      hcdc->TxState = 0U;
 8007214:	2000      	movs	r0, #0
 8007216:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
}
 800721a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pdev->ep_in[epnum].total_length = 0U;
 800721c:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800721e:	4622      	mov	r2, r4
 8007220:	4623      	mov	r3, r4
 8007222:	f000 ff8f 	bl	8008144 <USBD_LL_Transmit>
    return USBD_OK;
 8007226:	4620      	mov	r0, r4
}
 8007228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 800722a:	2002      	movs	r0, #2
}
 800722c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800722e:	bf00      	nop

08007230 <USBD_CDC_Setup>:
{
 8007230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t ifalt = 0U;
 8007234:	2700      	movs	r7, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007236:	780b      	ldrb	r3, [r1, #0]
{
 8007238:	b082      	sub	sp, #8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800723a:	f013 0460 	ands.w	r4, r3, #96	; 0x60
{
 800723e:	460d      	mov	r5, r1
 8007240:	4606      	mov	r6, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007242:	f8d0 82b8 	ldr.w	r8, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8007246:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 800724a:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800724e:	d00f      	beq.n	8007270 <USBD_CDC_Setup+0x40>
 8007250:	2c20      	cmp	r4, #32
 8007252:	d117      	bne.n	8007284 <USBD_CDC_Setup+0x54>
      if (req->wLength)
 8007254:	88cc      	ldrh	r4, [r1, #6]
 8007256:	f891 c001 	ldrb.w	ip, [r1, #1]
 800725a:	bb64      	cbnz	r4, 80072b6 <USBD_CDC_Setup+0x86>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800725c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8007260:	4622      	mov	r2, r4
 8007262:	4660      	mov	r0, ip
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8007268:	4620      	mov	r0, r4
}
 800726a:	b002      	add	sp, #8
 800726c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      switch (req->bRequest)
 8007270:	784f      	ldrb	r7, [r1, #1]
 8007272:	2f0a      	cmp	r7, #10
 8007274:	d014      	beq.n	80072a0 <USBD_CDC_Setup+0x70>
 8007276:	2f0b      	cmp	r7, #11
 8007278:	d00c      	beq.n	8007294 <USBD_CDC_Setup+0x64>
 800727a:	b91f      	cbnz	r7, 8007284 <USBD_CDC_Setup+0x54>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800727c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007280:	2b03      	cmp	r3, #3
 8007282:	d028      	beq.n	80072d6 <USBD_CDC_Setup+0xa6>
          USBD_CtlError(pdev, req);
 8007284:	4630      	mov	r0, r6
 8007286:	4629      	mov	r1, r5
 8007288:	f000 fc9e 	bl	8007bc8 <USBD_CtlError>
          ret = USBD_FAIL;
 800728c:	2002      	movs	r0, #2
}
 800728e:	b002      	add	sp, #8
 8007290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007294:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007298:	2b03      	cmp	r3, #3
 800729a:	d1f3      	bne.n	8007284 <USBD_CDC_Setup+0x54>
  uint8_t ret = USBD_OK;
 800729c:	4620      	mov	r0, r4
 800729e:	e7f6      	b.n	800728e <USBD_CDC_Setup+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072a0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80072a4:	2b03      	cmp	r3, #3
 80072a6:	d1ed      	bne.n	8007284 <USBD_CDC_Setup+0x54>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80072a8:	2201      	movs	r2, #1
 80072aa:	f10d 0105 	add.w	r1, sp, #5
 80072ae:	f000 fcbd 	bl	8007c2c <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80072b2:	4620      	mov	r0, r4
 80072b4:	e7eb      	b.n	800728e <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 80072b6:	061b      	lsls	r3, r3, #24
 80072b8:	d514      	bpl.n	80072e4 <USBD_CDC_Setup+0xb4>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072ba:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80072be:	4622      	mov	r2, r4
 80072c0:	4660      	mov	r0, ip
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	4641      	mov	r1, r8
 80072c6:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80072c8:	88ea      	ldrh	r2, [r5, #6]
 80072ca:	4641      	mov	r1, r8
 80072cc:	4630      	mov	r0, r6
 80072ce:	f000 fcad 	bl	8007c2c <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80072d2:	4638      	mov	r0, r7
 80072d4:	e7db      	b.n	800728e <USBD_CDC_Setup+0x5e>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80072d6:	2202      	movs	r2, #2
 80072d8:	f10d 0106 	add.w	r1, sp, #6
 80072dc:	f000 fca6 	bl	8007c2c <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80072e0:	4638      	mov	r0, r7
 80072e2:	e7d4      	b.n	800728e <USBD_CDC_Setup+0x5e>
          hcdc->CmdOpCode = req->bRequest;
 80072e4:	f888 c200 	strb.w	ip, [r8, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80072e8:	f888 4201 	strb.w	r4, [r8, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80072ec:	4622      	mov	r2, r4
 80072ee:	4641      	mov	r1, r8
 80072f0:	f000 fcb2 	bl	8007c58 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 80072f4:	4638      	mov	r0, r7
 80072f6:	e7ca      	b.n	800728e <USBD_CDC_Setup+0x5e>

080072f8 <USBD_CDC_DeInit>:
{
 80072f8:	b538      	push	{r3, r4, r5, lr}
 80072fa:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80072fc:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80072fe:	2181      	movs	r1, #129	; 0x81
 8007300:	f000 fed8 	bl	80080b4 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007304:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007306:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007308:	4620      	mov	r0, r4
 800730a:	f000 fed3 	bl	80080b4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800730e:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007312:	4620      	mov	r0, r4
 8007314:	2182      	movs	r1, #130	; 0x82
 8007316:	f000 fecd 	bl	80080b4 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800731a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800731e:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8007320:	b14b      	cbz	r3, 8007336 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007322:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800732a:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 800732e:	f000 ff2d 	bl	800818c <USBD_static_free>
    pdev->pClassData = NULL;
 8007332:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8007336:	2000      	movs	r0, #0
 8007338:	bd38      	pop	{r3, r4, r5, pc}
 800733a:	bf00      	nop

0800733c <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800733c:	7c03      	ldrb	r3, [r0, #16]
{
 800733e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007342:	4604      	mov	r4, r0
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007344:	2501      	movs	r5, #1
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007346:	bbbb      	cbnz	r3, 80073b8 <USBD_CDC_Init+0x7c>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800734c:	2202      	movs	r2, #2
 800734e:	2181      	movs	r1, #129	; 0x81
 8007350:	f000 fea0 	bl	8008094 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007354:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007356:	4629      	mov	r1, r5
 8007358:	f44f 7300 	mov.w	r3, #512	; 0x200
 800735c:	2202      	movs	r2, #2
 800735e:	4620      	mov	r0, r4
 8007360:	f000 fe98 	bl	8008094 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007364:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007368:	2701      	movs	r7, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800736a:	2308      	movs	r3, #8
 800736c:	2203      	movs	r2, #3
 800736e:	2182      	movs	r1, #130	; 0x82
 8007370:	4620      	mov	r0, r4
 8007372:	f000 fe8f 	bl	8008094 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007376:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007378:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800737c:	f000 ff02 	bl	8008184 <USBD_static_malloc>
 8007380:	4605      	mov	r5, r0
 8007382:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8007386:	b368      	cbz	r0, 80073e4 <USBD_CDC_Init+0xa8>
    hcdc->TxState = 0U;
 8007388:	2600      	movs	r6, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800738a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007392:	f894 8010 	ldrb.w	r8, [r4, #16]
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007396:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
    hcdc->TxState = 0U;
 800739a:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800739e:	4639      	mov	r1, r7
    hcdc->RxState = 0U;
 80073a0:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073a4:	4620      	mov	r0, r4
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073a6:	f1b8 0f00 	cmp.w	r8, #0
 80073aa:	d014      	beq.n	80073d6 <USBD_CDC_Init+0x9a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073ac:	2340      	movs	r3, #64	; 0x40
 80073ae:	f000 fed7 	bl	8008160 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80073b2:	4630      	mov	r0, r6
}
 80073b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80073b8:	2340      	movs	r3, #64	; 0x40
 80073ba:	2202      	movs	r2, #2
 80073bc:	2181      	movs	r1, #129	; 0x81
 80073be:	f000 fe69 	bl	8008094 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80073c2:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80073c4:	4629      	mov	r1, r5
 80073c6:	2340      	movs	r3, #64	; 0x40
 80073c8:	2202      	movs	r2, #2
 80073ca:	4620      	mov	r0, r4
 80073cc:	f000 fe62 	bl	8008094 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80073d0:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 80073d4:	e7c8      	b.n	8007368 <USBD_CDC_Init+0x2c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073da:	f000 fec1 	bl	8008160 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80073de:	4640      	mov	r0, r8
}
 80073e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 80073e4:	4638      	mov	r0, r7
 80073e6:	e7e5      	b.n	80073b4 <USBD_CDC_Init+0x78>

080073e8 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80073e8:	b119      	cbz	r1, 80073f2 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 80073ea:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 80073ee:	2000      	movs	r0, #0
 80073f0:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80073f2:	2002      	movs	r0, #2
  }

  return ret;
}
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop

080073f8 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80073f8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 80073fc:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80073fe:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007402:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8007406:	4770      	bx	lr

08007408 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8007408:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 800740c:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800740e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8007412:	4770      	bx	lr

08007414 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007414:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  if (pdev->pClassData != NULL)
 8007418:	b19a      	cbz	r2, 8007442 <USBD_CDC_TransmitPacket+0x2e>
{
 800741a:	b538      	push	{r3, r4, r5, lr}
  {
    if (hcdc->TxState == 0U)
 800741c:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8007420:	b10c      	cbz	r4, 8007426 <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8007422:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8007424:	bd38      	pop	{r3, r4, r5, pc}
      hcdc->TxState = 1U;
 8007426:	2501      	movs	r5, #1
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007428:	f8d2 1210 	ldr.w	r1, [r2, #528]	; 0x210
      hcdc->TxState = 1U;
 800742c:	f8c2 5214 	str.w	r5, [r2, #532]	; 0x214
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007430:	b28b      	uxth	r3, r1
 8007432:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007436:	6301      	str	r1, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007438:	2181      	movs	r1, #129	; 0x81
 800743a:	f000 fe83 	bl	8008144 <USBD_LL_Transmit>
      return USBD_OK;
 800743e:	4620      	mov	r0, r4
}
 8007440:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8007442:	2002      	movs	r0, #2
}
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop

08007448 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007448:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800744c:	b18a      	cbz	r2, 8007472 <USBD_CDC_ReceivePacket+0x2a>
{
 800744e:	b510      	push	{r4, lr}
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007450:	7c04      	ldrb	r4, [r0, #16]
 8007452:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8007456:	b12c      	cbz	r4, 8007464 <USBD_CDC_ReceivePacket+0x1c>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007458:	2340      	movs	r3, #64	; 0x40
 800745a:	2101      	movs	r1, #1
 800745c:	f000 fe80 	bl	8008160 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007460:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8007462:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8007464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007468:	2101      	movs	r1, #1
 800746a:	f000 fe79 	bl	8008160 <USBD_LL_PrepareReceive>
    return USBD_OK;
 800746e:	4620      	mov	r0, r4
}
 8007470:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8007472:	2002      	movs	r0, #2
}
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop

08007478 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007478:	b188      	cbz	r0, 800749e <USBD_Init+0x26>
{
 800747a:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800747c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007480:	b113      	cbz	r3, 8007488 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8007482:	2300      	movs	r3, #0
 8007484:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007488:	b109      	cbz	r1, 800748e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800748a:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800748e:	2301      	movs	r3, #1
  pdev->id = id;
 8007490:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007492:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007496:	f000 fdad 	bl	8007ff4 <USBD_LL_Init>

  return USBD_OK;
 800749a:	2000      	movs	r0, #0
}
 800749c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800749e:	2002      	movs	r0, #2
}
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop

080074a4 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 80074a4:	b119      	cbz	r1, 80074ae <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80074a6:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 80074aa:	2000      	movs	r0, #0
 80074ac:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80074ae:	2002      	movs	r0, #2
  }

  return status;
}
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop

080074b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80074b4:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80074b6:	f000 fddf 	bl	8008078 <USBD_LL_Start>

  return USBD_OK;
}
 80074ba:	2000      	movs	r0, #0
 80074bc:	bd08      	pop	{r3, pc}
 80074be:	bf00      	nop

080074c0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80074c0:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80074c2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80074c6:	b11b      	cbz	r3, 80074d0 <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4798      	blx	r3
 80074cc:	b900      	cbnz	r0, 80074d0 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 80074ce:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 80074d0:	2002      	movs	r0, #2
}
 80074d2:	bd08      	pop	{r3, pc}

080074d4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80074d4:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80074d6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	4798      	blx	r3

  return USBD_OK;
}
 80074de:	2000      	movs	r0, #0
 80074e0:	bd08      	pop	{r3, pc}
 80074e2:	bf00      	nop

080074e4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80074e8:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 80074ec:	4628      	mov	r0, r5
 80074ee:	f000 fb57 	bl	8007ba0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80074f2:	2001      	movs	r0, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80074f4:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_data_len = pdev->request.wLength;
 80074f8:	f8b4 22ae 	ldrh.w	r2, [r4, #686]	; 0x2ae
  switch (pdev->request.bmRequest & 0x1FU)
 80074fc:	f001 031f 	and.w	r3, r1, #31
 8007500:	4283      	cmp	r3, r0
  pdev->ep0_state = USBD_EP0_SETUP;
 8007502:	f8c4 0294 	str.w	r0, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8007506:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800750a:	d015      	beq.n	8007538 <USBD_LL_SetupStage+0x54>
 800750c:	d30e      	bcc.n	800752c <USBD_LL_SetupStage+0x48>
 800750e:	2b02      	cmp	r3, #2
 8007510:	d006      	beq.n	8007520 <USBD_LL_SetupStage+0x3c>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007512:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8007516:	4620      	mov	r0, r4
 8007518:	f000 fdda 	bl	80080d0 <USBD_LL_StallEP>
      break;
  }

  return USBD_OK;
}
 800751c:	2000      	movs	r0, #0
 800751e:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdEPReq(pdev, &pdev->request);
 8007520:	4629      	mov	r1, r5
 8007522:	4620      	mov	r0, r4
 8007524:	f000 faa6 	bl	8007a74 <USBD_StdEPReq>
}
 8007528:	2000      	movs	r0, #0
 800752a:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdDevReq(pdev, &pdev->request);
 800752c:	4629      	mov	r1, r5
 800752e:	4620      	mov	r0, r4
 8007530:	f000 f8f6 	bl	8007720 <USBD_StdDevReq>
}
 8007534:	2000      	movs	r0, #0
 8007536:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8007538:	4629      	mov	r1, r5
 800753a:	4620      	mov	r0, r4
 800753c:	f000 fa6e 	bl	8007a1c <USBD_StdItfReq>
}
 8007540:	2000      	movs	r0, #0
 8007542:	bd38      	pop	{r3, r4, r5, pc}

08007544 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007544:	b570      	push	{r4, r5, r6, lr}
 8007546:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007548:	b941      	cbnz	r1, 800755c <USBD_LL_DataOutStage+0x18>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800754a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800754e:	2b03      	cmp	r3, #3
 8007550:	d00f      	beq.n	8007572 <USBD_LL_DataOutStage+0x2e>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007552:	2b05      	cmp	r3, #5
 8007554:	460c      	mov	r4, r1
 8007556:	d02e      	beq.n	80075b6 <USBD_LL_DataOutStage+0x72>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8007558:	2000      	movs	r0, #0
}
 800755a:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 800755c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	b1c3      	cbz	r3, 8007596 <USBD_LL_DataOutStage+0x52>
 8007564:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007568:	2a03      	cmp	r2, #3
 800756a:	d114      	bne.n	8007596 <USBD_LL_DataOutStage+0x52>
    pdev->pClass->DataOut(pdev, epnum);
 800756c:	4798      	blx	r3
  return USBD_OK;
 800756e:	2000      	movs	r0, #0
}
 8007570:	bd70      	pop	{r4, r5, r6, pc}
 8007572:	4616      	mov	r6, r2
      if (pep->rem_length > pep->maxpacket)
 8007574:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8007578:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 800757c:	4293      	cmp	r3, r2
 800757e:	d90c      	bls.n	800759a <USBD_LL_DataOutStage+0x56>
        pep->rem_length -= pep->maxpacket;
 8007580:	1a9b      	subs	r3, r3, r2
        USBD_CtlContinueRx(pdev, pdata,
 8007582:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8007584:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8007588:	bf8c      	ite	hi
 800758a:	b29a      	uxthhi	r2, r3
 800758c:	b292      	uxthls	r2, r2
 800758e:	4631      	mov	r1, r6
 8007590:	f000 fb72 	bl	8007c78 <USBD_CtlContinueRx>
 8007594:	e7e0      	b.n	8007558 <USBD_LL_DataOutStage+0x14>
    return USBD_FAIL;
 8007596:	2002      	movs	r0, #2
}
 8007598:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800759a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	b123      	cbz	r3, 80075ac <USBD_LL_DataOutStage+0x68>
 80075a2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80075a6:	2a03      	cmp	r2, #3
 80075a8:	d100      	bne.n	80075ac <USBD_LL_DataOutStage+0x68>
          pdev->pClass->EP0_RxReady(pdev);
 80075aa:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80075ac:	4628      	mov	r0, r5
 80075ae:	f000 fb6b 	bl	8007c88 <USBD_CtlSendStatus>
  return USBD_OK;
 80075b2:	2000      	movs	r0, #0
}
 80075b4:	bd70      	pop	{r4, r5, r6, pc}
        pdev->ep0_state = USBD_EP0_IDLE;
 80075b6:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80075ba:	f000 fd89 	bl	80080d0 <USBD_LL_StallEP>
  return USBD_OK;
 80075be:	4620      	mov	r0, r4
}
 80075c0:	bd70      	pop	{r4, r5, r6, pc}
 80075c2:	bf00      	nop

080075c4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80075c4:	b570      	push	{r4, r5, r6, lr}
 80075c6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80075c8:	b981      	cbnz	r1, 80075ec <USBD_LL_DataInStage+0x28>
 80075ca:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80075cc:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80075d0:	2a02      	cmp	r2, #2
 80075d2:	d019      	beq.n	8007608 <USBD_LL_DataInStage+0x44>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80075d4:	f032 0304 	bics.w	r3, r2, #4
 80075d8:	d102      	bne.n	80075e0 <USBD_LL_DataInStage+0x1c>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80075da:	2180      	movs	r1, #128	; 0x80
 80075dc:	f000 fd78 	bl	80080d0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80075e0:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80075e4:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d00b      	beq.n	8007602 <USBD_LL_DataInStage+0x3e>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80075ea:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 80075ec:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	b363      	cbz	r3, 800764e <USBD_LL_DataInStage+0x8a>
 80075f4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80075f8:	2a03      	cmp	r2, #3
 80075fa:	d128      	bne.n	800764e <USBD_LL_DataInStage+0x8a>
    pdev->pClass->DataIn(pdev, epnum);
 80075fc:	4798      	blx	r3
  return USBD_OK;
 80075fe:	2000      	movs	r0, #0
}
 8007600:	bd70      	pop	{r4, r5, r6, pc}
      pdev->dev_test_mode = 0U;
 8007602:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
}
 8007606:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8007608:	e9d0 6208 	ldrd	r6, r2, [r0, #32]
 800760c:	4296      	cmp	r6, r2
 800760e:	d820      	bhi.n	8007652 <USBD_LL_DataInStage+0x8e>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007610:	69c3      	ldr	r3, [r0, #28]
 8007612:	fbb3 f5f2 	udiv	r5, r3, r2
 8007616:	fb02 3515 	mls	r5, r2, r5, r3
 800761a:	b90d      	cbnz	r5, 8007620 <USBD_LL_DataInStage+0x5c>
 800761c:	429a      	cmp	r2, r3
 800761e:	d926      	bls.n	800766e <USBD_LL_DataInStage+0xaa>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007620:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	b12b      	cbz	r3, 8007634 <USBD_LL_DataInStage+0x70>
 8007628:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800762c:	2a03      	cmp	r2, #3
 800762e:	d101      	bne.n	8007634 <USBD_LL_DataInStage+0x70>
            pdev->pClass->EP0_TxSent(pdev);
 8007630:	4620      	mov	r0, r4
 8007632:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8007634:	2180      	movs	r1, #128	; 0x80
 8007636:	4620      	mov	r0, r4
 8007638:	f000 fd4a 	bl	80080d0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800763c:	4620      	mov	r0, r4
 800763e:	f000 fb2f 	bl	8007ca0 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 8007642:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
      pdev->dev_test_mode = 0U;
 8007646:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 8007648:	2b01      	cmp	r3, #1
 800764a:	d1ce      	bne.n	80075ea <USBD_LL_DataInStage+0x26>
 800764c:	e7d9      	b.n	8007602 <USBD_LL_DataInStage+0x3e>
    return USBD_FAIL;
 800764e:	2002      	movs	r0, #2
}
 8007650:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8007652:	1ab2      	subs	r2, r6, r2
 8007654:	460d      	mov	r5, r1
 8007656:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007658:	4619      	mov	r1, r3
 800765a:	b292      	uxth	r2, r2
 800765c:	f000 faf4 	bl	8007c48 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007660:	462b      	mov	r3, r5
 8007662:	462a      	mov	r2, r5
 8007664:	4629      	mov	r1, r5
 8007666:	4620      	mov	r0, r4
 8007668:	f000 fd7a 	bl	8008160 <USBD_LL_PrepareReceive>
 800766c:	e7b8      	b.n	80075e0 <USBD_LL_DataInStage+0x1c>
            (pep->total_length >= pep->maxpacket) &&
 800766e:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8007672:	4293      	cmp	r3, r2
 8007674:	d2d4      	bcs.n	8007620 <USBD_LL_DataInStage+0x5c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007676:	462a      	mov	r2, r5
 8007678:	f000 fae6 	bl	8007c48 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800767c:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8007680:	e7ee      	b.n	8007660 <USBD_LL_DataInStage+0x9c>
 8007682:	bf00      	nop

08007684 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007684:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007686:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007688:	2640      	movs	r6, #64	; 0x40
{
 800768a:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800768c:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800768e:	4611      	mov	r1, r2
 8007690:	4633      	mov	r3, r6
 8007692:	f000 fcff 	bl	8008094 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007696:	4633      	mov	r3, r6
 8007698:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800769a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800769e:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076a2:	4620      	mov	r0, r4
 80076a4:	2200      	movs	r2, #0
 80076a6:	f000 fcf5 	bl	8008094 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 80076aa:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80076ac:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80076b0:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80076b2:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076b4:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80076b8:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 80076bc:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80076be:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 80076c2:	b123      	cbz	r3, 80076ce <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80076c4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80076c8:	4620      	mov	r0, r4
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	4798      	blx	r3
  }

  return USBD_OK;
}
 80076ce:	2000      	movs	r0, #0
 80076d0:	bd70      	pop	{r4, r5, r6, pc}
 80076d2:	bf00      	nop

080076d4 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80076d4:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80076d6:	2000      	movs	r0, #0
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop

080076dc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80076dc:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80076de:	2204      	movs	r2, #4
  pdev->dev_old_state =  pdev->dev_state;
 80076e0:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80076e4:	2000      	movs	r0, #0
  pdev->dev_old_state =  pdev->dev_state;
 80076e6:	f883 129d 	strb.w	r1, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80076ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
}
 80076ee:	4770      	bx	lr

080076f0 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80076f0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80076f4:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80076f6:	bf04      	itt	eq
 80076f8:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80076fc:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8007700:	2000      	movs	r0, #0
 8007702:	4770      	bx	lr

08007704 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007704:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007708:	2a03      	cmp	r2, #3
 800770a:	d001      	beq.n	8007710 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 800770c:	2000      	movs	r0, #0
 800770e:	4770      	bx	lr
{
 8007710:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 8007712:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	b103      	cbz	r3, 800771c <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 800771a:	4798      	blx	r3
}
 800771c:	2000      	movs	r0, #0
 800771e:	bd08      	pop	{r3, pc}

08007720 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007720:	b530      	push	{r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007722:	780b      	ldrb	r3, [r1, #0]
{
 8007724:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007726:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800772a:	2b20      	cmp	r3, #32
{
 800772c:	460d      	mov	r5, r1
 800772e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007730:	d028      	beq.n	8007784 <USBD_StdDevReq+0x64>
 8007732:	2b40      	cmp	r3, #64	; 0x40
 8007734:	d026      	beq.n	8007784 <USBD_StdDevReq+0x64>
 8007736:	b153      	cbz	r3, 800774e <USBD_StdDevReq+0x2e>
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8007738:	2180      	movs	r1, #128	; 0x80
 800773a:	4620      	mov	r0, r4
 800773c:	f000 fcc8 	bl	80080d0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007740:	4620      	mov	r0, r4
 8007742:	2100      	movs	r1, #0
 8007744:	f000 fcc4 	bl	80080d0 <USBD_LL_StallEP>
}
 8007748:	2000      	movs	r0, #0
 800774a:	b003      	add	sp, #12
 800774c:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 800774e:	784b      	ldrb	r3, [r1, #1]
 8007750:	2b09      	cmp	r3, #9
 8007752:	d8f1      	bhi.n	8007738 <USBD_StdDevReq+0x18>
 8007754:	a201      	add	r2, pc, #4	; (adr r2, 800775c <USBD_StdDevReq+0x3c>)
 8007756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775a:	bf00      	nop
 800775c:	080077d9 	.word	0x080077d9
 8007760:	08007805 	.word	0x08007805
 8007764:	08007739 	.word	0x08007739
 8007768:	08007821 	.word	0x08007821
 800776c:	08007739 	.word	0x08007739
 8007770:	0800782d 	.word	0x0800782d
 8007774:	0800786b 	.word	0x0800786b
 8007778:	08007739 	.word	0x08007739
 800777c:	080078a1 	.word	0x080078a1
 8007780:	08007797 	.word	0x08007797
      pdev->pClass->Setup(pdev, req);
 8007784:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8007788:	4629      	mov	r1, r5
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	4620      	mov	r0, r4
 800778e:	4798      	blx	r3
}
 8007790:	2000      	movs	r0, #0
 8007792:	b003      	add	sp, #12
 8007794:	bd30      	pop	{r4, r5, pc}
  cfgidx = (uint8_t)(req->wValue);
 8007796:	7889      	ldrb	r1, [r1, #2]
 8007798:	4d9f      	ldr	r5, [pc, #636]	; (8007a18 <USBD_StdDevReq+0x2f8>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800779a:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800779c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800779e:	d8cb      	bhi.n	8007738 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 80077a0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	f000 810d 	beq.w	80079c4 <USBD_StdDevReq+0x2a4>
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	f040 80fe 	bne.w	80079ac <USBD_StdDevReq+0x28c>
        if (cfgidx == 0U)
 80077b0:	2900      	cmp	r1, #0
 80077b2:	f000 8127 	beq.w	8007a04 <USBD_StdDevReq+0x2e4>
        else if (cfgidx != pdev->dev_config)
 80077b6:	6841      	ldr	r1, [r0, #4]
 80077b8:	2901      	cmp	r1, #1
 80077ba:	d009      	beq.n	80077d0 <USBD_StdDevReq+0xb0>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80077bc:	b2c9      	uxtb	r1, r1
 80077be:	f7ff fe89 	bl	80074d4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80077c2:	7829      	ldrb	r1, [r5, #0]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80077c4:	4620      	mov	r0, r4
          pdev->dev_config = cfgidx;
 80077c6:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80077c8:	f7ff fe7a 	bl	80074c0 <USBD_SetClassConfig>
 80077cc:	2802      	cmp	r0, #2
 80077ce:	d0b3      	beq.n	8007738 <USBD_StdDevReq+0x18>
    USBD_CtlSendStatus(pdev);
 80077d0:	4620      	mov	r0, r4
 80077d2:	f000 fa59 	bl	8007c88 <USBD_CtlSendStatus>
 80077d6:	e7b7      	b.n	8007748 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 80077d8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80077dc:	2203      	movs	r2, #3
 80077de:	3b01      	subs	r3, #1
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d8a9      	bhi.n	8007738 <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 80077e4:	88cb      	ldrh	r3, [r1, #6]
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d1a6      	bne.n	8007738 <USBD_StdDevReq+0x18>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80077ea:	2101      	movs	r1, #1
      if (pdev->dev_remote_wakeup)
 80077ec:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80077f0:	60c1      	str	r1, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80077f2:	b103      	cbz	r3, 80077f6 <USBD_StdDevReq+0xd6>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80077f4:	60c2      	str	r2, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80077f6:	2202      	movs	r2, #2
 80077f8:	f104 010c 	add.w	r1, r4, #12
 80077fc:	4620      	mov	r0, r4
 80077fe:	f000 fa15 	bl	8007c2c <USBD_CtlSendData>
 8007802:	e7a1      	b.n	8007748 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 8007804:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007808:	3b01      	subs	r3, #1
 800780a:	2b02      	cmp	r3, #2
 800780c:	d894      	bhi.n	8007738 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800780e:	884b      	ldrh	r3, [r1, #2]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d199      	bne.n	8007748 <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 8007814:	2300      	movs	r3, #0
 8007816:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800781a:	f000 fa35 	bl	8007c88 <USBD_CtlSendStatus>
 800781e:	e793      	b.n	8007748 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007820:	884b      	ldrh	r3, [r1, #2]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d190      	bne.n	8007748 <USBD_StdDevReq+0x28>
    pdev->dev_remote_wakeup = 1U;
 8007826:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
 800782a:	e7d1      	b.n	80077d0 <USBD_StdDevReq+0xb0>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800782c:	888b      	ldrh	r3, [r1, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d182      	bne.n	8007738 <USBD_StdDevReq+0x18>
 8007832:	88cb      	ldrh	r3, [r1, #6]
 8007834:	2b00      	cmp	r3, #0
 8007836:	f47f af7f 	bne.w	8007738 <USBD_StdDevReq+0x18>
 800783a:	884d      	ldrh	r5, [r1, #2]
 800783c:	2d7f      	cmp	r5, #127	; 0x7f
 800783e:	f63f af7b 	bhi.w	8007738 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007842:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007846:	2b03      	cmp	r3, #3
 8007848:	f43f af76 	beq.w	8007738 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800784c:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800784e:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007852:	f000 fc69 	bl	8008128 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007856:	4620      	mov	r0, r4
 8007858:	f000 fa16 	bl	8007c88 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800785c:	2d00      	cmp	r5, #0
 800785e:	f000 80cd 	beq.w	80079fc <USBD_StdDevReq+0x2dc>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007862:	2302      	movs	r3, #2
 8007864:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8007868:	e76e      	b.n	8007748 <USBD_StdDevReq+0x28>
  uint16_t len = 0U;
 800786a:	2300      	movs	r3, #0
          USBD_GetDescriptor(pdev, req);
 800786c:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 800786e:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8007872:	0a13      	lsrs	r3, r2, #8
 8007874:	3b01      	subs	r3, #1
 8007876:	2b06      	cmp	r3, #6
 8007878:	f63f af5e 	bhi.w	8007738 <USBD_StdDevReq+0x18>
 800787c:	a101      	add	r1, pc, #4	; (adr r1, 8007884 <USBD_StdDevReq+0x164>)
 800787e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007882:	bf00      	nop
 8007884:	08007939 	.word	0x08007939
 8007888:	08007921 	.word	0x08007921
 800788c:	08007949 	.word	0x08007949
 8007890:	08007739 	.word	0x08007739
 8007894:	08007739 	.word	0x08007739
 8007898:	0800790b 	.word	0x0800790b
 800789c:	080078c7 	.word	0x080078c7
  if (req->wLength != 1U)
 80078a0:	88ca      	ldrh	r2, [r1, #6]
 80078a2:	2a01      	cmp	r2, #1
 80078a4:	f47f af48 	bne.w	8007738 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 80078a8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f43f af43 	beq.w	8007738 <USBD_StdDevReq+0x18>
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	f240 8094 	bls.w	80079e0 <USBD_StdDevReq+0x2c0>
 80078b8:	2b03      	cmp	r3, #3
 80078ba:	f47f af3d 	bne.w	8007738 <USBD_StdDevReq+0x18>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80078be:	1d01      	adds	r1, r0, #4
 80078c0:	f000 f9b4 	bl	8007c2c <USBD_CtlSendData>
 80078c4:	e740      	b.n	8007748 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078c6:	7c03      	ldrb	r3, [r0, #16]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f47f af35 	bne.w	8007738 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80078ce:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80078d2:	f10d 0006 	add.w	r0, sp, #6
 80078d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80078da:	2307      	movs	r3, #7
 80078dc:	7043      	strb	r3, [r0, #1]
    if ((len != 0U) && (req->wLength != 0U))
 80078de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80078e2:	88ea      	ldrh	r2, [r5, #6]
 80078e4:	b16b      	cbz	r3, 8007902 <USBD_StdDevReq+0x1e2>
 80078e6:	2a00      	cmp	r2, #0
 80078e8:	f43f af72 	beq.w	80077d0 <USBD_StdDevReq+0xb0>
      len = MIN(len, req->wLength);
 80078ec:	4293      	cmp	r3, r2
 80078ee:	bf28      	it	cs
 80078f0:	4613      	movcs	r3, r2
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078f2:	4601      	mov	r1, r0
 80078f4:	461a      	mov	r2, r3
 80078f6:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 80078f8:	f8ad 3006 	strh.w	r3, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078fc:	f000 f996 	bl	8007c2c <USBD_CtlSendData>
 8007900:	88ea      	ldrh	r2, [r5, #6]
    if (req->wLength == 0U)
 8007902:	2a00      	cmp	r2, #0
 8007904:	f47f af20 	bne.w	8007748 <USBD_StdDevReq+0x28>
 8007908:	e762      	b.n	80077d0 <USBD_StdDevReq+0xb0>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800790a:	7c03      	ldrb	r3, [r0, #16]
 800790c:	2b00      	cmp	r3, #0
 800790e:	f47f af13 	bne.w	8007738 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007912:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007916:	f10d 0006 	add.w	r0, sp, #6
 800791a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791c:	4798      	blx	r3
 800791e:	e7de      	b.n	80078de <USBD_StdDevReq+0x1be>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007920:	7c02      	ldrb	r2, [r0, #16]
 8007922:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007926:	2a00      	cmp	r2, #0
 8007928:	d161      	bne.n	80079ee <USBD_StdDevReq+0x2ce>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800792a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792c:	f10d 0006 	add.w	r0, sp, #6
 8007930:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007932:	2302      	movs	r3, #2
 8007934:	7043      	strb	r3, [r0, #1]
 8007936:	e7d2      	b.n	80078de <USBD_StdDevReq+0x1be>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007938:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800793c:	f10d 0106 	add.w	r1, sp, #6
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	7c00      	ldrb	r0, [r0, #16]
 8007944:	4798      	blx	r3
 8007946:	e7ca      	b.n	80078de <USBD_StdDevReq+0x1be>
      switch ((uint8_t)(req->wValue))
 8007948:	b2d2      	uxtb	r2, r2
 800794a:	2a05      	cmp	r2, #5
 800794c:	f63f aef4 	bhi.w	8007738 <USBD_StdDevReq+0x18>
 8007950:	e8df f002 	tbb	[pc, r2]
 8007954:	141a2026 	.word	0x141a2026
 8007958:	030e      	.short	0x030e
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800795a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	2b00      	cmp	r3, #0
 8007962:	f43f aee9 	beq.w	8007738 <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007966:	f10d 0106 	add.w	r1, sp, #6
 800796a:	7c20      	ldrb	r0, [r4, #16]
 800796c:	4798      	blx	r3
 800796e:	e7b6      	b.n	80078de <USBD_StdDevReq+0x1be>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007970:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1f5      	bne.n	8007966 <USBD_StdDevReq+0x246>
 800797a:	e6dd      	b.n	8007738 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800797c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1ef      	bne.n	8007966 <USBD_StdDevReq+0x246>
 8007986:	e6d7      	b.n	8007738 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007988:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1e9      	bne.n	8007966 <USBD_StdDevReq+0x246>
 8007992:	e6d1      	b.n	8007738 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007994:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e3      	bne.n	8007966 <USBD_StdDevReq+0x246>
 800799e:	e6cb      	b.n	8007738 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80079a0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1dd      	bne.n	8007966 <USBD_StdDevReq+0x246>
 80079aa:	e6c5      	b.n	8007738 <USBD_StdDevReq+0x18>
  USBD_LL_StallEP(pdev, 0x80U);
 80079ac:	2180      	movs	r1, #128	; 0x80
 80079ae:	f000 fb8f 	bl	80080d0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80079b2:	2100      	movs	r1, #0
 80079b4:	4620      	mov	r0, r4
 80079b6:	f000 fb8b 	bl	80080d0 <USBD_LL_StallEP>
        USBD_ClrClassConfig(pdev, cfgidx);
 80079ba:	7829      	ldrb	r1, [r5, #0]
 80079bc:	4620      	mov	r0, r4
 80079be:	f7ff fd89 	bl	80074d4 <USBD_ClrClassConfig>
 80079c2:	e6c1      	b.n	8007748 <USBD_StdDevReq+0x28>
        if (cfgidx)
 80079c4:	2900      	cmp	r1, #0
 80079c6:	f43f af03 	beq.w	80077d0 <USBD_StdDevReq+0xb0>
          pdev->dev_config = cfgidx;
 80079ca:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80079cc:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 80079ce:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80079d0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80079d4:	f7ff fd74 	bl	80074c0 <USBD_SetClassConfig>
 80079d8:	2802      	cmp	r0, #2
 80079da:	f47f aef9 	bne.w	80077d0 <USBD_StdDevReq+0xb0>
 80079de:	e6ab      	b.n	8007738 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 80079e0:	2300      	movs	r3, #0
 80079e2:	4601      	mov	r1, r0
 80079e4:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80079e8:	f000 f920 	bl	8007c2c <USBD_CtlSendData>
 80079ec:	e6ac      	b.n	8007748 <USBD_StdDevReq+0x28>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80079ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f0:	f10d 0006 	add.w	r0, sp, #6
 80079f4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079f6:	2302      	movs	r3, #2
 80079f8:	7043      	strb	r3, [r0, #1]
 80079fa:	e770      	b.n	80078de <USBD_StdDevReq+0x1be>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80079fc:	2301      	movs	r3, #1
 80079fe:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8007a02:	e6a1      	b.n	8007748 <USBD_StdDevReq+0x28>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a04:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8007a06:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a08:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8007a0c:	f7ff fd62 	bl	80074d4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007a10:	4620      	mov	r0, r4
 8007a12:	f000 f939 	bl	8007c88 <USBD_CtlSendStatus>
 8007a16:	e697      	b.n	8007748 <USBD_StdDevReq+0x28>
 8007a18:	200003c4 	.word	0x200003c4

08007a1c <USBD_StdItfReq>:
{
 8007a1c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a1e:	780b      	ldrb	r3, [r1, #0]
{
 8007a20:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a26:	2b20      	cmp	r3, #32
{
 8007a28:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a2a:	d00c      	beq.n	8007a46 <USBD_StdItfReq+0x2a>
 8007a2c:	2b40      	cmp	r3, #64	; 0x40
 8007a2e:	d00a      	beq.n	8007a46 <USBD_StdItfReq+0x2a>
 8007a30:	b14b      	cbz	r3, 8007a46 <USBD_StdItfReq+0x2a>
  USBD_LL_StallEP(pdev, 0x80U);
 8007a32:	2180      	movs	r1, #128	; 0x80
 8007a34:	4620      	mov	r0, r4
 8007a36:	f000 fb4b 	bl	80080d0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	f000 fb47 	bl	80080d0 <USBD_LL_StallEP>
}
 8007a42:	2000      	movs	r0, #0
 8007a44:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8007a46:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d8f0      	bhi.n	8007a32 <USBD_StdItfReq+0x16>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007a50:	792b      	ldrb	r3, [r5, #4]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d8ed      	bhi.n	8007a32 <USBD_StdItfReq+0x16>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a56:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8007a5a:	4629      	mov	r1, r5
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	4620      	mov	r0, r4
 8007a60:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a62:	88eb      	ldrh	r3, [r5, #6]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1ec      	bne.n	8007a42 <USBD_StdItfReq+0x26>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d1ea      	bne.n	8007a42 <USBD_StdItfReq+0x26>
              USBD_CtlSendStatus(pdev);
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f000 f90b 	bl	8007c88 <USBD_CtlSendStatus>
 8007a72:	e7e6      	b.n	8007a42 <USBD_StdItfReq+0x26>

08007a74 <USBD_StdEPReq>:
{
 8007a74:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a76:	780b      	ldrb	r3, [r1, #0]
{
 8007a78:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a7e:	2b20      	cmp	r3, #32
 8007a80:	d00c      	beq.n	8007a9c <USBD_StdEPReq+0x28>
 8007a82:	2b40      	cmp	r3, #64	; 0x40
 8007a84:	d00a      	beq.n	8007a9c <USBD_StdEPReq+0x28>
 8007a86:	b183      	cbz	r3, 8007aaa <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev, 0x80U);
 8007a88:	2180      	movs	r1, #128	; 0x80
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f000 fb20 	bl	80080d0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007a90:	4620      	mov	r0, r4
 8007a92:	2100      	movs	r1, #0
 8007a94:	f000 fb1c 	bl	80080d0 <USBD_LL_StallEP>
}
 8007a98:	2000      	movs	r0, #0
 8007a9a:	bd70      	pop	{r4, r5, r6, pc}
      pdev->pClass->Setup(pdev, req);
 8007a9c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	4798      	blx	r3
}
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	bd70      	pop	{r4, r5, r6, pc}
      switch (req->bRequest)
 8007aaa:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8007aac:	888a      	ldrh	r2, [r1, #4]
      switch (req->bRequest)
 8007aae:	2b01      	cmp	r3, #1
  ep_addr  = LOBYTE(req->wIndex);
 8007ab0:	b2d5      	uxtb	r5, r2
      switch (req->bRequest)
 8007ab2:	d03e      	beq.n	8007b32 <USBD_StdEPReq+0xbe>
 8007ab4:	d314      	bcc.n	8007ae0 <USBD_StdEPReq+0x6c>
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d1e6      	bne.n	8007a88 <USBD_StdEPReq+0x14>
          switch (pdev->dev_state)
 8007aba:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d046      	beq.n	8007b50 <USBD_StdEPReq+0xdc>
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	d1e0      	bne.n	8007a88 <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ac6:	884b      	ldrh	r3, [r1, #2]
 8007ac8:	b933      	cbnz	r3, 8007ad8 <USBD_StdEPReq+0x64>
                if ((ep_addr != 0x00U) &&
 8007aca:	066a      	lsls	r2, r5, #25
 8007acc:	d004      	beq.n	8007ad8 <USBD_StdEPReq+0x64>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ace:	88cb      	ldrh	r3, [r1, #6]
 8007ad0:	b913      	cbnz	r3, 8007ad8 <USBD_StdEPReq+0x64>
                  USBD_LL_StallEP(pdev, ep_addr);
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	f000 fafc 	bl	80080d0 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f000 f8d5 	bl	8007c88 <USBD_CtlSendStatus>
              break;
 8007ade:	e7db      	b.n	8007a98 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 8007ae0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d03d      	beq.n	8007b64 <USBD_StdEPReq+0xf0>
 8007ae8:	2b03      	cmp	r3, #3
 8007aea:	d1cd      	bne.n	8007a88 <USBD_StdEPReq+0x14>
 8007aec:	f005 030f 	and.w	r3, r5, #15
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007af0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8007af4:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007af6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8007afa:	d442      	bmi.n	8007b82 <USBD_StdEPReq+0x10e>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007afc:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d0c1      	beq.n	8007a88 <USBD_StdEPReq+0x14>
 8007b04:	f005 037f 	and.w	r3, r5, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b08:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 8007b0c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8007b10:	f506 76aa 	add.w	r6, r6, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b14:	b133      	cbz	r3, 8007b24 <USBD_StdEPReq+0xb0>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007b16:	4629      	mov	r1, r5
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f000 faf5 	bl	8008108 <USBD_LL_IsStallEP>
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	d03b      	beq.n	8007b9a <USBD_StdEPReq+0x126>
                pep->status = 0x0001U;
 8007b22:	2301      	movs	r3, #1
 8007b24:	6033      	str	r3, [r6, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b26:	4631      	mov	r1, r6
 8007b28:	4620      	mov	r0, r4
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	f000 f87e 	bl	8007c2c <USBD_CtlSendData>
              break;
 8007b30:	e7b2      	b.n	8007a98 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 8007b32:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d00a      	beq.n	8007b50 <USBD_StdEPReq+0xdc>
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	d1a4      	bne.n	8007a88 <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b3e:	884b      	ldrh	r3, [r1, #2]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1a9      	bne.n	8007a98 <USBD_StdEPReq+0x24>
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b44:	066e      	lsls	r6, r5, #25
 8007b46:	d0c7      	beq.n	8007ad8 <USBD_StdEPReq+0x64>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b48:	4629      	mov	r1, r5
 8007b4a:	f000 facf 	bl	80080ec <USBD_LL_ClearStallEP>
 8007b4e:	e7c3      	b.n	8007ad8 <USBD_StdEPReq+0x64>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b50:	066b      	lsls	r3, r5, #25
 8007b52:	d099      	beq.n	8007a88 <USBD_StdEPReq+0x14>
                USBD_LL_StallEP(pdev, ep_addr);
 8007b54:	4629      	mov	r1, r5
 8007b56:	f000 fabb 	bl	80080d0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	2180      	movs	r1, #128	; 0x80
 8007b5e:	f000 fab7 	bl	80080d0 <USBD_LL_StallEP>
 8007b62:	e799      	b.n	8007a98 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b64:	0668      	lsls	r0, r5, #25
 8007b66:	d18f      	bne.n	8007a88 <USBD_StdEPReq+0x14>
              pep->status = 0x0000U;
 8007b68:	2300      	movs	r3, #0
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b6a:	0611      	lsls	r1, r2, #24
 8007b6c:	bf4c      	ite	mi
 8007b6e:	f104 0114 	addmi.w	r1, r4, #20
 8007b72:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b76:	4620      	mov	r0, r4
              pep->status = 0x0000U;
 8007b78:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	f000 f856 	bl	8007c2c <USBD_CtlSendData>
              break;
 8007b80:	e78a      	b.n	8007a98 <USBD_StdEPReq+0x24>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f43f af7f 	beq.w	8007a88 <USBD_StdEPReq+0x14>
 8007b8a:	f005 037f 	and.w	r3, r5, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b8e:	1c5e      	adds	r6, r3, #1
 8007b90:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8007b94:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8007b98:	e7bc      	b.n	8007b14 <USBD_StdEPReq+0xa0>
                pep->status = 0x0000U;
 8007b9a:	6030      	str	r0, [r6, #0]
 8007b9c:	e7c3      	b.n	8007b26 <USBD_StdEPReq+0xb2>
 8007b9e:	bf00      	nop

08007ba0 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8007ba0:	780b      	ldrb	r3, [r1, #0]
 8007ba2:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007ba4:	784b      	ldrb	r3, [r1, #1]
 8007ba6:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007ba8:	78ca      	ldrb	r2, [r1, #3]
 8007baa:	788b      	ldrb	r3, [r1, #2]
 8007bac:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007bb0:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007bb2:	794a      	ldrb	r2, [r1, #5]
 8007bb4:	790b      	ldrb	r3, [r1, #4]
 8007bb6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007bba:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007bbc:	79ca      	ldrb	r2, [r1, #7]
 8007bbe:	798b      	ldrb	r3, [r1, #6]
 8007bc0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007bc4:	80c3      	strh	r3, [r0, #6]
}
 8007bc6:	4770      	bx	lr

08007bc8 <USBD_CtlError>:
{
 8007bc8:	b510      	push	{r4, lr}
 8007bca:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8007bcc:	2180      	movs	r1, #128	; 0x80
 8007bce:	f000 fa7f 	bl	80080d0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007bd2:	4620      	mov	r0, r4
}
 8007bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8007bd8:	2100      	movs	r1, #0
 8007bda:	f000 ba79 	b.w	80080d0 <USBD_LL_StallEP>
 8007bde:	bf00      	nop

08007be0 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 8007be0:	b300      	cbz	r0, 8007c24 <USBD_GetString+0x44>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8007be2:	7803      	ldrb	r3, [r0, #0]
{
 8007be4:	b430      	push	{r4, r5}
  while (*buf != '\0')
 8007be6:	b1f3      	cbz	r3, 8007c26 <USBD_GetString+0x46>
 8007be8:	4604      	mov	r4, r0
  uint8_t  len = 0U;
 8007bea:	2300      	movs	r3, #0
  while (*buf != '\0')
 8007bec:	f814 5f01 	ldrb.w	r5, [r4, #1]!
  {
    len++;
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	b2db      	uxtb	r3, r3
  while (*buf != '\0')
 8007bf4:	2d00      	cmp	r5, #0
 8007bf6:	d1f9      	bne.n	8007bec <USBD_GetString+0xc>
 8007bf8:	005b      	lsls	r3, r3, #1
 8007bfa:	3302      	adds	r3, #2
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007bfc:	2403      	movs	r4, #3
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007bfe:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007c00:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c02:	704c      	strb	r4, [r1, #1]
    while (*desc != '\0')
 8007c04:	7804      	ldrb	r4, [r0, #0]
 8007c06:	b15c      	cbz	r4, 8007c20 <USBD_GetString+0x40>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c08:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 8007c0a:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 8007c0c:	1c5a      	adds	r2, r3, #1
 8007c0e:	b2d2      	uxtb	r2, r2
 8007c10:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 8007c12:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 8007c14:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 8007c18:	3302      	adds	r3, #2
 8007c1a:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 8007c1c:	2c00      	cmp	r4, #0
 8007c1e:	d1f5      	bne.n	8007c0c <USBD_GetString+0x2c>
}
 8007c20:	bc30      	pop	{r4, r5}
 8007c22:	4770      	bx	lr
 8007c24:	4770      	bx	lr
  while (*buf != '\0')
 8007c26:	2302      	movs	r3, #2
 8007c28:	e7e8      	b.n	8007bfc <USBD_GetString+0x1c>
 8007c2a:	bf00      	nop

08007c2c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007c2c:	b538      	push	{r3, r4, r5, lr}
 8007c2e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c30:	2502      	movs	r5, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c32:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8007c34:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c38:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	f000 fa81 	bl	8008144 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007c42:	2000      	movs	r0, #0
 8007c44:	bd38      	pop	{r3, r4, r5, pc}
 8007c46:	bf00      	nop

08007c48 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007c48:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	460a      	mov	r2, r1
 8007c4e:	2100      	movs	r1, #0
 8007c50:	f000 fa78 	bl	8008144 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007c54:	2000      	movs	r0, #0
 8007c56:	bd08      	pop	{r3, pc}

08007c58 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007c58:	b538      	push	{r3, r4, r5, lr}
 8007c5a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c5c:	2503      	movs	r5, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c5e:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
 8007c60:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007c64:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c68:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	f000 fa77 	bl	8008160 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007c72:	2000      	movs	r0, #0
 8007c74:	bd38      	pop	{r3, r4, r5, pc}
 8007c76:	bf00      	nop

08007c78 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007c78:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	460a      	mov	r2, r1
 8007c7e:	2100      	movs	r1, #0
 8007c80:	f000 fa6e 	bl	8008160 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007c84:	2000      	movs	r0, #0
 8007c86:	bd08      	pop	{r3, pc}

08007c88 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c88:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c8a:	2204      	movs	r2, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c8c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c8e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c92:	4619      	mov	r1, r3
 8007c94:	461a      	mov	r2, r3
 8007c96:	f000 fa55 	bl	8008144 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	bd08      	pop	{r3, pc}
 8007c9e:	bf00      	nop

08007ca0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007ca0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ca2:	2205      	movs	r2, #5

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ca4:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ca6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007caa:	4619      	mov	r1, r3
 8007cac:	461a      	mov	r2, r3
 8007cae:	f000 fa57 	bl	8008160 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	bd08      	pop	{r3, pc}
 8007cb6:	bf00      	nop

08007cb8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007cb8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	4910      	ldr	r1, [pc, #64]	; (8007d00 <MX_USB_DEVICE_Init+0x48>)
 8007cbe:	4811      	ldr	r0, [pc, #68]	; (8007d04 <MX_USB_DEVICE_Init+0x4c>)
 8007cc0:	f7ff fbda 	bl	8007478 <USBD_Init>
 8007cc4:	b9c0      	cbnz	r0, 8007cf8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007cc6:	4910      	ldr	r1, [pc, #64]	; (8007d08 <MX_USB_DEVICE_Init+0x50>)
 8007cc8:	480e      	ldr	r0, [pc, #56]	; (8007d04 <MX_USB_DEVICE_Init+0x4c>)
 8007cca:	f7ff fbeb 	bl	80074a4 <USBD_RegisterClass>
 8007cce:	b980      	cbnz	r0, 8007cf2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007cd0:	490e      	ldr	r1, [pc, #56]	; (8007d0c <MX_USB_DEVICE_Init+0x54>)
 8007cd2:	480c      	ldr	r0, [pc, #48]	; (8007d04 <MX_USB_DEVICE_Init+0x4c>)
 8007cd4:	f7ff fb88 	bl	80073e8 <USBD_CDC_RegisterInterface>
 8007cd8:	b940      	cbnz	r0, 8007cec <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007cda:	480a      	ldr	r0, [pc, #40]	; (8007d04 <MX_USB_DEVICE_Init+0x4c>)
 8007cdc:	f7ff fbea 	bl	80074b4 <USBD_Start>
 8007ce0:	b900      	cbnz	r0, 8007ce4 <MX_USB_DEVICE_Init+0x2c>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ce2:	bd08      	pop	{r3, pc}
 8007ce4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8007ce8:	f7fa bb76 	b.w	80023d8 <Error_Handler>
    Error_Handler();
 8007cec:	f7fa fb74 	bl	80023d8 <Error_Handler>
 8007cf0:	e7f3      	b.n	8007cda <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8007cf2:	f7fa fb71 	bl	80023d8 <Error_Handler>
 8007cf6:	e7eb      	b.n	8007cd0 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8007cf8:	f7fa fb6e 	bl	80023d8 <Error_Handler>
 8007cfc:	e7e3      	b.n	8007cc6 <MX_USB_DEVICE_Init+0xe>
 8007cfe:	bf00      	nop
 8007d00:	20000164 	.word	0x20000164
 8007d04:	20000d2c 	.word	0x20000d2c
 8007d08:	20000044 	.word	0x20000044
 8007d0c:	20000154 	.word	0x20000154

08007d10 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8007d10:	2000      	movs	r0, #0
 8007d12:	4770      	bx	lr

08007d14 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8007d14:	2000      	movs	r0, #0
 8007d16:	4770      	bx	lr

08007d18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007d18:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007d1a:	4c05      	ldr	r4, [pc, #20]	; (8007d30 <CDC_Receive_FS+0x18>)
 8007d1c:	4601      	mov	r1, r0
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f7ff fb72 	bl	8007408 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007d24:	4620      	mov	r0, r4
 8007d26:	f7ff fb8f 	bl	8007448 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	bd10      	pop	{r4, pc}
 8007d2e:	bf00      	nop
 8007d30:	20000d2c 	.word	0x20000d2c

08007d34 <CDC_Init_FS>:
{
 8007d34:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007d36:	4c06      	ldr	r4, [pc, #24]	; (8007d50 <CDC_Init_FS+0x1c>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	4905      	ldr	r1, [pc, #20]	; (8007d54 <CDC_Init_FS+0x20>)
 8007d3e:	f7ff fb5b 	bl	80073f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007d42:	4620      	mov	r0, r4
 8007d44:	4904      	ldr	r1, [pc, #16]	; (8007d58 <CDC_Init_FS+0x24>)
 8007d46:	f7ff fb5f 	bl	8007408 <USBD_CDC_SetRxBuffer>
}
 8007d4a:	2000      	movs	r0, #0
 8007d4c:	bd10      	pop	{r4, pc}
 8007d4e:	bf00      	nop
 8007d50:	20000d2c 	.word	0x20000d2c
 8007d54:	200013d8 	.word	0x200013d8
 8007d58:	20000ff0 	.word	0x20000ff0

08007d5c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007d5c:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007d5e:	4c09      	ldr	r4, [pc, #36]	; (8007d84 <CDC_Transmit_FS+0x28>)
 8007d60:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 8007d64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d68:	b10b      	cbz	r3, 8007d6e <CDC_Transmit_FS+0x12>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 8007d6a:	2001      	movs	r0, #1
 8007d6c:	bd10      	pop	{r4, pc}
 8007d6e:	460a      	mov	r2, r1
 8007d70:	4601      	mov	r1, r0
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007d72:	4620      	mov	r0, r4
 8007d74:	f7ff fb40 	bl	80073f8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007d78:	4620      	mov	r0, r4
}
 8007d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007d7e:	f7ff bb49 	b.w	8007414 <USBD_CDC_TransmitPacket>
 8007d82:	bf00      	nop
 8007d84:	20000d2c 	.word	0x20000d2c

08007d88 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007d88:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8007d8a:	4801      	ldr	r0, [pc, #4]	; (8007d90 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8007d8c:	800b      	strh	r3, [r1, #0]
}
 8007d8e:	4770      	bx	lr
 8007d90:	20000180 	.word	0x20000180

08007d94 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d94:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8007d96:	4801      	ldr	r0, [pc, #4]	; (8007d9c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8007d98:	800b      	strh	r3, [r1, #0]
}
 8007d9a:	4770      	bx	lr
 8007d9c:	20000194 	.word	0x20000194

08007da0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007da0:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007da2:	4c04      	ldr	r4, [pc, #16]	; (8007db4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8007da4:	460a      	mov	r2, r1
 8007da6:	4804      	ldr	r0, [pc, #16]	; (8007db8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8007da8:	4621      	mov	r1, r4
 8007daa:	f7ff ff19 	bl	8007be0 <USBD_GetString>
  return USBD_StrDesc;
}
 8007dae:	4620      	mov	r0, r4
 8007db0:	bd10      	pop	{r4, pc}
 8007db2:	bf00      	nop
 8007db4:	200017c0 	.word	0x200017c0
 8007db8:	0800bcf0 	.word	0x0800bcf0

08007dbc <USBD_FS_ProductStrDescriptor>:
{
 8007dbc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007dbe:	4c04      	ldr	r4, [pc, #16]	; (8007dd0 <USBD_FS_ProductStrDescriptor+0x14>)
 8007dc0:	460a      	mov	r2, r1
 8007dc2:	4804      	ldr	r0, [pc, #16]	; (8007dd4 <USBD_FS_ProductStrDescriptor+0x18>)
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	f7ff ff0b 	bl	8007be0 <USBD_GetString>
}
 8007dca:	4620      	mov	r0, r4
 8007dcc:	bd10      	pop	{r4, pc}
 8007dce:	bf00      	nop
 8007dd0:	200017c0 	.word	0x200017c0
 8007dd4:	0800bd04 	.word	0x0800bd04

08007dd8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dd8:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007dda:	4c04      	ldr	r4, [pc, #16]	; (8007dec <USBD_FS_ConfigStrDescriptor+0x14>)
 8007ddc:	460a      	mov	r2, r1
 8007dde:	4804      	ldr	r0, [pc, #16]	; (8007df0 <USBD_FS_ConfigStrDescriptor+0x18>)
 8007de0:	4621      	mov	r1, r4
 8007de2:	f7ff fefd 	bl	8007be0 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8007de6:	4620      	mov	r0, r4
 8007de8:	bd10      	pop	{r4, pc}
 8007dea:	bf00      	nop
 8007dec:	200017c0 	.word	0x200017c0
 8007df0:	0800bcd4 	.word	0x0800bcd4

08007df4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007df4:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007df6:	4c04      	ldr	r4, [pc, #16]	; (8007e08 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8007df8:	460a      	mov	r2, r1
 8007dfa:	4804      	ldr	r0, [pc, #16]	; (8007e0c <USBD_FS_InterfaceStrDescriptor+0x18>)
 8007dfc:	4621      	mov	r1, r4
 8007dfe:	f7ff feef 	bl	8007be0 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8007e02:	4620      	mov	r0, r4
 8007e04:	bd10      	pop	{r4, pc}
 8007e06:	bf00      	nop
 8007e08:	200017c0 	.word	0x200017c0
 8007e0c:	0800bce0 	.word	0x0800bce0

08007e10 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8007e10:	201a      	movs	r0, #26
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e12:	4a44      	ldr	r2, [pc, #272]	; (8007f24 <USBD_FS_SerialStrDescriptor+0x114>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007e14:	4b44      	ldr	r3, [pc, #272]	; (8007f28 <USBD_FS_SerialStrDescriptor+0x118>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e16:	6812      	ldr	r2, [r2, #0]

  deviceserial0 += deviceserial2;
 8007e18:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 8007e1a:	8008      	strh	r0, [r1, #0]

  if (deviceserial0 != 0)
 8007e1c:	18d2      	adds	r2, r2, r3
 8007e1e:	d101      	bne.n	8007e24 <USBD_FS_SerialStrDescriptor+0x14>
}
 8007e20:	4842      	ldr	r0, [pc, #264]	; (8007f2c <USBD_FS_SerialStrDescriptor+0x11c>)
 8007e22:	4770      	bx	lr
{
 8007e24:	b410      	push	{r4}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8007e26:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8007e28:	0f13      	lsrs	r3, r2, #28
 8007e2a:	b2d8      	uxtb	r0, r3
 8007e2c:	2b09      	cmp	r3, #9
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e2e:	4940      	ldr	r1, [pc, #256]	; (8007f30 <USBD_FS_SerialStrDescriptor+0x120>)
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e30:	4b3e      	ldr	r3, [pc, #248]	; (8007f2c <USBD_FS_SerialStrDescriptor+0x11c>)
 8007e32:	bf94      	ite	ls
 8007e34:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e36:	3037      	addhi	r0, #55	; 0x37
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e38:	6809      	ldr	r1, [r1, #0]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e3a:	7098      	strb	r0, [r3, #2]
    if (((value >> 28)) < 0xA)
 8007e3c:	f3c2 6003 	ubfx	r0, r2, #24, #4
 8007e40:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8007e42:	70dc      	strb	r4, [r3, #3]
 8007e44:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e46:	bf94      	ite	ls
 8007e48:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e4a:	3437      	addhi	r4, #55	; 0x37
 8007e4c:	711c      	strb	r4, [r3, #4]
    pbuf[2 * idx + 1] = 0;
 8007e4e:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8007e50:	f3c2 5003 	ubfx	r0, r2, #20, #4
 8007e54:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8007e56:	715c      	strb	r4, [r3, #5]
 8007e58:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e5a:	bf94      	ite	ls
 8007e5c:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e5e:	3437      	addhi	r4, #55	; 0x37
 8007e60:	719c      	strb	r4, [r3, #6]
    pbuf[2 * idx + 1] = 0;
 8007e62:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8007e64:	f3c2 4003 	ubfx	r0, r2, #16, #4
 8007e68:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8007e6a:	71dc      	strb	r4, [r3, #7]
 8007e6c:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e6e:	bf94      	ite	ls
 8007e70:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e72:	3437      	addhi	r4, #55	; 0x37
 8007e74:	721c      	strb	r4, [r3, #8]
    pbuf[2 * idx + 1] = 0;
 8007e76:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8007e78:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8007e7c:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8007e7e:	725c      	strb	r4, [r3, #9]
 8007e80:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e82:	bf94      	ite	ls
 8007e84:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e86:	3437      	addhi	r4, #55	; 0x37
 8007e88:	729c      	strb	r4, [r3, #10]
    pbuf[2 * idx + 1] = 0;
 8007e8a:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8007e8c:	f3c2 2003 	ubfx	r0, r2, #8, #4
 8007e90:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8007e92:	72dc      	strb	r4, [r3, #11]
 8007e94:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e96:	bf94      	ite	ls
 8007e98:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e9a:	3437      	addhi	r4, #55	; 0x37
 8007e9c:	731c      	strb	r4, [r3, #12]
    pbuf[2 * idx + 1] = 0;
 8007e9e:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8007ea0:	f3c2 1003 	ubfx	r0, r2, #4, #4
 8007ea4:	2809      	cmp	r0, #9
 8007ea6:	f002 020f 	and.w	r2, r2, #15
    pbuf[2 * idx + 1] = 0;
 8007eaa:	735c      	strb	r4, [r3, #13]
 8007eac:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8007eae:	bf98      	it	ls
 8007eb0:	3430      	addls	r4, #48	; 0x30
 8007eb2:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007eb4:	bf88      	it	hi
 8007eb6:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8007eb8:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8007eba:	bf94      	ite	ls
 8007ebc:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ebe:	3037      	addhi	r0, #55	; 0x37
 8007ec0:	7418      	strb	r0, [r3, #16]
    pbuf[2 * idx + 1] = 0;
 8007ec2:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 8007ec4:	0f0a      	lsrs	r2, r1, #28
 8007ec6:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 8007ec8:	7458      	strb	r0, [r3, #17]
 8007eca:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ecc:	bf94      	ite	ls
 8007ece:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ed0:	3037      	addhi	r0, #55	; 0x37
 8007ed2:	7498      	strb	r0, [r3, #18]
    pbuf[2 * idx + 1] = 0;
 8007ed4:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 8007ed6:	f3c1 6203 	ubfx	r2, r1, #24, #4
 8007eda:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 8007edc:	74d8      	strb	r0, [r3, #19]
 8007ede:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ee0:	bf94      	ite	ls
 8007ee2:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ee4:	3037      	addhi	r0, #55	; 0x37
 8007ee6:	7518      	strb	r0, [r3, #20]
    pbuf[2 * idx + 1] = 0;
 8007ee8:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 8007eea:	f3c1 5203 	ubfx	r2, r1, #20, #4
 8007eee:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 8007ef0:	7558      	strb	r0, [r3, #21]
    if (((value >> 28)) < 0xA)
 8007ef2:	f3c1 4103 	ubfx	r1, r1, #16, #4
 8007ef6:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ef8:	bf98      	it	ls
 8007efa:	3030      	addls	r0, #48	; 0x30
 8007efc:	b2ca      	uxtb	r2, r1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007efe:	bf88      	it	hi
 8007f00:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8007f02:	2909      	cmp	r1, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f04:	bf94      	ite	ls
 8007f06:	3230      	addls	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f08:	3237      	addhi	r2, #55	; 0x37
 8007f0a:	739c      	strb	r4, [r3, #14]
 8007f0c:	7598      	strb	r0, [r3, #22]
    pbuf[2 * idx + 1] = 0;
 8007f0e:	2400      	movs	r4, #0
 8007f10:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f12:	761a      	strb	r2, [r3, #24]
    pbuf[2 * idx + 1] = 0;
 8007f14:	2200      	movs	r2, #0
 8007f16:	75d8      	strb	r0, [r3, #23]
 8007f18:	73dc      	strb	r4, [r3, #15]
 8007f1a:	765a      	strb	r2, [r3, #25]
}
 8007f1c:	4803      	ldr	r0, [pc, #12]	; (8007f2c <USBD_FS_SerialStrDescriptor+0x11c>)
 8007f1e:	bc10      	pop	{r4}
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	1ffff7e8 	.word	0x1ffff7e8
 8007f28:	1ffff7f0 	.word	0x1ffff7f0
 8007f2c:	20000198 	.word	0x20000198
 8007f30:	1ffff7ec 	.word	0x1ffff7ec

08007f34 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 8007f34:	6802      	ldr	r2, [r0, #0]
 8007f36:	4b0e      	ldr	r3, [pc, #56]	; (8007f70 <HAL_PCD_MspInit+0x3c>)
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d000      	beq.n	8007f3e <HAL_PCD_MspInit+0xa>
 8007f3c:	4770      	bx	lr
  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007f3e:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8007f40:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
{
 8007f44:	b510      	push	{r4, lr}
    __HAL_RCC_USB_CLK_ENABLE();
 8007f46:	69dc      	ldr	r4, [r3, #28]
{
 8007f48:	b082      	sub	sp, #8
    __HAL_RCC_USB_CLK_ENABLE();
 8007f4a:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8007f4e:	61dc      	str	r4, [r3, #28]
 8007f50:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007f52:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8007f54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f58:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007f5a:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8007f5c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007f5e:	f7fc f9fb 	bl	8004358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007f62:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007f64:	b002      	add	sp, #8
 8007f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007f6a:	f7fc ba2b 	b.w	80043c4 <HAL_NVIC_EnableIRQ>
 8007f6e:	bf00      	nop
 8007f70:	40005c00 	.word	0x40005c00

08007f74 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007f74:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8007f78:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8007f7c:	f7ff bab2 	b.w	80074e4 <USBD_LL_SetupStage>

08007f80 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007f80:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8007f84:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8007f88:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8007f8c:	f7ff bada 	b.w	8007544 <USBD_LL_DataOutStage>

08007f90 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f90:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8007f94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f96:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8007f9a:	f7ff bb13 	b.w	80075c4 <USBD_LL_DataInStage>
 8007f9e:	bf00      	nop

08007fa0 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007fa0:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8007fa4:	f7ff bbae 	b.w	8007704 <USBD_LL_SOF>

08007fa8 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007fa8:	6883      	ldr	r3, [r0, #8]
{ 
 8007faa:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007fac:	2b02      	cmp	r3, #2
{ 
 8007fae:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007fb0:	d001      	beq.n	8007fb6 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8007fb2:	f7fa fa11 	bl	80023d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007fb6:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 8007fba:	2101      	movs	r1, #1
 8007fbc:	f7ff fb8a 	bl	80076d4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007fc0:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 8007fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007fc8:	f7ff bb5c 	b.w	8007684 <USBD_LL_Reset>

08007fcc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fcc:	b510      	push	{r4, lr}
 8007fce:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007fd0:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8007fd4:	f7ff fb82 	bl	80076dc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007fd8:	69a3      	ldr	r3, [r4, #24]
 8007fda:	b123      	cbz	r3, 8007fe6 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007fdc:	4a02      	ldr	r2, [pc, #8]	; (8007fe8 <HAL_PCD_SuspendCallback+0x1c>)
 8007fde:	6913      	ldr	r3, [r2, #16]
 8007fe0:	f043 0306 	orr.w	r3, r3, #6
 8007fe4:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007fe6:	bd10      	pop	{r4, pc}
 8007fe8:	e000ed00 	.word	0xe000ed00

08007fec <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007fec:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8007ff0:	f7ff bb7e 	b.w	80076f0 <USBD_LL_Resume>

08007ff4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	4604      	mov	r4, r0
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007ff8:	2200      	movs	r2, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007ffa:	2508      	movs	r5, #8
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007ffc:	2102      	movs	r1, #2
  hpcd_USB_FS.pData = pdev;
 8007ffe:	4b1c      	ldr	r3, [pc, #112]	; (8008070 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Instance = USB;
 8008000:	481c      	ldr	r0, [pc, #112]	; (8008074 <USBD_LL_Init+0x80>)
  pdev->pData = &hpcd_USB_FS;
 8008002:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 8008006:	6018      	str	r0, [r3, #0]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008008:	4618      	mov	r0, r3
  hpcd_USB_FS.pData = pdev;
 800800a:	f8c3 4268 	str.w	r4, [r3, #616]	; 0x268
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800800e:	e9c3 5101 	strd	r5, r1, [r3, #4]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008012:	e9c3 2206 	strd	r2, r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008016:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008018:	f7fd f9a8 	bl	800536c <HAL_PCD_Init>
 800801c:	b108      	cbz	r0, 8008022 <USBD_LL_Init+0x2e>
  {
    Error_Handler( );
 800801e:	f7fa f9db 	bl	80023d8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008022:	2200      	movs	r2, #0
 8008024:	2318      	movs	r3, #24
 8008026:	4611      	mov	r1, r2
 8008028:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800802c:	f7fd fdbe 	bl	8005bac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008030:	2358      	movs	r3, #88	; 0x58
 8008032:	2200      	movs	r2, #0
 8008034:	2180      	movs	r1, #128	; 0x80
 8008036:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800803a:	f7fd fdb7 	bl	8005bac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800803e:	23c0      	movs	r3, #192	; 0xc0
 8008040:	2200      	movs	r2, #0
 8008042:	2181      	movs	r1, #129	; 0x81
 8008044:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8008048:	f7fd fdb0 	bl	8005bac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800804c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008050:	2200      	movs	r2, #0
 8008052:	2101      	movs	r1, #1
 8008054:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8008058:	f7fd fda8 	bl	8005bac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800805c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8008060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008064:	2200      	movs	r2, #0
 8008066:	2182      	movs	r1, #130	; 0x82
 8008068:	f7fd fda0 	bl	8005bac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 800806c:	2000      	movs	r0, #0
 800806e:	bd38      	pop	{r3, r4, r5, pc}
 8008070:	200019c0 	.word	0x200019c0
 8008074:	40005c00 	.word	0x40005c00

08008078 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008078:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800807a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800807e:	f7fd f9f3 	bl	8005468 <HAL_PCD_Start>
 8008082:	2803      	cmp	r0, #3
 8008084:	bf96      	itet	ls
 8008086:	4b02      	ldrls	r3, [pc, #8]	; (8008090 <USBD_LL_Start+0x18>)
 8008088:	2002      	movhi	r0, #2
 800808a:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800808c:	bd08      	pop	{r3, pc}
 800808e:	bf00      	nop
 8008090:	0800bd10 	.word	0x0800bd10

08008094 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008094:	b510      	push	{r4, lr}
 8008096:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008098:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800809c:	4613      	mov	r3, r2
 800809e:	4622      	mov	r2, r4
 80080a0:	f7fd fc7c 	bl	800599c <HAL_PCD_EP_Open>
 80080a4:	2803      	cmp	r0, #3
 80080a6:	bf96      	itet	ls
 80080a8:	4b01      	ldrls	r3, [pc, #4]	; (80080b0 <USBD_LL_OpenEP+0x1c>)
 80080aa:	2002      	movhi	r0, #2
 80080ac:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 80080ae:	bd10      	pop	{r4, pc}
 80080b0:	0800bd10 	.word	0x0800bd10

080080b4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080b4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80080b6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80080ba:	f7fd fca1 	bl	8005a00 <HAL_PCD_EP_Close>
 80080be:	2803      	cmp	r0, #3
 80080c0:	bf96      	itet	ls
 80080c2:	4b02      	ldrls	r3, [pc, #8]	; (80080cc <USBD_LL_CloseEP+0x18>)
 80080c4:	2002      	movhi	r0, #2
 80080c6:	5c18      	ldrbls	r0, [r3, r0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 80080c8:	bd08      	pop	{r3, pc}
 80080ca:	bf00      	nop
 80080cc:	0800bd10 	.word	0x0800bd10

080080d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080d0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80080d2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80080d6:	f7fd fcf5 	bl	8005ac4 <HAL_PCD_EP_SetStall>
 80080da:	2803      	cmp	r0, #3
 80080dc:	bf96      	itet	ls
 80080de:	4b02      	ldrls	r3, [pc, #8]	; (80080e8 <USBD_LL_StallEP+0x18>)
 80080e0:	2002      	movhi	r0, #2
 80080e2:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 80080e4:	bd08      	pop	{r3, pc}
 80080e6:	bf00      	nop
 80080e8:	0800bd10 	.word	0x0800bd10

080080ec <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080ec:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80080ee:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80080f2:	f7fd fd23 	bl	8005b3c <HAL_PCD_EP_ClrStall>
 80080f6:	2803      	cmp	r0, #3
 80080f8:	bf96      	itet	ls
 80080fa:	4b02      	ldrls	r3, [pc, #8]	; (8008104 <USBD_LL_ClearStallEP+0x18>)
 80080fc:	2002      	movhi	r0, #2
 80080fe:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8008100:	bd08      	pop	{r3, pc}
 8008102:	bf00      	nop
 8008104:	0800bd10 	.word	0x0800bd10

08008108 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8008108:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800810a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 800810e:	d404      	bmi.n	800811a <USBD_LL_IsStallEP+0x12>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008110:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008114:	f893 012a 	ldrb.w	r0, [r3, #298]	; 0x12a
  }
}
 8008118:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800811a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800811e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008122:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8008126:	4770      	bx	lr

08008128 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008128:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800812a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800812e:	f7fd fc21 	bl	8005974 <HAL_PCD_SetAddress>
 8008132:	2803      	cmp	r0, #3
 8008134:	bf96      	itet	ls
 8008136:	4b02      	ldrls	r3, [pc, #8]	; (8008140 <USBD_LL_SetUSBAddress+0x18>)
 8008138:	2002      	movhi	r0, #2
 800813a:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 800813c:	bd08      	pop	{r3, pc}
 800813e:	bf00      	nop
 8008140:	0800bd10 	.word	0x0800bd10

08008144 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008144:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008146:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800814a:	f7fd fca5 	bl	8005a98 <HAL_PCD_EP_Transmit>
 800814e:	2803      	cmp	r0, #3
 8008150:	bf96      	itet	ls
 8008152:	4b02      	ldrls	r3, [pc, #8]	; (800815c <USBD_LL_Transmit+0x18>)
 8008154:	2002      	movhi	r0, #2
 8008156:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8008158:	bd08      	pop	{r3, pc}
 800815a:	bf00      	nop
 800815c:	0800bd10 	.word	0x0800bd10

08008160 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008160:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008162:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8008166:	f7fd fc77 	bl	8005a58 <HAL_PCD_EP_Receive>
 800816a:	2803      	cmp	r0, #3
 800816c:	bf96      	itet	ls
 800816e:	4b02      	ldrls	r3, [pc, #8]	; (8008178 <USBD_LL_PrepareReceive+0x18>)
 8008170:	2002      	movhi	r0, #2
 8008172:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8008174:	bd08      	pop	{r3, pc}
 8008176:	bf00      	nop
 8008178:	0800bd10 	.word	0x0800bd10

0800817c <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800817c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8008180:	f7fd bc82 	b.w	8005a88 <HAL_PCD_EP_GetRxCount>

08008184 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8008184:	4800      	ldr	r0, [pc, #0]	; (8008188 <USBD_static_malloc+0x4>)
 8008186:	4770      	bx	lr
 8008188:	200003c8 	.word	0x200003c8

0800818c <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop

08008190 <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop

08008194 <arm_mat_trans_f32>:
 8008194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008198:	8803      	ldrh	r3, [r0, #0]
 800819a:	884d      	ldrh	r5, [r1, #2]
 800819c:	6847      	ldr	r7, [r0, #4]
 800819e:	429d      	cmp	r5, r3
 80081a0:	b083      	sub	sp, #12
 80081a2:	8840      	ldrh	r0, [r0, #2]
 80081a4:	684a      	ldr	r2, [r1, #4]
 80081a6:	d149      	bne.n	800823c <arm_mat_trans_f32+0xa8>
 80081a8:	f8b1 e000 	ldrh.w	lr, [r1]
 80081ac:	4586      	cmp	lr, r0
 80081ae:	d145      	bne.n	800823c <arm_mat_trans_f32+0xa8>
 80081b0:	4694      	mov	ip, r2
 80081b2:	ea4f 089e 	mov.w	r8, lr, lsr #2
 80081b6:	00a9      	lsls	r1, r5, #2
 80081b8:	fb08 f901 	mul.w	r9, r8, r1
 80081bc:	f00e 0e03 	and.w	lr, lr, #3
 80081c0:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 80081c4:	ea4f 038e 	mov.w	r3, lr, lsl #2
 80081c8:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80081cc:	eb02 0a01 	add.w	sl, r2, r1
 80081d0:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 80081d4:	9301      	str	r3, [sp, #4]
 80081d6:	00b6      	lsls	r6, r6, #2
 80081d8:	012d      	lsls	r5, r5, #4
 80081da:	4663      	mov	r3, ip
 80081dc:	f1b8 0f00 	cmp.w	r8, #0
 80081e0:	d017      	beq.n	8008212 <arm_mat_trans_f32+0x7e>
 80081e2:	4640      	mov	r0, r8
 80081e4:	f107 0210 	add.w	r2, r7, #16
 80081e8:	f852 4c10 	ldr.w	r4, [r2, #-16]
 80081ec:	3801      	subs	r0, #1
 80081ee:	601c      	str	r4, [r3, #0]
 80081f0:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 80081f4:	f102 0210 	add.w	r2, r2, #16
 80081f8:	505c      	str	r4, [r3, r1]
 80081fa:	f852 4c18 	ldr.w	r4, [r2, #-24]
 80081fe:	f843 4011 	str.w	r4, [r3, r1, lsl #1]
 8008202:	f852 4c14 	ldr.w	r4, [r2, #-20]
 8008206:	519c      	str	r4, [r3, r6]
 8008208:	442b      	add	r3, r5
 800820a:	d1ed      	bne.n	80081e8 <arm_mat_trans_f32+0x54>
 800820c:	445f      	add	r7, fp
 800820e:	eb09 030c 	add.w	r3, r9, ip
 8008212:	f1be 0f00 	cmp.w	lr, #0
 8008216:	d009      	beq.n	800822c <arm_mat_trans_f32+0x98>
 8008218:	4672      	mov	r2, lr
 800821a:	4638      	mov	r0, r7
 800821c:	f850 4b04 	ldr.w	r4, [r0], #4
 8008220:	3a01      	subs	r2, #1
 8008222:	601c      	str	r4, [r3, #0]
 8008224:	440b      	add	r3, r1
 8008226:	d1f9      	bne.n	800821c <arm_mat_trans_f32+0x88>
 8008228:	9b01      	ldr	r3, [sp, #4]
 800822a:	441f      	add	r7, r3
 800822c:	f10c 0c04 	add.w	ip, ip, #4
 8008230:	45d4      	cmp	ip, sl
 8008232:	d1d2      	bne.n	80081da <arm_mat_trans_f32+0x46>
 8008234:	2000      	movs	r0, #0
 8008236:	b003      	add	sp, #12
 8008238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823c:	f06f 0002 	mvn.w	r0, #2
 8008240:	e7f9      	b.n	8008236 <arm_mat_trans_f32+0xa2>
 8008242:	bf00      	nop

08008244 <arm_mat_init_f32>:
 8008244:	8001      	strh	r1, [r0, #0]
 8008246:	8042      	strh	r2, [r0, #2]
 8008248:	6043      	str	r3, [r0, #4]
 800824a:	4770      	bx	lr

0800824c <atof>:
 800824c:	2100      	movs	r1, #0
 800824e:	f000 bee3 	b.w	8009018 <strtod>

08008252 <atoi>:
 8008252:	220a      	movs	r2, #10
 8008254:	2100      	movs	r1, #0
 8008256:	f000 bf7f 	b.w	8009158 <strtol>
	...

0800825c <__errno>:
 800825c:	4b01      	ldr	r3, [pc, #4]	; (8008264 <__errno+0x8>)
 800825e:	6818      	ldr	r0, [r3, #0]
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	200001b4 	.word	0x200001b4

08008268 <__libc_init_array>:
 8008268:	b570      	push	{r4, r5, r6, lr}
 800826a:	2500      	movs	r5, #0
 800826c:	4e0c      	ldr	r6, [pc, #48]	; (80082a0 <__libc_init_array+0x38>)
 800826e:	4c0d      	ldr	r4, [pc, #52]	; (80082a4 <__libc_init_array+0x3c>)
 8008270:	1ba4      	subs	r4, r4, r6
 8008272:	10a4      	asrs	r4, r4, #2
 8008274:	42a5      	cmp	r5, r4
 8008276:	d109      	bne.n	800828c <__libc_init_array+0x24>
 8008278:	f002 fe92 	bl	800afa0 <_init>
 800827c:	2500      	movs	r5, #0
 800827e:	4e0a      	ldr	r6, [pc, #40]	; (80082a8 <__libc_init_array+0x40>)
 8008280:	4c0a      	ldr	r4, [pc, #40]	; (80082ac <__libc_init_array+0x44>)
 8008282:	1ba4      	subs	r4, r4, r6
 8008284:	10a4      	asrs	r4, r4, #2
 8008286:	42a5      	cmp	r5, r4
 8008288:	d105      	bne.n	8008296 <__libc_init_array+0x2e>
 800828a:	bd70      	pop	{r4, r5, r6, pc}
 800828c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008290:	4798      	blx	r3
 8008292:	3501      	adds	r5, #1
 8008294:	e7ee      	b.n	8008274 <__libc_init_array+0xc>
 8008296:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800829a:	4798      	blx	r3
 800829c:	3501      	adds	r5, #1
 800829e:	e7f2      	b.n	8008286 <__libc_init_array+0x1e>
 80082a0:	0800c038 	.word	0x0800c038
 80082a4:	0800c038 	.word	0x0800c038
 80082a8:	0800c038 	.word	0x0800c038
 80082ac:	0800c03c 	.word	0x0800c03c

080082b0 <__itoa>:
 80082b0:	1e93      	subs	r3, r2, #2
 80082b2:	2b22      	cmp	r3, #34	; 0x22
 80082b4:	b510      	push	{r4, lr}
 80082b6:	460c      	mov	r4, r1
 80082b8:	d904      	bls.n	80082c4 <__itoa+0x14>
 80082ba:	2300      	movs	r3, #0
 80082bc:	461c      	mov	r4, r3
 80082be:	700b      	strb	r3, [r1, #0]
 80082c0:	4620      	mov	r0, r4
 80082c2:	bd10      	pop	{r4, pc}
 80082c4:	2a0a      	cmp	r2, #10
 80082c6:	d109      	bne.n	80082dc <__itoa+0x2c>
 80082c8:	2800      	cmp	r0, #0
 80082ca:	da07      	bge.n	80082dc <__itoa+0x2c>
 80082cc:	232d      	movs	r3, #45	; 0x2d
 80082ce:	700b      	strb	r3, [r1, #0]
 80082d0:	2101      	movs	r1, #1
 80082d2:	4240      	negs	r0, r0
 80082d4:	4421      	add	r1, r4
 80082d6:	f000 ff55 	bl	8009184 <__utoa>
 80082da:	e7f1      	b.n	80082c0 <__itoa+0x10>
 80082dc:	2100      	movs	r1, #0
 80082de:	e7f9      	b.n	80082d4 <__itoa+0x24>

080082e0 <itoa>:
 80082e0:	f7ff bfe6 	b.w	80082b0 <__itoa>

080082e4 <memcmp>:
 80082e4:	b530      	push	{r4, r5, lr}
 80082e6:	2400      	movs	r4, #0
 80082e8:	42a2      	cmp	r2, r4
 80082ea:	d101      	bne.n	80082f0 <memcmp+0xc>
 80082ec:	2000      	movs	r0, #0
 80082ee:	e007      	b.n	8008300 <memcmp+0x1c>
 80082f0:	5d03      	ldrb	r3, [r0, r4]
 80082f2:	3401      	adds	r4, #1
 80082f4:	190d      	adds	r5, r1, r4
 80082f6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80082fa:	42ab      	cmp	r3, r5
 80082fc:	d0f4      	beq.n	80082e8 <memcmp+0x4>
 80082fe:	1b58      	subs	r0, r3, r5
 8008300:	bd30      	pop	{r4, r5, pc}

08008302 <memcpy>:
 8008302:	b510      	push	{r4, lr}
 8008304:	1e43      	subs	r3, r0, #1
 8008306:	440a      	add	r2, r1
 8008308:	4291      	cmp	r1, r2
 800830a:	d100      	bne.n	800830e <memcpy+0xc>
 800830c:	bd10      	pop	{r4, pc}
 800830e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008312:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008316:	e7f7      	b.n	8008308 <memcpy+0x6>

08008318 <memset>:
 8008318:	4603      	mov	r3, r0
 800831a:	4402      	add	r2, r0
 800831c:	4293      	cmp	r3, r2
 800831e:	d100      	bne.n	8008322 <memset+0xa>
 8008320:	4770      	bx	lr
 8008322:	f803 1b01 	strb.w	r1, [r3], #1
 8008326:	e7f9      	b.n	800831c <memset+0x4>

08008328 <siscanf>:
 8008328:	b40e      	push	{r1, r2, r3}
 800832a:	f44f 7201 	mov.w	r2, #516	; 0x204
 800832e:	b530      	push	{r4, r5, lr}
 8008330:	b09c      	sub	sp, #112	; 0x70
 8008332:	ac1f      	add	r4, sp, #124	; 0x7c
 8008334:	f854 5b04 	ldr.w	r5, [r4], #4
 8008338:	f8ad 2014 	strh.w	r2, [sp, #20]
 800833c:	9002      	str	r0, [sp, #8]
 800833e:	9006      	str	r0, [sp, #24]
 8008340:	f7f7 ff06 	bl	8000150 <strlen>
 8008344:	4b0b      	ldr	r3, [pc, #44]	; (8008374 <siscanf+0x4c>)
 8008346:	9003      	str	r0, [sp, #12]
 8008348:	930b      	str	r3, [sp, #44]	; 0x2c
 800834a:	2300      	movs	r3, #0
 800834c:	930f      	str	r3, [sp, #60]	; 0x3c
 800834e:	9314      	str	r3, [sp, #80]	; 0x50
 8008350:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008354:	9007      	str	r0, [sp, #28]
 8008356:	4808      	ldr	r0, [pc, #32]	; (8008378 <siscanf+0x50>)
 8008358:	f8ad 3016 	strh.w	r3, [sp, #22]
 800835c:	462a      	mov	r2, r5
 800835e:	4623      	mov	r3, r4
 8008360:	a902      	add	r1, sp, #8
 8008362:	6800      	ldr	r0, [r0, #0]
 8008364:	9401      	str	r4, [sp, #4]
 8008366:	f001 ff53 	bl	800a210 <__ssvfiscanf_r>
 800836a:	b01c      	add	sp, #112	; 0x70
 800836c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008370:	b003      	add	sp, #12
 8008372:	4770      	bx	lr
 8008374:	0800837d 	.word	0x0800837d
 8008378:	200001b4 	.word	0x200001b4

0800837c <__seofread>:
 800837c:	2000      	movs	r0, #0
 800837e:	4770      	bx	lr

08008380 <stpcpy>:
 8008380:	4603      	mov	r3, r0
 8008382:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008386:	4618      	mov	r0, r3
 8008388:	f803 2b01 	strb.w	r2, [r3], #1
 800838c:	2a00      	cmp	r2, #0
 800838e:	d1f8      	bne.n	8008382 <stpcpy+0x2>
 8008390:	4770      	bx	lr

08008392 <strcpy>:
 8008392:	4603      	mov	r3, r0
 8008394:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008398:	f803 2b01 	strb.w	r2, [r3], #1
 800839c:	2a00      	cmp	r2, #0
 800839e:	d1f9      	bne.n	8008394 <strcpy+0x2>
 80083a0:	4770      	bx	lr

080083a2 <strstr>:
 80083a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083a4:	7803      	ldrb	r3, [r0, #0]
 80083a6:	b17b      	cbz	r3, 80083c8 <strstr+0x26>
 80083a8:	4604      	mov	r4, r0
 80083aa:	7823      	ldrb	r3, [r4, #0]
 80083ac:	4620      	mov	r0, r4
 80083ae:	1c66      	adds	r6, r4, #1
 80083b0:	b17b      	cbz	r3, 80083d2 <strstr+0x30>
 80083b2:	1e4a      	subs	r2, r1, #1
 80083b4:	1e63      	subs	r3, r4, #1
 80083b6:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80083ba:	b14d      	cbz	r5, 80083d0 <strstr+0x2e>
 80083bc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80083c0:	4634      	mov	r4, r6
 80083c2:	42af      	cmp	r7, r5
 80083c4:	d0f7      	beq.n	80083b6 <strstr+0x14>
 80083c6:	e7f0      	b.n	80083aa <strstr+0x8>
 80083c8:	780b      	ldrb	r3, [r1, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	bf18      	it	ne
 80083ce:	2000      	movne	r0, #0
 80083d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083d2:	4618      	mov	r0, r3
 80083d4:	e7fc      	b.n	80083d0 <strstr+0x2e>

080083d6 <sulp>:
 80083d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083da:	460f      	mov	r7, r1
 80083dc:	4690      	mov	r8, r2
 80083de:	f001 fd27 	bl	8009e30 <__ulp>
 80083e2:	4604      	mov	r4, r0
 80083e4:	460d      	mov	r5, r1
 80083e6:	f1b8 0f00 	cmp.w	r8, #0
 80083ea:	d011      	beq.n	8008410 <sulp+0x3a>
 80083ec:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80083f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	dd0b      	ble.n	8008410 <sulp+0x3a>
 80083f8:	2400      	movs	r4, #0
 80083fa:	051b      	lsls	r3, r3, #20
 80083fc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008400:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008404:	4622      	mov	r2, r4
 8008406:	462b      	mov	r3, r5
 8008408:	f7f8 f866 	bl	80004d8 <__aeabi_dmul>
 800840c:	4604      	mov	r4, r0
 800840e:	460d      	mov	r5, r1
 8008410:	4620      	mov	r0, r4
 8008412:	4629      	mov	r1, r5
 8008414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008418 <_strtod_l>:
 8008418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800841c:	461f      	mov	r7, r3
 800841e:	2300      	movs	r3, #0
 8008420:	b0a1      	sub	sp, #132	; 0x84
 8008422:	4683      	mov	fp, r0
 8008424:	4638      	mov	r0, r7
 8008426:	460e      	mov	r6, r1
 8008428:	9217      	str	r2, [sp, #92]	; 0x5c
 800842a:	931c      	str	r3, [sp, #112]	; 0x70
 800842c:	f001 fa22 	bl	8009874 <__localeconv_l>
 8008430:	4680      	mov	r8, r0
 8008432:	6800      	ldr	r0, [r0, #0]
 8008434:	f7f7 fe8c 	bl	8000150 <strlen>
 8008438:	f04f 0900 	mov.w	r9, #0
 800843c:	4604      	mov	r4, r0
 800843e:	f04f 0a00 	mov.w	sl, #0
 8008442:	961b      	str	r6, [sp, #108]	; 0x6c
 8008444:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008446:	781a      	ldrb	r2, [r3, #0]
 8008448:	2a0d      	cmp	r2, #13
 800844a:	d832      	bhi.n	80084b2 <_strtod_l+0x9a>
 800844c:	2a09      	cmp	r2, #9
 800844e:	d236      	bcs.n	80084be <_strtod_l+0xa6>
 8008450:	2a00      	cmp	r2, #0
 8008452:	d03e      	beq.n	80084d2 <_strtod_l+0xba>
 8008454:	2300      	movs	r3, #0
 8008456:	930d      	str	r3, [sp, #52]	; 0x34
 8008458:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800845a:	782b      	ldrb	r3, [r5, #0]
 800845c:	2b30      	cmp	r3, #48	; 0x30
 800845e:	f040 80ac 	bne.w	80085ba <_strtod_l+0x1a2>
 8008462:	786b      	ldrb	r3, [r5, #1]
 8008464:	2b58      	cmp	r3, #88	; 0x58
 8008466:	d001      	beq.n	800846c <_strtod_l+0x54>
 8008468:	2b78      	cmp	r3, #120	; 0x78
 800846a:	d167      	bne.n	800853c <_strtod_l+0x124>
 800846c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800846e:	9702      	str	r7, [sp, #8]
 8008470:	9301      	str	r3, [sp, #4]
 8008472:	ab1c      	add	r3, sp, #112	; 0x70
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	4a89      	ldr	r2, [pc, #548]	; (800869c <_strtod_l+0x284>)
 8008478:	ab1d      	add	r3, sp, #116	; 0x74
 800847a:	a91b      	add	r1, sp, #108	; 0x6c
 800847c:	4658      	mov	r0, fp
 800847e:	f000 ff0f 	bl	80092a0 <__gethex>
 8008482:	f010 0407 	ands.w	r4, r0, #7
 8008486:	4606      	mov	r6, r0
 8008488:	d005      	beq.n	8008496 <_strtod_l+0x7e>
 800848a:	2c06      	cmp	r4, #6
 800848c:	d12b      	bne.n	80084e6 <_strtod_l+0xce>
 800848e:	2300      	movs	r3, #0
 8008490:	3501      	adds	r5, #1
 8008492:	951b      	str	r5, [sp, #108]	; 0x6c
 8008494:	930d      	str	r3, [sp, #52]	; 0x34
 8008496:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008498:	2b00      	cmp	r3, #0
 800849a:	f040 85a6 	bne.w	8008fea <_strtod_l+0xbd2>
 800849e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084a0:	b1e3      	cbz	r3, 80084dc <_strtod_l+0xc4>
 80084a2:	464a      	mov	r2, r9
 80084a4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80084a8:	4610      	mov	r0, r2
 80084aa:	4619      	mov	r1, r3
 80084ac:	b021      	add	sp, #132	; 0x84
 80084ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b2:	2a2b      	cmp	r2, #43	; 0x2b
 80084b4:	d015      	beq.n	80084e2 <_strtod_l+0xca>
 80084b6:	2a2d      	cmp	r2, #45	; 0x2d
 80084b8:	d004      	beq.n	80084c4 <_strtod_l+0xac>
 80084ba:	2a20      	cmp	r2, #32
 80084bc:	d1ca      	bne.n	8008454 <_strtod_l+0x3c>
 80084be:	3301      	adds	r3, #1
 80084c0:	931b      	str	r3, [sp, #108]	; 0x6c
 80084c2:	e7bf      	b.n	8008444 <_strtod_l+0x2c>
 80084c4:	2201      	movs	r2, #1
 80084c6:	920d      	str	r2, [sp, #52]	; 0x34
 80084c8:	1c5a      	adds	r2, r3, #1
 80084ca:	921b      	str	r2, [sp, #108]	; 0x6c
 80084cc:	785b      	ldrb	r3, [r3, #1]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1c2      	bne.n	8008458 <_strtod_l+0x40>
 80084d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084d4:	961b      	str	r6, [sp, #108]	; 0x6c
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f040 8585 	bne.w	8008fe6 <_strtod_l+0xbce>
 80084dc:	464a      	mov	r2, r9
 80084de:	4653      	mov	r3, sl
 80084e0:	e7e2      	b.n	80084a8 <_strtod_l+0x90>
 80084e2:	2200      	movs	r2, #0
 80084e4:	e7ef      	b.n	80084c6 <_strtod_l+0xae>
 80084e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80084e8:	b13a      	cbz	r2, 80084fa <_strtod_l+0xe2>
 80084ea:	2135      	movs	r1, #53	; 0x35
 80084ec:	a81e      	add	r0, sp, #120	; 0x78
 80084ee:	f001 fd92 	bl	800a016 <__copybits>
 80084f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80084f4:	4658      	mov	r0, fp
 80084f6:	f001 fa05 	bl	8009904 <_Bfree>
 80084fa:	3c01      	subs	r4, #1
 80084fc:	2c04      	cmp	r4, #4
 80084fe:	d806      	bhi.n	800850e <_strtod_l+0xf6>
 8008500:	e8df f004 	tbb	[pc, r4]
 8008504:	1714030a 	.word	0x1714030a
 8008508:	0a          	.byte	0x0a
 8008509:	00          	.byte	0x00
 800850a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800850e:	0731      	lsls	r1, r6, #28
 8008510:	d5c1      	bpl.n	8008496 <_strtod_l+0x7e>
 8008512:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8008516:	e7be      	b.n	8008496 <_strtod_l+0x7e>
 8008518:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800851a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800851e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008522:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008526:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800852a:	e7f0      	b.n	800850e <_strtod_l+0xf6>
 800852c:	f8df a170 	ldr.w	sl, [pc, #368]	; 80086a0 <_strtod_l+0x288>
 8008530:	e7ed      	b.n	800850e <_strtod_l+0xf6>
 8008532:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8008536:	f04f 39ff 	mov.w	r9, #4294967295
 800853a:	e7e8      	b.n	800850e <_strtod_l+0xf6>
 800853c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800853e:	1c5a      	adds	r2, r3, #1
 8008540:	921b      	str	r2, [sp, #108]	; 0x6c
 8008542:	785b      	ldrb	r3, [r3, #1]
 8008544:	2b30      	cmp	r3, #48	; 0x30
 8008546:	d0f9      	beq.n	800853c <_strtod_l+0x124>
 8008548:	2b00      	cmp	r3, #0
 800854a:	d0a4      	beq.n	8008496 <_strtod_l+0x7e>
 800854c:	2301      	movs	r3, #1
 800854e:	2500      	movs	r5, #0
 8008550:	220a      	movs	r2, #10
 8008552:	9307      	str	r3, [sp, #28]
 8008554:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008556:	9506      	str	r5, [sp, #24]
 8008558:	9308      	str	r3, [sp, #32]
 800855a:	9504      	str	r5, [sp, #16]
 800855c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800855e:	7807      	ldrb	r7, [r0, #0]
 8008560:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008564:	b2d9      	uxtb	r1, r3
 8008566:	2909      	cmp	r1, #9
 8008568:	d929      	bls.n	80085be <_strtod_l+0x1a6>
 800856a:	4622      	mov	r2, r4
 800856c:	f8d8 1000 	ldr.w	r1, [r8]
 8008570:	f002 f937 	bl	800a7e2 <strncmp>
 8008574:	2800      	cmp	r0, #0
 8008576:	d031      	beq.n	80085dc <_strtod_l+0x1c4>
 8008578:	2000      	movs	r0, #0
 800857a:	463b      	mov	r3, r7
 800857c:	4602      	mov	r2, r0
 800857e:	9c04      	ldr	r4, [sp, #16]
 8008580:	9005      	str	r0, [sp, #20]
 8008582:	2b65      	cmp	r3, #101	; 0x65
 8008584:	d001      	beq.n	800858a <_strtod_l+0x172>
 8008586:	2b45      	cmp	r3, #69	; 0x45
 8008588:	d114      	bne.n	80085b4 <_strtod_l+0x19c>
 800858a:	b924      	cbnz	r4, 8008596 <_strtod_l+0x17e>
 800858c:	b910      	cbnz	r0, 8008594 <_strtod_l+0x17c>
 800858e:	9b07      	ldr	r3, [sp, #28]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d09e      	beq.n	80084d2 <_strtod_l+0xba>
 8008594:	2400      	movs	r4, #0
 8008596:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008598:	1c73      	adds	r3, r6, #1
 800859a:	931b      	str	r3, [sp, #108]	; 0x6c
 800859c:	7873      	ldrb	r3, [r6, #1]
 800859e:	2b2b      	cmp	r3, #43	; 0x2b
 80085a0:	d078      	beq.n	8008694 <_strtod_l+0x27c>
 80085a2:	2b2d      	cmp	r3, #45	; 0x2d
 80085a4:	d070      	beq.n	8008688 <_strtod_l+0x270>
 80085a6:	f04f 0c00 	mov.w	ip, #0
 80085aa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80085ae:	2f09      	cmp	r7, #9
 80085b0:	d97c      	bls.n	80086ac <_strtod_l+0x294>
 80085b2:	961b      	str	r6, [sp, #108]	; 0x6c
 80085b4:	f04f 0e00 	mov.w	lr, #0
 80085b8:	e09a      	b.n	80086f0 <_strtod_l+0x2d8>
 80085ba:	2300      	movs	r3, #0
 80085bc:	e7c7      	b.n	800854e <_strtod_l+0x136>
 80085be:	9904      	ldr	r1, [sp, #16]
 80085c0:	3001      	adds	r0, #1
 80085c2:	2908      	cmp	r1, #8
 80085c4:	bfd7      	itett	le
 80085c6:	9906      	ldrle	r1, [sp, #24]
 80085c8:	fb02 3505 	mlagt	r5, r2, r5, r3
 80085cc:	fb02 3301 	mlale	r3, r2, r1, r3
 80085d0:	9306      	strle	r3, [sp, #24]
 80085d2:	9b04      	ldr	r3, [sp, #16]
 80085d4:	901b      	str	r0, [sp, #108]	; 0x6c
 80085d6:	3301      	adds	r3, #1
 80085d8:	9304      	str	r3, [sp, #16]
 80085da:	e7bf      	b.n	800855c <_strtod_l+0x144>
 80085dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085de:	191a      	adds	r2, r3, r4
 80085e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80085e2:	9a04      	ldr	r2, [sp, #16]
 80085e4:	5d1b      	ldrb	r3, [r3, r4]
 80085e6:	2a00      	cmp	r2, #0
 80085e8:	d037      	beq.n	800865a <_strtod_l+0x242>
 80085ea:	4602      	mov	r2, r0
 80085ec:	9c04      	ldr	r4, [sp, #16]
 80085ee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80085f2:	2909      	cmp	r1, #9
 80085f4:	d913      	bls.n	800861e <_strtod_l+0x206>
 80085f6:	2101      	movs	r1, #1
 80085f8:	9105      	str	r1, [sp, #20]
 80085fa:	e7c2      	b.n	8008582 <_strtod_l+0x16a>
 80085fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085fe:	3001      	adds	r0, #1
 8008600:	1c5a      	adds	r2, r3, #1
 8008602:	921b      	str	r2, [sp, #108]	; 0x6c
 8008604:	785b      	ldrb	r3, [r3, #1]
 8008606:	2b30      	cmp	r3, #48	; 0x30
 8008608:	d0f8      	beq.n	80085fc <_strtod_l+0x1e4>
 800860a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800860e:	2a08      	cmp	r2, #8
 8008610:	f200 84f0 	bhi.w	8008ff4 <_strtod_l+0xbdc>
 8008614:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008616:	9208      	str	r2, [sp, #32]
 8008618:	4602      	mov	r2, r0
 800861a:	2000      	movs	r0, #0
 800861c:	4604      	mov	r4, r0
 800861e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8008622:	f100 0101 	add.w	r1, r0, #1
 8008626:	d012      	beq.n	800864e <_strtod_l+0x236>
 8008628:	440a      	add	r2, r1
 800862a:	270a      	movs	r7, #10
 800862c:	4621      	mov	r1, r4
 800862e:	eb00 0c04 	add.w	ip, r0, r4
 8008632:	458c      	cmp	ip, r1
 8008634:	d113      	bne.n	800865e <_strtod_l+0x246>
 8008636:	1821      	adds	r1, r4, r0
 8008638:	2908      	cmp	r1, #8
 800863a:	f104 0401 	add.w	r4, r4, #1
 800863e:	4404      	add	r4, r0
 8008640:	dc19      	bgt.n	8008676 <_strtod_l+0x25e>
 8008642:	210a      	movs	r1, #10
 8008644:	9b06      	ldr	r3, [sp, #24]
 8008646:	fb01 e303 	mla	r3, r1, r3, lr
 800864a:	9306      	str	r3, [sp, #24]
 800864c:	2100      	movs	r1, #0
 800864e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008650:	1c58      	adds	r0, r3, #1
 8008652:	901b      	str	r0, [sp, #108]	; 0x6c
 8008654:	785b      	ldrb	r3, [r3, #1]
 8008656:	4608      	mov	r0, r1
 8008658:	e7c9      	b.n	80085ee <_strtod_l+0x1d6>
 800865a:	9804      	ldr	r0, [sp, #16]
 800865c:	e7d3      	b.n	8008606 <_strtod_l+0x1ee>
 800865e:	2908      	cmp	r1, #8
 8008660:	f101 0101 	add.w	r1, r1, #1
 8008664:	dc03      	bgt.n	800866e <_strtod_l+0x256>
 8008666:	9b06      	ldr	r3, [sp, #24]
 8008668:	437b      	muls	r3, r7
 800866a:	9306      	str	r3, [sp, #24]
 800866c:	e7e1      	b.n	8008632 <_strtod_l+0x21a>
 800866e:	2910      	cmp	r1, #16
 8008670:	bfd8      	it	le
 8008672:	437d      	mulle	r5, r7
 8008674:	e7dd      	b.n	8008632 <_strtod_l+0x21a>
 8008676:	2c10      	cmp	r4, #16
 8008678:	bfdc      	itt	le
 800867a:	210a      	movle	r1, #10
 800867c:	fb01 e505 	mlale	r5, r1, r5, lr
 8008680:	e7e4      	b.n	800864c <_strtod_l+0x234>
 8008682:	2301      	movs	r3, #1
 8008684:	9305      	str	r3, [sp, #20]
 8008686:	e781      	b.n	800858c <_strtod_l+0x174>
 8008688:	f04f 0c01 	mov.w	ip, #1
 800868c:	1cb3      	adds	r3, r6, #2
 800868e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008690:	78b3      	ldrb	r3, [r6, #2]
 8008692:	e78a      	b.n	80085aa <_strtod_l+0x192>
 8008694:	f04f 0c00 	mov.w	ip, #0
 8008698:	e7f8      	b.n	800868c <_strtod_l+0x274>
 800869a:	bf00      	nop
 800869c:	0800bd20 	.word	0x0800bd20
 80086a0:	7ff00000 	.word	0x7ff00000
 80086a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80086a6:	1c5f      	adds	r7, r3, #1
 80086a8:	971b      	str	r7, [sp, #108]	; 0x6c
 80086aa:	785b      	ldrb	r3, [r3, #1]
 80086ac:	2b30      	cmp	r3, #48	; 0x30
 80086ae:	d0f9      	beq.n	80086a4 <_strtod_l+0x28c>
 80086b0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80086b4:	2f08      	cmp	r7, #8
 80086b6:	f63f af7d 	bhi.w	80085b4 <_strtod_l+0x19c>
 80086ba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80086be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80086c0:	9309      	str	r3, [sp, #36]	; 0x24
 80086c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80086c4:	1c5f      	adds	r7, r3, #1
 80086c6:	971b      	str	r7, [sp, #108]	; 0x6c
 80086c8:	785b      	ldrb	r3, [r3, #1]
 80086ca:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80086ce:	f1b8 0f09 	cmp.w	r8, #9
 80086d2:	d937      	bls.n	8008744 <_strtod_l+0x32c>
 80086d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086d6:	1a7f      	subs	r7, r7, r1
 80086d8:	2f08      	cmp	r7, #8
 80086da:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80086de:	dc37      	bgt.n	8008750 <_strtod_l+0x338>
 80086e0:	45be      	cmp	lr, r7
 80086e2:	bfa8      	it	ge
 80086e4:	46be      	movge	lr, r7
 80086e6:	f1bc 0f00 	cmp.w	ip, #0
 80086ea:	d001      	beq.n	80086f0 <_strtod_l+0x2d8>
 80086ec:	f1ce 0e00 	rsb	lr, lr, #0
 80086f0:	2c00      	cmp	r4, #0
 80086f2:	d151      	bne.n	8008798 <_strtod_l+0x380>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	f47f aece 	bne.w	8008496 <_strtod_l+0x7e>
 80086fa:	9a07      	ldr	r2, [sp, #28]
 80086fc:	2a00      	cmp	r2, #0
 80086fe:	f47f aeca 	bne.w	8008496 <_strtod_l+0x7e>
 8008702:	9a05      	ldr	r2, [sp, #20]
 8008704:	2a00      	cmp	r2, #0
 8008706:	f47f aee4 	bne.w	80084d2 <_strtod_l+0xba>
 800870a:	2b4e      	cmp	r3, #78	; 0x4e
 800870c:	d027      	beq.n	800875e <_strtod_l+0x346>
 800870e:	dc21      	bgt.n	8008754 <_strtod_l+0x33c>
 8008710:	2b49      	cmp	r3, #73	; 0x49
 8008712:	f47f aede 	bne.w	80084d2 <_strtod_l+0xba>
 8008716:	49a4      	ldr	r1, [pc, #656]	; (80089a8 <_strtod_l+0x590>)
 8008718:	a81b      	add	r0, sp, #108	; 0x6c
 800871a:	f000 fff5 	bl	8009708 <__match>
 800871e:	2800      	cmp	r0, #0
 8008720:	f43f aed7 	beq.w	80084d2 <_strtod_l+0xba>
 8008724:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008726:	49a1      	ldr	r1, [pc, #644]	; (80089ac <_strtod_l+0x594>)
 8008728:	3b01      	subs	r3, #1
 800872a:	a81b      	add	r0, sp, #108	; 0x6c
 800872c:	931b      	str	r3, [sp, #108]	; 0x6c
 800872e:	f000 ffeb 	bl	8009708 <__match>
 8008732:	b910      	cbnz	r0, 800873a <_strtod_l+0x322>
 8008734:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008736:	3301      	adds	r3, #1
 8008738:	931b      	str	r3, [sp, #108]	; 0x6c
 800873a:	f8df a284 	ldr.w	sl, [pc, #644]	; 80089c0 <_strtod_l+0x5a8>
 800873e:	f04f 0900 	mov.w	r9, #0
 8008742:	e6a8      	b.n	8008496 <_strtod_l+0x7e>
 8008744:	210a      	movs	r1, #10
 8008746:	fb01 3e0e 	mla	lr, r1, lr, r3
 800874a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800874e:	e7b8      	b.n	80086c2 <_strtod_l+0x2aa>
 8008750:	46be      	mov	lr, r7
 8008752:	e7c8      	b.n	80086e6 <_strtod_l+0x2ce>
 8008754:	2b69      	cmp	r3, #105	; 0x69
 8008756:	d0de      	beq.n	8008716 <_strtod_l+0x2fe>
 8008758:	2b6e      	cmp	r3, #110	; 0x6e
 800875a:	f47f aeba 	bne.w	80084d2 <_strtod_l+0xba>
 800875e:	4994      	ldr	r1, [pc, #592]	; (80089b0 <_strtod_l+0x598>)
 8008760:	a81b      	add	r0, sp, #108	; 0x6c
 8008762:	f000 ffd1 	bl	8009708 <__match>
 8008766:	2800      	cmp	r0, #0
 8008768:	f43f aeb3 	beq.w	80084d2 <_strtod_l+0xba>
 800876c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	2b28      	cmp	r3, #40	; 0x28
 8008772:	d10e      	bne.n	8008792 <_strtod_l+0x37a>
 8008774:	aa1e      	add	r2, sp, #120	; 0x78
 8008776:	498f      	ldr	r1, [pc, #572]	; (80089b4 <_strtod_l+0x59c>)
 8008778:	a81b      	add	r0, sp, #108	; 0x6c
 800877a:	f000 ffd9 	bl	8009730 <__hexnan>
 800877e:	2805      	cmp	r0, #5
 8008780:	d107      	bne.n	8008792 <_strtod_l+0x37a>
 8008782:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008784:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8008788:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800878c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8008790:	e681      	b.n	8008496 <_strtod_l+0x7e>
 8008792:	f8df a234 	ldr.w	sl, [pc, #564]	; 80089c8 <_strtod_l+0x5b0>
 8008796:	e7d2      	b.n	800873e <_strtod_l+0x326>
 8008798:	ebae 0302 	sub.w	r3, lr, r2
 800879c:	9307      	str	r3, [sp, #28]
 800879e:	9b04      	ldr	r3, [sp, #16]
 80087a0:	9806      	ldr	r0, [sp, #24]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	bf08      	it	eq
 80087a6:	4623      	moveq	r3, r4
 80087a8:	2c10      	cmp	r4, #16
 80087aa:	9304      	str	r3, [sp, #16]
 80087ac:	46a0      	mov	r8, r4
 80087ae:	bfa8      	it	ge
 80087b0:	f04f 0810 	movge.w	r8, #16
 80087b4:	f7f7 fe16 	bl	80003e4 <__aeabi_ui2d>
 80087b8:	2c09      	cmp	r4, #9
 80087ba:	4681      	mov	r9, r0
 80087bc:	468a      	mov	sl, r1
 80087be:	dc13      	bgt.n	80087e8 <_strtod_l+0x3d0>
 80087c0:	9b07      	ldr	r3, [sp, #28]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f43f ae67 	beq.w	8008496 <_strtod_l+0x7e>
 80087c8:	9b07      	ldr	r3, [sp, #28]
 80087ca:	dd7e      	ble.n	80088ca <_strtod_l+0x4b2>
 80087cc:	2b16      	cmp	r3, #22
 80087ce:	dc65      	bgt.n	800889c <_strtod_l+0x484>
 80087d0:	4a79      	ldr	r2, [pc, #484]	; (80089b8 <_strtod_l+0x5a0>)
 80087d2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80087d6:	464a      	mov	r2, r9
 80087d8:	e9de 0100 	ldrd	r0, r1, [lr]
 80087dc:	4653      	mov	r3, sl
 80087de:	f7f7 fe7b 	bl	80004d8 <__aeabi_dmul>
 80087e2:	4681      	mov	r9, r0
 80087e4:	468a      	mov	sl, r1
 80087e6:	e656      	b.n	8008496 <_strtod_l+0x7e>
 80087e8:	4b73      	ldr	r3, [pc, #460]	; (80089b8 <_strtod_l+0x5a0>)
 80087ea:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80087ee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80087f2:	f7f7 fe71 	bl	80004d8 <__aeabi_dmul>
 80087f6:	4606      	mov	r6, r0
 80087f8:	4628      	mov	r0, r5
 80087fa:	460f      	mov	r7, r1
 80087fc:	f7f7 fdf2 	bl	80003e4 <__aeabi_ui2d>
 8008800:	4602      	mov	r2, r0
 8008802:	460b      	mov	r3, r1
 8008804:	4630      	mov	r0, r6
 8008806:	4639      	mov	r1, r7
 8008808:	f7f7 fcb0 	bl	800016c <__adddf3>
 800880c:	2c0f      	cmp	r4, #15
 800880e:	4681      	mov	r9, r0
 8008810:	468a      	mov	sl, r1
 8008812:	ddd5      	ble.n	80087c0 <_strtod_l+0x3a8>
 8008814:	9b07      	ldr	r3, [sp, #28]
 8008816:	eba4 0808 	sub.w	r8, r4, r8
 800881a:	4498      	add	r8, r3
 800881c:	f1b8 0f00 	cmp.w	r8, #0
 8008820:	f340 809a 	ble.w	8008958 <_strtod_l+0x540>
 8008824:	f018 030f 	ands.w	r3, r8, #15
 8008828:	d00a      	beq.n	8008840 <_strtod_l+0x428>
 800882a:	4963      	ldr	r1, [pc, #396]	; (80089b8 <_strtod_l+0x5a0>)
 800882c:	464a      	mov	r2, r9
 800882e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008832:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008836:	4653      	mov	r3, sl
 8008838:	f7f7 fe4e 	bl	80004d8 <__aeabi_dmul>
 800883c:	4681      	mov	r9, r0
 800883e:	468a      	mov	sl, r1
 8008840:	f038 080f 	bics.w	r8, r8, #15
 8008844:	d077      	beq.n	8008936 <_strtod_l+0x51e>
 8008846:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800884a:	dd4b      	ble.n	80088e4 <_strtod_l+0x4cc>
 800884c:	f04f 0800 	mov.w	r8, #0
 8008850:	f8cd 8010 	str.w	r8, [sp, #16]
 8008854:	f8cd 8020 	str.w	r8, [sp, #32]
 8008858:	f8cd 8018 	str.w	r8, [sp, #24]
 800885c:	2322      	movs	r3, #34	; 0x22
 800885e:	f04f 0900 	mov.w	r9, #0
 8008862:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80089c0 <_strtod_l+0x5a8>
 8008866:	f8cb 3000 	str.w	r3, [fp]
 800886a:	9b08      	ldr	r3, [sp, #32]
 800886c:	2b00      	cmp	r3, #0
 800886e:	f43f ae12 	beq.w	8008496 <_strtod_l+0x7e>
 8008872:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008874:	4658      	mov	r0, fp
 8008876:	f001 f845 	bl	8009904 <_Bfree>
 800887a:	9906      	ldr	r1, [sp, #24]
 800887c:	4658      	mov	r0, fp
 800887e:	f001 f841 	bl	8009904 <_Bfree>
 8008882:	9904      	ldr	r1, [sp, #16]
 8008884:	4658      	mov	r0, fp
 8008886:	f001 f83d 	bl	8009904 <_Bfree>
 800888a:	9908      	ldr	r1, [sp, #32]
 800888c:	4658      	mov	r0, fp
 800888e:	f001 f839 	bl	8009904 <_Bfree>
 8008892:	4641      	mov	r1, r8
 8008894:	4658      	mov	r0, fp
 8008896:	f001 f835 	bl	8009904 <_Bfree>
 800889a:	e5fc      	b.n	8008496 <_strtod_l+0x7e>
 800889c:	9a07      	ldr	r2, [sp, #28]
 800889e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80088a2:	4293      	cmp	r3, r2
 80088a4:	dbb6      	blt.n	8008814 <_strtod_l+0x3fc>
 80088a6:	4d44      	ldr	r5, [pc, #272]	; (80089b8 <_strtod_l+0x5a0>)
 80088a8:	f1c4 040f 	rsb	r4, r4, #15
 80088ac:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80088b0:	464a      	mov	r2, r9
 80088b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088b6:	4653      	mov	r3, sl
 80088b8:	f7f7 fe0e 	bl	80004d8 <__aeabi_dmul>
 80088bc:	9b07      	ldr	r3, [sp, #28]
 80088be:	1b1c      	subs	r4, r3, r4
 80088c0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80088c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80088c8:	e789      	b.n	80087de <_strtod_l+0x3c6>
 80088ca:	f113 0f16 	cmn.w	r3, #22
 80088ce:	dba1      	blt.n	8008814 <_strtod_l+0x3fc>
 80088d0:	4a39      	ldr	r2, [pc, #228]	; (80089b8 <_strtod_l+0x5a0>)
 80088d2:	4648      	mov	r0, r9
 80088d4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80088d8:	e9d2 2300 	ldrd	r2, r3, [r2]
 80088dc:	4651      	mov	r1, sl
 80088de:	f7f7 ff25 	bl	800072c <__aeabi_ddiv>
 80088e2:	e77e      	b.n	80087e2 <_strtod_l+0x3ca>
 80088e4:	2300      	movs	r3, #0
 80088e6:	4648      	mov	r0, r9
 80088e8:	4651      	mov	r1, sl
 80088ea:	461d      	mov	r5, r3
 80088ec:	4e33      	ldr	r6, [pc, #204]	; (80089bc <_strtod_l+0x5a4>)
 80088ee:	ea4f 1828 	mov.w	r8, r8, asr #4
 80088f2:	f1b8 0f01 	cmp.w	r8, #1
 80088f6:	dc21      	bgt.n	800893c <_strtod_l+0x524>
 80088f8:	b10b      	cbz	r3, 80088fe <_strtod_l+0x4e6>
 80088fa:	4681      	mov	r9, r0
 80088fc:	468a      	mov	sl, r1
 80088fe:	4b2f      	ldr	r3, [pc, #188]	; (80089bc <_strtod_l+0x5a4>)
 8008900:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8008904:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008908:	464a      	mov	r2, r9
 800890a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800890e:	4653      	mov	r3, sl
 8008910:	f7f7 fde2 	bl	80004d8 <__aeabi_dmul>
 8008914:	4b2a      	ldr	r3, [pc, #168]	; (80089c0 <_strtod_l+0x5a8>)
 8008916:	460a      	mov	r2, r1
 8008918:	400b      	ands	r3, r1
 800891a:	492a      	ldr	r1, [pc, #168]	; (80089c4 <_strtod_l+0x5ac>)
 800891c:	4681      	mov	r9, r0
 800891e:	428b      	cmp	r3, r1
 8008920:	d894      	bhi.n	800884c <_strtod_l+0x434>
 8008922:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008926:	428b      	cmp	r3, r1
 8008928:	bf86      	itte	hi
 800892a:	f04f 39ff 	movhi.w	r9, #4294967295
 800892e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80089cc <_strtod_l+0x5b4>
 8008932:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8008936:	2300      	movs	r3, #0
 8008938:	9305      	str	r3, [sp, #20]
 800893a:	e07b      	b.n	8008a34 <_strtod_l+0x61c>
 800893c:	f018 0f01 	tst.w	r8, #1
 8008940:	d006      	beq.n	8008950 <_strtod_l+0x538>
 8008942:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	f7f7 fdc5 	bl	80004d8 <__aeabi_dmul>
 800894e:	2301      	movs	r3, #1
 8008950:	3501      	adds	r5, #1
 8008952:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008956:	e7cc      	b.n	80088f2 <_strtod_l+0x4da>
 8008958:	d0ed      	beq.n	8008936 <_strtod_l+0x51e>
 800895a:	f1c8 0800 	rsb	r8, r8, #0
 800895e:	f018 020f 	ands.w	r2, r8, #15
 8008962:	d00a      	beq.n	800897a <_strtod_l+0x562>
 8008964:	4b14      	ldr	r3, [pc, #80]	; (80089b8 <_strtod_l+0x5a0>)
 8008966:	4648      	mov	r0, r9
 8008968:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800896c:	4651      	mov	r1, sl
 800896e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008972:	f7f7 fedb 	bl	800072c <__aeabi_ddiv>
 8008976:	4681      	mov	r9, r0
 8008978:	468a      	mov	sl, r1
 800897a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800897e:	d0da      	beq.n	8008936 <_strtod_l+0x51e>
 8008980:	f1b8 0f1f 	cmp.w	r8, #31
 8008984:	dd24      	ble.n	80089d0 <_strtod_l+0x5b8>
 8008986:	f04f 0800 	mov.w	r8, #0
 800898a:	f8cd 8010 	str.w	r8, [sp, #16]
 800898e:	f8cd 8020 	str.w	r8, [sp, #32]
 8008992:	f8cd 8018 	str.w	r8, [sp, #24]
 8008996:	2322      	movs	r3, #34	; 0x22
 8008998:	f04f 0900 	mov.w	r9, #0
 800899c:	f04f 0a00 	mov.w	sl, #0
 80089a0:	f8cb 3000 	str.w	r3, [fp]
 80089a4:	e761      	b.n	800886a <_strtod_l+0x452>
 80089a6:	bf00      	nop
 80089a8:	0800bd14 	.word	0x0800bd14
 80089ac:	0800bd17 	.word	0x0800bd17
 80089b0:	0800bd1d 	.word	0x0800bd1d
 80089b4:	0800bd34 	.word	0x0800bd34
 80089b8:	0800bdc8 	.word	0x0800bdc8
 80089bc:	0800bda0 	.word	0x0800bda0
 80089c0:	7ff00000 	.word	0x7ff00000
 80089c4:	7ca00000 	.word	0x7ca00000
 80089c8:	fff80000 	.word	0xfff80000
 80089cc:	7fefffff 	.word	0x7fefffff
 80089d0:	f018 0310 	ands.w	r3, r8, #16
 80089d4:	bf18      	it	ne
 80089d6:	236a      	movne	r3, #106	; 0x6a
 80089d8:	4648      	mov	r0, r9
 80089da:	9305      	str	r3, [sp, #20]
 80089dc:	4651      	mov	r1, sl
 80089de:	2300      	movs	r3, #0
 80089e0:	4da1      	ldr	r5, [pc, #644]	; (8008c68 <_strtod_l+0x850>)
 80089e2:	f1b8 0f00 	cmp.w	r8, #0
 80089e6:	f300 8113 	bgt.w	8008c10 <_strtod_l+0x7f8>
 80089ea:	b10b      	cbz	r3, 80089f0 <_strtod_l+0x5d8>
 80089ec:	4681      	mov	r9, r0
 80089ee:	468a      	mov	sl, r1
 80089f0:	9b05      	ldr	r3, [sp, #20]
 80089f2:	b1bb      	cbz	r3, 8008a24 <_strtod_l+0x60c>
 80089f4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80089f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	4651      	mov	r1, sl
 8008a00:	dd10      	ble.n	8008a24 <_strtod_l+0x60c>
 8008a02:	2b1f      	cmp	r3, #31
 8008a04:	f340 8110 	ble.w	8008c28 <_strtod_l+0x810>
 8008a08:	2b34      	cmp	r3, #52	; 0x34
 8008a0a:	bfd8      	it	le
 8008a0c:	f04f 32ff 	movle.w	r2, #4294967295
 8008a10:	f04f 0900 	mov.w	r9, #0
 8008a14:	bfcf      	iteee	gt
 8008a16:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8008a1a:	3b20      	suble	r3, #32
 8008a1c:	fa02 f303 	lslle.w	r3, r2, r3
 8008a20:	ea03 0a01 	andle.w	sl, r3, r1
 8008a24:	2200      	movs	r2, #0
 8008a26:	2300      	movs	r3, #0
 8008a28:	4648      	mov	r0, r9
 8008a2a:	4651      	mov	r1, sl
 8008a2c:	f7f7 ffbc 	bl	80009a8 <__aeabi_dcmpeq>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d1a8      	bne.n	8008986 <_strtod_l+0x56e>
 8008a34:	9b06      	ldr	r3, [sp, #24]
 8008a36:	9a04      	ldr	r2, [sp, #16]
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	9908      	ldr	r1, [sp, #32]
 8008a3c:	4623      	mov	r3, r4
 8008a3e:	4658      	mov	r0, fp
 8008a40:	f000 ffb2 	bl	80099a8 <__s2b>
 8008a44:	9008      	str	r0, [sp, #32]
 8008a46:	2800      	cmp	r0, #0
 8008a48:	f43f af00 	beq.w	800884c <_strtod_l+0x434>
 8008a4c:	9a07      	ldr	r2, [sp, #28]
 8008a4e:	9b07      	ldr	r3, [sp, #28]
 8008a50:	2a00      	cmp	r2, #0
 8008a52:	f1c3 0300 	rsb	r3, r3, #0
 8008a56:	bfa8      	it	ge
 8008a58:	2300      	movge	r3, #0
 8008a5a:	f04f 0800 	mov.w	r8, #0
 8008a5e:	930e      	str	r3, [sp, #56]	; 0x38
 8008a60:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008a64:	9316      	str	r3, [sp, #88]	; 0x58
 8008a66:	f8cd 8010 	str.w	r8, [sp, #16]
 8008a6a:	9b08      	ldr	r3, [sp, #32]
 8008a6c:	4658      	mov	r0, fp
 8008a6e:	6859      	ldr	r1, [r3, #4]
 8008a70:	f000 ff14 	bl	800989c <_Balloc>
 8008a74:	9006      	str	r0, [sp, #24]
 8008a76:	2800      	cmp	r0, #0
 8008a78:	f43f aef0 	beq.w	800885c <_strtod_l+0x444>
 8008a7c:	9b08      	ldr	r3, [sp, #32]
 8008a7e:	300c      	adds	r0, #12
 8008a80:	691a      	ldr	r2, [r3, #16]
 8008a82:	f103 010c 	add.w	r1, r3, #12
 8008a86:	3202      	adds	r2, #2
 8008a88:	0092      	lsls	r2, r2, #2
 8008a8a:	f7ff fc3a 	bl	8008302 <memcpy>
 8008a8e:	ab1e      	add	r3, sp, #120	; 0x78
 8008a90:	9301      	str	r3, [sp, #4]
 8008a92:	ab1d      	add	r3, sp, #116	; 0x74
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	464a      	mov	r2, r9
 8008a98:	4653      	mov	r3, sl
 8008a9a:	4658      	mov	r0, fp
 8008a9c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8008aa0:	f001 fa3c 	bl	8009f1c <__d2b>
 8008aa4:	901c      	str	r0, [sp, #112]	; 0x70
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	f43f aed8 	beq.w	800885c <_strtod_l+0x444>
 8008aac:	2101      	movs	r1, #1
 8008aae:	4658      	mov	r0, fp
 8008ab0:	f001 f806 	bl	8009ac0 <__i2b>
 8008ab4:	9004      	str	r0, [sp, #16]
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	f43f aecf 	beq.w	800885c <_strtod_l+0x444>
 8008abe:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008ac0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008ac2:	2d00      	cmp	r5, #0
 8008ac4:	bfab      	itete	ge
 8008ac6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008ac8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008aca:	18ee      	addge	r6, r5, r3
 8008acc:	1b5c      	sublt	r4, r3, r5
 8008ace:	9b05      	ldr	r3, [sp, #20]
 8008ad0:	bfa8      	it	ge
 8008ad2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8008ad4:	eba5 0503 	sub.w	r5, r5, r3
 8008ad8:	4415      	add	r5, r2
 8008ada:	4b64      	ldr	r3, [pc, #400]	; (8008c6c <_strtod_l+0x854>)
 8008adc:	f105 35ff 	add.w	r5, r5, #4294967295
 8008ae0:	bfb8      	it	lt
 8008ae2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008ae4:	429d      	cmp	r5, r3
 8008ae6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008aea:	f280 80af 	bge.w	8008c4c <_strtod_l+0x834>
 8008aee:	1b5b      	subs	r3, r3, r5
 8008af0:	2b1f      	cmp	r3, #31
 8008af2:	eba2 0203 	sub.w	r2, r2, r3
 8008af6:	f04f 0701 	mov.w	r7, #1
 8008afa:	f300 809c 	bgt.w	8008c36 <_strtod_l+0x81e>
 8008afe:	2500      	movs	r5, #0
 8008b00:	fa07 f303 	lsl.w	r3, r7, r3
 8008b04:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b06:	18b7      	adds	r7, r6, r2
 8008b08:	9b05      	ldr	r3, [sp, #20]
 8008b0a:	42be      	cmp	r6, r7
 8008b0c:	4414      	add	r4, r2
 8008b0e:	441c      	add	r4, r3
 8008b10:	4633      	mov	r3, r6
 8008b12:	bfa8      	it	ge
 8008b14:	463b      	movge	r3, r7
 8008b16:	42a3      	cmp	r3, r4
 8008b18:	bfa8      	it	ge
 8008b1a:	4623      	movge	r3, r4
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	bfc2      	ittt	gt
 8008b20:	1aff      	subgt	r7, r7, r3
 8008b22:	1ae4      	subgt	r4, r4, r3
 8008b24:	1af6      	subgt	r6, r6, r3
 8008b26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b28:	b1bb      	cbz	r3, 8008b5a <_strtod_l+0x742>
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	9904      	ldr	r1, [sp, #16]
 8008b2e:	4658      	mov	r0, fp
 8008b30:	f001 f864 	bl	8009bfc <__pow5mult>
 8008b34:	9004      	str	r0, [sp, #16]
 8008b36:	2800      	cmp	r0, #0
 8008b38:	f43f ae90 	beq.w	800885c <_strtod_l+0x444>
 8008b3c:	4601      	mov	r1, r0
 8008b3e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008b40:	4658      	mov	r0, fp
 8008b42:	f000 ffc6 	bl	8009ad2 <__multiply>
 8008b46:	9009      	str	r0, [sp, #36]	; 0x24
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	f43f ae87 	beq.w	800885c <_strtod_l+0x444>
 8008b4e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008b50:	4658      	mov	r0, fp
 8008b52:	f000 fed7 	bl	8009904 <_Bfree>
 8008b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b58:	931c      	str	r3, [sp, #112]	; 0x70
 8008b5a:	2f00      	cmp	r7, #0
 8008b5c:	dc7a      	bgt.n	8008c54 <_strtod_l+0x83c>
 8008b5e:	9b07      	ldr	r3, [sp, #28]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	dd08      	ble.n	8008b76 <_strtod_l+0x75e>
 8008b64:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008b66:	9906      	ldr	r1, [sp, #24]
 8008b68:	4658      	mov	r0, fp
 8008b6a:	f001 f847 	bl	8009bfc <__pow5mult>
 8008b6e:	9006      	str	r0, [sp, #24]
 8008b70:	2800      	cmp	r0, #0
 8008b72:	f43f ae73 	beq.w	800885c <_strtod_l+0x444>
 8008b76:	2c00      	cmp	r4, #0
 8008b78:	dd08      	ble.n	8008b8c <_strtod_l+0x774>
 8008b7a:	4622      	mov	r2, r4
 8008b7c:	9906      	ldr	r1, [sp, #24]
 8008b7e:	4658      	mov	r0, fp
 8008b80:	f001 f88a 	bl	8009c98 <__lshift>
 8008b84:	9006      	str	r0, [sp, #24]
 8008b86:	2800      	cmp	r0, #0
 8008b88:	f43f ae68 	beq.w	800885c <_strtod_l+0x444>
 8008b8c:	2e00      	cmp	r6, #0
 8008b8e:	dd08      	ble.n	8008ba2 <_strtod_l+0x78a>
 8008b90:	4632      	mov	r2, r6
 8008b92:	9904      	ldr	r1, [sp, #16]
 8008b94:	4658      	mov	r0, fp
 8008b96:	f001 f87f 	bl	8009c98 <__lshift>
 8008b9a:	9004      	str	r0, [sp, #16]
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	f43f ae5d 	beq.w	800885c <_strtod_l+0x444>
 8008ba2:	9a06      	ldr	r2, [sp, #24]
 8008ba4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008ba6:	4658      	mov	r0, fp
 8008ba8:	f001 f8e4 	bl	8009d74 <__mdiff>
 8008bac:	4680      	mov	r8, r0
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	f43f ae54 	beq.w	800885c <_strtod_l+0x444>
 8008bb4:	2400      	movs	r4, #0
 8008bb6:	68c3      	ldr	r3, [r0, #12]
 8008bb8:	9904      	ldr	r1, [sp, #16]
 8008bba:	60c4      	str	r4, [r0, #12]
 8008bbc:	930c      	str	r3, [sp, #48]	; 0x30
 8008bbe:	f001 f8bf 	bl	8009d40 <__mcmp>
 8008bc2:	42a0      	cmp	r0, r4
 8008bc4:	da54      	bge.n	8008c70 <_strtod_l+0x858>
 8008bc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bc8:	b9f3      	cbnz	r3, 8008c08 <_strtod_l+0x7f0>
 8008bca:	f1b9 0f00 	cmp.w	r9, #0
 8008bce:	d11b      	bne.n	8008c08 <_strtod_l+0x7f0>
 8008bd0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8008bd4:	b9c3      	cbnz	r3, 8008c08 <_strtod_l+0x7f0>
 8008bd6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008bda:	0d1b      	lsrs	r3, r3, #20
 8008bdc:	051b      	lsls	r3, r3, #20
 8008bde:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008be2:	d911      	bls.n	8008c08 <_strtod_l+0x7f0>
 8008be4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008be8:	b91b      	cbnz	r3, 8008bf2 <_strtod_l+0x7da>
 8008bea:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	dd0a      	ble.n	8008c08 <_strtod_l+0x7f0>
 8008bf2:	4641      	mov	r1, r8
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	4658      	mov	r0, fp
 8008bf8:	f001 f84e 	bl	8009c98 <__lshift>
 8008bfc:	9904      	ldr	r1, [sp, #16]
 8008bfe:	4680      	mov	r8, r0
 8008c00:	f001 f89e 	bl	8009d40 <__mcmp>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	dc68      	bgt.n	8008cda <_strtod_l+0x8c2>
 8008c08:	9b05      	ldr	r3, [sp, #20]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d172      	bne.n	8008cf4 <_strtod_l+0x8dc>
 8008c0e:	e630      	b.n	8008872 <_strtod_l+0x45a>
 8008c10:	f018 0f01 	tst.w	r8, #1
 8008c14:	d004      	beq.n	8008c20 <_strtod_l+0x808>
 8008c16:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008c1a:	f7f7 fc5d 	bl	80004d8 <__aeabi_dmul>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008c24:	3508      	adds	r5, #8
 8008c26:	e6dc      	b.n	80089e2 <_strtod_l+0x5ca>
 8008c28:	f04f 32ff 	mov.w	r2, #4294967295
 8008c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c30:	ea03 0909 	and.w	r9, r3, r9
 8008c34:	e6f6      	b.n	8008a24 <_strtod_l+0x60c>
 8008c36:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8008c3a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8008c3e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8008c42:	35e2      	adds	r5, #226	; 0xe2
 8008c44:	fa07 f505 	lsl.w	r5, r7, r5
 8008c48:	970f      	str	r7, [sp, #60]	; 0x3c
 8008c4a:	e75c      	b.n	8008b06 <_strtod_l+0x6ee>
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	2500      	movs	r5, #0
 8008c50:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c52:	e758      	b.n	8008b06 <_strtod_l+0x6ee>
 8008c54:	463a      	mov	r2, r7
 8008c56:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008c58:	4658      	mov	r0, fp
 8008c5a:	f001 f81d 	bl	8009c98 <__lshift>
 8008c5e:	901c      	str	r0, [sp, #112]	; 0x70
 8008c60:	2800      	cmp	r0, #0
 8008c62:	f47f af7c 	bne.w	8008b5e <_strtod_l+0x746>
 8008c66:	e5f9      	b.n	800885c <_strtod_l+0x444>
 8008c68:	0800bd48 	.word	0x0800bd48
 8008c6c:	fffffc02 	.word	0xfffffc02
 8008c70:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008c74:	f040 8089 	bne.w	8008d8a <_strtod_l+0x972>
 8008c78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c7a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8008c7e:	b342      	cbz	r2, 8008cd2 <_strtod_l+0x8ba>
 8008c80:	4aaf      	ldr	r2, [pc, #700]	; (8008f40 <_strtod_l+0xb28>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d156      	bne.n	8008d34 <_strtod_l+0x91c>
 8008c86:	9b05      	ldr	r3, [sp, #20]
 8008c88:	4648      	mov	r0, r9
 8008c8a:	b1eb      	cbz	r3, 8008cc8 <_strtod_l+0x8b0>
 8008c8c:	4653      	mov	r3, sl
 8008c8e:	4aad      	ldr	r2, [pc, #692]	; (8008f44 <_strtod_l+0xb2c>)
 8008c90:	f04f 31ff 	mov.w	r1, #4294967295
 8008c94:	401a      	ands	r2, r3
 8008c96:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008c9a:	d818      	bhi.n	8008cce <_strtod_l+0x8b6>
 8008c9c:	0d12      	lsrs	r2, r2, #20
 8008c9e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ca6:	4298      	cmp	r0, r3
 8008ca8:	d144      	bne.n	8008d34 <_strtod_l+0x91c>
 8008caa:	4ba7      	ldr	r3, [pc, #668]	; (8008f48 <_strtod_l+0xb30>)
 8008cac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d102      	bne.n	8008cb8 <_strtod_l+0x8a0>
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	f43f add2 	beq.w	800885c <_strtod_l+0x444>
 8008cb8:	4ba2      	ldr	r3, [pc, #648]	; (8008f44 <_strtod_l+0xb2c>)
 8008cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cbc:	f04f 0900 	mov.w	r9, #0
 8008cc0:	401a      	ands	r2, r3
 8008cc2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8008cc6:	e79f      	b.n	8008c08 <_strtod_l+0x7f0>
 8008cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ccc:	e7eb      	b.n	8008ca6 <_strtod_l+0x88e>
 8008cce:	460b      	mov	r3, r1
 8008cd0:	e7e9      	b.n	8008ca6 <_strtod_l+0x88e>
 8008cd2:	bb7b      	cbnz	r3, 8008d34 <_strtod_l+0x91c>
 8008cd4:	f1b9 0f00 	cmp.w	r9, #0
 8008cd8:	d12c      	bne.n	8008d34 <_strtod_l+0x91c>
 8008cda:	9905      	ldr	r1, [sp, #20]
 8008cdc:	4653      	mov	r3, sl
 8008cde:	4a99      	ldr	r2, [pc, #612]	; (8008f44 <_strtod_l+0xb2c>)
 8008ce0:	b1f1      	cbz	r1, 8008d20 <_strtod_l+0x908>
 8008ce2:	ea02 010a 	and.w	r1, r2, sl
 8008ce6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008cea:	dc19      	bgt.n	8008d20 <_strtod_l+0x908>
 8008cec:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008cf0:	f77f ae51 	ble.w	8008996 <_strtod_l+0x57e>
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	4a95      	ldr	r2, [pc, #596]	; (8008f4c <_strtod_l+0xb34>)
 8008cf8:	4648      	mov	r0, r9
 8008cfa:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008cfe:	4651      	mov	r1, sl
 8008d00:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008d04:	f7f7 fbe8 	bl	80004d8 <__aeabi_dmul>
 8008d08:	4681      	mov	r9, r0
 8008d0a:	468a      	mov	sl, r1
 8008d0c:	2900      	cmp	r1, #0
 8008d0e:	f47f adb0 	bne.w	8008872 <_strtod_l+0x45a>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	f47f adad 	bne.w	8008872 <_strtod_l+0x45a>
 8008d18:	2322      	movs	r3, #34	; 0x22
 8008d1a:	f8cb 3000 	str.w	r3, [fp]
 8008d1e:	e5a8      	b.n	8008872 <_strtod_l+0x45a>
 8008d20:	4013      	ands	r3, r2
 8008d22:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008d26:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8008d2a:	f04f 39ff 	mov.w	r9, #4294967295
 8008d2e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8008d32:	e769      	b.n	8008c08 <_strtod_l+0x7f0>
 8008d34:	b19d      	cbz	r5, 8008d5e <_strtod_l+0x946>
 8008d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d38:	421d      	tst	r5, r3
 8008d3a:	f43f af65 	beq.w	8008c08 <_strtod_l+0x7f0>
 8008d3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d40:	9a05      	ldr	r2, [sp, #20]
 8008d42:	4648      	mov	r0, r9
 8008d44:	4651      	mov	r1, sl
 8008d46:	b173      	cbz	r3, 8008d66 <_strtod_l+0x94e>
 8008d48:	f7ff fb45 	bl	80083d6 <sulp>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d54:	f7f7 fa0a 	bl	800016c <__adddf3>
 8008d58:	4681      	mov	r9, r0
 8008d5a:	468a      	mov	sl, r1
 8008d5c:	e754      	b.n	8008c08 <_strtod_l+0x7f0>
 8008d5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d60:	ea13 0f09 	tst.w	r3, r9
 8008d64:	e7e9      	b.n	8008d3a <_strtod_l+0x922>
 8008d66:	f7ff fb36 	bl	80083d6 <sulp>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d72:	f7f7 f9f9 	bl	8000168 <__aeabi_dsub>
 8008d76:	2200      	movs	r2, #0
 8008d78:	2300      	movs	r3, #0
 8008d7a:	4681      	mov	r9, r0
 8008d7c:	468a      	mov	sl, r1
 8008d7e:	f7f7 fe13 	bl	80009a8 <__aeabi_dcmpeq>
 8008d82:	2800      	cmp	r0, #0
 8008d84:	f47f ae07 	bne.w	8008996 <_strtod_l+0x57e>
 8008d88:	e73e      	b.n	8008c08 <_strtod_l+0x7f0>
 8008d8a:	9904      	ldr	r1, [sp, #16]
 8008d8c:	4640      	mov	r0, r8
 8008d8e:	f001 f914 	bl	8009fba <__ratio>
 8008d92:	2200      	movs	r2, #0
 8008d94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d98:	4606      	mov	r6, r0
 8008d9a:	460f      	mov	r7, r1
 8008d9c:	f7f7 fe18 	bl	80009d0 <__aeabi_dcmple>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d075      	beq.n	8008e90 <_strtod_l+0xa78>
 8008da4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d047      	beq.n	8008e3a <_strtod_l+0xa22>
 8008daa:	2600      	movs	r6, #0
 8008dac:	4f68      	ldr	r7, [pc, #416]	; (8008f50 <_strtod_l+0xb38>)
 8008dae:	4d68      	ldr	r5, [pc, #416]	; (8008f50 <_strtod_l+0xb38>)
 8008db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008db6:	0d1b      	lsrs	r3, r3, #20
 8008db8:	051b      	lsls	r3, r3, #20
 8008dba:	930f      	str	r3, [sp, #60]	; 0x3c
 8008dbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008dbe:	4b65      	ldr	r3, [pc, #404]	; (8008f54 <_strtod_l+0xb3c>)
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	f040 80cf 	bne.w	8008f64 <_strtod_l+0xb4c>
 8008dc6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008dca:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dd0:	4648      	mov	r0, r9
 8008dd2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8008dd6:	4651      	mov	r1, sl
 8008dd8:	f001 f82a 	bl	8009e30 <__ulp>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	460b      	mov	r3, r1
 8008de0:	4630      	mov	r0, r6
 8008de2:	4639      	mov	r1, r7
 8008de4:	f7f7 fb78 	bl	80004d8 <__aeabi_dmul>
 8008de8:	464a      	mov	r2, r9
 8008dea:	4653      	mov	r3, sl
 8008dec:	f7f7 f9be 	bl	800016c <__adddf3>
 8008df0:	460b      	mov	r3, r1
 8008df2:	4954      	ldr	r1, [pc, #336]	; (8008f44 <_strtod_l+0xb2c>)
 8008df4:	4a58      	ldr	r2, [pc, #352]	; (8008f58 <_strtod_l+0xb40>)
 8008df6:	4019      	ands	r1, r3
 8008df8:	4291      	cmp	r1, r2
 8008dfa:	4681      	mov	r9, r0
 8008dfc:	d95e      	bls.n	8008ebc <_strtod_l+0xaa4>
 8008dfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e00:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d103      	bne.n	8008e10 <_strtod_l+0x9f8>
 8008e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	f43f ad26 	beq.w	800885c <_strtod_l+0x444>
 8008e10:	f04f 39ff 	mov.w	r9, #4294967295
 8008e14:	f8df a130 	ldr.w	sl, [pc, #304]	; 8008f48 <_strtod_l+0xb30>
 8008e18:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008e1a:	4658      	mov	r0, fp
 8008e1c:	f000 fd72 	bl	8009904 <_Bfree>
 8008e20:	9906      	ldr	r1, [sp, #24]
 8008e22:	4658      	mov	r0, fp
 8008e24:	f000 fd6e 	bl	8009904 <_Bfree>
 8008e28:	9904      	ldr	r1, [sp, #16]
 8008e2a:	4658      	mov	r0, fp
 8008e2c:	f000 fd6a 	bl	8009904 <_Bfree>
 8008e30:	4641      	mov	r1, r8
 8008e32:	4658      	mov	r0, fp
 8008e34:	f000 fd66 	bl	8009904 <_Bfree>
 8008e38:	e617      	b.n	8008a6a <_strtod_l+0x652>
 8008e3a:	f1b9 0f00 	cmp.w	r9, #0
 8008e3e:	d119      	bne.n	8008e74 <_strtod_l+0xa5c>
 8008e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e46:	b9e3      	cbnz	r3, 8008e82 <_strtod_l+0xa6a>
 8008e48:	2200      	movs	r2, #0
 8008e4a:	4b41      	ldr	r3, [pc, #260]	; (8008f50 <_strtod_l+0xb38>)
 8008e4c:	4630      	mov	r0, r6
 8008e4e:	4639      	mov	r1, r7
 8008e50:	f7f7 fdb4 	bl	80009bc <__aeabi_dcmplt>
 8008e54:	b9c8      	cbnz	r0, 8008e8a <_strtod_l+0xa72>
 8008e56:	2200      	movs	r2, #0
 8008e58:	4b40      	ldr	r3, [pc, #256]	; (8008f5c <_strtod_l+0xb44>)
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	4639      	mov	r1, r7
 8008e5e:	f7f7 fb3b 	bl	80004d8 <__aeabi_dmul>
 8008e62:	4604      	mov	r4, r0
 8008e64:	460d      	mov	r5, r1
 8008e66:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008e6a:	9418      	str	r4, [sp, #96]	; 0x60
 8008e6c:	9319      	str	r3, [sp, #100]	; 0x64
 8008e6e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8008e72:	e79d      	b.n	8008db0 <_strtod_l+0x998>
 8008e74:	f1b9 0f01 	cmp.w	r9, #1
 8008e78:	d103      	bne.n	8008e82 <_strtod_l+0xa6a>
 8008e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f43f ad8a 	beq.w	8008996 <_strtod_l+0x57e>
 8008e82:	2600      	movs	r6, #0
 8008e84:	4f36      	ldr	r7, [pc, #216]	; (8008f60 <_strtod_l+0xb48>)
 8008e86:	2400      	movs	r4, #0
 8008e88:	e791      	b.n	8008dae <_strtod_l+0x996>
 8008e8a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008e8c:	4d33      	ldr	r5, [pc, #204]	; (8008f5c <_strtod_l+0xb44>)
 8008e8e:	e7ea      	b.n	8008e66 <_strtod_l+0xa4e>
 8008e90:	4b32      	ldr	r3, [pc, #200]	; (8008f5c <_strtod_l+0xb44>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	4630      	mov	r0, r6
 8008e96:	4639      	mov	r1, r7
 8008e98:	f7f7 fb1e 	bl	80004d8 <__aeabi_dmul>
 8008e9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	460d      	mov	r5, r1
 8008ea2:	b933      	cbnz	r3, 8008eb2 <_strtod_l+0xa9a>
 8008ea4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ea8:	9010      	str	r0, [sp, #64]	; 0x40
 8008eaa:	9311      	str	r3, [sp, #68]	; 0x44
 8008eac:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008eb0:	e77e      	b.n	8008db0 <_strtod_l+0x998>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008eba:	e7f7      	b.n	8008eac <_strtod_l+0xa94>
 8008ebc:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8008ec0:	9b05      	ldr	r3, [sp, #20]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1a8      	bne.n	8008e18 <_strtod_l+0xa00>
 8008ec6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008eca:	0d1b      	lsrs	r3, r3, #20
 8008ecc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ece:	051b      	lsls	r3, r3, #20
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	4656      	mov	r6, sl
 8008ed4:	d1a0      	bne.n	8008e18 <_strtod_l+0xa00>
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	4620      	mov	r0, r4
 8008eda:	f7f7 fdad 	bl	8000a38 <__aeabi_d2iz>
 8008ede:	f7f7 fa91 	bl	8000404 <__aeabi_i2d>
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	4629      	mov	r1, r5
 8008ee8:	4620      	mov	r0, r4
 8008eea:	f7f7 f93d 	bl	8000168 <__aeabi_dsub>
 8008eee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ef0:	4604      	mov	r4, r0
 8008ef2:	460d      	mov	r5, r1
 8008ef4:	b933      	cbnz	r3, 8008f04 <_strtod_l+0xaec>
 8008ef6:	f1b9 0f00 	cmp.w	r9, #0
 8008efa:	d103      	bne.n	8008f04 <_strtod_l+0xaec>
 8008efc:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8008f00:	2e00      	cmp	r6, #0
 8008f02:	d06a      	beq.n	8008fda <_strtod_l+0xbc2>
 8008f04:	a30a      	add	r3, pc, #40	; (adr r3, 8008f30 <_strtod_l+0xb18>)
 8008f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	4629      	mov	r1, r5
 8008f0e:	f7f7 fd55 	bl	80009bc <__aeabi_dcmplt>
 8008f12:	2800      	cmp	r0, #0
 8008f14:	f47f acad 	bne.w	8008872 <_strtod_l+0x45a>
 8008f18:	a307      	add	r3, pc, #28	; (adr r3, 8008f38 <_strtod_l+0xb20>)
 8008f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1e:	4620      	mov	r0, r4
 8008f20:	4629      	mov	r1, r5
 8008f22:	f7f7 fd69 	bl	80009f8 <__aeabi_dcmpgt>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	f43f af76 	beq.w	8008e18 <_strtod_l+0xa00>
 8008f2c:	e4a1      	b.n	8008872 <_strtod_l+0x45a>
 8008f2e:	bf00      	nop
 8008f30:	94a03595 	.word	0x94a03595
 8008f34:	3fdfffff 	.word	0x3fdfffff
 8008f38:	35afe535 	.word	0x35afe535
 8008f3c:	3fe00000 	.word	0x3fe00000
 8008f40:	000fffff 	.word	0x000fffff
 8008f44:	7ff00000 	.word	0x7ff00000
 8008f48:	7fefffff 	.word	0x7fefffff
 8008f4c:	39500000 	.word	0x39500000
 8008f50:	3ff00000 	.word	0x3ff00000
 8008f54:	7fe00000 	.word	0x7fe00000
 8008f58:	7c9fffff 	.word	0x7c9fffff
 8008f5c:	3fe00000 	.word	0x3fe00000
 8008f60:	bff00000 	.word	0xbff00000
 8008f64:	9b05      	ldr	r3, [sp, #20]
 8008f66:	b313      	cbz	r3, 8008fae <_strtod_l+0xb96>
 8008f68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f6a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008f6e:	d81e      	bhi.n	8008fae <_strtod_l+0xb96>
 8008f70:	a325      	add	r3, pc, #148	; (adr r3, 8009008 <_strtod_l+0xbf0>)
 8008f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f76:	4620      	mov	r0, r4
 8008f78:	4629      	mov	r1, r5
 8008f7a:	f7f7 fd29 	bl	80009d0 <__aeabi_dcmple>
 8008f7e:	b190      	cbz	r0, 8008fa6 <_strtod_l+0xb8e>
 8008f80:	4629      	mov	r1, r5
 8008f82:	4620      	mov	r0, r4
 8008f84:	f7f7 fd80 	bl	8000a88 <__aeabi_d2uiz>
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	bf08      	it	eq
 8008f8c:	2001      	moveq	r0, #1
 8008f8e:	f7f7 fa29 	bl	80003e4 <__aeabi_ui2d>
 8008f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f94:	4604      	mov	r4, r0
 8008f96:	460d      	mov	r5, r1
 8008f98:	b9d3      	cbnz	r3, 8008fd0 <_strtod_l+0xbb8>
 8008f9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f9e:	9012      	str	r0, [sp, #72]	; 0x48
 8008fa0:	9313      	str	r3, [sp, #76]	; 0x4c
 8008fa2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008fa6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008fa8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008fac:	1a9f      	subs	r7, r3, r2
 8008fae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008fb2:	f000 ff3d 	bl	8009e30 <__ulp>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	460b      	mov	r3, r1
 8008fba:	4630      	mov	r0, r6
 8008fbc:	4639      	mov	r1, r7
 8008fbe:	f7f7 fa8b 	bl	80004d8 <__aeabi_dmul>
 8008fc2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008fc6:	f7f7 f8d1 	bl	800016c <__adddf3>
 8008fca:	4681      	mov	r9, r0
 8008fcc:	468a      	mov	sl, r1
 8008fce:	e777      	b.n	8008ec0 <_strtod_l+0xaa8>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008fd8:	e7e3      	b.n	8008fa2 <_strtod_l+0xb8a>
 8008fda:	a30d      	add	r3, pc, #52	; (adr r3, 8009010 <_strtod_l+0xbf8>)
 8008fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe0:	f7f7 fcec 	bl	80009bc <__aeabi_dcmplt>
 8008fe4:	e79f      	b.n	8008f26 <_strtod_l+0xb0e>
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	930d      	str	r3, [sp, #52]	; 0x34
 8008fea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008fec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	f7ff ba55 	b.w	800849e <_strtod_l+0x86>
 8008ff4:	2b65      	cmp	r3, #101	; 0x65
 8008ff6:	f04f 0200 	mov.w	r2, #0
 8008ffa:	f43f ab42 	beq.w	8008682 <_strtod_l+0x26a>
 8008ffe:	2101      	movs	r1, #1
 8009000:	4614      	mov	r4, r2
 8009002:	9105      	str	r1, [sp, #20]
 8009004:	f7ff babf 	b.w	8008586 <_strtod_l+0x16e>
 8009008:	ffc00000 	.word	0xffc00000
 800900c:	41dfffff 	.word	0x41dfffff
 8009010:	94a03595 	.word	0x94a03595
 8009014:	3fcfffff 	.word	0x3fcfffff

08009018 <strtod>:
 8009018:	4b06      	ldr	r3, [pc, #24]	; (8009034 <strtod+0x1c>)
 800901a:	b410      	push	{r4}
 800901c:	681c      	ldr	r4, [r3, #0]
 800901e:	4a06      	ldr	r2, [pc, #24]	; (8009038 <strtod+0x20>)
 8009020:	6a23      	ldr	r3, [r4, #32]
 8009022:	2b00      	cmp	r3, #0
 8009024:	bf08      	it	eq
 8009026:	4613      	moveq	r3, r2
 8009028:	460a      	mov	r2, r1
 800902a:	4601      	mov	r1, r0
 800902c:	4620      	mov	r0, r4
 800902e:	bc10      	pop	{r4}
 8009030:	f7ff b9f2 	b.w	8008418 <_strtod_l>
 8009034:	200001b4 	.word	0x200001b4
 8009038:	20000218 	.word	0x20000218

0800903c <_strtol_l.isra.0>:
 800903c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009040:	4680      	mov	r8, r0
 8009042:	4689      	mov	r9, r1
 8009044:	4692      	mov	sl, r2
 8009046:	461e      	mov	r6, r3
 8009048:	460f      	mov	r7, r1
 800904a:	463d      	mov	r5, r7
 800904c:	9808      	ldr	r0, [sp, #32]
 800904e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009052:	f000 fbfd 	bl	8009850 <__locale_ctype_ptr_l>
 8009056:	4420      	add	r0, r4
 8009058:	7843      	ldrb	r3, [r0, #1]
 800905a:	f013 0308 	ands.w	r3, r3, #8
 800905e:	d132      	bne.n	80090c6 <_strtol_l.isra.0+0x8a>
 8009060:	2c2d      	cmp	r4, #45	; 0x2d
 8009062:	d132      	bne.n	80090ca <_strtol_l.isra.0+0x8e>
 8009064:	2201      	movs	r2, #1
 8009066:	787c      	ldrb	r4, [r7, #1]
 8009068:	1cbd      	adds	r5, r7, #2
 800906a:	2e00      	cmp	r6, #0
 800906c:	d05d      	beq.n	800912a <_strtol_l.isra.0+0xee>
 800906e:	2e10      	cmp	r6, #16
 8009070:	d109      	bne.n	8009086 <_strtol_l.isra.0+0x4a>
 8009072:	2c30      	cmp	r4, #48	; 0x30
 8009074:	d107      	bne.n	8009086 <_strtol_l.isra.0+0x4a>
 8009076:	782b      	ldrb	r3, [r5, #0]
 8009078:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800907c:	2b58      	cmp	r3, #88	; 0x58
 800907e:	d14f      	bne.n	8009120 <_strtol_l.isra.0+0xe4>
 8009080:	2610      	movs	r6, #16
 8009082:	786c      	ldrb	r4, [r5, #1]
 8009084:	3502      	adds	r5, #2
 8009086:	2a00      	cmp	r2, #0
 8009088:	bf14      	ite	ne
 800908a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800908e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009092:	2700      	movs	r7, #0
 8009094:	fbb1 fcf6 	udiv	ip, r1, r6
 8009098:	4638      	mov	r0, r7
 800909a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800909e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80090a2:	2b09      	cmp	r3, #9
 80090a4:	d817      	bhi.n	80090d6 <_strtol_l.isra.0+0x9a>
 80090a6:	461c      	mov	r4, r3
 80090a8:	42a6      	cmp	r6, r4
 80090aa:	dd23      	ble.n	80090f4 <_strtol_l.isra.0+0xb8>
 80090ac:	1c7b      	adds	r3, r7, #1
 80090ae:	d007      	beq.n	80090c0 <_strtol_l.isra.0+0x84>
 80090b0:	4584      	cmp	ip, r0
 80090b2:	d31c      	bcc.n	80090ee <_strtol_l.isra.0+0xb2>
 80090b4:	d101      	bne.n	80090ba <_strtol_l.isra.0+0x7e>
 80090b6:	45a6      	cmp	lr, r4
 80090b8:	db19      	blt.n	80090ee <_strtol_l.isra.0+0xb2>
 80090ba:	2701      	movs	r7, #1
 80090bc:	fb00 4006 	mla	r0, r0, r6, r4
 80090c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090c4:	e7eb      	b.n	800909e <_strtol_l.isra.0+0x62>
 80090c6:	462f      	mov	r7, r5
 80090c8:	e7bf      	b.n	800904a <_strtol_l.isra.0+0xe>
 80090ca:	2c2b      	cmp	r4, #43	; 0x2b
 80090cc:	bf04      	itt	eq
 80090ce:	1cbd      	addeq	r5, r7, #2
 80090d0:	787c      	ldrbeq	r4, [r7, #1]
 80090d2:	461a      	mov	r2, r3
 80090d4:	e7c9      	b.n	800906a <_strtol_l.isra.0+0x2e>
 80090d6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80090da:	2b19      	cmp	r3, #25
 80090dc:	d801      	bhi.n	80090e2 <_strtol_l.isra.0+0xa6>
 80090de:	3c37      	subs	r4, #55	; 0x37
 80090e0:	e7e2      	b.n	80090a8 <_strtol_l.isra.0+0x6c>
 80090e2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80090e6:	2b19      	cmp	r3, #25
 80090e8:	d804      	bhi.n	80090f4 <_strtol_l.isra.0+0xb8>
 80090ea:	3c57      	subs	r4, #87	; 0x57
 80090ec:	e7dc      	b.n	80090a8 <_strtol_l.isra.0+0x6c>
 80090ee:	f04f 37ff 	mov.w	r7, #4294967295
 80090f2:	e7e5      	b.n	80090c0 <_strtol_l.isra.0+0x84>
 80090f4:	1c7b      	adds	r3, r7, #1
 80090f6:	d108      	bne.n	800910a <_strtol_l.isra.0+0xce>
 80090f8:	2322      	movs	r3, #34	; 0x22
 80090fa:	4608      	mov	r0, r1
 80090fc:	f8c8 3000 	str.w	r3, [r8]
 8009100:	f1ba 0f00 	cmp.w	sl, #0
 8009104:	d107      	bne.n	8009116 <_strtol_l.isra.0+0xda>
 8009106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800910a:	b102      	cbz	r2, 800910e <_strtol_l.isra.0+0xd2>
 800910c:	4240      	negs	r0, r0
 800910e:	f1ba 0f00 	cmp.w	sl, #0
 8009112:	d0f8      	beq.n	8009106 <_strtol_l.isra.0+0xca>
 8009114:	b10f      	cbz	r7, 800911a <_strtol_l.isra.0+0xde>
 8009116:	f105 39ff 	add.w	r9, r5, #4294967295
 800911a:	f8ca 9000 	str.w	r9, [sl]
 800911e:	e7f2      	b.n	8009106 <_strtol_l.isra.0+0xca>
 8009120:	2430      	movs	r4, #48	; 0x30
 8009122:	2e00      	cmp	r6, #0
 8009124:	d1af      	bne.n	8009086 <_strtol_l.isra.0+0x4a>
 8009126:	2608      	movs	r6, #8
 8009128:	e7ad      	b.n	8009086 <_strtol_l.isra.0+0x4a>
 800912a:	2c30      	cmp	r4, #48	; 0x30
 800912c:	d0a3      	beq.n	8009076 <_strtol_l.isra.0+0x3a>
 800912e:	260a      	movs	r6, #10
 8009130:	e7a9      	b.n	8009086 <_strtol_l.isra.0+0x4a>
	...

08009134 <_strtol_r>:
 8009134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009136:	4c06      	ldr	r4, [pc, #24]	; (8009150 <_strtol_r+0x1c>)
 8009138:	4d06      	ldr	r5, [pc, #24]	; (8009154 <_strtol_r+0x20>)
 800913a:	6824      	ldr	r4, [r4, #0]
 800913c:	6a24      	ldr	r4, [r4, #32]
 800913e:	2c00      	cmp	r4, #0
 8009140:	bf08      	it	eq
 8009142:	462c      	moveq	r4, r5
 8009144:	9400      	str	r4, [sp, #0]
 8009146:	f7ff ff79 	bl	800903c <_strtol_l.isra.0>
 800914a:	b003      	add	sp, #12
 800914c:	bd30      	pop	{r4, r5, pc}
 800914e:	bf00      	nop
 8009150:	200001b4 	.word	0x200001b4
 8009154:	20000218 	.word	0x20000218

08009158 <strtol>:
 8009158:	4b08      	ldr	r3, [pc, #32]	; (800917c <strtol+0x24>)
 800915a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800915c:	681c      	ldr	r4, [r3, #0]
 800915e:	4d08      	ldr	r5, [pc, #32]	; (8009180 <strtol+0x28>)
 8009160:	6a23      	ldr	r3, [r4, #32]
 8009162:	2b00      	cmp	r3, #0
 8009164:	bf08      	it	eq
 8009166:	462b      	moveq	r3, r5
 8009168:	9300      	str	r3, [sp, #0]
 800916a:	4613      	mov	r3, r2
 800916c:	460a      	mov	r2, r1
 800916e:	4601      	mov	r1, r0
 8009170:	4620      	mov	r0, r4
 8009172:	f7ff ff63 	bl	800903c <_strtol_l.isra.0>
 8009176:	b003      	add	sp, #12
 8009178:	bd30      	pop	{r4, r5, pc}
 800917a:	bf00      	nop
 800917c:	200001b4 	.word	0x200001b4
 8009180:	20000218 	.word	0x20000218

08009184 <__utoa>:
 8009184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009186:	b08b      	sub	sp, #44	; 0x2c
 8009188:	4605      	mov	r5, r0
 800918a:	460c      	mov	r4, r1
 800918c:	466e      	mov	r6, sp
 800918e:	4b1b      	ldr	r3, [pc, #108]	; (80091fc <__utoa+0x78>)
 8009190:	f103 0c20 	add.w	ip, r3, #32
 8009194:	4637      	mov	r7, r6
 8009196:	6818      	ldr	r0, [r3, #0]
 8009198:	6859      	ldr	r1, [r3, #4]
 800919a:	3308      	adds	r3, #8
 800919c:	c703      	stmia	r7!, {r0, r1}
 800919e:	4563      	cmp	r3, ip
 80091a0:	463e      	mov	r6, r7
 80091a2:	d1f7      	bne.n	8009194 <__utoa+0x10>
 80091a4:	6818      	ldr	r0, [r3, #0]
 80091a6:	791b      	ldrb	r3, [r3, #4]
 80091a8:	6038      	str	r0, [r7, #0]
 80091aa:	713b      	strb	r3, [r7, #4]
 80091ac:	1e93      	subs	r3, r2, #2
 80091ae:	2b22      	cmp	r3, #34	; 0x22
 80091b0:	f04f 0300 	mov.w	r3, #0
 80091b4:	d904      	bls.n	80091c0 <__utoa+0x3c>
 80091b6:	7023      	strb	r3, [r4, #0]
 80091b8:	461c      	mov	r4, r3
 80091ba:	4620      	mov	r0, r4
 80091bc:	b00b      	add	sp, #44	; 0x2c
 80091be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091c0:	1e66      	subs	r6, r4, #1
 80091c2:	fbb5 f0f2 	udiv	r0, r5, r2
 80091c6:	fb02 5510 	mls	r5, r2, r0, r5
 80091ca:	af0a      	add	r7, sp, #40	; 0x28
 80091cc:	443d      	add	r5, r7
 80091ce:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80091d2:	1c59      	adds	r1, r3, #1
 80091d4:	f806 5f01 	strb.w	r5, [r6, #1]!
 80091d8:	4605      	mov	r5, r0
 80091da:	b968      	cbnz	r0, 80091f8 <__utoa+0x74>
 80091dc:	4622      	mov	r2, r4
 80091de:	5460      	strb	r0, [r4, r1]
 80091e0:	4423      	add	r3, r4
 80091e2:	1b19      	subs	r1, r3, r4
 80091e4:	1b10      	subs	r0, r2, r4
 80091e6:	4281      	cmp	r1, r0
 80091e8:	dde7      	ble.n	80091ba <__utoa+0x36>
 80091ea:	7811      	ldrb	r1, [r2, #0]
 80091ec:	7818      	ldrb	r0, [r3, #0]
 80091ee:	f802 0b01 	strb.w	r0, [r2], #1
 80091f2:	f803 1901 	strb.w	r1, [r3], #-1
 80091f6:	e7f4      	b.n	80091e2 <__utoa+0x5e>
 80091f8:	460b      	mov	r3, r1
 80091fa:	e7e2      	b.n	80091c2 <__utoa+0x3e>
 80091fc:	0800bd70 	.word	0x0800bd70

08009200 <rshift>:
 8009200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009202:	6906      	ldr	r6, [r0, #16]
 8009204:	114b      	asrs	r3, r1, #5
 8009206:	429e      	cmp	r6, r3
 8009208:	f100 0414 	add.w	r4, r0, #20
 800920c:	dd31      	ble.n	8009272 <rshift+0x72>
 800920e:	f011 011f 	ands.w	r1, r1, #31
 8009212:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009216:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800921a:	d108      	bne.n	800922e <rshift+0x2e>
 800921c:	4621      	mov	r1, r4
 800921e:	42b2      	cmp	r2, r6
 8009220:	460b      	mov	r3, r1
 8009222:	d211      	bcs.n	8009248 <rshift+0x48>
 8009224:	f852 3b04 	ldr.w	r3, [r2], #4
 8009228:	f841 3b04 	str.w	r3, [r1], #4
 800922c:	e7f7      	b.n	800921e <rshift+0x1e>
 800922e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009232:	4623      	mov	r3, r4
 8009234:	f1c1 0c20 	rsb	ip, r1, #32
 8009238:	40cd      	lsrs	r5, r1
 800923a:	3204      	adds	r2, #4
 800923c:	42b2      	cmp	r2, r6
 800923e:	4617      	mov	r7, r2
 8009240:	d30d      	bcc.n	800925e <rshift+0x5e>
 8009242:	601d      	str	r5, [r3, #0]
 8009244:	b105      	cbz	r5, 8009248 <rshift+0x48>
 8009246:	3304      	adds	r3, #4
 8009248:	42a3      	cmp	r3, r4
 800924a:	eba3 0204 	sub.w	r2, r3, r4
 800924e:	bf08      	it	eq
 8009250:	2300      	moveq	r3, #0
 8009252:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009256:	6102      	str	r2, [r0, #16]
 8009258:	bf08      	it	eq
 800925a:	6143      	streq	r3, [r0, #20]
 800925c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800925e:	683f      	ldr	r7, [r7, #0]
 8009260:	fa07 f70c 	lsl.w	r7, r7, ip
 8009264:	433d      	orrs	r5, r7
 8009266:	f843 5b04 	str.w	r5, [r3], #4
 800926a:	f852 5b04 	ldr.w	r5, [r2], #4
 800926e:	40cd      	lsrs	r5, r1
 8009270:	e7e4      	b.n	800923c <rshift+0x3c>
 8009272:	4623      	mov	r3, r4
 8009274:	e7e8      	b.n	8009248 <rshift+0x48>

08009276 <__hexdig_fun>:
 8009276:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800927a:	2b09      	cmp	r3, #9
 800927c:	d802      	bhi.n	8009284 <__hexdig_fun+0xe>
 800927e:	3820      	subs	r0, #32
 8009280:	b2c0      	uxtb	r0, r0
 8009282:	4770      	bx	lr
 8009284:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009288:	2b05      	cmp	r3, #5
 800928a:	d801      	bhi.n	8009290 <__hexdig_fun+0x1a>
 800928c:	3847      	subs	r0, #71	; 0x47
 800928e:	e7f7      	b.n	8009280 <__hexdig_fun+0xa>
 8009290:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009294:	2b05      	cmp	r3, #5
 8009296:	d801      	bhi.n	800929c <__hexdig_fun+0x26>
 8009298:	3827      	subs	r0, #39	; 0x27
 800929a:	e7f1      	b.n	8009280 <__hexdig_fun+0xa>
 800929c:	2000      	movs	r0, #0
 800929e:	4770      	bx	lr

080092a0 <__gethex>:
 80092a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a4:	b08b      	sub	sp, #44	; 0x2c
 80092a6:	9002      	str	r0, [sp, #8]
 80092a8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80092aa:	468a      	mov	sl, r1
 80092ac:	4690      	mov	r8, r2
 80092ae:	9306      	str	r3, [sp, #24]
 80092b0:	f000 fae0 	bl	8009874 <__localeconv_l>
 80092b4:	6803      	ldr	r3, [r0, #0]
 80092b6:	f04f 0b00 	mov.w	fp, #0
 80092ba:	4618      	mov	r0, r3
 80092bc:	9303      	str	r3, [sp, #12]
 80092be:	f7f6 ff47 	bl	8000150 <strlen>
 80092c2:	9b03      	ldr	r3, [sp, #12]
 80092c4:	9001      	str	r0, [sp, #4]
 80092c6:	4403      	add	r3, r0
 80092c8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80092cc:	9307      	str	r3, [sp, #28]
 80092ce:	f8da 3000 	ldr.w	r3, [sl]
 80092d2:	3302      	adds	r3, #2
 80092d4:	461f      	mov	r7, r3
 80092d6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80092da:	2830      	cmp	r0, #48	; 0x30
 80092dc:	d06c      	beq.n	80093b8 <__gethex+0x118>
 80092de:	f7ff ffca 	bl	8009276 <__hexdig_fun>
 80092e2:	4604      	mov	r4, r0
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d16a      	bne.n	80093be <__gethex+0x11e>
 80092e8:	9a01      	ldr	r2, [sp, #4]
 80092ea:	9903      	ldr	r1, [sp, #12]
 80092ec:	4638      	mov	r0, r7
 80092ee:	f001 fa78 	bl	800a7e2 <strncmp>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d166      	bne.n	80093c4 <__gethex+0x124>
 80092f6:	9b01      	ldr	r3, [sp, #4]
 80092f8:	5cf8      	ldrb	r0, [r7, r3]
 80092fa:	18fe      	adds	r6, r7, r3
 80092fc:	f7ff ffbb 	bl	8009276 <__hexdig_fun>
 8009300:	2800      	cmp	r0, #0
 8009302:	d062      	beq.n	80093ca <__gethex+0x12a>
 8009304:	4633      	mov	r3, r6
 8009306:	7818      	ldrb	r0, [r3, #0]
 8009308:	461f      	mov	r7, r3
 800930a:	2830      	cmp	r0, #48	; 0x30
 800930c:	f103 0301 	add.w	r3, r3, #1
 8009310:	d0f9      	beq.n	8009306 <__gethex+0x66>
 8009312:	f7ff ffb0 	bl	8009276 <__hexdig_fun>
 8009316:	fab0 f580 	clz	r5, r0
 800931a:	4634      	mov	r4, r6
 800931c:	f04f 0b01 	mov.w	fp, #1
 8009320:	096d      	lsrs	r5, r5, #5
 8009322:	463a      	mov	r2, r7
 8009324:	4616      	mov	r6, r2
 8009326:	7830      	ldrb	r0, [r6, #0]
 8009328:	3201      	adds	r2, #1
 800932a:	f7ff ffa4 	bl	8009276 <__hexdig_fun>
 800932e:	2800      	cmp	r0, #0
 8009330:	d1f8      	bne.n	8009324 <__gethex+0x84>
 8009332:	9a01      	ldr	r2, [sp, #4]
 8009334:	9903      	ldr	r1, [sp, #12]
 8009336:	4630      	mov	r0, r6
 8009338:	f001 fa53 	bl	800a7e2 <strncmp>
 800933c:	b950      	cbnz	r0, 8009354 <__gethex+0xb4>
 800933e:	b954      	cbnz	r4, 8009356 <__gethex+0xb6>
 8009340:	9b01      	ldr	r3, [sp, #4]
 8009342:	18f4      	adds	r4, r6, r3
 8009344:	4622      	mov	r2, r4
 8009346:	4616      	mov	r6, r2
 8009348:	7830      	ldrb	r0, [r6, #0]
 800934a:	3201      	adds	r2, #1
 800934c:	f7ff ff93 	bl	8009276 <__hexdig_fun>
 8009350:	2800      	cmp	r0, #0
 8009352:	d1f8      	bne.n	8009346 <__gethex+0xa6>
 8009354:	b10c      	cbz	r4, 800935a <__gethex+0xba>
 8009356:	1ba4      	subs	r4, r4, r6
 8009358:	00a4      	lsls	r4, r4, #2
 800935a:	7833      	ldrb	r3, [r6, #0]
 800935c:	2b50      	cmp	r3, #80	; 0x50
 800935e:	d001      	beq.n	8009364 <__gethex+0xc4>
 8009360:	2b70      	cmp	r3, #112	; 0x70
 8009362:	d140      	bne.n	80093e6 <__gethex+0x146>
 8009364:	7873      	ldrb	r3, [r6, #1]
 8009366:	2b2b      	cmp	r3, #43	; 0x2b
 8009368:	d031      	beq.n	80093ce <__gethex+0x12e>
 800936a:	2b2d      	cmp	r3, #45	; 0x2d
 800936c:	d033      	beq.n	80093d6 <__gethex+0x136>
 800936e:	f04f 0900 	mov.w	r9, #0
 8009372:	1c71      	adds	r1, r6, #1
 8009374:	7808      	ldrb	r0, [r1, #0]
 8009376:	f7ff ff7e 	bl	8009276 <__hexdig_fun>
 800937a:	1e43      	subs	r3, r0, #1
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b18      	cmp	r3, #24
 8009380:	d831      	bhi.n	80093e6 <__gethex+0x146>
 8009382:	f1a0 0210 	sub.w	r2, r0, #16
 8009386:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800938a:	f7ff ff74 	bl	8009276 <__hexdig_fun>
 800938e:	1e43      	subs	r3, r0, #1
 8009390:	b2db      	uxtb	r3, r3
 8009392:	2b18      	cmp	r3, #24
 8009394:	d922      	bls.n	80093dc <__gethex+0x13c>
 8009396:	f1b9 0f00 	cmp.w	r9, #0
 800939a:	d000      	beq.n	800939e <__gethex+0xfe>
 800939c:	4252      	negs	r2, r2
 800939e:	4414      	add	r4, r2
 80093a0:	f8ca 1000 	str.w	r1, [sl]
 80093a4:	b30d      	cbz	r5, 80093ea <__gethex+0x14a>
 80093a6:	f1bb 0f00 	cmp.w	fp, #0
 80093aa:	bf0c      	ite	eq
 80093ac:	2706      	moveq	r7, #6
 80093ae:	2700      	movne	r7, #0
 80093b0:	4638      	mov	r0, r7
 80093b2:	b00b      	add	sp, #44	; 0x2c
 80093b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b8:	f10b 0b01 	add.w	fp, fp, #1
 80093bc:	e78a      	b.n	80092d4 <__gethex+0x34>
 80093be:	2500      	movs	r5, #0
 80093c0:	462c      	mov	r4, r5
 80093c2:	e7ae      	b.n	8009322 <__gethex+0x82>
 80093c4:	463e      	mov	r6, r7
 80093c6:	2501      	movs	r5, #1
 80093c8:	e7c7      	b.n	800935a <__gethex+0xba>
 80093ca:	4604      	mov	r4, r0
 80093cc:	e7fb      	b.n	80093c6 <__gethex+0x126>
 80093ce:	f04f 0900 	mov.w	r9, #0
 80093d2:	1cb1      	adds	r1, r6, #2
 80093d4:	e7ce      	b.n	8009374 <__gethex+0xd4>
 80093d6:	f04f 0901 	mov.w	r9, #1
 80093da:	e7fa      	b.n	80093d2 <__gethex+0x132>
 80093dc:	230a      	movs	r3, #10
 80093de:	fb03 0202 	mla	r2, r3, r2, r0
 80093e2:	3a10      	subs	r2, #16
 80093e4:	e7cf      	b.n	8009386 <__gethex+0xe6>
 80093e6:	4631      	mov	r1, r6
 80093e8:	e7da      	b.n	80093a0 <__gethex+0x100>
 80093ea:	4629      	mov	r1, r5
 80093ec:	1bf3      	subs	r3, r6, r7
 80093ee:	3b01      	subs	r3, #1
 80093f0:	2b07      	cmp	r3, #7
 80093f2:	dc49      	bgt.n	8009488 <__gethex+0x1e8>
 80093f4:	9802      	ldr	r0, [sp, #8]
 80093f6:	f000 fa51 	bl	800989c <_Balloc>
 80093fa:	f04f 0b00 	mov.w	fp, #0
 80093fe:	4605      	mov	r5, r0
 8009400:	46da      	mov	sl, fp
 8009402:	9b01      	ldr	r3, [sp, #4]
 8009404:	f100 0914 	add.w	r9, r0, #20
 8009408:	f1c3 0301 	rsb	r3, r3, #1
 800940c:	f8cd 9010 	str.w	r9, [sp, #16]
 8009410:	9308      	str	r3, [sp, #32]
 8009412:	42b7      	cmp	r7, r6
 8009414:	d33b      	bcc.n	800948e <__gethex+0x1ee>
 8009416:	9804      	ldr	r0, [sp, #16]
 8009418:	f840 ab04 	str.w	sl, [r0], #4
 800941c:	eba0 0009 	sub.w	r0, r0, r9
 8009420:	1080      	asrs	r0, r0, #2
 8009422:	6128      	str	r0, [r5, #16]
 8009424:	0147      	lsls	r7, r0, #5
 8009426:	4650      	mov	r0, sl
 8009428:	f000 fafc 	bl	8009a24 <__hi0bits>
 800942c:	f8d8 6000 	ldr.w	r6, [r8]
 8009430:	1a3f      	subs	r7, r7, r0
 8009432:	42b7      	cmp	r7, r6
 8009434:	dd64      	ble.n	8009500 <__gethex+0x260>
 8009436:	1bbf      	subs	r7, r7, r6
 8009438:	4639      	mov	r1, r7
 800943a:	4628      	mov	r0, r5
 800943c:	f000 fe05 	bl	800a04a <__any_on>
 8009440:	4682      	mov	sl, r0
 8009442:	b178      	cbz	r0, 8009464 <__gethex+0x1c4>
 8009444:	f04f 0a01 	mov.w	sl, #1
 8009448:	1e7b      	subs	r3, r7, #1
 800944a:	1159      	asrs	r1, r3, #5
 800944c:	f003 021f 	and.w	r2, r3, #31
 8009450:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009454:	fa0a f202 	lsl.w	r2, sl, r2
 8009458:	420a      	tst	r2, r1
 800945a:	d003      	beq.n	8009464 <__gethex+0x1c4>
 800945c:	4553      	cmp	r3, sl
 800945e:	dc46      	bgt.n	80094ee <__gethex+0x24e>
 8009460:	f04f 0a02 	mov.w	sl, #2
 8009464:	4639      	mov	r1, r7
 8009466:	4628      	mov	r0, r5
 8009468:	f7ff feca 	bl	8009200 <rshift>
 800946c:	443c      	add	r4, r7
 800946e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009472:	42a3      	cmp	r3, r4
 8009474:	da52      	bge.n	800951c <__gethex+0x27c>
 8009476:	4629      	mov	r1, r5
 8009478:	9802      	ldr	r0, [sp, #8]
 800947a:	f000 fa43 	bl	8009904 <_Bfree>
 800947e:	2300      	movs	r3, #0
 8009480:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009482:	27a3      	movs	r7, #163	; 0xa3
 8009484:	6013      	str	r3, [r2, #0]
 8009486:	e793      	b.n	80093b0 <__gethex+0x110>
 8009488:	3101      	adds	r1, #1
 800948a:	105b      	asrs	r3, r3, #1
 800948c:	e7b0      	b.n	80093f0 <__gethex+0x150>
 800948e:	1e73      	subs	r3, r6, #1
 8009490:	9305      	str	r3, [sp, #20]
 8009492:	9a07      	ldr	r2, [sp, #28]
 8009494:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009498:	4293      	cmp	r3, r2
 800949a:	d018      	beq.n	80094ce <__gethex+0x22e>
 800949c:	f1bb 0f20 	cmp.w	fp, #32
 80094a0:	d107      	bne.n	80094b2 <__gethex+0x212>
 80094a2:	9b04      	ldr	r3, [sp, #16]
 80094a4:	f8c3 a000 	str.w	sl, [r3]
 80094a8:	f04f 0a00 	mov.w	sl, #0
 80094ac:	46d3      	mov	fp, sl
 80094ae:	3304      	adds	r3, #4
 80094b0:	9304      	str	r3, [sp, #16]
 80094b2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80094b6:	f7ff fede 	bl	8009276 <__hexdig_fun>
 80094ba:	f000 000f 	and.w	r0, r0, #15
 80094be:	fa00 f00b 	lsl.w	r0, r0, fp
 80094c2:	ea4a 0a00 	orr.w	sl, sl, r0
 80094c6:	f10b 0b04 	add.w	fp, fp, #4
 80094ca:	9b05      	ldr	r3, [sp, #20]
 80094cc:	e00d      	b.n	80094ea <__gethex+0x24a>
 80094ce:	9b05      	ldr	r3, [sp, #20]
 80094d0:	9a08      	ldr	r2, [sp, #32]
 80094d2:	4413      	add	r3, r2
 80094d4:	42bb      	cmp	r3, r7
 80094d6:	d3e1      	bcc.n	800949c <__gethex+0x1fc>
 80094d8:	4618      	mov	r0, r3
 80094da:	9a01      	ldr	r2, [sp, #4]
 80094dc:	9903      	ldr	r1, [sp, #12]
 80094de:	9309      	str	r3, [sp, #36]	; 0x24
 80094e0:	f001 f97f 	bl	800a7e2 <strncmp>
 80094e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094e6:	2800      	cmp	r0, #0
 80094e8:	d1d8      	bne.n	800949c <__gethex+0x1fc>
 80094ea:	461e      	mov	r6, r3
 80094ec:	e791      	b.n	8009412 <__gethex+0x172>
 80094ee:	1eb9      	subs	r1, r7, #2
 80094f0:	4628      	mov	r0, r5
 80094f2:	f000 fdaa 	bl	800a04a <__any_on>
 80094f6:	2800      	cmp	r0, #0
 80094f8:	d0b2      	beq.n	8009460 <__gethex+0x1c0>
 80094fa:	f04f 0a03 	mov.w	sl, #3
 80094fe:	e7b1      	b.n	8009464 <__gethex+0x1c4>
 8009500:	da09      	bge.n	8009516 <__gethex+0x276>
 8009502:	1bf7      	subs	r7, r6, r7
 8009504:	4629      	mov	r1, r5
 8009506:	463a      	mov	r2, r7
 8009508:	9802      	ldr	r0, [sp, #8]
 800950a:	f000 fbc5 	bl	8009c98 <__lshift>
 800950e:	4605      	mov	r5, r0
 8009510:	1be4      	subs	r4, r4, r7
 8009512:	f100 0914 	add.w	r9, r0, #20
 8009516:	f04f 0a00 	mov.w	sl, #0
 800951a:	e7a8      	b.n	800946e <__gethex+0x1ce>
 800951c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009520:	42a0      	cmp	r0, r4
 8009522:	dd6b      	ble.n	80095fc <__gethex+0x35c>
 8009524:	1b04      	subs	r4, r0, r4
 8009526:	42a6      	cmp	r6, r4
 8009528:	dc2e      	bgt.n	8009588 <__gethex+0x2e8>
 800952a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800952e:	2b02      	cmp	r3, #2
 8009530:	d022      	beq.n	8009578 <__gethex+0x2d8>
 8009532:	2b03      	cmp	r3, #3
 8009534:	d024      	beq.n	8009580 <__gethex+0x2e0>
 8009536:	2b01      	cmp	r3, #1
 8009538:	d115      	bne.n	8009566 <__gethex+0x2c6>
 800953a:	42a6      	cmp	r6, r4
 800953c:	d113      	bne.n	8009566 <__gethex+0x2c6>
 800953e:	2e01      	cmp	r6, #1
 8009540:	dc0b      	bgt.n	800955a <__gethex+0x2ba>
 8009542:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009546:	9a06      	ldr	r2, [sp, #24]
 8009548:	2762      	movs	r7, #98	; 0x62
 800954a:	6013      	str	r3, [r2, #0]
 800954c:	2301      	movs	r3, #1
 800954e:	612b      	str	r3, [r5, #16]
 8009550:	f8c9 3000 	str.w	r3, [r9]
 8009554:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009556:	601d      	str	r5, [r3, #0]
 8009558:	e72a      	b.n	80093b0 <__gethex+0x110>
 800955a:	1e71      	subs	r1, r6, #1
 800955c:	4628      	mov	r0, r5
 800955e:	f000 fd74 	bl	800a04a <__any_on>
 8009562:	2800      	cmp	r0, #0
 8009564:	d1ed      	bne.n	8009542 <__gethex+0x2a2>
 8009566:	4629      	mov	r1, r5
 8009568:	9802      	ldr	r0, [sp, #8]
 800956a:	f000 f9cb 	bl	8009904 <_Bfree>
 800956e:	2300      	movs	r3, #0
 8009570:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009572:	2750      	movs	r7, #80	; 0x50
 8009574:	6013      	str	r3, [r2, #0]
 8009576:	e71b      	b.n	80093b0 <__gethex+0x110>
 8009578:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800957a:	2b00      	cmp	r3, #0
 800957c:	d0e1      	beq.n	8009542 <__gethex+0x2a2>
 800957e:	e7f2      	b.n	8009566 <__gethex+0x2c6>
 8009580:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1dd      	bne.n	8009542 <__gethex+0x2a2>
 8009586:	e7ee      	b.n	8009566 <__gethex+0x2c6>
 8009588:	1e67      	subs	r7, r4, #1
 800958a:	f1ba 0f00 	cmp.w	sl, #0
 800958e:	d132      	bne.n	80095f6 <__gethex+0x356>
 8009590:	b127      	cbz	r7, 800959c <__gethex+0x2fc>
 8009592:	4639      	mov	r1, r7
 8009594:	4628      	mov	r0, r5
 8009596:	f000 fd58 	bl	800a04a <__any_on>
 800959a:	4682      	mov	sl, r0
 800959c:	2301      	movs	r3, #1
 800959e:	117a      	asrs	r2, r7, #5
 80095a0:	f007 071f 	and.w	r7, r7, #31
 80095a4:	fa03 f707 	lsl.w	r7, r3, r7
 80095a8:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80095ac:	4621      	mov	r1, r4
 80095ae:	421f      	tst	r7, r3
 80095b0:	f04f 0702 	mov.w	r7, #2
 80095b4:	4628      	mov	r0, r5
 80095b6:	bf18      	it	ne
 80095b8:	f04a 0a02 	orrne.w	sl, sl, #2
 80095bc:	1b36      	subs	r6, r6, r4
 80095be:	f7ff fe1f 	bl	8009200 <rshift>
 80095c2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80095c6:	f1ba 0f00 	cmp.w	sl, #0
 80095ca:	d048      	beq.n	800965e <__gethex+0x3be>
 80095cc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d015      	beq.n	8009600 <__gethex+0x360>
 80095d4:	2b03      	cmp	r3, #3
 80095d6:	d017      	beq.n	8009608 <__gethex+0x368>
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d109      	bne.n	80095f0 <__gethex+0x350>
 80095dc:	f01a 0f02 	tst.w	sl, #2
 80095e0:	d006      	beq.n	80095f0 <__gethex+0x350>
 80095e2:	f8d9 3000 	ldr.w	r3, [r9]
 80095e6:	ea4a 0a03 	orr.w	sl, sl, r3
 80095ea:	f01a 0f01 	tst.w	sl, #1
 80095ee:	d10e      	bne.n	800960e <__gethex+0x36e>
 80095f0:	f047 0710 	orr.w	r7, r7, #16
 80095f4:	e033      	b.n	800965e <__gethex+0x3be>
 80095f6:	f04f 0a01 	mov.w	sl, #1
 80095fa:	e7cf      	b.n	800959c <__gethex+0x2fc>
 80095fc:	2701      	movs	r7, #1
 80095fe:	e7e2      	b.n	80095c6 <__gethex+0x326>
 8009600:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009602:	f1c3 0301 	rsb	r3, r3, #1
 8009606:	9315      	str	r3, [sp, #84]	; 0x54
 8009608:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800960a:	2b00      	cmp	r3, #0
 800960c:	d0f0      	beq.n	80095f0 <__gethex+0x350>
 800960e:	f04f 0c00 	mov.w	ip, #0
 8009612:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009616:	f105 0314 	add.w	r3, r5, #20
 800961a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800961e:	eb03 010a 	add.w	r1, r3, sl
 8009622:	4618      	mov	r0, r3
 8009624:	f853 2b04 	ldr.w	r2, [r3], #4
 8009628:	f1b2 3fff 	cmp.w	r2, #4294967295
 800962c:	d01c      	beq.n	8009668 <__gethex+0x3c8>
 800962e:	3201      	adds	r2, #1
 8009630:	6002      	str	r2, [r0, #0]
 8009632:	2f02      	cmp	r7, #2
 8009634:	f105 0314 	add.w	r3, r5, #20
 8009638:	d138      	bne.n	80096ac <__gethex+0x40c>
 800963a:	f8d8 2000 	ldr.w	r2, [r8]
 800963e:	3a01      	subs	r2, #1
 8009640:	42b2      	cmp	r2, r6
 8009642:	d10a      	bne.n	800965a <__gethex+0x3ba>
 8009644:	2201      	movs	r2, #1
 8009646:	1171      	asrs	r1, r6, #5
 8009648:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800964c:	f006 061f 	and.w	r6, r6, #31
 8009650:	fa02 f606 	lsl.w	r6, r2, r6
 8009654:	421e      	tst	r6, r3
 8009656:	bf18      	it	ne
 8009658:	4617      	movne	r7, r2
 800965a:	f047 0720 	orr.w	r7, r7, #32
 800965e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009660:	601d      	str	r5, [r3, #0]
 8009662:	9b06      	ldr	r3, [sp, #24]
 8009664:	601c      	str	r4, [r3, #0]
 8009666:	e6a3      	b.n	80093b0 <__gethex+0x110>
 8009668:	4299      	cmp	r1, r3
 800966a:	f843 cc04 	str.w	ip, [r3, #-4]
 800966e:	d8d8      	bhi.n	8009622 <__gethex+0x382>
 8009670:	68ab      	ldr	r3, [r5, #8]
 8009672:	4599      	cmp	r9, r3
 8009674:	db12      	blt.n	800969c <__gethex+0x3fc>
 8009676:	6869      	ldr	r1, [r5, #4]
 8009678:	9802      	ldr	r0, [sp, #8]
 800967a:	3101      	adds	r1, #1
 800967c:	f000 f90e 	bl	800989c <_Balloc>
 8009680:	4683      	mov	fp, r0
 8009682:	692a      	ldr	r2, [r5, #16]
 8009684:	f105 010c 	add.w	r1, r5, #12
 8009688:	3202      	adds	r2, #2
 800968a:	0092      	lsls	r2, r2, #2
 800968c:	300c      	adds	r0, #12
 800968e:	f7fe fe38 	bl	8008302 <memcpy>
 8009692:	4629      	mov	r1, r5
 8009694:	9802      	ldr	r0, [sp, #8]
 8009696:	f000 f935 	bl	8009904 <_Bfree>
 800969a:	465d      	mov	r5, fp
 800969c:	692b      	ldr	r3, [r5, #16]
 800969e:	1c5a      	adds	r2, r3, #1
 80096a0:	612a      	str	r2, [r5, #16]
 80096a2:	2201      	movs	r2, #1
 80096a4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80096a8:	615a      	str	r2, [r3, #20]
 80096aa:	e7c2      	b.n	8009632 <__gethex+0x392>
 80096ac:	692a      	ldr	r2, [r5, #16]
 80096ae:	454a      	cmp	r2, r9
 80096b0:	dd0b      	ble.n	80096ca <__gethex+0x42a>
 80096b2:	2101      	movs	r1, #1
 80096b4:	4628      	mov	r0, r5
 80096b6:	f7ff fda3 	bl	8009200 <rshift>
 80096ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80096be:	3401      	adds	r4, #1
 80096c0:	42a3      	cmp	r3, r4
 80096c2:	f6ff aed8 	blt.w	8009476 <__gethex+0x1d6>
 80096c6:	2701      	movs	r7, #1
 80096c8:	e7c7      	b.n	800965a <__gethex+0x3ba>
 80096ca:	f016 061f 	ands.w	r6, r6, #31
 80096ce:	d0fa      	beq.n	80096c6 <__gethex+0x426>
 80096d0:	449a      	add	sl, r3
 80096d2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80096d6:	f000 f9a5 	bl	8009a24 <__hi0bits>
 80096da:	f1c6 0620 	rsb	r6, r6, #32
 80096de:	42b0      	cmp	r0, r6
 80096e0:	dbe7      	blt.n	80096b2 <__gethex+0x412>
 80096e2:	e7f0      	b.n	80096c6 <__gethex+0x426>

080096e4 <L_shift>:
 80096e4:	f1c2 0208 	rsb	r2, r2, #8
 80096e8:	0092      	lsls	r2, r2, #2
 80096ea:	b570      	push	{r4, r5, r6, lr}
 80096ec:	f1c2 0620 	rsb	r6, r2, #32
 80096f0:	6843      	ldr	r3, [r0, #4]
 80096f2:	6804      	ldr	r4, [r0, #0]
 80096f4:	fa03 f506 	lsl.w	r5, r3, r6
 80096f8:	432c      	orrs	r4, r5
 80096fa:	40d3      	lsrs	r3, r2
 80096fc:	6004      	str	r4, [r0, #0]
 80096fe:	f840 3f04 	str.w	r3, [r0, #4]!
 8009702:	4288      	cmp	r0, r1
 8009704:	d3f4      	bcc.n	80096f0 <L_shift+0xc>
 8009706:	bd70      	pop	{r4, r5, r6, pc}

08009708 <__match>:
 8009708:	b530      	push	{r4, r5, lr}
 800970a:	6803      	ldr	r3, [r0, #0]
 800970c:	3301      	adds	r3, #1
 800970e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009712:	b914      	cbnz	r4, 800971a <__match+0x12>
 8009714:	6003      	str	r3, [r0, #0]
 8009716:	2001      	movs	r0, #1
 8009718:	bd30      	pop	{r4, r5, pc}
 800971a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800971e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009722:	2d19      	cmp	r5, #25
 8009724:	bf98      	it	ls
 8009726:	3220      	addls	r2, #32
 8009728:	42a2      	cmp	r2, r4
 800972a:	d0f0      	beq.n	800970e <__match+0x6>
 800972c:	2000      	movs	r0, #0
 800972e:	e7f3      	b.n	8009718 <__match+0x10>

08009730 <__hexnan>:
 8009730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009734:	2500      	movs	r5, #0
 8009736:	680b      	ldr	r3, [r1, #0]
 8009738:	4682      	mov	sl, r0
 800973a:	115f      	asrs	r7, r3, #5
 800973c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009740:	f013 031f 	ands.w	r3, r3, #31
 8009744:	bf18      	it	ne
 8009746:	3704      	addne	r7, #4
 8009748:	1f3e      	subs	r6, r7, #4
 800974a:	4690      	mov	r8, r2
 800974c:	46b1      	mov	r9, r6
 800974e:	4634      	mov	r4, r6
 8009750:	46ab      	mov	fp, r5
 8009752:	b087      	sub	sp, #28
 8009754:	6801      	ldr	r1, [r0, #0]
 8009756:	9301      	str	r3, [sp, #4]
 8009758:	f847 5c04 	str.w	r5, [r7, #-4]
 800975c:	9502      	str	r5, [sp, #8]
 800975e:	784a      	ldrb	r2, [r1, #1]
 8009760:	1c4b      	adds	r3, r1, #1
 8009762:	9303      	str	r3, [sp, #12]
 8009764:	b342      	cbz	r2, 80097b8 <__hexnan+0x88>
 8009766:	4610      	mov	r0, r2
 8009768:	9105      	str	r1, [sp, #20]
 800976a:	9204      	str	r2, [sp, #16]
 800976c:	f7ff fd83 	bl	8009276 <__hexdig_fun>
 8009770:	2800      	cmp	r0, #0
 8009772:	d143      	bne.n	80097fc <__hexnan+0xcc>
 8009774:	9a04      	ldr	r2, [sp, #16]
 8009776:	9905      	ldr	r1, [sp, #20]
 8009778:	2a20      	cmp	r2, #32
 800977a:	d818      	bhi.n	80097ae <__hexnan+0x7e>
 800977c:	9b02      	ldr	r3, [sp, #8]
 800977e:	459b      	cmp	fp, r3
 8009780:	dd13      	ble.n	80097aa <__hexnan+0x7a>
 8009782:	454c      	cmp	r4, r9
 8009784:	d206      	bcs.n	8009794 <__hexnan+0x64>
 8009786:	2d07      	cmp	r5, #7
 8009788:	dc04      	bgt.n	8009794 <__hexnan+0x64>
 800978a:	462a      	mov	r2, r5
 800978c:	4649      	mov	r1, r9
 800978e:	4620      	mov	r0, r4
 8009790:	f7ff ffa8 	bl	80096e4 <L_shift>
 8009794:	4544      	cmp	r4, r8
 8009796:	d944      	bls.n	8009822 <__hexnan+0xf2>
 8009798:	2300      	movs	r3, #0
 800979a:	f1a4 0904 	sub.w	r9, r4, #4
 800979e:	f844 3c04 	str.w	r3, [r4, #-4]
 80097a2:	461d      	mov	r5, r3
 80097a4:	464c      	mov	r4, r9
 80097a6:	f8cd b008 	str.w	fp, [sp, #8]
 80097aa:	9903      	ldr	r1, [sp, #12]
 80097ac:	e7d7      	b.n	800975e <__hexnan+0x2e>
 80097ae:	2a29      	cmp	r2, #41	; 0x29
 80097b0:	d14a      	bne.n	8009848 <__hexnan+0x118>
 80097b2:	3102      	adds	r1, #2
 80097b4:	f8ca 1000 	str.w	r1, [sl]
 80097b8:	f1bb 0f00 	cmp.w	fp, #0
 80097bc:	d044      	beq.n	8009848 <__hexnan+0x118>
 80097be:	454c      	cmp	r4, r9
 80097c0:	d206      	bcs.n	80097d0 <__hexnan+0xa0>
 80097c2:	2d07      	cmp	r5, #7
 80097c4:	dc04      	bgt.n	80097d0 <__hexnan+0xa0>
 80097c6:	462a      	mov	r2, r5
 80097c8:	4649      	mov	r1, r9
 80097ca:	4620      	mov	r0, r4
 80097cc:	f7ff ff8a 	bl	80096e4 <L_shift>
 80097d0:	4544      	cmp	r4, r8
 80097d2:	d928      	bls.n	8009826 <__hexnan+0xf6>
 80097d4:	4643      	mov	r3, r8
 80097d6:	f854 2b04 	ldr.w	r2, [r4], #4
 80097da:	42a6      	cmp	r6, r4
 80097dc:	f843 2b04 	str.w	r2, [r3], #4
 80097e0:	d2f9      	bcs.n	80097d6 <__hexnan+0xa6>
 80097e2:	2200      	movs	r2, #0
 80097e4:	f843 2b04 	str.w	r2, [r3], #4
 80097e8:	429e      	cmp	r6, r3
 80097ea:	d2fb      	bcs.n	80097e4 <__hexnan+0xb4>
 80097ec:	6833      	ldr	r3, [r6, #0]
 80097ee:	b91b      	cbnz	r3, 80097f8 <__hexnan+0xc8>
 80097f0:	4546      	cmp	r6, r8
 80097f2:	d127      	bne.n	8009844 <__hexnan+0x114>
 80097f4:	2301      	movs	r3, #1
 80097f6:	6033      	str	r3, [r6, #0]
 80097f8:	2005      	movs	r0, #5
 80097fa:	e026      	b.n	800984a <__hexnan+0x11a>
 80097fc:	3501      	adds	r5, #1
 80097fe:	2d08      	cmp	r5, #8
 8009800:	f10b 0b01 	add.w	fp, fp, #1
 8009804:	dd06      	ble.n	8009814 <__hexnan+0xe4>
 8009806:	4544      	cmp	r4, r8
 8009808:	d9cf      	bls.n	80097aa <__hexnan+0x7a>
 800980a:	2300      	movs	r3, #0
 800980c:	2501      	movs	r5, #1
 800980e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009812:	3c04      	subs	r4, #4
 8009814:	6822      	ldr	r2, [r4, #0]
 8009816:	f000 000f 	and.w	r0, r0, #15
 800981a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800981e:	6020      	str	r0, [r4, #0]
 8009820:	e7c3      	b.n	80097aa <__hexnan+0x7a>
 8009822:	2508      	movs	r5, #8
 8009824:	e7c1      	b.n	80097aa <__hexnan+0x7a>
 8009826:	9b01      	ldr	r3, [sp, #4]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d0df      	beq.n	80097ec <__hexnan+0xbc>
 800982c:	f04f 32ff 	mov.w	r2, #4294967295
 8009830:	f1c3 0320 	rsb	r3, r3, #32
 8009834:	fa22 f303 	lsr.w	r3, r2, r3
 8009838:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800983c:	401a      	ands	r2, r3
 800983e:	f847 2c04 	str.w	r2, [r7, #-4]
 8009842:	e7d3      	b.n	80097ec <__hexnan+0xbc>
 8009844:	3e04      	subs	r6, #4
 8009846:	e7d1      	b.n	80097ec <__hexnan+0xbc>
 8009848:	2004      	movs	r0, #4
 800984a:	b007      	add	sp, #28
 800984c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009850 <__locale_ctype_ptr_l>:
 8009850:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009854:	4770      	bx	lr
	...

08009858 <__locale_ctype_ptr>:
 8009858:	4b04      	ldr	r3, [pc, #16]	; (800986c <__locale_ctype_ptr+0x14>)
 800985a:	4a05      	ldr	r2, [pc, #20]	; (8009870 <__locale_ctype_ptr+0x18>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	6a1b      	ldr	r3, [r3, #32]
 8009860:	2b00      	cmp	r3, #0
 8009862:	bf08      	it	eq
 8009864:	4613      	moveq	r3, r2
 8009866:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800986a:	4770      	bx	lr
 800986c:	200001b4 	.word	0x200001b4
 8009870:	20000218 	.word	0x20000218

08009874 <__localeconv_l>:
 8009874:	30f0      	adds	r0, #240	; 0xf0
 8009876:	4770      	bx	lr

08009878 <__ascii_mbtowc>:
 8009878:	b082      	sub	sp, #8
 800987a:	b901      	cbnz	r1, 800987e <__ascii_mbtowc+0x6>
 800987c:	a901      	add	r1, sp, #4
 800987e:	b142      	cbz	r2, 8009892 <__ascii_mbtowc+0x1a>
 8009880:	b14b      	cbz	r3, 8009896 <__ascii_mbtowc+0x1e>
 8009882:	7813      	ldrb	r3, [r2, #0]
 8009884:	600b      	str	r3, [r1, #0]
 8009886:	7812      	ldrb	r2, [r2, #0]
 8009888:	1c10      	adds	r0, r2, #0
 800988a:	bf18      	it	ne
 800988c:	2001      	movne	r0, #1
 800988e:	b002      	add	sp, #8
 8009890:	4770      	bx	lr
 8009892:	4610      	mov	r0, r2
 8009894:	e7fb      	b.n	800988e <__ascii_mbtowc+0x16>
 8009896:	f06f 0001 	mvn.w	r0, #1
 800989a:	e7f8      	b.n	800988e <__ascii_mbtowc+0x16>

0800989c <_Balloc>:
 800989c:	b570      	push	{r4, r5, r6, lr}
 800989e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80098a0:	4604      	mov	r4, r0
 80098a2:	460e      	mov	r6, r1
 80098a4:	b93d      	cbnz	r5, 80098b6 <_Balloc+0x1a>
 80098a6:	2010      	movs	r0, #16
 80098a8:	f001 f880 	bl	800a9ac <malloc>
 80098ac:	6260      	str	r0, [r4, #36]	; 0x24
 80098ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80098b2:	6005      	str	r5, [r0, #0]
 80098b4:	60c5      	str	r5, [r0, #12]
 80098b6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80098b8:	68eb      	ldr	r3, [r5, #12]
 80098ba:	b183      	cbz	r3, 80098de <_Balloc+0x42>
 80098bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80098c4:	b9b8      	cbnz	r0, 80098f6 <_Balloc+0x5a>
 80098c6:	2101      	movs	r1, #1
 80098c8:	fa01 f506 	lsl.w	r5, r1, r6
 80098cc:	1d6a      	adds	r2, r5, #5
 80098ce:	0092      	lsls	r2, r2, #2
 80098d0:	4620      	mov	r0, r4
 80098d2:	f000 fbdb 	bl	800a08c <_calloc_r>
 80098d6:	b160      	cbz	r0, 80098f2 <_Balloc+0x56>
 80098d8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80098dc:	e00e      	b.n	80098fc <_Balloc+0x60>
 80098de:	2221      	movs	r2, #33	; 0x21
 80098e0:	2104      	movs	r1, #4
 80098e2:	4620      	mov	r0, r4
 80098e4:	f000 fbd2 	bl	800a08c <_calloc_r>
 80098e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098ea:	60e8      	str	r0, [r5, #12]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1e4      	bne.n	80098bc <_Balloc+0x20>
 80098f2:	2000      	movs	r0, #0
 80098f4:	bd70      	pop	{r4, r5, r6, pc}
 80098f6:	6802      	ldr	r2, [r0, #0]
 80098f8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80098fc:	2300      	movs	r3, #0
 80098fe:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009902:	e7f7      	b.n	80098f4 <_Balloc+0x58>

08009904 <_Bfree>:
 8009904:	b570      	push	{r4, r5, r6, lr}
 8009906:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009908:	4606      	mov	r6, r0
 800990a:	460d      	mov	r5, r1
 800990c:	b93c      	cbnz	r4, 800991e <_Bfree+0x1a>
 800990e:	2010      	movs	r0, #16
 8009910:	f001 f84c 	bl	800a9ac <malloc>
 8009914:	6270      	str	r0, [r6, #36]	; 0x24
 8009916:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800991a:	6004      	str	r4, [r0, #0]
 800991c:	60c4      	str	r4, [r0, #12]
 800991e:	b13d      	cbz	r5, 8009930 <_Bfree+0x2c>
 8009920:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009922:	686a      	ldr	r2, [r5, #4]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800992a:	6029      	str	r1, [r5, #0]
 800992c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009930:	bd70      	pop	{r4, r5, r6, pc}

08009932 <__multadd>:
 8009932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009936:	461f      	mov	r7, r3
 8009938:	4606      	mov	r6, r0
 800993a:	460c      	mov	r4, r1
 800993c:	2300      	movs	r3, #0
 800993e:	690d      	ldr	r5, [r1, #16]
 8009940:	f101 0c14 	add.w	ip, r1, #20
 8009944:	f8dc 0000 	ldr.w	r0, [ip]
 8009948:	3301      	adds	r3, #1
 800994a:	b281      	uxth	r1, r0
 800994c:	fb02 7101 	mla	r1, r2, r1, r7
 8009950:	0c00      	lsrs	r0, r0, #16
 8009952:	0c0f      	lsrs	r7, r1, #16
 8009954:	fb02 7000 	mla	r0, r2, r0, r7
 8009958:	b289      	uxth	r1, r1
 800995a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800995e:	429d      	cmp	r5, r3
 8009960:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009964:	f84c 1b04 	str.w	r1, [ip], #4
 8009968:	dcec      	bgt.n	8009944 <__multadd+0x12>
 800996a:	b1d7      	cbz	r7, 80099a2 <__multadd+0x70>
 800996c:	68a3      	ldr	r3, [r4, #8]
 800996e:	42ab      	cmp	r3, r5
 8009970:	dc12      	bgt.n	8009998 <__multadd+0x66>
 8009972:	6861      	ldr	r1, [r4, #4]
 8009974:	4630      	mov	r0, r6
 8009976:	3101      	adds	r1, #1
 8009978:	f7ff ff90 	bl	800989c <_Balloc>
 800997c:	4680      	mov	r8, r0
 800997e:	6922      	ldr	r2, [r4, #16]
 8009980:	f104 010c 	add.w	r1, r4, #12
 8009984:	3202      	adds	r2, #2
 8009986:	0092      	lsls	r2, r2, #2
 8009988:	300c      	adds	r0, #12
 800998a:	f7fe fcba 	bl	8008302 <memcpy>
 800998e:	4621      	mov	r1, r4
 8009990:	4630      	mov	r0, r6
 8009992:	f7ff ffb7 	bl	8009904 <_Bfree>
 8009996:	4644      	mov	r4, r8
 8009998:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800999c:	3501      	adds	r5, #1
 800999e:	615f      	str	r7, [r3, #20]
 80099a0:	6125      	str	r5, [r4, #16]
 80099a2:	4620      	mov	r0, r4
 80099a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080099a8 <__s2b>:
 80099a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099ac:	4615      	mov	r5, r2
 80099ae:	2209      	movs	r2, #9
 80099b0:	461f      	mov	r7, r3
 80099b2:	3308      	adds	r3, #8
 80099b4:	460c      	mov	r4, r1
 80099b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80099ba:	4606      	mov	r6, r0
 80099bc:	2201      	movs	r2, #1
 80099be:	2100      	movs	r1, #0
 80099c0:	429a      	cmp	r2, r3
 80099c2:	db20      	blt.n	8009a06 <__s2b+0x5e>
 80099c4:	4630      	mov	r0, r6
 80099c6:	f7ff ff69 	bl	800989c <_Balloc>
 80099ca:	9b08      	ldr	r3, [sp, #32]
 80099cc:	2d09      	cmp	r5, #9
 80099ce:	6143      	str	r3, [r0, #20]
 80099d0:	f04f 0301 	mov.w	r3, #1
 80099d4:	6103      	str	r3, [r0, #16]
 80099d6:	dd19      	ble.n	8009a0c <__s2b+0x64>
 80099d8:	f104 0809 	add.w	r8, r4, #9
 80099dc:	46c1      	mov	r9, r8
 80099de:	442c      	add	r4, r5
 80099e0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80099e4:	4601      	mov	r1, r0
 80099e6:	3b30      	subs	r3, #48	; 0x30
 80099e8:	220a      	movs	r2, #10
 80099ea:	4630      	mov	r0, r6
 80099ec:	f7ff ffa1 	bl	8009932 <__multadd>
 80099f0:	45a1      	cmp	r9, r4
 80099f2:	d1f5      	bne.n	80099e0 <__s2b+0x38>
 80099f4:	eb08 0405 	add.w	r4, r8, r5
 80099f8:	3c08      	subs	r4, #8
 80099fa:	1b2d      	subs	r5, r5, r4
 80099fc:	1963      	adds	r3, r4, r5
 80099fe:	42bb      	cmp	r3, r7
 8009a00:	db07      	blt.n	8009a12 <__s2b+0x6a>
 8009a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a06:	0052      	lsls	r2, r2, #1
 8009a08:	3101      	adds	r1, #1
 8009a0a:	e7d9      	b.n	80099c0 <__s2b+0x18>
 8009a0c:	340a      	adds	r4, #10
 8009a0e:	2509      	movs	r5, #9
 8009a10:	e7f3      	b.n	80099fa <__s2b+0x52>
 8009a12:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009a16:	4601      	mov	r1, r0
 8009a18:	3b30      	subs	r3, #48	; 0x30
 8009a1a:	220a      	movs	r2, #10
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	f7ff ff88 	bl	8009932 <__multadd>
 8009a22:	e7eb      	b.n	80099fc <__s2b+0x54>

08009a24 <__hi0bits>:
 8009a24:	0c02      	lsrs	r2, r0, #16
 8009a26:	0412      	lsls	r2, r2, #16
 8009a28:	4603      	mov	r3, r0
 8009a2a:	b9b2      	cbnz	r2, 8009a5a <__hi0bits+0x36>
 8009a2c:	0403      	lsls	r3, r0, #16
 8009a2e:	2010      	movs	r0, #16
 8009a30:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009a34:	bf04      	itt	eq
 8009a36:	021b      	lsleq	r3, r3, #8
 8009a38:	3008      	addeq	r0, #8
 8009a3a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009a3e:	bf04      	itt	eq
 8009a40:	011b      	lsleq	r3, r3, #4
 8009a42:	3004      	addeq	r0, #4
 8009a44:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009a48:	bf04      	itt	eq
 8009a4a:	009b      	lsleq	r3, r3, #2
 8009a4c:	3002      	addeq	r0, #2
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	db06      	blt.n	8009a60 <__hi0bits+0x3c>
 8009a52:	005b      	lsls	r3, r3, #1
 8009a54:	d503      	bpl.n	8009a5e <__hi0bits+0x3a>
 8009a56:	3001      	adds	r0, #1
 8009a58:	4770      	bx	lr
 8009a5a:	2000      	movs	r0, #0
 8009a5c:	e7e8      	b.n	8009a30 <__hi0bits+0xc>
 8009a5e:	2020      	movs	r0, #32
 8009a60:	4770      	bx	lr

08009a62 <__lo0bits>:
 8009a62:	6803      	ldr	r3, [r0, #0]
 8009a64:	4601      	mov	r1, r0
 8009a66:	f013 0207 	ands.w	r2, r3, #7
 8009a6a:	d00b      	beq.n	8009a84 <__lo0bits+0x22>
 8009a6c:	07da      	lsls	r2, r3, #31
 8009a6e:	d423      	bmi.n	8009ab8 <__lo0bits+0x56>
 8009a70:	0798      	lsls	r0, r3, #30
 8009a72:	bf49      	itett	mi
 8009a74:	085b      	lsrmi	r3, r3, #1
 8009a76:	089b      	lsrpl	r3, r3, #2
 8009a78:	2001      	movmi	r0, #1
 8009a7a:	600b      	strmi	r3, [r1, #0]
 8009a7c:	bf5c      	itt	pl
 8009a7e:	600b      	strpl	r3, [r1, #0]
 8009a80:	2002      	movpl	r0, #2
 8009a82:	4770      	bx	lr
 8009a84:	b298      	uxth	r0, r3
 8009a86:	b9a8      	cbnz	r0, 8009ab4 <__lo0bits+0x52>
 8009a88:	2010      	movs	r0, #16
 8009a8a:	0c1b      	lsrs	r3, r3, #16
 8009a8c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009a90:	bf04      	itt	eq
 8009a92:	0a1b      	lsreq	r3, r3, #8
 8009a94:	3008      	addeq	r0, #8
 8009a96:	071a      	lsls	r2, r3, #28
 8009a98:	bf04      	itt	eq
 8009a9a:	091b      	lsreq	r3, r3, #4
 8009a9c:	3004      	addeq	r0, #4
 8009a9e:	079a      	lsls	r2, r3, #30
 8009aa0:	bf04      	itt	eq
 8009aa2:	089b      	lsreq	r3, r3, #2
 8009aa4:	3002      	addeq	r0, #2
 8009aa6:	07da      	lsls	r2, r3, #31
 8009aa8:	d402      	bmi.n	8009ab0 <__lo0bits+0x4e>
 8009aaa:	085b      	lsrs	r3, r3, #1
 8009aac:	d006      	beq.n	8009abc <__lo0bits+0x5a>
 8009aae:	3001      	adds	r0, #1
 8009ab0:	600b      	str	r3, [r1, #0]
 8009ab2:	4770      	bx	lr
 8009ab4:	4610      	mov	r0, r2
 8009ab6:	e7e9      	b.n	8009a8c <__lo0bits+0x2a>
 8009ab8:	2000      	movs	r0, #0
 8009aba:	4770      	bx	lr
 8009abc:	2020      	movs	r0, #32
 8009abe:	4770      	bx	lr

08009ac0 <__i2b>:
 8009ac0:	b510      	push	{r4, lr}
 8009ac2:	460c      	mov	r4, r1
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	f7ff fee9 	bl	800989c <_Balloc>
 8009aca:	2201      	movs	r2, #1
 8009acc:	6144      	str	r4, [r0, #20]
 8009ace:	6102      	str	r2, [r0, #16]
 8009ad0:	bd10      	pop	{r4, pc}

08009ad2 <__multiply>:
 8009ad2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad6:	4614      	mov	r4, r2
 8009ad8:	690a      	ldr	r2, [r1, #16]
 8009ada:	6923      	ldr	r3, [r4, #16]
 8009adc:	4688      	mov	r8, r1
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	bfbe      	ittt	lt
 8009ae2:	460b      	movlt	r3, r1
 8009ae4:	46a0      	movlt	r8, r4
 8009ae6:	461c      	movlt	r4, r3
 8009ae8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009aec:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009af0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009af4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009af8:	eb07 0609 	add.w	r6, r7, r9
 8009afc:	42b3      	cmp	r3, r6
 8009afe:	bfb8      	it	lt
 8009b00:	3101      	addlt	r1, #1
 8009b02:	f7ff fecb 	bl	800989c <_Balloc>
 8009b06:	f100 0514 	add.w	r5, r0, #20
 8009b0a:	462b      	mov	r3, r5
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009b12:	4573      	cmp	r3, lr
 8009b14:	d316      	bcc.n	8009b44 <__multiply+0x72>
 8009b16:	f104 0214 	add.w	r2, r4, #20
 8009b1a:	f108 0114 	add.w	r1, r8, #20
 8009b1e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009b22:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	9b00      	ldr	r3, [sp, #0]
 8009b2a:	9201      	str	r2, [sp, #4]
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d80c      	bhi.n	8009b4a <__multiply+0x78>
 8009b30:	2e00      	cmp	r6, #0
 8009b32:	dd03      	ble.n	8009b3c <__multiply+0x6a>
 8009b34:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d05d      	beq.n	8009bf8 <__multiply+0x126>
 8009b3c:	6106      	str	r6, [r0, #16]
 8009b3e:	b003      	add	sp, #12
 8009b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b44:	f843 2b04 	str.w	r2, [r3], #4
 8009b48:	e7e3      	b.n	8009b12 <__multiply+0x40>
 8009b4a:	f8b2 b000 	ldrh.w	fp, [r2]
 8009b4e:	f1bb 0f00 	cmp.w	fp, #0
 8009b52:	d023      	beq.n	8009b9c <__multiply+0xca>
 8009b54:	4689      	mov	r9, r1
 8009b56:	46ac      	mov	ip, r5
 8009b58:	f04f 0800 	mov.w	r8, #0
 8009b5c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009b60:	f8dc a000 	ldr.w	sl, [ip]
 8009b64:	b2a3      	uxth	r3, r4
 8009b66:	fa1f fa8a 	uxth.w	sl, sl
 8009b6a:	fb0b a303 	mla	r3, fp, r3, sl
 8009b6e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009b72:	f8dc 4000 	ldr.w	r4, [ip]
 8009b76:	4443      	add	r3, r8
 8009b78:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009b7c:	fb0b 840a 	mla	r4, fp, sl, r8
 8009b80:	46e2      	mov	sl, ip
 8009b82:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009b8c:	454f      	cmp	r7, r9
 8009b8e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009b92:	f84a 3b04 	str.w	r3, [sl], #4
 8009b96:	d82b      	bhi.n	8009bf0 <__multiply+0x11e>
 8009b98:	f8cc 8004 	str.w	r8, [ip, #4]
 8009b9c:	9b01      	ldr	r3, [sp, #4]
 8009b9e:	3204      	adds	r2, #4
 8009ba0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009ba4:	f1ba 0f00 	cmp.w	sl, #0
 8009ba8:	d020      	beq.n	8009bec <__multiply+0x11a>
 8009baa:	4689      	mov	r9, r1
 8009bac:	46a8      	mov	r8, r5
 8009bae:	f04f 0b00 	mov.w	fp, #0
 8009bb2:	682b      	ldr	r3, [r5, #0]
 8009bb4:	f8b9 c000 	ldrh.w	ip, [r9]
 8009bb8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	fb0a 440c 	mla	r4, sl, ip, r4
 8009bc2:	46c4      	mov	ip, r8
 8009bc4:	445c      	add	r4, fp
 8009bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009bca:	f84c 3b04 	str.w	r3, [ip], #4
 8009bce:	f859 3b04 	ldr.w	r3, [r9], #4
 8009bd2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009bd6:	0c1b      	lsrs	r3, r3, #16
 8009bd8:	fb0a b303 	mla	r3, sl, r3, fp
 8009bdc:	454f      	cmp	r7, r9
 8009bde:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009be2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009be6:	d805      	bhi.n	8009bf4 <__multiply+0x122>
 8009be8:	f8c8 3004 	str.w	r3, [r8, #4]
 8009bec:	3504      	adds	r5, #4
 8009bee:	e79b      	b.n	8009b28 <__multiply+0x56>
 8009bf0:	46d4      	mov	ip, sl
 8009bf2:	e7b3      	b.n	8009b5c <__multiply+0x8a>
 8009bf4:	46e0      	mov	r8, ip
 8009bf6:	e7dd      	b.n	8009bb4 <__multiply+0xe2>
 8009bf8:	3e01      	subs	r6, #1
 8009bfa:	e799      	b.n	8009b30 <__multiply+0x5e>

08009bfc <__pow5mult>:
 8009bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c00:	4615      	mov	r5, r2
 8009c02:	f012 0203 	ands.w	r2, r2, #3
 8009c06:	4606      	mov	r6, r0
 8009c08:	460f      	mov	r7, r1
 8009c0a:	d007      	beq.n	8009c1c <__pow5mult+0x20>
 8009c0c:	4c21      	ldr	r4, [pc, #132]	; (8009c94 <__pow5mult+0x98>)
 8009c0e:	3a01      	subs	r2, #1
 8009c10:	2300      	movs	r3, #0
 8009c12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c16:	f7ff fe8c 	bl	8009932 <__multadd>
 8009c1a:	4607      	mov	r7, r0
 8009c1c:	10ad      	asrs	r5, r5, #2
 8009c1e:	d035      	beq.n	8009c8c <__pow5mult+0x90>
 8009c20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009c22:	b93c      	cbnz	r4, 8009c34 <__pow5mult+0x38>
 8009c24:	2010      	movs	r0, #16
 8009c26:	f000 fec1 	bl	800a9ac <malloc>
 8009c2a:	6270      	str	r0, [r6, #36]	; 0x24
 8009c2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c30:	6004      	str	r4, [r0, #0]
 8009c32:	60c4      	str	r4, [r0, #12]
 8009c34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009c38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c3c:	b94c      	cbnz	r4, 8009c52 <__pow5mult+0x56>
 8009c3e:	f240 2171 	movw	r1, #625	; 0x271
 8009c42:	4630      	mov	r0, r6
 8009c44:	f7ff ff3c 	bl	8009ac0 <__i2b>
 8009c48:	2300      	movs	r3, #0
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c50:	6003      	str	r3, [r0, #0]
 8009c52:	f04f 0800 	mov.w	r8, #0
 8009c56:	07eb      	lsls	r3, r5, #31
 8009c58:	d50a      	bpl.n	8009c70 <__pow5mult+0x74>
 8009c5a:	4639      	mov	r1, r7
 8009c5c:	4622      	mov	r2, r4
 8009c5e:	4630      	mov	r0, r6
 8009c60:	f7ff ff37 	bl	8009ad2 <__multiply>
 8009c64:	4681      	mov	r9, r0
 8009c66:	4639      	mov	r1, r7
 8009c68:	4630      	mov	r0, r6
 8009c6a:	f7ff fe4b 	bl	8009904 <_Bfree>
 8009c6e:	464f      	mov	r7, r9
 8009c70:	106d      	asrs	r5, r5, #1
 8009c72:	d00b      	beq.n	8009c8c <__pow5mult+0x90>
 8009c74:	6820      	ldr	r0, [r4, #0]
 8009c76:	b938      	cbnz	r0, 8009c88 <__pow5mult+0x8c>
 8009c78:	4622      	mov	r2, r4
 8009c7a:	4621      	mov	r1, r4
 8009c7c:	4630      	mov	r0, r6
 8009c7e:	f7ff ff28 	bl	8009ad2 <__multiply>
 8009c82:	6020      	str	r0, [r4, #0]
 8009c84:	f8c0 8000 	str.w	r8, [r0]
 8009c88:	4604      	mov	r4, r0
 8009c8a:	e7e4      	b.n	8009c56 <__pow5mult+0x5a>
 8009c8c:	4638      	mov	r0, r7
 8009c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c92:	bf00      	nop
 8009c94:	0800be90 	.word	0x0800be90

08009c98 <__lshift>:
 8009c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c9c:	460c      	mov	r4, r1
 8009c9e:	4607      	mov	r7, r0
 8009ca0:	4616      	mov	r6, r2
 8009ca2:	6923      	ldr	r3, [r4, #16]
 8009ca4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ca8:	eb0a 0903 	add.w	r9, sl, r3
 8009cac:	6849      	ldr	r1, [r1, #4]
 8009cae:	68a3      	ldr	r3, [r4, #8]
 8009cb0:	f109 0501 	add.w	r5, r9, #1
 8009cb4:	42ab      	cmp	r3, r5
 8009cb6:	db32      	blt.n	8009d1e <__lshift+0x86>
 8009cb8:	4638      	mov	r0, r7
 8009cba:	f7ff fdef 	bl	800989c <_Balloc>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	4680      	mov	r8, r0
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	f100 0114 	add.w	r1, r0, #20
 8009cc8:	4553      	cmp	r3, sl
 8009cca:	db2b      	blt.n	8009d24 <__lshift+0x8c>
 8009ccc:	6920      	ldr	r0, [r4, #16]
 8009cce:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009cd2:	f104 0314 	add.w	r3, r4, #20
 8009cd6:	f016 021f 	ands.w	r2, r6, #31
 8009cda:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009cde:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ce2:	d025      	beq.n	8009d30 <__lshift+0x98>
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	f1c2 0e20 	rsb	lr, r2, #32
 8009cea:	468a      	mov	sl, r1
 8009cec:	681e      	ldr	r6, [r3, #0]
 8009cee:	4096      	lsls	r6, r2
 8009cf0:	4330      	orrs	r0, r6
 8009cf2:	f84a 0b04 	str.w	r0, [sl], #4
 8009cf6:	f853 0b04 	ldr.w	r0, [r3], #4
 8009cfa:	459c      	cmp	ip, r3
 8009cfc:	fa20 f00e 	lsr.w	r0, r0, lr
 8009d00:	d814      	bhi.n	8009d2c <__lshift+0x94>
 8009d02:	6048      	str	r0, [r1, #4]
 8009d04:	b108      	cbz	r0, 8009d0a <__lshift+0x72>
 8009d06:	f109 0502 	add.w	r5, r9, #2
 8009d0a:	3d01      	subs	r5, #1
 8009d0c:	4638      	mov	r0, r7
 8009d0e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009d12:	4621      	mov	r1, r4
 8009d14:	f7ff fdf6 	bl	8009904 <_Bfree>
 8009d18:	4640      	mov	r0, r8
 8009d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d1e:	3101      	adds	r1, #1
 8009d20:	005b      	lsls	r3, r3, #1
 8009d22:	e7c7      	b.n	8009cb4 <__lshift+0x1c>
 8009d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	e7cd      	b.n	8009cc8 <__lshift+0x30>
 8009d2c:	4651      	mov	r1, sl
 8009d2e:	e7dc      	b.n	8009cea <__lshift+0x52>
 8009d30:	3904      	subs	r1, #4
 8009d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d36:	459c      	cmp	ip, r3
 8009d38:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d3c:	d8f9      	bhi.n	8009d32 <__lshift+0x9a>
 8009d3e:	e7e4      	b.n	8009d0a <__lshift+0x72>

08009d40 <__mcmp>:
 8009d40:	6903      	ldr	r3, [r0, #16]
 8009d42:	690a      	ldr	r2, [r1, #16]
 8009d44:	b530      	push	{r4, r5, lr}
 8009d46:	1a9b      	subs	r3, r3, r2
 8009d48:	d10c      	bne.n	8009d64 <__mcmp+0x24>
 8009d4a:	0092      	lsls	r2, r2, #2
 8009d4c:	3014      	adds	r0, #20
 8009d4e:	3114      	adds	r1, #20
 8009d50:	1884      	adds	r4, r0, r2
 8009d52:	4411      	add	r1, r2
 8009d54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009d58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009d5c:	4295      	cmp	r5, r2
 8009d5e:	d003      	beq.n	8009d68 <__mcmp+0x28>
 8009d60:	d305      	bcc.n	8009d6e <__mcmp+0x2e>
 8009d62:	2301      	movs	r3, #1
 8009d64:	4618      	mov	r0, r3
 8009d66:	bd30      	pop	{r4, r5, pc}
 8009d68:	42a0      	cmp	r0, r4
 8009d6a:	d3f3      	bcc.n	8009d54 <__mcmp+0x14>
 8009d6c:	e7fa      	b.n	8009d64 <__mcmp+0x24>
 8009d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d72:	e7f7      	b.n	8009d64 <__mcmp+0x24>

08009d74 <__mdiff>:
 8009d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d78:	460d      	mov	r5, r1
 8009d7a:	4607      	mov	r7, r0
 8009d7c:	4611      	mov	r1, r2
 8009d7e:	4628      	mov	r0, r5
 8009d80:	4614      	mov	r4, r2
 8009d82:	f7ff ffdd 	bl	8009d40 <__mcmp>
 8009d86:	1e06      	subs	r6, r0, #0
 8009d88:	d108      	bne.n	8009d9c <__mdiff+0x28>
 8009d8a:	4631      	mov	r1, r6
 8009d8c:	4638      	mov	r0, r7
 8009d8e:	f7ff fd85 	bl	800989c <_Balloc>
 8009d92:	2301      	movs	r3, #1
 8009d94:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d9c:	bfa4      	itt	ge
 8009d9e:	4623      	movge	r3, r4
 8009da0:	462c      	movge	r4, r5
 8009da2:	4638      	mov	r0, r7
 8009da4:	6861      	ldr	r1, [r4, #4]
 8009da6:	bfa6      	itte	ge
 8009da8:	461d      	movge	r5, r3
 8009daa:	2600      	movge	r6, #0
 8009dac:	2601      	movlt	r6, #1
 8009dae:	f7ff fd75 	bl	800989c <_Balloc>
 8009db2:	f04f 0e00 	mov.w	lr, #0
 8009db6:	60c6      	str	r6, [r0, #12]
 8009db8:	692b      	ldr	r3, [r5, #16]
 8009dba:	6926      	ldr	r6, [r4, #16]
 8009dbc:	f104 0214 	add.w	r2, r4, #20
 8009dc0:	f105 0914 	add.w	r9, r5, #20
 8009dc4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009dc8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009dcc:	f100 0114 	add.w	r1, r0, #20
 8009dd0:	f852 ab04 	ldr.w	sl, [r2], #4
 8009dd4:	f859 5b04 	ldr.w	r5, [r9], #4
 8009dd8:	fa1f f38a 	uxth.w	r3, sl
 8009ddc:	4473      	add	r3, lr
 8009dde:	b2ac      	uxth	r4, r5
 8009de0:	1b1b      	subs	r3, r3, r4
 8009de2:	0c2c      	lsrs	r4, r5, #16
 8009de4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8009de8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8009df2:	45c8      	cmp	r8, r9
 8009df4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009df8:	4694      	mov	ip, r2
 8009dfa:	f841 4b04 	str.w	r4, [r1], #4
 8009dfe:	d8e7      	bhi.n	8009dd0 <__mdiff+0x5c>
 8009e00:	45bc      	cmp	ip, r7
 8009e02:	d304      	bcc.n	8009e0e <__mdiff+0x9a>
 8009e04:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009e08:	b183      	cbz	r3, 8009e2c <__mdiff+0xb8>
 8009e0a:	6106      	str	r6, [r0, #16]
 8009e0c:	e7c4      	b.n	8009d98 <__mdiff+0x24>
 8009e0e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8009e12:	b2a2      	uxth	r2, r4
 8009e14:	4472      	add	r2, lr
 8009e16:	1413      	asrs	r3, r2, #16
 8009e18:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009e1c:	b292      	uxth	r2, r2
 8009e1e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009e22:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009e26:	f841 2b04 	str.w	r2, [r1], #4
 8009e2a:	e7e9      	b.n	8009e00 <__mdiff+0x8c>
 8009e2c:	3e01      	subs	r6, #1
 8009e2e:	e7e9      	b.n	8009e04 <__mdiff+0x90>

08009e30 <__ulp>:
 8009e30:	4b10      	ldr	r3, [pc, #64]	; (8009e74 <__ulp+0x44>)
 8009e32:	400b      	ands	r3, r1
 8009e34:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	dd02      	ble.n	8009e42 <__ulp+0x12>
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	4619      	mov	r1, r3
 8009e40:	4770      	bx	lr
 8009e42:	425b      	negs	r3, r3
 8009e44:	151b      	asrs	r3, r3, #20
 8009e46:	2b13      	cmp	r3, #19
 8009e48:	f04f 0000 	mov.w	r0, #0
 8009e4c:	f04f 0100 	mov.w	r1, #0
 8009e50:	dc04      	bgt.n	8009e5c <__ulp+0x2c>
 8009e52:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009e56:	fa42 f103 	asr.w	r1, r2, r3
 8009e5a:	4770      	bx	lr
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	3b14      	subs	r3, #20
 8009e60:	2b1e      	cmp	r3, #30
 8009e62:	bfce      	itee	gt
 8009e64:	4613      	movgt	r3, r2
 8009e66:	f1c3 031f 	rsble	r3, r3, #31
 8009e6a:	fa02 f303 	lslle.w	r3, r2, r3
 8009e6e:	4618      	mov	r0, r3
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	7ff00000 	.word	0x7ff00000

08009e78 <__b2d>:
 8009e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e7c:	6907      	ldr	r7, [r0, #16]
 8009e7e:	f100 0914 	add.w	r9, r0, #20
 8009e82:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009e86:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009e8a:	f1a7 0804 	sub.w	r8, r7, #4
 8009e8e:	4630      	mov	r0, r6
 8009e90:	f7ff fdc8 	bl	8009a24 <__hi0bits>
 8009e94:	f1c0 0320 	rsb	r3, r0, #32
 8009e98:	280a      	cmp	r0, #10
 8009e9a:	600b      	str	r3, [r1, #0]
 8009e9c:	491e      	ldr	r1, [pc, #120]	; (8009f18 <__b2d+0xa0>)
 8009e9e:	dc17      	bgt.n	8009ed0 <__b2d+0x58>
 8009ea0:	45c1      	cmp	r9, r8
 8009ea2:	bf28      	it	cs
 8009ea4:	2200      	movcs	r2, #0
 8009ea6:	f1c0 0c0b 	rsb	ip, r0, #11
 8009eaa:	fa26 f30c 	lsr.w	r3, r6, ip
 8009eae:	bf38      	it	cc
 8009eb0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009eb4:	ea43 0501 	orr.w	r5, r3, r1
 8009eb8:	f100 0315 	add.w	r3, r0, #21
 8009ebc:	fa06 f303 	lsl.w	r3, r6, r3
 8009ec0:	fa22 f20c 	lsr.w	r2, r2, ip
 8009ec4:	ea43 0402 	orr.w	r4, r3, r2
 8009ec8:	4620      	mov	r0, r4
 8009eca:	4629      	mov	r1, r5
 8009ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ed0:	45c1      	cmp	r9, r8
 8009ed2:	bf3a      	itte	cc
 8009ed4:	f1a7 0808 	subcc.w	r8, r7, #8
 8009ed8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009edc:	2200      	movcs	r2, #0
 8009ede:	f1b0 030b 	subs.w	r3, r0, #11
 8009ee2:	d015      	beq.n	8009f10 <__b2d+0x98>
 8009ee4:	409e      	lsls	r6, r3
 8009ee6:	f1c3 0720 	rsb	r7, r3, #32
 8009eea:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8009eee:	fa22 f107 	lsr.w	r1, r2, r7
 8009ef2:	45c8      	cmp	r8, r9
 8009ef4:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8009ef8:	ea46 0501 	orr.w	r5, r6, r1
 8009efc:	bf94      	ite	ls
 8009efe:	2100      	movls	r1, #0
 8009f00:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009f04:	fa02 f003 	lsl.w	r0, r2, r3
 8009f08:	40f9      	lsrs	r1, r7
 8009f0a:	ea40 0401 	orr.w	r4, r0, r1
 8009f0e:	e7db      	b.n	8009ec8 <__b2d+0x50>
 8009f10:	ea46 0501 	orr.w	r5, r6, r1
 8009f14:	4614      	mov	r4, r2
 8009f16:	e7d7      	b.n	8009ec8 <__b2d+0x50>
 8009f18:	3ff00000 	.word	0x3ff00000

08009f1c <__d2b>:
 8009f1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009f20:	461c      	mov	r4, r3
 8009f22:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8009f26:	2101      	movs	r1, #1
 8009f28:	4690      	mov	r8, r2
 8009f2a:	f7ff fcb7 	bl	800989c <_Balloc>
 8009f2e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8009f32:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009f36:	4607      	mov	r7, r0
 8009f38:	bb34      	cbnz	r4, 8009f88 <__d2b+0x6c>
 8009f3a:	9201      	str	r2, [sp, #4]
 8009f3c:	f1b8 0200 	subs.w	r2, r8, #0
 8009f40:	d027      	beq.n	8009f92 <__d2b+0x76>
 8009f42:	a802      	add	r0, sp, #8
 8009f44:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009f48:	f7ff fd8b 	bl	8009a62 <__lo0bits>
 8009f4c:	9900      	ldr	r1, [sp, #0]
 8009f4e:	b1f0      	cbz	r0, 8009f8e <__d2b+0x72>
 8009f50:	9a01      	ldr	r2, [sp, #4]
 8009f52:	f1c0 0320 	rsb	r3, r0, #32
 8009f56:	fa02 f303 	lsl.w	r3, r2, r3
 8009f5a:	430b      	orrs	r3, r1
 8009f5c:	40c2      	lsrs	r2, r0
 8009f5e:	617b      	str	r3, [r7, #20]
 8009f60:	9201      	str	r2, [sp, #4]
 8009f62:	9b01      	ldr	r3, [sp, #4]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	bf14      	ite	ne
 8009f68:	2102      	movne	r1, #2
 8009f6a:	2101      	moveq	r1, #1
 8009f6c:	61bb      	str	r3, [r7, #24]
 8009f6e:	6139      	str	r1, [r7, #16]
 8009f70:	b1c4      	cbz	r4, 8009fa4 <__d2b+0x88>
 8009f72:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009f76:	4404      	add	r4, r0
 8009f78:	6034      	str	r4, [r6, #0]
 8009f7a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f7e:	6028      	str	r0, [r5, #0]
 8009f80:	4638      	mov	r0, r7
 8009f82:	b002      	add	sp, #8
 8009f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f88:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009f8c:	e7d5      	b.n	8009f3a <__d2b+0x1e>
 8009f8e:	6179      	str	r1, [r7, #20]
 8009f90:	e7e7      	b.n	8009f62 <__d2b+0x46>
 8009f92:	a801      	add	r0, sp, #4
 8009f94:	f7ff fd65 	bl	8009a62 <__lo0bits>
 8009f98:	2101      	movs	r1, #1
 8009f9a:	9b01      	ldr	r3, [sp, #4]
 8009f9c:	6139      	str	r1, [r7, #16]
 8009f9e:	617b      	str	r3, [r7, #20]
 8009fa0:	3020      	adds	r0, #32
 8009fa2:	e7e5      	b.n	8009f70 <__d2b+0x54>
 8009fa4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009fa8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009fac:	6030      	str	r0, [r6, #0]
 8009fae:	6918      	ldr	r0, [r3, #16]
 8009fb0:	f7ff fd38 	bl	8009a24 <__hi0bits>
 8009fb4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009fb8:	e7e1      	b.n	8009f7e <__d2b+0x62>

08009fba <__ratio>:
 8009fba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fbe:	4688      	mov	r8, r1
 8009fc0:	4669      	mov	r1, sp
 8009fc2:	4681      	mov	r9, r0
 8009fc4:	f7ff ff58 	bl	8009e78 <__b2d>
 8009fc8:	468b      	mov	fp, r1
 8009fca:	4606      	mov	r6, r0
 8009fcc:	460f      	mov	r7, r1
 8009fce:	4640      	mov	r0, r8
 8009fd0:	a901      	add	r1, sp, #4
 8009fd2:	f7ff ff51 	bl	8009e78 <__b2d>
 8009fd6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009fda:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009fde:	460d      	mov	r5, r1
 8009fe0:	eba3 0c02 	sub.w	ip, r3, r2
 8009fe4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009fe8:	1a9b      	subs	r3, r3, r2
 8009fea:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	bfd5      	itete	le
 8009ff2:	460a      	movle	r2, r1
 8009ff4:	463a      	movgt	r2, r7
 8009ff6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009ffa:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009ffe:	bfd8      	it	le
 800a000:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800a004:	462b      	mov	r3, r5
 800a006:	4602      	mov	r2, r0
 800a008:	4659      	mov	r1, fp
 800a00a:	4630      	mov	r0, r6
 800a00c:	f7f6 fb8e 	bl	800072c <__aeabi_ddiv>
 800a010:	b003      	add	sp, #12
 800a012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a016 <__copybits>:
 800a016:	3901      	subs	r1, #1
 800a018:	b510      	push	{r4, lr}
 800a01a:	1149      	asrs	r1, r1, #5
 800a01c:	6914      	ldr	r4, [r2, #16]
 800a01e:	3101      	adds	r1, #1
 800a020:	f102 0314 	add.w	r3, r2, #20
 800a024:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a028:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a02c:	42a3      	cmp	r3, r4
 800a02e:	4602      	mov	r2, r0
 800a030:	d303      	bcc.n	800a03a <__copybits+0x24>
 800a032:	2300      	movs	r3, #0
 800a034:	428a      	cmp	r2, r1
 800a036:	d305      	bcc.n	800a044 <__copybits+0x2e>
 800a038:	bd10      	pop	{r4, pc}
 800a03a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a03e:	f840 2b04 	str.w	r2, [r0], #4
 800a042:	e7f3      	b.n	800a02c <__copybits+0x16>
 800a044:	f842 3b04 	str.w	r3, [r2], #4
 800a048:	e7f4      	b.n	800a034 <__copybits+0x1e>

0800a04a <__any_on>:
 800a04a:	f100 0214 	add.w	r2, r0, #20
 800a04e:	6900      	ldr	r0, [r0, #16]
 800a050:	114b      	asrs	r3, r1, #5
 800a052:	4298      	cmp	r0, r3
 800a054:	b510      	push	{r4, lr}
 800a056:	db11      	blt.n	800a07c <__any_on+0x32>
 800a058:	dd0a      	ble.n	800a070 <__any_on+0x26>
 800a05a:	f011 011f 	ands.w	r1, r1, #31
 800a05e:	d007      	beq.n	800a070 <__any_on+0x26>
 800a060:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a064:	fa24 f001 	lsr.w	r0, r4, r1
 800a068:	fa00 f101 	lsl.w	r1, r0, r1
 800a06c:	428c      	cmp	r4, r1
 800a06e:	d10b      	bne.n	800a088 <__any_on+0x3e>
 800a070:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a074:	4293      	cmp	r3, r2
 800a076:	d803      	bhi.n	800a080 <__any_on+0x36>
 800a078:	2000      	movs	r0, #0
 800a07a:	bd10      	pop	{r4, pc}
 800a07c:	4603      	mov	r3, r0
 800a07e:	e7f7      	b.n	800a070 <__any_on+0x26>
 800a080:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a084:	2900      	cmp	r1, #0
 800a086:	d0f5      	beq.n	800a074 <__any_on+0x2a>
 800a088:	2001      	movs	r0, #1
 800a08a:	e7f6      	b.n	800a07a <__any_on+0x30>

0800a08c <_calloc_r>:
 800a08c:	b538      	push	{r3, r4, r5, lr}
 800a08e:	fb02 f401 	mul.w	r4, r2, r1
 800a092:	4621      	mov	r1, r4
 800a094:	f000 f808 	bl	800a0a8 <_malloc_r>
 800a098:	4605      	mov	r5, r0
 800a09a:	b118      	cbz	r0, 800a0a4 <_calloc_r+0x18>
 800a09c:	4622      	mov	r2, r4
 800a09e:	2100      	movs	r1, #0
 800a0a0:	f7fe f93a 	bl	8008318 <memset>
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	bd38      	pop	{r3, r4, r5, pc}

0800a0a8 <_malloc_r>:
 800a0a8:	b570      	push	{r4, r5, r6, lr}
 800a0aa:	1ccd      	adds	r5, r1, #3
 800a0ac:	f025 0503 	bic.w	r5, r5, #3
 800a0b0:	3508      	adds	r5, #8
 800a0b2:	2d0c      	cmp	r5, #12
 800a0b4:	bf38      	it	cc
 800a0b6:	250c      	movcc	r5, #12
 800a0b8:	2d00      	cmp	r5, #0
 800a0ba:	4606      	mov	r6, r0
 800a0bc:	db01      	blt.n	800a0c2 <_malloc_r+0x1a>
 800a0be:	42a9      	cmp	r1, r5
 800a0c0:	d903      	bls.n	800a0ca <_malloc_r+0x22>
 800a0c2:	230c      	movs	r3, #12
 800a0c4:	6033      	str	r3, [r6, #0]
 800a0c6:	2000      	movs	r0, #0
 800a0c8:	bd70      	pop	{r4, r5, r6, pc}
 800a0ca:	f000 fc85 	bl	800a9d8 <__malloc_lock>
 800a0ce:	4a21      	ldr	r2, [pc, #132]	; (800a154 <_malloc_r+0xac>)
 800a0d0:	6814      	ldr	r4, [r2, #0]
 800a0d2:	4621      	mov	r1, r4
 800a0d4:	b991      	cbnz	r1, 800a0fc <_malloc_r+0x54>
 800a0d6:	4c20      	ldr	r4, [pc, #128]	; (800a158 <_malloc_r+0xb0>)
 800a0d8:	6823      	ldr	r3, [r4, #0]
 800a0da:	b91b      	cbnz	r3, 800a0e4 <_malloc_r+0x3c>
 800a0dc:	4630      	mov	r0, r6
 800a0de:	f000 fb3f 	bl	800a760 <_sbrk_r>
 800a0e2:	6020      	str	r0, [r4, #0]
 800a0e4:	4629      	mov	r1, r5
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	f000 fb3a 	bl	800a760 <_sbrk_r>
 800a0ec:	1c43      	adds	r3, r0, #1
 800a0ee:	d124      	bne.n	800a13a <_malloc_r+0x92>
 800a0f0:	230c      	movs	r3, #12
 800a0f2:	4630      	mov	r0, r6
 800a0f4:	6033      	str	r3, [r6, #0]
 800a0f6:	f000 fc70 	bl	800a9da <__malloc_unlock>
 800a0fa:	e7e4      	b.n	800a0c6 <_malloc_r+0x1e>
 800a0fc:	680b      	ldr	r3, [r1, #0]
 800a0fe:	1b5b      	subs	r3, r3, r5
 800a100:	d418      	bmi.n	800a134 <_malloc_r+0x8c>
 800a102:	2b0b      	cmp	r3, #11
 800a104:	d90f      	bls.n	800a126 <_malloc_r+0x7e>
 800a106:	600b      	str	r3, [r1, #0]
 800a108:	18cc      	adds	r4, r1, r3
 800a10a:	50cd      	str	r5, [r1, r3]
 800a10c:	4630      	mov	r0, r6
 800a10e:	f000 fc64 	bl	800a9da <__malloc_unlock>
 800a112:	f104 000b 	add.w	r0, r4, #11
 800a116:	1d23      	adds	r3, r4, #4
 800a118:	f020 0007 	bic.w	r0, r0, #7
 800a11c:	1ac3      	subs	r3, r0, r3
 800a11e:	d0d3      	beq.n	800a0c8 <_malloc_r+0x20>
 800a120:	425a      	negs	r2, r3
 800a122:	50e2      	str	r2, [r4, r3]
 800a124:	e7d0      	b.n	800a0c8 <_malloc_r+0x20>
 800a126:	684b      	ldr	r3, [r1, #4]
 800a128:	428c      	cmp	r4, r1
 800a12a:	bf16      	itet	ne
 800a12c:	6063      	strne	r3, [r4, #4]
 800a12e:	6013      	streq	r3, [r2, #0]
 800a130:	460c      	movne	r4, r1
 800a132:	e7eb      	b.n	800a10c <_malloc_r+0x64>
 800a134:	460c      	mov	r4, r1
 800a136:	6849      	ldr	r1, [r1, #4]
 800a138:	e7cc      	b.n	800a0d4 <_malloc_r+0x2c>
 800a13a:	1cc4      	adds	r4, r0, #3
 800a13c:	f024 0403 	bic.w	r4, r4, #3
 800a140:	42a0      	cmp	r0, r4
 800a142:	d005      	beq.n	800a150 <_malloc_r+0xa8>
 800a144:	1a21      	subs	r1, r4, r0
 800a146:	4630      	mov	r0, r6
 800a148:	f000 fb0a 	bl	800a760 <_sbrk_r>
 800a14c:	3001      	adds	r0, #1
 800a14e:	d0cf      	beq.n	800a0f0 <_malloc_r+0x48>
 800a150:	6025      	str	r5, [r4, #0]
 800a152:	e7db      	b.n	800a10c <_malloc_r+0x64>
 800a154:	200005e8 	.word	0x200005e8
 800a158:	200005ec 	.word	0x200005ec

0800a15c <_sungetc_r>:
 800a15c:	b538      	push	{r3, r4, r5, lr}
 800a15e:	1c4b      	adds	r3, r1, #1
 800a160:	4614      	mov	r4, r2
 800a162:	d103      	bne.n	800a16c <_sungetc_r+0x10>
 800a164:	f04f 35ff 	mov.w	r5, #4294967295
 800a168:	4628      	mov	r0, r5
 800a16a:	bd38      	pop	{r3, r4, r5, pc}
 800a16c:	8993      	ldrh	r3, [r2, #12]
 800a16e:	b2cd      	uxtb	r5, r1
 800a170:	f023 0320 	bic.w	r3, r3, #32
 800a174:	8193      	strh	r3, [r2, #12]
 800a176:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a178:	6852      	ldr	r2, [r2, #4]
 800a17a:	b18b      	cbz	r3, 800a1a0 <_sungetc_r+0x44>
 800a17c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a17e:	4293      	cmp	r3, r2
 800a180:	dd08      	ble.n	800a194 <_sungetc_r+0x38>
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	1e5a      	subs	r2, r3, #1
 800a186:	6022      	str	r2, [r4, #0]
 800a188:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a18c:	6863      	ldr	r3, [r4, #4]
 800a18e:	3301      	adds	r3, #1
 800a190:	6063      	str	r3, [r4, #4]
 800a192:	e7e9      	b.n	800a168 <_sungetc_r+0xc>
 800a194:	4621      	mov	r1, r4
 800a196:	f000 fbc3 	bl	800a920 <__submore>
 800a19a:	2800      	cmp	r0, #0
 800a19c:	d0f1      	beq.n	800a182 <_sungetc_r+0x26>
 800a19e:	e7e1      	b.n	800a164 <_sungetc_r+0x8>
 800a1a0:	6921      	ldr	r1, [r4, #16]
 800a1a2:	6823      	ldr	r3, [r4, #0]
 800a1a4:	b151      	cbz	r1, 800a1bc <_sungetc_r+0x60>
 800a1a6:	4299      	cmp	r1, r3
 800a1a8:	d208      	bcs.n	800a1bc <_sungetc_r+0x60>
 800a1aa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a1ae:	42a9      	cmp	r1, r5
 800a1b0:	d104      	bne.n	800a1bc <_sungetc_r+0x60>
 800a1b2:	3b01      	subs	r3, #1
 800a1b4:	3201      	adds	r2, #1
 800a1b6:	6023      	str	r3, [r4, #0]
 800a1b8:	6062      	str	r2, [r4, #4]
 800a1ba:	e7d5      	b.n	800a168 <_sungetc_r+0xc>
 800a1bc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a1c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1c4:	6363      	str	r3, [r4, #52]	; 0x34
 800a1c6:	2303      	movs	r3, #3
 800a1c8:	63a3      	str	r3, [r4, #56]	; 0x38
 800a1ca:	4623      	mov	r3, r4
 800a1cc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a1d0:	6023      	str	r3, [r4, #0]
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e7dc      	b.n	800a190 <_sungetc_r+0x34>

0800a1d6 <__ssrefill_r>:
 800a1d6:	b510      	push	{r4, lr}
 800a1d8:	460c      	mov	r4, r1
 800a1da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a1dc:	b169      	cbz	r1, 800a1fa <__ssrefill_r+0x24>
 800a1de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1e2:	4299      	cmp	r1, r3
 800a1e4:	d001      	beq.n	800a1ea <__ssrefill_r+0x14>
 800a1e6:	f000 fbf9 	bl	800a9dc <_free_r>
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1ee:	6360      	str	r0, [r4, #52]	; 0x34
 800a1f0:	6063      	str	r3, [r4, #4]
 800a1f2:	b113      	cbz	r3, 800a1fa <__ssrefill_r+0x24>
 800a1f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a1f6:	6023      	str	r3, [r4, #0]
 800a1f8:	bd10      	pop	{r4, pc}
 800a1fa:	6923      	ldr	r3, [r4, #16]
 800a1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a200:	6023      	str	r3, [r4, #0]
 800a202:	2300      	movs	r3, #0
 800a204:	6063      	str	r3, [r4, #4]
 800a206:	89a3      	ldrh	r3, [r4, #12]
 800a208:	f043 0320 	orr.w	r3, r3, #32
 800a20c:	81a3      	strh	r3, [r4, #12]
 800a20e:	e7f3      	b.n	800a1f8 <__ssrefill_r+0x22>

0800a210 <__ssvfiscanf_r>:
 800a210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a214:	460c      	mov	r4, r1
 800a216:	2100      	movs	r1, #0
 800a218:	4606      	mov	r6, r0
 800a21a:	4692      	mov	sl, r2
 800a21c:	270a      	movs	r7, #10
 800a21e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800a222:	9144      	str	r1, [sp, #272]	; 0x110
 800a224:	9145      	str	r1, [sp, #276]	; 0x114
 800a226:	499e      	ldr	r1, [pc, #632]	; (800a4a0 <__ssvfiscanf_r+0x290>)
 800a228:	f10d 0804 	add.w	r8, sp, #4
 800a22c:	91a0      	str	r1, [sp, #640]	; 0x280
 800a22e:	499d      	ldr	r1, [pc, #628]	; (800a4a4 <__ssvfiscanf_r+0x294>)
 800a230:	f8df 9274 	ldr.w	r9, [pc, #628]	; 800a4a8 <__ssvfiscanf_r+0x298>
 800a234:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a238:	91a1      	str	r1, [sp, #644]	; 0x284
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	f89a 3000 	ldrb.w	r3, [sl]
 800a240:	2b00      	cmp	r3, #0
 800a242:	f000 812a 	beq.w	800a49a <__ssvfiscanf_r+0x28a>
 800a246:	4655      	mov	r5, sl
 800a248:	f7ff fb06 	bl	8009858 <__locale_ctype_ptr>
 800a24c:	f815 bb01 	ldrb.w	fp, [r5], #1
 800a250:	4458      	add	r0, fp
 800a252:	7843      	ldrb	r3, [r0, #1]
 800a254:	f013 0308 	ands.w	r3, r3, #8
 800a258:	d01c      	beq.n	800a294 <__ssvfiscanf_r+0x84>
 800a25a:	6863      	ldr	r3, [r4, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	dd12      	ble.n	800a286 <__ssvfiscanf_r+0x76>
 800a260:	f7ff fafa 	bl	8009858 <__locale_ctype_ptr>
 800a264:	6823      	ldr	r3, [r4, #0]
 800a266:	781a      	ldrb	r2, [r3, #0]
 800a268:	4410      	add	r0, r2
 800a26a:	7842      	ldrb	r2, [r0, #1]
 800a26c:	0712      	lsls	r2, r2, #28
 800a26e:	d401      	bmi.n	800a274 <__ssvfiscanf_r+0x64>
 800a270:	46aa      	mov	sl, r5
 800a272:	e7e3      	b.n	800a23c <__ssvfiscanf_r+0x2c>
 800a274:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a276:	3301      	adds	r3, #1
 800a278:	3201      	adds	r2, #1
 800a27a:	9245      	str	r2, [sp, #276]	; 0x114
 800a27c:	6862      	ldr	r2, [r4, #4]
 800a27e:	6023      	str	r3, [r4, #0]
 800a280:	3a01      	subs	r2, #1
 800a282:	6062      	str	r2, [r4, #4]
 800a284:	e7e9      	b.n	800a25a <__ssvfiscanf_r+0x4a>
 800a286:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a288:	4621      	mov	r1, r4
 800a28a:	4630      	mov	r0, r6
 800a28c:	4798      	blx	r3
 800a28e:	2800      	cmp	r0, #0
 800a290:	d0e6      	beq.n	800a260 <__ssvfiscanf_r+0x50>
 800a292:	e7ed      	b.n	800a270 <__ssvfiscanf_r+0x60>
 800a294:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800a298:	f040 8082 	bne.w	800a3a0 <__ssvfiscanf_r+0x190>
 800a29c:	9343      	str	r3, [sp, #268]	; 0x10c
 800a29e:	9341      	str	r3, [sp, #260]	; 0x104
 800a2a0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800a2a4:	2b2a      	cmp	r3, #42	; 0x2a
 800a2a6:	d103      	bne.n	800a2b0 <__ssvfiscanf_r+0xa0>
 800a2a8:	2310      	movs	r3, #16
 800a2aa:	f10a 0502 	add.w	r5, sl, #2
 800a2ae:	9341      	str	r3, [sp, #260]	; 0x104
 800a2b0:	46aa      	mov	sl, r5
 800a2b2:	f815 1b01 	ldrb.w	r1, [r5], #1
 800a2b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a2ba:	2a09      	cmp	r2, #9
 800a2bc:	d922      	bls.n	800a304 <__ssvfiscanf_r+0xf4>
 800a2be:	2203      	movs	r2, #3
 800a2c0:	4879      	ldr	r0, [pc, #484]	; (800a4a8 <__ssvfiscanf_r+0x298>)
 800a2c2:	f000 fb7b 	bl	800a9bc <memchr>
 800a2c6:	b138      	cbz	r0, 800a2d8 <__ssvfiscanf_r+0xc8>
 800a2c8:	eba0 0309 	sub.w	r3, r0, r9
 800a2cc:	2001      	movs	r0, #1
 800a2ce:	46aa      	mov	sl, r5
 800a2d0:	4098      	lsls	r0, r3
 800a2d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a2d4:	4318      	orrs	r0, r3
 800a2d6:	9041      	str	r0, [sp, #260]	; 0x104
 800a2d8:	f89a 3000 	ldrb.w	r3, [sl]
 800a2dc:	f10a 0501 	add.w	r5, sl, #1
 800a2e0:	2b67      	cmp	r3, #103	; 0x67
 800a2e2:	d82b      	bhi.n	800a33c <__ssvfiscanf_r+0x12c>
 800a2e4:	2b65      	cmp	r3, #101	; 0x65
 800a2e6:	f080 809f 	bcs.w	800a428 <__ssvfiscanf_r+0x218>
 800a2ea:	2b47      	cmp	r3, #71	; 0x47
 800a2ec:	d810      	bhi.n	800a310 <__ssvfiscanf_r+0x100>
 800a2ee:	2b45      	cmp	r3, #69	; 0x45
 800a2f0:	f080 809a 	bcs.w	800a428 <__ssvfiscanf_r+0x218>
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d06c      	beq.n	800a3d2 <__ssvfiscanf_r+0x1c2>
 800a2f8:	2b25      	cmp	r3, #37	; 0x25
 800a2fa:	d051      	beq.n	800a3a0 <__ssvfiscanf_r+0x190>
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	9742      	str	r7, [sp, #264]	; 0x108
 800a300:	9347      	str	r3, [sp, #284]	; 0x11c
 800a302:	e027      	b.n	800a354 <__ssvfiscanf_r+0x144>
 800a304:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a306:	fb07 1303 	mla	r3, r7, r3, r1
 800a30a:	3b30      	subs	r3, #48	; 0x30
 800a30c:	9343      	str	r3, [sp, #268]	; 0x10c
 800a30e:	e7cf      	b.n	800a2b0 <__ssvfiscanf_r+0xa0>
 800a310:	2b5b      	cmp	r3, #91	; 0x5b
 800a312:	d06a      	beq.n	800a3ea <__ssvfiscanf_r+0x1da>
 800a314:	d80c      	bhi.n	800a330 <__ssvfiscanf_r+0x120>
 800a316:	2b58      	cmp	r3, #88	; 0x58
 800a318:	d1f0      	bne.n	800a2fc <__ssvfiscanf_r+0xec>
 800a31a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a31c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a320:	9241      	str	r2, [sp, #260]	; 0x104
 800a322:	2210      	movs	r2, #16
 800a324:	9242      	str	r2, [sp, #264]	; 0x108
 800a326:	2b6e      	cmp	r3, #110	; 0x6e
 800a328:	bf8c      	ite	hi
 800a32a:	2304      	movhi	r3, #4
 800a32c:	2303      	movls	r3, #3
 800a32e:	e010      	b.n	800a352 <__ssvfiscanf_r+0x142>
 800a330:	2b63      	cmp	r3, #99	; 0x63
 800a332:	d065      	beq.n	800a400 <__ssvfiscanf_r+0x1f0>
 800a334:	2b64      	cmp	r3, #100	; 0x64
 800a336:	d1e1      	bne.n	800a2fc <__ssvfiscanf_r+0xec>
 800a338:	9742      	str	r7, [sp, #264]	; 0x108
 800a33a:	e7f4      	b.n	800a326 <__ssvfiscanf_r+0x116>
 800a33c:	2b70      	cmp	r3, #112	; 0x70
 800a33e:	d04b      	beq.n	800a3d8 <__ssvfiscanf_r+0x1c8>
 800a340:	d826      	bhi.n	800a390 <__ssvfiscanf_r+0x180>
 800a342:	2b6e      	cmp	r3, #110	; 0x6e
 800a344:	d062      	beq.n	800a40c <__ssvfiscanf_r+0x1fc>
 800a346:	d84c      	bhi.n	800a3e2 <__ssvfiscanf_r+0x1d2>
 800a348:	2b69      	cmp	r3, #105	; 0x69
 800a34a:	d1d7      	bne.n	800a2fc <__ssvfiscanf_r+0xec>
 800a34c:	2300      	movs	r3, #0
 800a34e:	9342      	str	r3, [sp, #264]	; 0x108
 800a350:	2303      	movs	r3, #3
 800a352:	9347      	str	r3, [sp, #284]	; 0x11c
 800a354:	6863      	ldr	r3, [r4, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	dd68      	ble.n	800a42c <__ssvfiscanf_r+0x21c>
 800a35a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a35c:	0659      	lsls	r1, r3, #25
 800a35e:	d407      	bmi.n	800a370 <__ssvfiscanf_r+0x160>
 800a360:	f7ff fa7a 	bl	8009858 <__locale_ctype_ptr>
 800a364:	6823      	ldr	r3, [r4, #0]
 800a366:	781a      	ldrb	r2, [r3, #0]
 800a368:	4410      	add	r0, r2
 800a36a:	7842      	ldrb	r2, [r0, #1]
 800a36c:	0712      	lsls	r2, r2, #28
 800a36e:	d464      	bmi.n	800a43a <__ssvfiscanf_r+0x22a>
 800a370:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a372:	2b02      	cmp	r3, #2
 800a374:	dc73      	bgt.n	800a45e <__ssvfiscanf_r+0x24e>
 800a376:	466b      	mov	r3, sp
 800a378:	4622      	mov	r2, r4
 800a37a:	a941      	add	r1, sp, #260	; 0x104
 800a37c:	4630      	mov	r0, r6
 800a37e:	f000 f897 	bl	800a4b0 <_scanf_chars>
 800a382:	2801      	cmp	r0, #1
 800a384:	f000 8089 	beq.w	800a49a <__ssvfiscanf_r+0x28a>
 800a388:	2802      	cmp	r0, #2
 800a38a:	f47f af71 	bne.w	800a270 <__ssvfiscanf_r+0x60>
 800a38e:	e01d      	b.n	800a3cc <__ssvfiscanf_r+0x1bc>
 800a390:	2b75      	cmp	r3, #117	; 0x75
 800a392:	d0d1      	beq.n	800a338 <__ssvfiscanf_r+0x128>
 800a394:	2b78      	cmp	r3, #120	; 0x78
 800a396:	d0c0      	beq.n	800a31a <__ssvfiscanf_r+0x10a>
 800a398:	2b73      	cmp	r3, #115	; 0x73
 800a39a:	d1af      	bne.n	800a2fc <__ssvfiscanf_r+0xec>
 800a39c:	2302      	movs	r3, #2
 800a39e:	e7d8      	b.n	800a352 <__ssvfiscanf_r+0x142>
 800a3a0:	6863      	ldr	r3, [r4, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	dd0c      	ble.n	800a3c0 <__ssvfiscanf_r+0x1b0>
 800a3a6:	6823      	ldr	r3, [r4, #0]
 800a3a8:	781a      	ldrb	r2, [r3, #0]
 800a3aa:	455a      	cmp	r2, fp
 800a3ac:	d175      	bne.n	800a49a <__ssvfiscanf_r+0x28a>
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	6862      	ldr	r2, [r4, #4]
 800a3b2:	6023      	str	r3, [r4, #0]
 800a3b4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a3b6:	3a01      	subs	r2, #1
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	6062      	str	r2, [r4, #4]
 800a3bc:	9345      	str	r3, [sp, #276]	; 0x114
 800a3be:	e757      	b.n	800a270 <__ssvfiscanf_r+0x60>
 800a3c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a3c2:	4621      	mov	r1, r4
 800a3c4:	4630      	mov	r0, r6
 800a3c6:	4798      	blx	r3
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	d0ec      	beq.n	800a3a6 <__ssvfiscanf_r+0x196>
 800a3cc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	d159      	bne.n	800a486 <__ssvfiscanf_r+0x276>
 800a3d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d6:	e05c      	b.n	800a492 <__ssvfiscanf_r+0x282>
 800a3d8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a3da:	f042 0220 	orr.w	r2, r2, #32
 800a3de:	9241      	str	r2, [sp, #260]	; 0x104
 800a3e0:	e79b      	b.n	800a31a <__ssvfiscanf_r+0x10a>
 800a3e2:	2308      	movs	r3, #8
 800a3e4:	9342      	str	r3, [sp, #264]	; 0x108
 800a3e6:	2304      	movs	r3, #4
 800a3e8:	e7b3      	b.n	800a352 <__ssvfiscanf_r+0x142>
 800a3ea:	4629      	mov	r1, r5
 800a3ec:	4640      	mov	r0, r8
 800a3ee:	f000 f9c7 	bl	800a780 <__sccl>
 800a3f2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a3f4:	4605      	mov	r5, r0
 800a3f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3fa:	9341      	str	r3, [sp, #260]	; 0x104
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e7a8      	b.n	800a352 <__ssvfiscanf_r+0x142>
 800a400:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a406:	9341      	str	r3, [sp, #260]	; 0x104
 800a408:	2300      	movs	r3, #0
 800a40a:	e7a2      	b.n	800a352 <__ssvfiscanf_r+0x142>
 800a40c:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a40e:	06c3      	lsls	r3, r0, #27
 800a410:	f53f af2e 	bmi.w	800a270 <__ssvfiscanf_r+0x60>
 800a414:	9b00      	ldr	r3, [sp, #0]
 800a416:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a418:	1d19      	adds	r1, r3, #4
 800a41a:	9100      	str	r1, [sp, #0]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	07c0      	lsls	r0, r0, #31
 800a420:	bf4c      	ite	mi
 800a422:	801a      	strhmi	r2, [r3, #0]
 800a424:	601a      	strpl	r2, [r3, #0]
 800a426:	e723      	b.n	800a270 <__ssvfiscanf_r+0x60>
 800a428:	2305      	movs	r3, #5
 800a42a:	e792      	b.n	800a352 <__ssvfiscanf_r+0x142>
 800a42c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a42e:	4621      	mov	r1, r4
 800a430:	4630      	mov	r0, r6
 800a432:	4798      	blx	r3
 800a434:	2800      	cmp	r0, #0
 800a436:	d090      	beq.n	800a35a <__ssvfiscanf_r+0x14a>
 800a438:	e7c8      	b.n	800a3cc <__ssvfiscanf_r+0x1bc>
 800a43a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a43c:	3201      	adds	r2, #1
 800a43e:	9245      	str	r2, [sp, #276]	; 0x114
 800a440:	6862      	ldr	r2, [r4, #4]
 800a442:	3a01      	subs	r2, #1
 800a444:	2a00      	cmp	r2, #0
 800a446:	6062      	str	r2, [r4, #4]
 800a448:	dd02      	ble.n	800a450 <__ssvfiscanf_r+0x240>
 800a44a:	3301      	adds	r3, #1
 800a44c:	6023      	str	r3, [r4, #0]
 800a44e:	e787      	b.n	800a360 <__ssvfiscanf_r+0x150>
 800a450:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a452:	4621      	mov	r1, r4
 800a454:	4630      	mov	r0, r6
 800a456:	4798      	blx	r3
 800a458:	2800      	cmp	r0, #0
 800a45a:	d081      	beq.n	800a360 <__ssvfiscanf_r+0x150>
 800a45c:	e7b6      	b.n	800a3cc <__ssvfiscanf_r+0x1bc>
 800a45e:	2b04      	cmp	r3, #4
 800a460:	dc06      	bgt.n	800a470 <__ssvfiscanf_r+0x260>
 800a462:	466b      	mov	r3, sp
 800a464:	4622      	mov	r2, r4
 800a466:	a941      	add	r1, sp, #260	; 0x104
 800a468:	4630      	mov	r0, r6
 800a46a:	f000 f883 	bl	800a574 <_scanf_i>
 800a46e:	e788      	b.n	800a382 <__ssvfiscanf_r+0x172>
 800a470:	4b0e      	ldr	r3, [pc, #56]	; (800a4ac <__ssvfiscanf_r+0x29c>)
 800a472:	2b00      	cmp	r3, #0
 800a474:	f43f aefc 	beq.w	800a270 <__ssvfiscanf_r+0x60>
 800a478:	466b      	mov	r3, sp
 800a47a:	4622      	mov	r2, r4
 800a47c:	a941      	add	r1, sp, #260	; 0x104
 800a47e:	4630      	mov	r0, r6
 800a480:	f3af 8000 	nop.w
 800a484:	e77d      	b.n	800a382 <__ssvfiscanf_r+0x172>
 800a486:	89a3      	ldrh	r3, [r4, #12]
 800a488:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a48c:	bf18      	it	ne
 800a48e:	f04f 30ff 	movne.w	r0, #4294967295
 800a492:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800a496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a49a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a49c:	e7f9      	b.n	800a492 <__ssvfiscanf_r+0x282>
 800a49e:	bf00      	nop
 800a4a0:	0800a15d 	.word	0x0800a15d
 800a4a4:	0800a1d7 	.word	0x0800a1d7
 800a4a8:	0800be9c 	.word	0x0800be9c
 800a4ac:	00000000 	.word	0x00000000

0800a4b0 <_scanf_chars>:
 800a4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b4:	4615      	mov	r5, r2
 800a4b6:	688a      	ldr	r2, [r1, #8]
 800a4b8:	4680      	mov	r8, r0
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	b932      	cbnz	r2, 800a4cc <_scanf_chars+0x1c>
 800a4be:	698a      	ldr	r2, [r1, #24]
 800a4c0:	2a00      	cmp	r2, #0
 800a4c2:	bf14      	ite	ne
 800a4c4:	f04f 32ff 	movne.w	r2, #4294967295
 800a4c8:	2201      	moveq	r2, #1
 800a4ca:	608a      	str	r2, [r1, #8]
 800a4cc:	2600      	movs	r6, #0
 800a4ce:	6822      	ldr	r2, [r4, #0]
 800a4d0:	06d1      	lsls	r1, r2, #27
 800a4d2:	bf5f      	itttt	pl
 800a4d4:	681a      	ldrpl	r2, [r3, #0]
 800a4d6:	1d11      	addpl	r1, r2, #4
 800a4d8:	6019      	strpl	r1, [r3, #0]
 800a4da:	6817      	ldrpl	r7, [r2, #0]
 800a4dc:	69a3      	ldr	r3, [r4, #24]
 800a4de:	b1db      	cbz	r3, 800a518 <_scanf_chars+0x68>
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d107      	bne.n	800a4f4 <_scanf_chars+0x44>
 800a4e4:	682b      	ldr	r3, [r5, #0]
 800a4e6:	6962      	ldr	r2, [r4, #20]
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	5cd3      	ldrb	r3, [r2, r3]
 800a4ec:	b9a3      	cbnz	r3, 800a518 <_scanf_chars+0x68>
 800a4ee:	2e00      	cmp	r6, #0
 800a4f0:	d131      	bne.n	800a556 <_scanf_chars+0xa6>
 800a4f2:	e006      	b.n	800a502 <_scanf_chars+0x52>
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	d007      	beq.n	800a508 <_scanf_chars+0x58>
 800a4f8:	2e00      	cmp	r6, #0
 800a4fa:	d12c      	bne.n	800a556 <_scanf_chars+0xa6>
 800a4fc:	69a3      	ldr	r3, [r4, #24]
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d129      	bne.n	800a556 <_scanf_chars+0xa6>
 800a502:	2001      	movs	r0, #1
 800a504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a508:	f7ff f9a6 	bl	8009858 <__locale_ctype_ptr>
 800a50c:	682b      	ldr	r3, [r5, #0]
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	4418      	add	r0, r3
 800a512:	7843      	ldrb	r3, [r0, #1]
 800a514:	071b      	lsls	r3, r3, #28
 800a516:	d4ef      	bmi.n	800a4f8 <_scanf_chars+0x48>
 800a518:	6823      	ldr	r3, [r4, #0]
 800a51a:	3601      	adds	r6, #1
 800a51c:	06da      	lsls	r2, r3, #27
 800a51e:	bf5e      	ittt	pl
 800a520:	682b      	ldrpl	r3, [r5, #0]
 800a522:	781b      	ldrbpl	r3, [r3, #0]
 800a524:	703b      	strbpl	r3, [r7, #0]
 800a526:	682a      	ldr	r2, [r5, #0]
 800a528:	686b      	ldr	r3, [r5, #4]
 800a52a:	f102 0201 	add.w	r2, r2, #1
 800a52e:	602a      	str	r2, [r5, #0]
 800a530:	68a2      	ldr	r2, [r4, #8]
 800a532:	f103 33ff 	add.w	r3, r3, #4294967295
 800a536:	f102 32ff 	add.w	r2, r2, #4294967295
 800a53a:	606b      	str	r3, [r5, #4]
 800a53c:	bf58      	it	pl
 800a53e:	3701      	addpl	r7, #1
 800a540:	60a2      	str	r2, [r4, #8]
 800a542:	b142      	cbz	r2, 800a556 <_scanf_chars+0xa6>
 800a544:	2b00      	cmp	r3, #0
 800a546:	dcc9      	bgt.n	800a4dc <_scanf_chars+0x2c>
 800a548:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a54c:	4629      	mov	r1, r5
 800a54e:	4640      	mov	r0, r8
 800a550:	4798      	blx	r3
 800a552:	2800      	cmp	r0, #0
 800a554:	d0c2      	beq.n	800a4dc <_scanf_chars+0x2c>
 800a556:	6823      	ldr	r3, [r4, #0]
 800a558:	f013 0310 	ands.w	r3, r3, #16
 800a55c:	d105      	bne.n	800a56a <_scanf_chars+0xba>
 800a55e:	68e2      	ldr	r2, [r4, #12]
 800a560:	3201      	adds	r2, #1
 800a562:	60e2      	str	r2, [r4, #12]
 800a564:	69a2      	ldr	r2, [r4, #24]
 800a566:	b102      	cbz	r2, 800a56a <_scanf_chars+0xba>
 800a568:	703b      	strb	r3, [r7, #0]
 800a56a:	6923      	ldr	r3, [r4, #16]
 800a56c:	2000      	movs	r0, #0
 800a56e:	441e      	add	r6, r3
 800a570:	6126      	str	r6, [r4, #16]
 800a572:	e7c7      	b.n	800a504 <_scanf_chars+0x54>

0800a574 <_scanf_i>:
 800a574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a578:	460c      	mov	r4, r1
 800a57a:	469a      	mov	sl, r3
 800a57c:	4b74      	ldr	r3, [pc, #464]	; (800a750 <_scanf_i+0x1dc>)
 800a57e:	b087      	sub	sp, #28
 800a580:	4683      	mov	fp, r0
 800a582:	4616      	mov	r6, r2
 800a584:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a588:	ab03      	add	r3, sp, #12
 800a58a:	68a7      	ldr	r7, [r4, #8]
 800a58c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a590:	4b70      	ldr	r3, [pc, #448]	; (800a754 <_scanf_i+0x1e0>)
 800a592:	69a1      	ldr	r1, [r4, #24]
 800a594:	4a70      	ldr	r2, [pc, #448]	; (800a758 <_scanf_i+0x1e4>)
 800a596:	f104 091c 	add.w	r9, r4, #28
 800a59a:	2903      	cmp	r1, #3
 800a59c:	bf08      	it	eq
 800a59e:	461a      	moveq	r2, r3
 800a5a0:	1e7b      	subs	r3, r7, #1
 800a5a2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800a5a6:	bf84      	itt	hi
 800a5a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a5ac:	60a3      	strhi	r3, [r4, #8]
 800a5ae:	6823      	ldr	r3, [r4, #0]
 800a5b0:	bf88      	it	hi
 800a5b2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a5b6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a5ba:	6023      	str	r3, [r4, #0]
 800a5bc:	bf98      	it	ls
 800a5be:	2700      	movls	r7, #0
 800a5c0:	464b      	mov	r3, r9
 800a5c2:	f04f 0800 	mov.w	r8, #0
 800a5c6:	9200      	str	r2, [sp, #0]
 800a5c8:	bf88      	it	hi
 800a5ca:	197f      	addhi	r7, r7, r5
 800a5cc:	6831      	ldr	r1, [r6, #0]
 800a5ce:	9301      	str	r3, [sp, #4]
 800a5d0:	ab03      	add	r3, sp, #12
 800a5d2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a5d6:	2202      	movs	r2, #2
 800a5d8:	7809      	ldrb	r1, [r1, #0]
 800a5da:	f000 f9ef 	bl	800a9bc <memchr>
 800a5de:	9b01      	ldr	r3, [sp, #4]
 800a5e0:	b330      	cbz	r0, 800a630 <_scanf_i+0xbc>
 800a5e2:	f1b8 0f01 	cmp.w	r8, #1
 800a5e6:	d15a      	bne.n	800a69e <_scanf_i+0x12a>
 800a5e8:	6862      	ldr	r2, [r4, #4]
 800a5ea:	b92a      	cbnz	r2, 800a5f8 <_scanf_i+0x84>
 800a5ec:	2108      	movs	r1, #8
 800a5ee:	6822      	ldr	r2, [r4, #0]
 800a5f0:	6061      	str	r1, [r4, #4]
 800a5f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5f6:	6022      	str	r2, [r4, #0]
 800a5f8:	6822      	ldr	r2, [r4, #0]
 800a5fa:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a5fe:	6022      	str	r2, [r4, #0]
 800a600:	68a2      	ldr	r2, [r4, #8]
 800a602:	1e51      	subs	r1, r2, #1
 800a604:	60a1      	str	r1, [r4, #8]
 800a606:	b19a      	cbz	r2, 800a630 <_scanf_i+0xbc>
 800a608:	6832      	ldr	r2, [r6, #0]
 800a60a:	1c5d      	adds	r5, r3, #1
 800a60c:	1c51      	adds	r1, r2, #1
 800a60e:	6031      	str	r1, [r6, #0]
 800a610:	7812      	ldrb	r2, [r2, #0]
 800a612:	701a      	strb	r2, [r3, #0]
 800a614:	6873      	ldr	r3, [r6, #4]
 800a616:	3b01      	subs	r3, #1
 800a618:	2b00      	cmp	r3, #0
 800a61a:	6073      	str	r3, [r6, #4]
 800a61c:	dc07      	bgt.n	800a62e <_scanf_i+0xba>
 800a61e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a622:	4631      	mov	r1, r6
 800a624:	4658      	mov	r0, fp
 800a626:	4798      	blx	r3
 800a628:	2800      	cmp	r0, #0
 800a62a:	f040 8087 	bne.w	800a73c <_scanf_i+0x1c8>
 800a62e:	462b      	mov	r3, r5
 800a630:	f108 0801 	add.w	r8, r8, #1
 800a634:	f1b8 0f03 	cmp.w	r8, #3
 800a638:	d1c8      	bne.n	800a5cc <_scanf_i+0x58>
 800a63a:	6862      	ldr	r2, [r4, #4]
 800a63c:	b90a      	cbnz	r2, 800a642 <_scanf_i+0xce>
 800a63e:	220a      	movs	r2, #10
 800a640:	6062      	str	r2, [r4, #4]
 800a642:	6862      	ldr	r2, [r4, #4]
 800a644:	4945      	ldr	r1, [pc, #276]	; (800a75c <_scanf_i+0x1e8>)
 800a646:	6960      	ldr	r0, [r4, #20]
 800a648:	1a89      	subs	r1, r1, r2
 800a64a:	9301      	str	r3, [sp, #4]
 800a64c:	f000 f898 	bl	800a780 <__sccl>
 800a650:	9b01      	ldr	r3, [sp, #4]
 800a652:	f04f 0800 	mov.w	r8, #0
 800a656:	461d      	mov	r5, r3
 800a658:	68a3      	ldr	r3, [r4, #8]
 800a65a:	6822      	ldr	r2, [r4, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d03b      	beq.n	800a6d8 <_scanf_i+0x164>
 800a660:	6831      	ldr	r1, [r6, #0]
 800a662:	6960      	ldr	r0, [r4, #20]
 800a664:	f891 c000 	ldrb.w	ip, [r1]
 800a668:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a66c:	2800      	cmp	r0, #0
 800a66e:	d033      	beq.n	800a6d8 <_scanf_i+0x164>
 800a670:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a674:	d121      	bne.n	800a6ba <_scanf_i+0x146>
 800a676:	0510      	lsls	r0, r2, #20
 800a678:	d51f      	bpl.n	800a6ba <_scanf_i+0x146>
 800a67a:	f108 0801 	add.w	r8, r8, #1
 800a67e:	b117      	cbz	r7, 800a686 <_scanf_i+0x112>
 800a680:	3301      	adds	r3, #1
 800a682:	3f01      	subs	r7, #1
 800a684:	60a3      	str	r3, [r4, #8]
 800a686:	6873      	ldr	r3, [r6, #4]
 800a688:	3b01      	subs	r3, #1
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	6073      	str	r3, [r6, #4]
 800a68e:	dd1c      	ble.n	800a6ca <_scanf_i+0x156>
 800a690:	6833      	ldr	r3, [r6, #0]
 800a692:	3301      	adds	r3, #1
 800a694:	6033      	str	r3, [r6, #0]
 800a696:	68a3      	ldr	r3, [r4, #8]
 800a698:	3b01      	subs	r3, #1
 800a69a:	60a3      	str	r3, [r4, #8]
 800a69c:	e7dc      	b.n	800a658 <_scanf_i+0xe4>
 800a69e:	f1b8 0f02 	cmp.w	r8, #2
 800a6a2:	d1ad      	bne.n	800a600 <_scanf_i+0x8c>
 800a6a4:	6822      	ldr	r2, [r4, #0]
 800a6a6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a6aa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a6ae:	d1bf      	bne.n	800a630 <_scanf_i+0xbc>
 800a6b0:	2110      	movs	r1, #16
 800a6b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a6b6:	6061      	str	r1, [r4, #4]
 800a6b8:	e7a1      	b.n	800a5fe <_scanf_i+0x8a>
 800a6ba:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a6be:	6022      	str	r2, [r4, #0]
 800a6c0:	780b      	ldrb	r3, [r1, #0]
 800a6c2:	3501      	adds	r5, #1
 800a6c4:	f805 3c01 	strb.w	r3, [r5, #-1]
 800a6c8:	e7dd      	b.n	800a686 <_scanf_i+0x112>
 800a6ca:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a6ce:	4631      	mov	r1, r6
 800a6d0:	4658      	mov	r0, fp
 800a6d2:	4798      	blx	r3
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d0de      	beq.n	800a696 <_scanf_i+0x122>
 800a6d8:	6823      	ldr	r3, [r4, #0]
 800a6da:	05d9      	lsls	r1, r3, #23
 800a6dc:	d50c      	bpl.n	800a6f8 <_scanf_i+0x184>
 800a6de:	454d      	cmp	r5, r9
 800a6e0:	d908      	bls.n	800a6f4 <_scanf_i+0x180>
 800a6e2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a6e6:	1e6f      	subs	r7, r5, #1
 800a6e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a6ec:	4632      	mov	r2, r6
 800a6ee:	4658      	mov	r0, fp
 800a6f0:	4798      	blx	r3
 800a6f2:	463d      	mov	r5, r7
 800a6f4:	454d      	cmp	r5, r9
 800a6f6:	d029      	beq.n	800a74c <_scanf_i+0x1d8>
 800a6f8:	6822      	ldr	r2, [r4, #0]
 800a6fa:	f012 0210 	ands.w	r2, r2, #16
 800a6fe:	d113      	bne.n	800a728 <_scanf_i+0x1b4>
 800a700:	702a      	strb	r2, [r5, #0]
 800a702:	6863      	ldr	r3, [r4, #4]
 800a704:	4649      	mov	r1, r9
 800a706:	4658      	mov	r0, fp
 800a708:	9e00      	ldr	r6, [sp, #0]
 800a70a:	47b0      	blx	r6
 800a70c:	f8da 3000 	ldr.w	r3, [sl]
 800a710:	6821      	ldr	r1, [r4, #0]
 800a712:	1d1a      	adds	r2, r3, #4
 800a714:	f8ca 2000 	str.w	r2, [sl]
 800a718:	f011 0f20 	tst.w	r1, #32
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	d010      	beq.n	800a742 <_scanf_i+0x1ce>
 800a720:	6018      	str	r0, [r3, #0]
 800a722:	68e3      	ldr	r3, [r4, #12]
 800a724:	3301      	adds	r3, #1
 800a726:	60e3      	str	r3, [r4, #12]
 800a728:	2000      	movs	r0, #0
 800a72a:	eba5 0509 	sub.w	r5, r5, r9
 800a72e:	44a8      	add	r8, r5
 800a730:	6925      	ldr	r5, [r4, #16]
 800a732:	4445      	add	r5, r8
 800a734:	6125      	str	r5, [r4, #16]
 800a736:	b007      	add	sp, #28
 800a738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a73c:	f04f 0800 	mov.w	r8, #0
 800a740:	e7ca      	b.n	800a6d8 <_scanf_i+0x164>
 800a742:	07ca      	lsls	r2, r1, #31
 800a744:	bf4c      	ite	mi
 800a746:	8018      	strhmi	r0, [r3, #0]
 800a748:	6018      	strpl	r0, [r3, #0]
 800a74a:	e7ea      	b.n	800a722 <_scanf_i+0x1ae>
 800a74c:	2001      	movs	r0, #1
 800a74e:	e7f2      	b.n	800a736 <_scanf_i+0x1c2>
 800a750:	0800b034 	.word	0x0800b034
 800a754:	08009135 	.word	0x08009135
 800a758:	0800a8fd 	.word	0x0800a8fd
 800a75c:	0800beb0 	.word	0x0800beb0

0800a760 <_sbrk_r>:
 800a760:	b538      	push	{r3, r4, r5, lr}
 800a762:	2300      	movs	r3, #0
 800a764:	4c05      	ldr	r4, [pc, #20]	; (800a77c <_sbrk_r+0x1c>)
 800a766:	4605      	mov	r5, r0
 800a768:	4608      	mov	r0, r1
 800a76a:	6023      	str	r3, [r4, #0]
 800a76c:	f7f8 f820 	bl	80027b0 <_sbrk>
 800a770:	1c43      	adds	r3, r0, #1
 800a772:	d102      	bne.n	800a77a <_sbrk_r+0x1a>
 800a774:	6823      	ldr	r3, [r4, #0]
 800a776:	b103      	cbz	r3, 800a77a <_sbrk_r+0x1a>
 800a778:	602b      	str	r3, [r5, #0]
 800a77a:	bd38      	pop	{r3, r4, r5, pc}
 800a77c:	20001c2c 	.word	0x20001c2c

0800a780 <__sccl>:
 800a780:	b570      	push	{r4, r5, r6, lr}
 800a782:	780b      	ldrb	r3, [r1, #0]
 800a784:	1e44      	subs	r4, r0, #1
 800a786:	2b5e      	cmp	r3, #94	; 0x5e
 800a788:	bf13      	iteet	ne
 800a78a:	1c4a      	addne	r2, r1, #1
 800a78c:	1c8a      	addeq	r2, r1, #2
 800a78e:	784b      	ldrbeq	r3, [r1, #1]
 800a790:	2100      	movne	r1, #0
 800a792:	bf08      	it	eq
 800a794:	2101      	moveq	r1, #1
 800a796:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800a79a:	f804 1f01 	strb.w	r1, [r4, #1]!
 800a79e:	42ac      	cmp	r4, r5
 800a7a0:	d1fb      	bne.n	800a79a <__sccl+0x1a>
 800a7a2:	b913      	cbnz	r3, 800a7aa <__sccl+0x2a>
 800a7a4:	3a01      	subs	r2, #1
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	bd70      	pop	{r4, r5, r6, pc}
 800a7aa:	f081 0401 	eor.w	r4, r1, #1
 800a7ae:	54c4      	strb	r4, [r0, r3]
 800a7b0:	1c51      	adds	r1, r2, #1
 800a7b2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800a7b6:	1e4e      	subs	r6, r1, #1
 800a7b8:	2d2d      	cmp	r5, #45	; 0x2d
 800a7ba:	460a      	mov	r2, r1
 800a7bc:	d006      	beq.n	800a7cc <__sccl+0x4c>
 800a7be:	2d5d      	cmp	r5, #93	; 0x5d
 800a7c0:	d0f1      	beq.n	800a7a6 <__sccl+0x26>
 800a7c2:	b90d      	cbnz	r5, 800a7c8 <__sccl+0x48>
 800a7c4:	4632      	mov	r2, r6
 800a7c6:	e7ee      	b.n	800a7a6 <__sccl+0x26>
 800a7c8:	462b      	mov	r3, r5
 800a7ca:	e7f0      	b.n	800a7ae <__sccl+0x2e>
 800a7cc:	780e      	ldrb	r6, [r1, #0]
 800a7ce:	2e5d      	cmp	r6, #93	; 0x5d
 800a7d0:	d0fa      	beq.n	800a7c8 <__sccl+0x48>
 800a7d2:	42b3      	cmp	r3, r6
 800a7d4:	dcf8      	bgt.n	800a7c8 <__sccl+0x48>
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	429e      	cmp	r6, r3
 800a7da:	54c4      	strb	r4, [r0, r3]
 800a7dc:	dcfb      	bgt.n	800a7d6 <__sccl+0x56>
 800a7de:	3102      	adds	r1, #2
 800a7e0:	e7e7      	b.n	800a7b2 <__sccl+0x32>

0800a7e2 <strncmp>:
 800a7e2:	b510      	push	{r4, lr}
 800a7e4:	b16a      	cbz	r2, 800a802 <strncmp+0x20>
 800a7e6:	3901      	subs	r1, #1
 800a7e8:	1884      	adds	r4, r0, r2
 800a7ea:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a7ee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d103      	bne.n	800a7fe <strncmp+0x1c>
 800a7f6:	42a0      	cmp	r0, r4
 800a7f8:	d001      	beq.n	800a7fe <strncmp+0x1c>
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1f5      	bne.n	800a7ea <strncmp+0x8>
 800a7fe:	1a98      	subs	r0, r3, r2
 800a800:	bd10      	pop	{r4, pc}
 800a802:	4610      	mov	r0, r2
 800a804:	e7fc      	b.n	800a800 <strncmp+0x1e>

0800a806 <_strtoul_l.isra.0>:
 800a806:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a80a:	4680      	mov	r8, r0
 800a80c:	4689      	mov	r9, r1
 800a80e:	4692      	mov	sl, r2
 800a810:	461e      	mov	r6, r3
 800a812:	460f      	mov	r7, r1
 800a814:	463d      	mov	r5, r7
 800a816:	9808      	ldr	r0, [sp, #32]
 800a818:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a81c:	f7ff f818 	bl	8009850 <__locale_ctype_ptr_l>
 800a820:	4420      	add	r0, r4
 800a822:	7843      	ldrb	r3, [r0, #1]
 800a824:	f013 0308 	ands.w	r3, r3, #8
 800a828:	d130      	bne.n	800a88c <_strtoul_l.isra.0+0x86>
 800a82a:	2c2d      	cmp	r4, #45	; 0x2d
 800a82c:	d130      	bne.n	800a890 <_strtoul_l.isra.0+0x8a>
 800a82e:	2101      	movs	r1, #1
 800a830:	787c      	ldrb	r4, [r7, #1]
 800a832:	1cbd      	adds	r5, r7, #2
 800a834:	2e00      	cmp	r6, #0
 800a836:	d05c      	beq.n	800a8f2 <_strtoul_l.isra.0+0xec>
 800a838:	2e10      	cmp	r6, #16
 800a83a:	d109      	bne.n	800a850 <_strtoul_l.isra.0+0x4a>
 800a83c:	2c30      	cmp	r4, #48	; 0x30
 800a83e:	d107      	bne.n	800a850 <_strtoul_l.isra.0+0x4a>
 800a840:	782b      	ldrb	r3, [r5, #0]
 800a842:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a846:	2b58      	cmp	r3, #88	; 0x58
 800a848:	d14e      	bne.n	800a8e8 <_strtoul_l.isra.0+0xe2>
 800a84a:	2610      	movs	r6, #16
 800a84c:	786c      	ldrb	r4, [r5, #1]
 800a84e:	3502      	adds	r5, #2
 800a850:	f04f 32ff 	mov.w	r2, #4294967295
 800a854:	fbb2 f2f6 	udiv	r2, r2, r6
 800a858:	2300      	movs	r3, #0
 800a85a:	fb06 fc02 	mul.w	ip, r6, r2
 800a85e:	4618      	mov	r0, r3
 800a860:	ea6f 0c0c 	mvn.w	ip, ip
 800a864:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a868:	2f09      	cmp	r7, #9
 800a86a:	d817      	bhi.n	800a89c <_strtoul_l.isra.0+0x96>
 800a86c:	463c      	mov	r4, r7
 800a86e:	42a6      	cmp	r6, r4
 800a870:	dd23      	ble.n	800a8ba <_strtoul_l.isra.0+0xb4>
 800a872:	2b00      	cmp	r3, #0
 800a874:	db1e      	blt.n	800a8b4 <_strtoul_l.isra.0+0xae>
 800a876:	4282      	cmp	r2, r0
 800a878:	d31c      	bcc.n	800a8b4 <_strtoul_l.isra.0+0xae>
 800a87a:	d101      	bne.n	800a880 <_strtoul_l.isra.0+0x7a>
 800a87c:	45a4      	cmp	ip, r4
 800a87e:	db19      	blt.n	800a8b4 <_strtoul_l.isra.0+0xae>
 800a880:	2301      	movs	r3, #1
 800a882:	fb00 4006 	mla	r0, r0, r6, r4
 800a886:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a88a:	e7eb      	b.n	800a864 <_strtoul_l.isra.0+0x5e>
 800a88c:	462f      	mov	r7, r5
 800a88e:	e7c1      	b.n	800a814 <_strtoul_l.isra.0+0xe>
 800a890:	2c2b      	cmp	r4, #43	; 0x2b
 800a892:	bf04      	itt	eq
 800a894:	1cbd      	addeq	r5, r7, #2
 800a896:	787c      	ldrbeq	r4, [r7, #1]
 800a898:	4619      	mov	r1, r3
 800a89a:	e7cb      	b.n	800a834 <_strtoul_l.isra.0+0x2e>
 800a89c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a8a0:	2f19      	cmp	r7, #25
 800a8a2:	d801      	bhi.n	800a8a8 <_strtoul_l.isra.0+0xa2>
 800a8a4:	3c37      	subs	r4, #55	; 0x37
 800a8a6:	e7e2      	b.n	800a86e <_strtoul_l.isra.0+0x68>
 800a8a8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a8ac:	2f19      	cmp	r7, #25
 800a8ae:	d804      	bhi.n	800a8ba <_strtoul_l.isra.0+0xb4>
 800a8b0:	3c57      	subs	r4, #87	; 0x57
 800a8b2:	e7dc      	b.n	800a86e <_strtoul_l.isra.0+0x68>
 800a8b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8b8:	e7e5      	b.n	800a886 <_strtoul_l.isra.0+0x80>
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	da09      	bge.n	800a8d2 <_strtoul_l.isra.0+0xcc>
 800a8be:	2322      	movs	r3, #34	; 0x22
 800a8c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8c4:	f8c8 3000 	str.w	r3, [r8]
 800a8c8:	f1ba 0f00 	cmp.w	sl, #0
 800a8cc:	d107      	bne.n	800a8de <_strtoul_l.isra.0+0xd8>
 800a8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8d2:	b101      	cbz	r1, 800a8d6 <_strtoul_l.isra.0+0xd0>
 800a8d4:	4240      	negs	r0, r0
 800a8d6:	f1ba 0f00 	cmp.w	sl, #0
 800a8da:	d0f8      	beq.n	800a8ce <_strtoul_l.isra.0+0xc8>
 800a8dc:	b10b      	cbz	r3, 800a8e2 <_strtoul_l.isra.0+0xdc>
 800a8de:	f105 39ff 	add.w	r9, r5, #4294967295
 800a8e2:	f8ca 9000 	str.w	r9, [sl]
 800a8e6:	e7f2      	b.n	800a8ce <_strtoul_l.isra.0+0xc8>
 800a8e8:	2430      	movs	r4, #48	; 0x30
 800a8ea:	2e00      	cmp	r6, #0
 800a8ec:	d1b0      	bne.n	800a850 <_strtoul_l.isra.0+0x4a>
 800a8ee:	2608      	movs	r6, #8
 800a8f0:	e7ae      	b.n	800a850 <_strtoul_l.isra.0+0x4a>
 800a8f2:	2c30      	cmp	r4, #48	; 0x30
 800a8f4:	d0a4      	beq.n	800a840 <_strtoul_l.isra.0+0x3a>
 800a8f6:	260a      	movs	r6, #10
 800a8f8:	e7aa      	b.n	800a850 <_strtoul_l.isra.0+0x4a>
	...

0800a8fc <_strtoul_r>:
 800a8fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8fe:	4c06      	ldr	r4, [pc, #24]	; (800a918 <_strtoul_r+0x1c>)
 800a900:	4d06      	ldr	r5, [pc, #24]	; (800a91c <_strtoul_r+0x20>)
 800a902:	6824      	ldr	r4, [r4, #0]
 800a904:	6a24      	ldr	r4, [r4, #32]
 800a906:	2c00      	cmp	r4, #0
 800a908:	bf08      	it	eq
 800a90a:	462c      	moveq	r4, r5
 800a90c:	9400      	str	r4, [sp, #0]
 800a90e:	f7ff ff7a 	bl	800a806 <_strtoul_l.isra.0>
 800a912:	b003      	add	sp, #12
 800a914:	bd30      	pop	{r4, r5, pc}
 800a916:	bf00      	nop
 800a918:	200001b4 	.word	0x200001b4
 800a91c:	20000218 	.word	0x20000218

0800a920 <__submore>:
 800a920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a924:	460c      	mov	r4, r1
 800a926:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a92c:	4299      	cmp	r1, r3
 800a92e:	d11b      	bne.n	800a968 <__submore+0x48>
 800a930:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a934:	f7ff fbb8 	bl	800a0a8 <_malloc_r>
 800a938:	b918      	cbnz	r0, 800a942 <__submore+0x22>
 800a93a:	f04f 30ff 	mov.w	r0, #4294967295
 800a93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a946:	63a3      	str	r3, [r4, #56]	; 0x38
 800a948:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a94c:	6360      	str	r0, [r4, #52]	; 0x34
 800a94e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a952:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a956:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a95a:	7043      	strb	r3, [r0, #1]
 800a95c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a960:	7003      	strb	r3, [r0, #0]
 800a962:	6020      	str	r0, [r4, #0]
 800a964:	2000      	movs	r0, #0
 800a966:	e7ea      	b.n	800a93e <__submore+0x1e>
 800a968:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a96a:	0077      	lsls	r7, r6, #1
 800a96c:	463a      	mov	r2, r7
 800a96e:	f000 f881 	bl	800aa74 <_realloc_r>
 800a972:	4605      	mov	r5, r0
 800a974:	2800      	cmp	r0, #0
 800a976:	d0e0      	beq.n	800a93a <__submore+0x1a>
 800a978:	eb00 0806 	add.w	r8, r0, r6
 800a97c:	4601      	mov	r1, r0
 800a97e:	4632      	mov	r2, r6
 800a980:	4640      	mov	r0, r8
 800a982:	f7fd fcbe 	bl	8008302 <memcpy>
 800a986:	f8c4 8000 	str.w	r8, [r4]
 800a98a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a98e:	e7e9      	b.n	800a964 <__submore+0x44>

0800a990 <__ascii_wctomb>:
 800a990:	b149      	cbz	r1, 800a9a6 <__ascii_wctomb+0x16>
 800a992:	2aff      	cmp	r2, #255	; 0xff
 800a994:	bf8b      	itete	hi
 800a996:	238a      	movhi	r3, #138	; 0x8a
 800a998:	700a      	strbls	r2, [r1, #0]
 800a99a:	6003      	strhi	r3, [r0, #0]
 800a99c:	2001      	movls	r0, #1
 800a99e:	bf88      	it	hi
 800a9a0:	f04f 30ff 	movhi.w	r0, #4294967295
 800a9a4:	4770      	bx	lr
 800a9a6:	4608      	mov	r0, r1
 800a9a8:	4770      	bx	lr
	...

0800a9ac <malloc>:
 800a9ac:	4b02      	ldr	r3, [pc, #8]	; (800a9b8 <malloc+0xc>)
 800a9ae:	4601      	mov	r1, r0
 800a9b0:	6818      	ldr	r0, [r3, #0]
 800a9b2:	f7ff bb79 	b.w	800a0a8 <_malloc_r>
 800a9b6:	bf00      	nop
 800a9b8:	200001b4 	.word	0x200001b4

0800a9bc <memchr>:
 800a9bc:	b510      	push	{r4, lr}
 800a9be:	b2c9      	uxtb	r1, r1
 800a9c0:	4402      	add	r2, r0
 800a9c2:	4290      	cmp	r0, r2
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	d101      	bne.n	800a9cc <memchr+0x10>
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	e003      	b.n	800a9d4 <memchr+0x18>
 800a9cc:	781c      	ldrb	r4, [r3, #0]
 800a9ce:	3001      	adds	r0, #1
 800a9d0:	428c      	cmp	r4, r1
 800a9d2:	d1f6      	bne.n	800a9c2 <memchr+0x6>
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	bd10      	pop	{r4, pc}

0800a9d8 <__malloc_lock>:
 800a9d8:	4770      	bx	lr

0800a9da <__malloc_unlock>:
 800a9da:	4770      	bx	lr

0800a9dc <_free_r>:
 800a9dc:	b538      	push	{r3, r4, r5, lr}
 800a9de:	4605      	mov	r5, r0
 800a9e0:	2900      	cmp	r1, #0
 800a9e2:	d043      	beq.n	800aa6c <_free_r+0x90>
 800a9e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9e8:	1f0c      	subs	r4, r1, #4
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	bfb8      	it	lt
 800a9ee:	18e4      	addlt	r4, r4, r3
 800a9f0:	f7ff fff2 	bl	800a9d8 <__malloc_lock>
 800a9f4:	4a1e      	ldr	r2, [pc, #120]	; (800aa70 <_free_r+0x94>)
 800a9f6:	6813      	ldr	r3, [r2, #0]
 800a9f8:	4610      	mov	r0, r2
 800a9fa:	b933      	cbnz	r3, 800aa0a <_free_r+0x2e>
 800a9fc:	6063      	str	r3, [r4, #4]
 800a9fe:	6014      	str	r4, [r2, #0]
 800aa00:	4628      	mov	r0, r5
 800aa02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa06:	f7ff bfe8 	b.w	800a9da <__malloc_unlock>
 800aa0a:	42a3      	cmp	r3, r4
 800aa0c:	d90b      	bls.n	800aa26 <_free_r+0x4a>
 800aa0e:	6821      	ldr	r1, [r4, #0]
 800aa10:	1862      	adds	r2, r4, r1
 800aa12:	4293      	cmp	r3, r2
 800aa14:	bf01      	itttt	eq
 800aa16:	681a      	ldreq	r2, [r3, #0]
 800aa18:	685b      	ldreq	r3, [r3, #4]
 800aa1a:	1852      	addeq	r2, r2, r1
 800aa1c:	6022      	streq	r2, [r4, #0]
 800aa1e:	6063      	str	r3, [r4, #4]
 800aa20:	6004      	str	r4, [r0, #0]
 800aa22:	e7ed      	b.n	800aa00 <_free_r+0x24>
 800aa24:	4613      	mov	r3, r2
 800aa26:	685a      	ldr	r2, [r3, #4]
 800aa28:	b10a      	cbz	r2, 800aa2e <_free_r+0x52>
 800aa2a:	42a2      	cmp	r2, r4
 800aa2c:	d9fa      	bls.n	800aa24 <_free_r+0x48>
 800aa2e:	6819      	ldr	r1, [r3, #0]
 800aa30:	1858      	adds	r0, r3, r1
 800aa32:	42a0      	cmp	r0, r4
 800aa34:	d10b      	bne.n	800aa4e <_free_r+0x72>
 800aa36:	6820      	ldr	r0, [r4, #0]
 800aa38:	4401      	add	r1, r0
 800aa3a:	1858      	adds	r0, r3, r1
 800aa3c:	4282      	cmp	r2, r0
 800aa3e:	6019      	str	r1, [r3, #0]
 800aa40:	d1de      	bne.n	800aa00 <_free_r+0x24>
 800aa42:	6810      	ldr	r0, [r2, #0]
 800aa44:	6852      	ldr	r2, [r2, #4]
 800aa46:	4401      	add	r1, r0
 800aa48:	6019      	str	r1, [r3, #0]
 800aa4a:	605a      	str	r2, [r3, #4]
 800aa4c:	e7d8      	b.n	800aa00 <_free_r+0x24>
 800aa4e:	d902      	bls.n	800aa56 <_free_r+0x7a>
 800aa50:	230c      	movs	r3, #12
 800aa52:	602b      	str	r3, [r5, #0]
 800aa54:	e7d4      	b.n	800aa00 <_free_r+0x24>
 800aa56:	6820      	ldr	r0, [r4, #0]
 800aa58:	1821      	adds	r1, r4, r0
 800aa5a:	428a      	cmp	r2, r1
 800aa5c:	bf01      	itttt	eq
 800aa5e:	6811      	ldreq	r1, [r2, #0]
 800aa60:	6852      	ldreq	r2, [r2, #4]
 800aa62:	1809      	addeq	r1, r1, r0
 800aa64:	6021      	streq	r1, [r4, #0]
 800aa66:	6062      	str	r2, [r4, #4]
 800aa68:	605c      	str	r4, [r3, #4]
 800aa6a:	e7c9      	b.n	800aa00 <_free_r+0x24>
 800aa6c:	bd38      	pop	{r3, r4, r5, pc}
 800aa6e:	bf00      	nop
 800aa70:	200005e8 	.word	0x200005e8

0800aa74 <_realloc_r>:
 800aa74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa76:	4607      	mov	r7, r0
 800aa78:	4614      	mov	r4, r2
 800aa7a:	460e      	mov	r6, r1
 800aa7c:	b921      	cbnz	r1, 800aa88 <_realloc_r+0x14>
 800aa7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aa82:	4611      	mov	r1, r2
 800aa84:	f7ff bb10 	b.w	800a0a8 <_malloc_r>
 800aa88:	b922      	cbnz	r2, 800aa94 <_realloc_r+0x20>
 800aa8a:	f7ff ffa7 	bl	800a9dc <_free_r>
 800aa8e:	4625      	mov	r5, r4
 800aa90:	4628      	mov	r0, r5
 800aa92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa94:	f000 f814 	bl	800aac0 <_malloc_usable_size_r>
 800aa98:	42a0      	cmp	r0, r4
 800aa9a:	d20f      	bcs.n	800aabc <_realloc_r+0x48>
 800aa9c:	4621      	mov	r1, r4
 800aa9e:	4638      	mov	r0, r7
 800aaa0:	f7ff fb02 	bl	800a0a8 <_malloc_r>
 800aaa4:	4605      	mov	r5, r0
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	d0f2      	beq.n	800aa90 <_realloc_r+0x1c>
 800aaaa:	4631      	mov	r1, r6
 800aaac:	4622      	mov	r2, r4
 800aaae:	f7fd fc28 	bl	8008302 <memcpy>
 800aab2:	4631      	mov	r1, r6
 800aab4:	4638      	mov	r0, r7
 800aab6:	f7ff ff91 	bl	800a9dc <_free_r>
 800aaba:	e7e9      	b.n	800aa90 <_realloc_r+0x1c>
 800aabc:	4635      	mov	r5, r6
 800aabe:	e7e7      	b.n	800aa90 <_realloc_r+0x1c>

0800aac0 <_malloc_usable_size_r>:
 800aac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aac4:	1f18      	subs	r0, r3, #4
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	bfbc      	itt	lt
 800aaca:	580b      	ldrlt	r3, [r1, r0]
 800aacc:	18c0      	addlt	r0, r0, r3
 800aace:	4770      	bx	lr

0800aad0 <fmod>:
 800aad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aad4:	b08b      	sub	sp, #44	; 0x2c
 800aad6:	461f      	mov	r7, r3
 800aad8:	4604      	mov	r4, r0
 800aada:	460d      	mov	r5, r1
 800aadc:	4616      	mov	r6, r2
 800aade:	f000 f8a7 	bl	800ac30 <__ieee754_fmod>
 800aae2:	4b27      	ldr	r3, [pc, #156]	; (800ab80 <fmod+0xb0>)
 800aae4:	4680      	mov	r8, r0
 800aae6:	f993 a000 	ldrsb.w	sl, [r3]
 800aaea:	4689      	mov	r9, r1
 800aaec:	f1ba 3fff 	cmp.w	sl, #4294967295
 800aaf0:	d030      	beq.n	800ab54 <fmod+0x84>
 800aaf2:	4632      	mov	r2, r6
 800aaf4:	463b      	mov	r3, r7
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	4639      	mov	r1, r7
 800aafa:	f7f5 ff87 	bl	8000a0c <__aeabi_dcmpun>
 800aafe:	bb48      	cbnz	r0, 800ab54 <fmod+0x84>
 800ab00:	4622      	mov	r2, r4
 800ab02:	462b      	mov	r3, r5
 800ab04:	4620      	mov	r0, r4
 800ab06:	4629      	mov	r1, r5
 800ab08:	f7f5 ff80 	bl	8000a0c <__aeabi_dcmpun>
 800ab0c:	4683      	mov	fp, r0
 800ab0e:	bb08      	cbnz	r0, 800ab54 <fmod+0x84>
 800ab10:	2200      	movs	r2, #0
 800ab12:	2300      	movs	r3, #0
 800ab14:	4630      	mov	r0, r6
 800ab16:	4639      	mov	r1, r7
 800ab18:	f7f5 ff46 	bl	80009a8 <__aeabi_dcmpeq>
 800ab1c:	b1d0      	cbz	r0, 800ab54 <fmod+0x84>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	9300      	str	r3, [sp, #0]
 800ab22:	4b18      	ldr	r3, [pc, #96]	; (800ab84 <fmod+0xb4>)
 800ab24:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ab28:	9301      	str	r3, [sp, #4]
 800ab2a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ab2e:	f8cd b020 	str.w	fp, [sp, #32]
 800ab32:	f1ba 0f00 	cmp.w	sl, #0
 800ab36:	d112      	bne.n	800ab5e <fmod+0x8e>
 800ab38:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ab3c:	4668      	mov	r0, sp
 800ab3e:	f000 fa2d 	bl	800af9c <matherr>
 800ab42:	b1b8      	cbz	r0, 800ab74 <fmod+0xa4>
 800ab44:	9b08      	ldr	r3, [sp, #32]
 800ab46:	b11b      	cbz	r3, 800ab50 <fmod+0x80>
 800ab48:	f7fd fb88 	bl	800825c <__errno>
 800ab4c:	9b08      	ldr	r3, [sp, #32]
 800ab4e:	6003      	str	r3, [r0, #0]
 800ab50:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800ab54:	4640      	mov	r0, r8
 800ab56:	4649      	mov	r1, r9
 800ab58:	b00b      	add	sp, #44	; 0x2c
 800ab5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab5e:	2200      	movs	r2, #0
 800ab60:	2300      	movs	r3, #0
 800ab62:	4610      	mov	r0, r2
 800ab64:	4619      	mov	r1, r3
 800ab66:	f7f5 fde1 	bl	800072c <__aeabi_ddiv>
 800ab6a:	f1ba 0f02 	cmp.w	sl, #2
 800ab6e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ab72:	d1e3      	bne.n	800ab3c <fmod+0x6c>
 800ab74:	f7fd fb72 	bl	800825c <__errno>
 800ab78:	2321      	movs	r3, #33	; 0x21
 800ab7a:	6003      	str	r3, [r0, #0]
 800ab7c:	e7e2      	b.n	800ab44 <fmod+0x74>
 800ab7e:	bf00      	nop
 800ab80:	20000384 	.word	0x20000384
 800ab84:	0800c01c 	.word	0x0800c01c

0800ab88 <sqrt>:
 800ab88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab8c:	b08b      	sub	sp, #44	; 0x2c
 800ab8e:	4604      	mov	r4, r0
 800ab90:	460d      	mov	r5, r1
 800ab92:	f000 f957 	bl	800ae44 <__ieee754_sqrt>
 800ab96:	4b24      	ldr	r3, [pc, #144]	; (800ac28 <sqrt+0xa0>)
 800ab98:	4680      	mov	r8, r0
 800ab9a:	f993 a000 	ldrsb.w	sl, [r3]
 800ab9e:	4689      	mov	r9, r1
 800aba0:	f1ba 3fff 	cmp.w	sl, #4294967295
 800aba4:	d02b      	beq.n	800abfe <sqrt+0x76>
 800aba6:	4622      	mov	r2, r4
 800aba8:	462b      	mov	r3, r5
 800abaa:	4620      	mov	r0, r4
 800abac:	4629      	mov	r1, r5
 800abae:	f7f5 ff2d 	bl	8000a0c <__aeabi_dcmpun>
 800abb2:	4683      	mov	fp, r0
 800abb4:	bb18      	cbnz	r0, 800abfe <sqrt+0x76>
 800abb6:	2600      	movs	r6, #0
 800abb8:	2700      	movs	r7, #0
 800abba:	4632      	mov	r2, r6
 800abbc:	463b      	mov	r3, r7
 800abbe:	4620      	mov	r0, r4
 800abc0:	4629      	mov	r1, r5
 800abc2:	f7f5 fefb 	bl	80009bc <__aeabi_dcmplt>
 800abc6:	b1d0      	cbz	r0, 800abfe <sqrt+0x76>
 800abc8:	2301      	movs	r3, #1
 800abca:	9300      	str	r3, [sp, #0]
 800abcc:	4b17      	ldr	r3, [pc, #92]	; (800ac2c <sqrt+0xa4>)
 800abce:	f8cd b020 	str.w	fp, [sp, #32]
 800abd2:	9301      	str	r3, [sp, #4]
 800abd4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800abd8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800abdc:	f1ba 0f00 	cmp.w	sl, #0
 800abe0:	d112      	bne.n	800ac08 <sqrt+0x80>
 800abe2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800abe6:	4668      	mov	r0, sp
 800abe8:	f000 f9d8 	bl	800af9c <matherr>
 800abec:	b1b8      	cbz	r0, 800ac1e <sqrt+0x96>
 800abee:	9b08      	ldr	r3, [sp, #32]
 800abf0:	b11b      	cbz	r3, 800abfa <sqrt+0x72>
 800abf2:	f7fd fb33 	bl	800825c <__errno>
 800abf6:	9b08      	ldr	r3, [sp, #32]
 800abf8:	6003      	str	r3, [r0, #0]
 800abfa:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800abfe:	4640      	mov	r0, r8
 800ac00:	4649      	mov	r1, r9
 800ac02:	b00b      	add	sp, #44	; 0x2c
 800ac04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac08:	4632      	mov	r2, r6
 800ac0a:	463b      	mov	r3, r7
 800ac0c:	4630      	mov	r0, r6
 800ac0e:	4639      	mov	r1, r7
 800ac10:	f7f5 fd8c 	bl	800072c <__aeabi_ddiv>
 800ac14:	f1ba 0f02 	cmp.w	sl, #2
 800ac18:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ac1c:	d1e3      	bne.n	800abe6 <sqrt+0x5e>
 800ac1e:	f7fd fb1d 	bl	800825c <__errno>
 800ac22:	2321      	movs	r3, #33	; 0x21
 800ac24:	6003      	str	r3, [r0, #0]
 800ac26:	e7e2      	b.n	800abee <sqrt+0x66>
 800ac28:	20000384 	.word	0x20000384
 800ac2c:	0800c021 	.word	0x0800c021

0800ac30 <__ieee754_fmod>:
 800ac30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac34:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800ac38:	4682      	mov	sl, r0
 800ac3a:	ea54 0002 	orrs.w	r0, r4, r2
 800ac3e:	461e      	mov	r6, r3
 800ac40:	4694      	mov	ip, r2
 800ac42:	4696      	mov	lr, r2
 800ac44:	d00c      	beq.n	800ac60 <__ieee754_fmod+0x30>
 800ac46:	4d78      	ldr	r5, [pc, #480]	; (800ae28 <__ieee754_fmod+0x1f8>)
 800ac48:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800ac4c:	45a8      	cmp	r8, r5
 800ac4e:	4689      	mov	r9, r1
 800ac50:	dc06      	bgt.n	800ac60 <__ieee754_fmod+0x30>
 800ac52:	4255      	negs	r5, r2
 800ac54:	4315      	orrs	r5, r2
 800ac56:	4f75      	ldr	r7, [pc, #468]	; (800ae2c <__ieee754_fmod+0x1fc>)
 800ac58:	ea44 75d5 	orr.w	r5, r4, r5, lsr #31
 800ac5c:	42bd      	cmp	r5, r7
 800ac5e:	d908      	bls.n	800ac72 <__ieee754_fmod+0x42>
 800ac60:	4650      	mov	r0, sl
 800ac62:	f7f5 fc39 	bl	80004d8 <__aeabi_dmul>
 800ac66:	4602      	mov	r2, r0
 800ac68:	460b      	mov	r3, r1
 800ac6a:	f7f5 fd5f 	bl	800072c <__aeabi_ddiv>
 800ac6e:	4682      	mov	sl, r0
 800ac70:	e00f      	b.n	800ac92 <__ieee754_fmod+0x62>
 800ac72:	45a0      	cmp	r8, r4
 800ac74:	4652      	mov	r2, sl
 800ac76:	4657      	mov	r7, sl
 800ac78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800ac7c:	dc0c      	bgt.n	800ac98 <__ieee754_fmod+0x68>
 800ac7e:	db08      	blt.n	800ac92 <__ieee754_fmod+0x62>
 800ac80:	45e2      	cmp	sl, ip
 800ac82:	d306      	bcc.n	800ac92 <__ieee754_fmod+0x62>
 800ac84:	d108      	bne.n	800ac98 <__ieee754_fmod+0x68>
 800ac86:	496a      	ldr	r1, [pc, #424]	; (800ae30 <__ieee754_fmod+0x200>)
 800ac88:	0fed      	lsrs	r5, r5, #31
 800ac8a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800ac8e:	e9d5 a100 	ldrd	sl, r1, [r5]
 800ac92:	4650      	mov	r0, sl
 800ac94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac98:	4b66      	ldr	r3, [pc, #408]	; (800ae34 <__ieee754_fmod+0x204>)
 800ac9a:	4598      	cmp	r8, r3
 800ac9c:	dc48      	bgt.n	800ad30 <__ieee754_fmod+0x100>
 800ac9e:	f1b8 0f00 	cmp.w	r8, #0
 800aca2:	d13c      	bne.n	800ad1e <__ieee754_fmod+0xee>
 800aca4:	4611      	mov	r1, r2
 800aca6:	4864      	ldr	r0, [pc, #400]	; (800ae38 <__ieee754_fmod+0x208>)
 800aca8:	2900      	cmp	r1, #0
 800acaa:	dc35      	bgt.n	800ad18 <__ieee754_fmod+0xe8>
 800acac:	429c      	cmp	r4, r3
 800acae:	dc4f      	bgt.n	800ad50 <__ieee754_fmod+0x120>
 800acb0:	2c00      	cmp	r4, #0
 800acb2:	d145      	bne.n	800ad40 <__ieee754_fmod+0x110>
 800acb4:	4661      	mov	r1, ip
 800acb6:	4b60      	ldr	r3, [pc, #384]	; (800ae38 <__ieee754_fmod+0x208>)
 800acb8:	2900      	cmp	r1, #0
 800acba:	dc3e      	bgt.n	800ad3a <__ieee754_fmod+0x10a>
 800acbc:	495f      	ldr	r1, [pc, #380]	; (800ae3c <__ieee754_fmod+0x20c>)
 800acbe:	4288      	cmp	r0, r1
 800acc0:	db4a      	blt.n	800ad58 <__ieee754_fmod+0x128>
 800acc2:	f3c9 0113 	ubfx	r1, r9, #0, #20
 800acc6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800acca:	4a5c      	ldr	r2, [pc, #368]	; (800ae3c <__ieee754_fmod+0x20c>)
 800accc:	4293      	cmp	r3, r2
 800acce:	db57      	blt.n	800ad80 <__ieee754_fmod+0x150>
 800acd0:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800acd4:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800acd8:	1ac0      	subs	r0, r0, r3
 800acda:	1b8a      	subs	r2, r1, r6
 800acdc:	eba7 040e 	sub.w	r4, r7, lr
 800ace0:	2800      	cmp	r0, #0
 800ace2:	d163      	bne.n	800adac <__ieee754_fmod+0x17c>
 800ace4:	4577      	cmp	r7, lr
 800ace6:	bf38      	it	cc
 800ace8:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800acec:	2a00      	cmp	r2, #0
 800acee:	bfbc      	itt	lt
 800acf0:	463c      	movlt	r4, r7
 800acf2:	460a      	movlt	r2, r1
 800acf4:	ea52 0104 	orrs.w	r1, r2, r4
 800acf8:	d0c5      	beq.n	800ac86 <__ieee754_fmod+0x56>
 800acfa:	494e      	ldr	r1, [pc, #312]	; (800ae34 <__ieee754_fmod+0x204>)
 800acfc:	428a      	cmp	r2, r1
 800acfe:	dd6a      	ble.n	800add6 <__ieee754_fmod+0x1a6>
 800ad00:	494e      	ldr	r1, [pc, #312]	; (800ae3c <__ieee754_fmod+0x20c>)
 800ad02:	428b      	cmp	r3, r1
 800ad04:	db6d      	blt.n	800ade2 <__ieee754_fmod+0x1b2>
 800ad06:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 800ad0a:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800ad0e:	4315      	orrs	r5, r2
 800ad10:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
 800ad14:	4620      	mov	r0, r4
 800ad16:	e7aa      	b.n	800ac6e <__ieee754_fmod+0x3e>
 800ad18:	3801      	subs	r0, #1
 800ad1a:	0049      	lsls	r1, r1, #1
 800ad1c:	e7c4      	b.n	800aca8 <__ieee754_fmod+0x78>
 800ad1e:	4847      	ldr	r0, [pc, #284]	; (800ae3c <__ieee754_fmod+0x20c>)
 800ad20:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800ad24:	0049      	lsls	r1, r1, #1
 800ad26:	2900      	cmp	r1, #0
 800ad28:	f100 30ff 	add.w	r0, r0, #4294967295
 800ad2c:	dcfa      	bgt.n	800ad24 <__ieee754_fmod+0xf4>
 800ad2e:	e7bd      	b.n	800acac <__ieee754_fmod+0x7c>
 800ad30:	ea4f 5028 	mov.w	r0, r8, asr #20
 800ad34:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800ad38:	e7b8      	b.n	800acac <__ieee754_fmod+0x7c>
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	0049      	lsls	r1, r1, #1
 800ad3e:	e7bb      	b.n	800acb8 <__ieee754_fmod+0x88>
 800ad40:	4b3e      	ldr	r3, [pc, #248]	; (800ae3c <__ieee754_fmod+0x20c>)
 800ad42:	02e1      	lsls	r1, r4, #11
 800ad44:	0049      	lsls	r1, r1, #1
 800ad46:	2900      	cmp	r1, #0
 800ad48:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad4c:	dcfa      	bgt.n	800ad44 <__ieee754_fmod+0x114>
 800ad4e:	e7b5      	b.n	800acbc <__ieee754_fmod+0x8c>
 800ad50:	1523      	asrs	r3, r4, #20
 800ad52:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ad56:	e7b1      	b.n	800acbc <__ieee754_fmod+0x8c>
 800ad58:	1a0f      	subs	r7, r1, r0
 800ad5a:	2f1f      	cmp	r7, #31
 800ad5c:	dc0a      	bgt.n	800ad74 <__ieee754_fmod+0x144>
 800ad5e:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 800ad62:	fa08 f807 	lsl.w	r8, r8, r7
 800ad66:	fa22 f101 	lsr.w	r1, r2, r1
 800ad6a:	ea41 0108 	orr.w	r1, r1, r8
 800ad6e:	fa02 f707 	lsl.w	r7, r2, r7
 800ad72:	e7aa      	b.n	800acca <__ieee754_fmod+0x9a>
 800ad74:	4932      	ldr	r1, [pc, #200]	; (800ae40 <__ieee754_fmod+0x210>)
 800ad76:	2700      	movs	r7, #0
 800ad78:	1a09      	subs	r1, r1, r0
 800ad7a:	fa02 f101 	lsl.w	r1, r2, r1
 800ad7e:	e7a4      	b.n	800acca <__ieee754_fmod+0x9a>
 800ad80:	eba2 0e03 	sub.w	lr, r2, r3
 800ad84:	f1be 0f1f 	cmp.w	lr, #31
 800ad88:	dc09      	bgt.n	800ad9e <__ieee754_fmod+0x16e>
 800ad8a:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 800ad8e:	fa04 f40e 	lsl.w	r4, r4, lr
 800ad92:	fa2c f606 	lsr.w	r6, ip, r6
 800ad96:	4326      	orrs	r6, r4
 800ad98:	fa0c fe0e 	lsl.w	lr, ip, lr
 800ad9c:	e79c      	b.n	800acd8 <__ieee754_fmod+0xa8>
 800ad9e:	4e28      	ldr	r6, [pc, #160]	; (800ae40 <__ieee754_fmod+0x210>)
 800ada0:	f04f 0e00 	mov.w	lr, #0
 800ada4:	1af6      	subs	r6, r6, r3
 800ada6:	fa0c f606 	lsl.w	r6, ip, r6
 800adaa:	e795      	b.n	800acd8 <__ieee754_fmod+0xa8>
 800adac:	4577      	cmp	r7, lr
 800adae:	bf38      	it	cc
 800adb0:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800adb4:	2a00      	cmp	r2, #0
 800adb6:	da05      	bge.n	800adc4 <__ieee754_fmod+0x194>
 800adb8:	0ffa      	lsrs	r2, r7, #31
 800adba:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800adbe:	007f      	lsls	r7, r7, #1
 800adc0:	3801      	subs	r0, #1
 800adc2:	e78a      	b.n	800acda <__ieee754_fmod+0xaa>
 800adc4:	ea52 0104 	orrs.w	r1, r2, r4
 800adc8:	f43f af5d 	beq.w	800ac86 <__ieee754_fmod+0x56>
 800adcc:	0fe1      	lsrs	r1, r4, #31
 800adce:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800add2:	0067      	lsls	r7, r4, #1
 800add4:	e7f4      	b.n	800adc0 <__ieee754_fmod+0x190>
 800add6:	0fe0      	lsrs	r0, r4, #31
 800add8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800addc:	0064      	lsls	r4, r4, #1
 800adde:	3b01      	subs	r3, #1
 800ade0:	e78c      	b.n	800acfc <__ieee754_fmod+0xcc>
 800ade2:	1ac9      	subs	r1, r1, r3
 800ade4:	2914      	cmp	r1, #20
 800ade6:	dc0a      	bgt.n	800adfe <__ieee754_fmod+0x1ce>
 800ade8:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800adec:	fa02 f303 	lsl.w	r3, r2, r3
 800adf0:	40cc      	lsrs	r4, r1
 800adf2:	4323      	orrs	r3, r4
 800adf4:	410a      	asrs	r2, r1
 800adf6:	ea42 0105 	orr.w	r1, r2, r5
 800adfa:	4618      	mov	r0, r3
 800adfc:	e737      	b.n	800ac6e <__ieee754_fmod+0x3e>
 800adfe:	291f      	cmp	r1, #31
 800ae00:	dc07      	bgt.n	800ae12 <__ieee754_fmod+0x1e2>
 800ae02:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800ae06:	40cc      	lsrs	r4, r1
 800ae08:	fa02 f303 	lsl.w	r3, r2, r3
 800ae0c:	4323      	orrs	r3, r4
 800ae0e:	462a      	mov	r2, r5
 800ae10:	e7f1      	b.n	800adf6 <__ieee754_fmod+0x1c6>
 800ae12:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800ae16:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800ae1a:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800ae1e:	33e2      	adds	r3, #226	; 0xe2
 800ae20:	fa42 f303 	asr.w	r3, r2, r3
 800ae24:	e7f3      	b.n	800ae0e <__ieee754_fmod+0x1de>
 800ae26:	bf00      	nop
 800ae28:	7fefffff 	.word	0x7fefffff
 800ae2c:	7ff00000 	.word	0x7ff00000
 800ae30:	0800c028 	.word	0x0800c028
 800ae34:	000fffff 	.word	0x000fffff
 800ae38:	fffffbed 	.word	0xfffffbed
 800ae3c:	fffffc02 	.word	0xfffffc02
 800ae40:	fffffbe2 	.word	0xfffffbe2

0800ae44 <__ieee754_sqrt>:
 800ae44:	4b54      	ldr	r3, [pc, #336]	; (800af98 <__ieee754_sqrt+0x154>)
 800ae46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae4a:	438b      	bics	r3, r1
 800ae4c:	4606      	mov	r6, r0
 800ae4e:	460d      	mov	r5, r1
 800ae50:	460a      	mov	r2, r1
 800ae52:	460c      	mov	r4, r1
 800ae54:	d10f      	bne.n	800ae76 <__ieee754_sqrt+0x32>
 800ae56:	4602      	mov	r2, r0
 800ae58:	460b      	mov	r3, r1
 800ae5a:	f7f5 fb3d 	bl	80004d8 <__aeabi_dmul>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	460b      	mov	r3, r1
 800ae62:	4630      	mov	r0, r6
 800ae64:	4629      	mov	r1, r5
 800ae66:	f7f5 f981 	bl	800016c <__adddf3>
 800ae6a:	4606      	mov	r6, r0
 800ae6c:	460d      	mov	r5, r1
 800ae6e:	4630      	mov	r0, r6
 800ae70:	4629      	mov	r1, r5
 800ae72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae76:	2900      	cmp	r1, #0
 800ae78:	4607      	mov	r7, r0
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	dc0e      	bgt.n	800ae9c <__ieee754_sqrt+0x58>
 800ae7e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800ae82:	ea5c 0707 	orrs.w	r7, ip, r7
 800ae86:	d0f2      	beq.n	800ae6e <__ieee754_sqrt+0x2a>
 800ae88:	b141      	cbz	r1, 800ae9c <__ieee754_sqrt+0x58>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	f7f5 f96b 	bl	8000168 <__aeabi_dsub>
 800ae92:	4602      	mov	r2, r0
 800ae94:	460b      	mov	r3, r1
 800ae96:	f7f5 fc49 	bl	800072c <__aeabi_ddiv>
 800ae9a:	e7e6      	b.n	800ae6a <__ieee754_sqrt+0x26>
 800ae9c:	1512      	asrs	r2, r2, #20
 800ae9e:	d074      	beq.n	800af8a <__ieee754_sqrt+0x146>
 800aea0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800aea4:	07d5      	lsls	r5, r2, #31
 800aea6:	f04f 0500 	mov.w	r5, #0
 800aeaa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800aeae:	bf48      	it	mi
 800aeb0:	0fd9      	lsrmi	r1, r3, #31
 800aeb2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800aeb6:	bf44      	itt	mi
 800aeb8:	005b      	lslmi	r3, r3, #1
 800aeba:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800aebe:	1051      	asrs	r1, r2, #1
 800aec0:	0fda      	lsrs	r2, r3, #31
 800aec2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800aec6:	4628      	mov	r0, r5
 800aec8:	2216      	movs	r2, #22
 800aeca:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800aece:	005b      	lsls	r3, r3, #1
 800aed0:	1987      	adds	r7, r0, r6
 800aed2:	42a7      	cmp	r7, r4
 800aed4:	bfde      	ittt	le
 800aed6:	19b8      	addle	r0, r7, r6
 800aed8:	1be4      	suble	r4, r4, r7
 800aeda:	19ad      	addle	r5, r5, r6
 800aedc:	0fdf      	lsrs	r7, r3, #31
 800aede:	3a01      	subs	r2, #1
 800aee0:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800aee4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aee8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800aeec:	d1f0      	bne.n	800aed0 <__ieee754_sqrt+0x8c>
 800aeee:	f04f 0c20 	mov.w	ip, #32
 800aef2:	4696      	mov	lr, r2
 800aef4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800aef8:	4284      	cmp	r4, r0
 800aefa:	eb06 070e 	add.w	r7, r6, lr
 800aefe:	dc02      	bgt.n	800af06 <__ieee754_sqrt+0xc2>
 800af00:	d112      	bne.n	800af28 <__ieee754_sqrt+0xe4>
 800af02:	429f      	cmp	r7, r3
 800af04:	d810      	bhi.n	800af28 <__ieee754_sqrt+0xe4>
 800af06:	2f00      	cmp	r7, #0
 800af08:	eb07 0e06 	add.w	lr, r7, r6
 800af0c:	da42      	bge.n	800af94 <__ieee754_sqrt+0x150>
 800af0e:	f1be 0f00 	cmp.w	lr, #0
 800af12:	db3f      	blt.n	800af94 <__ieee754_sqrt+0x150>
 800af14:	f100 0801 	add.w	r8, r0, #1
 800af18:	1a24      	subs	r4, r4, r0
 800af1a:	4640      	mov	r0, r8
 800af1c:	429f      	cmp	r7, r3
 800af1e:	bf88      	it	hi
 800af20:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800af24:	1bdb      	subs	r3, r3, r7
 800af26:	4432      	add	r2, r6
 800af28:	0064      	lsls	r4, r4, #1
 800af2a:	f1bc 0c01 	subs.w	ip, ip, #1
 800af2e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800af32:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800af36:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800af3a:	d1dd      	bne.n	800aef8 <__ieee754_sqrt+0xb4>
 800af3c:	4323      	orrs	r3, r4
 800af3e:	d006      	beq.n	800af4e <__ieee754_sqrt+0x10a>
 800af40:	1c54      	adds	r4, r2, #1
 800af42:	bf0b      	itete	eq
 800af44:	4662      	moveq	r2, ip
 800af46:	3201      	addne	r2, #1
 800af48:	3501      	addeq	r5, #1
 800af4a:	f022 0201 	bicne.w	r2, r2, #1
 800af4e:	106b      	asrs	r3, r5, #1
 800af50:	0852      	lsrs	r2, r2, #1
 800af52:	07e8      	lsls	r0, r5, #31
 800af54:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800af58:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800af5c:	bf48      	it	mi
 800af5e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800af62:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800af66:	4616      	mov	r6, r2
 800af68:	e781      	b.n	800ae6e <__ieee754_sqrt+0x2a>
 800af6a:	0adc      	lsrs	r4, r3, #11
 800af6c:	3915      	subs	r1, #21
 800af6e:	055b      	lsls	r3, r3, #21
 800af70:	2c00      	cmp	r4, #0
 800af72:	d0fa      	beq.n	800af6a <__ieee754_sqrt+0x126>
 800af74:	02e6      	lsls	r6, r4, #11
 800af76:	d50a      	bpl.n	800af8e <__ieee754_sqrt+0x14a>
 800af78:	f1c2 0020 	rsb	r0, r2, #32
 800af7c:	fa23 f000 	lsr.w	r0, r3, r0
 800af80:	1e55      	subs	r5, r2, #1
 800af82:	4093      	lsls	r3, r2
 800af84:	4304      	orrs	r4, r0
 800af86:	1b4a      	subs	r2, r1, r5
 800af88:	e78a      	b.n	800aea0 <__ieee754_sqrt+0x5c>
 800af8a:	4611      	mov	r1, r2
 800af8c:	e7f0      	b.n	800af70 <__ieee754_sqrt+0x12c>
 800af8e:	0064      	lsls	r4, r4, #1
 800af90:	3201      	adds	r2, #1
 800af92:	e7ef      	b.n	800af74 <__ieee754_sqrt+0x130>
 800af94:	4680      	mov	r8, r0
 800af96:	e7bf      	b.n	800af18 <__ieee754_sqrt+0xd4>
 800af98:	7ff00000 	.word	0x7ff00000

0800af9c <matherr>:
 800af9c:	2000      	movs	r0, #0
 800af9e:	4770      	bx	lr

0800afa0 <_init>:
 800afa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa2:	bf00      	nop
 800afa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afa6:	bc08      	pop	{r3}
 800afa8:	469e      	mov	lr, r3
 800afaa:	4770      	bx	lr

0800afac <_fini>:
 800afac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afae:	bf00      	nop
 800afb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afb2:	bc08      	pop	{r3}
 800afb4:	469e      	mov	lr, r3
 800afb6:	4770      	bx	lr
