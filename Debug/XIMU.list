
XIMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c11c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000151c  0800c230  0800c230  0001c230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d74c  0800d74c  0002038c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d74c  0800d74c  0002038c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d74c  0800d74c  0002038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d74c  0800d74c  0001d74c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d754  0800d754  0001d754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000038c  20000000  0800d758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003bfc  20000390  0800dae4  00020390  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20003f8c  0800dae4  00023f8c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002038c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003224c  00000000  00000000  000203b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006956  00000000  00000000  00052601  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00010f5f  00000000  00000000  00058f57  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000018c0  00000000  00000000  00069eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002470  00000000  00000000  0006b778  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001db18  00000000  00000000  0006dbe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001a136  00000000  00000000  0008b700  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00087916  00000000  00000000  000a5836  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0012d14c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006114  00000000  00000000  0012d1c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000390 	.word	0x20000390
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c214 	.word	0x0800c214

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000394 	.word	0x20000394
 800014c:	0800c214 	.word	0x0800c214

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__gesf2>:
 8000b68:	f04f 3cff 	mov.w	ip, #4294967295
 8000b6c:	e006      	b.n	8000b7c <__cmpsf2+0x4>
 8000b6e:	bf00      	nop

08000b70 <__lesf2>:
 8000b70:	f04f 0c01 	mov.w	ip, #1
 8000b74:	e002      	b.n	8000b7c <__cmpsf2+0x4>
 8000b76:	bf00      	nop

08000b78 <__cmpsf2>:
 8000b78:	f04f 0c01 	mov.w	ip, #1
 8000b7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b8c:	bf18      	it	ne
 8000b8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b92:	d011      	beq.n	8000bb8 <__cmpsf2+0x40>
 8000b94:	b001      	add	sp, #4
 8000b96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b9a:	bf18      	it	ne
 8000b9c:	ea90 0f01 	teqne	r0, r1
 8000ba0:	bf58      	it	pl
 8000ba2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ba6:	bf88      	it	hi
 8000ba8:	17c8      	asrhi	r0, r1, #31
 8000baa:	bf38      	it	cc
 8000bac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bb0:	bf18      	it	ne
 8000bb2:	f040 0001 	orrne.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bbc:	d102      	bne.n	8000bc4 <__cmpsf2+0x4c>
 8000bbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bc2:	d105      	bne.n	8000bd0 <__cmpsf2+0x58>
 8000bc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bc8:	d1e4      	bne.n	8000b94 <__cmpsf2+0x1c>
 8000bca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000bce:	d0e1      	beq.n	8000b94 <__cmpsf2+0x1c>
 8000bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cfrcmple>:
 8000bd8:	4684      	mov	ip, r0
 8000bda:	4608      	mov	r0, r1
 8000bdc:	4661      	mov	r1, ip
 8000bde:	e7ff      	b.n	8000be0 <__aeabi_cfcmpeq>

08000be0 <__aeabi_cfcmpeq>:
 8000be0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000be2:	f7ff ffc9 	bl	8000b78 <__cmpsf2>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	bf48      	it	mi
 8000bea:	f110 0f00 	cmnmi.w	r0, #0
 8000bee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bf0 <__aeabi_fcmpeq>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff fff4 	bl	8000be0 <__aeabi_cfcmpeq>
 8000bf8:	bf0c      	ite	eq
 8000bfa:	2001      	moveq	r0, #1
 8000bfc:	2000      	movne	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_fcmplt>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffea 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c0c:	bf34      	ite	cc
 8000c0e:	2001      	movcc	r0, #1
 8000c10:	2000      	movcs	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmple>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffe0 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c20:	bf94      	ite	ls
 8000c22:	2001      	movls	r0, #1
 8000c24:	2000      	movhi	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmpge>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffd2 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpgt>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffc8 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c48:	bf34      	ite	cc
 8000c4a:	2001      	movcc	r0, #1
 8000c4c:	2000      	movcs	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8000c54:	b513      	push	{r0, r1, r4, lr}
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8000c56:	4c13      	ldr	r4, [pc, #76]	; (8000ca4 <set_int_enable+0x50>)
 8000c58:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000c5c:	b193      	cbz	r3, 8000c84 <set_int_enable+0x30>
        if (enable)
 8000c5e:	b1c0      	cbz	r0, 8000c92 <set_int_enable+0x3e>
            tmp = BIT_DMP_INT_EN;
 8000c60:	2302      	movs	r3, #2
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
 8000c62:	f88d 3007 	strb.w	r3, [sp, #7]
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8000c66:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000c6a:	f10d 0307 	add.w	r3, sp, #7
 8000c6e:	2201      	movs	r2, #1
 8000c70:	7c49      	ldrb	r1, [r1, #17]
 8000c72:	7800      	ldrb	r0, [r0, #0]
 8000c74:	f002 f802 	bl	8002c7c <i2c_write>
 8000c78:	b970      	cbnz	r0, 8000c98 <set_int_enable+0x44>
            return -1;
        st.chip_cfg.int_enable = tmp;
 8000c7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000c7e:	7463      	strb	r3, [r4, #17]
    }
    return 0;
}
 8000c80:	b002      	add	sp, #8
 8000c82:	bd10      	pop	{r4, pc}
        if (!st.chip_cfg.sensors)
 8000c84:	7aa2      	ldrb	r2, [r4, #10]
 8000c86:	b13a      	cbz	r2, 8000c98 <set_int_enable+0x44>
        if (enable && st.chip_cfg.int_enable)
 8000c88:	b118      	cbz	r0, 8000c92 <set_int_enable+0x3e>
 8000c8a:	7c62      	ldrb	r2, [r4, #17]
 8000c8c:	b93a      	cbnz	r2, 8000c9e <set_int_enable+0x4a>
            tmp = BIT_DATA_RDY_EN;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e7e7      	b.n	8000c62 <set_int_enable+0xe>
            tmp = 0x00;
 8000c92:	f88d 0007 	strb.w	r0, [sp, #7]
 8000c96:	e7e6      	b.n	8000c66 <set_int_enable+0x12>
            return -1;
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	e7f0      	b.n	8000c80 <set_int_enable+0x2c>
            return 0;
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	e7ee      	b.n	8000c80 <set_int_enable+0x2c>
 8000ca2:	bf00      	nop
 8000ca4:	20000000 	.word	0x20000000

08000ca8 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 8000ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8000caa:	4c4e      	ldr	r4, [pc, #312]	; (8000de4 <mpu_reset_fifo+0x13c>)
 8000cac:	7aa3      	ldrb	r3, [r4, #10]
 8000cae:	b91b      	cbnz	r3, 8000cb8 <mpu_reset_fifo+0x10>
        return -1;
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
 8000cb4:	b003      	add	sp, #12
 8000cb6:	bd30      	pop	{r4, r5, pc}
    data = 0;
 8000cb8:	2300      	movs	r3, #0
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000cba:	e9d4 1000 	ldrd	r1, r0, [r4]
    data = 0;
 8000cbe:	ad02      	add	r5, sp, #8
 8000cc0:	f805 3d01 	strb.w	r3, [r5, #-1]!
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000cc4:	462b      	mov	r3, r5
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	7c49      	ldrb	r1, [r1, #17]
 8000cca:	7800      	ldrb	r0, [r0, #0]
 8000ccc:	f001 ffd6 	bl	8002c7c <i2c_write>
 8000cd0:	2800      	cmp	r0, #0
 8000cd2:	d1ed      	bne.n	8000cb0 <mpu_reset_fifo+0x8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8000cd4:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000cd8:	462b      	mov	r3, r5
 8000cda:	2201      	movs	r2, #1
 8000cdc:	7949      	ldrb	r1, [r1, #5]
 8000cde:	7800      	ldrb	r0, [r0, #0]
 8000ce0:	f001 ffcc 	bl	8002c7c <i2c_write>
 8000ce4:	2800      	cmp	r0, #0
 8000ce6:	d1e3      	bne.n	8000cb0 <mpu_reset_fifo+0x8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000ce8:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000cec:	462b      	mov	r3, r5
 8000cee:	2201      	movs	r2, #1
 8000cf0:	7909      	ldrb	r1, [r1, #4]
 8000cf2:	7800      	ldrb	r0, [r0, #0]
 8000cf4:	f001 ffc2 	bl	8002c7c <i2c_write>
 8000cf8:	2800      	cmp	r0, #0
 8000cfa:	d1d9      	bne.n	8000cb0 <mpu_reset_fifo+0x8>
 8000cfc:	6863      	ldr	r3, [r4, #4]
 8000cfe:	7818      	ldrb	r0, [r3, #0]
 8000d00:	6823      	ldr	r3, [r4, #0]
 8000d02:	7919      	ldrb	r1, [r3, #4]
    if (st.chip_cfg.dmp_on) {
 8000d04:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d039      	beq.n	8000d80 <mpu_reset_fifo+0xd8>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8000d0c:	230c      	movs	r3, #12
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000d0e:	2201      	movs	r2, #1
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8000d10:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000d14:	462b      	mov	r3, r5
 8000d16:	f001 ffb1 	bl	8002c7c <i2c_write>
 8000d1a:	2800      	cmp	r0, #0
 8000d1c:	d1c8      	bne.n	8000cb0 <mpu_reset_fifo+0x8>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000d1e:	e9d4 1000 	ldrd	r1, r0, [r4]
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8000d22:	23c0      	movs	r3, #192	; 0xc0
 8000d24:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8000d28:	7aa3      	ldrb	r3, [r4, #10]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000d2a:	7909      	ldrb	r1, [r1, #4]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8000d2c:	07da      	lsls	r2, r3, #31
            data |= BIT_AUX_IF_EN;
 8000d2e:	bf44      	itt	mi
 8000d30:	23e0      	movmi	r3, #224	; 0xe0
 8000d32:	f88d 3007 	strbmi.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000d36:	2201      	movs	r2, #1
 8000d38:	462b      	mov	r3, r5
 8000d3a:	7800      	ldrb	r0, [r0, #0]
 8000d3c:	f001 ff9e 	bl	8002c7c <i2c_write>
 8000d40:	2800      	cmp	r0, #0
 8000d42:	d1b5      	bne.n	8000cb0 <mpu_reset_fifo+0x8>
        if (st.chip_cfg.int_enable)
 8000d44:	7c63      	ldrb	r3, [r4, #17]
 8000d46:	b103      	cbz	r3, 8000d4a <mpu_reset_fifo+0xa2>
            data = BIT_DMP_INT_EN;
 8000d48:	2302      	movs	r3, #2
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000d4a:	e9d4 1000 	ldrd	r1, r0, [r4]
            data = 0;
 8000d4e:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000d52:	2201      	movs	r2, #1
 8000d54:	462b      	mov	r3, r5
 8000d56:	7c49      	ldrb	r1, [r1, #17]
 8000d58:	7800      	ldrb	r0, [r0, #0]
 8000d5a:	f001 ff8f 	bl	8002c7c <i2c_write>
 8000d5e:	2800      	cmp	r0, #0
 8000d60:	d1a6      	bne.n	8000cb0 <mpu_reset_fifo+0x8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8000d62:	462b      	mov	r3, r5
        data = 0;
 8000d64:	f88d 0007 	strb.w	r0, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8000d68:	e9d4 1000 	ldrd	r1, r0, [r4]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	7949      	ldrb	r1, [r1, #5]
 8000d70:	7800      	ldrb	r0, [r0, #0]
 8000d72:	f001 ff83 	bl	8002c7c <i2c_write>
 8000d76:	3000      	adds	r0, #0
 8000d78:	bf18      	it	ne
 8000d7a:	2001      	movne	r0, #1
 8000d7c:	4240      	negs	r0, r0
 8000d7e:	e799      	b.n	8000cb4 <mpu_reset_fifo+0xc>
        data = BIT_FIFO_RST;
 8000d80:	2304      	movs	r3, #4
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000d82:	2201      	movs	r2, #1
        data = BIT_FIFO_RST;
 8000d84:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000d88:	462b      	mov	r3, r5
 8000d8a:	f001 ff77 	bl	8002c7c <i2c_write>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	d18e      	bne.n	8000cb0 <mpu_reset_fifo+0x8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8000d92:	7ca3      	ldrb	r3, [r4, #18]
 8000d94:	b913      	cbnz	r3, 8000d9c <mpu_reset_fifo+0xf4>
 8000d96:	7aa3      	ldrb	r3, [r4, #10]
 8000d98:	07db      	lsls	r3, r3, #31
 8000d9a:	d421      	bmi.n	8000de0 <mpu_reset_fifo+0x138>
            data = BIT_FIFO_EN;
 8000d9c:	2340      	movs	r3, #64	; 0x40
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000d9e:	e9d4 1000 	ldrd	r1, r0, [r4]
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8000da2:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000da6:	2201      	movs	r2, #1
 8000da8:	462b      	mov	r3, r5
 8000daa:	7909      	ldrb	r1, [r1, #4]
 8000dac:	7800      	ldrb	r0, [r0, #0]
 8000dae:	f001 ff65 	bl	8002c7c <i2c_write>
 8000db2:	2800      	cmp	r0, #0
 8000db4:	f47f af7c 	bne.w	8000cb0 <mpu_reset_fifo+0x8>
        if (st.chip_cfg.int_enable)
 8000db8:	7c63      	ldrb	r3, [r4, #17]
 8000dba:	b103      	cbz	r3, 8000dbe <mpu_reset_fifo+0x116>
            data = BIT_DATA_RDY_EN;
 8000dbc:	2301      	movs	r3, #1
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000dbe:	e9d4 1000 	ldrd	r1, r0, [r4]
            data = 0;
 8000dc2:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	462b      	mov	r3, r5
 8000dca:	7c49      	ldrb	r1, [r1, #17]
 8000dcc:	7800      	ldrb	r0, [r0, #0]
 8000dce:	f001 ff55 	bl	8002c7c <i2c_write>
 8000dd2:	2800      	cmp	r0, #0
 8000dd4:	f47f af6c 	bne.w	8000cb0 <mpu_reset_fifo+0x8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8000dd8:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000ddc:	4b02      	ldr	r3, [pc, #8]	; (8000de8 <mpu_reset_fifo+0x140>)
 8000dde:	e7c5      	b.n	8000d6c <mpu_reset_fifo+0xc4>
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8000de0:	2360      	movs	r3, #96	; 0x60
 8000de2:	e7dc      	b.n	8000d9e <mpu_reset_fifo+0xf6>
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000010 	.word	0x20000010

08000dec <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8000dec:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8000dee:	4c1a      	ldr	r4, [pc, #104]	; (8000e58 <mpu_set_gyro_fsr+0x6c>)
 8000df0:	7aa3      	ldrb	r3, [r4, #10]
 8000df2:	b913      	cbnz	r3, 8000dfa <mpu_set_gyro_fsr+0xe>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295
 8000df8:	e01d      	b.n	8000e36 <mpu_set_gyro_fsr+0x4a>
    switch (fsr) {
 8000dfa:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000dfe:	d024      	beq.n	8000e4a <mpu_set_gyro_fsr+0x5e>
 8000e00:	d81b      	bhi.n	8000e3a <mpu_set_gyro_fsr+0x4e>
 8000e02:	28fa      	cmp	r0, #250	; 0xfa
 8000e04:	d1f6      	bne.n	8000df4 <mpu_set_gyro_fsr+0x8>
        data = INV_FSR_250DPS << 3;
 8000e06:	2300      	movs	r3, #0
        data = INV_FSR_2000DPS << 3;
 8000e08:	f88d 3007 	strb.w	r3, [sp, #7]
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8000e0c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000e10:	7a23      	ldrb	r3, [r4, #8]
 8000e12:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8000e16:	d01c      	beq.n	8000e52 <mpu_set_gyro_fsr+0x66>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8000e18:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000e1c:	f10d 0307 	add.w	r3, sp, #7
 8000e20:	2201      	movs	r2, #1
 8000e22:	7989      	ldrb	r1, [r1, #6]
 8000e24:	7800      	ldrb	r0, [r0, #0]
 8000e26:	f001 ff29 	bl	8002c7c <i2c_write>
 8000e2a:	2800      	cmp	r0, #0
 8000e2c:	d1e2      	bne.n	8000df4 <mpu_set_gyro_fsr+0x8>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
 8000e2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000e32:	08db      	lsrs	r3, r3, #3
 8000e34:	7223      	strb	r3, [r4, #8]
    return 0;
}
 8000e36:	b002      	add	sp, #8
 8000e38:	bd10      	pop	{r4, pc}
    switch (fsr) {
 8000e3a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000e3e:	d006      	beq.n	8000e4e <mpu_set_gyro_fsr+0x62>
 8000e40:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8000e44:	d1d6      	bne.n	8000df4 <mpu_set_gyro_fsr+0x8>
        data = INV_FSR_2000DPS << 3;
 8000e46:	2318      	movs	r3, #24
 8000e48:	e7de      	b.n	8000e08 <mpu_set_gyro_fsr+0x1c>
        data = INV_FSR_500DPS << 3;
 8000e4a:	2308      	movs	r3, #8
 8000e4c:	e7dc      	b.n	8000e08 <mpu_set_gyro_fsr+0x1c>
        data = INV_FSR_1000DPS << 3;
 8000e4e:	2310      	movs	r3, #16
 8000e50:	e7da      	b.n	8000e08 <mpu_set_gyro_fsr+0x1c>
        return 0;
 8000e52:	2000      	movs	r0, #0
 8000e54:	e7ef      	b.n	8000e36 <mpu_set_gyro_fsr+0x4a>
 8000e56:	bf00      	nop
 8000e58:	20000000 	.word	0x20000000

08000e5c <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8000e5c:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8000e5e:	4c18      	ldr	r4, [pc, #96]	; (8000ec0 <mpu_set_accel_fsr+0x64>)
 8000e60:	7aa3      	ldrb	r3, [r4, #10]
 8000e62:	b913      	cbnz	r3, 8000e6a <mpu_set_accel_fsr+0xe>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	e01c      	b.n	8000ea4 <mpu_set_accel_fsr+0x48>
    switch (fsr) {
 8000e6a:	2804      	cmp	r0, #4
 8000e6c:	d022      	beq.n	8000eb4 <mpu_set_accel_fsr+0x58>
 8000e6e:	d81b      	bhi.n	8000ea8 <mpu_set_accel_fsr+0x4c>
 8000e70:	2802      	cmp	r0, #2
 8000e72:	d1f7      	bne.n	8000e64 <mpu_set_accel_fsr+0x8>
        data = INV_FSR_2G << 3;
 8000e74:	2300      	movs	r3, #0
        data = INV_FSR_16G << 3;
 8000e76:	f88d 3007 	strb.w	r3, [sp, #7]
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 8000e7a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000e7e:	7a63      	ldrb	r3, [r4, #9]
 8000e80:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8000e84:	d01a      	beq.n	8000ebc <mpu_set_accel_fsr+0x60>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8000e86:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000e8a:	f10d 0307 	add.w	r3, sp, #7
 8000e8e:	2201      	movs	r2, #1
 8000e90:	79c9      	ldrb	r1, [r1, #7]
 8000e92:	7800      	ldrb	r0, [r0, #0]
 8000e94:	f001 fef2 	bl	8002c7c <i2c_write>
 8000e98:	2800      	cmp	r0, #0
 8000e9a:	d1e3      	bne.n	8000e64 <mpu_set_accel_fsr+0x8>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
 8000e9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000ea0:	08db      	lsrs	r3, r3, #3
 8000ea2:	7263      	strb	r3, [r4, #9]
    return 0;
}
 8000ea4:	b002      	add	sp, #8
 8000ea6:	bd10      	pop	{r4, pc}
    switch (fsr) {
 8000ea8:	2808      	cmp	r0, #8
 8000eaa:	d005      	beq.n	8000eb8 <mpu_set_accel_fsr+0x5c>
 8000eac:	2810      	cmp	r0, #16
 8000eae:	d1d9      	bne.n	8000e64 <mpu_set_accel_fsr+0x8>
        data = INV_FSR_16G << 3;
 8000eb0:	2318      	movs	r3, #24
 8000eb2:	e7e0      	b.n	8000e76 <mpu_set_accel_fsr+0x1a>
        data = INV_FSR_4G << 3;
 8000eb4:	2308      	movs	r3, #8
 8000eb6:	e7de      	b.n	8000e76 <mpu_set_accel_fsr+0x1a>
        data = INV_FSR_8G << 3;
 8000eb8:	2310      	movs	r3, #16
 8000eba:	e7dc      	b.n	8000e76 <mpu_set_accel_fsr+0x1a>
        return 0;
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	e7f1      	b.n	8000ea4 <mpu_set_accel_fsr+0x48>
 8000ec0:	20000000 	.word	0x20000000

08000ec4 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8000ec4:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8000ec6:	4c19      	ldr	r4, [pc, #100]	; (8000f2c <mpu_set_lpf+0x68>)
 8000ec8:	7aa3      	ldrb	r3, [r4, #10]
 8000eca:	b91b      	cbnz	r3, 8000ed4 <mpu_set_lpf+0x10>
        return -1;
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
        return -1;
    st.chip_cfg.lpf = data;
    return 0;
}
 8000ed0:	b002      	add	sp, #8
 8000ed2:	bd10      	pop	{r4, pc}
    if (lpf >= 188)
 8000ed4:	28bb      	cmp	r0, #187	; 0xbb
 8000ed6:	d916      	bls.n	8000f06 <mpu_set_lpf+0x42>
        data = INV_FILTER_188HZ;
 8000ed8:	2301      	movs	r3, #1
        data = INV_FILTER_5HZ;
 8000eda:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.lpf == data)
 8000ede:	7ae2      	ldrb	r2, [r4, #11]
 8000ee0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d01f      	beq.n	8000f28 <mpu_set_lpf+0x64>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8000ee8:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000eec:	f10d 0307 	add.w	r3, sp, #7
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	7889      	ldrb	r1, [r1, #2]
 8000ef4:	7800      	ldrb	r0, [r0, #0]
 8000ef6:	f001 fec1 	bl	8002c7c <i2c_write>
 8000efa:	2800      	cmp	r0, #0
 8000efc:	d1e6      	bne.n	8000ecc <mpu_set_lpf+0x8>
    st.chip_cfg.lpf = data;
 8000efe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000f02:	72e3      	strb	r3, [r4, #11]
    return 0;
 8000f04:	e7e4      	b.n	8000ed0 <mpu_set_lpf+0xc>
    else if (lpf >= 98)
 8000f06:	2861      	cmp	r0, #97	; 0x61
 8000f08:	d901      	bls.n	8000f0e <mpu_set_lpf+0x4a>
        data = INV_FILTER_98HZ;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	e7e5      	b.n	8000eda <mpu_set_lpf+0x16>
    else if (lpf >= 42)
 8000f0e:	2829      	cmp	r0, #41	; 0x29
 8000f10:	d901      	bls.n	8000f16 <mpu_set_lpf+0x52>
        data = INV_FILTER_42HZ;
 8000f12:	2303      	movs	r3, #3
 8000f14:	e7e1      	b.n	8000eda <mpu_set_lpf+0x16>
    else if (lpf >= 20)
 8000f16:	2813      	cmp	r0, #19
 8000f18:	d901      	bls.n	8000f1e <mpu_set_lpf+0x5a>
        data = INV_FILTER_20HZ;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	e7dd      	b.n	8000eda <mpu_set_lpf+0x16>
    else if (lpf >= 10)
 8000f1e:	2809      	cmp	r0, #9
        data = INV_FILTER_10HZ;
 8000f20:	bf8c      	ite	hi
 8000f22:	2305      	movhi	r3, #5
        data = INV_FILTER_5HZ;
 8000f24:	2306      	movls	r3, #6
 8000f26:	e7d8      	b.n	8000eda <mpu_set_lpf+0x16>
        return 0;
 8000f28:	2000      	movs	r0, #0
 8000f2a:	e7d1      	b.n	8000ed0 <mpu_set_lpf+0xc>
 8000f2c:	20000000 	.word	0x20000000

08000f30 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
 8000f30:	b513      	push	{r0, r1, r4, lr}
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8000f32:	b918      	cbnz	r0, 8000f3c <mpu_set_compass_sample_rate+0xc>
        return -1;
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
#else
    return -1;
#endif
}
 8000f38:	b002      	add	sp, #8
 8000f3a:	bd10      	pop	{r4, pc}
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8000f3c:	4c0e      	ldr	r4, [pc, #56]	; (8000f78 <mpu_set_compass_sample_rate+0x48>)
 8000f3e:	89e3      	ldrh	r3, [r4, #14]
 8000f40:	4283      	cmp	r3, r0
 8000f42:	d3f7      	bcc.n	8000f34 <mpu_set_compass_sample_rate+0x4>
 8000f44:	2864      	cmp	r0, #100	; 0x64
 8000f46:	d8f5      	bhi.n	8000f34 <mpu_set_compass_sample_rate+0x4>
    div = st.chip_cfg.sample_rate / rate - 1;
 8000f48:	fbb3 f0f0 	udiv	r0, r3, r0
 8000f4c:	ab02      	add	r3, sp, #8
 8000f4e:	3801      	subs	r0, #1
 8000f50:	f803 0d01 	strb.w	r0, [r3, #-1]!
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8000f54:	2201      	movs	r2, #1
 8000f56:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000f5a:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
 8000f5e:	7800      	ldrb	r0, [r0, #0]
 8000f60:	f001 fe8c 	bl	8002c7c <i2c_write>
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d1e5      	bne.n	8000f34 <mpu_set_compass_sample_rate+0x4>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 8000f68:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000f6c:	89e3      	ldrh	r3, [r4, #14]
 8000f6e:	3201      	adds	r2, #1
 8000f70:	fb93 f3f2 	sdiv	r3, r3, r2
 8000f74:	8523      	strh	r3, [r4, #40]	; 0x28
    return 0;
 8000f76:	e7df      	b.n	8000f38 <mpu_set_compass_sample_rate+0x8>
 8000f78:	20000000 	.word	0x20000000

08000f7c <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8000f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <mpu_configure_fifo+0x4c>)
 8000f80:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8000f84:	461e      	mov	r6, r3
 8000f86:	b9e2      	cbnz	r2, 8000fc2 <mpu_configure_fifo+0x46>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
 8000f88:	7a9c      	ldrb	r4, [r3, #10]
 8000f8a:	b19c      	cbz	r4, 8000fb4 <mpu_configure_fifo+0x38>
    sensors &= ~INV_XYZ_COMPASS;
 8000f8c:	f000 05fe 	and.w	r5, r0, #254	; 0xfe
            return -1;
        prev = st.chip_cfg.fifo_enable;
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8000f90:	402c      	ands	r4, r5
        prev = st.chip_cfg.fifo_enable;
 8000f92:	7c1f      	ldrb	r7, [r3, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8000f94:	741c      	strb	r4, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 8000f96:	1b64      	subs	r4, r4, r5
 8000f98:	bf18      	it	ne
 8000f9a:	f04f 34ff 	movne.w	r4, #4294967295
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
 8000f9e:	b90d      	cbnz	r5, 8000fa4 <mpu_configure_fifo+0x28>
 8000fa0:	7d18      	ldrb	r0, [r3, #20]
 8000fa2:	b150      	cbz	r0, 8000fba <mpu_configure_fifo+0x3e>
            set_int_enable(1);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f7ff fe55 	bl	8000c54 <set_int_enable>
        else
            set_int_enable(0);
        if (sensors) {
 8000faa:	b145      	cbz	r5, 8000fbe <mpu_configure_fifo+0x42>
            if (mpu_reset_fifo()) {
 8000fac:	f7ff fe7c 	bl	8000ca8 <mpu_reset_fifo>
 8000fb0:	b128      	cbz	r0, 8000fbe <mpu_configure_fifo+0x42>
                st.chip_cfg.fifo_enable = prev;
 8000fb2:	7437      	strb	r7, [r6, #16]
            return -1;
 8000fb4:	f04f 34ff 	mov.w	r4, #4294967295
 8000fb8:	e001      	b.n	8000fbe <mpu_configure_fifo+0x42>
            set_int_enable(0);
 8000fba:	f7ff fe4b 	bl	8000c54 <set_int_enable>
            }
        }
    }

    return result;
}
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8000fc2:	2400      	movs	r4, #0
 8000fc4:	e7fb      	b.n	8000fbe <mpu_configure_fifo+0x42>
 8000fc6:	bf00      	nop
 8000fc8:	20000000 	.word	0x20000000

08000fcc <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 8000fcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 8000fd0:	4d24      	ldr	r5, [pc, #144]	; (8001064 <mpu_read_fifo_stream+0x98>)
{
 8000fd2:	4606      	mov	r6, r0
    if (!st.chip_cfg.dmp_on)
 8000fd4:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
 8000fd8:	4689      	mov	r9, r1
 8000fda:	4617      	mov	r7, r2
 8000fdc:	46a8      	mov	r8, r5
    if (!st.chip_cfg.dmp_on)
 8000fde:	b923      	cbnz	r3, 8000fea <mpu_read_fifo_stream+0x1e>
    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
        return -1;
    fifo_count = (tmp[0] << 8) | tmp[1];
    if (fifo_count < length) {
        more[0] = 0;
        return -1;
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
        return -1;
    more[0] = fifo_count / length - 1;
    return 0;
}
 8000fe4:	b003      	add	sp, #12
 8000fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!st.chip_cfg.sensors)
 8000fea:	7aab      	ldrb	r3, [r5, #10]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d0f7      	beq.n	8000fe0 <mpu_read_fifo_stream+0x14>
    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8000ff0:	e9d5 1000 	ldrd	r1, r0, [r5]
 8000ff4:	ab01      	add	r3, sp, #4
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	7b09      	ldrb	r1, [r1, #12]
 8000ffa:	7800      	ldrb	r0, [r0, #0]
 8000ffc:	f001 fe4c 	bl	8002c98 <i2c_read>
 8001000:	2800      	cmp	r0, #0
 8001002:	d1ed      	bne.n	8000fe0 <mpu_read_fifo_stream+0x14>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8001004:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001008:	f89d 4005 	ldrb.w	r4, [sp, #5]
 800100c:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    if (fifo_count < length) {
 8001010:	42b4      	cmp	r4, r6
 8001012:	d201      	bcs.n	8001018 <mpu_read_fifo_stream+0x4c>
        more[0] = 0;
 8001014:	7038      	strb	r0, [r7, #0]
 8001016:	e7e3      	b.n	8000fe0 <mpu_read_fifo_stream+0x14>
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8001018:	6868      	ldr	r0, [r5, #4]
 800101a:	8843      	ldrh	r3, [r0, #2]
 800101c:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
 8001020:	d911      	bls.n	8001046 <mpu_read_fifo_stream+0x7a>
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8001022:	6829      	ldr	r1, [r5, #0]
 8001024:	ab01      	add	r3, sp, #4
 8001026:	2201      	movs	r2, #1
 8001028:	7cc9      	ldrb	r1, [r1, #19]
 800102a:	7800      	ldrb	r0, [r0, #0]
 800102c:	f001 fe34 	bl	8002c98 <i2c_read>
 8001030:	2800      	cmp	r0, #0
 8001032:	d1d5      	bne.n	8000fe0 <mpu_read_fifo_stream+0x14>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8001034:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001038:	06db      	lsls	r3, r3, #27
 800103a:	d504      	bpl.n	8001046 <mpu_read_fifo_stream+0x7a>
            mpu_reset_fifo();
 800103c:	f7ff fe34 	bl	8000ca8 <mpu_reset_fifo>
            return -2;
 8001040:	f06f 0001 	mvn.w	r0, #1
 8001044:	e7ce      	b.n	8000fe4 <mpu_read_fifo_stream+0x18>
    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 8001046:	e9d8 1000 	ldrd	r1, r0, [r8]
 800104a:	464b      	mov	r3, r9
 800104c:	b2f2      	uxtb	r2, r6
 800104e:	7b49      	ldrb	r1, [r1, #13]
 8001050:	7800      	ldrb	r0, [r0, #0]
 8001052:	f001 fe21 	bl	8002c98 <i2c_read>
 8001056:	2800      	cmp	r0, #0
 8001058:	d1c2      	bne.n	8000fe0 <mpu_read_fifo_stream+0x14>
    more[0] = fifo_count / length - 1;
 800105a:	fbb4 f4f6 	udiv	r4, r4, r6
 800105e:	3c01      	subs	r4, #1
 8001060:	703c      	strb	r4, [r7, #0]
    return 0;
 8001062:	e7bf      	b.n	8000fe4 <mpu_read_fifo_stream+0x18>
 8001064:	20000000 	.word	0x20000000

08001068 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8001068:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 800106a:	4c36      	ldr	r4, [pc, #216]	; (8001144 <mpu_set_bypass+0xdc>)
{
 800106c:	4605      	mov	r5, r0
    if (st.chip_cfg.bypass_mode == bypass_on)
 800106e:	7ca3      	ldrb	r3, [r4, #18]
 8001070:	4283      	cmp	r3, r0
 8001072:	d041      	beq.n	80010f8 <mpu_set_bypass+0x90>
 8001074:	6863      	ldr	r3, [r4, #4]
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001076:	2201      	movs	r2, #1
 8001078:	7818      	ldrb	r0, [r3, #0]
 800107a:	6823      	ldr	r3, [r4, #0]
 800107c:	7919      	ldrb	r1, [r3, #4]
 800107e:	f10d 0307 	add.w	r3, sp, #7
    if (bypass_on) {
 8001082:	2d00      	cmp	r5, #0
 8001084:	d03a      	beq.n	80010fc <mpu_set_bypass+0x94>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001086:	f001 fe07 	bl	8002c98 <i2c_read>
 800108a:	b118      	cbz	r0, 8001094 <mpu_set_bypass+0x2c>
            return -1;
 800108c:	f04f 30ff 	mov.w	r0, #4294967295
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
 8001090:	b003      	add	sp, #12
 8001092:	bd30      	pop	{r4, r5, pc}
        tmp &= ~BIT_AUX_IF_EN;
 8001094:	f89d 3007 	ldrb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001098:	e9d4 1000 	ldrd	r1, r0, [r4]
        tmp &= ~BIT_AUX_IF_EN;
 800109c:	f023 0320 	bic.w	r3, r3, #32
 80010a0:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80010a4:	2201      	movs	r2, #1
 80010a6:	f10d 0307 	add.w	r3, sp, #7
 80010aa:	7909      	ldrb	r1, [r1, #4]
 80010ac:	7800      	ldrb	r0, [r0, #0]
 80010ae:	f001 fde5 	bl	8002c7c <i2c_write>
 80010b2:	2800      	cmp	r0, #0
 80010b4:	d1ea      	bne.n	800108c <mpu_set_bypass+0x24>
        delay_ms(3);
 80010b6:	2003      	movs	r0, #3
 80010b8:	f001 fdfc 	bl	8002cb4 <delay_ms>
        tmp = BIT_BYPASS_EN;
 80010bc:	2302      	movs	r3, #2
 80010be:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.active_low_int)
 80010c2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80010c6:	b113      	cbz	r3, 80010ce <mpu_set_bypass+0x66>
            tmp |= BIT_ACTL;
 80010c8:	2382      	movs	r3, #130	; 0x82
            tmp = 0;
 80010ca:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.latched_int)
 80010ce:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80010d2:	b12b      	cbz	r3, 80010e0 <mpu_set_bypass+0x78>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80010d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80010d8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80010dc:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80010e0:	e9d4 1000 	ldrd	r1, r0, [r4]
 80010e4:	f10d 0307 	add.w	r3, sp, #7
 80010e8:	2201      	movs	r2, #1
 80010ea:	7dc9      	ldrb	r1, [r1, #23]
 80010ec:	7800      	ldrb	r0, [r0, #0]
 80010ee:	f001 fdc5 	bl	8002c7c <i2c_write>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	d1ca      	bne.n	800108c <mpu_set_bypass+0x24>
    st.chip_cfg.bypass_mode = bypass_on;
 80010f6:	74a5      	strb	r5, [r4, #18]
        return 0;
 80010f8:	2000      	movs	r0, #0
 80010fa:	e7c9      	b.n	8001090 <mpu_set_bypass+0x28>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80010fc:	f001 fdcc 	bl	8002c98 <i2c_read>
 8001100:	2800      	cmp	r0, #0
 8001102:	d1c3      	bne.n	800108c <mpu_set_bypass+0x24>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001104:	e9d4 1000 	ldrd	r1, r0, [r4]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8001108:	7aa2      	ldrb	r2, [r4, #10]
 800110a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800110e:	07d2      	lsls	r2, r2, #31
            tmp |= BIT_AUX_IF_EN;
 8001110:	bf4c      	ite	mi
 8001112:	f043 0320 	orrmi.w	r3, r3, #32
            tmp &= ~BIT_AUX_IF_EN;
 8001116:	f023 0320 	bicpl.w	r3, r3, #32
 800111a:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800111e:	2201      	movs	r2, #1
 8001120:	f10d 0307 	add.w	r3, sp, #7
 8001124:	7909      	ldrb	r1, [r1, #4]
 8001126:	7800      	ldrb	r0, [r0, #0]
 8001128:	f001 fda8 	bl	8002c7c <i2c_write>
 800112c:	2800      	cmp	r0, #0
 800112e:	d1ad      	bne.n	800108c <mpu_set_bypass+0x24>
        delay_ms(3);
 8001130:	2003      	movs	r0, #3
 8001132:	f001 fdbf 	bl	8002cb4 <delay_ms>
        if (st.chip_cfg.active_low_int)
 8001136:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0c5      	beq.n	80010ca <mpu_set_bypass+0x62>
            tmp = BIT_ACTL;
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	e7c3      	b.n	80010ca <mpu_set_bypass+0x62>
 8001142:	bf00      	nop
 8001144:	20000000 	.word	0x20000000

08001148 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 8001148:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 800114a:	4c18      	ldr	r4, [pc, #96]	; (80011ac <mpu_set_int_latched+0x64>)
{
 800114c:	4605      	mov	r5, r0
    if (st.chip_cfg.latched_int == enable)
 800114e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8001152:	4283      	cmp	r3, r0
 8001154:	d028      	beq.n	80011a8 <mpu_set_int_latched+0x60>
        return 0;

    if (enable)
 8001156:	b308      	cbz	r0, 800119c <mpu_set_int_latched+0x54>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8001158:	2330      	movs	r3, #48	; 0x30
 800115a:	f88d 3007 	strb.w	r3, [sp, #7]
    else
        tmp = 0;
    if (st.chip_cfg.bypass_mode)
 800115e:	7ca3      	ldrb	r3, [r4, #18]
 8001160:	b12b      	cbz	r3, 800116e <mpu_set_int_latched+0x26>
        tmp |= BIT_BYPASS_EN;
 8001162:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.active_low_int)
 800116e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001172:	b12b      	cbz	r3, 8001180 <mpu_set_int_latched+0x38>
        tmp |= BIT_ACTL;
 8001174:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001178:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800117c:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001180:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001184:	f10d 0307 	add.w	r3, sp, #7
 8001188:	2201      	movs	r2, #1
 800118a:	7dc9      	ldrb	r1, [r1, #23]
 800118c:	7800      	ldrb	r0, [r0, #0]
 800118e:	f001 fd75 	bl	8002c7c <i2c_write>
 8001192:	b930      	cbnz	r0, 80011a2 <mpu_set_int_latched+0x5a>
        return -1;
    st.chip_cfg.latched_int = enable;
 8001194:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
    return 0;
}
 8001198:	b003      	add	sp, #12
 800119a:	bd30      	pop	{r4, r5, pc}
        tmp = 0;
 800119c:	f88d 0007 	strb.w	r0, [sp, #7]
 80011a0:	e7dd      	b.n	800115e <mpu_set_int_latched+0x16>
        return -1;
 80011a2:	f04f 30ff 	mov.w	r0, #4294967295
 80011a6:	e7f7      	b.n	8001198 <mpu_set_int_latched+0x50>
        return 0;
 80011a8:	2000      	movs	r0, #0
 80011aa:	e7f5      	b.n	8001198 <mpu_set_int_latched+0x50>
 80011ac:	20000000 	.word	0x20000000

080011b0 <mpu_lp_accel_mode>:
    if (rate > 40)
 80011b0:	2828      	cmp	r0, #40	; 0x28
{
 80011b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80011b4:	4605      	mov	r5, r0
    if (rate > 40)
 80011b6:	d902      	bls.n	80011be <mpu_lp_accel_mode+0xe>
        return -1;
 80011b8:	f04f 35ff 	mov.w	r5, #4294967295
 80011bc:	e013      	b.n	80011e6 <mpu_lp_accel_mode+0x36>
 80011be:	4c28      	ldr	r4, [pc, #160]	; (8001260 <mpu_lp_accel_mode+0xb0>)
    if (!rate) {
 80011c0:	b9a0      	cbnz	r0, 80011ec <mpu_lp_accel_mode+0x3c>
        mpu_set_int_latched(0);
 80011c2:	f7ff ffc1 	bl	8001148 <mpu_set_int_latched>
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80011c6:	e9d4 1000 	ldrd	r1, r0, [r4]
        tmp[0] = 0;
 80011ca:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80011ce:	f8ad 3004 	strh.w	r3, [sp, #4]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80011d2:	2202      	movs	r2, #2
 80011d4:	ab01      	add	r3, sp, #4
 80011d6:	7d49      	ldrb	r1, [r1, #21]
 80011d8:	7800      	ldrb	r0, [r0, #0]
 80011da:	f001 fd4f 	bl	8002c7c <i2c_write>
 80011de:	4605      	mov	r5, r0
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d1e9      	bne.n	80011b8 <mpu_lp_accel_mode+0x8>
        st.chip_cfg.lp_accel_mode = 0;
 80011e4:	7520      	strb	r0, [r4, #20]
}
 80011e6:	4628      	mov	r0, r5
 80011e8:	b003      	add	sp, #12
 80011ea:	bd30      	pop	{r4, r5, pc}
    mpu_set_int_latched(1);
 80011ec:	2001      	movs	r0, #1
 80011ee:	f7ff ffab 	bl	8001148 <mpu_set_int_latched>
    if (rate == 1)
 80011f2:	2d01      	cmp	r5, #1
 80011f4:	d122      	bne.n	800123c <mpu_lp_accel_mode+0x8c>
        tmp[0] = INV_LPA_1_25HZ;
 80011f6:	2302      	movs	r3, #2
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 80011f8:	e9d4 1000 	ldrd	r1, r0, [r4]
        tmp[0] = INV_LPA_40HZ;
 80011fc:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 8001200:	2201      	movs	r2, #1
 8001202:	ab01      	add	r3, sp, #4
 8001204:	7a49      	ldrb	r1, [r1, #9]
 8001206:	7800      	ldrb	r0, [r0, #0]
 8001208:	f001 fd38 	bl	8002c7c <i2c_write>
 800120c:	2800      	cmp	r0, #0
 800120e:	d1d3      	bne.n	80011b8 <mpu_lp_accel_mode+0x8>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 8001210:	e9d4 1000 	ldrd	r1, r0, [r4]
    tmp[0] = BIT_LPA_CYCLE;
 8001214:	2320      	movs	r3, #32
 8001216:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 800121a:	2201      	movs	r2, #1
 800121c:	ab01      	add	r3, sp, #4
 800121e:	7d49      	ldrb	r1, [r1, #21]
 8001220:	7800      	ldrb	r0, [r0, #0]
 8001222:	f001 fd2b 	bl	8002c7c <i2c_write>
 8001226:	4605      	mov	r5, r0
 8001228:	2800      	cmp	r0, #0
 800122a:	d1c5      	bne.n	80011b8 <mpu_lp_accel_mode+0x8>
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 800122c:	2308      	movs	r3, #8
 800122e:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.lp_accel_mode = 1;
 8001230:	2301      	movs	r3, #1
    st.chip_cfg.clk_src = 0;
 8001232:	7320      	strb	r0, [r4, #12]
    st.chip_cfg.lp_accel_mode = 1;
 8001234:	7523      	strb	r3, [r4, #20]
    mpu_configure_fifo(0);
 8001236:	f7ff fea1 	bl	8000f7c <mpu_configure_fifo>
 800123a:	e7d4      	b.n	80011e6 <mpu_lp_accel_mode+0x36>
    else if (rate == 2)
 800123c:	2d02      	cmp	r5, #2
 800123e:	d101      	bne.n	8001244 <mpu_lp_accel_mode+0x94>
        tmp[0] = INV_LPA_2_5HZ;
 8001240:	2303      	movs	r3, #3
 8001242:	e7d9      	b.n	80011f8 <mpu_lp_accel_mode+0x48>
    else if (rate <= 5)
 8001244:	2d05      	cmp	r5, #5
 8001246:	d801      	bhi.n	800124c <mpu_lp_accel_mode+0x9c>
        tmp[0] = INV_LPA_5HZ;
 8001248:	2304      	movs	r3, #4
 800124a:	e7d5      	b.n	80011f8 <mpu_lp_accel_mode+0x48>
    else if (rate <= 10)
 800124c:	2d0a      	cmp	r5, #10
 800124e:	d801      	bhi.n	8001254 <mpu_lp_accel_mode+0xa4>
        tmp[0] = INV_LPA_10HZ;
 8001250:	2305      	movs	r3, #5
 8001252:	e7d1      	b.n	80011f8 <mpu_lp_accel_mode+0x48>
    else if (rate <= 20)
 8001254:	2d14      	cmp	r5, #20
        tmp[0] = INV_LPA_20HZ;
 8001256:	bf94      	ite	ls
 8001258:	2306      	movls	r3, #6
        tmp[0] = INV_LPA_40HZ;
 800125a:	2307      	movhi	r3, #7
 800125c:	e7cc      	b.n	80011f8 <mpu_lp_accel_mode+0x48>
 800125e:	bf00      	nop
 8001260:	20000000 	.word	0x20000000

08001264 <mpu_set_sample_rate>:
{
 8001264:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!(st.chip_cfg.sensors))
 8001266:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <mpu_set_sample_rate+0x8c>)
{
 8001268:	4604      	mov	r4, r0
    if (!(st.chip_cfg.sensors))
 800126a:	7a9a      	ldrb	r2, [r3, #10]
 800126c:	461e      	mov	r6, r3
 800126e:	b922      	cbnz	r2, 800127a <mpu_set_sample_rate+0x16>
        return -1;
 8001270:	f04f 34ff 	mov.w	r4, #4294967295
}
 8001274:	4620      	mov	r0, r4
 8001276:	b002      	add	sp, #8
 8001278:	bd70      	pop	{r4, r5, r6, pc}
    if (st.chip_cfg.dmp_on)
 800127a:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
 800127e:	2d00      	cmp	r5, #0
 8001280:	d1f6      	bne.n	8001270 <mpu_set_sample_rate+0xc>
        if (st.chip_cfg.lp_accel_mode) {
 8001282:	7d1b      	ldrb	r3, [r3, #20]
 8001284:	b14b      	cbz	r3, 800129a <mpu_set_sample_rate+0x36>
            if (rate && (rate <= 40)) {
 8001286:	1e43      	subs	r3, r0, #1
 8001288:	2b27      	cmp	r3, #39	; 0x27
 800128a:	d803      	bhi.n	8001294 <mpu_set_sample_rate+0x30>
                mpu_lp_accel_mode(rate);
 800128c:	f7ff ff90 	bl	80011b0 <mpu_lp_accel_mode>
                return 0;
 8001290:	462c      	mov	r4, r5
 8001292:	e7ef      	b.n	8001274 <mpu_set_sample_rate+0x10>
            mpu_lp_accel_mode(0);
 8001294:	4628      	mov	r0, r5
 8001296:	f7ff ff8b 	bl	80011b0 <mpu_lp_accel_mode>
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 800129a:	e9d6 1000 	ldrd	r1, r0, [r6]
 800129e:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80012a2:	bf28      	it	cs
 80012a4:	f44f 747a 	movcs.w	r4, #1000	; 0x3e8
        data = 1000 / rate - 1;
 80012a8:	2c04      	cmp	r4, #4
 80012aa:	bf38      	it	cc
 80012ac:	2404      	movcc	r4, #4
 80012ae:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80012b2:	fb95 f4f4 	sdiv	r4, r5, r4
 80012b6:	ab02      	add	r3, sp, #8
 80012b8:	3c01      	subs	r4, #1
 80012ba:	f803 4d01 	strb.w	r4, [r3, #-1]!
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 80012be:	2201      	movs	r2, #1
 80012c0:	7849      	ldrb	r1, [r1, #1]
 80012c2:	7800      	ldrb	r0, [r0, #0]
 80012c4:	f001 fcda 	bl	8002c7c <i2c_write>
 80012c8:	4604      	mov	r4, r0
 80012ca:	2800      	cmp	r0, #0
 80012cc:	d1d0      	bne.n	8001270 <mpu_set_sample_rate+0xc>
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80012ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 80012d2:	8d30      	ldrh	r0, [r6, #40]	; 0x28
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80012d4:	3301      	adds	r3, #1
 80012d6:	fb95 f5f3 	sdiv	r5, r5, r3
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 80012da:	2864      	cmp	r0, #100	; 0x64
 80012dc:	bf28      	it	cs
 80012de:	2064      	movcs	r0, #100	; 0x64
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80012e0:	81f5      	strh	r5, [r6, #14]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 80012e2:	f7ff fe25 	bl	8000f30 <mpu_set_compass_sample_rate>
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 80012e6:	89f0      	ldrh	r0, [r6, #14]
 80012e8:	0840      	lsrs	r0, r0, #1
 80012ea:	f7ff fdeb 	bl	8000ec4 <mpu_set_lpf>
        return 0;
 80012ee:	e7c1      	b.n	8001274 <mpu_set_sample_rate+0x10>
 80012f0:	20000000 	.word	0x20000000

080012f4 <mpu_set_sensors>:
    if (sensors & INV_XYZ_GYRO)
 80012f4:	f010 0370 	ands.w	r3, r0, #112	; 0x70
{
 80012f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80012fa:	4605      	mov	r5, r0
    if (sensors & INV_XYZ_GYRO)
 80012fc:	d014      	beq.n	8001328 <mpu_set_sensors+0x34>
        data = INV_CLK_PLL;
 80012fe:	2301      	movs	r3, #1
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8001300:	4c49      	ldr	r4, [pc, #292]	; (8001428 <mpu_set_sensors+0x134>)
        data = BIT_SLEEP;
 8001302:	f88d 3006 	strb.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8001306:	e9d4 1000 	ldrd	r1, r0, [r4]
 800130a:	f10d 0306 	add.w	r3, sp, #6
 800130e:	2201      	movs	r2, #1
 8001310:	7d49      	ldrb	r1, [r1, #21]
 8001312:	7800      	ldrb	r0, [r0, #0]
 8001314:	f001 fcb2 	bl	8002c7c <i2c_write>
 8001318:	b150      	cbz	r0, 8001330 <mpu_set_sensors+0x3c>
        st.chip_cfg.sensors = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	72a3      	strb	r3, [r4, #10]
        return -1;
 800131e:	f04f 36ff 	mov.w	r6, #4294967295
}
 8001322:	4630      	mov	r0, r6
 8001324:	b002      	add	sp, #8
 8001326:	bd70      	pop	{r4, r5, r6, pc}
    else if (sensors)
 8001328:	2800      	cmp	r0, #0
 800132a:	d1e9      	bne.n	8001300 <mpu_set_sensors+0xc>
        data = BIT_SLEEP;
 800132c:	2340      	movs	r3, #64	; 0x40
 800132e:	e7e7      	b.n	8001300 <mpu_set_sensors+0xc>
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8001330:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8001334:	2201      	movs	r2, #1
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8001336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800133a:	7323      	strb	r3, [r4, #12]
    if (!(sensors & INV_X_GYRO))
 800133c:	066b      	lsls	r3, r5, #25
        data |= BIT_STBY_XG;
 800133e:	bf56      	itet	pl
 8001340:	2304      	movpl	r3, #4
    data = 0;
 8001342:	f88d 0006 	strbmi.w	r0, [sp, #6]
        data |= BIT_STBY_XG;
 8001346:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (!(sensors & INV_Y_GYRO))
 800134a:	06ae      	lsls	r6, r5, #26
        data |= BIT_STBY_YG;
 800134c:	bf5e      	ittt	pl
 800134e:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
 8001352:	f043 0302 	orrpl.w	r3, r3, #2
 8001356:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (!(sensors & INV_Z_GYRO))
 800135a:	06e8      	lsls	r0, r5, #27
        data |= BIT_STBY_ZG;
 800135c:	bf5e      	ittt	pl
 800135e:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
 8001362:	f043 0301 	orrpl.w	r3, r3, #1
 8001366:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (!(sensors & INV_XYZ_ACCEL))
 800136a:	0729      	lsls	r1, r5, #28
        data |= BIT_STBY_XYZA;
 800136c:	bf58      	it	pl
 800136e:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8001372:	e9d4 1000 	ldrd	r1, r0, [r4]
        data |= BIT_STBY_XYZA;
 8001376:	bf5c      	itt	pl
 8001378:	f043 0338 	orrpl.w	r3, r3, #56	; 0x38
 800137c:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8001380:	7d89      	ldrb	r1, [r1, #22]
 8001382:	f10d 0306 	add.w	r3, sp, #6
 8001386:	7800      	ldrb	r0, [r0, #0]
 8001388:	f001 fc78 	bl	8002c7c <i2c_write>
 800138c:	2800      	cmp	r0, #0
 800138e:	d1c4      	bne.n	800131a <mpu_set_sensors+0x26>
    if (sensors && (sensors != INV_XYZ_ACCEL))
 8001390:	f015 0ff7 	tst.w	r5, #247	; 0xf7
 8001394:	d001      	beq.n	800139a <mpu_set_sensors+0xa6>
        mpu_set_int_latched(0);
 8001396:	f7ff fed7 	bl	8001148 <mpu_set_int_latched>
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 800139a:	e9d4 1000 	ldrd	r1, r0, [r4]
 800139e:	f10d 0307 	add.w	r3, sp, #7
 80013a2:	2201      	movs	r2, #1
 80013a4:	7909      	ldrb	r1, [r1, #4]
 80013a6:	7800      	ldrb	r0, [r0, #0]
 80013a8:	f001 fc76 	bl	8002c98 <i2c_read>
 80013ac:	2800      	cmp	r0, #0
 80013ae:	d1b6      	bne.n	800131e <mpu_set_sensors+0x2a>
    if (sensors & INV_XYZ_COMPASS) {
 80013b0:	07ea      	lsls	r2, r5, #31
        data = AKM_SINGLE_MEASUREMENT;
 80013b2:	bf4c      	ite	mi
 80013b4:	2211      	movmi	r2, #17
        data = AKM_POWER_DOWN;
 80013b6:	2210      	movpl	r2, #16
 80013b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
        data = AKM_SINGLE_MEASUREMENT;
 80013bc:	bf47      	ittee	mi
 80013be:	f88d 2006 	strbmi.w	r2, [sp, #6]
        user_ctrl |= BIT_AUX_IF_EN;
 80013c2:	f043 0320 	orrmi.w	r3, r3, #32
        user_ctrl &= ~BIT_AUX_IF_EN;
 80013c6:	f023 0320 	bicpl.w	r3, r3, #32
        data = AKM_POWER_DOWN;
 80013ca:	f88d 2006 	strbpl.w	r2, [sp, #6]
    if (st.chip_cfg.dmp_on)
 80013ce:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
        user_ctrl &= ~BIT_AUX_IF_EN;
 80013d2:	f88d 3007 	strb.w	r3, [sp, #7]
 80013d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (st.chip_cfg.dmp_on)
 80013da:	b30a      	cbz	r2, 8001420 <mpu_set_sensors+0x12c>
        user_ctrl |= BIT_DMP_EN;
 80013dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
        user_ctrl &= ~BIT_DMP_EN;
 80013e0:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 80013e4:	e9d4 1000 	ldrd	r1, r0, [r4]
 80013e8:	f10d 0306 	add.w	r3, sp, #6
 80013ec:	2201      	movs	r2, #1
 80013ee:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 80013f2:	7800      	ldrb	r0, [r0, #0]
 80013f4:	f001 fc42 	bl	8002c7c <i2c_write>
 80013f8:	2800      	cmp	r0, #0
 80013fa:	d190      	bne.n	800131e <mpu_set_sensors+0x2a>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 80013fc:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001400:	f10d 0307 	add.w	r3, sp, #7
 8001404:	2201      	movs	r2, #1
 8001406:	7909      	ldrb	r1, [r1, #4]
 8001408:	7800      	ldrb	r0, [r0, #0]
 800140a:	f001 fc37 	bl	8002c7c <i2c_write>
 800140e:	4606      	mov	r6, r0
 8001410:	2800      	cmp	r0, #0
 8001412:	d184      	bne.n	800131e <mpu_set_sensors+0x2a>
    st.chip_cfg.lp_accel_mode = 0;
 8001414:	7520      	strb	r0, [r4, #20]
    delay_ms(50);
 8001416:	2032      	movs	r0, #50	; 0x32
    st.chip_cfg.sensors = sensors;
 8001418:	72a5      	strb	r5, [r4, #10]
    delay_ms(50);
 800141a:	f001 fc4b 	bl	8002cb4 <delay_ms>
    return 0;
 800141e:	e780      	b.n	8001322 <mpu_set_sensors+0x2e>
        user_ctrl &= ~BIT_DMP_EN;
 8001420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001424:	e7dc      	b.n	80013e0 <mpu_set_sensors+0xec>
 8001426:	bf00      	nop
 8001428:	20000000 	.word	0x20000000

0800142c <mpu_init>:
{
 800142c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    data[0] = BIT_RESET;
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	ad04      	add	r5, sp, #16
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001432:	4ca1      	ldr	r4, [pc, #644]	; (80016b8 <mpu_init+0x28c>)
    data[0] = BIT_RESET;
 8001434:	f805 3d08 	strb.w	r3, [r5, #-8]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001438:	e9d4 1000 	ldrd	r1, r0, [r4]
 800143c:	462b      	mov	r3, r5
 800143e:	2201      	movs	r2, #1
 8001440:	7d49      	ldrb	r1, [r1, #21]
 8001442:	7800      	ldrb	r0, [r0, #0]
 8001444:	f001 fc1a 	bl	8002c7c <i2c_write>
 8001448:	4606      	mov	r6, r0
 800144a:	b120      	cbz	r0, 8001456 <mpu_init+0x2a>
        return -1;
 800144c:	f04f 34ff 	mov.w	r4, #4294967295
}
 8001450:	4620      	mov	r0, r4
 8001452:	b004      	add	sp, #16
 8001454:	bd70      	pop	{r4, r5, r6, pc}
    delay_ms(100);
 8001456:	2064      	movs	r0, #100	; 0x64
 8001458:	f001 fc2c 	bl	8002cb4 <delay_ms>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800145c:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = 0x00;
 8001460:	f88d 6008 	strb.w	r6, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001464:	462b      	mov	r3, r5
 8001466:	2201      	movs	r2, #1
 8001468:	7d49      	ldrb	r1, [r1, #21]
 800146a:	7800      	ldrb	r0, [r0, #0]
 800146c:	f001 fc06 	bl	8002c7c <i2c_write>
 8001470:	2800      	cmp	r0, #0
 8001472:	d1eb      	bne.n	800144c <mpu_init+0x20>
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 8001474:	2348      	movs	r3, #72	; 0x48
   st.chip_cfg.accel_half = 0;
 8001476:	74e0      	strb	r0, [r4, #19]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 8001478:	f88d 3008 	strb.w	r3, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 800147c:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001480:	462b      	mov	r3, r5
 8001482:	2201      	movs	r2, #1
 8001484:	7a09      	ldrb	r1, [r1, #8]
 8001486:	7800      	ldrb	r0, [r0, #0]
 8001488:	f001 fbf8 	bl	8002c7c <i2c_write>
 800148c:	2800      	cmp	r0, #0
 800148e:	d1dd      	bne.n	800144c <mpu_init+0x20>
    st.chip_cfg.sample_rate = 0xFFFF;
 8001490:	f64f 73ff 	movw	r3, #65535	; 0xffff
    st.chip_cfg.lpf = 0xFF;
 8001494:	2501      	movs	r5, #1
    st.chip_cfg.sample_rate = 0xFFFF;
 8001496:	81e3      	strh	r3, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 8001498:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 800149a:	8523      	strh	r3, [r4, #40]	; 0x28
    st.chip_cfg.gyro_fsr = 0xFF;
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
    st.chip_cfg.bypass_mode = 0xFF;
 80014a0:	22ff      	movs	r2, #255	; 0xff
    st.chip_cfg.lp_accel_mode = 0;
 80014a2:	82a0      	strh	r0, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 80014a4:	f8c4 0016 	str.w	r0, [r4, #22]
 80014a8:	f8c4 001a 	str.w	r0, [r4, #26]
 80014ac:	f8c4 001e 	str.w	r0, [r4, #30]
    st.chip_cfg.dmp_on = 0;
 80014b0:	6260      	str	r0, [r4, #36]	; 0x24
    st.chip_cfg.gyro_fsr = 0xFF;
 80014b2:	60a3      	str	r3, [r4, #8]
    st.chip_cfg.lpf = 0xFF;
 80014b4:	7325      	strb	r5, [r4, #12]
    st.chip_cfg.active_low_int = 1;
 80014b6:	8465      	strh	r5, [r4, #34]	; 0x22
    if (mpu_set_gyro_fsr(2000))
 80014b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    st.chip_cfg.bypass_mode = 0xFF;
 80014bc:	74a2      	strb	r2, [r4, #18]
    if (mpu_set_gyro_fsr(2000))
 80014be:	f7ff fc95 	bl	8000dec <mpu_set_gyro_fsr>
 80014c2:	2800      	cmp	r0, #0
 80014c4:	d1c2      	bne.n	800144c <mpu_init+0x20>
    if (mpu_set_accel_fsr(2))
 80014c6:	2002      	movs	r0, #2
 80014c8:	f7ff fcc8 	bl	8000e5c <mpu_set_accel_fsr>
 80014cc:	2800      	cmp	r0, #0
 80014ce:	d1bd      	bne.n	800144c <mpu_init+0x20>
    if (mpu_set_lpf(42))
 80014d0:	202a      	movs	r0, #42	; 0x2a
 80014d2:	f7ff fcf7 	bl	8000ec4 <mpu_set_lpf>
 80014d6:	2800      	cmp	r0, #0
 80014d8:	d1b8      	bne.n	800144c <mpu_init+0x20>
    if (mpu_set_sample_rate(1000))
 80014da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014de:	f7ff fec1 	bl	8001264 <mpu_set_sample_rate>
 80014e2:	2800      	cmp	r0, #0
 80014e4:	d1b2      	bne.n	800144c <mpu_init+0x20>
    if (mpu_configure_fifo(0))
 80014e6:	f7ff fd49 	bl	8000f7c <mpu_configure_fifo>
 80014ea:	2800      	cmp	r0, #0
 80014ec:	d1ae      	bne.n	800144c <mpu_init+0x20>
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
 80014ee:	4628      	mov	r0, r5
 80014f0:	f7ff fdba 	bl	8001068 <mpu_set_bypass>

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 80014f4:	250c      	movs	r5, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 80014f6:	ab01      	add	r3, sp, #4
 80014f8:	2201      	movs	r2, #1
 80014fa:	2100      	movs	r1, #0
 80014fc:	4628      	mov	r0, r5
 80014fe:	f001 fbcb 	bl	8002c98 <i2c_read>
        if (!result && (data[0] == AKM_WHOAMI))
 8001502:	b918      	cbnz	r0, 800150c <mpu_init+0xe0>
 8001504:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001508:	2b48      	cmp	r3, #72	; 0x48
 800150a:	d00c      	beq.n	8001526 <mpu_init+0xfa>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 800150c:	3501      	adds	r5, #1
 800150e:	b2ed      	uxtb	r5, r5
 8001510:	2d10      	cmp	r5, #16
 8001512:	d1f0      	bne.n	80014f6 <mpu_init+0xca>
    if (mpu_set_compass_sample_rate(10))
 8001514:	200a      	movs	r0, #10
 8001516:	f7ff fd0b 	bl	8000f30 <mpu_set_compass_sample_rate>
 800151a:	4604      	mov	r4, r0
 800151c:	2800      	cmp	r0, #0
 800151e:	d195      	bne.n	800144c <mpu_init+0x20>
    mpu_set_sensors(0);
 8001520:	f7ff fee8 	bl	80012f4 <mpu_set_sensors>
    return 0;
 8001524:	e794      	b.n	8001450 <mpu_init+0x24>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;

    data[0] = AKM_POWER_DOWN;
 8001526:	2610      	movs	r6, #16
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001528:	ab01      	add	r3, sp, #4
 800152a:	2201      	movs	r2, #1
 800152c:	210a      	movs	r1, #10
 800152e:	4628      	mov	r0, r5
    st.chip_cfg.compass_addr = akm_addr;
 8001530:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
    data[0] = AKM_POWER_DOWN;
 8001534:	f88d 6004 	strb.w	r6, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001538:	f001 fba0 	bl	8002c7c <i2c_write>
 800153c:	2800      	cmp	r0, #0
 800153e:	d1e9      	bne.n	8001514 <mpu_init+0xe8>
        return -1;
    delay_ms(1);
 8001540:	2001      	movs	r0, #1
 8001542:	f001 fbb7 	bl	8002cb4 <delay_ms>

    data[0] = AKM_FUSE_ROM_ACCESS;
 8001546:	231f      	movs	r3, #31
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001548:	2201      	movs	r2, #1
    data[0] = AKM_FUSE_ROM_ACCESS;
 800154a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800154e:	210a      	movs	r1, #10
 8001550:	ab01      	add	r3, sp, #4
 8001552:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8001556:	f001 fb91 	bl	8002c7c <i2c_write>
 800155a:	2800      	cmp	r0, #0
 800155c:	d1da      	bne.n	8001514 <mpu_init+0xe8>
        return -1;
    delay_ms(1);
 800155e:	2001      	movs	r0, #1
 8001560:	f001 fba8 	bl	8002cb4 <delay_ms>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 8001564:	ab01      	add	r3, sp, #4
 8001566:	2203      	movs	r2, #3
 8001568:	4631      	mov	r1, r6
 800156a:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 800156e:	f001 fb93 	bl	8002c98 <i2c_read>
 8001572:	2800      	cmp	r0, #0
 8001574:	d1ce      	bne.n	8001514 <mpu_init+0xe8>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8001576:	f89d 3004 	ldrb.w	r3, [sp, #4]
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800157a:	2201      	movs	r2, #1
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 800157c:	3380      	adds	r3, #128	; 0x80
 800157e:	85a3      	strh	r3, [r4, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8001580:	f89d 3005 	ldrb.w	r3, [sp, #5]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001584:	210a      	movs	r1, #10
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8001586:	3380      	adds	r3, #128	; 0x80
 8001588:	85e3      	strh	r3, [r4, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 800158a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800158e:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 8001592:	3380      	adds	r3, #128	; 0x80
 8001594:	8623      	strh	r3, [r4, #48]	; 0x30
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001596:	ab01      	add	r3, sp, #4
    data[0] = AKM_POWER_DOWN;
 8001598:	f88d 6004 	strb.w	r6, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800159c:	f001 fb6e 	bl	8002c7c <i2c_write>
 80015a0:	4605      	mov	r5, r0
 80015a2:	2800      	cmp	r0, #0
 80015a4:	d1b6      	bne.n	8001514 <mpu_init+0xe8>
        return -1;
    delay_ms(1);
 80015a6:	2001      	movs	r0, #1
 80015a8:	f001 fb84 	bl	8002cb4 <delay_ms>

    mpu_set_bypass(0);
 80015ac:	4628      	mov	r0, r5
 80015ae:	f7ff fd5b 	bl	8001068 <mpu_set_bypass>

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 80015b2:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = 0x40;
 80015b6:	2340      	movs	r3, #64	; 0x40
 80015b8:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 80015bc:	2201      	movs	r2, #1
 80015be:	ab01      	add	r3, sp, #4
 80015c0:	7e89      	ldrb	r1, [r1, #26]
 80015c2:	7800      	ldrb	r0, [r0, #0]
 80015c4:	f001 fb5a 	bl	8002c7c <i2c_write>
 80015c8:	2800      	cmp	r0, #0
 80015ca:	d1a3      	bne.n	8001514 <mpu_init+0xe8>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 80015cc:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 80015d0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 80015d4:	2201      	movs	r2, #1
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 80015d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015da:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 80015de:	7f89      	ldrb	r1, [r1, #30]
 80015e0:	ab01      	add	r3, sp, #4
 80015e2:	7800      	ldrb	r0, [r0, #0]
 80015e4:	f001 fb4a 	bl	8002c7c <i2c_write>
 80015e8:	2800      	cmp	r0, #0
 80015ea:	d193      	bne.n	8001514 <mpu_init+0xe8>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 80015ec:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = AKM_REG_ST1;
 80015f0:	2302      	movs	r3, #2
 80015f2:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 80015f6:	2201      	movs	r2, #1
 80015f8:	ab01      	add	r3, sp, #4
 80015fa:	7fc9      	ldrb	r1, [r1, #31]
 80015fc:	7800      	ldrb	r0, [r0, #0]
 80015fe:	f001 fb3d 	bl	8002c7c <i2c_write>
 8001602:	2800      	cmp	r0, #0
 8001604:	d186      	bne.n	8001514 <mpu_init+0xe8>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 8001606:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = BIT_SLAVE_EN | 8;
 800160a:	2388      	movs	r3, #136	; 0x88
 800160c:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 8001610:	2201      	movs	r2, #1
 8001612:	ab01      	add	r3, sp, #4
 8001614:	f891 1020 	ldrb.w	r1, [r1, #32]
 8001618:	7800      	ldrb	r0, [r0, #0]
 800161a:	f001 fb2f 	bl	8002c7c <i2c_write>
 800161e:	2800      	cmp	r0, #0
 8001620:	f47f af78 	bne.w	8001514 <mpu_init+0xe8>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8001624:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = st.chip_cfg.compass_addr;
 8001628:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 800162c:	2201      	movs	r2, #1
    data[0] = st.chip_cfg.compass_addr;
 800162e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8001632:	f891 1021 	ldrb.w	r1, [r1, #33]	; 0x21
 8001636:	ab01      	add	r3, sp, #4
 8001638:	7800      	ldrb	r0, [r0, #0]
 800163a:	f001 fb1f 	bl	8002c7c <i2c_write>
 800163e:	2800      	cmp	r0, #0
 8001640:	f47f af68 	bne.w	8001514 <mpu_init+0xe8>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8001644:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = AKM_REG_CNTL;
 8001648:	230a      	movs	r3, #10
 800164a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 800164e:	2201      	movs	r2, #1
 8001650:	ab01      	add	r3, sp, #4
 8001652:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8001656:	7800      	ldrb	r0, [r0, #0]
 8001658:	f001 fb10 	bl	8002c7c <i2c_write>
 800165c:	2800      	cmp	r0, #0
 800165e:	f47f af59 	bne.w	8001514 <mpu_init+0xe8>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8001662:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = BIT_SLAVE_EN | 1;
 8001666:	2381      	movs	r3, #129	; 0x81
 8001668:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 800166c:	2201      	movs	r2, #1
 800166e:	ab01      	add	r3, sp, #4
 8001670:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
 8001674:	7800      	ldrb	r0, [r0, #0]
 8001676:	f001 fb01 	bl	8002c7c <i2c_write>
 800167a:	2800      	cmp	r0, #0
 800167c:	f47f af4a 	bne.w	8001514 <mpu_init+0xe8>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 8001680:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = AKM_SINGLE_MEASUREMENT;
 8001684:	2311      	movs	r3, #17
 8001686:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 800168a:	2201      	movs	r2, #1
 800168c:	ab01      	add	r3, sp, #4
 800168e:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 8001692:	7800      	ldrb	r0, [r0, #0]
 8001694:	f001 faf2 	bl	8002c7c <i2c_write>
 8001698:	2800      	cmp	r0, #0
 800169a:	f47f af3b 	bne.w	8001514 <mpu_init+0xe8>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 800169e:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = 0x03;
 80016a2:	2303      	movs	r3, #3
 80016a4:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 80016a8:	2201      	movs	r2, #1
 80016aa:	ab01      	add	r3, sp, #4
 80016ac:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 80016b0:	7800      	ldrb	r0, [r0, #0]
 80016b2:	f001 fae3 	bl	8002c7c <i2c_write>
 80016b6:	e72d      	b.n	8001514 <mpu_init+0xe8>
 80016b8:	20000000 	.word	0x20000000

080016bc <mpu_write_mem>:
{
 80016bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80016be:	460d      	mov	r5, r1
    if (!data)
 80016c0:	4616      	mov	r6, r2
 80016c2:	b91a      	cbnz	r2, 80016cc <mpu_write_mem+0x10>
        return -1;
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80016c8:	b003      	add	sp, #12
 80016ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!st.chip_cfg.sensors)
 80016cc:	4c12      	ldr	r4, [pc, #72]	; (8001718 <mpu_write_mem+0x5c>)
 80016ce:	7aa3      	ldrb	r3, [r4, #10]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f7      	beq.n	80016c4 <mpu_write_mem+0x8>
    if (tmp[1] + length > st.hw->bank_size)
 80016d4:	6867      	ldr	r7, [r4, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 80016d6:	0a03      	lsrs	r3, r0, #8
 80016d8:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80016dc:	b2c0      	uxtb	r0, r0
    if (tmp[1] + length > st.hw->bank_size)
 80016de:	897b      	ldrh	r3, [r7, #10]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80016e0:	f88d 0005 	strb.w	r0, [sp, #5]
    if (tmp[1] + length > st.hw->bank_size)
 80016e4:	4408      	add	r0, r1
 80016e6:	4298      	cmp	r0, r3
 80016e8:	dcec      	bgt.n	80016c4 <mpu_write_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80016ea:	6821      	ldr	r1, [r4, #0]
 80016ec:	ab01      	add	r3, sp, #4
 80016ee:	2202      	movs	r2, #2
 80016f0:	7ec9      	ldrb	r1, [r1, #27]
 80016f2:	7838      	ldrb	r0, [r7, #0]
 80016f4:	f001 fac2 	bl	8002c7c <i2c_write>
 80016f8:	2800      	cmp	r0, #0
 80016fa:	d1e3      	bne.n	80016c4 <mpu_write_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 80016fc:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001700:	4633      	mov	r3, r6
 8001702:	b2ea      	uxtb	r2, r5
 8001704:	7e09      	ldrb	r1, [r1, #24]
 8001706:	7800      	ldrb	r0, [r0, #0]
 8001708:	f001 fab8 	bl	8002c7c <i2c_write>
 800170c:	3000      	adds	r0, #0
 800170e:	bf18      	it	ne
 8001710:	2001      	movne	r0, #1
 8001712:	4240      	negs	r0, r0
 8001714:	e7d8      	b.n	80016c8 <mpu_write_mem+0xc>
 8001716:	bf00      	nop
 8001718:	20000000 	.word	0x20000000

0800171c <mpu_read_mem>:
{
 800171c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800171e:	460d      	mov	r5, r1
    if (!data)
 8001720:	4616      	mov	r6, r2
 8001722:	b91a      	cbnz	r2, 800172c <mpu_read_mem+0x10>
        return -1;
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001728:	b003      	add	sp, #12
 800172a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!st.chip_cfg.sensors)
 800172c:	4c12      	ldr	r4, [pc, #72]	; (8001778 <mpu_read_mem+0x5c>)
 800172e:	7aa3      	ldrb	r3, [r4, #10]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0f7      	beq.n	8001724 <mpu_read_mem+0x8>
    if (tmp[1] + length > st.hw->bank_size)
 8001734:	6867      	ldr	r7, [r4, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8001736:	0a03      	lsrs	r3, r0, #8
 8001738:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 800173c:	b2c0      	uxtb	r0, r0
    if (tmp[1] + length > st.hw->bank_size)
 800173e:	897b      	ldrh	r3, [r7, #10]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001740:	f88d 0005 	strb.w	r0, [sp, #5]
    if (tmp[1] + length > st.hw->bank_size)
 8001744:	4408      	add	r0, r1
 8001746:	4298      	cmp	r0, r3
 8001748:	dcec      	bgt.n	8001724 <mpu_read_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800174a:	6821      	ldr	r1, [r4, #0]
 800174c:	ab01      	add	r3, sp, #4
 800174e:	2202      	movs	r2, #2
 8001750:	7ec9      	ldrb	r1, [r1, #27]
 8001752:	7838      	ldrb	r0, [r7, #0]
 8001754:	f001 fa92 	bl	8002c7c <i2c_write>
 8001758:	2800      	cmp	r0, #0
 800175a:	d1e3      	bne.n	8001724 <mpu_read_mem+0x8>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 800175c:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001760:	4633      	mov	r3, r6
 8001762:	b2ea      	uxtb	r2, r5
 8001764:	7e09      	ldrb	r1, [r1, #24]
 8001766:	7800      	ldrb	r0, [r0, #0]
 8001768:	f001 fa96 	bl	8002c98 <i2c_read>
 800176c:	3000      	adds	r0, #0
 800176e:	bf18      	it	ne
 8001770:	2001      	movne	r0, #1
 8001772:	4240      	negs	r0, r0
 8001774:	e7d8      	b.n	8001728 <mpu_read_mem+0xc>
 8001776:	bf00      	nop
 8001778:	20000000 	.word	0x20000000

0800177c <mpu_load_firmware>:
{
 800177c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (st.chip_cfg.dmp_loaded)
 8001780:	4d25      	ldr	r5, [pc, #148]	; (8001818 <mpu_load_firmware+0x9c>)
{
 8001782:	b089      	sub	sp, #36	; 0x24
    if (st.chip_cfg.dmp_loaded)
 8001784:	f895 4025 	ldrb.w	r4, [r5, #37]	; 0x25
{
 8001788:	4607      	mov	r7, r0
 800178a:	4689      	mov	r9, r1
 800178c:	4616      	mov	r6, r2
 800178e:	9301      	str	r3, [sp, #4]
    if (st.chip_cfg.dmp_loaded)
 8001790:	b124      	cbz	r4, 800179c <mpu_load_firmware+0x20>
        return -1;
 8001792:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001796:	b009      	add	sp, #36	; 0x24
 8001798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!firmware)
 800179c:	2900      	cmp	r1, #0
 800179e:	d0f8      	beq.n	8001792 <mpu_load_firmware+0x16>
    for (ii = 0; ii < length; ii += this_write) {
 80017a0:	42bc      	cmp	r4, r7
 80017a2:	d314      	bcc.n	80017ce <mpu_load_firmware+0x52>
    tmp[0] = start_addr >> 8;
 80017a4:	0a33      	lsrs	r3, r6, #8
 80017a6:	f88d 300c 	strb.w	r3, [sp, #12]
    tmp[1] = start_addr & 0xFF;
 80017aa:	f88d 600d 	strb.w	r6, [sp, #13]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 80017ae:	e9d5 1000 	ldrd	r1, r0, [r5]
 80017b2:	ab03      	add	r3, sp, #12
 80017b4:	2202      	movs	r2, #2
 80017b6:	7f49      	ldrb	r1, [r1, #29]
 80017b8:	7800      	ldrb	r0, [r0, #0]
 80017ba:	f001 fa5f 	bl	8002c7c <i2c_write>
 80017be:	2800      	cmp	r0, #0
 80017c0:	d1e7      	bne.n	8001792 <mpu_load_firmware+0x16>
    st.chip_cfg.dmp_loaded = 1;
 80017c2:	2301      	movs	r3, #1
 80017c4:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 80017c8:	9b01      	ldr	r3, [sp, #4]
 80017ca:	84eb      	strh	r3, [r5, #38]	; 0x26
    return 0;
 80017cc:	e7e3      	b.n	8001796 <mpu_load_firmware+0x1a>
        this_write = min(LOAD_CHUNK, length - ii);
 80017ce:	eba7 0804 	sub.w	r8, r7, r4
 80017d2:	f1b8 0f10 	cmp.w	r8, #16
 80017d6:	bfa8      	it	ge
 80017d8:	f04f 0810 	movge.w	r8, #16
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 80017dc:	eb09 0b04 	add.w	fp, r9, r4
        this_write = min(LOAD_CHUNK, length - ii);
 80017e0:	fa1f fa88 	uxth.w	sl, r8
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 80017e4:	465a      	mov	r2, fp
 80017e6:	4651      	mov	r1, sl
 80017e8:	4620      	mov	r0, r4
 80017ea:	f7ff ff67 	bl	80016bc <mpu_write_mem>
 80017ee:	2800      	cmp	r0, #0
 80017f0:	d1cf      	bne.n	8001792 <mpu_load_firmware+0x16>
        if (mpu_read_mem(ii, this_write, cur))
 80017f2:	aa04      	add	r2, sp, #16
 80017f4:	4651      	mov	r1, sl
 80017f6:	4620      	mov	r0, r4
 80017f8:	f7ff ff90 	bl	800171c <mpu_read_mem>
 80017fc:	2800      	cmp	r0, #0
 80017fe:	d1c8      	bne.n	8001792 <mpu_load_firmware+0x16>
        if (memcmp(firmware+ii, cur, this_write))
 8001800:	4652      	mov	r2, sl
 8001802:	a904      	add	r1, sp, #16
 8001804:	4658      	mov	r0, fp
 8001806:	f008 f911 	bl	8009a2c <memcmp>
 800180a:	b910      	cbnz	r0, 8001812 <mpu_load_firmware+0x96>
    for (ii = 0; ii < length; ii += this_write) {
 800180c:	4454      	add	r4, sl
 800180e:	b2a4      	uxth	r4, r4
 8001810:	e7c6      	b.n	80017a0 <mpu_load_firmware+0x24>
            return -2;
 8001812:	f06f 0001 	mvn.w	r0, #1
 8001816:	e7be      	b.n	8001796 <mpu_load_firmware+0x1a>
 8001818:	20000000 	.word	0x20000000

0800181c <mpu_set_dmp_state>:
{
 800181c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (st.chip_cfg.dmp_on == enable)
 800181e:	4d1c      	ldr	r5, [pc, #112]	; (8001890 <mpu_set_dmp_state+0x74>)
{
 8001820:	4604      	mov	r4, r0
    if (st.chip_cfg.dmp_on == enable)
 8001822:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8001826:	4283      	cmp	r3, r0
 8001828:	d01d      	beq.n	8001866 <mpu_set_dmp_state+0x4a>
    if (enable) {
 800182a:	b1f8      	cbz	r0, 800186c <mpu_set_dmp_state+0x50>
        if (!st.chip_cfg.dmp_loaded)
 800182c:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8001830:	b35b      	cbz	r3, 800188a <mpu_set_dmp_state+0x6e>
        tmp = 0;
 8001832:	2400      	movs	r4, #0
        set_int_enable(0);
 8001834:	2000      	movs	r0, #0
 8001836:	f7ff fa0d 	bl	8000c54 <set_int_enable>
        mpu_set_bypass(0);
 800183a:	2000      	movs	r0, #0
 800183c:	f7ff fc14 	bl	8001068 <mpu_set_bypass>
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8001840:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 8001842:	f7ff fd0f 	bl	8001264 <mpu_set_sample_rate>
        tmp = 0;
 8001846:	ab02      	add	r3, sp, #8
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001848:	6868      	ldr	r0, [r5, #4]
        tmp = 0;
 800184a:	f803 4d01 	strb.w	r4, [r3, #-1]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800184e:	2201      	movs	r2, #1
 8001850:	2123      	movs	r1, #35	; 0x23
 8001852:	7800      	ldrb	r0, [r0, #0]
 8001854:	f001 fa12 	bl	8002c7c <i2c_write>
        st.chip_cfg.dmp_on = 1;
 8001858:	2001      	movs	r0, #1
 800185a:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
        set_int_enable(1);
 800185e:	f7ff f9f9 	bl	8000c54 <set_int_enable>
        mpu_reset_fifo();
 8001862:	f7ff fa21 	bl	8000ca8 <mpu_reset_fifo>
        return 0;
 8001866:	2000      	movs	r0, #0
}
 8001868:	b003      	add	sp, #12
 800186a:	bd30      	pop	{r4, r5, pc}
        set_int_enable(0);
 800186c:	f7ff f9f2 	bl	8000c54 <set_int_enable>
        tmp = st.chip_cfg.fifo_enable;
 8001870:	7c2a      	ldrb	r2, [r5, #16]
 8001872:	ab02      	add	r3, sp, #8
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001874:	6868      	ldr	r0, [r5, #4]
        tmp = st.chip_cfg.fifo_enable;
 8001876:	f803 2d01 	strb.w	r2, [r3, #-1]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800187a:	2123      	movs	r1, #35	; 0x23
 800187c:	2201      	movs	r2, #1
 800187e:	7800      	ldrb	r0, [r0, #0]
 8001880:	f001 f9fc 	bl	8002c7c <i2c_write>
        st.chip_cfg.dmp_on = 0;
 8001884:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
 8001888:	e7eb      	b.n	8001862 <mpu_set_dmp_state+0x46>
            return -1;
 800188a:	f04f 30ff 	mov.w	r0, #4294967295
 800188e:	e7eb      	b.n	8001868 <mpu_set_dmp_state+0x4c>
 8001890:	20000000 	.word	0x20000000

08001894 <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
 8001894:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8001896:	4e2a      	ldr	r6, [pc, #168]	; (8001940 <mpu_get_compass_reg+0xac>)
{
 8001898:	b085      	sub	sp, #20
    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 800189a:	7ab3      	ldrb	r3, [r6, #10]
{
 800189c:	4604      	mov	r4, r0
    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 800189e:	07db      	lsls	r3, r3, #31
{
 80018a0:	460d      	mov	r5, r1
    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 80018a2:	d404      	bmi.n	80018ae <mpu_get_compass_reg+0x1a>
        return -1;
 80018a4:	f04f 37ff 	mov.w	r7, #4294967295
        get_ms(timestamp);
    return 0;
#else
    return -1;
#endif
}
 80018a8:	4638      	mov	r0, r7
 80018aa:	b005      	add	sp, #20
 80018ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
 80018ae:	e9d6 1000 	ldrd	r1, r0, [r6]
 80018b2:	ab01      	add	r3, sp, #4
 80018b4:	2208      	movs	r2, #8
 80018b6:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 80018ba:	7800      	ldrb	r0, [r0, #0]
 80018bc:	f001 f9ec 	bl	8002c98 <i2c_read>
 80018c0:	4607      	mov	r7, r0
 80018c2:	2800      	cmp	r0, #0
 80018c4:	d1ee      	bne.n	80018a4 <mpu_get_compass_reg+0x10>
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
 80018c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d130      	bne.n	8001934 <mpu_get_compass_reg+0xa0>
    if (tmp[7] & AKM_OVERFLOW)
 80018d2:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	db2f      	blt.n	800193a <mpu_get_compass_reg+0xa6>
    data[0] = (tmp[2] << 8) | tmp[1];
 80018da:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80018de:	f89d 1005 	ldrb.w	r1, [sp, #5]
    data[1] = (tmp[4] << 8) | tmp[3];
 80018e2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    data[0] = (tmp[2] << 8) | tmp[1];
 80018e6:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
    data[1] = (tmp[4] << 8) | tmp[3];
 80018ea:	f89d 3008 	ldrb.w	r3, [sp, #8]
    data[2] = (tmp[6] << 8) | tmp[5];
 80018ee:	f89d 000a 	ldrb.w	r0, [sp, #10]
    data[1] = (tmp[4] << 8) | tmp[3];
 80018f2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    data[2] = (tmp[6] << 8) | tmp[5];
 80018f6:	f89d 3009 	ldrb.w	r3, [sp, #9]
    data[0] = (tmp[2] << 8) | tmp[1];
 80018fa:	b209      	sxth	r1, r1
    data[2] = (tmp[6] << 8) | tmp[5];
 80018fc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    data[1] = (tmp[4] << 8) | tmp[3];
 8001900:	b212      	sxth	r2, r2
    data[2] = (tmp[6] << 8) | tmp[5];
 8001902:	b21b      	sxth	r3, r3
    data[0] = (tmp[2] << 8) | tmp[1];
 8001904:	8021      	strh	r1, [r4, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
 8001906:	8062      	strh	r2, [r4, #2]
    data[2] = (tmp[6] << 8) | tmp[5];
 8001908:	80a3      	strh	r3, [r4, #4]
    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
 800190a:	f9b6 002c 	ldrsh.w	r0, [r6, #44]	; 0x2c
 800190e:	4341      	muls	r1, r0
 8001910:	1209      	asrs	r1, r1, #8
 8001912:	8021      	strh	r1, [r4, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
 8001914:	f9b6 102e 	ldrsh.w	r1, [r6, #46]	; 0x2e
 8001918:	434a      	muls	r2, r1
 800191a:	1212      	asrs	r2, r2, #8
 800191c:	8062      	strh	r2, [r4, #2]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
 800191e:	f9b6 2030 	ldrsh.w	r2, [r6, #48]	; 0x30
 8001922:	4353      	muls	r3, r2
 8001924:	121b      	asrs	r3, r3, #8
 8001926:	80a3      	strh	r3, [r4, #4]
    if (timestamp)
 8001928:	2d00      	cmp	r5, #0
 800192a:	d0bd      	beq.n	80018a8 <mpu_get_compass_reg+0x14>
        get_ms(timestamp);
 800192c:	4628      	mov	r0, r5
 800192e:	f001 f9c3 	bl	8002cb8 <get_ms>
 8001932:	e7b9      	b.n	80018a8 <mpu_get_compass_reg+0x14>
        return -2;
 8001934:	f06f 0701 	mvn.w	r7, #1
 8001938:	e7b6      	b.n	80018a8 <mpu_get_compass_reg+0x14>
        return -3;
 800193a:	f06f 0702 	mvn.w	r7, #2
 800193e:	e7b3      	b.n	80018a8 <mpu_get_compass_reg+0x14>
 8001940:	20000000 	.word	0x20000000

08001944 <dmp_enable_gyro_cal.part.0>:
 *  called with @e DMP_FEATURE_SEND_CAL_GYRO, the biases will also be
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
 8001944:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
    if (enable) {
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8001946:	4a08      	ldr	r2, [pc, #32]	; (8001968 <dmp_enable_gyro_cal.part.0+0x24>)
 8001948:	ab01      	add	r3, sp, #4
 800194a:	6810      	ldr	r0, [r2, #0]
 800194c:	6851      	ldr	r1, [r2, #4]
 800194e:	7a12      	ldrb	r2, [r2, #8]
 8001950:	c303      	stmia	r3!, {r0, r1}
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8001952:	2109      	movs	r1, #9
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8001954:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8001956:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 800195a:	aa01      	add	r2, sp, #4
 800195c:	f7ff feae 	bl	80016bc <mpu_write_mem>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    }
}
 8001960:	b005      	add	sp, #20
 8001962:	f85d fb04 	ldr.w	pc, [sp], #4
 8001966:	bf00      	nop
 8001968:	0800c230 	.word	0x0800c230

0800196c <dmp_load_motion_driver_firmware>:
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 800196c:	23c8      	movs	r3, #200	; 0xc8
 800196e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001972:	4902      	ldr	r1, [pc, #8]	; (800197c <dmp_load_motion_driver_firmware+0x10>)
 8001974:	f640 30f6 	movw	r0, #3062	; 0xbf6
 8001978:	f7ff bf00 	b.w	800177c <mpu_load_firmware>
 800197c:	0800c654 	.word	0x0800c654

08001980 <dmp_set_orientation>:
{
 8001980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8001982:	f64c 534c 	movw	r3, #52556	; 0xcd4c
 8001986:	f8ad 3008 	strh.w	r3, [sp, #8]
 800198a:	236c      	movs	r3, #108	; 0x6c
 800198c:	f88d 300a 	strb.w	r3, [sp, #10]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8001990:	f64c 130c 	movw	r3, #51468	; 0xc90c
 8001994:	f8ad 300c 	strh.w	r3, [sp, #12]
 8001998:	232c      	movs	r3, #44	; 0x2c
    gyro_regs[0] = gyro_axes[orient & 3];
 800199a:	f000 0103 	and.w	r1, r0, #3
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 800199e:	f88d 300e 	strb.w	r3, [sp, #14]
    gyro_regs[0] = gyro_axes[orient & 3];
 80019a2:	ab04      	add	r3, sp, #16
 80019a4:	4419      	add	r1, r3
 80019a6:	f811 3c08 	ldrb.w	r3, [r1, #-8]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 80019aa:	f3c0 02c1 	ubfx	r2, r0, #3, #2
    gyro_regs[0] = gyro_axes[orient & 3];
 80019ae:	f88d 3000 	strb.w	r3, [sp]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 80019b2:	ab04      	add	r3, sp, #16
 80019b4:	441a      	add	r2, r3
 80019b6:	f812 3c08 	ldrb.w	r3, [r2, #-8]
{
 80019ba:	4604      	mov	r4, r0
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 80019bc:	f88d 3001 	strb.w	r3, [sp, #1]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 80019c0:	f3c0 1381 	ubfx	r3, r0, #6, #2
 80019c4:	a804      	add	r0, sp, #16
 80019c6:	4403      	add	r3, r0
 80019c8:	f813 0c08 	ldrb.w	r0, [r3, #-8]
    accel_regs[0] = accel_axes[orient & 3];
 80019cc:	f811 1c04 	ldrb.w	r1, [r1, #-4]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 80019d0:	f812 2c04 	ldrb.w	r2, [r2, #-4]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 80019d4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 80019d8:	f88d 0002 	strb.w	r0, [sp, #2]
    accel_regs[0] = accel_axes[orient & 3];
 80019dc:	f88d 1004 	strb.w	r1, [sp, #4]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 80019e0:	f88d 2005 	strb.w	r2, [sp, #5]
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 80019e4:	2103      	movs	r1, #3
 80019e6:	466a      	mov	r2, sp
 80019e8:	f240 4026 	movw	r0, #1062	; 0x426
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 80019ec:	f88d 3006 	strb.w	r3, [sp, #6]
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 80019f0:	f7ff fe64 	bl	80016bc <mpu_write_mem>
 80019f4:	b118      	cbz	r0, 80019fe <dmp_set_orientation+0x7e>
        return -1;
 80019f6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80019fa:	b004      	add	sp, #16
 80019fc:	bd10      	pop	{r4, pc}
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 80019fe:	aa01      	add	r2, sp, #4
 8001a00:	2103      	movs	r1, #3
 8001a02:	f240 402a 	movw	r0, #1066	; 0x42a
 8001a06:	f7ff fe59 	bl	80016bc <mpu_write_mem>
 8001a0a:	2800      	cmp	r0, #0
 8001a0c:	d1f3      	bne.n	80019f6 <dmp_set_orientation+0x76>
    memcpy(gyro_regs, gyro_sign, 3);
 8001a0e:	f245 6336 	movw	r3, #22070	; 0x5636
 8001a12:	f8ad 3000 	strh.w	r3, [sp]
 8001a16:	2376      	movs	r3, #118	; 0x76
 8001a18:	f88d 3002 	strb.w	r3, [sp, #2]
    memcpy(accel_regs, accel_sign, 3);
 8001a1c:	f244 6326 	movw	r3, #17958	; 0x4626
 8001a20:	f8ad 3004 	strh.w	r3, [sp, #4]
 8001a24:	2366      	movs	r3, #102	; 0x66
    if (orient & 4) {
 8001a26:	0761      	lsls	r1, r4, #29
    memcpy(accel_regs, accel_sign, 3);
 8001a28:	f88d 3006 	strb.w	r3, [sp, #6]
        gyro_regs[0] |= 1;
 8001a2c:	bf41      	itttt	mi
 8001a2e:	2337      	movmi	r3, #55	; 0x37
 8001a30:	f88d 3000 	strbmi.w	r3, [sp]
        accel_regs[0] |= 1;
 8001a34:	2327      	movmi	r3, #39	; 0x27
 8001a36:	f88d 3004 	strbmi.w	r3, [sp, #4]
    if (orient & 0x20) {
 8001a3a:	06a2      	lsls	r2, r4, #26
        gyro_regs[1] |= 1;
 8001a3c:	bf41      	itttt	mi
 8001a3e:	2357      	movmi	r3, #87	; 0x57
 8001a40:	f88d 3001 	strbmi.w	r3, [sp, #1]
        accel_regs[1] |= 1;
 8001a44:	2347      	movmi	r3, #71	; 0x47
 8001a46:	f88d 3005 	strbmi.w	r3, [sp, #5]
    if (orient & 0x100) {
 8001a4a:	05e3      	lsls	r3, r4, #23
        gyro_regs[2] |= 1;
 8001a4c:	bf42      	ittt	mi
 8001a4e:	2377      	movmi	r3, #119	; 0x77
 8001a50:	f88d 3002 	strbmi.w	r3, [sp, #2]
        accel_regs[2] |= 1;
 8001a54:	2367      	movmi	r3, #103	; 0x67
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8001a56:	466a      	mov	r2, sp
 8001a58:	f04f 0103 	mov.w	r1, #3
 8001a5c:	f44f 6088 	mov.w	r0, #1088	; 0x440
        accel_regs[2] |= 1;
 8001a60:	bf48      	it	mi
 8001a62:	f88d 3006 	strbmi.w	r3, [sp, #6]
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8001a66:	f7ff fe29 	bl	80016bc <mpu_write_mem>
 8001a6a:	2800      	cmp	r0, #0
 8001a6c:	d1c3      	bne.n	80019f6 <dmp_set_orientation+0x76>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8001a6e:	aa01      	add	r2, sp, #4
 8001a70:	2103      	movs	r1, #3
 8001a72:	f240 4031 	movw	r0, #1073	; 0x431
 8001a76:	f7ff fe21 	bl	80016bc <mpu_write_mem>
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	d1bb      	bne.n	80019f6 <dmp_set_orientation+0x76>
    dmp.orient = orient;
 8001a7e:	4b01      	ldr	r3, [pc, #4]	; (8001a84 <dmp_set_orientation+0x104>)
 8001a80:	811c      	strh	r4, [r3, #8]
    return 0;
 8001a82:	e7ba      	b.n	80019fa <dmp_set_orientation+0x7a>
 8001a84:	200003ac 	.word	0x200003ac

08001a88 <dmp_set_fifo_rate>:
{
 8001a88:	b510      	push	{r4, lr}
 8001a8a:	4604      	mov	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8001a8c:	4a14      	ldr	r2, [pc, #80]	; (8001ae0 <dmp_set_fifo_rate+0x58>)
{
 8001a8e:	b086      	sub	sp, #24
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8001a90:	6810      	ldr	r0, [r2, #0]
 8001a92:	6851      	ldr	r1, [r2, #4]
 8001a94:	ab03      	add	r3, sp, #12
 8001a96:	c303      	stmia	r3!, {r0, r1}
 8001a98:	6890      	ldr	r0, [r2, #8]
    if (rate > DMP_SAMPLE_RATE)
 8001a9a:	2cc8      	cmp	r4, #200	; 0xc8
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8001a9c:	6018      	str	r0, [r3, #0]
    if (rate > DMP_SAMPLE_RATE)
 8001a9e:	d903      	bls.n	8001aa8 <dmp_set_fifo_rate+0x20>
        return -1;
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001aa4:	b006      	add	sp, #24
 8001aa6:	bd10      	pop	{r4, pc}
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f88d 3004 	strb.w	r3, [sp, #4]
    div = DMP_SAMPLE_RATE / rate - 1;
 8001aae:	23c8      	movs	r3, #200	; 0xc8
 8001ab0:	fb93 f3f4 	sdiv	r3, r3, r4
    if (mpu_write_mem(D_0_22, 2, tmp))
 8001ab4:	aa01      	add	r2, sp, #4
    div = DMP_SAMPLE_RATE / rate - 1;
 8001ab6:	3b01      	subs	r3, #1
    if (mpu_write_mem(D_0_22, 2, tmp))
 8001ab8:	2102      	movs	r1, #2
 8001aba:	f240 2016 	movw	r0, #534	; 0x216
    tmp[1] = (unsigned char)(div & 0xFF);
 8001abe:	f88d 3005 	strb.w	r3, [sp, #5]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8001ac2:	f7ff fdfb 	bl	80016bc <mpu_write_mem>
 8001ac6:	2800      	cmp	r0, #0
 8001ac8:	d1ea      	bne.n	8001aa0 <dmp_set_fifo_rate+0x18>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8001aca:	aa03      	add	r2, sp, #12
 8001acc:	210c      	movs	r1, #12
 8001ace:	f640 20c1 	movw	r0, #2753	; 0xac1
 8001ad2:	f7ff fdf3 	bl	80016bc <mpu_write_mem>
 8001ad6:	2800      	cmp	r0, #0
 8001ad8:	d1e2      	bne.n	8001aa0 <dmp_set_fifo_rate+0x18>
    dmp.fifo_rate = rate;
 8001ada:	4b02      	ldr	r3, [pc, #8]	; (8001ae4 <dmp_set_fifo_rate+0x5c>)
 8001adc:	819c      	strh	r4, [r3, #12]
    return 0;
 8001ade:	e7e1      	b.n	8001aa4 <dmp_set_fifo_rate+0x1c>
 8001ae0:	0800c239 	.word	0x0800c239
 8001ae4:	200003ac 	.word	0x200003ac

08001ae8 <dmp_enable_gyro_cal>:
{
 8001ae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (enable) {
 8001aea:	b120      	cbz	r0, 8001af6 <dmp_enable_gyro_cal+0xe>
 8001aec:	f7ff ff2a 	bl	8001944 <dmp_enable_gyro_cal.part.0>
}
 8001af0:	b005      	add	sp, #20
 8001af2:	f85d fb04 	ldr.w	pc, [sp], #4
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8001af6:	4a07      	ldr	r2, [pc, #28]	; (8001b14 <dmp_enable_gyro_cal+0x2c>)
 8001af8:	ab01      	add	r3, sp, #4
 8001afa:	6810      	ldr	r0, [r2, #0]
 8001afc:	6851      	ldr	r1, [r2, #4]
 8001afe:	7a12      	ldrb	r2, [r2, #8]
 8001b00:	c303      	stmia	r3!, {r0, r1}
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8001b02:	2109      	movs	r1, #9
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8001b04:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8001b06:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8001b0a:	aa01      	add	r2, sp, #4
 8001b0c:	f7ff fdd6 	bl	80016bc <mpu_write_mem>
 8001b10:	e7ee      	b.n	8001af0 <dmp_enable_gyro_cal+0x8>
 8001b12:	bf00      	nop
 8001b14:	0800c245 	.word	0x0800c245

08001b18 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 8001b18:	b507      	push	{r0, r1, r2, lr}
    unsigned char regs[4];
    if (enable) {
 8001b1a:	b160      	cbz	r0, 8001b36 <dmp_enable_lp_quat+0x1e>
        regs[0] = DINBC0;
 8001b1c:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <dmp_enable_lp_quat+0x24>)
        regs[3] = DINBC6;
    }
    else
        memset(regs, 0x8B, 4);

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8001b1e:	aa01      	add	r2, sp, #4
 8001b20:	2104      	movs	r1, #4
 8001b22:	f640 2098 	movw	r0, #2712	; 0xa98
        memset(regs, 0x8B, 4);
 8001b26:	9301      	str	r3, [sp, #4]
    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8001b28:	f7ff fdc8 	bl	80016bc <mpu_write_mem>

    return mpu_reset_fifo();
 8001b2c:	f7ff f8bc 	bl	8000ca8 <mpu_reset_fifo>
}
 8001b30:	b003      	add	sp, #12
 8001b32:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(regs, 0x8B, 4);
 8001b36:	f04f 338b 	mov.w	r3, #2341178251	; 0x8b8b8b8b
 8001b3a:	e7f0      	b.n	8001b1e <dmp_enable_lp_quat+0x6>
 8001b3c:	c6c4c2c0 	.word	0xc6c4c2c0

08001b40 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 8001b40:	b507      	push	{r0, r1, r2, lr}
    unsigned char regs[4];
    if (enable) {
 8001b42:	b160      	cbz	r0, 8001b5e <dmp_enable_6x_lp_quat+0x1e>
        regs[0] = DINA20;
 8001b44:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <dmp_enable_6x_lp_quat+0x24>)
        regs[2] = DINA30;
        regs[3] = DINA38;
    } else
        memset(regs, 0xA3, 4);

    mpu_write_mem(CFG_8, 4, regs);
 8001b46:	aa01      	add	r2, sp, #4
 8001b48:	2104      	movs	r1, #4
 8001b4a:	f640 209e 	movw	r0, #2718	; 0xa9e
        memset(regs, 0xA3, 4);
 8001b4e:	9301      	str	r3, [sp, #4]
    mpu_write_mem(CFG_8, 4, regs);
 8001b50:	f7ff fdb4 	bl	80016bc <mpu_write_mem>

    return mpu_reset_fifo();
 8001b54:	f7ff f8a8 	bl	8000ca8 <mpu_reset_fifo>
}
 8001b58:	b003      	add	sp, #12
 8001b5a:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(regs, 0xA3, 4);
 8001b5e:	f04f 33a3 	mov.w	r3, #2745410467	; 0xa3a3a3a3
 8001b62:	e7f0      	b.n	8001b46 <dmp_enable_6x_lp_quat+0x6>
 8001b64:	38302820 	.word	0x38302820

08001b68 <dmp_enable_feature>:
{
 8001b68:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8001b6c:	4b44      	ldr	r3, [pc, #272]	; (8001c80 <dmp_enable_feature+0x118>)
 8001b6e:	ad04      	add	r5, sp, #16
 8001b70:	f845 3d0c 	str.w	r3, [r5, #-12]!
{
 8001b74:	4604      	mov	r4, r0
    mpu_write_mem(D_0_104, 4, tmp);
 8001b76:	462a      	mov	r2, r5
 8001b78:	2104      	movs	r1, #4
 8001b7a:	2068      	movs	r0, #104	; 0x68
 8001b7c:	f7ff fd9e 	bl	80016bc <mpu_write_mem>
    tmp[0] = 0xA3;
 8001b80:	23a3      	movs	r3, #163	; 0xa3
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8001b82:	f014 0740 	ands.w	r7, r4, #64	; 0x40
    tmp[0] = 0xA3;
 8001b86:	f88d 3004 	strb.w	r3, [sp, #4]
        tmp[1] = 0xC0;
 8001b8a:	bf1f      	itttt	ne
 8001b8c:	23c0      	movne	r3, #192	; 0xc0
 8001b8e:	f88d 3005 	strbne.w	r3, [sp, #5]
        tmp[2] = 0xC8;
 8001b92:	23c8      	movne	r3, #200	; 0xc8
 8001b94:	f88d 3006 	strbne.w	r3, [sp, #6]
        tmp[3] = 0xC2;
 8001b98:	bf12      	itee	ne
 8001b9a:	23c2      	movne	r3, #194	; 0xc2
        tmp[1] = 0xA3;
 8001b9c:	f88d 3005 	strbeq.w	r3, [sp, #5]
        tmp[2] = 0xA3;
 8001ba0:	f88d 3006 	strbeq.w	r3, [sp, #6]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8001ba4:	f414 78c0 	ands.w	r8, r4, #384	; 0x180
        tmp[3] = 0xA3;
 8001ba8:	f88d 3007 	strb.w	r3, [sp, #7]
        tmp[4] = 0xC4;
 8001bac:	bf15      	itete	ne
 8001bae:	f64c 43c4 	movwne	r3, #52420	; 0xccc4
        tmp[4] = 0xA3;
 8001bb2:	f24a 33a3 	movweq	r3, #41891	; 0xa3a3
        tmp[4] = 0xC4;
 8001bb6:	f8ad 3008 	strhne.w	r3, [sp, #8]
        tmp[4] = 0xA3;
 8001bba:	f8ad 3008 	strheq.w	r3, [sp, #8]
        tmp[5] = 0xCC;
 8001bbe:	bf14      	ite	ne
 8001bc0:	23c6      	movne	r3, #198	; 0xc6
        tmp[5] = 0xA3;
 8001bc2:	23a3      	moveq	r3, #163	; 0xa3
 8001bc4:	f88d 300a 	strb.w	r3, [sp, #10]
    tmp[7] = 0xA3;
 8001bc8:	23a3      	movs	r3, #163	; 0xa3
    mpu_write_mem(CFG_15,10,tmp);
 8001bca:	462a      	mov	r2, r5
 8001bcc:	210a      	movs	r1, #10
 8001bce:	f640 20a7 	movw	r0, #2727	; 0xaa7
    tmp[7] = 0xA3;
 8001bd2:	f88d 300b 	strb.w	r3, [sp, #11]
    tmp[8] = 0xA3;
 8001bd6:	f88d 300c 	strb.w	r3, [sp, #12]
    tmp[9] = 0xA3;
 8001bda:	f88d 300d 	strb.w	r3, [sp, #13]
    mpu_write_mem(CFG_15,10,tmp);
 8001bde:	f7ff fd6d 	bl	80016bc <mpu_write_mem>
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8001be2:	f014 0603 	ands.w	r6, r4, #3
        tmp[0] = DINA20;
 8001be6:	bf14      	ite	ne
 8001be8:	2320      	movne	r3, #32
        tmp[0] = 0xD8;
 8001bea:	23d8      	moveq	r3, #216	; 0xd8
    mpu_write_mem(CFG_27,1,tmp);
 8001bec:	462a      	mov	r2, r5
 8001bee:	2101      	movs	r1, #1
 8001bf0:	f640 20b6 	movw	r0, #2742	; 0xab6
        tmp[0] = 0xD8;
 8001bf4:	f88d 3004 	strb.w	r3, [sp, #4]
    mpu_write_mem(CFG_27,1,tmp);
 8001bf8:	f7ff fd60 	bl	80016bc <mpu_write_mem>
    if (mask & DMP_FEATURE_GYRO_CAL)
 8001bfc:	f014 0020 	ands.w	r0, r4, #32
 8001c00:	d038      	beq.n	8001c74 <dmp_enable_feature+0x10c>
 8001c02:	f7ff fe9f 	bl	8001944 <dmp_enable_gyro_cal.part.0>
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8001c06:	f1b8 0f00 	cmp.w	r8, #0
 8001c0a:	d00a      	beq.n	8001c22 <dmp_enable_feature+0xba>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 8001c0c:	05e3      	lsls	r3, r4, #23
            tmp[0] = 0xB2;
 8001c0e:	bf4c      	ite	mi
 8001c10:	4b1c      	ldrmi	r3, [pc, #112]	; (8001c84 <dmp_enable_feature+0x11c>)
            tmp[0] = DINAC0;
 8001c12:	4b1d      	ldrpl	r3, [pc, #116]	; (8001c88 <dmp_enable_feature+0x120>)
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8001c14:	462a      	mov	r2, r5
 8001c16:	2104      	movs	r1, #4
 8001c18:	f640 20a2 	movw	r0, #2722	; 0xaa2
            tmp[0] = DINAC0;
 8001c1c:	9301      	str	r3, [sp, #4]
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8001c1e:	f7ff fd4d 	bl	80016bc <mpu_write_mem>
    if (mask & DMP_FEATURE_LP_QUAT)
 8001c22:	f014 0004 	ands.w	r0, r4, #4
        dmp_enable_lp_quat(1);
 8001c26:	bf18      	it	ne
 8001c28:	2001      	movne	r0, #1
        dmp_enable_lp_quat(0);
 8001c2a:	f7ff ff75 	bl	8001b18 <dmp_enable_lp_quat>
    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8001c2e:	f014 0010 	ands.w	r0, r4, #16
        dmp_enable_6x_lp_quat(1);
 8001c32:	bf18      	it	ne
 8001c34:	2001      	movne	r0, #1
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8001c36:	4d15      	ldr	r5, [pc, #84]	; (8001c8c <dmp_enable_feature+0x124>)
        dmp_enable_6x_lp_quat(0);
 8001c38:	f7ff ff82 	bl	8001b40 <dmp_enable_6x_lp_quat>
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8001c3c:	f044 0308 	orr.w	r3, r4, #8
 8001c40:	816b      	strh	r3, [r5, #10]
    mpu_reset_fifo();
 8001c42:	f7ff f831 	bl	8000ca8 <mpu_reset_fifo>
 8001c46:	462b      	mov	r3, r5
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8001c48:	b9bf      	cbnz	r7, 8001c7a <dmp_enable_feature+0x112>
    dmp.packet_length = 0;
 8001c4a:	73af      	strb	r7, [r5, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8001c4c:	f1b8 0f00 	cmp.w	r8, #0
 8001c50:	d002      	beq.n	8001c58 <dmp_enable_feature+0xf0>
        dmp.packet_length += 6;
 8001c52:	7b9a      	ldrb	r2, [r3, #14]
 8001c54:	3206      	adds	r2, #6
 8001c56:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 8001c58:	f014 0f14 	tst.w	r4, #20
        dmp.packet_length += 16;
 8001c5c:	bf1e      	ittt	ne
 8001c5e:	7b9a      	ldrbne	r2, [r3, #14]
 8001c60:	3210      	addne	r2, #16
 8001c62:	739a      	strbne	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8001c64:	b116      	cbz	r6, 8001c6c <dmp_enable_feature+0x104>
        dmp.packet_length += 4;
 8001c66:	7b9a      	ldrb	r2, [r3, #14]
 8001c68:	3204      	adds	r2, #4
 8001c6a:	739a      	strb	r2, [r3, #14]
}
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	b004      	add	sp, #16
 8001c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        dmp_enable_gyro_cal(0);
 8001c74:	f7ff ff38 	bl	8001ae8 <dmp_enable_gyro_cal>
 8001c78:	e7c5      	b.n	8001c06 <dmp_enable_feature+0x9e>
        dmp.packet_length += 6;
 8001c7a:	2206      	movs	r2, #6
 8001c7c:	73aa      	strb	r2, [r5, #14]
 8001c7e:	e7e5      	b.n	8001c4c <dmp_enable_feature+0xe4>
 8001c80:	09e3ca02 	.word	0x09e3ca02
 8001c84:	9bb68bb2 	.word	0x9bb68bb2
 8001c88:	90b480b0 	.word	0x90b480b0
 8001c8c:	200003ac 	.word	0x200003ac

08001c90 <dmp_read_fifo>:
    unsigned char ii = 0;

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 8001c90:	2300      	movs	r3, #0
{
 8001c92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c96:	b089      	sub	sp, #36	; 0x24
 8001c98:	9c10      	ldr	r4, [sp, #64]	; 0x40

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8001c9a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8001da4 <dmp_read_fifo+0x114>
{
 8001c9e:	4605      	mov	r5, r0
 8001ca0:	460e      	mov	r6, r1
 8001ca2:	4690      	mov	r8, r2
    sensors[0] = 0;
 8001ca4:	8023      	strh	r3, [r4, #0]
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8001ca6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001ca8:	4669      	mov	r1, sp
 8001caa:	f899 000e 	ldrb.w	r0, [r9, #14]
 8001cae:	f7ff f98d 	bl	8000fcc <mpu_read_fifo_stream>
 8001cb2:	4607      	mov	r7, r0
 8001cb4:	bb50      	cbnz	r0, 8001d0c <dmp_read_fifo+0x7c>
        return -1;

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8001cb6:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8001cba:	f011 0f14 	tst.w	r1, #20
 8001cbe:	d06e      	beq.n	8001d9e <dmp_read_fifo+0x10e>
 8001cc0:	9a01      	ldr	r2, [sp, #4]
 8001cc2:	9800      	ldr	r0, [sp, #0]
 8001cc4:	fa92 fc82 	rev.w	ip, r2
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8001cc8:	f8c8 c004 	str.w	ip, [r8, #4]
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
        quat_q14[1] = quat[1] >> 16;
 8001ccc:	ea4f 4c2c 	mov.w	ip, ip, asr #16
        quat_q14[2] = quat[2] >> 16;
        quat_q14[3] = quat[3] >> 16;
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8001cd0:	fb0c fc0c 	mul.w	ip, ip, ip
 8001cd4:	ba00      	rev	r0, r0
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8001cd6:	f8c8 0000 	str.w	r0, [r8]
        quat_q14[0] = quat[0] >> 16;
 8001cda:	1400      	asrs	r0, r0, #16
 8001cdc:	9a02      	ldr	r2, [sp, #8]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8001cde:	fb00 c000 	mla	r0, r0, r0, ip
 8001ce2:	ba12      	rev	r2, r2
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8001ce4:	f8c8 2008 	str.w	r2, [r8, #8]
        quat_q14[2] = quat[2] >> 16;
 8001ce8:	1412      	asrs	r2, r2, #16
 8001cea:	9b03      	ldr	r3, [sp, #12]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8001cec:	fb02 0202 	mla	r2, r2, r2, r0
 8001cf0:	ba1b      	rev	r3, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8001cf2:	f8c8 300c 	str.w	r3, [r8, #12]
        quat_q14[3] = quat[3] >> 16;
 8001cf6:	141b      	asrs	r3, r3, #16
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8001cf8:	fb03 2303 	mla	r3, r3, r3, r2
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 8001cfc:	f103 4371 	add.w	r3, r3, #4043309056	; 0xf1000000
 8001d00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d04:	d905      	bls.n	8001d12 <dmp_read_fifo+0x82>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 8001d06:	f7fe ffcf 	bl	8000ca8 <mpu_reset_fifo>
            sensors[0] = 0;
 8001d0a:	8027      	strh	r7, [r4, #0]
        return -1;
 8001d0c:	f04f 37ff 	mov.w	r7, #4294967295
 8001d10:	e041      	b.n	8001d96 <dmp_read_fifo+0x106>
            return -1;
        }
        sensors[0] |= INV_WXYZ_QUAT;
 8001d12:	8823      	ldrh	r3, [r4, #0]
 8001d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d18:	8023      	strh	r3, [r4, #0]
        ii += 16;
 8001d1a:	2310      	movs	r3, #16
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8001d1c:	064a      	lsls	r2, r1, #25
 8001d1e:	d51c      	bpl.n	8001d5a <dmp_read_fifo+0xca>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001d20:	aa08      	add	r2, sp, #32
 8001d22:	441a      	add	r2, r3
 8001d24:	f812 cc20 	ldrb.w	ip, [r2, #-32]
 8001d28:	f812 0c1f 	ldrb.w	r0, [r2, #-31]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
        ii += 6;
 8001d2c:	3306      	adds	r3, #6
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001d2e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8001d32:	8030      	strh	r0, [r6, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001d34:	f812 cc1e 	ldrb.w	ip, [r2, #-30]
 8001d38:	f812 0c1d 	ldrb.w	r0, [r2, #-29]
        ii += 6;
 8001d3c:	b2db      	uxtb	r3, r3
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001d3e:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8001d42:	8070      	strh	r0, [r6, #2]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8001d44:	f812 0c1c 	ldrb.w	r0, [r2, #-28]
 8001d48:	f812 2c1b 	ldrb.w	r2, [r2, #-27]
 8001d4c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001d50:	80b2      	strh	r2, [r6, #4]
        sensors[0] |= INV_XYZ_ACCEL;
 8001d52:	8822      	ldrh	r2, [r4, #0]
 8001d54:	f042 0208 	orr.w	r2, r2, #8
 8001d58:	8022      	strh	r2, [r4, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8001d5a:	f411 7fc0 	tst.w	r1, #384	; 0x180
 8001d5e:	d01a      	beq.n	8001d96 <dmp_read_fifo+0x106>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001d60:	aa08      	add	r2, sp, #32
 8001d62:	4413      	add	r3, r2
 8001d64:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 8001d68:	f813 2c1f 	ldrb.w	r2, [r3, #-31]
 8001d6c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d70:	802a      	strh	r2, [r5, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001d72:	f813 1c1e 	ldrb.w	r1, [r3, #-30]
 8001d76:	f813 2c1d 	ldrb.w	r2, [r3, #-29]
 8001d7a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d7e:	806a      	strh	r2, [r5, #2]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8001d80:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8001d84:	f813 3c1b 	ldrb.w	r3, [r3, #-27]
 8001d88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d8c:	80ab      	strh	r3, [r5, #4]
        ii += 6;
        sensors[0] |= INV_XYZ_GYRO;
 8001d8e:	8823      	ldrh	r3, [r4, #0]
 8001d90:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001d94:	8023      	strh	r3, [r4, #0]
    }

    //get_ms(timestamp);
    return 0;
}
 8001d96:	4638      	mov	r0, r7
 8001d98:	b009      	add	sp, #36	; 0x24
 8001d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    unsigned char ii = 0;
 8001d9e:	4603      	mov	r3, r0
 8001da0:	e7bc      	b.n	8001d1c <dmp_read_fifo+0x8c>
 8001da2:	bf00      	nop
 8001da4:	200003ac 	.word	0x200003ac

08001da8 <DMP_Init>:

int DMP_Init(void){
 8001da8:	b507      	push	{r0, r1, r2, lr}

	struct int_param_s interrupt_config;//empty

	if (mpu_init(&interrupt_config)){
 8001daa:	a801      	add	r0, sp, #4
 8001dac:	f7ff fb3e 	bl	800142c <mpu_init>
 8001db0:	b9e8      	cbnz	r0, 8001dee <DMP_Init+0x46>
		return 1;
	}

	if (mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS)){
 8001db2:	2079      	movs	r0, #121	; 0x79
 8001db4:	f7ff fa9e 	bl	80012f4 <mpu_set_sensors>
 8001db8:	b9d8      	cbnz	r0, 8001df2 <DMP_Init+0x4a>
		return 2;
	}

	if(dmp_load_motion_driver_firmware()){
 8001dba:	f7ff fdd7 	bl	800196c <dmp_load_motion_driver_firmware>
 8001dbe:	b9d0      	cbnz	r0, 8001df6 <DMP_Init+0x4e>

		return 4;//ERROR
	}

	if(dmp_set_orientation(0x88)){//set identity matrix
 8001dc0:	2088      	movs	r0, #136	; 0x88
 8001dc2:	f7ff fddd 	bl	8001980 <dmp_set_orientation>
 8001dc6:	b9c0      	cbnz	r0, 8001dfa <DMP_Init+0x52>
	}

	unsigned short dmp_features = DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_SEND_RAW_ACCEL
								| DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL;

	if(dmp_enable_feature(dmp_features)){
 8001dc8:	f44f 70b8 	mov.w	r0, #368	; 0x170
 8001dcc:	f7ff fecc 	bl	8001b68 <dmp_enable_feature>
 8001dd0:	b9a8      	cbnz	r0, 8001dfe <DMP_Init+0x56>
		return 6;
	}

	if(dmp_set_fifo_rate(100)){
 8001dd2:	2064      	movs	r0, #100	; 0x64
 8001dd4:	f7ff fe58 	bl	8001a88 <dmp_set_fifo_rate>
 8001dd8:	b998      	cbnz	r0, 8001e02 <DMP_Init+0x5a>
		return 7;
	}

	if (mpu_set_dmp_state(1)){
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7ff fd1e 	bl	800181c <mpu_set_dmp_state>
		return 8;
 8001de0:	2800      	cmp	r0, #0
 8001de2:	bf14      	ite	ne
 8001de4:	2008      	movne	r0, #8
 8001de6:	2000      	moveq	r0, #0
	}

	return 0;
}
 8001de8:	b003      	add	sp, #12
 8001dea:	f85d fb04 	ldr.w	pc, [sp], #4
		return 1;
 8001dee:	2001      	movs	r0, #1
 8001df0:	e7fa      	b.n	8001de8 <DMP_Init+0x40>
		return 2;
 8001df2:	2002      	movs	r0, #2
 8001df4:	e7f8      	b.n	8001de8 <DMP_Init+0x40>
		return 4;//ERROR
 8001df6:	2004      	movs	r0, #4
 8001df8:	e7f6      	b.n	8001de8 <DMP_Init+0x40>
		return 5;
 8001dfa:	2005      	movs	r0, #5
 8001dfc:	e7f4      	b.n	8001de8 <DMP_Init+0x40>
		return 6;
 8001dfe:	2006      	movs	r0, #6
 8001e00:	e7f2      	b.n	8001de8 <DMP_Init+0x40>
		return 7;
 8001e02:	2007      	movs	r0, #7
 8001e04:	e7f0      	b.n	8001de8 <DMP_Init+0x40>

08001e06 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e06:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e08:	2414      	movs	r4, #20
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e0a:	2610      	movs	r6, #16
{
 8001e0c:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e0e:	4622      	mov	r2, r4
 8001e10:	2100      	movs	r1, #0
 8001e12:	a80c      	add	r0, sp, #48	; 0x30
 8001e14:	f007 fe24 	bl	8009a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e18:	4622      	mov	r2, r4
 8001e1a:	eb0d 0004 	add.w	r0, sp, r4
 8001e1e:	2100      	movs	r1, #0
 8001e20:	f007 fe1e 	bl	8009a60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e24:	4632      	mov	r2, r6
 8001e26:	2100      	movs	r1, #0
 8001e28:	a801      	add	r0, sp, #4
 8001e2a:	f007 fe19 	bl	8009a60 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e2e:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e30:	2201      	movs	r2, #1
 8001e32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e36:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e3a:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e3e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e42:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e44:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e46:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e48:	f005 fb26 	bl	8007498 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e4c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e4e:	2400      	movs	r4, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e50:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e54:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e58:	4629      	mov	r1, r5
 8001e5a:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e5c:	e9cd 4307 	strd	r4, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e60:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e62:	f005 fcf1 	bl	8007848 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e66:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001e68:	9601      	str	r6, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001e6a:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e6c:	f005 fdc6 	bl	80079fc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001e70:	b014      	add	sp, #80	; 0x50
 8001e72:	bd70      	pop	{r4, r5, r6, pc}

08001e74 <main>:
{
 8001e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ximu_state = XIMU_STATE_STM_INIT;
 8001e78:	2400      	movs	r4, #0
 8001e7a:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 8002130 <main+0x2bc>
{
 8001e7e:	b08f      	sub	sp, #60	; 0x3c
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e80:	4d97      	ldr	r5, [pc, #604]	; (80020e0 <main+0x26c>)
	ximu_state = XIMU_STATE_STM_INIT;
 8001e82:	f889 4000 	strb.w	r4, [r9]
  HAL_Init();
 8001e86:	f004 f8bd 	bl	8006004 <HAL_Init>
  SystemClock_Config();
 8001e8a:	f7ff ffbc 	bl	8001e06 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8e:	4621      	mov	r1, r4
 8001e90:	2210      	movs	r2, #16
 8001e92:	a80a      	add	r0, sp, #40	; 0x28
 8001e94:	f007 fde4 	bl	8009a60 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e98:	69ab      	ldr	r3, [r5, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e9a:	4622      	mov	r2, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9c:	f043 0310 	orr.w	r3, r3, #16
 8001ea0:	61ab      	str	r3, [r5, #24]
 8001ea2:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ea4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea8:	f003 0310 	and.w	r3, r3, #16
 8001eac:	9304      	str	r3, [sp, #16]
 8001eae:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb0:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001eb2:	488c      	ldr	r0, [pc, #560]	; (80020e4 <main+0x270>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb4:	f043 0320 	orr.w	r3, r3, #32
 8001eb8:	61ab      	str	r3, [r5, #24]
 8001eba:	69ab      	ldr	r3, [r5, #24]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebc:	f04f 0b01 	mov.w	fp, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ec0:	f003 0320 	and.w	r3, r3, #32
 8001ec4:	9305      	str	r3, [sp, #20]
 8001ec6:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec8:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	f04f 0a02 	mov.w	sl, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ece:	f043 0304 	orr.w	r3, r3, #4
 8001ed2:	61ab      	str	r3, [r5, #24]
 8001ed4:	69ab      	ldr	r3, [r5, #24]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed6:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	9306      	str	r3, [sp, #24]
 8001ee0:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee2:	69ab      	ldr	r3, [r5, #24]
  htim2.Instance = TIM2;
 8001ee4:	f8df 824c 	ldr.w	r8, [pc, #588]	; 8002134 <main+0x2c0>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee8:	f043 0308 	orr.w	r3, r3, #8
 8001eec:	61ab      	str	r3, [r5, #24]
 8001eee:	69ab      	ldr	r3, [r5, #24]
  htim3.Instance = TIM3;
 8001ef0:	4e7d      	ldr	r6, [pc, #500]	; (80020e8 <main+0x274>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	9307      	str	r3, [sp, #28]
 8001ef8:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001efa:	f004 faef 	bl	80064dc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f02:	a90a      	add	r1, sp, #40	; 0x28
 8001f04:	4877      	ldr	r0, [pc, #476]	; (80020e4 <main+0x270>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f06:	e9cd 3b0a 	strd	r3, fp, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f10:	f004 fa04 	bl	800631c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f14:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001f16:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f18:	ea43 030b 	orr.w	r3, r3, fp
 8001f1c:	616b      	str	r3, [r5, #20]
 8001f1e:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001f20:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f22:	ea03 030b 	and.w	r3, r3, fp
 8001f26:	9303      	str	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001f28:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f2a:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001f2c:	f004 f8b2 	bl	8006094 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001f30:	200f      	movs	r0, #15
 8001f32:	f004 f8e3 	bl	80060fc <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8001f36:	4d6d      	ldr	r5, [pc, #436]	; (80020ec <main+0x278>)
  hi2c1.Init.ClockSpeed = 100000;
 8001f38:	4a6d      	ldr	r2, [pc, #436]	; (80020f0 <main+0x27c>)
 8001f3a:	4b6e      	ldr	r3, [pc, #440]	; (80020f4 <main+0x280>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f3c:	4628      	mov	r0, r5
  hi2c1.Init.ClockSpeed = 100000;
 8001f3e:	e9c5 2300 	strd	r2, r3, [r5]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8001f46:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f4a:	e9c5 3404 	strd	r3, r4, [r5, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f4e:	e9c5 4406 	strd	r4, r4, [r5, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f52:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f54:	f004 fc8a 	bl	800686c <HAL_I2C_Init>
  MX_USB_DEVICE_Init();
 8001f58:	f007 f96a 	bl	8009230 <MX_USB_DEVICE_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f5c:	4621      	mov	r1, r4
 8001f5e:	2210      	movs	r2, #16
 8001f60:	a80a      	add	r0, sp, #40	; 0x28
 8001f62:	f007 fd7d 	bl	8009a60 <memset>
  htim2.Init.Prescaler = 7200;
 8001f66:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
  htim2.Init.Period = 1250;
 8001f6a:	f240 42e2 	movw	r2, #1250	; 0x4e2
  htim2.Init.Prescaler = 7200;
 8001f6e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f72:	4640      	mov	r0, r8
  htim2.Init.Prescaler = 7200;
 8001f74:	e9c8 1300 	strd	r1, r3, [r8]
 8001f78:	9301      	str	r3, [sp, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7a:	e9c8 2403 	strd	r2, r4, [r8, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f7e:	e9cd 4408 	strd	r4, r4, [sp, #32]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f82:	f8c8 4008 	str.w	r4, [r8, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f86:	f8c8 4018 	str.w	r4, [r8, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f8a:	f005 fe9d 	bl	8007cc8 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f8e:	a90a      	add	r1, sp, #40	; 0x28
 8001f90:	4640      	mov	r0, r8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f92:	970a      	str	r7, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f94:	f005 febc 	bl	8007d10 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f98:	a908      	add	r1, sp, #32
 8001f9a:	4640      	mov	r0, r8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9c:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fa0:	f005 ff4a 	bl	8007e38 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fa4:	4621      	mov	r1, r4
 8001fa6:	2210      	movs	r2, #16
 8001fa8:	a80a      	add	r0, sp, #40	; 0x28
 8001faa:	f007 fd59 	bl	8009a60 <memset>
  htim3.Init.Prescaler = 7200;
 8001fae:	9b01      	ldr	r3, [sp, #4]
  htim3.Instance = TIM3;
 8001fb0:	4a51      	ldr	r2, [pc, #324]	; (80020f8 <main+0x284>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb2:	e9c6 3401 	strd	r3, r4, [r6, #4]
  htim3.Init.Period = 50;
 8001fb6:	2332      	movs	r3, #50	; 0x32
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fb8:	4630      	mov	r0, r6
  htim3.Instance = TIM3;
 8001fba:	6032      	str	r2, [r6, #0]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbc:	e9c6 3403 	strd	r3, r4, [r6, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc0:	e9cd 4408 	strd	r4, r4, [sp, #32]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc4:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fc6:	f005 fe7f 	bl	8007cc8 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fca:	a90a      	add	r1, sp, #40	; 0x28
 8001fcc:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fce:	970a      	str	r7, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fd0:	f005 fe9e 	bl	8007d10 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fd4:	a908      	add	r1, sp, #32
 8001fd6:	4630      	mov	r0, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd8:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fdc:	f005 ff2c 	bl	8007e38 <HAL_TIMEx_MasterConfigSynchronization>
  huart1.Init.BaudRate = 115200;
 8001fe0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8001fe4:	4f45      	ldr	r7, [pc, #276]	; (80020fc <main+0x288>)
  huart1.Init.BaudRate = 115200;
 8001fe6:	4846      	ldr	r0, [pc, #280]	; (8002100 <main+0x28c>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fe8:	e9c7 4402 	strd	r4, r4, [r7, #8]
  huart1.Init.BaudRate = 115200;
 8001fec:	e9c7 0300 	strd	r0, r3, [r7]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ff0:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ff2:	4638      	mov	r0, r7
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff4:	e9c7 3405 	strd	r3, r4, [r7, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ff8:	613c      	str	r4, [r7, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ffa:	61fc      	str	r4, [r7, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ffc:	f005 ff84 	bl	8007f08 <HAL_UART_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8002000:	4640      	mov	r0, r8
 8002002:	f005 fd73 	bl	8007aec <HAL_TIM_Base_Start_IT>
  led_set(LED_INIT);
 8002006:	20cc      	movs	r0, #204	; 0xcc
 8002008:	f000 fe2c 	bl	8002c64 <led_set>
  HAL_Delay(1000);//blink to show system (stm32, especially the crystal) is ok
 800200c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002010:	f004 f81c 	bl	800604c <HAL_Delay>
  led_set(LED_FAULT);//Will not notice LED blinking unless the following initialization takes longer than expected
 8002014:	20aa      	movs	r0, #170	; 0xaa
  ximu_state = XIMU_STATE_DMP_INIT;
 8002016:	f889 b000 	strb.w	fp, [r9]
  led_set(LED_FAULT);//Will not notice LED blinking unless the following initialization takes longer than expected
 800201a:	f000 fe23 	bl	8002c64 <led_set>
  mpu_set_i2c(&hi2c1);
 800201e:	4628      	mov	r0, r5
 8002020:	f000 fe26 	bl	8002c70 <mpu_set_i2c>
  ms5611_set_i2c(&hi2c1);
 8002024:	4628      	mov	r0, r5
 8002026:	f000 fe4d 	bl	8002cc4 <ms5611_set_i2c>
  ms5611_init();
 800202a:	f000 feed 	bl	8002e08 <ms5611_init>
  ms5611_update();
 800202e:	f000 fee3 	bl	8002df8 <ms5611_update>
  GNSS_set_huart(&huart1);
 8002032:	4638      	mov	r0, r7
 8002034:	f000 fc88 	bl	8002948 <GNSS_set_huart>
  GNSS_Init();
 8002038:	f000 fccc 	bl	80029d4 <GNSS_Init>
  int dmp_state = DMP_Init();
 800203c:	f7ff feb4 	bl	8001da8 <DMP_Init>
  if (dmp_state){
 8002040:	4604      	mov	r4, r0
 8002042:	b100      	cbz	r0, 8002046 <main+0x1d2>
 8002044:	e7fe      	b.n	8002044 <main+0x1d0>
  HAL_TIM_Base_Start_IT(&htim3);//start updating sensor data
 8002046:	4630      	mov	r0, r6
 8002048:	f005 fd50 	bl	8007aec <HAL_TIM_Base_Start_IT>
  led_set(LED_DISCONNECTED);//Fault cleared
 800204c:	4620      	mov	r0, r4
  ximu_state = XIMU_STATE_GPS_INIT;
 800204e:	f889 a000 	strb.w	sl, [r9]
  led_set(LED_DISCONNECTED);//Fault cleared
 8002052:	f000 fe07 	bl	8002c64 <led_set>
  while (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){
 8002056:	4c2b      	ldr	r4, [pc, #172]	; (8002104 <main+0x290>)
 8002058:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800205c:	2b03      	cmp	r3, #3
 800205e:	d132      	bne.n	80020c6 <main+0x252>
  ros_init();
 8002060:	f002 ffa4 	bl	8004fac <ros_init>
  led_set(LED_IDLE);//connection formed
 8002064:	20ff      	movs	r0, #255	; 0xff
 8002066:	f000 fdfd 	bl	8002c64 <led_set>
	  if (send_imu_data == 1 || send_mag_data == 1 || send_gps_data == 1 || send_pt_data == 1){
 800206a:	4f27      	ldr	r7, [pc, #156]	; (8002108 <main+0x294>)
 800206c:	4c27      	ldr	r4, [pc, #156]	; (800210c <main+0x298>)
 800206e:	4d28      	ldr	r5, [pc, #160]	; (8002110 <main+0x29c>)
	  led_set(LED_MEASURING);
 8002070:	20fe      	movs	r0, #254	; 0xfe
 8002072:	f000 fdf7 	bl	8002c64 <led_set>
	  if (send_imu_data == 1 || send_mag_data == 1 || send_gps_data == 1 || send_pt_data == 1){
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	4e26      	ldr	r6, [pc, #152]	; (8002114 <main+0x2a0>)
 800207a:	2b01      	cmp	r3, #1
 800207c:	d027      	beq.n	80020ce <main+0x25a>
 800207e:	6823      	ldr	r3, [r4, #0]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d005      	beq.n	8002090 <main+0x21c>
 8002084:	682b      	ldr	r3, [r5, #0]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d002      	beq.n	8002090 <main+0x21c>
 800208a:	6833      	ldr	r3, [r6, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d1ef      	bne.n	8002070 <main+0x1fc>
		  if (send_mag_data == 1){
 8002090:	6823      	ldr	r3, [r4, #0]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d104      	bne.n	80020a0 <main+0x22c>
			  MAG_pub(m);
 8002096:	4820      	ldr	r0, [pc, #128]	; (8002118 <main+0x2a4>)
 8002098:	f003 f83c 	bl	8005114 <MAG_pub>
			  send_mag_data = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	6023      	str	r3, [r4, #0]
		  if (send_gps_data == 1){
 80020a0:	682b      	ldr	r3, [r5, #0]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d104      	bne.n	80020b0 <main+0x23c>
			  GPS_pub(lla);
 80020a6:	481d      	ldr	r0, [pc, #116]	; (800211c <main+0x2a8>)
 80020a8:	f003 f876 	bl	8005198 <GPS_pub>
			  send_gps_data = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	602b      	str	r3, [r5, #0]
		  if (send_pt_data == 1){
 80020b0:	6833      	ldr	r3, [r6, #0]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d104      	bne.n	80020c0 <main+0x24c>
		  	  PT_pub(pt);
 80020b6:	481a      	ldr	r0, [pc, #104]	; (8002120 <main+0x2ac>)
 80020b8:	f003 f8b6 	bl	8005228 <PT_pub>
		  	  send_pt_data = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	6033      	str	r3, [r6, #0]
		  spinOnce();
 80020c0:	f003 f8fa 	bl	80052b8 <spinOnce>
 80020c4:	e7d4      	b.n	8002070 <main+0x1fc>
	  led_set(LED_DISCONNECTED);//wait for connection
 80020c6:	2000      	movs	r0, #0
 80020c8:	f000 fdcc 	bl	8002c64 <led_set>
 80020cc:	e7c4      	b.n	8002058 <main+0x1e4>
			  IMU_pub(a,w,q);
 80020ce:	4a15      	ldr	r2, [pc, #84]	; (8002124 <main+0x2b0>)
 80020d0:	4915      	ldr	r1, [pc, #84]	; (8002128 <main+0x2b4>)
 80020d2:	4816      	ldr	r0, [pc, #88]	; (800212c <main+0x2b8>)
 80020d4:	f002 ff94 	bl	8005000 <IMU_pub>
			  send_imu_data = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	e7d8      	b.n	8002090 <main+0x21c>
 80020de:	bf00      	nop
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40011000 	.word	0x40011000
 80020e8:	20001a2c 	.word	0x20001a2c
 80020ec:	200019d8 	.word	0x200019d8
 80020f0:	40005400 	.word	0x40005400
 80020f4:	000186a0 	.word	0x000186a0
 80020f8:	40000400 	.word	0x40000400
 80020fc:	20001ab4 	.word	0x20001ab4
 8002100:	40013800 	.word	0x40013800
 8002104:	20002058 	.word	0x20002058
 8002108:	2000043c 	.word	0x2000043c
 800210c:	20000440 	.word	0x20000440
 8002110:	20000438 	.word	0x20000438
 8002114:	20000444 	.word	0x20000444
 8002118:	200003f0 	.word	0x200003f0
 800211c:	200003d8 	.word	0x200003d8
 8002120:	20000408 	.word	0x20000408
 8002124:	20000418 	.word	0x20000418
 8002128:	20000448 	.word	0x20000448
 800212c:	200003c0 	.word	0x200003c0
 8002130:	20001ab0 	.word	0x20001ab0
 8002134:	20001fc0 	.word	0x20001fc0

08002138 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002138:	6802      	ldr	r2, [r0, #0]
 800213a:	4b03      	ldr	r3, [pc, #12]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800213c:	429a      	cmp	r2, r3
 800213e:	d101      	bne.n	8002144 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002140:	f003 bf72 	b.w	8006028 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40012c00 	.word	0x40012c00

0800214c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800214c:	4770      	bx	lr
	...

08002150 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002150:	4b0e      	ldr	r3, [pc, #56]	; (800218c <HAL_MspInit+0x3c>)
{
 8002152:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002154:	699a      	ldr	r2, [r3, #24]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	619a      	str	r2, [r3, #24]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	f002 0201 	and.w	r2, r2, #1
 8002162:	9200      	str	r2, [sp, #0]
 8002164:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002166:	69da      	ldr	r2, [r3, #28]
 8002168:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800216c:	61da      	str	r2, [r3, #28]
 800216e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST 
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8002170:	4a07      	ldr	r2, [pc, #28]	; (8002190 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 800217a:	6853      	ldr	r3, [r2, #4]
 800217c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002180:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002184:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002186:	b002      	add	sp, #8
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000
 8002190:	40010000 	.word	0x40010000

08002194 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002194:	b510      	push	{r4, lr}
 8002196:	4604      	mov	r4, r0
 8002198:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219a:	2210      	movs	r2, #16
 800219c:	2100      	movs	r1, #0
 800219e:	a802      	add	r0, sp, #8
 80021a0:	f007 fc5e 	bl	8009a60 <memset>
  if(hi2c->Instance==I2C1)
 80021a4:	6822      	ldr	r2, [r4, #0]
 80021a6:	4b11      	ldr	r3, [pc, #68]	; (80021ec <HAL_I2C_MspInit+0x58>)
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d11c      	bne.n	80021e6 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ac:	4c10      	ldr	r4, [pc, #64]	; (80021f0 <HAL_I2C_MspInit+0x5c>)
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ae:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b0:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b4:	f043 0308 	orr.w	r3, r3, #8
 80021b8:	61a3      	str	r3, [r4, #24]
 80021ba:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021bc:	480d      	ldr	r0, [pc, #52]	; (80021f4 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021c6:	2312      	movs	r3, #18
 80021c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021cc:	2303      	movs	r3, #3
 80021ce:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d0:	f004 f8a4 	bl	800631c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021d4:	69e3      	ldr	r3, [r4, #28]
 80021d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021da:	61e3      	str	r3, [r4, #28]
 80021dc:	69e3      	ldr	r3, [r4, #28]
 80021de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e2:	9301      	str	r3, [sp, #4]
 80021e4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021e6:	b006      	add	sp, #24
 80021e8:	bd10      	pop	{r4, pc}
 80021ea:	bf00      	nop
 80021ec:	40005400 	.word	0x40005400
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40010c00 	.word	0x40010c00

080021f8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80021f8:	6803      	ldr	r3, [r0, #0]
{
 80021fa:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 80021fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002200:	d115      	bne.n	800222e <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002202:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002206:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002208:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002210:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002212:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002214:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800221e:	f003 ff39 	bl	8006094 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002222:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002224:	b003      	add	sp, #12
 8002226:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800222a:	f003 bf67 	b.w	80060fc <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM3)
 800222e:	4a0b      	ldr	r2, [pc, #44]	; (800225c <HAL_TIM_Base_MspInit+0x64>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d110      	bne.n	8002256 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <HAL_TIM_Base_MspInit+0x68>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002236:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002238:	69da      	ldr	r2, [r3, #28]
 800223a:	f042 0202 	orr.w	r2, r2, #2
 800223e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002240:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002242:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002244:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	9301      	str	r3, [sp, #4]
 800224c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800224e:	f003 ff21 	bl	8006094 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002252:	201d      	movs	r0, #29
 8002254:	e7e6      	b.n	8002224 <HAL_TIM_Base_MspInit+0x2c>
}
 8002256:	b003      	add	sp, #12
 8002258:	f85d fb04 	ldr.w	pc, [sp], #4
 800225c:	40000400 	.word	0x40000400
 8002260:	40021000 	.word	0x40021000

08002264 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002264:	b570      	push	{r4, r5, r6, lr}
 8002266:	4606      	mov	r6, r0
 8002268:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226a:	2210      	movs	r2, #16
 800226c:	2100      	movs	r1, #0
 800226e:	a802      	add	r0, sp, #8
 8002270:	f007 fbf6 	bl	8009a60 <memset>
  if(huart->Instance==USART1)
 8002274:	6832      	ldr	r2, [r6, #0]
 8002276:	4b22      	ldr	r3, [pc, #136]	; (8002300 <HAL_UART_MspInit+0x9c>)
 8002278:	429a      	cmp	r2, r3
 800227a:	d13e      	bne.n	80022fa <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800227c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002280:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002282:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002284:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002288:	619a      	str	r2, [r3, #24]
 800228a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228c:	481d      	ldr	r0, [pc, #116]	; (8002304 <HAL_UART_MspInit+0xa0>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800228e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002292:	9200      	str	r2, [sp, #0]
 8002294:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002296:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002298:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229a:	f042 0204 	orr.w	r2, r2, #4
 800229e:	619a      	str	r2, [r3, #24]
 80022a0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	9301      	str	r3, [sp, #4]
 80022ac:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022b4:	2303      	movs	r3, #3
 80022b6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b8:	f004 f830 	bl	800631c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c0:	a902      	add	r1, sp, #8
 80022c2:	4810      	ldr	r0, [pc, #64]	; (8002304 <HAL_UART_MspInit+0xa0>)

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80022c4:	4c10      	ldr	r4, [pc, #64]	; (8002308 <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c6:	e9cd 3502 	strd	r3, r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022cc:	f004 f826 	bl	800631c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80022d0:	4b0e      	ldr	r3, [pc, #56]	; (800230c <HAL_UART_MspInit+0xa8>)
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80022d2:	2120      	movs	r1, #32
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022d4:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022d8:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022da:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80022de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80022e2:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022e4:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022e6:	6165      	str	r5, [r4, #20]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80022e8:	e9c4 1306 	strd	r1, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80022ec:	f003 ff14 	bl	8006118 <HAL_DMA_Init>
 80022f0:	b108      	cbz	r0, 80022f6 <HAL_UART_MspInit+0x92>
    {
      Error_Handler();
 80022f2:	f7ff ff2b 	bl	800214c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80022f6:	6374      	str	r4, [r6, #52]	; 0x34
 80022f8:	6266      	str	r6, [r4, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022fa:	b006      	add	sp, #24
 80022fc:	bd70      	pop	{r4, r5, r6, pc}
 80022fe:	bf00      	nop
 8002300:	40013800 	.word	0x40013800
 8002304:	40010800 	.word	0x40010800
 8002308:	20001a6c 	.word	0x20001a6c
 800230c:	40020058 	.word	0x40020058

08002310 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002310:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8002312:	4601      	mov	r1, r0
{
 8002314:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8002316:	2200      	movs	r2, #0
 8002318:	2019      	movs	r0, #25
 800231a:	f003 febb 	bl	8006094 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 800231e:	2019      	movs	r0, #25
 8002320:	f003 feec 	bl	80060fc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002326:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002328:	699a      	ldr	r2, [r3, #24]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800232a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 800232c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002330:	619a      	str	r2, [r3, #24]
 8002332:	699b      	ldr	r3, [r3, #24]
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002334:	4c11      	ldr	r4, [pc, #68]	; (800237c <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800233a:	9302      	str	r3, [sp, #8]
 800233c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800233e:	f005 fb3f 	bl	80079c0 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002342:	f005 fb2d 	bl	80079a0 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8002346:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <HAL_InitTick+0x70>)
 8002348:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800234a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800234e:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <HAL_InitTick+0x74>)
 8002352:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8002356:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002358:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 800235a:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800235c:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 800235e:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002360:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002362:	f005 fcb1 	bl	8007cc8 <HAL_TIM_Base_Init>
 8002366:	b920      	cbnz	r0, 8002372 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002368:	4620      	mov	r0, r4
 800236a:	f005 fbbf 	bl	8007aec <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800236e:	b008      	add	sp, #32
 8002370:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8002372:	2001      	movs	r0, #1
 8002374:	e7fb      	b.n	800236e <HAL_InitTick+0x5e>
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000
 800237c:	20002000 	.word	0x20002000
 8002380:	40012c00 	.word	0x40012c00
 8002384:	000f4240 	.word	0x000f4240

08002388 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002388:	4770      	bx	lr

0800238a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800238a:	e7fe      	b.n	800238a <HardFault_Handler>

0800238c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800238c:	e7fe      	b.n	800238c <MemManage_Handler>

0800238e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800238e:	e7fe      	b.n	800238e <BusFault_Handler>

08002390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002390:	e7fe      	b.n	8002390 <UsageFault_Handler>

08002392 <SVC_Handler>:
 8002392:	4770      	bx	lr

08002394 <DebugMon_Handler>:
 8002394:	4770      	bx	lr

08002396 <PendSV_Handler>:
 8002396:	4770      	bx	lr

08002398 <SysTick_Handler>:
 8002398:	4770      	bx	lr
	...

0800239c <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800239c:	4801      	ldr	r0, [pc, #4]	; (80023a4 <DMA1_Channel5_IRQHandler+0x8>)
 800239e:	f003 bf29 	b.w	80061f4 <HAL_DMA_IRQHandler>
 80023a2:	bf00      	nop
 80023a4:	20001a6c 	.word	0x20001a6c

080023a8 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80023a8:	4801      	ldr	r0, [pc, #4]	; (80023b0 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80023aa:	f004 bddf 	b.w	8006f6c <HAL_PCD_IRQHandler>
 80023ae:	bf00      	nop
 80023b0:	20003d1c 	.word	0x20003d1c

080023b4 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023b4:	4801      	ldr	r0, [pc, #4]	; (80023bc <TIM1_UP_IRQHandler+0x8>)
 80023b6:	f005 bbad 	b.w	8007b14 <HAL_TIM_IRQHandler>
 80023ba:	bf00      	nop
 80023bc:	20002000 	.word	0x20002000

080023c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023c2:	4803      	ldr	r0, [pc, #12]	; (80023d0 <TIM2_IRQHandler+0x10>)
 80023c4:	f005 fba6 	bl	8007b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  led_update();
  /* USER CODE END TIM2_IRQn 1 */
}
 80023c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  led_update();
 80023cc:	f000 bc2e 	b.w	8002c2c <led_update>
 80023d0:	20001fc0 	.word	0x20001fc0
 80023d4:	00000000 	.word	0x00000000

080023d8 <TIM3_IRQHandler>:
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//this timer runs on 200Hz.
	if (timer_index % 1 == 0){
		//code here runs on 200Hz, the data is updating at 100Hz.
		//Over-sampling ensures the data be updated at 100Hz.
		  short gyro[3] = {0,0,0}, accel[3] = {0,0,0}, sensors;
 80023d8:	2300      	movs	r3, #0
{
 80023da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			  q[1] = ((double)quat[1]) / 1073741824.0;
			  q[2] = ((double)quat[2]) / 1073741824.0;
			  q[3] = ((double)quat[3]) / 1073741824.0;

			  //32768 = 2.0g
			  a[0] = ((double)accel[0]) * 9.81 / 16384.0;
 80023de:	a7a4      	add	r7, pc, #656	; (adr r7, 8002670 <TIM3_IRQHandler+0x298>)
 80023e0:	e9d7 6700 	ldrd	r6, r7, [r7]
			  q[0] = ((double)quat[0]) / 1073741824.0;
 80023e4:	2400      	movs	r4, #0
			  a[0] = ((double)accel[0]) * 9.81 / 16384.0;
 80023e6:	f04f 0800 	mov.w	r8, #0
{
 80023ea:	b08e      	sub	sp, #56	; 0x38
			  q[0] = ((double)quat[0]) / 1073741824.0;
 80023ec:	4da4      	ldr	r5, [pc, #656]	; (8002680 <TIM3_IRQHandler+0x2a8>)
			  a[0] = ((double)accel[0]) * 9.81 / 16384.0;
 80023ee:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 80026bc <TIM3_IRQHandler+0x2e4>
		  short gyro[3] = {0,0,0}, accel[3] = {0,0,0}, sensors;
 80023f2:	9304      	str	r3, [sp, #16]
 80023f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80023f8:	9306      	str	r3, [sp, #24]
 80023fa:	f8ad 301c 	strh.w	r3, [sp, #28]
		  int status = dmp_read_fifo(gyro, accel, quat, &timestamp, &sensors,&more);
 80023fe:	f10d 0309 	add.w	r3, sp, #9
 8002402:	9301      	str	r3, [sp, #4]
 8002404:	f10d 030a 	add.w	r3, sp, #10
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	aa08      	add	r2, sp, #32
 800240c:	ab03      	add	r3, sp, #12
 800240e:	a906      	add	r1, sp, #24
 8002410:	a804      	add	r0, sp, #16
 8002412:	f7ff fc3d 	bl	8001c90 <dmp_read_fifo>
		  if (status == 0){
 8002416:	2800      	cmp	r0, #0
 8002418:	f040 809f 	bne.w	800255a <TIM3_IRQHandler+0x182>
			  q[0] = ((double)quat[0]) / 1073741824.0;
 800241c:	9808      	ldr	r0, [sp, #32]
 800241e:	f7fd fff1 	bl	8000404 <__aeabi_i2d>
 8002422:	4622      	mov	r2, r4
 8002424:	462b      	mov	r3, r5
 8002426:	f7fe f857 	bl	80004d8 <__aeabi_dmul>
 800242a:	f8df a294 	ldr.w	sl, [pc, #660]	; 80026c0 <TIM3_IRQHandler+0x2e8>
 800242e:	e9ca 0100 	strd	r0, r1, [sl]
			  q[1] = ((double)quat[1]) / 1073741824.0;
 8002432:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002434:	f7fd ffe6 	bl	8000404 <__aeabi_i2d>
 8002438:	4622      	mov	r2, r4
 800243a:	462b      	mov	r3, r5
 800243c:	f7fe f84c 	bl	80004d8 <__aeabi_dmul>
 8002440:	e9ca 0102 	strd	r0, r1, [sl, #8]
			  q[2] = ((double)quat[2]) / 1073741824.0;
 8002444:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002446:	f7fd ffdd 	bl	8000404 <__aeabi_i2d>
 800244a:	4622      	mov	r2, r4
 800244c:	462b      	mov	r3, r5
 800244e:	f7fe f843 	bl	80004d8 <__aeabi_dmul>
 8002452:	e9ca 0104 	strd	r0, r1, [sl, #16]
			  q[3] = ((double)quat[3]) / 1073741824.0;
 8002456:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002458:	f7fd ffd4 	bl	8000404 <__aeabi_i2d>
 800245c:	4622      	mov	r2, r4
 800245e:	462b      	mov	r3, r5
 8002460:	f7fe f83a 	bl	80004d8 <__aeabi_dmul>
 8002464:	e9ca 0106 	strd	r0, r1, [sl, #24]
			  a[0] = ((double)accel[0]) * 9.81 / 16384.0;
 8002468:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 800246c:	f7fd ffca 	bl	8000404 <__aeabi_i2d>
 8002470:	4632      	mov	r2, r6
 8002472:	463b      	mov	r3, r7
 8002474:	f7fe f830 	bl	80004d8 <__aeabi_dmul>
 8002478:	4642      	mov	r2, r8
 800247a:	464b      	mov	r3, r9
 800247c:	f7fe f82c 	bl	80004d8 <__aeabi_dmul>
 8002480:	f8df a240 	ldr.w	sl, [pc, #576]	; 80026c4 <TIM3_IRQHandler+0x2ec>
 8002484:	e9ca 0100 	strd	r0, r1, [sl]
			  a[1] = ((double)accel[1]) * 9.81 / 16384.0;
 8002488:	f9bd 001a 	ldrsh.w	r0, [sp, #26]
 800248c:	f7fd ffba 	bl	8000404 <__aeabi_i2d>
 8002490:	4632      	mov	r2, r6
 8002492:	463b      	mov	r3, r7
 8002494:	f7fe f820 	bl	80004d8 <__aeabi_dmul>
 8002498:	4642      	mov	r2, r8
 800249a:	464b      	mov	r3, r9
 800249c:	f7fe f81c 	bl	80004d8 <__aeabi_dmul>
 80024a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
			  a[2] = ((double)accel[2]) * 9.81 / 16384.0;
 80024a4:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80024a8:	f7fd ffac 	bl	8000404 <__aeabi_i2d>
 80024ac:	4632      	mov	r2, r6
 80024ae:	463b      	mov	r3, r7
 80024b0:	f7fe f812 	bl	80004d8 <__aeabi_dmul>
 80024b4:	4642      	mov	r2, r8
 80024b6:	464b      	mov	r3, r9
 80024b8:	f7fe f80e 	bl	80004d8 <__aeabi_dmul>
 80024bc:	e9ca 0104 	strd	r0, r1, [sl, #16]

			  w[0] = ((double)gyro[0]) * M_PI * 2000.0 / 180.0 / 32768.0; //32768 = 2000DEG/s
 80024c0:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80024c4:	f7fd ff9e 	bl	8000404 <__aeabi_i2d>
 80024c8:	a36b      	add	r3, pc, #428	; (adr r3, 8002678 <TIM3_IRQHandler+0x2a0>)
 80024ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ce:	f7fe f803 	bl	80004d8 <__aeabi_dmul>
 80024d2:	2200      	movs	r2, #0
 80024d4:	4b6b      	ldr	r3, [pc, #428]	; (8002684 <TIM3_IRQHandler+0x2ac>)
 80024d6:	f7fd ffff 	bl	80004d8 <__aeabi_dmul>
 80024da:	2200      	movs	r2, #0
 80024dc:	4b6a      	ldr	r3, [pc, #424]	; (8002688 <TIM3_IRQHandler+0x2b0>)
 80024de:	f7fe f925 	bl	800072c <__aeabi_ddiv>
 80024e2:	2200      	movs	r2, #0
 80024e4:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80024e8:	f7fd fff6 	bl	80004d8 <__aeabi_dmul>
 80024ec:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 80026c8 <TIM3_IRQHandler+0x2f0>
 80024f0:	e9ca 0100 	strd	r0, r1, [sl]
			  w[1] = ((double)gyro[1]) * M_PI * 2000.0 / 180.0 / 32768.0;
 80024f4:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80024f8:	f7fd ff84 	bl	8000404 <__aeabi_i2d>
 80024fc:	a35e      	add	r3, pc, #376	; (adr r3, 8002678 <TIM3_IRQHandler+0x2a0>)
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	f7fd ffe9 	bl	80004d8 <__aeabi_dmul>
 8002506:	2200      	movs	r2, #0
 8002508:	4b5e      	ldr	r3, [pc, #376]	; (8002684 <TIM3_IRQHandler+0x2ac>)
 800250a:	f7fd ffe5 	bl	80004d8 <__aeabi_dmul>
 800250e:	2200      	movs	r2, #0
 8002510:	4b5d      	ldr	r3, [pc, #372]	; (8002688 <TIM3_IRQHandler+0x2b0>)
 8002512:	f7fe f90b 	bl	800072c <__aeabi_ddiv>
 8002516:	2200      	movs	r2, #0
 8002518:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800251c:	f7fd ffdc 	bl	80004d8 <__aeabi_dmul>
 8002520:	e9ca 0102 	strd	r0, r1, [sl, #8]
			  w[2] = ((double)gyro[2]) * M_PI * 2000.0 / 180.0 / 32768.0;
 8002524:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8002528:	f7fd ff6c 	bl	8000404 <__aeabi_i2d>
 800252c:	a352      	add	r3, pc, #328	; (adr r3, 8002678 <TIM3_IRQHandler+0x2a0>)
 800252e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002532:	f7fd ffd1 	bl	80004d8 <__aeabi_dmul>
 8002536:	2200      	movs	r2, #0
 8002538:	4b52      	ldr	r3, [pc, #328]	; (8002684 <TIM3_IRQHandler+0x2ac>)
 800253a:	f7fd ffcd 	bl	80004d8 <__aeabi_dmul>
 800253e:	2200      	movs	r2, #0
 8002540:	4b51      	ldr	r3, [pc, #324]	; (8002688 <TIM3_IRQHandler+0x2b0>)
 8002542:	f7fe f8f3 	bl	800072c <__aeabi_ddiv>
 8002546:	2200      	movs	r2, #0
 8002548:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800254c:	f7fd ffc4 	bl	80004d8 <__aeabi_dmul>
			  send_imu_data = 1;
 8002550:	2201      	movs	r2, #1
 8002552:	4b4e      	ldr	r3, [pc, #312]	; (800268c <TIM3_IRQHandler+0x2b4>)
			  w[2] = ((double)gyro[2]) * M_PI * 2000.0 / 180.0 / 32768.0;
 8002554:	e9ca 0104 	strd	r0, r1, [sl, #16]
			  send_imu_data = 1;
 8002558:	601a      	str	r2, [r3, #0]
		  }
		  }while(more != 0 && initialize == 0);
 800255a:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800255e:	4b4c      	ldr	r3, [pc, #304]	; (8002690 <TIM3_IRQHandler+0x2b8>)
 8002560:	b11a      	cbz	r2, 800256a <TIM3_IRQHandler+0x192>
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	2a00      	cmp	r2, #0
 8002566:	f43f af4a 	beq.w	80023fe <TIM3_IRQHandler+0x26>
		  initialize = 1;
 800256a:	2201      	movs	r2, #1
 800256c:	601a      	str	r2, [r3, #0]
	}

	if (timer_index % 10 == 1){//avoid IMU update
 800256e:	220a      	movs	r2, #10
 8002570:	4c48      	ldr	r4, [pc, #288]	; (8002694 <TIM3_IRQHandler+0x2bc>)
 8002572:	f9b4 1000 	ldrsh.w	r1, [r4]
 8002576:	fb91 f3f2 	sdiv	r3, r1, r2
 800257a:	fb02 1313 	mls	r3, r2, r3, r1
 800257e:	b21b      	sxth	r3, r3
 8002580:	2b01      	cmp	r3, #1
 8002582:	d11d      	bne.n	80025c0 <TIM3_IRQHandler+0x1e8>

		if (ms5611_read_index == 0){
 8002584:	4d44      	ldr	r5, [pc, #272]	; (8002698 <TIM3_IRQHandler+0x2c0>)
 8002586:	4e45      	ldr	r6, [pc, #276]	; (800269c <TIM3_IRQHandler+0x2c4>)
 8002588:	682b      	ldr	r3, [r5, #0]
 800258a:	b953      	cbnz	r3, 80025a2 <TIM3_IRQHandler+0x1ca>
			ms5611_retrieve_temperature();
 800258c:	f000 fc04 	bl	8002d98 <ms5611_retrieve_temperature>
			pt[1] = ms5611_get_temperature();
 8002590:	f000 fc54 	bl	8002e3c <ms5611_get_temperature>
 8002594:	e9c6 0102 	strd	r0, r1, [r6, #8]
			ms5611_request_temperature();
			ms5611_read_index = 0;
		}else{
			ms5611_retrieve_pressure();
			pt[0] = ms5611_get_pressure();
			ms5611_request_pressure();
 8002598:	f000 fbb6 	bl	8002d08 <ms5611_request_pressure>
			ms5611_read_index++;
 800259c:	682b      	ldr	r3, [r5, #0]
 800259e:	3301      	adds	r3, #1
 80025a0:	e00a      	b.n	80025b8 <TIM3_IRQHandler+0x1e0>
		}else if (ms5611_read_index == TEMP_READ_INTERVAL - 1){
 80025a2:	2b09      	cmp	r3, #9
 80025a4:	d15c      	bne.n	8002660 <TIM3_IRQHandler+0x288>
			ms5611_retrieve_pressure();
 80025a6:	f000 fbc5 	bl	8002d34 <ms5611_retrieve_pressure>
			pt[0] = ms5611_get_pressure();
 80025aa:	f000 fc89 	bl	8002ec0 <ms5611_get_pressure>
 80025ae:	e9c6 0100 	strd	r0, r1, [r6]
			ms5611_request_temperature();
 80025b2:	f000 fbdb 	bl	8002d6c <ms5611_request_temperature>
			ms5611_read_index = 0;
 80025b6:	2300      	movs	r3, #0
		}
		send_pt_data = 1;
 80025b8:	2201      	movs	r2, #1
			ms5611_read_index++;
 80025ba:	602b      	str	r3, [r5, #0]
		send_pt_data = 1;
 80025bc:	4b38      	ldr	r3, [pc, #224]	; (80026a0 <TIM3_IRQHandler+0x2c8>)
 80025be:	601a      	str	r2, [r3, #0]
	}

	if (timer_index % 20 == 1){//avoid IMU update
 80025c0:	2314      	movs	r3, #20
 80025c2:	f9b4 2000 	ldrsh.w	r2, [r4]
 80025c6:	fb92 f5f3 	sdiv	r5, r2, r3
 80025ca:	fb03 2515 	mls	r5, r3, r5, r2
 80025ce:	b22d      	sxth	r5, r5
 80025d0:	2d01      	cmp	r5, #1
 80025d2:	d138      	bne.n	8002646 <TIM3_IRQHandler+0x26e>
		//code here runs on 10Hz
		short data[3];

		int status = mpu_get_compass_reg(data,NULL);
 80025d4:	2100      	movs	r1, #0
 80025d6:	a806      	add	r0, sp, #24
 80025d8:	f7ff f95c 	bl	8001894 <mpu_get_compass_reg>

		if (status == 0){
 80025dc:	b9b8      	cbnz	r0, 800260e <TIM3_IRQHandler+0x236>
			double raw_mag[3];
			raw_mag[0] = (double)data[0];
 80025de:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 80025e2:	f7fd ff0f 	bl	8000404 <__aeabi_i2d>
 80025e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
			raw_mag[1] = (double)data[1];
 80025ea:	f9bd 001a 	ldrsh.w	r0, [sp, #26]
 80025ee:	f7fd ff09 	bl	8000404 <__aeabi_i2d>
 80025f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			raw_mag[2] = (double)data[2];
 80025f6:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80025fa:	f7fd ff03 	bl	8000404 <__aeabi_i2d>
 80025fe:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
			calibrate_and_convert_mag_reading(raw_mag,m);
 8002602:	4928      	ldr	r1, [pc, #160]	; (80026a4 <TIM3_IRQHandler+0x2cc>)
 8002604:	a808      	add	r0, sp, #32
 8002606:	f000 f8d7 	bl	80027b8 <calibrate_and_convert_mag_reading>
			send_mag_data = 1;
 800260a:	4b27      	ldr	r3, [pc, #156]	; (80026a8 <TIM3_IRQHandler+0x2d0>)
 800260c:	601d      	str	r5, [r3, #0]
		}

		//poll DMA buffer
		GNSS_RX_Update();
 800260e:	f000 f9ed 	bl	80029ec <GNSS_RX_Update>

		//Record GPS data
		if (GNSS.GNGGA.status != 0){//data is valid
 8002612:	4b26      	ldr	r3, [pc, #152]	; (80026ac <TIM3_IRQHandler+0x2d4>)
 8002614:	f8d3 24a4 	ldr.w	r2, [r3, #1188]	; 0x4a4
 8002618:	b1aa      	cbz	r2, 8002646 <TIM3_IRQHandler+0x26e>
			lla[0] = GNSS.GNGGA.lat;
 800261a:	f503 6290 	add.w	r2, r3, #1152	; 0x480
 800261e:	4d24      	ldr	r5, [pc, #144]	; (80026b0 <TIM3_IRQHandler+0x2d8>)
 8002620:	e9d2 0100 	ldrd	r0, r1, [r2]
			lla[1] = GNSS.GNGGA.lon;
 8002624:	f503 6293 	add.w	r2, r3, #1176	; 0x498
			lla[0] = GNSS.GNGGA.lat;
 8002628:	e9c5 0100 	strd	r0, r1, [r5]
			lla[1] = GNSS.GNGGA.lon;
 800262c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8002630:	e9c5 0102 	strd	r0, r1, [r5, #8]
			lla[2] = GNSS.GNGGA.MSL_alt;
 8002634:	f8d3 04b0 	ldr.w	r0, [r3, #1200]	; 0x4b0
 8002638:	f7fd fef6 	bl	8000428 <__aeabi_f2d>
			send_gps_data = 1;
 800263c:	2201      	movs	r2, #1
 800263e:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <TIM3_IRQHandler+0x2dc>)
			lla[2] = GNSS.GNGGA.MSL_alt;
 8002640:	e9c5 0104 	strd	r0, r1, [r5, #16]
			send_gps_data = 1;
 8002644:	601a      	str	r2, [r3, #0]
		}
	}

	timer_index++;
 8002646:	8823      	ldrh	r3, [r4, #0]
	if (timer_index == 200){
		timer_index = 0;
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002648:	481b      	ldr	r0, [pc, #108]	; (80026b8 <TIM3_IRQHandler+0x2e0>)
	timer_index++;
 800264a:	3301      	adds	r3, #1
 800264c:	b21b      	sxth	r3, r3
	if (timer_index == 200){
 800264e:	2bc8      	cmp	r3, #200	; 0xc8
		timer_index = 0;
 8002650:	bf08      	it	eq
 8002652:	2300      	moveq	r3, #0
 8002654:	8023      	strh	r3, [r4, #0]
  HAL_TIM_IRQHandler(&htim3);
 8002656:	f005 fa5d 	bl	8007b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800265a:	b00e      	add	sp, #56	; 0x38
 800265c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ms5611_retrieve_pressure();
 8002660:	f000 fb68 	bl	8002d34 <ms5611_retrieve_pressure>
			pt[0] = ms5611_get_pressure();
 8002664:	f000 fc2c 	bl	8002ec0 <ms5611_get_pressure>
 8002668:	e9c6 0100 	strd	r0, r1, [r6]
 800266c:	e794      	b.n	8002598 <TIM3_IRQHandler+0x1c0>
 800266e:	bf00      	nop
 8002670:	51eb851f 	.word	0x51eb851f
 8002674:	40239eb8 	.word	0x40239eb8
 8002678:	54442d18 	.word	0x54442d18
 800267c:	400921fb 	.word	0x400921fb
 8002680:	3e100000 	.word	0x3e100000
 8002684:	409f4000 	.word	0x409f4000
 8002688:	40668000 	.word	0x40668000
 800268c:	2000043c 	.word	0x2000043c
 8002690:	20000460 	.word	0x20000460
 8002694:	20000468 	.word	0x20000468
 8002698:	20000464 	.word	0x20000464
 800269c:	20000408 	.word	0x20000408
 80026a0:	20000444 	.word	0x20000444
 80026a4:	200003f0 	.word	0x200003f0
 80026a8:	20000440 	.word	0x20000440
 80026ac:	20001af8 	.word	0x20001af8
 80026b0:	200003d8 	.word	0x200003d8
 80026b4:	20000438 	.word	0x20000438
 80026b8:	20001a2c 	.word	0x20001a2c
 80026bc:	3f100000 	.word	0x3f100000
 80026c0:	20000418 	.word	0x20000418
 80026c4:	200003c0 	.word	0x200003c0
 80026c8:	20000448 	.word	0x20000448

080026cc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80026cc:	2001      	movs	r0, #1
 80026ce:	4770      	bx	lr

080026d0 <_kill>:

int _kill(int pid, int sig)
{
 80026d0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80026d2:	f007 f981 	bl	80099d8 <__errno>
 80026d6:	2316      	movs	r3, #22
 80026d8:	6003      	str	r3, [r0, #0]
	return -1;
}
 80026da:	f04f 30ff 	mov.w	r0, #4294967295
 80026de:	bd08      	pop	{r3, pc}

080026e0 <_exit>:

void _exit (int status)
{
 80026e0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80026e2:	f007 f979 	bl	80099d8 <__errno>
 80026e6:	2316      	movs	r3, #22
 80026e8:	6003      	str	r3, [r0, #0]
 80026ea:	e7fe      	b.n	80026ea <_exit+0xa>

080026ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80026ec:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80026ee:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <_sbrk+0x2c>)
{
 80026f0:	4602      	mov	r2, r0
	if (heap_end == 0)
 80026f2:	6819      	ldr	r1, [r3, #0]
 80026f4:	b909      	cbnz	r1, 80026fa <_sbrk+0xe>
		heap_end = &end;
 80026f6:	4909      	ldr	r1, [pc, #36]	; (800271c <_sbrk+0x30>)
 80026f8:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80026fa:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80026fc:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80026fe:	4402      	add	r2, r0
 8002700:	428a      	cmp	r2, r1
 8002702:	d906      	bls.n	8002712 <_sbrk+0x26>
	{
		errno = ENOMEM;
 8002704:	f007 f968 	bl	80099d8 <__errno>
 8002708:	230c      	movs	r3, #12
 800270a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800270c:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8002710:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8002712:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8002714:	e7fc      	b.n	8002710 <_sbrk+0x24>
 8002716:	bf00      	nop
 8002718:	2000046c 	.word	0x2000046c
 800271c:	20003f90 	.word	0x20003f90

08002720 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002720:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <SystemInit+0x40>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	f042 0201 	orr.w	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800272a:	6859      	ldr	r1, [r3, #4]
 800272c:	4a0d      	ldr	r2, [pc, #52]	; (8002764 <SystemInit+0x44>)
 800272e:	400a      	ands	r2, r1
 8002730:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002738:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800273c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002744:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800274c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800274e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002752:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002754:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002758:	4b03      	ldr	r3, [pc, #12]	; (8002768 <SystemInit+0x48>)
 800275a:	609a      	str	r2, [r3, #8]
#endif 
}
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40021000 	.word	0x40021000
 8002764:	f8ff0000 	.word	0xf8ff0000
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800276c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800276e:	e003      	b.n	8002778 <LoopCopyDataInit>

08002770 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002770:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002772:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002774:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002776:	3104      	adds	r1, #4

08002778 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002778:	480a      	ldr	r0, [pc, #40]	; (80027a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800277a:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800277c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800277e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002780:	d3f6      	bcc.n	8002770 <CopyDataInit>
  ldr r2, =_sbss
 8002782:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002784:	e002      	b.n	800278c <LoopFillZerobss>

08002786 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002786:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002788:	f842 3b04 	str.w	r3, [r2], #4

0800278c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800278c:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800278e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002790:	d3f9      	bcc.n	8002786 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002792:	f7ff ffc5 	bl	8002720 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002796:	f007 f925 	bl	80099e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800279a:	f7ff fb6b 	bl	8001e74 <main>
  bx lr
 800279e:	4770      	bx	lr
  ldr r3, =_sidata
 80027a0:	0800d758 	.word	0x0800d758
  ldr r0, =_sdata
 80027a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80027a8:	2000038c 	.word	0x2000038c
  ldr r2, =_sbss
 80027ac:	20000390 	.word	0x20000390
  ldr r3, = _ebss
 80027b0:	20003f8c 	.word	0x20003f8c

080027b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027b4:	e7fe      	b.n	80027b4 <ADC1_2_IRQHandler>
	...

080027b8 <calibrate_and_convert_mag_reading>:

/**
 * Calibrate magnetic sensor reading and convert readings from magnetic sensor
 * frame to IMU(accel and gyroscope) frame.
 */
void calibrate_and_convert_mag_reading(double m_reading[3], double m[3]){
 80027b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	double m_unbias[3]; //magnatic readings minus offset
	double m_mag[3];

	m_unbias[0] = m_reading[0] - MAG_X_OFFSET;
 80027bc:	a34a      	add	r3, pc, #296	; (adr r3, 80028e8 <calibrate_and_convert_mag_reading+0x130>)
 80027be:	e9d3 2300 	ldrd	r2, r3, [r3]
void calibrate_and_convert_mag_reading(double m_reading[3], double m[3]){
 80027c2:	460c      	mov	r4, r1
 80027c4:	4605      	mov	r5, r0
	m_unbias[0] = m_reading[0] - MAG_X_OFFSET;
 80027c6:	c803      	ldmia	r0, {r0, r1}
 80027c8:	f7fd fcce 	bl	8000168 <__aeabi_dsub>
	m_unbias[1] = m_reading[1] - MAG_Y_OFFSET;
 80027cc:	a348      	add	r3, pc, #288	; (adr r3, 80028f0 <calibrate_and_convert_mag_reading+0x138>)
 80027ce:	e9d3 2300 	ldrd	r2, r3, [r3]
	m_unbias[0] = m_reading[0] - MAG_X_OFFSET;
 80027d2:	4606      	mov	r6, r0
 80027d4:	460f      	mov	r7, r1
	m_unbias[1] = m_reading[1] - MAG_Y_OFFSET;
 80027d6:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 80027da:	f7fd fcc5 	bl	8000168 <__aeabi_dsub>
	m_unbias[2] = m_reading[2] - MAG_Z_OFFSET;
 80027de:	a346      	add	r3, pc, #280	; (adr r3, 80028f8 <calibrate_and_convert_mag_reading+0x140>)
 80027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
	m_unbias[1] = m_reading[1] - MAG_Y_OFFSET;
 80027e4:	4682      	mov	sl, r0
 80027e6:	468b      	mov	fp, r1
	m_unbias[2] = m_reading[2] - MAG_Z_OFFSET;
 80027e8:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80027ec:	f7fd fcbe 	bl	800016c <__adddf3>

	m_mag[0] = MAG_TRANSF_11*m_unbias[0] + MAG_TRANSF_12*m_unbias[1] + MAG_TRANSF_13*m_unbias[2];
	m_mag[1] = MAG_TRANSF_21*m_unbias[0] + MAG_TRANSF_22*m_unbias[1] + MAG_TRANSF_23*m_unbias[2];
 80027f0:	a343      	add	r3, pc, #268	; (adr r3, 8002900 <calibrate_and_convert_mag_reading+0x148>)
 80027f2:	e9d3 2300 	ldrd	r2, r3, [r3]
	m_unbias[2] = m_reading[2] - MAG_Z_OFFSET;
 80027f6:	e9cd 0100 	strd	r0, r1, [sp]
	m_mag[1] = MAG_TRANSF_21*m_unbias[0] + MAG_TRANSF_22*m_unbias[1] + MAG_TRANSF_23*m_unbias[2];
 80027fa:	4630      	mov	r0, r6
 80027fc:	4639      	mov	r1, r7
 80027fe:	f7fd fe6b 	bl	80004d8 <__aeabi_dmul>
 8002802:	a341      	add	r3, pc, #260	; (adr r3, 8002908 <calibrate_and_convert_mag_reading+0x150>)
 8002804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002808:	4680      	mov	r8, r0
 800280a:	4689      	mov	r9, r1
 800280c:	4650      	mov	r0, sl
 800280e:	4659      	mov	r1, fp
 8002810:	f7fd fe62 	bl	80004d8 <__aeabi_dmul>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4640      	mov	r0, r8
 800281a:	4649      	mov	r1, r9
 800281c:	f7fd fca6 	bl	800016c <__adddf3>
 8002820:	a33b      	add	r3, pc, #236	; (adr r3, 8002910 <calibrate_and_convert_mag_reading+0x158>)
 8002822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002826:	4680      	mov	r8, r0
 8002828:	4689      	mov	r9, r1
 800282a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800282e:	f7fd fe53 	bl	80004d8 <__aeabi_dmul>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4640      	mov	r0, r8
 8002838:	4649      	mov	r1, r9
 800283a:	f7fd fc97 	bl	800016c <__adddf3>
	m_mag[0] = MAG_TRANSF_11*m_unbias[0] + MAG_TRANSF_12*m_unbias[1] + MAG_TRANSF_13*m_unbias[2];
 800283e:	a336      	add	r3, pc, #216	; (adr r3, 8002918 <calibrate_and_convert_mag_reading+0x160>)
 8002840:	e9d3 2300 	ldrd	r2, r3, [r3]
	 * 		+Y	-------------------------	+X
	 * 		+Z	-------------------------	-Z
	 *
	 */

	m[0] = m_mag[1];
 8002844:	e9c4 0100 	strd	r0, r1, [r4]
	m_mag[0] = MAG_TRANSF_11*m_unbias[0] + MAG_TRANSF_12*m_unbias[1] + MAG_TRANSF_13*m_unbias[2];
 8002848:	4630      	mov	r0, r6
 800284a:	4639      	mov	r1, r7
 800284c:	f7fd fe44 	bl	80004d8 <__aeabi_dmul>
 8002850:	a333      	add	r3, pc, #204	; (adr r3, 8002920 <calibrate_and_convert_mag_reading+0x168>)
 8002852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002856:	4680      	mov	r8, r0
 8002858:	4689      	mov	r9, r1
 800285a:	4650      	mov	r0, sl
 800285c:	4659      	mov	r1, fp
 800285e:	f7fd fe3b 	bl	80004d8 <__aeabi_dmul>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4640      	mov	r0, r8
 8002868:	4649      	mov	r1, r9
 800286a:	f7fd fc7f 	bl	800016c <__adddf3>
 800286e:	a32e      	add	r3, pc, #184	; (adr r3, 8002928 <calibrate_and_convert_mag_reading+0x170>)
 8002870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002874:	4680      	mov	r8, r0
 8002876:	4689      	mov	r9, r1
 8002878:	e9dd 0100 	ldrd	r0, r1, [sp]
 800287c:	f7fd fe2c 	bl	80004d8 <__aeabi_dmul>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4640      	mov	r0, r8
 8002886:	4649      	mov	r1, r9
 8002888:	f7fd fc70 	bl	800016c <__adddf3>
	m_mag[2] = MAG_TRANSF_31*m_unbias[0] + MAG_TRANSF_32*m_unbias[1] + MAG_TRANSF_33*m_unbias[2];
 800288c:	a328      	add	r3, pc, #160	; (adr r3, 8002930 <calibrate_and_convert_mag_reading+0x178>)
 800288e:	e9d3 2300 	ldrd	r2, r3, [r3]
	m[1] = m_mag[0];
 8002892:	e9c4 0102 	strd	r0, r1, [r4, #8]
	m_mag[2] = MAG_TRANSF_31*m_unbias[0] + MAG_TRANSF_32*m_unbias[1] + MAG_TRANSF_33*m_unbias[2];
 8002896:	4630      	mov	r0, r6
 8002898:	4639      	mov	r1, r7
 800289a:	f7fd fe1d 	bl	80004d8 <__aeabi_dmul>
 800289e:	a326      	add	r3, pc, #152	; (adr r3, 8002938 <calibrate_and_convert_mag_reading+0x180>)
 80028a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a4:	4606      	mov	r6, r0
 80028a6:	460f      	mov	r7, r1
 80028a8:	4650      	mov	r0, sl
 80028aa:	4659      	mov	r1, fp
 80028ac:	f7fd fe14 	bl	80004d8 <__aeabi_dmul>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4630      	mov	r0, r6
 80028b6:	4639      	mov	r1, r7
 80028b8:	f7fd fc58 	bl	800016c <__adddf3>
 80028bc:	a320      	add	r3, pc, #128	; (adr r3, 8002940 <calibrate_and_convert_mag_reading+0x188>)
 80028be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c2:	4606      	mov	r6, r0
 80028c4:	460f      	mov	r7, r1
 80028c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80028ca:	f7fd fe05 	bl	80004d8 <__aeabi_dmul>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4630      	mov	r0, r6
 80028d4:	4639      	mov	r1, r7
 80028d6:	f7fd fc49 	bl	800016c <__adddf3>
	m[2] = -m_mag[2];
 80028da:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80028de:	6120      	str	r0, [r4, #16]
 80028e0:	6161      	str	r1, [r4, #20]
}
 80028e2:	b003      	add	sp, #12
 80028e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028e8:	810624dd 	.word	0x810624dd
 80028ec:	40615795 	.word	0x40615795
 80028f0:	189374bc 	.word	0x189374bc
 80028f4:	40706804 	.word	0x40706804
 80028f8:	fdf3b646 	.word	0xfdf3b646
 80028fc:	405268d4 	.word	0x405268d4
 8002900:	020c49ba 	.word	0x020c49ba
 8002904:	bfa6872b 	.word	0xbfa6872b
 8002908:	78d4fdf4 	.word	0x78d4fdf4
 800290c:	3ff326e9 	.word	0x3ff326e9
 8002910:	47ae147b 	.word	0x47ae147b
 8002914:	3f847ae1 	.word	0x3f847ae1
 8002918:	51eb851f 	.word	0x51eb851f
 800291c:	3ff31eb8 	.word	0x3ff31eb8
 8002920:	e5604189 	.word	0xe5604189
 8002924:	bfab22d0 	.word	0xbfab22d0
 8002928:	53f7ced9 	.word	0x53f7ced9
 800292c:	3faba5e3 	.word	0x3faba5e3
 8002930:	76c8b439 	.word	0x76c8b439
 8002934:	bf9a9fbe 	.word	0xbf9a9fbe
 8002938:	76c8b439 	.word	0x76c8b439
 800293c:	bf8a9fbe 	.word	0xbf8a9fbe
 8002940:	a5e353f8 	.word	0xa5e353f8
 8002944:	3ff2c49b 	.word	0x3ff2c49b

08002948 <GNSS_set_huart>:
 */

#include "gnss.h"

void GNSS_set_huart(UART_HandleTypeDef* huart){
	huartx = huart;
 8002948:	4b01      	ldr	r3, [pc, #4]	; (8002950 <GNSS_set_huart+0x8>)
 800294a:	6018      	str	r0, [r3, #0]
}
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	20001fbc 	.word	0x20001fbc

08002954 <parse_GNGGA>:
/**
 * parse GNSS.GNGGA sentence into fields as strings.(char[] s)
 * @param msg GNSS.GNGGA message
 * @param fields GNSS.GNGGA message parser output
 */
void parse_GNGGA(unsigned char* msg, char fields[][MAX_FIELD_SIZE]){
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
	        fields[current_field][current_pos] = *ch_ptr;
	        current_pos++;
	        ch_ptr++;
	    }
        fields[current_field][current_pos]='\0';
 8002956:	2600      	movs	r6, #0
    while (*ch_ptr != '\0'){
 8002958:	7803      	ldrb	r3, [r0, #0]
 800295a:	b19b      	cbz	r3, 8002984 <parse_GNGGA+0x30>
 800295c:	4604      	mov	r4, r0
 800295e:	1e4d      	subs	r5, r1, #1
	        fields[current_field][current_pos] = *ch_ptr;
 8002960:	4603      	mov	r3, r0
 8002962:	e001      	b.n	8002968 <parse_GNGGA+0x14>
 8002964:	f805 2f01 	strb.w	r2, [r5, #1]!
 8002968:	4618      	mov	r0, r3
 800296a:	1b1f      	subs	r7, r3, r4
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 800296c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002970:	2a2c      	cmp	r2, #44	; 0x2c
 8002972:	d001      	beq.n	8002978 <parse_GNGGA+0x24>
 8002974:	2a00      	cmp	r2, #0
 8002976:	d1f5      	bne.n	8002964 <parse_GNGGA+0x10>
        fields[current_field][current_pos]='\0';
 8002978:	55ce      	strb	r6, [r1, r7]
	    current_field++;
	    if (*ch_ptr != '\0'){ // skip ',' when not at end of string
 800297a:	7803      	ldrb	r3, [r0, #0]
 800297c:	b103      	cbz	r3, 8002980 <parse_GNGGA+0x2c>
	        ch_ptr++;
 800297e:	3001      	adds	r0, #1
 8002980:	310c      	adds	r1, #12
 8002982:	e7e9      	b.n	8002958 <parse_GNGGA+0x4>
	    }
    }
}
 8002984:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002988 <convert_raw_lat_lon>:
 * convert raw latitude and longitude, which have format dddmm.mmmm
 * into decimal.
 * @param raw raw latitude and longitude input
 * @return decimal latitude and longitude
 */
double convert_raw_lat_lon(double raw){
 8002988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((int)raw / 100) + (fmod(raw,100)/60);
 800298a:	2200      	movs	r2, #0
 800298c:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <convert_raw_lat_lon+0x44>)
double convert_raw_lat_lon(double raw){
 800298e:	4604      	mov	r4, r0
 8002990:	460d      	mov	r5, r1
	return ((int)raw / 100) + (fmod(raw,100)/60);
 8002992:	f006 feab 	bl	80096ec <fmod>
 8002996:	4606      	mov	r6, r0
 8002998:	460f      	mov	r7, r1
 800299a:	4620      	mov	r0, r4
 800299c:	4629      	mov	r1, r5
 800299e:	f7fe f84b 	bl	8000a38 <__aeabi_d2iz>
 80029a2:	2364      	movs	r3, #100	; 0x64
 80029a4:	fb90 f0f3 	sdiv	r0, r0, r3
 80029a8:	f7fd fd2c 	bl	8000404 <__aeabi_i2d>
 80029ac:	2200      	movs	r2, #0
 80029ae:	4604      	mov	r4, r0
 80029b0:	460d      	mov	r5, r1
 80029b2:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <convert_raw_lat_lon+0x48>)
 80029b4:	4630      	mov	r0, r6
 80029b6:	4639      	mov	r1, r7
 80029b8:	f7fd feb8 	bl	800072c <__aeabi_ddiv>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4620      	mov	r0, r4
 80029c2:	4629      	mov	r1, r5
 80029c4:	f7fd fbd2 	bl	800016c <__adddf3>
}
 80029c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40590000 	.word	0x40590000
 80029d0:	404e0000 	.word	0x404e0000

080029d4 <GNSS_Init>:
 * initializes the GNSS interrupt.
 *
 * call this function before main loop.
 */
void GNSS_Init(){
	HAL_UART_Receive_DMA(huartx, GNSS.dma_buffer, DMA_BUFFER_SIZE);
 80029d4:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <GNSS_Init+0x10>)
 80029d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029da:	4903      	ldr	r1, [pc, #12]	; (80029e8 <GNSS_Init+0x14>)
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	f005 bac1 	b.w	8007f64 <HAL_UART_Receive_DMA>
 80029e2:	bf00      	nop
 80029e4:	20001fbc 	.word	0x20001fbc
 80029e8:	20001af8 	.word	0x20001af8

080029ec <GNSS_RX_Update>:
	//https://www.devcoons.com/stm32-uart-receive-unknown-size-data-using-dma-and-freertos/
}

int GNSS_RX_Update(){
 80029ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029f0:	b0b3      	sub	sp, #204	; 0xcc
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029f2:	b672      	cpsid	i

	__disable_irq();//I don't understand this
	int i = DMA_BUFFER_SIZE - huartx->hdmarx->Instance->CNDTR; //last byte received
 80029f4:	4b77      	ldr	r3, [pc, #476]	; (8002bd4 <GNSS_RX_Update+0x1e8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685e      	ldr	r6, [r3, #4]
 80029fe:	f5c6 6680 	rsb	r6, r6, #1024	; 0x400
  __ASM volatile ("cpsie i" : : : "memory");
 8002a02:	b662      	cpsie	i
	__enable_irq();//I don't understand this

	int new_information = 0;
 8002a04:	f04f 0800 	mov.w	r8, #0

		if (str != NULL){
			char fields[NUM_FIELDS][MAX_FIELD_SIZE];
			parse_GNGGA(GNSS.message_buffer,fields);
			//field 1: UTC time
			sscanf(fields[1],"%2d%2d%2d.%3d",&GNSS.GNGGA.UTC_Hour,&GNSS.GNGGA.UTC_Min,&GNSS.GNGGA.UTC_Second,&GNSS.GNGGA.UTC_Millis);
 8002a08:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8002bf0 <GNSS_RX_Update+0x204>
			//field 14: checksum
			GNSS.GNGGA.checksum[0] = fields[14][1];//fields[14][0] is always '*'
			GNSS.GNGGA.checksum[1] = fields[14][2];

			//convert raw latitude and longitude to decimal format
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 8002a0c:	f109 070c 	add.w	r7, r9, #12
	while (GNSS.start != i){
 8002a10:	4c71      	ldr	r4, [pc, #452]	; (8002bd8 <GNSS_RX_Update+0x1ec>)
 8002a12:	f04f 0b00 	mov.w	fp, #0
 8002a16:	4625      	mov	r5, r4
		GNSS.message_buffer[counter] = '\n';
 8002a18:	f04f 0a0a 	mov.w	sl, #10
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8002a1c:	f504 6280 	add.w	r2, r4, #1024	; 0x400
	while (GNSS.start != i){
 8002a20:	f8d4 3464 	ldr.w	r3, [r4, #1124]	; 0x464
 8002a24:	42b3      	cmp	r3, r6
 8002a26:	d00f      	beq.n	8002a48 <GNSS_RX_Update+0x5c>
		if (GNSS.dma_buffer[GNSS.start] != '$'){
 8002a28:	5ce1      	ldrb	r1, [r4, r3]
 8002a2a:	2924      	cmp	r1, #36	; 0x24
 8002a2c:	d006      	beq.n	8002a3c <GNSS_RX_Update+0x50>
 8002a2e:	2100      	movs	r1, #0
				if (GNSS.dma_buffer[GNSS.start] == '$'){
 8002a30:	5ce8      	ldrb	r0, [r5, r3]
 8002a32:	2824      	cmp	r0, #36	; 0x24
 8002a34:	d10c      	bne.n	8002a50 <GNSS_RX_Update+0x64>
 8002a36:	b109      	cbz	r1, 8002a3c <GNSS_RX_Update+0x50>
 8002a38:	f8c5 3464 	str.w	r3, [r5, #1124]	; 0x464
		if (GNSS.dma_buffer[GNSS.start] != '$'){break;}//if start not found, return.
 8002a3c:	f8d5 1464 	ldr.w	r1, [r5, #1124]	; 0x464
 8002a40:	5c6b      	ldrb	r3, [r5, r1]
 8002a42:	2b24      	cmp	r3, #36	; 0x24
 8002a44:	f000 80b2 	beq.w	8002bac <GNSS_RX_Update+0x1c0>
			new_information = 1;
		}
	}

	return new_information;
}
 8002a48:	4640      	mov	r0, r8
 8002a4a:	b033      	add	sp, #204	; 0xcc
 8002a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for(;GNSS.start != i;GNSS.start = (GNSS.start + 1) % DMA_BUFFER_SIZE){
 8002a50:	3301      	adds	r3, #1
 8002a52:	4259      	negs	r1, r3
 8002a54:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002a58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a5c:	bf58      	it	pl
 8002a5e:	424b      	negpl	r3, r1
 8002a60:	42b3      	cmp	r3, r6
 8002a62:	f04f 0101 	mov.w	r1, #1
 8002a66:	d1e3      	bne.n	8002a30 <GNSS_RX_Update+0x44>
 8002a68:	f8c5 6464 	str.w	r6, [r5, #1124]	; 0x464
 8002a6c:	e7e6      	b.n	8002a3c <GNSS_RX_Update+0x50>
			if (GNSS.dma_buffer[end] == '\n'){
 8002a6e:	5ce8      	ldrb	r0, [r5, r3]
 8002a70:	280a      	cmp	r0, #10
 8002a72:	d009      	beq.n	8002a88 <GNSS_RX_Update+0x9c>
		for(end = GNSS.start; end != i; end = (end + 1) % DMA_BUFFER_SIZE){
 8002a74:	3301      	adds	r3, #1
 8002a76:	4258      	negs	r0, r3
 8002a78:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8002a7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a80:	bf58      	it	pl
 8002a82:	4243      	negpl	r3, r0
 8002a84:	42b3      	cmp	r3, r6
 8002a86:	d1f2      	bne.n	8002a6e <GNSS_RX_Update+0x82>
		if (GNSS.dma_buffer[end] != '\n'){break;}//if end not found, return.
 8002a88:	5ce8      	ldrb	r0, [r5, r3]
 8002a8a:	280a      	cmp	r0, #10
 8002a8c:	d1dc      	bne.n	8002a48 <GNSS_RX_Update+0x5c>
		int counter = 0;
 8002a8e:	f04f 0c00 	mov.w	ip, #0
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 8002a92:	428b      	cmp	r3, r1
 8002a94:	f10c 0001 	add.w	r0, ip, #1
 8002a98:	f040 808a 	bne.w	8002bb0 <GNSS_RX_Update+0x1c4>
		GNSS.message_buffer[counter] = '\n';
 8002a9c:	44ac      	add	ip, r5
		GNSS.message_buffer[counter+1] = '\0';
 8002a9e:	4428      	add	r0, r5
		GNSS.message_buffer[counter] = '\n';
 8002aa0:	f88c a400 	strb.w	sl, [ip, #1024]	; 0x400
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8002aa4:	494d      	ldr	r1, [pc, #308]	; (8002bdc <GNSS_RX_Update+0x1f0>)
		GNSS.message_buffer[counter+1] = '\0';
 8002aa6:	f880 b400 	strb.w	fp, [r0, #1024]	; 0x400
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8002aaa:	4610      	mov	r0, r2
 8002aac:	9203      	str	r2, [sp, #12]
		GNSS.start = end;
 8002aae:	f8c5 3464 	str.w	r3, [r5, #1124]	; 0x464
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8002ab2:	f007 f855 	bl	8009b60 <strstr>
		if (str != NULL){
 8002ab6:	9a03      	ldr	r2, [sp, #12]
 8002ab8:	2800      	cmp	r0, #0
 8002aba:	d0b1      	beq.n	8002a20 <GNSS_RX_Update+0x34>
			sscanf(fields[1],"%2d%2d%2d.%3d",&GNSS.GNGGA.UTC_Hour,&GNSS.GNGGA.UTC_Min,&GNSS.GNGGA.UTC_Second,&GNSS.GNGGA.UTC_Millis);
 8002abc:	4d48      	ldr	r5, [pc, #288]	; (8002be0 <GNSS_RX_Update+0x1f4>)
			parse_GNGGA(GNSS.message_buffer,fields);
 8002abe:	a905      	add	r1, sp, #20
 8002ac0:	4848      	ldr	r0, [pc, #288]	; (8002be4 <GNSS_RX_Update+0x1f8>)
 8002ac2:	f7ff ff47 	bl	8002954 <parse_GNGGA>
			sscanf(fields[1],"%2d%2d%2d.%3d",&GNSS.GNGGA.UTC_Hour,&GNSS.GNGGA.UTC_Min,&GNSS.GNGGA.UTC_Second,&GNSS.GNGGA.UTC_Millis);
 8002ac6:	f1a5 0208 	sub.w	r2, r5, #8
 8002aca:	1f2b      	subs	r3, r5, #4
 8002acc:	4946      	ldr	r1, [pc, #280]	; (8002be8 <GNSS_RX_Update+0x1fc>)
 8002ace:	f8cd 9004 	str.w	r9, [sp, #4]
 8002ad2:	9500      	str	r5, [sp, #0]
 8002ad4:	a808      	add	r0, sp, #32
 8002ad6:	f007 f817 	bl	8009b08 <siscanf>
			GNSS.GNGGA.lat_raw = atof(fields[2]);
 8002ada:	a80b      	add	r0, sp, #44	; 0x2c
 8002adc:	f006 ff75 	bl	80099ca <atof>
 8002ae0:	f7fd fff2 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.North_South = fields[3][0];
 8002ae4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
			GNSS.GNGGA.lat_raw = atof(fields[2]);
 8002ae8:	f8c4 0478 	str.w	r0, [r4, #1144]	; 0x478
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 8002aec:	a811      	add	r0, sp, #68	; 0x44
			GNSS.GNGGA.North_South = fields[3][0];
 8002aee:	f884 3488 	strb.w	r3, [r4, #1160]	; 0x488
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 8002af2:	f006 ff6a 	bl	80099ca <atof>
			GNSS.GNGGA.East_West = fields[5][0];
 8002af6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 8002afa:	e9c5 0108 	strd	r0, r1, [r5, #32]
			GNSS.GNGGA.status = atoi(fields[6]);
 8002afe:	a817      	add	r0, sp, #92	; 0x5c
			GNSS.GNGGA.East_West = fields[5][0];
 8002b00:	f884 34a0 	strb.w	r3, [r4, #1184]	; 0x4a0
			GNSS.GNGGA.status = atoi(fields[6]);
 8002b04:	f006 ff64 	bl	80099d0 <atoi>
 8002b08:	f8c4 04a4 	str.w	r0, [r4, #1188]	; 0x4a4
			GNSS.GNGGA.num_sat = atoi(fields[7]);
 8002b0c:	a81a      	add	r0, sp, #104	; 0x68
 8002b0e:	f006 ff5f 	bl	80099d0 <atoi>
 8002b12:	f8c4 04a8 	str.w	r0, [r4, #1192]	; 0x4a8
			GNSS.GNGGA.HDOP = atof(fields[8]);
 8002b16:	a81d      	add	r0, sp, #116	; 0x74
 8002b18:	f006 ff57 	bl	80099ca <atof>
 8002b1c:	f7fd ffd4 	bl	8000ac8 <__aeabi_d2f>
 8002b20:	f8c4 04ac 	str.w	r0, [r4, #1196]	; 0x4ac
			GNSS.GNGGA.MSL_alt = atof(fields[9]);
 8002b24:	a820      	add	r0, sp, #128	; 0x80
 8002b26:	f006 ff50 	bl	80099ca <atof>
 8002b2a:	f7fd ffcd 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.MSL_Unit = fields[10][0];
 8002b2e:	f89d 308c 	ldrb.w	r3, [sp, #140]	; 0x8c
			GNSS.GNGGA.MSL_alt = atof(fields[9]);
 8002b32:	f8c4 04b0 	str.w	r0, [r4, #1200]	; 0x4b0
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 8002b36:	a826      	add	r0, sp, #152	; 0x98
			GNSS.GNGGA.MSL_Unit = fields[10][0];
 8002b38:	f884 34b4 	strb.w	r3, [r4, #1204]	; 0x4b4
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 8002b3c:	f006 ff45 	bl	80099ca <atof>
 8002b40:	f7fd ffc2 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.Geoid_Unit = fields[12][0];
 8002b44:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 8002b48:	f8c4 04b8 	str.w	r0, [r4, #1208]	; 0x4b8
			GNSS.GNGGA.Geoid_Unit = fields[12][0];
 8002b4c:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
			GNSS.GNGGA.checksum[0] = fields[14][1];//fields[14][0] is always '*'
 8002b50:	f89d 30bd 	ldrb.w	r3, [sp, #189]	; 0xbd
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 8002b54:	f8d4 0478 	ldr.w	r0, [r4, #1144]	; 0x478
			GNSS.GNGGA.checksum[0] = fields[14][1];//fields[14][0] is always '*'
 8002b58:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd
			GNSS.GNGGA.checksum[1] = fields[14][2];
 8002b5c:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
			new_information = 1;
 8002b60:	f04f 0801 	mov.w	r8, #1
			GNSS.GNGGA.checksum[1] = fields[14][2];
 8002b64:	f884 34be 	strb.w	r3, [r4, #1214]	; 0x4be
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 8002b68:	f7fd fc5e 	bl	8000428 <__aeabi_f2d>
 8002b6c:	f7ff ff0c 	bl	8002988 <convert_raw_lat_lon>
 8002b70:	e9c7 0100 	strd	r0, r1, [r7]
			GNSS.GNGGA.lon = convert_raw_lat_lon(GNSS.GNGGA.lon_raw);
 8002b74:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8002b78:	f7ff ff06 	bl	8002988 <convert_raw_lat_lon>
			GNSS.GNGGA.lat = GNSS.GNGGA.North_South == 'N' ? GNSS.GNGGA.lat : -GNSS.GNGGA.lat;
 8002b7c:	f894 3488 	ldrb.w	r3, [r4, #1160]	; 0x488
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	2b4e      	cmp	r3, #78	; 0x4e
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4692      	mov	sl, r2
 8002b88:	bf18      	it	ne
 8002b8a:	f103 4300 	addne.w	r3, r3, #2147483648	; 0x80000000
 8002b8e:	469b      	mov	fp, r3
			GNSS.GNGGA.lon = GNSS.GNGGA.East_West == 'E' ? GNSS.GNGGA.lon : -GNSS.GNGGA.lon;
 8002b90:	f894 34a0 	ldrb.w	r3, [r4, #1184]	; 0x4a0
 8002b94:	4602      	mov	r2, r0
 8002b96:	2b45      	cmp	r3, #69	; 0x45
 8002b98:	bf18      	it	ne
 8002b9a:	f101 4100 	addne.w	r1, r1, #2147483648	; 0x80000000
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4912      	ldr	r1, [pc, #72]	; (8002bec <GNSS_RX_Update+0x200>)
			GNSS.GNGGA.lat = GNSS.GNGGA.North_South == 'N' ? GNSS.GNGGA.lat : -GNSS.GNGGA.lat;
 8002ba2:	e9c7 ab00 	strd	sl, fp, [r7]
			GNSS.GNGGA.lon = GNSS.GNGGA.East_West == 'E' ? GNSS.GNGGA.lon : -GNSS.GNGGA.lon;
 8002ba6:	e9c1 2300 	strd	r2, r3, [r1]
 8002baa:	e731      	b.n	8002a10 <GNSS_RX_Update+0x24>
		for(end = GNSS.start; end != i; end = (end + 1) % DMA_BUFFER_SIZE){
 8002bac:	460b      	mov	r3, r1
 8002bae:	e769      	b.n	8002a84 <GNSS_RX_Update+0x98>
			GNSS.message_buffer[counter] = GNSS.dma_buffer[j];
 8002bb0:	f815 e001 	ldrb.w	lr, [r5, r1]
 8002bb4:	eb05 0c00 	add.w	ip, r5, r0
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 8002bb8:	3101      	adds	r1, #1
			GNSS.message_buffer[counter] = GNSS.dma_buffer[j];
 8002bba:	f88c e3ff 	strb.w	lr, [ip, #1023]	; 0x3ff
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 8002bbe:	f1d1 0c00 	rsbs	ip, r1, #0
 8002bc2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8002bc6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002bca:	bf58      	it	pl
 8002bcc:	f1cc 0100 	rsbpl	r1, ip, #0
 8002bd0:	4684      	mov	ip, r0
 8002bd2:	e75e      	b.n	8002a92 <GNSS_RX_Update+0xa6>
 8002bd4:	20001fbc 	.word	0x20001fbc
 8002bd8:	20001af8 	.word	0x20001af8
 8002bdc:	0800d262 	.word	0x0800d262
 8002be0:	20001f68 	.word	0x20001f68
 8002be4:	20001ef8 	.word	0x20001ef8
 8002be8:	0800d26a 	.word	0x0800d26a
 8002bec:	20001f90 	.word	0x20001f90
 8002bf0:	20001f6c 	.word	0x20001f6c

08002bf4 <I2C_read>:
 *      Author: yuche
 */

#include "i2c.h"

uint8_t I2C_read(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* output){
 8002bf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int state = HAL_I2C_Mem_Read(i2cx,target_address << 1,register_address,sizeof(register_address),output,length,20);//timeout is magic. Do not touch
 8002bf6:	2414      	movs	r4, #20
 8002bf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002bfc:	9b06      	ldr	r3, [sp, #24]
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	2301      	movs	r3, #1
 8002c02:	4099      	lsls	r1, r3
 8002c04:	f003 ff66 	bl	8006ad4 <HAL_I2C_Mem_Read>
	if (state != HAL_OK){
 8002c08:	b100      	cbz	r0, 8002c0c <I2C_read+0x18>
		__NOP();
 8002c0a:	bf00      	nop
	}
	return state;
}
 8002c0c:	b004      	add	sp, #16
 8002c0e:	bd10      	pop	{r4, pc}

08002c10 <I2C_write>:

uint8_t I2C_write(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* input){
 8002c10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int state =  HAL_I2C_Mem_Write(i2cx,target_address << 1,register_address,sizeof(register_address),input,length,20);//timeout is magic. Do not touch
 8002c12:	2414      	movs	r4, #20
 8002c14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002c18:	9b06      	ldr	r3, [sp, #24]
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	4099      	lsls	r1, r3
 8002c20:	f003 fec8 	bl	80069b4 <HAL_I2C_Mem_Write>
	if (state != HAL_OK){
 8002c24:	b100      	cbz	r0, 8002c28 <I2C_write+0x18>
			__NOP();
 8002c26:	bf00      	nop
		}
	return state;
}
 8002c28:	b004      	add	sp, #16
 8002c2a:	bd10      	pop	{r4, pc}

08002c2c <led_update>:
#include "stm32f1xx_hal.h"

uint8_t led_pattern = LED_DISCONNECTED;
uint8_t led_state = 0;

void led_update(){
 8002c2c:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,  1 - (led_pattern>>led_state) & 0x01);
 8002c2e:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <led_update+0x2c>)
 8002c30:	4c0a      	ldr	r4, [pc, #40]	; (8002c5c <led_update+0x30>)
 8002c32:	781a      	ldrb	r2, [r3, #0]
 8002c34:	7823      	ldrb	r3, [r4, #0]
 8002c36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c3a:	411a      	asrs	r2, r3
 8002c3c:	f1c2 0201 	rsb	r2, r2, #1
 8002c40:	f002 0201 	and.w	r2, r2, #1
 8002c44:	4806      	ldr	r0, [pc, #24]	; (8002c60 <led_update+0x34>)
 8002c46:	f003 fc49 	bl	80064dc <HAL_GPIO_WritePin>
	led_state++;
 8002c4a:	7823      	ldrb	r3, [r4, #0]
 8002c4c:	3301      	adds	r3, #1
	led_state = led_state % 8;
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	7023      	strb	r3, [r4, #0]
}
 8002c54:	bd10      	pop	{r4, pc}
 8002c56:	bf00      	nop
 8002c58:	20000470 	.word	0x20000470
 8002c5c:	20000471 	.word	0x20000471
 8002c60:	40011000 	.word	0x40011000

08002c64 <led_set>:

void led_set(uint8_t led_pattern_){
	led_pattern = led_pattern_;
 8002c64:	4b01      	ldr	r3, [pc, #4]	; (8002c6c <led_set+0x8>)
 8002c66:	7018      	strb	r0, [r3, #0]
}
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	20000470 	.word	0x20000470

08002c70 <mpu_set_i2c>:

enum MPU9250_GYRO_FSR gyro_fsr = MPU9250_NUM_GYRO_FSR;
enum MPU9250_ACCEL_FSR accel_fsr = MPU9250_NUM_ACCEL_FSR;

void mpu_set_i2c(I2C_HandleTypeDef* i2cx){
	mpu_i2cx = i2cx;
 8002c70:	4b01      	ldr	r3, [pc, #4]	; (8002c78 <mpu_set_i2c+0x8>)
 8002c72:	6018      	str	r0, [r3, #0]
}
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	200019d4 	.word	0x200019d4

08002c7c <i2c_write>:
}

// Functions implemented for this platform(STM32F103) for DMP

int i2c_write(unsigned char slave_addr, unsigned char reg_addr,
		unsigned char length, unsigned char const *data){
 8002c7c:	b507      	push	{r0, r1, r2, lr}
	return I2C_write(mpu_i2cx,slave_addr,reg_addr,length,data);
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	4613      	mov	r3, r2
 8002c82:	460a      	mov	r2, r1
 8002c84:	4601      	mov	r1, r0
 8002c86:	4803      	ldr	r0, [pc, #12]	; (8002c94 <i2c_write+0x18>)
 8002c88:	6800      	ldr	r0, [r0, #0]
 8002c8a:	f7ff ffc1 	bl	8002c10 <I2C_write>
}
 8002c8e:	b003      	add	sp, #12
 8002c90:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c94:	200019d4 	.word	0x200019d4

08002c98 <i2c_read>:

int i2c_read(unsigned char slave_addr, unsigned char reg_addr,
		unsigned char length, unsigned char *data){
 8002c98:	b507      	push	{r0, r1, r2, lr}
	return I2C_read(mpu_i2cx,slave_addr,reg_addr,length,data);
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	460a      	mov	r2, r1
 8002ca0:	4601      	mov	r1, r0
 8002ca2:	4803      	ldr	r0, [pc, #12]	; (8002cb0 <i2c_read+0x18>)
 8002ca4:	6800      	ldr	r0, [r0, #0]
 8002ca6:	f7ff ffa5 	bl	8002bf4 <I2C_read>
}
 8002caa:	b003      	add	sp, #12
 8002cac:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cb0:	200019d4 	.word	0x200019d4

08002cb4 <delay_ms>:

void delay_ms(unsigned long num_ms){
	HAL_Delay(num_ms);
 8002cb4:	f003 b9ca 	b.w	800604c <HAL_Delay>

08002cb8 <get_ms>:
}

unsigned long get_ms(unsigned long *count){
 8002cb8:	b510      	push	{r4, lr}
 8002cba:	4604      	mov	r4, r0
	*count = HAL_GetTick();
 8002cbc:	f003 f9c0 	bl	8006040 <HAL_GetTick>
 8002cc0:	6020      	str	r0, [r4, #0]
}
 8002cc2:	bd10      	pop	{r4, pc}

08002cc4 <ms5611_set_i2c>:
/**
 * select a hal I2C to talk to MS5611
 * @param i2cx The i2c port to talk to MS5611
 */
void ms5611_set_i2c(I2C_HandleTypeDef* i2cx){
	ms5611_i2cx = i2cx;
 8002cc4:	4b01      	ldr	r3, [pc, #4]	; (8002ccc <ms5611_set_i2c+0x8>)
 8002cc6:	6018      	str	r0, [r3, #0]
}
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20001fb8 	.word	0x20001fb8

08002cd0 <ms5611_read_i2c>:
 * @param register_address register/command to request data
 * @param length length of bytes to request from MS5611
 * @param output output data
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_read_i2c(uint8_t register_address,uint8_t length,uint8_t* output){
 8002cd0:	b507      	push	{r0, r1, r2, lr}
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8002cd2:	9200      	str	r2, [sp, #0]
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4804      	ldr	r0, [pc, #16]	; (8002ce8 <ms5611_read_i2c+0x18>)
 8002cd8:	460b      	mov	r3, r1
 8002cda:	6800      	ldr	r0, [r0, #0]
 8002cdc:	2177      	movs	r1, #119	; 0x77
 8002cde:	f7ff ff89 	bl	8002bf4 <I2C_read>
}
 8002ce2:	b003      	add	sp, #12
 8002ce4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ce8:	20001fb8 	.word	0x20001fb8

08002cec <ms5611_write_i2c>:
 * @param register_address register/command to send
 * @param length length of bytes to write to MS5611
 * @param output buffer to hold data to be sent
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_write_i2c(uint8_t register_address,uint8_t length,uint8_t* input){
 8002cec:	b507      	push	{r0, r1, r2, lr}
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8002cee:	9200      	str	r2, [sp, #0]
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4804      	ldr	r0, [pc, #16]	; (8002d04 <ms5611_write_i2c+0x18>)
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	6800      	ldr	r0, [r0, #0]
 8002cf8:	2177      	movs	r1, #119	; 0x77
 8002cfa:	f7ff ff89 	bl	8002c10 <I2C_write>
}
 8002cfe:	b003      	add	sp, #12
 8002d00:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d04:	20001fb8 	.word	0x20001fb8

08002d08 <ms5611_request_pressure>:

/**
 * Start ADC conversion of raw pressure in MS5611.
 * The ADC data can be read 9.02ms later
 */
void ms5611_request_pressure(){
 8002d08:	b507      	push	{r0, r1, r2, lr}
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002d0a:	2100      	movs	r1, #0
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8002d0c:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <ms5611_request_pressure+0x28>)
 8002d0e:	aa01      	add	r2, sp, #4
 8002d10:	7818      	ldrb	r0, [r3, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002d12:	f8ad 1004 	strh.w	r1, [sp, #4]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8002d16:	0040      	lsls	r0, r0, #1
 8002d18:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8002d1c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002d20:	f88d 1006 	strb.w	r1, [sp, #6]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8002d24:	f7ff ffe2 	bl	8002cec <ms5611_write_i2c>
}
 8002d28:	b003      	add	sp, #12
 8002d2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d2e:	bf00      	nop
 8002d30:	2000003c 	.word	0x2000003c

08002d34 <ms5611_retrieve_pressure>:

/**
 * Read result of ADC conversion of raw pressure.
 */
void ms5611_retrieve_pressure(){
 8002d34:	b507      	push	{r0, r1, r2, lr}
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002d36:	2000      	movs	r0, #0
	ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 8002d38:	aa01      	add	r2, sp, #4
 8002d3a:	2103      	movs	r1, #3
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002d3c:	f8ad 0004 	strh.w	r0, [sp, #4]
 8002d40:	f88d 0006 	strb.w	r0, [sp, #6]
	ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 8002d44:	f7ff ffc4 	bl	8002cd0 <ms5611_read_i2c>

	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8002d48:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002d4c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d56:	f89d 2006 	ldrb.w	r2, [sp, #6]

	if (temp != 0){
 8002d5a:	4313      	orrs	r3, r2
		raw_pressure = temp;
 8002d5c:	bf1c      	itt	ne
 8002d5e:	4a02      	ldrne	r2, [pc, #8]	; (8002d68 <ms5611_retrieve_pressure+0x34>)
 8002d60:	6013      	strne	r3, [r2, #0]
	}
}
 8002d62:	b003      	add	sp, #12
 8002d64:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d68:	20002040 	.word	0x20002040

08002d6c <ms5611_request_temperature>:

/**
 * Start ADC conversion of raw temperature in MS5611.
 * The ADC data can be read 9.02ms later
 */
void ms5611_request_temperature(){
 8002d6c:	b507      	push	{r0, r1, r2, lr}
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002d6e:	2100      	movs	r1, #0
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8002d70:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <ms5611_request_temperature+0x28>)
 8002d72:	aa01      	add	r2, sp, #4
 8002d74:	7818      	ldrb	r0, [r3, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002d76:	f8ad 1004 	strh.w	r1, [sp, #4]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8002d7a:	0040      	lsls	r0, r0, #1
 8002d7c:	f040 0050 	orr.w	r0, r0, #80	; 0x50
 8002d80:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002d84:	f88d 1006 	strb.w	r1, [sp, #6]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8002d88:	f7ff ffb0 	bl	8002cec <ms5611_write_i2c>
}
 8002d8c:	b003      	add	sp, #12
 8002d8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d92:	bf00      	nop
 8002d94:	2000003c 	.word	0x2000003c

08002d98 <ms5611_retrieve_temperature>:

/**
 * Read result of ADC conversion of raw temperature.
 */
void ms5611_retrieve_temperature(){
 8002d98:	b507      	push	{r0, r1, r2, lr}
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002d9a:	2000      	movs	r0, #0
	ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 8002d9c:	aa01      	add	r2, sp, #4
 8002d9e:	2103      	movs	r1, #3
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002da0:	f8ad 0004 	strh.w	r0, [sp, #4]
 8002da4:	f88d 0006 	strb.w	r0, [sp, #6]
	ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 8002da8:	f7ff ff92 	bl	8002cd0 <ms5611_read_i2c>

	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8002dac:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002db0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002db4:	021b      	lsls	r3, r3, #8
 8002db6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002dba:	f89d 2006 	ldrb.w	r2, [sp, #6]

	if (temp != 0){
 8002dbe:	4313      	orrs	r3, r2
		raw_temperature = temp;
 8002dc0:	bf1c      	itt	ne
 8002dc2:	4a02      	ldrne	r2, [pc, #8]	; (8002dcc <ms5611_retrieve_temperature+0x34>)
 8002dc4:	6013      	strne	r3, [r2, #0]
	}
}
 8002dc6:	b003      	add	sp, #12
 8002dc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dcc:	20002050 	.word	0x20002050

08002dd0 <ms5611_update_pressure>:

/**
 * Read raw pressure from MS5611.
 */
void ms5611_update_pressure(){
 8002dd0:	b508      	push	{r3, lr}

	ms5611_request_pressure();
 8002dd2:	f7ff ff99 	bl	8002d08 <ms5611_request_pressure>
	HAL_Delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8002dd6:	200c      	movs	r0, #12
 8002dd8:	f003 f938 	bl	800604c <HAL_Delay>
	ms5611_retrieve_pressure();

}
 8002ddc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ms5611_retrieve_pressure();
 8002de0:	f7ff bfa8 	b.w	8002d34 <ms5611_retrieve_pressure>

08002de4 <ms5611_update_temperature>:

/**
 * Read raw temperature from MS5611.
 */
void ms5611_update_temperature(){
 8002de4:	b508      	push	{r3, lr}

	ms5611_request_temperature();
 8002de6:	f7ff ffc1 	bl	8002d6c <ms5611_request_temperature>
	HAL_Delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8002dea:	200c      	movs	r0, #12
 8002dec:	f003 f92e 	bl	800604c <HAL_Delay>
	ms5611_retrieve_temperature();

}
 8002df0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ms5611_retrieve_temperature();
 8002df4:	f7ff bfd0 	b.w	8002d98 <ms5611_retrieve_temperature>

08002df8 <ms5611_update>:

/**
 *	Read raw temperature and pressure from MS5611
 */
void ms5611_update(){
 8002df8:	b508      	push	{r3, lr}
	ms5611_update_temperature();
 8002dfa:	f7ff fff3 	bl	8002de4 <ms5611_update_temperature>
	ms5611_update_pressure();
}
 8002dfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ms5611_update_pressure();
 8002e02:	f7ff bfe5 	b.w	8002dd0 <ms5611_update_pressure>
	...

08002e08 <ms5611_init>:
void ms5611_init(){
 8002e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e0a:	24a2      	movs	r4, #162	; 0xa2
 8002e0c:	4d0a      	ldr	r5, [pc, #40]	; (8002e38 <ms5611_init+0x30>)
		ms5611_read_i2c(reg_addr,2,buffer);
 8002e0e:	aa01      	add	r2, sp, #4
 8002e10:	4620      	mov	r0, r4
 8002e12:	2102      	movs	r1, #2
 8002e14:	f7ff ff5c 	bl	8002cd0 <ms5611_read_i2c>
 8002e18:	3402      	adds	r4, #2
		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 8002e1a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002e1e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002e22:	b2e4      	uxtb	r4, r4
 8002e24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 8002e28:	2cae      	cmp	r4, #174	; 0xae
		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 8002e2a:	f825 3f02 	strh.w	r3, [r5, #2]!
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 8002e2e:	d1ee      	bne.n	8002e0e <ms5611_init+0x6>
	ms5611_update();
 8002e30:	f7ff ffe2 	bl	8002df8 <ms5611_update>
}
 8002e34:	b003      	add	sp, #12
 8002e36:	bd30      	pop	{r4, r5, pc}
 8002e38:	20002042 	.word	0x20002042

08002e3c <ms5611_get_temperature>:

/**
 * Get calibrated temperature, unit: Celsius degrees
 * @return calibrated temperature
 */
double ms5611_get_temperature(){
 8002e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 8002e3e:	4a1c      	ldr	r2, [pc, #112]	; (8002eb0 <ms5611_get_temperature+0x74>)
 8002e40:	4e1c      	ldr	r6, [pc, #112]	; (8002eb4 <ms5611_get_temperature+0x78>)
 8002e42:	6810      	ldr	r0, [r2, #0]
 8002e44:	8933      	ldrh	r3, [r6, #8]
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8002e46:	eba0 2003 	sub.w	r0, r0, r3, lsl #8
 8002e4a:	f7fd facb 	bl	80003e4 <__aeabi_ui2d>
 8002e4e:	4604      	mov	r4, r0
 8002e50:	460d      	mov	r5, r1
 8002e52:	8970      	ldrh	r0, [r6, #10]
 8002e54:	f7fd fad6 	bl	8000404 <__aeabi_i2d>
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8002e5e:	f7fd fb3b 	bl	80004d8 <__aeabi_dmul>
 8002e62:	4622      	mov	r2, r4
 8002e64:	462b      	mov	r3, r5
 8002e66:	f7fd fb37 	bl	80004d8 <__aeabi_dmul>
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <ms5611_get_temperature+0x7c>)
 8002e6e:	f7fd f97d 	bl	800016c <__adddf3>

	double T2=0;
	if (TEMP < 2000.0){
 8002e72:	2200      	movs	r2, #0
 8002e74:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <ms5611_get_temperature+0x7c>)
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8002e76:	4606      	mov	r6, r0
 8002e78:	460f      	mov	r7, r1
	if (TEMP < 2000.0){
 8002e7a:	f7fd fd9f 	bl	80009bc <__aeabi_dcmplt>
		//temperature < 20 Celsius
		T2 = dT * (dT / (2147483648.0));
 8002e7e:	2200      	movs	r2, #0
	if (TEMP < 2000.0){
 8002e80:	b1a0      	cbz	r0, 8002eac <ms5611_get_temperature+0x70>
		T2 = dT * (dT / (2147483648.0));
 8002e82:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8002e86:	4620      	mov	r0, r4
 8002e88:	4629      	mov	r1, r5
 8002e8a:	f7fd fb25 	bl	80004d8 <__aeabi_dmul>
 8002e8e:	4622      	mov	r2, r4
 8002e90:	462b      	mov	r3, r5
 8002e92:	f7fd fb21 	bl	80004d8 <__aeabi_dmul>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
	}

	TEMP = TEMP - T2;
 8002e9a:	4630      	mov	r0, r6
 8002e9c:	4639      	mov	r1, r7
 8002e9e:	f7fd f963 	bl	8000168 <__aeabi_dsub>
	return TEMP / 100.0;
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <ms5611_get_temperature+0x80>)
 8002ea6:	f7fd fc41 	bl	800072c <__aeabi_ddiv>
}
 8002eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	double T2=0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	e7f4      	b.n	8002e9a <ms5611_get_temperature+0x5e>
 8002eb0:	20002050 	.word	0x20002050
 8002eb4:	20002044 	.word	0x20002044
 8002eb8:	409f4000 	.word	0x409f4000
 8002ebc:	40590000 	.word	0x40590000

08002ec0 <ms5611_get_pressure>:

/**
 * Get calibrated pressure, unit: mBar
 * @return calibrated pressure
 */
double ms5611_get_pressure(){
 8002ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 8002ec4:	4b70      	ldr	r3, [pc, #448]	; (8003088 <ms5611_get_pressure+0x1c8>)
 8002ec6:	4e71      	ldr	r6, [pc, #452]	; (800308c <ms5611_get_pressure+0x1cc>)
 8002ec8:	681f      	ldr	r7, [r3, #0]
 8002eca:	8930      	ldrh	r0, [r6, #8]
double ms5611_get_pressure(){
 8002ecc:	b085      	sub	sp, #20
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 8002ece:	eba7 2700 	sub.w	r7, r7, r0, lsl #8
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8002ed2:	8970      	ldrh	r0, [r6, #10]
 8002ed4:	f7fd fa96 	bl	8000404 <__aeabi_i2d>
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8002ede:	f7fd fafb 	bl	80004d8 <__aeabi_dmul>
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	4638      	mov	r0, r7
 8002ee6:	460d      	mov	r5, r1
 8002ee8:	f7fd fa7c 	bl	80003e4 <__aeabi_ui2d>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	f7fd faf0 	bl	80004d8 <__aeabi_dmul>
 8002ef8:	2200      	movs	r2, #0
 8002efa:	4b65      	ldr	r3, [pc, #404]	; (8003090 <ms5611_get_pressure+0x1d0>)
 8002efc:	f7fd f936 	bl	800016c <__adddf3>
 8002f00:	4680      	mov	r8, r0

	double OFF = fc[1] * (65536.0) + fc[3] * dT / (128);
 8002f02:	88f0      	ldrh	r0, [r6, #6]
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8002f04:	4689      	mov	r9, r1
	double OFF = fc[1] * (65536.0) + fc[3] * dT / (128);
 8002f06:	4378      	muls	r0, r7
 8002f08:	09c0      	lsrs	r0, r0, #7
 8002f0a:	f7fd fa6b 	bl	80003e4 <__aeabi_ui2d>
 8002f0e:	4604      	mov	r4, r0
 8002f10:	8870      	ldrh	r0, [r6, #2]
 8002f12:	460d      	mov	r5, r1
 8002f14:	f7fd fa76 	bl	8000404 <__aeabi_i2d>
 8002f18:	2200      	movs	r2, #0
 8002f1a:	4b5e      	ldr	r3, [pc, #376]	; (8003094 <ms5611_get_pressure+0x1d4>)
 8002f1c:	f7fd fadc 	bl	80004d8 <__aeabi_dmul>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4620      	mov	r0, r4
 8002f26:	4629      	mov	r1, r5
 8002f28:	f7fd f920 	bl	800016c <__adddf3>
 8002f2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
	double SENS = fc[0] * (32768.0) + fc[2] * dT / (256);
 8002f30:	88b0      	ldrh	r0, [r6, #4]
 8002f32:	4378      	muls	r0, r7
 8002f34:	0a00      	lsrs	r0, r0, #8
 8002f36:	f7fd fa55 	bl	80003e4 <__aeabi_ui2d>
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	8830      	ldrh	r0, [r6, #0]
 8002f3e:	460d      	mov	r5, r1
 8002f40:	f7fd fa60 	bl	8000404 <__aeabi_i2d>
 8002f44:	2200      	movs	r2, #0
 8002f46:	4b54      	ldr	r3, [pc, #336]	; (8003098 <ms5611_get_pressure+0x1d8>)
 8002f48:	f7fd fac6 	bl	80004d8 <__aeabi_dmul>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4620      	mov	r0, r4
 8002f52:	4629      	mov	r1, r5
 8002f54:	f7fd f90a 	bl	800016c <__adddf3>

	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 8002f58:	4b50      	ldr	r3, [pc, #320]	; (800309c <ms5611_get_pressure+0x1dc>)
	double SENS = fc[0] * (32768.0) + fc[2] * dT / (256);
 8002f5a:	4682      	mov	sl, r0
	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 8002f5c:	6818      	ldr	r0, [r3, #0]
	double SENS = fc[0] * (32768.0) + fc[2] * dT / (256);
 8002f5e:	468b      	mov	fp, r1
	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 8002f60:	f7fd fa40 	bl	80003e4 <__aeabi_ui2d>

	double T2=0, OFF2=0, SENS2=0;
	if (TEMP < 2000){
 8002f64:	2200      	movs	r2, #0
	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 8002f66:	e9cd 0100 	strd	r0, r1, [sp]
	if (TEMP < 2000){
 8002f6a:	4b49      	ldr	r3, [pc, #292]	; (8003090 <ms5611_get_pressure+0x1d0>)
 8002f6c:	4640      	mov	r0, r8
 8002f6e:	4649      	mov	r1, r9
 8002f70:	f7fd fd24 	bl	80009bc <__aeabi_dcmplt>
 8002f74:	2800      	cmp	r0, #0
 8002f76:	d07a      	beq.n	800306e <ms5611_get_pressure+0x1ae>
		//temperature < 20 Celsius
		T2 = dT * dT / (2147483648.0);
		OFF2 = 5 * (TEMP-2000) * (TEMP-2000) / 2;
 8002f78:	2200      	movs	r2, #0
 8002f7a:	4b45      	ldr	r3, [pc, #276]	; (8003090 <ms5611_get_pressure+0x1d0>)
 8002f7c:	4640      	mov	r0, r8
 8002f7e:	4649      	mov	r1, r9
 8002f80:	f7fd f8f2 	bl	8000168 <__aeabi_dsub>
 8002f84:	4604      	mov	r4, r0
 8002f86:	460d      	mov	r5, r1
 8002f88:	2200      	movs	r2, #0
 8002f8a:	4b45      	ldr	r3, [pc, #276]	; (80030a0 <ms5611_get_pressure+0x1e0>)
 8002f8c:	f7fd faa4 	bl	80004d8 <__aeabi_dmul>
 8002f90:	4622      	mov	r2, r4
 8002f92:	462b      	mov	r3, r5
 8002f94:	f7fd faa0 	bl	80004d8 <__aeabi_dmul>
 8002f98:	2200      	movs	r2, #0
 8002f9a:	4b42      	ldr	r3, [pc, #264]	; (80030a4 <ms5611_get_pressure+0x1e4>)
 8002f9c:	4604      	mov	r4, r0
 8002f9e:	460d      	mov	r5, r1
 8002fa0:	f7fd fa9a 	bl	80004d8 <__aeabi_dmul>
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	4b40      	ldr	r3, [pc, #256]	; (80030a8 <ms5611_get_pressure+0x1e8>)
		OFF2 = 5 * (TEMP-2000) * (TEMP-2000) / 2;
 8002fa8:	4606      	mov	r6, r0
 8002faa:	460f      	mov	r7, r1
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 8002fac:	4620      	mov	r0, r4
 8002fae:	4629      	mov	r1, r5
 8002fb0:	f7fd fa92 	bl	80004d8 <__aeabi_dmul>

		if (TEMP < -1500){
 8002fb4:	a330      	add	r3, pc, #192	; (adr r3, 8003078 <ms5611_get_pressure+0x1b8>)
 8002fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 8002fba:	4604      	mov	r4, r0
 8002fbc:	460d      	mov	r5, r1
		if (TEMP < -1500){
 8002fbe:	4640      	mov	r0, r8
 8002fc0:	4649      	mov	r1, r9
 8002fc2:	f7fd fcfb 	bl	80009bc <__aeabi_dcmplt>
 8002fc6:	b350      	cbz	r0, 800301e <ms5611_get_pressure+0x15e>
			//temperature < -15 Celsius
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 8002fc8:	a32d      	add	r3, pc, #180	; (adr r3, 8003080 <ms5611_get_pressure+0x1c0>)
 8002fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fce:	4640      	mov	r0, r8
 8002fd0:	4649      	mov	r1, r9
 8002fd2:	f7fd f8cb 	bl	800016c <__adddf3>
 8002fd6:	4680      	mov	r8, r0
 8002fd8:	4689      	mov	r9, r1
 8002fda:	2200      	movs	r2, #0
 8002fdc:	4b33      	ldr	r3, [pc, #204]	; (80030ac <ms5611_get_pressure+0x1ec>)
 8002fde:	f7fd fa7b 	bl	80004d8 <__aeabi_dmul>
 8002fe2:	4642      	mov	r2, r8
 8002fe4:	464b      	mov	r3, r9
 8002fe6:	f7fd fa77 	bl	80004d8 <__aeabi_dmul>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4630      	mov	r0, r6
 8002ff0:	4639      	mov	r1, r7
 8002ff2:	f7fd f8bb 	bl	800016c <__adddf3>
			SENS2 = SENS2 + 11/2 * (TEMP + 1500) * (TEMP + 1500);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	4b29      	ldr	r3, [pc, #164]	; (80030a0 <ms5611_get_pressure+0x1e0>)
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 8002ffa:	4606      	mov	r6, r0
 8002ffc:	460f      	mov	r7, r1
			SENS2 = SENS2 + 11/2 * (TEMP + 1500) * (TEMP + 1500);
 8002ffe:	4640      	mov	r0, r8
 8003000:	4649      	mov	r1, r9
 8003002:	f7fd fa69 	bl	80004d8 <__aeabi_dmul>
 8003006:	4642      	mov	r2, r8
 8003008:	464b      	mov	r3, r9
 800300a:	f7fd fa65 	bl	80004d8 <__aeabi_dmul>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	4620      	mov	r0, r4
 8003014:	4629      	mov	r1, r5
 8003016:	f7fd f8a9 	bl	800016c <__adddf3>
 800301a:	4604      	mov	r4, r0
 800301c:	460d      	mov	r5, r1
		}
	}

	TEMP = TEMP - T2;
	OFF = OFF - OFF2;
	SENS = SENS - SENS2;
 800301e:	4622      	mov	r2, r4
 8003020:	462b      	mov	r3, r5
 8003022:	4650      	mov	r0, sl
 8003024:	4659      	mov	r1, fp
 8003026:	f7fd f89f 	bl	8000168 <__aeabi_dsub>

	P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit mbar
 800302a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800302e:	f7fd fa53 	bl	80004d8 <__aeabi_dmul>
 8003032:	2200      	movs	r2, #0
 8003034:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <ms5611_get_pressure+0x1f0>)
 8003036:	f7fd fa4f 	bl	80004d8 <__aeabi_dmul>
	OFF = OFF - OFF2;
 800303a:	4632      	mov	r2, r6
	P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit mbar
 800303c:	4604      	mov	r4, r0
 800303e:	460d      	mov	r5, r1
	OFF = OFF - OFF2;
 8003040:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003044:	463b      	mov	r3, r7
 8003046:	f7fd f88f 	bl	8000168 <__aeabi_dsub>
	P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit mbar
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4620      	mov	r0, r4
 8003050:	4629      	mov	r1, r5
 8003052:	f7fd f889 	bl	8000168 <__aeabi_dsub>
 8003056:	2200      	movs	r2, #0
 8003058:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800305c:	f7fd fa3c 	bl	80004d8 <__aeabi_dmul>
	return P / 100;//unit mbar
 8003060:	2200      	movs	r2, #0
 8003062:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <ms5611_get_pressure+0x1f4>)
 8003064:	f7fd fb62 	bl	800072c <__aeabi_ddiv>
}
 8003068:	b005      	add	sp, #20
 800306a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	double T2=0, OFF2=0, SENS2=0;
 800306e:	2400      	movs	r4, #0
 8003070:	2500      	movs	r5, #0
 8003072:	4626      	mov	r6, r4
 8003074:	462f      	mov	r7, r5
 8003076:	e7d2      	b.n	800301e <ms5611_get_pressure+0x15e>
 8003078:	00000000 	.word	0x00000000
 800307c:	c0977000 	.word	0xc0977000
 8003080:	00000000 	.word	0x00000000
 8003084:	40977000 	.word	0x40977000
 8003088:	20002050 	.word	0x20002050
 800308c:	20002044 	.word	0x20002044
 8003090:	409f4000 	.word	0x409f4000
 8003094:	40f00000 	.word	0x40f00000
 8003098:	40e00000 	.word	0x40e00000
 800309c:	20002040 	.word	0x20002040
 80030a0:	40140000 	.word	0x40140000
 80030a4:	3fe00000 	.word	0x3fe00000
 80030a8:	3fd00000 	.word	0x3fd00000
 80030ac:	401c0000 	.word	0x401c0000
 80030b0:	3ea00000 	.word	0x3ea00000
 80030b4:	40590000 	.word	0x40590000

080030b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  {
    const int32_t* val = (int32_t*) &f;
 80030c2:	463b      	mov	r3, r7
 80030c4:	613b      	str	r3, [r7, #16]
    int32_t exp = ((*val >> 23) & 255);
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	15db      	asrs	r3, r3, #23
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	617b      	str	r3, [r7, #20]
    if (exp != 0)
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x26>
    {
      exp += 1023 - 127;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80030dc:	617b      	str	r3, [r7, #20]
    }

    int32_t sig = *val;
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60fb      	str	r3, [r7, #12]
    *(outbuffer++) = 0;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	607a      	str	r2, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig << 5) & 0xff;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	0159      	lsls	r1, r3, #5
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	b2ca      	uxtb	r2, r1
 800310e:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 3) & 0xff;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	10d9      	asrs	r1, r3, #3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	607a      	str	r2, [r7, #4]
 800311a:	b2ca      	uxtb	r2, r1
 800311c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 11) & 0xff;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	12d9      	asrs	r1, r3, #11
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	b2ca      	uxtb	r2, r1
 800312a:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	b25a      	sxtb	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	14db      	asrs	r3, r3, #19
 8003136:	b25b      	sxtb	r3, r3
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	b25b      	sxtb	r3, r3
 800313e:	4313      	orrs	r3, r2
 8003140:	b259      	sxtb	r1, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	b2ca      	uxtb	r2, r1
 800314a:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	111b      	asrs	r3, r3, #4
 8003150:	b2da      	uxtb	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	1c59      	adds	r1, r3, #1
 8003156:	6079      	str	r1, [r7, #4]
 8003158:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	f04f 0100 	mov.w	r1, #0
 8003166:	4618      	mov	r0, r3
 8003168:	f7fd fd4c 	bl	8000c04 <__aeabi_fcmplt>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d008      	beq.n	8003184 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0xcc>
    {
      *(outbuffer - 1) |= 0x80;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3b01      	subs	r3, #1
 8003176:	781a      	ldrb	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3b01      	subs	r3, #1
 800317c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 8003184:	2308      	movs	r3, #8
  }
 8003186:	4618      	mov	r0, r3
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 800318e:	b480      	push	{r7}
 8003190:	b085      	sub	sp, #20
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	6039      	str	r1, [r7, #0]
  {
    uint32_t* val = (uint32_t*)f;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	60fb      	str	r3, [r7, #12]
    inbuffer += 3;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3303      	adds	r3, #3
 80031a0:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	f003 0207 	and.w	r2, r3, #7
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	607a      	str	r2, [r7, #4]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	00da      	lsls	r2, r3, #3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	431a      	orrs	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	607a      	str	r2, [r7, #4]
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	02da      	lsls	r2, r3, #11
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	04db      	lsls	r3, r3, #19
 80031e6:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 80031ea:	431a      	orrs	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	601a      	str	r2, [r3, #0]

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	607a      	str	r2, [r7, #4]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	60bb      	str	r3, [r7, #8]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	f403 62fe 	and.w	r2, r3, #2032	; 0x7f0
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	4313      	orrs	r3, r2
 800320e:	60bb      	str	r3, [r7, #8]
    if (exp != 0)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d008      	beq.n	8003228 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x9a>
    {
      *val |= ((exp) - 1023 + 127) << 23;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8003220:	05db      	lsls	r3, r3, #23
 8003222:	431a      	orrs	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	601a      	str	r2, [r3, #0]
    }

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	607a      	str	r2, [r7, #4]
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	061b      	lsls	r3, r3, #24
 8003232:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	431a      	orrs	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	601a      	str	r2, [r3, #0]

    return 8;
 8003240:	2308      	movs	r3, #8
  }
 8003242:	4618      	mov	r0, r3
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr

0800324c <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4618      	mov	r0, r3
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <_ZN3ros3MsgC1Ev>:
class Msg
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	4a04      	ldr	r2, [pc, #16]	; (8003288 <_ZN3ros3MsgC1Ev+0x1c>)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	0800d3fc 	.word	0x0800d3fc

0800328c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
      data()
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff ffe8 	bl	800326c <_ZN3ros3MsgC1Ev>
 800329c:	4a06      	ldr	r2, [pc, #24]	; (80032b8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3304      	adds	r3, #4
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff ffd0 	bl	800324c <_ZN3ros4TimeC1Ev>
    {
    }
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	0800d3e4 	.word	0x0800d3e4

080032bc <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6859      	ldr	r1, [r3, #4]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	4413      	add	r3, r2
 80032d4:	b2ca      	uxtb	r2, r1
 80032d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	0a19      	lsrs	r1, r3, #8
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	3301      	adds	r3, #1
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	4413      	add	r3, r2
 80032e6:	b2ca      	uxtb	r2, r1
 80032e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	0c19      	lsrs	r1, r3, #16
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	3302      	adds	r3, #2
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	4413      	add	r3, r2
 80032f8:	b2ca      	uxtb	r2, r1
 80032fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	0e19      	lsrs	r1, r3, #24
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	3303      	adds	r3, #3
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	4413      	add	r3, r2
 800330a:	b2ca      	uxtb	r2, r1
 800330c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	3304      	adds	r3, #4
 8003312:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6899      	ldr	r1, [r3, #8]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	4413      	add	r3, r2
 800331e:	b2ca      	uxtb	r2, r1
 8003320:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	0a19      	lsrs	r1, r3, #8
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	3301      	adds	r3, #1
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	4413      	add	r3, r2
 8003330:	b2ca      	uxtb	r2, r1
 8003332:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	0c19      	lsrs	r1, r3, #16
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3302      	adds	r3, #2
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	4413      	add	r3, r2
 8003342:	b2ca      	uxtb	r2, r1
 8003344:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	0e19      	lsrs	r1, r3, #24
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	3303      	adds	r3, #3
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	4413      	add	r3, r2
 8003354:	b2ca      	uxtb	r2, r1
 8003356:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	3304      	adds	r3, #4
 800335c:	60fb      	str	r3, [r7, #12]
      return offset;
 800335e:	68fb      	ldr	r3, [r7, #12]
    }
 8003360:	4618      	mov	r0, r3
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr

0800336a <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800336a:	b480      	push	{r7}
 800336c:	b085      	sub	sp, #20
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
 8003372:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	4413      	add	r3, r2
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3301      	adds	r3, #1
 800338e:	6839      	ldr	r1, [r7, #0]
 8003390:	440b      	add	r3, r1
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	021b      	lsls	r3, r3, #8
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3302      	adds	r3, #2
 80033a4:	6839      	ldr	r1, [r7, #0]
 80033a6:	440b      	add	r3, r1
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	041b      	lsls	r3, r3, #16
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	3303      	adds	r3, #3
 80033ba:	6839      	ldr	r1, [r7, #0]
 80033bc:	440b      	add	r3, r1
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	061b      	lsls	r3, r3, #24
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	3304      	adds	r3, #4
 80033cc:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	4413      	add	r3, r2
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3301      	adds	r3, #1
 80033e4:	6839      	ldr	r1, [r7, #0]
 80033e6:	440b      	add	r3, r1
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	021b      	lsls	r3, r3, #8
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	3302      	adds	r3, #2
 80033fa:	6839      	ldr	r1, [r7, #0]
 80033fc:	440b      	add	r3, r1
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	041b      	lsls	r3, r3, #16
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	3303      	adds	r3, #3
 8003410:	6839      	ldr	r1, [r7, #0]
 8003412:	440b      	add	r3, r1
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	061b      	lsls	r3, r3, #24
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	3304      	adds	r3, #4
 8003422:	60fb      	str	r3, [r7, #12]
     return offset;
 8003424:	68fb      	ldr	r3, [r7, #12]
    }
 8003426:	4618      	mov	r0, r3
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr

08003430 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	4b02      	ldr	r3, [pc, #8]	; (8003444 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr
 8003444:	0800c264 	.word	0x0800c264

08003448 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	4b02      	ldr	r3, [pc, #8]	; (800345c <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 8003452:	4618      	mov	r0, r3
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr
 800345c:	0800c274 	.word	0x0800c274

08003460 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff fefe 	bl	800326c <_ZN3ros3MsgC1Ev>
 8003470:	4a0b      	ldr	r2, [pc, #44]	; (80034a0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	809a      	strh	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a09      	ldr	r2, [pc, #36]	; (80034a4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003480:	609a      	str	r2, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a07      	ldr	r2, [pc, #28]	; (80034a4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003486:	60da      	str	r2, [r3, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a06      	ldr	r2, [pc, #24]	; (80034a4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800348c:	611a      	str	r2, [r3, #16]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	615a      	str	r2, [r3, #20]
    {
    }
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	0800d3cc 	.word	0x0800d3cc
 80034a4:	0800c298 	.word	0x0800c298

080034a8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	8899      	ldrh	r1, [r3, #4]
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	4413      	add	r3, r2
 80034c0:	b2ca      	uxtb	r2, r1
 80034c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	889b      	ldrh	r3, [r3, #4]
 80034c8:	0a1b      	lsrs	r3, r3, #8
 80034ca:	b299      	uxth	r1, r3
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	3301      	adds	r3, #1
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	4413      	add	r3, r2
 80034d4:	b2ca      	uxtb	r2, r1
 80034d6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	3302      	adds	r3, #2
 80034dc:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fc fe34 	bl	8000150 <strlen>
 80034e8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	4413      	add	r3, r2
 80034f0:	69b9      	ldr	r1, [r7, #24]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f001 feea 	bl	80052cc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	3304      	adds	r3, #4
 80034fc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	18d0      	adds	r0, r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4619      	mov	r1, r3
 800350c:	f006 fa9d 	bl	8009a4a <memcpy>
      offset += length_topic_name;
 8003510:	69fa      	ldr	r2, [r7, #28]
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	4413      	add	r3, r2
 8003516:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4618      	mov	r0, r3
 800351e:	f7fc fe17 	bl	8000150 <strlen>
 8003522:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	4413      	add	r3, r2
 800352a:	6979      	ldr	r1, [r7, #20]
 800352c:	4618      	mov	r0, r3
 800352e:	f001 fecd 	bl	80052cc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	3304      	adds	r3, #4
 8003536:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	18d0      	adds	r0, r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4619      	mov	r1, r3
 8003546:	f006 fa80 	bl	8009a4a <memcpy>
      offset += length_message_type;
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	4413      	add	r3, r2
 8003550:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	4618      	mov	r0, r3
 8003558:	f7fc fdfa 	bl	8000150 <strlen>
 800355c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	4413      	add	r3, r2
 8003564:	6939      	ldr	r1, [r7, #16]
 8003566:	4618      	mov	r0, r3
 8003568:	f001 feb0 	bl	80052cc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	3304      	adds	r3, #4
 8003570:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	18d0      	adds	r0, r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4619      	mov	r1, r3
 8003580:	f006 fa63 	bl	8009a4a <memcpy>
      offset += length_md5sum;
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4413      	add	r3, r2
 800358a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8003592:	68f9      	ldr	r1, [r7, #12]
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	4413      	add	r3, r2
 800359a:	b2ca      	uxtb	r2, r1
 800359c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	0a19      	lsrs	r1, r3, #8
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3301      	adds	r3, #1
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	4413      	add	r3, r2
 80035aa:	b2ca      	uxtb	r2, r1
 80035ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	0c19      	lsrs	r1, r3, #16
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3302      	adds	r3, #2
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	4413      	add	r3, r2
 80035ba:	b2ca      	uxtb	r2, r1
 80035bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	0e19      	lsrs	r1, r3, #24
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	3303      	adds	r3, #3
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	4413      	add	r3, r2
 80035ca:	b2ca      	uxtb	r2, r1
 80035cc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3304      	adds	r3, #4
 80035d2:	61fb      	str	r3, [r7, #28]
      return offset;
 80035d4:	69fb      	ldr	r3, [r7, #28]
    }
 80035d6:	4618      	mov	r0, r3
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80035de:	b580      	push	{r7, lr}
 80035e0:	b08a      	sub	sp, #40	; 0x28
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
 80035e6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	4413      	add	r3, r2
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	889b      	ldrh	r3, [r3, #4]
 80035fe:	b21a      	sxth	r2, r3
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	3301      	adds	r3, #1
 8003604:	6839      	ldr	r1, [r7, #0]
 8003606:	440b      	add	r3, r1
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	021b      	lsls	r3, r3, #8
 800360c:	b21b      	sxth	r3, r3
 800360e:	4313      	orrs	r3, r2
 8003610:	b21b      	sxth	r3, r3
 8003612:	b29a      	uxth	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	3302      	adds	r3, #2
 800361c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	441a      	add	r2, r3
 8003624:	f107 0314 	add.w	r3, r7, #20
 8003628:	4611      	mov	r1, r2
 800362a:	4618      	mov	r0, r3
 800362c:	f001 fe6b 	bl	8005306 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	3304      	adds	r3, #4
 8003634:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	4413      	add	r3, r2
 8003640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003642:	429a      	cmp	r2, r3
 8003644:	d20c      	bcs.n	8003660 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	441a      	add	r2, r3
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	3b01      	subs	r3, #1
 8003650:	6839      	ldr	r1, [r7, #0]
 8003652:	440b      	add	r3, r1
 8003654:	7812      	ldrb	r2, [r2, #0]
 8003656:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	3301      	adds	r3, #1
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
 800365e:	e7ec      	b.n	800363a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	4413      	add	r3, r2
 8003666:	3b01      	subs	r3, #1
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	4413      	add	r3, r2
 800366c:	2200      	movs	r2, #0
 800366e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	3b01      	subs	r3, #1
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	441a      	add	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	4413      	add	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	441a      	add	r2, r3
 800368a:	f107 0310 	add.w	r3, r7, #16
 800368e:	4611      	mov	r1, r2
 8003690:	4618      	mov	r0, r3
 8003692:	f001 fe38 	bl	8005306 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	3304      	adds	r3, #4
 800369a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	623b      	str	r3, [r7, #32]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4413      	add	r3, r2
 80036a6:	6a3a      	ldr	r2, [r7, #32]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d20c      	bcs.n	80036c6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	441a      	add	r2, r3
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	3b01      	subs	r3, #1
 80036b6:	6839      	ldr	r1, [r7, #0]
 80036b8:	440b      	add	r3, r1
 80036ba:	7812      	ldrb	r2, [r2, #0]
 80036bc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	3301      	adds	r3, #1
 80036c2:	623b      	str	r3, [r7, #32]
 80036c4:	e7ec      	b.n	80036a0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	4413      	add	r3, r2
 80036cc:	3b01      	subs	r3, #1
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	4413      	add	r3, r2
 80036d2:	2200      	movs	r2, #0
 80036d4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	3b01      	subs	r3, #1
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	441a      	add	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4413      	add	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	441a      	add	r2, r3
 80036f0:	f107 030c 	add.w	r3, r7, #12
 80036f4:	4611      	mov	r1, r2
 80036f6:	4618      	mov	r0, r3
 80036f8:	f001 fe05 	bl	8005306 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	3304      	adds	r3, #4
 8003700:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	61fb      	str	r3, [r7, #28]
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4413      	add	r3, r2
 800370c:	69fa      	ldr	r2, [r7, #28]
 800370e:	429a      	cmp	r2, r3
 8003710:	d20c      	bcs.n	800372c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	441a      	add	r2, r3
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	3b01      	subs	r3, #1
 800371c:	6839      	ldr	r1, [r7, #0]
 800371e:	440b      	add	r3, r1
 8003720:	7812      	ldrb	r2, [r2, #0]
 8003722:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	3301      	adds	r3, #1
 8003728:	61fb      	str	r3, [r7, #28]
 800372a:	e7ec      	b.n	8003706 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4413      	add	r3, r2
 8003732:	3b01      	subs	r3, #1
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	4413      	add	r3, r2
 8003738:	2200      	movs	r2, #0
 800373a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	3b01      	subs	r3, #1
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	441a      	add	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4413      	add	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	6839      	ldr	r1, [r7, #0]
 800375a:	440a      	add	r2, r1
 800375c:	7812      	ldrb	r2, [r2, #0]
 800375e:	4313      	orrs	r3, r2
 8003760:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	3301      	adds	r3, #1
 8003768:	6839      	ldr	r1, [r7, #0]
 800376a:	440b      	add	r3, r1
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	021b      	lsls	r3, r3, #8
 8003770:	4313      	orrs	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	3302      	adds	r3, #2
 800377a:	6839      	ldr	r1, [r7, #0]
 800377c:	440b      	add	r3, r1
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	041b      	lsls	r3, r3, #16
 8003782:	4313      	orrs	r3, r2
 8003784:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	3303      	adds	r3, #3
 800378c:	6839      	ldr	r1, [r7, #0]
 800378e:	440b      	add	r3, r1
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	061b      	lsls	r3, r3, #24
 8003794:	4313      	orrs	r3, r2
 8003796:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	3304      	adds	r3, #4
 80037a2:	61bb      	str	r3, [r7, #24]
     return offset;
 80037a4:	69bb      	ldr	r3, [r7, #24]
    }
 80037a6:	4618      	mov	r0, r3
 80037a8:	3728      	adds	r7, #40	; 0x28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	4b02      	ldr	r3, [pc, #8]	; (80037c4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 80037ba:	4618      	mov	r0, r3
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr
 80037c4:	0800c29c 	.word	0x0800c29c

080037c8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	4b02      	ldr	r3, [pc, #8]	; (80037dc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 80037d2:	4618      	mov	r0, r3
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr
 80037dc:	0800c2b8 	.word	0x0800c2b8

080037e0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff fd3e 	bl	800326c <_ZN3ros3MsgC1Ev>
 80037f0:	4a06      	ldr	r2, [pc, #24]	; (800380c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	711a      	strb	r2, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a04      	ldr	r2, [pc, #16]	; (8003810 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8003800:	609a      	str	r2, [r3, #8]
    {
    }
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	0800d3b4 	.word	0x0800d3b4
 8003810:	0800c298 	.word	0x0800c298

08003814 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800381e:	2300      	movs	r3, #0
 8003820:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	4413      	add	r3, r2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	7912      	ldrb	r2, [r2, #4]
 800382c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	3301      	adds	r3, #1
 8003832:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	4618      	mov	r0, r3
 800383a:	f7fc fc89 	bl	8000150 <strlen>
 800383e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	4413      	add	r3, r2
 8003846:	68b9      	ldr	r1, [r7, #8]
 8003848:	4618      	mov	r0, r3
 800384a:	f001 fd3f 	bl	80052cc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	3304      	adds	r3, #4
 8003852:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	18d0      	adds	r0, r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	4619      	mov	r1, r3
 8003862:	f006 f8f2 	bl	8009a4a <memcpy>
      offset += length_msg;
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4413      	add	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]
      return offset;
 800386e:	68fb      	ldr	r3, [r7, #12]
    }
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003882:	2300      	movs	r3, #0
 8003884:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	4413      	add	r3, r2
 800388c:	781a      	ldrb	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	3301      	adds	r3, #1
 8003896:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	441a      	add	r2, r3
 800389e:	f107 030c 	add.w	r3, r7, #12
 80038a2:	4611      	mov	r1, r2
 80038a4:	4618      	mov	r0, r3
 80038a6:	f001 fd2e 	bl	8005306 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	3304      	adds	r3, #4
 80038ae:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4413      	add	r3, r2
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d20c      	bcs.n	80038da <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	441a      	add	r2, r3
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	3b01      	subs	r3, #1
 80038ca:	6839      	ldr	r1, [r7, #0]
 80038cc:	440b      	add	r3, r1
 80038ce:	7812      	ldrb	r2, [r2, #0]
 80038d0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	3301      	adds	r3, #1
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	e7ec      	b.n	80038b4 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4413      	add	r3, r2
 80038e0:	3b01      	subs	r3, #1
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	4413      	add	r3, r2
 80038e6:	2200      	movs	r2, #0
 80038e8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	441a      	add	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
     return offset;
 80038fe:	693b      	ldr	r3, [r7, #16]
    }
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	4b02      	ldr	r3, [pc, #8]	; (800391c <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr
 800391c:	0800c2dc 	.word	0x0800c2dc

08003920 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	4b02      	ldr	r3, [pc, #8]	; (8003934 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 800392a:	4618      	mov	r0, r3
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr
 8003934:	0800c2f0 	.word	0x0800c2f0

08003938 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff fc92 	bl	800326c <_ZN3ros3MsgC1Ev>
 8003948:	4a0c      	ldr	r2, [pc, #48]	; (800397c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	605a      	str	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	60da      	str	r2, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	611a      	str	r2, [r3, #16]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	619a      	str	r2, [r3, #24]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	61da      	str	r2, [r3, #28]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	0800d39c 	.word	0x0800d39c

08003980 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003980:	b580      	push	{r7, lr}
 8003982:	b08a      	sub	sp, #40	; 0x28
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6859      	ldr	r1, [r3, #4]
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	4413      	add	r3, r2
 8003998:	b2ca      	uxtb	r2, r1
 800399a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	0a19      	lsrs	r1, r3, #8
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	3301      	adds	r3, #1
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	4413      	add	r3, r2
 80039aa:	b2ca      	uxtb	r2, r1
 80039ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	0c19      	lsrs	r1, r3, #16
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	3302      	adds	r3, #2
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	4413      	add	r3, r2
 80039bc:	b2ca      	uxtb	r2, r1
 80039be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	0e19      	lsrs	r1, r3, #24
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	3303      	adds	r3, #3
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	4413      	add	r3, r2
 80039ce:	b2ca      	uxtb	r2, r1
 80039d0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	3304      	adds	r3, #4
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80039d8:	2300      	movs	r3, #0
 80039da:	623b      	str	r3, [r7, #32]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	6a3a      	ldr	r2, [r7, #32]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d22b      	bcs.n	8003a3e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80039f4:	6939      	ldr	r1, [r7, #16]
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	4413      	add	r3, r2
 80039fc:	b2ca      	uxtb	r2, r1
 80039fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	0a19      	lsrs	r1, r3, #8
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	3301      	adds	r3, #1
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	b2ca      	uxtb	r2, r1
 8003a0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	0c19      	lsrs	r1, r3, #16
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	3302      	adds	r3, #2
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	b2ca      	uxtb	r2, r1
 8003a1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	0e19      	lsrs	r1, r3, #24
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	3303      	adds	r3, #3
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	b2ca      	uxtb	r2, r1
 8003a2e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	3304      	adds	r3, #4
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	623b      	str	r3, [r7, #32]
 8003a3c:	e7ce      	b.n	80039dc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6919      	ldr	r1, [r3, #16]
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	4413      	add	r3, r2
 8003a48:	b2ca      	uxtb	r2, r1
 8003a4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	0a19      	lsrs	r1, r3, #8
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	3301      	adds	r3, #1
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	4413      	add	r3, r2
 8003a5a:	b2ca      	uxtb	r2, r1
 8003a5c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	0c19      	lsrs	r1, r3, #16
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	3302      	adds	r3, #2
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	b2ca      	uxtb	r2, r1
 8003a6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	0e19      	lsrs	r1, r3, #24
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	3303      	adds	r3, #3
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	b2ca      	uxtb	r2, r1
 8003a80:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	3304      	adds	r3, #4
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61fb      	str	r3, [r7, #28]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	69fa      	ldr	r2, [r7, #28]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d22b      	bcs.n	8003aee <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8003aa4:	68f9      	ldr	r1, [r7, #12]
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	4413      	add	r3, r2
 8003aac:	b2ca      	uxtb	r2, r1
 8003aae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	0a19      	lsrs	r1, r3, #8
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	4413      	add	r3, r2
 8003abc:	b2ca      	uxtb	r2, r1
 8003abe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	0c19      	lsrs	r1, r3, #16
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	3302      	adds	r3, #2
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	4413      	add	r3, r2
 8003acc:	b2ca      	uxtb	r2, r1
 8003ace:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	0e19      	lsrs	r1, r3, #24
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	3303      	adds	r3, #3
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	4413      	add	r3, r2
 8003adc:	b2ca      	uxtb	r2, r1
 8003ade:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	61fb      	str	r3, [r7, #28]
 8003aec:	e7ce      	b.n	8003a8c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69d9      	ldr	r1, [r3, #28]
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	4413      	add	r3, r2
 8003af8:	b2ca      	uxtb	r2, r1
 8003afa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	0a19      	lsrs	r1, r3, #8
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	3301      	adds	r3, #1
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	4413      	add	r3, r2
 8003b0a:	b2ca      	uxtb	r2, r1
 8003b0c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	0c19      	lsrs	r1, r3, #16
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	3302      	adds	r3, #2
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	b2ca      	uxtb	r2, r1
 8003b1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	0e19      	lsrs	r1, r3, #24
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	3303      	adds	r3, #3
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	b2ca      	uxtb	r2, r1
 8003b30:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	3304      	adds	r3, #4
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61bb      	str	r3, [r7, #24]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d228      	bcs.n	8003b98 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fc fafc 	bl	8000150 <strlen>
 8003b58:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	4413      	add	r3, r2
 8003b60:	6979      	ldr	r1, [r7, #20]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f001 fbb2 	bl	80052cc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	18d0      	adds	r0, r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4619      	mov	r1, r3
 8003b84:	f005 ff61 	bl	8009a4a <memcpy>
      offset += length_stringsi;
 8003b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	3301      	adds	r3, #1
 8003b94:	61bb      	str	r3, [r7, #24]
 8003b96:	e7d1      	b.n	8003b3c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3728      	adds	r7, #40	; 0x28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b08e      	sub	sp, #56	; 0x38
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	021b      	lsls	r3, r3, #8
 8003bc6:	6a3a      	ldr	r2, [r7, #32]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bce:	3302      	adds	r3, #2
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	041b      	lsls	r3, r3, #16
 8003bd8:	6a3a      	ldr	r2, [r7, #32]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be0:	3303      	adds	r3, #3
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	4413      	add	r3, r2
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	061b      	lsls	r3, r3, #24
 8003bea:	6a3a      	ldr	r2, [r7, #32]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8003bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	6a3a      	ldr	r2, [r7, #32]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d90a      	bls.n	8003c16 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	f005 ff30 	bl	8009a70 <realloc>
 8003c10:	4602      	mov	r2, r0
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a3a      	ldr	r2, [r7, #32]
 8003c1a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	633b      	str	r3, [r7, #48]	; 0x30
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d236      	bcs.n	8003c98 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c32:	6839      	ldr	r1, [r7, #0]
 8003c34:	440a      	add	r2, r1
 8003c36:	7812      	ldrb	r2, [r2, #0]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c40:	3301      	adds	r3, #1
 8003c42:	6839      	ldr	r1, [r7, #0]
 8003c44:	440b      	add	r3, r1
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	021b      	lsls	r3, r3, #8
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c52:	3302      	adds	r3, #2
 8003c54:	6839      	ldr	r1, [r7, #0]
 8003c56:	440b      	add	r3, r1
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	041b      	lsls	r3, r3, #16
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c64:	3303      	adds	r3, #3
 8003c66:	6839      	ldr	r1, [r7, #0]
 8003c68:	440b      	add	r3, r1
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	061b      	lsls	r3, r3, #24
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8003c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	3208      	adds	r2, #8
 8003c8c:	6812      	ldr	r2, [r2, #0]
 8003c8e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8003c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c92:	3301      	adds	r3, #1
 8003c94:	633b      	str	r3, [r7, #48]	; 0x30
 8003c96:	e7c3      	b.n	8003c20 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	4413      	add	r3, r2
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	021b      	lsls	r3, r3, #8
 8003cae:	69fa      	ldr	r2, [r7, #28]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb6:	3302      	adds	r3, #2
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	4413      	add	r3, r2
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	041b      	lsls	r3, r3, #16
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc8:	3303      	adds	r3, #3
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	4413      	add	r3, r2
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	061b      	lsls	r3, r3, #24
 8003cd2:	69fa      	ldr	r2, [r7, #28]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8003cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cda:	3304      	adds	r3, #4
 8003cdc:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d90a      	bls.n	8003cfe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699a      	ldr	r2, [r3, #24]
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	f005 febc 	bl	8009a70 <realloc>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69fa      	ldr	r2, [r7, #28]
 8003d02:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8003d04:	2300      	movs	r3, #0
 8003d06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d236      	bcs.n	8003d80 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8003d12:	2300      	movs	r3, #0
 8003d14:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d1a:	6839      	ldr	r1, [r7, #0]
 8003d1c:	440a      	add	r2, r1
 8003d1e:	7812      	ldrb	r2, [r2, #0]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d28:	3301      	adds	r3, #1
 8003d2a:	6839      	ldr	r1, [r7, #0]
 8003d2c:	440b      	add	r3, r1
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	021b      	lsls	r3, r3, #8
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3a:	3302      	adds	r3, #2
 8003d3c:	6839      	ldr	r1, [r7, #0]
 8003d3e:	440b      	add	r3, r1
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	041b      	lsls	r3, r3, #16
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d4c:	3303      	adds	r3, #3
 8003d4e:	6839      	ldr	r1, [r7, #0]
 8003d50:	440b      	add	r3, r1
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	061b      	lsls	r3, r3, #24
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8003d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d62:	3304      	adds	r3, #4
 8003d64:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699a      	ldr	r2, [r3, #24]
 8003d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	3214      	adds	r2, #20
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8003d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d7e:	e7c3      	b.n	8003d08 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	4413      	add	r3, r2
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	4413      	add	r3, r2
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	021b      	lsls	r3, r3, #8
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d9e:	3302      	adds	r3, #2
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	4413      	add	r3, r2
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	041b      	lsls	r3, r3, #16
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db0:	3303      	adds	r3, #3
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	4413      	add	r3, r2
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	061b      	lsls	r3, r3, #24
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8003dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d90a      	bls.n	8003de6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4610      	mov	r0, r2
 8003ddc:	f005 fe48 	bl	8009a70 <realloc>
 8003de0:	4602      	mov	r2, r0
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8003dec:	2300      	movs	r3, #0
 8003dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d23f      	bcs.n	8003e7a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8003dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	441a      	add	r2, r3
 8003e00:	f107 030c 	add.w	r3, r7, #12
 8003e04:	4611      	mov	r1, r2
 8003e06:	4618      	mov	r0, r3
 8003e08:	f001 fa7d 	bl	8005306 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0e:	3304      	adds	r3, #4
 8003e10:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
 8003e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d20c      	bcs.n	8003e3c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	441a      	add	r2, r3
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	6839      	ldr	r1, [r7, #0]
 8003e2e:	440b      	add	r3, r1
 8003e30:	7812      	ldrb	r2, [r2, #0]
 8003e32:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	3301      	adds	r3, #1
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3a:	e7ec      	b.n	8003e16 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8003e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4413      	add	r3, r2
 8003e42:	3b01      	subs	r3, #1
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	4413      	add	r3, r2
 8003e48:	2200      	movs	r2, #0
 8003e4a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8003e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	441a      	add	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8003e58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	3220      	adds	r2, #32
 8003e6e:	6812      	ldr	r2, [r2, #0]
 8003e70:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	3301      	adds	r3, #1
 8003e76:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e78:	e7ba      	b.n	8003df0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8003e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3738      	adds	r7, #56	; 0x38
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	4b02      	ldr	r3, [pc, #8]	; (8003e98 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 8003e8e:	4618      	mov	r0, r3
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr
 8003e98:	0800d278 	.word	0x0800d278

08003e9c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	4b02      	ldr	r3, [pc, #8]	; (8003eb0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bc80      	pop	{r7}
 8003eae:	4770      	bx	lr
 8003eb0:	0800c314 	.word	0x0800c314

08003eb4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	611a      	str	r2, [r3, #16]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr

08003ee0 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68d8      	ldr	r0, [r3, #12]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6891      	ldr	r1, [r2, #8]
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	4798      	blx	r3
 8003efe:	4603      	mov	r3, r0
  };
 8003f00:	4618      	mov	r0, r3
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
  }
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr

08003f1e <_ZN13STM32HardwareC1Ev>:
class STM32Hardware
{

	public:

	STM32Hardware(){
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]

	}
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bc80      	pop	{r7}
 8003f30:	4770      	bx	lr

08003f32 <_ZN13STM32Hardware4initEv>:

	void init(){
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]

	}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr

08003f44 <_ZN13STM32Hardware4readEv>:

	// Read a byte of data from received bytes
	// If no new data is available, returns -1
	int read(){
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
		return vcp_read();
 8003f4c:	f005 f9f0 	bl	8009330 <vcp_read>
 8003f50:	4603      	mov	r3, r0
	}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <_ZN13STM32Hardware5writeEPhi>:


	// Send a byte of data to ROS connection
	void write(uint8_t* data, int length){
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b084      	sub	sp, #16
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	607a      	str	r2, [r7, #4]
		vcp_write(data,length);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	68b8      	ldr	r0, [r7, #8]
 8003f6e:	f005 f9f5 	bl	800935c <vcp_write>
	}
 8003f72:	bf00      	nop
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <_ZN13STM32Hardware4timeEv>:

	// Returns milliseconds since start of program
	unsigned long time(void){
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
		return HAL_GetTick();
 8003f82:	f002 f85d 	bl	8006040 <HAL_GetTick>
 8003f86:	4603      	mov	r3, r0
	}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff f966 	bl	800326c <_ZN3ros3MsgC1Ev>
 8003fa0:	4a09      	ldr	r2, [pc, #36]	; (8003fc8 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	605a      	str	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3308      	adds	r3, #8
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff f94b 	bl	800324c <_ZN3ros4TimeC1Ev>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a04      	ldr	r2, [pc, #16]	; (8003fcc <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 8003fba:	611a      	str	r2, [r3, #16]
    {
    }
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	0800d370 	.word	0x0800d370
 8003fcc:	0800c298 	.word	0x0800c298

08003fd0 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6859      	ldr	r1, [r3, #4]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	b2ca      	uxtb	r2, r1
 8003fea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	0a19      	lsrs	r1, r3, #8
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	b2ca      	uxtb	r2, r1
 8003ffc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	0c19      	lsrs	r1, r3, #16
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	3302      	adds	r3, #2
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	4413      	add	r3, r2
 800400c:	b2ca      	uxtb	r2, r1
 800400e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	0e19      	lsrs	r1, r3, #24
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	3303      	adds	r3, #3
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	4413      	add	r3, r2
 800401e:	b2ca      	uxtb	r2, r1
 8004020:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	3304      	adds	r3, #4
 8004026:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6899      	ldr	r1, [r3, #8]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	4413      	add	r3, r2
 8004032:	b2ca      	uxtb	r2, r1
 8004034:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	0a19      	lsrs	r1, r3, #8
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3301      	adds	r3, #1
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	4413      	add	r3, r2
 8004044:	b2ca      	uxtb	r2, r1
 8004046:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	0c19      	lsrs	r1, r3, #16
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	3302      	adds	r3, #2
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	4413      	add	r3, r2
 8004056:	b2ca      	uxtb	r2, r1
 8004058:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	0e19      	lsrs	r1, r3, #24
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	3303      	adds	r3, #3
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	4413      	add	r3, r2
 8004068:	b2ca      	uxtb	r2, r1
 800406a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	3304      	adds	r3, #4
 8004070:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68d9      	ldr	r1, [r3, #12]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	4413      	add	r3, r2
 800407c:	b2ca      	uxtb	r2, r1
 800407e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	0a19      	lsrs	r1, r3, #8
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3301      	adds	r3, #1
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	4413      	add	r3, r2
 800408e:	b2ca      	uxtb	r2, r1
 8004090:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	0c19      	lsrs	r1, r3, #16
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	3302      	adds	r3, #2
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	4413      	add	r3, r2
 80040a0:	b2ca      	uxtb	r2, r1
 80040a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	0e19      	lsrs	r1, r3, #24
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	3303      	adds	r3, #3
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	4413      	add	r3, r2
 80040b2:	b2ca      	uxtb	r2, r1
 80040b4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	3304      	adds	r3, #4
 80040ba:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fc f845 	bl	8000150 <strlen>
 80040c6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	4413      	add	r3, r2
 80040ce:	68b9      	ldr	r1, [r7, #8]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f001 f8fb 	bl	80052cc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3304      	adds	r3, #4
 80040da:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	18d0      	adds	r0, r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	4619      	mov	r1, r3
 80040ea:	f005 fcae 	bl	8009a4a <memcpy>
      offset += length_frame_id;
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4413      	add	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]
      return offset;
 80040f6:	68fb      	ldr	r3, [r7, #12]
    }
 80040f8:	4618      	mov	r0, r3
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800410a:	2300      	movs	r3, #0
 800410c:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	4413      	add	r3, r2
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	3301      	adds	r3, #1
 8004124:	6839      	ldr	r1, [r7, #0]
 8004126:	440b      	add	r3, r1
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	021b      	lsls	r3, r3, #8
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	3302      	adds	r3, #2
 800413a:	6839      	ldr	r1, [r7, #0]
 800413c:	440b      	add	r3, r1
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	041b      	lsls	r3, r3, #16
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	3303      	adds	r3, #3
 8004150:	6839      	ldr	r1, [r7, #0]
 8004152:	440b      	add	r3, r1
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	061b      	lsls	r3, r3, #24
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	3304      	adds	r3, #4
 8004162:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	4413      	add	r3, r2
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	3301      	adds	r3, #1
 800417a:	6839      	ldr	r1, [r7, #0]
 800417c:	440b      	add	r3, r1
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	021b      	lsls	r3, r3, #8
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	3302      	adds	r3, #2
 8004190:	6839      	ldr	r1, [r7, #0]
 8004192:	440b      	add	r3, r1
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	041b      	lsls	r3, r3, #16
 8004198:	431a      	orrs	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	3303      	adds	r3, #3
 80041a6:	6839      	ldr	r1, [r7, #0]
 80041a8:	440b      	add	r3, r1
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	061b      	lsls	r3, r3, #24
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	3304      	adds	r3, #4
 80041b8:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	4413      	add	r3, r2
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	3301      	adds	r3, #1
 80041d0:	6839      	ldr	r1, [r7, #0]
 80041d2:	440b      	add	r3, r1
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	021b      	lsls	r3, r3, #8
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	3302      	adds	r3, #2
 80041e6:	6839      	ldr	r1, [r7, #0]
 80041e8:	440b      	add	r3, r1
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	041b      	lsls	r3, r3, #16
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	3303      	adds	r3, #3
 80041fc:	6839      	ldr	r1, [r7, #0]
 80041fe:	440b      	add	r3, r1
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	061b      	lsls	r3, r3, #24
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	3304      	adds	r3, #4
 800420e:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	441a      	add	r2, r3
 8004216:	f107 030c 	add.w	r3, r7, #12
 800421a:	4611      	mov	r1, r2
 800421c:	4618      	mov	r0, r3
 800421e:	f001 f872 	bl	8005306 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	3304      	adds	r3, #4
 8004226:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4413      	add	r3, r2
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	429a      	cmp	r2, r3
 8004236:	d20c      	bcs.n	8004252 <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	441a      	add	r2, r3
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	3b01      	subs	r3, #1
 8004242:	6839      	ldr	r1, [r7, #0]
 8004244:	440b      	add	r3, r1
 8004246:	7812      	ldrb	r2, [r2, #0]
 8004248:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	3301      	adds	r3, #1
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	e7ec      	b.n	800422c <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4413      	add	r3, r2
 8004258:	3b01      	subs	r3, #1
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	4413      	add	r3, r2
 800425e:	2200      	movs	r2, #0
 8004260:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	3b01      	subs	r3, #1
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	441a      	add	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4413      	add	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
     return offset;
 8004276:	693b      	ldr	r3, [r7, #16]
    }
 8004278:	4618      	mov	r0, r3
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	4b02      	ldr	r3, [pc, #8]	; (8004294 <_ZN8std_msgs6Header7getTypeEv+0x14>)
 800428a:	4618      	mov	r0, r3
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr
 8004294:	0800c338 	.word	0x0800c338

08004298 <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	4b02      	ldr	r3, [pc, #8]	; (80042ac <_ZN8std_msgs6Header6getMD5Ev+0x14>)
 80042a2:	4618      	mov	r0, r3
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr
 80042ac:	0800c348 	.word	0x0800c348

080042b0 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef float _z_type;
      _z_type z;
      typedef float _w_type;
      _w_type w;

    Quaternion():
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fe ffd6 	bl	800326c <_ZN3ros3MsgC1Ev>
 80042c0:	4a0b      	ldr	r2, [pc, #44]	; (80042f0 <_ZN13geometry_msgs10QuaternionC1Ev+0x40>)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	605a      	str	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	609a      	str	r2, [r3, #8]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	60da      	str	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	611a      	str	r2, [r3, #16]
    {
    }
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4618      	mov	r0, r3
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	0800d358 	.word	0x0800d358

080042f4 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	441a      	add	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	4619      	mov	r1, r3
 800430e:	4610      	mov	r0, r2
 8004310:	f7fe fed2 	bl	80030b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004314:	4602      	mov	r2, r0
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4413      	add	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	441a      	add	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	4619      	mov	r1, r3
 8004328:	4610      	mov	r0, r2
 800432a:	f7fe fec5 	bl	80030b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800432e:	4602      	mov	r2, r0
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4413      	add	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	441a      	add	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	4619      	mov	r1, r3
 8004342:	4610      	mov	r0, r2
 8004344:	f7fe feb8 	bl	80030b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004348:	4602      	mov	r2, r0
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4413      	add	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->w);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	441a      	add	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	4619      	mov	r1, r3
 800435c:	4610      	mov	r0, r2
 800435e:	f7fe feab 	bl	80030b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004362:	4602      	mov	r2, r0
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4413      	add	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]
      return offset;
 800436a:	68fb      	ldr	r3, [r7, #12]
    }
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	441a      	add	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3304      	adds	r3, #4
 800438c:	4619      	mov	r1, r3
 800438e:	4610      	mov	r0, r2
 8004390:	f7fe fefd 	bl	800318e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004394:	4602      	mov	r2, r0
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4413      	add	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	441a      	add	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3308      	adds	r3, #8
 80043a6:	4619      	mov	r1, r3
 80043a8:	4610      	mov	r0, r2
 80043aa:	f7fe fef0 	bl	800318e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80043ae:	4602      	mov	r2, r0
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4413      	add	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	441a      	add	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	330c      	adds	r3, #12
 80043c0:	4619      	mov	r1, r3
 80043c2:	4610      	mov	r0, r2
 80043c4:	f7fe fee3 	bl	800318e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80043c8:	4602      	mov	r2, r0
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4413      	add	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->w));
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	441a      	add	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	3310      	adds	r3, #16
 80043da:	4619      	mov	r1, r3
 80043dc:	4610      	mov	r0, r2
 80043de:	f7fe fed6 	bl	800318e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80043e2:	4602      	mov	r2, r0
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4413      	add	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]
     return offset;
 80043ea:	68fb      	ldr	r3, [r7, #12]
    }
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	4b02      	ldr	r3, [pc, #8]	; (8004408 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x14>)
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr
 8004408:	0800c36c 	.word	0x0800c36c

0800440c <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	4b02      	ldr	r3, [pc, #8]	; (8004420 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x14>)
 8004416:	4618      	mov	r0, r3
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	bc80      	pop	{r7}
 800441e:	4770      	bx	lr
 8004420:	0800c388 	.word	0x0800c388

08004424 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4618      	mov	r0, r3
 8004430:	f7fe ff1c 	bl	800326c <_ZN3ros3MsgC1Ev>
 8004434:	4a09      	ldr	r2, [pc, #36]	; (800445c <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	605a      	str	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	609a      	str	r2, [r3, #8]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	60da      	str	r2, [r3, #12]
    {
    }
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	0800d340 	.word	0x0800d340

08004460 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800446a:	2300      	movs	r3, #0
 800446c:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	441a      	add	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	4619      	mov	r1, r3
 800447a:	4610      	mov	r0, r2
 800447c:	f7fe fe1c 	bl	80030b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004480:	4602      	mov	r2, r0
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4413      	add	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	441a      	add	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	4619      	mov	r1, r3
 8004494:	4610      	mov	r0, r2
 8004496:	f7fe fe0f 	bl	80030b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800449a:	4602      	mov	r2, r0
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4413      	add	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	441a      	add	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	4619      	mov	r1, r3
 80044ae:	4610      	mov	r0, r2
 80044b0:	f7fe fe02 	bl	80030b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80044b4:	4602      	mov	r2, r0
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	4413      	add	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]
      return offset;
 80044bc:	68fb      	ldr	r3, [r7, #12]
    }
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	441a      	add	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3304      	adds	r3, #4
 80044de:	4619      	mov	r1, r3
 80044e0:	4610      	mov	r0, r2
 80044e2:	f7fe fe54 	bl	800318e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80044e6:	4602      	mov	r2, r0
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4413      	add	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	441a      	add	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3308      	adds	r3, #8
 80044f8:	4619      	mov	r1, r3
 80044fa:	4610      	mov	r0, r2
 80044fc:	f7fe fe47 	bl	800318e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004500:	4602      	mov	r2, r0
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4413      	add	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	441a      	add	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	330c      	adds	r3, #12
 8004512:	4619      	mov	r1, r3
 8004514:	4610      	mov	r0, r2
 8004516:	f7fe fe3a 	bl	800318e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800451a:	4602      	mov	r2, r0
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4413      	add	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]
     return offset;
 8004522:	68fb      	ldr	r3, [r7, #12]
    }
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	4b02      	ldr	r3, [pc, #8]	; (8004540 <_ZN13geometry_msgs7Vector37getTypeEv+0x14>)
 8004536:	4618      	mov	r0, r3
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr
 8004540:	0800c3ac 	.word	0x0800c3ac

08004544 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	4b02      	ldr	r3, [pc, #8]	; (8004558 <_ZN13geometry_msgs7Vector36getMD5Ev+0x14>)
 800454e:	4618      	mov	r0, r3
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr
 8004558:	0800c3c4 	.word	0x0800c3c4

0800455c <_ZN11sensor_msgs3ImuC1Ev>:
      float angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      float linear_acceleration_covariance[9];

    Imu():
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4618      	mov	r0, r3
 8004568:	f7fe fe80 	bl	800326c <_ZN3ros3MsgC1Ev>
 800456c:	4a1f      	ldr	r2, [pc, #124]	; (80045ec <_ZN11sensor_msgs3ImuC1Ev+0x90>)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3304      	adds	r3, #4
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff fd0a 	bl	8003f90 <_ZN8std_msgs6HeaderC1Ev>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3318      	adds	r3, #24
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff fe95 	bl	80042b0 <_ZN13geometry_msgs10QuaternionC1Ev>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800458c:	2308      	movs	r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	db05      	blt.n	800459e <_ZN11sensor_msgs3ImuC1Ev+0x42>
 8004592:	f04f 0100 	mov.w	r1, #0
 8004596:	6011      	str	r1, [r2, #0]
 8004598:	3204      	adds	r2, #4
 800459a:	3b01      	subs	r3, #1
 800459c:	e7f7      	b.n	800458e <_ZN11sensor_msgs3ImuC1Ev+0x32>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3350      	adds	r3, #80	; 0x50
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff ff3e 	bl	8004424 <_ZN13geometry_msgs7Vector3C1Ev>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80045ae:	2308      	movs	r3, #8
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	db05      	blt.n	80045c0 <_ZN11sensor_msgs3ImuC1Ev+0x64>
 80045b4:	f04f 0100 	mov.w	r1, #0
 80045b8:	6011      	str	r1, [r2, #0]
 80045ba:	3204      	adds	r2, #4
 80045bc:	3b01      	subs	r3, #1
 80045be:	e7f7      	b.n	80045b0 <_ZN11sensor_msgs3ImuC1Ev+0x54>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3384      	adds	r3, #132	; 0x84
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff ff2d 	bl	8004424 <_ZN13geometry_msgs7Vector3C1Ev>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f103 0294 	add.w	r2, r3, #148	; 0x94
 80045d0:	2308      	movs	r3, #8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	db05      	blt.n	80045e2 <_ZN11sensor_msgs3ImuC1Ev+0x86>
 80045d6:	f04f 0100 	mov.w	r1, #0
 80045da:	6011      	str	r1, [r2, #0]
 80045dc:	3204      	adds	r2, #4
 80045de:	3b01      	subs	r3, #1
 80045e0:	e7f7      	b.n	80045d2 <_ZN11sensor_msgs3ImuC1Ev+0x76>
    {
    }
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4618      	mov	r0, r3
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	0800d328 	.word	0x0800d328

080045f0 <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]
      offset += this->header.serialize(outbuffer + offset);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	1d18      	adds	r0, r3, #4
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	4413      	add	r3, r2
 8004608:	4619      	mov	r1, r3
 800460a:	f7ff fce1 	bl	8003fd0 <_ZNK8std_msgs6Header9serializeEPh>
 800460e:	4602      	mov	r2, r0
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	4413      	add	r3, r2
 8004614:	617b      	str	r3, [r7, #20]
      offset += this->orientation.serialize(outbuffer + offset);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f103 0018 	add.w	r0, r3, #24
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	4413      	add	r3, r2
 8004622:	4619      	mov	r1, r3
 8004624:	f7ff fe66 	bl	80042f4 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8004628:	4602      	mov	r2, r0
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	4413      	add	r3, r2
 800462e:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8004630:	2300      	movs	r3, #0
 8004632:	613b      	str	r3, [r7, #16]
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	2b08      	cmp	r3, #8
 8004638:	d813      	bhi.n	8004662 <_ZNK11sensor_msgs3Imu9serializeEPh+0x72>
      offset += serializeAvrFloat64(outbuffer + offset, this->orientation_covariance[i]);
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	18d0      	adds	r0, r2, r3
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	330a      	adds	r3, #10
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	4619      	mov	r1, r3
 800464e:	f7fe fd33 	bl	80030b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004652:	4602      	mov	r2, r0
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	4413      	add	r3, r2
 8004658:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	3301      	adds	r3, #1
 800465e:	613b      	str	r3, [r7, #16]
 8004660:	e7e8      	b.n	8004634 <_ZNK11sensor_msgs3Imu9serializeEPh+0x44>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	4413      	add	r3, r2
 800466e:	4619      	mov	r1, r3
 8004670:	f7ff fef6 	bl	8004460 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004674:	4602      	mov	r2, r0
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	4413      	add	r3, r2
 800467a:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 800467c:	2300      	movs	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b08      	cmp	r3, #8
 8004684:	d812      	bhi.n	80046ac <_ZNK11sensor_msgs3Imu9serializeEPh+0xbc>
      offset += serializeAvrFloat64(outbuffer + offset, this->angular_velocity_covariance[i]);
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	18d0      	adds	r0, r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	3218      	adds	r2, #24
 8004692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004696:	4619      	mov	r1, r3
 8004698:	f7fe fd0e 	bl	80030b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800469c:	4602      	mov	r2, r0
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	4413      	add	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3301      	adds	r3, #1
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	e7e9      	b.n	8004680 <_ZNK11sensor_msgs3Imu9serializeEPh+0x90>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f103 0084 	add.w	r0, r3, #132	; 0x84
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	4413      	add	r3, r2
 80046b8:	4619      	mov	r1, r3
 80046ba:	f7ff fed1 	bl	8004460 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80046be:	4602      	mov	r2, r0
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	4413      	add	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80046c6:	2300      	movs	r3, #0
 80046c8:	60bb      	str	r3, [r7, #8]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d813      	bhi.n	80046f8 <_ZNK11sensor_msgs3Imu9serializeEPh+0x108>
      offset += serializeAvrFloat64(outbuffer + offset, this->linear_acceleration_covariance[i]);
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	18d0      	adds	r0, r2, r3
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	3324      	adds	r3, #36	; 0x24
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	4619      	mov	r1, r3
 80046e4:	f7fe fce8 	bl	80030b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80046e8:	4602      	mov	r2, r0
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	4413      	add	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	3301      	adds	r3, #1
 80046f4:	60bb      	str	r3, [r7, #8]
 80046f6:	e7e8      	b.n	80046ca <_ZNK11sensor_msgs3Imu9serializeEPh+0xda>
      }
      return offset;
 80046f8:	697b      	ldr	r3, [r7, #20]
    }
 80046fa:	4618      	mov	r0, r3
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004702:	b580      	push	{r7, lr}
 8004704:	b086      	sub	sp, #24
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]
      offset += this->header.deserialize(inbuffer + offset);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	1d18      	adds	r0, r3, #4
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	4413      	add	r3, r2
 800471a:	4619      	mov	r1, r3
 800471c:	f7ff fcf0 	bl	8004100 <_ZN8std_msgs6Header11deserializeEPh>
 8004720:	4602      	mov	r2, r0
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	4413      	add	r3, r2
 8004726:	617b      	str	r3, [r7, #20]
      offset += this->orientation.deserialize(inbuffer + offset);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f103 0018 	add.w	r0, r3, #24
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	4413      	add	r3, r2
 8004734:	4619      	mov	r1, r3
 8004736:	f7ff fe1d 	bl	8004374 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 800473a:	4602      	mov	r2, r0
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	4413      	add	r3, r2
 8004740:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8004742:	2300      	movs	r3, #0
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	2b08      	cmp	r3, #8
 800474a:	d813      	bhi.n	8004774 <_ZN11sensor_msgs3Imu11deserializeEPh+0x72>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->orientation_covariance[i]));
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	18d0      	adds	r0, r2, r3
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	330a      	adds	r3, #10
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	4413      	add	r3, r2
 800475c:	3304      	adds	r3, #4
 800475e:	4619      	mov	r1, r3
 8004760:	f7fe fd15 	bl	800318e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004764:	4602      	mov	r2, r0
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	4413      	add	r3, r2
 800476a:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	3301      	adds	r3, #1
 8004770:	613b      	str	r3, [r7, #16]
 8004772:	e7e8      	b.n	8004746 <_ZN11sensor_msgs3Imu11deserializeEPh+0x44>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	4413      	add	r3, r2
 8004780:	4619      	mov	r1, r3
 8004782:	f7ff fea0 	bl	80044c6 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004786:	4602      	mov	r2, r0
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	4413      	add	r3, r2
 800478c:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 800478e:	2300      	movs	r3, #0
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2b08      	cmp	r3, #8
 8004796:	d812      	bhi.n	80047be <_ZN11sensor_msgs3Imu11deserializeEPh+0xbc>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->angular_velocity_covariance[i]));
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	18d0      	adds	r0, r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3318      	adds	r3, #24
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	4413      	add	r3, r2
 80047a8:	4619      	mov	r1, r3
 80047aa:	f7fe fcf0 	bl	800318e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80047ae:	4602      	mov	r2, r0
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	4413      	add	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	3301      	adds	r3, #1
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	e7e9      	b.n	8004792 <_ZN11sensor_msgs3Imu11deserializeEPh+0x90>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f103 0084 	add.w	r0, r3, #132	; 0x84
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	4413      	add	r3, r2
 80047ca:	4619      	mov	r1, r3
 80047cc:	f7ff fe7b 	bl	80044c6 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80047d0:	4602      	mov	r2, r0
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	4413      	add	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 80047d8:	2300      	movs	r3, #0
 80047da:	60bb      	str	r3, [r7, #8]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b08      	cmp	r3, #8
 80047e0:	d813      	bhi.n	800480a <_ZN11sensor_msgs3Imu11deserializeEPh+0x108>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->linear_acceleration_covariance[i]));
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	18d0      	adds	r0, r2, r3
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	3324      	adds	r3, #36	; 0x24
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	4413      	add	r3, r2
 80047f2:	3304      	adds	r3, #4
 80047f4:	4619      	mov	r1, r3
 80047f6:	f7fe fcca 	bl	800318e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80047fa:	4602      	mov	r2, r0
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	4413      	add	r3, r2
 8004800:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 9; i++){
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	3301      	adds	r3, #1
 8004806:	60bb      	str	r3, [r7, #8]
 8004808:	e7e8      	b.n	80047dc <_ZN11sensor_msgs3Imu11deserializeEPh+0xda>
      }
     return offset;
 800480a:	697b      	ldr	r3, [r7, #20]
    }
 800480c:	4618      	mov	r0, r3
 800480e:	3718      	adds	r7, #24
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <_ZN11sensor_msgs3Imu7getTypeEv>:

    const char * getType(){ return "sensor_msgs/Imu"; };
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	4b02      	ldr	r3, [pc, #8]	; (8004828 <_ZN11sensor_msgs3Imu7getTypeEv+0x14>)
 800481e:	4618      	mov	r0, r3
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	bc80      	pop	{r7}
 8004826:	4770      	bx	lr
 8004828:	0800c3e8 	.word	0x0800c3e8

0800482c <_ZN11sensor_msgs3Imu6getMD5Ev>:
    const char * getMD5(){ return "6a62c6daae103f4ff57a132d6f95cec2"; };
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	4b02      	ldr	r3, [pc, #8]	; (8004840 <_ZN11sensor_msgs3Imu6getMD5Ev+0x14>)
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	bc80      	pop	{r7}
 800483e:	4770      	bx	lr
 8004840:	0800c3f8 	.word	0x0800c3f8

08004844 <_ZN11sensor_msgs13MagneticFieldC1Ev>:
      _header_type header;
      typedef geometry_msgs::Vector3 _magnetic_field_type;
      _magnetic_field_type magnetic_field;
      float magnetic_field_covariance[9];

    MagneticField():
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
      header(),
      magnetic_field(),
      magnetic_field_covariance()
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4618      	mov	r0, r3
 8004850:	f7fe fd0c 	bl	800326c <_ZN3ros3MsgC1Ev>
 8004854:	4a0e      	ldr	r2, [pc, #56]	; (8004890 <_ZN11sensor_msgs13MagneticFieldC1Ev+0x4c>)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	3304      	adds	r3, #4
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff fb96 	bl	8003f90 <_ZN8std_msgs6HeaderC1Ev>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3318      	adds	r3, #24
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff fddb 	bl	8004424 <_ZN13geometry_msgs7Vector3C1Ev>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8004874:	2308      	movs	r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	db05      	blt.n	8004886 <_ZN11sensor_msgs13MagneticFieldC1Ev+0x42>
 800487a:	f04f 0100 	mov.w	r1, #0
 800487e:	6011      	str	r1, [r2, #0]
 8004880:	3204      	adds	r2, #4
 8004882:	3b01      	subs	r3, #1
 8004884:	e7f7      	b.n	8004876 <_ZN11sensor_msgs13MagneticFieldC1Ev+0x32>
    {
    }
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4618      	mov	r0, r3
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	0800d310 	.word	0x0800d310

08004894 <_ZNK11sensor_msgs13MagneticField9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	1d18      	adds	r0, r3, #4
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	4413      	add	r3, r2
 80048ac:	4619      	mov	r1, r3
 80048ae:	f7ff fb8f 	bl	8003fd0 <_ZNK8std_msgs6Header9serializeEPh>
 80048b2:	4602      	mov	r2, r0
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4413      	add	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]
      offset += this->magnetic_field.serialize(outbuffer + offset);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f103 0018 	add.w	r0, r3, #24
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	4413      	add	r3, r2
 80048c6:	4619      	mov	r1, r3
 80048c8:	f7ff fdca 	bl	8004460 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80048cc:	4602      	mov	r2, r0
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4413      	add	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 80048d4:	2300      	movs	r3, #0
 80048d6:	60bb      	str	r3, [r7, #8]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2b08      	cmp	r3, #8
 80048dc:	d812      	bhi.n	8004904 <_ZNK11sensor_msgs13MagneticField9serializeEPh+0x70>
      offset += serializeAvrFloat64(outbuffer + offset, this->magnetic_field_covariance[i]);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	18d0      	adds	r0, r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	320a      	adds	r2, #10
 80048ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048ee:	4619      	mov	r1, r3
 80048f0:	f7fe fbe2 	bl	80030b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80048f4:	4602      	mov	r2, r0
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4413      	add	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	3301      	adds	r3, #1
 8004900:	60bb      	str	r3, [r7, #8]
 8004902:	e7e9      	b.n	80048d8 <_ZNK11sensor_msgs13MagneticField9serializeEPh+0x44>
      }
      return offset;
 8004904:	68fb      	ldr	r3, [r7, #12]
    }
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <_ZN11sensor_msgs13MagneticField11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800490e:	b580      	push	{r7, lr}
 8004910:	b084      	sub	sp, #16
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004918:	2300      	movs	r3, #0
 800491a:	60fb      	str	r3, [r7, #12]
      offset += this->header.deserialize(inbuffer + offset);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	1d18      	adds	r0, r3, #4
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	4413      	add	r3, r2
 8004926:	4619      	mov	r1, r3
 8004928:	f7ff fbea 	bl	8004100 <_ZN8std_msgs6Header11deserializeEPh>
 800492c:	4602      	mov	r2, r0
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4413      	add	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
      offset += this->magnetic_field.deserialize(inbuffer + offset);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f103 0018 	add.w	r0, r3, #24
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	4413      	add	r3, r2
 8004940:	4619      	mov	r1, r3
 8004942:	f7ff fdc0 	bl	80044c6 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004946:	4602      	mov	r2, r0
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4413      	add	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 800494e:	2300      	movs	r3, #0
 8004950:	60bb      	str	r3, [r7, #8]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2b08      	cmp	r3, #8
 8004956:	d812      	bhi.n	800497e <_ZN11sensor_msgs13MagneticField11deserializeEPh+0x70>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->magnetic_field_covariance[i]));
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	18d0      	adds	r0, r2, r3
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	330a      	adds	r3, #10
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	4413      	add	r3, r2
 8004968:	4619      	mov	r1, r3
 800496a:	f7fe fc10 	bl	800318e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800496e:	4602      	mov	r2, r0
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4413      	add	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	3301      	adds	r3, #1
 800497a:	60bb      	str	r3, [r7, #8]
 800497c:	e7e9      	b.n	8004952 <_ZN11sensor_msgs13MagneticField11deserializeEPh+0x44>
      }
     return offset;
 800497e:	68fb      	ldr	r3, [r7, #12]
    }
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <_ZN11sensor_msgs13MagneticField7getTypeEv>:

    const char * getType(){ return "sensor_msgs/MagneticField"; };
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	4b02      	ldr	r3, [pc, #8]	; (800499c <_ZN11sensor_msgs13MagneticField7getTypeEv+0x14>)
 8004992:	4618      	mov	r0, r3
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr
 800499c:	0800c41c 	.word	0x0800c41c

080049a0 <_ZN11sensor_msgs13MagneticField6getMD5Ev>:
    const char * getMD5(){ return "2f3b0b43eed0c9501de0fa3ff89a45aa"; };
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	4b02      	ldr	r3, [pc, #8]	; (80049b4 <_ZN11sensor_msgs13MagneticField6getMD5Ev+0x14>)
 80049aa:	4618      	mov	r0, r3
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bc80      	pop	{r7}
 80049b2:	4770      	bx	lr
 80049b4:	0800c438 	.word	0x0800c438

080049b8 <_ZN11sensor_msgs12NavSatStatusC1Ev>:
      enum { SERVICE_GPS =      1 };
      enum { SERVICE_GLONASS =  2 };
      enum { SERVICE_COMPASS =  4       };
      enum { SERVICE_GALILEO =  8 };

    NavSatStatus():
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
      status(0),
      service(0)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fe fc52 	bl	800326c <_ZN3ros3MsgC1Ev>
 80049c8:	4a06      	ldr	r2, [pc, #24]	; (80049e4 <_ZN11sensor_msgs12NavSatStatusC1Ev+0x2c>)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	711a      	strb	r2, [r3, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	80da      	strh	r2, [r3, #6]
    {
    }
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4618      	mov	r0, r3
 80049de:	3708      	adds	r7, #8
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	0800d2f8 	.word	0x0800d2f8

080049e8 <_ZNK11sensor_msgs12NavSatStatus9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80049f2:	2300      	movs	r3, #0
 80049f4:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_status;
      u_status.real = this->status;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80049fc:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_status.base >> (8 * 0)) & 0xFF;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	4413      	add	r3, r2
 8004a04:	7a3a      	ldrb	r2, [r7, #8]
 8004a06:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->status);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->service >> (8 * 0)) & 0xFF;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	88d9      	ldrh	r1, [r3, #6]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	4413      	add	r3, r2
 8004a18:	b2ca      	uxtb	r2, r1
 8004a1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->service >> (8 * 1)) & 0xFF;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	88db      	ldrh	r3, [r3, #6]
 8004a20:	0a1b      	lsrs	r3, r3, #8
 8004a22:	b299      	uxth	r1, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	3301      	adds	r3, #1
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	b2ca      	uxtb	r2, r1
 8004a2e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->service);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	3302      	adds	r3, #2
 8004a34:	60fb      	str	r3, [r7, #12]
      return offset;
 8004a36:	68fb      	ldr	r3, [r7, #12]
    }
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	4770      	bx	lr

08004a42 <_ZN11sensor_msgs12NavSatStatus11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004a42:	b480      	push	{r7}
 8004a44:	b085      	sub	sp, #20
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_status;
      u_status.base = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	723b      	strb	r3, [r7, #8]
      u_status.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004a54:	7a3a      	ldrb	r2, [r7, #8]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6839      	ldr	r1, [r7, #0]
 8004a5a:	440b      	add	r3, r1
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	723b      	strb	r3, [r7, #8]
      this->status = u_status.real;
 8004a64:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->status);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	60fb      	str	r3, [r7, #12]
      this->service =  ((uint16_t) (*(inbuffer + offset)));
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	4413      	add	r3, r2
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	80da      	strh	r2, [r3, #6]
      this->service |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	88db      	ldrh	r3, [r3, #6]
 8004a84:	b21a      	sxth	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	6839      	ldr	r1, [r7, #0]
 8004a8c:	440b      	add	r3, r1
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	021b      	lsls	r3, r3, #8
 8004a92:	b21b      	sxth	r3, r3
 8004a94:	4313      	orrs	r3, r2
 8004a96:	b21b      	sxth	r3, r3
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	80da      	strh	r2, [r3, #6]
      offset += sizeof(this->service);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	3302      	adds	r3, #2
 8004aa2:	60fb      	str	r3, [r7, #12]
     return offset;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
    }
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr

08004ab0 <_ZN11sensor_msgs12NavSatStatus7getTypeEv>:

    const char * getType(){ return "sensor_msgs/NavSatStatus"; };
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	4b02      	ldr	r3, [pc, #8]	; (8004ac4 <_ZN11sensor_msgs12NavSatStatus7getTypeEv+0x14>)
 8004aba:	4618      	mov	r0, r3
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr
 8004ac4:	0800c45c 	.word	0x0800c45c

08004ac8 <_ZN11sensor_msgs12NavSatStatus6getMD5Ev>:
    const char * getMD5(){ return "331cdbddfa4bc96ffc3b9ad98900a54c"; };
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	4b02      	ldr	r3, [pc, #8]	; (8004adc <_ZN11sensor_msgs12NavSatStatus6getMD5Ev+0x14>)
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr
 8004adc:	0800c478 	.word	0x0800c478

08004ae0 <_ZN11sensor_msgs9NavSatFixC1Ev>:
      enum { COVARIANCE_TYPE_UNKNOWN =  0 };
      enum { COVARIANCE_TYPE_APPROXIMATED =  1 };
      enum { COVARIANCE_TYPE_DIAGONAL_KNOWN =  2 };
      enum { COVARIANCE_TYPE_KNOWN =  3 };

    NavSatFix():
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
      status(),
      latitude(0),
      longitude(0),
      altitude(0),
      position_covariance(),
      position_covariance_type(0)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fe fbbe 	bl	800326c <_ZN3ros3MsgC1Ev>
 8004af0:	4a16      	ldr	r2, [pc, #88]	; (8004b4c <_ZN11sensor_msgs9NavSatFixC1Ev+0x6c>)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	3304      	adds	r3, #4
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7ff fa48 	bl	8003f90 <_ZN8std_msgs6HeaderC1Ev>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3318      	adds	r3, #24
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff ff57 	bl	80049b8 <_ZN11sensor_msgs12NavSatStatusC1Ev>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	621a      	str	r2, [r3, #32]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	625a      	str	r2, [r3, #36]	; 0x24
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	629a      	str	r2, [r3, #40]	; 0x28
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8004b28:	2308      	movs	r3, #8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	db05      	blt.n	8004b3a <_ZN11sensor_msgs9NavSatFixC1Ev+0x5a>
 8004b2e:	f04f 0100 	mov.w	r1, #0
 8004b32:	6011      	str	r1, [r2, #0]
 8004b34:	3204      	adds	r2, #4
 8004b36:	3b01      	subs	r3, #1
 8004b38:	e7f7      	b.n	8004b2a <_ZN11sensor_msgs9NavSatFixC1Ev+0x4a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    {
    }
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4618      	mov	r0, r3
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	0800d2e0 	.word	0x0800d2e0

08004b50 <_ZNK11sensor_msgs9NavSatFix9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	1d18      	adds	r0, r3, #4
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	4413      	add	r3, r2
 8004b68:	4619      	mov	r1, r3
 8004b6a:	f7ff fa31 	bl	8003fd0 <_ZNK8std_msgs6Header9serializeEPh>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4413      	add	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]
      offset += this->status.serialize(outbuffer + offset);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f103 0018 	add.w	r0, r3, #24
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	4413      	add	r3, r2
 8004b82:	4619      	mov	r1, r3
 8004b84:	f7ff ff30 	bl	80049e8 <_ZNK11sensor_msgs12NavSatStatus9serializeEPh>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->latitude);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	441a      	add	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	f7fe fa8b 	bl	80030b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->longitude);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	441a      	add	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	f7fe fa7e 	bl	80030b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->altitude);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	441a      	add	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	f7fe fa71 	bl	80030b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4413      	add	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 8004bde:	2300      	movs	r3, #0
 8004be0:	60bb      	str	r3, [r7, #8]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	d813      	bhi.n	8004c10 <_ZNK11sensor_msgs9NavSatFix9serializeEPh+0xc0>
      offset += serializeAvrFloat64(outbuffer + offset, this->position_covariance[i]);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	18d0      	adds	r0, r2, r3
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	330a      	adds	r3, #10
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	f7fe fa5c 	bl	80030b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004c00:	4602      	mov	r2, r0
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4413      	add	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	60bb      	str	r3, [r7, #8]
 8004c0e:	e7e8      	b.n	8004be2 <_ZNK11sensor_msgs9NavSatFix9serializeEPh+0x92>
      }
      *(outbuffer + offset + 0) = (this->position_covariance_type >> (8 * 0)) & 0xFF;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	4413      	add	r3, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8004c1c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->position_covariance_type);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	3301      	adds	r3, #1
 8004c22:	60fb      	str	r3, [r7, #12]
      return offset;
 8004c24:	68fb      	ldr	r3, [r7, #12]
    }
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <_ZN11sensor_msgs9NavSatFix11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b084      	sub	sp, #16
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	60fb      	str	r3, [r7, #12]
      offset += this->header.deserialize(inbuffer + offset);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	1d18      	adds	r0, r3, #4
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	4413      	add	r3, r2
 8004c46:	4619      	mov	r1, r3
 8004c48:	f7ff fa5a 	bl	8004100 <_ZN8std_msgs6Header11deserializeEPh>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	4413      	add	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]
      offset += this->status.deserialize(inbuffer + offset);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f103 0018 	add.w	r0, r3, #24
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	4413      	add	r3, r2
 8004c60:	4619      	mov	r1, r3
 8004c62:	f7ff feee 	bl	8004a42 <_ZN11sensor_msgs12NavSatStatus11deserializeEPh>
 8004c66:	4602      	mov	r2, r0
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->latitude));
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	441a      	add	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3320      	adds	r3, #32
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	f7fe fa87 	bl	800318e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004c80:	4602      	mov	r2, r0
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4413      	add	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->longitude));
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	441a      	add	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	3324      	adds	r3, #36	; 0x24
 8004c92:	4619      	mov	r1, r3
 8004c94:	4610      	mov	r0, r2
 8004c96:	f7fe fa7a 	bl	800318e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->altitude));
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	441a      	add	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3328      	adds	r3, #40	; 0x28
 8004cac:	4619      	mov	r1, r3
 8004cae:	4610      	mov	r0, r2
 8004cb0:	f7fe fa6d 	bl	800318e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4413      	add	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60bb      	str	r3, [r7, #8]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2b08      	cmp	r3, #8
 8004cc4:	d813      	bhi.n	8004cee <_ZN11sensor_msgs9NavSatFix11deserializeEPh+0xc0>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->position_covariance[i]));
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	18d0      	adds	r0, r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	330a      	adds	r3, #10
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	3304      	adds	r3, #4
 8004cd8:	4619      	mov	r1, r3
 8004cda:	f7fe fa58 	bl	800318e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 9; i++){
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	60bb      	str	r3, [r7, #8]
 8004cec:	e7e8      	b.n	8004cc0 <_ZN11sensor_msgs9NavSatFix11deserializeEPh+0x92>
      }
      this->position_covariance_type =  ((uint8_t) (*(inbuffer + offset)));
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	781a      	ldrb	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      offset += sizeof(this->position_covariance_type);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	60fb      	str	r3, [r7, #12]
     return offset;
 8004d02:	68fb      	ldr	r3, [r7, #12]
    }
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <_ZN11sensor_msgs9NavSatFix7getTypeEv>:

    const char * getType(){ return "sensor_msgs/NavSatFix"; };
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	4b02      	ldr	r3, [pc, #8]	; (8004d20 <_ZN11sensor_msgs9NavSatFix7getTypeEv+0x14>)
 8004d16:	4618      	mov	r0, r3
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr
 8004d20:	0800c49c 	.word	0x0800c49c

08004d24 <_ZN11sensor_msgs9NavSatFix6getMD5Ev>:
    const char * getMD5(){ return "2d3a8cd499b9b4a0249fb98fd05cfa48"; };
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	4b02      	ldr	r3, [pc, #8]	; (8004d38 <_ZN11sensor_msgs9NavSatFix6getMD5Ev+0x14>)
 8004d2e:	4618      	mov	r0, r3
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr
 8004d38:	0800c4b4 	.word	0x0800c4b4

08004d3c <_ZN11sensor_msgs13FluidPressureC1Ev>:
      typedef float _fluid_pressure_type;
      _fluid_pressure_type fluid_pressure;
      typedef float _variance_type;
      _variance_type variance;

    FluidPressure():
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
      header(),
      fluid_pressure(0),
      variance(0)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fe fa90 	bl	800326c <_ZN3ros3MsgC1Ev>
 8004d4c:	4a0a      	ldr	r2, [pc, #40]	; (8004d78 <_ZN11sensor_msgs13FluidPressureC1Ev+0x3c>)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3304      	adds	r3, #4
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff f91a 	bl	8003f90 <_ZN8std_msgs6HeaderC1Ev>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f04f 0200 	mov.w	r2, #0
 8004d62:	619a      	str	r2, [r3, #24]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	61da      	str	r2, [r3, #28]
    {
    }
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	0800d2c8 	.word	0x0800d2c8

08004d7c <_ZNK11sensor_msgs13FluidPressure9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004d86:	2300      	movs	r3, #0
 8004d88:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	1d18      	adds	r0, r3, #4
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	4413      	add	r3, r2
 8004d94:	4619      	mov	r1, r3
 8004d96:	f7ff f91b 	bl	8003fd0 <_ZNK8std_msgs6Header9serializeEPh>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4413      	add	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->fluid_pressure);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	441a      	add	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	4619      	mov	r1, r3
 8004dae:	4610      	mov	r0, r2
 8004db0:	f7fe f982 	bl	80030b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004db4:	4602      	mov	r2, r0
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4413      	add	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->variance);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	441a      	add	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4610      	mov	r0, r2
 8004dca:	f7fe f975 	bl	80030b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]
      return offset;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
    }
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <_ZN11sensor_msgs13FluidPressure11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	60fb      	str	r3, [r7, #12]
      offset += this->header.deserialize(inbuffer + offset);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	1d18      	adds	r0, r3, #4
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	4413      	add	r3, r2
 8004df8:	4619      	mov	r1, r3
 8004dfa:	f7ff f981 	bl	8004100 <_ZN8std_msgs6Header11deserializeEPh>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4413      	add	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->fluid_pressure));
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	441a      	add	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3318      	adds	r3, #24
 8004e10:	4619      	mov	r1, r3
 8004e12:	4610      	mov	r0, r2
 8004e14:	f7fe f9bb 	bl	800318e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->variance));
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	441a      	add	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	331c      	adds	r3, #28
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	f7fe f9ae 	bl	800318e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004e32:	4602      	mov	r2, r0
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4413      	add	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]
     return offset;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
    }
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <_ZN11sensor_msgs13FluidPressure7getTypeEv>:

    const char * getType(){ return "sensor_msgs/FluidPressure"; };
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	4b02      	ldr	r3, [pc, #8]	; (8004e58 <_ZN11sensor_msgs13FluidPressure7getTypeEv+0x14>)
 8004e4e:	4618      	mov	r0, r3
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc80      	pop	{r7}
 8004e56:	4770      	bx	lr
 8004e58:	0800c4d8 	.word	0x0800c4d8

08004e5c <_ZN11sensor_msgs13FluidPressure6getMD5Ev>:
    const char * getMD5(){ return "804dc5cea1c5306d6a2eb80b9833befe"; };
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	4b02      	ldr	r3, [pc, #8]	; (8004e70 <_ZN11sensor_msgs13FluidPressure6getMD5Ev+0x14>)
 8004e66:	4618      	mov	r0, r3
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	4770      	bx	lr
 8004e70:	0800c4f4 	.word	0x0800c4f4

08004e74 <_ZN11sensor_msgs11TemperatureC1Ev>:
      typedef float _temperature_type;
      _temperature_type temperature;
      typedef float _variance_type;
      _variance_type variance;

    Temperature():
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
      header(),
      temperature(0),
      variance(0)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fe f9f4 	bl	800326c <_ZN3ros3MsgC1Ev>
 8004e84:	4a0a      	ldr	r2, [pc, #40]	; (8004eb0 <_ZN11sensor_msgs11TemperatureC1Ev+0x3c>)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff f87e 	bl	8003f90 <_ZN8std_msgs6HeaderC1Ev>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	619a      	str	r2, [r3, #24]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f04f 0200 	mov.w	r2, #0
 8004ea2:	61da      	str	r2, [r3, #28]
    {
    }
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	0800d2b0 	.word	0x0800d2b0

08004eb4 <_ZNK11sensor_msgs11Temperature9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	1d18      	adds	r0, r3, #4
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	4413      	add	r3, r2
 8004ecc:	4619      	mov	r1, r3
 8004ece:	f7ff f87f 	bl	8003fd0 <_ZNK8std_msgs6Header9serializeEPh>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->temperature);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	441a      	add	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	f7fe f8e6 	bl	80030b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004eec:	4602      	mov	r2, r0
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->variance);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	441a      	add	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	4619      	mov	r1, r3
 8004f00:	4610      	mov	r0, r2
 8004f02:	f7fe f8d9 	bl	80030b8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8004f06:	4602      	mov	r2, r0
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]
      return offset;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
    }
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <_ZN11sensor_msgs11Temperature11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60fb      	str	r3, [r7, #12]
      offset += this->header.deserialize(inbuffer + offset);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	1d18      	adds	r0, r3, #4
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	4413      	add	r3, r2
 8004f30:	4619      	mov	r1, r3
 8004f32:	f7ff f8e5 	bl	8004100 <_ZN8std_msgs6Header11deserializeEPh>
 8004f36:	4602      	mov	r2, r0
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->temperature));
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	441a      	add	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3318      	adds	r3, #24
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	f7fe f91f 	bl	800318e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004f50:	4602      	mov	r2, r0
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4413      	add	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->variance));
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	441a      	add	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	331c      	adds	r3, #28
 8004f62:	4619      	mov	r1, r3
 8004f64:	4610      	mov	r0, r2
 8004f66:	f7fe f912 	bl	800318e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4413      	add	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]
     return offset;
 8004f72:	68fb      	ldr	r3, [r7, #12]
    }
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <_ZN11sensor_msgs11Temperature7getTypeEv>:

    const char * getType(){ return "sensor_msgs/Temperature"; };
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	4b02      	ldr	r3, [pc, #8]	; (8004f90 <_ZN11sensor_msgs11Temperature7getTypeEv+0x14>)
 8004f86:	4618      	mov	r0, r3
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bc80      	pop	{r7}
 8004f8e:	4770      	bx	lr
 8004f90:	0800c518 	.word	0x0800c518

08004f94 <_ZN11sensor_msgs11Temperature6getMD5Ev>:
    const char * getMD5(){ return "ff71b307acdbe7c871a5a6d7ed359100"; };
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	4b02      	ldr	r3, [pc, #8]	; (8004fa8 <_ZN11sensor_msgs11Temperature6getMD5Ev+0x14>)
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bc80      	pop	{r7}
 8004fa6:	4770      	bx	lr
 8004fa8:	0800c530 	.word	0x0800c530

08004fac <ros_init>:
ros::Publisher gps_pub("/fix",&fix_msg);
ros::Publisher pressure_pub("/air_pressure",&air_ps_msg);
ros::Publisher temp_pub("/temperature",&temp_msg);


extern "C" void ros_init(){
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
	nh.initNode();
 8004fb0:	480d      	ldr	r0, [pc, #52]	; (8004fe8 <ros_init+0x3c>)
 8004fb2:	f000 fa69 	bl	8005488 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8initNodeEv>
	nh.advertise(imu_pub);
 8004fb6:	490d      	ldr	r1, [pc, #52]	; (8004fec <ros_init+0x40>)
 8004fb8:	480b      	ldr	r0, [pc, #44]	; (8004fe8 <ros_init+0x3c>)
 8004fba:	f000 fa89 	bl	80054d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>
	nh.advertise(mag_pub);
 8004fbe:	490c      	ldr	r1, [pc, #48]	; (8004ff0 <ros_init+0x44>)
 8004fc0:	4809      	ldr	r0, [pc, #36]	; (8004fe8 <ros_init+0x3c>)
 8004fc2:	f000 fa85 	bl	80054d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>
	nh.advertise(gps_pub);
 8004fc6:	490b      	ldr	r1, [pc, #44]	; (8004ff4 <ros_init+0x48>)
 8004fc8:	4807      	ldr	r0, [pc, #28]	; (8004fe8 <ros_init+0x3c>)
 8004fca:	f000 fa81 	bl	80054d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>
	nh.advertise(pressure_pub);
 8004fce:	490a      	ldr	r1, [pc, #40]	; (8004ff8 <ros_init+0x4c>)
 8004fd0:	4805      	ldr	r0, [pc, #20]	; (8004fe8 <ros_init+0x3c>)
 8004fd2:	f000 fa7d 	bl	80054d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>
	nh.advertise(temp_pub);
 8004fd6:	4909      	ldr	r1, [pc, #36]	; (8004ffc <ros_init+0x50>)
 8004fd8:	4803      	ldr	r0, [pc, #12]	; (8004fe8 <ros_init+0x3c>)
 8004fda:	f000 fa79 	bl	80054d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>
	nh.spinOnce();
 8004fde:	4802      	ldr	r0, [pc, #8]	; (8004fe8 <ros_init+0x3c>)
 8004fe0:	f000 faa3 	bl	800552a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv>
}
 8004fe4:	bf00      	nop
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	2000060c 	.word	0x2000060c
 8004fec:	2000173c 	.word	0x2000173c
 8004ff0:	20001750 	.word	0x20001750
 8004ff4:	20001764 	.word	0x20001764
 8004ff8:	20001778 	.word	0x20001778
 8004ffc:	2000178c 	.word	0x2000178c

08005000 <IMU_pub>:

extern "C" void IMU_pub(double a[3], double w[3], double q[4]){
 8005000:	b590      	push	{r4, r7, lr}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	6178      	str	r0, [r7, #20]
 8005008:	6139      	str	r1, [r7, #16]
 800500a:	60fa      	str	r2, [r7, #12]

	imu_msg.header.stamp = nh.now();
 800500c:	4c3d      	ldr	r4, [pc, #244]	; (8005104 <IMU_pub+0x104>)
 800500e:	463b      	mov	r3, r7
 8005010:	493d      	ldr	r1, [pc, #244]	; (8005108 <IMU_pub+0x108>)
 8005012:	4618      	mov	r0, r3
 8005014:	f000 fcca 	bl	80059ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>
 8005018:	f104 030c 	add.w	r3, r4, #12
 800501c:	463a      	mov	r2, r7
 800501e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005022:	e883 0003 	stmia.w	r3, {r0, r1}
	imu_msg.header.frame_id = "XIMU";
 8005026:	4b37      	ldr	r3, [pc, #220]	; (8005104 <IMU_pub+0x104>)
 8005028:	4a38      	ldr	r2, [pc, #224]	; (800510c <IMU_pub+0x10c>)
 800502a:	615a      	str	r2, [r3, #20]

	imu_msg.linear_acceleration.x = a[0];
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	cb18      	ldmia	r3, {r3, r4}
 8005030:	4618      	mov	r0, r3
 8005032:	4621      	mov	r1, r4
 8005034:	f7fb fd48 	bl	8000ac8 <__aeabi_d2f>
 8005038:	4602      	mov	r2, r0
 800503a:	4b32      	ldr	r3, [pc, #200]	; (8005104 <IMU_pub+0x104>)
 800503c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	imu_msg.linear_acceleration.y = a[1];
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	3308      	adds	r3, #8
 8005044:	cb18      	ldmia	r3, {r3, r4}
 8005046:	4618      	mov	r0, r3
 8005048:	4621      	mov	r1, r4
 800504a:	f7fb fd3d 	bl	8000ac8 <__aeabi_d2f>
 800504e:	4602      	mov	r2, r0
 8005050:	4b2c      	ldr	r3, [pc, #176]	; (8005104 <IMU_pub+0x104>)
 8005052:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	imu_msg.linear_acceleration.z = a[2];
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	3310      	adds	r3, #16
 800505a:	cb18      	ldmia	r3, {r3, r4}
 800505c:	4618      	mov	r0, r3
 800505e:	4621      	mov	r1, r4
 8005060:	f7fb fd32 	bl	8000ac8 <__aeabi_d2f>
 8005064:	4602      	mov	r2, r0
 8005066:	4b27      	ldr	r3, [pc, #156]	; (8005104 <IMU_pub+0x104>)
 8005068:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	imu_msg.angular_velocity.x = w[0];
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	cb18      	ldmia	r3, {r3, r4}
 8005070:	4618      	mov	r0, r3
 8005072:	4621      	mov	r1, r4
 8005074:	f7fb fd28 	bl	8000ac8 <__aeabi_d2f>
 8005078:	4602      	mov	r2, r0
 800507a:	4b22      	ldr	r3, [pc, #136]	; (8005104 <IMU_pub+0x104>)
 800507c:	655a      	str	r2, [r3, #84]	; 0x54
	imu_msg.angular_velocity.y = w[1];
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	3308      	adds	r3, #8
 8005082:	cb18      	ldmia	r3, {r3, r4}
 8005084:	4618      	mov	r0, r3
 8005086:	4621      	mov	r1, r4
 8005088:	f7fb fd1e 	bl	8000ac8 <__aeabi_d2f>
 800508c:	4602      	mov	r2, r0
 800508e:	4b1d      	ldr	r3, [pc, #116]	; (8005104 <IMU_pub+0x104>)
 8005090:	659a      	str	r2, [r3, #88]	; 0x58
	imu_msg.angular_velocity.z = w[2];
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	3310      	adds	r3, #16
 8005096:	cb18      	ldmia	r3, {r3, r4}
 8005098:	4618      	mov	r0, r3
 800509a:	4621      	mov	r1, r4
 800509c:	f7fb fd14 	bl	8000ac8 <__aeabi_d2f>
 80050a0:	4602      	mov	r2, r0
 80050a2:	4b18      	ldr	r3, [pc, #96]	; (8005104 <IMU_pub+0x104>)
 80050a4:	65da      	str	r2, [r3, #92]	; 0x5c

	imu_msg.orientation.w = q[0];
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	cb18      	ldmia	r3, {r3, r4}
 80050aa:	4618      	mov	r0, r3
 80050ac:	4621      	mov	r1, r4
 80050ae:	f7fb fd0b 	bl	8000ac8 <__aeabi_d2f>
 80050b2:	4602      	mov	r2, r0
 80050b4:	4b13      	ldr	r3, [pc, #76]	; (8005104 <IMU_pub+0x104>)
 80050b6:	629a      	str	r2, [r3, #40]	; 0x28
	imu_msg.orientation.x = q[1];
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	3308      	adds	r3, #8
 80050bc:	cb18      	ldmia	r3, {r3, r4}
 80050be:	4618      	mov	r0, r3
 80050c0:	4621      	mov	r1, r4
 80050c2:	f7fb fd01 	bl	8000ac8 <__aeabi_d2f>
 80050c6:	4602      	mov	r2, r0
 80050c8:	4b0e      	ldr	r3, [pc, #56]	; (8005104 <IMU_pub+0x104>)
 80050ca:	61da      	str	r2, [r3, #28]
	imu_msg.orientation.y = q[2];
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	3310      	adds	r3, #16
 80050d0:	cb18      	ldmia	r3, {r3, r4}
 80050d2:	4618      	mov	r0, r3
 80050d4:	4621      	mov	r1, r4
 80050d6:	f7fb fcf7 	bl	8000ac8 <__aeabi_d2f>
 80050da:	4602      	mov	r2, r0
 80050dc:	4b09      	ldr	r3, [pc, #36]	; (8005104 <IMU_pub+0x104>)
 80050de:	621a      	str	r2, [r3, #32]
	imu_msg.orientation.z = q[3];
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	3318      	adds	r3, #24
 80050e4:	cb18      	ldmia	r3, {r3, r4}
 80050e6:	4618      	mov	r0, r3
 80050e8:	4621      	mov	r1, r4
 80050ea:	f7fb fced 	bl	8000ac8 <__aeabi_d2f>
 80050ee:	4602      	mov	r2, r0
 80050f0:	4b04      	ldr	r3, [pc, #16]	; (8005104 <IMU_pub+0x104>)
 80050f2:	625a      	str	r2, [r3, #36]	; 0x24

	imu_pub.publish(&imu_msg);
 80050f4:	4903      	ldr	r1, [pc, #12]	; (8005104 <IMU_pub+0x104>)
 80050f6:	4806      	ldr	r0, [pc, #24]	; (8005110 <IMU_pub+0x110>)
 80050f8:	f7fe fef2 	bl	8003ee0 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 80050fc:	bf00      	nop
 80050fe:	371c      	adds	r7, #28
 8005100:	46bd      	mov	sp, r7
 8005102:	bd90      	pop	{r4, r7, pc}
 8005104:	20000474 	.word	0x20000474
 8005108:	2000060c 	.word	0x2000060c
 800510c:	0800c554 	.word	0x0800c554
 8005110:	2000173c 	.word	0x2000173c

08005114 <MAG_pub>:

extern "C" void MAG_pub(double m[3]){
 8005114:	b590      	push	{r4, r7, lr}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]

	mag_msg.header.stamp = nh.now();
 800511c:	4c1a      	ldr	r4, [pc, #104]	; (8005188 <MAG_pub+0x74>)
 800511e:	463b      	mov	r3, r7
 8005120:	491a      	ldr	r1, [pc, #104]	; (800518c <MAG_pub+0x78>)
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fc42 	bl	80059ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>
 8005128:	f104 030c 	add.w	r3, r4, #12
 800512c:	463a      	mov	r2, r7
 800512e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005132:	e883 0003 	stmia.w	r3, {r0, r1}
	mag_msg.header.frame_id = "XIMU";
 8005136:	4b14      	ldr	r3, [pc, #80]	; (8005188 <MAG_pub+0x74>)
 8005138:	4a15      	ldr	r2, [pc, #84]	; (8005190 <MAG_pub+0x7c>)
 800513a:	615a      	str	r2, [r3, #20]

	mag_msg.magnetic_field.x = m[0];
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	cb18      	ldmia	r3, {r3, r4}
 8005140:	4618      	mov	r0, r3
 8005142:	4621      	mov	r1, r4
 8005144:	f7fb fcc0 	bl	8000ac8 <__aeabi_d2f>
 8005148:	4602      	mov	r2, r0
 800514a:	4b0f      	ldr	r3, [pc, #60]	; (8005188 <MAG_pub+0x74>)
 800514c:	61da      	str	r2, [r3, #28]
	mag_msg.magnetic_field.y = m[1];
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	3308      	adds	r3, #8
 8005152:	cb18      	ldmia	r3, {r3, r4}
 8005154:	4618      	mov	r0, r3
 8005156:	4621      	mov	r1, r4
 8005158:	f7fb fcb6 	bl	8000ac8 <__aeabi_d2f>
 800515c:	4602      	mov	r2, r0
 800515e:	4b0a      	ldr	r3, [pc, #40]	; (8005188 <MAG_pub+0x74>)
 8005160:	621a      	str	r2, [r3, #32]
	mag_msg.magnetic_field.z = m[2];
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	3310      	adds	r3, #16
 8005166:	cb18      	ldmia	r3, {r3, r4}
 8005168:	4618      	mov	r0, r3
 800516a:	4621      	mov	r1, r4
 800516c:	f7fb fcac 	bl	8000ac8 <__aeabi_d2f>
 8005170:	4602      	mov	r2, r0
 8005172:	4b05      	ldr	r3, [pc, #20]	; (8005188 <MAG_pub+0x74>)
 8005174:	625a      	str	r2, [r3, #36]	; 0x24

	mag_pub.publish(&mag_msg);
 8005176:	4904      	ldr	r1, [pc, #16]	; (8005188 <MAG_pub+0x74>)
 8005178:	4806      	ldr	r0, [pc, #24]	; (8005194 <MAG_pub+0x80>)
 800517a:	f7fe feb1 	bl	8003ee0 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 800517e:	bf00      	nop
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	bd90      	pop	{r4, r7, pc}
 8005186:	bf00      	nop
 8005188:	2000052c 	.word	0x2000052c
 800518c:	2000060c 	.word	0x2000060c
 8005190:	0800c554 	.word	0x0800c554
 8005194:	20001750 	.word	0x20001750

08005198 <GPS_pub>:

extern "C" void GPS_pub(double lla[3]){
 8005198:	b590      	push	{r4, r7, lr}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
	fix_msg.header.stamp = nh.now();
 80051a0:	4c1e      	ldr	r4, [pc, #120]	; (800521c <GPS_pub+0x84>)
 80051a2:	463b      	mov	r3, r7
 80051a4:	491e      	ldr	r1, [pc, #120]	; (8005220 <GPS_pub+0x88>)
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fc00 	bl	80059ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>
 80051ac:	f104 030c 	add.w	r3, r4, #12
 80051b0:	463a      	mov	r2, r7
 80051b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80051b6:	e883 0003 	stmia.w	r3, {r0, r1}

	fix_msg.latitude = lla[0];
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	cb18      	ldmia	r3, {r3, r4}
 80051be:	4618      	mov	r0, r3
 80051c0:	4621      	mov	r1, r4
 80051c2:	f7fb fc81 	bl	8000ac8 <__aeabi_d2f>
 80051c6:	4602      	mov	r2, r0
 80051c8:	4b14      	ldr	r3, [pc, #80]	; (800521c <GPS_pub+0x84>)
 80051ca:	621a      	str	r2, [r3, #32]
	fix_msg.longitude = lla[1];
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	3308      	adds	r3, #8
 80051d0:	cb18      	ldmia	r3, {r3, r4}
 80051d2:	4618      	mov	r0, r3
 80051d4:	4621      	mov	r1, r4
 80051d6:	f7fb fc77 	bl	8000ac8 <__aeabi_d2f>
 80051da:	4602      	mov	r2, r0
 80051dc:	4b0f      	ldr	r3, [pc, #60]	; (800521c <GPS_pub+0x84>)
 80051de:	625a      	str	r2, [r3, #36]	; 0x24
	fix_msg.altitude = lla[2];
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	3310      	adds	r3, #16
 80051e4:	cb18      	ldmia	r3, {r3, r4}
 80051e6:	4618      	mov	r0, r3
 80051e8:	4621      	mov	r1, r4
 80051ea:	f7fb fc6d 	bl	8000ac8 <__aeabi_d2f>
 80051ee:	4602      	mov	r2, r0
 80051f0:	4b0a      	ldr	r3, [pc, #40]	; (800521c <GPS_pub+0x84>)
 80051f2:	629a      	str	r2, [r3, #40]	; 0x28

	fix_msg.position_covariance[0] = 1.5;
 80051f4:	4b09      	ldr	r3, [pc, #36]	; (800521c <GPS_pub+0x84>)
 80051f6:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80051fa:	62da      	str	r2, [r3, #44]	; 0x2c
	fix_msg.position_covariance[4] = 1.5;
 80051fc:	4b07      	ldr	r3, [pc, #28]	; (800521c <GPS_pub+0x84>)
 80051fe:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8005202:	63da      	str	r2, [r3, #60]	; 0x3c
	fix_msg.position_covariance[8] = 4.0;
 8005204:	4b05      	ldr	r3, [pc, #20]	; (800521c <GPS_pub+0x84>)
 8005206:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800520a:	64da      	str	r2, [r3, #76]	; 0x4c

	gps_pub.publish(&fix_msg);
 800520c:	4903      	ldr	r1, [pc, #12]	; (800521c <GPS_pub+0x84>)
 800520e:	4805      	ldr	r0, [pc, #20]	; (8005224 <GPS_pub+0x8c>)
 8005210:	f7fe fe66 	bl	8003ee0 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

}
 8005214:	bf00      	nop
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	bd90      	pop	{r4, r7, pc}
 800521c:	20000578 	.word	0x20000578
 8005220:	2000060c 	.word	0x2000060c
 8005224:	20001764 	.word	0x20001764

08005228 <PT_pub>:

extern "C" void PT_pub(double pt[2]){
 8005228:	b590      	push	{r4, r7, lr}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
	air_ps_msg.header.stamp = nh.now();
 8005230:	4c1c      	ldr	r4, [pc, #112]	; (80052a4 <PT_pub+0x7c>)
 8005232:	463b      	mov	r3, r7
 8005234:	491c      	ldr	r1, [pc, #112]	; (80052a8 <PT_pub+0x80>)
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fbb8 	bl	80059ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>
 800523c:	f104 030c 	add.w	r3, r4, #12
 8005240:	463a      	mov	r2, r7
 8005242:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005246:	e883 0003 	stmia.w	r3, {r0, r1}
	air_ps_msg.fluid_pressure = pt[0];
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	cb18      	ldmia	r3, {r3, r4}
 800524e:	4618      	mov	r0, r3
 8005250:	4621      	mov	r1, r4
 8005252:	f7fb fc39 	bl	8000ac8 <__aeabi_d2f>
 8005256:	4602      	mov	r2, r0
 8005258:	4b12      	ldr	r3, [pc, #72]	; (80052a4 <PT_pub+0x7c>)
 800525a:	619a      	str	r2, [r3, #24]

	pressure_pub.publish(&air_ps_msg);
 800525c:	4911      	ldr	r1, [pc, #68]	; (80052a4 <PT_pub+0x7c>)
 800525e:	4813      	ldr	r0, [pc, #76]	; (80052ac <PT_pub+0x84>)
 8005260:	f7fe fe3e 	bl	8003ee0 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	temp_msg.header.stamp = nh.now();
 8005264:	4c12      	ldr	r4, [pc, #72]	; (80052b0 <PT_pub+0x88>)
 8005266:	463b      	mov	r3, r7
 8005268:	490f      	ldr	r1, [pc, #60]	; (80052a8 <PT_pub+0x80>)
 800526a:	4618      	mov	r0, r3
 800526c:	f000 fb9e 	bl	80059ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>
 8005270:	f104 030c 	add.w	r3, r4, #12
 8005274:	463a      	mov	r2, r7
 8005276:	e892 0003 	ldmia.w	r2, {r0, r1}
 800527a:	e883 0003 	stmia.w	r3, {r0, r1}
	temp_msg.temperature = pt[1];
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3308      	adds	r3, #8
 8005282:	cb18      	ldmia	r3, {r3, r4}
 8005284:	4618      	mov	r0, r3
 8005286:	4621      	mov	r1, r4
 8005288:	f7fb fc1e 	bl	8000ac8 <__aeabi_d2f>
 800528c:	4602      	mov	r2, r0
 800528e:	4b08      	ldr	r3, [pc, #32]	; (80052b0 <PT_pub+0x88>)
 8005290:	619a      	str	r2, [r3, #24]

	temp_pub.publish(&temp_msg);
 8005292:	4907      	ldr	r1, [pc, #28]	; (80052b0 <PT_pub+0x88>)
 8005294:	4807      	ldr	r0, [pc, #28]	; (80052b4 <PT_pub+0x8c>)
 8005296:	f7fe fe23 	bl	8003ee0 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 800529a:	bf00      	nop
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd90      	pop	{r4, r7, pc}
 80052a2:	bf00      	nop
 80052a4:	200005cc 	.word	0x200005cc
 80052a8:	2000060c 	.word	0x2000060c
 80052ac:	20001778 	.word	0x20001778
 80052b0:	200005ec 	.word	0x200005ec
 80052b4:	2000178c 	.word	0x2000178c

080052b8 <spinOnce>:

extern "C" void spinOnce(){
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0
	nh.spinOnce();
 80052bc:	4802      	ldr	r0, [pc, #8]	; (80052c8 <spinOnce+0x10>)
 80052be:	f000 f934 	bl	800552a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv>
}
 80052c2:	bf00      	nop
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	2000060c 	.word	0x2000060c

080052cc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d80d      	bhi.n	80052fc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	fa22 f103 	lsr.w	r1, r2, r3
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4413      	add	r3, r2
 80052f0:	b2ca      	uxtb	r2, r1
 80052f2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3301      	adds	r3, #1
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	e7ee      	b.n	80052da <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80052fc:	bf00      	nop
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	bc80      	pop	{r7}
 8005304:	4770      	bx	lr

08005306 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8005306:	b480      	push	{r7}
 8005308:	b085      	sub	sp, #20
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005316:	2300      	movs	r3, #0
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b03      	cmp	r3, #3
 800531e:	d811      	bhi.n	8005344 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6839      	ldr	r1, [r7, #0]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	440a      	add	r2, r1
 800532a:	7812      	ldrb	r2, [r2, #0]
 800532c:	4611      	mov	r1, r2
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	00d2      	lsls	r2, r2, #3
 8005332:	fa01 f202 	lsl.w	r2, r1, r2
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3301      	adds	r3, #1
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	e7ea      	b.n	800531a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8005344:	bf00      	nop
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr
	...

08005350 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "stm32f1xx_hal.h"

namespace ros
{

class NodeHandleBase_
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	4a04      	ldr	r2, [pc, #16]	; (800536c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	bc80      	pop	{r7}
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	0800d388 	.word	0x0800d388

08005370 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4618      	mov	r0, r3
 800537c:	f7ff ffe8 	bl	8005350 <_ZN3ros15NodeHandleBase_C1Ev>
 8005380:	4a40      	ldr	r2, [pc, #256]	; (8005484 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x114>)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	3304      	adds	r3, #4
 800538a:	4618      	mov	r0, r3
 800538c:	f7fe fdc7 	bl	8003f1e <_ZN13STM32HardwareC1Ev>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005396:	3314      	adds	r3, #20
 8005398:	2200      	movs	r2, #0
 800539a:	701a      	strb	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80053a2:	3308      	adds	r3, #8
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7fe fac7 	bl	8003938 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80053aa:	2300      	movs	r3, #0
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2b18      	cmp	r3, #24
 80053b2:	d80a      	bhi.n	80053ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x5a>
      publishers[i] = 0;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	f202 4206 	addw	r2, r2, #1030	; 0x406
 80053bc:	2100      	movs	r1, #0
 80053be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	3301      	adds	r3, #1
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	e7f1      	b.n	80053ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80053ca:	2300      	movs	r3, #0
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	2b18      	cmp	r3, #24
 80053d2:	d80b      	bhi.n	80053ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x7c>
      subscribers[i] = 0;
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	2200      	movs	r2, #0
 80053e2:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	3301      	adds	r3, #1
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	e7f0      	b.n	80053ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x5e>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f6:	d209      	bcs.n	800540c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x9c>
      message_in[i] = 0;
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4413      	add	r3, r2
 80053fe:	3318      	adds	r3, #24
 8005400:	2200      	movs	r2, #0
 8005402:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3301      	adds	r3, #1
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	e7f1      	b.n	80053f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800540c:	2300      	movs	r3, #0
 800540e:	60bb      	str	r3, [r7, #8]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005416:	d20a      	bcs.n	800542e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0xbe>
      message_out[i] = 0;
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	4413      	add	r3, r2
 800541e:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8005422:	2200      	movs	r2, #0
 8005424:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	3301      	adds	r3, #1
 800542a:	60bb      	str	r3, [r7, #8]
 800542c:	e7f0      	b.n	8005410 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev+0xa0>

    req_param_resp.ints_length = 0;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005434:	330c      	adds	r3, #12
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
    req_param_resp.ints = NULL;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005440:	3314      	adds	r3, #20
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
    req_param_resp.floats_length = 0;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800544c:	3318      	adds	r3, #24
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
    req_param_resp.floats = NULL;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]
    req_param_resp.ints_length = 0;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005462:	330c      	adds	r3, #12
 8005464:	2200      	movs	r2, #0
 8005466:	601a      	str	r2, [r3, #0]
    req_param_resp.ints = NULL;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800546e:	3314      	adds	r3, #20
 8005470:	2200      	movs	r2, #0
 8005472:	601a      	str	r2, [r3, #0]

    spin_timeout_ = 0;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	615a      	str	r2, [r3, #20]
  }
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4618      	mov	r0, r3
 800547e:	3718      	adds	r7, #24
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	0800d29c 	.word	0x0800d29c

08005488 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3304      	adds	r3, #4
 8005494:	4618      	mov	r0, r3
 8005496:	f7fe fd4c 	bl	8003f32 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]
    bytes_ = 0;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80054aa:	3304      	adds	r3, #4
 80054ac:	2200      	movs	r2, #0
 80054ae:	601a      	str	r2, [r3, #0]
    index_ = 0;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80054b6:	330c      	adds	r3, #12
 80054b8:	2200      	movs	r2, #0
 80054ba:	601a      	str	r2, [r3, #0]
    topic_ = 0;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80054c2:	3308      	adds	r3, #8
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
  };
 80054c8:	bf00      	nop
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80054da:	2300      	movs	r3, #0
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2b18      	cmp	r3, #24
 80054e2:	dc1c      	bgt.n	800551e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0x4e>
    {
      if (publishers[i] == 0) // empty slot
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	f202 4206 	addw	r2, r2, #1030	; 0x406
 80054ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d110      	bne.n	8005516 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	f202 4206 	addw	r2, r2, #1030	; 0x406
 80054fc:	6839      	ldr	r1, [r7, #0]
 80054fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	60da      	str	r2, [r3, #12]
        return true;
 8005512:	2301      	movs	r3, #1
 8005514:	e004      	b.n	8005520 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	3301      	adds	r3, #1
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	e7df      	b.n	80054de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 800551e:	2300      	movs	r3, #0
  }
 8005520:	4618      	mov	r0, r3
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	bc80      	pop	{r7}
 8005528:	4770      	bx	lr

0800552a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv>:
  virtual int spinOnce()
 800552a:	b580      	push	{r7, lr}
 800552c:	b084      	sub	sp, #16
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3304      	adds	r3, #4
 8005536:	4618      	mov	r0, r3
 8005538:	f7fe fd1f 	bl	8003f7a <_ZN13STM32Hardware4timeEv>
 800553c:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005544:	331c      	adds	r3, #28
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8005550:	4293      	cmp	r3, r2
 8005552:	d905      	bls.n	8005560 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x36>
      configured_ = false;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800555a:	3314      	adds	r3, #20
 800555c:	2200      	movs	r2, #0
 800555e:	701a      	strb	r2, [r3, #0]
    if (mode_ != MODE_FIRST_FF)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00b      	beq.n	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      if (c_time > last_msg_timeout_time)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	429a      	cmp	r2, r3
 8005578:	d904      	bls.n	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
        mode_ = MODE_FIRST_FF;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]
      if (spin_timeout_ > 0)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d013      	beq.n	80055b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x8a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3304      	adds	r3, #4
 8005590:	4618      	mov	r0, r3
 8005592:	f7fe fcf2 	bl	8003f7a <_ZN13STM32Hardware4timeEv>
 8005596:	4602      	mov	r2, r0
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	1ad2      	subs	r2, r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	bf8c      	ite	hi
 80055a4:	2301      	movhi	r3, #1
 80055a6:	2300      	movls	r3, #0
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x8a>
          return SPIN_TIMEOUT;
 80055ae:	f06f 0301 	mvn.w	r3, #1
 80055b2:	e1f7      	b.n	80059a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x47a>
      int data = hardware_.read();
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3304      	adds	r3, #4
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7fe fcc3 	bl	8003f44 <_ZN13STM32Hardware4readEv>
 80055be:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f2c0 81d1 	blt.w	800596a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x440>
      checksum_ += data;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80055ce:	3310      	adds	r3, #16
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	441a      	add	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80055dc:	3310      	adds	r3, #16
 80055de:	601a      	str	r2, [r3, #0]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b07      	cmp	r3, #7
 80055ea:	d128      	bne.n	800563e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x114>
        message_in[index_++] = data;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80055f2:	330c      	adds	r3, #12
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	1c51      	adds	r1, r2, #1
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80055fe:	330c      	adds	r3, #12
 8005600:	6019      	str	r1, [r3, #0]
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	b2d9      	uxtb	r1, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4413      	add	r3, r2
 800560a:	460a      	mov	r2, r1
 800560c:	761a      	strb	r2, [r3, #24]
        bytes_--;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005614:	3304      	adds	r3, #4
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	1e5a      	subs	r2, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005620:	3304      	adds	r3, #4
 8005622:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800562a:	3304      	adds	r3, #4
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1a8      	bne.n	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          mode_ = MODE_MSG_CHECKSUM;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005638:	2208      	movs	r2, #8
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	e7a2      	b.n	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_FIRST_FF)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d12e      	bne.n	80056a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x17e>
        if (data == 0xff)
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2bff      	cmp	r3, #255	; 0xff
 800564e:	d110      	bne.n	8005672 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x148>
          mode_++;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005660:	601a      	str	r2, [r3, #0]
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f103 0214 	add.w	r2, r3, #20
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	e788      	b.n	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3304      	adds	r3, #4
 8005676:	4618      	mov	r0, r3
 8005678:	f7fe fc7f 	bl	8003f7a <_ZN13STM32Hardware4timeEv>
 800567c:	4602      	mov	r2, r0
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	f241 3288 	movw	r2, #5000	; 0x1388
 8005686:	4293      	cmp	r3, r2
 8005688:	bf8c      	ite	hi
 800568a:	2301      	movhi	r3, #1
 800568c:	2300      	movls	r3, #0
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	f43f af77 	beq.w	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          configured_ = false;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800569c:	3314      	adds	r3, #20
 800569e:	2200      	movs	r2, #0
 80056a0:	701a      	strb	r2, [r3, #0]
          return SPIN_TIMEOUT;
 80056a2:	f06f 0301 	mvn.w	r3, #1
 80056a6:	e17d      	b.n	80059a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x47a>
      else if (mode_ == MODE_PROTOCOL_VER)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d120      	bne.n	80056f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1cc>
        if (data == PROTOCOL_VER)
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2bfe      	cmp	r3, #254	; 0xfe
 80056b8:	d109      	bne.n	80056ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x1a4>
          mode_++;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	1c5a      	adds	r2, r3, #1
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	e75a      	b.n	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          mode_ = MODE_FIRST_FF;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]
          if (configured_ == false)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80056de:	3314      	adds	r3, #20
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	f083 0301 	eor.w	r3, r3, #1
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f43f af4b 	beq.w	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f996 	bl	8005a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>
 80056f4:	e746      	b.n	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d11b      	bne.n	800573a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x210>
        bytes_ = data;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005708:	3304      	adds	r3, #4
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	601a      	str	r2, [r3, #0]
        index_ = 0;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005714:	330c      	adds	r3, #12
 8005716:	2200      	movs	r2, #0
 8005718:	601a      	str	r2, [r3, #0]
        mode_++;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800572a:	601a      	str	r2, [r3, #0]
        checksum_ = data;               /* first byte for calculating size checksum */
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005732:	3310      	adds	r3, #16
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	e724      	b.n	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b03      	cmp	r3, #3
 8005744:	d116      	bne.n	8005774 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x24a>
        bytes_ += data << 8;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800574c:	3304      	adds	r3, #4
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	021b      	lsls	r3, r3, #8
 8005754:	441a      	add	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800575c:	3304      	adds	r3, #4
 800575e:	601a      	str	r2, [r3, #0]
        mode_++;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	e707      	b.n	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b04      	cmp	r3, #4
 800577e:	d11b      	bne.n	80057b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x28e>
        if ((checksum_ % 256) == 255)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005786:	3310      	adds	r3, #16
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	425a      	negs	r2, r3
 800578c:	b2db      	uxtb	r3, r3
 800578e:	b2d2      	uxtb	r2, r2
 8005790:	bf58      	it	pl
 8005792:	4253      	negpl	r3, r2
 8005794:	2bff      	cmp	r3, #255	; 0xff
 8005796:	d109      	bne.n	80057ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x282>
          mode_++;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057a8:	601a      	str	r2, [r3, #0]
 80057aa:	e6eb      	b.n	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	e6e5      	b.n	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b05      	cmp	r3, #5
 80057c2:	d115      	bne.n	80057f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x2c6>
        topic_ = data;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057ca:	3308      	adds	r3, #8
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	601a      	str	r2, [r3, #0]
        mode_++;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	1c5a      	adds	r2, r3, #1
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057e0:	601a      	str	r2, [r3, #0]
        checksum_ = data;               /* first byte included in checksum */
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057e8:	3310      	adds	r3, #16
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	e6c9      	b.n	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b06      	cmp	r3, #6
 80057fa:	d11f      	bne.n	800583c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x312>
        topic_ += data << 8;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005802:	3308      	adds	r3, #8
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	021b      	lsls	r3, r3, #8
 800580a:	441a      	add	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005812:	3308      	adds	r3, #8
 8005814:	601a      	str	r2, [r3, #0]
        mode_ = MODE_MESSAGE;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800581c:	2207      	movs	r2, #7
 800581e:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005826:	3304      	adds	r3, #4
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	f47f aeaa 	bne.w	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          mode_ = MODE_MSG_CHECKSUM;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005836:	2208      	movs	r2, #8
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	e6a3      	b.n	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b08      	cmp	r3, #8
 8005846:	f47f ae9d 	bne.w	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
        mode_ = MODE_FIRST_FF;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]
        if ((checksum_ % 256) == 255)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800585a:	3310      	adds	r3, #16
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	425a      	negs	r2, r3
 8005860:	b2db      	uxtb	r3, r3
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	bf58      	it	pl
 8005866:	4253      	negpl	r3, r2
 8005868:	2bff      	cmp	r3, #255	; 0xff
 800586a:	f47f ae8b 	bne.w	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005874:	3308      	adds	r3, #8
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d114      	bne.n	80058a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x37c>
            requestSyncTime();
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f8cf 	bl	8005a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>
            negotiateTopics();
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f8e9 	bl	8005a5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800588e:	3318      	adds	r3, #24
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	601a      	str	r2, [r3, #0]
            last_sync_receive_time = c_time;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800589a:	331c      	adds	r3, #28
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	601a      	str	r2, [r3, #0]
            return SPIN_ERR;
 80058a0:	f04f 33ff 	mov.w	r3, #4294967295
 80058a4:	e07e      	b.n	80059a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x47a>
          else if (topic_ == TopicInfo::ID_TIME)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80058ac:	3308      	adds	r3, #8
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b0a      	cmp	r3, #10
 80058b2:	d106      	bne.n	80058c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x398>
            syncTime(message_in);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3318      	adds	r3, #24
 80058b8:	4619      	mov	r1, r3
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f9b6 	bl	8005c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh>
 80058c0:	e660      	b.n	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80058c8:	3308      	adds	r3, #8
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b06      	cmp	r3, #6
 80058ce:	d110      	bne.n	80058f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x3c8>
            req_param_resp.deserialize(message_in);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80058d6:	3308      	adds	r3, #8
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	3218      	adds	r2, #24
 80058dc:	4611      	mov	r1, r2
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fe f95f 	bl	8003ba2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80058ea:	3304      	adds	r3, #4
 80058ec:	2201      	movs	r2, #1
 80058ee:	701a      	strb	r2, [r3, #0]
 80058f0:	e648      	b.n	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80058f8:	3308      	adds	r3, #8
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b0b      	cmp	r3, #11
 80058fe:	d106      	bne.n	800590e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x3e4>
            configured_ = false;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005906:	3314      	adds	r3, #20
 8005908:	2200      	movs	r2, #0
 800590a:	701a      	strb	r2, [r3, #0]
 800590c:	e63a      	b.n	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
            if (subscribers[topic_ - 100])
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005914:	3308      	adds	r3, #8
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	3b64      	subs	r3, #100	; 0x64
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	f43f ae2c 	beq.w	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
              subscribers[topic_ - 100]->callback(message_in);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005932:	3308      	adds	r3, #8
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	3b64      	subs	r3, #100	; 0x64
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	6858      	ldr	r0, [r3, #4]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800594a:	3308      	adds	r3, #8
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3b64      	subs	r3, #100	; 0x64
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	3218      	adds	r2, #24
 8005964:	4611      	mov	r1, r2
 8005966:	4798      	blx	r3
    while (true)
 8005968:	e60c      	b.n	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x5a>
        break;
 800596a:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005972:	3314      	adds	r3, #20
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d013      	beq.n	80059a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x478>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005980:	3318      	adds	r3, #24
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800598c:	4293      	cmp	r3, r2
 800598e:	d908      	bls.n	80059a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8spinOnceEv+0x478>
      requestSyncTime();
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f845 	bl	8005a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800599c:	3318      	adds	r3, #24
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	601a      	str	r2, [r3, #0]
    return SPIN_OK;
 80059a2:	2300      	movs	r3, #0
  }
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv>:
  Time now()
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	3304      	adds	r3, #4
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fe fadd 	bl	8003f7a <_ZN13STM32Hardware4timeEv>
 80059c0:	60f8      	str	r0, [r7, #12]
    Time current_time;
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7fd fc42 	bl	800324c <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4a13      	ldr	r2, [pc, #76]	; (8005a18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv+0x6c>)
 80059cc:	fba2 2303 	umull	r2, r3, r2, r3
 80059d0:	099a      	lsrs	r2, r3, #6
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	441a      	add	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4b0e      	ldr	r3, [pc, #56]	; (8005a18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv+0x6c>)
 80059e0:	fba3 1302 	umull	r1, r3, r3, r2
 80059e4:	099b      	lsrs	r3, r3, #6
 80059e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80059ea:	fb01 f303 	mul.w	r3, r1, r3
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	4a0a      	ldr	r2, [pc, #40]	; (8005a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3nowEv+0x70>)
 80059f2:	fb02 f203 	mul.w	r2, r2, r3
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	441a      	add	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3304      	adds	r3, #4
 8005a04:	4619      	mov	r1, r3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fad0 	bl	8005fac <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 8005a0c:	bf00      	nop
  }
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	10624dd3 	.word	0x10624dd3
 8005a1c:	000f4240 	.word	0x000f4240

08005a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15requestSyncTimeEv>:
  void requestSyncTime()
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8005a28:	f107 030c 	add.w	r3, r7, #12
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fd fc2d 	bl	800328c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f107 020c 	add.w	r2, r7, #12
 8005a3c:	210a      	movs	r1, #10
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	4798      	blx	r3
    rt_time = hardware_.time();
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	3304      	adds	r3, #4
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fe fa97 	bl	8003f7a <_ZN13STM32Hardware4timeEv>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	609a      	str	r2, [r3, #8]
  }
 8005a52:	bf00      	nop
 8005a54:	3718      	adds	r7, #24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8005a5a:	b590      	push	{r4, r7, lr}
 8005a5c:	b08b      	sub	sp, #44	; 0x2c
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8005a62:	f107 030c 	add.w	r3, r7, #12
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fd fcfa 	bl	8003460 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	2b18      	cmp	r3, #24
 8005a74:	dc5e      	bgt.n	8005b34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0xda>
    {
      if (publishers[i] != 0) // non-empty slot
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a7a:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d052      	beq.n	8005b2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0xd2>
      {
        ti.topic_id = publishers[i]->id_;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a8a:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a9c:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aac:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab4:	6859      	ldr	r1, [r3, #4]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aba:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3308      	adds	r3, #8
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4608      	mov	r0, r1
 8005acc:	4798      	blx	r3
 8005ace:	4603      	mov	r3, r0
 8005ad0:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad6:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ade:	6859      	ldr	r1, [r3, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae4:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	330c      	adds	r3, #12
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4608      	mov	r0, r1
 8005af6:	4798      	blx	r3
 8005af8:	4603      	mov	r3, r0
 8005afa:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8005afc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b00:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681c      	ldr	r4, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b0c:	f202 4206 	addw	r2, r2, #1030	; 0x406
 8005b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fe f9f7 	bl	8003f08 <_ZN3ros9Publisher15getEndpointTypeEv>
 8005b1a:	4601      	mov	r1, r0
 8005b1c:	f107 030c 	add.w	r3, r7, #12
 8005b20:	461a      	mov	r2, r3
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	47a0      	blx	r4
        HAL_Delay(50);
 8005b26:	2032      	movs	r0, #50	; 0x32
 8005b28:	f000 fa90 	bl	800604c <HAL_Delay>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	3301      	adds	r3, #1
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24
 8005b32:	e79d      	b.n	8005a70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005b34:	2300      	movs	r3, #0
 8005b36:	627b      	str	r3, [r7, #36]	; 0x24
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	2b18      	cmp	r3, #24
 8005b3c:	dc6b      	bgt.n	8005c16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0x1bc>
    {
      if (subscribers[i] != 0) // non-empty slot
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d05e      	beq.n	8005c0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0x1b4>
      {
        ti.topic_id = subscribers[i]->id_;
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	6859      	ldr	r1, [r3, #4]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3308      	adds	r3, #8
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4608      	mov	r0, r1
 8005b9a:	4798      	blx	r3
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	6859      	ldr	r1, [r3, #4]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	330c      	adds	r3, #12
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4608      	mov	r0, r1
 8005bc4:	4798      	blx	r3
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8005bca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005bce:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681c      	ldr	r4, [r3, #0]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	6859      	ldr	r1, [r3, #4]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4608      	mov	r0, r1
 8005bfa:	4798      	blx	r3
 8005bfc:	4601      	mov	r1, r0
 8005bfe:	f107 030c 	add.w	r3, r7, #12
 8005c02:	461a      	mov	r2, r3
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	47a0      	blx	r4
        HAL_Delay(50);
 8005c08:	2032      	movs	r0, #50	; 0x32
 8005c0a:	f000 fa1f 	bl	800604c <HAL_Delay>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	3301      	adds	r3, #1
 8005c12:	627b      	str	r3, [r7, #36]	; 0x24
 8005c14:	e790      	b.n	8005b38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE15negotiateTopicsEv+0xde>
      }
    }
    configured_ = true;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005c1c:	3314      	adds	r3, #20
 8005c1e:	2201      	movs	r2, #1
 8005c20:	701a      	strb	r2, [r3, #0]
  }
 8005c22:	bf00      	nop
 8005c24:	372c      	adds	r7, #44	; 0x2c
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd90      	pop	{r4, r7, pc}
	...

08005c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8005c36:	f107 0308 	add.w	r3, r7, #8
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fd fb26 	bl	800328c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3304      	adds	r3, #4
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7fe f998 	bl	8003f7a <_ZN13STM32Hardware4timeEv>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8005c54:	f107 0308 	add.w	r3, r7, #8
 8005c58:	6839      	ldr	r1, [r7, #0]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fd fb85 	bl	800336a <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	4915      	ldr	r1, [pc, #84]	; (8005cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh+0x90>)
 8005c66:	fba1 1303 	umull	r1, r3, r1, r3
 8005c6a:	099b      	lsrs	r3, r3, #6
 8005c6c:	4413      	add	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8005c70:	6939      	ldr	r1, [r7, #16]
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	4b11      	ldr	r3, [pc, #68]	; (8005cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh+0x90>)
 8005c76:	fba3 0302 	umull	r0, r3, r3, r2
 8005c7a:	099b      	lsrs	r3, r3, #6
 8005c7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c80:	fb00 f303 	mul.w	r3, r0, r3
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	4a0e      	ldr	r2, [pc, #56]	; (8005cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8syncTimeEPh+0x94>)
 8005c88:	fb02 f303 	mul.w	r3, r2, r3
 8005c8c:	440b      	add	r3, r1
 8005c8e:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8005c90:	f107 0308 	add.w	r3, r7, #8
 8005c94:	3304      	adds	r3, #4
 8005c96:	4619      	mov	r1, r3
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 f8a7 	bl	8005dec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fe f969 	bl	8003f7a <_ZN13STM32Hardware4timeEv>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005cb0:	331c      	adds	r3, #28
 8005cb2:	601a      	str	r2, [r3, #0]
  }
 8005cb4:	bf00      	nop
 8005cb6:	3718      	adds	r7, #24
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	10624dd3 	.word	0x10624dd3
 8005cc0:	000f4240 	.word	0x000f4240

08005cc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b088      	sub	sp, #32
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	2b63      	cmp	r3, #99	; 0x63
 8005cd4:	dd0b      	ble.n	8005cee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x2a>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005cdc:	3314      	adds	r3, #20
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	f083 0301 	eor.w	r3, r3, #1
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	e077      	b.n	8005dde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	f602 0218 	addw	r2, r2, #2072	; 0x818
 8005cfa:	3207      	adds	r2, #7
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	4798      	blx	r3
 8005d02:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	22ff      	movs	r2, #255	; 0xff
 8005d08:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818
    message_out[1] = PROTOCOL_VER;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	22fe      	movs	r2, #254	; 0xfe
 8005d10:	f883 2819 	strb.w	r2, [r3, #2073]	; 0x819
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f883 281a 	strb.w	r2, [r3, #2074]	; 0x81a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	121b      	asrs	r3, r3, #8
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f883 281b 	strb.w	r2, [r3, #2075]	; 0x81b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f893 281a 	ldrb.w	r2, [r3, #2074]	; 0x81a
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f893 381b 	ldrb.w	r3, [r3, #2075]	; 0x81b
 8005d38:	4413      	add	r3, r2
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	43db      	mvns	r3, r3
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f883 281c 	strb.w	r2, [r3, #2076]	; 0x81c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f883 281d 	strb.w	r2, [r3, #2077]	; 0x81d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	b21b      	sxth	r3, r3
 8005d54:	121b      	asrs	r3, r3, #8
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f883 281e 	strb.w	r2, [r3, #2078]	; 0x81e

    /* calculate checksum */
    int chk = 0;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005d62:	2305      	movs	r3, #5
 8005d64:	61bb      	str	r3, [r7, #24]
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	3307      	adds	r3, #7
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	da0d      	bge.n	8005d8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	4413      	add	r3, r2
 8005d76:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	4413      	add	r3, r2
 8005d82:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	3301      	adds	r3, #1
 8005d88:	61bb      	str	r3, [r7, #24]
 8005d8a:	e7ec      	b.n	8005d66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	3307      	adds	r3, #7
 8005d90:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	425a      	negs	r2, r3
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	bf58      	it	pl
 8005d9c:	4253      	negpl	r3, r2
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	1c59      	adds	r1, r3, #1
 8005da4:	6179      	str	r1, [r7, #20]
 8005da6:	43d2      	mvns	r2, r2
 8005da8:	b2d1      	uxtb	r1, r2
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	4413      	add	r3, r2
 8005dae:	460a      	mov	r2, r1
 8005db0:	f883 2818 	strb.w	r2, [r3, #2072]	; 0x818

    if (l <= OUTPUT_SIZE)
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dba:	dc0a      	bgt.n	8005dd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	1d18      	adds	r0, r3, #4
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	f7fe f8c6 	bl	8003f5a <_ZN13STM32Hardware5writeEPhi>
      return l;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	e005      	b.n	8005dde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8005dd2:	4905      	ldr	r1, [pc, #20]	; (8005de8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE7publishEiPKNS_3MsgE+0x124>)
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 f847 	bl	8005e68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8logerrorEPKc>
      return -1;
 8005dda:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8005dde:	4618      	mov	r0, r3
 8005de0:	3720      	adds	r7, #32
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	0800c55c 	.word	0x0800c55c

08005dec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	3304      	adds	r3, #4
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7fe f8bd 	bl	8003f7a <_ZN13STM32Hardware4timeEv>
 8005e00:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4914      	ldr	r1, [pc, #80]	; (8005e5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE+0x70>)
 8005e0a:	fba1 1303 	umull	r1, r3, r1, r3
 8005e0e:	099b      	lsrs	r3, r3, #6
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	1e5a      	subs	r2, r3, #1
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	6859      	ldr	r1, [r3, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4b0f      	ldr	r3, [pc, #60]	; (8005e5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE+0x70>)
 8005e20:	fba3 0302 	umull	r0, r3, r3, r2
 8005e24:	099b      	lsrs	r3, r3, #6
 8005e26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e2a:	fb00 f303 	mul.w	r3, r0, r3
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	4a0b      	ldr	r2, [pc, #44]	; (8005e60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE+0x74>)
 8005e32:	fb02 f303 	mul.w	r3, r2, r3
 8005e36:	1aca      	subs	r2, r1, r3
 8005e38:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE6setNowERNS_4TimeE+0x78>)
 8005e3a:	4413      	add	r3, r2
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f103 020c 	add.w	r2, r3, #12
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	3310      	adds	r3, #16
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	f000 f8ad 	bl	8005fac <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8005e52:	bf00      	nop
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	10624dd3 	.word	0x10624dd3
 8005e60:	000f4240 	.word	0x000f4240
 8005e64:	3b9aca00 	.word	0x3b9aca00

08005e68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	2103      	movs	r1, #3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f804 	bl	8005e84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3logEcPKc>
  }
 8005e7c:	bf00      	nop
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE3logEcPKc>:
  void log(char byte, const char * msg)
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8005e92:	f107 0314 	add.w	r3, r7, #20
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fd fca2 	bl	80037e0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8005e9c:	7afb      	ldrb	r3, [r7, #11]
 8005e9e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f107 0214 	add.w	r2, r7, #20
 8005eae:	2107      	movs	r1, #7
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	4798      	blx	r3
  }
 8005eb4:	bf00      	nop
 8005eb6:	3720      	adds	r7, #32
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <_Z41__static_initialization_and_destruction_0ii>:
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d134      	bne.n	8005f36 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d12f      	bne.n	8005f36 <_Z41__static_initialization_and_destruction_0ii+0x7a>
sensor_msgs::Imu imu_msg;
 8005ed6:	481a      	ldr	r0, [pc, #104]	; (8005f40 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8005ed8:	f7fe fb40 	bl	800455c <_ZN11sensor_msgs3ImuC1Ev>
sensor_msgs::MagneticField mag_msg;
 8005edc:	4819      	ldr	r0, [pc, #100]	; (8005f44 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8005ede:	f7fe fcb1 	bl	8004844 <_ZN11sensor_msgs13MagneticFieldC1Ev>
sensor_msgs::NavSatFix fix_msg;
 8005ee2:	4819      	ldr	r0, [pc, #100]	; (8005f48 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8005ee4:	f7fe fdfc 	bl	8004ae0 <_ZN11sensor_msgs9NavSatFixC1Ev>
sensor_msgs::FluidPressure air_ps_msg;
 8005ee8:	4818      	ldr	r0, [pc, #96]	; (8005f4c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8005eea:	f7fe ff27 	bl	8004d3c <_ZN11sensor_msgs13FluidPressureC1Ev>
sensor_msgs::Temperature temp_msg;
 8005eee:	4818      	ldr	r0, [pc, #96]	; (8005f50 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8005ef0:	f7fe ffc0 	bl	8004e74 <_ZN11sensor_msgs11TemperatureC1Ev>
ros::NodeHandle nh;
 8005ef4:	4817      	ldr	r0, [pc, #92]	; (8005f54 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8005ef6:	f7ff fa3b 	bl	8005370 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EEC1Ev>
ros::Publisher imu_pub("/imu",&imu_msg);
 8005efa:	2300      	movs	r3, #0
 8005efc:	4a10      	ldr	r2, [pc, #64]	; (8005f40 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8005efe:	4916      	ldr	r1, [pc, #88]	; (8005f58 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8005f00:	4816      	ldr	r0, [pc, #88]	; (8005f5c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8005f02:	f7fd ffd7 	bl	8003eb4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher mag_pub("/mag",&mag_msg);
 8005f06:	2300      	movs	r3, #0
 8005f08:	4a0e      	ldr	r2, [pc, #56]	; (8005f44 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8005f0a:	4915      	ldr	r1, [pc, #84]	; (8005f60 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8005f0c:	4815      	ldr	r0, [pc, #84]	; (8005f64 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8005f0e:	f7fd ffd1 	bl	8003eb4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher gps_pub("/fix",&fix_msg);
 8005f12:	2300      	movs	r3, #0
 8005f14:	4a0c      	ldr	r2, [pc, #48]	; (8005f48 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8005f16:	4914      	ldr	r1, [pc, #80]	; (8005f68 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8005f18:	4814      	ldr	r0, [pc, #80]	; (8005f6c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8005f1a:	f7fd ffcb 	bl	8003eb4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pressure_pub("/air_pressure",&air_ps_msg);
 8005f1e:	2300      	movs	r3, #0
 8005f20:	4a0a      	ldr	r2, [pc, #40]	; (8005f4c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8005f22:	4913      	ldr	r1, [pc, #76]	; (8005f70 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8005f24:	4813      	ldr	r0, [pc, #76]	; (8005f74 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8005f26:	f7fd ffc5 	bl	8003eb4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher temp_pub("/temperature",&temp_msg);
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	4a08      	ldr	r2, [pc, #32]	; (8005f50 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8005f2e:	4912      	ldr	r1, [pc, #72]	; (8005f78 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8005f30:	4812      	ldr	r0, [pc, #72]	; (8005f7c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8005f32:	f7fd ffbf 	bl	8003eb4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8005f36:	bf00      	nop
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	20000474 	.word	0x20000474
 8005f44:	2000052c 	.word	0x2000052c
 8005f48:	20000578 	.word	0x20000578
 8005f4c:	200005cc 	.word	0x200005cc
 8005f50:	200005ec 	.word	0x200005ec
 8005f54:	2000060c 	.word	0x2000060c
 8005f58:	0800c598 	.word	0x0800c598
 8005f5c:	2000173c 	.word	0x2000173c
 8005f60:	0800c5a0 	.word	0x0800c5a0
 8005f64:	20001750 	.word	0x20001750
 8005f68:	0800c5a8 	.word	0x0800c5a8
 8005f6c:	20001764 	.word	0x20001764
 8005f70:	0800c5b0 	.word	0x0800c5b0
 8005f74:	20001778 	.word	0x20001778
 8005f78:	0800c5c0 	.word	0x0800c5c0
 8005f7c:	2000178c 	.word	0x2000178c

08005f80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi2048ELi2048EE9connectedEv>:
  virtual bool connected()
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
    return configured_;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005f8e:	3314      	adds	r3, #20
 8005f90:	781b      	ldrb	r3, [r3, #0]
  };
 8005f92:	4618      	mov	r0, r3
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bc80      	pop	{r7}
 8005f9a:	4770      	bx	lr

08005f9c <_GLOBAL__sub_I_imu_msg>:
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005fa4:	2001      	movs	r0, #1
 8005fa6:	f7ff ff89 	bl	8005ebc <_Z41__static_initialization_and_destruction_0ii>
 8005faa:	bd80      	pop	{r7, pc}

08005fac <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	0a5a      	lsrs	r2, r3, #9
 8005fbc:	490f      	ldr	r1, [pc, #60]	; (8005ffc <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8005fbe:	fba1 1202 	umull	r1, r2, r1, r2
 8005fc2:	09d2      	lsrs	r2, r2, #7
 8005fc4:	490e      	ldr	r1, [pc, #56]	; (8006000 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8005fc6:	fb01 f202 	mul.w	r2, r1, r2
 8005fca:	1a9b      	subs	r3, r3, r2
 8005fcc:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	0a5b      	lsrs	r3, r3, #9
 8005fd4:	4a09      	ldr	r2, [pc, #36]	; (8005ffc <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8005fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fda:	09db      	lsrs	r3, r3, #7
 8005fdc:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	441a      	add	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	601a      	str	r2, [r3, #0]
}
 8005ff0:	bf00      	nop
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bc80      	pop	{r7}
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	00044b83 	.word	0x00044b83
 8006000:	3b9aca00 	.word	0x3b9aca00

08006004 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006004:	4a07      	ldr	r2, [pc, #28]	; (8006024 <HAL_Init+0x20>)
{
 8006006:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006008:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800600a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800600c:	f043 0310 	orr.w	r3, r3, #16
 8006010:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006012:	f000 f82d 	bl	8006070 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006016:	2000      	movs	r0, #0
 8006018:	f7fc f97a 	bl	8002310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800601c:	f7fc f898 	bl	8002150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8006020:	2000      	movs	r0, #0
 8006022:	bd08      	pop	{r3, pc}
 8006024:	40022000 	.word	0x40022000

08006028 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8006028:	4a03      	ldr	r2, [pc, #12]	; (8006038 <HAL_IncTick+0x10>)
 800602a:	4b04      	ldr	r3, [pc, #16]	; (800603c <HAL_IncTick+0x14>)
 800602c:	6811      	ldr	r1, [r2, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	440b      	add	r3, r1
 8006032:	6013      	str	r3, [r2, #0]
}
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	20002054 	.word	0x20002054
 800603c:	2000003d 	.word	0x2000003d

08006040 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006040:	4b01      	ldr	r3, [pc, #4]	; (8006048 <HAL_GetTick+0x8>)
 8006042:	6818      	ldr	r0, [r3, #0]
}
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	20002054 	.word	0x20002054

0800604c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006050:	f7ff fff6 	bl	8006040 <HAL_GetTick>
 8006054:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006056:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8006058:	bf1e      	ittt	ne
 800605a:	4b04      	ldrne	r3, [pc, #16]	; (800606c <HAL_Delay+0x20>)
 800605c:	781b      	ldrbne	r3, [r3, #0]
 800605e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006060:	f7ff ffee 	bl	8006040 <HAL_GetTick>
 8006064:	1b40      	subs	r0, r0, r5
 8006066:	42a0      	cmp	r0, r4
 8006068:	d3fa      	bcc.n	8006060 <HAL_Delay+0x14>
  {
  }
}
 800606a:	bd38      	pop	{r3, r4, r5, pc}
 800606c:	2000003d 	.word	0x2000003d

08006070 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006070:	4a07      	ldr	r2, [pc, #28]	; (8006090 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006072:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006074:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006076:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800607a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800607e:	041b      	lsls	r3, r3, #16
 8006080:	0c1b      	lsrs	r3, r3, #16
 8006082:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800608a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800608c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800608e:	4770      	bx	lr
 8006090:	e000ed00 	.word	0xe000ed00

08006094 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006094:	4b17      	ldr	r3, [pc, #92]	; (80060f4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006096:	b570      	push	{r4, r5, r6, lr}
 8006098:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800609a:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800609e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80060a2:	f1c4 0507 	rsb	r5, r4, #7
 80060a6:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060a8:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80060ac:	bf28      	it	cs
 80060ae:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060b0:	2b06      	cmp	r3, #6
 80060b2:	bf98      	it	ls
 80060b4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060b6:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060ba:	bf88      	it	hi
 80060bc:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060be:	ea21 0303 	bic.w	r3, r1, r3
 80060c2:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060c4:	fa06 f404 	lsl.w	r4, r6, r4
 80060c8:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80060cc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060ce:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060d2:	bfa8      	it	ge
 80060d4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80060d8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060dc:	bfb8      	it	lt
 80060de:	4a06      	ldrlt	r2, [pc, #24]	; (80060f8 <HAL_NVIC_SetPriority+0x64>)
 80060e0:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060e2:	bfab      	itete	ge
 80060e4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060e8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060ec:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060f0:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80060f2:	bd70      	pop	{r4, r5, r6, pc}
 80060f4:	e000ed00 	.word	0xe000ed00
 80060f8:	e000ed14 	.word	0xe000ed14

080060fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80060fc:	2800      	cmp	r0, #0
 80060fe:	db08      	blt.n	8006112 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006100:	2301      	movs	r3, #1
 8006102:	0942      	lsrs	r2, r0, #5
 8006104:	f000 001f 	and.w	r0, r0, #31
 8006108:	fa03 f000 	lsl.w	r0, r3, r0
 800610c:	4b01      	ldr	r3, [pc, #4]	; (8006114 <HAL_NVIC_EnableIRQ+0x18>)
 800610e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006112:	4770      	bx	lr
 8006114:	e000e100 	.word	0xe000e100

08006118 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006118:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800611a:	b330      	cbz	r0, 800616a <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800611c:	2214      	movs	r2, #20
 800611e:	6801      	ldr	r1, [r0, #0]
 8006120:	4b13      	ldr	r3, [pc, #76]	; (8006170 <HAL_DMA_Init+0x58>)
 8006122:	440b      	add	r3, r1
 8006124:	fbb3 f3f2 	udiv	r3, r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800612c:	4b11      	ldr	r3, [pc, #68]	; (8006174 <HAL_DMA_Init+0x5c>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800612e:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8006130:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006132:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8006136:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006138:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800613a:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800613e:	4323      	orrs	r3, r4
 8006140:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006142:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006146:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006148:	6944      	ldr	r4, [r0, #20]
 800614a:	4323      	orrs	r3, r4
 800614c:	6984      	ldr	r4, [r0, #24]
 800614e:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8006150:	69c4      	ldr	r4, [r0, #28]
 8006152:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8006154:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006156:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006158:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800615a:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 800615c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006160:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006162:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8006166:	4618      	mov	r0, r3
}
 8006168:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800616a:	2001      	movs	r0, #1
 800616c:	e7fc      	b.n	8006168 <HAL_DMA_Init+0x50>
 800616e:	bf00      	nop
 8006170:	bffdfff8 	.word	0xbffdfff8
 8006174:	40020000 	.word	0x40020000

08006178 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006178:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800617a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800617e:	2c01      	cmp	r4, #1
 8006180:	d035      	beq.n	80061ee <HAL_DMA_Start_IT+0x76>
 8006182:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006184:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8006188:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800618c:	42a5      	cmp	r5, r4
 800618e:	f04f 0600 	mov.w	r6, #0
 8006192:	f04f 0402 	mov.w	r4, #2
 8006196:	d128      	bne.n	80061ea <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006198:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800619c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800619e:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80061a0:	6826      	ldr	r6, [r4, #0]
 80061a2:	f026 0601 	bic.w	r6, r6, #1
 80061a6:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80061a8:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 80061ac:	40bd      	lsls	r5, r7
 80061ae:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80061b0:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061b2:	6843      	ldr	r3, [r0, #4]
 80061b4:	6805      	ldr	r5, [r0, #0]
 80061b6:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80061b8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80061ba:	bf0b      	itete	eq
 80061bc:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80061be:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80061c0:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80061c2:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80061c4:	b14b      	cbz	r3, 80061da <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 80061cc:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80061ce:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80061d0:	682b      	ldr	r3, [r5, #0]
 80061d2:	f043 0301 	orr.w	r3, r3, #1
 80061d6:	602b      	str	r3, [r5, #0]
}
 80061d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	f023 0304 	bic.w	r3, r3, #4
 80061e0:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	f043 030a 	orr.w	r3, r3, #10
 80061e8:	e7f0      	b.n	80061cc <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 80061ea:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80061ee:	2002      	movs	r0, #2
 80061f0:	e7f2      	b.n	80061d8 <HAL_DMA_Start_IT+0x60>
	...

080061f4 <HAL_DMA_IRQHandler>:
{
 80061f4:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80061f6:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80061f8:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80061fa:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80061fc:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80061fe:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006200:	4095      	lsls	r5, r2
 8006202:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8006204:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006206:	d032      	beq.n	800626e <HAL_DMA_IRQHandler+0x7a>
 8006208:	074d      	lsls	r5, r1, #29
 800620a:	d530      	bpl.n	800626e <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006210:	bf5e      	ittt	pl
 8006212:	681a      	ldrpl	r2, [r3, #0]
 8006214:	f022 0204 	bicpl.w	r2, r2, #4
 8006218:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800621a:	4a3e      	ldr	r2, [pc, #248]	; (8006314 <HAL_DMA_IRQHandler+0x120>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d019      	beq.n	8006254 <HAL_DMA_IRQHandler+0x60>
 8006220:	3214      	adds	r2, #20
 8006222:	4293      	cmp	r3, r2
 8006224:	d018      	beq.n	8006258 <HAL_DMA_IRQHandler+0x64>
 8006226:	3214      	adds	r2, #20
 8006228:	4293      	cmp	r3, r2
 800622a:	d017      	beq.n	800625c <HAL_DMA_IRQHandler+0x68>
 800622c:	3214      	adds	r2, #20
 800622e:	4293      	cmp	r3, r2
 8006230:	d017      	beq.n	8006262 <HAL_DMA_IRQHandler+0x6e>
 8006232:	3214      	adds	r2, #20
 8006234:	4293      	cmp	r3, r2
 8006236:	d017      	beq.n	8006268 <HAL_DMA_IRQHandler+0x74>
 8006238:	3214      	adds	r2, #20
 800623a:	4293      	cmp	r3, r2
 800623c:	bf0c      	ite	eq
 800623e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8006242:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8006246:	4a34      	ldr	r2, [pc, #208]	; (8006318 <HAL_DMA_IRQHandler+0x124>)
 8006248:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800624a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 800624c:	2b00      	cmp	r3, #0
 800624e:	d05e      	beq.n	800630e <HAL_DMA_IRQHandler+0x11a>
}
 8006250:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8006252:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006254:	2304      	movs	r3, #4
 8006256:	e7f6      	b.n	8006246 <HAL_DMA_IRQHandler+0x52>
 8006258:	2340      	movs	r3, #64	; 0x40
 800625a:	e7f4      	b.n	8006246 <HAL_DMA_IRQHandler+0x52>
 800625c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006260:	e7f1      	b.n	8006246 <HAL_DMA_IRQHandler+0x52>
 8006262:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006266:	e7ee      	b.n	8006246 <HAL_DMA_IRQHandler+0x52>
 8006268:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800626c:	e7eb      	b.n	8006246 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800626e:	2502      	movs	r5, #2
 8006270:	4095      	lsls	r5, r2
 8006272:	4225      	tst	r5, r4
 8006274:	d035      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xee>
 8006276:	078d      	lsls	r5, r1, #30
 8006278:	d533      	bpl.n	80062e2 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	0694      	lsls	r4, r2, #26
 800627e:	d406      	bmi.n	800628e <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	f022 020a 	bic.w	r2, r2, #10
 8006286:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8006288:	2201      	movs	r2, #1
 800628a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800628e:	4a21      	ldr	r2, [pc, #132]	; (8006314 <HAL_DMA_IRQHandler+0x120>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d019      	beq.n	80062c8 <HAL_DMA_IRQHandler+0xd4>
 8006294:	3214      	adds	r2, #20
 8006296:	4293      	cmp	r3, r2
 8006298:	d018      	beq.n	80062cc <HAL_DMA_IRQHandler+0xd8>
 800629a:	3214      	adds	r2, #20
 800629c:	4293      	cmp	r3, r2
 800629e:	d017      	beq.n	80062d0 <HAL_DMA_IRQHandler+0xdc>
 80062a0:	3214      	adds	r2, #20
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d017      	beq.n	80062d6 <HAL_DMA_IRQHandler+0xe2>
 80062a6:	3214      	adds	r2, #20
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d017      	beq.n	80062dc <HAL_DMA_IRQHandler+0xe8>
 80062ac:	3214      	adds	r2, #20
 80062ae:	4293      	cmp	r3, r2
 80062b0:	bf0c      	ite	eq
 80062b2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80062b6:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80062ba:	4a17      	ldr	r2, [pc, #92]	; (8006318 <HAL_DMA_IRQHandler+0x124>)
 80062bc:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80062be:	2300      	movs	r3, #0
 80062c0:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80062c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80062c6:	e7c1      	b.n	800624c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80062c8:	2302      	movs	r3, #2
 80062ca:	e7f6      	b.n	80062ba <HAL_DMA_IRQHandler+0xc6>
 80062cc:	2320      	movs	r3, #32
 80062ce:	e7f4      	b.n	80062ba <HAL_DMA_IRQHandler+0xc6>
 80062d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062d4:	e7f1      	b.n	80062ba <HAL_DMA_IRQHandler+0xc6>
 80062d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80062da:	e7ee      	b.n	80062ba <HAL_DMA_IRQHandler+0xc6>
 80062dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062e0:	e7eb      	b.n	80062ba <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80062e2:	2508      	movs	r5, #8
 80062e4:	4095      	lsls	r5, r2
 80062e6:	4225      	tst	r5, r4
 80062e8:	d011      	beq.n	800630e <HAL_DMA_IRQHandler+0x11a>
 80062ea:	0709      	lsls	r1, r1, #28
 80062ec:	d50f      	bpl.n	800630e <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062ee:	6819      	ldr	r1, [r3, #0]
 80062f0:	f021 010e 	bic.w	r1, r1, #14
 80062f4:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80062f6:	2301      	movs	r3, #1
 80062f8:	fa03 f202 	lsl.w	r2, r3, r2
 80062fc:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80062fe:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8006300:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8006304:	2300      	movs	r3, #0
 8006306:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800630a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800630c:	e79e      	b.n	800624c <HAL_DMA_IRQHandler+0x58>
}
 800630e:	bc70      	pop	{r4, r5, r6}
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	40020008 	.word	0x40020008
 8006318:	40020000 	.word	0x40020000

0800631c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800631c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006320:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8006322:	4626      	mov	r6, r4
 8006324:	4b65      	ldr	r3, [pc, #404]	; (80064bc <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006326:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80064cc <HAL_GPIO_Init+0x1b0>
 800632a:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80064d0 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800632e:	680a      	ldr	r2, [r1, #0]
 8006330:	fa32 f506 	lsrs.w	r5, r2, r6
 8006334:	d102      	bne.n	800633c <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8006336:	b003      	add	sp, #12
 8006338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800633c:	f04f 0801 	mov.w	r8, #1
 8006340:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006344:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8006348:	4590      	cmp	r8, r2
 800634a:	d17e      	bne.n	800644a <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 800634c:	684d      	ldr	r5, [r1, #4]
 800634e:	2d12      	cmp	r5, #18
 8006350:	f000 80a9 	beq.w	80064a6 <HAL_GPIO_Init+0x18a>
 8006354:	f200 8082 	bhi.w	800645c <HAL_GPIO_Init+0x140>
 8006358:	2d02      	cmp	r5, #2
 800635a:	f000 80a1 	beq.w	80064a0 <HAL_GPIO_Init+0x184>
 800635e:	d876      	bhi.n	800644e <HAL_GPIO_Init+0x132>
 8006360:	2d00      	cmp	r5, #0
 8006362:	f000 8088 	beq.w	8006476 <HAL_GPIO_Init+0x15a>
 8006366:	2d01      	cmp	r5, #1
 8006368:	f000 8098 	beq.w	800649c <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800636c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006370:	2aff      	cmp	r2, #255	; 0xff
 8006372:	bf93      	iteet	ls
 8006374:	4682      	movls	sl, r0
 8006376:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800637a:	3d08      	subhi	r5, #8
 800637c:	f8d0 b000 	ldrls.w	fp, [r0]
 8006380:	bf92      	itee	ls
 8006382:	00b5      	lslls	r5, r6, #2
 8006384:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8006388:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800638a:	fa09 f805 	lsl.w	r8, r9, r5
 800638e:	ea2b 0808 	bic.w	r8, fp, r8
 8006392:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006396:	bf88      	it	hi
 8006398:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800639c:	ea48 0505 	orr.w	r5, r8, r5
 80063a0:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80063a4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80063a8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80063ac:	d04d      	beq.n	800644a <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80063ae:	4f44      	ldr	r7, [pc, #272]	; (80064c0 <HAL_GPIO_Init+0x1a4>)
 80063b0:	f026 0803 	bic.w	r8, r6, #3
 80063b4:	69bd      	ldr	r5, [r7, #24]
 80063b6:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80063ba:	f045 0501 	orr.w	r5, r5, #1
 80063be:	61bd      	str	r5, [r7, #24]
 80063c0:	69bd      	ldr	r5, [r7, #24]
 80063c2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80063c6:	f005 0501 	and.w	r5, r5, #1
 80063ca:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80063cc:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80063d0:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80063d2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80063d6:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80063da:	fa09 f90b 	lsl.w	r9, r9, fp
 80063de:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80063e2:	4d38      	ldr	r5, [pc, #224]	; (80064c4 <HAL_GPIO_Init+0x1a8>)
 80063e4:	42a8      	cmp	r0, r5
 80063e6:	d063      	beq.n	80064b0 <HAL_GPIO_Init+0x194>
 80063e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80063ec:	42a8      	cmp	r0, r5
 80063ee:	d061      	beq.n	80064b4 <HAL_GPIO_Init+0x198>
 80063f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80063f4:	42a8      	cmp	r0, r5
 80063f6:	d05f      	beq.n	80064b8 <HAL_GPIO_Init+0x19c>
 80063f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80063fc:	42a8      	cmp	r0, r5
 80063fe:	bf0c      	ite	eq
 8006400:	2503      	moveq	r5, #3
 8006402:	2504      	movne	r5, #4
 8006404:	fa05 f50b 	lsl.w	r5, r5, fp
 8006408:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800640c:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8006410:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006412:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8006416:	bf14      	ite	ne
 8006418:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800641a:	4395      	biceq	r5, r2
 800641c:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800641e:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006420:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8006424:	bf14      	ite	ne
 8006426:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006428:	4395      	biceq	r5, r2
 800642a:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800642c:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800642e:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8006432:	bf14      	ite	ne
 8006434:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006436:	4395      	biceq	r5, r2
 8006438:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800643a:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800643c:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8006440:	bf14      	ite	ne
 8006442:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006444:	ea25 0202 	biceq.w	r2, r5, r2
 8006448:	60da      	str	r2, [r3, #12]
	position++;
 800644a:	3601      	adds	r6, #1
 800644c:	e76f      	b.n	800632e <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 800644e:	2d03      	cmp	r5, #3
 8006450:	d022      	beq.n	8006498 <HAL_GPIO_Init+0x17c>
 8006452:	2d11      	cmp	r5, #17
 8006454:	d18a      	bne.n	800636c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006456:	68cc      	ldr	r4, [r1, #12]
 8006458:	3404      	adds	r4, #4
          break;
 800645a:	e787      	b.n	800636c <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800645c:	4f1a      	ldr	r7, [pc, #104]	; (80064c8 <HAL_GPIO_Init+0x1ac>)
 800645e:	42bd      	cmp	r5, r7
 8006460:	d009      	beq.n	8006476 <HAL_GPIO_Init+0x15a>
 8006462:	d812      	bhi.n	800648a <HAL_GPIO_Init+0x16e>
 8006464:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80064d4 <HAL_GPIO_Init+0x1b8>
 8006468:	454d      	cmp	r5, r9
 800646a:	d004      	beq.n	8006476 <HAL_GPIO_Init+0x15a>
 800646c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8006470:	454d      	cmp	r5, r9
 8006472:	f47f af7b 	bne.w	800636c <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006476:	688c      	ldr	r4, [r1, #8]
 8006478:	b1c4      	cbz	r4, 80064ac <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800647a:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 800647c:	bf0c      	ite	eq
 800647e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8006482:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006486:	2408      	movs	r4, #8
 8006488:	e770      	b.n	800636c <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800648a:	4565      	cmp	r5, ip
 800648c:	d0f3      	beq.n	8006476 <HAL_GPIO_Init+0x15a>
 800648e:	4575      	cmp	r5, lr
 8006490:	d0f1      	beq.n	8006476 <HAL_GPIO_Init+0x15a>
 8006492:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80064d8 <HAL_GPIO_Init+0x1bc>
 8006496:	e7eb      	b.n	8006470 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006498:	2400      	movs	r4, #0
 800649a:	e767      	b.n	800636c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800649c:	68cc      	ldr	r4, [r1, #12]
          break;
 800649e:	e765      	b.n	800636c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80064a0:	68cc      	ldr	r4, [r1, #12]
 80064a2:	3408      	adds	r4, #8
          break;
 80064a4:	e762      	b.n	800636c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80064a6:	68cc      	ldr	r4, [r1, #12]
 80064a8:	340c      	adds	r4, #12
          break;
 80064aa:	e75f      	b.n	800636c <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80064ac:	2404      	movs	r4, #4
 80064ae:	e75d      	b.n	800636c <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80064b0:	2500      	movs	r5, #0
 80064b2:	e7a7      	b.n	8006404 <HAL_GPIO_Init+0xe8>
 80064b4:	2501      	movs	r5, #1
 80064b6:	e7a5      	b.n	8006404 <HAL_GPIO_Init+0xe8>
 80064b8:	2502      	movs	r5, #2
 80064ba:	e7a3      	b.n	8006404 <HAL_GPIO_Init+0xe8>
 80064bc:	40010400 	.word	0x40010400
 80064c0:	40021000 	.word	0x40021000
 80064c4:	40010800 	.word	0x40010800
 80064c8:	10210000 	.word	0x10210000
 80064cc:	10310000 	.word	0x10310000
 80064d0:	10320000 	.word	0x10320000
 80064d4:	10110000 	.word	0x10110000
 80064d8:	10220000 	.word	0x10220000

080064dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80064dc:	b10a      	cbz	r2, 80064e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80064de:	6101      	str	r1, [r0, #16]
  }
}
 80064e0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80064e2:	0409      	lsls	r1, r1, #16
 80064e4:	e7fb      	b.n	80064de <HAL_GPIO_WritePin+0x2>

080064e6 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064e6:	6801      	ldr	r1, [r0, #0]
 80064e8:	2200      	movs	r2, #0
 80064ea:	694b      	ldr	r3, [r1, #20]
 80064ec:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80064f0:	d010      	beq.n	8006514 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064f2:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80064f6:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80064f8:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80064fa:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80064fc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006500:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006504:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006506:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800650a:	f043 0304 	orr.w	r3, r3, #4
 800650e:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8006510:	2001      	movs	r0, #1
 8006512:	4770      	bx	lr
  }
  return HAL_OK;
 8006514:	4618      	mov	r0, r3
}
 8006516:	4770      	bx	lr

08006518 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8006518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800651c:	4604      	mov	r4, r0
 800651e:	4616      	mov	r6, r2
 8006520:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006522:	b28f      	uxth	r7, r1
 8006524:	6825      	ldr	r5, [r4, #0]
 8006526:	6968      	ldr	r0, [r5, #20]
 8006528:	ea37 0000 	bics.w	r0, r7, r0
 800652c:	d017      	beq.n	800655e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800652e:	696b      	ldr	r3, [r5, #20]
 8006530:	055a      	lsls	r2, r3, #21
 8006532:	d516      	bpl.n	8006562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006534:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8006536:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006538:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800653c:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800653e:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8006542:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006544:	2300      	movs	r3, #0
 8006546:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006548:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800654c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006550:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006552:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 8006556:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006558:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800655a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800655e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8006562:	1c73      	adds	r3, r6, #1
 8006564:	d0df      	beq.n	8006526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006566:	f7ff fd6b 	bl	8006040 <HAL_GetTick>
 800656a:	eba0 0008 	sub.w	r0, r0, r8
 800656e:	42b0      	cmp	r0, r6
 8006570:	d801      	bhi.n	8006576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 8006572:	2e00      	cmp	r6, #0
 8006574:	d1d6      	bne.n	8006524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006576:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8006578:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800657a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800657c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006580:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006584:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006586:	f042 0220 	orr.w	r2, r2, #32
 800658a:	e7e4      	b.n	8006556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

0800658c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800658c:	b570      	push	{r4, r5, r6, lr}
 800658e:	4604      	mov	r4, r0
 8006590:	460d      	mov	r5, r1
 8006592:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	075b      	lsls	r3, r3, #29
 800659a:	d501      	bpl.n	80065a0 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800659c:	2000      	movs	r0, #0
}
 800659e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065a0:	4620      	mov	r0, r4
 80065a2:	f7ff ffa0 	bl	80064e6 <I2C_IsAcknowledgeFailed>
 80065a6:	b9a8      	cbnz	r0, 80065d4 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80065a8:	1c6a      	adds	r2, r5, #1
 80065aa:	d0f3      	beq.n	8006594 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ac:	f7ff fd48 	bl	8006040 <HAL_GetTick>
 80065b0:	1b80      	subs	r0, r0, r6
 80065b2:	42a8      	cmp	r0, r5
 80065b4:	d801      	bhi.n	80065ba <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80065b6:	2d00      	cmp	r5, #0
 80065b8:	d1ec      	bne.n	8006594 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80065ba:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80065bc:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80065be:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80065c0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80065c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80065c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80065ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80065ce:	f042 0220 	orr.w	r2, r2, #32
 80065d2:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80065d4:	2001      	movs	r0, #1
 80065d6:	e7e2      	b.n	800659e <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080065d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80065d8:	b570      	push	{r4, r5, r6, lr}
 80065da:	4604      	mov	r4, r0
 80065dc:	460d      	mov	r5, r1
 80065de:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065e0:	6820      	ldr	r0, [r4, #0]
 80065e2:	6943      	ldr	r3, [r0, #20]
 80065e4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80065e8:	d001      	beq.n	80065ee <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80065ea:	2000      	movs	r0, #0
 80065ec:	e010      	b.n	8006610 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80065ee:	6942      	ldr	r2, [r0, #20]
 80065f0:	06d2      	lsls	r2, r2, #27
 80065f2:	d50e      	bpl.n	8006612 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065f4:	f06f 0210 	mvn.w	r2, #16
 80065f8:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80065fa:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80065fc:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065fe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006602:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006606:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006608:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800660a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800660c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8006610:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006612:	f7ff fd15 	bl	8006040 <HAL_GetTick>
 8006616:	1b80      	subs	r0, r0, r6
 8006618:	42a8      	cmp	r0, r5
 800661a:	d801      	bhi.n	8006620 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 800661c:	2d00      	cmp	r5, #0
 800661e:	d1df      	bne.n	80065e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006620:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006622:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006624:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006626:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800662a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800662e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006630:	f042 0220 	orr.w	r2, r2, #32
 8006634:	e7e8      	b.n	8006608 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08006636 <I2C_WaitOnFlagUntilTimeout>:
{
 8006636:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800663a:	4604      	mov	r4, r0
 800663c:	4690      	mov	r8, r2
 800663e:	461f      	mov	r7, r3
 8006640:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006642:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8006646:	b28d      	uxth	r5, r1
 8006648:	6821      	ldr	r1, [r4, #0]
 800664a:	f1b9 0f01 	cmp.w	r9, #1
 800664e:	bf0c      	ite	eq
 8006650:	694b      	ldreq	r3, [r1, #20]
 8006652:	698b      	ldrne	r3, [r1, #24]
 8006654:	ea35 0303 	bics.w	r3, r5, r3
 8006658:	bf0c      	ite	eq
 800665a:	2301      	moveq	r3, #1
 800665c:	2300      	movne	r3, #0
 800665e:	4598      	cmp	r8, r3
 8006660:	d001      	beq.n	8006666 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8006662:	2000      	movs	r0, #0
 8006664:	e016      	b.n	8006694 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8006666:	1c7b      	adds	r3, r7, #1
 8006668:	d0ef      	beq.n	800664a <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800666a:	f7ff fce9 	bl	8006040 <HAL_GetTick>
 800666e:	1b80      	subs	r0, r0, r6
 8006670:	42b8      	cmp	r0, r7
 8006672:	d801      	bhi.n	8006678 <I2C_WaitOnFlagUntilTimeout+0x42>
 8006674:	2f00      	cmp	r7, #0
 8006676:	d1e7      	bne.n	8006648 <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006678:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800667a:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 800667c:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 800667e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006680:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006684:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006688:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800668a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800668e:	f042 0220 	orr.w	r2, r2, #32
 8006692:	6422      	str	r2, [r4, #64]	; 0x40
}
 8006694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006698 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8006698:	b570      	push	{r4, r5, r6, lr}
 800669a:	4604      	mov	r4, r0
 800669c:	460d      	mov	r5, r1
 800669e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066a0:	6823      	ldr	r3, [r4, #0]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	061b      	lsls	r3, r3, #24
 80066a6:	d501      	bpl.n	80066ac <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80066a8:	2000      	movs	r0, #0
}
 80066aa:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066ac:	4620      	mov	r0, r4
 80066ae:	f7ff ff1a 	bl	80064e6 <I2C_IsAcknowledgeFailed>
 80066b2:	b9a8      	cbnz	r0, 80066e0 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80066b4:	1c6a      	adds	r2, r5, #1
 80066b6:	d0f3      	beq.n	80066a0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066b8:	f7ff fcc2 	bl	8006040 <HAL_GetTick>
 80066bc:	1b80      	subs	r0, r0, r6
 80066be:	42a8      	cmp	r0, r5
 80066c0:	d801      	bhi.n	80066c6 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80066c2:	2d00      	cmp	r5, #0
 80066c4:	d1ec      	bne.n	80066a0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80066c6:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80066c8:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80066ca:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80066cc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80066d0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80066d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066da:	f042 0220 	orr.w	r2, r2, #32
 80066de:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80066e0:	2001      	movs	r0, #1
 80066e2:	e7e2      	b.n	80066aa <I2C_WaitOnTXEFlagUntilTimeout+0x12>

080066e4 <I2C_RequestMemoryWrite>:
{
 80066e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80066e8:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066ea:	6802      	ldr	r2, [r0, #0]
{
 80066ec:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066ee:	6813      	ldr	r3, [r2, #0]
{
 80066f0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066f6:	6013      	str	r3, [r2, #0]
{
 80066f8:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066fa:	9600      	str	r6, [sp, #0]
 80066fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066fe:	2200      	movs	r2, #0
 8006700:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8006704:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006706:	f7ff ff96 	bl	8006636 <I2C_WaitOnFlagUntilTimeout>
 800670a:	b118      	cbz	r0, 8006714 <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 800670c:	2001      	movs	r0, #1
}
 800670e:	b004      	add	sp, #16
 8006710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006714:	6823      	ldr	r3, [r4, #0]
 8006716:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 800671a:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800671c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800671e:	4633      	mov	r3, r6
 8006720:	4916      	ldr	r1, [pc, #88]	; (800677c <I2C_RequestMemoryWrite+0x98>)
 8006722:	4620      	mov	r0, r4
 8006724:	f7ff fef8 	bl	8006518 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006728:	2800      	cmp	r0, #0
 800672a:	d1ef      	bne.n	800670c <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	9003      	str	r0, [sp, #12]
 8006730:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006732:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006734:	9203      	str	r2, [sp, #12]
 8006736:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006738:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800673a:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800673c:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800673e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006740:	f7ff ffaa 	bl	8006698 <I2C_WaitOnTXEFlagUntilTimeout>
 8006744:	b140      	cbz	r0, 8006758 <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006746:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006748:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800674a:	bf01      	itttt	eq
 800674c:	6822      	ldreq	r2, [r4, #0]
 800674e:	6813      	ldreq	r3, [r2, #0]
 8006750:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8006754:	6013      	streq	r3, [r2, #0]
 8006756:	e7d9      	b.n	800670c <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006758:	f1b8 0f01 	cmp.w	r8, #1
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	d102      	bne.n	8006766 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006760:	b2ed      	uxtb	r5, r5
 8006762:	611d      	str	r5, [r3, #16]
 8006764:	e7d3      	b.n	800670e <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006766:	0a2a      	lsrs	r2, r5, #8
 8006768:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800676a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800676c:	4632      	mov	r2, r6
 800676e:	4620      	mov	r0, r4
 8006770:	f7ff ff92 	bl	8006698 <I2C_WaitOnTXEFlagUntilTimeout>
 8006774:	2800      	cmp	r0, #0
 8006776:	d1e6      	bne.n	8006746 <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	e7f1      	b.n	8006760 <I2C_RequestMemoryWrite+0x7c>
 800677c:	00010002 	.word	0x00010002

08006780 <I2C_RequestMemoryRead>:
{
 8006780:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006784:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006786:	6803      	ldr	r3, [r0, #0]
{
 8006788:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800678a:	681a      	ldr	r2, [r3, #0]
{
 800678c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800678e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006792:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006794:	681a      	ldr	r2, [r3, #0]
{
 8006796:	460f      	mov	r7, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006798:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800679c:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800679e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067a2:	9500      	str	r5, [sp, #0]
 80067a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067a6:	2200      	movs	r2, #0
{
 80067a8:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067aa:	f7ff ff44 	bl	8006636 <I2C_WaitOnFlagUntilTimeout>
 80067ae:	b118      	cbz	r0, 80067b8 <I2C_RequestMemoryRead+0x38>
    return HAL_ERROR;
 80067b0:	2001      	movs	r0, #1
}
 80067b2:	b004      	add	sp, #16
 80067b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	b2ff      	uxtb	r7, r7
 80067bc:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 80067c0:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067c2:	4929      	ldr	r1, [pc, #164]	; (8006868 <I2C_RequestMemoryRead+0xe8>)
 80067c4:	462b      	mov	r3, r5
 80067c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067c8:	4620      	mov	r0, r4
 80067ca:	f7ff fea5 	bl	8006518 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d1ee      	bne.n	80067b0 <I2C_RequestMemoryRead+0x30>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	9003      	str	r0, [sp, #12]
 80067d6:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067d8:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067da:	9203      	str	r2, [sp, #12]
 80067dc:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067de:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067e0:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067e2:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067e4:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067e6:	f7ff ff57 	bl	8006698 <I2C_WaitOnTXEFlagUntilTimeout>
 80067ea:	b140      	cbz	r0, 80067fe <I2C_RequestMemoryRead+0x7e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067ee:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067f0:	bf01      	itttt	eq
 80067f2:	6822      	ldreq	r2, [r4, #0]
 80067f4:	6813      	ldreq	r3, [r2, #0]
 80067f6:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80067fa:	6013      	streq	r3, [r2, #0]
 80067fc:	e7d8      	b.n	80067b0 <I2C_RequestMemoryRead+0x30>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067fe:	f1b8 0f01 	cmp.w	r8, #1
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	d125      	bne.n	8006852 <I2C_RequestMemoryRead+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006806:	b2f6      	uxtb	r6, r6
 8006808:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800680a:	462a      	mov	r2, r5
 800680c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800680e:	4620      	mov	r0, r4
 8006810:	f7ff ff42 	bl	8006698 <I2C_WaitOnTXEFlagUntilTimeout>
 8006814:	4602      	mov	r2, r0
 8006816:	2800      	cmp	r0, #0
 8006818:	d1e8      	bne.n	80067ec <I2C_RequestMemoryRead+0x6c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800681a:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800681c:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800681e:	680b      	ldr	r3, [r1, #0]
 8006820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006824:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006826:	9500      	str	r5, [sp, #0]
 8006828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800682a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800682e:	f7ff ff02 	bl	8006636 <I2C_WaitOnFlagUntilTimeout>
 8006832:	2800      	cmp	r0, #0
 8006834:	d1bc      	bne.n	80067b0 <I2C_RequestMemoryRead+0x30>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	f047 0701 	orr.w	r7, r7, #1
 800683c:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800683e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006840:	462b      	mov	r3, r5
 8006842:	4909      	ldr	r1, [pc, #36]	; (8006868 <I2C_RequestMemoryRead+0xe8>)
 8006844:	4620      	mov	r0, r4
 8006846:	f7ff fe67 	bl	8006518 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_ERROR;
 800684a:	3000      	adds	r0, #0
 800684c:	bf18      	it	ne
 800684e:	2001      	movne	r0, #1
 8006850:	e7af      	b.n	80067b2 <I2C_RequestMemoryRead+0x32>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006852:	0a32      	lsrs	r2, r6, #8
 8006854:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006856:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006858:	462a      	mov	r2, r5
 800685a:	4620      	mov	r0, r4
 800685c:	f7ff ff1c 	bl	8006698 <I2C_WaitOnTXEFlagUntilTimeout>
 8006860:	2800      	cmp	r0, #0
 8006862:	d1c3      	bne.n	80067ec <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006864:	6823      	ldr	r3, [r4, #0]
 8006866:	e7ce      	b.n	8006806 <I2C_RequestMemoryRead+0x86>
 8006868:	00010002 	.word	0x00010002

0800686c <HAL_I2C_Init>:
{
 800686c:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800686e:	4604      	mov	r4, r0
 8006870:	b908      	cbnz	r0, 8006876 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8006872:	2001      	movs	r0, #1
}
 8006874:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006876:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800687a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800687e:	b91b      	cbnz	r3, 8006888 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8006880:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8006884:	f7fb fc86 	bl	8002194 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006888:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800688a:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800688c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8006890:	6813      	ldr	r3, [r2, #0]
 8006892:	f023 0301 	bic.w	r3, r3, #1
 8006896:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006898:	f001 f872 	bl	8007980 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800689c:	6863      	ldr	r3, [r4, #4]
 800689e:	4a41      	ldr	r2, [pc, #260]	; (80069a4 <HAL_I2C_Init+0x138>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d84d      	bhi.n	8006940 <HAL_I2C_Init+0xd4>
 80068a4:	4a40      	ldr	r2, [pc, #256]	; (80069a8 <HAL_I2C_Init+0x13c>)
 80068a6:	4290      	cmp	r0, r2
 80068a8:	d9e3      	bls.n	8006872 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80068aa:	4940      	ldr	r1, [pc, #256]	; (80069ac <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80068ac:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80068ae:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80068b2:	6855      	ldr	r5, [r2, #4]
 80068b4:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80068b8:	430d      	orrs	r5, r1
 80068ba:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80068bc:	6a15      	ldr	r5, [r2, #32]
 80068be:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80068c2:	3101      	adds	r1, #1
 80068c4:	4329      	orrs	r1, r5
 80068c6:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80068c8:	69d1      	ldr	r1, [r2, #28]
 80068ca:	4d36      	ldr	r5, [pc, #216]	; (80069a4 <HAL_I2C_Init+0x138>)
 80068cc:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80068d0:	42ab      	cmp	r3, r5
 80068d2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80068d6:	f100 30ff 	add.w	r0, r0, #4294967295
 80068da:	d848      	bhi.n	800696e <HAL_I2C_Init+0x102>
 80068dc:	005b      	lsls	r3, r3, #1
 80068de:	fbb0 f0f3 	udiv	r0, r0, r3
 80068e2:	1c43      	adds	r3, r0, #1
 80068e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068e8:	2b04      	cmp	r3, #4
 80068ea:	bf38      	it	cc
 80068ec:	2304      	movcc	r3, #4
 80068ee:	430b      	orrs	r3, r1
 80068f0:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80068f2:	6811      	ldr	r1, [r2, #0]
 80068f4:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80068f8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80068fc:	4303      	orrs	r3, r0
 80068fe:	430b      	orrs	r3, r1
 8006900:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006902:	6891      	ldr	r1, [r2, #8]
 8006904:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8006908:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800690c:	4303      	orrs	r3, r0
 800690e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006912:	430b      	orrs	r3, r1
 8006914:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006916:	68d1      	ldr	r1, [r2, #12]
 8006918:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800691c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006920:	4303      	orrs	r3, r0
 8006922:	430b      	orrs	r3, r1
 8006924:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8006926:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006928:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 800692a:	f043 0301 	orr.w	r3, r3, #1
 800692e:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8006930:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006932:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006934:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006938:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800693a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800693e:	e799      	b.n	8006874 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006940:	4a1b      	ldr	r2, [pc, #108]	; (80069b0 <HAL_I2C_Init+0x144>)
 8006942:	4290      	cmp	r0, r2
 8006944:	d995      	bls.n	8006872 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8006946:	4e19      	ldr	r6, [pc, #100]	; (80069ac <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006948:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 800694c:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006950:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006952:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006954:	6855      	ldr	r5, [r2, #4]
 8006956:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800695a:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800695c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006960:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006962:	6a15      	ldr	r5, [r2, #32]
 8006964:	fbb1 f1f6 	udiv	r1, r1, r6
 8006968:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800696c:	e7a9      	b.n	80068c2 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800696e:	68a5      	ldr	r5, [r4, #8]
 8006970:	b955      	cbnz	r5, 8006988 <HAL_I2C_Init+0x11c>
 8006972:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006976:	fbb0 f0f3 	udiv	r0, r0, r3
 800697a:	1c43      	adds	r3, r0, #1
 800697c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006980:	b16b      	cbz	r3, 800699e <HAL_I2C_Init+0x132>
 8006982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006986:	e7b2      	b.n	80068ee <HAL_I2C_Init+0x82>
 8006988:	2519      	movs	r5, #25
 800698a:	436b      	muls	r3, r5
 800698c:	fbb0 f0f3 	udiv	r0, r0, r3
 8006990:	1c43      	adds	r3, r0, #1
 8006992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006996:	b113      	cbz	r3, 800699e <HAL_I2C_Init+0x132>
 8006998:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800699c:	e7a7      	b.n	80068ee <HAL_I2C_Init+0x82>
 800699e:	2301      	movs	r3, #1
 80069a0:	e7a5      	b.n	80068ee <HAL_I2C_Init+0x82>
 80069a2:	bf00      	nop
 80069a4:	000186a0 	.word	0x000186a0
 80069a8:	001e847f 	.word	0x001e847f
 80069ac:	000f4240 	.word	0x000f4240
 80069b0:	003d08ff 	.word	0x003d08ff

080069b4 <HAL_I2C_Mem_Write>:
{
 80069b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80069b8:	4604      	mov	r4, r0
 80069ba:	4699      	mov	r9, r3
 80069bc:	460f      	mov	r7, r1
 80069be:	4690      	mov	r8, r2
 80069c0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80069c2:	f7ff fb3d 	bl	8006040 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80069c6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80069ca:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80069cc:	2b20      	cmp	r3, #32
 80069ce:	d003      	beq.n	80069d8 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80069d0:	2002      	movs	r0, #2
}
 80069d2:	b003      	add	sp, #12
 80069d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069d8:	9000      	str	r0, [sp, #0]
 80069da:	2319      	movs	r3, #25
 80069dc:	2201      	movs	r2, #1
 80069de:	493b      	ldr	r1, [pc, #236]	; (8006acc <HAL_I2C_Mem_Write+0x118>)
 80069e0:	4620      	mov	r0, r4
 80069e2:	f7ff fe28 	bl	8006636 <I2C_WaitOnFlagUntilTimeout>
 80069e6:	2800      	cmp	r0, #0
 80069e8:	d1f2      	bne.n	80069d0 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80069ea:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d0ee      	beq.n	80069d0 <HAL_I2C_Mem_Write+0x1c>
 80069f2:	2301      	movs	r3, #1
 80069f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069f8:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069fa:	4620      	mov	r0, r4
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8006a00:	bf58      	it	pl
 8006a02:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a04:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8006a06:	bf5c      	itt	pl
 8006a08:	f042 0201 	orrpl.w	r2, r2, #1
 8006a0c:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a14:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a16:	2321      	movs	r3, #33	; 0x21
 8006a18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a1c:	2340      	movs	r3, #64	; 0x40
 8006a1e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a22:	2300      	movs	r3, #0
 8006a24:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8006a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a28:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->pBuffPtr    = pData;
 8006a2c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a2e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a32:	4642      	mov	r2, r8
    hi2c->XferCount   = Size;
 8006a34:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006a38:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a3a:	4b25      	ldr	r3, [pc, #148]	; (8006ad0 <HAL_I2C_Mem_Write+0x11c>)
 8006a3c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a3e:	464b      	mov	r3, r9
 8006a40:	f7ff fe50 	bl	80066e4 <I2C_RequestMemoryWrite>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	d02a      	beq.n	8006a9e <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8006a48:	2001      	movs	r0, #1
 8006a4a:	e7c2      	b.n	80069d2 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a4c:	f7ff fe24 	bl	8006698 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a50:	b140      	cbz	r0, 8006a64 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a54:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a56:	bf01      	itttt	eq
 8006a58:	6822      	ldreq	r2, [r4, #0]
 8006a5a:	6813      	ldreq	r3, [r2, #0]
 8006a5c:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8006a60:	6013      	streq	r3, [r2, #0]
 8006a62:	e7f1      	b.n	8006a48 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a66:	6827      	ldr	r7, [r4, #0]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006a6e:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8006a70:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006a72:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006a74:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006a76:	3a01      	subs	r2, #1
 8006a78:	b292      	uxth	r2, r2
 8006a7a:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a7c:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8006a7e:	1e48      	subs	r0, r1, #1
 8006a80:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a82:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8006a84:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a86:	d50a      	bpl.n	8006a9e <HAL_I2C_Mem_Write+0xea>
 8006a88:	b148      	cbz	r0, 8006a9e <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a8a:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8006a8c:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a8e:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8006a90:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8006a92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8006a94:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8006a96:	3b01      	subs	r3, #1
 8006a98:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8006a9a:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8006a9c:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006a9e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aa0:	462a      	mov	r2, r5
 8006aa2:	4631      	mov	r1, r6
 8006aa4:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1d0      	bne.n	8006a4c <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aaa:	f7ff fd6f 	bl	800658c <I2C_WaitOnBTFFlagUntilTimeout>
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	d1cf      	bne.n	8006a52 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ab2:	6822      	ldr	r2, [r4, #0]
 8006ab4:	6813      	ldr	r3, [r2, #0]
 8006ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006aba:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8006abc:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8006abe:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8006ac2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ac6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8006aca:	e782      	b.n	80069d2 <HAL_I2C_Mem_Write+0x1e>
 8006acc:	00100002 	.word	0x00100002
 8006ad0:	ffff0000 	.word	0xffff0000

08006ad4 <HAL_I2C_Mem_Read>:
{
 8006ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ad8:	4604      	mov	r4, r0
 8006ada:	b087      	sub	sp, #28
 8006adc:	4699      	mov	r9, r3
 8006ade:	460d      	mov	r5, r1
 8006ae0:	4690      	mov	r8, r2
 8006ae2:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8006ae4:	f7ff faac 	bl	8006040 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ae8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8006aec:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006aee:	2b20      	cmp	r3, #32
 8006af0:	d004      	beq.n	8006afc <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8006af2:	2502      	movs	r5, #2
}
 8006af4:	4628      	mov	r0, r5
 8006af6:	b007      	add	sp, #28
 8006af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006afc:	9000      	str	r0, [sp, #0]
 8006afe:	2319      	movs	r3, #25
 8006b00:	2201      	movs	r2, #1
 8006b02:	497e      	ldr	r1, [pc, #504]	; (8006cfc <HAL_I2C_Mem_Read+0x228>)
 8006b04:	4620      	mov	r0, r4
 8006b06:	f7ff fd96 	bl	8006636 <I2C_WaitOnFlagUntilTimeout>
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	d1f1      	bne.n	8006af2 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8006b0e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d0ed      	beq.n	8006af2 <HAL_I2C_Mem_Read+0x1e>
 8006b16:	2301      	movs	r3, #1
 8006b18:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b1c:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b1e:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8006b24:	bf58      	it	pl
 8006b26:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b28:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8006b2a:	bf5c      	itt	pl
 8006b2c:	f042 0201 	orrpl.w	r2, r2, #1
 8006b30:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b38:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b3a:	2322      	movs	r3, #34	; 0x22
 8006b3c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b40:	2340      	movs	r3, #64	; 0x40
 8006b42:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b46:	2300      	movs	r3, #0
 8006b48:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8006b4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b4c:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->pBuffPtr    = pData;
 8006b50:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b52:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b56:	4642      	mov	r2, r8
    hi2c->XferCount   = Size;
 8006b58:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006b5c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b5e:	4b68      	ldr	r3, [pc, #416]	; (8006d00 <HAL_I2C_Mem_Read+0x22c>)
 8006b60:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b62:	464b      	mov	r3, r9
 8006b64:	f7ff fe0c 	bl	8006780 <I2C_RequestMemoryRead>
 8006b68:	4605      	mov	r5, r0
 8006b6a:	b108      	cbz	r0, 8006b70 <HAL_I2C_Mem_Read+0x9c>
      return HAL_ERROR;
 8006b6c:	2501      	movs	r5, #1
 8006b6e:	e7c1      	b.n	8006af4 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8006b70:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	b992      	cbnz	r2, 8006b9c <HAL_I2C_Mem_Read+0xc8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b76:	9002      	str	r0, [sp, #8]
 8006b78:	695a      	ldr	r2, [r3, #20]
 8006b7a:	9202      	str	r2, [sp, #8]
 8006b7c:	699a      	ldr	r2, [r3, #24]
 8006b7e:	9202      	str	r2, [sp, #8]
 8006b80:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b88:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8006b8a:	2320      	movs	r3, #32
 8006b8c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b90:	2300      	movs	r3, #0
 8006b92:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8006b96:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8006b9a:	e7ab      	b.n	8006af4 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8006b9c:	2a01      	cmp	r2, #1
 8006b9e:	d12f      	bne.n	8006c00 <HAL_I2C_Mem_Read+0x12c>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ba6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ba8:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	9003      	str	r0, [sp, #12]
 8006bae:	695a      	ldr	r2, [r3, #20]
 8006bb0:	9203      	str	r2, [sp, #12]
 8006bb2:	699a      	ldr	r2, [r3, #24]
 8006bb4:	9203      	str	r2, [sp, #12]
 8006bb6:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bbe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006bc0:	b662      	cpsie	i
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bc2:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8006d04 <HAL_I2C_Mem_Read+0x230>
    while (hi2c->XferSize > 0U)
 8006bc6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0de      	beq.n	8006b8a <HAL_I2C_Mem_Read+0xb6>
      if (hi2c->XferSize <= 3U)
 8006bcc:	2b03      	cmp	r3, #3
 8006bce:	d877      	bhi.n	8006cc0 <HAL_I2C_Mem_Read+0x1ec>
        if (hi2c->XferSize == 1U)
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d131      	bne.n	8006c38 <HAL_I2C_Mem_Read+0x164>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bd4:	4632      	mov	r2, r6
 8006bd6:	4639      	mov	r1, r7
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f7ff fcfd 	bl	80065d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d1c4      	bne.n	8006b6c <HAL_I2C_Mem_Read+0x98>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006be2:	6823      	ldr	r3, [r4, #0]
 8006be4:	691a      	ldr	r2, [r3, #16]
 8006be6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006be8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006bea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bec:	3301      	adds	r3, #1
 8006bee:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006bf0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006bf6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006bfe:	e7e2      	b.n	8006bc6 <HAL_I2C_Mem_Read+0xf2>
    else if (hi2c->XferSize == 2U)
 8006c00:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c02:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8006c04:	d10e      	bne.n	8006c24 <HAL_I2C_Mem_Read+0x150>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006c0c:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c0e:	6823      	ldr	r3, [r4, #0]
 8006c10:	9004      	str	r0, [sp, #16]
 8006c12:	695a      	ldr	r2, [r3, #20]
 8006c14:	9204      	str	r2, [sp, #16]
 8006c16:	699a      	ldr	r2, [r3, #24]
 8006c18:	9204      	str	r2, [sp, #16]
 8006c1a:	9a04      	ldr	r2, [sp, #16]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c22:	e7cc      	b.n	8006bbe <HAL_I2C_Mem_Read+0xea>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c28:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c2a:	9005      	str	r0, [sp, #20]
 8006c2c:	695a      	ldr	r2, [r3, #20]
 8006c2e:	9205      	str	r2, [sp, #20]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	9305      	str	r3, [sp, #20]
 8006c34:	9b05      	ldr	r3, [sp, #20]
 8006c36:	e7c4      	b.n	8006bc2 <HAL_I2C_Mem_Read+0xee>
        else if (hi2c->XferSize == 2U)
 8006c38:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c3a:	9600      	str	r6, [sp, #0]
 8006c3c:	463b      	mov	r3, r7
 8006c3e:	f04f 0200 	mov.w	r2, #0
 8006c42:	4641      	mov	r1, r8
 8006c44:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8006c46:	d118      	bne.n	8006c7a <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c48:	f7ff fcf5 	bl	8006636 <I2C_WaitOnFlagUntilTimeout>
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	d18d      	bne.n	8006b6c <HAL_I2C_Mem_Read+0x98>
 8006c50:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c5a:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c5c:	691a      	ldr	r2, [r3, #16]
 8006c5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c60:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006c62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c64:	3301      	adds	r3, #1
 8006c66:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006c68:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006c6e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006c70:	3b01      	subs	r3, #1
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006c76:	b662      	cpsie	i
 8006c78:	e7b3      	b.n	8006be2 <HAL_I2C_Mem_Read+0x10e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c7a:	f7ff fcdc 	bl	8006636 <I2C_WaitOnFlagUntilTimeout>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	2800      	cmp	r0, #0
 8006c82:	f47f af73 	bne.w	8006b6c <HAL_I2C_Mem_Read+0x98>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c86:	6821      	ldr	r1, [r4, #0]
 8006c88:	680b      	ldr	r3, [r1, #0]
 8006c8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c8e:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006c90:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c92:	6823      	ldr	r3, [r4, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c94:	4620      	mov	r0, r4
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c96:	6919      	ldr	r1, [r3, #16]
 8006c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c9a:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8006c9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c9e:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006ca4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ca6:	4641      	mov	r1, r8
          hi2c->XferSize--;
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006cac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006cb4:	463b      	mov	r3, r7
 8006cb6:	f7ff fcbe 	bl	8006636 <I2C_WaitOnFlagUntilTimeout>
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	d0c9      	beq.n	8006c52 <HAL_I2C_Mem_Read+0x17e>
 8006cbe:	e755      	b.n	8006b6c <HAL_I2C_Mem_Read+0x98>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cc0:	4632      	mov	r2, r6
 8006cc2:	4639      	mov	r1, r7
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f7ff fc87 	bl	80065d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	f47f af4e 	bne.w	8006b6c <HAL_I2C_Mem_Read+0x98>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	691a      	ldr	r2, [r3, #16]
 8006cd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cd6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006cd8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006cda:	1c53      	adds	r3, r2, #1
 8006cdc:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8006cde:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8006ce4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006cec:	6823      	ldr	r3, [r4, #0]
 8006cee:	6959      	ldr	r1, [r3, #20]
 8006cf0:	0749      	lsls	r1, r1, #29
 8006cf2:	f57f af68 	bpl.w	8006bc6 <HAL_I2C_Mem_Read+0xf2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	7053      	strb	r3, [r2, #1]
 8006cfa:	e776      	b.n	8006bea <HAL_I2C_Mem_Read+0x116>
 8006cfc:	00100002 	.word	0x00100002
 8006d00:	ffff0000 	.word	0xffff0000
 8006d04:	00010004 	.word	0x00010004

08006d08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006d08:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006d0a:	4604      	mov	r4, r0
{
 8006d0c:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8006d0e:	b310      	cbz	r0, 8006d56 <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006d10:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8006d14:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006d18:	b91b      	cbnz	r3, 8006d22 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006d1a:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006d1e:	f002 fba1 	bl	8009464 <HAL_PCD_MspInit>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006d22:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8006d24:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d26:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 8006d28:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8006d2c:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 8006d30:	f001 f9ba 	bl	80080a8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d36:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006d38:	682b      	ldr	r3, [r5, #0]
 8006d3a:	4625      	mov	r5, r4
 8006d3c:	6033      	str	r3, [r6, #0]
 8006d3e:	1d27      	adds	r7, r4, #4
 8006d40:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8006d44:	f855 0b10 	ldr.w	r0, [r5], #16
 8006d48:	f001 f99f 	bl	800808a <USB_CoreInit>
 8006d4c:	4606      	mov	r6, r0
 8006d4e:	b120      	cbz	r0, 8006d5a <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d50:	2302      	movs	r3, #2
 8006d52:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    return HAL_ERROR;
 8006d56:	2501      	movs	r5, #1
 8006d58:	e048      	b.n	8006dec <HAL_PCD_Init+0xe4>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006d5a:	4601      	mov	r1, r0
 8006d5c:	6820      	ldr	r0, [r4, #0]
 8006d5e:	f001 f9ad 	bl	80080bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d62:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006d64:	f04f 0c01 	mov.w	ip, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d68:	6861      	ldr	r1, [r4, #4]
 8006d6a:	b2c3      	uxtb	r3, r0
 8006d6c:	4299      	cmp	r1, r3
 8006d6e:	f100 0001 	add.w	r0, r0, #1
 8006d72:	d817      	bhi.n	8006da4 <HAL_PCD_Init+0x9c>
 8006d74:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006d76:	4610      	mov	r0, r2
 8006d78:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d7a:	4299      	cmp	r1, r3
 8006d7c:	f102 0201 	add.w	r2, r2, #1
 8006d80:	d81d      	bhi.n	8006dbe <HAL_PCD_Init+0xb6>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d84:	466e      	mov	r6, sp
 8006d86:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006d88:	682b      	ldr	r3, [r5, #0]
 8006d8a:	6033      	str	r3, [r6, #0]
 8006d8c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8006d90:	6820      	ldr	r0, [r4, #0]
 8006d92:	f001 f995 	bl	80080c0 <USB_DevInit>
 8006d96:	2301      	movs	r3, #1
 8006d98:	4605      	mov	r5, r0
 8006d9a:	b300      	cbz	r0, 8006dde <HAL_PCD_Init+0xd6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
 8006da2:	e7d8      	b.n	8006d56 <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 8006da4:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8006da8:	f882 c029 	strb.w	ip, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8006dac:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006db0:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006db2:	f882 602b 	strb.w	r6, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006db6:	e9c2 660e 	strd	r6, r6, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 8006dba:	6416      	str	r6, [r2, #64]	; 0x40
 8006dbc:	e7d5      	b.n	8006d6a <HAL_PCD_Init+0x62>
    hpcd->OUT_ep[i].is_in = 0U;
 8006dbe:	eb04 1643 	add.w	r6, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 8006dc2:	f886 3128 	strb.w	r3, [r6, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006dc6:	330a      	adds	r3, #10
 8006dc8:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 8006dca:	f886 0129 	strb.w	r0, [r6, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006dce:	f886 012b 	strb.w	r0, [r6, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006dd2:	f8c6 0138 	str.w	r0, [r6, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006dd6:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006dda:	50e0      	str	r0, [r4, r3]
 8006ddc:	e7cc      	b.n	8006d78 <HAL_PCD_Init+0x70>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8006dde:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006de2:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8006de6:	6820      	ldr	r0, [r4, #0]
 8006de8:	f001 fc0b 	bl	8008602 <USB_DevDisconnect>

  return HAL_OK;
}
 8006dec:	4628      	mov	r0, r5
 8006dee:	b007      	add	sp, #28
 8006df0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006df2 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8006df2:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
{
 8006df6:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8006df8:	2b01      	cmp	r3, #1
{
 8006dfa:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8006dfc:	d00e      	beq.n	8006e1c <HAL_PCD_Start+0x2a>
 8006dfe:	2101      	movs	r1, #1
 8006e00:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8006e04:	f002 fc5b 	bl	80096be <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8006e08:	6820      	ldr	r0, [r4, #0]
 8006e0a:	f001 fbf8 	bl	80085fe <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8006e0e:	6820      	ldr	r0, [r4, #0]
 8006e10:	f001 f942 	bl	8008098 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8006e14:	2000      	movs	r0, #0
 8006e16:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8006e1a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8006e1c:	2002      	movs	r0, #2
 8006e1e:	e7fc      	b.n	8006e1a <HAL_PCD_Start+0x28>

08006e20 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8006e20:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
{
 8006e24:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8006e26:	2a01      	cmp	r2, #1
{
 8006e28:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8006e2a:	d00b      	beq.n	8006e44 <HAL_PCD_SetAddress+0x24>
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 8006e32:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006e36:	6800      	ldr	r0, [r0, #0]
 8006e38:	f001 fbdb 	bl	80085f2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8006e42:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8006e44:	2002      	movs	r0, #2
 8006e46:	e7fc      	b.n	8006e42 <HAL_PCD_SetAddress+0x22>

08006e48 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8006e48:	b570      	push	{r4, r5, r6, lr}
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	f001 0507 	and.w	r5, r1, #7
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006e50:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006e54:	ea4f 1045 	mov.w	r0, r5, lsl #5
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e58:	bf14      	ite	ne
 8006e5a:	f100 0128 	addne.w	r1, r0, #40	; 0x28
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e5e:	f500 7194 	addeq.w	r1, r0, #296	; 0x128
 8006e62:	eb04 0600 	add.w	r6, r4, r0
    ep->is_in = 1U;
 8006e66:	bf17      	itett	ne
 8006e68:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8006e6a:	2000      	moveq	r0, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e6c:	1909      	addne	r1, r1, r4
    ep->is_in = 1U;
 8006e6e:	f886 0029 	strbne.w	r0, [r6, #41]	; 0x29
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e72:	bf04      	itt	eq
 8006e74:	1909      	addeq	r1, r1, r4
    ep->is_in = 0U;
 8006e76:	f886 0129 	strbeq.w	r0, [r6, #297]	; 0x129
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 8006e7a:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 8006e7c:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e7e:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 8006e80:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8006e82:	b102      	cbz	r2, 8006e86 <HAL_PCD_EP_Open+0x3e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006e84:	81cd      	strh	r5, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006e86:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 8006e88:	bf04      	itt	eq
 8006e8a:	2300      	moveq	r3, #0
 8006e8c:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 8006e8e:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d009      	beq.n	8006eaa <HAL_PCD_EP_Open+0x62>
 8006e96:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006e98:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8006e9a:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006e9e:	f001 f929 	bl	80080f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
}
 8006ea8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8006eaa:	2002      	movs	r0, #2
 8006eac:	e7fc      	b.n	8006ea8 <HAL_PCD_EP_Open+0x60>

08006eae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006eae:	f001 0207 	and.w	r2, r1, #7
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006eb2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006eb6:	ea4f 1342 	mov.w	r3, r2, lsl #5
{
 8006eba:	b510      	push	{r4, lr}
 8006ebc:	4604      	mov	r4, r0
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ebe:	bf18      	it	ne
 8006ec0:	f103 0128 	addne.w	r1, r3, #40	; 0x28
 8006ec4:	4418      	add	r0, r3
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ec6:	bf0b      	itete	eq
 8006ec8:	f503 7194 	addeq.w	r1, r3, #296	; 0x128
    ep->is_in = 1U;
 8006ecc:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8006ece:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ed0:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ed2:	bf0a      	itet	eq
 8006ed4:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8006ed6:	f880 3029 	strbne.w	r3, [r0, #41]	; 0x29
    ep->is_in = 0U;
 8006eda:	f880 3129 	strbeq.w	r3, [r0, #297]	; 0x129
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006ede:	700a      	strb	r2, [r1, #0]

  __HAL_LOCK(hpcd);
 8006ee0:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d009      	beq.n	8006efc <HAL_PCD_EP_Close+0x4e>
 8006ee8:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006eea:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8006eec:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006ef0:	f001 fa5a 	bl	80083a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8006efa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8006efc:	2002      	movs	r0, #2
 8006efe:	e7fc      	b.n	8006efa <HAL_PCD_EP_Close+0x4c>

08006f00 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006f00:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8006f02:	2600      	movs	r6, #0
 8006f04:	f001 0107 	and.w	r1, r1, #7
 8006f08:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 8006f0a:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f0c:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f10:	f505 7194 	add.w	r1, r5, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006f14:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8006f16:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  ep->xfer_len = len;
 8006f1a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
  ep->xfer_count = 0U;
 8006f1e:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 8006f22:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006f26:	6800      	ldr	r0, [r0, #0]
 8006f28:	f001 fb82 	bl	8008630 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	bd70      	pop	{r4, r5, r6, pc}

08006f30 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006f30:	f001 0107 	and.w	r1, r1, #7
 8006f34:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8006f38:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 8006f3c:	4770      	bx	lr

08006f3e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006f3e:	f001 0107 	and.w	r1, r1, #7
 8006f42:	b570      	push	{r4, r5, r6, lr}
 8006f44:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006f46:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8006f48:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8006f4c:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8006f4e:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f50:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f54:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006f58:	4401      	add	r1, r0
  ep->xfer_count = 0U;
 8006f5a:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8006f5c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006f60:	6800      	ldr	r0, [r0, #0]
 8006f62:	f001 fb65 	bl	8008630 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8006f66:	4630      	mov	r0, r6
 8006f68:	bd70      	pop	{r4, r5, r6, pc}
	...

08006f6c <HAL_PCD_IRQHandler>:
{
 8006f6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f70:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8006f72:	6800      	ldr	r0, [r0, #0]
 8006f74:	f001 fb47 	bl	8008606 <USB_ReadInterrupts>
 8006f78:	0402      	lsls	r2, r0, #16
 8006f7a:	d50b      	bpl.n	8006f94 <HAL_PCD_IRQHandler+0x28>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006f7c:	f8df 940c 	ldr.w	r9, [pc, #1036]	; 800738c <HAL_PCD_IRQHandler+0x420>
 8006f80:	f8df a40c 	ldr.w	sl, [pc, #1036]	; 8007390 <HAL_PCD_IRQHandler+0x424>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006f84:	f8df b40c 	ldr.w	fp, [pc, #1036]	; 8007394 <HAL_PCD_IRQHandler+0x428>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006f88:	6820      	ldr	r0, [r4, #0]
 8006f8a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8006f8e:	041b      	lsls	r3, r3, #16
 8006f90:	f100 809e 	bmi.w	80070d0 <HAL_PCD_IRQHandler+0x164>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8006f94:	6820      	ldr	r0, [r4, #0]
 8006f96:	f001 fb36 	bl	8008606 <USB_ReadInterrupts>
 8006f9a:	0543      	lsls	r3, r0, #21
 8006f9c:	d50f      	bpl.n	8006fbe <HAL_PCD_IRQHandler+0x52>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006f9e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8006fa0:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006fa2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8006fa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006faa:	041b      	lsls	r3, r3, #16
 8006fac:	0c1b      	lsrs	r3, r3, #16
 8006fae:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8006fb2:	f002 fa90 	bl	80094d6 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f7ff ff31 	bl	8006e20 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8006fbe:	6820      	ldr	r0, [r4, #0]
 8006fc0:	f001 fb21 	bl	8008606 <USB_ReadInterrupts>
 8006fc4:	0447      	lsls	r7, r0, #17
 8006fc6:	d508      	bpl.n	8006fda <HAL_PCD_IRQHandler+0x6e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006fc8:	6822      	ldr	r2, [r4, #0]
 8006fca:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8006fce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fd2:	041b      	lsls	r3, r3, #16
 8006fd4:	0c1b      	lsrs	r3, r3, #16
 8006fd6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8006fda:	6820      	ldr	r0, [r4, #0]
 8006fdc:	f001 fb13 	bl	8008606 <USB_ReadInterrupts>
 8006fe0:	0486      	lsls	r6, r0, #18
 8006fe2:	d508      	bpl.n	8006ff6 <HAL_PCD_IRQHandler+0x8a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006fe4:	6822      	ldr	r2, [r4, #0]
 8006fe6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8006fea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fee:	041b      	lsls	r3, r3, #16
 8006ff0:	0c1b      	lsrs	r3, r3, #16
 8006ff2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8006ff6:	6820      	ldr	r0, [r4, #0]
 8006ff8:	f001 fb05 	bl	8008606 <USB_ReadInterrupts>
 8006ffc:	04c5      	lsls	r5, r0, #19
 8006ffe:	d51c      	bpl.n	800703a <HAL_PCD_IRQHandler+0xce>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8007000:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8007002:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8007004:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8007008:	f023 0304 	bic.w	r3, r3, #4
 800700c:	041b      	lsls	r3, r3, #16
 800700e:	0c1b      	lsrs	r3, r3, #16
 8007010:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007014:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8007018:	f023 0308 	bic.w	r3, r3, #8
 800701c:	041b      	lsls	r3, r3, #16
 800701e:	0c1b      	lsrs	r3, r3, #16
 8007020:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8007024:	f002 fa7a 	bl	800951c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007028:	6822      	ldr	r2, [r4, #0]
 800702a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800702e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007032:	041b      	lsls	r3, r3, #16
 8007034:	0c1b      	lsrs	r3, r3, #16
 8007036:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800703a:	6820      	ldr	r0, [r4, #0]
 800703c:	f001 fae3 	bl	8008606 <USB_ReadInterrupts>
 8007040:	0500      	lsls	r0, r0, #20
 8007042:	d524      	bpl.n	800708e <HAL_PCD_IRQHandler+0x122>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8007044:	6820      	ldr	r0, [r4, #0]
 8007046:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800704a:	f043 0308 	orr.w	r3, r3, #8
 800704e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8007052:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8007056:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800705a:	041b      	lsls	r3, r3, #16
 800705c:	0c1b      	lsrs	r3, r3, #16
 800705e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8007062:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8007066:	f043 0304 	orr.w	r3, r3, #4
 800706a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800706e:	f001 faca 	bl	8008606 <USB_ReadInterrupts>
 8007072:	04c1      	lsls	r1, r0, #19
 8007074:	d508      	bpl.n	8007088 <HAL_PCD_IRQHandler+0x11c>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007076:	6822      	ldr	r2, [r4, #0]
 8007078:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800707c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007080:	041b      	lsls	r3, r3, #16
 8007082:	0c1b      	lsrs	r3, r3, #16
 8007084:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 8007088:	4620      	mov	r0, r4
 800708a:	f002 fa37 	bl	80094fc <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800708e:	6820      	ldr	r0, [r4, #0]
 8007090:	f001 fab9 	bl	8008606 <USB_ReadInterrupts>
 8007094:	0582      	lsls	r2, r0, #22
 8007096:	d50b      	bpl.n	80070b0 <HAL_PCD_IRQHandler+0x144>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007098:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 800709a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800709c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80070a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070a4:	041b      	lsls	r3, r3, #16
 80070a6:	0c1b      	lsrs	r3, r3, #16
 80070a8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80070ac:	f002 fa0f 	bl	80094ce <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80070b0:	6820      	ldr	r0, [r4, #0]
 80070b2:	f001 faa8 	bl	8008606 <USB_ReadInterrupts>
 80070b6:	05c3      	lsls	r3, r0, #23
 80070b8:	d508      	bpl.n	80070cc <HAL_PCD_IRQHandler+0x160>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80070ba:	6822      	ldr	r2, [r4, #0]
 80070bc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80070c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070c4:	041b      	lsls	r3, r3, #16
 80070c6:	0c1b      	lsrs	r3, r3, #16
 80070c8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80070cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 80070d0:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 80070d4:	b289      	uxth	r1, r1
    if (epindex == 0U)
 80070d6:	f011 060f 	ands.w	r6, r1, #15
 80070da:	f040 80b1 	bne.w	8007240 <HAL_PCD_IRQHandler+0x2d4>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80070de:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80070e2:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80070e4:	d12a      	bne.n	800713c <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80070e6:	ea09 0303 	and.w	r3, r9, r3
 80070ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ee:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80070f0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80070f4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80070f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070fc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8007100:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8007104:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800710a:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800710c:	4413      	add	r3, r2
 800710e:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007110:	4620      	mov	r0, r4
 8007112:	f002 f9d5 	bl	80094c0 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007116:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800711a:	2b00      	cmp	r3, #0
 800711c:	f43f af34 	beq.w	8006f88 <HAL_PCD_IRQHandler+0x1c>
 8007120:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007122:	2a00      	cmp	r2, #0
 8007124:	f47f af30 	bne.w	8006f88 <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007128:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800712c:	6821      	ldr	r1, [r4, #0]
 800712e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007132:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8007136:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800713a:	e725      	b.n	8006f88 <HAL_PCD_IRQHandler+0x1c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800713c:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800713e:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 8007142:	d020      	beq.n	8007186 <HAL_PCD_IRQHandler+0x21a>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007144:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8007148:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800714c:	f504 710c 	add.w	r1, r4, #560	; 0x230
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007150:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007154:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8007158:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800715c:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8007160:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007164:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007168:	f001 fb36 	bl	80087d8 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800716c:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800716e:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007170:	8813      	ldrh	r3, [r2, #0]
 8007172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007176:	051b      	lsls	r3, r3, #20
 8007178:	0d1b      	lsrs	r3, r3, #20
 800717a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800717e:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8007180:	f002 f990 	bl	80094a4 <HAL_PCD_SetupStageCallback>
 8007184:	e700      	b.n	8006f88 <HAL_PCD_IRQHandler+0x1c>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007186:	041f      	lsls	r7, r3, #16
 8007188:	f57f aefe 	bpl.w	8006f88 <HAL_PCD_IRQHandler+0x1c>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800718c:	8803      	ldrh	r3, [r0, #0]
 800718e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007192:	051b      	lsls	r3, r3, #20
 8007194:	0d1b      	lsrs	r3, r3, #20
 8007196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800719a:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800719c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80071a0:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 80071a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071a8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80071ac:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 80071b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071b4:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80071b8:	b18b      	cbz	r3, 80071de <HAL_PCD_IRQHandler+0x272>
 80071ba:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 80071be:	b171      	cbz	r1, 80071de <HAL_PCD_IRQHandler+0x272>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80071c0:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 80071c4:	f001 fb08 	bl	80087d8 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80071c8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 80071cc:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80071d0:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 80071d2:	4413      	add	r3, r2
 80071d4:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80071d8:	4620      	mov	r0, r4
 80071da:	f002 f969 	bl	80094b0 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80071de:	6821      	ldr	r1, [r4, #0]
 80071e0:	f8d4 5138 	ldr.w	r5, [r4, #312]	; 0x138
 80071e4:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80071e8:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	b9bd      	cbnz	r5, 8007220 <HAL_PCD_IRQHandler+0x2b4>
 80071f0:	5ac2      	ldrh	r2, [r0, r3]
 80071f2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80071f6:	0412      	lsls	r2, r2, #16
 80071f8:	0c12      	lsrs	r2, r2, #16
 80071fa:	52c2      	strh	r2, [r0, r3]
 80071fc:	5ac2      	ldrh	r2, [r0, r3]
 80071fe:	ea4a 0202 	orr.w	r2, sl, r2
 8007202:	b292      	uxth	r2, r2
 8007204:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007206:	880b      	ldrh	r3, [r1, #0]
 8007208:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800720c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007210:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8007214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800721c:	800b      	strh	r3, [r1, #0]
 800721e:	e6b3      	b.n	8006f88 <HAL_PCD_IRQHandler+0x1c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007220:	2d3e      	cmp	r5, #62	; 0x3e
 8007222:	d805      	bhi.n	8007230 <HAL_PCD_IRQHandler+0x2c4>
 8007224:	086a      	lsrs	r2, r5, #1
 8007226:	07ee      	lsls	r6, r5, #31
 8007228:	bf48      	it	mi
 800722a:	3201      	addmi	r2, #1
 800722c:	0292      	lsls	r2, r2, #10
 800722e:	e7e8      	b.n	8007202 <HAL_PCD_IRQHandler+0x296>
 8007230:	096a      	lsrs	r2, r5, #5
 8007232:	06ed      	lsls	r5, r5, #27
 8007234:	bf08      	it	eq
 8007236:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800723a:	ea4a 2282 	orr.w	r2, sl, r2, lsl #10
 800723e:	e7e0      	b.n	8007202 <HAL_PCD_IRQHandler+0x296>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007240:	f830 8026 	ldrh.w	r8, [r0, r6, lsl #2]
 8007244:	fa1f f888 	uxth.w	r8, r8
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007248:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 800724c:	d03c      	beq.n	80072c8 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800724e:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8007252:	0177      	lsls	r7, r6, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007258:	051b      	lsls	r3, r3, #20
 800725a:	0d1b      	lsrs	r3, r3, #20
 800725c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007260:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8007264:	19e1      	adds	r1, r4, r7
 8007266:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 800726a:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800726e:	2b00      	cmp	r3, #0
 8007270:	d150      	bne.n	8007314 <HAL_PCD_IRQHandler+0x3a8>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007272:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8007276:	f891 5128 	ldrb.w	r5, [r1, #296]	; 0x128
 800727a:	3306      	adds	r3, #6
 800727c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007280:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8007284:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8007288:	b135      	cbz	r5, 8007298 <HAL_PCD_IRQHandler+0x32c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800728a:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 800728e:	462b      	mov	r3, r5
 8007290:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8007294:	f001 faa0 	bl	80087d8 <USB_ReadPMA>
 8007298:	19e1      	adds	r1, r4, r7
        ep->xfer_count += count;
 800729a:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
        ep->xfer_buff += count;
 800729e:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
        ep->xfer_count += count;
 80072a2:	442b      	add	r3, r5
 80072a4:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80072a8:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
        ep->xfer_buff += count;
 80072ac:	442a      	add	r2, r5
 80072ae:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80072b2:	b11b      	cbz	r3, 80072bc <HAL_PCD_IRQHandler+0x350>
 80072b4:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 80072b8:	4285      	cmp	r5, r0
 80072ba:	d25d      	bcs.n	8007378 <HAL_PCD_IRQHandler+0x40c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80072bc:	4427      	add	r7, r4
 80072be:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 80072c2:	4620      	mov	r0, r4
 80072c4:	f002 f8f4 	bl	80094b0 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80072c8:	f018 0f80 	tst.w	r8, #128	; 0x80
 80072cc:	f43f ae5c 	beq.w	8006f88 <HAL_PCD_IRQHandler+0x1c>
 80072d0:	6823      	ldr	r3, [r4, #0]
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80072d2:	4620      	mov	r0, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80072d4:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 80072d8:	ea09 0202 	and.w	r2, r9, r2
 80072dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072e0:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80072e4:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80072e8:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 80072ec:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 80072f0:	3202      	adds	r2, #2
 80072f2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80072f6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80072fa:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff += ep->xfer_count;
 80072fe:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007300:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007304:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8007306:	441a      	add	r2, r3
        if (ep->xfer_len == 0U)
 8007308:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 800730a:	63f2      	str	r2, [r6, #60]	; 0x3c
        if (ep->xfer_len == 0U)
 800730c:	bbd3      	cbnz	r3, 8007384 <HAL_PCD_IRQHandler+0x418>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800730e:	f002 f8d7 	bl	80094c0 <HAL_PCD_DataInStageCallback>
 8007312:	e639      	b.n	8006f88 <HAL_PCD_IRQHandler+0x1c>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007314:	f891 3128 	ldrb.w	r3, [r1, #296]	; 0x128
 8007318:	f830 5023 	ldrh.w	r5, [r0, r3, lsl #2]
 800731c:	00db      	lsls	r3, r3, #3
 800731e:	f415 4f80 	tst.w	r5, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007322:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8007326:	442b      	add	r3, r5
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007328:	d01b      	beq.n	8007362 <HAL_PCD_IRQHandler+0x3f6>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800732a:	3302      	adds	r3, #2
 800732c:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8007330:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8007334:	b135      	cbz	r5, 8007344 <HAL_PCD_IRQHandler+0x3d8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007336:	462b      	mov	r3, r5
 8007338:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800733c:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8007340:	f001 fa4a 	bl	80087d8 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007344:	19e3      	adds	r3, r4, r7
 8007346:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 800734a:	6822      	ldr	r2, [r4, #0]
 800734c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8007350:	ea0b 0303 	and.w	r3, fp, r3
 8007354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007358:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800735c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8007360:	e79a      	b.n	8007298 <HAL_PCD_IRQHandler+0x32c>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007362:	3306      	adds	r3, #6
 8007364:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8007368:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 800736c:	2d00      	cmp	r5, #0
 800736e:	d0e9      	beq.n	8007344 <HAL_PCD_IRQHandler+0x3d8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007370:	462b      	mov	r3, r5
 8007372:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 8007376:	e7e1      	b.n	800733c <HAL_PCD_IRQHandler+0x3d0>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8007378:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 800737c:	4620      	mov	r0, r4
 800737e:	f7ff fdbf 	bl	8006f00 <HAL_PCD_EP_Receive>
 8007382:	e7a1      	b.n	80072c8 <HAL_PCD_IRQHandler+0x35c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8007384:	f7ff fddb 	bl	8006f3e <HAL_PCD_EP_Transmit>
 8007388:	e5fe      	b.n	8006f88 <HAL_PCD_IRQHandler+0x1c>
 800738a:	bf00      	nop
 800738c:	ffff8f0f 	.word	0xffff8f0f
 8007390:	ffff8000 	.word	0xffff8000
 8007394:	ffff8f8f 	.word	0xffff8f8f

08007398 <HAL_PCD_EP_SetStall>:
{
 8007398:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800739a:	6843      	ldr	r3, [r0, #4]
 800739c:	f001 0507 	and.w	r5, r1, #7
 80073a0:	429d      	cmp	r5, r3
{
 80073a2:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80073a4:	d828      	bhi.n	80073f8 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 80073a6:	060b      	lsls	r3, r1, #24
 80073a8:	d51d      	bpl.n	80073e6 <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 80073aa:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073ac:	016b      	lsls	r3, r5, #5
 80073ae:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 80073b2:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073b4:	4401      	add	r1, r0
    ep->is_in = 1U;
 80073b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 80073ba:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80073bc:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80073be:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80073c0:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d019      	beq.n	80073fc <HAL_PCD_EP_SetStall+0x64>
 80073c8:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80073cc:	6820      	ldr	r0, [r4, #0]
 80073ce:	f001 f8b1 	bl	8008534 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80073d2:	b925      	cbnz	r5, 80073de <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80073d4:	f504 710c 	add.w	r1, r4, #560	; 0x230
 80073d8:	6820      	ldr	r0, [r4, #0]
 80073da:	f001 f917 	bl	800860c <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80073de:	2000      	movs	r0, #0
 80073e0:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 80073e4:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80073e6:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80073e8:	014b      	lsls	r3, r1, #5
 80073ea:	f503 7194 	add.w	r1, r3, #296	; 0x128
    ep->is_in = 0U;
 80073ee:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80073f0:	4401      	add	r1, r0
    ep->is_in = 0U;
 80073f2:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 80073f6:	e7e0      	b.n	80073ba <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 80073f8:	2001      	movs	r0, #1
 80073fa:	e7f3      	b.n	80073e4 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 80073fc:	2002      	movs	r0, #2
 80073fe:	e7f1      	b.n	80073e4 <HAL_PCD_EP_SetStall+0x4c>

08007400 <HAL_PCD_EP_ClrStall>:
{
 8007400:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007402:	6843      	ldr	r3, [r0, #4]
 8007404:	f001 020f 	and.w	r2, r1, #15
 8007408:	429a      	cmp	r2, r3
{
 800740a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800740c:	d827      	bhi.n	800745e <HAL_PCD_EP_ClrStall+0x5e>
 800740e:	f001 0207 	and.w	r2, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 8007412:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007416:	ea4f 1342 	mov.w	r3, r2, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800741a:	bf14      	ite	ne
 800741c:	f103 0128 	addne.w	r1, r3, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007420:	f503 7194 	addeq.w	r1, r3, #296	; 0x128
 8007424:	4418      	add	r0, r3
  ep->is_stall = 0U;
 8007426:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 800742a:	bf15      	itete	ne
 800742c:	2301      	movne	r3, #1
    ep->is_in = 0U;
 800742e:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007430:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007432:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8007434:	bf14      	ite	ne
 8007436:	f880 3029 	strbne.w	r3, [r0, #41]	; 0x29
    ep->is_in = 0U;
 800743a:	f880 3129 	strbeq.w	r3, [r0, #297]	; 0x129
  ep->is_stall = 0U;
 800743e:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007440:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8007442:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8007446:	2b01      	cmp	r3, #1
 8007448:	d00b      	beq.n	8007462 <HAL_PCD_EP_ClrStall+0x62>
 800744a:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800744c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800744e:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007452:	f001 f88b 	bl	800856c <USB_EPClearStall>
  return HAL_OK;
 8007456:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8007458:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
}
 800745c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800745e:	2001      	movs	r0, #1
 8007460:	e7fc      	b.n	800745c <HAL_PCD_EP_ClrStall+0x5c>
  __HAL_LOCK(hpcd);
 8007462:	2002      	movs	r0, #2
 8007464:	e7fa      	b.n	800745c <HAL_PCD_EP_ClrStall+0x5c>

08007466 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007466:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800746a:	bf1b      	ittet	ne
 800746c:	f001 0107 	andne.w	r1, r1, #7
 8007470:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007474:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007478:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800747a:	bf08      	it	eq
 800747c:	f500 7094 	addeq.w	r0, r0, #296	; 0x128
 8007480:	b299      	uxth	r1, r3
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007482:	b91a      	cbnz	r2, 800748c <HAL_PCDEx_PMAConfig+0x26>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007484:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007486:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8007488:	2000      	movs	r0, #0
 800748a:	4770      	bx	lr
    ep->doublebuffer = 1U;
 800748c:	2201      	movs	r2, #1
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800748e:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8007490:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007492:	8101      	strh	r1, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007494:	8143      	strh	r3, [r0, #10]
 8007496:	e7f7      	b.n	8007488 <HAL_PCDEx_PMAConfig+0x22>

08007498 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007498:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800749c:	4605      	mov	r5, r0
 800749e:	b908      	cbnz	r0, 80074a4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80074a0:	2001      	movs	r0, #1
 80074a2:	e03c      	b.n	800751e <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074a4:	6803      	ldr	r3, [r0, #0]
 80074a6:	07db      	lsls	r3, r3, #31
 80074a8:	d410      	bmi.n	80074cc <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074aa:	682b      	ldr	r3, [r5, #0]
 80074ac:	079f      	lsls	r7, r3, #30
 80074ae:	d45d      	bmi.n	800756c <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074b0:	682b      	ldr	r3, [r5, #0]
 80074b2:	0719      	lsls	r1, r3, #28
 80074b4:	f100 8094 	bmi.w	80075e0 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074b8:	682b      	ldr	r3, [r5, #0]
 80074ba:	075a      	lsls	r2, r3, #29
 80074bc:	f100 80be 	bmi.w	800763c <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074c0:	69e8      	ldr	r0, [r5, #28]
 80074c2:	2800      	cmp	r0, #0
 80074c4:	f040 812c 	bne.w	8007720 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80074c8:	2000      	movs	r0, #0
 80074ca:	e028      	b.n	800751e <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80074cc:	4c8f      	ldr	r4, [pc, #572]	; (800770c <HAL_RCC_OscConfig+0x274>)
 80074ce:	6863      	ldr	r3, [r4, #4]
 80074d0:	f003 030c 	and.w	r3, r3, #12
 80074d4:	2b04      	cmp	r3, #4
 80074d6:	d007      	beq.n	80074e8 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80074d8:	6863      	ldr	r3, [r4, #4]
 80074da:	f003 030c 	and.w	r3, r3, #12
 80074de:	2b08      	cmp	r3, #8
 80074e0:	d109      	bne.n	80074f6 <HAL_RCC_OscConfig+0x5e>
 80074e2:	6863      	ldr	r3, [r4, #4]
 80074e4:	03de      	lsls	r6, r3, #15
 80074e6:	d506      	bpl.n	80074f6 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074e8:	6823      	ldr	r3, [r4, #0]
 80074ea:	039c      	lsls	r4, r3, #14
 80074ec:	d5dd      	bpl.n	80074aa <HAL_RCC_OscConfig+0x12>
 80074ee:	686b      	ldr	r3, [r5, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1da      	bne.n	80074aa <HAL_RCC_OscConfig+0x12>
 80074f4:	e7d4      	b.n	80074a0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074f6:	686b      	ldr	r3, [r5, #4]
 80074f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074fc:	d112      	bne.n	8007524 <HAL_RCC_OscConfig+0x8c>
 80074fe:	6823      	ldr	r3, [r4, #0]
 8007500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007504:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8007506:	f7fe fd9b 	bl	8006040 <HAL_GetTick>
 800750a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800750c:	6823      	ldr	r3, [r4, #0]
 800750e:	0398      	lsls	r0, r3, #14
 8007510:	d4cb      	bmi.n	80074aa <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007512:	f7fe fd95 	bl	8006040 <HAL_GetTick>
 8007516:	1b80      	subs	r0, r0, r6
 8007518:	2864      	cmp	r0, #100	; 0x64
 800751a:	d9f7      	bls.n	800750c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 800751c:	2003      	movs	r0, #3
}
 800751e:	b002      	add	sp, #8
 8007520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007524:	b99b      	cbnz	r3, 800754e <HAL_RCC_OscConfig+0xb6>
 8007526:	6823      	ldr	r3, [r4, #0]
 8007528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007534:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8007536:	f7fe fd83 	bl	8006040 <HAL_GetTick>
 800753a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800753c:	6823      	ldr	r3, [r4, #0]
 800753e:	0399      	lsls	r1, r3, #14
 8007540:	d5b3      	bpl.n	80074aa <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007542:	f7fe fd7d 	bl	8006040 <HAL_GetTick>
 8007546:	1b80      	subs	r0, r0, r6
 8007548:	2864      	cmp	r0, #100	; 0x64
 800754a:	d9f7      	bls.n	800753c <HAL_RCC_OscConfig+0xa4>
 800754c:	e7e6      	b.n	800751c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800754e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007552:	6823      	ldr	r3, [r4, #0]
 8007554:	d103      	bne.n	800755e <HAL_RCC_OscConfig+0xc6>
 8007556:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800755a:	6023      	str	r3, [r4, #0]
 800755c:	e7cf      	b.n	80074fe <HAL_RCC_OscConfig+0x66>
 800755e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007562:	6023      	str	r3, [r4, #0]
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800756a:	e7cb      	b.n	8007504 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800756c:	4c67      	ldr	r4, [pc, #412]	; (800770c <HAL_RCC_OscConfig+0x274>)
 800756e:	6863      	ldr	r3, [r4, #4]
 8007570:	f013 0f0c 	tst.w	r3, #12
 8007574:	d007      	beq.n	8007586 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007576:	6863      	ldr	r3, [r4, #4]
 8007578:	f003 030c 	and.w	r3, r3, #12
 800757c:	2b08      	cmp	r3, #8
 800757e:	d110      	bne.n	80075a2 <HAL_RCC_OscConfig+0x10a>
 8007580:	6863      	ldr	r3, [r4, #4]
 8007582:	03da      	lsls	r2, r3, #15
 8007584:	d40d      	bmi.n	80075a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	079b      	lsls	r3, r3, #30
 800758a:	d502      	bpl.n	8007592 <HAL_RCC_OscConfig+0xfa>
 800758c:	692b      	ldr	r3, [r5, #16]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d186      	bne.n	80074a0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	696a      	ldr	r2, [r5, #20]
 8007596:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800759a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800759e:	6023      	str	r3, [r4, #0]
 80075a0:	e786      	b.n	80074b0 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80075a2:	692a      	ldr	r2, [r5, #16]
 80075a4:	4b5a      	ldr	r3, [pc, #360]	; (8007710 <HAL_RCC_OscConfig+0x278>)
 80075a6:	b16a      	cbz	r2, 80075c4 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80075a8:	2201      	movs	r2, #1
 80075aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80075ac:	f7fe fd48 	bl	8006040 <HAL_GetTick>
 80075b0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	079f      	lsls	r7, r3, #30
 80075b6:	d4ec      	bmi.n	8007592 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075b8:	f7fe fd42 	bl	8006040 <HAL_GetTick>
 80075bc:	1b80      	subs	r0, r0, r6
 80075be:	2802      	cmp	r0, #2
 80075c0:	d9f7      	bls.n	80075b2 <HAL_RCC_OscConfig+0x11a>
 80075c2:	e7ab      	b.n	800751c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80075c4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80075c6:	f7fe fd3b 	bl	8006040 <HAL_GetTick>
 80075ca:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	0798      	lsls	r0, r3, #30
 80075d0:	f57f af6e 	bpl.w	80074b0 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075d4:	f7fe fd34 	bl	8006040 <HAL_GetTick>
 80075d8:	1b80      	subs	r0, r0, r6
 80075da:	2802      	cmp	r0, #2
 80075dc:	d9f6      	bls.n	80075cc <HAL_RCC_OscConfig+0x134>
 80075de:	e79d      	b.n	800751c <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80075e0:	69aa      	ldr	r2, [r5, #24]
 80075e2:	4c4a      	ldr	r4, [pc, #296]	; (800770c <HAL_RCC_OscConfig+0x274>)
 80075e4:	4b4b      	ldr	r3, [pc, #300]	; (8007714 <HAL_RCC_OscConfig+0x27c>)
 80075e6:	b1da      	cbz	r2, 8007620 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80075e8:	2201      	movs	r2, #1
 80075ea:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80075ec:	f7fe fd28 	bl	8006040 <HAL_GetTick>
 80075f0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075f4:	079b      	lsls	r3, r3, #30
 80075f6:	d50d      	bpl.n	8007614 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80075f8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80075fc:	4b46      	ldr	r3, [pc, #280]	; (8007718 <HAL_RCC_OscConfig+0x280>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	fbb3 f3f2 	udiv	r3, r3, r2
 8007604:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8007606:	bf00      	nop
  }
  while (Delay --);
 8007608:	9b01      	ldr	r3, [sp, #4]
 800760a:	1e5a      	subs	r2, r3, #1
 800760c:	9201      	str	r2, [sp, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1f9      	bne.n	8007606 <HAL_RCC_OscConfig+0x16e>
 8007612:	e751      	b.n	80074b8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007614:	f7fe fd14 	bl	8006040 <HAL_GetTick>
 8007618:	1b80      	subs	r0, r0, r6
 800761a:	2802      	cmp	r0, #2
 800761c:	d9e9      	bls.n	80075f2 <HAL_RCC_OscConfig+0x15a>
 800761e:	e77d      	b.n	800751c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8007620:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8007622:	f7fe fd0d 	bl	8006040 <HAL_GetTick>
 8007626:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800762a:	079f      	lsls	r7, r3, #30
 800762c:	f57f af44 	bpl.w	80074b8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007630:	f7fe fd06 	bl	8006040 <HAL_GetTick>
 8007634:	1b80      	subs	r0, r0, r6
 8007636:	2802      	cmp	r0, #2
 8007638:	d9f6      	bls.n	8007628 <HAL_RCC_OscConfig+0x190>
 800763a:	e76f      	b.n	800751c <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800763c:	4c33      	ldr	r4, [pc, #204]	; (800770c <HAL_RCC_OscConfig+0x274>)
 800763e:	69e3      	ldr	r3, [r4, #28]
 8007640:	00d8      	lsls	r0, r3, #3
 8007642:	d424      	bmi.n	800768e <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8007644:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8007646:	69e3      	ldr	r3, [r4, #28]
 8007648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800764c:	61e3      	str	r3, [r4, #28]
 800764e:	69e3      	ldr	r3, [r4, #28]
 8007650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007658:	4e30      	ldr	r6, [pc, #192]	; (800771c <HAL_RCC_OscConfig+0x284>)
 800765a:	6833      	ldr	r3, [r6, #0]
 800765c:	05d9      	lsls	r1, r3, #23
 800765e:	d518      	bpl.n	8007692 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007660:	68eb      	ldr	r3, [r5, #12]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d126      	bne.n	80076b4 <HAL_RCC_OscConfig+0x21c>
 8007666:	6a23      	ldr	r3, [r4, #32]
 8007668:	f043 0301 	orr.w	r3, r3, #1
 800766c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800766e:	f7fe fce7 	bl	8006040 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007672:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8007676:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007678:	6a23      	ldr	r3, [r4, #32]
 800767a:	079b      	lsls	r3, r3, #30
 800767c:	d53f      	bpl.n	80076fe <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 800767e:	2f00      	cmp	r7, #0
 8007680:	f43f af1e 	beq.w	80074c0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007684:	69e3      	ldr	r3, [r4, #28]
 8007686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800768a:	61e3      	str	r3, [r4, #28]
 800768c:	e718      	b.n	80074c0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800768e:	2700      	movs	r7, #0
 8007690:	e7e2      	b.n	8007658 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007692:	6833      	ldr	r3, [r6, #0]
 8007694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007698:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800769a:	f7fe fcd1 	bl	8006040 <HAL_GetTick>
 800769e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076a0:	6833      	ldr	r3, [r6, #0]
 80076a2:	05da      	lsls	r2, r3, #23
 80076a4:	d4dc      	bmi.n	8007660 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076a6:	f7fe fccb 	bl	8006040 <HAL_GetTick>
 80076aa:	eba0 0008 	sub.w	r0, r0, r8
 80076ae:	2864      	cmp	r0, #100	; 0x64
 80076b0:	d9f6      	bls.n	80076a0 <HAL_RCC_OscConfig+0x208>
 80076b2:	e733      	b.n	800751c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076b4:	b9ab      	cbnz	r3, 80076e2 <HAL_RCC_OscConfig+0x24a>
 80076b6:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076b8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076bc:	f023 0301 	bic.w	r3, r3, #1
 80076c0:	6223      	str	r3, [r4, #32]
 80076c2:	6a23      	ldr	r3, [r4, #32]
 80076c4:	f023 0304 	bic.w	r3, r3, #4
 80076c8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80076ca:	f7fe fcb9 	bl	8006040 <HAL_GetTick>
 80076ce:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076d0:	6a23      	ldr	r3, [r4, #32]
 80076d2:	0798      	lsls	r0, r3, #30
 80076d4:	d5d3      	bpl.n	800767e <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076d6:	f7fe fcb3 	bl	8006040 <HAL_GetTick>
 80076da:	1b80      	subs	r0, r0, r6
 80076dc:	4540      	cmp	r0, r8
 80076de:	d9f7      	bls.n	80076d0 <HAL_RCC_OscConfig+0x238>
 80076e0:	e71c      	b.n	800751c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076e2:	2b05      	cmp	r3, #5
 80076e4:	6a23      	ldr	r3, [r4, #32]
 80076e6:	d103      	bne.n	80076f0 <HAL_RCC_OscConfig+0x258>
 80076e8:	f043 0304 	orr.w	r3, r3, #4
 80076ec:	6223      	str	r3, [r4, #32]
 80076ee:	e7ba      	b.n	8007666 <HAL_RCC_OscConfig+0x1ce>
 80076f0:	f023 0301 	bic.w	r3, r3, #1
 80076f4:	6223      	str	r3, [r4, #32]
 80076f6:	6a23      	ldr	r3, [r4, #32]
 80076f8:	f023 0304 	bic.w	r3, r3, #4
 80076fc:	e7b6      	b.n	800766c <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076fe:	f7fe fc9f 	bl	8006040 <HAL_GetTick>
 8007702:	eba0 0008 	sub.w	r0, r0, r8
 8007706:	42b0      	cmp	r0, r6
 8007708:	d9b6      	bls.n	8007678 <HAL_RCC_OscConfig+0x1e0>
 800770a:	e707      	b.n	800751c <HAL_RCC_OscConfig+0x84>
 800770c:	40021000 	.word	0x40021000
 8007710:	42420000 	.word	0x42420000
 8007714:	42420480 	.word	0x42420480
 8007718:	20000038 	.word	0x20000038
 800771c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007720:	4b2a      	ldr	r3, [pc, #168]	; (80077cc <HAL_RCC_OscConfig+0x334>)
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	461c      	mov	r4, r3
 8007726:	f002 020c 	and.w	r2, r2, #12
 800772a:	2a08      	cmp	r2, #8
 800772c:	d03d      	beq.n	80077aa <HAL_RCC_OscConfig+0x312>
 800772e:	2300      	movs	r3, #0
 8007730:	4e27      	ldr	r6, [pc, #156]	; (80077d0 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007732:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8007734:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007736:	d12b      	bne.n	8007790 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8007738:	f7fe fc82 	bl	8006040 <HAL_GetTick>
 800773c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	0199      	lsls	r1, r3, #6
 8007742:	d41f      	bmi.n	8007784 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007744:	6a2b      	ldr	r3, [r5, #32]
 8007746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800774a:	d105      	bne.n	8007758 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800774c:	6862      	ldr	r2, [r4, #4]
 800774e:	68a9      	ldr	r1, [r5, #8]
 8007750:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007754:	430a      	orrs	r2, r1
 8007756:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007758:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800775a:	6862      	ldr	r2, [r4, #4]
 800775c:	430b      	orrs	r3, r1
 800775e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8007762:	4313      	orrs	r3, r2
 8007764:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8007766:	2301      	movs	r3, #1
 8007768:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800776a:	f7fe fc69 	bl	8006040 <HAL_GetTick>
 800776e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007770:	6823      	ldr	r3, [r4, #0]
 8007772:	019a      	lsls	r2, r3, #6
 8007774:	f53f aea8 	bmi.w	80074c8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007778:	f7fe fc62 	bl	8006040 <HAL_GetTick>
 800777c:	1b40      	subs	r0, r0, r5
 800777e:	2802      	cmp	r0, #2
 8007780:	d9f6      	bls.n	8007770 <HAL_RCC_OscConfig+0x2d8>
 8007782:	e6cb      	b.n	800751c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007784:	f7fe fc5c 	bl	8006040 <HAL_GetTick>
 8007788:	1bc0      	subs	r0, r0, r7
 800778a:	2802      	cmp	r0, #2
 800778c:	d9d7      	bls.n	800773e <HAL_RCC_OscConfig+0x2a6>
 800778e:	e6c5      	b.n	800751c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8007790:	f7fe fc56 	bl	8006040 <HAL_GetTick>
 8007794:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	019b      	lsls	r3, r3, #6
 800779a:	f57f ae95 	bpl.w	80074c8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800779e:	f7fe fc4f 	bl	8006040 <HAL_GetTick>
 80077a2:	1b40      	subs	r0, r0, r5
 80077a4:	2802      	cmp	r0, #2
 80077a6:	d9f6      	bls.n	8007796 <HAL_RCC_OscConfig+0x2fe>
 80077a8:	e6b8      	b.n	800751c <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077aa:	2801      	cmp	r0, #1
 80077ac:	f43f aeb7 	beq.w	800751e <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80077b0:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077b2:	6a2b      	ldr	r3, [r5, #32]
 80077b4:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80077b8:	429a      	cmp	r2, r3
 80077ba:	f47f ae71 	bne.w	80074a0 <HAL_RCC_OscConfig+0x8>
 80077be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80077c0:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80077c4:	1ac0      	subs	r0, r0, r3
 80077c6:	bf18      	it	ne
 80077c8:	2001      	movne	r0, #1
 80077ca:	e6a8      	b.n	800751e <HAL_RCC_OscConfig+0x86>
 80077cc:	40021000 	.word	0x40021000
 80077d0:	42420060 	.word	0x42420060

080077d4 <HAL_RCC_GetSysClockFreq>:
{
 80077d4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80077d6:	4b18      	ldr	r3, [pc, #96]	; (8007838 <HAL_RCC_GetSysClockFreq+0x64>)
{
 80077d8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80077da:	ac02      	add	r4, sp, #8
 80077dc:	f103 0510 	add.w	r5, r3, #16
 80077e0:	4622      	mov	r2, r4
 80077e2:	6818      	ldr	r0, [r3, #0]
 80077e4:	6859      	ldr	r1, [r3, #4]
 80077e6:	3308      	adds	r3, #8
 80077e8:	c203      	stmia	r2!, {r0, r1}
 80077ea:	42ab      	cmp	r3, r5
 80077ec:	4614      	mov	r4, r2
 80077ee:	d1f7      	bne.n	80077e0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80077f0:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80077f4:	4911      	ldr	r1, [pc, #68]	; (800783c <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80077f6:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80077fa:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80077fc:	f003 020c 	and.w	r2, r3, #12
 8007800:	2a08      	cmp	r2, #8
 8007802:	d117      	bne.n	8007834 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007804:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8007808:	a806      	add	r0, sp, #24
 800780a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800780c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800780e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007812:	d50c      	bpl.n	800782e <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007814:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007816:	480a      	ldr	r0, [pc, #40]	; (8007840 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007818:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800781c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800781e:	aa06      	add	r2, sp, #24
 8007820:	4413      	add	r3, r2
 8007822:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007826:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800782a:	b007      	add	sp, #28
 800782c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800782e:	4805      	ldr	r0, [pc, #20]	; (8007844 <HAL_RCC_GetSysClockFreq+0x70>)
 8007830:	4350      	muls	r0, r2
 8007832:	e7fa      	b.n	800782a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8007834:	4802      	ldr	r0, [pc, #8]	; (8007840 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8007836:	e7f8      	b.n	800782a <HAL_RCC_GetSysClockFreq+0x56>
 8007838:	0800c5cd 	.word	0x0800c5cd
 800783c:	40021000 	.word	0x40021000
 8007840:	007a1200 	.word	0x007a1200
 8007844:	003d0900 	.word	0x003d0900

08007848 <HAL_RCC_ClockConfig>:
{
 8007848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800784c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800784e:	4604      	mov	r4, r0
 8007850:	b910      	cbnz	r0, 8007858 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8007852:	2001      	movs	r0, #1
}
 8007854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007858:	4a44      	ldr	r2, [pc, #272]	; (800796c <HAL_RCC_ClockConfig+0x124>)
 800785a:	6813      	ldr	r3, [r2, #0]
 800785c:	f003 0307 	and.w	r3, r3, #7
 8007860:	428b      	cmp	r3, r1
 8007862:	d328      	bcc.n	80078b6 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007864:	6821      	ldr	r1, [r4, #0]
 8007866:	078e      	lsls	r6, r1, #30
 8007868:	d430      	bmi.n	80078cc <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800786a:	07ca      	lsls	r2, r1, #31
 800786c:	d443      	bmi.n	80078f6 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800786e:	4a3f      	ldr	r2, [pc, #252]	; (800796c <HAL_RCC_ClockConfig+0x124>)
 8007870:	6813      	ldr	r3, [r2, #0]
 8007872:	f003 0307 	and.w	r3, r3, #7
 8007876:	42ab      	cmp	r3, r5
 8007878:	d865      	bhi.n	8007946 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800787a:	6822      	ldr	r2, [r4, #0]
 800787c:	4d3c      	ldr	r5, [pc, #240]	; (8007970 <HAL_RCC_ClockConfig+0x128>)
 800787e:	f012 0f04 	tst.w	r2, #4
 8007882:	d16c      	bne.n	800795e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007884:	0713      	lsls	r3, r2, #28
 8007886:	d506      	bpl.n	8007896 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007888:	686b      	ldr	r3, [r5, #4]
 800788a:	6922      	ldr	r2, [r4, #16]
 800788c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8007890:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007894:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007896:	f7ff ff9d 	bl	80077d4 <HAL_RCC_GetSysClockFreq>
 800789a:	686b      	ldr	r3, [r5, #4]
 800789c:	4a35      	ldr	r2, [pc, #212]	; (8007974 <HAL_RCC_ClockConfig+0x12c>)
 800789e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80078a2:	5cd3      	ldrb	r3, [r2, r3]
 80078a4:	40d8      	lsrs	r0, r3
 80078a6:	4b34      	ldr	r3, [pc, #208]	; (8007978 <HAL_RCC_ClockConfig+0x130>)
 80078a8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80078aa:	4b34      	ldr	r3, [pc, #208]	; (800797c <HAL_RCC_ClockConfig+0x134>)
 80078ac:	6818      	ldr	r0, [r3, #0]
 80078ae:	f7fa fd2f 	bl	8002310 <HAL_InitTick>
  return HAL_OK;
 80078b2:	2000      	movs	r0, #0
 80078b4:	e7ce      	b.n	8007854 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078b6:	6813      	ldr	r3, [r2, #0]
 80078b8:	f023 0307 	bic.w	r3, r3, #7
 80078bc:	430b      	orrs	r3, r1
 80078be:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078c0:	6813      	ldr	r3, [r2, #0]
 80078c2:	f003 0307 	and.w	r3, r3, #7
 80078c6:	428b      	cmp	r3, r1
 80078c8:	d1c3      	bne.n	8007852 <HAL_RCC_ClockConfig+0xa>
 80078ca:	e7cb      	b.n	8007864 <HAL_RCC_ClockConfig+0x1c>
 80078cc:	4b28      	ldr	r3, [pc, #160]	; (8007970 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078ce:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078d2:	bf1e      	ittt	ne
 80078d4:	685a      	ldrne	r2, [r3, #4]
 80078d6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80078da:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078dc:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078de:	bf42      	ittt	mi
 80078e0:	685a      	ldrmi	r2, [r3, #4]
 80078e2:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80078e6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	68a0      	ldr	r0, [r4, #8]
 80078ec:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80078f0:	4302      	orrs	r2, r0
 80078f2:	605a      	str	r2, [r3, #4]
 80078f4:	e7b9      	b.n	800786a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078f6:	6862      	ldr	r2, [r4, #4]
 80078f8:	4e1d      	ldr	r6, [pc, #116]	; (8007970 <HAL_RCC_ClockConfig+0x128>)
 80078fa:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078fc:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078fe:	d11a      	bne.n	8007936 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007900:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007904:	d0a5      	beq.n	8007852 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007906:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007908:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800790c:	f023 0303 	bic.w	r3, r3, #3
 8007910:	4313      	orrs	r3, r2
 8007912:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8007914:	f7fe fb94 	bl	8006040 <HAL_GetTick>
 8007918:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800791a:	6873      	ldr	r3, [r6, #4]
 800791c:	6862      	ldr	r2, [r4, #4]
 800791e:	f003 030c 	and.w	r3, r3, #12
 8007922:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007926:	d0a2      	beq.n	800786e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007928:	f7fe fb8a 	bl	8006040 <HAL_GetTick>
 800792c:	1bc0      	subs	r0, r0, r7
 800792e:	4540      	cmp	r0, r8
 8007930:	d9f3      	bls.n	800791a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8007932:	2003      	movs	r0, #3
 8007934:	e78e      	b.n	8007854 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007936:	2a02      	cmp	r2, #2
 8007938:	d102      	bne.n	8007940 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800793a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800793e:	e7e1      	b.n	8007904 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007940:	f013 0f02 	tst.w	r3, #2
 8007944:	e7de      	b.n	8007904 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007946:	6813      	ldr	r3, [r2, #0]
 8007948:	f023 0307 	bic.w	r3, r3, #7
 800794c:	432b      	orrs	r3, r5
 800794e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007950:	6813      	ldr	r3, [r2, #0]
 8007952:	f003 0307 	and.w	r3, r3, #7
 8007956:	42ab      	cmp	r3, r5
 8007958:	f47f af7b 	bne.w	8007852 <HAL_RCC_ClockConfig+0xa>
 800795c:	e78d      	b.n	800787a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800795e:	686b      	ldr	r3, [r5, #4]
 8007960:	68e1      	ldr	r1, [r4, #12]
 8007962:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007966:	430b      	orrs	r3, r1
 8007968:	606b      	str	r3, [r5, #4]
 800796a:	e78b      	b.n	8007884 <HAL_RCC_ClockConfig+0x3c>
 800796c:	40022000 	.word	0x40022000
 8007970:	40021000 	.word	0x40021000
 8007974:	0800d24a 	.word	0x0800d24a
 8007978:	20000038 	.word	0x20000038
 800797c:	20000040 	.word	0x20000040

08007980 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007980:	4b04      	ldr	r3, [pc, #16]	; (8007994 <HAL_RCC_GetPCLK1Freq+0x14>)
 8007982:	4a05      	ldr	r2, [pc, #20]	; (8007998 <HAL_RCC_GetPCLK1Freq+0x18>)
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800798a:	5cd3      	ldrb	r3, [r2, r3]
 800798c:	4a03      	ldr	r2, [pc, #12]	; (800799c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800798e:	6810      	ldr	r0, [r2, #0]
}
 8007990:	40d8      	lsrs	r0, r3
 8007992:	4770      	bx	lr
 8007994:	40021000 	.word	0x40021000
 8007998:	0800d25a 	.word	0x0800d25a
 800799c:	20000038 	.word	0x20000038

080079a0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80079a0:	4b04      	ldr	r3, [pc, #16]	; (80079b4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80079a2:	4a05      	ldr	r2, [pc, #20]	; (80079b8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80079aa:	5cd3      	ldrb	r3, [r2, r3]
 80079ac:	4a03      	ldr	r2, [pc, #12]	; (80079bc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80079ae:	6810      	ldr	r0, [r2, #0]
}
 80079b0:	40d8      	lsrs	r0, r3
 80079b2:	4770      	bx	lr
 80079b4:	40021000 	.word	0x40021000
 80079b8:	0800d25a 	.word	0x0800d25a
 80079bc:	20000038 	.word	0x20000038

080079c0 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80079c0:	230f      	movs	r3, #15
 80079c2:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80079c4:	4b0b      	ldr	r3, [pc, #44]	; (80079f4 <HAL_RCC_GetClockConfig+0x34>)
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	f002 0203 	and.w	r2, r2, #3
 80079cc:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80079d4:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80079dc:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	08db      	lsrs	r3, r3, #3
 80079e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079e6:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80079e8:	4b03      	ldr	r3, [pc, #12]	; (80079f8 <HAL_RCC_GetClockConfig+0x38>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 0307 	and.w	r3, r3, #7
 80079f0:	600b      	str	r3, [r1, #0]
}
 80079f2:	4770      	bx	lr
 80079f4:	40021000 	.word	0x40021000
 80079f8:	40022000 	.word	0x40022000

080079fc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80079fc:	6803      	ldr	r3, [r0, #0]
{
 80079fe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007a02:	07d9      	lsls	r1, r3, #31
{
 8007a04:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007a06:	d520      	bpl.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a08:	4c35      	ldr	r4, [pc, #212]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007a0a:	69e3      	ldr	r3, [r4, #28]
 8007a0c:	00da      	lsls	r2, r3, #3
 8007a0e:	d432      	bmi.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8007a10:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a12:	69e3      	ldr	r3, [r4, #28]
 8007a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a18:	61e3      	str	r3, [r4, #28]
 8007a1a:	69e3      	ldr	r3, [r4, #28]
 8007a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a20:	9301      	str	r3, [sp, #4]
 8007a22:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a24:	4e2f      	ldr	r6, [pc, #188]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007a26:	6833      	ldr	r3, [r6, #0]
 8007a28:	05db      	lsls	r3, r3, #23
 8007a2a:	d526      	bpl.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a2c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a2e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007a32:	d136      	bne.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a34:	6a23      	ldr	r3, [r4, #32]
 8007a36:	686a      	ldr	r2, [r5, #4]
 8007a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007a40:	b11f      	cbz	r7, 8007a4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a42:	69e3      	ldr	r3, [r4, #28]
 8007a44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a48:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a4a:	6828      	ldr	r0, [r5, #0]
 8007a4c:	0783      	lsls	r3, r0, #30
 8007a4e:	d506      	bpl.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a50:	4a23      	ldr	r2, [pc, #140]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007a52:	68a9      	ldr	r1, [r5, #8]
 8007a54:	6853      	ldr	r3, [r2, #4]
 8007a56:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007a5a:	430b      	orrs	r3, r1
 8007a5c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007a5e:	f010 0010 	ands.w	r0, r0, #16
 8007a62:	d01b      	beq.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a64:	4a1e      	ldr	r2, [pc, #120]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007a66:	68e9      	ldr	r1, [r5, #12]
 8007a68:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007a6a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a6c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007a70:	430b      	orrs	r3, r1
 8007a72:	6053      	str	r3, [r2, #4]
 8007a74:	e012      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8007a76:	2700      	movs	r7, #0
 8007a78:	e7d4      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a7a:	6833      	ldr	r3, [r6, #0]
 8007a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a80:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8007a82:	f7fe fadd 	bl	8006040 <HAL_GetTick>
 8007a86:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a88:	6833      	ldr	r3, [r6, #0]
 8007a8a:	05d8      	lsls	r0, r3, #23
 8007a8c:	d4ce      	bmi.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a8e:	f7fe fad7 	bl	8006040 <HAL_GetTick>
 8007a92:	eba0 0008 	sub.w	r0, r0, r8
 8007a96:	2864      	cmp	r0, #100	; 0x64
 8007a98:	d9f6      	bls.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8007a9a:	2003      	movs	r0, #3
}
 8007a9c:	b002      	add	sp, #8
 8007a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007aa2:	686a      	ldr	r2, [r5, #4]
 8007aa4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d0c3      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8007aac:	2001      	movs	r0, #1
 8007aae:	4a0e      	ldr	r2, [pc, #56]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ab0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8007ab2:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007ab4:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ab6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007aba:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8007abc:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007abe:	07d9      	lsls	r1, r3, #31
 8007ac0:	d5b8      	bpl.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8007ac2:	f7fe fabd 	bl	8006040 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ac6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8007aca:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007acc:	6a23      	ldr	r3, [r4, #32]
 8007ace:	079a      	lsls	r2, r3, #30
 8007ad0:	d4b0      	bmi.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ad2:	f7fe fab5 	bl	8006040 <HAL_GetTick>
 8007ad6:	1b80      	subs	r0, r0, r6
 8007ad8:	4540      	cmp	r0, r8
 8007ada:	d9f7      	bls.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8007adc:	e7dd      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8007ade:	bf00      	nop
 8007ae0:	40021000 	.word	0x40021000
 8007ae4:	40007000 	.word	0x40007000
 8007ae8:	42420440 	.word	0x42420440

08007aec <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007aec:	6803      	ldr	r3, [r0, #0]
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
}
 8007aee:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007af0:	68da      	ldr	r2, [r3, #12]
 8007af2:	f042 0201 	orr.w	r2, r2, #1
 8007af6:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007af8:	689a      	ldr	r2, [r3, #8]
 8007afa:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007afe:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8007b00:	bf1e      	ittt	ne
 8007b02:	681a      	ldrne	r2, [r3, #0]
 8007b04:	f042 0201 	orrne.w	r2, r2, #1
 8007b08:	601a      	strne	r2, [r3, #0]
}
 8007b0a:	4770      	bx	lr

08007b0c <HAL_TIM_OC_DelayElapsedCallback>:
 8007b0c:	4770      	bx	lr

08007b0e <HAL_TIM_IC_CaptureCallback>:
 8007b0e:	4770      	bx	lr

08007b10 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007b10:	4770      	bx	lr

08007b12 <HAL_TIM_TriggerCallback>:
 8007b12:	4770      	bx	lr

08007b14 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b14:	6803      	ldr	r3, [r0, #0]
{
 8007b16:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b18:	691a      	ldr	r2, [r3, #16]
{
 8007b1a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b1c:	0791      	lsls	r1, r2, #30
 8007b1e:	d50e      	bpl.n	8007b3e <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b20:	68da      	ldr	r2, [r3, #12]
 8007b22:	0792      	lsls	r2, r2, #30
 8007b24:	d50b      	bpl.n	8007b3e <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b26:	f06f 0202 	mvn.w	r2, #2
 8007b2a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b2c:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b2e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b30:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b32:	079b      	lsls	r3, r3, #30
 8007b34:	d077      	beq.n	8007c26 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b36:	f7ff ffea 	bl	8007b0e <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b3e:	6823      	ldr	r3, [r4, #0]
 8007b40:	691a      	ldr	r2, [r3, #16]
 8007b42:	0750      	lsls	r0, r2, #29
 8007b44:	d510      	bpl.n	8007b68 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b46:	68da      	ldr	r2, [r3, #12]
 8007b48:	0751      	lsls	r1, r2, #29
 8007b4a:	d50d      	bpl.n	8007b68 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b4c:	f06f 0204 	mvn.w	r2, #4
 8007b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b52:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b54:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b56:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b58:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b5c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b5e:	d068      	beq.n	8007c32 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8007b60:	f7ff ffd5 	bl	8007b0e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b64:	2300      	movs	r3, #0
 8007b66:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b68:	6823      	ldr	r3, [r4, #0]
 8007b6a:	691a      	ldr	r2, [r3, #16]
 8007b6c:	0712      	lsls	r2, r2, #28
 8007b6e:	d50f      	bpl.n	8007b90 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	0710      	lsls	r0, r2, #28
 8007b74:	d50c      	bpl.n	8007b90 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b76:	f06f 0208 	mvn.w	r2, #8
 8007b7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b7c:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b7e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b80:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b82:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b84:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b86:	d05a      	beq.n	8007c3e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8007b88:	f7ff ffc1 	bl	8007b0e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	691a      	ldr	r2, [r3, #16]
 8007b94:	06d2      	lsls	r2, r2, #27
 8007b96:	d510      	bpl.n	8007bba <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b98:	68da      	ldr	r2, [r3, #12]
 8007b9a:	06d0      	lsls	r0, r2, #27
 8007b9c:	d50d      	bpl.n	8007bba <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b9e:	f06f 0210 	mvn.w	r2, #16
 8007ba2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ba4:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ba6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ba8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007baa:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bae:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bb0:	d04b      	beq.n	8007c4a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8007bb2:	f7ff ffac 	bl	8007b0e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	691a      	ldr	r2, [r3, #16]
 8007bbe:	07d1      	lsls	r1, r2, #31
 8007bc0:	d508      	bpl.n	8007bd4 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007bc2:	68da      	ldr	r2, [r3, #12]
 8007bc4:	07d2      	lsls	r2, r2, #31
 8007bc6:	d505      	bpl.n	8007bd4 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007bc8:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bcc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007bce:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bd0:	f7fa fab2 	bl	8002138 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007bd4:	6823      	ldr	r3, [r4, #0]
 8007bd6:	691a      	ldr	r2, [r3, #16]
 8007bd8:	0610      	lsls	r0, r2, #24
 8007bda:	d508      	bpl.n	8007bee <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bdc:	68da      	ldr	r2, [r3, #12]
 8007bde:	0611      	lsls	r1, r2, #24
 8007be0:	d505      	bpl.n	8007bee <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007be2:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007be6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007be8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007bea:	f000 f944 	bl	8007e76 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007bee:	6823      	ldr	r3, [r4, #0]
 8007bf0:	691a      	ldr	r2, [r3, #16]
 8007bf2:	0652      	lsls	r2, r2, #25
 8007bf4:	d508      	bpl.n	8007c08 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bf6:	68da      	ldr	r2, [r3, #12]
 8007bf8:	0650      	lsls	r0, r2, #25
 8007bfa:	d505      	bpl.n	8007c08 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007bfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c00:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c02:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007c04:	f7ff ff85 	bl	8007b12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	691a      	ldr	r2, [r3, #16]
 8007c0c:	0691      	lsls	r1, r2, #26
 8007c0e:	d522      	bpl.n	8007c56 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c10:	68da      	ldr	r2, [r3, #12]
 8007c12:	0692      	lsls	r2, r2, #26
 8007c14:	d51f      	bpl.n	8007c56 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c16:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c1a:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c20:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007c22:	f000 b927 	b.w	8007e74 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c26:	f7ff ff71 	bl	8007b0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f7ff ff70 	bl	8007b10 <HAL_TIM_PWM_PulseFinishedCallback>
 8007c30:	e783      	b.n	8007b3a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c32:	f7ff ff6b 	bl	8007b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c36:	4620      	mov	r0, r4
 8007c38:	f7ff ff6a 	bl	8007b10 <HAL_TIM_PWM_PulseFinishedCallback>
 8007c3c:	e792      	b.n	8007b64 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c3e:	f7ff ff65 	bl	8007b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c42:	4620      	mov	r0, r4
 8007c44:	f7ff ff64 	bl	8007b10 <HAL_TIM_PWM_PulseFinishedCallback>
 8007c48:	e7a0      	b.n	8007b8c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c4a:	f7ff ff5f 	bl	8007b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f7ff ff5e 	bl	8007b10 <HAL_TIM_PWM_PulseFinishedCallback>
 8007c54:	e7af      	b.n	8007bb6 <HAL_TIM_IRQHandler+0xa2>
}
 8007c56:	bd10      	pop	{r4, pc}

08007c58 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c58:	4a1a      	ldr	r2, [pc, #104]	; (8007cc4 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8007c5a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c5c:	4290      	cmp	r0, r2
 8007c5e:	d00a      	beq.n	8007c76 <TIM_Base_SetConfig+0x1e>
 8007c60:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007c64:	d007      	beq.n	8007c76 <TIM_Base_SetConfig+0x1e>
 8007c66:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007c6a:	4290      	cmp	r0, r2
 8007c6c:	d003      	beq.n	8007c76 <TIM_Base_SetConfig+0x1e>
 8007c6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c72:	4290      	cmp	r0, r2
 8007c74:	d115      	bne.n	8007ca2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8007c76:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007c7c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c7e:	4a11      	ldr	r2, [pc, #68]	; (8007cc4 <TIM_Base_SetConfig+0x6c>)
 8007c80:	4290      	cmp	r0, r2
 8007c82:	d00a      	beq.n	8007c9a <TIM_Base_SetConfig+0x42>
 8007c84:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007c88:	d007      	beq.n	8007c9a <TIM_Base_SetConfig+0x42>
 8007c8a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007c8e:	4290      	cmp	r0, r2
 8007c90:	d003      	beq.n	8007c9a <TIM_Base_SetConfig+0x42>
 8007c92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c96:	4290      	cmp	r0, r2
 8007c98:	d103      	bne.n	8007ca2 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c9a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ca0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ca2:	694a      	ldr	r2, [r1, #20]
 8007ca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ca8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8007caa:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cac:	688b      	ldr	r3, [r1, #8]
 8007cae:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cb0:	680b      	ldr	r3, [r1, #0]
 8007cb2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cb4:	4b03      	ldr	r3, [pc, #12]	; (8007cc4 <TIM_Base_SetConfig+0x6c>)
 8007cb6:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cb8:	bf04      	itt	eq
 8007cba:	690b      	ldreq	r3, [r1, #16]
 8007cbc:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	6143      	str	r3, [r0, #20]
}
 8007cc2:	4770      	bx	lr
 8007cc4:	40012c00 	.word	0x40012c00

08007cc8 <HAL_TIM_Base_Init>:
{
 8007cc8:	b510      	push	{r4, lr}
  if (htim == NULL)
 8007cca:	4604      	mov	r4, r0
 8007ccc:	b1a0      	cbz	r0, 8007cf8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007cce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007cd2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007cd6:	b91b      	cbnz	r3, 8007ce0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8007cd8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007cdc:	f7fa fa8c 	bl	80021f8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ce2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ce8:	1d21      	adds	r1, r4, #4
 8007cea:	f7ff ffb5 	bl	8007c58 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8007cee:	2301      	movs	r3, #1
  return HAL_OK;
 8007cf0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007cf2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007cf6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007cf8:	2001      	movs	r0, #1
 8007cfa:	e7fc      	b.n	8007cf6 <HAL_TIM_Base_Init+0x2e>

08007cfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cfc:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cfe:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d00:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d02:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d06:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8007d0a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d0c:	6083      	str	r3, [r0, #8]
}
 8007d0e:	bd10      	pop	{r4, pc}

08007d10 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007d10:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8007d14:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8007d16:	2b01      	cmp	r3, #1
{
 8007d18:	4604      	mov	r4, r0
 8007d1a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8007d1e:	d019      	beq.n	8007d54 <HAL_TIM_ConfigClockSource+0x44>
 8007d20:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8007d22:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007d26:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8007d28:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8007d2c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8007d36:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8007d38:	680b      	ldr	r3, [r1, #0]
 8007d3a:	2b40      	cmp	r3, #64	; 0x40
 8007d3c:	d065      	beq.n	8007e0a <HAL_TIM_ConfigClockSource+0xfa>
 8007d3e:	d815      	bhi.n	8007d6c <HAL_TIM_ConfigClockSource+0x5c>
 8007d40:	2b10      	cmp	r3, #16
 8007d42:	d00c      	beq.n	8007d5e <HAL_TIM_ConfigClockSource+0x4e>
 8007d44:	d807      	bhi.n	8007d56 <HAL_TIM_ConfigClockSource+0x46>
 8007d46:	b153      	cbz	r3, 8007d5e <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8007d48:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8007d4a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007d4c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007d50:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007d54:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8007d56:	2b20      	cmp	r3, #32
 8007d58:	d001      	beq.n	8007d5e <HAL_TIM_ConfigClockSource+0x4e>
 8007d5a:	2b30      	cmp	r3, #48	; 0x30
 8007d5c:	d1f4      	bne.n	8007d48 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8007d5e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d60:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d64:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	e01a      	b.n	8007da2 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8007d6c:	2b60      	cmp	r3, #96	; 0x60
 8007d6e:	d034      	beq.n	8007dda <HAL_TIM_ConfigClockSource+0xca>
 8007d70:	d819      	bhi.n	8007da6 <HAL_TIM_ConfigClockSource+0x96>
 8007d72:	2b50      	cmp	r3, #80	; 0x50
 8007d74:	d1e8      	bne.n	8007d48 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d76:	684a      	ldr	r2, [r1, #4]
 8007d78:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8007d7a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d7c:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d7e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d82:	f025 0501 	bic.w	r5, r5, #1
 8007d86:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d88:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8007d8a:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d90:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007d94:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007d96:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007d98:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d9e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8007da2:	6083      	str	r3, [r0, #8]
 8007da4:	e7d0      	b.n	8007d48 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8007da6:	2b70      	cmp	r3, #112	; 0x70
 8007da8:	d00c      	beq.n	8007dc4 <HAL_TIM_ConfigClockSource+0xb4>
 8007daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dae:	d1cb      	bne.n	8007d48 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8007db0:	68cb      	ldr	r3, [r1, #12]
 8007db2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8007db6:	f7ff ffa1 	bl	8007cfc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007dba:	6822      	ldr	r2, [r4, #0]
 8007dbc:	6893      	ldr	r3, [r2, #8]
 8007dbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007dc2:	e008      	b.n	8007dd6 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8007dc4:	68cb      	ldr	r3, [r1, #12]
 8007dc6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8007dca:	f7ff ff97 	bl	8007cfc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007dce:	6822      	ldr	r2, [r4, #0]
 8007dd0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dd2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007dd6:	6093      	str	r3, [r2, #8]
      break;
 8007dd8:	e7b6      	b.n	8007d48 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dda:	684d      	ldr	r5, [r1, #4]
 8007ddc:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dde:	6a01      	ldr	r1, [r0, #32]
 8007de0:	f021 0110 	bic.w	r1, r1, #16
 8007de4:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007de6:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8007de8:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dea:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007df2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007df6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8007dfa:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007dfc:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007dfe:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e04:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8007e08:	e7cb      	b.n	8007da2 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e0a:	684a      	ldr	r2, [r1, #4]
 8007e0c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8007e0e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e10:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e12:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e16:	f025 0501 	bic.w	r5, r5, #1
 8007e1a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e1c:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8007e1e:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e24:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007e28:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007e2a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007e2c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e32:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8007e36:	e7b4      	b.n	8007da2 <HAL_TIM_ConfigClockSource+0x92>

08007e38 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e38:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8007e3c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	f04f 0302 	mov.w	r3, #2
 8007e44:	d014      	beq.n	8007e70 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e46:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007e48:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8007e4c:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e4e:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e50:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e52:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e54:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e5c:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e5e:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e60:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007e62:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e64:	2301      	movs	r3, #1
 8007e66:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8007e70:	4618      	mov	r0, r3

  return HAL_OK;
}
 8007e72:	bd30      	pop	{r4, r5, pc}

08007e74 <HAL_TIMEx_CommutCallback>:
 8007e74:	4770      	bx	lr

08007e76 <HAL_TIMEx_BreakCallback>:
 8007e76:	4770      	bx	lr

08007e78 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e78:	6803      	ldr	r3, [r0, #0]
 8007e7a:	68da      	ldr	r2, [r3, #12]
 8007e7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007e80:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e82:	695a      	ldr	r2, [r3, #20]
 8007e84:	f022 0201 	bic.w	r2, r2, #1
 8007e88:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e8a:	2320      	movs	r3, #32
 8007e8c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8007e90:	4770      	bx	lr
	...

08007e94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e94:	b538      	push	{r3, r4, r5, lr}
 8007e96:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e98:	6803      	ldr	r3, [r0, #0]
 8007e9a:	68c1      	ldr	r1, [r0, #12]
 8007e9c:	691a      	ldr	r2, [r3, #16]
 8007e9e:	2419      	movs	r4, #25
 8007ea0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007ea8:	6882      	ldr	r2, [r0, #8]
 8007eaa:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8007eac:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007eae:	4302      	orrs	r2, r0
 8007eb0:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8007eb2:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8007eb6:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007eba:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8007ebc:	430a      	orrs	r2, r1
 8007ebe:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ec0:	695a      	ldr	r2, [r3, #20]
 8007ec2:	69a9      	ldr	r1, [r5, #24]
 8007ec4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8007ecc:	4a0d      	ldr	r2, [pc, #52]	; (8007f04 <UART_SetConfig+0x70>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d114      	bne.n	8007efc <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007ed2:	f7ff fd65 	bl	80079a0 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ed6:	4360      	muls	r0, r4
 8007ed8:	686c      	ldr	r4, [r5, #4]
 8007eda:	2264      	movs	r2, #100	; 0x64
 8007edc:	00a4      	lsls	r4, r4, #2
 8007ede:	fbb0 f0f4 	udiv	r0, r0, r4
 8007ee2:	fbb0 f1f2 	udiv	r1, r0, r2
 8007ee6:	fb02 0311 	mls	r3, r2, r1, r0
 8007eea:	011b      	lsls	r3, r3, #4
 8007eec:	3332      	adds	r3, #50	; 0x32
 8007eee:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ef2:	682c      	ldr	r4, [r5, #0]
 8007ef4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8007ef8:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8007efa:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8007efc:	f7ff fd40 	bl	8007980 <HAL_RCC_GetPCLK1Freq>
 8007f00:	e7e9      	b.n	8007ed6 <UART_SetConfig+0x42>
 8007f02:	bf00      	nop
 8007f04:	40013800 	.word	0x40013800

08007f08 <HAL_UART_Init>:
{
 8007f08:	b510      	push	{r4, lr}
  if (huart == NULL)
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	b340      	cbz	r0, 8007f60 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8007f0e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8007f12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007f16:	b91b      	cbnz	r3, 8007f20 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8007f18:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8007f1c:	f7fa f9a2 	bl	8002264 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8007f20:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8007f22:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007f24:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8007f28:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8007f2a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8007f2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f30:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8007f32:	f7ff ffaf 	bl	8007e94 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f36:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f38:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f3a:	691a      	ldr	r2, [r3, #16]
 8007f3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f42:	695a      	ldr	r2, [r3, #20]
 8007f44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f48:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8007f4a:	68da      	ldr	r2, [r3, #12]
 8007f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f50:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007f52:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f54:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007f56:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007f5a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8007f5e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007f60:	2001      	movs	r0, #1
 8007f62:	e7fc      	b.n	8007f5e <HAL_UART_Init+0x56>

08007f64 <HAL_UART_Receive_DMA>:
{
 8007f64:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f66:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 8007f6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f6c:	2a20      	cmp	r2, #32
{
 8007f6e:	4605      	mov	r5, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f70:	d138      	bne.n	8007fe4 <HAL_UART_Receive_DMA+0x80>
    if ((pData == NULL) || (Size == 0U))
 8007f72:	2900      	cmp	r1, #0
 8007f74:	d034      	beq.n	8007fe0 <HAL_UART_Receive_DMA+0x7c>
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d032      	beq.n	8007fe0 <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8007f7a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8007f7e:	2a01      	cmp	r2, #1
 8007f80:	d030      	beq.n	8007fe4 <HAL_UART_Receive_DMA+0x80>
 8007f82:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f84:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8007f86:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f8a:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 8007f8c:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8007f8e:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f90:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f92:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007f96:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8007f98:	4a13      	ldr	r2, [pc, #76]	; (8007fe8 <HAL_UART_Receive_DMA+0x84>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007f9a:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007f9c:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007f9e:	4a13      	ldr	r2, [pc, #76]	; (8007fec <HAL_UART_Receive_DMA+0x88>)
 8007fa0:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007fa2:	4a13      	ldr	r2, [pc, #76]	; (8007ff0 <HAL_UART_Receive_DMA+0x8c>)
    huart->hdmarx->XferAbortCallback = NULL;
 8007fa4:	e9c0 240c 	strd	r2, r4, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007fa8:	460a      	mov	r2, r1
 8007faa:	1d31      	adds	r1, r6, #4
 8007fac:	f7fe f8e4 	bl	8006178 <HAL_DMA_Start_IT>
    return HAL_OK;
 8007fb0:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007fb2:	682b      	ldr	r3, [r5, #0]
 8007fb4:	9401      	str	r4, [sp, #4]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	9201      	str	r2, [sp, #4]
 8007fba:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 8007fbc:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007fc0:	9201      	str	r2, [sp, #4]
 8007fc2:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fc4:	68da      	ldr	r2, [r3, #12]
 8007fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fca:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fcc:	695a      	ldr	r2, [r3, #20]
 8007fce:	f042 0201 	orr.w	r2, r2, #1
 8007fd2:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fd4:	695a      	ldr	r2, [r3, #20]
 8007fd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fda:	615a      	str	r2, [r3, #20]
}
 8007fdc:	b002      	add	sp, #8
 8007fde:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8007fe0:	2001      	movs	r0, #1
 8007fe2:	e7fb      	b.n	8007fdc <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 8007fe4:	2002      	movs	r0, #2
 8007fe6:	e7f9      	b.n	8007fdc <HAL_UART_Receive_DMA+0x78>
 8007fe8:	08007ff7 	.word	0x08007ff7
 8007fec:	08008031 	.word	0x08008031
 8007ff0:	0800803d 	.word	0x0800803d

08007ff4 <HAL_UART_RxCpltCallback>:
 8007ff4:	4770      	bx	lr

08007ff6 <UART_DMAReceiveCplt>:
{
 8007ff6:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ff8:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ffa:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f013 0320 	ands.w	r3, r3, #32
 8008002:	d110      	bne.n	8008026 <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 8008004:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008006:	6813      	ldr	r3, [r2, #0]
 8008008:	68d9      	ldr	r1, [r3, #12]
 800800a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800800e:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008010:	6959      	ldr	r1, [r3, #20]
 8008012:	f021 0101 	bic.w	r1, r1, #1
 8008016:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008018:	6959      	ldr	r1, [r3, #20]
 800801a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800801e:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8008020:	2320      	movs	r3, #32
 8008022:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8008026:	4610      	mov	r0, r2
 8008028:	f7ff ffe4 	bl	8007ff4 <HAL_UART_RxCpltCallback>
}
 800802c:	bd08      	pop	{r3, pc}

0800802e <HAL_UART_RxHalfCpltCallback>:
 800802e:	4770      	bx	lr

08008030 <UART_DMARxHalfCplt>:
{
 8008030:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8008032:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008034:	f7ff fffb 	bl	800802e <HAL_UART_RxHalfCpltCallback>
}
 8008038:	bd08      	pop	{r3, pc}

0800803a <HAL_UART_ErrorCallback>:
 800803a:	4770      	bx	lr

0800803c <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800803c:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 800803e:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008040:	680b      	ldr	r3, [r1, #0]
 8008042:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008044:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8008048:	2821      	cmp	r0, #33	; 0x21
 800804a:	d10a      	bne.n	8008062 <UART_DMAError+0x26>
 800804c:	0612      	lsls	r2, r2, #24
 800804e:	d508      	bpl.n	8008062 <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 8008050:	2200      	movs	r2, #0
 8008052:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800805a:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800805c:	2220      	movs	r2, #32
 800805e:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008062:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008064:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8008068:	2a22      	cmp	r2, #34	; 0x22
 800806a:	d106      	bne.n	800807a <UART_DMAError+0x3e>
 800806c:	065b      	lsls	r3, r3, #25
 800806e:	d504      	bpl.n	800807a <UART_DMAError+0x3e>
    huart->RxXferCount = 0x00U;
 8008070:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 8008072:	4608      	mov	r0, r1
    huart->RxXferCount = 0x00U;
 8008074:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008076:	f7ff feff 	bl	8007e78 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800807a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800807c:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800807e:	f043 0310 	orr.w	r3, r3, #16
 8008082:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8008084:	f7ff ffd9 	bl	800803a <HAL_UART_ErrorCallback>
}
 8008088:	bd08      	pop	{r3, pc}

0800808a <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800808a:	b084      	sub	sp, #16
 800808c:	a801      	add	r0, sp, #4
 800808e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8008092:	b004      	add	sp, #16
 8008094:	2000      	movs	r0, #0
 8008096:	4770      	bx	lr

08008098 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8008098:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800809c:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80080a0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80080a4:	2000      	movs	r0, #0
 80080a6:	4770      	bx	lr

080080a8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80080a8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80080ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80080b0:	045b      	lsls	r3, r3, #17
 80080b2:	0c5b      	lsrs	r3, r3, #17
 80080b4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80080b8:	2000      	movs	r0, #0
 80080ba:	4770      	bx	lr

080080bc <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80080bc:	2000      	movs	r0, #0
 80080be:	4770      	bx	lr

080080c0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80080c0:	b084      	sub	sp, #16
 80080c2:	b510      	push	{r4, lr}
 80080c4:	ac03      	add	r4, sp, #12
 80080c6:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80080ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = USB_CNTR_FRES;
 80080ce:	2301      	movs	r3, #1
 80080d0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 80080d4:	2300      	movs	r3, #0
 80080d6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 80080da:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 80080de:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 80080e2:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
}
 80080e6:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 80080e8:	f442 423f 	orr.w	r2, r2, #48896	; 0xbf00
 80080ec:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	4770      	bx	lr

080080f4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80080f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80080f6:	780c      	ldrb	r4, [r1, #0]
{
 80080f8:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80080fa:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 80080fe:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008100:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8008104:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  switch (ep->type)
 8008108:	2803      	cmp	r0, #3
 800810a:	d803      	bhi.n	8008114 <USB_ActivateEndpoint+0x20>
 800810c:	e8df f000 	tbb	[pc, r0]
 8008110:	46444942 	.word	0x46444942
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8008114:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8008116:	f248 0580 	movw	r5, #32896	; 0x8080
 800811a:	432a      	orrs	r2, r5
 800811c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008120:	780e      	ldrb	r6, [r1, #0]
 8008122:	4a9e      	ldr	r2, [pc, #632]	; (800839c <USB_ActivateEndpoint+0x2a8>)
 8008124:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 8008128:	4335      	orrs	r5, r6
 800812a:	4014      	ands	r4, r2
 800812c:	432c      	orrs	r4, r5
 800812e:	f823 4026 	strh.w	r4, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8008132:	7b0d      	ldrb	r5, [r1, #12]
 8008134:	780c      	ldrb	r4, [r1, #0]
 8008136:	2d00      	cmp	r5, #0
 8008138:	f040 8082 	bne.w	8008240 <USB_ActivateEndpoint+0x14c>
 800813c:	88cd      	ldrh	r5, [r1, #6]
  {
    if (ep->is_in != 0U)
 800813e:	784e      	ldrb	r6, [r1, #1]
 8008140:	086d      	lsrs	r5, r5, #1
 8008142:	006d      	lsls	r5, r5, #1
 8008144:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8008148:	b376      	cbz	r6, 80081a8 <USB_ActivateEndpoint+0xb4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800814a:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800814e:	4434      	add	r4, r6
 8008150:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008154:	780d      	ldrb	r5, [r1, #0]
 8008156:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800815a:	0667      	lsls	r7, r4, #25
 800815c:	d508      	bpl.n	8008170 <USB_ActivateEndpoint+0x7c>
 800815e:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8008162:	4022      	ands	r2, r4
 8008164:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008168:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800816c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8008170:	78ca      	ldrb	r2, [r1, #3]
 8008172:	780c      	ldrb	r4, [r1, #0]
 8008174:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008176:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 800817a:	4a89      	ldr	r2, [pc, #548]	; (80083a0 <USB_ActivateEndpoint+0x2ac>)
 800817c:	ea02 0201 	and.w	r2, r2, r1
 8008180:	bf18      	it	ne
 8008182:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008186:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800818a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800818e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8008192:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_CONTROL;
 8008194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8008198:	2000      	movs	r0, #0
 800819a:	e7bc      	b.n	8008116 <USB_ActivateEndpoint+0x22>
      wEpRegVal |= USB_EP_INTERRUPT;
 800819c:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 80081a0:	e7fa      	b.n	8008198 <USB_ActivateEndpoint+0xa4>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80081a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80081a6:	e7f7      	b.n	8008198 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80081a8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80081ac:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80081ae:	4414      	add	r4, r2
 80081b0:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80081b4:	780a      	ldrb	r2, [r1, #0]
 80081b6:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80081ba:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80081be:	b2a4      	uxth	r4, r4
 80081c0:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80081c4:	bb56      	cbnz	r6, 800821c <USB_ActivateEndpoint+0x128>
 80081c6:	5b15      	ldrh	r5, [r2, r4]
 80081c8:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 80081cc:	042d      	lsls	r5, r5, #16
 80081ce:	0c2d      	lsrs	r5, r5, #16
 80081d0:	5315      	strh	r5, [r2, r4]
 80081d2:	5b15      	ldrh	r5, [r2, r4]
 80081d4:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 80081d8:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081da:	780c      	ldrb	r4, [r1, #0]
 80081dc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80081e0:	0457      	lsls	r7, r2, #17
 80081e2:	d50b      	bpl.n	80081fc <USB_ActivateEndpoint+0x108>
 80081e4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80081e8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80081ec:	0512      	lsls	r2, r2, #20
 80081ee:	0d12      	lsrs	r2, r2, #20
 80081f0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80081f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80081f8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80081fc:	7809      	ldrb	r1, [r1, #0]
 80081fe:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8008202:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008206:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800820a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800820e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008212:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008216:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800821a:	e7ba      	b.n	8008192 <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800821c:	2e3e      	cmp	r6, #62	; 0x3e
 800821e:	d806      	bhi.n	800822e <USB_ActivateEndpoint+0x13a>
 8008220:	0875      	lsrs	r5, r6, #1
 8008222:	07f6      	lsls	r6, r6, #31
 8008224:	bf48      	it	mi
 8008226:	3501      	addmi	r5, #1
 8008228:	02ad      	lsls	r5, r5, #10
 800822a:	b2ad      	uxth	r5, r5
 800822c:	e7d4      	b.n	80081d8 <USB_ActivateEndpoint+0xe4>
 800822e:	0977      	lsrs	r7, r6, #5
 8008230:	06f5      	lsls	r5, r6, #27
 8008232:	4d5c      	ldr	r5, [pc, #368]	; (80083a4 <USB_ActivateEndpoint+0x2b0>)
 8008234:	bf08      	it	eq
 8008236:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800823a:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800823e:	e7f4      	b.n	800822a <USB_ActivateEndpoint+0x136>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008240:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8008244:	4015      	ands	r5, r2
 8008246:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 800824a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800824e:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008252:	780c      	ldrb	r4, [r1, #0]
 8008254:	890d      	ldrh	r5, [r1, #8]
 8008256:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800825a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 800825e:	086d      	lsrs	r5, r5, #1
 8008260:	b2b6      	uxth	r6, r6
 8008262:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008266:	006d      	lsls	r5, r5, #1
 8008268:	53a5      	strh	r5, [r4, r6]
 800826a:	780c      	ldrb	r4, [r1, #0]
 800826c:	894d      	ldrh	r5, [r1, #10]
 800826e:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8008272:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8008276:	086d      	lsrs	r5, r5, #1
 8008278:	f504 6481 	add.w	r4, r4, #1032	; 0x408
 800827c:	006d      	lsls	r5, r5, #1
 800827e:	b2b6      	uxth	r6, r6
 8008280:	53a5      	strh	r5, [r4, r6]
    if (ep->is_in == 0U)
 8008282:	784c      	ldrb	r4, [r1, #1]
 8008284:	780d      	ldrb	r5, [r1, #0]
 8008286:	2c00      	cmp	r4, #0
 8008288:	d143      	bne.n	8008312 <USB_ActivateEndpoint+0x21e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800828a:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800828e:	0466      	lsls	r6, r4, #17
 8008290:	d508      	bpl.n	80082a4 <USB_ActivateEndpoint+0x1b0>
 8008292:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8008296:	4022      	ands	r2, r4
 8008298:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800829c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80082a0:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082a4:	780c      	ldrb	r4, [r1, #0]
 80082a6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80082aa:	0655      	lsls	r5, r2, #25
 80082ac:	d50b      	bpl.n	80082c6 <USB_ActivateEndpoint+0x1d2>
 80082ae:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80082b2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80082b6:	0512      	lsls	r2, r2, #20
 80082b8:	0d12      	lsrs	r2, r2, #20
 80082ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082be:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80082c2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80082c6:	780c      	ldrb	r4, [r1, #0]
 80082c8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80082cc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80082d0:	0512      	lsls	r2, r2, #20
 80082d2:	0d12      	lsrs	r2, r2, #20
 80082d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082d8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80082dc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082e0:	f248 0480 	movw	r4, #32896	; 0x8080
 80082e4:	780d      	ldrb	r5, [r1, #0]
 80082e6:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80082ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80082ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80082f2:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80082f6:	4322      	orrs	r2, r4
 80082f8:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80082fc:	7809      	ldrb	r1, [r1, #0]
 80082fe:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8008302:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800830a:	4314      	orrs	r4, r2
 800830c:	f823 4021 	strh.w	r4, [r3, r1, lsl #2]
 8008310:	e73f      	b.n	8008192 <USB_ActivateEndpoint+0x9e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008312:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8008316:	0464      	lsls	r4, r4, #17
 8008318:	d508      	bpl.n	800832c <USB_ActivateEndpoint+0x238>
 800831a:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800831e:	4022      	ands	r2, r4
 8008320:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008324:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008328:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800832c:	780c      	ldrb	r4, [r1, #0]
 800832e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008332:	0652      	lsls	r2, r2, #25
 8008334:	d50b      	bpl.n	800834e <USB_ActivateEndpoint+0x25a>
 8008336:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800833a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800833e:	0512      	lsls	r2, r2, #20
 8008340:	0d12      	lsrs	r2, r2, #20
 8008342:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008346:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800834a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800834e:	780c      	ldrb	r4, [r1, #0]
 8008350:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008354:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008358:	0512      	lsls	r2, r2, #20
 800835a:	0d12      	lsrs	r2, r2, #20
 800835c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008360:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008364:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8008368:	78ca      	ldrb	r2, [r1, #3]
 800836a:	780c      	ldrb	r4, [r1, #0]
 800836c:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800836e:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8008372:	4a0b      	ldr	r2, [pc, #44]	; (80083a0 <USB_ActivateEndpoint+0x2ac>)
 8008374:	ea02 0205 	and.w	r2, r2, r5
 8008378:	bf18      	it	ne
 800837a:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800837e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008382:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008386:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800838a:	7809      	ldrb	r1, [r1, #0]
 800838c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8008390:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008394:	0492      	lsls	r2, r2, #18
 8008396:	0c92      	lsrs	r2, r2, #18
 8008398:	e739      	b.n	800820e <USB_ActivateEndpoint+0x11a>
 800839a:	bf00      	nop
 800839c:	ffff8f8f 	.word	0xffff8f8f
 80083a0:	ffff8fbf 	.word	0xffff8fbf
 80083a4:	ffff8000 	.word	0xffff8000

080083a8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083a8:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 80083aa:	7b0c      	ldrb	r4, [r1, #12]
 80083ac:	784a      	ldrb	r2, [r1, #1]
 80083ae:	780b      	ldrb	r3, [r1, #0]
 80083b0:	bbbc      	cbnz	r4, 8008422 <USB_DeactivateEndpoint+0x7a>
  {
    if (ep->is_in != 0U)
 80083b2:	b1f2      	cbz	r2, 80083f2 <USB_DeactivateEndpoint+0x4a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083b4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80083b8:	0652      	lsls	r2, r2, #25
 80083ba:	d50b      	bpl.n	80083d4 <USB_DeactivateEndpoint+0x2c>
 80083bc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80083c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80083c4:	0512      	lsls	r2, r2, #20
 80083c6:	0d12      	lsrs	r2, r2, #20
 80083c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083cc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80083d0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083d4:	780a      	ldrb	r2, [r1, #0]
 80083d6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80083da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80083de:	051b      	lsls	r3, r3, #20
 80083e0:	0d1b      	lsrs	r3, r3, #20
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80083e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ea:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 80083ee:	2000      	movs	r0, #0
 80083f0:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083f2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80083f6:	0454      	lsls	r4, r2, #17
 80083f8:	d50b      	bpl.n	8008412 <USB_DeactivateEndpoint+0x6a>
 80083fa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80083fe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008402:	0512      	lsls	r2, r2, #20
 8008404:	0d12      	lsrs	r2, r2, #20
 8008406:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800840a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800840e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008412:	780a      	ldrb	r2, [r1, #0]
 8008414:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008418:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800841c:	049b      	lsls	r3, r3, #18
 800841e:	0c9b      	lsrs	r3, r3, #18
 8008420:	e7df      	b.n	80083e2 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8008422:	2a00      	cmp	r2, #0
 8008424:	d144      	bne.n	80084b0 <USB_DeactivateEndpoint+0x108>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008426:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800842a:	0452      	lsls	r2, r2, #17
 800842c:	d50b      	bpl.n	8008446 <USB_DeactivateEndpoint+0x9e>
 800842e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8008432:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008436:	0512      	lsls	r2, r2, #20
 8008438:	0d12      	lsrs	r2, r2, #20
 800843a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800843e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008442:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008446:	780a      	ldrb	r2, [r1, #0]
 8008448:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800844c:	065c      	lsls	r4, r3, #25
 800844e:	d50b      	bpl.n	8008468 <USB_DeactivateEndpoint+0xc0>
 8008450:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008454:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008458:	051b      	lsls	r3, r3, #20
 800845a:	0d1b      	lsrs	r3, r3, #20
 800845c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008460:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008464:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8008468:	780a      	ldrb	r2, [r1, #0]
 800846a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800846e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008472:	051b      	lsls	r3, r3, #20
 8008474:	0d1b      	lsrs	r3, r3, #20
 8008476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800847a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800847e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008482:	f248 0280 	movw	r2, #32896	; 0x8080
 8008486:	780c      	ldrb	r4, [r1, #0]
 8008488:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800848c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008494:	4313      	orrs	r3, r2
 8008496:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800849a:	7809      	ldrb	r1, [r1, #0]
 800849c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80084a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80084a8:	431a      	orrs	r2, r3
 80084aa:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 80084ae:	e79e      	b.n	80083ee <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084b0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80084b4:	0452      	lsls	r2, r2, #17
 80084b6:	d50b      	bpl.n	80084d0 <USB_DeactivateEndpoint+0x128>
 80084b8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80084bc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80084c0:	0512      	lsls	r2, r2, #20
 80084c2:	0d12      	lsrs	r2, r2, #20
 80084c4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80084c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80084cc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084d0:	780a      	ldrb	r2, [r1, #0]
 80084d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80084d6:	065b      	lsls	r3, r3, #25
 80084d8:	d50b      	bpl.n	80084f2 <USB_DeactivateEndpoint+0x14a>
 80084da:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80084de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084e2:	051b      	lsls	r3, r3, #20
 80084e4:	0d1b      	lsrs	r3, r3, #20
 80084e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80084ee:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80084f2:	780a      	ldrb	r2, [r1, #0]
 80084f4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80084f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084fc:	051b      	lsls	r3, r3, #20
 80084fe:	0d1b      	lsrs	r3, r3, #20
 8008500:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008508:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800850c:	f248 0280 	movw	r2, #32896	; 0x8080
 8008510:	780c      	ldrb	r4, [r1, #0]
 8008512:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8008516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800851a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800851e:	4313      	orrs	r3, r2
 8008520:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008524:	7809      	ldrb	r1, [r1, #0]
 8008526:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800852a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800852e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008532:	e7b9      	b.n	80084a8 <USB_DeactivateEndpoint+0x100>

08008534 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8008534:	784b      	ldrb	r3, [r1, #1]
 8008536:	780a      	ldrb	r2, [r1, #0]
 8008538:	b17b      	cbz	r3, 800855a <USB_EPSetStall+0x26>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800853a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800853e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008546:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800854a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800854e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008552:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8008556:	2000      	movs	r0, #0
 8008558:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800855a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800855e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008566:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800856a:	e7ee      	b.n	800854a <USB_EPSetStall+0x16>

0800856c <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800856c:	7b0b      	ldrb	r3, [r1, #12]
 800856e:	bb23      	cbnz	r3, 80085ba <USB_EPClearStall+0x4e>
  {
    if (ep->is_in != 0U)
 8008570:	784b      	ldrb	r3, [r1, #1]
 8008572:	780a      	ldrb	r2, [r1, #0]
 8008574:	b31b      	cbz	r3, 80085be <USB_EPClearStall+0x52>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008576:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800857a:	065b      	lsls	r3, r3, #25
 800857c:	d50b      	bpl.n	8008596 <USB_EPClearStall+0x2a>
 800857e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008582:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008586:	051b      	lsls	r3, r3, #20
 8008588:	0d1b      	lsrs	r3, r3, #20
 800858a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800858e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008592:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8008596:	78cb      	ldrb	r3, [r1, #3]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d00e      	beq.n	80085ba <USB_EPClearStall+0x4e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800859c:	780a      	ldrb	r2, [r1, #0]
 800859e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80085a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085aa:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80085ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085b6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80085ba:	2000      	movs	r0, #0
 80085bc:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80085c2:	045b      	lsls	r3, r3, #17
 80085c4:	d50b      	bpl.n	80085de <USB_EPClearStall+0x72>
 80085c6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80085ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085ce:	051b      	lsls	r3, r3, #20
 80085d0:	0d1b      	lsrs	r3, r3, #20
 80085d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085da:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80085de:	780a      	ldrb	r2, [r1, #0]
 80085e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80085e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ec:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80085f0:	e7dd      	b.n	80085ae <USB_EPClearStall+0x42>

080085f2 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80085f2:	b911      	cbnz	r1, 80085fa <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80085f4:	2380      	movs	r3, #128	; 0x80
 80085f6:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 80085fa:	2000      	movs	r0, #0
 80085fc:	4770      	bx	lr

080085fe <USB_DevConnect>:
 80085fe:	2000      	movs	r0, #0
 8008600:	4770      	bx	lr

08008602 <USB_DevDisconnect>:
 8008602:	2000      	movs	r0, #0
 8008604:	4770      	bx	lr

08008606 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008606:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800860a:	4770      	bx	lr

0800860c <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800860c:	2000      	movs	r0, #0
 800860e:	4770      	bx	lr

08008610 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008610:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008614:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008616:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800861a:	085b      	lsrs	r3, r3, #1
 800861c:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8008620:	429a      	cmp	r2, r3
 8008622:	d100      	bne.n	8008626 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8008624:	4770      	bx	lr
 8008626:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 800862a:	f822 0b04 	strh.w	r0, [r2], #4
 800862e:	e7f7      	b.n	8008620 <USB_WritePMA+0x10>

08008630 <USB_EPStartXfer>:
{
 8008630:	b570      	push	{r4, r5, r6, lr}
 8008632:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8008634:	7849      	ldrb	r1, [r1, #1]
{
 8008636:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8008638:	2901      	cmp	r1, #1
 800863a:	69aa      	ldr	r2, [r5, #24]
 800863c:	692b      	ldr	r3, [r5, #16]
 800863e:	7b28      	ldrb	r0, [r5, #12]
 8008640:	d15d      	bne.n	80086fe <USB_EPStartXfer+0xce>
    if (ep->xfer_len > ep->maxpacket)
 8008642:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8008644:	bf9d      	ittte	ls
 8008646:	2300      	movls	r3, #0
 8008648:	61ab      	strls	r3, [r5, #24]
 800864a:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 800864c:	1ad2      	subhi	r2, r2, r3
 800864e:	bf88      	it	hi
 8008650:	61aa      	strhi	r2, [r5, #24]
 8008652:	6969      	ldr	r1, [r5, #20]
 8008654:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 8008656:	b9e8      	cbnz	r0, 8008694 <USB_EPStartXfer+0x64>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008658:	4633      	mov	r3, r6
 800865a:	88ea      	ldrh	r2, [r5, #6]
 800865c:	4620      	mov	r0, r4
 800865e:	f7ff ffd7 	bl	8008610 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008662:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8008666:	782a      	ldrb	r2, [r5, #0]
 8008668:	f204 4304 	addw	r3, r4, #1028	; 0x404
 800866c:	0112      	lsls	r2, r2, #4
 800866e:	440b      	add	r3, r1
 8008670:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008672:	782a      	ldrb	r2, [r5, #0]
 8008674:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8008678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800867c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008680:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800868c:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8008690:	2000      	movs	r0, #0
 8008692:	bd70      	pop	{r4, r5, r6, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008694:	782b      	ldrb	r3, [r5, #0]
 8008696:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800869a:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800869e:	0652      	lsls	r2, r2, #25
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80086a0:	bf4b      	itete	mi
 80086a2:	f204 420c 	addwmi	r2, r4, #1036	; 0x40c
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80086a6:	f204 4204 	addwpl	r2, r4, #1028	; 0x404
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80086aa:	1812      	addmi	r2, r2, r0
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80086ac:	1812      	addpl	r2, r2, r0
 80086ae:	ea4f 1303 	mov.w	r3, r3, lsl #4
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80086b2:	bf4b      	itete	mi
 80086b4:	52d6      	strhmi	r6, [r2, r3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80086b6:	52d6      	strhpl	r6, [r2, r3]
        pmabuffer = ep->pmaaddr1;
 80086b8:	896a      	ldrhmi	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 80086ba:	892a      	ldrhpl	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086bc:	4633      	mov	r3, r6
 80086be:	4620      	mov	r0, r4
 80086c0:	f7ff ffa6 	bl	8008610 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80086c4:	786b      	ldrb	r3, [r5, #1]
 80086c6:	782a      	ldrb	r2, [r5, #0]
 80086c8:	b963      	cbnz	r3, 80086e4 <USB_EPStartXfer+0xb4>
 80086ca:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80086ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086d2:	051b      	lsls	r3, r3, #20
 80086d4:	0d1b      	lsrs	r3, r3, #20
 80086d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086de:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 80086e2:	e7c6      	b.n	8008672 <USB_EPStartXfer+0x42>
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d1c4      	bne.n	8008672 <USB_EPStartXfer+0x42>
 80086e8:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80086ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086f0:	051b      	lsls	r3, r3, #20
 80086f2:	0d1b      	lsrs	r3, r3, #20
 80086f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80086f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086fc:	e7ef      	b.n	80086de <USB_EPStartXfer+0xae>
    if (ep->xfer_len > ep->maxpacket)
 80086fe:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8008700:	bf93      	iteet	ls
 8008702:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8008704:	1ad2      	subhi	r2, r2, r3
 8008706:	61aa      	strhi	r2, [r5, #24]
      ep->xfer_len = 0U;
 8008708:	61ab      	strls	r3, [r5, #24]
 800870a:	bf98      	it	ls
 800870c:	4613      	movls	r3, r2
 800870e:	782a      	ldrb	r2, [r5, #0]
    if (ep->doublebuffer == 0U)
 8008710:	b990      	cbnz	r0, 8008738 <USB_EPStartXfer+0x108>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008712:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8008716:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 800871a:	4401      	add	r1, r0
 800871c:	0112      	lsls	r2, r2, #4
 800871e:	2b00      	cmp	r3, #0
 8008720:	d13b      	bne.n	800879a <USB_EPStartXfer+0x16a>
 8008722:	5a8b      	ldrh	r3, [r1, r2]
 8008724:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008728:	041b      	lsls	r3, r3, #16
 800872a:	0c1b      	lsrs	r3, r3, #16
 800872c:	528b      	strh	r3, [r1, r2]
 800872e:	5a8b      	ldrh	r3, [r1, r2]
 8008730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008734:	528b      	strh	r3, [r1, r2]
 8008736:	e039      	b.n	80087ac <USB_EPStartXfer+0x17c>
 8008738:	b981      	cbnz	r1, 800875c <USB_EPStartXfer+0x12c>
 800873a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800873e:	f204 4004 	addw	r0, r4, #1028	; 0x404
 8008742:	4401      	add	r1, r0
 8008744:	0112      	lsls	r2, r2, #4
 8008746:	b9b3      	cbnz	r3, 8008776 <USB_EPStartXfer+0x146>
 8008748:	5a88      	ldrh	r0, [r1, r2]
 800874a:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800874e:	0400      	lsls	r0, r0, #16
 8008750:	0c00      	lsrs	r0, r0, #16
 8008752:	5288      	strh	r0, [r1, r2]
 8008754:	5a88      	ldrh	r0, [r1, r2]
 8008756:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800875a:	5288      	strh	r0, [r1, r2]
 800875c:	7869      	ldrb	r1, [r5, #1]
 800875e:	782a      	ldrb	r2, [r5, #0]
 8008760:	2900      	cmp	r1, #0
 8008762:	d0d6      	beq.n	8008712 <USB_EPStartXfer+0xe2>
 8008764:	2901      	cmp	r1, #1
 8008766:	d121      	bne.n	80087ac <USB_EPStartXfer+0x17c>
 8008768:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 800876c:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8008770:	4401      	add	r1, r0
 8008772:	0112      	lsls	r2, r2, #4
 8008774:	e02c      	b.n	80087d0 <USB_EPStartXfer+0x1a0>
 8008776:	2b3e      	cmp	r3, #62	; 0x3e
 8008778:	d806      	bhi.n	8008788 <USB_EPStartXfer+0x158>
 800877a:	0858      	lsrs	r0, r3, #1
 800877c:	07de      	lsls	r6, r3, #31
 800877e:	bf48      	it	mi
 8008780:	3001      	addmi	r0, #1
 8008782:	0280      	lsls	r0, r0, #10
 8008784:	b280      	uxth	r0, r0
 8008786:	e7e8      	b.n	800875a <USB_EPStartXfer+0x12a>
 8008788:	095e      	lsrs	r6, r3, #5
 800878a:	06d8      	lsls	r0, r3, #27
 800878c:	4811      	ldr	r0, [pc, #68]	; (80087d4 <USB_EPStartXfer+0x1a4>)
 800878e:	bf08      	it	eq
 8008790:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8008794:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8008798:	e7f4      	b.n	8008784 <USB_EPStartXfer+0x154>
 800879a:	2b3e      	cmp	r3, #62	; 0x3e
 800879c:	d810      	bhi.n	80087c0 <USB_EPStartXfer+0x190>
 800879e:	0858      	lsrs	r0, r3, #1
 80087a0:	07de      	lsls	r6, r3, #31
 80087a2:	bf48      	it	mi
 80087a4:	3001      	addmi	r0, #1
 80087a6:	0280      	lsls	r0, r0, #10
 80087a8:	b280      	uxth	r0, r0
 80087aa:	5288      	strh	r0, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80087ac:	782a      	ldrb	r2, [r5, #0]
 80087ae:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80087b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ba:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80087be:	e761      	b.n	8008684 <USB_EPStartXfer+0x54>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80087c0:	0958      	lsrs	r0, r3, #5
 80087c2:	06db      	lsls	r3, r3, #27
 80087c4:	4b03      	ldr	r3, [pc, #12]	; (80087d4 <USB_EPStartXfer+0x1a4>)
 80087c6:	bf08      	it	eq
 80087c8:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80087cc:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	e7af      	b.n	8008734 <USB_EPStartXfer+0x104>
 80087d4:	ffff8000 	.word	0xffff8000

080087d8 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80087d8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 80087dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80087de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 80087e2:	085d      	lsrs	r5, r3, #1
 80087e4:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80087e6:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 80087e8:	462e      	mov	r6, r5
 80087ea:	3002      	adds	r0, #2
 80087ec:	b936      	cbnz	r6, 80087fc <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80087ee:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 80087f0:	bf44      	itt	mi
 80087f2:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80087f6:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 80087fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 80087fc:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8008800:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8008802:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008804:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008808:	0a24      	lsrs	r4, r4, #8
 800880a:	f800 4c01 	strb.w	r4, [r0, #-1]
 800880e:	e7ec      	b.n	80087ea <USB_ReadPMA+0x12>

08008810 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008810:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8008814:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008816:	b16b      	cbz	r3, 8008834 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008818:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800881c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8008820:	28ff      	cmp	r0, #255	; 0xff
 8008822:	d007      	beq.n	8008834 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800882a:	4621      	mov	r1, r4
 800882c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800882e:	23ff      	movs	r3, #255	; 0xff
 8008830:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8008834:	2000      	movs	r0, #0
 8008836:	bd10      	pop	{r4, pc}

08008838 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008838:	2343      	movs	r3, #67	; 0x43
 800883a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800883c:	4800      	ldr	r0, [pc, #0]	; (8008840 <USBD_CDC_GetFSCfgDesc+0x8>)
 800883e:	4770      	bx	lr
 8008840:	2000007c 	.word	0x2000007c

08008844 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008844:	2343      	movs	r3, #67	; 0x43
 8008846:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8008848:	4800      	ldr	r0, [pc, #0]	; (800884c <USBD_CDC_GetHSCfgDesc+0x8>)
 800884a:	4770      	bx	lr
 800884c:	200000c0 	.word	0x200000c0

08008850 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008850:	2343      	movs	r3, #67	; 0x43
 8008852:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8008854:	4800      	ldr	r0, [pc, #0]	; (8008858 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8008856:	4770      	bx	lr
 8008858:	20000110 	.word	0x20000110

0800885c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800885c:	230a      	movs	r3, #10
 800885e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8008860:	4800      	ldr	r0, [pc, #0]	; (8008864 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8008862:	4770      	bx	lr
 8008864:	20000104 	.word	0x20000104

08008868 <USBD_CDC_DataOut>:
{
 8008868:	b538      	push	{r3, r4, r5, lr}
 800886a:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800886c:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008870:	f000 ff1c 	bl	80096ac <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8008874:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008878:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 800887c:	b14b      	cbz	r3, 8008892 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800887e:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8008882:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 800888c:	4798      	blx	r3
    return USBD_OK;
 800888e:	2000      	movs	r0, #0
}
 8008890:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8008892:	2002      	movs	r0, #2
 8008894:	e7fc      	b.n	8008890 <USBD_CDC_DataOut+0x28>

08008896 <USBD_CDC_DataIn>:
{
 8008896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008898:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 800889c:	b1ce      	cbz	r6, 80088d2 <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800889e:	2314      	movs	r3, #20
 80088a0:	fb03 0301 	mla	r3, r3, r1, r0
 80088a4:	69da      	ldr	r2, [r3, #28]
 80088a6:	b182      	cbz	r2, 80088ca <USBD_CDC_DataIn+0x34>
 80088a8:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 80088ac:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 80088b0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80088b2:	fbb2 f4f5 	udiv	r4, r2, r5
 80088b6:	fb05 2414 	mls	r4, r5, r4, r2
 80088ba:	b934      	cbnz	r4, 80088ca <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 80088bc:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80088be:	4622      	mov	r2, r4
 80088c0:	4623      	mov	r3, r4
 80088c2:	f000 fed7 	bl	8009674 <USBD_LL_Transmit>
    return USBD_OK;
 80088c6:	4620      	mov	r0, r4
}
 80088c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 80088ca:	2000      	movs	r0, #0
 80088cc:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 80088d0:	e7fa      	b.n	80088c8 <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 80088d2:	2002      	movs	r0, #2
 80088d4:	e7f8      	b.n	80088c8 <USBD_CDC_DataIn+0x32>

080088d6 <USBD_CDC_Setup>:
{
 80088d6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 80088da:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088de:	780a      	ldrb	r2, [r1, #0]
{
 80088e0:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088e2:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 80088e6:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80088e8:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 80088ec:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 80088f0:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088f4:	d028      	beq.n	8008948 <USBD_CDC_Setup+0x72>
 80088f6:	2c20      	cmp	r4, #32
 80088f8:	d145      	bne.n	8008986 <USBD_CDC_Setup+0xb0>
      if (req->wLength)
 80088fa:	88cc      	ldrh	r4, [r1, #6]
 80088fc:	784b      	ldrb	r3, [r1, #1]
 80088fe:	b1e4      	cbz	r4, 800893a <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8008900:	0612      	lsls	r2, r2, #24
 8008902:	d511      	bpl.n	8008928 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008904:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8008908:	4639      	mov	r1, r7
 800890a:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800890e:	4618      	mov	r0, r3
 8008910:	4622      	mov	r2, r4
 8008912:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008914:	88f2      	ldrh	r2, [r6, #6]
 8008916:	4639      	mov	r1, r7
 8008918:	4628      	mov	r0, r5
 800891a:	f000 fc46 	bl	80091aa <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800891e:	4644      	mov	r4, r8
}
 8008920:	4620      	mov	r0, r4
 8008922:	b003      	add	sp, #12
 8008924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8008928:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800892c:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008930:	4622      	mov	r2, r4
 8008932:	4639      	mov	r1, r7
 8008934:	f000 fc4e 	bl	80091d4 <USBD_CtlPrepareRx>
 8008938:	e7f1      	b.n	800891e <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800893a:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800893e:	4618      	mov	r0, r3
 8008940:	6895      	ldr	r5, [r2, #8]
 8008942:	4622      	mov	r2, r4
 8008944:	47a8      	blx	r5
 8008946:	e7eb      	b.n	8008920 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8008948:	784f      	ldrb	r7, [r1, #1]
 800894a:	2f0a      	cmp	r7, #10
 800894c:	d00d      	beq.n	800896a <USBD_CDC_Setup+0x94>
 800894e:	2f0b      	cmp	r7, #11
 8008950:	d015      	beq.n	800897e <USBD_CDC_Setup+0xa8>
 8008952:	b9c7      	cbnz	r7, 8008986 <USBD_CDC_Setup+0xb0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008954:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008958:	2b03      	cmp	r3, #3
 800895a:	d114      	bne.n	8008986 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800895c:	2202      	movs	r2, #2
 800895e:	f10d 0106 	add.w	r1, sp, #6
 8008962:	f000 fc22 	bl	80091aa <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8008966:	463c      	mov	r4, r7
 8008968:	e7da      	b.n	8008920 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800896a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800896e:	2b03      	cmp	r3, #3
 8008970:	d109      	bne.n	8008986 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008972:	2201      	movs	r2, #1
 8008974:	f10d 0105 	add.w	r1, sp, #5
 8008978:	f000 fc17 	bl	80091aa <USBD_CtlSendData>
 800897c:	e7d0      	b.n	8008920 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800897e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008982:	2b03      	cmp	r3, #3
 8008984:	d0cc      	beq.n	8008920 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 8008986:	4631      	mov	r1, r6
 8008988:	4628      	mov	r0, r5
 800898a:	f000 fbe7 	bl	800915c <USBD_CtlError>
          ret = USBD_FAIL;
 800898e:	2402      	movs	r4, #2
          break;
 8008990:	e7c6      	b.n	8008920 <USBD_CDC_Setup+0x4a>

08008992 <USBD_CDC_DeInit>:
{
 8008992:	b538      	push	{r3, r4, r5, lr}
 8008994:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008996:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008998:	2181      	movs	r1, #129	; 0x81
 800899a:	f000 fe23 	bl	80095e4 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800899e:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80089a0:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80089a2:	4620      	mov	r0, r4
 80089a4:	f000 fe1e 	bl	80095e4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80089a8:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80089ac:	2182      	movs	r1, #130	; 0x82
 80089ae:	4620      	mov	r0, r4
 80089b0:	f000 fe18 	bl	80095e4 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80089b4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80089b8:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 80089ba:	b14b      	cbz	r3, 80089d0 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80089bc:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80089c4:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 80089c8:	f000 fe78 	bl	80096bc <USBD_static_free>
    pdev->pClassData = NULL;
 80089cc:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 80089d0:	2000      	movs	r0, #0
 80089d2:	bd38      	pop	{r3, r4, r5, pc}

080089d4 <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089d4:	7c03      	ldrb	r3, [r0, #16]
{
 80089d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089da:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089dc:	bbcb      	cbnz	r3, 8008a52 <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80089de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089e2:	2202      	movs	r2, #2
 80089e4:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80089e6:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80089e8:	f000 fdec 	bl	80095c4 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80089ec:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80089f0:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80089f2:	4629      	mov	r1, r5
 80089f4:	2202      	movs	r2, #2
 80089f6:	4620      	mov	r0, r4
 80089f8:	f000 fde4 	bl	80095c4 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80089fc:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008a00:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008a02:	2308      	movs	r3, #8
 8008a04:	2203      	movs	r2, #3
 8008a06:	2182      	movs	r1, #130	; 0x82
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f000 fddb 	bl	80095c4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008a0e:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008a10:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008a14:	f000 fe4e 	bl	80096b4 <USBD_static_malloc>
 8008a18:	4606      	mov	r6, r0
 8008a1a:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8008a1e:	b350      	cbz	r0, 8008a76 <USBD_CDC_Init+0xa2>
    hcdc->TxState = 0U;
 8008a20:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008a22:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a2a:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8008a2e:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 8008a32:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a36:	f1b8 0f00 	cmp.w	r8, #0
 8008a3a:	d113      	bne.n	8008a64 <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a40:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8008a44:	4629      	mov	r1, r5
 8008a46:	4620      	mov	r0, r4
 8008a48:	f000 fe22 	bl	8009690 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8008a4c:	4640      	mov	r0, r8
}
 8008a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008a52:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008a54:	2340      	movs	r3, #64	; 0x40
 8008a56:	2202      	movs	r2, #2
 8008a58:	2181      	movs	r1, #129	; 0x81
 8008a5a:	f000 fdb3 	bl	80095c4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008a5e:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008a60:	2340      	movs	r3, #64	; 0x40
 8008a62:	e7c6      	b.n	80089f2 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a64:	2340      	movs	r3, #64	; 0x40
 8008a66:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8008a6a:	4629      	mov	r1, r5
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f000 fe0f 	bl	8009690 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8008a72:	4638      	mov	r0, r7
 8008a74:	e7eb      	b.n	8008a4e <USBD_CDC_Init+0x7a>
    ret = 1U;
 8008a76:	4628      	mov	r0, r5
 8008a78:	e7e9      	b.n	8008a4e <USBD_CDC_Init+0x7a>

08008a7a <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8008a7a:	b119      	cbz	r1, 8008a84 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8008a7c:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8008a80:	2000      	movs	r0, #0
 8008a82:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8008a84:	2002      	movs	r0, #2
  }

  return ret;
}
 8008a86:	4770      	bx	lr

08008a88 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a88:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8008a8c:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8008a8e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008a92:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8008a96:	4770      	bx	lr

08008a98 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8008a98:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8008a9c:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8008a9e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8008aa2:	4770      	bx	lr

08008aa4 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008aa4:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8008aa8:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 8008aaa:	b182      	cbz	r2, 8008ace <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8008aac:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	b974      	cbnz	r4, 8008ad2 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008ab4:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008ab8:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008abc:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008abe:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008ac0:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	f000 fdd5 	bl	8009674 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8008aca:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8008acc:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8008ace:	2002      	movs	r0, #2
 8008ad0:	e7fc      	b.n	8008acc <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	e7fa      	b.n	8008acc <USBD_CDC_TransmitPacket+0x28>

08008ad6 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ad6:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8008ada:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008adc:	b162      	cbz	r2, 8008af8 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ade:	7c04      	ldrb	r4, [r0, #16]
 8008ae0:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8008ae4:	b934      	cbnz	r4, 8008af4 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008aea:	2101      	movs	r1, #1
 8008aec:	f000 fdd0 	bl	8009690 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008af0:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8008af2:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8008af4:	2340      	movs	r3, #64	; 0x40
 8008af6:	e7f8      	b.n	8008aea <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 8008af8:	2002      	movs	r0, #2
 8008afa:	e7fa      	b.n	8008af2 <USBD_CDC_ReceivePacket+0x1c>

08008afc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008afc:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008afe:	b180      	cbz	r0, 8008b22 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008b00:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008b04:	b113      	cbz	r3, 8008b0c <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8008b06:	2300      	movs	r3, #0
 8008b08:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b0c:	b109      	cbz	r1, 8008b12 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8008b0e:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b12:	2301      	movs	r3, #1
  pdev->id = id;
 8008b14:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b16:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008b1a:	f000 fd03 	bl	8009524 <USBD_LL_Init>

  return USBD_OK;
 8008b1e:	2000      	movs	r0, #0
}
 8008b20:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8008b22:	2002      	movs	r0, #2
 8008b24:	e7fc      	b.n	8008b20 <USBD_Init+0x24>

08008b26 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8008b26:	b119      	cbz	r1, 8008b30 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008b28:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008b30:	2002      	movs	r0, #2
  }

  return status;
}
 8008b32:	4770      	bx	lr

08008b34 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008b34:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008b36:	f000 fd37 	bl	80095a8 <USBD_LL_Start>

  return USBD_OK;
}
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	bd08      	pop	{r3, pc}

08008b3e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008b3e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8008b40:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008b44:	b90b      	cbnz	r3, 8008b4a <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008b46:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8008b48:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4798      	blx	r3
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	d0fa      	beq.n	8008b48 <USBD_SetClassConfig+0xa>
 8008b52:	e7f8      	b.n	8008b46 <USBD_SetClassConfig+0x8>

08008b54 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008b54:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008b56:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	4798      	blx	r3

  return USBD_OK;
}
 8008b5e:	2000      	movs	r0, #0
 8008b60:	bd08      	pop	{r3, pc}

08008b62 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008b62:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008b64:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8008b68:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	f000 fae2 	bl	8009134 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008b70:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8008b72:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8008b76:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8008b7a:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8008b7e:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8008b82:	f001 031f 	and.w	r3, r1, #31
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d00e      	beq.n	8008ba8 <USBD_LL_SetupStage+0x46>
 8008b8a:	d307      	bcc.n	8008b9c <USBD_LL_SetupStage+0x3a>
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	d010      	beq.n	8008bb2 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008b90:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8008b94:	4620      	mov	r0, r4
 8008b96:	f000 fd33 	bl	8009600 <USBD_LL_StallEP>
      break;
 8008b9a:	e003      	b.n	8008ba4 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8008b9c:	4629      	mov	r1, r5
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f000 f8f6 	bl	8008d90 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8008ba8:	4629      	mov	r1, r5
 8008baa:	4620      	mov	r0, r4
 8008bac:	f000 fa14 	bl	8008fd8 <USBD_StdItfReq>
      break;
 8008bb0:	e7f8      	b.n	8008ba4 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f000 fa34 	bl	8009022 <USBD_StdEPReq>
      break;
 8008bba:	e7f3      	b.n	8008ba4 <USBD_LL_SetupStage+0x42>

08008bbc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008bbc:	b570      	push	{r4, r5, r6, lr}
 8008bbe:	4605      	mov	r5, r0
 8008bc0:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008bc2:	bb49      	cbnz	r1, 8008c18 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008bc4:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8008bc8:	2b03      	cmp	r3, #3
 8008bca:	d11e      	bne.n	8008c0a <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 8008bcc:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8008bd0:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d90b      	bls.n	8008bf0 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 8008bd8:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 8008bda:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8008bdc:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8008be0:	bf8c      	ite	hi
 8008be2:	b29a      	uxthhi	r2, r3
 8008be4:	b292      	uxthls	r2, r2
 8008be6:	4631      	mov	r1, r6
 8008be8:	f000 fb03 	bl	80091f2 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8008bec:	2000      	movs	r0, #0
}
 8008bee:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008bf0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	b123      	cbz	r3, 8008c02 <USBD_LL_DataOutStage+0x46>
 8008bf8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008bfc:	2a03      	cmp	r2, #3
 8008bfe:	d100      	bne.n	8008c02 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8008c00:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8008c02:	4628      	mov	r0, r5
 8008c04:	f000 fafd 	bl	8009202 <USBD_CtlSendStatus>
 8008c08:	e7f0      	b.n	8008bec <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008c0a:	2b05      	cmp	r3, #5
 8008c0c:	d1ee      	bne.n	8008bec <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8008c0e:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008c12:	f000 fcf5 	bl	8009600 <USBD_LL_StallEP>
 8008c16:	e7e9      	b.n	8008bec <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 8008c18:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008c1c:	699b      	ldr	r3, [r3, #24]
 8008c1e:	b12b      	cbz	r3, 8008c2c <USBD_LL_DataOutStage+0x70>
 8008c20:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008c24:	2a03      	cmp	r2, #3
 8008c26:	d101      	bne.n	8008c2c <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8008c28:	4798      	blx	r3
 8008c2a:	e7df      	b.n	8008bec <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8008c2c:	2002      	movs	r0, #2
 8008c2e:	e7de      	b.n	8008bee <USBD_LL_DataOutStage+0x32>

08008c30 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008c30:	b570      	push	{r4, r5, r6, lr}
 8008c32:	4613      	mov	r3, r2
 8008c34:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008c36:	460e      	mov	r6, r1
 8008c38:	2900      	cmp	r1, #0
 8008c3a:	d147      	bne.n	8008ccc <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c3c:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8008c40:	2a02      	cmp	r2, #2
 8008c42:	d13c      	bne.n	8008cbe <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c44:	e9d0 5208 	ldrd	r5, r2, [r0, #32]
 8008c48:	4295      	cmp	r5, r2
 8008c4a:	d913      	bls.n	8008c74 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8008c4c:	1aaa      	subs	r2, r5, r2
 8008c4e:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008c50:	4619      	mov	r1, r3
 8008c52:	b292      	uxth	r2, r2
 8008c54:	f000 fab6 	bl	80091c4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c58:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	4620      	mov	r0, r4
 8008c60:	f000 fd16 	bl	8009690 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008c64:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8008c68:	2000      	movs	r0, #0
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d101      	bne.n	8008c72 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8008c6e:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8008c72:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008c74:	69c3      	ldr	r3, [r0, #28]
 8008c76:	fbb3 f5f2 	udiv	r5, r3, r2
 8008c7a:	fb02 3515 	mls	r5, r2, r5, r3
 8008c7e:	b965      	cbnz	r5, 8008c9a <USBD_LL_DataInStage+0x6a>
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d80a      	bhi.n	8008c9a <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8008c84:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d206      	bcs.n	8008c9a <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c8c:	462a      	mov	r2, r5
 8008c8e:	f000 fa99 	bl	80091c4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c92:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c96:	462b      	mov	r3, r5
 8008c98:	e7df      	b.n	8008c5a <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008c9a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	b12b      	cbz	r3, 8008cae <USBD_LL_DataInStage+0x7e>
 8008ca2:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8008ca6:	2a03      	cmp	r2, #3
 8008ca8:	d101      	bne.n	8008cae <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8008caa:	4620      	mov	r0, r4
 8008cac:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8008cae:	2180      	movs	r1, #128	; 0x80
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f000 fca5 	bl	8009600 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	f000 faae 	bl	8009218 <USBD_CtlReceiveStatus>
 8008cbc:	e7d2      	b.n	8008c64 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008cbe:	f032 0304 	bics.w	r3, r2, #4
 8008cc2:	d1cf      	bne.n	8008c64 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8008cc4:	2180      	movs	r1, #128	; 0x80
 8008cc6:	f000 fc9b 	bl	8009600 <USBD_LL_StallEP>
 8008cca:	e7cb      	b.n	8008c64 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8008ccc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008cd0:	695b      	ldr	r3, [r3, #20]
 8008cd2:	b133      	cbz	r3, 8008ce2 <USBD_LL_DataInStage+0xb2>
 8008cd4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008cd8:	2a03      	cmp	r2, #3
 8008cda:	d102      	bne.n	8008ce2 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 8008cdc:	4798      	blx	r3
  return USBD_OK;
 8008cde:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8008ce0:	e7c7      	b.n	8008c72 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8008ce2:	2002      	movs	r0, #2
 8008ce4:	e7c5      	b.n	8008c72 <USBD_LL_DataInStage+0x42>

08008ce6 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ce6:	2200      	movs	r2, #0
{
 8008ce8:	b570      	push	{r4, r5, r6, lr}
 8008cea:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008cec:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008cee:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008cf0:	4611      	mov	r1, r2
 8008cf2:	2340      	movs	r3, #64	; 0x40
 8008cf4:	f000 fc66 	bl	80095c4 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008cf8:	4633      	mov	r3, r6
 8008cfa:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008cfc:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d00:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d04:	2200      	movs	r2, #0
 8008d06:	4620      	mov	r0, r4
 8008d08:	f000 fc5c 	bl	80095c4 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d0c:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8008d0e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d12:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d14:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d16:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d1a:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8008d1e:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d20:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8008d24:	b123      	cbz	r3, 8008d30 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008d26:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	4798      	blx	r3
  }

  return USBD_OK;
}
 8008d30:	2000      	movs	r0, #0
 8008d32:	bd70      	pop	{r4, r5, r6, pc}

08008d34 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8008d34:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8008d36:	2000      	movs	r0, #0
 8008d38:	4770      	bx	lr

08008d3a <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8008d3a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008d3e:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008d42:	2304      	movs	r3, #4
 8008d44:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8008d48:	2000      	movs	r0, #0
 8008d4a:	4770      	bx	lr

08008d4c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008d4c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008d50:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8008d52:	bf04      	itt	eq
 8008d54:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8008d58:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	4770      	bx	lr

08008d60 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008d60:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d62:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008d66:	2a03      	cmp	r2, #3
 8008d68:	d104      	bne.n	8008d74 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8008d6a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008d6e:	69db      	ldr	r3, [r3, #28]
 8008d70:	b103      	cbz	r3, 8008d74 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8008d72:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8008d74:	2000      	movs	r0, #0
 8008d76:	bd08      	pop	{r3, pc}

08008d78 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8008d78:	b510      	push	{r4, lr}
 8008d7a:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8008d7c:	2180      	movs	r1, #128	; 0x80
 8008d7e:	f000 fc3f 	bl	8009600 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008d82:	4620      	mov	r0, r4
}
 8008d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8008d88:	2100      	movs	r1, #0
 8008d8a:	f000 bc39 	b.w	8009600 <USBD_LL_StallEP>
	...

08008d90 <USBD_StdDevReq>:
{
 8008d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d92:	780b      	ldrb	r3, [r1, #0]
{
 8008d94:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d9a:	2b20      	cmp	r3, #32
{
 8008d9c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d9e:	d012      	beq.n	8008dc6 <USBD_StdDevReq+0x36>
 8008da0:	2b40      	cmp	r3, #64	; 0x40
 8008da2:	d010      	beq.n	8008dc6 <USBD_StdDevReq+0x36>
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d15b      	bne.n	8008e60 <USBD_StdDevReq+0xd0>
      switch (req->bRequest)
 8008da8:	784b      	ldrb	r3, [r1, #1]
 8008daa:	2b09      	cmp	r3, #9
 8008dac:	d858      	bhi.n	8008e60 <USBD_StdDevReq+0xd0>
 8008dae:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008db2:	00e9      	.short	0x00e9
 8008db4:	00570105 	.word	0x00570105
 8008db8:	005700fe 	.word	0x005700fe
 8008dbc:	00130084 	.word	0x00130084
 8008dc0:	00d20057 	.word	0x00d20057
 8008dc4:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 8008dc6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8008dca:	4629      	mov	r1, r5
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	4620      	mov	r0, r4
 8008dd0:	4798      	blx	r3
}
 8008dd2:	2000      	movs	r0, #0
 8008dd4:	b003      	add	sp, #12
 8008dd6:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8008dde:	884b      	ldrh	r3, [r1, #2]
 8008de0:	0a1a      	lsrs	r2, r3, #8
 8008de2:	3a01      	subs	r2, #1
 8008de4:	2a06      	cmp	r2, #6
 8008de6:	d83b      	bhi.n	8008e60 <USBD_StdDevReq+0xd0>
 8008de8:	e8df f002 	tbb	[pc, r2]
 8008dec:	3a2d2004 	.word	0x3a2d2004
 8008df0:	523a      	.short	0x523a
 8008df2:	5c          	.byte	0x5c
 8008df3:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008df4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008df8:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008dfa:	f10d 0106 	add.w	r1, sp, #6
 8008dfe:	7c20      	ldrb	r0, [r4, #16]
 8008e00:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8008e02:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008e06:	b152      	cbz	r2, 8008e1e <USBD_StdDevReq+0x8e>
 8008e08:	88eb      	ldrh	r3, [r5, #6]
 8008e0a:	b143      	cbz	r3, 8008e1e <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	bf28      	it	cs
 8008e10:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e12:	4601      	mov	r1, r0
 8008e14:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8008e16:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e1a:	f000 f9c6 	bl	80091aa <USBD_CtlSendData>
    if (req->wLength == 0U)
 8008e1e:	88eb      	ldrh	r3, [r5, #6]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1d6      	bne.n	8008dd2 <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 8008e24:	4620      	mov	r0, r4
 8008e26:	f000 f9ec 	bl	8009202 <USBD_CtlSendStatus>
 8008e2a:	e7d2      	b.n	8008dd2 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e2c:	7c02      	ldrb	r2, [r0, #16]
 8008e2e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008e32:	b932      	cbnz	r2, 8008e42 <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008e36:	f10d 0006 	add.w	r0, sp, #6
 8008e3a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e3c:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e3e:	7043      	strb	r3, [r0, #1]
 8008e40:	e7df      	b.n	8008e02 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e44:	e7f7      	b.n	8008e36 <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	2b05      	cmp	r3, #5
 8008e4a:	d809      	bhi.n	8008e60 <USBD_StdDevReq+0xd0>
 8008e4c:	e8df f003 	tbb	[pc, r3]
 8008e50:	14100c03 	.word	0x14100c03
 8008e54:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e56:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008e5a:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d1cc      	bne.n	8008dfa <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8008e60:	4620      	mov	r0, r4
 8008e62:	f7ff ff89 	bl	8008d78 <USBD_CtlError.constprop.1>
 8008e66:	e7b4      	b.n	8008dd2 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e68:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	e7f5      	b.n	8008e5c <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e70:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	e7f1      	b.n	8008e5c <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008e78:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	e7ed      	b.n	8008e5c <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008e80:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	e7e9      	b.n	8008e5c <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e88:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	e7e5      	b.n	8008e5c <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e90:	7c03      	ldrb	r3, [r0, #16]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1e4      	bne.n	8008e60 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008e96:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008e9a:	f10d 0006 	add.w	r0, sp, #6
 8008e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea0:	4798      	blx	r3
 8008ea2:	e7ae      	b.n	8008e02 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ea4:	7c03      	ldrb	r3, [r0, #16]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1da      	bne.n	8008e60 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008eaa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008eae:	f10d 0006 	add.w	r0, sp, #6
 8008eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008eb6:	2307      	movs	r3, #7
 8008eb8:	e7c1      	b.n	8008e3e <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008eba:	888b      	ldrh	r3, [r1, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1cf      	bne.n	8008e60 <USBD_StdDevReq+0xd0>
 8008ec0:	88cb      	ldrh	r3, [r1, #6]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1cc      	bne.n	8008e60 <USBD_StdDevReq+0xd0>
 8008ec6:	884d      	ldrh	r5, [r1, #2]
 8008ec8:	2d7f      	cmp	r5, #127	; 0x7f
 8008eca:	d8c9      	bhi.n	8008e60 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ecc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008ed0:	2b03      	cmp	r3, #3
 8008ed2:	d0c5      	beq.n	8008e60 <USBD_StdDevReq+0xd0>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ed4:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8008ed6:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008eda:	f000 fbbd 	bl	8009658 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008ede:	4620      	mov	r0, r4
 8008ee0:	f000 f98f 	bl	8009202 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8008ee4:	b11d      	cbz	r5, 8008eee <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ee6:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ee8:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8008eec:	e771      	b.n	8008dd2 <USBD_StdDevReq+0x42>
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e7fa      	b.n	8008ee8 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 8008ef2:	7889      	ldrb	r1, [r1, #2]
 8008ef4:	4d37      	ldr	r5, [pc, #220]	; (8008fd4 <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ef6:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8008ef8:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008efa:	d8b1      	bhi.n	8008e60 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8008efc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d008      	beq.n	8008f16 <USBD_StdDevReq+0x186>
 8008f04:	2b03      	cmp	r3, #3
 8008f06:	d014      	beq.n	8008f32 <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 8008f08:	f7ff ff36 	bl	8008d78 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008f0c:	7829      	ldrb	r1, [r5, #0]
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f7ff fe20 	bl	8008b54 <USBD_ClrClassConfig>
 8008f14:	e75d      	b.n	8008dd2 <USBD_StdDevReq+0x42>
        if (cfgidx)
 8008f16:	2900      	cmp	r1, #0
 8008f18:	d084      	beq.n	8008e24 <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 8008f1a:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f1c:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8008f1e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f20:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008f24:	4620      	mov	r0, r4
 8008f26:	f7ff fe0a 	bl	8008b3e <USBD_SetClassConfig>
 8008f2a:	2802      	cmp	r0, #2
 8008f2c:	f47f af7a 	bne.w	8008e24 <USBD_StdDevReq+0x94>
 8008f30:	e796      	b.n	8008e60 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 8008f32:	b931      	cbnz	r1, 8008f42 <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f34:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8008f36:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f38:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8008f3c:	f7ff fe0a 	bl	8008b54 <USBD_ClrClassConfig>
 8008f40:	e770      	b.n	8008e24 <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 8008f42:	6841      	ldr	r1, [r0, #4]
 8008f44:	2901      	cmp	r1, #1
 8008f46:	f43f af6d 	beq.w	8008e24 <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f4a:	b2c9      	uxtb	r1, r1
 8008f4c:	f7ff fe02 	bl	8008b54 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008f50:	7829      	ldrb	r1, [r5, #0]
 8008f52:	6061      	str	r1, [r4, #4]
 8008f54:	e7e6      	b.n	8008f24 <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 8008f56:	88ca      	ldrh	r2, [r1, #6]
 8008f58:	2a01      	cmp	r2, #1
 8008f5a:	d181      	bne.n	8008e60 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8008f5c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f43f af7d 	beq.w	8008e60 <USBD_StdDevReq+0xd0>
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d904      	bls.n	8008f74 <USBD_StdDevReq+0x1e4>
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	f47f af78 	bne.w	8008e60 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008f70:	1d01      	adds	r1, r0, #4
 8008f72:	e003      	b.n	8008f7c <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 8008f74:	4601      	mov	r1, r0
 8008f76:	2300      	movs	r3, #0
 8008f78:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f000 f914 	bl	80091aa <USBD_CtlSendData>
 8008f82:	e726      	b.n	8008dd2 <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 8008f84:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	f63f af68 	bhi.w	8008e60 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 8008f90:	88cb      	ldrh	r3, [r1, #6]
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	f47f af64 	bne.w	8008e60 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8008f9c:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8008fa0:	b10b      	cbz	r3, 8008fa6 <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008fa2:	2303      	movs	r3, #3
 8008fa4:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	f104 010c 	add.w	r1, r4, #12
 8008fac:	e7e6      	b.n	8008f7c <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008fae:	884b      	ldrh	r3, [r1, #2]
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	f47f af0e 	bne.w	8008dd2 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8008fb6:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8008fba:	e733      	b.n	8008e24 <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 8008fbc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	f63f af4c 	bhi.w	8008e60 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008fc8:	884b      	ldrh	r3, [r1, #2]
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	f47f af01 	bne.w	8008dd2 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	e7f0      	b.n	8008fb6 <USBD_StdDevReq+0x226>
 8008fd4:	200017a0 	.word	0x200017a0

08008fd8 <USBD_StdItfReq>:
{
 8008fd8:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fda:	780b      	ldrb	r3, [r1, #0]
{
 8008fdc:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fe2:	2b20      	cmp	r3, #32
{
 8008fe4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fe6:	d002      	beq.n	8008fee <USBD_StdItfReq+0x16>
 8008fe8:	2b40      	cmp	r3, #64	; 0x40
 8008fea:	d000      	beq.n	8008fee <USBD_StdItfReq+0x16>
 8008fec:	b9ab      	cbnz	r3, 800901a <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 8008fee:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d810      	bhi.n	800901a <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ff8:	792b      	ldrb	r3, [r5, #4]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d80d      	bhi.n	800901a <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ffe:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8009002:	4629      	mov	r1, r5
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	4620      	mov	r0, r4
 8009008:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800900a:	88eb      	ldrh	r3, [r5, #6]
 800900c:	b91b      	cbnz	r3, 8009016 <USBD_StdItfReq+0x3e>
 800900e:	b910      	cbnz	r0, 8009016 <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8009010:	4620      	mov	r0, r4
 8009012:	f000 f8f6 	bl	8009202 <USBD_CtlSendStatus>
}
 8009016:	2000      	movs	r0, #0
 8009018:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 800901a:	4620      	mov	r0, r4
 800901c:	f7ff feac 	bl	8008d78 <USBD_CtlError.constprop.1>
          break;
 8009020:	e7f9      	b.n	8009016 <USBD_StdItfReq+0x3e>

08009022 <USBD_StdEPReq>:
{
 8009022:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009024:	780a      	ldrb	r2, [r1, #0]
{
 8009026:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009028:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800902c:	2a20      	cmp	r2, #32
{
 800902e:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009030:	d014      	beq.n	800905c <USBD_StdEPReq+0x3a>
 8009032:	2a40      	cmp	r2, #64	; 0x40
 8009034:	d012      	beq.n	800905c <USBD_StdEPReq+0x3a>
 8009036:	b96a      	cbnz	r2, 8009054 <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 8009038:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800903a:	888d      	ldrh	r5, [r1, #4]
      switch (req->bRequest)
 800903c:	2a01      	cmp	r2, #1
  ep_addr  = LOBYTE(req->wIndex);
 800903e:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8009040:	d020      	beq.n	8009084 <USBD_StdEPReq+0x62>
 8009042:	d336      	bcc.n	80090b2 <USBD_StdEPReq+0x90>
 8009044:	2a03      	cmp	r2, #3
 8009046:	d105      	bne.n	8009054 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8009048:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800904c:	2a02      	cmp	r2, #2
 800904e:	d027      	beq.n	80090a0 <USBD_StdEPReq+0x7e>
 8009050:	2a03      	cmp	r2, #3
 8009052:	d00b      	beq.n	800906c <USBD_StdEPReq+0x4a>
              USBD_CtlError(pdev, req);
 8009054:	4620      	mov	r0, r4
 8009056:	f7ff fe8f 	bl	8008d78 <USBD_CtlError.constprop.1>
              break;
 800905a:	e005      	b.n	8009068 <USBD_StdEPReq+0x46>
      pdev->pClass->Setup(pdev, req);
 800905c:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8009060:	4619      	mov	r1, r3
 8009062:	6892      	ldr	r2, [r2, #8]
 8009064:	4620      	mov	r0, r4
 8009066:	4790      	blx	r2
}
 8009068:	2000      	movs	r0, #0
 800906a:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 800906c:	885a      	ldrh	r2, [r3, #2]
 800906e:	b92a      	cbnz	r2, 800907c <USBD_StdEPReq+0x5a>
                if ((ep_addr != 0x00U) &&
 8009070:	064a      	lsls	r2, r1, #25
 8009072:	d003      	beq.n	800907c <USBD_StdEPReq+0x5a>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009074:	88db      	ldrh	r3, [r3, #6]
 8009076:	b90b      	cbnz	r3, 800907c <USBD_StdEPReq+0x5a>
                  USBD_LL_StallEP(pdev, ep_addr);
 8009078:	f000 fac2 	bl	8009600 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 800907c:	4620      	mov	r0, r4
 800907e:	f000 f8c0 	bl	8009202 <USBD_CtlSendStatus>
              break;
 8009082:	e7f1      	b.n	8009068 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 8009084:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8009088:	2a02      	cmp	r2, #2
 800908a:	d009      	beq.n	80090a0 <USBD_StdEPReq+0x7e>
 800908c:	2a03      	cmp	r2, #3
 800908e:	d1e1      	bne.n	8009054 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009090:	885b      	ldrh	r3, [r3, #2]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1e8      	bne.n	8009068 <USBD_StdEPReq+0x46>
                if ((ep_addr & 0x7FU) != 0x00U)
 8009096:	064d      	lsls	r5, r1, #25
 8009098:	d0f0      	beq.n	800907c <USBD_StdEPReq+0x5a>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800909a:	f000 fabf 	bl	800961c <USBD_LL_ClearStallEP>
 800909e:	e7ed      	b.n	800907c <USBD_StdEPReq+0x5a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090a0:	064b      	lsls	r3, r1, #25
 80090a2:	d0d7      	beq.n	8009054 <USBD_StdEPReq+0x32>
                USBD_LL_StallEP(pdev, ep_addr);
 80090a4:	f000 faac 	bl	8009600 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80090a8:	2180      	movs	r1, #128	; 0x80
 80090aa:	4620      	mov	r0, r4
 80090ac:	f000 faa8 	bl	8009600 <USBD_LL_StallEP>
 80090b0:	e7da      	b.n	8009068 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 80090b2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80090b6:	2b02      	cmp	r3, #2
 80090b8:	d018      	beq.n	80090ec <USBD_StdEPReq+0xca>
 80090ba:	2b03      	cmp	r3, #3
 80090bc:	d1ca      	bne.n	8009054 <USBD_StdEPReq+0x32>
 80090be:	2314      	movs	r3, #20
 80090c0:	f001 020f 	and.w	r2, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80090c4:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80090c8:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80090cc:	d01f      	beq.n	800910e <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80090ce:	6992      	ldr	r2, [r2, #24]
 80090d0:	2a00      	cmp	r2, #0
 80090d2:	d0bf      	beq.n	8009054 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090d4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80090d8:	fb05 3503 	mla	r5, r5, r3, r3
 80090dc:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80090de:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80090e2:	d11f      	bne.n	8009124 <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 80090e4:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80090e6:	2202      	movs	r2, #2
 80090e8:	4629      	mov	r1, r5
 80090ea:	e00c      	b.n	8009106 <USBD_StdEPReq+0xe4>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090ec:	064a      	lsls	r2, r1, #25
 80090ee:	d1b1      	bne.n	8009054 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090f0:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 80090f2:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80090f6:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090fa:	bf4c      	ite	mi
 80090fc:	f100 0114 	addmi.w	r1, r0, #20
 8009100:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8009104:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009106:	4620      	mov	r0, r4
 8009108:	f000 f84f 	bl	80091aa <USBD_CtlSendData>
              break;
 800910c:	e7ac      	b.n	8009068 <USBD_StdEPReq+0x46>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800910e:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 8009112:	2a00      	cmp	r2, #0
 8009114:	d09e      	beq.n	8009054 <USBD_StdEPReq+0x32>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009116:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800911a:	fb03 0505 	mla	r5, r3, r5, r0
 800911e:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8009122:	e7dc      	b.n	80090de <USBD_StdEPReq+0xbc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009124:	4620      	mov	r0, r4
 8009126:	f000 fa87 	bl	8009638 <USBD_LL_IsStallEP>
 800912a:	b108      	cbz	r0, 8009130 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 800912c:	2301      	movs	r3, #1
 800912e:	e7d9      	b.n	80090e4 <USBD_StdEPReq+0xc2>
                pep->status = 0x0000U;
 8009130:	6028      	str	r0, [r5, #0]
 8009132:	e7d8      	b.n	80090e6 <USBD_StdEPReq+0xc4>

08009134 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8009134:	780b      	ldrb	r3, [r1, #0]
 8009136:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009138:	784b      	ldrb	r3, [r1, #1]
 800913a:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800913c:	78ca      	ldrb	r2, [r1, #3]
 800913e:	788b      	ldrb	r3, [r1, #2]
 8009140:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009144:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009146:	794a      	ldrb	r2, [r1, #5]
 8009148:	790b      	ldrb	r3, [r1, #4]
 800914a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800914e:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009150:	79ca      	ldrb	r2, [r1, #7]
 8009152:	798b      	ldrb	r3, [r1, #6]
 8009154:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009158:	80c3      	strh	r3, [r0, #6]
}
 800915a:	4770      	bx	lr

0800915c <USBD_CtlError>:
{
 800915c:	b510      	push	{r4, lr}
 800915e:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8009160:	2180      	movs	r1, #128	; 0x80
 8009162:	f000 fa4d 	bl	8009600 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009166:	4620      	mov	r0, r4
}
 8009168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800916c:	2100      	movs	r1, #0
 800916e:	f000 ba47 	b.w	8009600 <USBD_LL_StallEP>

08009172 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009172:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8009174:	b188      	cbz	r0, 800919a <USBD_GetString+0x28>
 8009176:	4605      	mov	r5, r0
 8009178:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800917a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800917e:	b2db      	uxtb	r3, r3
 8009180:	2c00      	cmp	r4, #0
 8009182:	d1f9      	bne.n	8009178 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009184:	3301      	adds	r3, #1
 8009186:	005b      	lsls	r3, r3, #1
 8009188:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800918a:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800918c:	2303      	movs	r3, #3
 800918e:	704b      	strb	r3, [r1, #1]
 8009190:	2302      	movs	r3, #2
 8009192:	3801      	subs	r0, #1
    while (*desc != '\0')
 8009194:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009198:	b905      	cbnz	r5, 800919c <USBD_GetString+0x2a>
}
 800919a:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800919c:	1c5a      	adds	r2, r3, #1
 800919e:	54cd      	strb	r5, [r1, r3]
 80091a0:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80091a2:	3302      	adds	r3, #2
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	548c      	strb	r4, [r1, r2]
 80091a8:	e7f4      	b.n	8009194 <USBD_GetString+0x22>

080091aa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80091aa:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80091ac:	2202      	movs	r2, #2
{
 80091ae:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80091b0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80091b4:	e9c0 3307 	strd	r3, r3, [r0, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80091b8:	460a      	mov	r2, r1
 80091ba:	2100      	movs	r1, #0
 80091bc:	f000 fa5a 	bl	8009674 <USBD_LL_Transmit>

  return USBD_OK;
}
 80091c0:	2000      	movs	r0, #0
 80091c2:	bd10      	pop	{r4, pc}

080091c4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80091c4:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80091c6:	4613      	mov	r3, r2
 80091c8:	460a      	mov	r2, r1
 80091ca:	2100      	movs	r1, #0
 80091cc:	f000 fa52 	bl	8009674 <USBD_LL_Transmit>

  return USBD_OK;
}
 80091d0:	2000      	movs	r0, #0
 80091d2:	bd08      	pop	{r3, pc}

080091d4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80091d4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80091d6:	2203      	movs	r2, #3
{
 80091d8:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80091da:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80091de:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091e2:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80091e4:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091e8:	2100      	movs	r1, #0
 80091ea:	f000 fa51 	bl	8009690 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80091ee:	2000      	movs	r0, #0
 80091f0:	bd10      	pop	{r4, pc}

080091f2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80091f2:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80091f4:	4613      	mov	r3, r2
 80091f6:	460a      	mov	r2, r1
 80091f8:	2100      	movs	r1, #0
 80091fa:	f000 fa49 	bl	8009690 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80091fe:	2000      	movs	r0, #0
 8009200:	bd08      	pop	{r3, pc}

08009202 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009202:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009204:	2304      	movs	r3, #4
 8009206:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800920a:	2300      	movs	r3, #0
 800920c:	461a      	mov	r2, r3
 800920e:	4619      	mov	r1, r3
 8009210:	f000 fa30 	bl	8009674 <USBD_LL_Transmit>

  return USBD_OK;
}
 8009214:	2000      	movs	r0, #0
 8009216:	bd08      	pop	{r3, pc}

08009218 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009218:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800921a:	2305      	movs	r3, #5
 800921c:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009220:	2300      	movs	r3, #0
 8009222:	461a      	mov	r2, r3
 8009224:	4619      	mov	r1, r3
 8009226:	f000 fa33 	bl	8009690 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800922a:	2000      	movs	r0, #0
 800922c:	bd08      	pop	{r3, pc}
	...

08009230 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009230:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009232:	2200      	movs	r2, #0
 8009234:	490e      	ldr	r1, [pc, #56]	; (8009270 <MX_USB_DEVICE_Init+0x40>)
 8009236:	480f      	ldr	r0, [pc, #60]	; (8009274 <MX_USB_DEVICE_Init+0x44>)
 8009238:	f7ff fc60 	bl	8008afc <USBD_Init>
 800923c:	b108      	cbz	r0, 8009242 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 800923e:	f7f8 ff85 	bl	800214c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009242:	490d      	ldr	r1, [pc, #52]	; (8009278 <MX_USB_DEVICE_Init+0x48>)
 8009244:	480b      	ldr	r0, [pc, #44]	; (8009274 <MX_USB_DEVICE_Init+0x44>)
 8009246:	f7ff fc6e 	bl	8008b26 <USBD_RegisterClass>
 800924a:	b108      	cbz	r0, 8009250 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 800924c:	f7f8 ff7e 	bl	800214c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009250:	490a      	ldr	r1, [pc, #40]	; (800927c <MX_USB_DEVICE_Init+0x4c>)
 8009252:	4808      	ldr	r0, [pc, #32]	; (8009274 <MX_USB_DEVICE_Init+0x44>)
 8009254:	f7ff fc11 	bl	8008a7a <USBD_CDC_RegisterInterface>
 8009258:	b108      	cbz	r0, 800925e <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800925a:	f7f8 ff77 	bl	800214c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800925e:	4805      	ldr	r0, [pc, #20]	; (8009274 <MX_USB_DEVICE_Init+0x44>)
 8009260:	f7ff fc68 	bl	8008b34 <USBD_Start>
 8009264:	b118      	cbz	r0, 800926e <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009266:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800926a:	f7f8 bf6f 	b.w	800214c <Error_Handler>
}
 800926e:	bd08      	pop	{r3, pc}
 8009270:	20000164 	.word	0x20000164
 8009274:	20002058 	.word	0x20002058
 8009278:	20000044 	.word	0x20000044
 800927c:	20000154 	.word	0x20000154

08009280 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8009280:	2000      	movs	r0, #0
 8009282:	4770      	bx	lr

08009284 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8009284:	2000      	movs	r0, #0
 8009286:	4770      	bx	lr

08009288 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	  uint16_t in;

	  for(i = 0; i < *Len; ++i)
	  {
	    in = (usb_rxBufPtrIn + 1) % USB_RX_DATA_SIZE;
	    if(in != usb_rxBufPtrOut) //USB ring buffer not full
 800928a:	4b0f      	ldr	r3, [pc, #60]	; (80092c8 <CDC_Receive_FS+0x40>)
	    in = (usb_rxBufPtrIn + 1) % USB_RX_DATA_SIZE;
 800928c:	4c0f      	ldr	r4, [pc, #60]	; (80092cc <CDC_Receive_FS+0x44>)
	    if(in != usb_rxBufPtrOut) //USB ring buffer not full
 800928e:	681e      	ldr	r6, [r3, #0]
	  for(i = 0; i < *Len; ++i)
 8009290:	2300      	movs	r3, #0
	    {
	      usb_rxBuffer[usb_rxBufPtrIn] = Buf[i];
 8009292:	4f0f      	ldr	r7, [pc, #60]	; (80092d0 <CDC_Receive_FS+0x48>)
	  for(i = 0; i < *Len; ++i)
 8009294:	680a      	ldr	r2, [r1, #0]
 8009296:	429a      	cmp	r2, r3
 8009298:	d808      	bhi.n	80092ac <CDC_Receive_FS+0x24>
	      usb_rxBufPtrIn = in;
	    }
	  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800929a:	4601      	mov	r1, r0
 800929c:	480d      	ldr	r0, [pc, #52]	; (80092d4 <CDC_Receive_FS+0x4c>)
 800929e:	f7ff fbfb 	bl	8008a98 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80092a2:	480c      	ldr	r0, [pc, #48]	; (80092d4 <CDC_Receive_FS+0x4c>)
 80092a4:	f7ff fc17 	bl	8008ad6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80092a8:	2000      	movs	r0, #0
 80092aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    in = (usb_rxBufPtrIn + 1) % USB_RX_DATA_SIZE;
 80092ac:	6825      	ldr	r5, [r4, #0]
 80092ae:	1c6a      	adds	r2, r5, #1
	    if(in != usb_rxBufPtrOut) //USB ring buffer not full
 80092b0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80092b4:	42b2      	cmp	r2, r6
	      usb_rxBuffer[usb_rxBufPtrIn] = Buf[i];
 80092b6:	bf1e      	ittt	ne
 80092b8:	f810 c003 	ldrbne.w	ip, [r0, r3]
	      usb_rxBufPtrIn = in;
 80092bc:	6022      	strne	r2, [r4, #0]
	      usb_rxBuffer[usb_rxBufPtrIn] = Buf[i];
 80092be:	f807 c005 	strbne.w	ip, [r7, r5]
	  for(i = 0; i < *Len; ++i)
 80092c2:	3301      	adds	r3, #1
 80092c4:	e7e6      	b.n	8009294 <CDC_Receive_FS+0xc>
 80092c6:	bf00      	nop
 80092c8:	200017a8 	.word	0x200017a8
 80092cc:	200017a4 	.word	0x200017a4
 80092d0:	2000331c 	.word	0x2000331c
 80092d4:	20002058 	.word	0x20002058

080092d8 <CDC_Init_FS>:
{
 80092d8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80092da:	4c07      	ldr	r4, [pc, #28]	; (80092f8 <CDC_Init_FS+0x20>)
 80092dc:	2200      	movs	r2, #0
 80092de:	4907      	ldr	r1, [pc, #28]	; (80092fc <CDC_Init_FS+0x24>)
 80092e0:	4620      	mov	r0, r4
 80092e2:	f7ff fbd1 	bl	8008a88 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80092e6:	4906      	ldr	r1, [pc, #24]	; (8009300 <CDC_Init_FS+0x28>)
 80092e8:	4620      	mov	r0, r4
 80092ea:	f7ff fbd5 	bl	8008a98 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80092ee:	4620      	mov	r0, r4
 80092f0:	f7ff fbf1 	bl	8008ad6 <USBD_CDC_ReceivePacket>
}
 80092f4:	2000      	movs	r0, #0
 80092f6:	bd10      	pop	{r4, pc}
 80092f8:	20002058 	.word	0x20002058
 80092fc:	20002b1c 	.word	0x20002b1c
 8009300:	2000231c 	.word	0x2000231c

08009304 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009304:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009306:	4c09      	ldr	r4, [pc, #36]	; (800932c <CDC_Transmit_FS+0x28>)
{
 8009308:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800930a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 800930e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009312:	b943      	cbnz	r3, 8009326 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009314:	4601      	mov	r1, r0
 8009316:	4620      	mov	r0, r4
 8009318:	f7ff fbb6 	bl	8008a88 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800931c:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 800931e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009322:	f7ff bbbf 	b.w	8008aa4 <USBD_CDC_TransmitPacket>
}
 8009326:	2001      	movs	r0, #1
 8009328:	bd10      	pop	{r4, pc}
 800932a:	bf00      	nop
 800932c:	20002058 	.word	0x20002058

08009330 <vcp_read>:
}

int vcp_read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if(usb_rxBufPtrIn == usb_rxBufPtrOut)
 8009330:	4a07      	ldr	r2, [pc, #28]	; (8009350 <vcp_read+0x20>)
 8009332:	4908      	ldr	r1, [pc, #32]	; (8009354 <vcp_read+0x24>)
 8009334:	6813      	ldr	r3, [r2, #0]
 8009336:	6809      	ldr	r1, [r1, #0]
 8009338:	4299      	cmp	r1, r3
  {
    return -1;
  }
  else
  {
    unsigned char ch = usb_rxBuffer[usb_rxBufPtrOut];
 800933a:	bf1f      	itttt	ne
 800933c:	4906      	ldrne	r1, [pc, #24]	; (8009358 <vcp_read+0x28>)
 800933e:	5cc8      	ldrbne	r0, [r1, r3]
    usb_rxBufPtrOut = (uint16_t)(usb_rxBufPtrOut + 1) % USB_RX_DATA_SIZE;
 8009340:	3301      	addne	r3, #1
 8009342:	f3c3 030a 	ubfxne	r3, r3, #0, #11
 8009346:	bf14      	ite	ne
 8009348:	6013      	strne	r3, [r2, #0]
    return -1;
 800934a:	f04f 30ff 	moveq.w	r0, #4294967295
    return ch;
  }
}
 800934e:	4770      	bx	lr
 8009350:	200017a8 	.word	0x200017a8
 8009354:	200017a4 	.word	0x200017a4
 8009358:	2000331c 	.word	0x2000331c

0800935c <vcp_write>:

void vcp_write(uint8_t* Buf, uint16_t Len)
{
 800935c:	b538      	push	{r3, r4, r5, lr}
 800935e:	4604      	mov	r4, r0
 8009360:	460d      	mov	r5, r1
  while(CDC_Transmit_FS(Buf, Len) != HAL_OK);
 8009362:	4629      	mov	r1, r5
 8009364:	4620      	mov	r0, r4
 8009366:	f7ff ffcd 	bl	8009304 <CDC_Transmit_FS>
 800936a:	2800      	cmp	r0, #0
 800936c:	d1f9      	bne.n	8009362 <vcp_write+0x6>
}
 800936e:	bd38      	pop	{r3, r4, r5, pc}

08009370 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009370:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8009372:	4801      	ldr	r0, [pc, #4]	; (8009378 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8009374:	800b      	strh	r3, [r1, #0]
}
 8009376:	4770      	bx	lr
 8009378:	20000180 	.word	0x20000180

0800937c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800937c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800937e:	4801      	ldr	r0, [pc, #4]	; (8009384 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8009380:	800b      	strh	r3, [r1, #0]
}
 8009382:	4770      	bx	lr
 8009384:	20000194 	.word	0x20000194

08009388 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009388:	2300      	movs	r3, #0
 800938a:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800938c:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 800938e:	0f05      	lsrs	r5, r0, #28
 8009390:	b2ec      	uxtb	r4, r5
 8009392:	2d09      	cmp	r5, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8009394:	bf94      	ite	ls
 8009396:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009398:	3437      	addhi	r4, #55	; 0x37
 800939a:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 800939e:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 80093a2:	3301      	adds	r3, #1
 80093a4:	7066      	strb	r6, [r4, #1]
  for (idx = 0; idx < len; idx++)
 80093a6:	b2dc      	uxtb	r4, r3
 80093a8:	42a2      	cmp	r2, r4
    value = value << 4;
 80093aa:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 80093ae:	d8ee      	bhi.n	800938e <IntToUnicode+0x6>
  }
}
 80093b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080093b4 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80093b4:	231a      	movs	r3, #26
{
 80093b6:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80093b8:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80093ba:	4b09      	ldr	r3, [pc, #36]	; (80093e0 <USBD_FS_SerialStrDescriptor+0x2c>)
 80093bc:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80093be:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80093c0:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80093c2:	18c0      	adds	r0, r0, r3
 80093c4:	d00a      	beq.n	80093dc <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80093c6:	4b07      	ldr	r3, [pc, #28]	; (80093e4 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80093c8:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80093ca:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80093cc:	4906      	ldr	r1, [pc, #24]	; (80093e8 <USBD_FS_SerialStrDescriptor+0x34>)
 80093ce:	f7ff ffdb 	bl	8009388 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80093d2:	2204      	movs	r2, #4
 80093d4:	4905      	ldr	r1, [pc, #20]	; (80093ec <USBD_FS_SerialStrDescriptor+0x38>)
 80093d6:	4620      	mov	r0, r4
 80093d8:	f7ff ffd6 	bl	8009388 <IntToUnicode>
}
 80093dc:	4804      	ldr	r0, [pc, #16]	; (80093f0 <USBD_FS_SerialStrDescriptor+0x3c>)
 80093de:	bd10      	pop	{r4, pc}
 80093e0:	1ffff7e8 	.word	0x1ffff7e8
 80093e4:	1ffff7ec 	.word	0x1ffff7ec
 80093e8:	2000019a 	.word	0x2000019a
 80093ec:	200001aa 	.word	0x200001aa
 80093f0:	20000198 	.word	0x20000198

080093f4 <USBD_FS_ManufacturerStrDescriptor>:
{
 80093f4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80093f6:	4c04      	ldr	r4, [pc, #16]	; (8009408 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80093f8:	460a      	mov	r2, r1
 80093fa:	4804      	ldr	r0, [pc, #16]	; (800940c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80093fc:	4621      	mov	r1, r4
 80093fe:	f7ff feb8 	bl	8009172 <USBD_GetString>
}
 8009402:	4620      	mov	r0, r4
 8009404:	bd10      	pop	{r4, pc}
 8009406:	bf00      	nop
 8009408:	20003b1c 	.word	0x20003b1c
 800940c:	0800d425 	.word	0x0800d425

08009410 <USBD_FS_ProductStrDescriptor>:
{
 8009410:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009412:	4c04      	ldr	r4, [pc, #16]	; (8009424 <USBD_FS_ProductStrDescriptor+0x14>)
 8009414:	460a      	mov	r2, r1
 8009416:	4804      	ldr	r0, [pc, #16]	; (8009428 <USBD_FS_ProductStrDescriptor+0x18>)
 8009418:	4621      	mov	r1, r4
 800941a:	f7ff feaa 	bl	8009172 <USBD_GetString>
}
 800941e:	4620      	mov	r0, r4
 8009420:	bd10      	pop	{r4, pc}
 8009422:	bf00      	nop
 8009424:	20003b1c 	.word	0x20003b1c
 8009428:	0800d438 	.word	0x0800d438

0800942c <USBD_FS_ConfigStrDescriptor>:
{
 800942c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800942e:	4c04      	ldr	r4, [pc, #16]	; (8009440 <USBD_FS_ConfigStrDescriptor+0x14>)
 8009430:	460a      	mov	r2, r1
 8009432:	4804      	ldr	r0, [pc, #16]	; (8009444 <USBD_FS_ConfigStrDescriptor+0x18>)
 8009434:	4621      	mov	r1, r4
 8009436:	f7ff fe9c 	bl	8009172 <USBD_GetString>
}
 800943a:	4620      	mov	r0, r4
 800943c:	bd10      	pop	{r4, pc}
 800943e:	bf00      	nop
 8009440:	20003b1c 	.word	0x20003b1c
 8009444:	0800d40c 	.word	0x0800d40c

08009448 <USBD_FS_InterfaceStrDescriptor>:
{
 8009448:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800944a:	4c04      	ldr	r4, [pc, #16]	; (800945c <USBD_FS_InterfaceStrDescriptor+0x14>)
 800944c:	460a      	mov	r2, r1
 800944e:	4804      	ldr	r0, [pc, #16]	; (8009460 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8009450:	4621      	mov	r1, r4
 8009452:	f7ff fe8e 	bl	8009172 <USBD_GetString>
}
 8009456:	4620      	mov	r0, r4
 8009458:	bd10      	pop	{r4, pc}
 800945a:	bf00      	nop
 800945c:	20003b1c 	.word	0x20003b1c
 8009460:	0800d417 	.word	0x0800d417

08009464 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009464:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8009466:	4b0e      	ldr	r3, [pc, #56]	; (80094a0 <HAL_PCD_MspInit+0x3c>)
 8009468:	6802      	ldr	r2, [r0, #0]
 800946a:	429a      	cmp	r2, r3
 800946c:	d115      	bne.n	800949a <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800946e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8009472:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009474:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8009476:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800947a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800947c:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800947e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009480:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8009482:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009486:	9301      	str	r3, [sp, #4]
 8009488:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800948a:	f7fc fe03 	bl	8006094 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800948e:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009490:	b003      	add	sp, #12
 8009492:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009496:	f7fc be31 	b.w	80060fc <HAL_NVIC_EnableIRQ>
}
 800949a:	b003      	add	sp, #12
 800949c:	f85d fb04 	ldr.w	pc, [sp], #4
 80094a0:	40005c00 	.word	0x40005c00

080094a4 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80094a4:	f500 710c 	add.w	r1, r0, #560	; 0x230
 80094a8:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80094ac:	f7ff bb59 	b.w	8008b62 <USBD_LL_SetupStage>

080094b0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80094b0:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80094b4:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80094b8:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80094bc:	f7ff bb7e 	b.w	8008bbc <USBD_LL_DataOutStage>

080094c0 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80094c0:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80094c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094c6:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80094ca:	f7ff bbb1 	b.w	8008c30 <USBD_LL_DataInStage>

080094ce <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80094ce:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80094d2:	f7ff bc45 	b.w	8008d60 <USBD_LL_SOF>

080094d6 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80094d6:	6883      	ldr	r3, [r0, #8]
{ 
 80094d8:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80094da:	2b02      	cmp	r3, #2
{ 
 80094dc:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80094de:	d001      	beq.n	80094e4 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 80094e0:	f7f8 fe34 	bl	800214c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80094e4:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 80094e8:	2101      	movs	r1, #1
 80094ea:	f7ff fc23 	bl	8008d34 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80094ee:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 80094f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80094f6:	f7ff bbf6 	b.w	8008ce6 <USBD_LL_Reset>
	...

080094fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094fc:	b510      	push	{r4, lr}
 80094fe:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009500:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8009504:	f7ff fc19 	bl	8008d3a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009508:	69a3      	ldr	r3, [r4, #24]
 800950a:	b123      	cbz	r3, 8009516 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800950c:	4a02      	ldr	r2, [pc, #8]	; (8009518 <HAL_PCD_SuspendCallback+0x1c>)
 800950e:	6913      	ldr	r3, [r2, #16]
 8009510:	f043 0306 	orr.w	r3, r3, #6
 8009514:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009516:	bd10      	pop	{r4, pc}
 8009518:	e000ed00 	.word	0xe000ed00

0800951c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800951c:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8009520:	f7ff bc14 	b.w	8008d4c <USBD_LL_Resume>

08009524 <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009524:	2308      	movs	r3, #8
{
 8009526:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009528:	4a1d      	ldr	r2, [pc, #116]	; (80095a0 <USBD_LL_Init+0x7c>)
{
 800952a:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800952c:	481d      	ldr	r0, [pc, #116]	; (80095a4 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800952e:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009532:	2302      	movs	r3, #2
 8009534:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009536:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 8009538:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.pData = pdev;
 800953c:	f8c0 4268 	str.w	r4, [r0, #616]	; 0x268
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009540:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009544:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009546:	f7fd fbdf 	bl	8006d08 <HAL_PCD_Init>
 800954a:	b108      	cbz	r0, 8009550 <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 800954c:	f7f8 fdfe 	bl	800214c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009550:	2200      	movs	r2, #0
 8009552:	2318      	movs	r3, #24
 8009554:	4611      	mov	r1, r2
 8009556:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800955a:	f7fd ff84 	bl	8007466 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800955e:	2358      	movs	r3, #88	; 0x58
 8009560:	2200      	movs	r2, #0
 8009562:	2180      	movs	r1, #128	; 0x80
 8009564:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009568:	f7fd ff7d 	bl	8007466 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800956c:	23c0      	movs	r3, #192	; 0xc0
 800956e:	2200      	movs	r2, #0
 8009570:	2181      	movs	r1, #129	; 0x81
 8009572:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009576:	f7fd ff76 	bl	8007466 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800957a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800957e:	2200      	movs	r2, #0
 8009580:	2101      	movs	r1, #1
 8009582:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009586:	f7fd ff6e 	bl	8007466 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800958a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800958e:	2200      	movs	r2, #0
 8009590:	2182      	movs	r1, #130	; 0x82
 8009592:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009596:	f7fd ff66 	bl	8007466 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 800959a:	2000      	movs	r0, #0
 800959c:	bd10      	pop	{r4, pc}
 800959e:	bf00      	nop
 80095a0:	40005c00 	.word	0x40005c00
 80095a4:	20003d1c 	.word	0x20003d1c

080095a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80095a8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80095aa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80095ae:	f7fd fc20 	bl	8006df2 <HAL_PCD_Start>
 80095b2:	2803      	cmp	r0, #3
 80095b4:	bf96      	itet	ls
 80095b6:	4b02      	ldrls	r3, [pc, #8]	; (80095c0 <USBD_LL_Start+0x18>)
 80095b8:	2002      	movhi	r0, #2
 80095ba:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80095bc:	bd08      	pop	{r3, pc}
 80095be:	bf00      	nop
 80095c0:	0800d444 	.word	0x0800d444

080095c4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80095c4:	b510      	push	{r4, lr}
 80095c6:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80095c8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80095cc:	4613      	mov	r3, r2
 80095ce:	4622      	mov	r2, r4
 80095d0:	f7fd fc3a 	bl	8006e48 <HAL_PCD_EP_Open>
 80095d4:	2803      	cmp	r0, #3
 80095d6:	bf96      	itet	ls
 80095d8:	4b01      	ldrls	r3, [pc, #4]	; (80095e0 <USBD_LL_OpenEP+0x1c>)
 80095da:	2002      	movhi	r0, #2
 80095dc:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 80095de:	bd10      	pop	{r4, pc}
 80095e0:	0800d444 	.word	0x0800d444

080095e4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095e4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80095e6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80095ea:	f7fd fc60 	bl	8006eae <HAL_PCD_EP_Close>
 80095ee:	2803      	cmp	r0, #3
 80095f0:	bf96      	itet	ls
 80095f2:	4b02      	ldrls	r3, [pc, #8]	; (80095fc <USBD_LL_CloseEP+0x18>)
 80095f4:	2002      	movhi	r0, #2
 80095f6:	5c18      	ldrbls	r0, [r3, r0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 80095f8:	bd08      	pop	{r3, pc}
 80095fa:	bf00      	nop
 80095fc:	0800d444 	.word	0x0800d444

08009600 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009600:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009602:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009606:	f7fd fec7 	bl	8007398 <HAL_PCD_EP_SetStall>
 800960a:	2803      	cmp	r0, #3
 800960c:	bf96      	itet	ls
 800960e:	4b02      	ldrls	r3, [pc, #8]	; (8009618 <USBD_LL_StallEP+0x18>)
 8009610:	2002      	movhi	r0, #2
 8009612:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8009614:	bd08      	pop	{r3, pc}
 8009616:	bf00      	nop
 8009618:	0800d444 	.word	0x0800d444

0800961c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800961c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800961e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009622:	f7fd feed 	bl	8007400 <HAL_PCD_EP_ClrStall>
 8009626:	2803      	cmp	r0, #3
 8009628:	bf96      	itet	ls
 800962a:	4b02      	ldrls	r3, [pc, #8]	; (8009634 <USBD_LL_ClearStallEP+0x18>)
 800962c:	2002      	movhi	r0, #2
 800962e:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8009630:	bd08      	pop	{r3, pc}
 8009632:	bf00      	nop
 8009634:	0800d444 	.word	0x0800d444

08009638 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8009638:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800963a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800963e:	bf45      	ittet	mi
 8009640:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8009644:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009648:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800964c:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009650:	bf58      	it	pl
 8009652:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
  }
}
 8009656:	4770      	bx	lr

08009658 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009658:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800965a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800965e:	f7fd fbdf 	bl	8006e20 <HAL_PCD_SetAddress>
 8009662:	2803      	cmp	r0, #3
 8009664:	bf96      	itet	ls
 8009666:	4b02      	ldrls	r3, [pc, #8]	; (8009670 <USBD_LL_SetUSBAddress+0x18>)
 8009668:	2002      	movhi	r0, #2
 800966a:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 800966c:	bd08      	pop	{r3, pc}
 800966e:	bf00      	nop
 8009670:	0800d444 	.word	0x0800d444

08009674 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009674:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009676:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800967a:	f7fd fc60 	bl	8006f3e <HAL_PCD_EP_Transmit>
 800967e:	2803      	cmp	r0, #3
 8009680:	bf96      	itet	ls
 8009682:	4b02      	ldrls	r3, [pc, #8]	; (800968c <USBD_LL_Transmit+0x18>)
 8009684:	2002      	movhi	r0, #2
 8009686:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8009688:	bd08      	pop	{r3, pc}
 800968a:	bf00      	nop
 800968c:	0800d444 	.word	0x0800d444

08009690 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009690:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009692:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009696:	f7fd fc33 	bl	8006f00 <HAL_PCD_EP_Receive>
 800969a:	2803      	cmp	r0, #3
 800969c:	bf96      	itet	ls
 800969e:	4b02      	ldrls	r3, [pc, #8]	; (80096a8 <USBD_LL_PrepareReceive+0x18>)
 80096a0:	2002      	movhi	r0, #2
 80096a2:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 80096a4:	bd08      	pop	{r3, pc}
 80096a6:	bf00      	nop
 80096a8:	0800d444 	.word	0x0800d444

080096ac <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80096ac:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80096b0:	f7fd bc3e 	b.w	8006f30 <HAL_PCD_EP_GetRxCount>

080096b4 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 80096b4:	4800      	ldr	r0, [pc, #0]	; (80096b8 <USBD_static_malloc+0x4>)
 80096b6:	4770      	bx	lr
 80096b8:	200017ac 	.word	0x200017ac

080096bc <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 80096bc:	4770      	bx	lr

080096be <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80096be:	4770      	bx	lr

080096c0 <__cxa_pure_virtual>:
 80096c0:	b508      	push	{r3, lr}
 80096c2:	f000 f80d 	bl	80096e0 <_ZSt9terminatev>

080096c6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80096c6:	b508      	push	{r3, lr}
 80096c8:	4780      	blx	r0
 80096ca:	f000 f977 	bl	80099bc <abort>
	...

080096d0 <_ZSt13get_terminatev>:
 80096d0:	4b02      	ldr	r3, [pc, #8]	; (80096dc <_ZSt13get_terminatev+0xc>)
 80096d2:	6818      	ldr	r0, [r3, #0]
 80096d4:	f3bf 8f5b 	dmb	ish
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	200001b4 	.word	0x200001b4

080096e0 <_ZSt9terminatev>:
 80096e0:	b508      	push	{r3, lr}
 80096e2:	f7ff fff5 	bl	80096d0 <_ZSt13get_terminatev>
 80096e6:	f7ff ffee 	bl	80096c6 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080096ec <fmod>:
 80096ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f0:	b08b      	sub	sp, #44	; 0x2c
 80096f2:	461f      	mov	r7, r3
 80096f4:	4604      	mov	r4, r0
 80096f6:	460d      	mov	r5, r1
 80096f8:	4616      	mov	r6, r2
 80096fa:	f000 f853 	bl	80097a4 <__ieee754_fmod>
 80096fe:	4b27      	ldr	r3, [pc, #156]	; (800979c <fmod+0xb0>)
 8009700:	4680      	mov	r8, r0
 8009702:	f993 a000 	ldrsb.w	sl, [r3]
 8009706:	4689      	mov	r9, r1
 8009708:	f1ba 3fff 	cmp.w	sl, #4294967295
 800970c:	d030      	beq.n	8009770 <fmod+0x84>
 800970e:	4632      	mov	r2, r6
 8009710:	463b      	mov	r3, r7
 8009712:	4630      	mov	r0, r6
 8009714:	4639      	mov	r1, r7
 8009716:	f7f7 f979 	bl	8000a0c <__aeabi_dcmpun>
 800971a:	bb48      	cbnz	r0, 8009770 <fmod+0x84>
 800971c:	4622      	mov	r2, r4
 800971e:	462b      	mov	r3, r5
 8009720:	4620      	mov	r0, r4
 8009722:	4629      	mov	r1, r5
 8009724:	f7f7 f972 	bl	8000a0c <__aeabi_dcmpun>
 8009728:	4683      	mov	fp, r0
 800972a:	bb08      	cbnz	r0, 8009770 <fmod+0x84>
 800972c:	2200      	movs	r2, #0
 800972e:	2300      	movs	r3, #0
 8009730:	4630      	mov	r0, r6
 8009732:	4639      	mov	r1, r7
 8009734:	f7f7 f938 	bl	80009a8 <__aeabi_dcmpeq>
 8009738:	b1d0      	cbz	r0, 8009770 <fmod+0x84>
 800973a:	2301      	movs	r3, #1
 800973c:	9300      	str	r3, [sp, #0]
 800973e:	4b18      	ldr	r3, [pc, #96]	; (80097a0 <fmod+0xb4>)
 8009740:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009744:	9301      	str	r3, [sp, #4]
 8009746:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800974a:	f8cd b020 	str.w	fp, [sp, #32]
 800974e:	f1ba 0f00 	cmp.w	sl, #0
 8009752:	d112      	bne.n	800977a <fmod+0x8e>
 8009754:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009758:	4668      	mov	r0, sp
 800975a:	f000 f92d 	bl	80099b8 <matherr>
 800975e:	b1b8      	cbz	r0, 8009790 <fmod+0xa4>
 8009760:	9b08      	ldr	r3, [sp, #32]
 8009762:	b11b      	cbz	r3, 800976c <fmod+0x80>
 8009764:	f000 f938 	bl	80099d8 <__errno>
 8009768:	9b08      	ldr	r3, [sp, #32]
 800976a:	6003      	str	r3, [r0, #0]
 800976c:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8009770:	4640      	mov	r0, r8
 8009772:	4649      	mov	r1, r9
 8009774:	b00b      	add	sp, #44	; 0x2c
 8009776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800977a:	2200      	movs	r2, #0
 800977c:	2300      	movs	r3, #0
 800977e:	4610      	mov	r0, r2
 8009780:	4619      	mov	r1, r3
 8009782:	f7f6 ffd3 	bl	800072c <__aeabi_ddiv>
 8009786:	f1ba 0f02 	cmp.w	sl, #2
 800978a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800978e:	d1e3      	bne.n	8009758 <fmod+0x6c>
 8009790:	f000 f922 	bl	80099d8 <__errno>
 8009794:	2321      	movs	r3, #33	; 0x21
 8009796:	6003      	str	r3, [r0, #0]
 8009798:	e7e2      	b.n	8009760 <fmod+0x74>
 800979a:	bf00      	nop
 800979c:	200001b8 	.word	0x200001b8
 80097a0:	0800d448 	.word	0x0800d448

080097a4 <__ieee754_fmod>:
 80097a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a8:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80097ac:	4682      	mov	sl, r0
 80097ae:	ea54 0002 	orrs.w	r0, r4, r2
 80097b2:	461e      	mov	r6, r3
 80097b4:	4694      	mov	ip, r2
 80097b6:	4696      	mov	lr, r2
 80097b8:	d00c      	beq.n	80097d4 <__ieee754_fmod+0x30>
 80097ba:	4d78      	ldr	r5, [pc, #480]	; (800999c <__ieee754_fmod+0x1f8>)
 80097bc:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80097c0:	45a8      	cmp	r8, r5
 80097c2:	4689      	mov	r9, r1
 80097c4:	dc06      	bgt.n	80097d4 <__ieee754_fmod+0x30>
 80097c6:	4255      	negs	r5, r2
 80097c8:	4315      	orrs	r5, r2
 80097ca:	4f75      	ldr	r7, [pc, #468]	; (80099a0 <__ieee754_fmod+0x1fc>)
 80097cc:	ea44 75d5 	orr.w	r5, r4, r5, lsr #31
 80097d0:	42bd      	cmp	r5, r7
 80097d2:	d908      	bls.n	80097e6 <__ieee754_fmod+0x42>
 80097d4:	4650      	mov	r0, sl
 80097d6:	f7f6 fe7f 	bl	80004d8 <__aeabi_dmul>
 80097da:	4602      	mov	r2, r0
 80097dc:	460b      	mov	r3, r1
 80097de:	f7f6 ffa5 	bl	800072c <__aeabi_ddiv>
 80097e2:	4682      	mov	sl, r0
 80097e4:	e00f      	b.n	8009806 <__ieee754_fmod+0x62>
 80097e6:	45a0      	cmp	r8, r4
 80097e8:	4652      	mov	r2, sl
 80097ea:	4657      	mov	r7, sl
 80097ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80097f0:	dc0c      	bgt.n	800980c <__ieee754_fmod+0x68>
 80097f2:	db08      	blt.n	8009806 <__ieee754_fmod+0x62>
 80097f4:	45e2      	cmp	sl, ip
 80097f6:	d306      	bcc.n	8009806 <__ieee754_fmod+0x62>
 80097f8:	d108      	bne.n	800980c <__ieee754_fmod+0x68>
 80097fa:	496a      	ldr	r1, [pc, #424]	; (80099a4 <__ieee754_fmod+0x200>)
 80097fc:	0fed      	lsrs	r5, r5, #31
 80097fe:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8009802:	e9d5 a100 	ldrd	sl, r1, [r5]
 8009806:	4650      	mov	r0, sl
 8009808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800980c:	4b66      	ldr	r3, [pc, #408]	; (80099a8 <__ieee754_fmod+0x204>)
 800980e:	4598      	cmp	r8, r3
 8009810:	dc48      	bgt.n	80098a4 <__ieee754_fmod+0x100>
 8009812:	f1b8 0f00 	cmp.w	r8, #0
 8009816:	d13c      	bne.n	8009892 <__ieee754_fmod+0xee>
 8009818:	4611      	mov	r1, r2
 800981a:	4864      	ldr	r0, [pc, #400]	; (80099ac <__ieee754_fmod+0x208>)
 800981c:	2900      	cmp	r1, #0
 800981e:	dc35      	bgt.n	800988c <__ieee754_fmod+0xe8>
 8009820:	429c      	cmp	r4, r3
 8009822:	dc4f      	bgt.n	80098c4 <__ieee754_fmod+0x120>
 8009824:	2c00      	cmp	r4, #0
 8009826:	d145      	bne.n	80098b4 <__ieee754_fmod+0x110>
 8009828:	4661      	mov	r1, ip
 800982a:	4b60      	ldr	r3, [pc, #384]	; (80099ac <__ieee754_fmod+0x208>)
 800982c:	2900      	cmp	r1, #0
 800982e:	dc3e      	bgt.n	80098ae <__ieee754_fmod+0x10a>
 8009830:	495f      	ldr	r1, [pc, #380]	; (80099b0 <__ieee754_fmod+0x20c>)
 8009832:	4288      	cmp	r0, r1
 8009834:	db4a      	blt.n	80098cc <__ieee754_fmod+0x128>
 8009836:	f3c9 0113 	ubfx	r1, r9, #0, #20
 800983a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800983e:	4a5c      	ldr	r2, [pc, #368]	; (80099b0 <__ieee754_fmod+0x20c>)
 8009840:	4293      	cmp	r3, r2
 8009842:	db57      	blt.n	80098f4 <__ieee754_fmod+0x150>
 8009844:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8009848:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800984c:	1ac0      	subs	r0, r0, r3
 800984e:	1b8a      	subs	r2, r1, r6
 8009850:	eba7 040e 	sub.w	r4, r7, lr
 8009854:	2800      	cmp	r0, #0
 8009856:	d163      	bne.n	8009920 <__ieee754_fmod+0x17c>
 8009858:	4577      	cmp	r7, lr
 800985a:	bf38      	it	cc
 800985c:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8009860:	2a00      	cmp	r2, #0
 8009862:	bfbc      	itt	lt
 8009864:	463c      	movlt	r4, r7
 8009866:	460a      	movlt	r2, r1
 8009868:	ea52 0104 	orrs.w	r1, r2, r4
 800986c:	d0c5      	beq.n	80097fa <__ieee754_fmod+0x56>
 800986e:	494e      	ldr	r1, [pc, #312]	; (80099a8 <__ieee754_fmod+0x204>)
 8009870:	428a      	cmp	r2, r1
 8009872:	dd6a      	ble.n	800994a <__ieee754_fmod+0x1a6>
 8009874:	494e      	ldr	r1, [pc, #312]	; (80099b0 <__ieee754_fmod+0x20c>)
 8009876:	428b      	cmp	r3, r1
 8009878:	db6d      	blt.n	8009956 <__ieee754_fmod+0x1b2>
 800987a:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 800987e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8009882:	4315      	orrs	r5, r2
 8009884:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
 8009888:	4620      	mov	r0, r4
 800988a:	e7aa      	b.n	80097e2 <__ieee754_fmod+0x3e>
 800988c:	3801      	subs	r0, #1
 800988e:	0049      	lsls	r1, r1, #1
 8009890:	e7c4      	b.n	800981c <__ieee754_fmod+0x78>
 8009892:	4847      	ldr	r0, [pc, #284]	; (80099b0 <__ieee754_fmod+0x20c>)
 8009894:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8009898:	0049      	lsls	r1, r1, #1
 800989a:	2900      	cmp	r1, #0
 800989c:	f100 30ff 	add.w	r0, r0, #4294967295
 80098a0:	dcfa      	bgt.n	8009898 <__ieee754_fmod+0xf4>
 80098a2:	e7bd      	b.n	8009820 <__ieee754_fmod+0x7c>
 80098a4:	ea4f 5028 	mov.w	r0, r8, asr #20
 80098a8:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80098ac:	e7b8      	b.n	8009820 <__ieee754_fmod+0x7c>
 80098ae:	3b01      	subs	r3, #1
 80098b0:	0049      	lsls	r1, r1, #1
 80098b2:	e7bb      	b.n	800982c <__ieee754_fmod+0x88>
 80098b4:	4b3e      	ldr	r3, [pc, #248]	; (80099b0 <__ieee754_fmod+0x20c>)
 80098b6:	02e1      	lsls	r1, r4, #11
 80098b8:	0049      	lsls	r1, r1, #1
 80098ba:	2900      	cmp	r1, #0
 80098bc:	f103 33ff 	add.w	r3, r3, #4294967295
 80098c0:	dcfa      	bgt.n	80098b8 <__ieee754_fmod+0x114>
 80098c2:	e7b5      	b.n	8009830 <__ieee754_fmod+0x8c>
 80098c4:	1523      	asrs	r3, r4, #20
 80098c6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80098ca:	e7b1      	b.n	8009830 <__ieee754_fmod+0x8c>
 80098cc:	1a0f      	subs	r7, r1, r0
 80098ce:	2f1f      	cmp	r7, #31
 80098d0:	dc0a      	bgt.n	80098e8 <__ieee754_fmod+0x144>
 80098d2:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 80098d6:	fa08 f807 	lsl.w	r8, r8, r7
 80098da:	fa22 f101 	lsr.w	r1, r2, r1
 80098de:	ea41 0108 	orr.w	r1, r1, r8
 80098e2:	fa02 f707 	lsl.w	r7, r2, r7
 80098e6:	e7aa      	b.n	800983e <__ieee754_fmod+0x9a>
 80098e8:	4932      	ldr	r1, [pc, #200]	; (80099b4 <__ieee754_fmod+0x210>)
 80098ea:	2700      	movs	r7, #0
 80098ec:	1a09      	subs	r1, r1, r0
 80098ee:	fa02 f101 	lsl.w	r1, r2, r1
 80098f2:	e7a4      	b.n	800983e <__ieee754_fmod+0x9a>
 80098f4:	eba2 0e03 	sub.w	lr, r2, r3
 80098f8:	f1be 0f1f 	cmp.w	lr, #31
 80098fc:	dc09      	bgt.n	8009912 <__ieee754_fmod+0x16e>
 80098fe:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8009902:	fa04 f40e 	lsl.w	r4, r4, lr
 8009906:	fa2c f606 	lsr.w	r6, ip, r6
 800990a:	4326      	orrs	r6, r4
 800990c:	fa0c fe0e 	lsl.w	lr, ip, lr
 8009910:	e79c      	b.n	800984c <__ieee754_fmod+0xa8>
 8009912:	4e28      	ldr	r6, [pc, #160]	; (80099b4 <__ieee754_fmod+0x210>)
 8009914:	f04f 0e00 	mov.w	lr, #0
 8009918:	1af6      	subs	r6, r6, r3
 800991a:	fa0c f606 	lsl.w	r6, ip, r6
 800991e:	e795      	b.n	800984c <__ieee754_fmod+0xa8>
 8009920:	4577      	cmp	r7, lr
 8009922:	bf38      	it	cc
 8009924:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8009928:	2a00      	cmp	r2, #0
 800992a:	da05      	bge.n	8009938 <__ieee754_fmod+0x194>
 800992c:	0ffa      	lsrs	r2, r7, #31
 800992e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009932:	007f      	lsls	r7, r7, #1
 8009934:	3801      	subs	r0, #1
 8009936:	e78a      	b.n	800984e <__ieee754_fmod+0xaa>
 8009938:	ea52 0104 	orrs.w	r1, r2, r4
 800993c:	f43f af5d 	beq.w	80097fa <__ieee754_fmod+0x56>
 8009940:	0fe1      	lsrs	r1, r4, #31
 8009942:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8009946:	0067      	lsls	r7, r4, #1
 8009948:	e7f4      	b.n	8009934 <__ieee754_fmod+0x190>
 800994a:	0fe0      	lsrs	r0, r4, #31
 800994c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8009950:	0064      	lsls	r4, r4, #1
 8009952:	3b01      	subs	r3, #1
 8009954:	e78c      	b.n	8009870 <__ieee754_fmod+0xcc>
 8009956:	1ac9      	subs	r1, r1, r3
 8009958:	2914      	cmp	r1, #20
 800995a:	dc0a      	bgt.n	8009972 <__ieee754_fmod+0x1ce>
 800995c:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8009960:	fa02 f303 	lsl.w	r3, r2, r3
 8009964:	40cc      	lsrs	r4, r1
 8009966:	4323      	orrs	r3, r4
 8009968:	410a      	asrs	r2, r1
 800996a:	ea42 0105 	orr.w	r1, r2, r5
 800996e:	4618      	mov	r0, r3
 8009970:	e737      	b.n	80097e2 <__ieee754_fmod+0x3e>
 8009972:	291f      	cmp	r1, #31
 8009974:	dc07      	bgt.n	8009986 <__ieee754_fmod+0x1e2>
 8009976:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800997a:	40cc      	lsrs	r4, r1
 800997c:	fa02 f303 	lsl.w	r3, r2, r3
 8009980:	4323      	orrs	r3, r4
 8009982:	462a      	mov	r2, r5
 8009984:	e7f1      	b.n	800996a <__ieee754_fmod+0x1c6>
 8009986:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800998a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800998e:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8009992:	33e2      	adds	r3, #226	; 0xe2
 8009994:	fa42 f303 	asr.w	r3, r2, r3
 8009998:	e7f3      	b.n	8009982 <__ieee754_fmod+0x1de>
 800999a:	bf00      	nop
 800999c:	7fefffff 	.word	0x7fefffff
 80099a0:	7ff00000 	.word	0x7ff00000
 80099a4:	0800d450 	.word	0x0800d450
 80099a8:	000fffff 	.word	0x000fffff
 80099ac:	fffffbed 	.word	0xfffffbed
 80099b0:	fffffc02 	.word	0xfffffc02
 80099b4:	fffffbe2 	.word	0xfffffbe2

080099b8 <matherr>:
 80099b8:	2000      	movs	r0, #0
 80099ba:	4770      	bx	lr

080099bc <abort>:
 80099bc:	b508      	push	{r3, lr}
 80099be:	2006      	movs	r0, #6
 80099c0:	f000 f886 	bl	8009ad0 <raise>
 80099c4:	2001      	movs	r0, #1
 80099c6:	f7f8 fe8b 	bl	80026e0 <_exit>

080099ca <atof>:
 80099ca:	2100      	movs	r1, #0
 80099cc:	f000 bf04 	b.w	800a7d8 <strtod>

080099d0 <atoi>:
 80099d0:	220a      	movs	r2, #10
 80099d2:	2100      	movs	r1, #0
 80099d4:	f000 bfa0 	b.w	800a918 <strtol>

080099d8 <__errno>:
 80099d8:	4b01      	ldr	r3, [pc, #4]	; (80099e0 <__errno+0x8>)
 80099da:	6818      	ldr	r0, [r3, #0]
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	200001bc 	.word	0x200001bc

080099e4 <__libc_init_array>:
 80099e4:	b570      	push	{r4, r5, r6, lr}
 80099e6:	2500      	movs	r5, #0
 80099e8:	4e0c      	ldr	r6, [pc, #48]	; (8009a1c <__libc_init_array+0x38>)
 80099ea:	4c0d      	ldr	r4, [pc, #52]	; (8009a20 <__libc_init_array+0x3c>)
 80099ec:	1ba4      	subs	r4, r4, r6
 80099ee:	10a4      	asrs	r4, r4, #2
 80099f0:	42a5      	cmp	r5, r4
 80099f2:	d109      	bne.n	8009a08 <__libc_init_array+0x24>
 80099f4:	f002 fc0e 	bl	800c214 <_init>
 80099f8:	2500      	movs	r5, #0
 80099fa:	4e0a      	ldr	r6, [pc, #40]	; (8009a24 <__libc_init_array+0x40>)
 80099fc:	4c0a      	ldr	r4, [pc, #40]	; (8009a28 <__libc_init_array+0x44>)
 80099fe:	1ba4      	subs	r4, r4, r6
 8009a00:	10a4      	asrs	r4, r4, #2
 8009a02:	42a5      	cmp	r5, r4
 8009a04:	d105      	bne.n	8009a12 <__libc_init_array+0x2e>
 8009a06:	bd70      	pop	{r4, r5, r6, pc}
 8009a08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a0c:	4798      	blx	r3
 8009a0e:	3501      	adds	r5, #1
 8009a10:	e7ee      	b.n	80099f0 <__libc_init_array+0xc>
 8009a12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a16:	4798      	blx	r3
 8009a18:	3501      	adds	r5, #1
 8009a1a:	e7f2      	b.n	8009a02 <__libc_init_array+0x1e>
 8009a1c:	0800d74c 	.word	0x0800d74c
 8009a20:	0800d74c 	.word	0x0800d74c
 8009a24:	0800d74c 	.word	0x0800d74c
 8009a28:	0800d754 	.word	0x0800d754

08009a2c <memcmp>:
 8009a2c:	b530      	push	{r4, r5, lr}
 8009a2e:	2400      	movs	r4, #0
 8009a30:	42a2      	cmp	r2, r4
 8009a32:	d101      	bne.n	8009a38 <memcmp+0xc>
 8009a34:	2000      	movs	r0, #0
 8009a36:	e007      	b.n	8009a48 <memcmp+0x1c>
 8009a38:	5d03      	ldrb	r3, [r0, r4]
 8009a3a:	3401      	adds	r4, #1
 8009a3c:	190d      	adds	r5, r1, r4
 8009a3e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8009a42:	42ab      	cmp	r3, r5
 8009a44:	d0f4      	beq.n	8009a30 <memcmp+0x4>
 8009a46:	1b58      	subs	r0, r3, r5
 8009a48:	bd30      	pop	{r4, r5, pc}

08009a4a <memcpy>:
 8009a4a:	b510      	push	{r4, lr}
 8009a4c:	1e43      	subs	r3, r0, #1
 8009a4e:	440a      	add	r2, r1
 8009a50:	4291      	cmp	r1, r2
 8009a52:	d100      	bne.n	8009a56 <memcpy+0xc>
 8009a54:	bd10      	pop	{r4, pc}
 8009a56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a5e:	e7f7      	b.n	8009a50 <memcpy+0x6>

08009a60 <memset>:
 8009a60:	4603      	mov	r3, r0
 8009a62:	4402      	add	r2, r0
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d100      	bne.n	8009a6a <memset+0xa>
 8009a68:	4770      	bx	lr
 8009a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a6e:	e7f9      	b.n	8009a64 <memset+0x4>

08009a70 <realloc>:
 8009a70:	4b02      	ldr	r3, [pc, #8]	; (8009a7c <realloc+0xc>)
 8009a72:	460a      	mov	r2, r1
 8009a74:	4601      	mov	r1, r0
 8009a76:	6818      	ldr	r0, [r3, #0]
 8009a78:	f001 bf12 	b.w	800b8a0 <_realloc_r>
 8009a7c:	200001bc 	.word	0x200001bc

08009a80 <_raise_r>:
 8009a80:	291f      	cmp	r1, #31
 8009a82:	b538      	push	{r3, r4, r5, lr}
 8009a84:	4604      	mov	r4, r0
 8009a86:	460d      	mov	r5, r1
 8009a88:	d904      	bls.n	8009a94 <_raise_r+0x14>
 8009a8a:	2316      	movs	r3, #22
 8009a8c:	6003      	str	r3, [r0, #0]
 8009a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a92:	bd38      	pop	{r3, r4, r5, pc}
 8009a94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009a96:	b112      	cbz	r2, 8009a9e <_raise_r+0x1e>
 8009a98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a9c:	b94b      	cbnz	r3, 8009ab2 <_raise_r+0x32>
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	f000 f830 	bl	8009b04 <_getpid_r>
 8009aa4:	462a      	mov	r2, r5
 8009aa6:	4601      	mov	r1, r0
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009aae:	f000 b817 	b.w	8009ae0 <_kill_r>
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d00a      	beq.n	8009acc <_raise_r+0x4c>
 8009ab6:	1c59      	adds	r1, r3, #1
 8009ab8:	d103      	bne.n	8009ac2 <_raise_r+0x42>
 8009aba:	2316      	movs	r3, #22
 8009abc:	6003      	str	r3, [r0, #0]
 8009abe:	2001      	movs	r0, #1
 8009ac0:	e7e7      	b.n	8009a92 <_raise_r+0x12>
 8009ac2:	2400      	movs	r4, #0
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009aca:	4798      	blx	r3
 8009acc:	2000      	movs	r0, #0
 8009ace:	e7e0      	b.n	8009a92 <_raise_r+0x12>

08009ad0 <raise>:
 8009ad0:	4b02      	ldr	r3, [pc, #8]	; (8009adc <raise+0xc>)
 8009ad2:	4601      	mov	r1, r0
 8009ad4:	6818      	ldr	r0, [r3, #0]
 8009ad6:	f7ff bfd3 	b.w	8009a80 <_raise_r>
 8009ada:	bf00      	nop
 8009adc:	200001bc 	.word	0x200001bc

08009ae0 <_kill_r>:
 8009ae0:	b538      	push	{r3, r4, r5, lr}
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	4c06      	ldr	r4, [pc, #24]	; (8009b00 <_kill_r+0x20>)
 8009ae6:	4605      	mov	r5, r0
 8009ae8:	4608      	mov	r0, r1
 8009aea:	4611      	mov	r1, r2
 8009aec:	6023      	str	r3, [r4, #0]
 8009aee:	f7f8 fdef 	bl	80026d0 <_kill>
 8009af2:	1c43      	adds	r3, r0, #1
 8009af4:	d102      	bne.n	8009afc <_kill_r+0x1c>
 8009af6:	6823      	ldr	r3, [r4, #0]
 8009af8:	b103      	cbz	r3, 8009afc <_kill_r+0x1c>
 8009afa:	602b      	str	r3, [r5, #0]
 8009afc:	bd38      	pop	{r3, r4, r5, pc}
 8009afe:	bf00      	nop
 8009b00:	20003f88 	.word	0x20003f88

08009b04 <_getpid_r>:
 8009b04:	f7f8 bde2 	b.w	80026cc <_getpid>

08009b08 <siscanf>:
 8009b08:	b40e      	push	{r1, r2, r3}
 8009b0a:	f44f 7201 	mov.w	r2, #516	; 0x204
 8009b0e:	b530      	push	{r4, r5, lr}
 8009b10:	b09c      	sub	sp, #112	; 0x70
 8009b12:	ac1f      	add	r4, sp, #124	; 0x7c
 8009b14:	f854 5b04 	ldr.w	r5, [r4], #4
 8009b18:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009b1c:	9002      	str	r0, [sp, #8]
 8009b1e:	9006      	str	r0, [sp, #24]
 8009b20:	f7f6 fb16 	bl	8000150 <strlen>
 8009b24:	4b0b      	ldr	r3, [pc, #44]	; (8009b54 <siscanf+0x4c>)
 8009b26:	9003      	str	r0, [sp, #12]
 8009b28:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b2e:	9314      	str	r3, [sp, #80]	; 0x50
 8009b30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b34:	9007      	str	r0, [sp, #28]
 8009b36:	4808      	ldr	r0, [pc, #32]	; (8009b58 <siscanf+0x50>)
 8009b38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009b3c:	462a      	mov	r2, r5
 8009b3e:	4623      	mov	r3, r4
 8009b40:	a902      	add	r1, sp, #8
 8009b42:	6800      	ldr	r0, [r0, #0]
 8009b44:	9401      	str	r4, [sp, #4]
 8009b46:	f001 ff2b 	bl	800b9a0 <__ssvfiscanf_r>
 8009b4a:	b01c      	add	sp, #112	; 0x70
 8009b4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b50:	b003      	add	sp, #12
 8009b52:	4770      	bx	lr
 8009b54:	08009b5d 	.word	0x08009b5d
 8009b58:	200001bc 	.word	0x200001bc

08009b5c <__seofread>:
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	4770      	bx	lr

08009b60 <strstr>:
 8009b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b62:	7803      	ldrb	r3, [r0, #0]
 8009b64:	b17b      	cbz	r3, 8009b86 <strstr+0x26>
 8009b66:	4604      	mov	r4, r0
 8009b68:	7823      	ldrb	r3, [r4, #0]
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	1c66      	adds	r6, r4, #1
 8009b6e:	b17b      	cbz	r3, 8009b90 <strstr+0x30>
 8009b70:	1e4a      	subs	r2, r1, #1
 8009b72:	1e63      	subs	r3, r4, #1
 8009b74:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8009b78:	b14d      	cbz	r5, 8009b8e <strstr+0x2e>
 8009b7a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8009b7e:	4634      	mov	r4, r6
 8009b80:	42af      	cmp	r7, r5
 8009b82:	d0f7      	beq.n	8009b74 <strstr+0x14>
 8009b84:	e7f0      	b.n	8009b68 <strstr+0x8>
 8009b86:	780b      	ldrb	r3, [r1, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	bf18      	it	ne
 8009b8c:	2000      	movne	r0, #0
 8009b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b90:	4618      	mov	r0, r3
 8009b92:	e7fc      	b.n	8009b8e <strstr+0x2e>

08009b94 <sulp>:
 8009b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b98:	460f      	mov	r7, r1
 8009b9a:	4690      	mov	r8, r2
 8009b9c:	f001 fcea 	bl	800b574 <__ulp>
 8009ba0:	4604      	mov	r4, r0
 8009ba2:	460d      	mov	r5, r1
 8009ba4:	f1b8 0f00 	cmp.w	r8, #0
 8009ba8:	d011      	beq.n	8009bce <sulp+0x3a>
 8009baa:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009bae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	dd0b      	ble.n	8009bce <sulp+0x3a>
 8009bb6:	2400      	movs	r4, #0
 8009bb8:	051b      	lsls	r3, r3, #20
 8009bba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009bbe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009bc2:	4622      	mov	r2, r4
 8009bc4:	462b      	mov	r3, r5
 8009bc6:	f7f6 fc87 	bl	80004d8 <__aeabi_dmul>
 8009bca:	4604      	mov	r4, r0
 8009bcc:	460d      	mov	r5, r1
 8009bce:	4620      	mov	r0, r4
 8009bd0:	4629      	mov	r1, r5
 8009bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009bd8 <_strtod_l>:
 8009bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bdc:	461f      	mov	r7, r3
 8009bde:	2300      	movs	r3, #0
 8009be0:	b0a1      	sub	sp, #132	; 0x84
 8009be2:	4683      	mov	fp, r0
 8009be4:	4638      	mov	r0, r7
 8009be6:	460e      	mov	r6, r1
 8009be8:	9217      	str	r2, [sp, #92]	; 0x5c
 8009bea:	931c      	str	r3, [sp, #112]	; 0x70
 8009bec:	f001 f9e4 	bl	800afb8 <__localeconv_l>
 8009bf0:	4680      	mov	r8, r0
 8009bf2:	6800      	ldr	r0, [r0, #0]
 8009bf4:	f7f6 faac 	bl	8000150 <strlen>
 8009bf8:	f04f 0900 	mov.w	r9, #0
 8009bfc:	4604      	mov	r4, r0
 8009bfe:	f04f 0a00 	mov.w	sl, #0
 8009c02:	961b      	str	r6, [sp, #108]	; 0x6c
 8009c04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c06:	781a      	ldrb	r2, [r3, #0]
 8009c08:	2a0d      	cmp	r2, #13
 8009c0a:	d832      	bhi.n	8009c72 <_strtod_l+0x9a>
 8009c0c:	2a09      	cmp	r2, #9
 8009c0e:	d236      	bcs.n	8009c7e <_strtod_l+0xa6>
 8009c10:	2a00      	cmp	r2, #0
 8009c12:	d03e      	beq.n	8009c92 <_strtod_l+0xba>
 8009c14:	2300      	movs	r3, #0
 8009c16:	930d      	str	r3, [sp, #52]	; 0x34
 8009c18:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009c1a:	782b      	ldrb	r3, [r5, #0]
 8009c1c:	2b30      	cmp	r3, #48	; 0x30
 8009c1e:	f040 80ac 	bne.w	8009d7a <_strtod_l+0x1a2>
 8009c22:	786b      	ldrb	r3, [r5, #1]
 8009c24:	2b58      	cmp	r3, #88	; 0x58
 8009c26:	d001      	beq.n	8009c2c <_strtod_l+0x54>
 8009c28:	2b78      	cmp	r3, #120	; 0x78
 8009c2a:	d167      	bne.n	8009cfc <_strtod_l+0x124>
 8009c2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c2e:	9702      	str	r7, [sp, #8]
 8009c30:	9301      	str	r3, [sp, #4]
 8009c32:	ab1c      	add	r3, sp, #112	; 0x70
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	4a89      	ldr	r2, [pc, #548]	; (8009e5c <_strtod_l+0x284>)
 8009c38:	ab1d      	add	r3, sp, #116	; 0x74
 8009c3a:	a91b      	add	r1, sp, #108	; 0x6c
 8009c3c:	4658      	mov	r0, fp
 8009c3e:	f000 fed1 	bl	800a9e4 <__gethex>
 8009c42:	f010 0407 	ands.w	r4, r0, #7
 8009c46:	4606      	mov	r6, r0
 8009c48:	d005      	beq.n	8009c56 <_strtod_l+0x7e>
 8009c4a:	2c06      	cmp	r4, #6
 8009c4c:	d12b      	bne.n	8009ca6 <_strtod_l+0xce>
 8009c4e:	2300      	movs	r3, #0
 8009c50:	3501      	adds	r5, #1
 8009c52:	951b      	str	r5, [sp, #108]	; 0x6c
 8009c54:	930d      	str	r3, [sp, #52]	; 0x34
 8009c56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f040 85a6 	bne.w	800a7aa <_strtod_l+0xbd2>
 8009c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c60:	b1e3      	cbz	r3, 8009c9c <_strtod_l+0xc4>
 8009c62:	464a      	mov	r2, r9
 8009c64:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8009c68:	4610      	mov	r0, r2
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	b021      	add	sp, #132	; 0x84
 8009c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c72:	2a2b      	cmp	r2, #43	; 0x2b
 8009c74:	d015      	beq.n	8009ca2 <_strtod_l+0xca>
 8009c76:	2a2d      	cmp	r2, #45	; 0x2d
 8009c78:	d004      	beq.n	8009c84 <_strtod_l+0xac>
 8009c7a:	2a20      	cmp	r2, #32
 8009c7c:	d1ca      	bne.n	8009c14 <_strtod_l+0x3c>
 8009c7e:	3301      	adds	r3, #1
 8009c80:	931b      	str	r3, [sp, #108]	; 0x6c
 8009c82:	e7bf      	b.n	8009c04 <_strtod_l+0x2c>
 8009c84:	2201      	movs	r2, #1
 8009c86:	920d      	str	r2, [sp, #52]	; 0x34
 8009c88:	1c5a      	adds	r2, r3, #1
 8009c8a:	921b      	str	r2, [sp, #108]	; 0x6c
 8009c8c:	785b      	ldrb	r3, [r3, #1]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1c2      	bne.n	8009c18 <_strtod_l+0x40>
 8009c92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c94:	961b      	str	r6, [sp, #108]	; 0x6c
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	f040 8585 	bne.w	800a7a6 <_strtod_l+0xbce>
 8009c9c:	464a      	mov	r2, r9
 8009c9e:	4653      	mov	r3, sl
 8009ca0:	e7e2      	b.n	8009c68 <_strtod_l+0x90>
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	e7ef      	b.n	8009c86 <_strtod_l+0xae>
 8009ca6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009ca8:	b13a      	cbz	r2, 8009cba <_strtod_l+0xe2>
 8009caa:	2135      	movs	r1, #53	; 0x35
 8009cac:	a81e      	add	r0, sp, #120	; 0x78
 8009cae:	f001 fd54 	bl	800b75a <__copybits>
 8009cb2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009cb4:	4658      	mov	r0, fp
 8009cb6:	f001 f9c7 	bl	800b048 <_Bfree>
 8009cba:	3c01      	subs	r4, #1
 8009cbc:	2c04      	cmp	r4, #4
 8009cbe:	d806      	bhi.n	8009cce <_strtod_l+0xf6>
 8009cc0:	e8df f004 	tbb	[pc, r4]
 8009cc4:	1714030a 	.word	0x1714030a
 8009cc8:	0a          	.byte	0x0a
 8009cc9:	00          	.byte	0x00
 8009cca:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8009cce:	0731      	lsls	r1, r6, #28
 8009cd0:	d5c1      	bpl.n	8009c56 <_strtod_l+0x7e>
 8009cd2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8009cd6:	e7be      	b.n	8009c56 <_strtod_l+0x7e>
 8009cd8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009cda:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8009cde:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009ce2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009ce6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8009cea:	e7f0      	b.n	8009cce <_strtod_l+0xf6>
 8009cec:	f8df a170 	ldr.w	sl, [pc, #368]	; 8009e60 <_strtod_l+0x288>
 8009cf0:	e7ed      	b.n	8009cce <_strtod_l+0xf6>
 8009cf2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8009cf6:	f04f 39ff 	mov.w	r9, #4294967295
 8009cfa:	e7e8      	b.n	8009cce <_strtod_l+0xf6>
 8009cfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009cfe:	1c5a      	adds	r2, r3, #1
 8009d00:	921b      	str	r2, [sp, #108]	; 0x6c
 8009d02:	785b      	ldrb	r3, [r3, #1]
 8009d04:	2b30      	cmp	r3, #48	; 0x30
 8009d06:	d0f9      	beq.n	8009cfc <_strtod_l+0x124>
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d0a4      	beq.n	8009c56 <_strtod_l+0x7e>
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	2500      	movs	r5, #0
 8009d10:	220a      	movs	r2, #10
 8009d12:	9307      	str	r3, [sp, #28]
 8009d14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d16:	9506      	str	r5, [sp, #24]
 8009d18:	9308      	str	r3, [sp, #32]
 8009d1a:	9504      	str	r5, [sp, #16]
 8009d1c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009d1e:	7807      	ldrb	r7, [r0, #0]
 8009d20:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8009d24:	b2d9      	uxtb	r1, r3
 8009d26:	2909      	cmp	r1, #9
 8009d28:	d929      	bls.n	8009d7e <_strtod_l+0x1a6>
 8009d2a:	4622      	mov	r2, r4
 8009d2c:	f8d8 1000 	ldr.w	r1, [r8]
 8009d30:	f002 f91f 	bl	800bf72 <strncmp>
 8009d34:	2800      	cmp	r0, #0
 8009d36:	d031      	beq.n	8009d9c <_strtod_l+0x1c4>
 8009d38:	2000      	movs	r0, #0
 8009d3a:	463b      	mov	r3, r7
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	9c04      	ldr	r4, [sp, #16]
 8009d40:	9005      	str	r0, [sp, #20]
 8009d42:	2b65      	cmp	r3, #101	; 0x65
 8009d44:	d001      	beq.n	8009d4a <_strtod_l+0x172>
 8009d46:	2b45      	cmp	r3, #69	; 0x45
 8009d48:	d114      	bne.n	8009d74 <_strtod_l+0x19c>
 8009d4a:	b924      	cbnz	r4, 8009d56 <_strtod_l+0x17e>
 8009d4c:	b910      	cbnz	r0, 8009d54 <_strtod_l+0x17c>
 8009d4e:	9b07      	ldr	r3, [sp, #28]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d09e      	beq.n	8009c92 <_strtod_l+0xba>
 8009d54:	2400      	movs	r4, #0
 8009d56:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009d58:	1c73      	adds	r3, r6, #1
 8009d5a:	931b      	str	r3, [sp, #108]	; 0x6c
 8009d5c:	7873      	ldrb	r3, [r6, #1]
 8009d5e:	2b2b      	cmp	r3, #43	; 0x2b
 8009d60:	d078      	beq.n	8009e54 <_strtod_l+0x27c>
 8009d62:	2b2d      	cmp	r3, #45	; 0x2d
 8009d64:	d070      	beq.n	8009e48 <_strtod_l+0x270>
 8009d66:	f04f 0c00 	mov.w	ip, #0
 8009d6a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8009d6e:	2f09      	cmp	r7, #9
 8009d70:	d97c      	bls.n	8009e6c <_strtod_l+0x294>
 8009d72:	961b      	str	r6, [sp, #108]	; 0x6c
 8009d74:	f04f 0e00 	mov.w	lr, #0
 8009d78:	e09a      	b.n	8009eb0 <_strtod_l+0x2d8>
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	e7c7      	b.n	8009d0e <_strtod_l+0x136>
 8009d7e:	9904      	ldr	r1, [sp, #16]
 8009d80:	3001      	adds	r0, #1
 8009d82:	2908      	cmp	r1, #8
 8009d84:	bfd7      	itett	le
 8009d86:	9906      	ldrle	r1, [sp, #24]
 8009d88:	fb02 3505 	mlagt	r5, r2, r5, r3
 8009d8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009d90:	9306      	strle	r3, [sp, #24]
 8009d92:	9b04      	ldr	r3, [sp, #16]
 8009d94:	901b      	str	r0, [sp, #108]	; 0x6c
 8009d96:	3301      	adds	r3, #1
 8009d98:	9304      	str	r3, [sp, #16]
 8009d9a:	e7bf      	b.n	8009d1c <_strtod_l+0x144>
 8009d9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d9e:	191a      	adds	r2, r3, r4
 8009da0:	921b      	str	r2, [sp, #108]	; 0x6c
 8009da2:	9a04      	ldr	r2, [sp, #16]
 8009da4:	5d1b      	ldrb	r3, [r3, r4]
 8009da6:	2a00      	cmp	r2, #0
 8009da8:	d037      	beq.n	8009e1a <_strtod_l+0x242>
 8009daa:	4602      	mov	r2, r0
 8009dac:	9c04      	ldr	r4, [sp, #16]
 8009dae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009db2:	2909      	cmp	r1, #9
 8009db4:	d913      	bls.n	8009dde <_strtod_l+0x206>
 8009db6:	2101      	movs	r1, #1
 8009db8:	9105      	str	r1, [sp, #20]
 8009dba:	e7c2      	b.n	8009d42 <_strtod_l+0x16a>
 8009dbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009dbe:	3001      	adds	r0, #1
 8009dc0:	1c5a      	adds	r2, r3, #1
 8009dc2:	921b      	str	r2, [sp, #108]	; 0x6c
 8009dc4:	785b      	ldrb	r3, [r3, #1]
 8009dc6:	2b30      	cmp	r3, #48	; 0x30
 8009dc8:	d0f8      	beq.n	8009dbc <_strtod_l+0x1e4>
 8009dca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009dce:	2a08      	cmp	r2, #8
 8009dd0:	f200 84f0 	bhi.w	800a7b4 <_strtod_l+0xbdc>
 8009dd4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009dd6:	9208      	str	r2, [sp, #32]
 8009dd8:	4602      	mov	r2, r0
 8009dda:	2000      	movs	r0, #0
 8009ddc:	4604      	mov	r4, r0
 8009dde:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8009de2:	f100 0101 	add.w	r1, r0, #1
 8009de6:	d012      	beq.n	8009e0e <_strtod_l+0x236>
 8009de8:	440a      	add	r2, r1
 8009dea:	270a      	movs	r7, #10
 8009dec:	4621      	mov	r1, r4
 8009dee:	eb00 0c04 	add.w	ip, r0, r4
 8009df2:	458c      	cmp	ip, r1
 8009df4:	d113      	bne.n	8009e1e <_strtod_l+0x246>
 8009df6:	1821      	adds	r1, r4, r0
 8009df8:	2908      	cmp	r1, #8
 8009dfa:	f104 0401 	add.w	r4, r4, #1
 8009dfe:	4404      	add	r4, r0
 8009e00:	dc19      	bgt.n	8009e36 <_strtod_l+0x25e>
 8009e02:	210a      	movs	r1, #10
 8009e04:	9b06      	ldr	r3, [sp, #24]
 8009e06:	fb01 e303 	mla	r3, r1, r3, lr
 8009e0a:	9306      	str	r3, [sp, #24]
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e10:	1c58      	adds	r0, r3, #1
 8009e12:	901b      	str	r0, [sp, #108]	; 0x6c
 8009e14:	785b      	ldrb	r3, [r3, #1]
 8009e16:	4608      	mov	r0, r1
 8009e18:	e7c9      	b.n	8009dae <_strtod_l+0x1d6>
 8009e1a:	9804      	ldr	r0, [sp, #16]
 8009e1c:	e7d3      	b.n	8009dc6 <_strtod_l+0x1ee>
 8009e1e:	2908      	cmp	r1, #8
 8009e20:	f101 0101 	add.w	r1, r1, #1
 8009e24:	dc03      	bgt.n	8009e2e <_strtod_l+0x256>
 8009e26:	9b06      	ldr	r3, [sp, #24]
 8009e28:	437b      	muls	r3, r7
 8009e2a:	9306      	str	r3, [sp, #24]
 8009e2c:	e7e1      	b.n	8009df2 <_strtod_l+0x21a>
 8009e2e:	2910      	cmp	r1, #16
 8009e30:	bfd8      	it	le
 8009e32:	437d      	mulle	r5, r7
 8009e34:	e7dd      	b.n	8009df2 <_strtod_l+0x21a>
 8009e36:	2c10      	cmp	r4, #16
 8009e38:	bfdc      	itt	le
 8009e3a:	210a      	movle	r1, #10
 8009e3c:	fb01 e505 	mlale	r5, r1, r5, lr
 8009e40:	e7e4      	b.n	8009e0c <_strtod_l+0x234>
 8009e42:	2301      	movs	r3, #1
 8009e44:	9305      	str	r3, [sp, #20]
 8009e46:	e781      	b.n	8009d4c <_strtod_l+0x174>
 8009e48:	f04f 0c01 	mov.w	ip, #1
 8009e4c:	1cb3      	adds	r3, r6, #2
 8009e4e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009e50:	78b3      	ldrb	r3, [r6, #2]
 8009e52:	e78a      	b.n	8009d6a <_strtod_l+0x192>
 8009e54:	f04f 0c00 	mov.w	ip, #0
 8009e58:	e7f8      	b.n	8009e4c <_strtod_l+0x274>
 8009e5a:	bf00      	nop
 8009e5c:	0800d46c 	.word	0x0800d46c
 8009e60:	7ff00000 	.word	0x7ff00000
 8009e64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e66:	1c5f      	adds	r7, r3, #1
 8009e68:	971b      	str	r7, [sp, #108]	; 0x6c
 8009e6a:	785b      	ldrb	r3, [r3, #1]
 8009e6c:	2b30      	cmp	r3, #48	; 0x30
 8009e6e:	d0f9      	beq.n	8009e64 <_strtod_l+0x28c>
 8009e70:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8009e74:	2f08      	cmp	r7, #8
 8009e76:	f63f af7d 	bhi.w	8009d74 <_strtod_l+0x19c>
 8009e7a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009e7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e80:	9309      	str	r3, [sp, #36]	; 0x24
 8009e82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e84:	1c5f      	adds	r7, r3, #1
 8009e86:	971b      	str	r7, [sp, #108]	; 0x6c
 8009e88:	785b      	ldrb	r3, [r3, #1]
 8009e8a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8009e8e:	f1b8 0f09 	cmp.w	r8, #9
 8009e92:	d937      	bls.n	8009f04 <_strtod_l+0x32c>
 8009e94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e96:	1a7f      	subs	r7, r7, r1
 8009e98:	2f08      	cmp	r7, #8
 8009e9a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009e9e:	dc37      	bgt.n	8009f10 <_strtod_l+0x338>
 8009ea0:	45be      	cmp	lr, r7
 8009ea2:	bfa8      	it	ge
 8009ea4:	46be      	movge	lr, r7
 8009ea6:	f1bc 0f00 	cmp.w	ip, #0
 8009eaa:	d001      	beq.n	8009eb0 <_strtod_l+0x2d8>
 8009eac:	f1ce 0e00 	rsb	lr, lr, #0
 8009eb0:	2c00      	cmp	r4, #0
 8009eb2:	d151      	bne.n	8009f58 <_strtod_l+0x380>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	f47f aece 	bne.w	8009c56 <_strtod_l+0x7e>
 8009eba:	9a07      	ldr	r2, [sp, #28]
 8009ebc:	2a00      	cmp	r2, #0
 8009ebe:	f47f aeca 	bne.w	8009c56 <_strtod_l+0x7e>
 8009ec2:	9a05      	ldr	r2, [sp, #20]
 8009ec4:	2a00      	cmp	r2, #0
 8009ec6:	f47f aee4 	bne.w	8009c92 <_strtod_l+0xba>
 8009eca:	2b4e      	cmp	r3, #78	; 0x4e
 8009ecc:	d027      	beq.n	8009f1e <_strtod_l+0x346>
 8009ece:	dc21      	bgt.n	8009f14 <_strtod_l+0x33c>
 8009ed0:	2b49      	cmp	r3, #73	; 0x49
 8009ed2:	f47f aede 	bne.w	8009c92 <_strtod_l+0xba>
 8009ed6:	49a4      	ldr	r1, [pc, #656]	; (800a168 <_strtod_l+0x590>)
 8009ed8:	a81b      	add	r0, sp, #108	; 0x6c
 8009eda:	f000 ffb7 	bl	800ae4c <__match>
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	f43f aed7 	beq.w	8009c92 <_strtod_l+0xba>
 8009ee4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ee6:	49a1      	ldr	r1, [pc, #644]	; (800a16c <_strtod_l+0x594>)
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	a81b      	add	r0, sp, #108	; 0x6c
 8009eec:	931b      	str	r3, [sp, #108]	; 0x6c
 8009eee:	f000 ffad 	bl	800ae4c <__match>
 8009ef2:	b910      	cbnz	r0, 8009efa <_strtod_l+0x322>
 8009ef4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	931b      	str	r3, [sp, #108]	; 0x6c
 8009efa:	f8df a284 	ldr.w	sl, [pc, #644]	; 800a180 <_strtod_l+0x5a8>
 8009efe:	f04f 0900 	mov.w	r9, #0
 8009f02:	e6a8      	b.n	8009c56 <_strtod_l+0x7e>
 8009f04:	210a      	movs	r1, #10
 8009f06:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009f0a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009f0e:	e7b8      	b.n	8009e82 <_strtod_l+0x2aa>
 8009f10:	46be      	mov	lr, r7
 8009f12:	e7c8      	b.n	8009ea6 <_strtod_l+0x2ce>
 8009f14:	2b69      	cmp	r3, #105	; 0x69
 8009f16:	d0de      	beq.n	8009ed6 <_strtod_l+0x2fe>
 8009f18:	2b6e      	cmp	r3, #110	; 0x6e
 8009f1a:	f47f aeba 	bne.w	8009c92 <_strtod_l+0xba>
 8009f1e:	4994      	ldr	r1, [pc, #592]	; (800a170 <_strtod_l+0x598>)
 8009f20:	a81b      	add	r0, sp, #108	; 0x6c
 8009f22:	f000 ff93 	bl	800ae4c <__match>
 8009f26:	2800      	cmp	r0, #0
 8009f28:	f43f aeb3 	beq.w	8009c92 <_strtod_l+0xba>
 8009f2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	2b28      	cmp	r3, #40	; 0x28
 8009f32:	d10e      	bne.n	8009f52 <_strtod_l+0x37a>
 8009f34:	aa1e      	add	r2, sp, #120	; 0x78
 8009f36:	498f      	ldr	r1, [pc, #572]	; (800a174 <_strtod_l+0x59c>)
 8009f38:	a81b      	add	r0, sp, #108	; 0x6c
 8009f3a:	f000 ff9b 	bl	800ae74 <__hexnan>
 8009f3e:	2805      	cmp	r0, #5
 8009f40:	d107      	bne.n	8009f52 <_strtod_l+0x37a>
 8009f42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009f44:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8009f48:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8009f4c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8009f50:	e681      	b.n	8009c56 <_strtod_l+0x7e>
 8009f52:	f8df a234 	ldr.w	sl, [pc, #564]	; 800a188 <_strtod_l+0x5b0>
 8009f56:	e7d2      	b.n	8009efe <_strtod_l+0x326>
 8009f58:	ebae 0302 	sub.w	r3, lr, r2
 8009f5c:	9307      	str	r3, [sp, #28]
 8009f5e:	9b04      	ldr	r3, [sp, #16]
 8009f60:	9806      	ldr	r0, [sp, #24]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	bf08      	it	eq
 8009f66:	4623      	moveq	r3, r4
 8009f68:	2c10      	cmp	r4, #16
 8009f6a:	9304      	str	r3, [sp, #16]
 8009f6c:	46a0      	mov	r8, r4
 8009f6e:	bfa8      	it	ge
 8009f70:	f04f 0810 	movge.w	r8, #16
 8009f74:	f7f6 fa36 	bl	80003e4 <__aeabi_ui2d>
 8009f78:	2c09      	cmp	r4, #9
 8009f7a:	4681      	mov	r9, r0
 8009f7c:	468a      	mov	sl, r1
 8009f7e:	dc13      	bgt.n	8009fa8 <_strtod_l+0x3d0>
 8009f80:	9b07      	ldr	r3, [sp, #28]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f43f ae67 	beq.w	8009c56 <_strtod_l+0x7e>
 8009f88:	9b07      	ldr	r3, [sp, #28]
 8009f8a:	dd7e      	ble.n	800a08a <_strtod_l+0x4b2>
 8009f8c:	2b16      	cmp	r3, #22
 8009f8e:	dc65      	bgt.n	800a05c <_strtod_l+0x484>
 8009f90:	4a79      	ldr	r2, [pc, #484]	; (800a178 <_strtod_l+0x5a0>)
 8009f92:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8009f96:	464a      	mov	r2, r9
 8009f98:	e9de 0100 	ldrd	r0, r1, [lr]
 8009f9c:	4653      	mov	r3, sl
 8009f9e:	f7f6 fa9b 	bl	80004d8 <__aeabi_dmul>
 8009fa2:	4681      	mov	r9, r0
 8009fa4:	468a      	mov	sl, r1
 8009fa6:	e656      	b.n	8009c56 <_strtod_l+0x7e>
 8009fa8:	4b73      	ldr	r3, [pc, #460]	; (800a178 <_strtod_l+0x5a0>)
 8009faa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009fae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009fb2:	f7f6 fa91 	bl	80004d8 <__aeabi_dmul>
 8009fb6:	4606      	mov	r6, r0
 8009fb8:	4628      	mov	r0, r5
 8009fba:	460f      	mov	r7, r1
 8009fbc:	f7f6 fa12 	bl	80003e4 <__aeabi_ui2d>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	4639      	mov	r1, r7
 8009fc8:	f7f6 f8d0 	bl	800016c <__adddf3>
 8009fcc:	2c0f      	cmp	r4, #15
 8009fce:	4681      	mov	r9, r0
 8009fd0:	468a      	mov	sl, r1
 8009fd2:	ddd5      	ble.n	8009f80 <_strtod_l+0x3a8>
 8009fd4:	9b07      	ldr	r3, [sp, #28]
 8009fd6:	eba4 0808 	sub.w	r8, r4, r8
 8009fda:	4498      	add	r8, r3
 8009fdc:	f1b8 0f00 	cmp.w	r8, #0
 8009fe0:	f340 809a 	ble.w	800a118 <_strtod_l+0x540>
 8009fe4:	f018 030f 	ands.w	r3, r8, #15
 8009fe8:	d00a      	beq.n	800a000 <_strtod_l+0x428>
 8009fea:	4963      	ldr	r1, [pc, #396]	; (800a178 <_strtod_l+0x5a0>)
 8009fec:	464a      	mov	r2, r9
 8009fee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009ff2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ff6:	4653      	mov	r3, sl
 8009ff8:	f7f6 fa6e 	bl	80004d8 <__aeabi_dmul>
 8009ffc:	4681      	mov	r9, r0
 8009ffe:	468a      	mov	sl, r1
 800a000:	f038 080f 	bics.w	r8, r8, #15
 800a004:	d077      	beq.n	800a0f6 <_strtod_l+0x51e>
 800a006:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a00a:	dd4b      	ble.n	800a0a4 <_strtod_l+0x4cc>
 800a00c:	f04f 0800 	mov.w	r8, #0
 800a010:	f8cd 8010 	str.w	r8, [sp, #16]
 800a014:	f8cd 8020 	str.w	r8, [sp, #32]
 800a018:	f8cd 8018 	str.w	r8, [sp, #24]
 800a01c:	2322      	movs	r3, #34	; 0x22
 800a01e:	f04f 0900 	mov.w	r9, #0
 800a022:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800a180 <_strtod_l+0x5a8>
 800a026:	f8cb 3000 	str.w	r3, [fp]
 800a02a:	9b08      	ldr	r3, [sp, #32]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f43f ae12 	beq.w	8009c56 <_strtod_l+0x7e>
 800a032:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a034:	4658      	mov	r0, fp
 800a036:	f001 f807 	bl	800b048 <_Bfree>
 800a03a:	9906      	ldr	r1, [sp, #24]
 800a03c:	4658      	mov	r0, fp
 800a03e:	f001 f803 	bl	800b048 <_Bfree>
 800a042:	9904      	ldr	r1, [sp, #16]
 800a044:	4658      	mov	r0, fp
 800a046:	f000 ffff 	bl	800b048 <_Bfree>
 800a04a:	9908      	ldr	r1, [sp, #32]
 800a04c:	4658      	mov	r0, fp
 800a04e:	f000 fffb 	bl	800b048 <_Bfree>
 800a052:	4641      	mov	r1, r8
 800a054:	4658      	mov	r0, fp
 800a056:	f000 fff7 	bl	800b048 <_Bfree>
 800a05a:	e5fc      	b.n	8009c56 <_strtod_l+0x7e>
 800a05c:	9a07      	ldr	r2, [sp, #28]
 800a05e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a062:	4293      	cmp	r3, r2
 800a064:	dbb6      	blt.n	8009fd4 <_strtod_l+0x3fc>
 800a066:	4d44      	ldr	r5, [pc, #272]	; (800a178 <_strtod_l+0x5a0>)
 800a068:	f1c4 040f 	rsb	r4, r4, #15
 800a06c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a070:	464a      	mov	r2, r9
 800a072:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a076:	4653      	mov	r3, sl
 800a078:	f7f6 fa2e 	bl	80004d8 <__aeabi_dmul>
 800a07c:	9b07      	ldr	r3, [sp, #28]
 800a07e:	1b1c      	subs	r4, r3, r4
 800a080:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a084:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a088:	e789      	b.n	8009f9e <_strtod_l+0x3c6>
 800a08a:	f113 0f16 	cmn.w	r3, #22
 800a08e:	dba1      	blt.n	8009fd4 <_strtod_l+0x3fc>
 800a090:	4a39      	ldr	r2, [pc, #228]	; (800a178 <_strtod_l+0x5a0>)
 800a092:	4648      	mov	r0, r9
 800a094:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800a098:	e9d2 2300 	ldrd	r2, r3, [r2]
 800a09c:	4651      	mov	r1, sl
 800a09e:	f7f6 fb45 	bl	800072c <__aeabi_ddiv>
 800a0a2:	e77e      	b.n	8009fa2 <_strtod_l+0x3ca>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	4648      	mov	r0, r9
 800a0a8:	4651      	mov	r1, sl
 800a0aa:	461d      	mov	r5, r3
 800a0ac:	4e33      	ldr	r6, [pc, #204]	; (800a17c <_strtod_l+0x5a4>)
 800a0ae:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a0b2:	f1b8 0f01 	cmp.w	r8, #1
 800a0b6:	dc21      	bgt.n	800a0fc <_strtod_l+0x524>
 800a0b8:	b10b      	cbz	r3, 800a0be <_strtod_l+0x4e6>
 800a0ba:	4681      	mov	r9, r0
 800a0bc:	468a      	mov	sl, r1
 800a0be:	4b2f      	ldr	r3, [pc, #188]	; (800a17c <_strtod_l+0x5a4>)
 800a0c0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800a0c4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a0c8:	464a      	mov	r2, r9
 800a0ca:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a0ce:	4653      	mov	r3, sl
 800a0d0:	f7f6 fa02 	bl	80004d8 <__aeabi_dmul>
 800a0d4:	4b2a      	ldr	r3, [pc, #168]	; (800a180 <_strtod_l+0x5a8>)
 800a0d6:	460a      	mov	r2, r1
 800a0d8:	400b      	ands	r3, r1
 800a0da:	492a      	ldr	r1, [pc, #168]	; (800a184 <_strtod_l+0x5ac>)
 800a0dc:	4681      	mov	r9, r0
 800a0de:	428b      	cmp	r3, r1
 800a0e0:	d894      	bhi.n	800a00c <_strtod_l+0x434>
 800a0e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a0e6:	428b      	cmp	r3, r1
 800a0e8:	bf86      	itte	hi
 800a0ea:	f04f 39ff 	movhi.w	r9, #4294967295
 800a0ee:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800a18c <_strtod_l+0x5b4>
 800a0f2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	9305      	str	r3, [sp, #20]
 800a0fa:	e07b      	b.n	800a1f4 <_strtod_l+0x61c>
 800a0fc:	f018 0f01 	tst.w	r8, #1
 800a100:	d006      	beq.n	800a110 <_strtod_l+0x538>
 800a102:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800a106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10a:	f7f6 f9e5 	bl	80004d8 <__aeabi_dmul>
 800a10e:	2301      	movs	r3, #1
 800a110:	3501      	adds	r5, #1
 800a112:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a116:	e7cc      	b.n	800a0b2 <_strtod_l+0x4da>
 800a118:	d0ed      	beq.n	800a0f6 <_strtod_l+0x51e>
 800a11a:	f1c8 0800 	rsb	r8, r8, #0
 800a11e:	f018 020f 	ands.w	r2, r8, #15
 800a122:	d00a      	beq.n	800a13a <_strtod_l+0x562>
 800a124:	4b14      	ldr	r3, [pc, #80]	; (800a178 <_strtod_l+0x5a0>)
 800a126:	4648      	mov	r0, r9
 800a128:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a12c:	4651      	mov	r1, sl
 800a12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a132:	f7f6 fafb 	bl	800072c <__aeabi_ddiv>
 800a136:	4681      	mov	r9, r0
 800a138:	468a      	mov	sl, r1
 800a13a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a13e:	d0da      	beq.n	800a0f6 <_strtod_l+0x51e>
 800a140:	f1b8 0f1f 	cmp.w	r8, #31
 800a144:	dd24      	ble.n	800a190 <_strtod_l+0x5b8>
 800a146:	f04f 0800 	mov.w	r8, #0
 800a14a:	f8cd 8010 	str.w	r8, [sp, #16]
 800a14e:	f8cd 8020 	str.w	r8, [sp, #32]
 800a152:	f8cd 8018 	str.w	r8, [sp, #24]
 800a156:	2322      	movs	r3, #34	; 0x22
 800a158:	f04f 0900 	mov.w	r9, #0
 800a15c:	f04f 0a00 	mov.w	sl, #0
 800a160:	f8cb 3000 	str.w	r3, [fp]
 800a164:	e761      	b.n	800a02a <_strtod_l+0x452>
 800a166:	bf00      	nop
 800a168:	0800d460 	.word	0x0800d460
 800a16c:	0800d463 	.word	0x0800d463
 800a170:	0800d469 	.word	0x0800d469
 800a174:	0800d480 	.word	0x0800d480
 800a178:	0800d4f8 	.word	0x0800d4f8
 800a17c:	0800d4d0 	.word	0x0800d4d0
 800a180:	7ff00000 	.word	0x7ff00000
 800a184:	7ca00000 	.word	0x7ca00000
 800a188:	fff80000 	.word	0xfff80000
 800a18c:	7fefffff 	.word	0x7fefffff
 800a190:	f018 0310 	ands.w	r3, r8, #16
 800a194:	bf18      	it	ne
 800a196:	236a      	movne	r3, #106	; 0x6a
 800a198:	4648      	mov	r0, r9
 800a19a:	9305      	str	r3, [sp, #20]
 800a19c:	4651      	mov	r1, sl
 800a19e:	2300      	movs	r3, #0
 800a1a0:	4da1      	ldr	r5, [pc, #644]	; (800a428 <_strtod_l+0x850>)
 800a1a2:	f1b8 0f00 	cmp.w	r8, #0
 800a1a6:	f300 8113 	bgt.w	800a3d0 <_strtod_l+0x7f8>
 800a1aa:	b10b      	cbz	r3, 800a1b0 <_strtod_l+0x5d8>
 800a1ac:	4681      	mov	r9, r0
 800a1ae:	468a      	mov	sl, r1
 800a1b0:	9b05      	ldr	r3, [sp, #20]
 800a1b2:	b1bb      	cbz	r3, 800a1e4 <_strtod_l+0x60c>
 800a1b4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800a1b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	4651      	mov	r1, sl
 800a1c0:	dd10      	ble.n	800a1e4 <_strtod_l+0x60c>
 800a1c2:	2b1f      	cmp	r3, #31
 800a1c4:	f340 8110 	ble.w	800a3e8 <_strtod_l+0x810>
 800a1c8:	2b34      	cmp	r3, #52	; 0x34
 800a1ca:	bfd8      	it	le
 800a1cc:	f04f 32ff 	movle.w	r2, #4294967295
 800a1d0:	f04f 0900 	mov.w	r9, #0
 800a1d4:	bfcf      	iteee	gt
 800a1d6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800a1da:	3b20      	suble	r3, #32
 800a1dc:	fa02 f303 	lslle.w	r3, r2, r3
 800a1e0:	ea03 0a01 	andle.w	sl, r3, r1
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	4648      	mov	r0, r9
 800a1ea:	4651      	mov	r1, sl
 800a1ec:	f7f6 fbdc 	bl	80009a8 <__aeabi_dcmpeq>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d1a8      	bne.n	800a146 <_strtod_l+0x56e>
 800a1f4:	9b06      	ldr	r3, [sp, #24]
 800a1f6:	9a04      	ldr	r2, [sp, #16]
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	9908      	ldr	r1, [sp, #32]
 800a1fc:	4623      	mov	r3, r4
 800a1fe:	4658      	mov	r0, fp
 800a200:	f000 ff74 	bl	800b0ec <__s2b>
 800a204:	9008      	str	r0, [sp, #32]
 800a206:	2800      	cmp	r0, #0
 800a208:	f43f af00 	beq.w	800a00c <_strtod_l+0x434>
 800a20c:	9a07      	ldr	r2, [sp, #28]
 800a20e:	9b07      	ldr	r3, [sp, #28]
 800a210:	2a00      	cmp	r2, #0
 800a212:	f1c3 0300 	rsb	r3, r3, #0
 800a216:	bfa8      	it	ge
 800a218:	2300      	movge	r3, #0
 800a21a:	f04f 0800 	mov.w	r8, #0
 800a21e:	930e      	str	r3, [sp, #56]	; 0x38
 800a220:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a224:	9316      	str	r3, [sp, #88]	; 0x58
 800a226:	f8cd 8010 	str.w	r8, [sp, #16]
 800a22a:	9b08      	ldr	r3, [sp, #32]
 800a22c:	4658      	mov	r0, fp
 800a22e:	6859      	ldr	r1, [r3, #4]
 800a230:	f000 fed6 	bl	800afe0 <_Balloc>
 800a234:	9006      	str	r0, [sp, #24]
 800a236:	2800      	cmp	r0, #0
 800a238:	f43f aef0 	beq.w	800a01c <_strtod_l+0x444>
 800a23c:	9b08      	ldr	r3, [sp, #32]
 800a23e:	300c      	adds	r0, #12
 800a240:	691a      	ldr	r2, [r3, #16]
 800a242:	f103 010c 	add.w	r1, r3, #12
 800a246:	3202      	adds	r2, #2
 800a248:	0092      	lsls	r2, r2, #2
 800a24a:	f7ff fbfe 	bl	8009a4a <memcpy>
 800a24e:	ab1e      	add	r3, sp, #120	; 0x78
 800a250:	9301      	str	r3, [sp, #4]
 800a252:	ab1d      	add	r3, sp, #116	; 0x74
 800a254:	9300      	str	r3, [sp, #0]
 800a256:	464a      	mov	r2, r9
 800a258:	4653      	mov	r3, sl
 800a25a:	4658      	mov	r0, fp
 800a25c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800a260:	f001 f9fe 	bl	800b660 <__d2b>
 800a264:	901c      	str	r0, [sp, #112]	; 0x70
 800a266:	2800      	cmp	r0, #0
 800a268:	f43f aed8 	beq.w	800a01c <_strtod_l+0x444>
 800a26c:	2101      	movs	r1, #1
 800a26e:	4658      	mov	r0, fp
 800a270:	f000 ffc8 	bl	800b204 <__i2b>
 800a274:	9004      	str	r0, [sp, #16]
 800a276:	4603      	mov	r3, r0
 800a278:	2800      	cmp	r0, #0
 800a27a:	f43f aecf 	beq.w	800a01c <_strtod_l+0x444>
 800a27e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800a280:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a282:	2d00      	cmp	r5, #0
 800a284:	bfab      	itete	ge
 800a286:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a288:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a28a:	18ee      	addge	r6, r5, r3
 800a28c:	1b5c      	sublt	r4, r3, r5
 800a28e:	9b05      	ldr	r3, [sp, #20]
 800a290:	bfa8      	it	ge
 800a292:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800a294:	eba5 0503 	sub.w	r5, r5, r3
 800a298:	4415      	add	r5, r2
 800a29a:	4b64      	ldr	r3, [pc, #400]	; (800a42c <_strtod_l+0x854>)
 800a29c:	f105 35ff 	add.w	r5, r5, #4294967295
 800a2a0:	bfb8      	it	lt
 800a2a2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a2a4:	429d      	cmp	r5, r3
 800a2a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a2aa:	f280 80af 	bge.w	800a40c <_strtod_l+0x834>
 800a2ae:	1b5b      	subs	r3, r3, r5
 800a2b0:	2b1f      	cmp	r3, #31
 800a2b2:	eba2 0203 	sub.w	r2, r2, r3
 800a2b6:	f04f 0701 	mov.w	r7, #1
 800a2ba:	f300 809c 	bgt.w	800a3f6 <_strtod_l+0x81e>
 800a2be:	2500      	movs	r5, #0
 800a2c0:	fa07 f303 	lsl.w	r3, r7, r3
 800a2c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2c6:	18b7      	adds	r7, r6, r2
 800a2c8:	9b05      	ldr	r3, [sp, #20]
 800a2ca:	42be      	cmp	r6, r7
 800a2cc:	4414      	add	r4, r2
 800a2ce:	441c      	add	r4, r3
 800a2d0:	4633      	mov	r3, r6
 800a2d2:	bfa8      	it	ge
 800a2d4:	463b      	movge	r3, r7
 800a2d6:	42a3      	cmp	r3, r4
 800a2d8:	bfa8      	it	ge
 800a2da:	4623      	movge	r3, r4
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	bfc2      	ittt	gt
 800a2e0:	1aff      	subgt	r7, r7, r3
 800a2e2:	1ae4      	subgt	r4, r4, r3
 800a2e4:	1af6      	subgt	r6, r6, r3
 800a2e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2e8:	b1bb      	cbz	r3, 800a31a <_strtod_l+0x742>
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	9904      	ldr	r1, [sp, #16]
 800a2ee:	4658      	mov	r0, fp
 800a2f0:	f001 f826 	bl	800b340 <__pow5mult>
 800a2f4:	9004      	str	r0, [sp, #16]
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	f43f ae90 	beq.w	800a01c <_strtod_l+0x444>
 800a2fc:	4601      	mov	r1, r0
 800a2fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a300:	4658      	mov	r0, fp
 800a302:	f000 ff88 	bl	800b216 <__multiply>
 800a306:	9009      	str	r0, [sp, #36]	; 0x24
 800a308:	2800      	cmp	r0, #0
 800a30a:	f43f ae87 	beq.w	800a01c <_strtod_l+0x444>
 800a30e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a310:	4658      	mov	r0, fp
 800a312:	f000 fe99 	bl	800b048 <_Bfree>
 800a316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a318:	931c      	str	r3, [sp, #112]	; 0x70
 800a31a:	2f00      	cmp	r7, #0
 800a31c:	dc7a      	bgt.n	800a414 <_strtod_l+0x83c>
 800a31e:	9b07      	ldr	r3, [sp, #28]
 800a320:	2b00      	cmp	r3, #0
 800a322:	dd08      	ble.n	800a336 <_strtod_l+0x75e>
 800a324:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a326:	9906      	ldr	r1, [sp, #24]
 800a328:	4658      	mov	r0, fp
 800a32a:	f001 f809 	bl	800b340 <__pow5mult>
 800a32e:	9006      	str	r0, [sp, #24]
 800a330:	2800      	cmp	r0, #0
 800a332:	f43f ae73 	beq.w	800a01c <_strtod_l+0x444>
 800a336:	2c00      	cmp	r4, #0
 800a338:	dd08      	ble.n	800a34c <_strtod_l+0x774>
 800a33a:	4622      	mov	r2, r4
 800a33c:	9906      	ldr	r1, [sp, #24]
 800a33e:	4658      	mov	r0, fp
 800a340:	f001 f84c 	bl	800b3dc <__lshift>
 800a344:	9006      	str	r0, [sp, #24]
 800a346:	2800      	cmp	r0, #0
 800a348:	f43f ae68 	beq.w	800a01c <_strtod_l+0x444>
 800a34c:	2e00      	cmp	r6, #0
 800a34e:	dd08      	ble.n	800a362 <_strtod_l+0x78a>
 800a350:	4632      	mov	r2, r6
 800a352:	9904      	ldr	r1, [sp, #16]
 800a354:	4658      	mov	r0, fp
 800a356:	f001 f841 	bl	800b3dc <__lshift>
 800a35a:	9004      	str	r0, [sp, #16]
 800a35c:	2800      	cmp	r0, #0
 800a35e:	f43f ae5d 	beq.w	800a01c <_strtod_l+0x444>
 800a362:	9a06      	ldr	r2, [sp, #24]
 800a364:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a366:	4658      	mov	r0, fp
 800a368:	f001 f8a6 	bl	800b4b8 <__mdiff>
 800a36c:	4680      	mov	r8, r0
 800a36e:	2800      	cmp	r0, #0
 800a370:	f43f ae54 	beq.w	800a01c <_strtod_l+0x444>
 800a374:	2400      	movs	r4, #0
 800a376:	68c3      	ldr	r3, [r0, #12]
 800a378:	9904      	ldr	r1, [sp, #16]
 800a37a:	60c4      	str	r4, [r0, #12]
 800a37c:	930c      	str	r3, [sp, #48]	; 0x30
 800a37e:	f001 f881 	bl	800b484 <__mcmp>
 800a382:	42a0      	cmp	r0, r4
 800a384:	da54      	bge.n	800a430 <_strtod_l+0x858>
 800a386:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a388:	b9f3      	cbnz	r3, 800a3c8 <_strtod_l+0x7f0>
 800a38a:	f1b9 0f00 	cmp.w	r9, #0
 800a38e:	d11b      	bne.n	800a3c8 <_strtod_l+0x7f0>
 800a390:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800a394:	b9c3      	cbnz	r3, 800a3c8 <_strtod_l+0x7f0>
 800a396:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a39a:	0d1b      	lsrs	r3, r3, #20
 800a39c:	051b      	lsls	r3, r3, #20
 800a39e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a3a2:	d911      	bls.n	800a3c8 <_strtod_l+0x7f0>
 800a3a4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a3a8:	b91b      	cbnz	r3, 800a3b2 <_strtod_l+0x7da>
 800a3aa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	dd0a      	ble.n	800a3c8 <_strtod_l+0x7f0>
 800a3b2:	4641      	mov	r1, r8
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	4658      	mov	r0, fp
 800a3b8:	f001 f810 	bl	800b3dc <__lshift>
 800a3bc:	9904      	ldr	r1, [sp, #16]
 800a3be:	4680      	mov	r8, r0
 800a3c0:	f001 f860 	bl	800b484 <__mcmp>
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	dc68      	bgt.n	800a49a <_strtod_l+0x8c2>
 800a3c8:	9b05      	ldr	r3, [sp, #20]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d172      	bne.n	800a4b4 <_strtod_l+0x8dc>
 800a3ce:	e630      	b.n	800a032 <_strtod_l+0x45a>
 800a3d0:	f018 0f01 	tst.w	r8, #1
 800a3d4:	d004      	beq.n	800a3e0 <_strtod_l+0x808>
 800a3d6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a3da:	f7f6 f87d 	bl	80004d8 <__aeabi_dmul>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a3e4:	3508      	adds	r5, #8
 800a3e6:	e6dc      	b.n	800a1a2 <_strtod_l+0x5ca>
 800a3e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a3ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f0:	ea03 0909 	and.w	r9, r3, r9
 800a3f4:	e6f6      	b.n	800a1e4 <_strtod_l+0x60c>
 800a3f6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a3fa:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a3fe:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a402:	35e2      	adds	r5, #226	; 0xe2
 800a404:	fa07 f505 	lsl.w	r5, r7, r5
 800a408:	970f      	str	r7, [sp, #60]	; 0x3c
 800a40a:	e75c      	b.n	800a2c6 <_strtod_l+0x6ee>
 800a40c:	2301      	movs	r3, #1
 800a40e:	2500      	movs	r5, #0
 800a410:	930f      	str	r3, [sp, #60]	; 0x3c
 800a412:	e758      	b.n	800a2c6 <_strtod_l+0x6ee>
 800a414:	463a      	mov	r2, r7
 800a416:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a418:	4658      	mov	r0, fp
 800a41a:	f000 ffdf 	bl	800b3dc <__lshift>
 800a41e:	901c      	str	r0, [sp, #112]	; 0x70
 800a420:	2800      	cmp	r0, #0
 800a422:	f47f af7c 	bne.w	800a31e <_strtod_l+0x746>
 800a426:	e5f9      	b.n	800a01c <_strtod_l+0x444>
 800a428:	0800d498 	.word	0x0800d498
 800a42c:	fffffc02 	.word	0xfffffc02
 800a430:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a434:	f040 8089 	bne.w	800a54a <_strtod_l+0x972>
 800a438:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a43a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800a43e:	b342      	cbz	r2, 800a492 <_strtod_l+0x8ba>
 800a440:	4aaf      	ldr	r2, [pc, #700]	; (800a700 <_strtod_l+0xb28>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d156      	bne.n	800a4f4 <_strtod_l+0x91c>
 800a446:	9b05      	ldr	r3, [sp, #20]
 800a448:	4648      	mov	r0, r9
 800a44a:	b1eb      	cbz	r3, 800a488 <_strtod_l+0x8b0>
 800a44c:	4653      	mov	r3, sl
 800a44e:	4aad      	ldr	r2, [pc, #692]	; (800a704 <_strtod_l+0xb2c>)
 800a450:	f04f 31ff 	mov.w	r1, #4294967295
 800a454:	401a      	ands	r2, r3
 800a456:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a45a:	d818      	bhi.n	800a48e <_strtod_l+0x8b6>
 800a45c:	0d12      	lsrs	r2, r2, #20
 800a45e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a462:	fa01 f303 	lsl.w	r3, r1, r3
 800a466:	4298      	cmp	r0, r3
 800a468:	d144      	bne.n	800a4f4 <_strtod_l+0x91c>
 800a46a:	4ba7      	ldr	r3, [pc, #668]	; (800a708 <_strtod_l+0xb30>)
 800a46c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a46e:	429a      	cmp	r2, r3
 800a470:	d102      	bne.n	800a478 <_strtod_l+0x8a0>
 800a472:	3001      	adds	r0, #1
 800a474:	f43f add2 	beq.w	800a01c <_strtod_l+0x444>
 800a478:	4ba2      	ldr	r3, [pc, #648]	; (800a704 <_strtod_l+0xb2c>)
 800a47a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a47c:	f04f 0900 	mov.w	r9, #0
 800a480:	401a      	ands	r2, r3
 800a482:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800a486:	e79f      	b.n	800a3c8 <_strtod_l+0x7f0>
 800a488:	f04f 33ff 	mov.w	r3, #4294967295
 800a48c:	e7eb      	b.n	800a466 <_strtod_l+0x88e>
 800a48e:	460b      	mov	r3, r1
 800a490:	e7e9      	b.n	800a466 <_strtod_l+0x88e>
 800a492:	bb7b      	cbnz	r3, 800a4f4 <_strtod_l+0x91c>
 800a494:	f1b9 0f00 	cmp.w	r9, #0
 800a498:	d12c      	bne.n	800a4f4 <_strtod_l+0x91c>
 800a49a:	9905      	ldr	r1, [sp, #20]
 800a49c:	4653      	mov	r3, sl
 800a49e:	4a99      	ldr	r2, [pc, #612]	; (800a704 <_strtod_l+0xb2c>)
 800a4a0:	b1f1      	cbz	r1, 800a4e0 <_strtod_l+0x908>
 800a4a2:	ea02 010a 	and.w	r1, r2, sl
 800a4a6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a4aa:	dc19      	bgt.n	800a4e0 <_strtod_l+0x908>
 800a4ac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a4b0:	f77f ae51 	ble.w	800a156 <_strtod_l+0x57e>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	4a95      	ldr	r2, [pc, #596]	; (800a70c <_strtod_l+0xb34>)
 800a4b8:	4648      	mov	r0, r9
 800a4ba:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800a4be:	4651      	mov	r1, sl
 800a4c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a4c4:	f7f6 f808 	bl	80004d8 <__aeabi_dmul>
 800a4c8:	4681      	mov	r9, r0
 800a4ca:	468a      	mov	sl, r1
 800a4cc:	2900      	cmp	r1, #0
 800a4ce:	f47f adb0 	bne.w	800a032 <_strtod_l+0x45a>
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	f47f adad 	bne.w	800a032 <_strtod_l+0x45a>
 800a4d8:	2322      	movs	r3, #34	; 0x22
 800a4da:	f8cb 3000 	str.w	r3, [fp]
 800a4de:	e5a8      	b.n	800a032 <_strtod_l+0x45a>
 800a4e0:	4013      	ands	r3, r2
 800a4e2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a4e6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800a4ea:	f04f 39ff 	mov.w	r9, #4294967295
 800a4ee:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800a4f2:	e769      	b.n	800a3c8 <_strtod_l+0x7f0>
 800a4f4:	b19d      	cbz	r5, 800a51e <_strtod_l+0x946>
 800a4f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f8:	421d      	tst	r5, r3
 800a4fa:	f43f af65 	beq.w	800a3c8 <_strtod_l+0x7f0>
 800a4fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a500:	9a05      	ldr	r2, [sp, #20]
 800a502:	4648      	mov	r0, r9
 800a504:	4651      	mov	r1, sl
 800a506:	b173      	cbz	r3, 800a526 <_strtod_l+0x94e>
 800a508:	f7ff fb44 	bl	8009b94 <sulp>
 800a50c:	4602      	mov	r2, r0
 800a50e:	460b      	mov	r3, r1
 800a510:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a514:	f7f5 fe2a 	bl	800016c <__adddf3>
 800a518:	4681      	mov	r9, r0
 800a51a:	468a      	mov	sl, r1
 800a51c:	e754      	b.n	800a3c8 <_strtod_l+0x7f0>
 800a51e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a520:	ea13 0f09 	tst.w	r3, r9
 800a524:	e7e9      	b.n	800a4fa <_strtod_l+0x922>
 800a526:	f7ff fb35 	bl	8009b94 <sulp>
 800a52a:	4602      	mov	r2, r0
 800a52c:	460b      	mov	r3, r1
 800a52e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a532:	f7f5 fe19 	bl	8000168 <__aeabi_dsub>
 800a536:	2200      	movs	r2, #0
 800a538:	2300      	movs	r3, #0
 800a53a:	4681      	mov	r9, r0
 800a53c:	468a      	mov	sl, r1
 800a53e:	f7f6 fa33 	bl	80009a8 <__aeabi_dcmpeq>
 800a542:	2800      	cmp	r0, #0
 800a544:	f47f ae07 	bne.w	800a156 <_strtod_l+0x57e>
 800a548:	e73e      	b.n	800a3c8 <_strtod_l+0x7f0>
 800a54a:	9904      	ldr	r1, [sp, #16]
 800a54c:	4640      	mov	r0, r8
 800a54e:	f001 f8d6 	bl	800b6fe <__ratio>
 800a552:	2200      	movs	r2, #0
 800a554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a558:	4606      	mov	r6, r0
 800a55a:	460f      	mov	r7, r1
 800a55c:	f7f6 fa38 	bl	80009d0 <__aeabi_dcmple>
 800a560:	2800      	cmp	r0, #0
 800a562:	d075      	beq.n	800a650 <_strtod_l+0xa78>
 800a564:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a566:	2b00      	cmp	r3, #0
 800a568:	d047      	beq.n	800a5fa <_strtod_l+0xa22>
 800a56a:	2600      	movs	r6, #0
 800a56c:	4f68      	ldr	r7, [pc, #416]	; (800a710 <_strtod_l+0xb38>)
 800a56e:	4d68      	ldr	r5, [pc, #416]	; (800a710 <_strtod_l+0xb38>)
 800a570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a572:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a576:	0d1b      	lsrs	r3, r3, #20
 800a578:	051b      	lsls	r3, r3, #20
 800a57a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a57c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a57e:	4b65      	ldr	r3, [pc, #404]	; (800a714 <_strtod_l+0xb3c>)
 800a580:	429a      	cmp	r2, r3
 800a582:	f040 80cf 	bne.w	800a724 <_strtod_l+0xb4c>
 800a586:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a58a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a590:	4648      	mov	r0, r9
 800a592:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800a596:	4651      	mov	r1, sl
 800a598:	f000 ffec 	bl	800b574 <__ulp>
 800a59c:	4602      	mov	r2, r0
 800a59e:	460b      	mov	r3, r1
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	4639      	mov	r1, r7
 800a5a4:	f7f5 ff98 	bl	80004d8 <__aeabi_dmul>
 800a5a8:	464a      	mov	r2, r9
 800a5aa:	4653      	mov	r3, sl
 800a5ac:	f7f5 fdde 	bl	800016c <__adddf3>
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	4954      	ldr	r1, [pc, #336]	; (800a704 <_strtod_l+0xb2c>)
 800a5b4:	4a58      	ldr	r2, [pc, #352]	; (800a718 <_strtod_l+0xb40>)
 800a5b6:	4019      	ands	r1, r3
 800a5b8:	4291      	cmp	r1, r2
 800a5ba:	4681      	mov	r9, r0
 800a5bc:	d95e      	bls.n	800a67c <_strtod_l+0xaa4>
 800a5be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5c0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d103      	bne.n	800a5d0 <_strtod_l+0x9f8>
 800a5c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	f43f ad26 	beq.w	800a01c <_strtod_l+0x444>
 800a5d0:	f04f 39ff 	mov.w	r9, #4294967295
 800a5d4:	f8df a130 	ldr.w	sl, [pc, #304]	; 800a708 <_strtod_l+0xb30>
 800a5d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a5da:	4658      	mov	r0, fp
 800a5dc:	f000 fd34 	bl	800b048 <_Bfree>
 800a5e0:	9906      	ldr	r1, [sp, #24]
 800a5e2:	4658      	mov	r0, fp
 800a5e4:	f000 fd30 	bl	800b048 <_Bfree>
 800a5e8:	9904      	ldr	r1, [sp, #16]
 800a5ea:	4658      	mov	r0, fp
 800a5ec:	f000 fd2c 	bl	800b048 <_Bfree>
 800a5f0:	4641      	mov	r1, r8
 800a5f2:	4658      	mov	r0, fp
 800a5f4:	f000 fd28 	bl	800b048 <_Bfree>
 800a5f8:	e617      	b.n	800a22a <_strtod_l+0x652>
 800a5fa:	f1b9 0f00 	cmp.w	r9, #0
 800a5fe:	d119      	bne.n	800a634 <_strtod_l+0xa5c>
 800a600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a602:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a606:	b9e3      	cbnz	r3, 800a642 <_strtod_l+0xa6a>
 800a608:	2200      	movs	r2, #0
 800a60a:	4b41      	ldr	r3, [pc, #260]	; (800a710 <_strtod_l+0xb38>)
 800a60c:	4630      	mov	r0, r6
 800a60e:	4639      	mov	r1, r7
 800a610:	f7f6 f9d4 	bl	80009bc <__aeabi_dcmplt>
 800a614:	b9c8      	cbnz	r0, 800a64a <_strtod_l+0xa72>
 800a616:	2200      	movs	r2, #0
 800a618:	4b40      	ldr	r3, [pc, #256]	; (800a71c <_strtod_l+0xb44>)
 800a61a:	4630      	mov	r0, r6
 800a61c:	4639      	mov	r1, r7
 800a61e:	f7f5 ff5b 	bl	80004d8 <__aeabi_dmul>
 800a622:	4604      	mov	r4, r0
 800a624:	460d      	mov	r5, r1
 800a626:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a62a:	9418      	str	r4, [sp, #96]	; 0x60
 800a62c:	9319      	str	r3, [sp, #100]	; 0x64
 800a62e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800a632:	e79d      	b.n	800a570 <_strtod_l+0x998>
 800a634:	f1b9 0f01 	cmp.w	r9, #1
 800a638:	d103      	bne.n	800a642 <_strtod_l+0xa6a>
 800a63a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f43f ad8a 	beq.w	800a156 <_strtod_l+0x57e>
 800a642:	2600      	movs	r6, #0
 800a644:	4f36      	ldr	r7, [pc, #216]	; (800a720 <_strtod_l+0xb48>)
 800a646:	2400      	movs	r4, #0
 800a648:	e791      	b.n	800a56e <_strtod_l+0x996>
 800a64a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a64c:	4d33      	ldr	r5, [pc, #204]	; (800a71c <_strtod_l+0xb44>)
 800a64e:	e7ea      	b.n	800a626 <_strtod_l+0xa4e>
 800a650:	4b32      	ldr	r3, [pc, #200]	; (800a71c <_strtod_l+0xb44>)
 800a652:	2200      	movs	r2, #0
 800a654:	4630      	mov	r0, r6
 800a656:	4639      	mov	r1, r7
 800a658:	f7f5 ff3e 	bl	80004d8 <__aeabi_dmul>
 800a65c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a65e:	4604      	mov	r4, r0
 800a660:	460d      	mov	r5, r1
 800a662:	b933      	cbnz	r3, 800a672 <_strtod_l+0xa9a>
 800a664:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a668:	9010      	str	r0, [sp, #64]	; 0x40
 800a66a:	9311      	str	r3, [sp, #68]	; 0x44
 800a66c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a670:	e77e      	b.n	800a570 <_strtod_l+0x998>
 800a672:	4602      	mov	r2, r0
 800a674:	460b      	mov	r3, r1
 800a676:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a67a:	e7f7      	b.n	800a66c <_strtod_l+0xa94>
 800a67c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 800a680:	9b05      	ldr	r3, [sp, #20]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d1a8      	bne.n	800a5d8 <_strtod_l+0xa00>
 800a686:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a68a:	0d1b      	lsrs	r3, r3, #20
 800a68c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a68e:	051b      	lsls	r3, r3, #20
 800a690:	429a      	cmp	r2, r3
 800a692:	4656      	mov	r6, sl
 800a694:	d1a0      	bne.n	800a5d8 <_strtod_l+0xa00>
 800a696:	4629      	mov	r1, r5
 800a698:	4620      	mov	r0, r4
 800a69a:	f7f6 f9cd 	bl	8000a38 <__aeabi_d2iz>
 800a69e:	f7f5 feb1 	bl	8000404 <__aeabi_i2d>
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	4629      	mov	r1, r5
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	f7f5 fd5d 	bl	8000168 <__aeabi_dsub>
 800a6ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6b0:	4604      	mov	r4, r0
 800a6b2:	460d      	mov	r5, r1
 800a6b4:	b933      	cbnz	r3, 800a6c4 <_strtod_l+0xaec>
 800a6b6:	f1b9 0f00 	cmp.w	r9, #0
 800a6ba:	d103      	bne.n	800a6c4 <_strtod_l+0xaec>
 800a6bc:	f3ca 0613 	ubfx	r6, sl, #0, #20
 800a6c0:	2e00      	cmp	r6, #0
 800a6c2:	d06a      	beq.n	800a79a <_strtod_l+0xbc2>
 800a6c4:	a30a      	add	r3, pc, #40	; (adr r3, 800a6f0 <_strtod_l+0xb18>)
 800a6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	4629      	mov	r1, r5
 800a6ce:	f7f6 f975 	bl	80009bc <__aeabi_dcmplt>
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	f47f acad 	bne.w	800a032 <_strtod_l+0x45a>
 800a6d8:	a307      	add	r3, pc, #28	; (adr r3, 800a6f8 <_strtod_l+0xb20>)
 800a6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6de:	4620      	mov	r0, r4
 800a6e0:	4629      	mov	r1, r5
 800a6e2:	f7f6 f989 	bl	80009f8 <__aeabi_dcmpgt>
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	f43f af76 	beq.w	800a5d8 <_strtod_l+0xa00>
 800a6ec:	e4a1      	b.n	800a032 <_strtod_l+0x45a>
 800a6ee:	bf00      	nop
 800a6f0:	94a03595 	.word	0x94a03595
 800a6f4:	3fdfffff 	.word	0x3fdfffff
 800a6f8:	35afe535 	.word	0x35afe535
 800a6fc:	3fe00000 	.word	0x3fe00000
 800a700:	000fffff 	.word	0x000fffff
 800a704:	7ff00000 	.word	0x7ff00000
 800a708:	7fefffff 	.word	0x7fefffff
 800a70c:	39500000 	.word	0x39500000
 800a710:	3ff00000 	.word	0x3ff00000
 800a714:	7fe00000 	.word	0x7fe00000
 800a718:	7c9fffff 	.word	0x7c9fffff
 800a71c:	3fe00000 	.word	0x3fe00000
 800a720:	bff00000 	.word	0xbff00000
 800a724:	9b05      	ldr	r3, [sp, #20]
 800a726:	b313      	cbz	r3, 800a76e <_strtod_l+0xb96>
 800a728:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a72a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a72e:	d81e      	bhi.n	800a76e <_strtod_l+0xb96>
 800a730:	a325      	add	r3, pc, #148	; (adr r3, 800a7c8 <_strtod_l+0xbf0>)
 800a732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a736:	4620      	mov	r0, r4
 800a738:	4629      	mov	r1, r5
 800a73a:	f7f6 f949 	bl	80009d0 <__aeabi_dcmple>
 800a73e:	b190      	cbz	r0, 800a766 <_strtod_l+0xb8e>
 800a740:	4629      	mov	r1, r5
 800a742:	4620      	mov	r0, r4
 800a744:	f7f6 f9a0 	bl	8000a88 <__aeabi_d2uiz>
 800a748:	2800      	cmp	r0, #0
 800a74a:	bf08      	it	eq
 800a74c:	2001      	moveq	r0, #1
 800a74e:	f7f5 fe49 	bl	80003e4 <__aeabi_ui2d>
 800a752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a754:	4604      	mov	r4, r0
 800a756:	460d      	mov	r5, r1
 800a758:	b9d3      	cbnz	r3, 800a790 <_strtod_l+0xbb8>
 800a75a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a75e:	9012      	str	r0, [sp, #72]	; 0x48
 800a760:	9313      	str	r3, [sp, #76]	; 0x4c
 800a762:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a766:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a768:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a76c:	1a9f      	subs	r7, r3, r2
 800a76e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a772:	f000 feff 	bl	800b574 <__ulp>
 800a776:	4602      	mov	r2, r0
 800a778:	460b      	mov	r3, r1
 800a77a:	4630      	mov	r0, r6
 800a77c:	4639      	mov	r1, r7
 800a77e:	f7f5 feab 	bl	80004d8 <__aeabi_dmul>
 800a782:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a786:	f7f5 fcf1 	bl	800016c <__adddf3>
 800a78a:	4681      	mov	r9, r0
 800a78c:	468a      	mov	sl, r1
 800a78e:	e777      	b.n	800a680 <_strtod_l+0xaa8>
 800a790:	4602      	mov	r2, r0
 800a792:	460b      	mov	r3, r1
 800a794:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a798:	e7e3      	b.n	800a762 <_strtod_l+0xb8a>
 800a79a:	a30d      	add	r3, pc, #52	; (adr r3, 800a7d0 <_strtod_l+0xbf8>)
 800a79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a0:	f7f6 f90c 	bl	80009bc <__aeabi_dcmplt>
 800a7a4:	e79f      	b.n	800a6e6 <_strtod_l+0xb0e>
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	930d      	str	r3, [sp, #52]	; 0x34
 800a7aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a7ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a7ae:	6013      	str	r3, [r2, #0]
 800a7b0:	f7ff ba55 	b.w	8009c5e <_strtod_l+0x86>
 800a7b4:	2b65      	cmp	r3, #101	; 0x65
 800a7b6:	f04f 0200 	mov.w	r2, #0
 800a7ba:	f43f ab42 	beq.w	8009e42 <_strtod_l+0x26a>
 800a7be:	2101      	movs	r1, #1
 800a7c0:	4614      	mov	r4, r2
 800a7c2:	9105      	str	r1, [sp, #20]
 800a7c4:	f7ff babf 	b.w	8009d46 <_strtod_l+0x16e>
 800a7c8:	ffc00000 	.word	0xffc00000
 800a7cc:	41dfffff 	.word	0x41dfffff
 800a7d0:	94a03595 	.word	0x94a03595
 800a7d4:	3fcfffff 	.word	0x3fcfffff

0800a7d8 <strtod>:
 800a7d8:	4b06      	ldr	r3, [pc, #24]	; (800a7f4 <strtod+0x1c>)
 800a7da:	b410      	push	{r4}
 800a7dc:	681c      	ldr	r4, [r3, #0]
 800a7de:	4a06      	ldr	r2, [pc, #24]	; (800a7f8 <strtod+0x20>)
 800a7e0:	6a23      	ldr	r3, [r4, #32]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	bf08      	it	eq
 800a7e6:	4613      	moveq	r3, r2
 800a7e8:	460a      	mov	r2, r1
 800a7ea:	4601      	mov	r1, r0
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	bc10      	pop	{r4}
 800a7f0:	f7ff b9f2 	b.w	8009bd8 <_strtod_l>
 800a7f4:	200001bc 	.word	0x200001bc
 800a7f8:	20000220 	.word	0x20000220

0800a7fc <_strtol_l.isra.0>:
 800a7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a800:	4680      	mov	r8, r0
 800a802:	4689      	mov	r9, r1
 800a804:	4692      	mov	sl, r2
 800a806:	461e      	mov	r6, r3
 800a808:	460f      	mov	r7, r1
 800a80a:	463d      	mov	r5, r7
 800a80c:	9808      	ldr	r0, [sp, #32]
 800a80e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a812:	f000 fbbf 	bl	800af94 <__locale_ctype_ptr_l>
 800a816:	4420      	add	r0, r4
 800a818:	7843      	ldrb	r3, [r0, #1]
 800a81a:	f013 0308 	ands.w	r3, r3, #8
 800a81e:	d132      	bne.n	800a886 <_strtol_l.isra.0+0x8a>
 800a820:	2c2d      	cmp	r4, #45	; 0x2d
 800a822:	d132      	bne.n	800a88a <_strtol_l.isra.0+0x8e>
 800a824:	2201      	movs	r2, #1
 800a826:	787c      	ldrb	r4, [r7, #1]
 800a828:	1cbd      	adds	r5, r7, #2
 800a82a:	2e00      	cmp	r6, #0
 800a82c:	d05d      	beq.n	800a8ea <_strtol_l.isra.0+0xee>
 800a82e:	2e10      	cmp	r6, #16
 800a830:	d109      	bne.n	800a846 <_strtol_l.isra.0+0x4a>
 800a832:	2c30      	cmp	r4, #48	; 0x30
 800a834:	d107      	bne.n	800a846 <_strtol_l.isra.0+0x4a>
 800a836:	782b      	ldrb	r3, [r5, #0]
 800a838:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a83c:	2b58      	cmp	r3, #88	; 0x58
 800a83e:	d14f      	bne.n	800a8e0 <_strtol_l.isra.0+0xe4>
 800a840:	2610      	movs	r6, #16
 800a842:	786c      	ldrb	r4, [r5, #1]
 800a844:	3502      	adds	r5, #2
 800a846:	2a00      	cmp	r2, #0
 800a848:	bf14      	ite	ne
 800a84a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a84e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a852:	2700      	movs	r7, #0
 800a854:	fbb1 fcf6 	udiv	ip, r1, r6
 800a858:	4638      	mov	r0, r7
 800a85a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a85e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a862:	2b09      	cmp	r3, #9
 800a864:	d817      	bhi.n	800a896 <_strtol_l.isra.0+0x9a>
 800a866:	461c      	mov	r4, r3
 800a868:	42a6      	cmp	r6, r4
 800a86a:	dd23      	ble.n	800a8b4 <_strtol_l.isra.0+0xb8>
 800a86c:	1c7b      	adds	r3, r7, #1
 800a86e:	d007      	beq.n	800a880 <_strtol_l.isra.0+0x84>
 800a870:	4584      	cmp	ip, r0
 800a872:	d31c      	bcc.n	800a8ae <_strtol_l.isra.0+0xb2>
 800a874:	d101      	bne.n	800a87a <_strtol_l.isra.0+0x7e>
 800a876:	45a6      	cmp	lr, r4
 800a878:	db19      	blt.n	800a8ae <_strtol_l.isra.0+0xb2>
 800a87a:	2701      	movs	r7, #1
 800a87c:	fb00 4006 	mla	r0, r0, r6, r4
 800a880:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a884:	e7eb      	b.n	800a85e <_strtol_l.isra.0+0x62>
 800a886:	462f      	mov	r7, r5
 800a888:	e7bf      	b.n	800a80a <_strtol_l.isra.0+0xe>
 800a88a:	2c2b      	cmp	r4, #43	; 0x2b
 800a88c:	bf04      	itt	eq
 800a88e:	1cbd      	addeq	r5, r7, #2
 800a890:	787c      	ldrbeq	r4, [r7, #1]
 800a892:	461a      	mov	r2, r3
 800a894:	e7c9      	b.n	800a82a <_strtol_l.isra.0+0x2e>
 800a896:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a89a:	2b19      	cmp	r3, #25
 800a89c:	d801      	bhi.n	800a8a2 <_strtol_l.isra.0+0xa6>
 800a89e:	3c37      	subs	r4, #55	; 0x37
 800a8a0:	e7e2      	b.n	800a868 <_strtol_l.isra.0+0x6c>
 800a8a2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a8a6:	2b19      	cmp	r3, #25
 800a8a8:	d804      	bhi.n	800a8b4 <_strtol_l.isra.0+0xb8>
 800a8aa:	3c57      	subs	r4, #87	; 0x57
 800a8ac:	e7dc      	b.n	800a868 <_strtol_l.isra.0+0x6c>
 800a8ae:	f04f 37ff 	mov.w	r7, #4294967295
 800a8b2:	e7e5      	b.n	800a880 <_strtol_l.isra.0+0x84>
 800a8b4:	1c7b      	adds	r3, r7, #1
 800a8b6:	d108      	bne.n	800a8ca <_strtol_l.isra.0+0xce>
 800a8b8:	2322      	movs	r3, #34	; 0x22
 800a8ba:	4608      	mov	r0, r1
 800a8bc:	f8c8 3000 	str.w	r3, [r8]
 800a8c0:	f1ba 0f00 	cmp.w	sl, #0
 800a8c4:	d107      	bne.n	800a8d6 <_strtol_l.isra.0+0xda>
 800a8c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ca:	b102      	cbz	r2, 800a8ce <_strtol_l.isra.0+0xd2>
 800a8cc:	4240      	negs	r0, r0
 800a8ce:	f1ba 0f00 	cmp.w	sl, #0
 800a8d2:	d0f8      	beq.n	800a8c6 <_strtol_l.isra.0+0xca>
 800a8d4:	b10f      	cbz	r7, 800a8da <_strtol_l.isra.0+0xde>
 800a8d6:	f105 39ff 	add.w	r9, r5, #4294967295
 800a8da:	f8ca 9000 	str.w	r9, [sl]
 800a8de:	e7f2      	b.n	800a8c6 <_strtol_l.isra.0+0xca>
 800a8e0:	2430      	movs	r4, #48	; 0x30
 800a8e2:	2e00      	cmp	r6, #0
 800a8e4:	d1af      	bne.n	800a846 <_strtol_l.isra.0+0x4a>
 800a8e6:	2608      	movs	r6, #8
 800a8e8:	e7ad      	b.n	800a846 <_strtol_l.isra.0+0x4a>
 800a8ea:	2c30      	cmp	r4, #48	; 0x30
 800a8ec:	d0a3      	beq.n	800a836 <_strtol_l.isra.0+0x3a>
 800a8ee:	260a      	movs	r6, #10
 800a8f0:	e7a9      	b.n	800a846 <_strtol_l.isra.0+0x4a>
	...

0800a8f4 <_strtol_r>:
 800a8f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8f6:	4c06      	ldr	r4, [pc, #24]	; (800a910 <_strtol_r+0x1c>)
 800a8f8:	4d06      	ldr	r5, [pc, #24]	; (800a914 <_strtol_r+0x20>)
 800a8fa:	6824      	ldr	r4, [r4, #0]
 800a8fc:	6a24      	ldr	r4, [r4, #32]
 800a8fe:	2c00      	cmp	r4, #0
 800a900:	bf08      	it	eq
 800a902:	462c      	moveq	r4, r5
 800a904:	9400      	str	r4, [sp, #0]
 800a906:	f7ff ff79 	bl	800a7fc <_strtol_l.isra.0>
 800a90a:	b003      	add	sp, #12
 800a90c:	bd30      	pop	{r4, r5, pc}
 800a90e:	bf00      	nop
 800a910:	200001bc 	.word	0x200001bc
 800a914:	20000220 	.word	0x20000220

0800a918 <strtol>:
 800a918:	4b08      	ldr	r3, [pc, #32]	; (800a93c <strtol+0x24>)
 800a91a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a91c:	681c      	ldr	r4, [r3, #0]
 800a91e:	4d08      	ldr	r5, [pc, #32]	; (800a940 <strtol+0x28>)
 800a920:	6a23      	ldr	r3, [r4, #32]
 800a922:	2b00      	cmp	r3, #0
 800a924:	bf08      	it	eq
 800a926:	462b      	moveq	r3, r5
 800a928:	9300      	str	r3, [sp, #0]
 800a92a:	4613      	mov	r3, r2
 800a92c:	460a      	mov	r2, r1
 800a92e:	4601      	mov	r1, r0
 800a930:	4620      	mov	r0, r4
 800a932:	f7ff ff63 	bl	800a7fc <_strtol_l.isra.0>
 800a936:	b003      	add	sp, #12
 800a938:	bd30      	pop	{r4, r5, pc}
 800a93a:	bf00      	nop
 800a93c:	200001bc 	.word	0x200001bc
 800a940:	20000220 	.word	0x20000220

0800a944 <rshift>:
 800a944:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a946:	6906      	ldr	r6, [r0, #16]
 800a948:	114b      	asrs	r3, r1, #5
 800a94a:	429e      	cmp	r6, r3
 800a94c:	f100 0414 	add.w	r4, r0, #20
 800a950:	dd31      	ble.n	800a9b6 <rshift+0x72>
 800a952:	f011 011f 	ands.w	r1, r1, #31
 800a956:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a95a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a95e:	d108      	bne.n	800a972 <rshift+0x2e>
 800a960:	4621      	mov	r1, r4
 800a962:	42b2      	cmp	r2, r6
 800a964:	460b      	mov	r3, r1
 800a966:	d211      	bcs.n	800a98c <rshift+0x48>
 800a968:	f852 3b04 	ldr.w	r3, [r2], #4
 800a96c:	f841 3b04 	str.w	r3, [r1], #4
 800a970:	e7f7      	b.n	800a962 <rshift+0x1e>
 800a972:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a976:	4623      	mov	r3, r4
 800a978:	f1c1 0c20 	rsb	ip, r1, #32
 800a97c:	40cd      	lsrs	r5, r1
 800a97e:	3204      	adds	r2, #4
 800a980:	42b2      	cmp	r2, r6
 800a982:	4617      	mov	r7, r2
 800a984:	d30d      	bcc.n	800a9a2 <rshift+0x5e>
 800a986:	601d      	str	r5, [r3, #0]
 800a988:	b105      	cbz	r5, 800a98c <rshift+0x48>
 800a98a:	3304      	adds	r3, #4
 800a98c:	42a3      	cmp	r3, r4
 800a98e:	eba3 0204 	sub.w	r2, r3, r4
 800a992:	bf08      	it	eq
 800a994:	2300      	moveq	r3, #0
 800a996:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a99a:	6102      	str	r2, [r0, #16]
 800a99c:	bf08      	it	eq
 800a99e:	6143      	streq	r3, [r0, #20]
 800a9a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9a2:	683f      	ldr	r7, [r7, #0]
 800a9a4:	fa07 f70c 	lsl.w	r7, r7, ip
 800a9a8:	433d      	orrs	r5, r7
 800a9aa:	f843 5b04 	str.w	r5, [r3], #4
 800a9ae:	f852 5b04 	ldr.w	r5, [r2], #4
 800a9b2:	40cd      	lsrs	r5, r1
 800a9b4:	e7e4      	b.n	800a980 <rshift+0x3c>
 800a9b6:	4623      	mov	r3, r4
 800a9b8:	e7e8      	b.n	800a98c <rshift+0x48>

0800a9ba <__hexdig_fun>:
 800a9ba:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a9be:	2b09      	cmp	r3, #9
 800a9c0:	d802      	bhi.n	800a9c8 <__hexdig_fun+0xe>
 800a9c2:	3820      	subs	r0, #32
 800a9c4:	b2c0      	uxtb	r0, r0
 800a9c6:	4770      	bx	lr
 800a9c8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a9cc:	2b05      	cmp	r3, #5
 800a9ce:	d801      	bhi.n	800a9d4 <__hexdig_fun+0x1a>
 800a9d0:	3847      	subs	r0, #71	; 0x47
 800a9d2:	e7f7      	b.n	800a9c4 <__hexdig_fun+0xa>
 800a9d4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a9d8:	2b05      	cmp	r3, #5
 800a9da:	d801      	bhi.n	800a9e0 <__hexdig_fun+0x26>
 800a9dc:	3827      	subs	r0, #39	; 0x27
 800a9de:	e7f1      	b.n	800a9c4 <__hexdig_fun+0xa>
 800a9e0:	2000      	movs	r0, #0
 800a9e2:	4770      	bx	lr

0800a9e4 <__gethex>:
 800a9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e8:	b08b      	sub	sp, #44	; 0x2c
 800a9ea:	9002      	str	r0, [sp, #8]
 800a9ec:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a9ee:	468a      	mov	sl, r1
 800a9f0:	4690      	mov	r8, r2
 800a9f2:	9306      	str	r3, [sp, #24]
 800a9f4:	f000 fae0 	bl	800afb8 <__localeconv_l>
 800a9f8:	6803      	ldr	r3, [r0, #0]
 800a9fa:	f04f 0b00 	mov.w	fp, #0
 800a9fe:	4618      	mov	r0, r3
 800aa00:	9303      	str	r3, [sp, #12]
 800aa02:	f7f5 fba5 	bl	8000150 <strlen>
 800aa06:	9b03      	ldr	r3, [sp, #12]
 800aa08:	9001      	str	r0, [sp, #4]
 800aa0a:	4403      	add	r3, r0
 800aa0c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800aa10:	9307      	str	r3, [sp, #28]
 800aa12:	f8da 3000 	ldr.w	r3, [sl]
 800aa16:	3302      	adds	r3, #2
 800aa18:	461f      	mov	r7, r3
 800aa1a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aa1e:	2830      	cmp	r0, #48	; 0x30
 800aa20:	d06c      	beq.n	800aafc <__gethex+0x118>
 800aa22:	f7ff ffca 	bl	800a9ba <__hexdig_fun>
 800aa26:	4604      	mov	r4, r0
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	d16a      	bne.n	800ab02 <__gethex+0x11e>
 800aa2c:	9a01      	ldr	r2, [sp, #4]
 800aa2e:	9903      	ldr	r1, [sp, #12]
 800aa30:	4638      	mov	r0, r7
 800aa32:	f001 fa9e 	bl	800bf72 <strncmp>
 800aa36:	2800      	cmp	r0, #0
 800aa38:	d166      	bne.n	800ab08 <__gethex+0x124>
 800aa3a:	9b01      	ldr	r3, [sp, #4]
 800aa3c:	5cf8      	ldrb	r0, [r7, r3]
 800aa3e:	18fe      	adds	r6, r7, r3
 800aa40:	f7ff ffbb 	bl	800a9ba <__hexdig_fun>
 800aa44:	2800      	cmp	r0, #0
 800aa46:	d062      	beq.n	800ab0e <__gethex+0x12a>
 800aa48:	4633      	mov	r3, r6
 800aa4a:	7818      	ldrb	r0, [r3, #0]
 800aa4c:	461f      	mov	r7, r3
 800aa4e:	2830      	cmp	r0, #48	; 0x30
 800aa50:	f103 0301 	add.w	r3, r3, #1
 800aa54:	d0f9      	beq.n	800aa4a <__gethex+0x66>
 800aa56:	f7ff ffb0 	bl	800a9ba <__hexdig_fun>
 800aa5a:	fab0 f580 	clz	r5, r0
 800aa5e:	4634      	mov	r4, r6
 800aa60:	f04f 0b01 	mov.w	fp, #1
 800aa64:	096d      	lsrs	r5, r5, #5
 800aa66:	463a      	mov	r2, r7
 800aa68:	4616      	mov	r6, r2
 800aa6a:	7830      	ldrb	r0, [r6, #0]
 800aa6c:	3201      	adds	r2, #1
 800aa6e:	f7ff ffa4 	bl	800a9ba <__hexdig_fun>
 800aa72:	2800      	cmp	r0, #0
 800aa74:	d1f8      	bne.n	800aa68 <__gethex+0x84>
 800aa76:	9a01      	ldr	r2, [sp, #4]
 800aa78:	9903      	ldr	r1, [sp, #12]
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	f001 fa79 	bl	800bf72 <strncmp>
 800aa80:	b950      	cbnz	r0, 800aa98 <__gethex+0xb4>
 800aa82:	b954      	cbnz	r4, 800aa9a <__gethex+0xb6>
 800aa84:	9b01      	ldr	r3, [sp, #4]
 800aa86:	18f4      	adds	r4, r6, r3
 800aa88:	4622      	mov	r2, r4
 800aa8a:	4616      	mov	r6, r2
 800aa8c:	7830      	ldrb	r0, [r6, #0]
 800aa8e:	3201      	adds	r2, #1
 800aa90:	f7ff ff93 	bl	800a9ba <__hexdig_fun>
 800aa94:	2800      	cmp	r0, #0
 800aa96:	d1f8      	bne.n	800aa8a <__gethex+0xa6>
 800aa98:	b10c      	cbz	r4, 800aa9e <__gethex+0xba>
 800aa9a:	1ba4      	subs	r4, r4, r6
 800aa9c:	00a4      	lsls	r4, r4, #2
 800aa9e:	7833      	ldrb	r3, [r6, #0]
 800aaa0:	2b50      	cmp	r3, #80	; 0x50
 800aaa2:	d001      	beq.n	800aaa8 <__gethex+0xc4>
 800aaa4:	2b70      	cmp	r3, #112	; 0x70
 800aaa6:	d140      	bne.n	800ab2a <__gethex+0x146>
 800aaa8:	7873      	ldrb	r3, [r6, #1]
 800aaaa:	2b2b      	cmp	r3, #43	; 0x2b
 800aaac:	d031      	beq.n	800ab12 <__gethex+0x12e>
 800aaae:	2b2d      	cmp	r3, #45	; 0x2d
 800aab0:	d033      	beq.n	800ab1a <__gethex+0x136>
 800aab2:	f04f 0900 	mov.w	r9, #0
 800aab6:	1c71      	adds	r1, r6, #1
 800aab8:	7808      	ldrb	r0, [r1, #0]
 800aaba:	f7ff ff7e 	bl	800a9ba <__hexdig_fun>
 800aabe:	1e43      	subs	r3, r0, #1
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	2b18      	cmp	r3, #24
 800aac4:	d831      	bhi.n	800ab2a <__gethex+0x146>
 800aac6:	f1a0 0210 	sub.w	r2, r0, #16
 800aaca:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aace:	f7ff ff74 	bl	800a9ba <__hexdig_fun>
 800aad2:	1e43      	subs	r3, r0, #1
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	2b18      	cmp	r3, #24
 800aad8:	d922      	bls.n	800ab20 <__gethex+0x13c>
 800aada:	f1b9 0f00 	cmp.w	r9, #0
 800aade:	d000      	beq.n	800aae2 <__gethex+0xfe>
 800aae0:	4252      	negs	r2, r2
 800aae2:	4414      	add	r4, r2
 800aae4:	f8ca 1000 	str.w	r1, [sl]
 800aae8:	b30d      	cbz	r5, 800ab2e <__gethex+0x14a>
 800aaea:	f1bb 0f00 	cmp.w	fp, #0
 800aaee:	bf0c      	ite	eq
 800aaf0:	2706      	moveq	r7, #6
 800aaf2:	2700      	movne	r7, #0
 800aaf4:	4638      	mov	r0, r7
 800aaf6:	b00b      	add	sp, #44	; 0x2c
 800aaf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aafc:	f10b 0b01 	add.w	fp, fp, #1
 800ab00:	e78a      	b.n	800aa18 <__gethex+0x34>
 800ab02:	2500      	movs	r5, #0
 800ab04:	462c      	mov	r4, r5
 800ab06:	e7ae      	b.n	800aa66 <__gethex+0x82>
 800ab08:	463e      	mov	r6, r7
 800ab0a:	2501      	movs	r5, #1
 800ab0c:	e7c7      	b.n	800aa9e <__gethex+0xba>
 800ab0e:	4604      	mov	r4, r0
 800ab10:	e7fb      	b.n	800ab0a <__gethex+0x126>
 800ab12:	f04f 0900 	mov.w	r9, #0
 800ab16:	1cb1      	adds	r1, r6, #2
 800ab18:	e7ce      	b.n	800aab8 <__gethex+0xd4>
 800ab1a:	f04f 0901 	mov.w	r9, #1
 800ab1e:	e7fa      	b.n	800ab16 <__gethex+0x132>
 800ab20:	230a      	movs	r3, #10
 800ab22:	fb03 0202 	mla	r2, r3, r2, r0
 800ab26:	3a10      	subs	r2, #16
 800ab28:	e7cf      	b.n	800aaca <__gethex+0xe6>
 800ab2a:	4631      	mov	r1, r6
 800ab2c:	e7da      	b.n	800aae4 <__gethex+0x100>
 800ab2e:	4629      	mov	r1, r5
 800ab30:	1bf3      	subs	r3, r6, r7
 800ab32:	3b01      	subs	r3, #1
 800ab34:	2b07      	cmp	r3, #7
 800ab36:	dc49      	bgt.n	800abcc <__gethex+0x1e8>
 800ab38:	9802      	ldr	r0, [sp, #8]
 800ab3a:	f000 fa51 	bl	800afe0 <_Balloc>
 800ab3e:	f04f 0b00 	mov.w	fp, #0
 800ab42:	4605      	mov	r5, r0
 800ab44:	46da      	mov	sl, fp
 800ab46:	9b01      	ldr	r3, [sp, #4]
 800ab48:	f100 0914 	add.w	r9, r0, #20
 800ab4c:	f1c3 0301 	rsb	r3, r3, #1
 800ab50:	f8cd 9010 	str.w	r9, [sp, #16]
 800ab54:	9308      	str	r3, [sp, #32]
 800ab56:	42b7      	cmp	r7, r6
 800ab58:	d33b      	bcc.n	800abd2 <__gethex+0x1ee>
 800ab5a:	9804      	ldr	r0, [sp, #16]
 800ab5c:	f840 ab04 	str.w	sl, [r0], #4
 800ab60:	eba0 0009 	sub.w	r0, r0, r9
 800ab64:	1080      	asrs	r0, r0, #2
 800ab66:	6128      	str	r0, [r5, #16]
 800ab68:	0147      	lsls	r7, r0, #5
 800ab6a:	4650      	mov	r0, sl
 800ab6c:	f000 fafc 	bl	800b168 <__hi0bits>
 800ab70:	f8d8 6000 	ldr.w	r6, [r8]
 800ab74:	1a3f      	subs	r7, r7, r0
 800ab76:	42b7      	cmp	r7, r6
 800ab78:	dd64      	ble.n	800ac44 <__gethex+0x260>
 800ab7a:	1bbf      	subs	r7, r7, r6
 800ab7c:	4639      	mov	r1, r7
 800ab7e:	4628      	mov	r0, r5
 800ab80:	f000 fe05 	bl	800b78e <__any_on>
 800ab84:	4682      	mov	sl, r0
 800ab86:	b178      	cbz	r0, 800aba8 <__gethex+0x1c4>
 800ab88:	f04f 0a01 	mov.w	sl, #1
 800ab8c:	1e7b      	subs	r3, r7, #1
 800ab8e:	1159      	asrs	r1, r3, #5
 800ab90:	f003 021f 	and.w	r2, r3, #31
 800ab94:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ab98:	fa0a f202 	lsl.w	r2, sl, r2
 800ab9c:	420a      	tst	r2, r1
 800ab9e:	d003      	beq.n	800aba8 <__gethex+0x1c4>
 800aba0:	4553      	cmp	r3, sl
 800aba2:	dc46      	bgt.n	800ac32 <__gethex+0x24e>
 800aba4:	f04f 0a02 	mov.w	sl, #2
 800aba8:	4639      	mov	r1, r7
 800abaa:	4628      	mov	r0, r5
 800abac:	f7ff feca 	bl	800a944 <rshift>
 800abb0:	443c      	add	r4, r7
 800abb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800abb6:	42a3      	cmp	r3, r4
 800abb8:	da52      	bge.n	800ac60 <__gethex+0x27c>
 800abba:	4629      	mov	r1, r5
 800abbc:	9802      	ldr	r0, [sp, #8]
 800abbe:	f000 fa43 	bl	800b048 <_Bfree>
 800abc2:	2300      	movs	r3, #0
 800abc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800abc6:	27a3      	movs	r7, #163	; 0xa3
 800abc8:	6013      	str	r3, [r2, #0]
 800abca:	e793      	b.n	800aaf4 <__gethex+0x110>
 800abcc:	3101      	adds	r1, #1
 800abce:	105b      	asrs	r3, r3, #1
 800abd0:	e7b0      	b.n	800ab34 <__gethex+0x150>
 800abd2:	1e73      	subs	r3, r6, #1
 800abd4:	9305      	str	r3, [sp, #20]
 800abd6:	9a07      	ldr	r2, [sp, #28]
 800abd8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800abdc:	4293      	cmp	r3, r2
 800abde:	d018      	beq.n	800ac12 <__gethex+0x22e>
 800abe0:	f1bb 0f20 	cmp.w	fp, #32
 800abe4:	d107      	bne.n	800abf6 <__gethex+0x212>
 800abe6:	9b04      	ldr	r3, [sp, #16]
 800abe8:	f8c3 a000 	str.w	sl, [r3]
 800abec:	f04f 0a00 	mov.w	sl, #0
 800abf0:	46d3      	mov	fp, sl
 800abf2:	3304      	adds	r3, #4
 800abf4:	9304      	str	r3, [sp, #16]
 800abf6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800abfa:	f7ff fede 	bl	800a9ba <__hexdig_fun>
 800abfe:	f000 000f 	and.w	r0, r0, #15
 800ac02:	fa00 f00b 	lsl.w	r0, r0, fp
 800ac06:	ea4a 0a00 	orr.w	sl, sl, r0
 800ac0a:	f10b 0b04 	add.w	fp, fp, #4
 800ac0e:	9b05      	ldr	r3, [sp, #20]
 800ac10:	e00d      	b.n	800ac2e <__gethex+0x24a>
 800ac12:	9b05      	ldr	r3, [sp, #20]
 800ac14:	9a08      	ldr	r2, [sp, #32]
 800ac16:	4413      	add	r3, r2
 800ac18:	42bb      	cmp	r3, r7
 800ac1a:	d3e1      	bcc.n	800abe0 <__gethex+0x1fc>
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	9a01      	ldr	r2, [sp, #4]
 800ac20:	9903      	ldr	r1, [sp, #12]
 800ac22:	9309      	str	r3, [sp, #36]	; 0x24
 800ac24:	f001 f9a5 	bl	800bf72 <strncmp>
 800ac28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	d1d8      	bne.n	800abe0 <__gethex+0x1fc>
 800ac2e:	461e      	mov	r6, r3
 800ac30:	e791      	b.n	800ab56 <__gethex+0x172>
 800ac32:	1eb9      	subs	r1, r7, #2
 800ac34:	4628      	mov	r0, r5
 800ac36:	f000 fdaa 	bl	800b78e <__any_on>
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	d0b2      	beq.n	800aba4 <__gethex+0x1c0>
 800ac3e:	f04f 0a03 	mov.w	sl, #3
 800ac42:	e7b1      	b.n	800aba8 <__gethex+0x1c4>
 800ac44:	da09      	bge.n	800ac5a <__gethex+0x276>
 800ac46:	1bf7      	subs	r7, r6, r7
 800ac48:	4629      	mov	r1, r5
 800ac4a:	463a      	mov	r2, r7
 800ac4c:	9802      	ldr	r0, [sp, #8]
 800ac4e:	f000 fbc5 	bl	800b3dc <__lshift>
 800ac52:	4605      	mov	r5, r0
 800ac54:	1be4      	subs	r4, r4, r7
 800ac56:	f100 0914 	add.w	r9, r0, #20
 800ac5a:	f04f 0a00 	mov.w	sl, #0
 800ac5e:	e7a8      	b.n	800abb2 <__gethex+0x1ce>
 800ac60:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ac64:	42a0      	cmp	r0, r4
 800ac66:	dd6b      	ble.n	800ad40 <__gethex+0x35c>
 800ac68:	1b04      	subs	r4, r0, r4
 800ac6a:	42a6      	cmp	r6, r4
 800ac6c:	dc2e      	bgt.n	800accc <__gethex+0x2e8>
 800ac6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac72:	2b02      	cmp	r3, #2
 800ac74:	d022      	beq.n	800acbc <__gethex+0x2d8>
 800ac76:	2b03      	cmp	r3, #3
 800ac78:	d024      	beq.n	800acc4 <__gethex+0x2e0>
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d115      	bne.n	800acaa <__gethex+0x2c6>
 800ac7e:	42a6      	cmp	r6, r4
 800ac80:	d113      	bne.n	800acaa <__gethex+0x2c6>
 800ac82:	2e01      	cmp	r6, #1
 800ac84:	dc0b      	bgt.n	800ac9e <__gethex+0x2ba>
 800ac86:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ac8a:	9a06      	ldr	r2, [sp, #24]
 800ac8c:	2762      	movs	r7, #98	; 0x62
 800ac8e:	6013      	str	r3, [r2, #0]
 800ac90:	2301      	movs	r3, #1
 800ac92:	612b      	str	r3, [r5, #16]
 800ac94:	f8c9 3000 	str.w	r3, [r9]
 800ac98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac9a:	601d      	str	r5, [r3, #0]
 800ac9c:	e72a      	b.n	800aaf4 <__gethex+0x110>
 800ac9e:	1e71      	subs	r1, r6, #1
 800aca0:	4628      	mov	r0, r5
 800aca2:	f000 fd74 	bl	800b78e <__any_on>
 800aca6:	2800      	cmp	r0, #0
 800aca8:	d1ed      	bne.n	800ac86 <__gethex+0x2a2>
 800acaa:	4629      	mov	r1, r5
 800acac:	9802      	ldr	r0, [sp, #8]
 800acae:	f000 f9cb 	bl	800b048 <_Bfree>
 800acb2:	2300      	movs	r3, #0
 800acb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800acb6:	2750      	movs	r7, #80	; 0x50
 800acb8:	6013      	str	r3, [r2, #0]
 800acba:	e71b      	b.n	800aaf4 <__gethex+0x110>
 800acbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d0e1      	beq.n	800ac86 <__gethex+0x2a2>
 800acc2:	e7f2      	b.n	800acaa <__gethex+0x2c6>
 800acc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d1dd      	bne.n	800ac86 <__gethex+0x2a2>
 800acca:	e7ee      	b.n	800acaa <__gethex+0x2c6>
 800accc:	1e67      	subs	r7, r4, #1
 800acce:	f1ba 0f00 	cmp.w	sl, #0
 800acd2:	d132      	bne.n	800ad3a <__gethex+0x356>
 800acd4:	b127      	cbz	r7, 800ace0 <__gethex+0x2fc>
 800acd6:	4639      	mov	r1, r7
 800acd8:	4628      	mov	r0, r5
 800acda:	f000 fd58 	bl	800b78e <__any_on>
 800acde:	4682      	mov	sl, r0
 800ace0:	2301      	movs	r3, #1
 800ace2:	117a      	asrs	r2, r7, #5
 800ace4:	f007 071f 	and.w	r7, r7, #31
 800ace8:	fa03 f707 	lsl.w	r7, r3, r7
 800acec:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800acf0:	4621      	mov	r1, r4
 800acf2:	421f      	tst	r7, r3
 800acf4:	f04f 0702 	mov.w	r7, #2
 800acf8:	4628      	mov	r0, r5
 800acfa:	bf18      	it	ne
 800acfc:	f04a 0a02 	orrne.w	sl, sl, #2
 800ad00:	1b36      	subs	r6, r6, r4
 800ad02:	f7ff fe1f 	bl	800a944 <rshift>
 800ad06:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800ad0a:	f1ba 0f00 	cmp.w	sl, #0
 800ad0e:	d048      	beq.n	800ada2 <__gethex+0x3be>
 800ad10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad14:	2b02      	cmp	r3, #2
 800ad16:	d015      	beq.n	800ad44 <__gethex+0x360>
 800ad18:	2b03      	cmp	r3, #3
 800ad1a:	d017      	beq.n	800ad4c <__gethex+0x368>
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d109      	bne.n	800ad34 <__gethex+0x350>
 800ad20:	f01a 0f02 	tst.w	sl, #2
 800ad24:	d006      	beq.n	800ad34 <__gethex+0x350>
 800ad26:	f8d9 3000 	ldr.w	r3, [r9]
 800ad2a:	ea4a 0a03 	orr.w	sl, sl, r3
 800ad2e:	f01a 0f01 	tst.w	sl, #1
 800ad32:	d10e      	bne.n	800ad52 <__gethex+0x36e>
 800ad34:	f047 0710 	orr.w	r7, r7, #16
 800ad38:	e033      	b.n	800ada2 <__gethex+0x3be>
 800ad3a:	f04f 0a01 	mov.w	sl, #1
 800ad3e:	e7cf      	b.n	800ace0 <__gethex+0x2fc>
 800ad40:	2701      	movs	r7, #1
 800ad42:	e7e2      	b.n	800ad0a <__gethex+0x326>
 800ad44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad46:	f1c3 0301 	rsb	r3, r3, #1
 800ad4a:	9315      	str	r3, [sp, #84]	; 0x54
 800ad4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d0f0      	beq.n	800ad34 <__gethex+0x350>
 800ad52:	f04f 0c00 	mov.w	ip, #0
 800ad56:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800ad5a:	f105 0314 	add.w	r3, r5, #20
 800ad5e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800ad62:	eb03 010a 	add.w	r1, r3, sl
 800ad66:	4618      	mov	r0, r3
 800ad68:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad6c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ad70:	d01c      	beq.n	800adac <__gethex+0x3c8>
 800ad72:	3201      	adds	r2, #1
 800ad74:	6002      	str	r2, [r0, #0]
 800ad76:	2f02      	cmp	r7, #2
 800ad78:	f105 0314 	add.w	r3, r5, #20
 800ad7c:	d138      	bne.n	800adf0 <__gethex+0x40c>
 800ad7e:	f8d8 2000 	ldr.w	r2, [r8]
 800ad82:	3a01      	subs	r2, #1
 800ad84:	42b2      	cmp	r2, r6
 800ad86:	d10a      	bne.n	800ad9e <__gethex+0x3ba>
 800ad88:	2201      	movs	r2, #1
 800ad8a:	1171      	asrs	r1, r6, #5
 800ad8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ad90:	f006 061f 	and.w	r6, r6, #31
 800ad94:	fa02 f606 	lsl.w	r6, r2, r6
 800ad98:	421e      	tst	r6, r3
 800ad9a:	bf18      	it	ne
 800ad9c:	4617      	movne	r7, r2
 800ad9e:	f047 0720 	orr.w	r7, r7, #32
 800ada2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ada4:	601d      	str	r5, [r3, #0]
 800ada6:	9b06      	ldr	r3, [sp, #24]
 800ada8:	601c      	str	r4, [r3, #0]
 800adaa:	e6a3      	b.n	800aaf4 <__gethex+0x110>
 800adac:	4299      	cmp	r1, r3
 800adae:	f843 cc04 	str.w	ip, [r3, #-4]
 800adb2:	d8d8      	bhi.n	800ad66 <__gethex+0x382>
 800adb4:	68ab      	ldr	r3, [r5, #8]
 800adb6:	4599      	cmp	r9, r3
 800adb8:	db12      	blt.n	800ade0 <__gethex+0x3fc>
 800adba:	6869      	ldr	r1, [r5, #4]
 800adbc:	9802      	ldr	r0, [sp, #8]
 800adbe:	3101      	adds	r1, #1
 800adc0:	f000 f90e 	bl	800afe0 <_Balloc>
 800adc4:	4683      	mov	fp, r0
 800adc6:	692a      	ldr	r2, [r5, #16]
 800adc8:	f105 010c 	add.w	r1, r5, #12
 800adcc:	3202      	adds	r2, #2
 800adce:	0092      	lsls	r2, r2, #2
 800add0:	300c      	adds	r0, #12
 800add2:	f7fe fe3a 	bl	8009a4a <memcpy>
 800add6:	4629      	mov	r1, r5
 800add8:	9802      	ldr	r0, [sp, #8]
 800adda:	f000 f935 	bl	800b048 <_Bfree>
 800adde:	465d      	mov	r5, fp
 800ade0:	692b      	ldr	r3, [r5, #16]
 800ade2:	1c5a      	adds	r2, r3, #1
 800ade4:	612a      	str	r2, [r5, #16]
 800ade6:	2201      	movs	r2, #1
 800ade8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800adec:	615a      	str	r2, [r3, #20]
 800adee:	e7c2      	b.n	800ad76 <__gethex+0x392>
 800adf0:	692a      	ldr	r2, [r5, #16]
 800adf2:	454a      	cmp	r2, r9
 800adf4:	dd0b      	ble.n	800ae0e <__gethex+0x42a>
 800adf6:	2101      	movs	r1, #1
 800adf8:	4628      	mov	r0, r5
 800adfa:	f7ff fda3 	bl	800a944 <rshift>
 800adfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae02:	3401      	adds	r4, #1
 800ae04:	42a3      	cmp	r3, r4
 800ae06:	f6ff aed8 	blt.w	800abba <__gethex+0x1d6>
 800ae0a:	2701      	movs	r7, #1
 800ae0c:	e7c7      	b.n	800ad9e <__gethex+0x3ba>
 800ae0e:	f016 061f 	ands.w	r6, r6, #31
 800ae12:	d0fa      	beq.n	800ae0a <__gethex+0x426>
 800ae14:	449a      	add	sl, r3
 800ae16:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ae1a:	f000 f9a5 	bl	800b168 <__hi0bits>
 800ae1e:	f1c6 0620 	rsb	r6, r6, #32
 800ae22:	42b0      	cmp	r0, r6
 800ae24:	dbe7      	blt.n	800adf6 <__gethex+0x412>
 800ae26:	e7f0      	b.n	800ae0a <__gethex+0x426>

0800ae28 <L_shift>:
 800ae28:	f1c2 0208 	rsb	r2, r2, #8
 800ae2c:	0092      	lsls	r2, r2, #2
 800ae2e:	b570      	push	{r4, r5, r6, lr}
 800ae30:	f1c2 0620 	rsb	r6, r2, #32
 800ae34:	6843      	ldr	r3, [r0, #4]
 800ae36:	6804      	ldr	r4, [r0, #0]
 800ae38:	fa03 f506 	lsl.w	r5, r3, r6
 800ae3c:	432c      	orrs	r4, r5
 800ae3e:	40d3      	lsrs	r3, r2
 800ae40:	6004      	str	r4, [r0, #0]
 800ae42:	f840 3f04 	str.w	r3, [r0, #4]!
 800ae46:	4288      	cmp	r0, r1
 800ae48:	d3f4      	bcc.n	800ae34 <L_shift+0xc>
 800ae4a:	bd70      	pop	{r4, r5, r6, pc}

0800ae4c <__match>:
 800ae4c:	b530      	push	{r4, r5, lr}
 800ae4e:	6803      	ldr	r3, [r0, #0]
 800ae50:	3301      	adds	r3, #1
 800ae52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae56:	b914      	cbnz	r4, 800ae5e <__match+0x12>
 800ae58:	6003      	str	r3, [r0, #0]
 800ae5a:	2001      	movs	r0, #1
 800ae5c:	bd30      	pop	{r4, r5, pc}
 800ae5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae62:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ae66:	2d19      	cmp	r5, #25
 800ae68:	bf98      	it	ls
 800ae6a:	3220      	addls	r2, #32
 800ae6c:	42a2      	cmp	r2, r4
 800ae6e:	d0f0      	beq.n	800ae52 <__match+0x6>
 800ae70:	2000      	movs	r0, #0
 800ae72:	e7f3      	b.n	800ae5c <__match+0x10>

0800ae74 <__hexnan>:
 800ae74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae78:	2500      	movs	r5, #0
 800ae7a:	680b      	ldr	r3, [r1, #0]
 800ae7c:	4682      	mov	sl, r0
 800ae7e:	115f      	asrs	r7, r3, #5
 800ae80:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800ae84:	f013 031f 	ands.w	r3, r3, #31
 800ae88:	bf18      	it	ne
 800ae8a:	3704      	addne	r7, #4
 800ae8c:	1f3e      	subs	r6, r7, #4
 800ae8e:	4690      	mov	r8, r2
 800ae90:	46b1      	mov	r9, r6
 800ae92:	4634      	mov	r4, r6
 800ae94:	46ab      	mov	fp, r5
 800ae96:	b087      	sub	sp, #28
 800ae98:	6801      	ldr	r1, [r0, #0]
 800ae9a:	9301      	str	r3, [sp, #4]
 800ae9c:	f847 5c04 	str.w	r5, [r7, #-4]
 800aea0:	9502      	str	r5, [sp, #8]
 800aea2:	784a      	ldrb	r2, [r1, #1]
 800aea4:	1c4b      	adds	r3, r1, #1
 800aea6:	9303      	str	r3, [sp, #12]
 800aea8:	b342      	cbz	r2, 800aefc <__hexnan+0x88>
 800aeaa:	4610      	mov	r0, r2
 800aeac:	9105      	str	r1, [sp, #20]
 800aeae:	9204      	str	r2, [sp, #16]
 800aeb0:	f7ff fd83 	bl	800a9ba <__hexdig_fun>
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	d143      	bne.n	800af40 <__hexnan+0xcc>
 800aeb8:	9a04      	ldr	r2, [sp, #16]
 800aeba:	9905      	ldr	r1, [sp, #20]
 800aebc:	2a20      	cmp	r2, #32
 800aebe:	d818      	bhi.n	800aef2 <__hexnan+0x7e>
 800aec0:	9b02      	ldr	r3, [sp, #8]
 800aec2:	459b      	cmp	fp, r3
 800aec4:	dd13      	ble.n	800aeee <__hexnan+0x7a>
 800aec6:	454c      	cmp	r4, r9
 800aec8:	d206      	bcs.n	800aed8 <__hexnan+0x64>
 800aeca:	2d07      	cmp	r5, #7
 800aecc:	dc04      	bgt.n	800aed8 <__hexnan+0x64>
 800aece:	462a      	mov	r2, r5
 800aed0:	4649      	mov	r1, r9
 800aed2:	4620      	mov	r0, r4
 800aed4:	f7ff ffa8 	bl	800ae28 <L_shift>
 800aed8:	4544      	cmp	r4, r8
 800aeda:	d944      	bls.n	800af66 <__hexnan+0xf2>
 800aedc:	2300      	movs	r3, #0
 800aede:	f1a4 0904 	sub.w	r9, r4, #4
 800aee2:	f844 3c04 	str.w	r3, [r4, #-4]
 800aee6:	461d      	mov	r5, r3
 800aee8:	464c      	mov	r4, r9
 800aeea:	f8cd b008 	str.w	fp, [sp, #8]
 800aeee:	9903      	ldr	r1, [sp, #12]
 800aef0:	e7d7      	b.n	800aea2 <__hexnan+0x2e>
 800aef2:	2a29      	cmp	r2, #41	; 0x29
 800aef4:	d14a      	bne.n	800af8c <__hexnan+0x118>
 800aef6:	3102      	adds	r1, #2
 800aef8:	f8ca 1000 	str.w	r1, [sl]
 800aefc:	f1bb 0f00 	cmp.w	fp, #0
 800af00:	d044      	beq.n	800af8c <__hexnan+0x118>
 800af02:	454c      	cmp	r4, r9
 800af04:	d206      	bcs.n	800af14 <__hexnan+0xa0>
 800af06:	2d07      	cmp	r5, #7
 800af08:	dc04      	bgt.n	800af14 <__hexnan+0xa0>
 800af0a:	462a      	mov	r2, r5
 800af0c:	4649      	mov	r1, r9
 800af0e:	4620      	mov	r0, r4
 800af10:	f7ff ff8a 	bl	800ae28 <L_shift>
 800af14:	4544      	cmp	r4, r8
 800af16:	d928      	bls.n	800af6a <__hexnan+0xf6>
 800af18:	4643      	mov	r3, r8
 800af1a:	f854 2b04 	ldr.w	r2, [r4], #4
 800af1e:	42a6      	cmp	r6, r4
 800af20:	f843 2b04 	str.w	r2, [r3], #4
 800af24:	d2f9      	bcs.n	800af1a <__hexnan+0xa6>
 800af26:	2200      	movs	r2, #0
 800af28:	f843 2b04 	str.w	r2, [r3], #4
 800af2c:	429e      	cmp	r6, r3
 800af2e:	d2fb      	bcs.n	800af28 <__hexnan+0xb4>
 800af30:	6833      	ldr	r3, [r6, #0]
 800af32:	b91b      	cbnz	r3, 800af3c <__hexnan+0xc8>
 800af34:	4546      	cmp	r6, r8
 800af36:	d127      	bne.n	800af88 <__hexnan+0x114>
 800af38:	2301      	movs	r3, #1
 800af3a:	6033      	str	r3, [r6, #0]
 800af3c:	2005      	movs	r0, #5
 800af3e:	e026      	b.n	800af8e <__hexnan+0x11a>
 800af40:	3501      	adds	r5, #1
 800af42:	2d08      	cmp	r5, #8
 800af44:	f10b 0b01 	add.w	fp, fp, #1
 800af48:	dd06      	ble.n	800af58 <__hexnan+0xe4>
 800af4a:	4544      	cmp	r4, r8
 800af4c:	d9cf      	bls.n	800aeee <__hexnan+0x7a>
 800af4e:	2300      	movs	r3, #0
 800af50:	2501      	movs	r5, #1
 800af52:	f844 3c04 	str.w	r3, [r4, #-4]
 800af56:	3c04      	subs	r4, #4
 800af58:	6822      	ldr	r2, [r4, #0]
 800af5a:	f000 000f 	and.w	r0, r0, #15
 800af5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800af62:	6020      	str	r0, [r4, #0]
 800af64:	e7c3      	b.n	800aeee <__hexnan+0x7a>
 800af66:	2508      	movs	r5, #8
 800af68:	e7c1      	b.n	800aeee <__hexnan+0x7a>
 800af6a:	9b01      	ldr	r3, [sp, #4]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d0df      	beq.n	800af30 <__hexnan+0xbc>
 800af70:	f04f 32ff 	mov.w	r2, #4294967295
 800af74:	f1c3 0320 	rsb	r3, r3, #32
 800af78:	fa22 f303 	lsr.w	r3, r2, r3
 800af7c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800af80:	401a      	ands	r2, r3
 800af82:	f847 2c04 	str.w	r2, [r7, #-4]
 800af86:	e7d3      	b.n	800af30 <__hexnan+0xbc>
 800af88:	3e04      	subs	r6, #4
 800af8a:	e7d1      	b.n	800af30 <__hexnan+0xbc>
 800af8c:	2004      	movs	r0, #4
 800af8e:	b007      	add	sp, #28
 800af90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af94 <__locale_ctype_ptr_l>:
 800af94:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800af98:	4770      	bx	lr
	...

0800af9c <__locale_ctype_ptr>:
 800af9c:	4b04      	ldr	r3, [pc, #16]	; (800afb0 <__locale_ctype_ptr+0x14>)
 800af9e:	4a05      	ldr	r2, [pc, #20]	; (800afb4 <__locale_ctype_ptr+0x18>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	6a1b      	ldr	r3, [r3, #32]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	bf08      	it	eq
 800afa8:	4613      	moveq	r3, r2
 800afaa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800afae:	4770      	bx	lr
 800afb0:	200001bc 	.word	0x200001bc
 800afb4:	20000220 	.word	0x20000220

0800afb8 <__localeconv_l>:
 800afb8:	30f0      	adds	r0, #240	; 0xf0
 800afba:	4770      	bx	lr

0800afbc <__ascii_mbtowc>:
 800afbc:	b082      	sub	sp, #8
 800afbe:	b901      	cbnz	r1, 800afc2 <__ascii_mbtowc+0x6>
 800afc0:	a901      	add	r1, sp, #4
 800afc2:	b142      	cbz	r2, 800afd6 <__ascii_mbtowc+0x1a>
 800afc4:	b14b      	cbz	r3, 800afda <__ascii_mbtowc+0x1e>
 800afc6:	7813      	ldrb	r3, [r2, #0]
 800afc8:	600b      	str	r3, [r1, #0]
 800afca:	7812      	ldrb	r2, [r2, #0]
 800afcc:	1c10      	adds	r0, r2, #0
 800afce:	bf18      	it	ne
 800afd0:	2001      	movne	r0, #1
 800afd2:	b002      	add	sp, #8
 800afd4:	4770      	bx	lr
 800afd6:	4610      	mov	r0, r2
 800afd8:	e7fb      	b.n	800afd2 <__ascii_mbtowc+0x16>
 800afda:	f06f 0001 	mvn.w	r0, #1
 800afde:	e7f8      	b.n	800afd2 <__ascii_mbtowc+0x16>

0800afe0 <_Balloc>:
 800afe0:	b570      	push	{r4, r5, r6, lr}
 800afe2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800afe4:	4604      	mov	r4, r0
 800afe6:	460e      	mov	r6, r1
 800afe8:	b93d      	cbnz	r5, 800affa <_Balloc+0x1a>
 800afea:	2010      	movs	r0, #16
 800afec:	f001 f8a6 	bl	800c13c <malloc>
 800aff0:	6260      	str	r0, [r4, #36]	; 0x24
 800aff2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aff6:	6005      	str	r5, [r0, #0]
 800aff8:	60c5      	str	r5, [r0, #12]
 800affa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800affc:	68eb      	ldr	r3, [r5, #12]
 800affe:	b183      	cbz	r3, 800b022 <_Balloc+0x42>
 800b000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b008:	b9b8      	cbnz	r0, 800b03a <_Balloc+0x5a>
 800b00a:	2101      	movs	r1, #1
 800b00c:	fa01 f506 	lsl.w	r5, r1, r6
 800b010:	1d6a      	adds	r2, r5, #5
 800b012:	0092      	lsls	r2, r2, #2
 800b014:	4620      	mov	r0, r4
 800b016:	f000 fbdb 	bl	800b7d0 <_calloc_r>
 800b01a:	b160      	cbz	r0, 800b036 <_Balloc+0x56>
 800b01c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b020:	e00e      	b.n	800b040 <_Balloc+0x60>
 800b022:	2221      	movs	r2, #33	; 0x21
 800b024:	2104      	movs	r1, #4
 800b026:	4620      	mov	r0, r4
 800b028:	f000 fbd2 	bl	800b7d0 <_calloc_r>
 800b02c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b02e:	60e8      	str	r0, [r5, #12]
 800b030:	68db      	ldr	r3, [r3, #12]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d1e4      	bne.n	800b000 <_Balloc+0x20>
 800b036:	2000      	movs	r0, #0
 800b038:	bd70      	pop	{r4, r5, r6, pc}
 800b03a:	6802      	ldr	r2, [r0, #0]
 800b03c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b040:	2300      	movs	r3, #0
 800b042:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b046:	e7f7      	b.n	800b038 <_Balloc+0x58>

0800b048 <_Bfree>:
 800b048:	b570      	push	{r4, r5, r6, lr}
 800b04a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b04c:	4606      	mov	r6, r0
 800b04e:	460d      	mov	r5, r1
 800b050:	b93c      	cbnz	r4, 800b062 <_Bfree+0x1a>
 800b052:	2010      	movs	r0, #16
 800b054:	f001 f872 	bl	800c13c <malloc>
 800b058:	6270      	str	r0, [r6, #36]	; 0x24
 800b05a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b05e:	6004      	str	r4, [r0, #0]
 800b060:	60c4      	str	r4, [r0, #12]
 800b062:	b13d      	cbz	r5, 800b074 <_Bfree+0x2c>
 800b064:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b066:	686a      	ldr	r2, [r5, #4]
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b06e:	6029      	str	r1, [r5, #0]
 800b070:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b074:	bd70      	pop	{r4, r5, r6, pc}

0800b076 <__multadd>:
 800b076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b07a:	461f      	mov	r7, r3
 800b07c:	4606      	mov	r6, r0
 800b07e:	460c      	mov	r4, r1
 800b080:	2300      	movs	r3, #0
 800b082:	690d      	ldr	r5, [r1, #16]
 800b084:	f101 0c14 	add.w	ip, r1, #20
 800b088:	f8dc 0000 	ldr.w	r0, [ip]
 800b08c:	3301      	adds	r3, #1
 800b08e:	b281      	uxth	r1, r0
 800b090:	fb02 7101 	mla	r1, r2, r1, r7
 800b094:	0c00      	lsrs	r0, r0, #16
 800b096:	0c0f      	lsrs	r7, r1, #16
 800b098:	fb02 7000 	mla	r0, r2, r0, r7
 800b09c:	b289      	uxth	r1, r1
 800b09e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b0a2:	429d      	cmp	r5, r3
 800b0a4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b0a8:	f84c 1b04 	str.w	r1, [ip], #4
 800b0ac:	dcec      	bgt.n	800b088 <__multadd+0x12>
 800b0ae:	b1d7      	cbz	r7, 800b0e6 <__multadd+0x70>
 800b0b0:	68a3      	ldr	r3, [r4, #8]
 800b0b2:	42ab      	cmp	r3, r5
 800b0b4:	dc12      	bgt.n	800b0dc <__multadd+0x66>
 800b0b6:	6861      	ldr	r1, [r4, #4]
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	3101      	adds	r1, #1
 800b0bc:	f7ff ff90 	bl	800afe0 <_Balloc>
 800b0c0:	4680      	mov	r8, r0
 800b0c2:	6922      	ldr	r2, [r4, #16]
 800b0c4:	f104 010c 	add.w	r1, r4, #12
 800b0c8:	3202      	adds	r2, #2
 800b0ca:	0092      	lsls	r2, r2, #2
 800b0cc:	300c      	adds	r0, #12
 800b0ce:	f7fe fcbc 	bl	8009a4a <memcpy>
 800b0d2:	4621      	mov	r1, r4
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	f7ff ffb7 	bl	800b048 <_Bfree>
 800b0da:	4644      	mov	r4, r8
 800b0dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b0e0:	3501      	adds	r5, #1
 800b0e2:	615f      	str	r7, [r3, #20]
 800b0e4:	6125      	str	r5, [r4, #16]
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b0ec <__s2b>:
 800b0ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0f0:	4615      	mov	r5, r2
 800b0f2:	2209      	movs	r2, #9
 800b0f4:	461f      	mov	r7, r3
 800b0f6:	3308      	adds	r3, #8
 800b0f8:	460c      	mov	r4, r1
 800b0fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0fe:	4606      	mov	r6, r0
 800b100:	2201      	movs	r2, #1
 800b102:	2100      	movs	r1, #0
 800b104:	429a      	cmp	r2, r3
 800b106:	db20      	blt.n	800b14a <__s2b+0x5e>
 800b108:	4630      	mov	r0, r6
 800b10a:	f7ff ff69 	bl	800afe0 <_Balloc>
 800b10e:	9b08      	ldr	r3, [sp, #32]
 800b110:	2d09      	cmp	r5, #9
 800b112:	6143      	str	r3, [r0, #20]
 800b114:	f04f 0301 	mov.w	r3, #1
 800b118:	6103      	str	r3, [r0, #16]
 800b11a:	dd19      	ble.n	800b150 <__s2b+0x64>
 800b11c:	f104 0809 	add.w	r8, r4, #9
 800b120:	46c1      	mov	r9, r8
 800b122:	442c      	add	r4, r5
 800b124:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b128:	4601      	mov	r1, r0
 800b12a:	3b30      	subs	r3, #48	; 0x30
 800b12c:	220a      	movs	r2, #10
 800b12e:	4630      	mov	r0, r6
 800b130:	f7ff ffa1 	bl	800b076 <__multadd>
 800b134:	45a1      	cmp	r9, r4
 800b136:	d1f5      	bne.n	800b124 <__s2b+0x38>
 800b138:	eb08 0405 	add.w	r4, r8, r5
 800b13c:	3c08      	subs	r4, #8
 800b13e:	1b2d      	subs	r5, r5, r4
 800b140:	1963      	adds	r3, r4, r5
 800b142:	42bb      	cmp	r3, r7
 800b144:	db07      	blt.n	800b156 <__s2b+0x6a>
 800b146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b14a:	0052      	lsls	r2, r2, #1
 800b14c:	3101      	adds	r1, #1
 800b14e:	e7d9      	b.n	800b104 <__s2b+0x18>
 800b150:	340a      	adds	r4, #10
 800b152:	2509      	movs	r5, #9
 800b154:	e7f3      	b.n	800b13e <__s2b+0x52>
 800b156:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b15a:	4601      	mov	r1, r0
 800b15c:	3b30      	subs	r3, #48	; 0x30
 800b15e:	220a      	movs	r2, #10
 800b160:	4630      	mov	r0, r6
 800b162:	f7ff ff88 	bl	800b076 <__multadd>
 800b166:	e7eb      	b.n	800b140 <__s2b+0x54>

0800b168 <__hi0bits>:
 800b168:	0c02      	lsrs	r2, r0, #16
 800b16a:	0412      	lsls	r2, r2, #16
 800b16c:	4603      	mov	r3, r0
 800b16e:	b9b2      	cbnz	r2, 800b19e <__hi0bits+0x36>
 800b170:	0403      	lsls	r3, r0, #16
 800b172:	2010      	movs	r0, #16
 800b174:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b178:	bf04      	itt	eq
 800b17a:	021b      	lsleq	r3, r3, #8
 800b17c:	3008      	addeq	r0, #8
 800b17e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b182:	bf04      	itt	eq
 800b184:	011b      	lsleq	r3, r3, #4
 800b186:	3004      	addeq	r0, #4
 800b188:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b18c:	bf04      	itt	eq
 800b18e:	009b      	lsleq	r3, r3, #2
 800b190:	3002      	addeq	r0, #2
 800b192:	2b00      	cmp	r3, #0
 800b194:	db06      	blt.n	800b1a4 <__hi0bits+0x3c>
 800b196:	005b      	lsls	r3, r3, #1
 800b198:	d503      	bpl.n	800b1a2 <__hi0bits+0x3a>
 800b19a:	3001      	adds	r0, #1
 800b19c:	4770      	bx	lr
 800b19e:	2000      	movs	r0, #0
 800b1a0:	e7e8      	b.n	800b174 <__hi0bits+0xc>
 800b1a2:	2020      	movs	r0, #32
 800b1a4:	4770      	bx	lr

0800b1a6 <__lo0bits>:
 800b1a6:	6803      	ldr	r3, [r0, #0]
 800b1a8:	4601      	mov	r1, r0
 800b1aa:	f013 0207 	ands.w	r2, r3, #7
 800b1ae:	d00b      	beq.n	800b1c8 <__lo0bits+0x22>
 800b1b0:	07da      	lsls	r2, r3, #31
 800b1b2:	d423      	bmi.n	800b1fc <__lo0bits+0x56>
 800b1b4:	0798      	lsls	r0, r3, #30
 800b1b6:	bf49      	itett	mi
 800b1b8:	085b      	lsrmi	r3, r3, #1
 800b1ba:	089b      	lsrpl	r3, r3, #2
 800b1bc:	2001      	movmi	r0, #1
 800b1be:	600b      	strmi	r3, [r1, #0]
 800b1c0:	bf5c      	itt	pl
 800b1c2:	600b      	strpl	r3, [r1, #0]
 800b1c4:	2002      	movpl	r0, #2
 800b1c6:	4770      	bx	lr
 800b1c8:	b298      	uxth	r0, r3
 800b1ca:	b9a8      	cbnz	r0, 800b1f8 <__lo0bits+0x52>
 800b1cc:	2010      	movs	r0, #16
 800b1ce:	0c1b      	lsrs	r3, r3, #16
 800b1d0:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b1d4:	bf04      	itt	eq
 800b1d6:	0a1b      	lsreq	r3, r3, #8
 800b1d8:	3008      	addeq	r0, #8
 800b1da:	071a      	lsls	r2, r3, #28
 800b1dc:	bf04      	itt	eq
 800b1de:	091b      	lsreq	r3, r3, #4
 800b1e0:	3004      	addeq	r0, #4
 800b1e2:	079a      	lsls	r2, r3, #30
 800b1e4:	bf04      	itt	eq
 800b1e6:	089b      	lsreq	r3, r3, #2
 800b1e8:	3002      	addeq	r0, #2
 800b1ea:	07da      	lsls	r2, r3, #31
 800b1ec:	d402      	bmi.n	800b1f4 <__lo0bits+0x4e>
 800b1ee:	085b      	lsrs	r3, r3, #1
 800b1f0:	d006      	beq.n	800b200 <__lo0bits+0x5a>
 800b1f2:	3001      	adds	r0, #1
 800b1f4:	600b      	str	r3, [r1, #0]
 800b1f6:	4770      	bx	lr
 800b1f8:	4610      	mov	r0, r2
 800b1fa:	e7e9      	b.n	800b1d0 <__lo0bits+0x2a>
 800b1fc:	2000      	movs	r0, #0
 800b1fe:	4770      	bx	lr
 800b200:	2020      	movs	r0, #32
 800b202:	4770      	bx	lr

0800b204 <__i2b>:
 800b204:	b510      	push	{r4, lr}
 800b206:	460c      	mov	r4, r1
 800b208:	2101      	movs	r1, #1
 800b20a:	f7ff fee9 	bl	800afe0 <_Balloc>
 800b20e:	2201      	movs	r2, #1
 800b210:	6144      	str	r4, [r0, #20]
 800b212:	6102      	str	r2, [r0, #16]
 800b214:	bd10      	pop	{r4, pc}

0800b216 <__multiply>:
 800b216:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b21a:	4614      	mov	r4, r2
 800b21c:	690a      	ldr	r2, [r1, #16]
 800b21e:	6923      	ldr	r3, [r4, #16]
 800b220:	4688      	mov	r8, r1
 800b222:	429a      	cmp	r2, r3
 800b224:	bfbe      	ittt	lt
 800b226:	460b      	movlt	r3, r1
 800b228:	46a0      	movlt	r8, r4
 800b22a:	461c      	movlt	r4, r3
 800b22c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b230:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b234:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b238:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b23c:	eb07 0609 	add.w	r6, r7, r9
 800b240:	42b3      	cmp	r3, r6
 800b242:	bfb8      	it	lt
 800b244:	3101      	addlt	r1, #1
 800b246:	f7ff fecb 	bl	800afe0 <_Balloc>
 800b24a:	f100 0514 	add.w	r5, r0, #20
 800b24e:	462b      	mov	r3, r5
 800b250:	2200      	movs	r2, #0
 800b252:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b256:	4573      	cmp	r3, lr
 800b258:	d316      	bcc.n	800b288 <__multiply+0x72>
 800b25a:	f104 0214 	add.w	r2, r4, #20
 800b25e:	f108 0114 	add.w	r1, r8, #20
 800b262:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b266:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b26a:	9300      	str	r3, [sp, #0]
 800b26c:	9b00      	ldr	r3, [sp, #0]
 800b26e:	9201      	str	r2, [sp, #4]
 800b270:	4293      	cmp	r3, r2
 800b272:	d80c      	bhi.n	800b28e <__multiply+0x78>
 800b274:	2e00      	cmp	r6, #0
 800b276:	dd03      	ble.n	800b280 <__multiply+0x6a>
 800b278:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d05d      	beq.n	800b33c <__multiply+0x126>
 800b280:	6106      	str	r6, [r0, #16]
 800b282:	b003      	add	sp, #12
 800b284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b288:	f843 2b04 	str.w	r2, [r3], #4
 800b28c:	e7e3      	b.n	800b256 <__multiply+0x40>
 800b28e:	f8b2 b000 	ldrh.w	fp, [r2]
 800b292:	f1bb 0f00 	cmp.w	fp, #0
 800b296:	d023      	beq.n	800b2e0 <__multiply+0xca>
 800b298:	4689      	mov	r9, r1
 800b29a:	46ac      	mov	ip, r5
 800b29c:	f04f 0800 	mov.w	r8, #0
 800b2a0:	f859 4b04 	ldr.w	r4, [r9], #4
 800b2a4:	f8dc a000 	ldr.w	sl, [ip]
 800b2a8:	b2a3      	uxth	r3, r4
 800b2aa:	fa1f fa8a 	uxth.w	sl, sl
 800b2ae:	fb0b a303 	mla	r3, fp, r3, sl
 800b2b2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b2b6:	f8dc 4000 	ldr.w	r4, [ip]
 800b2ba:	4443      	add	r3, r8
 800b2bc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b2c0:	fb0b 840a 	mla	r4, fp, sl, r8
 800b2c4:	46e2      	mov	sl, ip
 800b2c6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b2d0:	454f      	cmp	r7, r9
 800b2d2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b2d6:	f84a 3b04 	str.w	r3, [sl], #4
 800b2da:	d82b      	bhi.n	800b334 <__multiply+0x11e>
 800b2dc:	f8cc 8004 	str.w	r8, [ip, #4]
 800b2e0:	9b01      	ldr	r3, [sp, #4]
 800b2e2:	3204      	adds	r2, #4
 800b2e4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b2e8:	f1ba 0f00 	cmp.w	sl, #0
 800b2ec:	d020      	beq.n	800b330 <__multiply+0x11a>
 800b2ee:	4689      	mov	r9, r1
 800b2f0:	46a8      	mov	r8, r5
 800b2f2:	f04f 0b00 	mov.w	fp, #0
 800b2f6:	682b      	ldr	r3, [r5, #0]
 800b2f8:	f8b9 c000 	ldrh.w	ip, [r9]
 800b2fc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b300:	b29b      	uxth	r3, r3
 800b302:	fb0a 440c 	mla	r4, sl, ip, r4
 800b306:	46c4      	mov	ip, r8
 800b308:	445c      	add	r4, fp
 800b30a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b30e:	f84c 3b04 	str.w	r3, [ip], #4
 800b312:	f859 3b04 	ldr.w	r3, [r9], #4
 800b316:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b31a:	0c1b      	lsrs	r3, r3, #16
 800b31c:	fb0a b303 	mla	r3, sl, r3, fp
 800b320:	454f      	cmp	r7, r9
 800b322:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b326:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b32a:	d805      	bhi.n	800b338 <__multiply+0x122>
 800b32c:	f8c8 3004 	str.w	r3, [r8, #4]
 800b330:	3504      	adds	r5, #4
 800b332:	e79b      	b.n	800b26c <__multiply+0x56>
 800b334:	46d4      	mov	ip, sl
 800b336:	e7b3      	b.n	800b2a0 <__multiply+0x8a>
 800b338:	46e0      	mov	r8, ip
 800b33a:	e7dd      	b.n	800b2f8 <__multiply+0xe2>
 800b33c:	3e01      	subs	r6, #1
 800b33e:	e799      	b.n	800b274 <__multiply+0x5e>

0800b340 <__pow5mult>:
 800b340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b344:	4615      	mov	r5, r2
 800b346:	f012 0203 	ands.w	r2, r2, #3
 800b34a:	4606      	mov	r6, r0
 800b34c:	460f      	mov	r7, r1
 800b34e:	d007      	beq.n	800b360 <__pow5mult+0x20>
 800b350:	4c21      	ldr	r4, [pc, #132]	; (800b3d8 <__pow5mult+0x98>)
 800b352:	3a01      	subs	r2, #1
 800b354:	2300      	movs	r3, #0
 800b356:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b35a:	f7ff fe8c 	bl	800b076 <__multadd>
 800b35e:	4607      	mov	r7, r0
 800b360:	10ad      	asrs	r5, r5, #2
 800b362:	d035      	beq.n	800b3d0 <__pow5mult+0x90>
 800b364:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b366:	b93c      	cbnz	r4, 800b378 <__pow5mult+0x38>
 800b368:	2010      	movs	r0, #16
 800b36a:	f000 fee7 	bl	800c13c <malloc>
 800b36e:	6270      	str	r0, [r6, #36]	; 0x24
 800b370:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b374:	6004      	str	r4, [r0, #0]
 800b376:	60c4      	str	r4, [r0, #12]
 800b378:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b37c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b380:	b94c      	cbnz	r4, 800b396 <__pow5mult+0x56>
 800b382:	f240 2171 	movw	r1, #625	; 0x271
 800b386:	4630      	mov	r0, r6
 800b388:	f7ff ff3c 	bl	800b204 <__i2b>
 800b38c:	2300      	movs	r3, #0
 800b38e:	4604      	mov	r4, r0
 800b390:	f8c8 0008 	str.w	r0, [r8, #8]
 800b394:	6003      	str	r3, [r0, #0]
 800b396:	f04f 0800 	mov.w	r8, #0
 800b39a:	07eb      	lsls	r3, r5, #31
 800b39c:	d50a      	bpl.n	800b3b4 <__pow5mult+0x74>
 800b39e:	4639      	mov	r1, r7
 800b3a0:	4622      	mov	r2, r4
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	f7ff ff37 	bl	800b216 <__multiply>
 800b3a8:	4681      	mov	r9, r0
 800b3aa:	4639      	mov	r1, r7
 800b3ac:	4630      	mov	r0, r6
 800b3ae:	f7ff fe4b 	bl	800b048 <_Bfree>
 800b3b2:	464f      	mov	r7, r9
 800b3b4:	106d      	asrs	r5, r5, #1
 800b3b6:	d00b      	beq.n	800b3d0 <__pow5mult+0x90>
 800b3b8:	6820      	ldr	r0, [r4, #0]
 800b3ba:	b938      	cbnz	r0, 800b3cc <__pow5mult+0x8c>
 800b3bc:	4622      	mov	r2, r4
 800b3be:	4621      	mov	r1, r4
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	f7ff ff28 	bl	800b216 <__multiply>
 800b3c6:	6020      	str	r0, [r4, #0]
 800b3c8:	f8c0 8000 	str.w	r8, [r0]
 800b3cc:	4604      	mov	r4, r0
 800b3ce:	e7e4      	b.n	800b39a <__pow5mult+0x5a>
 800b3d0:	4638      	mov	r0, r7
 800b3d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3d6:	bf00      	nop
 800b3d8:	0800d5c0 	.word	0x0800d5c0

0800b3dc <__lshift>:
 800b3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3e0:	460c      	mov	r4, r1
 800b3e2:	4607      	mov	r7, r0
 800b3e4:	4616      	mov	r6, r2
 800b3e6:	6923      	ldr	r3, [r4, #16]
 800b3e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b3ec:	eb0a 0903 	add.w	r9, sl, r3
 800b3f0:	6849      	ldr	r1, [r1, #4]
 800b3f2:	68a3      	ldr	r3, [r4, #8]
 800b3f4:	f109 0501 	add.w	r5, r9, #1
 800b3f8:	42ab      	cmp	r3, r5
 800b3fa:	db32      	blt.n	800b462 <__lshift+0x86>
 800b3fc:	4638      	mov	r0, r7
 800b3fe:	f7ff fdef 	bl	800afe0 <_Balloc>
 800b402:	2300      	movs	r3, #0
 800b404:	4680      	mov	r8, r0
 800b406:	461a      	mov	r2, r3
 800b408:	f100 0114 	add.w	r1, r0, #20
 800b40c:	4553      	cmp	r3, sl
 800b40e:	db2b      	blt.n	800b468 <__lshift+0x8c>
 800b410:	6920      	ldr	r0, [r4, #16]
 800b412:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b416:	f104 0314 	add.w	r3, r4, #20
 800b41a:	f016 021f 	ands.w	r2, r6, #31
 800b41e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b422:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b426:	d025      	beq.n	800b474 <__lshift+0x98>
 800b428:	2000      	movs	r0, #0
 800b42a:	f1c2 0e20 	rsb	lr, r2, #32
 800b42e:	468a      	mov	sl, r1
 800b430:	681e      	ldr	r6, [r3, #0]
 800b432:	4096      	lsls	r6, r2
 800b434:	4330      	orrs	r0, r6
 800b436:	f84a 0b04 	str.w	r0, [sl], #4
 800b43a:	f853 0b04 	ldr.w	r0, [r3], #4
 800b43e:	459c      	cmp	ip, r3
 800b440:	fa20 f00e 	lsr.w	r0, r0, lr
 800b444:	d814      	bhi.n	800b470 <__lshift+0x94>
 800b446:	6048      	str	r0, [r1, #4]
 800b448:	b108      	cbz	r0, 800b44e <__lshift+0x72>
 800b44a:	f109 0502 	add.w	r5, r9, #2
 800b44e:	3d01      	subs	r5, #1
 800b450:	4638      	mov	r0, r7
 800b452:	f8c8 5010 	str.w	r5, [r8, #16]
 800b456:	4621      	mov	r1, r4
 800b458:	f7ff fdf6 	bl	800b048 <_Bfree>
 800b45c:	4640      	mov	r0, r8
 800b45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b462:	3101      	adds	r1, #1
 800b464:	005b      	lsls	r3, r3, #1
 800b466:	e7c7      	b.n	800b3f8 <__lshift+0x1c>
 800b468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b46c:	3301      	adds	r3, #1
 800b46e:	e7cd      	b.n	800b40c <__lshift+0x30>
 800b470:	4651      	mov	r1, sl
 800b472:	e7dc      	b.n	800b42e <__lshift+0x52>
 800b474:	3904      	subs	r1, #4
 800b476:	f853 2b04 	ldr.w	r2, [r3], #4
 800b47a:	459c      	cmp	ip, r3
 800b47c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b480:	d8f9      	bhi.n	800b476 <__lshift+0x9a>
 800b482:	e7e4      	b.n	800b44e <__lshift+0x72>

0800b484 <__mcmp>:
 800b484:	6903      	ldr	r3, [r0, #16]
 800b486:	690a      	ldr	r2, [r1, #16]
 800b488:	b530      	push	{r4, r5, lr}
 800b48a:	1a9b      	subs	r3, r3, r2
 800b48c:	d10c      	bne.n	800b4a8 <__mcmp+0x24>
 800b48e:	0092      	lsls	r2, r2, #2
 800b490:	3014      	adds	r0, #20
 800b492:	3114      	adds	r1, #20
 800b494:	1884      	adds	r4, r0, r2
 800b496:	4411      	add	r1, r2
 800b498:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b49c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b4a0:	4295      	cmp	r5, r2
 800b4a2:	d003      	beq.n	800b4ac <__mcmp+0x28>
 800b4a4:	d305      	bcc.n	800b4b2 <__mcmp+0x2e>
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	bd30      	pop	{r4, r5, pc}
 800b4ac:	42a0      	cmp	r0, r4
 800b4ae:	d3f3      	bcc.n	800b498 <__mcmp+0x14>
 800b4b0:	e7fa      	b.n	800b4a8 <__mcmp+0x24>
 800b4b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b4b6:	e7f7      	b.n	800b4a8 <__mcmp+0x24>

0800b4b8 <__mdiff>:
 800b4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4bc:	460d      	mov	r5, r1
 800b4be:	4607      	mov	r7, r0
 800b4c0:	4611      	mov	r1, r2
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	4614      	mov	r4, r2
 800b4c6:	f7ff ffdd 	bl	800b484 <__mcmp>
 800b4ca:	1e06      	subs	r6, r0, #0
 800b4cc:	d108      	bne.n	800b4e0 <__mdiff+0x28>
 800b4ce:	4631      	mov	r1, r6
 800b4d0:	4638      	mov	r0, r7
 800b4d2:	f7ff fd85 	bl	800afe0 <_Balloc>
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b4dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4e0:	bfa4      	itt	ge
 800b4e2:	4623      	movge	r3, r4
 800b4e4:	462c      	movge	r4, r5
 800b4e6:	4638      	mov	r0, r7
 800b4e8:	6861      	ldr	r1, [r4, #4]
 800b4ea:	bfa6      	itte	ge
 800b4ec:	461d      	movge	r5, r3
 800b4ee:	2600      	movge	r6, #0
 800b4f0:	2601      	movlt	r6, #1
 800b4f2:	f7ff fd75 	bl	800afe0 <_Balloc>
 800b4f6:	f04f 0e00 	mov.w	lr, #0
 800b4fa:	60c6      	str	r6, [r0, #12]
 800b4fc:	692b      	ldr	r3, [r5, #16]
 800b4fe:	6926      	ldr	r6, [r4, #16]
 800b500:	f104 0214 	add.w	r2, r4, #20
 800b504:	f105 0914 	add.w	r9, r5, #20
 800b508:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b50c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b510:	f100 0114 	add.w	r1, r0, #20
 800b514:	f852 ab04 	ldr.w	sl, [r2], #4
 800b518:	f859 5b04 	ldr.w	r5, [r9], #4
 800b51c:	fa1f f38a 	uxth.w	r3, sl
 800b520:	4473      	add	r3, lr
 800b522:	b2ac      	uxth	r4, r5
 800b524:	1b1b      	subs	r3, r3, r4
 800b526:	0c2c      	lsrs	r4, r5, #16
 800b528:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800b52c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800b530:	b29b      	uxth	r3, r3
 800b532:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800b536:	45c8      	cmp	r8, r9
 800b538:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800b53c:	4694      	mov	ip, r2
 800b53e:	f841 4b04 	str.w	r4, [r1], #4
 800b542:	d8e7      	bhi.n	800b514 <__mdiff+0x5c>
 800b544:	45bc      	cmp	ip, r7
 800b546:	d304      	bcc.n	800b552 <__mdiff+0x9a>
 800b548:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b54c:	b183      	cbz	r3, 800b570 <__mdiff+0xb8>
 800b54e:	6106      	str	r6, [r0, #16]
 800b550:	e7c4      	b.n	800b4dc <__mdiff+0x24>
 800b552:	f85c 4b04 	ldr.w	r4, [ip], #4
 800b556:	b2a2      	uxth	r2, r4
 800b558:	4472      	add	r2, lr
 800b55a:	1413      	asrs	r3, r2, #16
 800b55c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b560:	b292      	uxth	r2, r2
 800b562:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b566:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b56a:	f841 2b04 	str.w	r2, [r1], #4
 800b56e:	e7e9      	b.n	800b544 <__mdiff+0x8c>
 800b570:	3e01      	subs	r6, #1
 800b572:	e7e9      	b.n	800b548 <__mdiff+0x90>

0800b574 <__ulp>:
 800b574:	4b10      	ldr	r3, [pc, #64]	; (800b5b8 <__ulp+0x44>)
 800b576:	400b      	ands	r3, r1
 800b578:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	dd02      	ble.n	800b586 <__ulp+0x12>
 800b580:	2000      	movs	r0, #0
 800b582:	4619      	mov	r1, r3
 800b584:	4770      	bx	lr
 800b586:	425b      	negs	r3, r3
 800b588:	151b      	asrs	r3, r3, #20
 800b58a:	2b13      	cmp	r3, #19
 800b58c:	f04f 0000 	mov.w	r0, #0
 800b590:	f04f 0100 	mov.w	r1, #0
 800b594:	dc04      	bgt.n	800b5a0 <__ulp+0x2c>
 800b596:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b59a:	fa42 f103 	asr.w	r1, r2, r3
 800b59e:	4770      	bx	lr
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	3b14      	subs	r3, #20
 800b5a4:	2b1e      	cmp	r3, #30
 800b5a6:	bfce      	itee	gt
 800b5a8:	4613      	movgt	r3, r2
 800b5aa:	f1c3 031f 	rsble	r3, r3, #31
 800b5ae:	fa02 f303 	lslle.w	r3, r2, r3
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	4770      	bx	lr
 800b5b6:	bf00      	nop
 800b5b8:	7ff00000 	.word	0x7ff00000

0800b5bc <__b2d>:
 800b5bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5c0:	6907      	ldr	r7, [r0, #16]
 800b5c2:	f100 0914 	add.w	r9, r0, #20
 800b5c6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b5ca:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b5ce:	f1a7 0804 	sub.w	r8, r7, #4
 800b5d2:	4630      	mov	r0, r6
 800b5d4:	f7ff fdc8 	bl	800b168 <__hi0bits>
 800b5d8:	f1c0 0320 	rsb	r3, r0, #32
 800b5dc:	280a      	cmp	r0, #10
 800b5de:	600b      	str	r3, [r1, #0]
 800b5e0:	491e      	ldr	r1, [pc, #120]	; (800b65c <__b2d+0xa0>)
 800b5e2:	dc17      	bgt.n	800b614 <__b2d+0x58>
 800b5e4:	45c1      	cmp	r9, r8
 800b5e6:	bf28      	it	cs
 800b5e8:	2200      	movcs	r2, #0
 800b5ea:	f1c0 0c0b 	rsb	ip, r0, #11
 800b5ee:	fa26 f30c 	lsr.w	r3, r6, ip
 800b5f2:	bf38      	it	cc
 800b5f4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b5f8:	ea43 0501 	orr.w	r5, r3, r1
 800b5fc:	f100 0315 	add.w	r3, r0, #21
 800b600:	fa06 f303 	lsl.w	r3, r6, r3
 800b604:	fa22 f20c 	lsr.w	r2, r2, ip
 800b608:	ea43 0402 	orr.w	r4, r3, r2
 800b60c:	4620      	mov	r0, r4
 800b60e:	4629      	mov	r1, r5
 800b610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b614:	45c1      	cmp	r9, r8
 800b616:	bf3a      	itte	cc
 800b618:	f1a7 0808 	subcc.w	r8, r7, #8
 800b61c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b620:	2200      	movcs	r2, #0
 800b622:	f1b0 030b 	subs.w	r3, r0, #11
 800b626:	d015      	beq.n	800b654 <__b2d+0x98>
 800b628:	409e      	lsls	r6, r3
 800b62a:	f1c3 0720 	rsb	r7, r3, #32
 800b62e:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800b632:	fa22 f107 	lsr.w	r1, r2, r7
 800b636:	45c8      	cmp	r8, r9
 800b638:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800b63c:	ea46 0501 	orr.w	r5, r6, r1
 800b640:	bf94      	ite	ls
 800b642:	2100      	movls	r1, #0
 800b644:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b648:	fa02 f003 	lsl.w	r0, r2, r3
 800b64c:	40f9      	lsrs	r1, r7
 800b64e:	ea40 0401 	orr.w	r4, r0, r1
 800b652:	e7db      	b.n	800b60c <__b2d+0x50>
 800b654:	ea46 0501 	orr.w	r5, r6, r1
 800b658:	4614      	mov	r4, r2
 800b65a:	e7d7      	b.n	800b60c <__b2d+0x50>
 800b65c:	3ff00000 	.word	0x3ff00000

0800b660 <__d2b>:
 800b660:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b664:	461c      	mov	r4, r3
 800b666:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800b66a:	2101      	movs	r1, #1
 800b66c:	4690      	mov	r8, r2
 800b66e:	f7ff fcb7 	bl	800afe0 <_Balloc>
 800b672:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800b676:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b67a:	4607      	mov	r7, r0
 800b67c:	bb34      	cbnz	r4, 800b6cc <__d2b+0x6c>
 800b67e:	9201      	str	r2, [sp, #4]
 800b680:	f1b8 0200 	subs.w	r2, r8, #0
 800b684:	d027      	beq.n	800b6d6 <__d2b+0x76>
 800b686:	a802      	add	r0, sp, #8
 800b688:	f840 2d08 	str.w	r2, [r0, #-8]!
 800b68c:	f7ff fd8b 	bl	800b1a6 <__lo0bits>
 800b690:	9900      	ldr	r1, [sp, #0]
 800b692:	b1f0      	cbz	r0, 800b6d2 <__d2b+0x72>
 800b694:	9a01      	ldr	r2, [sp, #4]
 800b696:	f1c0 0320 	rsb	r3, r0, #32
 800b69a:	fa02 f303 	lsl.w	r3, r2, r3
 800b69e:	430b      	orrs	r3, r1
 800b6a0:	40c2      	lsrs	r2, r0
 800b6a2:	617b      	str	r3, [r7, #20]
 800b6a4:	9201      	str	r2, [sp, #4]
 800b6a6:	9b01      	ldr	r3, [sp, #4]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	bf14      	ite	ne
 800b6ac:	2102      	movne	r1, #2
 800b6ae:	2101      	moveq	r1, #1
 800b6b0:	61bb      	str	r3, [r7, #24]
 800b6b2:	6139      	str	r1, [r7, #16]
 800b6b4:	b1c4      	cbz	r4, 800b6e8 <__d2b+0x88>
 800b6b6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b6ba:	4404      	add	r4, r0
 800b6bc:	6034      	str	r4, [r6, #0]
 800b6be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b6c2:	6028      	str	r0, [r5, #0]
 800b6c4:	4638      	mov	r0, r7
 800b6c6:	b002      	add	sp, #8
 800b6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6cc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b6d0:	e7d5      	b.n	800b67e <__d2b+0x1e>
 800b6d2:	6179      	str	r1, [r7, #20]
 800b6d4:	e7e7      	b.n	800b6a6 <__d2b+0x46>
 800b6d6:	a801      	add	r0, sp, #4
 800b6d8:	f7ff fd65 	bl	800b1a6 <__lo0bits>
 800b6dc:	2101      	movs	r1, #1
 800b6de:	9b01      	ldr	r3, [sp, #4]
 800b6e0:	6139      	str	r1, [r7, #16]
 800b6e2:	617b      	str	r3, [r7, #20]
 800b6e4:	3020      	adds	r0, #32
 800b6e6:	e7e5      	b.n	800b6b4 <__d2b+0x54>
 800b6e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b6ec:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b6f0:	6030      	str	r0, [r6, #0]
 800b6f2:	6918      	ldr	r0, [r3, #16]
 800b6f4:	f7ff fd38 	bl	800b168 <__hi0bits>
 800b6f8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b6fc:	e7e1      	b.n	800b6c2 <__d2b+0x62>

0800b6fe <__ratio>:
 800b6fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b702:	4688      	mov	r8, r1
 800b704:	4669      	mov	r1, sp
 800b706:	4681      	mov	r9, r0
 800b708:	f7ff ff58 	bl	800b5bc <__b2d>
 800b70c:	468b      	mov	fp, r1
 800b70e:	4606      	mov	r6, r0
 800b710:	460f      	mov	r7, r1
 800b712:	4640      	mov	r0, r8
 800b714:	a901      	add	r1, sp, #4
 800b716:	f7ff ff51 	bl	800b5bc <__b2d>
 800b71a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b71e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b722:	460d      	mov	r5, r1
 800b724:	eba3 0c02 	sub.w	ip, r3, r2
 800b728:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b72c:	1a9b      	subs	r3, r3, r2
 800b72e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b732:	2b00      	cmp	r3, #0
 800b734:	bfd5      	itete	le
 800b736:	460a      	movle	r2, r1
 800b738:	463a      	movgt	r2, r7
 800b73a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b73e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b742:	bfd8      	it	le
 800b744:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800b748:	462b      	mov	r3, r5
 800b74a:	4602      	mov	r2, r0
 800b74c:	4659      	mov	r1, fp
 800b74e:	4630      	mov	r0, r6
 800b750:	f7f4 ffec 	bl	800072c <__aeabi_ddiv>
 800b754:	b003      	add	sp, #12
 800b756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b75a <__copybits>:
 800b75a:	3901      	subs	r1, #1
 800b75c:	b510      	push	{r4, lr}
 800b75e:	1149      	asrs	r1, r1, #5
 800b760:	6914      	ldr	r4, [r2, #16]
 800b762:	3101      	adds	r1, #1
 800b764:	f102 0314 	add.w	r3, r2, #20
 800b768:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b76c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b770:	42a3      	cmp	r3, r4
 800b772:	4602      	mov	r2, r0
 800b774:	d303      	bcc.n	800b77e <__copybits+0x24>
 800b776:	2300      	movs	r3, #0
 800b778:	428a      	cmp	r2, r1
 800b77a:	d305      	bcc.n	800b788 <__copybits+0x2e>
 800b77c:	bd10      	pop	{r4, pc}
 800b77e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b782:	f840 2b04 	str.w	r2, [r0], #4
 800b786:	e7f3      	b.n	800b770 <__copybits+0x16>
 800b788:	f842 3b04 	str.w	r3, [r2], #4
 800b78c:	e7f4      	b.n	800b778 <__copybits+0x1e>

0800b78e <__any_on>:
 800b78e:	f100 0214 	add.w	r2, r0, #20
 800b792:	6900      	ldr	r0, [r0, #16]
 800b794:	114b      	asrs	r3, r1, #5
 800b796:	4298      	cmp	r0, r3
 800b798:	b510      	push	{r4, lr}
 800b79a:	db11      	blt.n	800b7c0 <__any_on+0x32>
 800b79c:	dd0a      	ble.n	800b7b4 <__any_on+0x26>
 800b79e:	f011 011f 	ands.w	r1, r1, #31
 800b7a2:	d007      	beq.n	800b7b4 <__any_on+0x26>
 800b7a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b7a8:	fa24 f001 	lsr.w	r0, r4, r1
 800b7ac:	fa00 f101 	lsl.w	r1, r0, r1
 800b7b0:	428c      	cmp	r4, r1
 800b7b2:	d10b      	bne.n	800b7cc <__any_on+0x3e>
 800b7b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d803      	bhi.n	800b7c4 <__any_on+0x36>
 800b7bc:	2000      	movs	r0, #0
 800b7be:	bd10      	pop	{r4, pc}
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	e7f7      	b.n	800b7b4 <__any_on+0x26>
 800b7c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b7c8:	2900      	cmp	r1, #0
 800b7ca:	d0f5      	beq.n	800b7b8 <__any_on+0x2a>
 800b7cc:	2001      	movs	r0, #1
 800b7ce:	e7f6      	b.n	800b7be <__any_on+0x30>

0800b7d0 <_calloc_r>:
 800b7d0:	b538      	push	{r3, r4, r5, lr}
 800b7d2:	fb02 f401 	mul.w	r4, r2, r1
 800b7d6:	4621      	mov	r1, r4
 800b7d8:	f000 f808 	bl	800b7ec <_malloc_r>
 800b7dc:	4605      	mov	r5, r0
 800b7de:	b118      	cbz	r0, 800b7e8 <_calloc_r+0x18>
 800b7e0:	4622      	mov	r2, r4
 800b7e2:	2100      	movs	r1, #0
 800b7e4:	f7fe f93c 	bl	8009a60 <memset>
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	bd38      	pop	{r3, r4, r5, pc}

0800b7ec <_malloc_r>:
 800b7ec:	b570      	push	{r4, r5, r6, lr}
 800b7ee:	1ccd      	adds	r5, r1, #3
 800b7f0:	f025 0503 	bic.w	r5, r5, #3
 800b7f4:	3508      	adds	r5, #8
 800b7f6:	2d0c      	cmp	r5, #12
 800b7f8:	bf38      	it	cc
 800b7fa:	250c      	movcc	r5, #12
 800b7fc:	2d00      	cmp	r5, #0
 800b7fe:	4606      	mov	r6, r0
 800b800:	db01      	blt.n	800b806 <_malloc_r+0x1a>
 800b802:	42a9      	cmp	r1, r5
 800b804:	d903      	bls.n	800b80e <_malloc_r+0x22>
 800b806:	230c      	movs	r3, #12
 800b808:	6033      	str	r3, [r6, #0]
 800b80a:	2000      	movs	r0, #0
 800b80c:	bd70      	pop	{r4, r5, r6, pc}
 800b80e:	f000 fcab 	bl	800c168 <__malloc_lock>
 800b812:	4a21      	ldr	r2, [pc, #132]	; (800b898 <_malloc_r+0xac>)
 800b814:	6814      	ldr	r4, [r2, #0]
 800b816:	4621      	mov	r1, r4
 800b818:	b991      	cbnz	r1, 800b840 <_malloc_r+0x54>
 800b81a:	4c20      	ldr	r4, [pc, #128]	; (800b89c <_malloc_r+0xb0>)
 800b81c:	6823      	ldr	r3, [r4, #0]
 800b81e:	b91b      	cbnz	r3, 800b828 <_malloc_r+0x3c>
 800b820:	4630      	mov	r0, r6
 800b822:	f000 fb65 	bl	800bef0 <_sbrk_r>
 800b826:	6020      	str	r0, [r4, #0]
 800b828:	4629      	mov	r1, r5
 800b82a:	4630      	mov	r0, r6
 800b82c:	f000 fb60 	bl	800bef0 <_sbrk_r>
 800b830:	1c43      	adds	r3, r0, #1
 800b832:	d124      	bne.n	800b87e <_malloc_r+0x92>
 800b834:	230c      	movs	r3, #12
 800b836:	4630      	mov	r0, r6
 800b838:	6033      	str	r3, [r6, #0]
 800b83a:	f000 fc96 	bl	800c16a <__malloc_unlock>
 800b83e:	e7e4      	b.n	800b80a <_malloc_r+0x1e>
 800b840:	680b      	ldr	r3, [r1, #0]
 800b842:	1b5b      	subs	r3, r3, r5
 800b844:	d418      	bmi.n	800b878 <_malloc_r+0x8c>
 800b846:	2b0b      	cmp	r3, #11
 800b848:	d90f      	bls.n	800b86a <_malloc_r+0x7e>
 800b84a:	600b      	str	r3, [r1, #0]
 800b84c:	18cc      	adds	r4, r1, r3
 800b84e:	50cd      	str	r5, [r1, r3]
 800b850:	4630      	mov	r0, r6
 800b852:	f000 fc8a 	bl	800c16a <__malloc_unlock>
 800b856:	f104 000b 	add.w	r0, r4, #11
 800b85a:	1d23      	adds	r3, r4, #4
 800b85c:	f020 0007 	bic.w	r0, r0, #7
 800b860:	1ac3      	subs	r3, r0, r3
 800b862:	d0d3      	beq.n	800b80c <_malloc_r+0x20>
 800b864:	425a      	negs	r2, r3
 800b866:	50e2      	str	r2, [r4, r3]
 800b868:	e7d0      	b.n	800b80c <_malloc_r+0x20>
 800b86a:	684b      	ldr	r3, [r1, #4]
 800b86c:	428c      	cmp	r4, r1
 800b86e:	bf16      	itet	ne
 800b870:	6063      	strne	r3, [r4, #4]
 800b872:	6013      	streq	r3, [r2, #0]
 800b874:	460c      	movne	r4, r1
 800b876:	e7eb      	b.n	800b850 <_malloc_r+0x64>
 800b878:	460c      	mov	r4, r1
 800b87a:	6849      	ldr	r1, [r1, #4]
 800b87c:	e7cc      	b.n	800b818 <_malloc_r+0x2c>
 800b87e:	1cc4      	adds	r4, r0, #3
 800b880:	f024 0403 	bic.w	r4, r4, #3
 800b884:	42a0      	cmp	r0, r4
 800b886:	d005      	beq.n	800b894 <_malloc_r+0xa8>
 800b888:	1a21      	subs	r1, r4, r0
 800b88a:	4630      	mov	r0, r6
 800b88c:	f000 fb30 	bl	800bef0 <_sbrk_r>
 800b890:	3001      	adds	r0, #1
 800b892:	d0cf      	beq.n	800b834 <_malloc_r+0x48>
 800b894:	6025      	str	r5, [r4, #0]
 800b896:	e7db      	b.n	800b850 <_malloc_r+0x64>
 800b898:	200019cc 	.word	0x200019cc
 800b89c:	200019d0 	.word	0x200019d0

0800b8a0 <_realloc_r>:
 800b8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8a2:	4607      	mov	r7, r0
 800b8a4:	4614      	mov	r4, r2
 800b8a6:	460e      	mov	r6, r1
 800b8a8:	b921      	cbnz	r1, 800b8b4 <_realloc_r+0x14>
 800b8aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b8ae:	4611      	mov	r1, r2
 800b8b0:	f7ff bf9c 	b.w	800b7ec <_malloc_r>
 800b8b4:	b922      	cbnz	r2, 800b8c0 <_realloc_r+0x20>
 800b8b6:	f000 fc59 	bl	800c16c <_free_r>
 800b8ba:	4625      	mov	r5, r4
 800b8bc:	4628      	mov	r0, r5
 800b8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8c0:	f000 fca0 	bl	800c204 <_malloc_usable_size_r>
 800b8c4:	42a0      	cmp	r0, r4
 800b8c6:	d20f      	bcs.n	800b8e8 <_realloc_r+0x48>
 800b8c8:	4621      	mov	r1, r4
 800b8ca:	4638      	mov	r0, r7
 800b8cc:	f7ff ff8e 	bl	800b7ec <_malloc_r>
 800b8d0:	4605      	mov	r5, r0
 800b8d2:	2800      	cmp	r0, #0
 800b8d4:	d0f2      	beq.n	800b8bc <_realloc_r+0x1c>
 800b8d6:	4631      	mov	r1, r6
 800b8d8:	4622      	mov	r2, r4
 800b8da:	f7fe f8b6 	bl	8009a4a <memcpy>
 800b8de:	4631      	mov	r1, r6
 800b8e0:	4638      	mov	r0, r7
 800b8e2:	f000 fc43 	bl	800c16c <_free_r>
 800b8e6:	e7e9      	b.n	800b8bc <_realloc_r+0x1c>
 800b8e8:	4635      	mov	r5, r6
 800b8ea:	e7e7      	b.n	800b8bc <_realloc_r+0x1c>

0800b8ec <_sungetc_r>:
 800b8ec:	b538      	push	{r3, r4, r5, lr}
 800b8ee:	1c4b      	adds	r3, r1, #1
 800b8f0:	4614      	mov	r4, r2
 800b8f2:	d103      	bne.n	800b8fc <_sungetc_r+0x10>
 800b8f4:	f04f 35ff 	mov.w	r5, #4294967295
 800b8f8:	4628      	mov	r0, r5
 800b8fa:	bd38      	pop	{r3, r4, r5, pc}
 800b8fc:	8993      	ldrh	r3, [r2, #12]
 800b8fe:	b2cd      	uxtb	r5, r1
 800b900:	f023 0320 	bic.w	r3, r3, #32
 800b904:	8193      	strh	r3, [r2, #12]
 800b906:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b908:	6852      	ldr	r2, [r2, #4]
 800b90a:	b18b      	cbz	r3, 800b930 <_sungetc_r+0x44>
 800b90c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b90e:	4293      	cmp	r3, r2
 800b910:	dd08      	ble.n	800b924 <_sungetc_r+0x38>
 800b912:	6823      	ldr	r3, [r4, #0]
 800b914:	1e5a      	subs	r2, r3, #1
 800b916:	6022      	str	r2, [r4, #0]
 800b918:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b91c:	6863      	ldr	r3, [r4, #4]
 800b91e:	3301      	adds	r3, #1
 800b920:	6063      	str	r3, [r4, #4]
 800b922:	e7e9      	b.n	800b8f8 <_sungetc_r+0xc>
 800b924:	4621      	mov	r1, r4
 800b926:	f000 fbc3 	bl	800c0b0 <__submore>
 800b92a:	2800      	cmp	r0, #0
 800b92c:	d0f1      	beq.n	800b912 <_sungetc_r+0x26>
 800b92e:	e7e1      	b.n	800b8f4 <_sungetc_r+0x8>
 800b930:	6921      	ldr	r1, [r4, #16]
 800b932:	6823      	ldr	r3, [r4, #0]
 800b934:	b151      	cbz	r1, 800b94c <_sungetc_r+0x60>
 800b936:	4299      	cmp	r1, r3
 800b938:	d208      	bcs.n	800b94c <_sungetc_r+0x60>
 800b93a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b93e:	42a9      	cmp	r1, r5
 800b940:	d104      	bne.n	800b94c <_sungetc_r+0x60>
 800b942:	3b01      	subs	r3, #1
 800b944:	3201      	adds	r2, #1
 800b946:	6023      	str	r3, [r4, #0]
 800b948:	6062      	str	r2, [r4, #4]
 800b94a:	e7d5      	b.n	800b8f8 <_sungetc_r+0xc>
 800b94c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b954:	6363      	str	r3, [r4, #52]	; 0x34
 800b956:	2303      	movs	r3, #3
 800b958:	63a3      	str	r3, [r4, #56]	; 0x38
 800b95a:	4623      	mov	r3, r4
 800b95c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b960:	6023      	str	r3, [r4, #0]
 800b962:	2301      	movs	r3, #1
 800b964:	e7dc      	b.n	800b920 <_sungetc_r+0x34>

0800b966 <__ssrefill_r>:
 800b966:	b510      	push	{r4, lr}
 800b968:	460c      	mov	r4, r1
 800b96a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b96c:	b169      	cbz	r1, 800b98a <__ssrefill_r+0x24>
 800b96e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b972:	4299      	cmp	r1, r3
 800b974:	d001      	beq.n	800b97a <__ssrefill_r+0x14>
 800b976:	f000 fbf9 	bl	800c16c <_free_r>
 800b97a:	2000      	movs	r0, #0
 800b97c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b97e:	6360      	str	r0, [r4, #52]	; 0x34
 800b980:	6063      	str	r3, [r4, #4]
 800b982:	b113      	cbz	r3, 800b98a <__ssrefill_r+0x24>
 800b984:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b986:	6023      	str	r3, [r4, #0]
 800b988:	bd10      	pop	{r4, pc}
 800b98a:	6923      	ldr	r3, [r4, #16]
 800b98c:	f04f 30ff 	mov.w	r0, #4294967295
 800b990:	6023      	str	r3, [r4, #0]
 800b992:	2300      	movs	r3, #0
 800b994:	6063      	str	r3, [r4, #4]
 800b996:	89a3      	ldrh	r3, [r4, #12]
 800b998:	f043 0320 	orr.w	r3, r3, #32
 800b99c:	81a3      	strh	r3, [r4, #12]
 800b99e:	e7f3      	b.n	800b988 <__ssrefill_r+0x22>

0800b9a0 <__ssvfiscanf_r>:
 800b9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a4:	460c      	mov	r4, r1
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	4606      	mov	r6, r0
 800b9aa:	4692      	mov	sl, r2
 800b9ac:	270a      	movs	r7, #10
 800b9ae:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800b9b2:	9144      	str	r1, [sp, #272]	; 0x110
 800b9b4:	9145      	str	r1, [sp, #276]	; 0x114
 800b9b6:	499e      	ldr	r1, [pc, #632]	; (800bc30 <__ssvfiscanf_r+0x290>)
 800b9b8:	f10d 0804 	add.w	r8, sp, #4
 800b9bc:	91a0      	str	r1, [sp, #640]	; 0x280
 800b9be:	499d      	ldr	r1, [pc, #628]	; (800bc34 <__ssvfiscanf_r+0x294>)
 800b9c0:	f8df 9274 	ldr.w	r9, [pc, #628]	; 800bc38 <__ssvfiscanf_r+0x298>
 800b9c4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b9c8:	91a1      	str	r1, [sp, #644]	; 0x284
 800b9ca:	9300      	str	r3, [sp, #0]
 800b9cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	f000 812a 	beq.w	800bc2a <__ssvfiscanf_r+0x28a>
 800b9d6:	4655      	mov	r5, sl
 800b9d8:	f7ff fae0 	bl	800af9c <__locale_ctype_ptr>
 800b9dc:	f815 bb01 	ldrb.w	fp, [r5], #1
 800b9e0:	4458      	add	r0, fp
 800b9e2:	7843      	ldrb	r3, [r0, #1]
 800b9e4:	f013 0308 	ands.w	r3, r3, #8
 800b9e8:	d01c      	beq.n	800ba24 <__ssvfiscanf_r+0x84>
 800b9ea:	6863      	ldr	r3, [r4, #4]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	dd12      	ble.n	800ba16 <__ssvfiscanf_r+0x76>
 800b9f0:	f7ff fad4 	bl	800af9c <__locale_ctype_ptr>
 800b9f4:	6823      	ldr	r3, [r4, #0]
 800b9f6:	781a      	ldrb	r2, [r3, #0]
 800b9f8:	4410      	add	r0, r2
 800b9fa:	7842      	ldrb	r2, [r0, #1]
 800b9fc:	0712      	lsls	r2, r2, #28
 800b9fe:	d401      	bmi.n	800ba04 <__ssvfiscanf_r+0x64>
 800ba00:	46aa      	mov	sl, r5
 800ba02:	e7e3      	b.n	800b9cc <__ssvfiscanf_r+0x2c>
 800ba04:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ba06:	3301      	adds	r3, #1
 800ba08:	3201      	adds	r2, #1
 800ba0a:	9245      	str	r2, [sp, #276]	; 0x114
 800ba0c:	6862      	ldr	r2, [r4, #4]
 800ba0e:	6023      	str	r3, [r4, #0]
 800ba10:	3a01      	subs	r2, #1
 800ba12:	6062      	str	r2, [r4, #4]
 800ba14:	e7e9      	b.n	800b9ea <__ssvfiscanf_r+0x4a>
 800ba16:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ba18:	4621      	mov	r1, r4
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	4798      	blx	r3
 800ba1e:	2800      	cmp	r0, #0
 800ba20:	d0e6      	beq.n	800b9f0 <__ssvfiscanf_r+0x50>
 800ba22:	e7ed      	b.n	800ba00 <__ssvfiscanf_r+0x60>
 800ba24:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800ba28:	f040 8082 	bne.w	800bb30 <__ssvfiscanf_r+0x190>
 800ba2c:	9343      	str	r3, [sp, #268]	; 0x10c
 800ba2e:	9341      	str	r3, [sp, #260]	; 0x104
 800ba30:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800ba34:	2b2a      	cmp	r3, #42	; 0x2a
 800ba36:	d103      	bne.n	800ba40 <__ssvfiscanf_r+0xa0>
 800ba38:	2310      	movs	r3, #16
 800ba3a:	f10a 0502 	add.w	r5, sl, #2
 800ba3e:	9341      	str	r3, [sp, #260]	; 0x104
 800ba40:	46aa      	mov	sl, r5
 800ba42:	f815 1b01 	ldrb.w	r1, [r5], #1
 800ba46:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ba4a:	2a09      	cmp	r2, #9
 800ba4c:	d922      	bls.n	800ba94 <__ssvfiscanf_r+0xf4>
 800ba4e:	2203      	movs	r2, #3
 800ba50:	4879      	ldr	r0, [pc, #484]	; (800bc38 <__ssvfiscanf_r+0x298>)
 800ba52:	f000 fb7b 	bl	800c14c <memchr>
 800ba56:	b138      	cbz	r0, 800ba68 <__ssvfiscanf_r+0xc8>
 800ba58:	eba0 0309 	sub.w	r3, r0, r9
 800ba5c:	2001      	movs	r0, #1
 800ba5e:	46aa      	mov	sl, r5
 800ba60:	4098      	lsls	r0, r3
 800ba62:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ba64:	4318      	orrs	r0, r3
 800ba66:	9041      	str	r0, [sp, #260]	; 0x104
 800ba68:	f89a 3000 	ldrb.w	r3, [sl]
 800ba6c:	f10a 0501 	add.w	r5, sl, #1
 800ba70:	2b67      	cmp	r3, #103	; 0x67
 800ba72:	d82b      	bhi.n	800bacc <__ssvfiscanf_r+0x12c>
 800ba74:	2b65      	cmp	r3, #101	; 0x65
 800ba76:	f080 809f 	bcs.w	800bbb8 <__ssvfiscanf_r+0x218>
 800ba7a:	2b47      	cmp	r3, #71	; 0x47
 800ba7c:	d810      	bhi.n	800baa0 <__ssvfiscanf_r+0x100>
 800ba7e:	2b45      	cmp	r3, #69	; 0x45
 800ba80:	f080 809a 	bcs.w	800bbb8 <__ssvfiscanf_r+0x218>
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d06c      	beq.n	800bb62 <__ssvfiscanf_r+0x1c2>
 800ba88:	2b25      	cmp	r3, #37	; 0x25
 800ba8a:	d051      	beq.n	800bb30 <__ssvfiscanf_r+0x190>
 800ba8c:	2303      	movs	r3, #3
 800ba8e:	9742      	str	r7, [sp, #264]	; 0x108
 800ba90:	9347      	str	r3, [sp, #284]	; 0x11c
 800ba92:	e027      	b.n	800bae4 <__ssvfiscanf_r+0x144>
 800ba94:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ba96:	fb07 1303 	mla	r3, r7, r3, r1
 800ba9a:	3b30      	subs	r3, #48	; 0x30
 800ba9c:	9343      	str	r3, [sp, #268]	; 0x10c
 800ba9e:	e7cf      	b.n	800ba40 <__ssvfiscanf_r+0xa0>
 800baa0:	2b5b      	cmp	r3, #91	; 0x5b
 800baa2:	d06a      	beq.n	800bb7a <__ssvfiscanf_r+0x1da>
 800baa4:	d80c      	bhi.n	800bac0 <__ssvfiscanf_r+0x120>
 800baa6:	2b58      	cmp	r3, #88	; 0x58
 800baa8:	d1f0      	bne.n	800ba8c <__ssvfiscanf_r+0xec>
 800baaa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800baac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bab0:	9241      	str	r2, [sp, #260]	; 0x104
 800bab2:	2210      	movs	r2, #16
 800bab4:	9242      	str	r2, [sp, #264]	; 0x108
 800bab6:	2b6e      	cmp	r3, #110	; 0x6e
 800bab8:	bf8c      	ite	hi
 800baba:	2304      	movhi	r3, #4
 800babc:	2303      	movls	r3, #3
 800babe:	e010      	b.n	800bae2 <__ssvfiscanf_r+0x142>
 800bac0:	2b63      	cmp	r3, #99	; 0x63
 800bac2:	d065      	beq.n	800bb90 <__ssvfiscanf_r+0x1f0>
 800bac4:	2b64      	cmp	r3, #100	; 0x64
 800bac6:	d1e1      	bne.n	800ba8c <__ssvfiscanf_r+0xec>
 800bac8:	9742      	str	r7, [sp, #264]	; 0x108
 800baca:	e7f4      	b.n	800bab6 <__ssvfiscanf_r+0x116>
 800bacc:	2b70      	cmp	r3, #112	; 0x70
 800bace:	d04b      	beq.n	800bb68 <__ssvfiscanf_r+0x1c8>
 800bad0:	d826      	bhi.n	800bb20 <__ssvfiscanf_r+0x180>
 800bad2:	2b6e      	cmp	r3, #110	; 0x6e
 800bad4:	d062      	beq.n	800bb9c <__ssvfiscanf_r+0x1fc>
 800bad6:	d84c      	bhi.n	800bb72 <__ssvfiscanf_r+0x1d2>
 800bad8:	2b69      	cmp	r3, #105	; 0x69
 800bada:	d1d7      	bne.n	800ba8c <__ssvfiscanf_r+0xec>
 800badc:	2300      	movs	r3, #0
 800bade:	9342      	str	r3, [sp, #264]	; 0x108
 800bae0:	2303      	movs	r3, #3
 800bae2:	9347      	str	r3, [sp, #284]	; 0x11c
 800bae4:	6863      	ldr	r3, [r4, #4]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	dd68      	ble.n	800bbbc <__ssvfiscanf_r+0x21c>
 800baea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800baec:	0659      	lsls	r1, r3, #25
 800baee:	d407      	bmi.n	800bb00 <__ssvfiscanf_r+0x160>
 800baf0:	f7ff fa54 	bl	800af9c <__locale_ctype_ptr>
 800baf4:	6823      	ldr	r3, [r4, #0]
 800baf6:	781a      	ldrb	r2, [r3, #0]
 800baf8:	4410      	add	r0, r2
 800bafa:	7842      	ldrb	r2, [r0, #1]
 800bafc:	0712      	lsls	r2, r2, #28
 800bafe:	d464      	bmi.n	800bbca <__ssvfiscanf_r+0x22a>
 800bb00:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bb02:	2b02      	cmp	r3, #2
 800bb04:	dc73      	bgt.n	800bbee <__ssvfiscanf_r+0x24e>
 800bb06:	466b      	mov	r3, sp
 800bb08:	4622      	mov	r2, r4
 800bb0a:	a941      	add	r1, sp, #260	; 0x104
 800bb0c:	4630      	mov	r0, r6
 800bb0e:	f000 f897 	bl	800bc40 <_scanf_chars>
 800bb12:	2801      	cmp	r0, #1
 800bb14:	f000 8089 	beq.w	800bc2a <__ssvfiscanf_r+0x28a>
 800bb18:	2802      	cmp	r0, #2
 800bb1a:	f47f af71 	bne.w	800ba00 <__ssvfiscanf_r+0x60>
 800bb1e:	e01d      	b.n	800bb5c <__ssvfiscanf_r+0x1bc>
 800bb20:	2b75      	cmp	r3, #117	; 0x75
 800bb22:	d0d1      	beq.n	800bac8 <__ssvfiscanf_r+0x128>
 800bb24:	2b78      	cmp	r3, #120	; 0x78
 800bb26:	d0c0      	beq.n	800baaa <__ssvfiscanf_r+0x10a>
 800bb28:	2b73      	cmp	r3, #115	; 0x73
 800bb2a:	d1af      	bne.n	800ba8c <__ssvfiscanf_r+0xec>
 800bb2c:	2302      	movs	r3, #2
 800bb2e:	e7d8      	b.n	800bae2 <__ssvfiscanf_r+0x142>
 800bb30:	6863      	ldr	r3, [r4, #4]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	dd0c      	ble.n	800bb50 <__ssvfiscanf_r+0x1b0>
 800bb36:	6823      	ldr	r3, [r4, #0]
 800bb38:	781a      	ldrb	r2, [r3, #0]
 800bb3a:	455a      	cmp	r2, fp
 800bb3c:	d175      	bne.n	800bc2a <__ssvfiscanf_r+0x28a>
 800bb3e:	3301      	adds	r3, #1
 800bb40:	6862      	ldr	r2, [r4, #4]
 800bb42:	6023      	str	r3, [r4, #0]
 800bb44:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bb46:	3a01      	subs	r2, #1
 800bb48:	3301      	adds	r3, #1
 800bb4a:	6062      	str	r2, [r4, #4]
 800bb4c:	9345      	str	r3, [sp, #276]	; 0x114
 800bb4e:	e757      	b.n	800ba00 <__ssvfiscanf_r+0x60>
 800bb50:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bb52:	4621      	mov	r1, r4
 800bb54:	4630      	mov	r0, r6
 800bb56:	4798      	blx	r3
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	d0ec      	beq.n	800bb36 <__ssvfiscanf_r+0x196>
 800bb5c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	d159      	bne.n	800bc16 <__ssvfiscanf_r+0x276>
 800bb62:	f04f 30ff 	mov.w	r0, #4294967295
 800bb66:	e05c      	b.n	800bc22 <__ssvfiscanf_r+0x282>
 800bb68:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bb6a:	f042 0220 	orr.w	r2, r2, #32
 800bb6e:	9241      	str	r2, [sp, #260]	; 0x104
 800bb70:	e79b      	b.n	800baaa <__ssvfiscanf_r+0x10a>
 800bb72:	2308      	movs	r3, #8
 800bb74:	9342      	str	r3, [sp, #264]	; 0x108
 800bb76:	2304      	movs	r3, #4
 800bb78:	e7b3      	b.n	800bae2 <__ssvfiscanf_r+0x142>
 800bb7a:	4629      	mov	r1, r5
 800bb7c:	4640      	mov	r0, r8
 800bb7e:	f000 f9c7 	bl	800bf10 <__sccl>
 800bb82:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bb84:	4605      	mov	r5, r0
 800bb86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb8a:	9341      	str	r3, [sp, #260]	; 0x104
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e7a8      	b.n	800bae2 <__ssvfiscanf_r+0x142>
 800bb90:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bb92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb96:	9341      	str	r3, [sp, #260]	; 0x104
 800bb98:	2300      	movs	r3, #0
 800bb9a:	e7a2      	b.n	800bae2 <__ssvfiscanf_r+0x142>
 800bb9c:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bb9e:	06c3      	lsls	r3, r0, #27
 800bba0:	f53f af2e 	bmi.w	800ba00 <__ssvfiscanf_r+0x60>
 800bba4:	9b00      	ldr	r3, [sp, #0]
 800bba6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bba8:	1d19      	adds	r1, r3, #4
 800bbaa:	9100      	str	r1, [sp, #0]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	07c0      	lsls	r0, r0, #31
 800bbb0:	bf4c      	ite	mi
 800bbb2:	801a      	strhmi	r2, [r3, #0]
 800bbb4:	601a      	strpl	r2, [r3, #0]
 800bbb6:	e723      	b.n	800ba00 <__ssvfiscanf_r+0x60>
 800bbb8:	2305      	movs	r3, #5
 800bbba:	e792      	b.n	800bae2 <__ssvfiscanf_r+0x142>
 800bbbc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bbbe:	4621      	mov	r1, r4
 800bbc0:	4630      	mov	r0, r6
 800bbc2:	4798      	blx	r3
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	d090      	beq.n	800baea <__ssvfiscanf_r+0x14a>
 800bbc8:	e7c8      	b.n	800bb5c <__ssvfiscanf_r+0x1bc>
 800bbca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bbcc:	3201      	adds	r2, #1
 800bbce:	9245      	str	r2, [sp, #276]	; 0x114
 800bbd0:	6862      	ldr	r2, [r4, #4]
 800bbd2:	3a01      	subs	r2, #1
 800bbd4:	2a00      	cmp	r2, #0
 800bbd6:	6062      	str	r2, [r4, #4]
 800bbd8:	dd02      	ble.n	800bbe0 <__ssvfiscanf_r+0x240>
 800bbda:	3301      	adds	r3, #1
 800bbdc:	6023      	str	r3, [r4, #0]
 800bbde:	e787      	b.n	800baf0 <__ssvfiscanf_r+0x150>
 800bbe0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bbe2:	4621      	mov	r1, r4
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	4798      	blx	r3
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	d081      	beq.n	800baf0 <__ssvfiscanf_r+0x150>
 800bbec:	e7b6      	b.n	800bb5c <__ssvfiscanf_r+0x1bc>
 800bbee:	2b04      	cmp	r3, #4
 800bbf0:	dc06      	bgt.n	800bc00 <__ssvfiscanf_r+0x260>
 800bbf2:	466b      	mov	r3, sp
 800bbf4:	4622      	mov	r2, r4
 800bbf6:	a941      	add	r1, sp, #260	; 0x104
 800bbf8:	4630      	mov	r0, r6
 800bbfa:	f000 f883 	bl	800bd04 <_scanf_i>
 800bbfe:	e788      	b.n	800bb12 <__ssvfiscanf_r+0x172>
 800bc00:	4b0e      	ldr	r3, [pc, #56]	; (800bc3c <__ssvfiscanf_r+0x29c>)
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	f43f aefc 	beq.w	800ba00 <__ssvfiscanf_r+0x60>
 800bc08:	466b      	mov	r3, sp
 800bc0a:	4622      	mov	r2, r4
 800bc0c:	a941      	add	r1, sp, #260	; 0x104
 800bc0e:	4630      	mov	r0, r6
 800bc10:	f3af 8000 	nop.w
 800bc14:	e77d      	b.n	800bb12 <__ssvfiscanf_r+0x172>
 800bc16:	89a3      	ldrh	r3, [r4, #12]
 800bc18:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bc1c:	bf18      	it	ne
 800bc1e:	f04f 30ff 	movne.w	r0, #4294967295
 800bc22:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800bc26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc2a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bc2c:	e7f9      	b.n	800bc22 <__ssvfiscanf_r+0x282>
 800bc2e:	bf00      	nop
 800bc30:	0800b8ed 	.word	0x0800b8ed
 800bc34:	0800b967 	.word	0x0800b967
 800bc38:	0800d5cc 	.word	0x0800d5cc
 800bc3c:	00000000 	.word	0x00000000

0800bc40 <_scanf_chars>:
 800bc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc44:	4615      	mov	r5, r2
 800bc46:	688a      	ldr	r2, [r1, #8]
 800bc48:	4680      	mov	r8, r0
 800bc4a:	460c      	mov	r4, r1
 800bc4c:	b932      	cbnz	r2, 800bc5c <_scanf_chars+0x1c>
 800bc4e:	698a      	ldr	r2, [r1, #24]
 800bc50:	2a00      	cmp	r2, #0
 800bc52:	bf14      	ite	ne
 800bc54:	f04f 32ff 	movne.w	r2, #4294967295
 800bc58:	2201      	moveq	r2, #1
 800bc5a:	608a      	str	r2, [r1, #8]
 800bc5c:	2600      	movs	r6, #0
 800bc5e:	6822      	ldr	r2, [r4, #0]
 800bc60:	06d1      	lsls	r1, r2, #27
 800bc62:	bf5f      	itttt	pl
 800bc64:	681a      	ldrpl	r2, [r3, #0]
 800bc66:	1d11      	addpl	r1, r2, #4
 800bc68:	6019      	strpl	r1, [r3, #0]
 800bc6a:	6817      	ldrpl	r7, [r2, #0]
 800bc6c:	69a3      	ldr	r3, [r4, #24]
 800bc6e:	b1db      	cbz	r3, 800bca8 <_scanf_chars+0x68>
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d107      	bne.n	800bc84 <_scanf_chars+0x44>
 800bc74:	682b      	ldr	r3, [r5, #0]
 800bc76:	6962      	ldr	r2, [r4, #20]
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	5cd3      	ldrb	r3, [r2, r3]
 800bc7c:	b9a3      	cbnz	r3, 800bca8 <_scanf_chars+0x68>
 800bc7e:	2e00      	cmp	r6, #0
 800bc80:	d131      	bne.n	800bce6 <_scanf_chars+0xa6>
 800bc82:	e006      	b.n	800bc92 <_scanf_chars+0x52>
 800bc84:	2b02      	cmp	r3, #2
 800bc86:	d007      	beq.n	800bc98 <_scanf_chars+0x58>
 800bc88:	2e00      	cmp	r6, #0
 800bc8a:	d12c      	bne.n	800bce6 <_scanf_chars+0xa6>
 800bc8c:	69a3      	ldr	r3, [r4, #24]
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	d129      	bne.n	800bce6 <_scanf_chars+0xa6>
 800bc92:	2001      	movs	r0, #1
 800bc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc98:	f7ff f980 	bl	800af9c <__locale_ctype_ptr>
 800bc9c:	682b      	ldr	r3, [r5, #0]
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	4418      	add	r0, r3
 800bca2:	7843      	ldrb	r3, [r0, #1]
 800bca4:	071b      	lsls	r3, r3, #28
 800bca6:	d4ef      	bmi.n	800bc88 <_scanf_chars+0x48>
 800bca8:	6823      	ldr	r3, [r4, #0]
 800bcaa:	3601      	adds	r6, #1
 800bcac:	06da      	lsls	r2, r3, #27
 800bcae:	bf5e      	ittt	pl
 800bcb0:	682b      	ldrpl	r3, [r5, #0]
 800bcb2:	781b      	ldrbpl	r3, [r3, #0]
 800bcb4:	703b      	strbpl	r3, [r7, #0]
 800bcb6:	682a      	ldr	r2, [r5, #0]
 800bcb8:	686b      	ldr	r3, [r5, #4]
 800bcba:	f102 0201 	add.w	r2, r2, #1
 800bcbe:	602a      	str	r2, [r5, #0]
 800bcc0:	68a2      	ldr	r2, [r4, #8]
 800bcc2:	f103 33ff 	add.w	r3, r3, #4294967295
 800bcc6:	f102 32ff 	add.w	r2, r2, #4294967295
 800bcca:	606b      	str	r3, [r5, #4]
 800bccc:	bf58      	it	pl
 800bcce:	3701      	addpl	r7, #1
 800bcd0:	60a2      	str	r2, [r4, #8]
 800bcd2:	b142      	cbz	r2, 800bce6 <_scanf_chars+0xa6>
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	dcc9      	bgt.n	800bc6c <_scanf_chars+0x2c>
 800bcd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bcdc:	4629      	mov	r1, r5
 800bcde:	4640      	mov	r0, r8
 800bce0:	4798      	blx	r3
 800bce2:	2800      	cmp	r0, #0
 800bce4:	d0c2      	beq.n	800bc6c <_scanf_chars+0x2c>
 800bce6:	6823      	ldr	r3, [r4, #0]
 800bce8:	f013 0310 	ands.w	r3, r3, #16
 800bcec:	d105      	bne.n	800bcfa <_scanf_chars+0xba>
 800bcee:	68e2      	ldr	r2, [r4, #12]
 800bcf0:	3201      	adds	r2, #1
 800bcf2:	60e2      	str	r2, [r4, #12]
 800bcf4:	69a2      	ldr	r2, [r4, #24]
 800bcf6:	b102      	cbz	r2, 800bcfa <_scanf_chars+0xba>
 800bcf8:	703b      	strb	r3, [r7, #0]
 800bcfa:	6923      	ldr	r3, [r4, #16]
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	441e      	add	r6, r3
 800bd00:	6126      	str	r6, [r4, #16]
 800bd02:	e7c7      	b.n	800bc94 <_scanf_chars+0x54>

0800bd04 <_scanf_i>:
 800bd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd08:	460c      	mov	r4, r1
 800bd0a:	469a      	mov	sl, r3
 800bd0c:	4b74      	ldr	r3, [pc, #464]	; (800bee0 <_scanf_i+0x1dc>)
 800bd0e:	b087      	sub	sp, #28
 800bd10:	4683      	mov	fp, r0
 800bd12:	4616      	mov	r6, r2
 800bd14:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bd18:	ab03      	add	r3, sp, #12
 800bd1a:	68a7      	ldr	r7, [r4, #8]
 800bd1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bd20:	4b70      	ldr	r3, [pc, #448]	; (800bee4 <_scanf_i+0x1e0>)
 800bd22:	69a1      	ldr	r1, [r4, #24]
 800bd24:	4a70      	ldr	r2, [pc, #448]	; (800bee8 <_scanf_i+0x1e4>)
 800bd26:	f104 091c 	add.w	r9, r4, #28
 800bd2a:	2903      	cmp	r1, #3
 800bd2c:	bf08      	it	eq
 800bd2e:	461a      	moveq	r2, r3
 800bd30:	1e7b      	subs	r3, r7, #1
 800bd32:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800bd36:	bf84      	itt	hi
 800bd38:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bd3c:	60a3      	strhi	r3, [r4, #8]
 800bd3e:	6823      	ldr	r3, [r4, #0]
 800bd40:	bf88      	it	hi
 800bd42:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bd46:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800bd4a:	6023      	str	r3, [r4, #0]
 800bd4c:	bf98      	it	ls
 800bd4e:	2700      	movls	r7, #0
 800bd50:	464b      	mov	r3, r9
 800bd52:	f04f 0800 	mov.w	r8, #0
 800bd56:	9200      	str	r2, [sp, #0]
 800bd58:	bf88      	it	hi
 800bd5a:	197f      	addhi	r7, r7, r5
 800bd5c:	6831      	ldr	r1, [r6, #0]
 800bd5e:	9301      	str	r3, [sp, #4]
 800bd60:	ab03      	add	r3, sp, #12
 800bd62:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bd66:	2202      	movs	r2, #2
 800bd68:	7809      	ldrb	r1, [r1, #0]
 800bd6a:	f000 f9ef 	bl	800c14c <memchr>
 800bd6e:	9b01      	ldr	r3, [sp, #4]
 800bd70:	b330      	cbz	r0, 800bdc0 <_scanf_i+0xbc>
 800bd72:	f1b8 0f01 	cmp.w	r8, #1
 800bd76:	d15a      	bne.n	800be2e <_scanf_i+0x12a>
 800bd78:	6862      	ldr	r2, [r4, #4]
 800bd7a:	b92a      	cbnz	r2, 800bd88 <_scanf_i+0x84>
 800bd7c:	2108      	movs	r1, #8
 800bd7e:	6822      	ldr	r2, [r4, #0]
 800bd80:	6061      	str	r1, [r4, #4]
 800bd82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd86:	6022      	str	r2, [r4, #0]
 800bd88:	6822      	ldr	r2, [r4, #0]
 800bd8a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800bd8e:	6022      	str	r2, [r4, #0]
 800bd90:	68a2      	ldr	r2, [r4, #8]
 800bd92:	1e51      	subs	r1, r2, #1
 800bd94:	60a1      	str	r1, [r4, #8]
 800bd96:	b19a      	cbz	r2, 800bdc0 <_scanf_i+0xbc>
 800bd98:	6832      	ldr	r2, [r6, #0]
 800bd9a:	1c5d      	adds	r5, r3, #1
 800bd9c:	1c51      	adds	r1, r2, #1
 800bd9e:	6031      	str	r1, [r6, #0]
 800bda0:	7812      	ldrb	r2, [r2, #0]
 800bda2:	701a      	strb	r2, [r3, #0]
 800bda4:	6873      	ldr	r3, [r6, #4]
 800bda6:	3b01      	subs	r3, #1
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	6073      	str	r3, [r6, #4]
 800bdac:	dc07      	bgt.n	800bdbe <_scanf_i+0xba>
 800bdae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bdb2:	4631      	mov	r1, r6
 800bdb4:	4658      	mov	r0, fp
 800bdb6:	4798      	blx	r3
 800bdb8:	2800      	cmp	r0, #0
 800bdba:	f040 8087 	bne.w	800becc <_scanf_i+0x1c8>
 800bdbe:	462b      	mov	r3, r5
 800bdc0:	f108 0801 	add.w	r8, r8, #1
 800bdc4:	f1b8 0f03 	cmp.w	r8, #3
 800bdc8:	d1c8      	bne.n	800bd5c <_scanf_i+0x58>
 800bdca:	6862      	ldr	r2, [r4, #4]
 800bdcc:	b90a      	cbnz	r2, 800bdd2 <_scanf_i+0xce>
 800bdce:	220a      	movs	r2, #10
 800bdd0:	6062      	str	r2, [r4, #4]
 800bdd2:	6862      	ldr	r2, [r4, #4]
 800bdd4:	4945      	ldr	r1, [pc, #276]	; (800beec <_scanf_i+0x1e8>)
 800bdd6:	6960      	ldr	r0, [r4, #20]
 800bdd8:	1a89      	subs	r1, r1, r2
 800bdda:	9301      	str	r3, [sp, #4]
 800bddc:	f000 f898 	bl	800bf10 <__sccl>
 800bde0:	9b01      	ldr	r3, [sp, #4]
 800bde2:	f04f 0800 	mov.w	r8, #0
 800bde6:	461d      	mov	r5, r3
 800bde8:	68a3      	ldr	r3, [r4, #8]
 800bdea:	6822      	ldr	r2, [r4, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d03b      	beq.n	800be68 <_scanf_i+0x164>
 800bdf0:	6831      	ldr	r1, [r6, #0]
 800bdf2:	6960      	ldr	r0, [r4, #20]
 800bdf4:	f891 c000 	ldrb.w	ip, [r1]
 800bdf8:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	d033      	beq.n	800be68 <_scanf_i+0x164>
 800be00:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800be04:	d121      	bne.n	800be4a <_scanf_i+0x146>
 800be06:	0510      	lsls	r0, r2, #20
 800be08:	d51f      	bpl.n	800be4a <_scanf_i+0x146>
 800be0a:	f108 0801 	add.w	r8, r8, #1
 800be0e:	b117      	cbz	r7, 800be16 <_scanf_i+0x112>
 800be10:	3301      	adds	r3, #1
 800be12:	3f01      	subs	r7, #1
 800be14:	60a3      	str	r3, [r4, #8]
 800be16:	6873      	ldr	r3, [r6, #4]
 800be18:	3b01      	subs	r3, #1
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	6073      	str	r3, [r6, #4]
 800be1e:	dd1c      	ble.n	800be5a <_scanf_i+0x156>
 800be20:	6833      	ldr	r3, [r6, #0]
 800be22:	3301      	adds	r3, #1
 800be24:	6033      	str	r3, [r6, #0]
 800be26:	68a3      	ldr	r3, [r4, #8]
 800be28:	3b01      	subs	r3, #1
 800be2a:	60a3      	str	r3, [r4, #8]
 800be2c:	e7dc      	b.n	800bde8 <_scanf_i+0xe4>
 800be2e:	f1b8 0f02 	cmp.w	r8, #2
 800be32:	d1ad      	bne.n	800bd90 <_scanf_i+0x8c>
 800be34:	6822      	ldr	r2, [r4, #0]
 800be36:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800be3a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800be3e:	d1bf      	bne.n	800bdc0 <_scanf_i+0xbc>
 800be40:	2110      	movs	r1, #16
 800be42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be46:	6061      	str	r1, [r4, #4]
 800be48:	e7a1      	b.n	800bd8e <_scanf_i+0x8a>
 800be4a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800be4e:	6022      	str	r2, [r4, #0]
 800be50:	780b      	ldrb	r3, [r1, #0]
 800be52:	3501      	adds	r5, #1
 800be54:	f805 3c01 	strb.w	r3, [r5, #-1]
 800be58:	e7dd      	b.n	800be16 <_scanf_i+0x112>
 800be5a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800be5e:	4631      	mov	r1, r6
 800be60:	4658      	mov	r0, fp
 800be62:	4798      	blx	r3
 800be64:	2800      	cmp	r0, #0
 800be66:	d0de      	beq.n	800be26 <_scanf_i+0x122>
 800be68:	6823      	ldr	r3, [r4, #0]
 800be6a:	05d9      	lsls	r1, r3, #23
 800be6c:	d50c      	bpl.n	800be88 <_scanf_i+0x184>
 800be6e:	454d      	cmp	r5, r9
 800be70:	d908      	bls.n	800be84 <_scanf_i+0x180>
 800be72:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800be76:	1e6f      	subs	r7, r5, #1
 800be78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800be7c:	4632      	mov	r2, r6
 800be7e:	4658      	mov	r0, fp
 800be80:	4798      	blx	r3
 800be82:	463d      	mov	r5, r7
 800be84:	454d      	cmp	r5, r9
 800be86:	d029      	beq.n	800bedc <_scanf_i+0x1d8>
 800be88:	6822      	ldr	r2, [r4, #0]
 800be8a:	f012 0210 	ands.w	r2, r2, #16
 800be8e:	d113      	bne.n	800beb8 <_scanf_i+0x1b4>
 800be90:	702a      	strb	r2, [r5, #0]
 800be92:	6863      	ldr	r3, [r4, #4]
 800be94:	4649      	mov	r1, r9
 800be96:	4658      	mov	r0, fp
 800be98:	9e00      	ldr	r6, [sp, #0]
 800be9a:	47b0      	blx	r6
 800be9c:	f8da 3000 	ldr.w	r3, [sl]
 800bea0:	6821      	ldr	r1, [r4, #0]
 800bea2:	1d1a      	adds	r2, r3, #4
 800bea4:	f8ca 2000 	str.w	r2, [sl]
 800bea8:	f011 0f20 	tst.w	r1, #32
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	d010      	beq.n	800bed2 <_scanf_i+0x1ce>
 800beb0:	6018      	str	r0, [r3, #0]
 800beb2:	68e3      	ldr	r3, [r4, #12]
 800beb4:	3301      	adds	r3, #1
 800beb6:	60e3      	str	r3, [r4, #12]
 800beb8:	2000      	movs	r0, #0
 800beba:	eba5 0509 	sub.w	r5, r5, r9
 800bebe:	44a8      	add	r8, r5
 800bec0:	6925      	ldr	r5, [r4, #16]
 800bec2:	4445      	add	r5, r8
 800bec4:	6125      	str	r5, [r4, #16]
 800bec6:	b007      	add	sp, #28
 800bec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800becc:	f04f 0800 	mov.w	r8, #0
 800bed0:	e7ca      	b.n	800be68 <_scanf_i+0x164>
 800bed2:	07ca      	lsls	r2, r1, #31
 800bed4:	bf4c      	ite	mi
 800bed6:	8018      	strhmi	r0, [r3, #0]
 800bed8:	6018      	strpl	r0, [r3, #0]
 800beda:	e7ea      	b.n	800beb2 <_scanf_i+0x1ae>
 800bedc:	2001      	movs	r0, #1
 800bede:	e7f2      	b.n	800bec6 <_scanf_i+0x1c2>
 800bee0:	0800c5e0 	.word	0x0800c5e0
 800bee4:	0800a8f5 	.word	0x0800a8f5
 800bee8:	0800c08d 	.word	0x0800c08d
 800beec:	0800d5e0 	.word	0x0800d5e0

0800bef0 <_sbrk_r>:
 800bef0:	b538      	push	{r3, r4, r5, lr}
 800bef2:	2300      	movs	r3, #0
 800bef4:	4c05      	ldr	r4, [pc, #20]	; (800bf0c <_sbrk_r+0x1c>)
 800bef6:	4605      	mov	r5, r0
 800bef8:	4608      	mov	r0, r1
 800befa:	6023      	str	r3, [r4, #0]
 800befc:	f7f6 fbf6 	bl	80026ec <_sbrk>
 800bf00:	1c43      	adds	r3, r0, #1
 800bf02:	d102      	bne.n	800bf0a <_sbrk_r+0x1a>
 800bf04:	6823      	ldr	r3, [r4, #0]
 800bf06:	b103      	cbz	r3, 800bf0a <_sbrk_r+0x1a>
 800bf08:	602b      	str	r3, [r5, #0]
 800bf0a:	bd38      	pop	{r3, r4, r5, pc}
 800bf0c:	20003f88 	.word	0x20003f88

0800bf10 <__sccl>:
 800bf10:	b570      	push	{r4, r5, r6, lr}
 800bf12:	780b      	ldrb	r3, [r1, #0]
 800bf14:	1e44      	subs	r4, r0, #1
 800bf16:	2b5e      	cmp	r3, #94	; 0x5e
 800bf18:	bf13      	iteet	ne
 800bf1a:	1c4a      	addne	r2, r1, #1
 800bf1c:	1c8a      	addeq	r2, r1, #2
 800bf1e:	784b      	ldrbeq	r3, [r1, #1]
 800bf20:	2100      	movne	r1, #0
 800bf22:	bf08      	it	eq
 800bf24:	2101      	moveq	r1, #1
 800bf26:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800bf2a:	f804 1f01 	strb.w	r1, [r4, #1]!
 800bf2e:	42ac      	cmp	r4, r5
 800bf30:	d1fb      	bne.n	800bf2a <__sccl+0x1a>
 800bf32:	b913      	cbnz	r3, 800bf3a <__sccl+0x2a>
 800bf34:	3a01      	subs	r2, #1
 800bf36:	4610      	mov	r0, r2
 800bf38:	bd70      	pop	{r4, r5, r6, pc}
 800bf3a:	f081 0401 	eor.w	r4, r1, #1
 800bf3e:	54c4      	strb	r4, [r0, r3]
 800bf40:	1c51      	adds	r1, r2, #1
 800bf42:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800bf46:	1e4e      	subs	r6, r1, #1
 800bf48:	2d2d      	cmp	r5, #45	; 0x2d
 800bf4a:	460a      	mov	r2, r1
 800bf4c:	d006      	beq.n	800bf5c <__sccl+0x4c>
 800bf4e:	2d5d      	cmp	r5, #93	; 0x5d
 800bf50:	d0f1      	beq.n	800bf36 <__sccl+0x26>
 800bf52:	b90d      	cbnz	r5, 800bf58 <__sccl+0x48>
 800bf54:	4632      	mov	r2, r6
 800bf56:	e7ee      	b.n	800bf36 <__sccl+0x26>
 800bf58:	462b      	mov	r3, r5
 800bf5a:	e7f0      	b.n	800bf3e <__sccl+0x2e>
 800bf5c:	780e      	ldrb	r6, [r1, #0]
 800bf5e:	2e5d      	cmp	r6, #93	; 0x5d
 800bf60:	d0fa      	beq.n	800bf58 <__sccl+0x48>
 800bf62:	42b3      	cmp	r3, r6
 800bf64:	dcf8      	bgt.n	800bf58 <__sccl+0x48>
 800bf66:	3301      	adds	r3, #1
 800bf68:	429e      	cmp	r6, r3
 800bf6a:	54c4      	strb	r4, [r0, r3]
 800bf6c:	dcfb      	bgt.n	800bf66 <__sccl+0x56>
 800bf6e:	3102      	adds	r1, #2
 800bf70:	e7e7      	b.n	800bf42 <__sccl+0x32>

0800bf72 <strncmp>:
 800bf72:	b510      	push	{r4, lr}
 800bf74:	b16a      	cbz	r2, 800bf92 <strncmp+0x20>
 800bf76:	3901      	subs	r1, #1
 800bf78:	1884      	adds	r4, r0, r2
 800bf7a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bf7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d103      	bne.n	800bf8e <strncmp+0x1c>
 800bf86:	42a0      	cmp	r0, r4
 800bf88:	d001      	beq.n	800bf8e <strncmp+0x1c>
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d1f5      	bne.n	800bf7a <strncmp+0x8>
 800bf8e:	1a98      	subs	r0, r3, r2
 800bf90:	bd10      	pop	{r4, pc}
 800bf92:	4610      	mov	r0, r2
 800bf94:	e7fc      	b.n	800bf90 <strncmp+0x1e>

0800bf96 <_strtoul_l.isra.0>:
 800bf96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf9a:	4680      	mov	r8, r0
 800bf9c:	4689      	mov	r9, r1
 800bf9e:	4692      	mov	sl, r2
 800bfa0:	461e      	mov	r6, r3
 800bfa2:	460f      	mov	r7, r1
 800bfa4:	463d      	mov	r5, r7
 800bfa6:	9808      	ldr	r0, [sp, #32]
 800bfa8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bfac:	f7fe fff2 	bl	800af94 <__locale_ctype_ptr_l>
 800bfb0:	4420      	add	r0, r4
 800bfb2:	7843      	ldrb	r3, [r0, #1]
 800bfb4:	f013 0308 	ands.w	r3, r3, #8
 800bfb8:	d130      	bne.n	800c01c <_strtoul_l.isra.0+0x86>
 800bfba:	2c2d      	cmp	r4, #45	; 0x2d
 800bfbc:	d130      	bne.n	800c020 <_strtoul_l.isra.0+0x8a>
 800bfbe:	2101      	movs	r1, #1
 800bfc0:	787c      	ldrb	r4, [r7, #1]
 800bfc2:	1cbd      	adds	r5, r7, #2
 800bfc4:	2e00      	cmp	r6, #0
 800bfc6:	d05c      	beq.n	800c082 <_strtoul_l.isra.0+0xec>
 800bfc8:	2e10      	cmp	r6, #16
 800bfca:	d109      	bne.n	800bfe0 <_strtoul_l.isra.0+0x4a>
 800bfcc:	2c30      	cmp	r4, #48	; 0x30
 800bfce:	d107      	bne.n	800bfe0 <_strtoul_l.isra.0+0x4a>
 800bfd0:	782b      	ldrb	r3, [r5, #0]
 800bfd2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bfd6:	2b58      	cmp	r3, #88	; 0x58
 800bfd8:	d14e      	bne.n	800c078 <_strtoul_l.isra.0+0xe2>
 800bfda:	2610      	movs	r6, #16
 800bfdc:	786c      	ldrb	r4, [r5, #1]
 800bfde:	3502      	adds	r5, #2
 800bfe0:	f04f 32ff 	mov.w	r2, #4294967295
 800bfe4:	fbb2 f2f6 	udiv	r2, r2, r6
 800bfe8:	2300      	movs	r3, #0
 800bfea:	fb06 fc02 	mul.w	ip, r6, r2
 800bfee:	4618      	mov	r0, r3
 800bff0:	ea6f 0c0c 	mvn.w	ip, ip
 800bff4:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800bff8:	2f09      	cmp	r7, #9
 800bffa:	d817      	bhi.n	800c02c <_strtoul_l.isra.0+0x96>
 800bffc:	463c      	mov	r4, r7
 800bffe:	42a6      	cmp	r6, r4
 800c000:	dd23      	ble.n	800c04a <_strtoul_l.isra.0+0xb4>
 800c002:	2b00      	cmp	r3, #0
 800c004:	db1e      	blt.n	800c044 <_strtoul_l.isra.0+0xae>
 800c006:	4282      	cmp	r2, r0
 800c008:	d31c      	bcc.n	800c044 <_strtoul_l.isra.0+0xae>
 800c00a:	d101      	bne.n	800c010 <_strtoul_l.isra.0+0x7a>
 800c00c:	45a4      	cmp	ip, r4
 800c00e:	db19      	blt.n	800c044 <_strtoul_l.isra.0+0xae>
 800c010:	2301      	movs	r3, #1
 800c012:	fb00 4006 	mla	r0, r0, r6, r4
 800c016:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c01a:	e7eb      	b.n	800bff4 <_strtoul_l.isra.0+0x5e>
 800c01c:	462f      	mov	r7, r5
 800c01e:	e7c1      	b.n	800bfa4 <_strtoul_l.isra.0+0xe>
 800c020:	2c2b      	cmp	r4, #43	; 0x2b
 800c022:	bf04      	itt	eq
 800c024:	1cbd      	addeq	r5, r7, #2
 800c026:	787c      	ldrbeq	r4, [r7, #1]
 800c028:	4619      	mov	r1, r3
 800c02a:	e7cb      	b.n	800bfc4 <_strtoul_l.isra.0+0x2e>
 800c02c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c030:	2f19      	cmp	r7, #25
 800c032:	d801      	bhi.n	800c038 <_strtoul_l.isra.0+0xa2>
 800c034:	3c37      	subs	r4, #55	; 0x37
 800c036:	e7e2      	b.n	800bffe <_strtoul_l.isra.0+0x68>
 800c038:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c03c:	2f19      	cmp	r7, #25
 800c03e:	d804      	bhi.n	800c04a <_strtoul_l.isra.0+0xb4>
 800c040:	3c57      	subs	r4, #87	; 0x57
 800c042:	e7dc      	b.n	800bffe <_strtoul_l.isra.0+0x68>
 800c044:	f04f 33ff 	mov.w	r3, #4294967295
 800c048:	e7e5      	b.n	800c016 <_strtoul_l.isra.0+0x80>
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	da09      	bge.n	800c062 <_strtoul_l.isra.0+0xcc>
 800c04e:	2322      	movs	r3, #34	; 0x22
 800c050:	f04f 30ff 	mov.w	r0, #4294967295
 800c054:	f8c8 3000 	str.w	r3, [r8]
 800c058:	f1ba 0f00 	cmp.w	sl, #0
 800c05c:	d107      	bne.n	800c06e <_strtoul_l.isra.0+0xd8>
 800c05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c062:	b101      	cbz	r1, 800c066 <_strtoul_l.isra.0+0xd0>
 800c064:	4240      	negs	r0, r0
 800c066:	f1ba 0f00 	cmp.w	sl, #0
 800c06a:	d0f8      	beq.n	800c05e <_strtoul_l.isra.0+0xc8>
 800c06c:	b10b      	cbz	r3, 800c072 <_strtoul_l.isra.0+0xdc>
 800c06e:	f105 39ff 	add.w	r9, r5, #4294967295
 800c072:	f8ca 9000 	str.w	r9, [sl]
 800c076:	e7f2      	b.n	800c05e <_strtoul_l.isra.0+0xc8>
 800c078:	2430      	movs	r4, #48	; 0x30
 800c07a:	2e00      	cmp	r6, #0
 800c07c:	d1b0      	bne.n	800bfe0 <_strtoul_l.isra.0+0x4a>
 800c07e:	2608      	movs	r6, #8
 800c080:	e7ae      	b.n	800bfe0 <_strtoul_l.isra.0+0x4a>
 800c082:	2c30      	cmp	r4, #48	; 0x30
 800c084:	d0a4      	beq.n	800bfd0 <_strtoul_l.isra.0+0x3a>
 800c086:	260a      	movs	r6, #10
 800c088:	e7aa      	b.n	800bfe0 <_strtoul_l.isra.0+0x4a>
	...

0800c08c <_strtoul_r>:
 800c08c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c08e:	4c06      	ldr	r4, [pc, #24]	; (800c0a8 <_strtoul_r+0x1c>)
 800c090:	4d06      	ldr	r5, [pc, #24]	; (800c0ac <_strtoul_r+0x20>)
 800c092:	6824      	ldr	r4, [r4, #0]
 800c094:	6a24      	ldr	r4, [r4, #32]
 800c096:	2c00      	cmp	r4, #0
 800c098:	bf08      	it	eq
 800c09a:	462c      	moveq	r4, r5
 800c09c:	9400      	str	r4, [sp, #0]
 800c09e:	f7ff ff7a 	bl	800bf96 <_strtoul_l.isra.0>
 800c0a2:	b003      	add	sp, #12
 800c0a4:	bd30      	pop	{r4, r5, pc}
 800c0a6:	bf00      	nop
 800c0a8:	200001bc 	.word	0x200001bc
 800c0ac:	20000220 	.word	0x20000220

0800c0b0 <__submore>:
 800c0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b4:	460c      	mov	r4, r1
 800c0b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c0b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0bc:	4299      	cmp	r1, r3
 800c0be:	d11b      	bne.n	800c0f8 <__submore+0x48>
 800c0c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c0c4:	f7ff fb92 	bl	800b7ec <_malloc_r>
 800c0c8:	b918      	cbnz	r0, 800c0d2 <__submore+0x22>
 800c0ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0d6:	63a3      	str	r3, [r4, #56]	; 0x38
 800c0d8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c0dc:	6360      	str	r0, [r4, #52]	; 0x34
 800c0de:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c0e2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c0e6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c0ea:	7043      	strb	r3, [r0, #1]
 800c0ec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c0f0:	7003      	strb	r3, [r0, #0]
 800c0f2:	6020      	str	r0, [r4, #0]
 800c0f4:	2000      	movs	r0, #0
 800c0f6:	e7ea      	b.n	800c0ce <__submore+0x1e>
 800c0f8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c0fa:	0077      	lsls	r7, r6, #1
 800c0fc:	463a      	mov	r2, r7
 800c0fe:	f7ff fbcf 	bl	800b8a0 <_realloc_r>
 800c102:	4605      	mov	r5, r0
 800c104:	2800      	cmp	r0, #0
 800c106:	d0e0      	beq.n	800c0ca <__submore+0x1a>
 800c108:	eb00 0806 	add.w	r8, r0, r6
 800c10c:	4601      	mov	r1, r0
 800c10e:	4632      	mov	r2, r6
 800c110:	4640      	mov	r0, r8
 800c112:	f7fd fc9a 	bl	8009a4a <memcpy>
 800c116:	f8c4 8000 	str.w	r8, [r4]
 800c11a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c11e:	e7e9      	b.n	800c0f4 <__submore+0x44>

0800c120 <__ascii_wctomb>:
 800c120:	b149      	cbz	r1, 800c136 <__ascii_wctomb+0x16>
 800c122:	2aff      	cmp	r2, #255	; 0xff
 800c124:	bf8b      	itete	hi
 800c126:	238a      	movhi	r3, #138	; 0x8a
 800c128:	700a      	strbls	r2, [r1, #0]
 800c12a:	6003      	strhi	r3, [r0, #0]
 800c12c:	2001      	movls	r0, #1
 800c12e:	bf88      	it	hi
 800c130:	f04f 30ff 	movhi.w	r0, #4294967295
 800c134:	4770      	bx	lr
 800c136:	4608      	mov	r0, r1
 800c138:	4770      	bx	lr
	...

0800c13c <malloc>:
 800c13c:	4b02      	ldr	r3, [pc, #8]	; (800c148 <malloc+0xc>)
 800c13e:	4601      	mov	r1, r0
 800c140:	6818      	ldr	r0, [r3, #0]
 800c142:	f7ff bb53 	b.w	800b7ec <_malloc_r>
 800c146:	bf00      	nop
 800c148:	200001bc 	.word	0x200001bc

0800c14c <memchr>:
 800c14c:	b510      	push	{r4, lr}
 800c14e:	b2c9      	uxtb	r1, r1
 800c150:	4402      	add	r2, r0
 800c152:	4290      	cmp	r0, r2
 800c154:	4603      	mov	r3, r0
 800c156:	d101      	bne.n	800c15c <memchr+0x10>
 800c158:	2300      	movs	r3, #0
 800c15a:	e003      	b.n	800c164 <memchr+0x18>
 800c15c:	781c      	ldrb	r4, [r3, #0]
 800c15e:	3001      	adds	r0, #1
 800c160:	428c      	cmp	r4, r1
 800c162:	d1f6      	bne.n	800c152 <memchr+0x6>
 800c164:	4618      	mov	r0, r3
 800c166:	bd10      	pop	{r4, pc}

0800c168 <__malloc_lock>:
 800c168:	4770      	bx	lr

0800c16a <__malloc_unlock>:
 800c16a:	4770      	bx	lr

0800c16c <_free_r>:
 800c16c:	b538      	push	{r3, r4, r5, lr}
 800c16e:	4605      	mov	r5, r0
 800c170:	2900      	cmp	r1, #0
 800c172:	d043      	beq.n	800c1fc <_free_r+0x90>
 800c174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c178:	1f0c      	subs	r4, r1, #4
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	bfb8      	it	lt
 800c17e:	18e4      	addlt	r4, r4, r3
 800c180:	f7ff fff2 	bl	800c168 <__malloc_lock>
 800c184:	4a1e      	ldr	r2, [pc, #120]	; (800c200 <_free_r+0x94>)
 800c186:	6813      	ldr	r3, [r2, #0]
 800c188:	4610      	mov	r0, r2
 800c18a:	b933      	cbnz	r3, 800c19a <_free_r+0x2e>
 800c18c:	6063      	str	r3, [r4, #4]
 800c18e:	6014      	str	r4, [r2, #0]
 800c190:	4628      	mov	r0, r5
 800c192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c196:	f7ff bfe8 	b.w	800c16a <__malloc_unlock>
 800c19a:	42a3      	cmp	r3, r4
 800c19c:	d90b      	bls.n	800c1b6 <_free_r+0x4a>
 800c19e:	6821      	ldr	r1, [r4, #0]
 800c1a0:	1862      	adds	r2, r4, r1
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	bf01      	itttt	eq
 800c1a6:	681a      	ldreq	r2, [r3, #0]
 800c1a8:	685b      	ldreq	r3, [r3, #4]
 800c1aa:	1852      	addeq	r2, r2, r1
 800c1ac:	6022      	streq	r2, [r4, #0]
 800c1ae:	6063      	str	r3, [r4, #4]
 800c1b0:	6004      	str	r4, [r0, #0]
 800c1b2:	e7ed      	b.n	800c190 <_free_r+0x24>
 800c1b4:	4613      	mov	r3, r2
 800c1b6:	685a      	ldr	r2, [r3, #4]
 800c1b8:	b10a      	cbz	r2, 800c1be <_free_r+0x52>
 800c1ba:	42a2      	cmp	r2, r4
 800c1bc:	d9fa      	bls.n	800c1b4 <_free_r+0x48>
 800c1be:	6819      	ldr	r1, [r3, #0]
 800c1c0:	1858      	adds	r0, r3, r1
 800c1c2:	42a0      	cmp	r0, r4
 800c1c4:	d10b      	bne.n	800c1de <_free_r+0x72>
 800c1c6:	6820      	ldr	r0, [r4, #0]
 800c1c8:	4401      	add	r1, r0
 800c1ca:	1858      	adds	r0, r3, r1
 800c1cc:	4282      	cmp	r2, r0
 800c1ce:	6019      	str	r1, [r3, #0]
 800c1d0:	d1de      	bne.n	800c190 <_free_r+0x24>
 800c1d2:	6810      	ldr	r0, [r2, #0]
 800c1d4:	6852      	ldr	r2, [r2, #4]
 800c1d6:	4401      	add	r1, r0
 800c1d8:	6019      	str	r1, [r3, #0]
 800c1da:	605a      	str	r2, [r3, #4]
 800c1dc:	e7d8      	b.n	800c190 <_free_r+0x24>
 800c1de:	d902      	bls.n	800c1e6 <_free_r+0x7a>
 800c1e0:	230c      	movs	r3, #12
 800c1e2:	602b      	str	r3, [r5, #0]
 800c1e4:	e7d4      	b.n	800c190 <_free_r+0x24>
 800c1e6:	6820      	ldr	r0, [r4, #0]
 800c1e8:	1821      	adds	r1, r4, r0
 800c1ea:	428a      	cmp	r2, r1
 800c1ec:	bf01      	itttt	eq
 800c1ee:	6811      	ldreq	r1, [r2, #0]
 800c1f0:	6852      	ldreq	r2, [r2, #4]
 800c1f2:	1809      	addeq	r1, r1, r0
 800c1f4:	6021      	streq	r1, [r4, #0]
 800c1f6:	6062      	str	r2, [r4, #4]
 800c1f8:	605c      	str	r4, [r3, #4]
 800c1fa:	e7c9      	b.n	800c190 <_free_r+0x24>
 800c1fc:	bd38      	pop	{r3, r4, r5, pc}
 800c1fe:	bf00      	nop
 800c200:	200019cc 	.word	0x200019cc

0800c204 <_malloc_usable_size_r>:
 800c204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c208:	1f18      	subs	r0, r3, #4
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	bfbc      	itt	lt
 800c20e:	580b      	ldrlt	r3, [r1, r0]
 800c210:	18c0      	addlt	r0, r0, r3
 800c212:	4770      	bx	lr

0800c214 <_init>:
 800c214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c216:	bf00      	nop
 800c218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c21a:	bc08      	pop	{r3}
 800c21c:	469e      	mov	lr, r3
 800c21e:	4770      	bx	lr

0800c220 <_fini>:
 800c220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c222:	bf00      	nop
 800c224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c226:	bc08      	pop	{r3}
 800c228:	469e      	mov	lr, r3
 800c22a:	4770      	bx	lr
