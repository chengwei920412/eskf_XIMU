
XIMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e210  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001240  0800e320  0800e320  0001e320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f560  0800f560  00020388  2**0
                  CONTENTS
  4 .ARM          00000000  0800f560  0800f560  00020388  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f560  0800f560  00020388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f560  0800f560  0001f560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f564  0800f564  0001f564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000388  20000000  0800f568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018a8  20000388  0800f8f0  00020388  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001c30  0800f8f0  00021c30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039ef3  00000000  00000000  000203b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000791a  00000000  00000000  0005a2a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001c151  00000000  00000000  00061bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001620  00000000  00000000  0007dd10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000042e0  00000000  00000000  0007f330  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001c23e  00000000  00000000  00083610  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001c7c4  00000000  00000000  0009f84e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00083660  00000000  00000000  000bc012  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      000000f0  00000000  00000000  0013f672  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005fcc  00000000  00000000  0013f764  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000388 	.word	0x20000388
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e308 	.word	0x0800e308

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000038c 	.word	0x2000038c
 800014c:	0800e308 	.word	0x0800e308

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <mpu_set_bypass.part.1>:
/**
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
 8001188:	b570      	push	{r4, r5, r6, lr}
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;

    if (bypass_on) {
 800118a:	4606      	mov	r6, r0
int mpu_set_bypass(unsigned char bypass_on)
 800118c:	b082      	sub	sp, #8
 800118e:	4c36      	ldr	r4, [pc, #216]	; (8001268 <mpu_set_bypass.part.1+0xe0>)
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001190:	f10d 0507 	add.w	r5, sp, #7
 8001194:	e9d4 3200 	ldrd	r3, r2, [r4]
 8001198:	7810      	ldrb	r0, [r2, #0]
 800119a:	7919      	ldrb	r1, [r3, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	462b      	mov	r3, r5
    if (bypass_on) {
 80011a0:	b33e      	cbz	r6, 80011f2 <mpu_set_bypass.part.1+0x6a>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80011a2:	f004 f8bd 	bl	8005320 <i2c_read>
 80011a6:	2800      	cmp	r0, #0
 80011a8:	d15a      	bne.n	8001260 <mpu_set_bypass.part.1+0xd8>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
 80011aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80011ae:	6861      	ldr	r1, [r4, #4]
        tmp &= ~BIT_AUX_IF_EN;
 80011b0:	f023 0320 	bic.w	r3, r3, #32
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80011b4:	6822      	ldr	r2, [r4, #0]
        tmp &= ~BIT_AUX_IF_EN;
 80011b6:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80011ba:	7808      	ldrb	r0, [r1, #0]
 80011bc:	462b      	mov	r3, r5
 80011be:	7911      	ldrb	r1, [r2, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	f004 f89d 	bl	8005300 <i2c_write>
 80011c6:	2800      	cmp	r0, #0
 80011c8:	d14a      	bne.n	8001260 <mpu_set_bypass.part.1+0xd8>
            return -1;
        delay_ms(3);
 80011ca:	2003      	movs	r0, #3
 80011cc:	f004 f8b8 	bl	8005340 <delay_ms>
        tmp = BIT_BYPASS_EN;
 80011d0:	2202      	movs	r2, #2
        if (st.chip_cfg.active_low_int)
 80011d2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
        tmp = BIT_BYPASS_EN;
 80011d6:	f88d 2007 	strb.w	r2, [sp, #7]
        if (st.chip_cfg.active_low_int)
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d03e      	beq.n	800125c <mpu_set_bypass.part.1+0xd4>
            tmp |= BIT_ACTL;
 80011de:	2382      	movs	r3, #130	; 0x82
 80011e0:	22b2      	movs	r2, #178	; 0xb2
 80011e2:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.latched_int)
 80011e6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80011ea:	b343      	cbz	r3, 800123e <mpu_set_bypass.part.1+0xb6>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80011ec:	f88d 2007 	strb.w	r2, [sp, #7]
 80011f0:	e025      	b.n	800123e <mpu_set_bypass.part.1+0xb6>
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80011f2:	f004 f895 	bl	8005320 <i2c_read>
 80011f6:	bb98      	cbnz	r0, 8001260 <mpu_set_bypass.part.1+0xd8>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80011f8:	7aa2      	ldrb	r2, [r4, #10]
 80011fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011fe:	07d2      	lsls	r2, r2, #31
            tmp |= BIT_AUX_IF_EN;
 8001200:	bf4c      	ite	mi
 8001202:	f043 0320 	orrmi.w	r3, r3, #32
        else
            tmp &= ~BIT_AUX_IF_EN;
 8001206:	f003 03df 	andpl.w	r3, r3, #223	; 0xdf
 800120a:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800120e:	e9d4 2100 	ldrd	r2, r1, [r4]
 8001212:	462b      	mov	r3, r5
 8001214:	7808      	ldrb	r0, [r1, #0]
 8001216:	7911      	ldrb	r1, [r2, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	f004 f871 	bl	8005300 <i2c_write>
 800121e:	b9f8      	cbnz	r0, 8001260 <mpu_set_bypass.part.1+0xd8>
            return -1;
        delay_ms(3);
 8001220:	2003      	movs	r0, #3
 8001222:	f004 f88d 	bl	8005340 <delay_ms>
        if (st.chip_cfg.active_low_int)
 8001226:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800122a:	b1ab      	cbz	r3, 8001258 <mpu_set_bypass.part.1+0xd0>
 800122c:	21b0      	movs	r1, #176	; 0xb0
            tmp = BIT_ACTL;
 800122e:	2380      	movs	r3, #128	; 0x80
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
 8001230:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8001234:	f88d 3007 	strb.w	r3, [sp, #7]
 8001238:	b10a      	cbz	r2, 800123e <mpu_set_bypass.part.1+0xb6>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800123a:	f88d 1007 	strb.w	r1, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800123e:	e9d4 1200 	ldrd	r1, r2, [r4]
 8001242:	462b      	mov	r3, r5
 8001244:	7810      	ldrb	r0, [r2, #0]
 8001246:	7dc9      	ldrb	r1, [r1, #23]
 8001248:	2201      	movs	r2, #1
 800124a:	f004 f859 	bl	8005300 <i2c_write>
 800124e:	b938      	cbnz	r0, 8001260 <mpu_set_bypass.part.1+0xd8>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
 8001250:	2000      	movs	r0, #0
    st.chip_cfg.bypass_mode = bypass_on;
 8001252:	74a6      	strb	r6, [r4, #18]
}
 8001254:	b002      	add	sp, #8
 8001256:	bd70      	pop	{r4, r5, r6, pc}
        if (st.chip_cfg.active_low_int)
 8001258:	2130      	movs	r1, #48	; 0x30
 800125a:	e7e9      	b.n	8001230 <mpu_set_bypass.part.1+0xa8>
        if (st.chip_cfg.active_low_int)
 800125c:	2232      	movs	r2, #50	; 0x32
 800125e:	e7c2      	b.n	80011e6 <mpu_set_bypass.part.1+0x5e>
            return -1;
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	e7f6      	b.n	8001254 <mpu_set_bypass.part.1+0xcc>
 8001266:	bf00      	nop
 8001268:	20000000 	.word	0x20000000

0800126c <mpu_set_bypass.part.1.constprop.7>:
int mpu_set_bypass(unsigned char bypass_on)
 800126c:	b510      	push	{r4, lr}
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800126e:	4c20      	ldr	r4, [pc, #128]	; (80012f0 <mpu_set_bypass.part.1.constprop.7+0x84>)
int mpu_set_bypass(unsigned char bypass_on)
 8001270:	b082      	sub	sp, #8
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001272:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001276:	7911      	ldrb	r1, [r2, #4]
 8001278:	7818      	ldrb	r0, [r3, #0]
 800127a:	2201      	movs	r2, #1
 800127c:	f10d 0307 	add.w	r3, sp, #7
 8001280:	f004 f84e 	bl	8005320 <i2c_read>
 8001284:	bb88      	cbnz	r0, 80012ea <mpu_set_bypass.part.1.constprop.7+0x7e>
        tmp &= ~BIT_AUX_IF_EN;
 8001286:	f89d 3007 	ldrb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800128a:	6861      	ldr	r1, [r4, #4]
        tmp &= ~BIT_AUX_IF_EN;
 800128c:	f023 0320 	bic.w	r3, r3, #32
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001290:	6822      	ldr	r2, [r4, #0]
        tmp &= ~BIT_AUX_IF_EN;
 8001292:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001296:	7808      	ldrb	r0, [r1, #0]
 8001298:	f10d 0307 	add.w	r3, sp, #7
 800129c:	7911      	ldrb	r1, [r2, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	f004 f82e 	bl	8005300 <i2c_write>
 80012a4:	bb08      	cbnz	r0, 80012ea <mpu_set_bypass.part.1.constprop.7+0x7e>
        delay_ms(3);
 80012a6:	2003      	movs	r0, #3
 80012a8:	f004 f84a 	bl	8005340 <delay_ms>
        tmp = BIT_BYPASS_EN;
 80012ac:	2202      	movs	r2, #2
        if (st.chip_cfg.active_low_int)
 80012ae:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
        tmp = BIT_BYPASS_EN;
 80012b2:	f88d 2007 	strb.w	r2, [sp, #7]
        if (st.chip_cfg.active_low_int)
 80012b6:	b1b3      	cbz	r3, 80012e6 <mpu_set_bypass.part.1.constprop.7+0x7a>
            tmp |= BIT_ACTL;
 80012b8:	2382      	movs	r3, #130	; 0x82
 80012ba:	22b2      	movs	r2, #178	; 0xb2
 80012bc:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.latched_int)
 80012c0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80012c4:	b10b      	cbz	r3, 80012ca <mpu_set_bypass.part.1.constprop.7+0x5e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80012c6:	f88d 2007 	strb.w	r2, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80012ca:	e9d4 1200 	ldrd	r1, r2, [r4]
 80012ce:	f10d 0307 	add.w	r3, sp, #7
 80012d2:	7810      	ldrb	r0, [r2, #0]
 80012d4:	7dc9      	ldrb	r1, [r1, #23]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f004 f812 	bl	8005300 <i2c_write>
 80012dc:	b928      	cbnz	r0, 80012ea <mpu_set_bypass.part.1.constprop.7+0x7e>
    st.chip_cfg.bypass_mode = bypass_on;
 80012de:	2301      	movs	r3, #1
 80012e0:	74a3      	strb	r3, [r4, #18]
}
 80012e2:	b002      	add	sp, #8
 80012e4:	bd10      	pop	{r4, pc}
        if (st.chip_cfg.active_low_int)
 80012e6:	2232      	movs	r2, #50	; 0x32
 80012e8:	e7ea      	b.n	80012c0 <mpu_set_bypass.part.1.constprop.7+0x54>
            return -1;
 80012ea:	f04f 30ff 	mov.w	r0, #4294967295
 80012ee:	e7f8      	b.n	80012e2 <mpu_set_bypass.part.1.constprop.7+0x76>
 80012f0:	20000000 	.word	0x20000000

080012f4 <mpu_reset_fifo>:
{
 80012f4:	b570      	push	{r4, r5, r6, lr}
    if (!(st.chip_cfg.sensors))
 80012f6:	4c53      	ldr	r4, [pc, #332]	; (8001444 <mpu_reset_fifo+0x150>)
{
 80012f8:	b082      	sub	sp, #8
    if (!(st.chip_cfg.sensors))
 80012fa:	7aa3      	ldrb	r3, [r4, #10]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 809c 	beq.w	800143a <mpu_reset_fifo+0x146>
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001302:	e9d4 2100 	ldrd	r2, r1, [r4]
    data = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	ad02      	add	r5, sp, #8
 800130a:	f805 3d01 	strb.w	r3, [r5, #-1]!
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800130e:	7808      	ldrb	r0, [r1, #0]
 8001310:	462b      	mov	r3, r5
 8001312:	7c51      	ldrb	r1, [r2, #17]
 8001314:	2201      	movs	r2, #1
 8001316:	f003 fff3 	bl	8005300 <i2c_write>
 800131a:	2800      	cmp	r0, #0
 800131c:	f040 808d 	bne.w	800143a <mpu_reset_fifo+0x146>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8001320:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001324:	7951      	ldrb	r1, [r2, #5]
 8001326:	7818      	ldrb	r0, [r3, #0]
 8001328:	2201      	movs	r2, #1
 800132a:	462b      	mov	r3, r5
 800132c:	f003 ffe8 	bl	8005300 <i2c_write>
 8001330:	2800      	cmp	r0, #0
 8001332:	f040 8082 	bne.w	800143a <mpu_reset_fifo+0x146>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001336:	e9d4 2300 	ldrd	r2, r3, [r4]
 800133a:	7911      	ldrb	r1, [r2, #4]
 800133c:	7818      	ldrb	r0, [r3, #0]
 800133e:	2201      	movs	r2, #1
 8001340:	462b      	mov	r3, r5
 8001342:	f003 ffdd 	bl	8005300 <i2c_write>
 8001346:	2800      	cmp	r0, #0
 8001348:	d177      	bne.n	800143a <mpu_reset_fifo+0x146>
 800134a:	e9d4 2100 	ldrd	r2, r1, [r4]
    if (st.chip_cfg.dmp_on) {
 800134e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001352:	7808      	ldrb	r0, [r1, #0]
 8001354:	7911      	ldrb	r1, [r2, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d13b      	bne.n	80013d2 <mpu_reset_fifo+0xde>
        data = BIT_FIFO_RST;
 800135a:	2604      	movs	r6, #4
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800135c:	462b      	mov	r3, r5
 800135e:	2201      	movs	r2, #1
        data = BIT_FIFO_RST;
 8001360:	f88d 6007 	strb.w	r6, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001364:	f003 ffcc 	bl	8005300 <i2c_write>
 8001368:	2800      	cmp	r0, #0
 800136a:	d166      	bne.n	800143a <mpu_reset_fifo+0x146>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 800136c:	7ca3      	ldrb	r3, [r4, #18]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d161      	bne.n	8001436 <mpu_reset_fifo+0x142>
 8001372:	7aa3      	ldrb	r3, [r4, #10]
            data = BIT_FIFO_EN;
 8001374:	f013 0f01 	tst.w	r3, #1
 8001378:	bf14      	ite	ne
 800137a:	2160      	movne	r1, #96	; 0x60
 800137c:	2140      	moveq	r1, #64	; 0x40
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800137e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8001382:	f88d 1007 	strb.w	r1, [sp, #7]
 8001386:	7810      	ldrb	r0, [r2, #0]
 8001388:	7919      	ldrb	r1, [r3, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	462b      	mov	r3, r5
 800138e:	f003 ffb7 	bl	8005300 <i2c_write>
 8001392:	2800      	cmp	r0, #0
 8001394:	d151      	bne.n	800143a <mpu_reset_fifo+0x146>
        if (st.chip_cfg.int_enable)
 8001396:	7c63      	ldrb	r3, [r4, #17]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001398:	6861      	ldr	r1, [r4, #4]
        if (st.chip_cfg.int_enable)
 800139a:	3300      	adds	r3, #0
 800139c:	bf18      	it	ne
 800139e:	2301      	movne	r3, #1
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80013a0:	6822      	ldr	r2, [r4, #0]
        if (st.chip_cfg.int_enable)
 80013a2:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80013a6:	7808      	ldrb	r0, [r1, #0]
 80013a8:	462b      	mov	r3, r5
 80013aa:	7c51      	ldrb	r1, [r2, #17]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f003 ffa7 	bl	8005300 <i2c_write>
 80013b2:	2800      	cmp	r0, #0
 80013b4:	d141      	bne.n	800143a <mpu_reset_fifo+0x146>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 80013b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80013ba:	7818      	ldrb	r0, [r3, #0]
 80013bc:	7951      	ldrb	r1, [r2, #5]
 80013be:	4b22      	ldr	r3, [pc, #136]	; (8001448 <mpu_reset_fifo+0x154>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	f003 ff9d 	bl	8005300 <i2c_write>
 80013c6:	3000      	adds	r0, #0
 80013c8:	bf18      	it	ne
 80013ca:	2001      	movne	r0, #1
 80013cc:	4240      	negs	r0, r0
}
 80013ce:	b002      	add	sp, #8
 80013d0:	bd70      	pop	{r4, r5, r6, pc}
        data = BIT_FIFO_RST | BIT_DMP_RST;
 80013d2:	260c      	movs	r6, #12
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80013d4:	462b      	mov	r3, r5
 80013d6:	2201      	movs	r2, #1
        data = BIT_FIFO_RST | BIT_DMP_RST;
 80013d8:	f88d 6007 	strb.w	r6, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80013dc:	f003 ff90 	bl	8005300 <i2c_write>
 80013e0:	bb58      	cbnz	r0, 800143a <mpu_reset_fifo+0x146>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80013e2:	7aa3      	ldrb	r3, [r4, #10]
        data = BIT_DMP_EN | BIT_FIFO_EN;
 80013e4:	22c0      	movs	r2, #192	; 0xc0
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80013e6:	07db      	lsls	r3, r3, #31
            data |= BIT_AUX_IF_EN;
 80013e8:	bf48      	it	mi
 80013ea:	23e0      	movmi	r3, #224	; 0xe0
        data = BIT_DMP_EN | BIT_FIFO_EN;
 80013ec:	f88d 2007 	strb.w	r2, [sp, #7]
            data |= BIT_AUX_IF_EN;
 80013f0:	bf48      	it	mi
 80013f2:	f88d 3007 	strbmi.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80013f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80013fa:	7911      	ldrb	r1, [r2, #4]
 80013fc:	7818      	ldrb	r0, [r3, #0]
 80013fe:	2201      	movs	r2, #1
 8001400:	462b      	mov	r3, r5
 8001402:	f003 ff7d 	bl	8005300 <i2c_write>
 8001406:	b9c0      	cbnz	r0, 800143a <mpu_reset_fifo+0x146>
        if (st.chip_cfg.int_enable)
 8001408:	7c63      	ldrb	r3, [r4, #17]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800140a:	6861      	ldr	r1, [r4, #4]
            data = BIT_DMP_INT_EN;
 800140c:	2b00      	cmp	r3, #0
 800140e:	bf18      	it	ne
 8001410:	2302      	movne	r3, #2
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001412:	6822      	ldr	r2, [r4, #0]
 8001414:	f88d 3007 	strb.w	r3, [sp, #7]
 8001418:	7808      	ldrb	r0, [r1, #0]
 800141a:	462b      	mov	r3, r5
 800141c:	7c51      	ldrb	r1, [r2, #17]
 800141e:	2201      	movs	r2, #1
 8001420:	f003 ff6e 	bl	8005300 <i2c_write>
 8001424:	b948      	cbnz	r0, 800143a <mpu_reset_fifo+0x146>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8001426:	e9d4 2100 	ldrd	r2, r1, [r4]
        data = 0;
 800142a:	f88d 0007 	strb.w	r0, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800142e:	7808      	ldrb	r0, [r1, #0]
 8001430:	462b      	mov	r3, r5
 8001432:	7951      	ldrb	r1, [r2, #5]
 8001434:	e7c4      	b.n	80013c0 <mpu_reset_fifo+0xcc>
            data = BIT_FIFO_EN;
 8001436:	2140      	movs	r1, #64	; 0x40
 8001438:	e7a1      	b.n	800137e <mpu_reset_fifo+0x8a>
        return -1;
 800143a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800143e:	b002      	add	sp, #8
 8001440:	bd70      	pop	{r4, r5, r6, pc}
 8001442:	bf00      	nop
 8001444:	20000000 	.word	0x20000000
 8001448:	20000010 	.word	0x20000010

0800144c <mpu_lp_accel_mode>:
{
 800144c:	b570      	push	{r4, r5, r6, lr}
    if (rate > 40)
 800144e:	2828      	cmp	r0, #40	; 0x28
{
 8001450:	b082      	sub	sp, #8
    if (rate > 40)
 8001452:	f200 80ac 	bhi.w	80015ae <mpu_lp_accel_mode+0x162>
 8001456:	4c5b      	ldr	r4, [pc, #364]	; (80015c4 <mpu_lp_accel_mode+0x178>)
 8001458:	4605      	mov	r5, r0
 800145a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    if (!rate) {
 800145e:	b9b8      	cbnz	r0, 8001490 <mpu_lp_accel_mode+0x44>
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 8001460:	2b00      	cmp	r3, #0
 8001462:	f040 8082 	bne.w	800156a <mpu_lp_accel_mode+0x11e>
 8001466:	ae01      	add	r6, sp, #4
        tmp[0] = 0;
 8001468:	f44f 63e0 	mov.w	r3, #1792	; 0x700
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 800146c:	e9d4 1200 	ldrd	r1, r2, [r4]
        tmp[0] = 0;
 8001470:	f8ad 3004 	strh.w	r3, [sp, #4]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001474:	7810      	ldrb	r0, [r2, #0]
 8001476:	4633      	mov	r3, r6
 8001478:	7d49      	ldrb	r1, [r1, #21]
 800147a:	2202      	movs	r2, #2
 800147c:	f003 ff40 	bl	8005300 <i2c_write>
 8001480:	4605      	mov	r5, r0
 8001482:	2800      	cmp	r0, #0
 8001484:	f040 8093 	bne.w	80015ae <mpu_lp_accel_mode+0x162>
        st.chip_cfg.lp_accel_mode = 0;
 8001488:	7520      	strb	r0, [r4, #20]
}
 800148a:	4628      	mov	r0, r5
 800148c:	b002      	add	sp, #8
 800148e:	bd70      	pop	{r4, r5, r6, pc}
    if (st.chip_cfg.latched_int == enable)
 8001490:	2b01      	cmp	r3, #1
 8001492:	d142      	bne.n	800151a <mpu_lp_accel_mode+0xce>
 8001494:	ae01      	add	r6, sp, #4
    if (rate == 1)
 8001496:	2d01      	cmp	r5, #1
 8001498:	d05a      	beq.n	8001550 <mpu_lp_accel_mode+0x104>
    else if (rate == 2)
 800149a:	2d02      	cmp	r5, #2
 800149c:	f000 8081 	beq.w	80015a2 <mpu_lp_accel_mode+0x156>
    else if (rate <= 5)
 80014a0:	2d05      	cmp	r5, #5
 80014a2:	d95e      	bls.n	8001562 <mpu_lp_accel_mode+0x116>
    else if (rate <= 10)
 80014a4:	2d0a      	cmp	r5, #10
 80014a6:	f200 8085 	bhi.w	80015b4 <mpu_lp_accel_mode+0x168>
        tmp[0] = INV_LPA_10HZ;
 80014aa:	2305      	movs	r3, #5
 80014ac:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 80014b0:	e9d4 2300 	ldrd	r2, r3, [r4]
 80014b4:	7a51      	ldrb	r1, [r2, #9]
 80014b6:	7818      	ldrb	r0, [r3, #0]
 80014b8:	2201      	movs	r2, #1
 80014ba:	4633      	mov	r3, r6
 80014bc:	f003 ff20 	bl	8005300 <i2c_write>
 80014c0:	2800      	cmp	r0, #0
 80014c2:	d174      	bne.n	80015ae <mpu_lp_accel_mode+0x162>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 80014c4:	e9d4 1200 	ldrd	r1, r2, [r4]
    tmp[0] = BIT_LPA_CYCLE;
 80014c8:	2320      	movs	r3, #32
 80014ca:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 80014ce:	7810      	ldrb	r0, [r2, #0]
 80014d0:	4633      	mov	r3, r6
 80014d2:	7d49      	ldrb	r1, [r1, #21]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f003 ff13 	bl	8005300 <i2c_write>
 80014da:	4605      	mov	r5, r0
 80014dc:	2800      	cmp	r0, #0
 80014de:	d166      	bne.n	80015ae <mpu_lp_accel_mode+0x162>
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 80014e0:	2108      	movs	r1, #8
    st.chip_cfg.lp_accel_mode = 1;
 80014e2:	2201      	movs	r2, #1
    if (st.chip_cfg.dmp_on)
 80014e4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    st.chip_cfg.clk_src = 0;
 80014e8:	7320      	strb	r0, [r4, #12]
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 80014ea:	72a1      	strb	r1, [r4, #10]
    st.chip_cfg.lp_accel_mode = 1;
 80014ec:	7522      	strb	r2, [r4, #20]
    if (st.chip_cfg.dmp_on)
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1cb      	bne.n	800148a <mpu_lp_accel_mode+0x3e>
        if (enable && st.chip_cfg.int_enable)
 80014f2:	7c63      	ldrb	r3, [r4, #17]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 80014f4:	7420      	strb	r0, [r4, #16]
        if (enable && st.chip_cfg.int_enable)
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1c7      	bne.n	800148a <mpu_lp_accel_mode+0x3e>
            tmp = BIT_DATA_RDY_EN;
 80014fa:	eb0d 0301 	add.w	r3, sp, r1
 80014fe:	f803 2d05 	strb.w	r2, [r3, #-5]!
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001502:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001506:	7800      	ldrb	r0, [r0, #0]
 8001508:	7c49      	ldrb	r1, [r1, #17]
 800150a:	f003 fef9 	bl	8005300 <i2c_write>
 800150e:	2800      	cmp	r0, #0
 8001510:	d1bb      	bne.n	800148a <mpu_lp_accel_mode+0x3e>
        st.chip_cfg.int_enable = tmp;
 8001512:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001516:	7463      	strb	r3, [r4, #17]
 8001518:	e7b7      	b.n	800148a <mpu_lp_accel_mode+0x3e>
        return 0;

    if (enable)
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800151a:	2230      	movs	r2, #48	; 0x30
    else
        tmp = 0;
    if (st.chip_cfg.bypass_mode)
 800151c:	7ca3      	ldrb	r3, [r4, #18]
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800151e:	f88d 2004 	strb.w	r2, [sp, #4]
    if (st.chip_cfg.bypass_mode)
 8001522:	b9cb      	cbnz	r3, 8001558 <mpu_lp_accel_mode+0x10c>
 8001524:	22b0      	movs	r2, #176	; 0xb0
        tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
 8001526:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800152a:	b10b      	cbz	r3, 8001530 <mpu_lp_accel_mode+0xe4>
        tmp |= BIT_ACTL;
 800152c:	f88d 2004 	strb.w	r2, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001530:	ae01      	add	r6, sp, #4
 8001532:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001536:	7dd1      	ldrb	r1, [r2, #23]
 8001538:	7818      	ldrb	r0, [r3, #0]
 800153a:	2201      	movs	r2, #1
 800153c:	4633      	mov	r3, r6
 800153e:	f003 fedf 	bl	8005300 <i2c_write>
 8001542:	2800      	cmp	r0, #0
 8001544:	d1a7      	bne.n	8001496 <mpu_lp_accel_mode+0x4a>
        return -1;
    st.chip_cfg.latched_int = enable;
 8001546:	2301      	movs	r3, #1
    if (rate == 1)
 8001548:	2d01      	cmp	r5, #1
    st.chip_cfg.latched_int = enable;
 800154a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    if (rate == 1)
 800154e:	d1a4      	bne.n	800149a <mpu_lp_accel_mode+0x4e>
        tmp[0] = INV_LPA_1_25HZ;
 8001550:	2302      	movs	r3, #2
 8001552:	f88d 3004 	strb.w	r3, [sp, #4]
 8001556:	e7ab      	b.n	80014b0 <mpu_lp_accel_mode+0x64>
        tmp |= BIT_BYPASS_EN;
 8001558:	2332      	movs	r3, #50	; 0x32
 800155a:	22b2      	movs	r2, #178	; 0xb2
 800155c:	f88d 3004 	strb.w	r3, [sp, #4]
 8001560:	e7e1      	b.n	8001526 <mpu_lp_accel_mode+0xda>
        tmp[0] = INV_LPA_5HZ;
 8001562:	2304      	movs	r3, #4
 8001564:	f88d 3004 	strb.w	r3, [sp, #4]
 8001568:	e7a2      	b.n	80014b0 <mpu_lp_accel_mode+0x64>
    if (st.chip_cfg.bypass_mode)
 800156a:	7ca3      	ldrb	r3, [r4, #18]
        tmp = 0;
 800156c:	f88d 0004 	strb.w	r0, [sp, #4]
    if (st.chip_cfg.bypass_mode)
 8001570:	b1db      	cbz	r3, 80015aa <mpu_lp_accel_mode+0x15e>
        tmp |= BIT_BYPASS_EN;
 8001572:	2302      	movs	r3, #2
 8001574:	2282      	movs	r2, #130	; 0x82
 8001576:	f88d 3004 	strb.w	r3, [sp, #4]
    if (st.chip_cfg.active_low_int)
 800157a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800157e:	b10b      	cbz	r3, 8001584 <mpu_lp_accel_mode+0x138>
        tmp |= BIT_ACTL;
 8001580:	f88d 2004 	strb.w	r2, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001584:	ae01      	add	r6, sp, #4
 8001586:	e9d4 2300 	ldrd	r2, r3, [r4]
 800158a:	7dd1      	ldrb	r1, [r2, #23]
 800158c:	7818      	ldrb	r0, [r3, #0]
 800158e:	2201      	movs	r2, #1
 8001590:	4633      	mov	r3, r6
 8001592:	f003 feb5 	bl	8005300 <i2c_write>
 8001596:	2800      	cmp	r0, #0
 8001598:	f47f af66 	bne.w	8001468 <mpu_lp_accel_mode+0x1c>
    st.chip_cfg.latched_int = enable;
 800159c:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
 80015a0:	e762      	b.n	8001468 <mpu_lp_accel_mode+0x1c>
        tmp[0] = INV_LPA_2_5HZ;
 80015a2:	2303      	movs	r3, #3
 80015a4:	f88d 3004 	strb.w	r3, [sp, #4]
 80015a8:	e782      	b.n	80014b0 <mpu_lp_accel_mode+0x64>
    if (st.chip_cfg.bypass_mode)
 80015aa:	2280      	movs	r2, #128	; 0x80
 80015ac:	e7e5      	b.n	800157a <mpu_lp_accel_mode+0x12e>
        return -1;
 80015ae:	f04f 35ff 	mov.w	r5, #4294967295
 80015b2:	e76a      	b.n	800148a <mpu_lp_accel_mode+0x3e>
    else if (rate <= 20)
 80015b4:	2d14      	cmp	r5, #20
        tmp[0] = INV_LPA_20HZ;
 80015b6:	bf94      	ite	ls
 80015b8:	2306      	movls	r3, #6
        tmp[0] = INV_LPA_40HZ;
 80015ba:	2307      	movhi	r3, #7
 80015bc:	f88d 3004 	strb.w	r3, [sp, #4]
 80015c0:	e776      	b.n	80014b0 <mpu_lp_accel_mode+0x64>
 80015c2:	bf00      	nop
 80015c4:	20000000 	.word	0x20000000

080015c8 <mpu_set_sample_rate>:
{
 80015c8:	b570      	push	{r4, r5, r6, lr}
    if (!(st.chip_cfg.sensors))
 80015ca:	4c62      	ldr	r4, [pc, #392]	; (8001754 <mpu_set_sample_rate+0x18c>)
{
 80015cc:	b082      	sub	sp, #8
    if (!(st.chip_cfg.sensors))
 80015ce:	7aa3      	ldrb	r3, [r4, #10]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 80af 	beq.w	8001734 <mpu_set_sample_rate+0x16c>
    if (st.chip_cfg.dmp_on)
 80015d6:	f894 6024 	ldrb.w	r6, [r4, #36]	; 0x24
 80015da:	2e00      	cmp	r6, #0
 80015dc:	f040 80aa 	bne.w	8001734 <mpu_set_sample_rate+0x16c>
        if (st.chip_cfg.lp_accel_mode) {
 80015e0:	7d23      	ldrb	r3, [r4, #20]
 80015e2:	4605      	mov	r5, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d15a      	bne.n	800169e <mpu_set_sample_rate+0xd6>
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 80015e8:	e9d4 1000 	ldrd	r1, r0, [r4]
 80015ec:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 80015f0:	462a      	mov	r2, r5
 80015f2:	bf28      	it	cs
 80015f4:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
        data = 1000 / rate - 1;
 80015f8:	2a04      	cmp	r2, #4
 80015fa:	bf38      	it	cc
 80015fc:	2204      	movcc	r2, #4
 80015fe:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001602:	fb95 f2f2 	sdiv	r2, r5, r2
 8001606:	ab02      	add	r3, sp, #8
 8001608:	3a01      	subs	r2, #1
 800160a:	f803 2d05 	strb.w	r2, [r3, #-5]!
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 800160e:	7800      	ldrb	r0, [r0, #0]
 8001610:	7849      	ldrb	r1, [r1, #1]
 8001612:	2201      	movs	r2, #1
 8001614:	f003 fe74 	bl	8005300 <i2c_write>
 8001618:	4606      	mov	r6, r0
 800161a:	2800      	cmp	r0, #0
 800161c:	f040 808a 	bne.w	8001734 <mpu_set_sample_rate+0x16c>
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8001620:	f89d 3003 	ldrb.w	r3, [sp, #3]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 8001624:	8d21      	ldrh	r1, [r4, #40]	; 0x28
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8001626:	3301      	adds	r3, #1
 8001628:	fb95 f3f3 	sdiv	r3, r5, r3
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 800162c:	2964      	cmp	r1, #100	; 0x64
 800162e:	460a      	mov	r2, r1
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8001630:	81e3      	strh	r3, [r4, #14]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 8001632:	bf28      	it	cs
 8001634:	2264      	movcs	r2, #100	; 0x64
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8001636:	b1c1      	cbz	r1, 800166a <mpu_set_sample_rate+0xa2>
 8001638:	4293      	cmp	r3, r2
 800163a:	d316      	bcc.n	800166a <mpu_set_sample_rate+0xa2>
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 800163c:	e9d4 1000 	ldrd	r1, r0, [r4]
    div = st.chip_cfg.sample_rate / rate - 1;
 8001640:	fbb3 f2f2 	udiv	r2, r3, r2
 8001644:	ab02      	add	r3, sp, #8
 8001646:	3a01      	subs	r2, #1
 8001648:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 800164c:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
 8001650:	7800      	ldrb	r0, [r0, #0]
 8001652:	2201      	movs	r2, #1
 8001654:	f003 fe54 	bl	8005300 <i2c_write>
 8001658:	2800      	cmp	r0, #0
 800165a:	d179      	bne.n	8001750 <mpu_set_sample_rate+0x188>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 800165c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001660:	89e3      	ldrh	r3, [r4, #14]
 8001662:	3201      	adds	r2, #1
 8001664:	fb93 f2f2 	sdiv	r2, r3, r2
 8001668:	8522      	strh	r2, [r4, #40]	; 0x28
    if (!(st.chip_cfg.sensors))
 800166a:	7aa2      	ldrb	r2, [r4, #10]
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 800166c:	085b      	lsrs	r3, r3, #1
    if (!(st.chip_cfg.sensors))
 800166e:	b19a      	cbz	r2, 8001698 <mpu_set_sample_rate+0xd0>
    if (lpf >= 188)
 8001670:	2bbb      	cmp	r3, #187	; 0xbb
 8001672:	d92b      	bls.n	80016cc <mpu_set_sample_rate+0x104>
        data = INV_FILTER_188HZ;
 8001674:	2301      	movs	r3, #1
 8001676:	f88d 3004 	strb.w	r3, [sp, #4]
    if (st.chip_cfg.lpf == data)
 800167a:	7ae2      	ldrb	r2, [r4, #11]
 800167c:	429a      	cmp	r2, r3
 800167e:	d00b      	beq.n	8001698 <mpu_set_sample_rate+0xd0>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8001680:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001684:	7891      	ldrb	r1, [r2, #2]
 8001686:	7818      	ldrb	r0, [r3, #0]
 8001688:	2201      	movs	r2, #1
 800168a:	ab01      	add	r3, sp, #4
 800168c:	f003 fe38 	bl	8005300 <i2c_write>
 8001690:	b910      	cbnz	r0, 8001698 <mpu_set_sample_rate+0xd0>
    st.chip_cfg.lpf = data;
 8001692:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001696:	72e3      	strb	r3, [r4, #11]
}
 8001698:	4630      	mov	r0, r6
 800169a:	b002      	add	sp, #8
 800169c:	bd70      	pop	{r4, r5, r6, pc}
            if (rate && (rate <= 40)) {
 800169e:	1e43      	subs	r3, r0, #1
 80016a0:	2b27      	cmp	r3, #39	; 0x27
 80016a2:	d91b      	bls.n	80016dc <mpu_set_sample_rate+0x114>
    if (st.chip_cfg.latched_int == enable)
 80016a4:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80016a8:	bb0b      	cbnz	r3, 80016ee <mpu_set_sample_rate+0x126>
 80016aa:	ae01      	add	r6, sp, #4
        tmp[0] = 0;
 80016ac:	f44f 63e0 	mov.w	r3, #1792	; 0x700
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80016b0:	e9d4 1200 	ldrd	r1, r2, [r4]
        tmp[0] = 0;
 80016b4:	f8ad 3004 	strh.w	r3, [sp, #4]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80016b8:	7810      	ldrb	r0, [r2, #0]
 80016ba:	4633      	mov	r3, r6
 80016bc:	7d49      	ldrb	r1, [r1, #21]
 80016be:	2202      	movs	r2, #2
 80016c0:	f003 fe1e 	bl	8005300 <i2c_write>
 80016c4:	2800      	cmp	r0, #0
 80016c6:	d18f      	bne.n	80015e8 <mpu_set_sample_rate+0x20>
        st.chip_cfg.lp_accel_mode = 0;
 80016c8:	7520      	strb	r0, [r4, #20]
 80016ca:	e78d      	b.n	80015e8 <mpu_set_sample_rate+0x20>
    else if (lpf >= 98)
 80016cc:	2b61      	cmp	r3, #97	; 0x61
 80016ce:	d80a      	bhi.n	80016e6 <mpu_set_sample_rate+0x11e>
    else if (lpf >= 42)
 80016d0:	2b29      	cmp	r3, #41	; 0x29
 80016d2:	d927      	bls.n	8001724 <mpu_set_sample_rate+0x15c>
        data = INV_FILTER_42HZ;
 80016d4:	2303      	movs	r3, #3
 80016d6:	f88d 3004 	strb.w	r3, [sp, #4]
 80016da:	e7ce      	b.n	800167a <mpu_set_sample_rate+0xb2>
                mpu_lp_accel_mode(rate);
 80016dc:	f7ff feb6 	bl	800144c <mpu_lp_accel_mode>
}
 80016e0:	4630      	mov	r0, r6
 80016e2:	b002      	add	sp, #8
 80016e4:	bd70      	pop	{r4, r5, r6, pc}
        data = INV_FILTER_98HZ;
 80016e6:	2302      	movs	r3, #2
 80016e8:	f88d 3004 	strb.w	r3, [sp, #4]
 80016ec:	e7c5      	b.n	800167a <mpu_set_sample_rate+0xb2>
    if (st.chip_cfg.bypass_mode)
 80016ee:	7ca3      	ldrb	r3, [r4, #18]
        tmp = 0;
 80016f0:	f88d 6004 	strb.w	r6, [sp, #4]
    if (st.chip_cfg.bypass_mode)
 80016f4:	b32b      	cbz	r3, 8001742 <mpu_set_sample_rate+0x17a>
        tmp |= BIT_BYPASS_EN;
 80016f6:	2302      	movs	r3, #2
 80016f8:	2282      	movs	r2, #130	; 0x82
 80016fa:	f88d 3004 	strb.w	r3, [sp, #4]
    if (st.chip_cfg.active_low_int)
 80016fe:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001702:	b10b      	cbz	r3, 8001708 <mpu_set_sample_rate+0x140>
        tmp |= BIT_ACTL;
 8001704:	f88d 2004 	strb.w	r2, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001708:	ae01      	add	r6, sp, #4
 800170a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800170e:	7dd1      	ldrb	r1, [r2, #23]
 8001710:	7818      	ldrb	r0, [r3, #0]
 8001712:	2201      	movs	r2, #1
 8001714:	4633      	mov	r3, r6
 8001716:	f003 fdf3 	bl	8005300 <i2c_write>
 800171a:	2800      	cmp	r0, #0
 800171c:	d1c6      	bne.n	80016ac <mpu_set_sample_rate+0xe4>
    st.chip_cfg.latched_int = enable;
 800171e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
 8001722:	e7c3      	b.n	80016ac <mpu_set_sample_rate+0xe4>
    else if (lpf >= 20)
 8001724:	2b13      	cmp	r3, #19
 8001726:	d808      	bhi.n	800173a <mpu_set_sample_rate+0x172>
    else if (lpf >= 10)
 8001728:	2b09      	cmp	r3, #9
 800172a:	d90c      	bls.n	8001746 <mpu_set_sample_rate+0x17e>
        data = INV_FILTER_10HZ;
 800172c:	2305      	movs	r3, #5
 800172e:	f88d 3004 	strb.w	r3, [sp, #4]
 8001732:	e7a2      	b.n	800167a <mpu_set_sample_rate+0xb2>
        return -1;
 8001734:	f04f 36ff 	mov.w	r6, #4294967295
 8001738:	e7ae      	b.n	8001698 <mpu_set_sample_rate+0xd0>
        data = INV_FILTER_20HZ;
 800173a:	2304      	movs	r3, #4
 800173c:	f88d 3004 	strb.w	r3, [sp, #4]
 8001740:	e79b      	b.n	800167a <mpu_set_sample_rate+0xb2>
    if (st.chip_cfg.bypass_mode)
 8001742:	2280      	movs	r2, #128	; 0x80
 8001744:	e7db      	b.n	80016fe <mpu_set_sample_rate+0x136>
        data = INV_FILTER_5HZ;
 8001746:	2206      	movs	r2, #6
 8001748:	4613      	mov	r3, r2
 800174a:	f88d 2004 	strb.w	r2, [sp, #4]
 800174e:	e794      	b.n	800167a <mpu_set_sample_rate+0xb2>
 8001750:	89e3      	ldrh	r3, [r4, #14]
 8001752:	e78a      	b.n	800166a <mpu_set_sample_rate+0xa2>
 8001754:	20000000 	.word	0x20000000

08001758 <mpu_set_sensors>:
{
 8001758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800175a:	4605      	mov	r5, r0
 800175c:	4c76      	ldr	r4, [pc, #472]	; (8001938 <mpu_set_sensors+0x1e0>)
 800175e:	b083      	sub	sp, #12
 8001760:	e9d4 3200 	ldrd	r3, r2, [r4]
 8001764:	7d59      	ldrb	r1, [r3, #21]
    if (sensors & INV_XYZ_GYRO)
 8001766:	f015 0370 	ands.w	r3, r5, #112	; 0x70
 800176a:	7810      	ldrb	r0, [r2, #0]
 800176c:	d07d      	beq.n	800186a <mpu_set_sensors+0x112>
        data = INV_CLK_PLL;
 800176e:	2301      	movs	r3, #1
 8001770:	f88d 3006 	strb.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8001774:	f10d 0606 	add.w	r6, sp, #6
 8001778:	4633      	mov	r3, r6
 800177a:	2201      	movs	r2, #1
 800177c:	f003 fdc0 	bl	8005300 <i2c_write>
 8001780:	2800      	cmp	r0, #0
 8001782:	f040 80d3 	bne.w	800192c <mpu_set_sensors+0x1d4>
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8001786:	f89d 3006 	ldrb.w	r3, [sp, #6]
    data = 0;
 800178a:	f88d 0006 	strb.w	r0, [sp, #6]
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 800178e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001792:	7323      	strb	r3, [r4, #12]
    if (!(sensors & INV_X_GYRO))
 8001794:	066b      	lsls	r3, r5, #25
 8001796:	d578      	bpl.n	800188a <mpu_set_sensors+0x132>
 8001798:	2338      	movs	r3, #56	; 0x38
 800179a:	2139      	movs	r1, #57	; 0x39
 800179c:	2201      	movs	r2, #1
 800179e:	f04f 0e3a 	mov.w	lr, #58	; 0x3a
 80017a2:	f04f 0c3b 	mov.w	ip, #59	; 0x3b
 80017a6:	2703      	movs	r7, #3
 80017a8:	2002      	movs	r0, #2
    if (!(sensors & INV_Y_GYRO))
 80017aa:	f015 0f20 	tst.w	r5, #32
 80017ae:	d104      	bne.n	80017ba <mpu_set_sensors+0x62>
        data |= BIT_STBY_YG;
 80017b0:	4673      	mov	r3, lr
 80017b2:	4661      	mov	r1, ip
 80017b4:	463a      	mov	r2, r7
 80017b6:	f88d 0006 	strb.w	r0, [sp, #6]
    if (!(sensors & INV_Z_GYRO))
 80017ba:	06e8      	lsls	r0, r5, #27
        data |= BIT_STBY_ZG;
 80017bc:	bf5c      	itt	pl
 80017be:	460b      	movpl	r3, r1
 80017c0:	f88d 2006 	strbpl.w	r2, [sp, #6]
    if (!(sensors & INV_XYZ_ACCEL))
 80017c4:	0729      	lsls	r1, r5, #28
        data |= BIT_STBY_XYZA;
 80017c6:	bf58      	it	pl
 80017c8:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 80017cc:	e9d4 2300 	ldrd	r2, r3, [r4]
 80017d0:	7d91      	ldrb	r1, [r2, #22]
 80017d2:	7818      	ldrb	r0, [r3, #0]
 80017d4:	2201      	movs	r2, #1
 80017d6:	4633      	mov	r3, r6
 80017d8:	f003 fd92 	bl	8005300 <i2c_write>
 80017dc:	4602      	mov	r2, r0
 80017de:	2800      	cmp	r0, #0
 80017e0:	f040 80a4 	bne.w	800192c <mpu_set_sensors+0x1d4>
 80017e4:	e9d4 3100 	ldrd	r3, r1, [r4]
 80017e8:	7808      	ldrb	r0, [r1, #0]
    if (sensors && (sensors != INV_XYZ_ACCEL))
 80017ea:	2d00      	cmp	r5, #0
 80017ec:	d05d      	beq.n	80018aa <mpu_set_sensors+0x152>
 80017ee:	2d08      	cmp	r5, #8
 80017f0:	d071      	beq.n	80018d6 <mpu_set_sensors+0x17e>
    if (st.chip_cfg.latched_int == enable)
 80017f2:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 80017f6:	2900      	cmp	r1, #0
 80017f8:	d17b      	bne.n	80018f2 <mpu_set_sensors+0x19a>
 80017fa:	f10d 0707 	add.w	r7, sp, #7
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 80017fe:	7919      	ldrb	r1, [r3, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	463b      	mov	r3, r7
 8001804:	f003 fd8c 	bl	8005320 <i2c_read>
 8001808:	2800      	cmp	r0, #0
 800180a:	d16d      	bne.n	80018e8 <mpu_set_sensors+0x190>
    if (sensors & INV_XYZ_COMPASS) {
 800180c:	07ea      	lsls	r2, r5, #31
 800180e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001812:	d554      	bpl.n	80018be <mpu_set_sensors+0x166>
        data = AKM_SINGLE_MEASUREMENT;
 8001814:	2111      	movs	r1, #17
    if (st.chip_cfg.dmp_on)
 8001816:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
        user_ctrl |= BIT_AUX_IF_EN;
 800181a:	f043 0320 	orr.w	r3, r3, #32
 800181e:	f88d 1006 	strb.w	r1, [sp, #6]
    if (st.chip_cfg.dmp_on)
 8001822:	2a00      	cmp	r2, #0
 8001824:	d054      	beq.n	80018d0 <mpu_set_sensors+0x178>
        user_ctrl |= BIT_DMP_EN;
 8001826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800182a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 800182e:	e9d4 1200 	ldrd	r1, r2, [r4]
 8001832:	4633      	mov	r3, r6
 8001834:	7810      	ldrb	r0, [r2, #0]
 8001836:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 800183a:	2201      	movs	r2, #1
 800183c:	f003 fd60 	bl	8005300 <i2c_write>
 8001840:	2800      	cmp	r0, #0
 8001842:	d151      	bne.n	80018e8 <mpu_set_sensors+0x190>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8001844:	e9d4 1200 	ldrd	r1, r2, [r4]
 8001848:	463b      	mov	r3, r7
 800184a:	7810      	ldrb	r0, [r2, #0]
 800184c:	7909      	ldrb	r1, [r1, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f003 fd56 	bl	8005300 <i2c_write>
 8001854:	4606      	mov	r6, r0
 8001856:	2800      	cmp	r0, #0
 8001858:	d146      	bne.n	80018e8 <mpu_set_sensors+0x190>
    delay_ms(50);
 800185a:	2032      	movs	r0, #50	; 0x32
    st.chip_cfg.sensors = sensors;
 800185c:	72a5      	strb	r5, [r4, #10]
    st.chip_cfg.lp_accel_mode = 0;
 800185e:	7526      	strb	r6, [r4, #20]
    delay_ms(50);
 8001860:	f003 fd6e 	bl	8005340 <delay_ms>
}
 8001864:	4630      	mov	r0, r6
 8001866:	b003      	add	sp, #12
 8001868:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (sensors)
 800186a:	b9dd      	cbnz	r5, 80018a4 <mpu_set_sensors+0x14c>
        data = BIT_SLEEP;
 800186c:	2340      	movs	r3, #64	; 0x40
 800186e:	ae02      	add	r6, sp, #8
 8001870:	f806 3d02 	strb.w	r3, [r6, #-2]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8001874:	4633      	mov	r3, r6
 8001876:	2201      	movs	r2, #1
 8001878:	f003 fd42 	bl	8005300 <i2c_write>
 800187c:	2800      	cmp	r0, #0
 800187e:	d155      	bne.n	800192c <mpu_set_sensors+0x1d4>
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8001880:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001888:	7323      	strb	r3, [r4, #12]
        data |= BIT_STBY_XG;
 800188a:	2204      	movs	r2, #4
 800188c:	233c      	movs	r3, #60	; 0x3c
 800188e:	f88d 2006 	strb.w	r2, [sp, #6]
 8001892:	213d      	movs	r1, #61	; 0x3d
 8001894:	2205      	movs	r2, #5
 8001896:	f04f 0e3e 	mov.w	lr, #62	; 0x3e
 800189a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 800189e:	2707      	movs	r7, #7
 80018a0:	2006      	movs	r0, #6
 80018a2:	e782      	b.n	80017aa <mpu_set_sensors+0x52>
        data = 0;
 80018a4:	f88d 3006 	strb.w	r3, [sp, #6]
 80018a8:	e764      	b.n	8001774 <mpu_set_sensors+0x1c>
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 80018aa:	f10d 0707 	add.w	r7, sp, #7
 80018ae:	7919      	ldrb	r1, [r3, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	463b      	mov	r3, r7
 80018b4:	f003 fd34 	bl	8005320 <i2c_read>
 80018b8:	b9b0      	cbnz	r0, 80018e8 <mpu_set_sensors+0x190>
 80018ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
        data = AKM_POWER_DOWN;
 80018be:	2110      	movs	r1, #16
    if (st.chip_cfg.dmp_on)
 80018c0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
        user_ctrl &= ~BIT_AUX_IF_EN;
 80018c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80018c8:	f88d 1006 	strb.w	r1, [sp, #6]
    if (st.chip_cfg.dmp_on)
 80018cc:	2a00      	cmp	r2, #0
 80018ce:	d1aa      	bne.n	8001826 <mpu_set_sensors+0xce>
        user_ctrl &= ~BIT_DMP_EN;
 80018d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018d4:	e7a9      	b.n	800182a <mpu_set_sensors+0xd2>
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 80018d6:	f10d 0707 	add.w	r7, sp, #7
 80018da:	7919      	ldrb	r1, [r3, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	463b      	mov	r3, r7
 80018e0:	f003 fd1e 	bl	8005320 <i2c_read>
 80018e4:	2800      	cmp	r0, #0
 80018e6:	d0e8      	beq.n	80018ba <mpu_set_sensors+0x162>
        return -1;
 80018e8:	f04f 36ff 	mov.w	r6, #4294967295
}
 80018ec:	4630      	mov	r0, r6
 80018ee:	b003      	add	sp, #12
 80018f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (st.chip_cfg.bypass_mode)
 80018f2:	7ca1      	ldrb	r1, [r4, #18]
        tmp = 0;
 80018f4:	f88d 2007 	strb.w	r2, [sp, #7]
    if (st.chip_cfg.bypass_mode)
 80018f8:	b1b1      	cbz	r1, 8001928 <mpu_set_sensors+0x1d0>
        tmp |= BIT_BYPASS_EN;
 80018fa:	2202      	movs	r2, #2
 80018fc:	2182      	movs	r1, #130	; 0x82
 80018fe:	f88d 2007 	strb.w	r2, [sp, #7]
    if (st.chip_cfg.active_low_int)
 8001902:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8001906:	b10a      	cbz	r2, 800190c <mpu_set_sensors+0x1b4>
        tmp |= BIT_ACTL;
 8001908:	f88d 1007 	strb.w	r1, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800190c:	f10d 0707 	add.w	r7, sp, #7
 8001910:	7dd9      	ldrb	r1, [r3, #23]
 8001912:	2201      	movs	r2, #1
 8001914:	463b      	mov	r3, r7
 8001916:	f003 fcf3 	bl	8005300 <i2c_write>
 800191a:	b908      	cbnz	r0, 8001920 <mpu_set_sensors+0x1c8>
    st.chip_cfg.latched_int = enable;
 800191c:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
 8001920:	e9d4 3200 	ldrd	r3, r2, [r4]
 8001924:	7810      	ldrb	r0, [r2, #0]
 8001926:	e76a      	b.n	80017fe <mpu_set_sensors+0xa6>
    if (st.chip_cfg.bypass_mode)
 8001928:	2180      	movs	r1, #128	; 0x80
 800192a:	e7ea      	b.n	8001902 <mpu_set_sensors+0x1aa>
        st.chip_cfg.sensors = 0;
 800192c:	2300      	movs	r3, #0
        return -1;
 800192e:	f04f 36ff 	mov.w	r6, #4294967295
        st.chip_cfg.sensors = 0;
 8001932:	72a3      	strb	r3, [r4, #10]
        return -1;
 8001934:	e796      	b.n	8001864 <mpu_set_sensors+0x10c>
 8001936:	bf00      	nop
 8001938:	20000000 	.word	0x20000000

0800193c <mpu_init>:
    data[0] = BIT_RESET;
 800193c:	2380      	movs	r3, #128	; 0x80
{
 800193e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001940:	b085      	sub	sp, #20
    data[0] = BIT_RESET;
 8001942:	ad04      	add	r5, sp, #16
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001944:	4c71      	ldr	r4, [pc, #452]	; (8001b0c <mpu_init+0x1d0>)
    data[0] = BIT_RESET;
 8001946:	f805 3d08 	strb.w	r3, [r5, #-8]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800194a:	e9d4 2100 	ldrd	r2, r1, [r4]
 800194e:	462b      	mov	r3, r5
 8001950:	7808      	ldrb	r0, [r1, #0]
 8001952:	7d51      	ldrb	r1, [r2, #21]
 8001954:	2201      	movs	r2, #1
 8001956:	f003 fcd3 	bl	8005300 <i2c_write>
 800195a:	2800      	cmp	r0, #0
 800195c:	f040 81a9 	bne.w	8001cb2 <mpu_init+0x376>
 8001960:	4606      	mov	r6, r0
    delay_ms(100);
 8001962:	2064      	movs	r0, #100	; 0x64
 8001964:	f003 fcec 	bl	8005340 <delay_ms>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001968:	e9d4 3200 	ldrd	r3, r2, [r4]
    data[0] = 0x00;
 800196c:	f88d 6008 	strb.w	r6, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001970:	7810      	ldrb	r0, [r2, #0]
 8001972:	7d59      	ldrb	r1, [r3, #21]
 8001974:	2201      	movs	r2, #1
 8001976:	462b      	mov	r3, r5
 8001978:	f003 fcc2 	bl	8005300 <i2c_write>
 800197c:	2800      	cmp	r0, #0
 800197e:	f040 8198 	bne.w	8001cb2 <mpu_init+0x376>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 8001982:	e9d4 2100 	ldrd	r2, r1, [r4]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 8001986:	2348      	movs	r3, #72	; 0x48
   st.chip_cfg.accel_half = 0;
 8001988:	74e0      	strb	r0, [r4, #19]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 800198a:	f88d 3008 	strb.w	r3, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 800198e:	7808      	ldrb	r0, [r1, #0]
 8001990:	462b      	mov	r3, r5
 8001992:	7a11      	ldrb	r1, [r2, #8]
 8001994:	2201      	movs	r2, #1
 8001996:	f003 fcb3 	bl	8005300 <i2c_write>
 800199a:	2800      	cmp	r0, #0
 800199c:	f040 8189 	bne.w	8001cb2 <mpu_init+0x376>
    st.chip_cfg.sample_rate = 0xFFFF;
 80019a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    st.chip_cfg.clk_src = INV_CLK_PLL;
 80019a4:	2701      	movs	r7, #1
    st.chip_cfg.gyro_fsr = 0xFF;
 80019a6:	f04f 36ff 	mov.w	r6, #4294967295
    st.chip_cfg.fifo_enable = 0xFF;
 80019aa:	f04f 0eff 	mov.w	lr, #255	; 0xff
        data = INV_FSR_2000DPS << 3;
 80019ae:	f04f 0c18 	mov.w	ip, #24
    st.chip_cfg.fifo_enable = 0xFF;
 80019b2:	7422      	strb	r2, [r4, #16]
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 80019b4:	8522      	strh	r2, [r4, #40]	; 0x28
        data = INV_FSR_2000DPS << 3;
 80019b6:	ad04      	add	r5, sp, #16
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 80019b8:	6862      	ldr	r2, [r4, #4]
 80019ba:	6821      	ldr	r1, [r4, #0]
        data = INV_FSR_2000DPS << 3;
 80019bc:	f805 cd0c 	strb.w	ip, [r5, #-12]!
    st.chip_cfg.lp_accel_mode = 0;
 80019c0:	82a0      	strh	r0, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 80019c2:	f8c4 0016 	str.w	r0, [r4, #22]
    st.chip_cfg.dmp_on = 0;
 80019c6:	6260      	str	r0, [r4, #36]	; 0x24
    st.chip_cfg.gyro_fsr = 0xFF;
 80019c8:	60a6      	str	r6, [r4, #8]
    st.chip_cfg.sample_rate = 0xFFFF;
 80019ca:	81e6      	strh	r6, [r4, #14]
    st.chip_cfg.bypass_mode = 0xFF;
 80019cc:	f884 e012 	strb.w	lr, [r4, #18]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 80019d0:	7327      	strb	r7, [r4, #12]
    st.chip_cfg.active_low_int = 1;
 80019d2:	8467      	strh	r7, [r4, #34]	; 0x22
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 80019d4:	f8c4 001a 	str.w	r0, [r4, #26]
 80019d8:	f8c4 001e 	str.w	r0, [r4, #30]
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 80019dc:	7810      	ldrb	r0, [r2, #0]
 80019de:	7989      	ldrb	r1, [r1, #6]
 80019e0:	462b      	mov	r3, r5
 80019e2:	463a      	mov	r2, r7
 80019e4:	f003 fc8c 	bl	8005300 <i2c_write>
 80019e8:	2800      	cmp	r0, #0
 80019ea:	f040 808b 	bne.w	8001b04 <mpu_init+0x1c8>
    st.chip_cfg.gyro_fsr = data >> 3;
 80019ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if (!(st.chip_cfg.sensors))
 80019f2:	7aa2      	ldrb	r2, [r4, #10]
    st.chip_cfg.gyro_fsr = data >> 3;
 80019f4:	08db      	lsrs	r3, r3, #3
 80019f6:	7223      	strb	r3, [r4, #8]
    if (!(st.chip_cfg.sensors))
 80019f8:	2a00      	cmp	r2, #0
 80019fa:	f000 815a 	beq.w	8001cb2 <mpu_init+0x376>
    if (st.chip_cfg.accel_fsr == (data >> 3))
 80019fe:	7a63      	ldrb	r3, [r4, #9]
        data = INV_FSR_2G << 3;
 8001a00:	f88d 0004 	strb.w	r0, [sp, #4]
    if (st.chip_cfg.accel_fsr == (data >> 3))
 8001a04:	b193      	cbz	r3, 8001a2c <mpu_init+0xf0>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8001a06:	e9d4 1300 	ldrd	r1, r3, [r4]
 8001a0a:	463a      	mov	r2, r7
 8001a0c:	7818      	ldrb	r0, [r3, #0]
 8001a0e:	79c9      	ldrb	r1, [r1, #7]
 8001a10:	462b      	mov	r3, r5
 8001a12:	f003 fc75 	bl	8005300 <i2c_write>
 8001a16:	2800      	cmp	r0, #0
 8001a18:	f040 814b 	bne.w	8001cb2 <mpu_init+0x376>
    st.chip_cfg.accel_fsr = data >> 3;
 8001a1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if (!(st.chip_cfg.sensors))
 8001a20:	7aa2      	ldrb	r2, [r4, #10]
    st.chip_cfg.accel_fsr = data >> 3;
 8001a22:	08db      	lsrs	r3, r3, #3
 8001a24:	7263      	strb	r3, [r4, #9]
    if (!(st.chip_cfg.sensors))
 8001a26:	2a00      	cmp	r2, #0
 8001a28:	f000 8143 	beq.w	8001cb2 <mpu_init+0x376>
        data = INV_FILTER_42HZ;
 8001a2c:	2203      	movs	r2, #3
    if (st.chip_cfg.lpf == data)
 8001a2e:	7ae3      	ldrb	r3, [r4, #11]
        data = INV_FILTER_42HZ;
 8001a30:	f88d 2004 	strb.w	r2, [sp, #4]
    if (st.chip_cfg.lpf == data)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d00d      	beq.n	8001a54 <mpu_init+0x118>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8001a38:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001a3c:	7891      	ldrb	r1, [r2, #2]
 8001a3e:	7818      	ldrb	r0, [r3, #0]
 8001a40:	2201      	movs	r2, #1
 8001a42:	462b      	mov	r3, r5
 8001a44:	f003 fc5c 	bl	8005300 <i2c_write>
 8001a48:	2800      	cmp	r0, #0
 8001a4a:	f040 8132 	bne.w	8001cb2 <mpu_init+0x376>
    st.chip_cfg.lpf = data;
 8001a4e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001a52:	72e3      	strb	r3, [r4, #11]
    if (mpu_set_sample_rate(1000))
 8001a54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a58:	f7ff fdb6 	bl	80015c8 <mpu_set_sample_rate>
 8001a5c:	2800      	cmp	r0, #0
 8001a5e:	f040 8128 	bne.w	8001cb2 <mpu_init+0x376>
    if (st.chip_cfg.dmp_on)
 8001a62:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001a66:	b9c3      	cbnz	r3, 8001a9a <mpu_init+0x15e>
        if (!(st.chip_cfg.sensors))
 8001a68:	7aa2      	ldrb	r2, [r4, #10]
 8001a6a:	2a00      	cmp	r2, #0
 8001a6c:	f000 8121 	beq.w	8001cb2 <mpu_init+0x376>
        if (sensors || st.chip_cfg.lp_accel_mode)
 8001a70:	7d22      	ldrb	r2, [r4, #20]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8001a72:	7423      	strb	r3, [r4, #16]
        if (sensors || st.chip_cfg.lp_accel_mode)
 8001a74:	2a00      	cmp	r2, #0
 8001a76:	f000 8125 	beq.w	8001cc4 <mpu_init+0x388>
        if (enable && st.chip_cfg.int_enable)
 8001a7a:	7c63      	ldrb	r3, [r4, #17]
 8001a7c:	b96b      	cbnz	r3, 8001a9a <mpu_init+0x15e>
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001a7e:	e9d4 1300 	ldrd	r1, r3, [r4]
            tmp = BIT_DATA_RDY_EN;
 8001a82:	2201      	movs	r2, #1
 8001a84:	f88d 2004 	strb.w	r2, [sp, #4]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001a88:	7818      	ldrb	r0, [r3, #0]
 8001a8a:	7c49      	ldrb	r1, [r1, #17]
 8001a8c:	462b      	mov	r3, r5
 8001a8e:	f003 fc37 	bl	8005300 <i2c_write>
 8001a92:	b910      	cbnz	r0, 8001a9a <mpu_init+0x15e>
        st.chip_cfg.int_enable = tmp;
 8001a94:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001a98:	7463      	strb	r3, [r4, #17]
    if (st.chip_cfg.bypass_mode == bypass_on)
 8001a9a:	7ca3      	ldrb	r3, [r4, #18]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	f040 8105 	bne.w	8001cac <mpu_init+0x370>
{
 8001aa2:	260c      	movs	r6, #12
    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 8001aa4:	462b      	mov	r3, r5
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4630      	mov	r0, r6
 8001aac:	f003 fc38 	bl	8005320 <i2c_read>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8001ab0:	1c73      	adds	r3, r6, #1
        if (!result && (data[0] == AKM_WHOAMI))
 8001ab2:	b918      	cbnz	r0, 8001abc <mpu_init+0x180>
 8001ab4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001ab8:	2a48      	cmp	r2, #72	; 0x48
 8001aba:	d02b      	beq.n	8001b14 <mpu_init+0x1d8>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8001abc:	b2de      	uxtb	r6, r3
 8001abe:	2e10      	cmp	r6, #16
 8001ac0:	d1f0      	bne.n	8001aa4 <mpu_init+0x168>
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8001ac2:	89e3      	ldrh	r3, [r4, #14]
 8001ac4:	2b09      	cmp	r3, #9
 8001ac6:	f240 80f4 	bls.w	8001cb2 <mpu_init+0x376>
    div = st.chip_cfg.sample_rate / rate - 1;
 8001aca:	4911      	ldr	r1, [pc, #68]	; (8001b10 <mpu_init+0x1d4>)
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8001acc:	6822      	ldr	r2, [r4, #0]
    div = st.chip_cfg.sample_rate / rate - 1;
 8001ace:	fba1 1303 	umull	r1, r3, r1, r3
 8001ad2:	08db      	lsrs	r3, r3, #3
 8001ad4:	3b01      	subs	r3, #1
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8001ad6:	6860      	ldr	r0, [r4, #4]
    div = st.chip_cfg.sample_rate / rate - 1;
 8001ad8:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8001adc:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
 8001ae0:	462b      	mov	r3, r5
 8001ae2:	7800      	ldrb	r0, [r0, #0]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f003 fc0b 	bl	8005300 <i2c_write>
 8001aea:	4606      	mov	r6, r0
 8001aec:	2800      	cmp	r0, #0
 8001aee:	f040 80e0 	bne.w	8001cb2 <mpu_init+0x376>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 8001af2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001af6:	89e3      	ldrh	r3, [r4, #14]
 8001af8:	3201      	adds	r2, #1
 8001afa:	fb93 f3f2 	sdiv	r3, r3, r2
 8001afe:	8523      	strh	r3, [r4, #40]	; 0x28
    mpu_set_sensors(0);
 8001b00:	f7ff fe2a 	bl	8001758 <mpu_set_sensors>
}
 8001b04:	4630      	mov	r0, r6
 8001b06:	b005      	add	sp, #20
 8001b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	cccccccd 	.word	0xcccccccd
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;

    data[0] = AKM_POWER_DOWN;
 8001b14:	2710      	movs	r7, #16
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001b16:	4630      	mov	r0, r6
 8001b18:	462b      	mov	r3, r5
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	210a      	movs	r1, #10
    st.chip_cfg.compass_addr = akm_addr;
 8001b1e:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    data[0] = AKM_POWER_DOWN;
 8001b22:	f88d 7004 	strb.w	r7, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001b26:	f003 fbeb 	bl	8005300 <i2c_write>
 8001b2a:	2800      	cmp	r0, #0
 8001b2c:	d1c9      	bne.n	8001ac2 <mpu_init+0x186>
        return -1;
    delay_ms(1);

    data[0] = AKM_FUSE_ROM_ACCESS;
 8001b2e:	261f      	movs	r6, #31
    delay_ms(1);
 8001b30:	2001      	movs	r0, #1
 8001b32:	f003 fc05 	bl	8005340 <delay_ms>
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001b36:	462b      	mov	r3, r5
 8001b38:	2201      	movs	r2, #1
 8001b3a:	210a      	movs	r1, #10
 8001b3c:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    data[0] = AKM_FUSE_ROM_ACCESS;
 8001b40:	f88d 6004 	strb.w	r6, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001b44:	f003 fbdc 	bl	8005300 <i2c_write>
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d1ba      	bne.n	8001ac2 <mpu_init+0x186>
        return -1;
    delay_ms(1);
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f003 fbf7 	bl	8005340 <delay_ms>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 8001b52:	462b      	mov	r3, r5
 8001b54:	2203      	movs	r2, #3
 8001b56:	4639      	mov	r1, r7
 8001b58:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8001b5c:	f003 fbe0 	bl	8005320 <i2c_read>
 8001b60:	2800      	cmp	r0, #0
 8001b62:	d1ae      	bne.n	8001ac2 <mpu_init+0x186>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8001b64:	f89d 2004 	ldrb.w	r2, [sp, #4]
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8001b68:	f89d 0005 	ldrb.w	r0, [sp, #5]
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 8001b6c:	f89d 6006 	ldrb.w	r6, [sp, #6]
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8001b70:	3280      	adds	r2, #128	; 0x80
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8001b72:	3080      	adds	r0, #128	; 0x80
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 8001b74:	3680      	adds	r6, #128	; 0x80
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8001b76:	85a2      	strh	r2, [r4, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8001b78:	85e0      	strh	r0, [r4, #46]	; 0x2e

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001b7a:	462b      	mov	r3, r5
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	210a      	movs	r1, #10
 8001b80:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 8001b84:	8626      	strh	r6, [r4, #48]	; 0x30
    data[0] = AKM_POWER_DOWN;
 8001b86:	f88d 7004 	strb.w	r7, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001b8a:	f003 fbb9 	bl	8005300 <i2c_write>
 8001b8e:	4606      	mov	r6, r0
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d196      	bne.n	8001ac2 <mpu_init+0x186>
        return -1;
    delay_ms(1);
 8001b94:	2001      	movs	r0, #1
 8001b96:	f003 fbd3 	bl	8005340 <delay_ms>
    if (st.chip_cfg.bypass_mode == bypass_on)
 8001b9a:	7ca3      	ldrb	r3, [r4, #18]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f040 808d 	bne.w	8001cbc <mpu_init+0x380>

    mpu_set_bypass(0);

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8001ba2:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = 0x40;
 8001ba6:	2140      	movs	r1, #64	; 0x40
 8001ba8:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8001bac:	7e91      	ldrb	r1, [r2, #26]
 8001bae:	7818      	ldrb	r0, [r3, #0]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	462b      	mov	r3, r5
 8001bb4:	f003 fba4 	bl	8005300 <i2c_write>
 8001bb8:	2800      	cmp	r0, #0
 8001bba:	d182      	bne.n	8001ac2 <mpu_init+0x186>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8001bbc:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 8001bc0:	6862      	ldr	r2, [r4, #4]
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8001bc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 8001bc6:	6821      	ldr	r1, [r4, #0]
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8001bc8:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 8001bcc:	7810      	ldrb	r0, [r2, #0]
 8001bce:	7f89      	ldrb	r1, [r1, #30]
 8001bd0:	462b      	mov	r3, r5
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f003 fb94 	bl	8005300 <i2c_write>
 8001bd8:	2800      	cmp	r0, #0
 8001bda:	f47f af72 	bne.w	8001ac2 <mpu_init+0x186>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 8001bde:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = AKM_REG_ST1;
 8001be2:	2102      	movs	r1, #2
 8001be4:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 8001be8:	7fd1      	ldrb	r1, [r2, #31]
 8001bea:	7818      	ldrb	r0, [r3, #0]
 8001bec:	2201      	movs	r2, #1
 8001bee:	462b      	mov	r3, r5
 8001bf0:	f003 fb86 	bl	8005300 <i2c_write>
 8001bf4:	2800      	cmp	r0, #0
 8001bf6:	f47f af64 	bne.w	8001ac2 <mpu_init+0x186>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 8001bfa:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = BIT_SLAVE_EN | 8;
 8001bfe:	2188      	movs	r1, #136	; 0x88
 8001c00:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 8001c04:	f892 1020 	ldrb.w	r1, [r2, #32]
 8001c08:	7818      	ldrb	r0, [r3, #0]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	462b      	mov	r3, r5
 8001c0e:	f003 fb77 	bl	8005300 <i2c_write>
 8001c12:	2800      	cmp	r0, #0
 8001c14:	f47f af55 	bne.w	8001ac2 <mpu_init+0x186>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8001c18:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = st.chip_cfg.compass_addr;
 8001c1c:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 8001c20:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8001c24:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 8001c28:	7818      	ldrb	r0, [r3, #0]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	462b      	mov	r3, r5
 8001c2e:	f003 fb67 	bl	8005300 <i2c_write>
 8001c32:	2800      	cmp	r0, #0
 8001c34:	f47f af45 	bne.w	8001ac2 <mpu_init+0x186>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8001c38:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = AKM_REG_CNTL;
 8001c3c:	210a      	movs	r1, #10
 8001c3e:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8001c42:	f892 1022 	ldrb.w	r1, [r2, #34]	; 0x22
 8001c46:	7818      	ldrb	r0, [r3, #0]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	462b      	mov	r3, r5
 8001c4c:	f003 fb58 	bl	8005300 <i2c_write>
 8001c50:	2800      	cmp	r0, #0
 8001c52:	f47f af36 	bne.w	8001ac2 <mpu_init+0x186>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8001c56:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = BIT_SLAVE_EN | 1;
 8001c5a:	2181      	movs	r1, #129	; 0x81
 8001c5c:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8001c60:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 8001c64:	7818      	ldrb	r0, [r3, #0]
 8001c66:	2201      	movs	r2, #1
 8001c68:	462b      	mov	r3, r5
 8001c6a:	f003 fb49 	bl	8005300 <i2c_write>
 8001c6e:	2800      	cmp	r0, #0
 8001c70:	f47f af27 	bne.w	8001ac2 <mpu_init+0x186>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 8001c74:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = AKM_SINGLE_MEASUREMENT;
 8001c78:	2111      	movs	r1, #17
 8001c7a:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 8001c7e:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
 8001c82:	7818      	ldrb	r0, [r3, #0]
 8001c84:	2201      	movs	r2, #1
 8001c86:	462b      	mov	r3, r5
 8001c88:	f003 fb3a 	bl	8005300 <i2c_write>
 8001c8c:	2800      	cmp	r0, #0
 8001c8e:	f47f af18 	bne.w	8001ac2 <mpu_init+0x186>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 8001c92:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = 0x03;
 8001c96:	2103      	movs	r1, #3
 8001c98:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 8001c9c:	f892 1027 	ldrb.w	r1, [r2, #39]	; 0x27
 8001ca0:	7818      	ldrb	r0, [r3, #0]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	462b      	mov	r3, r5
 8001ca6:	f003 fb2b 	bl	8005300 <i2c_write>
 8001caa:	e70a      	b.n	8001ac2 <mpu_init+0x186>
 8001cac:	f7ff fade 	bl	800126c <mpu_set_bypass.part.1.constprop.7>
 8001cb0:	e6f7      	b.n	8001aa2 <mpu_init+0x166>
        return -1;
 8001cb2:	f04f 36ff 	mov.w	r6, #4294967295
}
 8001cb6:	4630      	mov	r0, r6
 8001cb8:	b005      	add	sp, #20
 8001cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cbc:	4630      	mov	r0, r6
 8001cbe:	f7ff fa63 	bl	8001188 <mpu_set_bypass.part.1>
 8001cc2:	e76e      	b.n	8001ba2 <mpu_init+0x266>
            tmp = 0x00;
 8001cc4:	f88d 2004 	strb.w	r2, [sp, #4]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001cc8:	e9d4 1300 	ldrd	r1, r3, [r4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	7818      	ldrb	r0, [r3, #0]
 8001cd0:	7c49      	ldrb	r1, [r1, #17]
 8001cd2:	462b      	mov	r3, r5
 8001cd4:	f003 fb14 	bl	8005300 <i2c_write>
 8001cd8:	2800      	cmp	r0, #0
 8001cda:	f43f aedb 	beq.w	8001a94 <mpu_init+0x158>
 8001cde:	e6dc      	b.n	8001a9a <mpu_init+0x15e>

08001ce0 <mpu_read_fifo_stream>:
{
 8001ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!st.chip_cfg.dmp_on)
 8001ce4:	4d24      	ldr	r5, [pc, #144]	; (8001d78 <mpu_read_fifo_stream+0x98>)
{
 8001ce6:	b082      	sub	sp, #8
    if (!st.chip_cfg.dmp_on)
 8001ce8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d038      	beq.n	8001d62 <mpu_read_fifo_stream+0x82>
    if (!st.chip_cfg.sensors)
 8001cf0:	7aab      	ldrb	r3, [r5, #10]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d035      	beq.n	8001d62 <mpu_read_fifo_stream+0x82>
 8001cf6:	4617      	mov	r7, r2
    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8001cf8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001cfc:	4688      	mov	r8, r1
 8001cfe:	4606      	mov	r6, r0
 8001d00:	7b11      	ldrb	r1, [r2, #12]
 8001d02:	7818      	ldrb	r0, [r3, #0]
 8001d04:	2202      	movs	r2, #2
 8001d06:	ab01      	add	r3, sp, #4
 8001d08:	f003 fb0a 	bl	8005320 <i2c_read>
 8001d0c:	bb48      	cbnz	r0, 8001d62 <mpu_read_fifo_stream+0x82>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8001d0e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001d12:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8001d16:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    if (fifo_count < length) {
 8001d1a:	42b4      	cmp	r4, r6
 8001d1c:	d320      	bcc.n	8001d60 <mpu_read_fifo_stream+0x80>
 8001d1e:	e9d5 2300 	ldrd	r2, r3, [r5]
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8001d22:	8859      	ldrh	r1, [r3, #2]
 8001d24:	7818      	ldrb	r0, [r3, #0]
 8001d26:	ebb4 0f51 	cmp.w	r4, r1, lsr #1
 8001d2a:	d90c      	bls.n	8001d46 <mpu_read_fifo_stream+0x66>
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8001d2c:	7cd1      	ldrb	r1, [r2, #19]
 8001d2e:	ab01      	add	r3, sp, #4
 8001d30:	2201      	movs	r2, #1
 8001d32:	f003 faf5 	bl	8005320 <i2c_read>
 8001d36:	b9a0      	cbnz	r0, 8001d62 <mpu_read_fifo_stream+0x82>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8001d38:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001d3c:	06db      	lsls	r3, r3, #27
 8001d3e:	d415      	bmi.n	8001d6c <mpu_read_fifo_stream+0x8c>
 8001d40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001d44:	7818      	ldrb	r0, [r3, #0]
    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 8001d46:	7b51      	ldrb	r1, [r2, #13]
 8001d48:	4643      	mov	r3, r8
 8001d4a:	b2f2      	uxtb	r2, r6
 8001d4c:	f003 fae8 	bl	8005320 <i2c_read>
 8001d50:	b938      	cbnz	r0, 8001d62 <mpu_read_fifo_stream+0x82>
    more[0] = fifo_count / length - 1;
 8001d52:	fbb4 f4f6 	udiv	r4, r4, r6
 8001d56:	3c01      	subs	r4, #1
 8001d58:	703c      	strb	r4, [r7, #0]
}
 8001d5a:	b002      	add	sp, #8
 8001d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        more[0] = 0;
 8001d60:	7038      	strb	r0, [r7, #0]
        return -1;
 8001d62:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001d66:	b002      	add	sp, #8
 8001d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            mpu_reset_fifo();
 8001d6c:	f7ff fac2 	bl	80012f4 <mpu_reset_fifo>
            return -2;
 8001d70:	f06f 0001 	mvn.w	r0, #1
 8001d74:	e7f1      	b.n	8001d5a <mpu_read_fifo_stream+0x7a>
 8001d76:	bf00      	nop
 8001d78:	20000000 	.word	0x20000000

08001d7c <mpu_write_mem>:
    if (!data)
 8001d7c:	b35a      	cbz	r2, 8001dd6 <mpu_write_mem+0x5a>
{
 8001d7e:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!st.chip_cfg.sensors)
 8001d80:	4c16      	ldr	r4, [pc, #88]	; (8001ddc <mpu_write_mem+0x60>)
{
 8001d82:	b083      	sub	sp, #12
    if (!st.chip_cfg.sensors)
 8001d84:	7aa3      	ldrb	r3, [r4, #10]
 8001d86:	b313      	cbz	r3, 8001dce <mpu_write_mem+0x52>
    if (tmp[1] + length > st.hw->bank_size)
 8001d88:	6867      	ldr	r7, [r4, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001d8a:	b2c3      	uxtb	r3, r0
    if (tmp[1] + length > st.hw->bank_size)
 8001d8c:	897d      	ldrh	r5, [r7, #10]
 8001d8e:	185e      	adds	r6, r3, r1
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8001d90:	0a00      	lsrs	r0, r0, #8
    if (tmp[1] + length > st.hw->bank_size)
 8001d92:	42ae      	cmp	r6, r5
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001d94:	f88d 3005 	strb.w	r3, [sp, #5]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8001d98:	f88d 0004 	strb.w	r0, [sp, #4]
    if (tmp[1] + length > st.hw->bank_size)
 8001d9c:	dc17      	bgt.n	8001dce <mpu_write_mem+0x52>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8001d9e:	6823      	ldr	r3, [r4, #0]
 8001da0:	4615      	mov	r5, r2
 8001da2:	460e      	mov	r6, r1
 8001da4:	7838      	ldrb	r0, [r7, #0]
 8001da6:	7ed9      	ldrb	r1, [r3, #27]
 8001da8:	2202      	movs	r2, #2
 8001daa:	ab01      	add	r3, sp, #4
 8001dac:	f003 faa8 	bl	8005300 <i2c_write>
 8001db0:	b968      	cbnz	r0, 8001dce <mpu_write_mem+0x52>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8001db2:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001db6:	462b      	mov	r3, r5
 8001db8:	b2f2      	uxtb	r2, r6
 8001dba:	7e09      	ldrb	r1, [r1, #24]
 8001dbc:	7800      	ldrb	r0, [r0, #0]
 8001dbe:	f003 fa9f 	bl	8005300 <i2c_write>
 8001dc2:	3000      	adds	r0, #0
 8001dc4:	bf18      	it	ne
 8001dc6:	2001      	movne	r0, #1
 8001dc8:	4240      	negs	r0, r0
}
 8001dca:	b003      	add	sp, #12
 8001dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
 8001dce:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001dd2:	b003      	add	sp, #12
 8001dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
 8001dd6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001dda:	4770      	bx	lr
 8001ddc:	20000000 	.word	0x20000000

08001de0 <mpu_load_firmware>:
{
 8001de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (st.chip_cfg.dmp_loaded)
 8001de4:	4d4f      	ldr	r5, [pc, #316]	; (8001f24 <mpu_load_firmware+0x144>)
{
 8001de6:	b08b      	sub	sp, #44	; 0x2c
    if (st.chip_cfg.dmp_loaded)
 8001de8:	f895 4025 	ldrb.w	r4, [r5, #37]	; 0x25
 8001dec:	2c00      	cmp	r4, #0
 8001dee:	d172      	bne.n	8001ed6 <mpu_load_firmware+0xf6>
    if (!firmware)
 8001df0:	2900      	cmp	r1, #0
 8001df2:	d070      	beq.n	8001ed6 <mpu_load_firmware+0xf6>
 8001df4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001df8:	9101      	str	r1, [sp, #4]
 8001dfa:	4681      	mov	r9, r0
    for (ii = 0; ii < length; ii += this_write) {
 8001dfc:	2800      	cmp	r0, #0
 8001dfe:	f000 808c 	beq.w	8001f1a <mpu_load_firmware+0x13a>
        this_write = min(LOAD_CHUNK, length - ii);
 8001e02:	2810      	cmp	r0, #16
 8001e04:	4606      	mov	r6, r0
 8001e06:	bfa8      	it	ge
 8001e08:	2610      	movge	r6, #16
    if (!st.chip_cfg.sensors)
 8001e0a:	7aab      	ldrb	r3, [r5, #10]
        this_write = min(LOAD_CHUNK, length - ii);
 8001e0c:	fa1f fb86 	uxth.w	fp, r6
    if (!st.chip_cfg.sensors)
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d060      	beq.n	8001ed6 <mpu_load_firmware+0xf6>
    if (tmp[1] + length > st.hw->bank_size)
 8001e14:	6869      	ldr	r1, [r5, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8001e16:	f8ad 4014 	strh.w	r4, [sp, #20]
    if (tmp[1] + length > st.hw->bank_size)
 8001e1a:	894b      	ldrh	r3, [r1, #10]
 8001e1c:	42b3      	cmp	r3, r6
 8001e1e:	db5a      	blt.n	8001ed6 <mpu_load_firmware+0xf6>
 8001e20:	9f01      	ldr	r7, [sp, #4]
 8001e22:	f10d 0a14 	add.w	sl, sp, #20
 8001e26:	e035      	b.n	8001e94 <mpu_load_firmware+0xb4>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8001e28:	682b      	ldr	r3, [r5, #0]
 8001e2a:	7808      	ldrb	r0, [r1, #0]
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	7ed9      	ldrb	r1, [r3, #27]
 8001e30:	4653      	mov	r3, sl
 8001e32:	f003 fa65 	bl	8005300 <i2c_write>
 8001e36:	2800      	cmp	r0, #0
 8001e38:	d14d      	bne.n	8001ed6 <mpu_load_firmware+0xf6>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8001e3a:	e9d5 1300 	ldrd	r1, r3, [r5]
 8001e3e:	4642      	mov	r2, r8
 8001e40:	7818      	ldrb	r0, [r3, #0]
 8001e42:	7e09      	ldrb	r1, [r1, #24]
 8001e44:	ab06      	add	r3, sp, #24
 8001e46:	f003 fa6b 	bl	8005320 <i2c_read>
 8001e4a:	2800      	cmp	r0, #0
 8001e4c:	d143      	bne.n	8001ed6 <mpu_load_firmware+0xf6>
        if (memcmp(firmware+ii, cur, this_write))
 8001e4e:	4632      	mov	r2, r6
 8001e50:	4638      	mov	r0, r7
 8001e52:	a906      	add	r1, sp, #24
 8001e54:	f008 fb3a 	bl	800a4cc <memcmp>
 8001e58:	2800      	cmp	r0, #0
 8001e5a:	d141      	bne.n	8001ee0 <mpu_load_firmware+0x100>
    for (ii = 0; ii < length; ii += this_write) {
 8001e5c:	445c      	add	r4, fp
 8001e5e:	b2a4      	uxth	r4, r4
 8001e60:	45a1      	cmp	r9, r4
 8001e62:	d942      	bls.n	8001eea <mpu_load_firmware+0x10a>
        this_write = min(LOAD_CHUNK, length - ii);
 8001e64:	eba9 0604 	sub.w	r6, r9, r4
 8001e68:	2e10      	cmp	r6, #16
 8001e6a:	bfa8      	it	ge
 8001e6c:	2610      	movge	r6, #16
    if (!data)
 8001e6e:	9b01      	ldr	r3, [sp, #4]
        this_write = min(LOAD_CHUNK, length - ii);
 8001e70:	fa1f fb86 	uxth.w	fp, r6
    if (!data)
 8001e74:	191f      	adds	r7, r3, r4
 8001e76:	d02e      	beq.n	8001ed6 <mpu_load_firmware+0xf6>
    if (!st.chip_cfg.sensors)
 8001e78:	7aab      	ldrb	r3, [r5, #10]
 8001e7a:	b363      	cbz	r3, 8001ed6 <mpu_load_firmware+0xf6>
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8001e7c:	0a22      	lsrs	r2, r4, #8
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001e7e:	b2e3      	uxtb	r3, r4
    if (tmp[1] + length > st.hw->bank_size)
 8001e80:	6869      	ldr	r1, [r5, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8001e82:	f88d 2014 	strb.w	r2, [sp, #20]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001e86:	f88d 3015 	strb.w	r3, [sp, #21]
    if (tmp[1] + length > st.hw->bank_size)
 8001e8a:	8948      	ldrh	r0, [r1, #10]
 8001e8c:	b2b2      	uxth	r2, r6
 8001e8e:	4413      	add	r3, r2
 8001e90:	4283      	cmp	r3, r0
 8001e92:	dc20      	bgt.n	8001ed6 <mpu_load_firmware+0xf6>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8001e94:	682b      	ldr	r3, [r5, #0]
 8001e96:	7808      	ldrb	r0, [r1, #0]
 8001e98:	2202      	movs	r2, #2
 8001e9a:	7ed9      	ldrb	r1, [r3, #27]
 8001e9c:	4653      	mov	r3, sl
 8001e9e:	f003 fa2f 	bl	8005300 <i2c_write>
 8001ea2:	b9c0      	cbnz	r0, 8001ed6 <mpu_load_firmware+0xf6>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8001ea4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001ea8:	fa5f f886 	uxtb.w	r8, r6
 8001eac:	7e11      	ldrb	r1, [r2, #24]
 8001eae:	7818      	ldrb	r0, [r3, #0]
 8001eb0:	4642      	mov	r2, r8
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	f003 fa24 	bl	8005300 <i2c_write>
 8001eb8:	b968      	cbnz	r0, 8001ed6 <mpu_load_firmware+0xf6>
    if (!st.chip_cfg.sensors)
 8001eba:	7aab      	ldrb	r3, [r5, #10]
 8001ebc:	b15b      	cbz	r3, 8001ed6 <mpu_load_firmware+0xf6>
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8001ebe:	0a22      	lsrs	r2, r4, #8
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001ec0:	b2e3      	uxtb	r3, r4
    if (tmp[1] + length > st.hw->bank_size)
 8001ec2:	6869      	ldr	r1, [r5, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001ec4:	f88d 3015 	strb.w	r3, [sp, #21]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8001ec8:	f88d 2014 	strb.w	r2, [sp, #20]
 8001ecc:	b2b6      	uxth	r6, r6
    if (tmp[1] + length > st.hw->bank_size)
 8001ece:	894a      	ldrh	r2, [r1, #10]
 8001ed0:	4433      	add	r3, r6
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	dda8      	ble.n	8001e28 <mpu_load_firmware+0x48>
            return -1;
 8001ed6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001eda:	b00b      	add	sp, #44	; 0x2c
 8001edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return -2;
 8001ee0:	f06f 0001 	mvn.w	r0, #1
}
 8001ee4:	b00b      	add	sp, #44	; 0x2c
 8001ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001eea:	9802      	ldr	r0, [sp, #8]
    tmp[0] = start_addr >> 8;
 8001eec:	0a03      	lsrs	r3, r0, #8
 8001eee:	f88d 3014 	strb.w	r3, [sp, #20]
    tmp[1] = start_addr & 0xFF;
 8001ef2:	f88d 0015 	strb.w	r0, [sp, #21]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8001ef6:	e9d5 1200 	ldrd	r1, r2, [r5]
 8001efa:	4653      	mov	r3, sl
 8001efc:	7810      	ldrb	r0, [r2, #0]
 8001efe:	7f49      	ldrb	r1, [r1, #29]
 8001f00:	2202      	movs	r2, #2
 8001f02:	f003 f9fd 	bl	8005300 <i2c_write>
 8001f06:	2800      	cmp	r0, #0
 8001f08:	d1e5      	bne.n	8001ed6 <mpu_load_firmware+0xf6>
    st.chip_cfg.dmp_loaded = 1;
 8001f0a:	2301      	movs	r3, #1
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8001f0c:	9a03      	ldr	r2, [sp, #12]
    st.chip_cfg.dmp_loaded = 1;
 8001f0e:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8001f12:	84ea      	strh	r2, [r5, #38]	; 0x26
}
 8001f14:	b00b      	add	sp, #44	; 0x2c
 8001f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f1a:	f10d 0a14 	add.w	sl, sp, #20
 8001f1e:	4610      	mov	r0, r2
 8001f20:	e7e4      	b.n	8001eec <mpu_load_firmware+0x10c>
 8001f22:	bf00      	nop
 8001f24:	20000000 	.word	0x20000000

08001f28 <mpu_set_dmp_state>:
{
 8001f28:	b570      	push	{r4, r5, r6, lr}
    if (st.chip_cfg.dmp_on == enable)
 8001f2a:	4c6a      	ldr	r4, [pc, #424]	; (80020d4 <mpu_set_dmp_state+0x1ac>)
{
 8001f2c:	b082      	sub	sp, #8
    if (st.chip_cfg.dmp_on == enable)
 8001f2e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8001f32:	4282      	cmp	r2, r0
 8001f34:	d066      	beq.n	8002004 <mpu_set_dmp_state+0xdc>
 8001f36:	4603      	mov	r3, r0
    if (enable) {
 8001f38:	2800      	cmp	r0, #0
 8001f3a:	d03c      	beq.n	8001fb6 <mpu_set_dmp_state+0x8e>
        if (!st.chip_cfg.dmp_loaded)
 8001f3c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 80c4 	beq.w	80020ce <mpu_set_dmp_state+0x1a6>
    if (st.chip_cfg.dmp_on) {
 8001f46:	2a00      	cmp	r2, #0
 8001f48:	d05f      	beq.n	800200a <mpu_set_dmp_state+0xe2>
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001f4a:	e9d4 1200 	ldrd	r1, r2, [r4]
            tmp = 0x00;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	ad02      	add	r5, sp, #8
 8001f52:	f805 3d01 	strb.w	r3, [r5, #-1]!
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001f56:	7810      	ldrb	r0, [r2, #0]
 8001f58:	462b      	mov	r3, r5
 8001f5a:	7c49      	ldrb	r1, [r1, #17]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f003 f9cf 	bl	8005300 <i2c_write>
 8001f62:	b910      	cbnz	r0, 8001f6a <mpu_set_dmp_state+0x42>
        st.chip_cfg.int_enable = tmp;
 8001f64:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001f68:	7463      	strb	r3, [r4, #17]
    if (st.chip_cfg.bypass_mode == bypass_on)
 8001f6a:	7ca3      	ldrb	r3, [r4, #18]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d170      	bne.n	8002052 <mpu_set_dmp_state+0x12a>
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8001f70:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8001f72:	f7ff fb29 	bl	80015c8 <mpu_set_sample_rate>
        tmp = 0;
 8001f76:	2100      	movs	r1, #0
 8001f78:	ab02      	add	r3, sp, #8
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001f7a:	6862      	ldr	r2, [r4, #4]
        tmp = 0;
 8001f7c:	f803 1d02 	strb.w	r1, [r3, #-2]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001f80:	7810      	ldrb	r0, [r2, #0]
 8001f82:	2123      	movs	r1, #35	; 0x23
 8001f84:	2201      	movs	r2, #1
 8001f86:	f003 f9bb 	bl	8005300 <i2c_write>
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001f8a:	e9d4 1000 	ldrd	r1, r0, [r4]
            tmp = BIT_DMP_INT_EN;
 8001f8e:	2302      	movs	r3, #2
        st.chip_cfg.dmp_on = 1;
 8001f90:	2201      	movs	r2, #1
            tmp = BIT_DMP_INT_EN;
 8001f92:	f88d 3007 	strb.w	r3, [sp, #7]
        st.chip_cfg.dmp_on = 1;
 8001f96:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001f9a:	462b      	mov	r3, r5
 8001f9c:	7c49      	ldrb	r1, [r1, #17]
 8001f9e:	7800      	ldrb	r0, [r0, #0]
 8001fa0:	f003 f9ae 	bl	8005300 <i2c_write>
 8001fa4:	b910      	cbnz	r0, 8001fac <mpu_set_dmp_state+0x84>
        st.chip_cfg.int_enable = tmp;
 8001fa6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001faa:	7463      	strb	r3, [r4, #17]
        mpu_reset_fifo();
 8001fac:	f7ff f9a2 	bl	80012f4 <mpu_reset_fifo>
    return 0;
 8001fb0:	2000      	movs	r0, #0
}
 8001fb2:	b002      	add	sp, #8
 8001fb4:	bd70      	pop	{r4, r5, r6, pc}
 8001fb6:	6861      	ldr	r1, [r4, #4]
 8001fb8:	7808      	ldrb	r0, [r1, #0]
    if (st.chip_cfg.dmp_on) {
 8001fba:	2a00      	cmp	r2, #0
 8001fbc:	d138      	bne.n	8002030 <mpu_set_dmp_state+0x108>
        if (!st.chip_cfg.sensors)
 8001fbe:	7aa3      	ldrb	r3, [r4, #10]
 8001fc0:	f10d 0507 	add.w	r5, sp, #7
 8001fc4:	b173      	cbz	r3, 8001fe4 <mpu_set_dmp_state+0xbc>
            tmp = 0x00;
 8001fc6:	ad02      	add	r5, sp, #8
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001fc8:	6821      	ldr	r1, [r4, #0]
            tmp = 0x00;
 8001fca:	f805 2d01 	strb.w	r2, [r5, #-1]!
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001fce:	462b      	mov	r3, r5
 8001fd0:	7c49      	ldrb	r1, [r1, #17]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f003 f994 	bl	8005300 <i2c_write>
 8001fd8:	b910      	cbnz	r0, 8001fe0 <mpu_set_dmp_state+0xb8>
        st.chip_cfg.int_enable = tmp;
 8001fda:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001fde:	7463      	strb	r3, [r4, #17]
 8001fe0:	6863      	ldr	r3, [r4, #4]
 8001fe2:	7818      	ldrb	r0, [r3, #0]
        st.chip_cfg.dmp_on = 0;
 8001fe4:	2600      	movs	r6, #0
        tmp = st.chip_cfg.fifo_enable;
 8001fe6:	7c21      	ldrb	r1, [r4, #16]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001fe8:	462b      	mov	r3, r5
 8001fea:	2201      	movs	r2, #1
        tmp = st.chip_cfg.fifo_enable;
 8001fec:	f88d 1007 	strb.w	r1, [sp, #7]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001ff0:	2123      	movs	r1, #35	; 0x23
 8001ff2:	f003 f985 	bl	8005300 <i2c_write>
        st.chip_cfg.dmp_on = 0;
 8001ff6:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
        mpu_reset_fifo();
 8001ffa:	f7ff f97b 	bl	80012f4 <mpu_reset_fifo>
 8001ffe:	4630      	mov	r0, r6
}
 8002000:	b002      	add	sp, #8
 8002002:	bd70      	pop	{r4, r5, r6, pc}
        return 0;
 8002004:	2000      	movs	r0, #0
}
 8002006:	b002      	add	sp, #8
 8002008:	bd70      	pop	{r4, r5, r6, pc}
        if (!st.chip_cfg.sensors)
 800200a:	7aa3      	ldrb	r3, [r4, #10]
 800200c:	f10d 0507 	add.w	r5, sp, #7
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0aa      	beq.n	8001f6a <mpu_set_dmp_state+0x42>
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8002014:	e9d4 1000 	ldrd	r1, r0, [r4]
            tmp = 0x00;
 8002018:	ad02      	add	r5, sp, #8
 800201a:	f805 2d01 	strb.w	r2, [r5, #-1]!
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 800201e:	462b      	mov	r3, r5
 8002020:	7c49      	ldrb	r1, [r1, #17]
 8002022:	7800      	ldrb	r0, [r0, #0]
 8002024:	2201      	movs	r2, #1
 8002026:	f003 f96b 	bl	8005300 <i2c_write>
 800202a:	2800      	cmp	r0, #0
 800202c:	d09a      	beq.n	8001f64 <mpu_set_dmp_state+0x3c>
 800202e:	e79c      	b.n	8001f6a <mpu_set_dmp_state+0x42>
            tmp = 0x00;
 8002030:	ad02      	add	r5, sp, #8
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8002032:	6822      	ldr	r2, [r4, #0]
            tmp = 0x00;
 8002034:	f805 3d01 	strb.w	r3, [r5, #-1]!
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8002038:	7c51      	ldrb	r1, [r2, #17]
 800203a:	462b      	mov	r3, r5
 800203c:	2201      	movs	r2, #1
 800203e:	f003 f95f 	bl	8005300 <i2c_write>
 8002042:	2800      	cmp	r0, #0
 8002044:	d1cc      	bne.n	8001fe0 <mpu_set_dmp_state+0xb8>
        st.chip_cfg.int_enable = tmp;
 8002046:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800204a:	6863      	ldr	r3, [r4, #4]
 800204c:	7462      	strb	r2, [r4, #17]
 800204e:	7818      	ldrb	r0, [r3, #0]
 8002050:	e7c8      	b.n	8001fe4 <mpu_set_dmp_state+0xbc>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002052:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002056:	7911      	ldrb	r1, [r2, #4]
 8002058:	7818      	ldrb	r0, [r3, #0]
 800205a:	2201      	movs	r2, #1
 800205c:	462b      	mov	r3, r5
 800205e:	f003 f95f 	bl	8005320 <i2c_read>
 8002062:	2800      	cmp	r0, #0
 8002064:	d184      	bne.n	8001f70 <mpu_set_dmp_state+0x48>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8002066:	7aa2      	ldrb	r2, [r4, #10]
 8002068:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800206c:	07d2      	lsls	r2, r2, #31
            tmp |= BIT_AUX_IF_EN;
 800206e:	bf4c      	ite	mi
 8002070:	f043 0320 	orrmi.w	r3, r3, #32
            tmp &= ~BIT_AUX_IF_EN;
 8002074:	f003 03df 	andpl.w	r3, r3, #223	; 0xdf
 8002078:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800207c:	e9d4 1200 	ldrd	r1, r2, [r4]
 8002080:	462b      	mov	r3, r5
 8002082:	7810      	ldrb	r0, [r2, #0]
 8002084:	7909      	ldrb	r1, [r1, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f003 f93a 	bl	8005300 <i2c_write>
 800208c:	2800      	cmp	r0, #0
 800208e:	f47f af6f 	bne.w	8001f70 <mpu_set_dmp_state+0x48>
        delay_ms(3);
 8002092:	2003      	movs	r0, #3
 8002094:	f003 f954 	bl	8005340 <delay_ms>
        if (st.chip_cfg.active_low_int)
 8002098:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800209c:	b1ab      	cbz	r3, 80020ca <mpu_set_dmp_state+0x1a2>
 800209e:	21b0      	movs	r1, #176	; 0xb0
            tmp = BIT_ACTL;
 80020a0:	2380      	movs	r3, #128	; 0x80
        if (st.chip_cfg.latched_int)
 80020a2:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 80020a6:	f88d 3007 	strb.w	r3, [sp, #7]
 80020aa:	b10a      	cbz	r2, 80020b0 <mpu_set_dmp_state+0x188>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80020ac:	f88d 1007 	strb.w	r1, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80020b0:	e9d4 2300 	ldrd	r2, r3, [r4]
 80020b4:	7dd1      	ldrb	r1, [r2, #23]
 80020b6:	7818      	ldrb	r0, [r3, #0]
 80020b8:	2201      	movs	r2, #1
 80020ba:	462b      	mov	r3, r5
 80020bc:	f003 f920 	bl	8005300 <i2c_write>
 80020c0:	2800      	cmp	r0, #0
 80020c2:	f47f af55 	bne.w	8001f70 <mpu_set_dmp_state+0x48>
    st.chip_cfg.bypass_mode = bypass_on;
 80020c6:	74a0      	strb	r0, [r4, #18]
 80020c8:	e752      	b.n	8001f70 <mpu_set_dmp_state+0x48>
        if (st.chip_cfg.active_low_int)
 80020ca:	2130      	movs	r1, #48	; 0x30
 80020cc:	e7e9      	b.n	80020a2 <mpu_set_dmp_state+0x17a>
            return -1;
 80020ce:	f04f 30ff 	mov.w	r0, #4294967295
 80020d2:	e76e      	b.n	8001fb2 <mpu_set_dmp_state+0x8a>
 80020d4:	20000000 	.word	0x20000000

080020d8 <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
 80020d8:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 80020da:	4e2b      	ldr	r6, [pc, #172]	; (8002188 <mpu_get_compass_reg+0xb0>)
{
 80020dc:	b085      	sub	sp, #20
    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 80020de:	7ab3      	ldrb	r3, [r6, #10]
 80020e0:	07db      	lsls	r3, r3, #31
 80020e2:	d548      	bpl.n	8002176 <mpu_get_compass_reg+0x9e>
        return -1;
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
 80020e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80020e8:	460d      	mov	r5, r1
 80020ea:	4604      	mov	r4, r0
 80020ec:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
 80020f0:	7818      	ldrb	r0, [r3, #0]
 80020f2:	2208      	movs	r2, #8
 80020f4:	ab01      	add	r3, sp, #4
 80020f6:	f003 f913 	bl	8005320 <i2c_read>
 80020fa:	4607      	mov	r7, r0
 80020fc:	2800      	cmp	r0, #0
 80020fe:	d13a      	bne.n	8002176 <mpu_get_compass_reg+0x9e>
        return -2;
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
 8002100:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	2b01      	cmp	r3, #1
 800210a:	d137      	bne.n	800217c <mpu_get_compass_reg+0xa4>
        return -2;
    if (tmp[7] & AKM_OVERFLOW)
 800210c:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 8002110:	2b00      	cmp	r3, #0
 8002112:	db36      	blt.n	8002182 <mpu_get_compass_reg+0xaa>
        return -3;
#endif
    data[0] = (tmp[2] << 8) | tmp[1];
 8002114:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002118:	f89d 1005 	ldrb.w	r1, [sp, #5]
    data[1] = (tmp[4] << 8) | tmp[3];
    data[2] = (tmp[6] << 8) | tmp[5];
 800211c:	f89d 000a 	ldrb.w	r0, [sp, #10]
    data[0] = (tmp[2] << 8) | tmp[1];
 8002120:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
    data[1] = (tmp[4] << 8) | tmp[3];
 8002124:	f89d c008 	ldrb.w	ip, [sp, #8]
 8002128:	f89d 2007 	ldrb.w	r2, [sp, #7]
    data[2] = (tmp[6] << 8) | tmp[5];
 800212c:	f89d 3009 	ldrb.w	r3, [sp, #9]
    data[1] = (tmp[4] << 8) | tmp[3];
 8002130:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    data[2] = (tmp[6] << 8) | tmp[5];
 8002134:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    data[0] = (tmp[2] << 8) | tmp[1];
 8002138:	b209      	sxth	r1, r1
    data[1] = (tmp[4] << 8) | tmp[3];
 800213a:	b212      	sxth	r2, r2
    data[2] = (tmp[6] << 8) | tmp[5];
 800213c:	b21b      	sxth	r3, r3
    data[0] = (tmp[2] << 8) | tmp[1];
 800213e:	8021      	strh	r1, [r4, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
 8002140:	8062      	strh	r2, [r4, #2]
    data[2] = (tmp[6] << 8) | tmp[5];
 8002142:	80a3      	strh	r3, [r4, #4]

    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
 8002144:	f9b6 002c 	ldrsh.w	r0, [r6, #44]	; 0x2c
 8002148:	fb01 f100 	mul.w	r1, r1, r0
 800214c:	1209      	asrs	r1, r1, #8
 800214e:	8021      	strh	r1, [r4, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
 8002150:	f9b6 102e 	ldrsh.w	r1, [r6, #46]	; 0x2e
 8002154:	fb02 f201 	mul.w	r2, r2, r1
 8002158:	1212      	asrs	r2, r2, #8
 800215a:	8062      	strh	r2, [r4, #2]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
 800215c:	f9b6 2030 	ldrsh.w	r2, [r6, #48]	; 0x30
 8002160:	fb03 f302 	mul.w	r3, r3, r2
 8002164:	121b      	asrs	r3, r3, #8
 8002166:	80a3      	strh	r3, [r4, #4]

    if (timestamp)
 8002168:	b115      	cbz	r5, 8002170 <mpu_get_compass_reg+0x98>
        get_ms(timestamp);
 800216a:	4628      	mov	r0, r5
 800216c:	f003 f8ea 	bl	8005344 <get_ms>
    return 0;
#else
    return -1;
#endif
}
 8002170:	4638      	mov	r0, r7
 8002172:	b005      	add	sp, #20
 8002174:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
 8002176:	f04f 37ff 	mov.w	r7, #4294967295
 800217a:	e7f9      	b.n	8002170 <mpu_get_compass_reg+0x98>
        return -2;
 800217c:	f06f 0701 	mvn.w	r7, #1
 8002180:	e7f6      	b.n	8002170 <mpu_get_compass_reg+0x98>
        return -3;
 8002182:	f06f 0702 	mvn.w	r7, #2
 8002186:	e7f3      	b.n	8002170 <mpu_get_compass_reg+0x98>
 8002188:	20000000 	.word	0x20000000

0800218c <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 800218c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8002190:	4b59      	ldr	r3, [pc, #356]	; (80022f8 <dmp_enable_feature+0x16c>)
{
 8002192:	b087      	sub	sp, #28
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8002194:	ad06      	add	r5, sp, #24
 8002196:	f845 3d0c 	str.w	r3, [r5, #-12]!
{
 800219a:	4604      	mov	r4, r0
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
    mpu_write_mem(D_0_104, 4, tmp);
 800219c:	462a      	mov	r2, r5
 800219e:	2104      	movs	r1, #4
 80021a0:	2068      	movs	r0, #104	; 0x68
 80021a2:	f7ff fdeb 	bl	8001d7c <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 80021a6:	23a3      	movs	r3, #163	; 0xa3
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 80021a8:	f014 0840 	ands.w	r8, r4, #64	; 0x40
    tmp[0] = 0xA3;
 80021ac:	f88d 300c 	strb.w	r3, [sp, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 80021b0:	f000 809b 	beq.w	80022ea <dmp_enable_feature+0x15e>
        tmp[1] = 0xC0;
 80021b4:	21c0      	movs	r1, #192	; 0xc0
        tmp[2] = 0xC8;
 80021b6:	22c8      	movs	r2, #200	; 0xc8
        tmp[3] = 0xC2;
 80021b8:	23c2      	movs	r3, #194	; 0xc2
        tmp[1] = 0xC0;
 80021ba:	f88d 100d 	strb.w	r1, [sp, #13]
        tmp[2] = 0xC8;
 80021be:	f88d 200e 	strb.w	r2, [sp, #14]
        tmp[3] = 0xC2;
 80021c2:	f88d 300f 	strb.w	r3, [sp, #15]
    } else {
        tmp[1] = 0xA3;
        tmp[2] = 0xA3;
        tmp[3] = 0xA3;
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80021c6:	f414 77c0 	ands.w	r7, r4, #384	; 0x180
        tmp[4] = 0xC4;
        tmp[5] = 0xCC;
 80021ca:	bf15      	itete	ne
 80021cc:	23c6      	movne	r3, #198	; 0xc6
        tmp[6] = 0xC6;
    } else {
        tmp[4] = 0xA3;
        tmp[5] = 0xA3;
 80021ce:	23a3      	moveq	r3, #163	; 0xa3
        tmp[4] = 0xC4;
 80021d0:	f64c 42c4 	movwne	r2, #52420	; 0xccc4
        tmp[4] = 0xA3;
 80021d4:	f24a 32a3 	movweq	r2, #41891	; 0xa3a3
        tmp[5] = 0xA3;
 80021d8:	f88d 3012 	strb.w	r3, [sp, #18]
        tmp[6] = 0xA3;
    }
    tmp[7] = 0xA3;
 80021dc:	23a3      	movs	r3, #163	; 0xa3
        tmp[4] = 0xA3;
 80021de:	f8ad 2010 	strh.w	r2, [sp, #16]
    tmp[8] = 0xA3;
    tmp[9] = 0xA3;
    mpu_write_mem(CFG_15,10,tmp);
 80021e2:	210a      	movs	r1, #10
 80021e4:	462a      	mov	r2, r5
 80021e6:	f640 20a7 	movw	r0, #2727	; 0xaa7
    tmp[7] = 0xA3;
 80021ea:	f88d 3013 	strb.w	r3, [sp, #19]
    tmp[8] = 0xA3;
 80021ee:	f88d 3014 	strb.w	r3, [sp, #20]
    tmp[9] = 0xA3;
 80021f2:	f88d 3015 	strb.w	r3, [sp, #21]
    mpu_write_mem(CFG_15,10,tmp);
 80021f6:	f7ff fdc1 	bl	8001d7c <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
        tmp[0] = DINA20;
    else
        tmp[0] = 0xD8;
 80021fa:	f014 0903 	ands.w	r9, r4, #3
 80021fe:	bf14      	ite	ne
 8002200:	2320      	movne	r3, #32
 8002202:	23d8      	moveq	r3, #216	; 0xd8
    mpu_write_mem(CFG_27,1,tmp);
 8002204:	462a      	mov	r2, r5
 8002206:	2101      	movs	r1, #1
 8002208:	f640 20b6 	movw	r0, #2742	; 0xab6
 800220c:	f88d 300c 	strb.w	r3, [sp, #12]
 8002210:	f7ff fdb4 	bl	8001d7c <mpu_write_mem>
{
    if (enable) {
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8002214:	466b      	mov	r3, sp
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8002216:	466e      	mov	r6, sp
    if (mask & DMP_FEATURE_GYRO_CAL)
 8002218:	06a0      	lsls	r0, r4, #26
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 800221a:	bf4c      	ite	mi
 800221c:	4a37      	ldrmi	r2, [pc, #220]	; (80022fc <dmp_enable_feature+0x170>)
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 800221e:	4a38      	ldrpl	r2, [pc, #224]	; (8002300 <dmp_enable_feature+0x174>)
 8002220:	ca07      	ldmia	r2, {r0, r1, r2}
 8002222:	c303      	stmia	r3!, {r0, r1}
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8002224:	2109      	movs	r1, #9
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8002226:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8002228:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 800222c:	4632      	mov	r2, r6
 800222e:	f7ff fda5 	bl	8001d7c <mpu_write_mem>
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8002232:	b157      	cbz	r7, 800224a <dmp_enable_feature+0xbe>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 8002234:	05e1      	lsls	r1, r4, #23
            tmp[0] = 0xB2;
 8002236:	bf4c      	ite	mi
 8002238:	4b32      	ldrmi	r3, [pc, #200]	; (8002304 <dmp_enable_feature+0x178>)
            tmp[0] = DINAC0;
 800223a:	4b33      	ldrpl	r3, [pc, #204]	; (8002308 <dmp_enable_feature+0x17c>)
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 800223c:	462a      	mov	r2, r5
 800223e:	2104      	movs	r1, #4
 8002240:	f640 20a2 	movw	r0, #2722	; 0xaa2
            tmp[0] = DINAC0;
 8002244:	9303      	str	r3, [sp, #12]
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8002246:	f7ff fd99 	bl	8001d7c <mpu_write_mem>
    if (mask & DMP_FEATURE_LP_QUAT)
 800224a:	0762      	lsls	r2, r4, #29
        regs[1] = DINBC2;
        regs[2] = DINBC4;
        regs[3] = DINBC6;
    }
    else
        memset(regs, 0x8B, 4);
 800224c:	bf54      	ite	pl
 800224e:	f04f 338b 	movpl.w	r3, #2341178251	; 0x8b8b8b8b
        regs[0] = DINBC0;
 8002252:	4b2e      	ldrmi	r3, [pc, #184]	; (800230c <dmp_enable_feature+0x180>)

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8002254:	4632      	mov	r2, r6
 8002256:	2104      	movs	r1, #4
 8002258:	f640 2098 	movw	r0, #2712	; 0xa98
        memset(regs, 0x8B, 4);
 800225c:	9300      	str	r3, [sp, #0]
    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 800225e:	f7ff fd8d 	bl	8001d7c <mpu_write_mem>

    return mpu_reset_fifo();
 8002262:	f7ff f847 	bl	80012f4 <mpu_reset_fifo>
    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8002266:	06e3      	lsls	r3, r4, #27
        regs[0] = DINA20;
        regs[1] = DINA28;
        regs[2] = DINA30;
        regs[3] = DINA38;
    } else
        memset(regs, 0xA3, 4);
 8002268:	bf54      	ite	pl
 800226a:	f04f 33a3 	movpl.w	r3, #2745410467	; 0xa3a3a3a3
        regs[0] = DINA20;
 800226e:	4b28      	ldrmi	r3, [pc, #160]	; (8002310 <dmp_enable_feature+0x184>)

    mpu_write_mem(CFG_8, 4, regs);
 8002270:	4632      	mov	r2, r6
 8002272:	2104      	movs	r1, #4
 8002274:	f640 209e 	movw	r0, #2718	; 0xa9e
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8002278:	4d26      	ldr	r5, [pc, #152]	; (8002314 <dmp_enable_feature+0x188>)
        memset(regs, 0xA3, 4);
 800227a:	9300      	str	r3, [sp, #0]
    mpu_write_mem(CFG_8, 4, regs);
 800227c:	f7ff fd7e 	bl	8001d7c <mpu_write_mem>

    return mpu_reset_fifo();
 8002280:	f7ff f838 	bl	80012f4 <mpu_reset_fifo>
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8002284:	f044 0308 	orr.w	r3, r4, #8
 8002288:	816b      	strh	r3, [r5, #10]
    mpu_reset_fifo();
 800228a:	f7ff f833 	bl	80012f4 <mpu_reset_fifo>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 800228e:	f1b8 0f00 	cmp.w	r8, #0
 8002292:	d11c      	bne.n	80022ce <dmp_enable_feature+0x142>
    dmp.packet_length = 0;
 8002294:	2304      	movs	r3, #4
 8002296:	2114      	movs	r1, #20
 8002298:	2210      	movs	r2, #16
 800229a:	f04f 0e0a 	mov.w	lr, #10
 800229e:	f04f 0c1a 	mov.w	ip, #26
 80022a2:	2616      	movs	r6, #22
 80022a4:	2006      	movs	r0, #6
 80022a6:	f885 800e 	strb.w	r8, [r5, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 80022aa:	b11f      	cbz	r7, 80022b4 <dmp_enable_feature+0x128>
        dmp.packet_length += 6;
 80022ac:	4673      	mov	r3, lr
 80022ae:	4661      	mov	r1, ip
 80022b0:	4632      	mov	r2, r6
 80022b2:	73a8      	strb	r0, [r5, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 80022b4:	f014 0f14 	tst.w	r4, #20
        dmp.packet_length += 16;
 80022b8:	bf1c      	itt	ne
 80022ba:	460b      	movne	r3, r1
 80022bc:	73aa      	strbne	r2, [r5, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80022be:	f1b9 0f00 	cmp.w	r9, #0
 80022c2:	d000      	beq.n	80022c6 <dmp_enable_feature+0x13a>
        dmp.packet_length += 4;
 80022c4:	73ab      	strb	r3, [r5, #14]
}
 80022c6:	2000      	movs	r0, #0
 80022c8:	b007      	add	sp, #28
 80022ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        dmp.packet_length += 6;
 80022ce:	f04f 0806 	mov.w	r8, #6
 80022d2:	230a      	movs	r3, #10
 80022d4:	211a      	movs	r1, #26
 80022d6:	2216      	movs	r2, #22
 80022d8:	f04f 0e10 	mov.w	lr, #16
 80022dc:	f04f 0c20 	mov.w	ip, #32
 80022e0:	261c      	movs	r6, #28
 80022e2:	200c      	movs	r0, #12
 80022e4:	f885 800e 	strb.w	r8, [r5, #14]
 80022e8:	e7df      	b.n	80022aa <dmp_enable_feature+0x11e>
        tmp[1] = 0xA3;
 80022ea:	f88d 300d 	strb.w	r3, [sp, #13]
        tmp[2] = 0xA3;
 80022ee:	f88d 300e 	strb.w	r3, [sp, #14]
        tmp[3] = 0xA3;
 80022f2:	f88d 300f 	strb.w	r3, [sp, #15]
 80022f6:	e766      	b.n	80021c6 <dmp_enable_feature+0x3a>
 80022f8:	09e3ca02 	.word	0x09e3ca02
 80022fc:	0800e32c 	.word	0x0800e32c
 8002300:	0800e338 	.word	0x0800e338
 8002304:	9bb68bb2 	.word	0x9bb68bb2
 8002308:	90b480b0 	.word	0x90b480b0
 800230c:	c6c4c2c0 	.word	0xc6c4c2c0
 8002310:	38302820 	.word	0x38302820
 8002314:	200003a4 	.word	0x200003a4

08002318 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 8002318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned char ii = 0;

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 800231c:	2500      	movs	r5, #0
{
 800231e:	b095      	sub	sp, #84	; 0x54
 8002320:	9c1e      	ldr	r4, [sp, #120]	; 0x78

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8002322:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80024e8 <dmp_read_fifo+0x1d0>
{
 8002326:	4681      	mov	r9, r0
 8002328:	460f      	mov	r7, r1
 800232a:	4616      	mov	r6, r2
    sensors[0] = 0;
 800232c:	8025      	strh	r5, [r4, #0]
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 800232e:	f898 000e 	ldrb.w	r0, [r8, #14]
 8002332:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8002334:	a90c      	add	r1, sp, #48	; 0x30
{
 8002336:	9305      	str	r3, [sp, #20]
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8002338:	f7ff fcd2 	bl	8001ce0 <mpu_read_fifo_stream>
 800233c:	2800      	cmp	r0, #0
 800233e:	f040 80c9 	bne.w	80024d4 <dmp_read_fifo+0x1bc>
        return -1;

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8002342:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8002346:	4605      	mov	r5, r0
 8002348:	f013 0f14 	tst.w	r3, #20
 800234c:	f040 8086 	bne.w	800245c <dmp_read_fifo+0x144>
 8002350:	2208      	movs	r2, #8
 8002352:	2105      	movs	r1, #5
 8002354:	9206      	str	r2, [sp, #24]
 8002356:	2204      	movs	r2, #4
 8002358:	e9cd 2103 	strd	r2, r1, [sp, #12]
 800235c:	2203      	movs	r2, #3
 800235e:	9001      	str	r0, [sp, #4]
 8002360:	f04f 0a0b 	mov.w	sl, #11
 8002364:	f04f 0c0a 	mov.w	ip, #10
 8002368:	f04f 0b09 	mov.w	fp, #9
 800236c:	f04f 0807 	mov.w	r8, #7
 8002370:	f04f 0e06 	mov.w	lr, #6
 8002374:	2102      	movs	r1, #2
 8002376:	2001      	movs	r0, #1
 8002378:	9202      	str	r2, [sp, #8]
        }
        sensors[0] |= INV_WXYZ_QUAT;
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 800237a:	065a      	lsls	r2, r3, #25
 800237c:	d53a      	bpl.n	80023f4 <dmp_read_fifo+0xdc>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 800237e:	9a01      	ldr	r2, [sp, #4]
 8002380:	ae14      	add	r6, sp, #80	; 0x50
 8002382:	4416      	add	r6, r2
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8002384:	9a02      	ldr	r2, [sp, #8]
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8002386:	9607      	str	r6, [sp, #28]
 8002388:	ae14      	add	r6, sp, #80	; 0x50
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800238a:	1871      	adds	r1, r6, r1
 800238c:	4432      	add	r2, r6
 800238e:	9109      	str	r1, [sp, #36]	; 0x24
 8002390:	920a      	str	r2, [sp, #40]	; 0x28
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8002392:	9904      	ldr	r1, [sp, #16]
 8002394:	9a03      	ldr	r2, [sp, #12]
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8002396:	1830      	adds	r0, r6, r0
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8002398:	4432      	add	r2, r6
 800239a:	4431      	add	r1, r6
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 800239c:	9e07      	ldr	r6, [sp, #28]
 800239e:	9008      	str	r0, [sp, #32]
        ii += 6;
        sensors[0] |= INV_XYZ_ACCEL;
 80023a0:	f8cd b008 	str.w	fp, [sp, #8]
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80023a4:	f816 bc20 	ldrb.w	fp, [r6, #-32]
 80023a8:	9e08      	ldr	r6, [sp, #32]
        sensors[0] |= INV_XYZ_ACCEL;
 80023aa:	4640      	mov	r0, r8
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80023ac:	f816 8c20 	ldrb.w	r8, [r6, #-32]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80023b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
        sensors[0] |= INV_XYZ_ACCEL;
 80023b2:	e9cd ca03 	strd	ip, sl, [sp, #12]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80023b6:	f816 ac20 	ldrb.w	sl, [r6, #-32]
 80023ba:	9e0a      	ldr	r6, [sp, #40]	; 0x28
        sensors[0] |= INV_XYZ_ACCEL;
 80023bc:	f8cd e004 	str.w	lr, [sp, #4]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80023c0:	f816 ec20 	ldrb.w	lr, [r6, #-32]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80023c4:	f812 6c20 	ldrb.w	r6, [r2, #-32]
 80023c8:	910b      	str	r1, [sp, #44]	; 0x2c
 80023ca:	4632      	mov	r2, r6
 80023cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80023ce:	ea48 280b 	orr.w	r8, r8, fp, lsl #8
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80023d2:	f816 cc20 	ldrb.w	ip, [r6, #-32]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80023d6:	ea4e 2e0a 	orr.w	lr, lr, sl, lsl #8
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80023da:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80023de:	f8a7 8000 	strh.w	r8, [r7]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80023e2:	f8a7 e002 	strh.w	lr, [r7, #2]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80023e6:	f8a7 c004 	strh.w	ip, [r7, #4]
        sensors[0] |= INV_XYZ_ACCEL;
 80023ea:	8827      	ldrh	r7, [r4, #0]
 80023ec:	9906      	ldr	r1, [sp, #24]
 80023ee:	f047 0708 	orr.w	r7, r7, #8
 80023f2:	8027      	strh	r7, [r4, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80023f4:	f413 7fc0 	tst.w	r3, #384	; 0x180
 80023f8:	d029      	beq.n	800244e <dmp_read_fifo+0x136>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80023fa:	9e01      	ldr	r6, [sp, #4]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80023fc:	9a02      	ldr	r2, [sp, #8]
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80023fe:	ab14      	add	r3, sp, #80	; 0x50
 8002400:	441e      	add	r6, r3
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8002402:	eb03 0c01 	add.w	ip, r3, r1
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8002406:	4418      	add	r0, r3
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8002408:	441a      	add	r2, r3
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 800240a:	9b03      	ldr	r3, [sp, #12]
 800240c:	a914      	add	r1, sp, #80	; 0x50
 800240e:	440b      	add	r3, r1
 8002410:	461f      	mov	r7, r3
 8002412:	9b04      	ldr	r3, [sp, #16]
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8002414:	f810 0c20 	ldrb.w	r0, [r0, #-32]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8002418:	440b      	add	r3, r1
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800241a:	f81c cc20 	ldrb.w	ip, [ip, #-32]
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 800241e:	f816 1c20 	ldrb.w	r1, [r6, #-32]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8002422:	f812 2c20 	ldrb.w	r2, [r2, #-32]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8002426:	f817 6c20 	ldrb.w	r6, [r7, #-32]
 800242a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 800242e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8002432:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8002436:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 800243a:	f8a9 1000 	strh.w	r1, [r9]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800243e:	f8a9 2002 	strh.w	r2, [r9, #2]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8002442:	f8a9 3004 	strh.w	r3, [r9, #4]
        ii += 6;
        sensors[0] |= INV_XYZ_GYRO;
 8002446:	8823      	ldrh	r3, [r4, #0]
 8002448:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800244c:	8023      	strh	r3, [r4, #0]
    }

    get_ms(timestamp);
 800244e:	9805      	ldr	r0, [sp, #20]
 8002450:	f002 ff78 	bl	8005344 <get_ms>
    return 0;
}
 8002454:	4628      	mov	r0, r5
 8002456:	b015      	add	sp, #84	; 0x54
 8002458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800245c:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
 8002460:	ba09      	rev	r1, r1
        quat_q14[1] = quat[1] >> 16;
 8002462:	ea4f 4c21 	mov.w	ip, r1, asr #16
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8002466:	fb0c f00c 	mul.w	r0, ip, ip
 800246a:	fa92 fe82 	rev.w	lr, r2
        quat_q14[0] = quat[0] >> 16;
 800246e:	ea4f 4c2e 	mov.w	ip, lr, asr #16
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8002472:	fb0c 0c0c 	mla	ip, ip, ip, r0
 8002476:	980e      	ldr	r0, [sp, #56]	; 0x38
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8002478:	6071      	str	r1, [r6, #4]
 800247a:	ba00      	rev	r0, r0
        quat_q14[2] = quat[2] >> 16;
 800247c:	1402      	asrs	r2, r0, #16
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800247e:	fb02 cc02 	mla	ip, r2, r2, ip
 8002482:	990f      	ldr	r1, [sp, #60]	; 0x3c
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8002484:	f8c6 e000 	str.w	lr, [r6]
 8002488:	ba09      	rev	r1, r1
        quat_q14[3] = quat[3] >> 16;
 800248a:	140a      	asrs	r2, r1, #16
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800248c:	fb02 c202 	mla	r2, r2, r2, ip
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 8002490:	f102 4271 	add.w	r2, r2, #4043309056	; 0xf1000000
 8002494:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8002498:	e9c6 0102 	strd	r0, r1, [r6, #8]
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 800249c:	d81d      	bhi.n	80024da <dmp_read_fifo+0x1c2>
        sensors[0] |= INV_WXYZ_QUAT;
 800249e:	8822      	ldrh	r2, [r4, #0]
 80024a0:	2015      	movs	r0, #21
 80024a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024a6:	8022      	strh	r2, [r4, #0]
 80024a8:	2218      	movs	r2, #24
 80024aa:	9206      	str	r2, [sp, #24]
 80024ac:	2214      	movs	r2, #20
 80024ae:	e9cd 2003 	strd	r2, r0, [sp, #12]
 80024b2:	2213      	movs	r2, #19
 80024b4:	9202      	str	r2, [sp, #8]
 80024b6:	2210      	movs	r2, #16
 80024b8:	f04f 0a1b 	mov.w	sl, #27
 80024bc:	f04f 0c1a 	mov.w	ip, #26
 80024c0:	f04f 0b19 	mov.w	fp, #25
 80024c4:	f04f 0817 	mov.w	r8, #23
 80024c8:	f04f 0e16 	mov.w	lr, #22
 80024cc:	2112      	movs	r1, #18
 80024ce:	2011      	movs	r0, #17
 80024d0:	9201      	str	r2, [sp, #4]
 80024d2:	e752      	b.n	800237a <dmp_read_fifo+0x62>
        return -1;
 80024d4:	f04f 35ff 	mov.w	r5, #4294967295
 80024d8:	e7bc      	b.n	8002454 <dmp_read_fifo+0x13c>
            mpu_reset_fifo();
 80024da:	f7fe ff0b 	bl	80012f4 <mpu_reset_fifo>
            sensors[0] = 0;
 80024de:	8025      	strh	r5, [r4, #0]
            return -1;
 80024e0:	f04f 35ff 	mov.w	r5, #4294967295
 80024e4:	e7b6      	b.n	8002454 <dmp_read_fifo+0x13c>
 80024e6:	bf00      	nop
 80024e8:	200003a4 	.word	0x200003a4

080024ec <DMP_Init>:

int DMP_Init(void){
 80024ec:	b530      	push	{r4, r5, lr}
 80024ee:	b087      	sub	sp, #28

	struct int_param_s interrupt_config;//empty

	if (mpu_init(&interrupt_config)){
 80024f0:	4668      	mov	r0, sp
 80024f2:	f7ff fa23 	bl	800193c <mpu_init>
 80024f6:	b110      	cbz	r0, 80024fe <DMP_Init+0x12>
		return 1;
 80024f8:	2001      	movs	r0, #1
	if (mpu_set_dmp_state(1)){
		return 8;
	}

	return 0;
}
 80024fa:	b007      	add	sp, #28
 80024fc:	bd30      	pop	{r4, r5, pc}
	if (mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS)){
 80024fe:	2079      	movs	r0, #121	; 0x79
 8002500:	f7ff f92a 	bl	8001758 <mpu_set_sensors>
 8002504:	2800      	cmp	r0, #0
 8002506:	d16d      	bne.n	80025e4 <DMP_Init+0xf8>
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8002508:	23c8      	movs	r3, #200	; 0xc8
 800250a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800250e:	493b      	ldr	r1, [pc, #236]	; (80025fc <DMP_Init+0x110>)
 8002510:	f640 30f6 	movw	r0, #3062	; 0xbf6
 8002514:	f7ff fc64 	bl	8001de0 <mpu_load_firmware>
	if(dmp_load_motion_driver_firmware()){
 8002518:	2800      	cmp	r0, #0
 800251a:	d166      	bne.n	80025ea <DMP_Init+0xfe>
    gyro_regs[0] = gyro_axes[orient & 3];
 800251c:	f64c 514c 	movw	r1, #52556	; 0xcd4c
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8002520:	206c      	movs	r0, #108	; 0x6c
    accel_regs[0] = accel_axes[orient & 3];
 8002522:	f64c 140c 	movw	r4, #51468	; 0xc90c
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8002526:	232c      	movs	r3, #44	; 0x2c
    gyro_regs[0] = gyro_axes[orient & 3];
 8002528:	f8ad 1004 	strh.w	r1, [sp, #4]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 800252c:	f88d 0006 	strb.w	r0, [sp, #6]
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8002530:	aa01      	add	r2, sp, #4
 8002532:	2103      	movs	r1, #3
 8002534:	f240 4026 	movw	r0, #1062	; 0x426
    accel_regs[0] = accel_axes[orient & 3];
 8002538:	f8ad 400c 	strh.w	r4, [sp, #12]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 800253c:	f88d 300e 	strb.w	r3, [sp, #14]
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8002540:	f7ff fc1c 	bl	8001d7c <mpu_write_mem>
 8002544:	2800      	cmp	r0, #0
 8002546:	d154      	bne.n	80025f2 <DMP_Init+0x106>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8002548:	ac03      	add	r4, sp, #12
 800254a:	4622      	mov	r2, r4
 800254c:	2103      	movs	r1, #3
 800254e:	f240 402a 	movw	r0, #1066	; 0x42a
 8002552:	f7ff fc13 	bl	8001d7c <mpu_write_mem>
 8002556:	2800      	cmp	r0, #0
 8002558:	d14b      	bne.n	80025f2 <DMP_Init+0x106>
    memcpy(gyro_regs, gyro_sign, 3);
 800255a:	f245 6236 	movw	r2, #22070	; 0x5636
 800255e:	2176      	movs	r1, #118	; 0x76
    memcpy(accel_regs, accel_sign, 3);
 8002560:	f244 6026 	movw	r0, #17958	; 0x4626
 8002564:	2366      	movs	r3, #102	; 0x66
    memcpy(gyro_regs, gyro_sign, 3);
 8002566:	f8ad 2004 	strh.w	r2, [sp, #4]
 800256a:	f88d 1006 	strb.w	r1, [sp, #6]
    memcpy(accel_regs, accel_sign, 3);
 800256e:	f8ad 000c 	strh.w	r0, [sp, #12]
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8002572:	aa01      	add	r2, sp, #4
 8002574:	2103      	movs	r1, #3
 8002576:	f44f 6088 	mov.w	r0, #1088	; 0x440
    memcpy(accel_regs, accel_sign, 3);
 800257a:	f88d 300e 	strb.w	r3, [sp, #14]
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 800257e:	f7ff fbfd 	bl	8001d7c <mpu_write_mem>
 8002582:	bbb0      	cbnz	r0, 80025f2 <DMP_Init+0x106>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8002584:	4622      	mov	r2, r4
 8002586:	2103      	movs	r1, #3
 8002588:	f240 4031 	movw	r0, #1073	; 0x431
 800258c:	f7ff fbf6 	bl	8001d7c <mpu_write_mem>
 8002590:	bb78      	cbnz	r0, 80025f2 <DMP_Init+0x106>
    dmp.orient = orient;
 8002592:	2388      	movs	r3, #136	; 0x88
 8002594:	4d1a      	ldr	r5, [pc, #104]	; (8002600 <DMP_Init+0x114>)
	if(dmp_enable_feature(dmp_features)){
 8002596:	f44f 70b8 	mov.w	r0, #368	; 0x170
    dmp.orient = orient;
 800259a:	812b      	strh	r3, [r5, #8]
	if(dmp_enable_feature(dmp_features)){
 800259c:	f7ff fdf6 	bl	800218c <dmp_enable_feature>
 80025a0:	bb28      	cbnz	r0, 80025ee <DMP_Init+0x102>
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 80025a2:	f44f 7280 	mov.w	r2, #256	; 0x100
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 80025a6:	4b17      	ldr	r3, [pc, #92]	; (8002604 <DMP_Init+0x118>)
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 80025a8:	f8ad 2004 	strh.w	r2, [sp, #4]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 80025ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80025b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if (mpu_write_mem(D_0_22, 2, tmp))
 80025b4:	aa01      	add	r2, sp, #4
 80025b6:	2102      	movs	r1, #2
 80025b8:	f240 2016 	movw	r0, #534	; 0x216
 80025bc:	f7ff fbde 	bl	8001d7c <mpu_write_mem>
 80025c0:	b9c8      	cbnz	r0, 80025f6 <DMP_Init+0x10a>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 80025c2:	4622      	mov	r2, r4
 80025c4:	210c      	movs	r1, #12
 80025c6:	f640 20c1 	movw	r0, #2753	; 0xac1
 80025ca:	f7ff fbd7 	bl	8001d7c <mpu_write_mem>
 80025ce:	b990      	cbnz	r0, 80025f6 <DMP_Init+0x10a>
    dmp.fifo_rate = rate;
 80025d0:	2364      	movs	r3, #100	; 0x64
	if (mpu_set_dmp_state(1)){
 80025d2:	2001      	movs	r0, #1
    dmp.fifo_rate = rate;
 80025d4:	81ab      	strh	r3, [r5, #12]
	if (mpu_set_dmp_state(1)){
 80025d6:	f7ff fca7 	bl	8001f28 <mpu_set_dmp_state>
		return 8;
 80025da:	2800      	cmp	r0, #0
 80025dc:	bf14      	ite	ne
 80025de:	2008      	movne	r0, #8
 80025e0:	2000      	moveq	r0, #0
 80025e2:	e78a      	b.n	80024fa <DMP_Init+0xe>
		return 2;
 80025e4:	2002      	movs	r0, #2
}
 80025e6:	b007      	add	sp, #28
 80025e8:	bd30      	pop	{r4, r5, pc}
		return 4;//ERROR
 80025ea:	2004      	movs	r0, #4
 80025ec:	e785      	b.n	80024fa <DMP_Init+0xe>
		return 6;
 80025ee:	2006      	movs	r0, #6
 80025f0:	e783      	b.n	80024fa <DMP_Init+0xe>
		return 5;
 80025f2:	2005      	movs	r0, #5
 80025f4:	e781      	b.n	80024fa <DMP_Init+0xe>
		return 7;
 80025f6:	2007      	movs	r0, #7
 80025f8:	e77f      	b.n	80024fa <DMP_Init+0xe>
 80025fa:	bf00      	nop
 80025fc:	0800e3f0 	.word	0x0800e3f0
 8002600:	200003a4 	.word	0x200003a4
 8002604:	0800e320 	.word	0x0800e320

08002608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002608:	b530      	push	{r4, r5, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800260a:	2201      	movs	r2, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800260c:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800260e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002612:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002614:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
{
 8002618:	b095      	sub	sp, #84	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800261a:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800261c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800261e:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002620:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002622:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002624:	9113      	str	r1, [sp, #76]	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002626:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002628:	9405      	str	r4, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800262a:	9401      	str	r4, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800262c:	940d      	str	r4, [sp, #52]	; 0x34
 800262e:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002632:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002636:	e9cd 4408 	strd	r4, r4, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800263a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800263e:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002640:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002642:	f005 f877 	bl	8007734 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002646:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002648:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800264c:	4629      	mov	r1, r5
 800264e:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002650:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002652:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002654:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002656:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002658:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800265a:	f005 fa63 	bl	8007b24 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800265e:	2310      	movs	r3, #16
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002660:	a801      	add	r0, sp, #4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002662:	9404      	str	r4, [sp, #16]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002664:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002666:	f005 fb49 	bl	8007cfc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800266a:	b015      	add	sp, #84	; 0x54
 800266c:	bd30      	pop	{r4, r5, pc}
 800266e:	bf00      	nop

08002670 <main>:
{
 8002670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ximu_state = XIMU_STATE_STM_INIT;
 8002674:	2400      	movs	r4, #0
{
 8002676:	f5ad 5d4d 	sub.w	sp, sp, #13120	; 0x3340
	ximu_state = XIMU_STATE_STM_INIT;
 800267a:	4f9d      	ldr	r7, [pc, #628]	; (80028f0 <main+0x280>)
{
 800267c:	b081      	sub	sp, #4
	ximu_state = XIMU_STATE_STM_INIT;
 800267e:	703c      	strb	r4, [r7, #0]
  HAL_Init();
 8002680:	f003 fbca 	bl	8005e18 <HAL_Init>
  SystemClock_Config();
 8002684:	f7ff ffc0 	bl	8002608 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002688:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 800268c:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002690:	4d98      	ldr	r5, [pc, #608]	; (80028f4 <main+0x284>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002692:	4622      	mov	r2, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002694:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002696:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800269a:	f043 0310 	orr.w	r3, r3, #16
 800269e:	61ab      	str	r3, [r5, #24]
 80026a0:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80026a2:	4895      	ldr	r0, [pc, #596]	; (80028f8 <main+0x288>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	9308      	str	r3, [sp, #32]
 80026aa:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ac:	69ab      	ldr	r3, [r5, #24]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ae:	f04f 0901 	mov.w	r9, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026b2:	f043 0320 	orr.w	r3, r3, #32
 80026b6:	61ab      	str	r3, [r5, #24]
 80026b8:	69ab      	ldr	r3, [r5, #24]
  hi2c1.Instance = I2C1;
 80026ba:	4e90      	ldr	r6, [pc, #576]	; (80028fc <main+0x28c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	9309      	str	r3, [sp, #36]	; 0x24
 80026c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c4:	69ab      	ldr	r3, [r5, #24]
  htim2.Init.Prescaler = 7200;
 80026c6:	f44f 5ae1 	mov.w	sl, #7200	; 0x1c20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ca:	f043 0304 	orr.w	r3, r3, #4
 80026ce:	61ab      	str	r3, [r5, #24]
 80026d0:	69ab      	ldr	r3, [r5, #24]
  htim2.Instance = TIM2;
 80026d2:	f8df 8248 	ldr.w	r8, [pc, #584]	; 800291c <main+0x2ac>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	930a      	str	r3, [sp, #40]	; 0x28
 80026dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026de:	69ab      	ldr	r3, [r5, #24]
  htim3.Instance = TIM3;
 80026e0:	f8df b23c 	ldr.w	fp, [pc, #572]	; 8002920 <main+0x2b0>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e4:	f043 0308 	orr.w	r3, r3, #8
 80026e8:	61ab      	str	r3, [r5, #24]
 80026ea:	69ab      	ldr	r3, [r5, #24]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80026f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80026f4:	f003 fe3c 	bl	8006370 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80026f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fc:	e9cd 3918 	strd	r3, r9, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002700:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002702:	a918      	add	r1, sp, #96	; 0x60
 8002704:	487c      	ldr	r0, [pc, #496]	; (80028f8 <main+0x288>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002706:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800270a:	f003 fd37 	bl	800617c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800270e:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002710:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002712:	ea43 0309 	orr.w	r3, r3, r9
 8002716:	616b      	str	r3, [r5, #20]
 8002718:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800271a:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800271c:	ea03 0309 	and.w	r3, r3, r9
 8002720:	9307      	str	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002722:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002724:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002726:	f003 fbbf 	bl	8005ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800272a:	200f      	movs	r0, #15
 800272c:	f003 fbf2 	bl	8005f14 <HAL_NVIC_EnableIRQ>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002730:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8002734:	4a72      	ldr	r2, [pc, #456]	; (8002900 <main+0x290>)
  hi2c1.Instance = I2C1;
 8002736:	4973      	ldr	r1, [pc, #460]	; (8002904 <main+0x294>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002738:	4630      	mov	r0, r6
  hi2c1.Init.ClockSpeed = 100000;
 800273a:	e9c6 1200 	strd	r1, r2, [r6]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800273e:	6133      	str	r3, [r6, #16]
  hi2c1.Init.OwnAddress1 = 0;
 8002740:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8002744:	e9c6 4405 	strd	r4, r4, [r6, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002748:	e9c6 4407 	strd	r4, r4, [r6, #28]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800274c:	f004 f834 	bl	80067b8 <HAL_I2C_Init>
  MX_USB_DEVICE_Init();
 8002750:	f007 f85a 	bl	8009808 <MX_USB_DEVICE_Init>
  htim2.Instance = TIM2;
 8002754:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 1250;
 8002758:	f240 43e2 	movw	r3, #1250	; 0x4e2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800275c:	ad15      	add	r5, sp, #84	; 0x54
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800275e:	4640      	mov	r0, r8
  htim2.Instance = TIM2;
 8002760:	f8c8 1000 	str.w	r1, [r8]
  htim2.Init.Period = 1250;
 8002764:	f8c8 300c 	str.w	r3, [r8, #12]
  htim2.Init.Prescaler = 7200;
 8002768:	f8c8 a004 	str.w	sl, [r8, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800276c:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
 8002770:	941b      	str	r4, [sp, #108]	; 0x6c
 8002772:	9418      	str	r4, [sp, #96]	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002774:	9415      	str	r4, [sp, #84]	; 0x54
 8002776:	606c      	str	r4, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002778:	f8c8 4008 	str.w	r4, [r8, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800277c:	f8c8 4010 	str.w	r4, [r8, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002780:	f8c8 4018 	str.w	r4, [r8, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002784:	f005 fb3c 	bl	8007e00 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800278c:	a918      	add	r1, sp, #96	; 0x60
 800278e:	4640      	mov	r0, r8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002790:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002792:	f005 fb93 	bl	8007ebc <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002796:	4629      	mov	r1, r5
 8002798:	4640      	mov	r0, r8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800279a:	606c      	str	r4, [r5, #4]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800279c:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800279e:	f005 fce7 	bl	8008170 <HAL_TIMEx_MasterConfigSynchronization>
  htim3.Init.Period = 50;
 80027a2:	2132      	movs	r1, #50	; 0x32
  htim3.Instance = TIM3;
 80027a4:	4b58      	ldr	r3, [pc, #352]	; (8002908 <main+0x298>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027a6:	4658      	mov	r0, fp
  htim3.Init.Prescaler = 7200;
 80027a8:	f8cb a004 	str.w	sl, [fp, #4]
  htim3.Instance = TIM3;
 80027ac:	f8cb 3000 	str.w	r3, [fp]
  htim3.Init.Period = 50;
 80027b0:	f8cb 100c 	str.w	r1, [fp, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027b4:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
 80027b8:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ba:	606c      	str	r4, [r5, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027bc:	9418      	str	r4, [sp, #96]	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027be:	9415      	str	r4, [sp, #84]	; 0x54
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c0:	f8cb 4008 	str.w	r4, [fp, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c4:	f8cb 4010 	str.w	r4, [fp, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c8:	f8cb 4018 	str.w	r4, [fp, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027cc:	f005 fb18 	bl	8007e00 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027d4:	a918      	add	r1, sp, #96	; 0x60
 80027d6:	4658      	mov	r0, fp
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027d8:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027da:	f005 fb6f 	bl	8007ebc <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027de:	4629      	mov	r1, r5
 80027e0:	4658      	mov	r0, fp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027e2:	606c      	str	r4, [r5, #4]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e4:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027e6:	f005 fcc3 	bl	8008170 <HAL_TIMEx_MasterConfigSynchronization>
  huart1.Init.BaudRate = 115200;
 80027ea:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027ee:	210c      	movs	r1, #12
  huart1.Instance = USART1;
 80027f0:	f8df a130 	ldr.w	sl, [pc, #304]	; 8002924 <main+0x2b4>
 80027f4:	4a45      	ldr	r2, [pc, #276]	; (800290c <main+0x29c>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027f6:	4650      	mov	r0, sl
  huart1.Init.BaudRate = 115200;
 80027f8:	e9ca 2300 	strd	r2, r3, [sl]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027fc:	f8ca 1014 	str.w	r1, [sl, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002800:	e9ca 4402 	strd	r4, r4, [sl, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002804:	f8ca 4010 	str.w	r4, [sl, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002808:	e9ca 4406 	strd	r4, r4, [sl, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800280c:	f005 fcd6 	bl	80081bc <HAL_UART_Init>
  systickInit();
 8002810:	f003 faa6 	bl	8005d60 <systickInit>
  HAL_TIM_Base_Start_IT(&htim2);
 8002814:	4640      	mov	r0, r8
 8002816:	f005 fb41 	bl	8007e9c <HAL_TIM_Base_Start_IT>
  led_set(LED_INIT);
 800281a:	20cc      	movs	r0, #204	; 0xcc
 800281c:	f002 fd64 	bl	80052e8 <led_set>
  HAL_Delay(1000);//blink to show system (stm32, especially the crystal) is ok
 8002820:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002824:	f003 fb1c 	bl	8005e60 <HAL_Delay>
  led_set(LED_FAULT);//Will not notice LED blinking unless the following initialization takes longer than expected
 8002828:	20aa      	movs	r0, #170	; 0xaa
  ximu_state = XIMU_STATE_DMP_INIT;
 800282a:	f887 9000 	strb.w	r9, [r7]
  led_set(LED_FAULT);//Will not notice LED blinking unless the following initialization takes longer than expected
 800282e:	f002 fd5b 	bl	80052e8 <led_set>
  mpu_set_i2c(&hi2c1);
 8002832:	4630      	mov	r0, r6
 8002834:	f002 fd5e 	bl	80052f4 <mpu_set_i2c>
  ms5611_set_i2c(&hi2c1);
 8002838:	4630      	mov	r0, r6
 800283a:	f002 fd8b 	bl	8005354 <ms5611_set_i2c>
  ms5611_init();
 800283e:	f002 fd8f 	bl	8005360 <ms5611_init>
  ms5611_update();
 8002842:	f002 fe0d 	bl	8005460 <ms5611_update>
  GNSS_set_huart(&huart1);
 8002846:	4650      	mov	r0, sl
 8002848:	f002 fae0 	bl	8004e0c <GNSS_set_huart>
  GNSS_Init();
 800284c:	f002 fae4 	bl	8004e18 <GNSS_Init>
  int dmp_state = DMP_Init();
 8002850:	f7ff fe4c 	bl	80024ec <DMP_Init>
  if (dmp_state){
 8002854:	b100      	cbz	r0, 8002858 <main+0x1e8>
 8002856:	e7fe      	b.n	8002856 <main+0x1e6>
 8002858:	4606      	mov	r6, r0
  HAL_TIM_Base_Start_IT(&htim3);//start updating sensor data
 800285a:	4658      	mov	r0, fp
 800285c:	f005 fb1e 	bl	8007e9c <HAL_TIM_Base_Start_IT>
  ximu_state = XIMU_STATE_GPS_INIT;
 8002860:	f04f 0302 	mov.w	r3, #2
  while (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){
 8002864:	4c2a      	ldr	r4, [pc, #168]	; (8002910 <main+0x2a0>)
  led_set(LED_DISCONNECTED);//Fault cleared
 8002866:	4630      	mov	r0, r6
  ximu_state = XIMU_STATE_GPS_INIT;
 8002868:	703b      	strb	r3, [r7, #0]
  led_set(LED_DISCONNECTED);//Fault cleared
 800286a:	f002 fd3d 	bl	80052e8 <led_set>
  while (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){
 800286e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8002872:	2b03      	cmp	r3, #3
 8002874:	d006      	beq.n	8002884 <main+0x214>
	  led_set(LED_DISCONNECTED);//wait for connection
 8002876:	2000      	movs	r0, #0
 8002878:	f002 fd36 	bl	80052e8 <led_set>
  while (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){
 800287c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8002880:	2b03      	cmp	r3, #3
 8002882:	d1f8      	bne.n	8002876 <main+0x206>
  float32_t am[3] = {0,0,-9.81};
 8002884:	2400      	movs	r4, #0
  ESKF_update(&eskf,0.01,am,wm,mm,lla,1);
 8002886:	2701      	movs	r7, #1
  led_set(LED_IDLE);//connection formed
 8002888:	20ff      	movs	r0, #255	; 0xff
 800288a:	f002 fd2d 	bl	80052e8 <led_set>
  ESKF_new(&eskf);
 800288e:	a818      	add	r0, sp, #96	; 0x60
 8002890:	f000 faa2 	bl	8002dd8 <ESKF_new>
  float32_t wm[3] = {0,0,0};
 8002894:	ae10      	add	r6, sp, #64	; 0x40
  float32_t lla[3] = {1,2,3};
 8002896:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <main+0x2a4>)
  ESKF_update(&eskf,0.01,am,wm,mm,lla,1);
 8002898:	9503      	str	r5, [sp, #12]
  float32_t wm[3] = {0,0,0};
 800289a:	f846 4904 	str.w	r4, [r6], #-4
  ESKF_update(&eskf,0.01,am,wm,mm,lla,1);
 800289e:	9601      	str	r6, [sp, #4]
  float32_t lla[3] = {1,2,3};
 80028a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  ESKF_update(&eskf,0.01,am,wm,mm,lla,1);
 80028a8:	a30f      	add	r3, pc, #60	; (adr r3, 80028e8 <main+0x278>)
 80028aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  float32_t am[3] = {0,0,-9.81};
 80028ae:	ad0c      	add	r5, sp, #48	; 0x30
  ESKF_update(&eskf,0.01,am,wm,mm,lla,1);
 80028b0:	9704      	str	r7, [sp, #16]
 80028b2:	9500      	str	r5, [sp, #0]
  float32_t wm[3] = {0,0,0};
 80028b4:	60b4      	str	r4, [r6, #8]
  float32_t mm[3] = {0,1,0};
 80028b6:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
  float32_t am[3] = {0,0,-9.81};
 80028ba:	4f17      	ldr	r7, [pc, #92]	; (8002918 <main+0x2a8>)
  float32_t mm[3] = {0,1,0};
 80028bc:	a912      	add	r1, sp, #72	; 0x48
  ESKF_update(&eskf,0.01,am,wm,mm,lla,1);
 80028be:	9102      	str	r1, [sp, #8]
 80028c0:	a818      	add	r0, sp, #96	; 0x60
  float32_t am[3] = {0,0,-9.81};
 80028c2:	606c      	str	r4, [r5, #4]
  float32_t mm[3] = {0,1,0};
 80028c4:	608c      	str	r4, [r1, #8]
  float32_t am[3] = {0,0,-9.81};
 80028c6:	60af      	str	r7, [r5, #8]
  float32_t mm[3] = {0,1,0};
 80028c8:	604e      	str	r6, [r1, #4]
  float32_t am[3] = {0,0,-9.81};
 80028ca:	940c      	str	r4, [sp, #48]	; 0x30
  float32_t wm[3] = {0,0,0};
 80028cc:	940f      	str	r4, [sp, #60]	; 0x3c
  float32_t mm[3] = {0,1,0};
 80028ce:	9412      	str	r4, [sp, #72]	; 0x48
  ESKF_update(&eskf,0.01,am,wm,mm,lla,1);
 80028d0:	f000 fed2 	bl	8003678 <ESKF_update>
	  led_set(LED_MEASURING);
 80028d4:	20fe      	movs	r0, #254	; 0xfe
 80028d6:	f002 fd07 	bl	80052e8 <led_set>
	  HAL_Delay(10);
 80028da:	200a      	movs	r0, #10
 80028dc:	f003 fac0 	bl	8005e60 <HAL_Delay>
 80028e0:	e7f8      	b.n	80028d4 <main+0x264>
 80028e2:	bf00      	nop
 80028e4:	f3af 8000 	nop.w
 80028e8:	47ae147b 	.word	0x47ae147b
 80028ec:	3f847ae1 	.word	0x3f847ae1
 80028f0:	20000790 	.word	0x20000790
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40011000 	.word	0x40011000
 80028fc:	200006a0 	.word	0x200006a0
 8002900:	000186a0 	.word	0x000186a0
 8002904:	40005400 	.word	0x40005400
 8002908:	40000400 	.word	0x40000400
 800290c:	40013800 	.word	0x40013800
 8002910:	20000d2c 	.word	0x20000d2c
 8002914:	0800e35c 	.word	0x0800e35c
 8002918:	c11cf5c3 	.word	0xc11cf5c3
 800291c:	200007d8 	.word	0x200007d8
 8002920:	200006f4 	.word	0x200006f4
 8002924:	20000794 	.word	0x20000794

08002928 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop

0800292c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800292c:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <HAL_MspInit+0x3c>)
{
 800292e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002930:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST 
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8002932:	490e      	ldr	r1, [pc, #56]	; (800296c <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002934:	f042 0201 	orr.w	r2, r2, #1
 8002938:	619a      	str	r2, [r3, #24]
 800293a:	699a      	ldr	r2, [r3, #24]
 800293c:	f002 0201 	and.w	r2, r2, #1
 8002940:	9200      	str	r2, [sp, #0]
 8002942:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002944:	69da      	ldr	r2, [r3, #28]
 8002946:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800294a:	61da      	str	r2, [r3, #28]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8002956:	684b      	ldr	r3, [r1, #4]
 8002958:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800295c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002960:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002962:	b002      	add	sp, #8
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000
 800296c:	40010000 	.word	0x40010000

08002970 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002970:	2300      	movs	r3, #0
{
 8002972:	b530      	push	{r4, r5, lr}
  if(hi2c->Instance==I2C1)
 8002974:	6801      	ldr	r1, [r0, #0]
 8002976:	4a14      	ldr	r2, [pc, #80]	; (80029c8 <HAL_I2C_MspInit+0x58>)
{
 8002978:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C1)
 800297a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002980:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hi2c->Instance==I2C1)
 8002984:	d001      	beq.n	800298a <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002986:	b007      	add	sp, #28
 8002988:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800298a:	20c0      	movs	r0, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800298c:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800298e:	2512      	movs	r5, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002990:	4c0e      	ldr	r4, [pc, #56]	; (80029cc <HAL_I2C_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002992:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002994:	69a3      	ldr	r3, [r4, #24]
 8002996:	f043 0308 	orr.w	r3, r3, #8
 800299a:	61a3      	str	r3, [r4, #24]
 800299c:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800299e:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a6:	480a      	ldr	r0, [pc, #40]	; (80029d0 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029aa:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ac:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ae:	f003 fbe5 	bl	800617c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029b2:	69e3      	ldr	r3, [r4, #28]
 80029b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029b8:	61e3      	str	r3, [r4, #28]
 80029ba:	69e3      	ldr	r3, [r4, #28]
 80029bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	9b01      	ldr	r3, [sp, #4]
}
 80029c4:	b007      	add	sp, #28
 80029c6:	bd30      	pop	{r4, r5, pc}
 80029c8:	40005400 	.word	0x40005400
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40010c00 	.word	0x40010c00

080029d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029d4:	b510      	push	{r4, lr}
  if(htim_base->Instance==TIM2)
 80029d6:	6803      	ldr	r3, [r0, #0]
{
 80029d8:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 80029da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029de:	d019      	beq.n	8002a14 <HAL_TIM_Base_MspInit+0x40>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80029e0:	4a17      	ldr	r2, [pc, #92]	; (8002a40 <HAL_TIM_Base_MspInit+0x6c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d001      	beq.n	80029ea <HAL_TIM_Base_MspInit+0x16>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80029e6:	b002      	add	sp, #8
 80029e8:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029ea:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029ec:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <HAL_TIM_Base_MspInit+0x70>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029ee:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029f0:	69dc      	ldr	r4, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029f2:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029f4:	f044 0402 	orr.w	r4, r4, #2
 80029f8:	61dc      	str	r4, [r3, #28]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	9301      	str	r3, [sp, #4]
 8002a02:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a04:	f003 fa50 	bl	8005ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a08:	201d      	movs	r0, #29
}
 8002a0a:	b002      	add	sp, #8
 8002a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a10:	f003 ba80 	b.w	8005f14 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a14:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a16:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002a1a:	69dc      	ldr	r4, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a1c:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a1e:	f044 0401 	orr.w	r4, r4, #1
 8002a22:	61dc      	str	r4, [r3, #28]
 8002a24:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a26:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a30:	f003 fa3a 	bl	8005ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a34:	201c      	movs	r0, #28
}
 8002a36:	b002      	add	sp, #8
 8002a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a3c:	f003 ba6a 	b.w	8005f14 <HAL_NVIC_EnableIRQ>
 8002a40:	40000400 	.word	0x40000400
 8002a44:	40021000 	.word	0x40021000

08002a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a48:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4a:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8002a4c:	6802      	ldr	r2, [r0, #0]
 8002a4e:	4b26      	ldr	r3, [pc, #152]	; (8002ae8 <HAL_UART_MspInit+0xa0>)
{
 8002a50:	b086      	sub	sp, #24
  if(huart->Instance==USART1)
 8002a52:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a54:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002a58:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART1)
 8002a5c:	d001      	beq.n	8002a62 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a5e:	b006      	add	sp, #24
 8002a60:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a66:	4606      	mov	r6, r0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a68:	2002      	movs	r0, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a6a:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a6c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a76:	619a      	str	r2, [r3, #24]
 8002a78:	699a      	ldr	r2, [r3, #24]
 8002a7a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002a7e:	9200      	str	r2, [sp, #0]
 8002a80:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a82:	699a      	ldr	r2, [r3, #24]
 8002a84:	f042 0204 	orr.w	r2, r2, #4
 8002a88:	619a      	str	r2, [r3, #24]
 8002a8a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a8c:	9102      	str	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a94:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a96:	9003      	str	r0, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a98:	4814      	ldr	r0, [pc, #80]	; (8002aec <HAL_UART_MspInit+0xa4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a9c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9e:	f003 fb6d 	bl	800617c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa6:	a902      	add	r1, sp, #8
 8002aa8:	4810      	ldr	r0, [pc, #64]	; (8002aec <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002aaa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	e9cd 4403 	strd	r4, r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab0:	f003 fb64 	bl	800617c <HAL_GPIO_Init>
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ab4:	2080      	movs	r0, #128	; 0x80
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002ab6:	2220      	movs	r2, #32
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002abc:	4d0c      	ldr	r5, [pc, #48]	; (8002af0 <HAL_UART_MspInit+0xa8>)
 8002abe:	490d      	ldr	r1, [pc, #52]	; (8002af4 <HAL_UART_MspInit+0xac>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ac0:	60e8      	str	r0, [r5, #12]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002ac2:	4628      	mov	r0, r5
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ac4:	e9c5 4401 	strd	r4, r4, [r5, #4]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ac8:	e9c5 4404 	strd	r4, r4, [r5, #16]
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002acc:	6029      	str	r1, [r5, #0]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002ace:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002ad2:	f003 fa45 	bl	8005f60 <HAL_DMA_Init>
 8002ad6:	b918      	cbnz	r0, 8002ae0 <HAL_UART_MspInit+0x98>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002ad8:	6375      	str	r5, [r6, #52]	; 0x34
 8002ada:	626e      	str	r6, [r5, #36]	; 0x24
}
 8002adc:	b006      	add	sp, #24
 8002ade:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8002ae0:	f7ff ff22 	bl	8002928 <Error_Handler>
 8002ae4:	e7f8      	b.n	8002ad8 <HAL_UART_MspInit+0x90>
 8002ae6:	bf00      	nop
 8002ae8:	40013800 	.word	0x40013800
 8002aec:	40010800 	.word	0x40010800
 8002af0:	20000734 	.word	0x20000734
 8002af4:	40020058 	.word	0x40020058

08002af8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop

08002afc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002afc:	e7fe      	b.n	8002afc <HardFault_Handler>
 8002afe:	bf00      	nop

08002b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b00:	e7fe      	b.n	8002b00 <MemManage_Handler>
 8002b02:	bf00      	nop

08002b04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b04:	e7fe      	b.n	8002b04 <BusFault_Handler>
 8002b06:	bf00      	nop

08002b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b08:	e7fe      	b.n	8002b08 <UsageFault_Handler>
 8002b0a:	bf00      	nop

08002b0c <SVC_Handler>:
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop

08002b10 <DebugMon_Handler>:
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop

08002b14 <PendSV_Handler>:
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop

08002b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b1a:	f003 f98f 	bl	8005e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systick_Inc();
  /* USER CODE END SysTick_IRQn 1 */
}
 8002b1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  systick_Inc();
 8002b22:	f003 b94d 	b.w	8005dc0 <systick_Inc>
 8002b26:	bf00      	nop

08002b28 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002b28:	4801      	ldr	r0, [pc, #4]	; (8002b30 <DMA1_Channel5_IRQHandler+0x8>)
 8002b2a:	f003 ba91 	b.w	8006050 <HAL_DMA_IRQHandler>
 8002b2e:	bf00      	nop
 8002b30:	20000734 	.word	0x20000734

08002b34 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002b34:	4801      	ldr	r0, [pc, #4]	; (8002b3c <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8002b36:	f004 ba57 	b.w	8006fe8 <HAL_PCD_IRQHandler>
 8002b3a:	bf00      	nop
 8002b3c:	200019c0 	.word	0x200019c0

08002b40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b42:	4803      	ldr	r0, [pc, #12]	; (8002b50 <TIM2_IRQHandler+0x10>)
 8002b44:	f005 fa6a 	bl	800801c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  led_update();
  /* USER CODE END TIM2_IRQn 1 */
}
 8002b48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  led_update();
 8002b4c:	f002 bbb0 	b.w	80052b0 <led_update>
 8002b50:	200007d8 	.word	0x200007d8

08002b54 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b54:	b530      	push	{r4, r5, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//this timer runs on 200Hz
	if (timer_index % 2 == 0){
 8002b56:	4c65      	ldr	r4, [pc, #404]	; (8002cec <TIM3_IRQHandler+0x198>)
{
 8002b58:	b0f1      	sub	sp, #452	; 0x1c4
	if (timer_index % 2 == 0){
 8002b5a:	f9b4 3000 	ldrsh.w	r3, [r4]
 8002b5e:	f013 0501 	ands.w	r5, r3, #1
 8002b62:	d022      	beq.n	8002baa <TIM3_IRQHandler+0x56>
			CDC_Transmit_FS(str,strlen(str));
		  }

	}

	if (timer_index % 10 == 0){
 8002b64:	4a62      	ldr	r2, [pc, #392]	; (8002cf0 <TIM3_IRQHandler+0x19c>)
 8002b66:	17d9      	asrs	r1, r3, #31
 8002b68:	fb82 0203 	smull	r0, r2, r2, r3
 8002b6c:	ebc1 02a2 	rsb	r2, r1, r2, asr #2
 8002b70:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002b74:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 8002b78:	b212      	sxth	r2, r2
 8002b7a:	2a00      	cmp	r2, #0
 8002b7c:	d03a      	beq.n	8002bf4 <TIM3_IRQHandler+0xa0>
		//code here runs on 20Hz
		ms5611_timer_update();
	}

	if (timer_index % 20 == 0){
 8002b7e:	4a5c      	ldr	r2, [pc, #368]	; (8002cf0 <TIM3_IRQHandler+0x19c>)
 8002b80:	fb82 0203 	smull	r0, r2, r2, r3
 8002b84:	ebc1 01e2 	rsb	r1, r1, r2, asr #3
 8002b88:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002b8c:	eba3 0181 	sub.w	r1, r3, r1, lsl #2
 8002b90:	b209      	sxth	r1, r1
 8002b92:	b301      	cbz	r1, 8002bd6 <TIM3_IRQHandler+0x82>
			XIMU_sens.lon = GNSS.GNGGA.lon;
			XIMU_sens.gps_ts = millis();
		}
	}

	timer_index++;
 8002b94:	3301      	adds	r3, #1
 8002b96:	b21b      	sxth	r3, r3
	if (timer_index == 200){
 8002b98:	2bc8      	cmp	r3, #200	; 0xc8
		timer_index = 0;
 8002b9a:	bf08      	it	eq
 8002b9c:	2300      	moveq	r3, #0
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b9e:	4855      	ldr	r0, [pc, #340]	; (8002cf4 <TIM3_IRQHandler+0x1a0>)
		timer_index = 0;
 8002ba0:	8023      	strh	r3, [r4, #0]
  HAL_TIM_IRQHandler(&htim3);
 8002ba2:	f005 fa3b 	bl	800801c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ba6:	b071      	add	sp, #452	; 0x1c4
 8002ba8:	bd30      	pop	{r4, r5, pc}
		  int status = dmp_read_fifo(gyro, accel, quat, &timestamp, &sensors,&more);
 8002baa:	f10d 0209 	add.w	r2, sp, #9
 8002bae:	f10d 030a 	add.w	r3, sp, #10
 8002bb2:	e9cd 3200 	strd	r3, r2, [sp]
 8002bb6:	a804      	add	r0, sp, #16
 8002bb8:	a906      	add	r1, sp, #24
 8002bba:	aa08      	add	r2, sp, #32
 8002bbc:	ab03      	add	r3, sp, #12
		  short gyro[3] = {0,0,0}, accel[3] = {0,0,0}, sensors;
 8002bbe:	9504      	str	r5, [sp, #16]
 8002bc0:	f8ad 5014 	strh.w	r5, [sp, #20]
 8002bc4:	9506      	str	r5, [sp, #24]
 8002bc6:	f8ad 501c 	strh.w	r5, [sp, #28]
		  int status = dmp_read_fifo(gyro, accel, quat, &timestamp, &sensors,&more);
 8002bca:	f7ff fba5 	bl	8002318 <dmp_read_fifo>
		  if (status == 0){
 8002bce:	b1b8      	cbz	r0, 8002c00 <TIM3_IRQHandler+0xac>
 8002bd0:	f9b4 3000 	ldrsh.w	r3, [r4]
 8002bd4:	e7c6      	b.n	8002b64 <TIM3_IRQHandler+0x10>
		int status = mpu_get_compass_reg(data,NULL);
 8002bd6:	a80c      	add	r0, sp, #48	; 0x30
 8002bd8:	f7ff fa7e 	bl	80020d8 <mpu_get_compass_reg>
		if (status == 0){
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	d06a      	beq.n	8002cb6 <TIM3_IRQHandler+0x162>
		GNSS_RX_Update();
 8002be0:	f002 f926 	bl	8004e30 <GNSS_RX_Update>
		if (GNSS.GNGGA.status != 0){//data is valid
 8002be4:	4b44      	ldr	r3, [pc, #272]	; (8002cf8 <TIM3_IRQHandler+0x1a4>)
 8002be6:	f8d3 24a4 	ldr.w	r2, [r3, #1188]	; 0x4a4
 8002bea:	2a00      	cmp	r2, #0
 8002bec:	d151      	bne.n	8002c92 <TIM3_IRQHandler+0x13e>
 8002bee:	f9b4 3000 	ldrsh.w	r3, [r4]
 8002bf2:	e7cf      	b.n	8002b94 <TIM3_IRQHandler+0x40>
		ms5611_timer_update();
 8002bf4:	f002 fda0 	bl	8005738 <ms5611_timer_update>
 8002bf8:	f9b4 3000 	ldrsh.w	r3, [r4]
 8002bfc:	17d9      	asrs	r1, r3, #31
 8002bfe:	e7be      	b.n	8002b7e <TIM3_IRQHandler+0x2a>
			  XIMU_sens.q0 = quat[0];
 8002c00:	9808      	ldr	r0, [sp, #32]
 8002c02:	f7fd fbff 	bl	8000404 <__aeabi_i2d>
 8002c06:	4d3d      	ldr	r5, [pc, #244]	; (8002cfc <TIM3_IRQHandler+0x1a8>)
 8002c08:	e9c5 0100 	strd	r0, r1, [r5]
			  XIMU_sens.q1 = quat[1];
 8002c0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c0e:	f7fd fbf9 	bl	8000404 <__aeabi_i2d>
 8002c12:	e9c5 0102 	strd	r0, r1, [r5, #8]
			  XIMU_sens.q2 = quat[2];
 8002c16:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002c18:	f7fd fbf4 	bl	8000404 <__aeabi_i2d>
 8002c1c:	e9c5 0104 	strd	r0, r1, [r5, #16]
			  XIMU_sens.q3 = quat[3];
 8002c20:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002c22:	f7fd fbef 	bl	8000404 <__aeabi_i2d>
 8002c26:	e9c5 0106 	strd	r0, r1, [r5, #24]
			  XIMU_sens.ax = accel[0];
 8002c2a:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8002c2e:	f7fd fbe9 	bl	8000404 <__aeabi_i2d>
 8002c32:	e9c5 0108 	strd	r0, r1, [r5, #32]
			  XIMU_sens.ay = accel[1];
 8002c36:	f9bd 001a 	ldrsh.w	r0, [sp, #26]
 8002c3a:	f7fd fbe3 	bl	8000404 <__aeabi_i2d>
 8002c3e:	e9c5 010a 	strd	r0, r1, [r5, #40]	; 0x28
			  XIMU_sens.az = accel[2];
 8002c42:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8002c46:	f7fd fbdd 	bl	8000404 <__aeabi_i2d>
 8002c4a:	e9c5 010c 	strd	r0, r1, [r5, #48]	; 0x30
			  XIMU_sens.gx = gyro[0];
 8002c4e:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8002c52:	f7fd fbd7 	bl	8000404 <__aeabi_i2d>
 8002c56:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
			  XIMU_sens.gy = gyro[1];
 8002c5a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8002c5e:	f7fd fbd1 	bl	8000404 <__aeabi_i2d>
 8002c62:	e9c5 0110 	strd	r0, r1, [r5, #64]	; 0x40
			  XIMU_sens.gz = gyro[2];
 8002c66:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8002c6a:	f7fd fbcb 	bl	8000404 <__aeabi_i2d>
 8002c6e:	e9c5 0112 	strd	r0, r1, [r5, #72]	; 0x48
			  XIMU_sens.qag_ts = millis();
 8002c72:	f003 f895 	bl	8005da0 <millis>
 8002c76:	6528      	str	r0, [r5, #80]	; 0x50
			  calc_absolute_acceleration();
 8002c78:	f001 faa8 	bl	80041cc <calc_absolute_acceleration>
			build_data_str(str);
 8002c7c:	a80c      	add	r0, sp, #48	; 0x30
 8002c7e:	f001 ff0b 	bl	8004a98 <build_data_str>
			CDC_Transmit_FS(str,strlen(str));
 8002c82:	a80c      	add	r0, sp, #48	; 0x30
 8002c84:	f7fd fa64 	bl	8000150 <strlen>
 8002c88:	b281      	uxth	r1, r0
 8002c8a:	a80c      	add	r0, sp, #48	; 0x30
 8002c8c:	f006 fe0e 	bl	80098ac <CDC_Transmit_FS>
 8002c90:	e79e      	b.n	8002bd0 <TIM3_IRQHandler+0x7c>
			XIMU_sens.lat = GNSS.GNGGA.lat;
 8002c92:	4d1a      	ldr	r5, [pc, #104]	; (8002cfc <TIM3_IRQHandler+0x1a8>)
 8002c94:	f503 6290 	add.w	r2, r3, #1152	; 0x480
			XIMU_sens.lon = GNSS.GNGGA.lon;
 8002c98:	f503 6393 	add.w	r3, r3, #1176	; 0x498
			XIMU_sens.lat = GNSS.GNGGA.lat;
 8002c9c:	e9d2 0100 	ldrd	r0, r1, [r2]
			XIMU_sens.lon = GNSS.GNGGA.lon;
 8002ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
			XIMU_sens.lat = GNSS.GNGGA.lat;
 8002ca4:	e9c5 0124 	strd	r0, r1, [r5, #144]	; 0x90
			XIMU_sens.lon = GNSS.GNGGA.lon;
 8002ca8:	e9c5 2326 	strd	r2, r3, [r5, #152]	; 0x98
			XIMU_sens.gps_ts = millis();
 8002cac:	f003 f878 	bl	8005da0 <millis>
 8002cb0:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
 8002cb4:	e79b      	b.n	8002bee <TIM3_IRQHandler+0x9a>
			XIMU_sens.mx = data[0];
 8002cb6:	f9bd 0030 	ldrsh.w	r0, [sp, #48]	; 0x30
 8002cba:	f7fd fba3 	bl	8000404 <__aeabi_i2d>
 8002cbe:	4d0f      	ldr	r5, [pc, #60]	; (8002cfc <TIM3_IRQHandler+0x1a8>)
 8002cc0:	e9c5 0116 	strd	r0, r1, [r5, #88]	; 0x58
			XIMU_sens.my = data[1];
 8002cc4:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 8002cc8:	f7fd fb9c 	bl	8000404 <__aeabi_i2d>
 8002ccc:	e9c5 0118 	strd	r0, r1, [r5, #96]	; 0x60
			XIMU_sens.mz = data[2];
 8002cd0:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 8002cd4:	f7fd fb96 	bl	8000404 <__aeabi_i2d>
 8002cd8:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
			calibrate_mag_reading();
 8002cdc:	f001 f9ac 	bl	8004038 <calibrate_mag_reading>
			XIMU_sens.m_ts = millis();
 8002ce0:	f003 f85e 	bl	8005da0 <millis>
 8002ce4:	6728      	str	r0, [r5, #112]	; 0x70
			calc_magnetic_orientation();
 8002ce6:	f001 fc5d 	bl	80045a4 <calc_magnetic_orientation>
 8002cea:	e779      	b.n	8002be0 <TIM3_IRQHandler+0x8c>
 8002cec:	200003b4 	.word	0x200003b4
 8002cf0:	66666667 	.word	0x66666667
 8002cf4:	200006f4 	.word	0x200006f4
 8002cf8:	20000850 	.word	0x20000850
 8002cfc:	200005f8 	.word	0x200005f8

08002d00 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002d00:	4a0c      	ldr	r2, [pc, #48]	; (8002d34 <_sbrk+0x34>)
{
 8002d02:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8002d04:	6813      	ldr	r3, [r2, #0]
 8002d06:	b133      	cbz	r3, 8002d16 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002d08:	4669      	mov	r1, sp
 8002d0a:	4418      	add	r0, r3
 8002d0c:	4288      	cmp	r0, r1
 8002d0e:	d809      	bhi.n	8002d24 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8002d10:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8002d16:	4908      	ldr	r1, [pc, #32]	; (8002d38 <_sbrk+0x38>)
 8002d18:	460b      	mov	r3, r1
 8002d1a:	6011      	str	r1, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002d1c:	4669      	mov	r1, sp
 8002d1e:	4418      	add	r0, r3
 8002d20:	4288      	cmp	r0, r1
 8002d22:	d9f5      	bls.n	8002d10 <_sbrk+0x10>
		errno = ENOMEM;
 8002d24:	f007 fb8e 	bl	800a444 <__errno>
 8002d28:	220c      	movs	r2, #12
		return (caddr_t) -1;
 8002d2a:	f04f 33ff 	mov.w	r3, #4294967295
		errno = ENOMEM;
 8002d2e:	6002      	str	r2, [r0, #0]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	bd08      	pop	{r3, pc}
 8002d34:	200003b8 	.word	0x200003b8
 8002d38:	20001c30 	.word	0x20001c30

08002d3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d3c:	b430      	push	{r4, r5}

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002d3e:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002d42:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR |= 0x00000001U;
 8002d46:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <SystemInit+0x44>)
  RCC->CFGR &= 0xF8FF0000U;
 8002d48:	4a0e      	ldr	r2, [pc, #56]	; (8002d84 <SystemInit+0x48>)
  RCC->CR |= 0x00000001U;
 8002d4a:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002d4c:	480e      	ldr	r0, [pc, #56]	; (8002d88 <SystemInit+0x4c>)
  RCC->CR |= 0x00000001U;
 8002d4e:	f041 0101 	orr.w	r1, r1, #1
 8002d52:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= 0xF8FF0000U;
 8002d54:	6859      	ldr	r1, [r3, #4]
 8002d56:	400a      	ands	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002d60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d64:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d6c:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002d74:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000U;
 8002d76:	609d      	str	r5, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002d78:	6084      	str	r4, [r0, #8]
#endif 
}
 8002d7a:	bc30      	pop	{r4, r5}
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000
 8002d84:	f8ff0000 	.word	0xf8ff0000
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002d8c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002d8e:	e003      	b.n	8002d98 <LoopCopyDataInit>

08002d90 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002d92:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d94:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d96:	3104      	adds	r1, #4

08002d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d98:	480a      	ldr	r0, [pc, #40]	; (8002dc4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002d9c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002d9e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002da0:	d3f6      	bcc.n	8002d90 <CopyDataInit>
  ldr r2, =_sbss
 8002da2:	4a0a      	ldr	r2, [pc, #40]	; (8002dcc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002da4:	e002      	b.n	8002dac <LoopFillZerobss>

08002da6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002da6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002da8:	f842 3b04 	str.w	r3, [r2], #4

08002dac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002dac:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002dae:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002db0:	d3f9      	bcc.n	8002da6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002db2:	f7ff ffc3 	bl	8002d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002db6:	f007 fb4b 	bl	800a450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dba:	f7ff fc59 	bl	8002670 <main>
  bx lr
 8002dbe:	4770      	bx	lr
  ldr r3, =_sidata
 8002dc0:	0800f568 	.word	0x0800f568
  ldr r0, =_sdata
 8002dc4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002dc8:	20000388 	.word	0x20000388
  ldr r2, =_sbss
 8002dcc:	20000388 	.word	0x20000388
  ldr r3, = _ebss
 8002dd0:	20001c30 	.word	0x20001c30

08002dd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dd4:	e7fe      	b.n	8002dd4 <ADC1_2_IRQHandler>
	...

08002dd8 <ESKF_new>:
	eskf->IMU_initialized = 0;
	eskf->MAG_initialized = 0;
	eskf->GPS_initialized = 0;

	//Utils
	arm_mat_init_f32(&eskf->I3,3,3,eskf->I3_data);
 8002dd8:	f500 5387 	add.w	r3, r0, #4320	; 0x10e0
 8002ddc:	3308      	adds	r3, #8
void ESKF_new(ESKF_filter* eskf){
 8002dde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	arm_mat_init_f32(&eskf->I3,3,3,eskf->I3_data);
 8002de2:	4619      	mov	r1, r3
void ESKF_new(ESKF_filter* eskf){
 8002de4:	4604      	mov	r4, r0
	eskf->IMU_initialized = 0;
 8002de6:	2500      	movs	r5, #0
	arm_mat_init_f32(&eskf->I3,3,3,eskf->I3_data);
 8002de8:	2203      	movs	r2, #3
 8002dea:	f500 5387 	add.w	r3, r0, #4320	; 0x10e0
void ESKF_new(ESKF_filter* eskf){
 8002dee:	b083      	sub	sp, #12
	arm_mat_init_f32(&eskf->I3,3,3,eskf->I3_data);
 8002df0:	4689      	mov	r9, r1
 8002df2:	4608      	mov	r0, r1
	eskf->MAG_initialized = 0;
 8002df4:	e9c4 5500 	strd	r5, r5, [r4]
	eskf->GPS_initialized = 0;
 8002df8:	60a5      	str	r5, [r4, #8]
	arm_mat_init_f32(&eskf->I3,3,3,eskf->I3_data);
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	3310      	adds	r3, #16
 8002dfe:	f007 faa3 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->I12,12,12,eskf->I12_data);
 8002e02:	220c      	movs	r2, #12
 8002e04:	f504 5688 	add.w	r6, r4, #4352	; 0x1100
 8002e08:	3614      	adds	r6, #20
 8002e0a:	f504 5388 	add.w	r3, r4, #4352	; 0x1100
 8002e0e:	4630      	mov	r0, r6
 8002e10:	4611      	mov	r1, r2
 8002e12:	331c      	adds	r3, #28
 8002e14:	f007 fa98 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->I15,15,15,eskf->I15_data);
 8002e18:	220f      	movs	r2, #15
 8002e1a:	f504 589a 	add.w	r8, r4, #4928	; 0x1340
 8002e1e:	f108 081c 	add.w	r8, r8, #28
 8002e22:	f504 539b 	add.w	r3, r4, #4960	; 0x1360
 8002e26:	4640      	mov	r0, r8
 8002e28:	4611      	mov	r1, r2
 8002e2a:	3304      	adds	r3, #4
	arm_mat_init_f32(&eskf->g,3,1,eskf->g_data);
 8002e2c:	f504 57b7 	add.w	r7, r4, #5856	; 0x16e0
	arm_mat_init_f32(&eskf->I15,15,15,eskf->I15_data);
 8002e30:	f007 fa8a 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->g,3,1,eskf->g_data);
 8002e34:	3708      	adds	r7, #8
 8002e36:	f504 53b7 	add.w	r3, r4, #5856	; 0x16e0
 8002e3a:	3310      	adds	r3, #16
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	2103      	movs	r1, #3
 8002e40:	4638      	mov	r0, r7
 8002e42:	f007 fa81 	bl	800a348 <arm_mat_init_f32>

	eye(&eskf->I3);
 8002e46:	4648      	mov	r0, r9
 8002e48:	f8cd 9004 	str.w	r9, [sp, #4]
 8002e4c:	f000 ff6a 	bl	8003d24 <eye>
	eye(&eskf->I12);
 8002e50:	4630      	mov	r0, r6
 8002e52:	f000 ff67 	bl	8003d24 <eye>
	eye(&eskf->I15);
 8002e56:	4640      	mov	r0, r8
 8002e58:	f000 ff64 	bl	8003d24 <eye>
	zeros(&eskf->g);	eskf->g_data[2] = -9.81;
 8002e5c:	4638      	mov	r0, r7
 8002e5e:	f000 ff57 	bl	8003d10 <zeros>
 8002e62:	f241 63f8 	movw	r3, #5880	; 0x16f8
 8002e66:	4af1      	ldr	r2, [pc, #964]	; (800322c <ESKF_new+0x454>)

	//Nominal states
	arm_mat_init_f32(&eskf->p,3,1,eskf->p_data);
 8002e68:	f104 0a0c 	add.w	sl, r4, #12
	zeros(&eskf->g);	eskf->g_data[2] = -9.81;
 8002e6c:	50e2      	str	r2, [r4, r3]
	arm_mat_init_f32(&eskf->v,3,1,eskf->v_data);
 8002e6e:	f104 0920 	add.w	r9, r4, #32
	arm_mat_init_f32(&eskf->p,3,1,eskf->p_data);
 8002e72:	4650      	mov	r0, sl
 8002e74:	f104 0314 	add.w	r3, r4, #20
 8002e78:	2201      	movs	r2, #1
 8002e7a:	2103      	movs	r1, #3
 8002e7c:	f007 fa64 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->q,4,1,eskf->q_data);
 8002e80:	f104 0834 	add.w	r8, r4, #52	; 0x34
	arm_mat_init_f32(&eskf->v,3,1,eskf->v_data);
 8002e84:	4648      	mov	r0, r9
 8002e86:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	2103      	movs	r1, #3
 8002e8e:	f007 fa5b 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->q,4,1,eskf->q_data);
 8002e92:	4640      	mov	r0, r8
 8002e94:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8002e98:	2201      	movs	r2, #1
 8002e9a:	2104      	movs	r1, #4
 8002e9c:	f007 fa54 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->R,3,3,eskf->R_data);
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	f104 0b4c 	add.w	fp, r4, #76	; 0x4c
 8002ea6:	4658      	mov	r0, fp
 8002ea8:	f104 0354 	add.w	r3, r4, #84	; 0x54
 8002eac:	4611      	mov	r1, r2
	arm_mat_init_f32(&eskf->ab,3,1,eskf->ab_data);
 8002eae:	f104 0778 	add.w	r7, r4, #120	; 0x78
 8002eb2:	9700      	str	r7, [sp, #0]
	arm_mat_init_f32(&eskf->R,3,3,eskf->R_data);
 8002eb4:	f007 fa48 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->wb,3,1,eskf->wb_data);
 8002eb8:	f104 078c 	add.w	r7, r4, #140	; 0x8c
	arm_mat_init_f32(&eskf->ab,3,1,eskf->ab_data);
 8002ebc:	9800      	ldr	r0, [sp, #0]
 8002ebe:	f104 0380 	add.w	r3, r4, #128	; 0x80
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	2103      	movs	r1, #3
 8002ec6:	f007 fa3f 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->wb,3,1,eskf->wb_data);
 8002eca:	2103      	movs	r1, #3
 8002ecc:	f104 0394 	add.w	r3, r4, #148	; 0x94
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	4638      	mov	r0, r7
 8002ed4:	f007 fa38 	bl	800a348 <arm_mat_init_f32>

	zeros(&eskf->p);
 8002ed8:	4650      	mov	r0, sl
 8002eda:	f000 ff19 	bl	8003d10 <zeros>
	zeros(&eskf->v);
 8002ede:	4648      	mov	r0, r9
 8002ee0:	f000 ff16 	bl	8003d10 <zeros>
	zeros(&eskf->q);eskf->q.pData[0] = 1.0;//q = [1,0,0,0]'
 8002ee4:	4640      	mov	r0, r8
 8002ee6:	f000 ff13 	bl	8003d10 <zeros>
 8002eea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002eee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	eye(&eskf->R);
 8002ef0:	4658      	mov	r0, fp
	zeros(&eskf->q);eskf->q.pData[0] = 1.0;//q = [1,0,0,0]'
 8002ef2:	601a      	str	r2, [r3, #0]
	eye(&eskf->R);
 8002ef4:	f000 ff16 	bl	8003d24 <eye>
	zeros(&eskf->ab);
 8002ef8:	9800      	ldr	r0, [sp, #0]
 8002efa:	f000 ff09 	bl	8003d10 <zeros>
	zeros(&eskf->wb);

	//Error states
	arm_mat_init_f32(&eskf->del_p,3,1,eskf->del_p_data);
 8002efe:	f104 0ba0 	add.w	fp, r4, #160	; 0xa0
	zeros(&eskf->wb);
 8002f02:	4638      	mov	r0, r7
 8002f04:	f000 ff04 	bl	8003d10 <zeros>
	arm_mat_init_f32(&eskf->del_v,3,1,eskf->del_v_data);
 8002f08:	f104 0ab4 	add.w	sl, r4, #180	; 0xb4
	arm_mat_init_f32(&eskf->del_p,3,1,eskf->del_p_data);
 8002f0c:	4658      	mov	r0, fp
 8002f0e:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
 8002f12:	2201      	movs	r2, #1
 8002f14:	2103      	movs	r1, #3
 8002f16:	f007 fa17 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->del_theta,3,1,eskf->del_theta_data);
 8002f1a:	f104 09c8 	add.w	r9, r4, #200	; 0xc8
	arm_mat_init_f32(&eskf->del_v,3,1,eskf->del_v_data);
 8002f1e:	4650      	mov	r0, sl
 8002f20:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 8002f24:	2201      	movs	r2, #1
 8002f26:	2103      	movs	r1, #3
 8002f28:	f007 fa0e 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->del_ab,3,1,eskf->del_ab_data);
 8002f2c:	f104 08dc 	add.w	r8, r4, #220	; 0xdc
	arm_mat_init_f32(&eskf->del_theta,3,1,eskf->del_theta_data);
 8002f30:	4648      	mov	r0, r9
 8002f32:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
 8002f36:	2201      	movs	r2, #1
 8002f38:	2103      	movs	r1, #3
 8002f3a:	f007 fa05 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->del_wb,3,1,eskf->del_wb_data);
 8002f3e:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
	arm_mat_init_f32(&eskf->del_ab,3,1,eskf->del_ab_data);
 8002f42:	4640      	mov	r0, r8
 8002f44:	f104 03e4 	add.w	r3, r4, #228	; 0xe4
 8002f48:	2201      	movs	r2, #1
 8002f4a:	2103      	movs	r1, #3
 8002f4c:	f007 f9fc 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->del_wb,3,1,eskf->del_wb_data);
 8002f50:	f104 03f8 	add.w	r3, r4, #248	; 0xf8
 8002f54:	2201      	movs	r2, #1
 8002f56:	2103      	movs	r1, #3
 8002f58:	4638      	mov	r0, r7
 8002f5a:	f007 f9f5 	bl	800a348 <arm_mat_init_f32>

	zeros(&eskf->del_p);
 8002f5e:	4658      	mov	r0, fp
 8002f60:	f000 fed6 	bl	8003d10 <zeros>
	zeros(&eskf->del_v);
 8002f64:	4650      	mov	r0, sl
 8002f66:	f000 fed3 	bl	8003d10 <zeros>
	zeros(&eskf->del_theta);
 8002f6a:	4648      	mov	r0, r9
 8002f6c:	f000 fed0 	bl	8003d10 <zeros>
	zeros(&eskf->del_ab);
 8002f70:	4640      	mov	r0, r8
 8002f72:	f000 fecd 	bl	8003d10 <zeros>
	zeros(&eskf->del_wb);
 8002f76:	4638      	mov	r0, r7
 8002f78:	f000 feca 	bl	8003d10 <zeros>

	//covariance matrix
	arm_mat_init_f32(&eskf->P,15,15,eskf->P_data);
 8002f7c:	220f      	movs	r2, #15
 8002f7e:	f504 7782 	add.w	r7, r4, #260	; 0x104
 8002f82:	4638      	mov	r0, r7
 8002f84:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 8002f88:	4611      	mov	r1, r2
 8002f8a:	f007 f9dd 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->Q,12,12,eskf->Q_data);
 8002f8e:	220c      	movs	r2, #12
 8002f90:	f504 6892 	add.w	r8, r4, #1168	; 0x490
 8002f94:	f504 6393 	add.w	r3, r4, #1176	; 0x498
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4640      	mov	r0, r8
 8002f9c:	f007 f9d4 	bl	800a348 <arm_mat_init_f32>

	//for simplicity
	float32_t* P = eskf->P.pData;

	zeros(&eskf->P);
 8002fa0:	4638      	mov	r0, r7
	float32_t* P = eskf->P.pData;
 8002fa2:	f8d4 7108 	ldr.w	r7, [r4, #264]	; 0x108
	zeros(&eskf->P);
 8002fa6:	f000 feb3 	bl	8003d10 <zeros>

	P[0] = P[16] = P[32] = P_INITIAL_COV;
	P[48] = P[64] = P[80] = V_INITIAL_COV;
	P[96] = P[112] = PR_INITIAL_COV;
	P[128] = Y_INITIAL_COV;
 8002faa:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
	P[0] = P[16] = P[32] = P_INITIAL_COV;
 8002fae:	4aa0      	ldr	r2, [pc, #640]	; (8003230 <ESKF_new+0x458>)
	P[144] = P[160] = P[176] = AB_INITIAL_COV;
 8002fb0:	4ba0      	ldr	r3, [pc, #640]	; (8003234 <ESKF_new+0x45c>)
	P[96] = P[112] = PR_INITIAL_COV;
 8002fb2:	49a1      	ldr	r1, [pc, #644]	; (8003238 <ESKF_new+0x460>)
	P[128] = Y_INITIAL_COV;
 8002fb4:	f8c7 c200 	str.w	ip, [r7, #512]	; 0x200
	P[192] = P[208] = P[224] = WB_INITIAL_COV;

	zeros(&eskf->Q);//Value of Q depends on dt
 8002fb8:	4640      	mov	r0, r8
	P[0] = P[16] = P[32] = P_INITIAL_COV;
 8002fba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002fbe:	643a      	str	r2, [r7, #64]	; 0x40
 8002fc0:	603a      	str	r2, [r7, #0]
	P[48] = P[64] = P[80] = V_INITIAL_COV;
 8002fc2:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8002fc6:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8002fca:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
	P[96] = P[112] = PR_INITIAL_COV;
 8002fce:	f8c7 11c0 	str.w	r1, [r7, #448]	; 0x1c0
 8002fd2:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
	P[144] = P[160] = P[176] = AB_INITIAL_COV;
 8002fd6:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8002fda:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 8002fde:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
	P[192] = P[208] = P[224] = WB_INITIAL_COV;
 8002fe2:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 8002fe6:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 8002fea:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
	zeros(&eskf->Q);//Value of Q depends on dt
 8002fee:	f000 fe8f 	bl	8003d10 <zeros>

	arm_mat_init_f32(&eskf->V_GPS,3,3,eskf->V_GPS_data);
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	f504 68db 	add.w	r8, r4, #1752	; 0x6d8
 8002ff8:	4640      	mov	r0, r8
 8002ffa:	f504 63dc 	add.w	r3, r4, #1760	; 0x6e0
 8002ffe:	4611      	mov	r1, r2
 8003000:	f007 f9a2 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->V_MAG,3,3,eskf->V_MAG_data);
 8003004:	2203      	movs	r2, #3
 8003006:	f204 7704 	addw	r7, r4, #1796	; 0x704
 800300a:	f204 730c 	addw	r3, r4, #1804	; 0x70c
 800300e:	4611      	mov	r1, r2
 8003010:	4638      	mov	r0, r7
 8003012:	f007 f999 	bl	800a348 <arm_mat_init_f32>

	zeros(&eskf->V_GPS);
 8003016:	4640      	mov	r0, r8
 8003018:	f000 fe7a 	bl	8003d10 <zeros>
	eskf->V_GPS.pData[0] = eskf->V_GPS.pData[4] = GPS_XY_INITIAL_COV;
 800301c:	f8d4 36dc 	ldr.w	r3, [r4, #1756]	; 0x6dc
 8003020:	4a86      	ldr	r2, [pc, #536]	; (800323c <ESKF_new+0x464>)
	eskf->V_GPS.pData[8] = GPS_Z_INITIAL_COV;
 8003022:	4987      	ldr	r1, [pc, #540]	; (8003240 <ESKF_new+0x468>)

	zeros(&eskf->V_MAG);
 8003024:	4638      	mov	r0, r7
	eskf->V_GPS.pData[8] = GPS_Z_INITIAL_COV;
 8003026:	6219      	str	r1, [r3, #32]
	eskf->V_GPS.pData[0] = eskf->V_GPS.pData[4] = GPS_XY_INITIAL_COV;
 8003028:	611a      	str	r2, [r3, #16]
 800302a:	601a      	str	r2, [r3, #0]
	zeros(&eskf->V_MAG);
 800302c:	f000 fe70 	bl	8003d10 <zeros>
	eskf->V_MAG.pData[0] = eskf->V_MAG.pData[4] = eskf->V_MAG.pData[8] = MAG_INITIAL_COV;
 8003030:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000

	//state transfer matrix
	arm_mat_init_f32(&eskf->Fx,15,15,eskf->Fx_data);
 8003034:	220f      	movs	r2, #15
	eskf->V_MAG.pData[0] = eskf->V_MAG.pData[4] = eskf->V_MAG.pData[8] = MAG_INITIAL_COV;
 8003036:	f8d4 3708 	ldr.w	r3, [r4, #1800]	; 0x708
	arm_mat_init_f32(&eskf->Fx,15,15,eskf->Fx_data);
 800303a:	f504 68e6 	add.w	r8, r4, #1840	; 0x730
	arm_mat_init_f32(&eskf->Fi,15,12,eskf->Fi_data);
 800303e:	f604 27bc 	addw	r7, r4, #2748	; 0xabc
	eskf->V_MAG.pData[0] = eskf->V_MAG.pData[4] = eskf->V_MAG.pData[8] = MAG_INITIAL_COV;
 8003042:	6219      	str	r1, [r3, #32]
 8003044:	6119      	str	r1, [r3, #16]
 8003046:	6019      	str	r1, [r3, #0]
	arm_mat_init_f32(&eskf->Fx,15,15,eskf->Fx_data);
 8003048:	4640      	mov	r0, r8
 800304a:	f504 63e7 	add.w	r3, r4, #1848	; 0x738
 800304e:	4611      	mov	r1, r2
 8003050:	f007 f97a 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->Fi,15,12,eskf->Fi_data);
 8003054:	f604 23c4 	addw	r3, r4, #2756	; 0xac4
 8003058:	220c      	movs	r2, #12
 800305a:	210f      	movs	r1, #15
 800305c:	4638      	mov	r0, r7
 800305e:	f007 f973 	bl	800a348 <arm_mat_init_f32>

	eye(&eskf->Fx);//other part of Fx depends on dt
 8003062:	4640      	mov	r0, r8
 8003064:	f000 fe5e 	bl	8003d24 <eye>

	zeros(&eskf->Fi);
 8003068:	4638      	mov	r0, r7
 800306a:	f000 fe51 	bl	8003d10 <zeros>
	matcpy2(&eskf->Fi,&eskf->I12,3,0);
 800306e:	462b      	mov	r3, r5
 8003070:	4631      	mov	r1, r6
 8003072:	4638      	mov	r0, r7
 8003074:	2203      	movs	r2, #3
 8003076:	f000 fe85 	bl	8003d84 <matcpy2>

	//observation
	arm_mat_init_f32(&eskf->z_GPS,3,1,eskf->z_GPS_data);
 800307a:	f604 539c 	addw	r3, r4, #3484	; 0xd9c
 800307e:	f604 5094 	addw	r0, r4, #3476	; 0xd94
 8003082:	2201      	movs	r2, #1
 8003084:	2103      	movs	r1, #3
 8003086:	f007 f95f 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->z_MAG,3,1,eskf->z_MAG_data);

	//observation matrix
	arm_mat_init_f32(&eskf->H_GPS,3,15,eskf->H_GPS_data);
 800308a:	f604 56bc 	addw	r6, r4, #3516	; 0xdbc
	arm_mat_init_f32(&eskf->z_MAG,3,1,eskf->z_MAG_data);
 800308e:	f504 635b 	add.w	r3, r4, #3504	; 0xdb0
 8003092:	f604 50a8 	addw	r0, r4, #3496	; 0xda8
 8003096:	2201      	movs	r2, #1
 8003098:	2103      	movs	r1, #3
 800309a:	f007 f955 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->H_MAG,3,15,eskf->H_MAG_data);
 800309e:	f604 6778 	addw	r7, r4, #3704	; 0xe78
	arm_mat_init_f32(&eskf->H_GPS,3,15,eskf->H_GPS_data);
 80030a2:	4630      	mov	r0, r6
 80030a4:	f604 53c4 	addw	r3, r4, #3524	; 0xdc4
 80030a8:	220f      	movs	r2, #15
 80030aa:	2103      	movs	r1, #3
 80030ac:	f007 f94c 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->H_MAG,3,15,eskf->H_MAG_data);
 80030b0:	f504 6368 	add.w	r3, r4, #3712	; 0xe80
 80030b4:	4638      	mov	r0, r7
 80030b6:	220f      	movs	r2, #15
 80030b8:	2103      	movs	r1, #3
 80030ba:	f007 f945 	bl	800a348 <arm_mat_init_f32>

	zeros(&eskf->H_GPS);
 80030be:	4630      	mov	r0, r6
 80030c0:	f000 fe26 	bl	8003d10 <zeros>
	matcpy2(&eskf->H_GPS,&eskf->I3,0,0);
 80030c4:	462b      	mov	r3, r5
 80030c6:	462a      	mov	r2, r5
 80030c8:	9901      	ldr	r1, [sp, #4]
 80030ca:	4630      	mov	r0, r6
 80030cc:	f000 fe5a 	bl	8003d84 <matcpy2>

	zeros(&eskf->H_MAG);//H_MAG depends on q

	//Kalman gain matrix
	arm_mat_init_f32(&eskf->K_GPS,15,3,eskf->K_GPS_data);
 80030d0:	f604 7834 	addw	r8, r4, #3892	; 0xf34
	zeros(&eskf->H_MAG);//H_MAG depends on q
 80030d4:	4638      	mov	r0, r7
 80030d6:	f000 fe1b 	bl	8003d10 <zeros>
	arm_mat_init_f32(&eskf->K_MAG,15,3,eskf->K_MAG_data);
 80030da:	f504 677f 	add.w	r7, r4, #4080	; 0xff0
	arm_mat_init_f32(&eskf->K_GPS,15,3,eskf->K_GPS_data);
 80030de:	4640      	mov	r0, r8
 80030e0:	f604 733c 	addw	r3, r4, #3900	; 0xf3c
 80030e4:	2203      	movs	r2, #3
 80030e6:	210f      	movs	r1, #15
 80030e8:	f007 f92e 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->K_MAG,15,3,eskf->K_MAG_data);
 80030ec:	f604 73f8 	addw	r3, r4, #4088	; 0xff8
 80030f0:	2203      	movs	r2, #3
 80030f2:	210f      	movs	r1, #15
 80030f4:	4638      	mov	r0, r7
 80030f6:	f007 f927 	bl	800a348 <arm_mat_init_f32>

	zeros(&eskf->K_GPS);
 80030fa:	4640      	mov	r0, r8
 80030fc:	f000 fe08 	bl	8003d10 <zeros>
	zeros(&eskf->K_MAG);

	//measurements
	arm_mat_init_f32(&eskf->am,3,1,eskf->am_data);
 8003100:	f504 5885 	add.w	r8, r4, #4256	; 0x10a0
	zeros(&eskf->K_MAG);
 8003104:	4638      	mov	r0, r7
 8003106:	f000 fe03 	bl	8003d10 <zeros>
	arm_mat_init_f32(&eskf->am,3,1,eskf->am_data);
 800310a:	f108 080c 	add.w	r8, r8, #12
 800310e:	f504 5385 	add.w	r3, r4, #4256	; 0x10a0
	arm_mat_init_f32(&eskf->wm,3,1,eskf->wm_data);
 8003112:	f504 5986 	add.w	r9, r4, #4288	; 0x10c0
	arm_mat_init_f32(&eskf->am,3,1,eskf->am_data);
 8003116:	4640      	mov	r0, r8
 8003118:	3314      	adds	r3, #20
 800311a:	2201      	movs	r2, #1
 800311c:	2103      	movs	r1, #3
 800311e:	f007 f913 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->wm,3,1,eskf->wm_data);
 8003122:	464b      	mov	r3, r9
 8003124:	4648      	mov	r0, r9
 8003126:	3308      	adds	r3, #8
 8003128:	2201      	movs	r2, #1
 800312a:	2103      	movs	r1, #3
	arm_mat_init_f32(&eskf->mm,3,1,eskf->mm_data);
 800312c:	464f      	mov	r7, r9
	arm_mat_init_f32(&eskf->wm,3,1,eskf->wm_data);
 800312e:	f007 f90b 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->mm,3,1,eskf->mm_data);
 8003132:	464b      	mov	r3, r9
 8003134:	3714      	adds	r7, #20
 8003136:	331c      	adds	r3, #28
 8003138:	2201      	movs	r2, #1
 800313a:	2103      	movs	r1, #3
 800313c:	4638      	mov	r0, r7
 800313e:	f007 f903 	bl	800a348 <arm_mat_init_f32>

	zeros(&eskf->am);
 8003142:	4640      	mov	r0, r8
 8003144:	f000 fde4 	bl	8003d10 <zeros>
	zeros(&eskf->wm);
 8003148:	4648      	mov	r0, r9
 800314a:	f000 fde1 	bl	8003d10 <zeros>
	//Initialization variables
	eskf->IMU_init_count = 0;
	eskf->MAG_init_count = 0;
	eskf->GPS_init_count = 0;

	arm_mat_init_f32(&eskf->am_init,3,1,eskf->am_init_data);
 800314e:	f504 58b8 	add.w	r8, r4, #5888	; 0x1700
	zeros(&eskf->mm);
 8003152:	4638      	mov	r0, r7
 8003154:	f000 fddc 	bl	8003d10 <zeros>
	eskf->MAG_init_count = 0;
 8003158:	4641      	mov	r1, r8
	eskf->IMU_init_count = 0;
 800315a:	f241 60fc 	movw	r0, #5884	; 0x16fc
	eskf->GPS_init_count = 0;
 800315e:	f241 7204 	movw	r2, #5892	; 0x1704
	arm_mat_init_f32(&eskf->am_init,3,1,eskf->am_init_data);
 8003162:	460b      	mov	r3, r1
 8003164:	f108 0808 	add.w	r8, r8, #8
	eskf->IMU_init_count = 0;
 8003168:	5025      	str	r5, [r4, r0]
	arm_mat_init_f32(&eskf->am_init,3,1,eskf->am_init_data);
 800316a:	3310      	adds	r3, #16
	eskf->MAG_init_count = 0;
 800316c:	600d      	str	r5, [r1, #0]
	arm_mat_init_f32(&eskf->am_init,3,1,eskf->am_init_data);
 800316e:	4640      	mov	r0, r8
	eskf->GPS_init_count = 0;
 8003170:	50a5      	str	r5, [r4, r2]
	arm_mat_init_f32(&eskf->am_init,3,1,eskf->am_init_data);
 8003172:	2103      	movs	r1, #3
 8003174:	2201      	movs	r2, #1
	arm_mat_init_f32(&eskf->mm_init,3,1,eskf->mm_init_data);
 8003176:	f504 57b8 	add.w	r7, r4, #5888	; 0x1700
	arm_mat_init_f32(&eskf->am_init,3,1,eskf->am_init_data);
 800317a:	f007 f8e5 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->mm_init,3,1,eskf->mm_init_data);
 800317e:	371c      	adds	r7, #28
 8003180:	f504 53b9 	add.w	r3, r4, #5920	; 0x1720
 8003184:	4638      	mov	r0, r7
 8003186:	3304      	adds	r3, #4
 8003188:	2201      	movs	r2, #1
 800318a:	2103      	movs	r1, #3
	arm_mat_init_f32(&eskf->m_ref,3,1,eskf->m_ref_data);
 800318c:	f504 55ba 	add.w	r5, r4, #5952	; 0x1740
	arm_mat_init_f32(&eskf->mm_init,3,1,eskf->mm_init_data);
 8003190:	f007 f8da 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->m_ref,3,1,eskf->m_ref_data);
 8003194:	3508      	adds	r5, #8
 8003196:	f504 53ba 	add.w	r3, r4, #5952	; 0x1740
 800319a:	3310      	adds	r3, #16
 800319c:	2201      	movs	r2, #1
 800319e:	2103      	movs	r1, #3
 80031a0:	4628      	mov	r0, r5
 80031a2:	f007 f8d1 	bl	800a348 <arm_mat_init_f32>

	zeros(&eskf->am_init);
 80031a6:	4640      	mov	r0, r8
 80031a8:	f000 fdb2 	bl	8003d10 <zeros>
	zeros(&eskf->mm_init);
 80031ac:	4638      	mov	r0, r7
 80031ae:	f000 fdaf 	bl	8003d10 <zeros>
	zeros(&eskf->m_ref);
 80031b2:	4628      	mov	r0, r5
 80031b4:	f000 fdac 	bl	8003d10 <zeros>

	//time
	eskf->last_t = 0;
 80031b8:	f504 52bb 	add.w	r2, r4, #5984	; 0x1760
 80031bc:	f04f 0800 	mov.w	r8, #0
 80031c0:	f04f 0900 	mov.w	r9, #0

	//AUX variables necessary during computation
	arm_mat_init_f32(&eskf->am_unbias,3,1,eskf->am_unbias_data);
 80031c4:	4613      	mov	r3, r2
 80031c6:	4610      	mov	r0, r2
	eskf->last_t = 0;
 80031c8:	e9c2 8900 	strd	r8, r9, [r2]
	arm_mat_init_f32(&eskf->am_unbias,3,1,eskf->am_unbias_data);
 80031cc:	3310      	adds	r3, #16
 80031ce:	3008      	adds	r0, #8
 80031d0:	2201      	movs	r2, #1
 80031d2:	2103      	movs	r1, #3
 80031d4:	f007 f8b8 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->wm_unbias,3,1,eskf->wm_unbias_data);
 80031d8:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 80031dc:	f504 50bb 	add.w	r0, r4, #5984	; 0x1760
 80031e0:	3304      	adds	r3, #4
 80031e2:	301c      	adds	r0, #28
 80031e4:	2201      	movs	r2, #1
 80031e6:	2103      	movs	r1, #3
 80031e8:	f007 f8ae 	bl	800a348 <arm_mat_init_f32>

	arm_mat_init_f32(&eskf->del_q,4,1,eskf->del_q_data);
 80031ec:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 80031f0:	4618      	mov	r0, r3
 80031f2:	2201      	movs	r2, #1
 80031f4:	3318      	adds	r3, #24
 80031f6:	3010      	adds	r0, #16
 80031f8:	2104      	movs	r1, #4
 80031fa:	f007 f8a5 	bl	800a348 <arm_mat_init_f32>

	arm_mat_init_f32(&eskf->R_hat_am_unbias,3,3,eskf->R_hat_am_unbias_data);
 80031fe:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003202:	2203      	movs	r2, #3
 8003204:	4618      	mov	r0, r3
 8003206:	4611      	mov	r1, r2
 8003208:	3310      	adds	r3, #16
 800320a:	3008      	adds	r0, #8
 800320c:	f007 f89c 	bl	800a348 <arm_mat_init_f32>

	arm_mat_init_f32(&eskf->Fx_T,15,15,eskf->Fx_T_data);
 8003210:	f504 53be 	add.w	r3, r4, #6080	; 0x17c0
 8003214:	220f      	movs	r2, #15
 8003216:	4618      	mov	r0, r3
 8003218:	4611      	mov	r1, r2
 800321a:	331c      	adds	r3, #28
 800321c:	3014      	adds	r0, #20
 800321e:	f007 f893 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->Fx_P,15,15,eskf->Fx_P_data);
 8003222:	220f      	movs	r2, #15
 8003224:	f504 53db 	add.w	r3, r4, #7008	; 0x1b60
 8003228:	e00c      	b.n	8003244 <ESKF_new+0x46c>
 800322a:	bf00      	nop
 800322c:	c11cf5c3 	.word	0xc11cf5c3
 8003230:	42c80000 	.word	0x42c80000
 8003234:	39d1b717 	.word	0x39d1b717
 8003238:	3d23d70a 	.word	0x3d23d70a
 800323c:	3fe7ae14 	.word	0x3fe7ae14
 8003240:	408a3d71 	.word	0x408a3d71
 8003244:	f504 50db 	add.w	r0, r4, #7008	; 0x1b60
 8003248:	4611      	mov	r1, r2
 800324a:	3308      	adds	r3, #8
 800324c:	f007 f87c 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->P_temp,15,15,eskf->P_temp_data);
 8003250:	f504 5312 	add.w	r3, r4, #9344	; 0x2480
 8003254:	220f      	movs	r2, #15
 8003256:	4618      	mov	r0, r3
 8003258:	4611      	mov	r1, r2
 800325a:	3324      	adds	r3, #36	; 0x24
 800325c:	301c      	adds	r0, #28
 800325e:	f007 f873 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->Fi_T,12,15,eskf->Fi_T_data);
 8003262:	f504 53f7 	add.w	r3, r4, #7904	; 0x1ee0
 8003266:	4618      	mov	r0, r3
 8003268:	220f      	movs	r2, #15
 800326a:	3314      	adds	r3, #20
 800326c:	300c      	adds	r0, #12
 800326e:	210c      	movs	r1, #12
 8003270:	f007 f86a 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->Fi_Q,15,12,eskf->Fi_Q_data);
 8003274:	f504 5307 	add.w	r3, r4, #8640	; 0x21c0
 8003278:	4618      	mov	r0, r3
 800327a:	220c      	movs	r2, #12
 800327c:	330c      	adds	r3, #12
 800327e:	3004      	adds	r0, #4
 8003280:	210f      	movs	r1, #15

	//MAG update related variables

	//GPS update related variables
	arm_mat_init_f32(&eskf->H_GPS_T,15,3,eskf->H_GPS_T_data);
 8003282:	f504 5520 	add.w	r5, r4, #10240	; 0x2800
	arm_mat_init_f32(&eskf->Fi_Q,15,12,eskf->Fi_Q_data);
 8003286:	f007 f85f 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->H_GPS_T,15,3,eskf->H_GPS_T_data);
 800328a:	3528      	adds	r5, #40	; 0x28
 800328c:	f504 5320 	add.w	r3, r4, #10240	; 0x2800
 8003290:	4628      	mov	r0, r5
 8003292:	3330      	adds	r3, #48	; 0x30
 8003294:	2203      	movs	r2, #3
 8003296:	210f      	movs	r1, #15
 8003298:	f007 f856 	bl	800a348 <arm_mat_init_f32>
	arm_mat_trans_f32(&eskf->H_GPS,&eskf->H_GPS_T);
 800329c:	4629      	mov	r1, r5
 800329e:	4630      	mov	r0, r6
 80032a0:	f006 fd20 	bl	8009ce4 <arm_mat_trans_f32>

	arm_mat_init_f32(&eskf->COV_GPS,3,3,eskf->COV_GPS_data);
 80032a4:	f504 5323 	add.w	r3, r4, #10432	; 0x28c0
 80032a8:	2203      	movs	r2, #3
 80032aa:	4618      	mov	r0, r3
 80032ac:	4611      	mov	r1, r2
 80032ae:	332c      	adds	r3, #44	; 0x2c
 80032b0:	3024      	adds	r0, #36	; 0x24
 80032b2:	f007 f849 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->inv_COV_GPS,3,3,eskf->inv_COV_GPS_data);
 80032b6:	f504 5324 	add.w	r3, r4, #10496	; 0x2900
 80032ba:	2203      	movs	r2, #3
 80032bc:	4618      	mov	r0, r3
 80032be:	4611      	mov	r1, r2
 80032c0:	3318      	adds	r3, #24
 80032c2:	3010      	adds	r0, #16
 80032c4:	f007 f840 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->P_H_GPS_T,15,3,eskf->P_H_GPS_T_data);
 80032c8:	f504 5325 	add.w	r3, r4, #10560	; 0x2940
 80032cc:	f504 5024 	add.w	r0, r4, #10496	; 0x2900
 80032d0:	3304      	adds	r3, #4
 80032d2:	303c      	adds	r0, #60	; 0x3c
 80032d4:	2203      	movs	r2, #3
 80032d6:	210f      	movs	r1, #15
 80032d8:	f007 f836 	bl	800a348 <arm_mat_init_f32>

	arm_mat_init_f32(&eskf->z_hx_GPS,3,1,eskf->z_hx_GPS_data);
 80032dc:	f504 5027 	add.w	r0, r4, #10688	; 0x29c0
 80032e0:	f504 5328 	add.w	r3, r4, #10752	; 0x2a00
 80032e4:	3038      	adds	r0, #56	; 0x38
 80032e6:	2201      	movs	r2, #1
 80032e8:	2103      	movs	r1, #3
 80032ea:	f007 f82d 	bl	800a348 <arm_mat_init_f32>

	arm_mat_init_f32(&eskf->I_KH_GPS,15,15,eskf->I_KH_GPS_data);
 80032ee:	f504 5328 	add.w	r3, r4, #10752	; 0x2a00
 80032f2:	220f      	movs	r2, #15
 80032f4:	4618      	mov	r0, r3
 80032f6:	4611      	mov	r1, r2
 80032f8:	3314      	adds	r3, #20
 80032fa:	300c      	adds	r0, #12
 80032fc:	f007 f824 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->I_KH_GPS_T,15,15,eskf->I_KH_GPS_T_data);
 8003300:	f504 5336 	add.w	r3, r4, #11648	; 0x2d80
 8003304:	220f      	movs	r2, #15
 8003306:	4618      	mov	r0, r3
 8003308:	4611      	mov	r1, r2
 800330a:	3320      	adds	r3, #32
 800330c:	3018      	adds	r0, #24
 800330e:	f007 f81b 	bl	800a348 <arm_mat_init_f32>

	arm_mat_init_f32(&eskf->KV_GPS,15,3,eskf->KV_GPS_data);
 8003312:	f504 5344 	add.w	r3, r4, #12544	; 0x3100
 8003316:	4618      	mov	r0, r3
 8003318:	2203      	movs	r2, #3
 800331a:	332c      	adds	r3, #44	; 0x2c
 800331c:	3024      	adds	r0, #36	; 0x24
 800331e:	210f      	movs	r1, #15
 8003320:	f007 f812 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->K_GPS_T,3,15,eskf->K_GPS_T_data);
 8003324:	f504 5347 	add.w	r3, r4, #12736	; 0x31c0
 8003328:	4618      	mov	r0, r3
 800332a:	220f      	movs	r2, #15
 800332c:	3328      	adds	r3, #40	; 0x28
 800332e:	3020      	adds	r0, #32
 8003330:	2103      	movs	r1, #3
 8003332:	f007 f809 	bl	800a348 <arm_mat_init_f32>


	//shared between MAG and GPS update
	arm_mat_init_f32(&eskf->del_x,15,1,eskf->del_x_data);
 8003336:	f504 534a 	add.w	r3, r4, #12928	; 0x3280
 800333a:	4618      	mov	r0, r3
 800333c:	2201      	movs	r2, #1
 800333e:	210f      	movs	r1, #15
 8003340:	3324      	adds	r3, #36	; 0x24
 8003342:	301c      	adds	r0, #28
}
 8003344:	b003      	add	sp, #12
 8003346:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	arm_mat_init_f32(&eskf->del_x,15,1,eskf->del_x_data);
 800334a:	f006 bffd 	b.w	800a348 <arm_mat_init_f32>
 800334e:	bf00      	nop

08003350 <inject_error_state>:
}

/**
 * inject error into nominal state, and then reset error state.
 */
void inject_error_state(ESKF_filter* eskf){
 8003350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003354:	4604      	mov	r4, r0
 8003356:	b086      	sub	sp, #24

	arm_matrix_instance_f32 tempquat;
	float32_t tempquat_data[4*1];
	arm_mat_init_f32(&tempquat,4,1,tempquat_data);
 8003358:	4668      	mov	r0, sp
 800335a:	ab02      	add	r3, sp, #8
 800335c:	2201      	movs	r2, #1
 800335e:	2104      	movs	r1, #4
 8003360:	f006 fff2 	bl	800a348 <arm_mat_init_f32>

	//copy data in del_x to corresponding error state
	matslice(&eskf->del_x,&eskf->del_p,0,0);
 8003364:	2300      	movs	r3, #0
 8003366:	f504 554a 	add.w	r5, r4, #12928	; 0x3280
 800336a:	351c      	adds	r5, #28
 800336c:	f104 0aa0 	add.w	sl, r4, #160	; 0xa0
	matslice(&eskf->del_x,&eskf->del_v,3,0);
 8003370:	f104 08b4 	add.w	r8, r4, #180	; 0xb4
	matslice(&eskf->del_x,&eskf->del_p,0,0);
 8003374:	4628      	mov	r0, r5
 8003376:	4651      	mov	r1, sl
 8003378:	461a      	mov	r2, r3
 800337a:	f000 fd1f 	bl	8003dbc <matslice>
	matslice(&eskf->del_x,&eskf->del_theta,6,0);
 800337e:	f104 09c8 	add.w	r9, r4, #200	; 0xc8
	matslice(&eskf->del_x,&eskf->del_v,3,0);
 8003382:	4628      	mov	r0, r5
 8003384:	4641      	mov	r1, r8
 8003386:	2300      	movs	r3, #0
 8003388:	2203      	movs	r2, #3
 800338a:	f000 fd17 	bl	8003dbc <matslice>
	matslice(&eskf->del_x,&eskf->del_ab,9,0);
 800338e:	f104 07dc 	add.w	r7, r4, #220	; 0xdc
	matslice(&eskf->del_x,&eskf->del_theta,6,0);
 8003392:	4628      	mov	r0, r5
 8003394:	4649      	mov	r1, r9
 8003396:	2300      	movs	r3, #0
 8003398:	2206      	movs	r2, #6
 800339a:	f000 fd0f 	bl	8003dbc <matslice>
	matslice(&eskf->del_x,&eskf->del_wb,12,0);
 800339e:	f104 06f0 	add.w	r6, r4, #240	; 0xf0
	matslice(&eskf->del_x,&eskf->del_ab,9,0);
 80033a2:	4628      	mov	r0, r5
 80033a4:	4639      	mov	r1, r7
 80033a6:	2300      	movs	r3, #0
 80033a8:	2209      	movs	r2, #9
 80033aa:	f000 fd07 	bl	8003dbc <matslice>
	matslice(&eskf->del_x,&eskf->del_wb,12,0);
 80033ae:	2300      	movs	r3, #0
 80033b0:	4628      	mov	r0, r5
 80033b2:	4631      	mov	r1, r6
 80033b4:	220c      	movs	r2, #12
 80033b6:	f000 fd01 	bl	8003dbc <matslice>

	//inject error states into nominal states
	arm_mat_add_f32(&eskf->p,&eskf->del_p,&eskf->p);
 80033ba:	f104 020c 	add.w	r2, r4, #12
 80033be:	4651      	mov	r1, sl
 80033c0:	4610      	mov	r0, r2
 80033c2:	f006 ffc5 	bl	800a350 <arm_mat_add_f32>
	arm_mat_add_f32(&eskf->v,&eskf->del_v,&eskf->v);

	quatexp2(&eskf->del_theta,&eskf->del_q);
 80033c6:	f504 55bc 	add.w	r5, r4, #6016	; 0x1780
	arm_mat_add_f32(&eskf->v,&eskf->del_v,&eskf->v);
 80033ca:	f104 0220 	add.w	r2, r4, #32
 80033ce:	4641      	mov	r1, r8
 80033d0:	4610      	mov	r0, r2
	quatexp2(&eskf->del_theta,&eskf->del_q);
 80033d2:	3510      	adds	r5, #16
	arm_mat_add_f32(&eskf->v,&eskf->del_v,&eskf->v);
 80033d4:	f006 ffbc 	bl	800a350 <arm_mat_add_f32>
	otimes(&eskf->q,&eskf->del_q,&tempquat);
 80033d8:	f104 0834 	add.w	r8, r4, #52	; 0x34
	quatexp2(&eskf->del_theta,&eskf->del_q);
 80033dc:	4648      	mov	r0, r9
 80033de:	4629      	mov	r1, r5
 80033e0:	f002 fc2e 	bl	8005c40 <quatexp2>
	otimes(&eskf->q,&eskf->del_q,&tempquat);
 80033e4:	466a      	mov	r2, sp
 80033e6:	4629      	mov	r1, r5
 80033e8:	4640      	mov	r0, r8
 80033ea:	f002 fbe9 	bl	8005bc0 <otimes>
	matcpy(&tempquat,&eskf->q);
 80033ee:	4641      	mov	r1, r8
 80033f0:	4668      	mov	r0, sp
 80033f2:	f000 fcb5 	bl	8003d60 <matcpy>

	arm_mat_add_f32(&eskf->ab,&eskf->del_ab,&eskf->ab);
 80033f6:	f104 0278 	add.w	r2, r4, #120	; 0x78
 80033fa:	4639      	mov	r1, r7
 80033fc:	4610      	mov	r0, r2
 80033fe:	f006 ffa7 	bl	800a350 <arm_mat_add_f32>
	arm_mat_add_f32(&eskf->wb,&eskf->del_wb,&eskf->wb);
 8003402:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 8003406:	4631      	mov	r1, r6
 8003408:	4610      	mov	r0, r2
 800340a:	f006 ffa1 	bl	800a350 <arm_mat_add_f32>

	//no need to reset del_p ~ del_wb to zero, since they always
	//get their value here.
}
 800340e:	b006      	add	sp, #24
 8003410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003414:	0000      	movs	r0, r0
	...

08003418 <lla2xyz>:
}

/**
 * convert lla to ECEF xyz coordinate
 */
void lla2xyz(float32_t lla[3], float32_t xyz[3]){
 8003418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800341c:	4604      	mov	r4, r0
 800341e:	b085      	sub	sp, #20

	float32_t lat = lla[0] / 180.0 * M_PI;//DEG -> RAD
 8003420:	6800      	ldr	r0, [r0, #0]
void lla2xyz(float32_t lla[3], float32_t xyz[3]){
 8003422:	460d      	mov	r5, r1
	float32_t lat = lla[0] / 180.0 * M_PI;//DEG -> RAD
 8003424:	f7fd f800 	bl	8000428 <__aeabi_f2d>
 8003428:	a33d      	add	r3, pc, #244	; (adr r3, 8003520 <lla2xyz+0x108>)
 800342a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342e:	f7fd f853 	bl	80004d8 <__aeabi_dmul>
 8003432:	f7fd fb49 	bl	8000ac8 <__aeabi_d2f>

	float32_t a = 6378137.0;//earth semimajor axis in meters
	//float32_t f = 0.003352810664747;//reciprocal flattening
	float32_t e2 = 0.006694379990141;//eccentricity squared, e2 = 2*f - f^2

	float32_t sin_lat = sin(lat);
 8003436:	f7fc fff7 	bl	8000428 <__aeabi_f2d>
 800343a:	4606      	mov	r6, r0
 800343c:	460f      	mov	r7, r1
 800343e:	f009 fc71 	bl	800cd24 <sin>
 8003442:	f7fd fb41 	bl	8000ac8 <__aeabi_d2f>
	float32_t cos_lat = cos(lat);
 8003446:	4639      	mov	r1, r7
	float32_t sin_lat = sin(lat);
 8003448:	4682      	mov	sl, r0
	float32_t cos_lat = cos(lat);
 800344a:	4630      	mov	r0, r6
 800344c:	f009 fc34 	bl	800ccb8 <cos>
 8003450:	f7fd fb3a 	bl	8000ac8 <__aeabi_d2f>
 8003454:	4683      	mov	fp, r0
	float32_t lon = lla[1] / 180.0 * M_PI;
 8003456:	6860      	ldr	r0, [r4, #4]
 8003458:	f7fc ffe6 	bl	8000428 <__aeabi_f2d>
 800345c:	a330      	add	r3, pc, #192	; (adr r3, 8003520 <lla2xyz+0x108>)
 800345e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003462:	f7fd f839 	bl	80004d8 <__aeabi_dmul>
 8003466:	f7fd fb2f 	bl	8000ac8 <__aeabi_d2f>
	float32_t sin_lon = sin(lon);
 800346a:	f7fc ffdd 	bl	8000428 <__aeabi_f2d>
 800346e:	4680      	mov	r8, r0
 8003470:	4689      	mov	r9, r1
 8003472:	f009 fc57 	bl	800cd24 <sin>
 8003476:	4606      	mov	r6, r0
 8003478:	460f      	mov	r7, r1
	float32_t cos_lon = cos(lon);
 800347a:	4640      	mov	r0, r8
 800347c:	4649      	mov	r1, r9
 800347e:	f009 fc1b 	bl	800ccb8 <cos>
 8003482:	4680      	mov	r8, r0
 8003484:	4689      	mov	r9, r1

	float32_t chi = sqrt(1-e2 * sin_lat * sin_lat);
 8003486:	4650      	mov	r0, sl
 8003488:	4651      	mov	r1, sl
 800348a:	f7fd fc7b 	bl	8000d84 <__aeabi_fmul>
 800348e:	4926      	ldr	r1, [pc, #152]	; (8003528 <lla2xyz+0x110>)
 8003490:	f7fd fc78 	bl	8000d84 <__aeabi_fmul>
 8003494:	4601      	mov	r1, r0
 8003496:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800349a:	f7fd fb69 	bl	8000b70 <__aeabi_fsub>
 800349e:	f7fc ffc3 	bl	8000428 <__aeabi_f2d>
 80034a2:	f009 fcd5 	bl	800ce50 <sqrt>
 80034a6:	f7fd fb0f 	bl	8000ac8 <__aeabi_d2f>
 80034aa:	4601      	mov	r1, r0
 80034ac:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80034b0:	f7fd fd1c 	bl	8000eec <__aeabi_fdiv>

	xyz[0] = (a / chi + lla[2]) * cos_lat * cos_lon;
 80034b4:	491d      	ldr	r1, [pc, #116]	; (800352c <lla2xyz+0x114>)
 80034b6:	9001      	str	r0, [sp, #4]
 80034b8:	f7fd fc64 	bl	8000d84 <__aeabi_fmul>
 80034bc:	68a1      	ldr	r1, [r4, #8]
 80034be:	9003      	str	r0, [sp, #12]
 80034c0:	f7fd fb58 	bl	8000b74 <__addsf3>
	float32_t cos_lon = cos(lon);
 80034c4:	4649      	mov	r1, r9
	xyz[0] = (a / chi + lla[2]) * cos_lat * cos_lon;
 80034c6:	9002      	str	r0, [sp, #8]
	float32_t cos_lon = cos(lon);
 80034c8:	4640      	mov	r0, r8
 80034ca:	f7fd fafd 	bl	8000ac8 <__aeabi_d2f>
	xyz[0] = (a / chi + lla[2]) * cos_lat * cos_lon;
 80034ce:	4659      	mov	r1, fp
 80034d0:	f7fd fc58 	bl	8000d84 <__aeabi_fmul>
 80034d4:	9a02      	ldr	r2, [sp, #8]
 80034d6:	4601      	mov	r1, r0
 80034d8:	4610      	mov	r0, r2
 80034da:	f7fd fc53 	bl	8000d84 <__aeabi_fmul>
 80034de:	6028      	str	r0, [r5, #0]
	xyz[1] = (a / chi + lla[2]) * cos_lat * sin_lon;
 80034e0:	68a1      	ldr	r1, [r4, #8]
 80034e2:	9b03      	ldr	r3, [sp, #12]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fd fb45 	bl	8000b74 <__addsf3>
	float32_t sin_lon = sin(lon);
 80034ea:	4639      	mov	r1, r7
	xyz[1] = (a / chi + lla[2]) * cos_lat * sin_lon;
 80034ec:	4680      	mov	r8, r0
	float32_t sin_lon = sin(lon);
 80034ee:	4630      	mov	r0, r6
 80034f0:	f7fd faea 	bl	8000ac8 <__aeabi_d2f>
	xyz[1] = (a / chi + lla[2]) * cos_lat * sin_lon;
 80034f4:	4659      	mov	r1, fp
 80034f6:	f7fd fc45 	bl	8000d84 <__aeabi_fmul>
 80034fa:	4601      	mov	r1, r0
 80034fc:	4640      	mov	r0, r8
 80034fe:	f7fd fc41 	bl	8000d84 <__aeabi_fmul>
	xyz[2] = (a * (1-e2) / chi + lla[2]) * sin_lat;
 8003502:	490b      	ldr	r1, [pc, #44]	; (8003530 <lla2xyz+0x118>)
	xyz[1] = (a / chi + lla[2]) * cos_lat * sin_lon;
 8003504:	6068      	str	r0, [r5, #4]
	xyz[2] = (a * (1-e2) / chi + lla[2]) * sin_lat;
 8003506:	9801      	ldr	r0, [sp, #4]
 8003508:	f7fd fc3c 	bl	8000d84 <__aeabi_fmul>
 800350c:	68a1      	ldr	r1, [r4, #8]
 800350e:	f7fd fb31 	bl	8000b74 <__addsf3>
 8003512:	4651      	mov	r1, sl
 8003514:	f7fd fc36 	bl	8000d84 <__aeabi_fmul>
 8003518:	60a8      	str	r0, [r5, #8]
}
 800351a:	b005      	add	sp, #20
 800351c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003520:	a2529d39 	.word	0xa2529d39
 8003524:	3f91df46 	.word	0x3f91df46
 8003528:	3bdb5c88 	.word	0x3bdb5c88
 800352c:	4ac2a532 	.word	0x4ac2a532
 8003530:	4ac1579f 	.word	0x4ac1579f
 8003534:	00000000 	.word	0x00000000

08003538 <lla2enu>:
void lla2enu(float32_t lla_ref[3], float32_t lla[3], float32_t enu[3]){
 8003538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800353c:	460d      	mov	r5, r1
 800353e:	4606      	mov	r6, r0
 8003540:	b089      	sub	sp, #36	; 0x24
	lla2xyz(lla_ref,xyz_ref);
 8003542:	a902      	add	r1, sp, #8
void lla2enu(float32_t lla_ref[3], float32_t lla[3], float32_t enu[3]){
 8003544:	4614      	mov	r4, r2
	lla2xyz(lla_ref,xyz_ref);
 8003546:	f7ff ff67 	bl	8003418 <lla2xyz>
	lla2xyz(lla,xyz);
 800354a:	4628      	mov	r0, r5
 800354c:	a905      	add	r1, sp, #20
 800354e:	f7ff ff63 	bl	8003418 <lla2xyz>
	float32_t lat_ref = lla_ref[0] / 180.0 * M_PI;
 8003552:	6830      	ldr	r0, [r6, #0]
 8003554:	f7fc ff68 	bl	8000428 <__aeabi_f2d>
 8003558:	a345      	add	r3, pc, #276	; (adr r3, 8003670 <lla2enu+0x138>)
 800355a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355e:	f7fc ffbb 	bl	80004d8 <__aeabi_dmul>
 8003562:	f7fd fab1 	bl	8000ac8 <__aeabi_d2f>
	float32_t sin_lat_ref = sin(lat_ref);
 8003566:	f7fc ff5f 	bl	8000428 <__aeabi_f2d>
 800356a:	4680      	mov	r8, r0
 800356c:	4689      	mov	r9, r1
 800356e:	f009 fbd9 	bl	800cd24 <sin>
 8003572:	f7fd faa9 	bl	8000ac8 <__aeabi_d2f>
	float32_t cos_lat_ref = cos(lat_ref);
 8003576:	4649      	mov	r1, r9
	float32_t sin_lat_ref = sin(lat_ref);
 8003578:	4605      	mov	r5, r0
	float32_t cos_lat_ref = cos(lat_ref);
 800357a:	4640      	mov	r0, r8
 800357c:	f009 fb9c 	bl	800ccb8 <cos>
 8003580:	f7fd faa2 	bl	8000ac8 <__aeabi_d2f>
 8003584:	4681      	mov	r9, r0
	float32_t lon_ref = lla_ref[1] / 180.0 * M_PI;
 8003586:	6870      	ldr	r0, [r6, #4]
 8003588:	f7fc ff4e 	bl	8000428 <__aeabi_f2d>
 800358c:	a338      	add	r3, pc, #224	; (adr r3, 8003670 <lla2enu+0x138>)
 800358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003592:	f7fc ffa1 	bl	80004d8 <__aeabi_dmul>
 8003596:	f7fd fa97 	bl	8000ac8 <__aeabi_d2f>
	float32_t sin_lon_ref = sin(lon_ref);
 800359a:	f7fc ff45 	bl	8000428 <__aeabi_f2d>
 800359e:	4606      	mov	r6, r0
 80035a0:	460f      	mov	r7, r1
 80035a2:	f009 fbbf 	bl	800cd24 <sin>
 80035a6:	f7fd fa8f 	bl	8000ac8 <__aeabi_d2f>
	float32_t cos_lon_ref = cos(lon_ref);
 80035aa:	4639      	mov	r1, r7
	float32_t sin_lon_ref = sin(lon_ref);
 80035ac:	4680      	mov	r8, r0
	float32_t cos_lon_ref = cos(lon_ref);
 80035ae:	4630      	mov	r0, r6
 80035b0:	f009 fb82 	bl	800ccb8 <cos>
 80035b4:	f7fd fa88 	bl	8000ac8 <__aeabi_d2f>
	float32_t dx = xyz[0] - xyz_ref[0];
 80035b8:	9902      	ldr	r1, [sp, #8]
	float32_t cos_lon_ref = cos(lon_ref);
 80035ba:	4606      	mov	r6, r0
	float32_t dx = xyz[0] - xyz_ref[0];
 80035bc:	9805      	ldr	r0, [sp, #20]
 80035be:	f7fd fad7 	bl	8000b70 <__aeabi_fsub>
	float32_t dy = xyz[1] - xyz_ref[1];
 80035c2:	9903      	ldr	r1, [sp, #12]
	float32_t dx = xyz[0] - xyz_ref[0];
 80035c4:	4607      	mov	r7, r0
	float32_t dy = xyz[1] - xyz_ref[1];
 80035c6:	9806      	ldr	r0, [sp, #24]
 80035c8:	f7fd fad2 	bl	8000b70 <__aeabi_fsub>
	float32_t dz = xyz[2] - xyz_ref[2];
 80035cc:	9904      	ldr	r1, [sp, #16]
	float32_t dy = xyz[1] - xyz_ref[1];
 80035ce:	4682      	mov	sl, r0
	float32_t dz = xyz[2] - xyz_ref[2];
 80035d0:	9807      	ldr	r0, [sp, #28]
 80035d2:	f7fd facd 	bl	8000b70 <__aeabi_fsub>
	enu[0] = -sin_lon_ref * dx + cos_lon_ref * dy;
 80035d6:	4651      	mov	r1, sl
	float32_t dz = xyz[2] - xyz_ref[2];
 80035d8:	4683      	mov	fp, r0
	enu[0] = -sin_lon_ref * dx + cos_lon_ref * dy;
 80035da:	4630      	mov	r0, r6
 80035dc:	f7fd fbd2 	bl	8000d84 <__aeabi_fmul>
 80035e0:	4639      	mov	r1, r7
 80035e2:	9000      	str	r0, [sp, #0]
 80035e4:	4640      	mov	r0, r8
 80035e6:	f7fd fbcd 	bl	8000d84 <__aeabi_fmul>
 80035ea:	9b00      	ldr	r3, [sp, #0]
 80035ec:	4601      	mov	r1, r0
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fd fabe 	bl	8000b70 <__aeabi_fsub>
	enu[1] = -sin_lat_ref*cos_lon_ref*dx - sin_lat_ref*sin_lon_ref*dy + cos_lat_ref * dz;
 80035f4:	4659      	mov	r1, fp
	enu[0] = -sin_lon_ref * dx + cos_lon_ref * dy;
 80035f6:	6020      	str	r0, [r4, #0]
	enu[1] = -sin_lat_ref*cos_lon_ref*dx - sin_lat_ref*sin_lon_ref*dy + cos_lat_ref * dz;
 80035f8:	4648      	mov	r0, r9
 80035fa:	f7fd fbc3 	bl	8000d84 <__aeabi_fmul>
 80035fe:	4641      	mov	r1, r8
 8003600:	9001      	str	r0, [sp, #4]
 8003602:	4628      	mov	r0, r5
 8003604:	f7fd fbbe 	bl	8000d84 <__aeabi_fmul>
 8003608:	4651      	mov	r1, sl
 800360a:	f7fd fbbb 	bl	8000d84 <__aeabi_fmul>
 800360e:	4631      	mov	r1, r6
 8003610:	9000      	str	r0, [sp, #0]
 8003612:	4628      	mov	r0, r5
 8003614:	f7fd fbb6 	bl	8000d84 <__aeabi_fmul>
 8003618:	4639      	mov	r1, r7
 800361a:	f7fd fbb3 	bl	8000d84 <__aeabi_fmul>
 800361e:	9a00      	ldr	r2, [sp, #0]
 8003620:	4601      	mov	r1, r0
 8003622:	4610      	mov	r0, r2
 8003624:	f7fd faa6 	bl	8000b74 <__addsf3>
 8003628:	9b01      	ldr	r3, [sp, #4]
 800362a:	4601      	mov	r1, r0
 800362c:	4618      	mov	r0, r3
 800362e:	f7fd fa9f 	bl	8000b70 <__aeabi_fsub>
	enu[2] = cos_lat_ref*cos_lon_ref*dx + cos_lat_ref*sin_lon_ref*dy + sin_lat_ref * dz;
 8003632:	4651      	mov	r1, sl
	enu[1] = -sin_lat_ref*cos_lon_ref*dx - sin_lat_ref*sin_lon_ref*dy + cos_lat_ref * dz;
 8003634:	6060      	str	r0, [r4, #4]
	enu[2] = cos_lat_ref*cos_lon_ref*dx + cos_lat_ref*sin_lon_ref*dy + sin_lat_ref * dz;
 8003636:	4640      	mov	r0, r8
 8003638:	f7fd fba4 	bl	8000d84 <__aeabi_fmul>
 800363c:	4639      	mov	r1, r7
 800363e:	4680      	mov	r8, r0
 8003640:	4630      	mov	r0, r6
 8003642:	f7fd fb9f 	bl	8000d84 <__aeabi_fmul>
 8003646:	4601      	mov	r1, r0
 8003648:	4640      	mov	r0, r8
 800364a:	f7fd fa93 	bl	8000b74 <__addsf3>
 800364e:	4649      	mov	r1, r9
 8003650:	f7fd fb98 	bl	8000d84 <__aeabi_fmul>
 8003654:	4659      	mov	r1, fp
 8003656:	4606      	mov	r6, r0
 8003658:	4628      	mov	r0, r5
 800365a:	f7fd fb93 	bl	8000d84 <__aeabi_fmul>
 800365e:	4601      	mov	r1, r0
 8003660:	4630      	mov	r0, r6
 8003662:	f7fd fa87 	bl	8000b74 <__addsf3>
 8003666:	60a0      	str	r0, [r4, #8]
}
 8003668:	b009      	add	sp, #36	; 0x24
 800366a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800366e:	bf00      	nop
 8003670:	a2529d39 	.word	0xa2529d39
 8003674:	3f91df46 	.word	0x3f91df46

08003678 <ESKF_update>:
void ESKF_update(ESKF_filter* eskf, double t, float32_t am[3], float32_t wm[3], float32_t mm[3], float32_t lla[3], int info){
 8003678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800367c:	b0a1      	sub	sp, #132	; 0x84
 800367e:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 8003680:	4604      	mov	r4, r0
	double mm_norm = sqrt(mm[0]*mm[0] + mm[1]*mm[1] + mm[2]*mm[2]);
 8003682:	f8d5 b000 	ldr.w	fp, [r5]
void ESKF_update(ESKF_filter* eskf, double t, float32_t am[3], float32_t wm[3], float32_t mm[3], float32_t lla[3], int info){
 8003686:	e9cd 2300 	strd	r2, r3, [sp]
	double mm_norm = sqrt(mm[0]*mm[0] + mm[1]*mm[1] + mm[2]*mm[2]);
 800368a:	4659      	mov	r1, fp
 800368c:	4658      	mov	r0, fp
 800368e:	f7fd fb79 	bl	8000d84 <__aeabi_fmul>
 8003692:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8003696:	4606      	mov	r6, r0
 8003698:	4651      	mov	r1, sl
 800369a:	4650      	mov	r0, sl
 800369c:	f7fd fb72 	bl	8000d84 <__aeabi_fmul>
 80036a0:	4601      	mov	r1, r0
 80036a2:	4630      	mov	r0, r6
 80036a4:	f7fd fa66 	bl	8000b74 <__addsf3>
 80036a8:	68af      	ldr	r7, [r5, #8]
 80036aa:	4606      	mov	r6, r0
 80036ac:	4639      	mov	r1, r7
 80036ae:	4638      	mov	r0, r7
 80036b0:	f7fd fb68 	bl	8000d84 <__aeabi_fmul>
 80036b4:	4601      	mov	r1, r0
 80036b6:	4630      	mov	r0, r6
 80036b8:	f7fd fa5c 	bl	8000b74 <__addsf3>
 80036bc:	4606      	mov	r6, r0
 80036be:	f7fc feb3 	bl	8000428 <__aeabi_f2d>
 80036c2:	f009 fbc5 	bl	800ce50 <sqrt>
	float32_t* Q = eskf->Q.pData;
 80036c6:	f8d4 3494 	ldr.w	r3, [r4, #1172]	; 0x494
	double mm_norm = sqrt(mm[0]*mm[0] + mm[1]*mm[1] + mm[2]*mm[2]);
 80036ca:	4680      	mov	r8, r0
 80036cc:	4689      	mov	r9, r1
	if (mm_norm != 0){
 80036ce:	4630      	mov	r0, r6
 80036d0:	2100      	movs	r1, #0
	float32_t* Q = eskf->Q.pData;
 80036d2:	9302      	str	r3, [sp, #8]
void ESKF_update(ESKF_filter* eskf, double t, float32_t am[3], float32_t wm[3], float32_t mm[3], float32_t lla[3], int info){
 80036d4:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
	if (mm_norm != 0){
 80036d6:	f7fd fce9 	bl	80010ac <__aeabi_fcmpeq>
 80036da:	bb28      	cbnz	r0, 8003728 <ESKF_update+0xb0>
 80036dc:	4642      	mov	r2, r8
 80036de:	464b      	mov	r3, r9
 80036e0:	2000      	movs	r0, #0
 80036e2:	49ab      	ldr	r1, [pc, #684]	; (8003990 <ESKF_update+0x318>)
 80036e4:	f7fd f822 	bl	800072c <__aeabi_ddiv>
 80036e8:	4680      	mov	r8, r0
 80036ea:	4689      	mov	r9, r1
		mm[0] = mm[0] / mm_norm;
 80036ec:	4658      	mov	r0, fp
 80036ee:	f7fc fe9b 	bl	8000428 <__aeabi_f2d>
 80036f2:	4642      	mov	r2, r8
 80036f4:	464b      	mov	r3, r9
 80036f6:	f7fc feef 	bl	80004d8 <__aeabi_dmul>
 80036fa:	f7fd f9e5 	bl	8000ac8 <__aeabi_d2f>
 80036fe:	6028      	str	r0, [r5, #0]
		mm[1] = mm[1] / mm_norm;
 8003700:	4650      	mov	r0, sl
 8003702:	f7fc fe91 	bl	8000428 <__aeabi_f2d>
 8003706:	4642      	mov	r2, r8
 8003708:	464b      	mov	r3, r9
 800370a:	f7fc fee5 	bl	80004d8 <__aeabi_dmul>
 800370e:	f7fd f9db 	bl	8000ac8 <__aeabi_d2f>
 8003712:	6068      	str	r0, [r5, #4]
		mm[2] = mm[2] / mm_norm;
 8003714:	4638      	mov	r0, r7
 8003716:	f7fc fe87 	bl	8000428 <__aeabi_f2d>
 800371a:	4642      	mov	r2, r8
 800371c:	464b      	mov	r3, r9
 800371e:	f7fc fedb 	bl	80004d8 <__aeabi_dmul>
 8003722:	f7fd f9d1 	bl	8000ac8 <__aeabi_d2f>
 8003726:	60a8      	str	r0, [r5, #8]
	memcpy(eskf->am.pData,am,3*sizeof(float32_t));
 8003728:	f241 03b0 	movw	r3, #4272	; 0x10b0
	memcpy(eskf->wm.pData,wm,3*sizeof(float32_t));
 800372c:	f241 01c4 	movw	r1, #4292	; 0x10c4
	memcpy(eskf->mm.pData,mm,3*sizeof(float32_t));
 8003730:	f241 02d8 	movw	r2, #4312	; 0x10d8
	memcpy(eskf->am.pData,am,3*sizeof(float32_t));
 8003734:	68b0      	ldr	r0, [r6, #8]
 8003736:	58e3      	ldr	r3, [r4, r3]
 8003738:	f8d6 c000 	ldr.w	ip, [r6]
 800373c:	6877      	ldr	r7, [r6, #4]
 800373e:	f8c3 c000 	str.w	ip, [r3]
 8003742:	605f      	str	r7, [r3, #4]
 8003744:	6098      	str	r0, [r3, #8]
	memcpy(eskf->wm.pData,wm,3*sizeof(float32_t));
 8003746:	5863      	ldr	r3, [r4, r1]
 8003748:	992b      	ldr	r1, [sp, #172]	; 0xac
 800374a:	6848      	ldr	r0, [r1, #4]
 800374c:	680e      	ldr	r6, [r1, #0]
 800374e:	6889      	ldr	r1, [r1, #8]
 8003750:	601e      	str	r6, [r3, #0]
 8003752:	6058      	str	r0, [r3, #4]
 8003754:	6099      	str	r1, [r3, #8]
	memcpy(eskf->mm.pData,mm,3*sizeof(float32_t));
 8003756:	58a3      	ldr	r3, [r4, r2]
 8003758:	6828      	ldr	r0, [r5, #0]
 800375a:	6869      	ldr	r1, [r5, #4]
 800375c:	68aa      	ldr	r2, [r5, #8]
 800375e:	6018      	str	r0, [r3, #0]
 8003760:	6059      	str	r1, [r3, #4]
 8003762:	609a      	str	r2, [r3, #8]
	if (eskf->IMU_initialized == 0 || eskf->MAG_initialized == 0 || eskf->GPS_initialized == 0){
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	b1f3      	cbz	r3, 80037a6 <ESKF_update+0x12e>
 8003768:	6863      	ldr	r3, [r4, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d16f      	bne.n	800384e <ESKF_update+0x1d6>
		if (info == 1 && eskf->IMU_initialized == 0){
 800376e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8003770:	2b01      	cmp	r3, #1
 8003772:	d00f      	beq.n	8003794 <ESKF_update+0x11c>
		if (info == 2 && eskf->MAG_initialized == 0){
 8003774:	2b02      	cmp	r3, #2
 8003776:	d12b      	bne.n	80037d0 <ESKF_update+0x158>
 8003778:	6863      	ldr	r3, [r4, #4]
 800377a:	b95b      	cbnz	r3, 8003794 <ESKF_update+0x11c>
			if (eskf->MAG_init_count < MAG_INITIALIZE_COUNT){
 800377c:	f504 55b8 	add.w	r5, r4, #5888	; 0x1700
 8003780:	682b      	ldr	r3, [r5, #0]
 8003782:	2b09      	cmp	r3, #9
 8003784:	f340 8152 	ble.w	8003a2c <ESKF_update+0x3b4>
			if (eskf->MAG_init_count == MAG_INITIALIZE_COUNT && eskf->IMU_initialized == 1){
 8003788:	2b0a      	cmp	r3, #10
 800378a:	d103      	bne.n	8003794 <ESKF_update+0x11c>
 800378c:	6825      	ldr	r5, [r4, #0]
 800378e:	2d01      	cmp	r5, #1
 8003790:	f000 8104 	beq.w	800399c <ESKF_update+0x324>
		eskf->last_t = t;
 8003794:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003798:	f504 54bb 	add.w	r4, r4, #5984	; 0x1760
 800379c:	e9c4 2300 	strd	r2, r3, [r4]
}
 80037a0:	b021      	add	sp, #132	; 0x84
 80037a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (info == 1 && eskf->IMU_initialized == 0){
 80037a6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d1e3      	bne.n	8003774 <ESKF_update+0xfc>
			if (eskf->IMU_init_count < IMU_INITIALIZE_COUNT){
 80037ac:	f241 65fc 	movw	r5, #5884	; 0x16fc
 80037b0:	5963      	ldr	r3, [r4, r5]
 80037b2:	2b09      	cmp	r3, #9
 80037b4:	f340 8146 	ble.w	8003a44 <ESKF_update+0x3cc>
			if (eskf->IMU_init_count == IMU_INITIALIZE_COUNT){
 80037b8:	2b0a      	cmp	r3, #10
 80037ba:	d1eb      	bne.n	8003794 <ESKF_update+0x11c>
				arm_mat_scale_f32(&eskf->am_init,1.0/IMU_INITIALIZE_COUNT,&eskf->am_init);
 80037bc:	f504 52b8 	add.w	r2, r4, #5888	; 0x1700
 80037c0:	3208      	adds	r2, #8
 80037c2:	4610      	mov	r0, r2
 80037c4:	4973      	ldr	r1, [pc, #460]	; (8003994 <ESKF_update+0x31c>)
 80037c6:	f006 fb57 	bl	8009e78 <arm_mat_scale_f32>
				eskf->IMU_initialized = 1;
 80037ca:	2301      	movs	r3, #1
 80037cc:	6023      	str	r3, [r4, #0]
 80037ce:	e7e1      	b.n	8003794 <ESKF_update+0x11c>
		if (info == 3 && eskf->GPS_initialized == 0){
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d1df      	bne.n	8003794 <ESKF_update+0x11c>
 80037d4:	68a3      	ldr	r3, [r4, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1dc      	bne.n	8003794 <ESKF_update+0x11c>
			eskf->lla_init[0] += lla[0];
 80037da:	f241 7530 	movw	r5, #5936	; 0x1730
 80037de:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80037e0:	5960      	ldr	r0, [r4, r5]
 80037e2:	6819      	ldr	r1, [r3, #0]
 80037e4:	f7fd f9c6 	bl	8000b74 <__addsf3>
			eskf->lla_init[1] += lla[1];
 80037e8:	f241 7734 	movw	r7, #5940	; 0x1734
 80037ec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
			eskf->lla_init[0] += lla[0];
 80037ee:	5160      	str	r0, [r4, r5]
			eskf->lla_init[1] += lla[1];
 80037f0:	6859      	ldr	r1, [r3, #4]
			eskf->lla_init[0] += lla[0];
 80037f2:	4680      	mov	r8, r0
			eskf->lla_init[1] += lla[1];
 80037f4:	59e0      	ldr	r0, [r4, r7]
 80037f6:	f7fd f9bd 	bl	8000b74 <__addsf3>
			eskf->lla_init[2] += lla[2];
 80037fa:	f241 7538 	movw	r5, #5944	; 0x1738
 80037fe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
			eskf->lla_init[1] += lla[1];
 8003800:	51e0      	str	r0, [r4, r7]
			eskf->lla_init[2] += lla[2];
 8003802:	6899      	ldr	r1, [r3, #8]
			eskf->lla_init[1] += lla[1];
 8003804:	4606      	mov	r6, r0
			eskf->lla_init[2] += lla[2];
 8003806:	5960      	ldr	r0, [r4, r5]
 8003808:	f7fd f9b4 	bl	8000b74 <__addsf3>
			eskf->GPS_init_count++;
 800380c:	f241 7204 	movw	r2, #5892	; 0x1704
 8003810:	58a3      	ldr	r3, [r4, r2]
			eskf->lla_init[2] += lla[2];
 8003812:	4607      	mov	r7, r0
			eskf->GPS_init_count++;
 8003814:	3301      	adds	r3, #1
			if (eskf->GPS_init_count == GPS_INITIALIZE_COUNT){
 8003816:	2b0a      	cmp	r3, #10
			eskf->lla_init[2] += lla[2];
 8003818:	5160      	str	r0, [r4, r5]
			eskf->GPS_init_count++;
 800381a:	50a3      	str	r3, [r4, r2]
			if (eskf->GPS_init_count == GPS_INITIALIZE_COUNT){
 800381c:	d1ba      	bne.n	8003794 <ESKF_update+0x11c>
				eskf->lla_origin[0] = eskf->lla_init[0] / GPS_INITIALIZE_COUNT;
 800381e:	495d      	ldr	r1, [pc, #372]	; (8003994 <ESKF_update+0x31c>)
 8003820:	4640      	mov	r0, r8
 8003822:	f7fd faaf 	bl	8000d84 <__aeabi_fmul>
 8003826:	f241 733c 	movw	r3, #5948	; 0x173c
				eskf->lla_origin[1] = eskf->lla_init[1] / GPS_INITIALIZE_COUNT;
 800382a:	495a      	ldr	r1, [pc, #360]	; (8003994 <ESKF_update+0x31c>)
				eskf->lla_origin[0] = eskf->lla_init[0] / GPS_INITIALIZE_COUNT;
 800382c:	50e0      	str	r0, [r4, r3]
				eskf->lla_origin[1] = eskf->lla_init[1] / GPS_INITIALIZE_COUNT;
 800382e:	4630      	mov	r0, r6
 8003830:	f7fd faa8 	bl	8000d84 <__aeabi_fmul>
 8003834:	f504 53ba 	add.w	r3, r4, #5952	; 0x1740
 8003838:	6018      	str	r0, [r3, #0]
				eskf->lla_origin[2] = eskf->lla_init[2] / GPS_INITIALIZE_COUNT;
 800383a:	4956      	ldr	r1, [pc, #344]	; (8003994 <ESKF_update+0x31c>)
 800383c:	4638      	mov	r0, r7
 800383e:	f7fd faa1 	bl	8000d84 <__aeabi_fmul>
 8003842:	f241 7244 	movw	r2, #5956	; 0x1744
				eskf->GPS_initialized = 1;
 8003846:	2301      	movs	r3, #1
				eskf->lla_origin[2] = eskf->lla_init[2] / GPS_INITIALIZE_COUNT;
 8003848:	50a0      	str	r0, [r4, r2]
				eskf->GPS_initialized = 1;
 800384a:	60a3      	str	r3, [r4, #8]
 800384c:	e7a2      	b.n	8003794 <ESKF_update+0x11c>
	if (eskf->IMU_initialized == 0 || eskf->MAG_initialized == 0 || eskf->GPS_initialized == 0){
 800384e:	68a3      	ldr	r3, [r4, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d08c      	beq.n	800376e <ESKF_update+0xf6>
	if (info == 1){
 8003854:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8003856:	2b01      	cmp	r3, #1
 8003858:	f000 8101 	beq.w	8003a5e <ESKF_update+0x3e6>
	if (info == 3){
 800385c:	2b03      	cmp	r3, #3
 800385e:	d19f      	bne.n	80037a0 <ESKF_update+0x128>
		lla2enu(eskf->lla_origin,lla,eskf->z_GPS_data);
 8003860:	f504 50b9 	add.w	r0, r4, #5920	; 0x1720
 8003864:	f604 529c 	addw	r2, r4, #3484	; 0xd9c
 8003868:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800386a:	301c      	adds	r0, #28
 800386c:	f7ff fe64 	bl	8003538 <lla2enu>
		matslice(&eskf->P,&eskf->COV_GPS,0,0);
 8003870:	2300      	movs	r3, #0
 8003872:	f504 5523 	add.w	r5, r4, #10432	; 0x28c0
 8003876:	f504 7782 	add.w	r7, r4, #260	; 0x104
 800387a:	3524      	adds	r5, #36	; 0x24
 800387c:	461a      	mov	r2, r3
 800387e:	4629      	mov	r1, r5
 8003880:	4638      	mov	r0, r7
		arm_mat_add_f32(&eskf->COV_GPS,&eskf->V_GPS,&eskf->COV_GPS);
 8003882:	f504 69db 	add.w	r9, r4, #1752	; 0x6d8
		arm_mat_inverse_f32(&eskf->COV_GPS,&eskf->inv_COV_GPS);
 8003886:	f504 5b24 	add.w	fp, r4, #10496	; 0x2900
		matslice(&eskf->P,&eskf->COV_GPS,0,0);
 800388a:	f000 fa97 	bl	8003dbc <matslice>
		arm_mat_inverse_f32(&eskf->COV_GPS,&eskf->inv_COV_GPS);
 800388e:	f10b 0b10 	add.w	fp, fp, #16
		arm_mat_add_f32(&eskf->COV_GPS,&eskf->V_GPS,&eskf->COV_GPS);
 8003892:	462a      	mov	r2, r5
 8003894:	4649      	mov	r1, r9
 8003896:	4628      	mov	r0, r5
 8003898:	f006 fd5a 	bl	800a350 <arm_mat_add_f32>
		arm_mat_mult_f32(&eskf->P,&eskf->H_GPS_T,&eskf->P_H_GPS_T);
 800389c:	f504 5a24 	add.w	sl, r4, #10496	; 0x2900
		arm_mat_inverse_f32(&eskf->COV_GPS,&eskf->inv_COV_GPS);
 80038a0:	4659      	mov	r1, fp
 80038a2:	4628      	mov	r0, r5
 80038a4:	f006 fbfe 	bl	800a0a4 <arm_mat_inverse_f32>
		arm_mat_mult_f32(&eskf->P,&eskf->H_GPS_T,&eskf->P_H_GPS_T);
 80038a8:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
 80038ac:	f504 5120 	add.w	r1, r4, #10240	; 0x2800
		arm_mat_mult_f32(&eskf->P_H_GPS_T,&eskf->inv_COV_GPS,&eskf->K_GPS);
 80038b0:	f604 7834 	addw	r8, r4, #3892	; 0xf34
		arm_mat_mult_f32(&eskf->P,&eskf->H_GPS_T,&eskf->P_H_GPS_T);
 80038b4:	4652      	mov	r2, sl
 80038b6:	4638      	mov	r0, r7
 80038b8:	3128      	adds	r1, #40	; 0x28
		arm_mat_sub_f32(&eskf->z_GPS,&eskf->p,&eskf->z_hx_GPS);
 80038ba:	f504 5627 	add.w	r6, r4, #10688	; 0x29c0
		arm_mat_mult_f32(&eskf->P,&eskf->H_GPS_T,&eskf->P_H_GPS_T);
 80038be:	f006 fb3d 	bl	8009f3c <arm_mat_mult_f32>
		arm_mat_sub_f32(&eskf->z_GPS,&eskf->p,&eskf->z_hx_GPS);
 80038c2:	3638      	adds	r6, #56	; 0x38
		arm_mat_mult_f32(&eskf->P_H_GPS_T,&eskf->inv_COV_GPS,&eskf->K_GPS);
 80038c4:	4659      	mov	r1, fp
 80038c6:	4642      	mov	r2, r8
 80038c8:	4650      	mov	r0, sl
 80038ca:	f006 fb37 	bl	8009f3c <arm_mat_mult_f32>
		arm_mat_sub_f32(&eskf->z_GPS,&eskf->p,&eskf->z_hx_GPS);
 80038ce:	4632      	mov	r2, r6
 80038d0:	f104 010c 	add.w	r1, r4, #12
 80038d4:	f604 5094 	addw	r0, r4, #3476	; 0xd94
 80038d8:	f006 fa5c 	bl	8009d94 <arm_mat_sub_f32>
		zeros(&eskf->I_KH_GPS);
 80038dc:	f504 5528 	add.w	r5, r4, #10752	; 0x2a00
		arm_mat_mult_f32(&eskf->K_GPS,&eskf->z_hx_GPS,&eskf->del_x);
 80038e0:	f504 524a 	add.w	r2, r4, #12928	; 0x3280
		zeros(&eskf->I_KH_GPS);
 80038e4:	350c      	adds	r5, #12
		arm_mat_mult_f32(&eskf->K_GPS,&eskf->z_hx_GPS,&eskf->del_x);
 80038e6:	4631      	mov	r1, r6
 80038e8:	321c      	adds	r2, #28
 80038ea:	4640      	mov	r0, r8
 80038ec:	f006 fb26 	bl	8009f3c <arm_mat_mult_f32>
		zeros(&eskf->I_KH_GPS);
 80038f0:	4628      	mov	r0, r5
 80038f2:	f000 fa0d 	bl	8003d10 <zeros>
		matcpy2(&eskf->I_KH_GPS,&eskf->K_GPS,0,0);
 80038f6:	2300      	movs	r3, #0
 80038f8:	4628      	mov	r0, r5
 80038fa:	461a      	mov	r2, r3
 80038fc:	4641      	mov	r1, r8
 80038fe:	f000 fa41 	bl	8003d84 <matcpy2>
		arm_mat_scale_f32(&eskf->I_KH_GPS,-1,&eskf->I_KH_GPS);//now &eskf->I_KH_GPS = -K*H
 8003902:	462a      	mov	r2, r5
 8003904:	4628      	mov	r0, r5
 8003906:	4924      	ldr	r1, [pc, #144]	; (8003998 <ESKF_update+0x320>)
 8003908:	f006 fab6 	bl	8009e78 <arm_mat_scale_f32>
		arm_mat_trans_f32(&eskf->I_KH_GPS,&eskf->I_KH_GPS_T);
 800390c:	f504 5a36 	add.w	sl, r4, #11648	; 0x2d80
		arm_mat_add_f32(&eskf->I_KH_GPS,&eskf->I15,&eskf->I_KH_GPS);
 8003910:	f504 519a 	add.w	r1, r4, #4928	; 0x1340
 8003914:	462a      	mov	r2, r5
		arm_mat_trans_f32(&eskf->I_KH_GPS,&eskf->I_KH_GPS_T);
 8003916:	f10a 0a18 	add.w	sl, sl, #24
		arm_mat_add_f32(&eskf->I_KH_GPS,&eskf->I15,&eskf->I_KH_GPS);
 800391a:	4628      	mov	r0, r5
 800391c:	311c      	adds	r1, #28
		arm_mat_mult_f32(&eskf->I_KH_GPS,&eskf->P,&eskf->P_temp);
 800391e:	f504 5612 	add.w	r6, r4, #9344	; 0x2480
 8003922:	361c      	adds	r6, #28
		arm_mat_add_f32(&eskf->I_KH_GPS,&eskf->I15,&eskf->I_KH_GPS);
 8003924:	f006 fd14 	bl	800a350 <arm_mat_add_f32>
		arm_mat_trans_f32(&eskf->I_KH_GPS,&eskf->I_KH_GPS_T);
 8003928:	4651      	mov	r1, sl
 800392a:	4628      	mov	r0, r5
 800392c:	f006 f9da 	bl	8009ce4 <arm_mat_trans_f32>
		arm_mat_mult_f32(&eskf->I_KH_GPS,&eskf->P,&eskf->P_temp);
 8003930:	4632      	mov	r2, r6
 8003932:	4639      	mov	r1, r7
 8003934:	4628      	mov	r0, r5
 8003936:	f006 fb01 	bl	8009f3c <arm_mat_mult_f32>
		matcpy(&eskf->P_temp,&eskf->P);
 800393a:	4639      	mov	r1, r7
 800393c:	4630      	mov	r0, r6
 800393e:	f000 fa0f 	bl	8003d60 <matcpy>
		arm_mat_mult_f32(&eskf->P,&eskf->I_KH_GPS_T,&eskf->P_temp);
 8003942:	4632      	mov	r2, r6
 8003944:	4651      	mov	r1, sl
 8003946:	4638      	mov	r0, r7
		arm_mat_trans_f32(&eskf->K_GPS,&eskf->K_GPS_T);
 8003948:	f504 5a47 	add.w	sl, r4, #12736	; 0x31c0
		arm_mat_mult_f32(&eskf->P,&eskf->I_KH_GPS_T,&eskf->P_temp);
 800394c:	f006 faf6 	bl	8009f3c <arm_mat_mult_f32>
		arm_mat_trans_f32(&eskf->K_GPS,&eskf->K_GPS_T);
 8003950:	f10a 0a20 	add.w	sl, sl, #32
		matcpy(&eskf->P_temp,&eskf->P);
 8003954:	4639      	mov	r1, r7
 8003956:	4630      	mov	r0, r6
		arm_mat_mult_f32(&eskf->K_GPS,&eskf->V_GPS,&eskf->KV_GPS);
 8003958:	f504 5544 	add.w	r5, r4, #12544	; 0x3100
		matcpy(&eskf->P_temp,&eskf->P);
 800395c:	f000 fa00 	bl	8003d60 <matcpy>
		arm_mat_mult_f32(&eskf->K_GPS,&eskf->V_GPS,&eskf->KV_GPS);
 8003960:	3524      	adds	r5, #36	; 0x24
		arm_mat_trans_f32(&eskf->K_GPS,&eskf->K_GPS_T);
 8003962:	4651      	mov	r1, sl
 8003964:	4640      	mov	r0, r8
 8003966:	f006 f9bd 	bl	8009ce4 <arm_mat_trans_f32>
		arm_mat_mult_f32(&eskf->K_GPS,&eskf->V_GPS,&eskf->KV_GPS);
 800396a:	4649      	mov	r1, r9
 800396c:	462a      	mov	r2, r5
 800396e:	4640      	mov	r0, r8
 8003970:	f006 fae4 	bl	8009f3c <arm_mat_mult_f32>
		arm_mat_mult_f32(&eskf->KV_GPS,&eskf->K_GPS_T,&eskf->P_temp);
 8003974:	4632      	mov	r2, r6
 8003976:	4651      	mov	r1, sl
 8003978:	4628      	mov	r0, r5
 800397a:	f006 fadf 	bl	8009f3c <arm_mat_mult_f32>
		arm_mat_add_f32(&eskf->P,&eskf->P_temp,&eskf->P);
 800397e:	463a      	mov	r2, r7
 8003980:	4631      	mov	r1, r6
 8003982:	4638      	mov	r0, r7
 8003984:	f006 fce4 	bl	800a350 <arm_mat_add_f32>
		inject_error_state(eskf);
 8003988:	4620      	mov	r0, r4
 800398a:	f7ff fce1 	bl	8003350 <inject_error_state>
 800398e:	e707      	b.n	80037a0 <ESKF_update+0x128>
 8003990:	3ff00000 	.word	0x3ff00000
 8003994:	3dcccccd 	.word	0x3dcccccd
 8003998:	bf800000 	.word	0xbf800000
				arm_mat_scale_f32(&eskf->mm_init,1/MAG_INITIALIZE_COUNT,&eskf->mm_init);
 800399c:	f504 56b8 	add.w	r6, r4, #5888	; 0x1700
 80039a0:	361c      	adds	r6, #28
 80039a2:	4632      	mov	r2, r6
 80039a4:	2100      	movs	r1, #0
 80039a6:	4630      	mov	r0, r6
 80039a8:	f006 fa66 	bl	8009e78 <arm_mat_scale_f32>
				arm_mat_init_f32(&I_R_G,3,3,I_R_G_data);//I_R_G, global to local(Imu frame).
 80039ac:	2203      	movs	r2, #3
 80039ae:	a805      	add	r0, sp, #20
 80039b0:	4611      	mov	r1, r2
 80039b2:	ab0e      	add	r3, sp, #56	; 0x38
 80039b4:	f006 fcc8 	bl	800a348 <arm_mat_init_f32>
				arm_mat_init_f32(&G_R_I,3,3,G_R_I_data);//G_R_I, local to global.
 80039b8:	2203      	movs	r2, #3
 80039ba:	a807      	add	r0, sp, #28
 80039bc:	4611      	mov	r1, r2
 80039be:	ab17      	add	r3, sp, #92	; 0x5c
 80039c0:	f006 fcc2 	bl	800a348 <arm_mat_init_f32>
				normalize(&eskf->am_init);// Z axis ref, negative g.
 80039c4:	f504 57b8 	add.w	r7, r4, #5888	; 0x1700
				arm_mat_init_f32(&X_ref,3,1,X_ref_data);
 80039c8:	ab0b      	add	r3, sp, #44	; 0x2c
 80039ca:	462a      	mov	r2, r5
 80039cc:	2103      	movs	r1, #3
 80039ce:	a809      	add	r0, sp, #36	; 0x24
 80039d0:	f006 fcba 	bl	800a348 <arm_mat_init_f32>
				normalize(&eskf->am_init);// Z axis ref, negative g.
 80039d4:	3708      	adds	r7, #8
				normalize(&eskf->mm_init);// Y axis ref
 80039d6:	4630      	mov	r0, r6
 80039d8:	f000 faf0 	bl	8003fbc <normalize>
				normalize(&eskf->am_init);// Z axis ref, negative g.
 80039dc:	4638      	mov	r0, r7
 80039de:	f000 faed 	bl	8003fbc <normalize>
				cross(&eskf->mm_init,&eskf->am_init,&X_ref);//cross Y and Z to get X
 80039e2:	aa09      	add	r2, sp, #36	; 0x24
 80039e4:	4639      	mov	r1, r7
 80039e6:	4630      	mov	r0, r6
 80039e8:	f000 fb12 	bl	8004010 <cross>
				normalize(&X_ref);
 80039ec:	a809      	add	r0, sp, #36	; 0x24
 80039ee:	f000 fae5 	bl	8003fbc <normalize>
				matcpy2(&I_R_G,&X_ref,0,0);
 80039f2:	2300      	movs	r3, #0
 80039f4:	a909      	add	r1, sp, #36	; 0x24
 80039f6:	461a      	mov	r2, r3
 80039f8:	a805      	add	r0, sp, #20
 80039fa:	f000 f9c3 	bl	8003d84 <matcpy2>
				matcpy2(&I_R_G,&eskf->mm_init,0,1);
 80039fe:	462b      	mov	r3, r5
 8003a00:	4631      	mov	r1, r6
 8003a02:	a805      	add	r0, sp, #20
 8003a04:	2200      	movs	r2, #0
 8003a06:	f000 f9bd 	bl	8003d84 <matcpy2>
				matcpy2(&I_R_G,&eskf->am_init,0,2);
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	4639      	mov	r1, r7
 8003a10:	a805      	add	r0, sp, #20
 8003a12:	f000 f9b7 	bl	8003d84 <matcpy2>
				arm_mat_trans_f32(&I_R_G,&G_R_I);
 8003a16:	a907      	add	r1, sp, #28
 8003a18:	a805      	add	r0, sp, #20
 8003a1a:	f006 f963 	bl	8009ce4 <arm_mat_trans_f32>
				mat2quat(&G_R_I,&eskf->q);
 8003a1e:	a807      	add	r0, sp, #28
 8003a20:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8003a24:	f002 f818 	bl	8005a58 <mat2quat>
				eskf->MAG_initialized = 1;
 8003a28:	6065      	str	r5, [r4, #4]
 8003a2a:	e6b3      	b.n	8003794 <ESKF_update+0x11c>
				arm_mat_add_f32(&eskf->mm,&eskf->mm_init,&eskf->mm_init);
 8003a2c:	462a      	mov	r2, r5
 8003a2e:	f504 5086 	add.w	r0, r4, #4288	; 0x10c0
 8003a32:	321c      	adds	r2, #28
 8003a34:	4611      	mov	r1, r2
 8003a36:	3014      	adds	r0, #20
 8003a38:	f006 fc8a 	bl	800a350 <arm_mat_add_f32>
				eskf->MAG_init_count++;
 8003a3c:	682b      	ldr	r3, [r5, #0]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	602b      	str	r3, [r5, #0]
 8003a42:	e6a1      	b.n	8003788 <ESKF_update+0x110>
				arm_mat_add_f32(&eskf->am,&eskf->am_init,&eskf->am_init);
 8003a44:	f504 52b8 	add.w	r2, r4, #5888	; 0x1700
 8003a48:	3208      	adds	r2, #8
 8003a4a:	f504 5085 	add.w	r0, r4, #4256	; 0x10a0
 8003a4e:	4611      	mov	r1, r2
 8003a50:	300c      	adds	r0, #12
 8003a52:	f006 fc7d 	bl	800a350 <arm_mat_add_f32>
				eskf->IMU_init_count++;
 8003a56:	5963      	ldr	r3, [r4, r5]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	5163      	str	r3, [r4, r5]
 8003a5c:	e6ac      	b.n	80037b8 <ESKF_update+0x140>
		double dt = t - eskf->last_t;
 8003a5e:	f504 55bb 	add.w	r5, r4, #5984	; 0x1760
 8003a62:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003a66:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003a6a:	4630      	mov	r0, r6
 8003a6c:	4639      	mov	r1, r7
 8003a6e:	f7fc fb7b 	bl	8000168 <__aeabi_dsub>
		eskf->last_t = t;
 8003a72:	4632      	mov	r2, r6
 8003a74:	463b      	mov	r3, r7
 8003a76:	e9c5 2300 	strd	r2, r3, [r5]
		arm_mat_init_f32(&tempvec,3,1,tempvec_data);
 8003a7a:	ab05      	add	r3, sp, #20
		double dt = t - eskf->last_t;
 8003a7c:	e9cd 0100 	strd	r0, r1, [sp]
		arm_mat_init_f32(&tempvec,3,1,tempvec_data);
 8003a80:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8003a82:	4618      	mov	r0, r3
 8003a84:	2103      	movs	r1, #3
 8003a86:	ab0b      	add	r3, sp, #44	; 0x2c
 8003a88:	f006 fc5e 	bl	800a348 <arm_mat_init_f32>
		arm_mat_init_f32(&tempquat,4,1,tempquat_data);
 8003a8c:	ab07      	add	r3, sp, #28
 8003a8e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8003a90:	4618      	mov	r0, r3
 8003a92:	2104      	movs	r1, #4
 8003a94:	ab0e      	add	r3, sp, #56	; 0x38
 8003a96:	f006 fc57 	bl	800a348 <arm_mat_init_f32>
		arm_mat_init_f32(&tempmat,3,3,tempmat_data);
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	ab09      	add	r3, sp, #36	; 0x24
		quat2mat(&eskf->q,&eskf->R);//Get equivlent representation of orientation
 8003a9e:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8003aa2:	f104 0a34 	add.w	sl, r4, #52	; 0x34
		arm_mat_init_f32(&tempmat,3,3,tempmat_data);
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	ab17      	add	r3, sp, #92	; 0x5c
 8003aac:	f006 fc4c 	bl	800a348 <arm_mat_init_f32>
		quat2mat(&eskf->q,&eskf->R);//Get equivlent representation of orientation
 8003ab0:	4650      	mov	r0, sl
 8003ab2:	4631      	mov	r1, r6
 8003ab4:	f001 ff3c 	bl	8005930 <quat2mat>
		arm_mat_sub_f32(&eskf->am,&eskf->ab,&eskf->am_unbias);//subtract acc  bias
 8003ab8:	f105 0808 	add.w	r8, r5, #8
 8003abc:	f504 5085 	add.w	r0, r4, #4256	; 0x10a0
		arm_mat_sub_f32(&eskf->wm,&eskf->wb,&eskf->wm_unbias);//subtract gyro bias
 8003ac0:	f105 091c 	add.w	r9, r5, #28
		arm_mat_sub_f32(&eskf->am,&eskf->ab,&eskf->am_unbias);//subtract acc  bias
 8003ac4:	4642      	mov	r2, r8
 8003ac6:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8003aca:	300c      	adds	r0, #12
 8003acc:	f006 f962 	bl	8009d94 <arm_mat_sub_f32>
		arm_mat_sub_f32(&eskf->wm,&eskf->wb,&eskf->wm_unbias);//subtract gyro bias
 8003ad0:	464a      	mov	r2, r9
 8003ad2:	f104 018c 	add.w	r1, r4, #140	; 0x8c
 8003ad6:	f504 5086 	add.w	r0, r4, #4288	; 0x10c0
 8003ada:	f006 f95b 	bl	8009d94 <arm_mat_sub_f32>
		arm_mat_scale_f32(&eskf->v,dt,&tempvec);
 8003ade:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ae2:	f7fc fff1 	bl	8000ac8 <__aeabi_d2f>
 8003ae6:	f104 0520 	add.w	r5, r4, #32
 8003aea:	ab05      	add	r3, sp, #20
		arm_mat_add_f32(&eskf->p,&tempvec,&eskf->p);
 8003aec:	f104 070c 	add.w	r7, r4, #12
		arm_mat_scale_f32(&eskf->v,dt,&tempvec);
 8003af0:	4683      	mov	fp, r0
 8003af2:	461a      	mov	r2, r3
 8003af4:	4601      	mov	r1, r0
 8003af6:	4628      	mov	r0, r5
 8003af8:	9503      	str	r5, [sp, #12]
 8003afa:	f006 f9bd 	bl	8009e78 <arm_mat_scale_f32>
		arm_mat_add_f32(&eskf->p,&tempvec,&eskf->p);
 8003afe:	a905      	add	r1, sp, #20
 8003b00:	463a      	mov	r2, r7
 8003b02:	4638      	mov	r0, r7
 8003b04:	f006 fc24 	bl	800a350 <arm_mat_add_f32>
		arm_mat_mult_f32(&eskf->R,&eskf->am_unbias,&tempvec);
 8003b08:	ab05      	add	r3, sp, #20
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	4641      	mov	r1, r8
		arm_mat_add_f32(&tempvec,&eskf->g,&tempvec);
 8003b0e:	f504 55b7 	add.w	r5, r4, #5856	; 0x16e0
		arm_mat_mult_f32(&eskf->R,&eskf->am_unbias,&tempvec);
 8003b12:	4630      	mov	r0, r6
 8003b14:	f006 fa12 	bl	8009f3c <arm_mat_mult_f32>
		arm_mat_add_f32(&tempvec,&eskf->g,&tempvec);
 8003b18:	3508      	adds	r5, #8
 8003b1a:	ab05      	add	r3, sp, #20
 8003b1c:	4629      	mov	r1, r5
 8003b1e:	461a      	mov	r2, r3
 8003b20:	4618      	mov	r0, r3
 8003b22:	f006 fc15 	bl	800a350 <arm_mat_add_f32>
		arm_mat_scale_f32(&tempvec,0.5*dt_2,&tempvec);
 8003b26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	f7fc fcd3 	bl	80004d8 <__aeabi_dmul>
 8003b32:	2200      	movs	r2, #0
 8003b34:	4b73      	ldr	r3, [pc, #460]	; (8003d04 <ESKF_update+0x68c>)
 8003b36:	f7fc fccf 	bl	80004d8 <__aeabi_dmul>
 8003b3a:	f7fc ffc5 	bl	8000ac8 <__aeabi_d2f>
 8003b3e:	ab05      	add	r3, sp, #20
 8003b40:	461a      	mov	r2, r3
 8003b42:	4601      	mov	r1, r0
 8003b44:	4618      	mov	r0, r3
 8003b46:	f006 f997 	bl	8009e78 <arm_mat_scale_f32>
		arm_mat_add_f32(&eskf->p,&tempvec,&eskf->p);
 8003b4a:	463a      	mov	r2, r7
 8003b4c:	a905      	add	r1, sp, #20
 8003b4e:	4638      	mov	r0, r7
 8003b50:	f006 fbfe 	bl	800a350 <arm_mat_add_f32>
		arm_mat_mult_f32(&eskf->R,&eskf->am_unbias,&tempvec);
 8003b54:	ab05      	add	r3, sp, #20
 8003b56:	461a      	mov	r2, r3
 8003b58:	4641      	mov	r1, r8
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	f006 f9ee 	bl	8009f3c <arm_mat_mult_f32>
		arm_mat_add_f32(&tempvec,&eskf->g,&tempvec);
 8003b60:	ab05      	add	r3, sp, #20
 8003b62:	461a      	mov	r2, r3
 8003b64:	4629      	mov	r1, r5
 8003b66:	4618      	mov	r0, r3
 8003b68:	f006 fbf2 	bl	800a350 <arm_mat_add_f32>
		arm_mat_scale_f32(&tempvec,dt,&tempvec);
 8003b6c:	ab05      	add	r3, sp, #20
 8003b6e:	461a      	mov	r2, r3
 8003b70:	4618      	mov	r0, r3
 8003b72:	4659      	mov	r1, fp
 8003b74:	f006 f980 	bl	8009e78 <arm_mat_scale_f32>
		arm_mat_add_f32(&eskf->v,&tempvec,&eskf->v);
 8003b78:	9a03      	ldr	r2, [sp, #12]
 8003b7a:	a905      	add	r1, sp, #20
 8003b7c:	4610      	mov	r0, r2
		quatexp2(&tempvec,&eskf->del_q);
 8003b7e:	f504 55bc 	add.w	r5, r4, #6016	; 0x1780
		arm_mat_add_f32(&eskf->v,&tempvec,&eskf->v);
 8003b82:	f006 fbe5 	bl	800a350 <arm_mat_add_f32>
		quatexp2(&tempvec,&eskf->del_q);
 8003b86:	3510      	adds	r5, #16
		arm_mat_scale_f32(&eskf->wm_unbias,dt,&tempvec);
 8003b88:	aa05      	add	r2, sp, #20
 8003b8a:	4659      	mov	r1, fp
 8003b8c:	4648      	mov	r0, r9
 8003b8e:	f006 f973 	bl	8009e78 <arm_mat_scale_f32>
		quatexp2(&tempvec,&eskf->del_q);
 8003b92:	4629      	mov	r1, r5
 8003b94:	a805      	add	r0, sp, #20
 8003b96:	f002 f853 	bl	8005c40 <quatexp2>
		otimes(&eskf->q,&eskf->del_q,&tempquat);
 8003b9a:	aa07      	add	r2, sp, #28
 8003b9c:	4629      	mov	r1, r5
 8003b9e:	4650      	mov	r0, sl
 8003ba0:	f002 f80e 	bl	8005bc0 <otimes>
		matcpy(&tempquat,&eskf->q);
 8003ba4:	4651      	mov	r1, sl
 8003ba6:	a807      	add	r0, sp, #28
		eye(&eskf->Fx);
 8003ba8:	f504 65e6 	add.w	r5, r4, #1840	; 0x730
		matcpy(&tempquat,&eskf->q);
 8003bac:	f000 f8d8 	bl	8003d60 <matcpy>
		quat2mat(&eskf->q,&eskf->R);//Update R to our best estimation
 8003bb0:	4631      	mov	r1, r6
 8003bb2:	4650      	mov	r0, sl
		arm_mat_scale_f32(&eskf->I3,dt,&tempmat);
 8003bb4:	f504 5a87 	add.w	sl, r4, #4320	; 0x10e0
		quat2mat(&eskf->q,&eskf->R);//Update R to our best estimation
 8003bb8:	f001 feba 	bl	8005930 <quat2mat>
		arm_mat_scale_f32(&eskf->I3,dt,&tempmat);
 8003bbc:	f10a 0a08 	add.w	sl, sl, #8
		eye(&eskf->Fx);
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	f000 f8af 	bl	8003d24 <eye>
		arm_mat_scale_f32(&eskf->I3,dt,&tempmat);
 8003bc6:	aa09      	add	r2, sp, #36	; 0x24
 8003bc8:	4659      	mov	r1, fp
 8003bca:	4650      	mov	r0, sl
 8003bcc:	f006 f954 	bl	8009e78 <arm_mat_scale_f32>
		arm_mat_mult_f32(&eskf->R,&tempmat,&eskf->R_hat_am_unbias);
 8003bd0:	f504 57bd 	add.w	r7, r4, #6048	; 0x17a0
		matcpy2(&eskf->Fx,&tempmat,0,3);
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	a909      	add	r1, sp, #36	; 0x24
 8003bd8:	4628      	mov	r0, r5
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f000 f8d2 	bl	8003d84 <matcpy2>
		arm_mat_mult_f32(&eskf->R,&tempmat,&eskf->R_hat_am_unbias);
 8003be0:	3708      	adds	r7, #8
		hat(&eskf->am_unbias,&tempmat);
 8003be2:	a909      	add	r1, sp, #36	; 0x24
 8003be4:	4640      	mov	r0, r8
 8003be6:	f000 f905 	bl	8003df4 <hat>
		arm_mat_scale_f32(&eskf->R_hat_am_unbias,-dt,&eskf->R_hat_am_unbias);
 8003bea:	f10b 4b00 	add.w	fp, fp, #2147483648	; 0x80000000
		arm_mat_mult_f32(&eskf->R,&tempmat,&eskf->R_hat_am_unbias);
 8003bee:	463a      	mov	r2, r7
 8003bf0:	a909      	add	r1, sp, #36	; 0x24
 8003bf2:	4630      	mov	r0, r6
 8003bf4:	f006 f9a2 	bl	8009f3c <arm_mat_mult_f32>
		arm_mat_scale_f32(&eskf->R_hat_am_unbias,-dt,&eskf->R_hat_am_unbias);
 8003bf8:	463a      	mov	r2, r7
 8003bfa:	4659      	mov	r1, fp
 8003bfc:	4638      	mov	r0, r7
 8003bfe:	f006 f93b 	bl	8009e78 <arm_mat_scale_f32>
		matcpy2(&eskf->Fx,&eskf->R_hat_am_unbias,3,6);
 8003c02:	4639      	mov	r1, r7
 8003c04:	4628      	mov	r0, r5
 8003c06:	2306      	movs	r3, #6
 8003c08:	2203      	movs	r2, #3
 8003c0a:	f000 f8bb 	bl	8003d84 <matcpy2>
		arm_mat_scale_f32(&eskf->R,-dt,&tempmat);
 8003c0e:	aa09      	add	r2, sp, #36	; 0x24
 8003c10:	4659      	mov	r1, fp
 8003c12:	4630      	mov	r0, r6
 8003c14:	f006 f930 	bl	8009e78 <arm_mat_scale_f32>
		matcpy2(&eskf->Fx,&tempmat,3,9);
 8003c18:	2309      	movs	r3, #9
 8003c1a:	a909      	add	r1, sp, #36	; 0x24
 8003c1c:	4628      	mov	r0, r5
 8003c1e:	2203      	movs	r2, #3
 8003c20:	f000 f8b0 	bl	8003d84 <matcpy2>
		arm_mat_scale_f32(&eskf->wm_unbias,-dt,&tempvec);//changed dt to -dt is equivalent to transpose
 8003c24:	aa05      	add	r2, sp, #20
 8003c26:	4659      	mov	r1, fp
 8003c28:	4648      	mov	r0, r9
 8003c2a:	f006 f925 	bl	8009e78 <arm_mat_scale_f32>
		matexp2(&tempvec,&tempmat);
 8003c2e:	a909      	add	r1, sp, #36	; 0x24
 8003c30:	a805      	add	r0, sp, #20
 8003c32:	f000 f901 	bl	8003e38 <matexp2>
		matcpy2(&eskf->Fx,&tempmat,6,6);
 8003c36:	2306      	movs	r3, #6
 8003c38:	a909      	add	r1, sp, #36	; 0x24
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	f000 f8a1 	bl	8003d84 <matcpy2>
		arm_mat_scale_f32(&eskf->I3,-dt,&tempmat);
 8003c42:	aa09      	add	r2, sp, #36	; 0x24
 8003c44:	4659      	mov	r1, fp
 8003c46:	4650      	mov	r0, sl
 8003c48:	f006 f916 	bl	8009e78 <arm_mat_scale_f32>
		matcpy2(&eskf->Fx,&tempmat,6,12);
 8003c4c:	a909      	add	r1, sp, #36	; 0x24
 8003c4e:	4628      	mov	r0, r5
 8003c50:	2206      	movs	r2, #6
 8003c52:	230c      	movs	r3, #12
 8003c54:	f000 f896 	bl	8003d84 <matcpy2>
		arm_mat_trans_f32(&eskf->Fx,&eskf->Fx_T);
 8003c58:	f504 57be 	add.w	r7, r4, #6080	; 0x17c0
		Q[39] = Q[52] = Q[65] = 1.0e-6;
 8003c5c:	4b2a      	ldr	r3, [pc, #168]	; (8003d08 <ESKF_update+0x690>)
		Q[0] = Q[13] = Q[26] = 1.0e-4;
 8003c5e:	9e02      	ldr	r6, [sp, #8]
 8003c60:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8003d0c <ESKF_update+0x694>
		arm_mat_trans_f32(&eskf->Fx,&eskf->Fx_T);
 8003c64:	3714      	adds	r7, #20
		Q[0] = Q[13] = Q[26] = 1.0e-4;
 8003c66:	f8c6 c068 	str.w	ip, [r6, #104]	; 0x68
 8003c6a:	f8c6 c034 	str.w	ip, [r6, #52]	; 0x34
 8003c6e:	f8c6 c000 	str.w	ip, [r6]
		Q[39] = Q[52] = Q[65] = 1.0e-6;
 8003c72:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
 8003c76:	f8c6 30d0 	str.w	r3, [r6, #208]	; 0xd0
 8003c7a:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c
		Q[78] = Q[91] = Q[104] = 1e-6;//Due to computation precision, can't use dt here
 8003c7e:	f8c6 31a0 	str.w	r3, [r6, #416]	; 0x1a0
 8003c82:	f8c6 316c 	str.w	r3, [r6, #364]	; 0x16c
 8003c86:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
		Q[117] = Q[130] = Q[143] = 1e-6;
 8003c8a:	f8c6 323c 	str.w	r3, [r6, #572]	; 0x23c
 8003c8e:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
 8003c92:	f8c6 31d4 	str.w	r3, [r6, #468]	; 0x1d4
		arm_mat_mult_f32(&eskf->Fx,&eskf->P,&eskf->Fx_P);
 8003c96:	f504 7882 	add.w	r8, r4, #260	; 0x104
 8003c9a:	f504 59db 	add.w	r9, r4, #7008	; 0x1b60
		arm_mat_trans_f32(&eskf->Fx,&eskf->Fx_T);
 8003c9e:	4639      	mov	r1, r7
 8003ca0:	4628      	mov	r0, r5
		arm_mat_mult_f32(&eskf->Fx_P,&eskf->Fx_T,&eskf->P_temp);
 8003ca2:	f504 5612 	add.w	r6, r4, #9344	; 0x2480
		arm_mat_trans_f32(&eskf->Fx,&eskf->Fx_T);
 8003ca6:	f006 f81d 	bl	8009ce4 <arm_mat_trans_f32>
		arm_mat_mult_f32(&eskf->Fx_P,&eskf->Fx_T,&eskf->P_temp);
 8003caa:	361c      	adds	r6, #28
		arm_mat_mult_f32(&eskf->Fx,&eskf->P,&eskf->Fx_P);
 8003cac:	4641      	mov	r1, r8
 8003cae:	464a      	mov	r2, r9
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	f006 f943 	bl	8009f3c <arm_mat_mult_f32>
		arm_mat_mult_f32(&eskf->Fi,&eskf->Q,&eskf->Fi_Q);
 8003cb6:	f504 5507 	add.w	r5, r4, #8640	; 0x21c0
		arm_mat_mult_f32(&eskf->Fx_P,&eskf->Fx_T,&eskf->P_temp);
 8003cba:	4632      	mov	r2, r6
 8003cbc:	4639      	mov	r1, r7
 8003cbe:	4648      	mov	r0, r9
 8003cc0:	f006 f93c 	bl	8009f3c <arm_mat_mult_f32>
		arm_mat_mult_f32(&eskf->Fi,&eskf->Q,&eskf->Fi_Q);
 8003cc4:	3504      	adds	r5, #4
		matcpy(&eskf->P_temp,&eskf->P);
 8003cc6:	4641      	mov	r1, r8
 8003cc8:	4630      	mov	r0, r6
		arm_mat_mult_f32(&eskf->Fi,&eskf->Q,&eskf->Fi_Q);
 8003cca:	f604 29bc 	addw	r9, r4, #2748	; 0xabc
		arm_mat_trans_f32(&eskf->Fi,&eskf->Fi_T);
 8003cce:	f504 57f7 	add.w	r7, r4, #7904	; 0x1ee0
		matcpy(&eskf->P_temp,&eskf->P);
 8003cd2:	f000 f845 	bl	8003d60 <matcpy>
		arm_mat_trans_f32(&eskf->Fi,&eskf->Fi_T);
 8003cd6:	370c      	adds	r7, #12
		arm_mat_mult_f32(&eskf->Fi,&eskf->Q,&eskf->Fi_Q);
 8003cd8:	462a      	mov	r2, r5
 8003cda:	f504 6192 	add.w	r1, r4, #1168	; 0x490
 8003cde:	4648      	mov	r0, r9
 8003ce0:	f006 f92c 	bl	8009f3c <arm_mat_mult_f32>
		arm_mat_trans_f32(&eskf->Fi,&eskf->Fi_T);
 8003ce4:	4639      	mov	r1, r7
 8003ce6:	4648      	mov	r0, r9
 8003ce8:	f005 fffc 	bl	8009ce4 <arm_mat_trans_f32>
		arm_mat_mult_f32(&eskf->Fi_Q,&eskf->Fi_T,&eskf->P_temp);
 8003cec:	4632      	mov	r2, r6
 8003cee:	4639      	mov	r1, r7
 8003cf0:	4628      	mov	r0, r5
 8003cf2:	f006 f923 	bl	8009f3c <arm_mat_mult_f32>
		arm_mat_add_f32(&eskf->P,&eskf->P_temp,&eskf->P);
 8003cf6:	4642      	mov	r2, r8
 8003cf8:	4631      	mov	r1, r6
 8003cfa:	4640      	mov	r0, r8
 8003cfc:	f006 fb28 	bl	800a350 <arm_mat_add_f32>
 8003d00:	e54e      	b.n	80037a0 <ESKF_update+0x128>
 8003d02:	bf00      	nop
 8003d04:	3fe00000 	.word	0x3fe00000
 8003d08:	358637bd 	.word	0x358637bd
 8003d0c:	38d1b717 	.word	0x38d1b717

08003d10 <zeros>:
#include "math.h"

#define MATH_UTILS_SIZE_CHECK

void zeros(arm_matrix_instance_f32* mat){
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003d10:	8843      	ldrh	r3, [r0, #2]
 8003d12:	8802      	ldrh	r2, [r0, #0]
 8003d14:	2100      	movs	r1, #0
 8003d16:	fb02 f203 	mul.w	r2, r2, r3
 8003d1a:	6840      	ldr	r0, [r0, #4]
 8003d1c:	0092      	lsls	r2, r2, #2
 8003d1e:	f006 bbef 	b.w	800a500 <memset>
 8003d22:	bf00      	nop

08003d24 <eye>:
}

void eye(arm_matrix_instance_f32* mat){

#ifdef MATH_UTILS_SIZE_CHECK
	if (mat->numCols != mat->numRows){
 8003d24:	8842      	ldrh	r2, [r0, #2]
 8003d26:	8803      	ldrh	r3, [r0, #0]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d000      	beq.n	8003d2e <eye+0xa>
 8003d2c:	4770      	bx	lr
void eye(arm_matrix_instance_f32* mat){
 8003d2e:	b510      	push	{r4, lr}
 8003d30:	4604      	mov	r4, r0
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003d32:	fb02 f202 	mul.w	r2, r2, r2
 8003d36:	2100      	movs	r1, #0
 8003d38:	0092      	lsls	r2, r2, #2
 8003d3a:	6840      	ldr	r0, [r0, #4]
 8003d3c:	f006 fbe0 	bl	800a500 <memset>
		return;
	}
#endif
	zeros(mat);
	for(int i = 0; i < (mat->numCols * mat->numRows); i += (mat->numCols+1)){
 8003d40:	8861      	ldrh	r1, [r4, #2]
 8003d42:	8822      	ldrh	r2, [r4, #0]
 8003d44:	fb01 f202 	mul.w	r2, r1, r2
 8003d48:	b14a      	cbz	r2, 8003d5e <eye+0x3a>
 8003d4a:	2300      	movs	r3, #0
		mat->pData[i] = 1;
 8003d4c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003d50:	6864      	ldr	r4, [r4, #4]
 8003d52:	3101      	adds	r1, #1
 8003d54:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	for(int i = 0; i < (mat->numCols * mat->numRows); i += (mat->numCols+1)){
 8003d58:	440b      	add	r3, r1
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	dbfa      	blt.n	8003d54 <eye+0x30>
	}
}
 8003d5e:	bd10      	pop	{r4, pc}

08003d60 <matcpy>:

void matcpy(arm_matrix_instance_f32* mat1,arm_matrix_instance_f32* mat2){
 8003d60:	4603      	mov	r3, r0

#ifdef MATH_UTILS_SIZE_CHECK
	if (mat1->numCols != mat2->numCols || mat1->numRows != mat2->numRows){
 8003d62:	680a      	ldr	r2, [r1, #0]
 8003d64:	6800      	ldr	r0, [r0, #0]
 8003d66:	4290      	cmp	r0, r2
 8003d68:	d000      	beq.n	8003d6c <matcpy+0xc>
 8003d6a:	4770      	bx	lr
void matcpy(arm_matrix_instance_f32* mat1,arm_matrix_instance_f32* mat2){
 8003d6c:	b410      	push	{r4}
		return;
	}
#endif

	memcpy(mat2->pData,mat1->pData,mat1->numCols * mat1->numRows * sizeof(float32_t));
 8003d6e:	881a      	ldrh	r2, [r3, #0]
 8003d70:	885c      	ldrh	r4, [r3, #2]
 8003d72:	6848      	ldr	r0, [r1, #4]
 8003d74:	fb02 f204 	mul.w	r2, r2, r4
 8003d78:	6859      	ldr	r1, [r3, #4]
 8003d7a:	0092      	lsls	r2, r2, #2
}
 8003d7c:	bc10      	pop	{r4}
	memcpy(mat2->pData,mat1->pData,mat1->numCols * mat1->numRows * sizeof(float32_t));
 8003d7e:	f006 bbb4 	b.w	800a4ea <memcpy>
 8003d82:	bf00      	nop

08003d84 <matcpy2>:


//copy mat2 to mat1 starting at i,j at mat1.
void matcpy2(arm_matrix_instance_f32* mat1,arm_matrix_instance_f32* mat2,int i, int j){
 8003d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	int i2;//row ind in mat2
	int k = i * mat1->numCols + j;
 8003d86:	8846      	ldrh	r6, [r0, #2]

	for(i2 = 0; i2 < mat2->numRows; i2++){
 8003d88:	880c      	ldrh	r4, [r1, #0]
	int k = i * mat1->numCols + j;
 8003d8a:	fb02 3606 	mla	r6, r2, r6, r3
	for(i2 = 0; i2 < mat2->numRows; i2++){
 8003d8e:	b1a4      	cbz	r4, 8003dba <matcpy2+0x36>
 8003d90:	460d      	mov	r5, r1
 8003d92:	4607      	mov	r7, r0
 8003d94:	2400      	movs	r4, #0
		memcpy(mat1->pData+k,mat2->pData + (i2 * mat2->numCols),mat2->numCols*sizeof(float32_t));
 8003d96:	886a      	ldrh	r2, [r5, #2]
 8003d98:	686b      	ldr	r3, [r5, #4]
 8003d9a:	fb04 f102 	mul.w	r1, r4, r2
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	0092      	lsls	r2, r2, #2
 8003da2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8003da6:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8003daa:	f006 fb9e 	bl	800a4ea <memcpy>
	for(i2 = 0; i2 < mat2->numRows; i2++){
 8003dae:	882b      	ldrh	r3, [r5, #0]
		k += mat1->numCols;
 8003db0:	887a      	ldrh	r2, [r7, #2]
	for(i2 = 0; i2 < mat2->numRows; i2++){
 8003db2:	3401      	adds	r4, #1
 8003db4:	42a3      	cmp	r3, r4
		k += mat1->numCols;
 8003db6:	4416      	add	r6, r2
	for(i2 = 0; i2 < mat2->numRows; i2++){
 8003db8:	dced      	bgt.n	8003d96 <matcpy2+0x12>
	}
}
 8003dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003dbc <matslice>:
/**
 * copy chunk with size of mat2 from mat1 into mat2, starting at (i,j) in mat1.
 *
 *	TODO validate this function
 */
void matslice(arm_matrix_instance_f32* mat1,arm_matrix_instance_f32* mat2,int i, int j){
 8003dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	int k = i * mat1->numCols + j;
 8003dbe:	8846      	ldrh	r6, [r0, #2]

	for (int i2 = 0; i2 < mat2->numRows; i2++){
 8003dc0:	880c      	ldrh	r4, [r1, #0]
	int k = i * mat1->numCols + j;
 8003dc2:	fb02 3606 	mla	r6, r2, r6, r3
	for (int i2 = 0; i2 < mat2->numRows; i2++){
 8003dc6:	b1a4      	cbz	r4, 8003df2 <matslice+0x36>
 8003dc8:	460d      	mov	r5, r1
 8003dca:	4607      	mov	r7, r0
 8003dcc:	2400      	movs	r4, #0
		memcpy(mat2->pData + i2 * mat2->numCols, mat1->pData + k, mat2->numCols*sizeof(float32_t));
 8003dce:	886a      	ldrh	r2, [r5, #2]
 8003dd0:	686b      	ldr	r3, [r5, #4]
 8003dd2:	fb04 f002 	mul.w	r0, r4, r2
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	0092      	lsls	r2, r2, #2
 8003dda:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003dde:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8003de2:	f006 fb82 	bl	800a4ea <memcpy>
	for (int i2 = 0; i2 < mat2->numRows; i2++){
 8003de6:	882b      	ldrh	r3, [r5, #0]
		k += mat1->numCols;
 8003de8:	887a      	ldrh	r2, [r7, #2]
	for (int i2 = 0; i2 < mat2->numRows; i2++){
 8003dea:	3401      	adds	r4, #1
 8003dec:	42a3      	cmp	r3, r4
		k += mat1->numCols;
 8003dee:	4416      	add	r6, r2
	for (int i2 = 0; i2 < mat2->numRows; i2++){
 8003df0:	dced      	bgt.n	8003dce <matslice+0x12>
	}

}
 8003df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003df4 <hat>:
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003df4:	880a      	ldrh	r2, [r1, #0]

void hat(arm_matrix_instance_f32* v_, arm_matrix_instance_f32* v_hat_){
 8003df6:	b510      	push	{r4, lr}
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003df8:	884c      	ldrh	r4, [r1, #2]

	float32_t* v = v_->pData;
	float32_t* v_hat = v_hat_->pData;
 8003dfa:	684b      	ldr	r3, [r1, #4]
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003dfc:	fb02 f204 	mul.w	r2, r2, r4
 8003e00:	2100      	movs	r1, #0
	float32_t* v = v_->pData;
 8003e02:	6844      	ldr	r4, [r0, #4]
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003e04:	0092      	lsls	r2, r2, #2
 8003e06:	4618      	mov	r0, r3
 8003e08:	f006 fb7a 	bl	800a500 <memset>

	zeros(v_hat_);

	v_hat[1] = -v[2];
 8003e0c:	68a2      	ldr	r2, [r4, #8]
 8003e0e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8003e12:	6042      	str	r2, [r0, #4]
	v_hat[2] = v[1];
 8003e14:	6862      	ldr	r2, [r4, #4]
 8003e16:	6082      	str	r2, [r0, #8]
	v_hat[3] = v[2];
 8003e18:	68a2      	ldr	r2, [r4, #8]
 8003e1a:	60c2      	str	r2, [r0, #12]
	v_hat[5] = -v[0];
 8003e1c:	6822      	ldr	r2, [r4, #0]
 8003e1e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8003e22:	6142      	str	r2, [r0, #20]
	v_hat[6] = -v[1];
 8003e24:	6862      	ldr	r2, [r4, #4]
 8003e26:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8003e2a:	6182      	str	r2, [r0, #24]
	v_hat[7] = v[0];
 8003e2c:	6822      	ldr	r2, [r4, #0]
 8003e2e:	61c2      	str	r2, [r0, #28]
}
 8003e30:	bd10      	pop	{r4, pc}
 8003e32:	bf00      	nop
 8003e34:	0000      	movs	r0, r0
	...

08003e38 <matexp2>:
	v[2] = v_hat[3] - v_hat[1];

	arm_mat_scale_f32(v_,0.5,v_);
}

void matexp2(arm_matrix_instance_f32* phi_, arm_matrix_instance_f32* R_){
 8003e38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	float32_t* phi = phi_->pData;
 8003e3c:	6843      	ldr	r3, [r0, #4]
void matexp2(arm_matrix_instance_f32* phi_, arm_matrix_instance_f32* R_){
 8003e3e:	460d      	mov	r5, r1
	float32_t phi_norm = sqrt(phi[0]*phi[0] + phi[1]*phi[1] + phi[2]*phi[2]);
 8003e40:	6819      	ldr	r1, [r3, #0]
void matexp2(arm_matrix_instance_f32* phi_, arm_matrix_instance_f32* R_){
 8003e42:	b097      	sub	sp, #92	; 0x5c
 8003e44:	4604      	mov	r4, r0
	float32_t phi_norm = sqrt(phi[0]*phi[0] + phi[1]*phi[1] + phi[2]*phi[2]);
 8003e46:	4608      	mov	r0, r1
 8003e48:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8003e4c:	689f      	ldr	r7, [r3, #8]
 8003e4e:	f7fc ff99 	bl	8000d84 <__aeabi_fmul>
 8003e52:	4641      	mov	r1, r8
 8003e54:	4606      	mov	r6, r0
 8003e56:	4640      	mov	r0, r8
 8003e58:	f7fc ff94 	bl	8000d84 <__aeabi_fmul>
 8003e5c:	4601      	mov	r1, r0
 8003e5e:	4630      	mov	r0, r6
 8003e60:	f7fc fe88 	bl	8000b74 <__addsf3>
 8003e64:	4639      	mov	r1, r7
 8003e66:	4606      	mov	r6, r0
 8003e68:	4638      	mov	r0, r7
 8003e6a:	f7fc ff8b 	bl	8000d84 <__aeabi_fmul>
 8003e6e:	4601      	mov	r1, r0
 8003e70:	4630      	mov	r0, r6
 8003e72:	f7fc fe7f 	bl	8000b74 <__addsf3>
 8003e76:	f7fc fad7 	bl	8000428 <__aeabi_f2d>
 8003e7a:	f008 ffe9 	bl	800ce50 <sqrt>
 8003e7e:	f7fc fe23 	bl	8000ac8 <__aeabi_d2f>
	float32_t tempmat_data[3*3];
	arm_matrix_instance_f32 u_hat;
	float32_t u_hat_data[3*3];


	arm_mat_init_f32(&tempmat,3,3,tempmat_data);
 8003e82:	2203      	movs	r2, #3
 8003e84:	ab04      	add	r3, sp, #16
 8003e86:	4611      	mov	r1, r2
	float32_t phi_norm = sqrt(phi[0]*phi[0] + phi[1]*phi[1] + phi[2]*phi[2]);
 8003e88:	4606      	mov	r6, r0
	arm_mat_init_f32(&tempmat,3,3,tempmat_data);
 8003e8a:	4668      	mov	r0, sp
 8003e8c:	f006 fa5c 	bl	800a348 <arm_mat_init_f32>
	arm_mat_init_f32(&u_hat,3,3,u_hat_data);
 8003e90:	2203      	movs	r2, #3
 8003e92:	ab0d      	add	r3, sp, #52	; 0x34
 8003e94:	4611      	mov	r1, r2
 8003e96:	a802      	add	r0, sp, #8
 8003e98:	f006 fa56 	bl	800a348 <arm_mat_init_f32>
	if (mat->numCols != mat->numRows){
 8003e9c:	886a      	ldrh	r2, [r5, #2]
 8003e9e:	882b      	ldrh	r3, [r5, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d06a      	beq.n	8003f7a <matexp2+0x142>
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003ea4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8003ea8:	f8bd 2008 	ldrh.w	r2, [sp, #8]
	float32_t* v_hat = v_hat_->pData;
 8003eac:	9b03      	ldr	r3, [sp, #12]
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003eae:	fb02 f201 	mul.w	r2, r2, r1
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	0092      	lsls	r2, r2, #2
 8003eb6:	2100      	movs	r1, #0
	float32_t* v = v_->pData;
 8003eb8:	6864      	ldr	r4, [r4, #4]
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003eba:	f006 fb21 	bl	800a500 <memset>
 8003ebe:	4603      	mov	r3, r0
	v_hat[1] = -v[2];
 8003ec0:	68a2      	ldr	r2, [r4, #8]

	eye(R_);

	hat(phi_,&u_hat);

	if (fabs(phi_norm >= 1e-6)){
 8003ec2:	4630      	mov	r0, r6
	v_hat[1] = -v[2];
 8003ec4:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8003ec8:	605a      	str	r2, [r3, #4]
	v_hat[2] = v[1];
 8003eca:	6862      	ldr	r2, [r4, #4]
 8003ecc:	609a      	str	r2, [r3, #8]
	v_hat[3] = v[2];
 8003ece:	68a2      	ldr	r2, [r4, #8]
 8003ed0:	60da      	str	r2, [r3, #12]
	v_hat[5] = -v[0];
 8003ed2:	6822      	ldr	r2, [r4, #0]
 8003ed4:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8003ed8:	615a      	str	r2, [r3, #20]
	v_hat[6] = -v[1];
 8003eda:	6862      	ldr	r2, [r4, #4]
 8003edc:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8003ee0:	619a      	str	r2, [r3, #24]
	v_hat[7] = v[0];
 8003ee2:	6822      	ldr	r2, [r4, #0]
 8003ee4:	61da      	str	r2, [r3, #28]
	if (fabs(phi_norm >= 1e-6)){
 8003ee6:	f7fc fa9f 	bl	8000428 <__aeabi_f2d>
 8003eea:	a331      	add	r3, pc, #196	; (adr r3, 8003fb0 <matexp2+0x178>)
 8003eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef0:	4680      	mov	r8, r0
 8003ef2:	4689      	mov	r9, r1
 8003ef4:	f7fc fd76 	bl	80009e4 <__aeabi_dcmpge>
 8003ef8:	b938      	cbnz	r0, 8003f0a <matexp2+0xd2>
		arm_mat_mult_f32(&u_hat,&u_hat,&tempmat);
		arm_mat_scale_f32(&tempmat,1-cos(phi_norm),&tempmat);
		arm_mat_add_f32(R_,&tempmat,R_);
	}else{
		//approximation: mat = eye(3) + phi^
		arm_mat_add_f32(R_,&u_hat,R_);
 8003efa:	a902      	add	r1, sp, #8
 8003efc:	462a      	mov	r2, r5
 8003efe:	4628      	mov	r0, r5
 8003f00:	f006 fa26 	bl	800a350 <arm_mat_add_f32>
	}
}
 8003f04:	b017      	add	sp, #92	; 0x5c
 8003f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		arm_mat_scale_f32(&u_hat, 1/phi_norm, &u_hat);
 8003f0a:	4631      	mov	r1, r6
 8003f0c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003f10:	f7fc ffec 	bl	8000eec <__aeabi_fdiv>
 8003f14:	aa02      	add	r2, sp, #8
 8003f16:	4601      	mov	r1, r0
 8003f18:	4610      	mov	r0, r2
 8003f1a:	f005 ffad 	bl	8009e78 <arm_mat_scale_f32>
		arm_mat_scale_f32(&u_hat,sin(phi_norm),&tempmat);
 8003f1e:	4640      	mov	r0, r8
 8003f20:	4649      	mov	r1, r9
 8003f22:	f008 feff 	bl	800cd24 <sin>
 8003f26:	f7fc fdcf 	bl	8000ac8 <__aeabi_d2f>
 8003f2a:	466a      	mov	r2, sp
 8003f2c:	4601      	mov	r1, r0
 8003f2e:	a802      	add	r0, sp, #8
 8003f30:	f005 ffa2 	bl	8009e78 <arm_mat_scale_f32>
		arm_mat_add_f32(R_,&tempmat,R_);
 8003f34:	462a      	mov	r2, r5
 8003f36:	4669      	mov	r1, sp
 8003f38:	4628      	mov	r0, r5
 8003f3a:	f006 fa09 	bl	800a350 <arm_mat_add_f32>
		arm_mat_mult_f32(&u_hat,&u_hat,&tempmat);
 8003f3e:	a902      	add	r1, sp, #8
 8003f40:	466a      	mov	r2, sp
 8003f42:	4608      	mov	r0, r1
 8003f44:	f005 fffa 	bl	8009f3c <arm_mat_mult_f32>
		arm_mat_scale_f32(&tempmat,1-cos(phi_norm),&tempmat);
 8003f48:	4640      	mov	r0, r8
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	f008 feb4 	bl	800ccb8 <cos>
 8003f50:	460b      	mov	r3, r1
 8003f52:	4602      	mov	r2, r0
 8003f54:	4918      	ldr	r1, [pc, #96]	; (8003fb8 <matexp2+0x180>)
 8003f56:	2000      	movs	r0, #0
 8003f58:	f7fc f906 	bl	8000168 <__aeabi_dsub>
 8003f5c:	f7fc fdb4 	bl	8000ac8 <__aeabi_d2f>
 8003f60:	466a      	mov	r2, sp
 8003f62:	4601      	mov	r1, r0
 8003f64:	4668      	mov	r0, sp
 8003f66:	f005 ff87 	bl	8009e78 <arm_mat_scale_f32>
		arm_mat_add_f32(R_,&tempmat,R_);
 8003f6a:	462a      	mov	r2, r5
 8003f6c:	4669      	mov	r1, sp
 8003f6e:	4628      	mov	r0, r5
 8003f70:	f006 f9ee 	bl	800a350 <arm_mat_add_f32>
}
 8003f74:	b017      	add	sp, #92	; 0x5c
 8003f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003f7a:	fb02 f202 	mul.w	r2, r2, r2
 8003f7e:	2100      	movs	r1, #0
 8003f80:	0092      	lsls	r2, r2, #2
 8003f82:	6868      	ldr	r0, [r5, #4]
 8003f84:	f006 fabc 	bl	800a500 <memset>
	for(int i = 0; i < (mat->numCols * mat->numRows); i += (mat->numCols+1)){
 8003f88:	8869      	ldrh	r1, [r5, #2]
 8003f8a:	882a      	ldrh	r2, [r5, #0]
 8003f8c:	fb01 f202 	mul.w	r2, r1, r2
 8003f90:	2a00      	cmp	r2, #0
 8003f92:	d087      	beq.n	8003ea4 <matexp2+0x6c>
 8003f94:	2300      	movs	r3, #0
		mat->pData[i] = 1;
 8003f96:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003f9a:	686f      	ldr	r7, [r5, #4]
 8003f9c:	3101      	adds	r1, #1
 8003f9e:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
	for(int i = 0; i < (mat->numCols * mat->numRows); i += (mat->numCols+1)){
 8003fa2:	440b      	add	r3, r1
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	dcfa      	bgt.n	8003f9e <matexp2+0x166>
 8003fa8:	e77c      	b.n	8003ea4 <matexp2+0x6c>
 8003faa:	bf00      	nop
 8003fac:	f3af 8000 	nop.w
 8003fb0:	a0b5ed8d 	.word	0xa0b5ed8d
 8003fb4:	3eb0c6f7 	.word	0x3eb0c6f7
 8003fb8:	3ff00000 	.word	0x3ff00000

08003fbc <normalize>:

void normalize(arm_matrix_instance_f32* v_){
 8003fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	float32_t* v = v_->pData;
 8003fbe:	6843      	ldr	r3, [r0, #4]
void normalize(arm_matrix_instance_f32* v_){
 8003fc0:	4604      	mov	r4, r0
	float32_t norm = v[0]*v[0] + v[1]*v[1] + v[2]*v[2];
 8003fc2:	6819      	ldr	r1, [r3, #0]
 8003fc4:	685f      	ldr	r7, [r3, #4]
 8003fc6:	4608      	mov	r0, r1
 8003fc8:	689e      	ldr	r6, [r3, #8]
 8003fca:	f7fc fedb 	bl	8000d84 <__aeabi_fmul>
 8003fce:	4639      	mov	r1, r7
 8003fd0:	4605      	mov	r5, r0
 8003fd2:	4638      	mov	r0, r7
 8003fd4:	f7fc fed6 	bl	8000d84 <__aeabi_fmul>
 8003fd8:	4601      	mov	r1, r0
 8003fda:	4628      	mov	r0, r5
 8003fdc:	f7fc fdca 	bl	8000b74 <__addsf3>
 8003fe0:	4631      	mov	r1, r6
 8003fe2:	4605      	mov	r5, r0
 8003fe4:	4630      	mov	r0, r6
 8003fe6:	f7fc fecd 	bl	8000d84 <__aeabi_fmul>
 8003fea:	4601      	mov	r1, r0
 8003fec:	4628      	mov	r0, r5
 8003fee:	f7fc fdc1 	bl	8000b74 <__addsf3>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8003ff2:	f008 ff81 	bl	800cef8 <sqrtf>

	arm_sqrt_f32(norm,&norm);

	arm_mat_scale_f32(v_,1.0/norm,v_);
 8003ff6:	4601      	mov	r1, r0
 8003ff8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003ffc:	f7fc ff76 	bl	8000eec <__aeabi_fdiv>
 8004000:	4622      	mov	r2, r4
 8004002:	4601      	mov	r1, r0
 8004004:	4620      	mov	r0, r4
}
 8004006:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	arm_mat_scale_f32(v_,1.0/norm,v_);
 800400a:	f005 bf35 	b.w	8009e78 <arm_mat_scale_f32>
 800400e:	bf00      	nop

08004010 <cross>:

void cross(arm_matrix_instance_f32* v1_, arm_matrix_instance_f32* v2_, arm_matrix_instance_f32* vres_){
 8004010:	b530      	push	{r4, r5, lr}
 8004012:	4615      	mov	r5, r2

	arm_matrix_instance_f32 v1_hat;
	float32_t v1_hat_data[3*3];
	arm_mat_init_f32(&v1_hat,3,3,v1_hat_data);
 8004014:	2203      	movs	r2, #3
void cross(arm_matrix_instance_f32* v1_, arm_matrix_instance_f32* v2_, arm_matrix_instance_f32* vres_){
 8004016:	460c      	mov	r4, r1
 8004018:	b08d      	sub	sp, #52	; 0x34
	arm_mat_init_f32(&v1_hat,3,3,v1_hat_data);
 800401a:	a801      	add	r0, sp, #4
 800401c:	4611      	mov	r1, r2
 800401e:	ab03      	add	r3, sp, #12
 8004020:	f006 f992 	bl	800a348 <arm_mat_init_f32>

	arm_mat_mult_f32(&v1_hat,v2_,vres_);
 8004024:	462a      	mov	r2, r5
 8004026:	4621      	mov	r1, r4
 8004028:	a801      	add	r0, sp, #4
 800402a:	f005 ff87 	bl	8009f3c <arm_mat_mult_f32>
}
 800402e:	b00d      	add	sp, #52	; 0x34
 8004030:	bd30      	pop	{r4, r5, pc}
 8004032:	bf00      	nop
 8004034:	0000      	movs	r0, r0
	...

08004038 <calibrate_mag_reading>:
#include "dataProcessing.h"
#include "string.h"
#include "stdlib.h"
#include "math.h"

void calibrate_mag_reading(){
 8004038:	e92d 4fd0 	stmdb	sp!, {r4, r6, r7, r8, r9, sl, fp, lr}

	double m[3]; //magnatic readings minus offset

	m[0] = XIMU_sens.mx - MAG_X_OFFSET;
 800403c:	a34a      	add	r3, pc, #296	; (adr r3, 8004168 <calibrate_mag_reading+0x130>)
 800403e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004042:	4c61      	ldr	r4, [pc, #388]	; (80041c8 <calibrate_mag_reading+0x190>)
void calibrate_mag_reading(){
 8004044:	b082      	sub	sp, #8
	m[0] = XIMU_sens.mx - MAG_X_OFFSET;
 8004046:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
 800404a:	f7fc f88d 	bl	8000168 <__aeabi_dsub>
	m[1] = XIMU_sens.my - MAG_Y_OFFSET;
 800404e:	a348      	add	r3, pc, #288	; (adr r3, 8004170 <calibrate_mag_reading+0x138>)
 8004050:	e9d3 2300 	ldrd	r2, r3, [r3]
	m[0] = XIMU_sens.mx - MAG_X_OFFSET;
 8004054:	4606      	mov	r6, r0
 8004056:	460f      	mov	r7, r1
	m[1] = XIMU_sens.my - MAG_Y_OFFSET;
 8004058:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
 800405c:	f7fc f884 	bl	8000168 <__aeabi_dsub>
	m[2] = XIMU_sens.mz - MAG_Z_OFFSET;
 8004060:	a345      	add	r3, pc, #276	; (adr r3, 8004178 <calibrate_mag_reading+0x140>)
 8004062:	e9d3 2300 	ldrd	r2, r3, [r3]
	m[1] = XIMU_sens.my - MAG_Y_OFFSET;
 8004066:	4682      	mov	sl, r0
 8004068:	468b      	mov	fp, r1
	m[2] = XIMU_sens.mz - MAG_Z_OFFSET;
 800406a:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
 800406e:	f7fc f87d 	bl	800016c <__adddf3>

	XIMU_sens.mx = MAG_TRANSF_11*m[0] + MAG_TRANSF_12*m[1] + MAG_TRANSF_13*m[2];
 8004072:	a343      	add	r3, pc, #268	; (adr r3, 8004180 <calibrate_mag_reading+0x148>)
 8004074:	e9d3 2300 	ldrd	r2, r3, [r3]
	m[2] = XIMU_sens.mz - MAG_Z_OFFSET;
 8004078:	e9cd 0100 	strd	r0, r1, [sp]
	XIMU_sens.mx = MAG_TRANSF_11*m[0] + MAG_TRANSF_12*m[1] + MAG_TRANSF_13*m[2];
 800407c:	4630      	mov	r0, r6
 800407e:	4639      	mov	r1, r7
 8004080:	f7fc fa2a 	bl	80004d8 <__aeabi_dmul>
 8004084:	a340      	add	r3, pc, #256	; (adr r3, 8004188 <calibrate_mag_reading+0x150>)
 8004086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408a:	4680      	mov	r8, r0
 800408c:	4689      	mov	r9, r1
 800408e:	4650      	mov	r0, sl
 8004090:	4659      	mov	r1, fp
 8004092:	f7fc fa21 	bl	80004d8 <__aeabi_dmul>
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	4640      	mov	r0, r8
 800409c:	4649      	mov	r1, r9
 800409e:	f7fc f865 	bl	800016c <__adddf3>
 80040a2:	a33b      	add	r3, pc, #236	; (adr r3, 8004190 <calibrate_mag_reading+0x158>)
 80040a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a8:	4680      	mov	r8, r0
 80040aa:	4689      	mov	r9, r1
 80040ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040b0:	f7fc fa12 	bl	80004d8 <__aeabi_dmul>
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	4640      	mov	r0, r8
 80040ba:	4649      	mov	r1, r9
 80040bc:	f7fc f856 	bl	800016c <__adddf3>
	XIMU_sens.my = MAG_TRANSF_21*m[0] + MAG_TRANSF_22*m[1] + MAG_TRANSF_23*m[2];
 80040c0:	a335      	add	r3, pc, #212	; (adr r3, 8004198 <calibrate_mag_reading+0x160>)
 80040c2:	e9d3 2300 	ldrd	r2, r3, [r3]
	XIMU_sens.mx = MAG_TRANSF_11*m[0] + MAG_TRANSF_12*m[1] + MAG_TRANSF_13*m[2];
 80040c6:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
	XIMU_sens.my = MAG_TRANSF_21*m[0] + MAG_TRANSF_22*m[1] + MAG_TRANSF_23*m[2];
 80040ca:	4630      	mov	r0, r6
 80040cc:	4639      	mov	r1, r7
 80040ce:	f7fc fa03 	bl	80004d8 <__aeabi_dmul>
 80040d2:	a333      	add	r3, pc, #204	; (adr r3, 80041a0 <calibrate_mag_reading+0x168>)
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	4680      	mov	r8, r0
 80040da:	4689      	mov	r9, r1
 80040dc:	4650      	mov	r0, sl
 80040de:	4659      	mov	r1, fp
 80040e0:	f7fc f9fa 	bl	80004d8 <__aeabi_dmul>
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	4640      	mov	r0, r8
 80040ea:	4649      	mov	r1, r9
 80040ec:	f7fc f83e 	bl	800016c <__adddf3>
 80040f0:	a32d      	add	r3, pc, #180	; (adr r3, 80041a8 <calibrate_mag_reading+0x170>)
 80040f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f6:	4680      	mov	r8, r0
 80040f8:	4689      	mov	r9, r1
 80040fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040fe:	f7fc f9eb 	bl	80004d8 <__aeabi_dmul>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4640      	mov	r0, r8
 8004108:	4649      	mov	r1, r9
 800410a:	f7fc f82f 	bl	800016c <__adddf3>
	XIMU_sens.mz = MAG_TRANSF_31*m[0] + MAG_TRANSF_32*m[1] + MAG_TRANSF_33*m[2];
 800410e:	a328      	add	r3, pc, #160	; (adr r3, 80041b0 <calibrate_mag_reading+0x178>)
 8004110:	e9d3 2300 	ldrd	r2, r3, [r3]
	XIMU_sens.my = MAG_TRANSF_21*m[0] + MAG_TRANSF_22*m[1] + MAG_TRANSF_23*m[2];
 8004114:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
	XIMU_sens.mz = MAG_TRANSF_31*m[0] + MAG_TRANSF_32*m[1] + MAG_TRANSF_33*m[2];
 8004118:	4630      	mov	r0, r6
 800411a:	4639      	mov	r1, r7
 800411c:	f7fc f9dc 	bl	80004d8 <__aeabi_dmul>
 8004120:	a325      	add	r3, pc, #148	; (adr r3, 80041b8 <calibrate_mag_reading+0x180>)
 8004122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004126:	4606      	mov	r6, r0
 8004128:	460f      	mov	r7, r1
 800412a:	4650      	mov	r0, sl
 800412c:	4659      	mov	r1, fp
 800412e:	f7fc f9d3 	bl	80004d8 <__aeabi_dmul>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4630      	mov	r0, r6
 8004138:	4639      	mov	r1, r7
 800413a:	f7fc f817 	bl	800016c <__adddf3>
 800413e:	a320      	add	r3, pc, #128	; (adr r3, 80041c0 <calibrate_mag_reading+0x188>)
 8004140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004144:	4606      	mov	r6, r0
 8004146:	460f      	mov	r7, r1
 8004148:	e9dd 0100 	ldrd	r0, r1, [sp]
 800414c:	f7fc f9c4 	bl	80004d8 <__aeabi_dmul>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4630      	mov	r0, r6
 8004156:	4639      	mov	r1, r7
 8004158:	f7fc f808 	bl	800016c <__adddf3>
 800415c:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
}
 8004160:	b002      	add	sp, #8
 8004162:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 8004166:	bf00      	nop
 8004168:	810624dd 	.word	0x810624dd
 800416c:	40615795 	.word	0x40615795
 8004170:	189374bc 	.word	0x189374bc
 8004174:	40706804 	.word	0x40706804
 8004178:	fdf3b646 	.word	0xfdf3b646
 800417c:	405268d4 	.word	0x405268d4
 8004180:	51eb851f 	.word	0x51eb851f
 8004184:	3ff31eb8 	.word	0x3ff31eb8
 8004188:	e5604189 	.word	0xe5604189
 800418c:	bfab22d0 	.word	0xbfab22d0
 8004190:	53f7ced9 	.word	0x53f7ced9
 8004194:	3faba5e3 	.word	0x3faba5e3
 8004198:	020c49ba 	.word	0x020c49ba
 800419c:	bfa6872b 	.word	0xbfa6872b
 80041a0:	78d4fdf4 	.word	0x78d4fdf4
 80041a4:	3ff326e9 	.word	0x3ff326e9
 80041a8:	47ae147b 	.word	0x47ae147b
 80041ac:	3f847ae1 	.word	0x3f847ae1
 80041b0:	76c8b439 	.word	0x76c8b439
 80041b4:	bf9a9fbe 	.word	0xbf9a9fbe
 80041b8:	76c8b439 	.word	0x76c8b439
 80041bc:	bf8a9fbe 	.word	0xbf8a9fbe
 80041c0:	a5e353f8 	.word	0xa5e353f8
 80041c4:	3ff2c49b 	.word	0x3ff2c49b
 80041c8:	200005f8 	.word	0x200005f8

080041cc <calc_absolute_acceleration>:

void calc_absolute_acceleration() {
 80041cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	double ax = XIMU_sens.ax,	ay = XIMU_sens.ay,	az = XIMU_sens.az;
 80041d0:	49c9      	ldr	r1, [pc, #804]	; (80044f8 <calc_absolute_acceleration+0x32c>)
void calc_absolute_acceleration() {
 80041d2:	b099      	sub	sp, #100	; 0x64
	double q0 = XIMU_sens.q0,	q1 = XIMU_sens.q1,	q2 = XIMU_sens.q2,	q3 = XIMU_sens.q3;
 80041d4:	e9d1 8900 	ldrd	r8, r9, [r1]
 80041d8:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
	double ax = XIMU_sens.ax,	ay = XIMU_sens.ay,	az = XIMU_sens.az;
 80041dc:	e9d1 4508 	ldrd	r4, r5, [r1, #32]
 80041e0:	e9d1 ab0c 	ldrd	sl, fp, [r1, #48]	; 0x30
	double q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3, norm_2;
	q0q0 = q0 * q0;
 80041e4:	4642      	mov	r2, r8
 80041e6:	464b      	mov	r3, r9
	double ax = XIMU_sens.ax,	ay = XIMU_sens.ay,	az = XIMU_sens.az;
 80041e8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80041ec:	e9d1 450a 	ldrd	r4, r5, [r1, #40]	; 0x28
 80041f0:	e9cd ab04 	strd	sl, fp, [sp, #16]
	double q0 = XIMU_sens.q0,	q1 = XIMU_sens.q1,	q2 = XIMU_sens.q2,	q3 = XIMU_sens.q3;
 80041f4:	e9d1 ab06 	ldrd	sl, fp, [r1, #24]
	double ax = XIMU_sens.ax,	ay = XIMU_sens.ay,	az = XIMU_sens.az;
 80041f8:	e9cd 4500 	strd	r4, r5, [sp]
	double q0 = XIMU_sens.q0,	q1 = XIMU_sens.q1,	q2 = XIMU_sens.q2,	q3 = XIMU_sens.q3;
 80041fc:	e9d1 4504 	ldrd	r4, r5, [r1, #16]
	q0q0 = q0 * q0;
 8004200:	4640      	mov	r0, r8
 8004202:	4649      	mov	r1, r9
 8004204:	f7fc f968 	bl	80004d8 <__aeabi_dmul>
	q0q1 = q0 * q1;
 8004208:	4632      	mov	r2, r6
	q0q0 = q0 * q0;
 800420a:	e9cd 0106 	strd	r0, r1, [sp, #24]
	q0q1 = q0 * q1;
 800420e:	463b      	mov	r3, r7
 8004210:	4640      	mov	r0, r8
 8004212:	4649      	mov	r1, r9
 8004214:	f7fc f960 	bl	80004d8 <__aeabi_dmul>
	q0q2 = q0 * q2;
 8004218:	4622      	mov	r2, r4
	q0q1 = q0 * q1;
 800421a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	q0q2 = q0 * q2;
 800421e:	462b      	mov	r3, r5
 8004220:	4640      	mov	r0, r8
 8004222:	4649      	mov	r1, r9
 8004224:	f7fc f958 	bl	80004d8 <__aeabi_dmul>
	q0q3 = q0 * q3;
 8004228:	4652      	mov	r2, sl
	q0q2 = q0 * q2;
 800422a:	e9cd 0108 	strd	r0, r1, [sp, #32]
	q0q3 = q0 * q3;
 800422e:	465b      	mov	r3, fp
 8004230:	4640      	mov	r0, r8
 8004232:	4649      	mov	r1, r9
 8004234:	f7fc f950 	bl	80004d8 <__aeabi_dmul>
	q1q1 = q1 * q1;
 8004238:	4632      	mov	r2, r6
	q0q3 = q0 * q3;
 800423a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	q1q1 = q1 * q1;
 800423e:	463b      	mov	r3, r7
 8004240:	4630      	mov	r0, r6
 8004242:	4639      	mov	r1, r7
 8004244:	f7fc f948 	bl	80004d8 <__aeabi_dmul>
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004250:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004254:	f7fb ff8a 	bl	800016c <__adddf3>
	q1q2 = q1 * q2;
 8004258:	4622      	mov	r2, r4
 800425a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800425e:	462b      	mov	r3, r5
 8004260:	4630      	mov	r0, r6
 8004262:	4639      	mov	r1, r7
 8004264:	f7fc f938 	bl	80004d8 <__aeabi_dmul>
	q1q3 = q1 * q3;
 8004268:	4652      	mov	r2, sl
	q1q2 = q1 * q2;
 800426a:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	q1q3 = q1 * q3;
 800426e:	465b      	mov	r3, fp
 8004270:	4630      	mov	r0, r6
 8004272:	4639      	mov	r1, r7
 8004274:	f7fc f930 	bl	80004d8 <__aeabi_dmul>
	q2q2 = q2 * q2;
 8004278:	4622      	mov	r2, r4
	q1q3 = q1 * q3;
 800427a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	q2q2 = q2 * q2;
 800427e:	462b      	mov	r3, r5
 8004280:	4620      	mov	r0, r4
 8004282:	4629      	mov	r1, r5
 8004284:	f7fc f928 	bl	80004d8 <__aeabi_dmul>
	q2q3 = q2 * q3;
 8004288:	4652      	mov	r2, sl
	q2q2 = q2 * q2;
 800428a:	4680      	mov	r8, r0
 800428c:	4689      	mov	r9, r1
	q2q3 = q2 * q3;
 800428e:	465b      	mov	r3, fp
 8004290:	4620      	mov	r0, r4
 8004292:	4629      	mov	r1, r5
 8004294:	f7fc f920 	bl	80004d8 <__aeabi_dmul>
	q3q3 = q3 * q3;
 8004298:	4652      	mov	r2, sl
	q2q3 = q2 * q3;
 800429a:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
	q3q3 = q3 * q3;
 800429e:	465b      	mov	r3, fp
 80042a0:	4650      	mov	r0, sl
 80042a2:	4659      	mov	r1, fp
 80042a4:	f7fc f918 	bl	80004d8 <__aeabi_dmul>
 80042a8:	e9dd 4500 	ldrd	r4, r5, [sp]
 80042ac:	4682      	mov	sl, r0
 80042ae:	468b      	mov	fp, r1
 80042b0:	4622      	mov	r2, r4
 80042b2:	462b      	mov	r3, r5
 80042b4:	4620      	mov	r0, r4
 80042b6:	4629      	mov	r1, r5
 80042b8:	f7fb ff58 	bl	800016c <__adddf3>
	norm_2 = q0q0 + q1q1 + q2q2 + q3q3;
 80042bc:	4652      	mov	r2, sl
 80042be:	4604      	mov	r4, r0
 80042c0:	460d      	mov	r5, r1
 80042c2:	465b      	mov	r3, fp
 80042c4:	4640      	mov	r0, r8
 80042c6:	4649      	mov	r1, r9
 80042c8:	f7fb ff50 	bl	800016c <__adddf3>
 80042cc:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 80042d0:	4632      	mov	r2, r6
 80042d2:	463b      	mov	r3, r7
 80042d4:	f7fb ff4a 	bl	800016c <__adddf3>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	2000      	movs	r0, #0
 80042de:	4987      	ldr	r1, [pc, #540]	; (80044fc <calc_absolute_acceleration+0x330>)
 80042e0:	f7fc fa24 	bl	800072c <__aeabi_ddiv>

	XIMU_u.ax_abs = (ax*q0q0 + 2*az*q0q2 - 2*ay*q0q3 + ax*q1q1 + 2*ay*q1q2 + 2*az*q1q3 - ax*q2q2 - ax*q3q3)/norm_2;
 80042e4:	4632      	mov	r2, r6
 80042e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80042ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042ee:	463b      	mov	r3, r7
 80042f0:	f7fc f8f2 	bl	80004d8 <__aeabi_dmul>
 80042f4:	4642      	mov	r2, r8
 80042f6:	4606      	mov	r6, r0
 80042f8:	460f      	mov	r7, r1
 80042fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042fe:	464b      	mov	r3, r9
 8004300:	f7fc f8ea 	bl	80004d8 <__aeabi_dmul>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4630      	mov	r0, r6
 800430a:	4639      	mov	r1, r7
 800430c:	f7fb ff2c 	bl	8000168 <__aeabi_dsub>
 8004310:	4622      	mov	r2, r4
 8004312:	4606      	mov	r6, r0
 8004314:	460f      	mov	r7, r1
 8004316:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800431a:	462b      	mov	r3, r5
 800431c:	f7fc f8dc 	bl	80004d8 <__aeabi_dmul>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	4630      	mov	r0, r6
 8004326:	4639      	mov	r1, r7
 8004328:	f7fb ff20 	bl	800016c <__adddf3>
 800432c:	4652      	mov	r2, sl
 800432e:	4606      	mov	r6, r0
 8004330:	460f      	mov	r7, r1
 8004332:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004336:	465b      	mov	r3, fp
 8004338:	f7fc f8ce 	bl	80004d8 <__aeabi_dmul>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4630      	mov	r0, r6
 8004342:	4639      	mov	r1, r7
 8004344:	f7fb ff10 	bl	8000168 <__aeabi_dsub>
 8004348:	4622      	mov	r2, r4
 800434a:	4606      	mov	r6, r0
 800434c:	460f      	mov	r7, r1
 800434e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004352:	462b      	mov	r3, r5
 8004354:	f7fc f8c0 	bl	80004d8 <__aeabi_dmul>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4630      	mov	r0, r6
 800435e:	4639      	mov	r1, r7
 8004360:	f7fb ff02 	bl	8000168 <__aeabi_dsub>
 8004364:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004368:	4604      	mov	r4, r0
 800436a:	460d      	mov	r5, r1
 800436c:	4632      	mov	r2, r6
 800436e:	463b      	mov	r3, r7
 8004370:	4630      	mov	r0, r6
 8004372:	4639      	mov	r1, r7
 8004374:	f7fb fefa 	bl	800016c <__adddf3>
 8004378:	4606      	mov	r6, r0
 800437a:	460f      	mov	r7, r1
 800437c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	f7fb fef2 	bl	800016c <__adddf3>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4630      	mov	r0, r6
 800438e:	4639      	mov	r1, r7
 8004390:	f7fb feec 	bl	800016c <__adddf3>
 8004394:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8004398:	4632      	mov	r2, r6
 800439a:	463b      	mov	r3, r7
 800439c:	f7fc f89c 	bl	80004d8 <__aeabi_dmul>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4620      	mov	r0, r4
 80043a6:	4629      	mov	r1, r5
 80043a8:	f7fb fee0 	bl	800016c <__adddf3>
 80043ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80043b0:	f7fc f892 	bl	80004d8 <__aeabi_dmul>
 80043b4:	4c52      	ldr	r4, [pc, #328]	; (8004500 <calc_absolute_acceleration+0x334>)
 80043b6:	4632      	mov	r2, r6
 80043b8:	e9c4 0100 	strd	r0, r1, [r4]
 80043bc:	463b      	mov	r3, r7
 80043be:	4630      	mov	r0, r6
 80043c0:	4639      	mov	r1, r7
 80043c2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80043c6:	f7fb fed1 	bl	800016c <__adddf3>
	XIMU_u.ay_abs = (ay*q0q0 - 2*az*q0q1 + 2*ax*q0q3 - ay*q1q1 + 2*ax*q1q2 + ay*q2q2 + 2*az*q2q3 - ay*q3q3)/norm_2;
 80043ca:	4642      	mov	r2, r8
 80043cc:	4604      	mov	r4, r0
 80043ce:	460d      	mov	r5, r1
 80043d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043d4:	464b      	mov	r3, r9
 80043d6:	f7fb fec9 	bl	800016c <__adddf3>
 80043da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043de:	f7fc f87b 	bl	80004d8 <__aeabi_dmul>
 80043e2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80043e6:	4606      	mov	r6, r0
 80043e8:	460f      	mov	r7, r1
 80043ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043ee:	f7fc f873 	bl	80004d8 <__aeabi_dmul>
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	4630      	mov	r0, r6
 80043f8:	4639      	mov	r1, r7
 80043fa:	f7fb feb5 	bl	8000168 <__aeabi_dsub>
 80043fe:	4622      	mov	r2, r4
 8004400:	4606      	mov	r6, r0
 8004402:	460f      	mov	r7, r1
 8004404:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8004408:	462b      	mov	r3, r5
 800440a:	f7fc f865 	bl	80004d8 <__aeabi_dmul>
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	4630      	mov	r0, r6
 8004414:	4639      	mov	r1, r7
 8004416:	f7fb fea9 	bl	800016c <__adddf3>
 800441a:	4652      	mov	r2, sl
 800441c:	4606      	mov	r6, r0
 800441e:	460f      	mov	r7, r1
 8004420:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004424:	465b      	mov	r3, fp
 8004426:	f7fc f857 	bl	80004d8 <__aeabi_dmul>
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	4630      	mov	r0, r6
 8004430:	4639      	mov	r1, r7
 8004432:	f7fb fe99 	bl	8000168 <__aeabi_dsub>
 8004436:	4622      	mov	r2, r4
 8004438:	4606      	mov	r6, r0
 800443a:	460f      	mov	r7, r1
 800443c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004440:	462b      	mov	r3, r5
 8004442:	f7fc f849 	bl	80004d8 <__aeabi_dmul>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	4630      	mov	r0, r6
 800444c:	4639      	mov	r1, r7
 800444e:	f7fb fe8b 	bl	8000168 <__aeabi_dsub>
 8004452:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004456:	4604      	mov	r4, r0
 8004458:	460d      	mov	r5, r1
 800445a:	4610      	mov	r0, r2
 800445c:	4619      	mov	r1, r3
 800445e:	f7fb fe85 	bl	800016c <__adddf3>
 8004462:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004466:	4606      	mov	r6, r0
 8004468:	460f      	mov	r7, r1
 800446a:	4610      	mov	r0, r2
 800446c:	4619      	mov	r1, r3
 800446e:	f7fb fe7d 	bl	800016c <__adddf3>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4630      	mov	r0, r6
 8004478:	4639      	mov	r1, r7
 800447a:	f7fb fe77 	bl	800016c <__adddf3>
 800447e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004482:	4632      	mov	r2, r6
 8004484:	463b      	mov	r3, r7
 8004486:	f7fc f827 	bl	80004d8 <__aeabi_dmul>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4620      	mov	r0, r4
 8004490:	4629      	mov	r1, r5
 8004492:	f7fb fe6b 	bl	800016c <__adddf3>
 8004496:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800449a:	f7fc f81d 	bl	80004d8 <__aeabi_dmul>
 800449e:	4c18      	ldr	r4, [pc, #96]	; (8004500 <calc_absolute_acceleration+0x334>)
 80044a0:	4632      	mov	r2, r6
 80044a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80044a6:	463b      	mov	r3, r7
 80044a8:	4630      	mov	r0, r6
 80044aa:	4639      	mov	r1, r7
 80044ac:	f7fb fe5e 	bl	800016c <__adddf3>
	XIMU_u.az_abs = (az*q0q0 + 2*ay*q0q1 - 2*ax*q0q2 - az*q1q1 + 2*ax*q1q3 - az*q2q2 + 2*ay*q2q3 + az*q3q3)/norm_2;
 80044b0:	4652      	mov	r2, sl
 80044b2:	4604      	mov	r4, r0
 80044b4:	460d      	mov	r5, r1
 80044b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044ba:	465b      	mov	r3, fp
 80044bc:	f7fb fe56 	bl	800016c <__adddf3>
 80044c0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80044c4:	4652      	mov	r2, sl
 80044c6:	465b      	mov	r3, fp
 80044c8:	f7fc f806 	bl	80004d8 <__aeabi_dmul>
 80044cc:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80044d0:	4606      	mov	r6, r0
 80044d2:	460f      	mov	r7, r1
 80044d4:	4650      	mov	r0, sl
 80044d6:	4659      	mov	r1, fp
 80044d8:	f7fb fffe 	bl	80004d8 <__aeabi_dmul>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	4630      	mov	r0, r6
 80044e2:	4639      	mov	r1, r7
 80044e4:	f7fb fe40 	bl	8000168 <__aeabi_dsub>
 80044e8:	4622      	mov	r2, r4
 80044ea:	4606      	mov	r6, r0
 80044ec:	460f      	mov	r7, r1
 80044ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80044f2:	462b      	mov	r3, r5
 80044f4:	e006      	b.n	8004504 <calc_absolute_acceleration+0x338>
 80044f6:	bf00      	nop
 80044f8:	200005f8 	.word	0x200005f8
 80044fc:	3ff00000 	.word	0x3ff00000
 8004500:	20000778 	.word	0x20000778
 8004504:	f7fb ffe8 	bl	80004d8 <__aeabi_dmul>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4630      	mov	r0, r6
 800450e:	4639      	mov	r1, r7
 8004510:	f7fb fe2c 	bl	800016c <__adddf3>
 8004514:	4642      	mov	r2, r8
 8004516:	4606      	mov	r6, r0
 8004518:	460f      	mov	r7, r1
 800451a:	464b      	mov	r3, r9
 800451c:	4650      	mov	r0, sl
 800451e:	4659      	mov	r1, fp
 8004520:	f7fb ffda 	bl	80004d8 <__aeabi_dmul>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	4630      	mov	r0, r6
 800452a:	4639      	mov	r1, r7
 800452c:	f7fb fe1c 	bl	8000168 <__aeabi_dsub>
 8004530:	4622      	mov	r2, r4
 8004532:	4606      	mov	r6, r0
 8004534:	460f      	mov	r7, r1
 8004536:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800453a:	462b      	mov	r3, r5
 800453c:	f7fb ffcc 	bl	80004d8 <__aeabi_dmul>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4630      	mov	r0, r6
 8004546:	4639      	mov	r1, r7
 8004548:	f7fb fe0e 	bl	8000168 <__aeabi_dsub>
 800454c:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8004550:	4604      	mov	r4, r0
 8004552:	460d      	mov	r5, r1
 8004554:	4610      	mov	r0, r2
 8004556:	4619      	mov	r1, r3
 8004558:	f7fb fe08 	bl	800016c <__adddf3>
 800455c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004560:	4606      	mov	r6, r0
 8004562:	460f      	mov	r7, r1
 8004564:	4610      	mov	r0, r2
 8004566:	4619      	mov	r1, r3
 8004568:	f7fb fe00 	bl	800016c <__adddf3>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4630      	mov	r0, r6
 8004572:	4639      	mov	r1, r7
 8004574:	f7fb fdfa 	bl	800016c <__adddf3>
 8004578:	e9dd 2300 	ldrd	r2, r3, [sp]
 800457c:	f7fb ffac 	bl	80004d8 <__aeabi_dmul>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4620      	mov	r0, r4
 8004586:	4629      	mov	r1, r5
 8004588:	f7fb fdf0 	bl	800016c <__adddf3>
 800458c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004590:	f7fb ffa2 	bl	80004d8 <__aeabi_dmul>
 8004594:	4c02      	ldr	r4, [pc, #8]	; (80045a0 <calc_absolute_acceleration+0x3d4>)
 8004596:	e9c4 0104 	strd	r0, r1, [r4, #16]
}
 800459a:	b019      	add	sp, #100	; 0x64
 800459c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045a0:	20000778 	.word	0x20000778

080045a4 <calc_magnetic_orientation>:
	v[0] /= norm;
	v[1] /= norm;
	v[2] /= norm;
}

void calc_magnetic_orientation(){
 80045a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	double g[3];
	g[0] = -XIMU_sens.ax;
 80045a8:	4cd1      	ldr	r4, [pc, #836]	; (80048f0 <calc_magnetic_orientation+0x34c>)
void calc_magnetic_orientation(){
 80045aa:	b097      	sub	sp, #92	; 0x5c
	g[0] = -XIMU_sens.ax;
 80045ac:	6a67      	ldr	r7, [r4, #36]	; 0x24
	g[1] = -XIMU_sens.ay;
 80045ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	g[2] = -XIMU_sens.az;
 80045b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
	g[0] = -XIMU_sens.ax;
 80045b2:	6a26      	ldr	r6, [r4, #32]
	g[1] = -XIMU_sens.ay;
 80045b4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	g[2] = -XIMU_sens.az;
 80045b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
	g[1] = -XIMU_sens.ay;
 80045b8:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
	g[2] = -XIMU_sens.az;
 80045bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
	g[0] = -XIMU_sens.ax;
 80045c0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000

	normalize(g);
 80045c4:	a810      	add	r0, sp, #64	; 0x40
	g[0] = -XIMU_sens.ax;
 80045c6:	9711      	str	r7, [sp, #68]	; 0x44
	g[1] = -XIMU_sens.ay;
 80045c8:	9213      	str	r2, [sp, #76]	; 0x4c
	g[2] = -XIMU_sens.az;
 80045ca:	9315      	str	r3, [sp, #84]	; 0x54
	g[0] = -XIMU_sens.ax;
 80045cc:	9610      	str	r6, [sp, #64]	; 0x40
	g[1] = -XIMU_sens.ay;
 80045ce:	9512      	str	r5, [sp, #72]	; 0x48
	g[2] = -XIMU_sens.az;
 80045d0:	9114      	str	r1, [sp, #80]	; 0x50
	normalize(g);
 80045d2:	f7ff fcf3 	bl	8003fbc <normalize>
	 * 		+Z	-------------------------	-Z
	 *
	 */

	double m[3];
	m[0] = XIMU_sens.my;
 80045d6:	e9d4 8918 	ldrd	r8, r9, [r4, #96]	; 0x60
	m[1] = XIMU_sens.mx;
 80045da:	e9d4 6716 	ldrd	r6, r7, [r4, #88]	; 0x58
	m[2] = -XIMU_sens.mz;
 80045de:	e9d4 ab1a 	ldrd	sl, fp, [r4, #104]	; 0x68
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 80045e2:	4642      	mov	r2, r8
 80045e4:	464b      	mov	r3, r9
 80045e6:	4640      	mov	r0, r8
 80045e8:	4649      	mov	r1, r9
 80045ea:	f7fb ff75 	bl	80004d8 <__aeabi_dmul>
 80045ee:	4632      	mov	r2, r6
 80045f0:	4604      	mov	r4, r0
 80045f2:	460d      	mov	r5, r1
 80045f4:	463b      	mov	r3, r7
 80045f6:	4630      	mov	r0, r6
 80045f8:	4639      	mov	r1, r7
 80045fa:	f7fb ff6d 	bl	80004d8 <__aeabi_dmul>
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	4620      	mov	r0, r4
 8004604:	4629      	mov	r1, r5
 8004606:	f7fb fdb1 	bl	800016c <__adddf3>
 800460a:	4652      	mov	r2, sl
 800460c:	4604      	mov	r4, r0
 800460e:	460d      	mov	r5, r1
 8004610:	465b      	mov	r3, fp
 8004612:	4650      	mov	r0, sl
 8004614:	4659      	mov	r1, fp
 8004616:	f7fb ff5f 	bl	80004d8 <__aeabi_dmul>
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	4620      	mov	r0, r4
 8004620:	4629      	mov	r1, r5
 8004622:	f7fb fda3 	bl	800016c <__adddf3>
 8004626:	f008 fc13 	bl	800ce50 <sqrt>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	2000      	movs	r0, #0
 8004630:	49b0      	ldr	r1, [pc, #704]	; (80048f4 <calc_magnetic_orientation+0x350>)
 8004632:	f7fc f87b 	bl	800072c <__aeabi_ddiv>
 8004636:	4604      	mov	r4, r0
 8004638:	460d      	mov	r5, r1
	v[0] /= norm;
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	4640      	mov	r0, r8
 8004640:	4649      	mov	r1, r9
 8004642:	f7fb ff49 	bl	80004d8 <__aeabi_dmul>
	v[1] /= norm;
 8004646:	4622      	mov	r2, r4
	v[0] /= norm;
 8004648:	e9cd 0106 	strd	r0, r1, [sp, #24]
	v[1] /= norm;
 800464c:	462b      	mov	r3, r5
 800464e:	4630      	mov	r0, r6
 8004650:	4639      	mov	r1, r7
 8004652:	f7fb ff41 	bl	80004d8 <__aeabi_dmul>
 8004656:	4622      	mov	r2, r4
 8004658:	4606      	mov	r6, r0
 800465a:	460f      	mov	r7, r1
 800465c:	462b      	mov	r3, r5
 800465e:	4650      	mov	r0, sl
 8004660:	4659      	mov	r1, fp
 8004662:	f7fb ff39 	bl	80004d8 <__aeabi_dmul>
	normalize2(m);

	//step1: cross gravity(negative acceleration) and magnetic field to get reference direction of East
	double East_ref[3] = {0};

	East_ref[0] = g[1]*m[2] - g[2]*m[1];
 8004666:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 800466a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 800466e:	f101 4800 	add.w	r8, r1, #2147483648	; 0x80000000
 8004672:	4681      	mov	r9, r0
 8004674:	4602      	mov	r2, r0
 8004676:	4643      	mov	r3, r8
 8004678:	4620      	mov	r0, r4
 800467a:	4629      	mov	r1, r5
 800467c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004680:	f7fb ff2a 	bl	80004d8 <__aeabi_dmul>
 8004684:	4632      	mov	r2, r6
 8004686:	4604      	mov	r4, r0
 8004688:	460d      	mov	r5, r1
 800468a:	463b      	mov	r3, r7
 800468c:	4650      	mov	r0, sl
 800468e:	4659      	mov	r1, fp
 8004690:	f7fb ff22 	bl	80004d8 <__aeabi_dmul>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4620      	mov	r0, r4
 800469a:	4629      	mov	r1, r5
 800469c:	f7fb fd64 	bl	8000168 <__aeabi_dsub>
	East_ref[1] = g[2]*m[0] - g[0]*m[2];
 80046a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	East_ref[0] = g[1]*m[2] - g[2]*m[1];
 80046a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
	East_ref[1] = g[2]*m[0] - g[0]*m[2];
 80046a8:	4650      	mov	r0, sl
 80046aa:	4659      	mov	r1, fp
 80046ac:	e9cd ab00 	strd	sl, fp, [sp]
 80046b0:	f7fb ff12 	bl	80004d8 <__aeabi_dmul>
 80046b4:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80046b8:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 80046bc:	4604      	mov	r4, r0
 80046be:	460d      	mov	r5, r1
 80046c0:	464a      	mov	r2, r9
 80046c2:	4643      	mov	r3, r8
 80046c4:	4658      	mov	r0, fp
 80046c6:	4651      	mov	r1, sl
 80046c8:	f7fb ff06 	bl	80004d8 <__aeabi_dmul>
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	4620      	mov	r0, r4
 80046d2:	4629      	mov	r1, r5
 80046d4:	f7fb fd48 	bl	8000168 <__aeabi_dsub>
	East_ref[2] = g[0]*m[1] - g[1]*m[0];
 80046d8:	4632      	mov	r2, r6
	East_ref[1] = g[2]*m[0] - g[0]*m[2];
 80046da:	4680      	mov	r8, r0
 80046dc:	4689      	mov	r9, r1
	East_ref[2] = g[0]*m[1] - g[1]*m[0];
 80046de:	463b      	mov	r3, r7
 80046e0:	4658      	mov	r0, fp
 80046e2:	4651      	mov	r1, sl
 80046e4:	f7fb fef8 	bl	80004d8 <__aeabi_dmul>
 80046e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80046ec:	4604      	mov	r4, r0
 80046ee:	460d      	mov	r5, r1
 80046f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046f4:	f7fb fef0 	bl	80004d8 <__aeabi_dmul>
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	4620      	mov	r0, r4
 80046fe:	4629      	mov	r1, r5
 8004700:	f7fb fd32 	bl	8000168 <__aeabi_dsub>
 8004704:	4604      	mov	r4, r0
 8004706:	460d      	mov	r5, r1
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 8004708:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	f7fb fee2 	bl	80004d8 <__aeabi_dmul>
 8004714:	4642      	mov	r2, r8
 8004716:	4606      	mov	r6, r0
 8004718:	460f      	mov	r7, r1
 800471a:	464b      	mov	r3, r9
 800471c:	4640      	mov	r0, r8
 800471e:	4649      	mov	r1, r9
 8004720:	f7fb feda 	bl	80004d8 <__aeabi_dmul>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4630      	mov	r0, r6
 800472a:	4639      	mov	r1, r7
 800472c:	f7fb fd1e 	bl	800016c <__adddf3>
 8004730:	4622      	mov	r2, r4
 8004732:	4606      	mov	r6, r0
 8004734:	460f      	mov	r7, r1
 8004736:	462b      	mov	r3, r5
 8004738:	4620      	mov	r0, r4
 800473a:	4629      	mov	r1, r5
 800473c:	f7fb fecc 	bl	80004d8 <__aeabi_dmul>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4630      	mov	r0, r6
 8004746:	4639      	mov	r1, r7
 8004748:	f7fb fd10 	bl	800016c <__adddf3>
 800474c:	f008 fb80 	bl	800ce50 <sqrt>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	2000      	movs	r0, #0
 8004756:	4967      	ldr	r1, [pc, #412]	; (80048f4 <calc_magnetic_orientation+0x350>)
 8004758:	f7fb ffe8 	bl	800072c <__aeabi_ddiv>
 800475c:	4606      	mov	r6, r0
 800475e:	460f      	mov	r7, r1
	v[0] /= norm;
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004768:	f7fb feb6 	bl	80004d8 <__aeabi_dmul>
	v[1] /= norm;
 800476c:	4632      	mov	r2, r6
	v[0] /= norm;
 800476e:	e9cd 0104 	strd	r0, r1, [sp, #16]
	v[1] /= norm;
 8004772:	463b      	mov	r3, r7
 8004774:	4640      	mov	r0, r8
 8004776:	4649      	mov	r1, r9
 8004778:	f7fb feae 	bl	80004d8 <__aeabi_dmul>
	v[2] /= norm;
 800477c:	4632      	mov	r2, r6
	v[1] /= norm;
 800477e:	4680      	mov	r8, r0
 8004780:	4689      	mov	r9, r1
	v[2] /= norm;
 8004782:	463b      	mov	r3, r7
 8004784:	4620      	mov	r0, r4
 8004786:	4629      	mov	r1, r5
 8004788:	f7fb fea6 	bl	80004d8 <__aeabi_dmul>
	normalize2(East_ref);

	//step2: cross East and gravity(negative acceleration) to get reference direction of North
	double North_ref[3] = {0};

	North_ref[0] = East_ref[1]*g[2] - East_ref[2]*g[1];
 800478c:	e9dd 6700 	ldrd	r6, r7, [sp]
	v[2] /= norm;
 8004790:	e9cd 0108 	strd	r0, r1, [sp, #32]
	North_ref[0] = East_ref[1]*g[2] - East_ref[2]*g[1];
 8004794:	4642      	mov	r2, r8
 8004796:	464b      	mov	r3, r9
 8004798:	4630      	mov	r0, r6
 800479a:	4639      	mov	r1, r7
 800479c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80047a0:	f7fb fe9a 	bl	80004d8 <__aeabi_dmul>
 80047a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80047a8:	4604      	mov	r4, r0
 80047aa:	460d      	mov	r5, r1
 80047ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047b0:	f7fb fe92 	bl	80004d8 <__aeabi_dmul>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4620      	mov	r0, r4
 80047ba:	4629      	mov	r1, r5
 80047bc:	f7fb fcd4 	bl	8000168 <__aeabi_dsub>
	North_ref[1] = East_ref[2]*g[0] - East_ref[0]*g[2];
 80047c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
	North_ref[0] = East_ref[1]*g[2] - East_ref[2]*g[1];
 80047c4:	4680      	mov	r8, r0
 80047c6:	4689      	mov	r9, r1
	North_ref[1] = East_ref[2]*g[0] - East_ref[0]*g[2];
 80047c8:	4658      	mov	r0, fp
 80047ca:	4651      	mov	r1, sl
 80047cc:	f7fb fe84 	bl	80004d8 <__aeabi_dmul>
 80047d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047d4:	4604      	mov	r4, r0
 80047d6:	460d      	mov	r5, r1
 80047d8:	4630      	mov	r0, r6
 80047da:	4639      	mov	r1, r7
 80047dc:	e9cd 6700 	strd	r6, r7, [sp]
 80047e0:	f7fb fe7a 	bl	80004d8 <__aeabi_dmul>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	4620      	mov	r0, r4
 80047ea:	4629      	mov	r1, r5
 80047ec:	f7fb fcbc 	bl	8000168 <__aeabi_dsub>
	North_ref[2] = East_ref[0]*g[1] - East_ref[1]*g[0];
 80047f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	North_ref[1] = East_ref[2]*g[0] - East_ref[0]*g[2];
 80047f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
	North_ref[2] = East_ref[0]*g[1] - East_ref[1]*g[0];
 80047f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047fc:	f7fb fe6c 	bl	80004d8 <__aeabi_dmul>
 8004800:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004804:	4604      	mov	r4, r0
 8004806:	460d      	mov	r5, r1
 8004808:	4658      	mov	r0, fp
 800480a:	4651      	mov	r1, sl
 800480c:	f7fb fe64 	bl	80004d8 <__aeabi_dmul>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4620      	mov	r0, r4
 8004816:	4629      	mov	r1, r5
 8004818:	f7fb fca6 	bl	8000168 <__aeabi_dsub>
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 800481c:	4642      	mov	r2, r8
	North_ref[2] = East_ref[0]*g[1] - East_ref[1]*g[0];
 800481e:	4604      	mov	r4, r0
 8004820:	460d      	mov	r5, r1
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 8004822:	464b      	mov	r3, r9
 8004824:	4640      	mov	r0, r8
 8004826:	4649      	mov	r1, r9
 8004828:	f7fb fe56 	bl	80004d8 <__aeabi_dmul>
 800482c:	4606      	mov	r6, r0
 800482e:	460f      	mov	r7, r1
 8004830:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	f7fb fe4e 	bl	80004d8 <__aeabi_dmul>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4630      	mov	r0, r6
 8004842:	4639      	mov	r1, r7
 8004844:	f7fb fc92 	bl	800016c <__adddf3>
 8004848:	4622      	mov	r2, r4
 800484a:	4606      	mov	r6, r0
 800484c:	460f      	mov	r7, r1
 800484e:	462b      	mov	r3, r5
 8004850:	4620      	mov	r0, r4
 8004852:	4629      	mov	r1, r5
 8004854:	f7fb fe40 	bl	80004d8 <__aeabi_dmul>
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	4630      	mov	r0, r6
 800485e:	4639      	mov	r1, r7
 8004860:	f7fb fc84 	bl	800016c <__adddf3>
 8004864:	f008 faf4 	bl	800ce50 <sqrt>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	2000      	movs	r0, #0
 800486e:	4921      	ldr	r1, [pc, #132]	; (80048f4 <calc_magnetic_orientation+0x350>)
 8004870:	f7fb ff5c 	bl	800072c <__aeabi_ddiv>
 8004874:	4606      	mov	r6, r0
 8004876:	460f      	mov	r7, r1
	v[0] /= norm;
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4640      	mov	r0, r8
 800487e:	4649      	mov	r1, r9
 8004880:	f7fb fe2a 	bl	80004d8 <__aeabi_dmul>
	v[1] /= norm;
 8004884:	4632      	mov	r2, r6
 8004886:	463b      	mov	r3, r7
	v[0] /= norm;
 8004888:	4680      	mov	r8, r0
 800488a:	4689      	mov	r9, r1
	v[1] /= norm;
 800488c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004890:	f7fb fe22 	bl	80004d8 <__aeabi_dmul>
 8004894:	4686      	mov	lr, r0
 8004896:	468c      	mov	ip, r1
	v[2] /= norm;
 8004898:	4632      	mov	r2, r6
 800489a:	463b      	mov	r3, r7
 800489c:	4620      	mov	r0, r4
 800489e:	4629      	mov	r1, r5
	v[1] /= norm;
 80048a0:	4677      	mov	r7, lr
 80048a2:	4666      	mov	r6, ip
	v[2] /= norm;
 80048a4:	f7fb fe18 	bl	80004d8 <__aeabi_dmul>
	//the following is the TRANSPOSED rotation matrix.
	//to get the rotation matrix we normally use, the one that
	//store basis vectors as columns, do a transpose.
	m00 = East_ref[0];	m01 = East_ref[1];	m02 = East_ref[2];
	m10 = North_ref[0];	m11 = North_ref[1];	m12 = North_ref[2];
	m20 = -g[0];		m21 = -g[1];		m22 = -g[2];
 80048a8:	f10a 4400 	add.w	r4, sl, #2147483648	; 0x80000000
	v[2] /= norm;
 80048ac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

	//conversion from transposed rotation matrix to quaternion
	double t;
	if (m22 < 0){
 80048b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048b4:	2200      	movs	r2, #0
 80048b6:	2300      	movs	r3, #0
	m20 = -g[0];		m21 = -g[1];		m22 = -g[2];
 80048b8:	940f      	str	r4, [sp, #60]	; 0x3c
	if (m22 < 0){
 80048ba:	f7fc f89d 	bl	80009f8 <__aeabi_dcmpgt>
 80048be:	2800      	cmp	r0, #0
 80048c0:	f000 808b 	beq.w	80049da <calc_magnetic_orientation+0x436>
 80048c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80048c8:	4640      	mov	r0, r8
 80048ca:	4649      	mov	r1, r9
 80048cc:	f7fb fc4e 	bl	800016c <__adddf3>
 80048d0:	2200      	movs	r2, #0
 80048d2:	4b08      	ldr	r3, [pc, #32]	; (80048f4 <calc_magnetic_orientation+0x350>)
 80048d4:	4680      	mov	r8, r0
 80048d6:	4689      	mov	r9, r1
 80048d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048dc:	f7fb fc46 	bl	800016c <__adddf3>
		if (m00 > m11){
 80048e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048e4:	4604      	mov	r4, r0
 80048e6:	460d      	mov	r5, r1
 80048e8:	4638      	mov	r0, r7
 80048ea:	4631      	mov	r1, r6
 80048ec:	e004      	b.n	80048f8 <calc_magnetic_orientation+0x354>
 80048ee:	bf00      	nop
 80048f0:	200005f8 	.word	0x200005f8
 80048f4:	3ff00000 	.word	0x3ff00000
 80048f8:	f7fc f860 	bl	80009bc <__aeabi_dcmplt>
			t = 1 + m00 - m11 - m22;
 80048fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (m00 > m11){
 8004900:	2800      	cmp	r0, #0
 8004902:	d14b      	bne.n	800499c <calc_magnetic_orientation+0x3f8>
			XIMU_observ.mag_ref_q0 = m12-m21;
			XIMU_observ.mag_ref_q1 = t;
			XIMU_observ.mag_ref_q2 = m01+m10;
			XIMU_observ.mag_ref_q3 = m20+m02;
		}else{
			t = 1 - m00 + m11 - m22;
 8004904:	4620      	mov	r0, r4
 8004906:	4629      	mov	r1, r5
 8004908:	f7fb fc2e 	bl	8000168 <__aeabi_dsub>
 800490c:	463a      	mov	r2, r7
 800490e:	4633      	mov	r3, r6
 8004910:	f7fb fc2c 	bl	800016c <__adddf3>

			XIMU_observ.mag_ref_q0 = m20-m02;
 8004914:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
			t = 1 - m00 + m11 - m22;
 8004918:	4604      	mov	r4, r0
 800491a:	460d      	mov	r5, r1
			XIMU_observ.mag_ref_q0 = m20-m02;
 800491c:	4658      	mov	r0, fp
 800491e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004920:	f7fb fc22 	bl	8000168 <__aeabi_dsub>
 8004924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004928:	4606      	mov	r6, r0
 800492a:	460f      	mov	r7, r1
 800492c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004930:	f7fb fc1a 	bl	8000168 <__aeabi_dsub>
 8004934:	46a2      	mov	sl, r4
 8004936:	46ab      	mov	fp, r5
 8004938:	e9cd 0106 	strd	r0, r1, [sp, #24]
			 XIMU_observ.mag_ref_q3 = m01-m10;
		 }
	 }

	//normalize
	XIMU_observ.mag_ref_q0 *= 0.5f / sqrt(t);
 800493c:	4620      	mov	r0, r4
 800493e:	4629      	mov	r1, r5
 8004940:	f008 fa86 	bl	800ce50 <sqrt>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	2000      	movs	r0, #0
 800494a:	4950      	ldr	r1, [pc, #320]	; (8004a8c <calc_magnetic_orientation+0x4e8>)
 800494c:	f7fb feee 	bl	800072c <__aeabi_ddiv>
 8004950:	4604      	mov	r4, r0
 8004952:	460d      	mov	r5, r1
 8004954:	4622      	mov	r2, r4
 8004956:	462b      	mov	r3, r5
 8004958:	4630      	mov	r0, r6
 800495a:	4639      	mov	r1, r7
 800495c:	f7fb fdbc 	bl	80004d8 <__aeabi_dmul>
 8004960:	4e4b      	ldr	r6, [pc, #300]	; (8004a90 <calc_magnetic_orientation+0x4ec>)
	XIMU_observ.mag_ref_q1 *= 0.5f / sqrt(t);
 8004962:	4622      	mov	r2, r4
	XIMU_observ.mag_ref_q0 *= 0.5f / sqrt(t);
 8004964:	e9c6 0100 	strd	r0, r1, [r6]
	XIMU_observ.mag_ref_q1 *= 0.5f / sqrt(t);
 8004968:	462b      	mov	r3, r5
 800496a:	4640      	mov	r0, r8
 800496c:	4649      	mov	r1, r9
 800496e:	f7fb fdb3 	bl	80004d8 <__aeabi_dmul>
	XIMU_observ.mag_ref_q2 *= 0.5f / sqrt(t);
 8004972:	4652      	mov	r2, sl
	XIMU_observ.mag_ref_q1 *= 0.5f / sqrt(t);
 8004974:	e9c6 0102 	strd	r0, r1, [r6, #8]
	XIMU_observ.mag_ref_q2 *= 0.5f / sqrt(t);
 8004978:	465b      	mov	r3, fp
 800497a:	4620      	mov	r0, r4
 800497c:	4629      	mov	r1, r5
 800497e:	f7fb fdab 	bl	80004d8 <__aeabi_dmul>
	XIMU_observ.mag_ref_q3 *= 0.5f / sqrt(t);
 8004982:	4622      	mov	r2, r4
	XIMU_observ.mag_ref_q2 *= 0.5f / sqrt(t);
 8004984:	e9c6 0104 	strd	r0, r1, [r6, #16]
	XIMU_observ.mag_ref_q3 *= 0.5f / sqrt(t);
 8004988:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800498c:	462b      	mov	r3, r5
 800498e:	f7fb fda3 	bl	80004d8 <__aeabi_dmul>
 8004992:	e9c6 0106 	strd	r0, r1, [r6, #24]
}
 8004996:	b017      	add	sp, #92	; 0x5c
 8004998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			t = 1 + m00 - m11 - m22;
 800499c:	4620      	mov	r0, r4
 800499e:	4629      	mov	r1, r5
 80049a0:	f7fb fbe4 	bl	800016c <__adddf3>
 80049a4:	463a      	mov	r2, r7
 80049a6:	4633      	mov	r3, r6
 80049a8:	f7fb fbde 	bl	8000168 <__aeabi_dsub>
			XIMU_observ.mag_ref_q0 = m12-m21;
 80049ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			t = 1 + m00 - m11 - m22;
 80049b0:	4604      	mov	r4, r0
 80049b2:	460d      	mov	r5, r1
			XIMU_observ.mag_ref_q0 = m12-m21;
 80049b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049b8:	f7fb fbd8 	bl	800016c <__adddf3>
 80049bc:	465a      	mov	r2, fp
 80049be:	4653      	mov	r3, sl
 80049c0:	4606      	mov	r6, r0
 80049c2:	460f      	mov	r7, r1
 80049c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80049c8:	f7fb fbce 	bl	8000168 <__aeabi_dsub>
 80049cc:	46c2      	mov	sl, r8
 80049ce:	46cb      	mov	fp, r9
 80049d0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80049d4:	46a0      	mov	r8, r4
 80049d6:	46a9      	mov	r9, r5
 80049d8:	e7b0      	b.n	800493c <calc_magnetic_orientation+0x398>
 80049da:	4642      	mov	r2, r8
 80049dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80049e0:	464b      	mov	r3, r9
 80049e2:	f7fb fbc1 	bl	8000168 <__aeabi_dsub>
 80049e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80049ee:	2000      	movs	r0, #0
 80049f0:	4928      	ldr	r1, [pc, #160]	; (8004a94 <calc_magnetic_orientation+0x4f0>)
 80049f2:	f7fb fbb9 	bl	8000168 <__aeabi_dsub>
		 if (m00 < -m11){
 80049f6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80049fa:	4604      	mov	r4, r0
 80049fc:	4642      	mov	r2, r8
 80049fe:	464b      	mov	r3, r9
 8004a00:	460d      	mov	r5, r1
 8004a02:	4638      	mov	r0, r7
 8004a04:	f106 4100 	add.w	r1, r6, #2147483648	; 0x80000000
 8004a08:	f7fb fff6 	bl	80009f8 <__aeabi_dcmpgt>
			 t = 1 - m00 - m11 + m22;
 8004a0c:	4642      	mov	r2, r8
 8004a0e:	464b      	mov	r3, r9
		 if (m00 < -m11){
 8004a10:	b9e0      	cbnz	r0, 8004a4c <calc_magnetic_orientation+0x4a8>
			 t = 1 + m00 + m11 + m22;
 8004a12:	4620      	mov	r0, r4
 8004a14:	4629      	mov	r1, r5
 8004a16:	f7fb fba9 	bl	800016c <__adddf3>
 8004a1a:	463a      	mov	r2, r7
 8004a1c:	4633      	mov	r3, r6
 8004a1e:	f7fb fba5 	bl	800016c <__adddf3>
			 XIMU_observ.mag_ref_q1 = m12-m21;
 8004a22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			 t = 1 + m00 + m11 + m22;
 8004a26:	4604      	mov	r4, r0
 8004a28:	460d      	mov	r5, r1
			 XIMU_observ.mag_ref_q1 = m12-m21;
 8004a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a2e:	f7fb fb9d 	bl	800016c <__adddf3>
			 XIMU_observ.mag_ref_q2 = m20-m02;
 8004a32:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
			 XIMU_observ.mag_ref_q1 = m12-m21;
 8004a36:	4680      	mov	r8, r0
 8004a38:	4689      	mov	r9, r1
			 XIMU_observ.mag_ref_q2 = m20-m02;
 8004a3a:	4658      	mov	r0, fp
 8004a3c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004a3e:	f7fb fb93 	bl	8000168 <__aeabi_dsub>
 8004a42:	4626      	mov	r6, r4
 8004a44:	4682      	mov	sl, r0
 8004a46:	468b      	mov	fp, r1
 8004a48:	462f      	mov	r7, r5
 8004a4a:	e777      	b.n	800493c <calc_magnetic_orientation+0x398>
			 t = 1 - m00 - m11 + m22;
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	4629      	mov	r1, r5
 8004a50:	f7fb fb8a 	bl	8000168 <__aeabi_dsub>
 8004a54:	463a      	mov	r2, r7
 8004a56:	4633      	mov	r3, r6
 8004a58:	f7fb fb86 	bl	8000168 <__aeabi_dsub>
 8004a5c:	465a      	mov	r2, fp
 8004a5e:	4653      	mov	r3, sl
 8004a60:	4604      	mov	r4, r0
 8004a62:	460d      	mov	r5, r1
 8004a64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004a68:	f7fb fb7e 	bl	8000168 <__aeabi_dsub>
 8004a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a70:	4680      	mov	r8, r0
 8004a72:	4689      	mov	r9, r1
 8004a74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a78:	f7fb fb76 	bl	8000168 <__aeabi_dsub>
 8004a7c:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8004a80:	4682      	mov	sl, r0
 8004a82:	468b      	mov	fp, r1
 8004a84:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004a88:	e758      	b.n	800493c <calc_magnetic_orientation+0x398>
 8004a8a:	bf00      	nop
 8004a8c:	3fe00000 	.word	0x3fe00000
 8004a90:	20000818 	.word	0x20000818
 8004a94:	3ff00000 	.word	0x3ff00000

08004a98 <build_data_str>:

void calc_absolute_position();
void calc_absolute_altitude();

void build_data_str(char* str){
 8004a98:	b570      	push	{r4, r5, r6, lr}

	char temp[30];
	char delim[2] = {'\t','\0'};
 8004a9a:	2309      	movs	r3, #9
	char term[2] = {'\n','\0'};
 8004a9c:	250a      	movs	r5, #10
void build_data_str(char* str){
 8004a9e:	4604      	mov	r4, r0


	itoa((int)(XIMU_sens.q0),temp,10);
 8004aa0:	4ecf      	ldr	r6, [pc, #828]	; (8004de0 <build_data_str+0x348>)
void build_data_str(char* str){
 8004aa2:	b08a      	sub	sp, #40	; 0x28
	itoa((int)(XIMU_sens.q0),temp,10);
 8004aa4:	e9d6 0100 	ldrd	r0, r1, [r6]
	char delim[2] = {'\t','\0'};
 8004aa8:	f8ad 3000 	strh.w	r3, [sp]
	char term[2] = {'\n','\0'};
 8004aac:	f8ad 5004 	strh.w	r5, [sp, #4]
	itoa((int)(XIMU_sens.q0),temp,10);
 8004ab0:	f7fb ffc2 	bl	8000a38 <__aeabi_d2iz>
 8004ab4:	462a      	mov	r2, r5
 8004ab6:	a902      	add	r1, sp, #8
 8004ab8:	f005 fd06 	bl	800a4c8 <itoa>
	strcpy(str,temp);
 8004abc:	a902      	add	r1, sp, #8
 8004abe:	4620      	mov	r0, r4
 8004ac0:	f005 fd52 	bl	800a568 <stpcpy>
	strcat(str,delim);
 8004ac4:	4669      	mov	r1, sp
 8004ac6:	f005 fd58 	bl	800a57a <strcpy>

	itoa((int)(XIMU_sens.q1),temp,10);
 8004aca:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
 8004ace:	f7fb ffb3 	bl	8000a38 <__aeabi_d2iz>
 8004ad2:	462a      	mov	r2, r5
 8004ad4:	a902      	add	r1, sp, #8
 8004ad6:	f005 fcf7 	bl	800a4c8 <itoa>
 8004ada:	4620      	mov	r0, r4
 8004adc:	f7fb fb38 	bl	8000150 <strlen>
	strcat(str,temp);
 8004ae0:	a902      	add	r1, sp, #8
 8004ae2:	4420      	add	r0, r4
 8004ae4:	f005 fd40 	bl	800a568 <stpcpy>
	strcat(str,delim);
 8004ae8:	4669      	mov	r1, sp
 8004aea:	f005 fd46 	bl	800a57a <strcpy>

	itoa((int)(XIMU_sens.q2),temp,10);
 8004aee:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 8004af2:	f7fb ffa1 	bl	8000a38 <__aeabi_d2iz>
 8004af6:	462a      	mov	r2, r5
 8004af8:	a902      	add	r1, sp, #8
 8004afa:	f005 fce5 	bl	800a4c8 <itoa>
 8004afe:	4620      	mov	r0, r4
 8004b00:	f7fb fb26 	bl	8000150 <strlen>
	strcat(str,temp);
 8004b04:	a902      	add	r1, sp, #8
 8004b06:	4420      	add	r0, r4
 8004b08:	f005 fd2e 	bl	800a568 <stpcpy>
	strcat(str,delim);
 8004b0c:	4669      	mov	r1, sp
 8004b0e:	f005 fd34 	bl	800a57a <strcpy>

	itoa((int)(XIMU_sens.q3),temp,10);
 8004b12:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
 8004b16:	f7fb ff8f 	bl	8000a38 <__aeabi_d2iz>
 8004b1a:	462a      	mov	r2, r5
 8004b1c:	a902      	add	r1, sp, #8
 8004b1e:	f005 fcd3 	bl	800a4c8 <itoa>
 8004b22:	4620      	mov	r0, r4
 8004b24:	f7fb fb14 	bl	8000150 <strlen>
	strcat(str,temp);
 8004b28:	a902      	add	r1, sp, #8
 8004b2a:	4420      	add	r0, r4
 8004b2c:	f005 fd1c 	bl	800a568 <stpcpy>
	strcat(str,delim);
 8004b30:	4669      	mov	r1, sp
 8004b32:	f005 fd22 	bl	800a57a <strcpy>

	itoa((int)(XIMU_sens.ax*1000),temp,10);
 8004b36:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
 8004b3a:	4baa      	ldr	r3, [pc, #680]	; (8004de4 <build_data_str+0x34c>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f7fb fccb 	bl	80004d8 <__aeabi_dmul>
 8004b42:	f7fb ff79 	bl	8000a38 <__aeabi_d2iz>
 8004b46:	462a      	mov	r2, r5
 8004b48:	a902      	add	r1, sp, #8
 8004b4a:	f005 fcbd 	bl	800a4c8 <itoa>
 8004b4e:	4620      	mov	r0, r4
 8004b50:	f7fb fafe 	bl	8000150 <strlen>
	strcat(str,temp);
 8004b54:	a902      	add	r1, sp, #8
 8004b56:	4420      	add	r0, r4
 8004b58:	f005 fd06 	bl	800a568 <stpcpy>
	strcat(str,delim);
 8004b5c:	4669      	mov	r1, sp
 8004b5e:	f005 fd0c 	bl	800a57a <strcpy>

	itoa((int)(XIMU_sens.ay*1000),temp,10);
 8004b62:	e9d6 010a 	ldrd	r0, r1, [r6, #40]	; 0x28
 8004b66:	4b9f      	ldr	r3, [pc, #636]	; (8004de4 <build_data_str+0x34c>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f7fb fcb5 	bl	80004d8 <__aeabi_dmul>
 8004b6e:	f7fb ff63 	bl	8000a38 <__aeabi_d2iz>
 8004b72:	462a      	mov	r2, r5
 8004b74:	a902      	add	r1, sp, #8
 8004b76:	f005 fca7 	bl	800a4c8 <itoa>
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	f7fb fae8 	bl	8000150 <strlen>
	strcat(str,temp);
 8004b80:	a902      	add	r1, sp, #8
 8004b82:	4420      	add	r0, r4
 8004b84:	f005 fcf0 	bl	800a568 <stpcpy>
	strcat(str,delim);
 8004b88:	4669      	mov	r1, sp
 8004b8a:	f005 fcf6 	bl	800a57a <strcpy>

	itoa((int)(XIMU_sens.az*1000),temp,10);
 8004b8e:	e9d6 010c 	ldrd	r0, r1, [r6, #48]	; 0x30
 8004b92:	4b94      	ldr	r3, [pc, #592]	; (8004de4 <build_data_str+0x34c>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	f7fb fc9f 	bl	80004d8 <__aeabi_dmul>
 8004b9a:	f7fb ff4d 	bl	8000a38 <__aeabi_d2iz>
 8004b9e:	462a      	mov	r2, r5
 8004ba0:	a902      	add	r1, sp, #8
 8004ba2:	f005 fc91 	bl	800a4c8 <itoa>
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	f7fb fad2 	bl	8000150 <strlen>
	strcat(str,temp);
 8004bac:	a902      	add	r1, sp, #8
 8004bae:	4420      	add	r0, r4
 8004bb0:	f005 fcda 	bl	800a568 <stpcpy>
	strcat(str,delim);
 8004bb4:	4669      	mov	r1, sp
 8004bb6:	f005 fce0 	bl	800a57a <strcpy>

	itoa((int)(XIMU_sens.gx*1000),temp,10);
 8004bba:	e9d6 010e 	ldrd	r0, r1, [r6, #56]	; 0x38
 8004bbe:	4b89      	ldr	r3, [pc, #548]	; (8004de4 <build_data_str+0x34c>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f7fb fc89 	bl	80004d8 <__aeabi_dmul>
 8004bc6:	f7fb ff37 	bl	8000a38 <__aeabi_d2iz>
 8004bca:	462a      	mov	r2, r5
 8004bcc:	a902      	add	r1, sp, #8
 8004bce:	f005 fc7b 	bl	800a4c8 <itoa>
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f7fb fabc 	bl	8000150 <strlen>
	strcat(str,temp);
 8004bd8:	a902      	add	r1, sp, #8
 8004bda:	4420      	add	r0, r4
 8004bdc:	f005 fcc4 	bl	800a568 <stpcpy>
	strcat(str,delim);
 8004be0:	4669      	mov	r1, sp
 8004be2:	f005 fcca 	bl	800a57a <strcpy>

	itoa((int)(XIMU_sens.gy*1000),temp,10);
 8004be6:	e9d6 0110 	ldrd	r0, r1, [r6, #64]	; 0x40
 8004bea:	4b7e      	ldr	r3, [pc, #504]	; (8004de4 <build_data_str+0x34c>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	f7fb fc73 	bl	80004d8 <__aeabi_dmul>
 8004bf2:	f7fb ff21 	bl	8000a38 <__aeabi_d2iz>
 8004bf6:	462a      	mov	r2, r5
 8004bf8:	a902      	add	r1, sp, #8
 8004bfa:	f005 fc65 	bl	800a4c8 <itoa>
 8004bfe:	4620      	mov	r0, r4
 8004c00:	f7fb faa6 	bl	8000150 <strlen>
	strcat(str,temp);
 8004c04:	a902      	add	r1, sp, #8
 8004c06:	4420      	add	r0, r4
 8004c08:	f005 fcae 	bl	800a568 <stpcpy>
	strcat(str,delim);
 8004c0c:	4669      	mov	r1, sp
 8004c0e:	f005 fcb4 	bl	800a57a <strcpy>

	itoa((int)(XIMU_sens.gz*1000),temp,10);
 8004c12:	e9d6 0112 	ldrd	r0, r1, [r6, #72]	; 0x48
 8004c16:	4b73      	ldr	r3, [pc, #460]	; (8004de4 <build_data_str+0x34c>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f7fb fc5d 	bl	80004d8 <__aeabi_dmul>
 8004c1e:	f7fb ff0b 	bl	8000a38 <__aeabi_d2iz>
 8004c22:	462a      	mov	r2, r5
 8004c24:	a902      	add	r1, sp, #8
 8004c26:	f005 fc4f 	bl	800a4c8 <itoa>
 8004c2a:	4620      	mov	r0, r4
 8004c2c:	f7fb fa90 	bl	8000150 <strlen>
	strcat(str,temp);
 8004c30:	a902      	add	r1, sp, #8
 8004c32:	4420      	add	r0, r4
 8004c34:	f005 fc98 	bl	800a568 <stpcpy>
	strcat(str,delim);
 8004c38:	4669      	mov	r1, sp
 8004c3a:	f005 fc9e 	bl	800a57a <strcpy>

	itoa((int)(XIMU_sens.mx*1000),temp,10);
 8004c3e:	e9d6 0116 	ldrd	r0, r1, [r6, #88]	; 0x58
 8004c42:	4b68      	ldr	r3, [pc, #416]	; (8004de4 <build_data_str+0x34c>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	f7fb fc47 	bl	80004d8 <__aeabi_dmul>
 8004c4a:	f7fb fef5 	bl	8000a38 <__aeabi_d2iz>
 8004c4e:	462a      	mov	r2, r5
 8004c50:	a902      	add	r1, sp, #8
 8004c52:	f005 fc39 	bl	800a4c8 <itoa>
 8004c56:	4620      	mov	r0, r4
 8004c58:	f7fb fa7a 	bl	8000150 <strlen>
	strcat(str,temp);
 8004c5c:	a902      	add	r1, sp, #8
 8004c5e:	4420      	add	r0, r4
 8004c60:	f005 fc82 	bl	800a568 <stpcpy>
	strcat(str,delim);
 8004c64:	4669      	mov	r1, sp
 8004c66:	f005 fc88 	bl	800a57a <strcpy>

	itoa((int)(XIMU_sens.my*1000),temp,10);
 8004c6a:	e9d6 0118 	ldrd	r0, r1, [r6, #96]	; 0x60
 8004c6e:	4b5d      	ldr	r3, [pc, #372]	; (8004de4 <build_data_str+0x34c>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	f7fb fc31 	bl	80004d8 <__aeabi_dmul>
 8004c76:	f7fb fedf 	bl	8000a38 <__aeabi_d2iz>
 8004c7a:	462a      	mov	r2, r5
 8004c7c:	a902      	add	r1, sp, #8
 8004c7e:	f005 fc23 	bl	800a4c8 <itoa>
 8004c82:	4620      	mov	r0, r4
 8004c84:	f7fb fa64 	bl	8000150 <strlen>
	strcat(str,temp);
 8004c88:	a902      	add	r1, sp, #8
 8004c8a:	4420      	add	r0, r4
 8004c8c:	f005 fc6c 	bl	800a568 <stpcpy>
	strcat(str,delim);
 8004c90:	4669      	mov	r1, sp
 8004c92:	f005 fc72 	bl	800a57a <strcpy>

	itoa((int)(XIMU_sens.mz*1000),temp,10);
 8004c96:	e9d6 011a 	ldrd	r0, r1, [r6, #104]	; 0x68
 8004c9a:	4b52      	ldr	r3, [pc, #328]	; (8004de4 <build_data_str+0x34c>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f7fb fc1b 	bl	80004d8 <__aeabi_dmul>
 8004ca2:	f7fb fec9 	bl	8000a38 <__aeabi_d2iz>
 8004ca6:	462a      	mov	r2, r5
 8004ca8:	a902      	add	r1, sp, #8
 8004caa:	f005 fc0d 	bl	800a4c8 <itoa>
 8004cae:	4620      	mov	r0, r4
 8004cb0:	f7fb fa4e 	bl	8000150 <strlen>
	strcat(str,temp);
 8004cb4:	a902      	add	r1, sp, #8
 8004cb6:	4420      	add	r0, r4
 8004cb8:	f005 fc56 	bl	800a568 <stpcpy>
	strcat(str,delim);
 8004cbc:	4669      	mov	r1, sp
 8004cbe:	f005 fc5c 	bl	800a57a <strcpy>

	itoa((int)(XIMU_sens.pressure*1000),temp,10);
 8004cc2:	e9d6 011e 	ldrd	r0, r1, [r6, #120]	; 0x78
 8004cc6:	4b47      	ldr	r3, [pc, #284]	; (8004de4 <build_data_str+0x34c>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f7fb fc05 	bl	80004d8 <__aeabi_dmul>
 8004cce:	f7fb feb3 	bl	8000a38 <__aeabi_d2iz>
 8004cd2:	462a      	mov	r2, r5
 8004cd4:	a902      	add	r1, sp, #8
 8004cd6:	f005 fbf7 	bl	800a4c8 <itoa>
 8004cda:	4620      	mov	r0, r4
 8004cdc:	f7fb fa38 	bl	8000150 <strlen>
	strcat(str,temp);
 8004ce0:	a902      	add	r1, sp, #8
 8004ce2:	4420      	add	r0, r4
 8004ce4:	f005 fc40 	bl	800a568 <stpcpy>
	strcat(str,delim);
 8004ce8:	4669      	mov	r1, sp
 8004cea:	f005 fc46 	bl	800a57a <strcpy>

	itoa((int)(XIMU_sens.temperature*1000),temp,10);
 8004cee:	e9d6 0120 	ldrd	r0, r1, [r6, #128]	; 0x80
 8004cf2:	4b3c      	ldr	r3, [pc, #240]	; (8004de4 <build_data_str+0x34c>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f7fb fbef 	bl	80004d8 <__aeabi_dmul>
 8004cfa:	f7fb fe9d 	bl	8000a38 <__aeabi_d2iz>
 8004cfe:	462a      	mov	r2, r5
 8004d00:	a902      	add	r1, sp, #8
 8004d02:	f005 fbe1 	bl	800a4c8 <itoa>
 8004d06:	4620      	mov	r0, r4
 8004d08:	f7fb fa22 	bl	8000150 <strlen>
	strcat(str,temp);
 8004d0c:	a902      	add	r1, sp, #8
 8004d0e:	4420      	add	r0, r4
 8004d10:	f005 fc2a 	bl	800a568 <stpcpy>
	strcat(str,delim);
 8004d14:	4669      	mov	r1, sp
 8004d16:	f005 fc30 	bl	800a57a <strcpy>

	itoa((int)(XIMU_sens.lat*1000000),temp,10);
 8004d1a:	a32f      	add	r3, pc, #188	; (adr r3, 8004dd8 <build_data_str+0x340>)
 8004d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d20:	e9d6 0124 	ldrd	r0, r1, [r6, #144]	; 0x90
 8004d24:	f7fb fbd8 	bl	80004d8 <__aeabi_dmul>
 8004d28:	f7fb fe86 	bl	8000a38 <__aeabi_d2iz>
 8004d2c:	462a      	mov	r2, r5
 8004d2e:	a902      	add	r1, sp, #8
 8004d30:	f005 fbca 	bl	800a4c8 <itoa>
 8004d34:	4620      	mov	r0, r4
 8004d36:	f7fb fa0b 	bl	8000150 <strlen>
	strcat(str,temp);
 8004d3a:	a902      	add	r1, sp, #8
 8004d3c:	4420      	add	r0, r4
 8004d3e:	f005 fc13 	bl	800a568 <stpcpy>
	strcat(str,delim);
 8004d42:	4669      	mov	r1, sp
 8004d44:	f005 fc19 	bl	800a57a <strcpy>

	itoa((int)(XIMU_sens.lon*1000000),temp,10);
 8004d48:	a323      	add	r3, pc, #140	; (adr r3, 8004dd8 <build_data_str+0x340>)
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	e9d6 0126 	ldrd	r0, r1, [r6, #152]	; 0x98
 8004d52:	f7fb fbc1 	bl	80004d8 <__aeabi_dmul>
 8004d56:	f7fb fe6f 	bl	8000a38 <__aeabi_d2iz>
 8004d5a:	462a      	mov	r2, r5
 8004d5c:	a902      	add	r1, sp, #8
 8004d5e:	f005 fbb3 	bl	800a4c8 <itoa>
 8004d62:	4620      	mov	r0, r4
 8004d64:	f7fb f9f4 	bl	8000150 <strlen>
	strcat(str,temp);
 8004d68:	a902      	add	r1, sp, #8
 8004d6a:	4420      	add	r0, r4
 8004d6c:	f005 fbfc 	bl	800a568 <stpcpy>
	strcat(str,delim);
 8004d70:	4669      	mov	r1, sp
 8004d72:	f005 fc02 	bl	800a57a <strcpy>

	itoa((int)(XIMU_sens.qag_ts),temp,10);
 8004d76:	462a      	mov	r2, r5
 8004d78:	a902      	add	r1, sp, #8
 8004d7a:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8004d7c:	f005 fba4 	bl	800a4c8 <itoa>
 8004d80:	4620      	mov	r0, r4
 8004d82:	f7fb f9e5 	bl	8000150 <strlen>
	strcat(str,temp);
 8004d86:	a902      	add	r1, sp, #8
 8004d88:	4420      	add	r0, r4
 8004d8a:	f005 fbed 	bl	800a568 <stpcpy>
	strcat(str,delim);
 8004d8e:	4669      	mov	r1, sp
 8004d90:	f005 fbf3 	bl	800a57a <strcpy>

	itoa((int)(XIMU_sens.m_ts),temp,10);
 8004d94:	462a      	mov	r2, r5
 8004d96:	a902      	add	r1, sp, #8
 8004d98:	6f30      	ldr	r0, [r6, #112]	; 0x70
 8004d9a:	f005 fb95 	bl	800a4c8 <itoa>
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f7fb f9d6 	bl	8000150 <strlen>
	strcat(str,temp);
 8004da4:	a902      	add	r1, sp, #8
 8004da6:	4420      	add	r0, r4
 8004da8:	f005 fbde 	bl	800a568 <stpcpy>
	strcat(str,delim);
 8004dac:	4669      	mov	r1, sp
 8004dae:	f005 fbe4 	bl	800a57a <strcpy>

	itoa((int)(XIMU_sens.pt_ts),temp,10);
 8004db2:	462a      	mov	r2, r5
 8004db4:	a902      	add	r1, sp, #8
 8004db6:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
 8004dba:	f005 fb85 	bl	800a4c8 <itoa>
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	f7fb f9c6 	bl	8000150 <strlen>
	strcat(str,temp);
 8004dc4:	a902      	add	r1, sp, #8
 8004dc6:	4420      	add	r0, r4
 8004dc8:	f005 fbce 	bl	800a568 <stpcpy>
	strcat(str,delim);
 8004dcc:	4669      	mov	r1, sp
 8004dce:	f005 fbd4 	bl	800a57a <strcpy>

	itoa((int)(XIMU_sens.gps_ts),temp,10);
 8004dd2:	462a      	mov	r2, r5
 8004dd4:	e008      	b.n	8004de8 <build_data_str+0x350>
 8004dd6:	bf00      	nop
 8004dd8:	00000000 	.word	0x00000000
 8004ddc:	412e8480 	.word	0x412e8480
 8004de0:	200005f8 	.word	0x200005f8
 8004de4:	408f4000 	.word	0x408f4000
 8004de8:	a902      	add	r1, sp, #8
 8004dea:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
 8004dee:	f005 fb6b 	bl	800a4c8 <itoa>
 8004df2:	4620      	mov	r0, r4
 8004df4:	f7fb f9ac 	bl	8000150 <strlen>
	strcat(str,temp);
 8004df8:	a902      	add	r1, sp, #8
 8004dfa:	4420      	add	r0, r4
 8004dfc:	f005 fbb4 	bl	800a568 <stpcpy>
	strcat(str,term);
 8004e00:	a901      	add	r1, sp, #4
 8004e02:	f005 fbba 	bl	800a57a <strcpy>
}
 8004e06:	b00a      	add	sp, #40	; 0x28
 8004e08:	bd70      	pop	{r4, r5, r6, pc}
 8004e0a:	bf00      	nop

08004e0c <GNSS_set_huart>:
 */

#include "gnss.h"

void GNSS_set_huart(UART_HandleTypeDef* huart){
	huartx = huart;
 8004e0c:	4b01      	ldr	r3, [pc, #4]	; (8004e14 <GNSS_set_huart+0x8>)
 8004e0e:	6018      	str	r0, [r3, #0]
}
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20000d10 	.word	0x20000d10

08004e18 <GNSS_Init>:
 * initializes the GNSS interrupt.
 *
 * call this function before main loop.
 */
void GNSS_Init(){
	HAL_UART_Receive_DMA(huartx, GNSS.dma_buffer, DMA_BUFFER_SIZE);
 8004e18:	4b03      	ldr	r3, [pc, #12]	; (8004e28 <GNSS_Init+0x10>)
 8004e1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e1e:	6818      	ldr	r0, [r3, #0]
 8004e20:	4902      	ldr	r1, [pc, #8]	; (8004e2c <GNSS_Init+0x14>)
 8004e22:	f003 ba35 	b.w	8008290 <HAL_UART_Receive_DMA>
 8004e26:	bf00      	nop
 8004e28:	20000d10 	.word	0x20000d10
 8004e2c:	20000850 	.word	0x20000850

08004e30 <GNSS_RX_Update>:
	//https://www.devcoons.com/stm32-uart-receive-unknown-size-data-using-dma-and-freertos/
}

int GNSS_RX_Update(){
 8004e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e34:	b0b5      	sub	sp, #212	; 0xd4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e36:	b672      	cpsid	i

	__disable_irq();//I don't understand this
	int i = DMA_BUFFER_SIZE - huartx->hdmarx->Instance->CNDTR; //last byte received
 8004e38:	4b85      	ldr	r3, [pc, #532]	; (8005050 <GNSS_RX_Update+0x220>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f5c3 6b80 	rsb	fp, r3, #1024	; 0x400
  __ASM volatile ("cpsie i" : : : "memory");
 8004e46:	b662      	cpsie	i
	__enable_irq();//I don't understand this

	int new_information = 0;
 8004e48:	f04f 0800 	mov.w	r8, #0
 8004e4c:	f8df a208 	ldr.w	sl, [pc, #520]	; 8005058 <GNSS_RX_Update+0x228>
		GNSS.message_buffer[counter] = '\n';
		GNSS.message_buffer[counter+1] = '\0';
		GNSS.start = end;

		//parse message if it is GNGGA
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8004e50:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800505c <GNSS_RX_Update+0x22c>

		if (str != NULL){
			char fields[NUM_FIELDS][MAX_FIELD_SIZE];
			parse_GNGGA(GNSS.message_buffer,fields);
			//field 1: UTC time
			sscanf(fields[1],"%2d%2d%2d.%3d",&GNSS.GNGGA.UTC_Hour,&GNSS.GNGGA.UTC_Min,&GNSS.GNGGA.UTC_Second,&GNSS.GNGGA.UTC_Millis);
 8004e54:	f50a 638e 	add.w	r3, sl, #1136	; 0x470
 8004e58:	9303      	str	r3, [sp, #12]
		int counter = 0;
 8004e5a:	2700      	movs	r7, #0
		GNSS.message_buffer[counter] = '\n';
 8004e5c:	260a      	movs	r6, #10
 8004e5e:	f8da 4464 	ldr.w	r4, [sl, #1124]	; 0x464
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8004e62:	4d7c      	ldr	r5, [pc, #496]	; (8005054 <GNSS_RX_Update+0x224>)
	while (GNSS.start != i){
 8004e64:	455c      	cmp	r4, fp
 8004e66:	f000 80e5 	beq.w	8005034 <GNSS_RX_Update+0x204>
		if (GNSS.dma_buffer[GNSS.start] != '$'){
 8004e6a:	f81a 3004 	ldrb.w	r3, [sl, r4]
 8004e6e:	2b24      	cmp	r3, #36	; 0x24
 8004e70:	f040 80d4 	bne.w	800501c <GNSS_RX_Update+0x1ec>
int GNSS_RX_Update(){
 8004e74:	4623      	mov	r3, r4
 8004e76:	e002      	b.n	8004e7e <GNSS_RX_Update+0x4e>
			if (GNSS.dma_buffer[end] == '\n'){
 8004e78:	2a0a      	cmp	r2, #10
 8004e7a:	f000 80df 	beq.w	800503c <GNSS_RX_Update+0x20c>
		for(end = GNSS.start; end != i; end = (end + 1) % DMA_BUFFER_SIZE){
 8004e7e:	3301      	adds	r3, #1
 8004e80:	425a      	negs	r2, r3
 8004e82:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004e86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e8a:	bf58      	it	pl
 8004e8c:	4253      	negpl	r3, r2
 8004e8e:	459b      	cmp	fp, r3
 8004e90:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8004e94:	d1f0      	bne.n	8004e78 <GNSS_RX_Update+0x48>
		if (GNSS.dma_buffer[end] != '\n'){break;}//if end not found, return.
 8004e96:	2a0a      	cmp	r2, #10
 8004e98:	f040 80cc 	bne.w	8005034 <GNSS_RX_Update+0x204>
		for(end = GNSS.start; end != i; end = (end + 1) % DMA_BUFFER_SIZE){
 8004e9c:	465b      	mov	r3, fp
 8004e9e:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8005060 <GNSS_RX_Update+0x230>
		int counter = 0;
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	e000      	b.n	8004ea8 <GNSS_RX_Update+0x78>
			counter++;
 8004ea6:	4610      	mov	r0, r2
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 8004ea8:	1c61      	adds	r1, r4, #1
 8004eaa:	424a      	negs	r2, r1
 8004eac:	f3c2 0209 	ubfx	r2, r2, #0, #10
			GNSS.message_buffer[counter] = GNSS.dma_buffer[j];
 8004eb0:	f81a e004 	ldrb.w	lr, [sl, r4]
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 8004eb4:	f3c1 0409 	ubfx	r4, r1, #0, #10
 8004eb8:	bf58      	it	pl
 8004eba:	4254      	negpl	r4, r2
 8004ebc:	429c      	cmp	r4, r3
			GNSS.message_buffer[counter] = GNSS.dma_buffer[j];
 8004ebe:	f80c ef01 	strb.w	lr, [ip, #1]!
			counter++;
 8004ec2:	f100 0201 	add.w	r2, r0, #1
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 8004ec6:	d1ee      	bne.n	8004ea6 <GNSS_RX_Update+0x76>
 8004ec8:	3002      	adds	r0, #2
		GNSS.message_buffer[counter+1] = '\0';
 8004eca:	eb0a 0300 	add.w	r3, sl, r0
		GNSS.message_buffer[counter] = '\n';
 8004ece:	4452      	add	r2, sl
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8004ed0:	4649      	mov	r1, r9
 8004ed2:	4628      	mov	r0, r5
		GNSS.message_buffer[counter] = '\n';
 8004ed4:	f882 6400 	strb.w	r6, [r2, #1024]	; 0x400
		GNSS.start = end;
 8004ed8:	f8ca 4464 	str.w	r4, [sl, #1124]	; 0x464
		GNSS.message_buffer[counter+1] = '\0';
 8004edc:	f883 7400 	strb.w	r7, [r3, #1024]	; 0x400
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8004ee0:	f005 fb53 	bl	800a58a <strstr>
		if (str != NULL){
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	d0bd      	beq.n	8004e64 <GNSS_RX_Update+0x34>
        fields[current_field][current_pos]='\0';
 8004ee8:	2500      	movs	r5, #0
 8004eea:	f89a 1400 	ldrb.w	r1, [sl, #1024]	; 0x400
    unsigned char* ch_ptr = msg;
 8004eee:	4b59      	ldr	r3, [pc, #356]	; (8005054 <GNSS_RX_Update+0x224>)
 8004ef0:	aa07      	add	r2, sp, #28
    while (*ch_ptr != '\0'){
 8004ef2:	2900      	cmp	r1, #0
 8004ef4:	f000 80b9 	beq.w	800506a <GNSS_RX_Update+0x23a>
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004ef8:	292c      	cmp	r1, #44	; 0x2c
 8004efa:	f000 816c 	beq.w	80051d6 <GNSS_RX_Update+0x3a6>
 8004efe:	7858      	ldrb	r0, [r3, #1]
	        fields[current_field][current_pos] = *ch_ptr;
 8004f00:	7011      	strb	r1, [r2, #0]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004f02:	282c      	cmp	r0, #44	; 0x2c
	        ch_ptr++;
 8004f04:	f103 0101 	add.w	r1, r3, #1
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004f08:	f000 816c 	beq.w	80051e4 <GNSS_RX_Update+0x3b4>
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	f000 816f 	beq.w	80051f0 <GNSS_RX_Update+0x3c0>
 8004f12:	789c      	ldrb	r4, [r3, #2]
	        fields[current_field][current_pos] = *ch_ptr;
 8004f14:	7050      	strb	r0, [r2, #1]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004f16:	2c2c      	cmp	r4, #44	; 0x2c
	        ch_ptr++;
 8004f18:	f103 0102 	add.w	r1, r3, #2
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004f1c:	f000 816a 	beq.w	80051f4 <GNSS_RX_Update+0x3c4>
 8004f20:	2c00      	cmp	r4, #0
 8004f22:	f000 816d 	beq.w	8005200 <GNSS_RX_Update+0x3d0>
 8004f26:	78d8      	ldrb	r0, [r3, #3]
	        fields[current_field][current_pos] = *ch_ptr;
 8004f28:	7094      	strb	r4, [r2, #2]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004f2a:	282c      	cmp	r0, #44	; 0x2c
	        ch_ptr++;
 8004f2c:	f103 0103 	add.w	r1, r3, #3
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004f30:	f000 8168 	beq.w	8005204 <GNSS_RX_Update+0x3d4>
 8004f34:	2800      	cmp	r0, #0
 8004f36:	f000 8167 	beq.w	8005208 <GNSS_RX_Update+0x3d8>
 8004f3a:	791c      	ldrb	r4, [r3, #4]
	        fields[current_field][current_pos] = *ch_ptr;
 8004f3c:	70d0      	strb	r0, [r2, #3]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004f3e:	2c2c      	cmp	r4, #44	; 0x2c
	        ch_ptr++;
 8004f40:	f103 0104 	add.w	r1, r3, #4
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004f44:	f000 8162 	beq.w	800520c <GNSS_RX_Update+0x3dc>
 8004f48:	2c00      	cmp	r4, #0
 8004f4a:	f000 8161 	beq.w	8005210 <GNSS_RX_Update+0x3e0>
 8004f4e:	7958      	ldrb	r0, [r3, #5]
	        fields[current_field][current_pos] = *ch_ptr;
 8004f50:	7114      	strb	r4, [r2, #4]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004f52:	282c      	cmp	r0, #44	; 0x2c
	        ch_ptr++;
 8004f54:	f103 0105 	add.w	r1, r3, #5
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004f58:	f000 815c 	beq.w	8005214 <GNSS_RX_Update+0x3e4>
 8004f5c:	2800      	cmp	r0, #0
 8004f5e:	f000 815b 	beq.w	8005218 <GNSS_RX_Update+0x3e8>
 8004f62:	799c      	ldrb	r4, [r3, #6]
	        fields[current_field][current_pos] = *ch_ptr;
 8004f64:	7150      	strb	r0, [r2, #5]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004f66:	2c2c      	cmp	r4, #44	; 0x2c
	        ch_ptr++;
 8004f68:	f103 0106 	add.w	r1, r3, #6
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004f6c:	f000 8158 	beq.w	8005220 <GNSS_RX_Update+0x3f0>
 8004f70:	2c00      	cmp	r4, #0
 8004f72:	f000 8153 	beq.w	800521c <GNSS_RX_Update+0x3ec>
 8004f76:	79d8      	ldrb	r0, [r3, #7]
	        fields[current_field][current_pos] = *ch_ptr;
 8004f78:	7194      	strb	r4, [r2, #6]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004f7a:	282c      	cmp	r0, #44	; 0x2c
	        ch_ptr++;
 8004f7c:	f103 0107 	add.w	r1, r3, #7
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004f80:	f000 8150 	beq.w	8005224 <GNSS_RX_Update+0x3f4>
 8004f84:	2800      	cmp	r0, #0
 8004f86:	f000 814f 	beq.w	8005228 <GNSS_RX_Update+0x3f8>
 8004f8a:	7a1c      	ldrb	r4, [r3, #8]
	        fields[current_field][current_pos] = *ch_ptr;
 8004f8c:	71d0      	strb	r0, [r2, #7]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004f8e:	2c2c      	cmp	r4, #44	; 0x2c
	        ch_ptr++;
 8004f90:	f103 0108 	add.w	r1, r3, #8
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004f94:	f000 814a 	beq.w	800522c <GNSS_RX_Update+0x3fc>
 8004f98:	2c00      	cmp	r4, #0
 8004f9a:	f000 8149 	beq.w	8005230 <GNSS_RX_Update+0x400>
 8004f9e:	7a58      	ldrb	r0, [r3, #9]
	        fields[current_field][current_pos] = *ch_ptr;
 8004fa0:	7214      	strb	r4, [r2, #8]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004fa2:	282c      	cmp	r0, #44	; 0x2c
	        ch_ptr++;
 8004fa4:	f103 0109 	add.w	r1, r3, #9
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004fa8:	f000 8144 	beq.w	8005234 <GNSS_RX_Update+0x404>
 8004fac:	2800      	cmp	r0, #0
 8004fae:	f000 8143 	beq.w	8005238 <GNSS_RX_Update+0x408>
 8004fb2:	7a9c      	ldrb	r4, [r3, #10]
	        fields[current_field][current_pos] = *ch_ptr;
 8004fb4:	7250      	strb	r0, [r2, #9]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004fb6:	2c2c      	cmp	r4, #44	; 0x2c
	        ch_ptr++;
 8004fb8:	f103 010a 	add.w	r1, r3, #10
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004fbc:	f000 813e 	beq.w	800523c <GNSS_RX_Update+0x40c>
 8004fc0:	2c00      	cmp	r4, #0
 8004fc2:	f000 813d 	beq.w	8005240 <GNSS_RX_Update+0x410>
 8004fc6:	7ad8      	ldrb	r0, [r3, #11]
	        fields[current_field][current_pos] = *ch_ptr;
 8004fc8:	7294      	strb	r4, [r2, #10]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004fca:	282c      	cmp	r0, #44	; 0x2c
	        ch_ptr++;
 8004fcc:	f103 010b 	add.w	r1, r3, #11
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004fd0:	f000 8138 	beq.w	8005244 <GNSS_RX_Update+0x414>
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	f000 8137 	beq.w	8005248 <GNSS_RX_Update+0x418>
 8004fda:	7b1c      	ldrb	r4, [r3, #12]
	        fields[current_field][current_pos] = *ch_ptr;
 8004fdc:	72d0      	strb	r0, [r2, #11]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004fde:	2c2c      	cmp	r4, #44	; 0x2c
	        ch_ptr++;
 8004fe0:	f103 010c 	add.w	r1, r3, #12
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004fe4:	f000 8132 	beq.w	800524c <GNSS_RX_Update+0x41c>
 8004fe8:	2c00      	cmp	r4, #0
 8004fea:	d03b      	beq.n	8005064 <GNSS_RX_Update+0x234>
 8004fec:	7b58      	ldrb	r0, [r3, #13]
	        ch_ptr++;
 8004fee:	f103 010d 	add.w	r1, r3, #13
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004ff2:	282c      	cmp	r0, #44	; 0x2c
	        fields[current_field][current_pos] = *ch_ptr;
 8004ff4:	7314      	strb	r4, [r2, #12]
	        current_pos++;
 8004ff6:	f04f 030d 	mov.w	r3, #13
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004ffa:	d006      	beq.n	800500a <GNSS_RX_Update+0x1da>
 8004ffc:	b398      	cbz	r0, 8005066 <GNSS_RX_Update+0x236>
	        fields[current_field][current_pos] = *ch_ptr;
 8004ffe:	54d0      	strb	r0, [r2, r3]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8005000:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	        current_pos++;
 8005004:	3301      	adds	r3, #1
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8005006:	282c      	cmp	r0, #44	; 0x2c
 8005008:	d1f8      	bne.n	8004ffc <GNSS_RX_Update+0x1cc>
        fields[current_field][current_pos]='\0';
 800500a:	54d5      	strb	r5, [r2, r3]
	        ch_ptr++;
 800500c:	1c4b      	adds	r3, r1, #1
 800500e:	320c      	adds	r2, #12
 8005010:	7849      	ldrb	r1, [r1, #1]
 8005012:	e76e      	b.n	8004ef2 <GNSS_RX_Update+0xc2>
				if (GNSS.dma_buffer[GNSS.start] == '$'){
 8005014:	f81a 3004 	ldrb.w	r3, [sl, r4]
 8005018:	2b24      	cmp	r3, #36	; 0x24
 800501a:	d015      	beq.n	8005048 <GNSS_RX_Update+0x218>
			for(;GNSS.start != i;GNSS.start = (GNSS.start + 1) % DMA_BUFFER_SIZE){
 800501c:	3401      	adds	r4, #1
 800501e:	4263      	negs	r3, r4
 8005020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005024:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005028:	bf58      	it	pl
 800502a:	425c      	negpl	r4, r3
 800502c:	455c      	cmp	r4, fp
 800502e:	d1f1      	bne.n	8005014 <GNSS_RX_Update+0x1e4>
 8005030:	f8ca 4464 	str.w	r4, [sl, #1124]	; 0x464
			new_information = 1;
		}
	}

	return new_information;
}
 8005034:	4640      	mov	r0, r8
 8005036:	b035      	add	sp, #212	; 0xd4
 8005038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 800503c:	42a3      	cmp	r3, r4
 800503e:	f47f af2e 	bne.w	8004e9e <GNSS_RX_Update+0x6e>
 8005042:	2001      	movs	r0, #1
		int counter = 0;
 8005044:	2200      	movs	r2, #0
 8005046:	e740      	b.n	8004eca <GNSS_RX_Update+0x9a>
 8005048:	f8ca 4464 	str.w	r4, [sl, #1124]	; 0x464
 800504c:	e712      	b.n	8004e74 <GNSS_RX_Update+0x44>
 800504e:	bf00      	nop
 8005050:	20000d10 	.word	0x20000d10
 8005054:	20000c50 	.word	0x20000c50
 8005058:	20000850 	.word	0x20000850
 800505c:	0800f000 	.word	0x0800f000
 8005060:	20000c4f 	.word	0x20000c4f
	        current_pos++;
 8005064:	230c      	movs	r3, #12
        fields[current_field][current_pos]='\0';
 8005066:	2100      	movs	r1, #0
 8005068:	54d1      	strb	r1, [r2, r3]
			sscanf(fields[1],"%2d%2d%2d.%3d",&GNSS.GNGGA.UTC_Hour,&GNSS.GNGGA.UTC_Min,&GNSS.GNGGA.UTC_Second,&GNSS.GNGGA.UTC_Millis);
 800506a:	4b79      	ldr	r3, [pc, #484]	; (8005250 <GNSS_RX_Update+0x420>)
 800506c:	4979      	ldr	r1, [pc, #484]	; (8005254 <GNSS_RX_Update+0x424>)
 800506e:	f103 0208 	add.w	r2, r3, #8
 8005072:	9201      	str	r2, [sp, #4]
 8005074:	9a03      	ldr	r2, [sp, #12]
 8005076:	a80a      	add	r0, sp, #40	; 0x28
 8005078:	9200      	str	r2, [sp, #0]
 800507a:	1f1a      	subs	r2, r3, #4
 800507c:	f005 fa48 	bl	800a510 <siscanf>
			GNSS.GNGGA.lat_raw = atof(fields[2]);
 8005080:	a80d      	add	r0, sp, #52	; 0x34
 8005082:	f005 f9d7 	bl	800a434 <atof>
 8005086:	f7fb fd1f 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.North_South = fields[3][0];
 800508a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
			GNSS.GNGGA.lat_raw = atof(fields[2]);
 800508e:	f8ca 0478 	str.w	r0, [sl, #1144]	; 0x478
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 8005092:	a813      	add	r0, sp, #76	; 0x4c
			GNSS.GNGGA.North_South = fields[3][0];
 8005094:	f88a 3488 	strb.w	r3, [sl, #1160]	; 0x488
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 8005098:	f005 f9cc 	bl	800a434 <atof>
 800509c:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 800526c <GNSS_RX_Update+0x43c>
			GNSS.GNGGA.East_West = fields[5][0];
 80050a0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 80050a4:	e9c8 0100 	strd	r0, r1, [r8]
			GNSS.GNGGA.status = atoi(fields[6]);
 80050a8:	a819      	add	r0, sp, #100	; 0x64
			GNSS.GNGGA.East_West = fields[5][0];
 80050aa:	f88a 34a0 	strb.w	r3, [sl, #1184]	; 0x4a0
			GNSS.GNGGA.status = atoi(fields[6]);
 80050ae:	f005 f9c4 	bl	800a43a <atoi>
 80050b2:	f8ca 04a4 	str.w	r0, [sl, #1188]	; 0x4a4
			GNSS.GNGGA.num_sat = atoi(fields[7]);
 80050b6:	a81c      	add	r0, sp, #112	; 0x70
 80050b8:	f005 f9bf 	bl	800a43a <atoi>
 80050bc:	f8ca 04a8 	str.w	r0, [sl, #1192]	; 0x4a8
			GNSS.GNGGA.HDOP = atof(fields[8]);
 80050c0:	a81f      	add	r0, sp, #124	; 0x7c
 80050c2:	f005 f9b7 	bl	800a434 <atof>
 80050c6:	f7fb fcff 	bl	8000ac8 <__aeabi_d2f>
 80050ca:	f8ca 04ac 	str.w	r0, [sl, #1196]	; 0x4ac
			GNSS.GNGGA.MSL_alt = atof(fields[9]);
 80050ce:	a822      	add	r0, sp, #136	; 0x88
 80050d0:	f005 f9b0 	bl	800a434 <atof>
 80050d4:	f7fb fcf8 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.MSL_Unit = fields[10][0];
 80050d8:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
			GNSS.GNGGA.MSL_alt = atof(fields[9]);
 80050dc:	f8ca 04b0 	str.w	r0, [sl, #1200]	; 0x4b0
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 80050e0:	a828      	add	r0, sp, #160	; 0xa0
			GNSS.GNGGA.MSL_Unit = fields[10][0];
 80050e2:	f88a 34b4 	strb.w	r3, [sl, #1204]	; 0x4b4
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 80050e6:	f005 f9a5 	bl	800a434 <atof>
 80050ea:	f7fb fced 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 80050ee:	f8da 4478 	ldr.w	r4, [sl, #1144]	; 0x478
			GNSS.GNGGA.checksum[0] = fields[14][1];//fields[14][0] is always '*'
 80050f2:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
			GNSS.GNGGA.checksum[1] = fields[14][2];
 80050f6:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
			GNSS.GNGGA.Geoid_Unit = fields[12][0];
 80050fa:	f89d 10ac 	ldrb.w	r1, [sp, #172]	; 0xac
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 80050fe:	f8ca 04b8 	str.w	r0, [sl, #1208]	; 0x4b8
			GNSS.GNGGA.checksum[0] = fields[14][1];//fields[14][0] is always '*'
 8005102:	f88a 24bd 	strb.w	r2, [sl, #1213]	; 0x4bd
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 8005106:	4620      	mov	r0, r4
			GNSS.GNGGA.checksum[1] = fields[14][2];
 8005108:	f88a 34be 	strb.w	r3, [sl, #1214]	; 0x4be
			GNSS.GNGGA.Geoid_Unit = fields[12][0];
 800510c:	f88a 14bc 	strb.w	r1, [sl, #1212]	; 0x4bc
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 8005110:	f7fb f98a 	bl	8000428 <__aeabi_f2d>
	return ((int)raw / 100) + (fmod(raw,100)/60);
 8005114:	2200      	movs	r2, #0
 8005116:	4b50      	ldr	r3, [pc, #320]	; (8005258 <GNSS_RX_Update+0x428>)
 8005118:	f007 fe3e 	bl	800cd98 <fmod>
 800511c:	4606      	mov	r6, r0
 800511e:	4620      	mov	r0, r4
 8005120:	460f      	mov	r7, r1
 8005122:	f7fc f80b 	bl	800113c <__aeabi_f2iz>
 8005126:	4b4d      	ldr	r3, [pc, #308]	; (800525c <GNSS_RX_Update+0x42c>)
 8005128:	fb83 2300 	smull	r2, r3, r3, r0
 800512c:	17c0      	asrs	r0, r0, #31
 800512e:	ebc0 1063 	rsb	r0, r0, r3, asr #5
 8005132:	f7fb f967 	bl	8000404 <__aeabi_i2d>
 8005136:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800513a:	4604      	mov	r4, r0
 800513c:	460d      	mov	r5, r1
 800513e:	4b48      	ldr	r3, [pc, #288]	; (8005260 <GNSS_RX_Update+0x430>)
 8005140:	4630      	mov	r0, r6
 8005142:	4639      	mov	r1, r7
 8005144:	f7fb f9c8 	bl	80004d8 <__aeabi_dmul>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	4620      	mov	r0, r4
 800514e:	4629      	mov	r1, r5
 8005150:	f7fb f80c 	bl	800016c <__adddf3>
			GNSS.GNGGA.lon = convert_raw_lat_lon(GNSS.GNGGA.lon_raw);
 8005154:	e9d8 6700 	ldrd	r6, r7, [r8]
	return ((int)raw / 100) + (fmod(raw,100)/60);
 8005158:	2200      	movs	r2, #0
 800515a:	460c      	mov	r4, r1
 800515c:	4605      	mov	r5, r0
 800515e:	4b3e      	ldr	r3, [pc, #248]	; (8005258 <GNSS_RX_Update+0x428>)
 8005160:	4630      	mov	r0, r6
 8005162:	4639      	mov	r1, r7
 8005164:	f007 fe18 	bl	800cd98 <fmod>
 8005168:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800516c:	4639      	mov	r1, r7
 800516e:	4630      	mov	r0, r6
 8005170:	f7fb fc62 	bl	8000a38 <__aeabi_d2iz>
 8005174:	4b39      	ldr	r3, [pc, #228]	; (800525c <GNSS_RX_Update+0x42c>)
			new_information = 1;
 8005176:	f04f 0801 	mov.w	r8, #1
	return ((int)raw / 100) + (fmod(raw,100)/60);
 800517a:	fb83 2300 	smull	r2, r3, r3, r0
 800517e:	17c0      	asrs	r0, r0, #31
 8005180:	ebc0 1063 	rsb	r0, r0, r3, asr #5
 8005184:	f7fb f93e 	bl	8000404 <__aeabi_i2d>
 8005188:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800518c:	4606      	mov	r6, r0
 800518e:	460f      	mov	r7, r1
 8005190:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005194:	4b32      	ldr	r3, [pc, #200]	; (8005260 <GNSS_RX_Update+0x430>)
 8005196:	f7fb f99f 	bl	80004d8 <__aeabi_dmul>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	4630      	mov	r0, r6
 80051a0:	4639      	mov	r1, r7
 80051a2:	f7fa ffe3 	bl	800016c <__adddf3>
			GNSS.GNGGA.lat = GNSS.GNGGA.North_South == 'N' ? GNSS.GNGGA.lat : -GNSS.GNGGA.lat;
 80051a6:	f89a 3488 	ldrb.w	r3, [sl, #1160]	; 0x488
 80051aa:	4a2e      	ldr	r2, [pc, #184]	; (8005264 <GNSS_RX_Update+0x434>)
 80051ac:	2b4e      	cmp	r3, #78	; 0x4e
 80051ae:	bf18      	it	ne
 80051b0:	f104 4400 	addne.w	r4, r4, #2147483648	; 0x80000000
 80051b4:	4623      	mov	r3, r4
 80051b6:	462c      	mov	r4, r5
 80051b8:	461d      	mov	r5, r3
			GNSS.GNGGA.lon = GNSS.GNGGA.East_West == 'E' ? GNSS.GNGGA.lon : -GNSS.GNGGA.lon;
 80051ba:	f89a 34a0 	ldrb.w	r3, [sl, #1184]	; 0x4a0
			GNSS.GNGGA.lat = GNSS.GNGGA.North_South == 'N' ? GNSS.GNGGA.lat : -GNSS.GNGGA.lat;
 80051be:	e9c2 4500 	strd	r4, r5, [r2]
			GNSS.GNGGA.lon = GNSS.GNGGA.East_West == 'E' ? GNSS.GNGGA.lon : -GNSS.GNGGA.lon;
 80051c2:	2b45      	cmp	r3, #69	; 0x45
 80051c4:	bf18      	it	ne
 80051c6:	f101 4100 	addne.w	r1, r1, #2147483648	; 0x80000000
 80051ca:	460b      	mov	r3, r1
 80051cc:	4602      	mov	r2, r0
 80051ce:	4926      	ldr	r1, [pc, #152]	; (8005268 <GNSS_RX_Update+0x438>)
 80051d0:	e9c1 2300 	strd	r2, r3, [r1]
 80051d4:	e641      	b.n	8004e5a <GNSS_RX_Update+0x2a>
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 80051d6:	4619      	mov	r1, r3
        current_pos = 0;
 80051d8:	2300      	movs	r3, #0
        fields[current_field][current_pos]='\0';
 80051da:	54d5      	strb	r5, [r2, r3]
	        ch_ptr++;
 80051dc:	1c4b      	adds	r3, r1, #1
 80051de:	320c      	adds	r2, #12
 80051e0:	7849      	ldrb	r1, [r1, #1]
 80051e2:	e686      	b.n	8004ef2 <GNSS_RX_Update+0xc2>
	        current_pos++;
 80051e4:	2301      	movs	r3, #1
        fields[current_field][current_pos]='\0';
 80051e6:	54d5      	strb	r5, [r2, r3]
	        ch_ptr++;
 80051e8:	1c4b      	adds	r3, r1, #1
 80051ea:	320c      	adds	r2, #12
 80051ec:	7849      	ldrb	r1, [r1, #1]
 80051ee:	e680      	b.n	8004ef2 <GNSS_RX_Update+0xc2>
	        current_pos++;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e738      	b.n	8005066 <GNSS_RX_Update+0x236>
 80051f4:	2302      	movs	r3, #2
        fields[current_field][current_pos]='\0';
 80051f6:	54d5      	strb	r5, [r2, r3]
	        ch_ptr++;
 80051f8:	1c4b      	adds	r3, r1, #1
 80051fa:	320c      	adds	r2, #12
 80051fc:	7849      	ldrb	r1, [r1, #1]
 80051fe:	e678      	b.n	8004ef2 <GNSS_RX_Update+0xc2>
	        current_pos++;
 8005200:	2302      	movs	r3, #2
 8005202:	e730      	b.n	8005066 <GNSS_RX_Update+0x236>
 8005204:	2303      	movs	r3, #3
 8005206:	e700      	b.n	800500a <GNSS_RX_Update+0x1da>
 8005208:	2303      	movs	r3, #3
 800520a:	e72c      	b.n	8005066 <GNSS_RX_Update+0x236>
 800520c:	2304      	movs	r3, #4
 800520e:	e6fc      	b.n	800500a <GNSS_RX_Update+0x1da>
 8005210:	2304      	movs	r3, #4
 8005212:	e728      	b.n	8005066 <GNSS_RX_Update+0x236>
 8005214:	2305      	movs	r3, #5
 8005216:	e6f8      	b.n	800500a <GNSS_RX_Update+0x1da>
 8005218:	2305      	movs	r3, #5
 800521a:	e724      	b.n	8005066 <GNSS_RX_Update+0x236>
 800521c:	2306      	movs	r3, #6
 800521e:	e722      	b.n	8005066 <GNSS_RX_Update+0x236>
 8005220:	2306      	movs	r3, #6
 8005222:	e6f2      	b.n	800500a <GNSS_RX_Update+0x1da>
 8005224:	2307      	movs	r3, #7
 8005226:	e6f0      	b.n	800500a <GNSS_RX_Update+0x1da>
 8005228:	2307      	movs	r3, #7
 800522a:	e71c      	b.n	8005066 <GNSS_RX_Update+0x236>
 800522c:	2308      	movs	r3, #8
 800522e:	e6ec      	b.n	800500a <GNSS_RX_Update+0x1da>
 8005230:	2308      	movs	r3, #8
 8005232:	e718      	b.n	8005066 <GNSS_RX_Update+0x236>
 8005234:	2309      	movs	r3, #9
 8005236:	e6e8      	b.n	800500a <GNSS_RX_Update+0x1da>
 8005238:	2309      	movs	r3, #9
 800523a:	e714      	b.n	8005066 <GNSS_RX_Update+0x236>
 800523c:	230a      	movs	r3, #10
 800523e:	e6e4      	b.n	800500a <GNSS_RX_Update+0x1da>
 8005240:	230a      	movs	r3, #10
 8005242:	e710      	b.n	8005066 <GNSS_RX_Update+0x236>
 8005244:	230b      	movs	r3, #11
 8005246:	e6e0      	b.n	800500a <GNSS_RX_Update+0x1da>
 8005248:	230b      	movs	r3, #11
 800524a:	e70c      	b.n	8005066 <GNSS_RX_Update+0x236>
 800524c:	230c      	movs	r3, #12
 800524e:	e6dc      	b.n	800500a <GNSS_RX_Update+0x1da>
 8005250:	20000cbc 	.word	0x20000cbc
 8005254:	0800f008 	.word	0x0800f008
 8005258:	40590000 	.word	0x40590000
 800525c:	51eb851f 	.word	0x51eb851f
 8005260:	3f911111 	.word	0x3f911111
 8005264:	20000cd0 	.word	0x20000cd0
 8005268:	20000ce8 	.word	0x20000ce8
 800526c:	20000ce0 	.word	0x20000ce0

08005270 <I2C_read>:
 *      Author: yuche
 */

#include "i2c.h"

uint8_t I2C_read(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* output){
 8005270:	b530      	push	{r4, r5, lr}
	int state = HAL_I2C_Mem_Read(i2cx,target_address << 1,register_address,sizeof(register_address),output,length,20);//timeout is magic. Do not touch
 8005272:	2514      	movs	r5, #20
uint8_t I2C_read(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* output){
 8005274:	b085      	sub	sp, #20
 8005276:	9c08      	ldr	r4, [sp, #32]
	int state = HAL_I2C_Mem_Read(i2cx,target_address << 1,register_address,sizeof(register_address),output,length,20);//timeout is magic. Do not touch
 8005278:	9301      	str	r3, [sp, #4]
 800527a:	0049      	lsls	r1, r1, #1
 800527c:	9502      	str	r5, [sp, #8]
 800527e:	9400      	str	r4, [sp, #0]
 8005280:	2301      	movs	r3, #1
 8005282:	f001 fc6d 	bl	8006b60 <HAL_I2C_Mem_Read>
	if (state != HAL_OK){
 8005286:	b100      	cbz	r0, 800528a <I2C_read+0x1a>
		__NOP();
 8005288:	bf00      	nop
	}
	return state;
}
 800528a:	b005      	add	sp, #20
 800528c:	bd30      	pop	{r4, r5, pc}
 800528e:	bf00      	nop

08005290 <I2C_write>:

uint8_t I2C_write(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* input){
 8005290:	b530      	push	{r4, r5, lr}
	int state =  HAL_I2C_Mem_Write(i2cx,target_address << 1,register_address,sizeof(register_address),input,length,20);//timeout is magic. Do not touch
 8005292:	2514      	movs	r5, #20
uint8_t I2C_write(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* input){
 8005294:	b085      	sub	sp, #20
 8005296:	9c08      	ldr	r4, [sp, #32]
	int state =  HAL_I2C_Mem_Write(i2cx,target_address << 1,register_address,sizeof(register_address),input,length,20);//timeout is magic. Do not touch
 8005298:	9301      	str	r3, [sp, #4]
 800529a:	0049      	lsls	r1, r1, #1
 800529c:	9502      	str	r5, [sp, #8]
 800529e:	9400      	str	r4, [sp, #0]
 80052a0:	2301      	movs	r3, #1
 80052a2:	f001 fb41 	bl	8006928 <HAL_I2C_Mem_Write>
	if (state != HAL_OK){
 80052a6:	b100      	cbz	r0, 80052aa <I2C_write+0x1a>
			__NOP();
 80052a8:	bf00      	nop
		}
	return state;
}
 80052aa:	b005      	add	sp, #20
 80052ac:	bd30      	pop	{r4, r5, pc}
 80052ae:	bf00      	nop

080052b0 <led_update>:
#include "stm32f1xx_hal.h"

uint8_t led_pattern = LED_DISCONNECTED;
uint8_t led_state = 0;

void led_update(){
 80052b0:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,  1 - (led_pattern>>led_state) & 0x01);
 80052b2:	4b0a      	ldr	r3, [pc, #40]	; (80052dc <led_update+0x2c>)
 80052b4:	4c0a      	ldr	r4, [pc, #40]	; (80052e0 <led_update+0x30>)
 80052b6:	781a      	ldrb	r2, [r3, #0]
 80052b8:	7823      	ldrb	r3, [r4, #0]
 80052ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052be:	411a      	asrs	r2, r3
 80052c0:	f1c2 0201 	rsb	r2, r2, #1
 80052c4:	f002 0201 	and.w	r2, r2, #1
 80052c8:	4806      	ldr	r0, [pc, #24]	; (80052e4 <led_update+0x34>)
 80052ca:	f001 f851 	bl	8006370 <HAL_GPIO_WritePin>
	led_state++;
 80052ce:	7823      	ldrb	r3, [r4, #0]
 80052d0:	3301      	adds	r3, #1
	led_state = led_state % 8;
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	7023      	strb	r3, [r4, #0]
}
 80052d8:	bd10      	pop	{r4, pc}
 80052da:	bf00      	nop
 80052dc:	200003bc 	.word	0x200003bc
 80052e0:	200003bd 	.word	0x200003bd
 80052e4:	40011000 	.word	0x40011000

080052e8 <led_set>:

void led_set(uint8_t led_pattern_){
	led_pattern = led_pattern_;
 80052e8:	4b01      	ldr	r3, [pc, #4]	; (80052f0 <led_set+0x8>)
 80052ea:	7018      	strb	r0, [r3, #0]
}
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	200003bc 	.word	0x200003bc

080052f4 <mpu_set_i2c>:

enum MPU9250_GYRO_FSR gyro_fsr = MPU9250_NUM_GYRO_FSR;
enum MPU9250_ACCEL_FSR accel_fsr = MPU9250_NUM_ACCEL_FSR;

void mpu_set_i2c(I2C_HandleTypeDef* i2cx){
	mpu_i2cx = i2cx;
 80052f4:	4b01      	ldr	r3, [pc, #4]	; (80052fc <mpu_set_i2c+0x8>)
 80052f6:	6018      	str	r0, [r3, #0]
}
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	200005f0 	.word	0x200005f0

08005300 <i2c_write>:
}

// Functions implemented for this platform(STM32F103) for DMP

int i2c_write(unsigned char slave_addr, unsigned char reg_addr,
		unsigned char length, unsigned char const *data){
 8005300:	b510      	push	{r4, lr}
	return I2C_write(mpu_i2cx,slave_addr,reg_addr,length,data);
 8005302:	4c06      	ldr	r4, [pc, #24]	; (800531c <i2c_write+0x1c>)
		unsigned char length, unsigned char const *data){
 8005304:	b082      	sub	sp, #8
	return I2C_write(mpu_i2cx,slave_addr,reg_addr,length,data);
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	6824      	ldr	r4, [r4, #0]
 800530a:	4613      	mov	r3, r2
 800530c:	460a      	mov	r2, r1
 800530e:	4601      	mov	r1, r0
 8005310:	4620      	mov	r0, r4
 8005312:	f7ff ffbd 	bl	8005290 <I2C_write>
}
 8005316:	b002      	add	sp, #8
 8005318:	bd10      	pop	{r4, pc}
 800531a:	bf00      	nop
 800531c:	200005f0 	.word	0x200005f0

08005320 <i2c_read>:

int i2c_read(unsigned char slave_addr, unsigned char reg_addr,
		unsigned char length, unsigned char *data){
 8005320:	b510      	push	{r4, lr}
	return I2C_read(mpu_i2cx,slave_addr,reg_addr,length,data);
 8005322:	4c06      	ldr	r4, [pc, #24]	; (800533c <i2c_read+0x1c>)
		unsigned char length, unsigned char *data){
 8005324:	b082      	sub	sp, #8
	return I2C_read(mpu_i2cx,slave_addr,reg_addr,length,data);
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	6824      	ldr	r4, [r4, #0]
 800532a:	4613      	mov	r3, r2
 800532c:	460a      	mov	r2, r1
 800532e:	4601      	mov	r1, r0
 8005330:	4620      	mov	r0, r4
 8005332:	f7ff ff9d 	bl	8005270 <I2C_read>
}
 8005336:	b002      	add	sp, #8
 8005338:	bd10      	pop	{r4, pc}
 800533a:	bf00      	nop
 800533c:	200005f0 	.word	0x200005f0

08005340 <delay_ms>:

void delay_ms(unsigned long num_ms){
	delay(num_ms);
 8005340:	f000 bd34 	b.w	8005dac <delay>

08005344 <get_ms>:
}

unsigned long get_ms(unsigned long *count){
 8005344:	b510      	push	{r4, lr}
 8005346:	4604      	mov	r4, r0
	*count = millis();
 8005348:	f000 fd2a 	bl	8005da0 <millis>
 800534c:	6020      	str	r0, [r4, #0]
}
 800534e:	4618      	mov	r0, r3
 8005350:	bd10      	pop	{r4, pc}
 8005352:	bf00      	nop

08005354 <ms5611_set_i2c>:
/**
 * select a hal I2C to talk to MS5611
 * @param i2cx The i2c port to talk to MS5611
 */
void ms5611_set_i2c(I2C_HandleTypeDef* i2cx){
	ms5611_i2cx = i2cx;
 8005354:	4b01      	ldr	r3, [pc, #4]	; (800535c <ms5611_set_i2c+0x8>)
 8005356:	6018      	str	r0, [r3, #0]
}
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	200007d4 	.word	0x200007d4

08005360 <ms5611_init>:
/**
 * Initialize MS5611: read and store factory calibration data.
 *
 * request ADC to start convert temperature data
 */
void ms5611_init(){
 8005360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005362:	24a2      	movs	r4, #162	; 0xa2
 8005364:	b085      	sub	sp, #20
 8005366:	4d39      	ldr	r5, [pc, #228]	; (800544c <ms5611_init+0xec>)
 8005368:	4f39      	ldr	r7, [pc, #228]	; (8005450 <ms5611_init+0xf0>)
 800536a:	ae03      	add	r6, sp, #12
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 800536c:	4622      	mov	r2, r4
 800536e:	6838      	ldr	r0, [r7, #0]
 8005370:	2302      	movs	r3, #2
 8005372:	9600      	str	r6, [sp, #0]
 8005374:	2177      	movs	r1, #119	; 0x77
 8005376:	f7ff ff7b 	bl	8005270 <I2C_read>
 800537a:	3402      	adds	r4, #2
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
		uint8_t reg_addr = MS5611_CMD_READ_PROM + (i << 1);//interval 2
		uint8_t buffer[2];
		ms5611_read_i2c(reg_addr,2,buffer);

		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 800537c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8005380:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8005384:	b2e4      	uxtb	r4, r4
 8005386:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 800538a:	2cae      	cmp	r4, #174	; 0xae
		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 800538c:	f825 3b02 	strh.w	r3, [r5], #2
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 8005390:	d1ec      	bne.n	800536c <ms5611_init+0xc>
/**
 * Start ADC conversion of raw temperature in MS5611.
 * The ADC data can be read 9.02ms later
 */
void ms5611_request_temperature(){
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8005392:	2400      	movs	r4, #0
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8005394:	4d2f      	ldr	r5, [pc, #188]	; (8005454 <ms5611_init+0xf4>)
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8005396:	4623      	mov	r3, r4
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8005398:	782a      	ldrb	r2, [r5, #0]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 800539a:	6838      	ldr	r0, [r7, #0]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 800539c:	0052      	lsls	r2, r2, #1
 800539e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80053a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053a6:	2177      	movs	r1, #119	; 0x77
 80053a8:	9600      	str	r6, [sp, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80053aa:	f8ad 400c 	strh.w	r4, [sp, #12]
 80053ae:	f88d 400e 	strb.w	r4, [sp, #14]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80053b2:	f7ff ff6d 	bl	8005290 <I2C_write>
 * Read raw temperature from MS5611.
 */
void ms5611_update_temperature(){

	ms5611_request_temperature();
	delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 80053b6:	200c      	movs	r0, #12
 80053b8:	f000 fcf8 	bl	8005dac <delay>
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 80053bc:	4622      	mov	r2, r4
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80053be:	f8ad 400c 	strh.w	r4, [sp, #12]
 80053c2:	f88d 400e 	strb.w	r4, [sp, #14]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80053c6:	2400      	movs	r4, #0
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 80053c8:	6838      	ldr	r0, [r7, #0]
 80053ca:	2303      	movs	r3, #3
 80053cc:	9600      	str	r6, [sp, #0]
 80053ce:	2177      	movs	r1, #119	; 0x77
 80053d0:	f7ff ff4e 	bl	8005270 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 80053d4:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80053d8:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80053dc:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80053e0:	021b      	lsls	r3, r3, #8
 80053e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (temp != 0){
 80053e6:	4313      	orrs	r3, r2
		raw_temperature = temp;
 80053e8:	bf18      	it	ne
 80053ea:	4a1b      	ldrne	r2, [pc, #108]	; (8005458 <ms5611_init+0xf8>)
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80053ec:	6838      	ldr	r0, [r7, #0]
		raw_temperature = temp;
 80053ee:	bf18      	it	ne
 80053f0:	6013      	strne	r3, [r2, #0]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80053f2:	782a      	ldrb	r2, [r5, #0]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80053f4:	4623      	mov	r3, r4
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80053f6:	0052      	lsls	r2, r2, #1
 80053f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80053fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005400:	2177      	movs	r1, #119	; 0x77
 8005402:	9600      	str	r6, [sp, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8005404:	f8ad 400c 	strh.w	r4, [sp, #12]
 8005408:	f88d 400e 	strb.w	r4, [sp, #14]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 800540c:	f7ff ff40 	bl	8005290 <I2C_write>
	delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8005410:	200c      	movs	r0, #12
 8005412:	f000 fccb 	bl	8005dac <delay>
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8005416:	6838      	ldr	r0, [r7, #0]
 8005418:	4622      	mov	r2, r4
 800541a:	9600      	str	r6, [sp, #0]
 800541c:	2303      	movs	r3, #3
 800541e:	2177      	movs	r1, #119	; 0x77
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8005420:	f8ad 400c 	strh.w	r4, [sp, #12]
 8005424:	f88d 400e 	strb.w	r4, [sp, #14]
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8005428:	f7ff ff22 	bl	8005270 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 800542c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8005430:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8005434:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8005438:	021b      	lsls	r3, r3, #8
 800543a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (temp != 0){
 800543e:	4313      	orrs	r3, r2
		raw_pressure = temp;
 8005440:	bf1c      	itt	ne
 8005442:	4a06      	ldrne	r2, [pc, #24]	; (800545c <ms5611_init+0xfc>)
 8005444:	6013      	strne	r3, [r2, #0]
}
 8005446:	b005      	add	sp, #20
 8005448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800544a:	bf00      	nop
 800544c:	20000d18 	.word	0x20000d18
 8005450:	200007d4 	.word	0x200007d4
 8005454:	2000003c 	.word	0x2000003c
 8005458:	20000d24 	.word	0x20000d24
 800545c:	20000d14 	.word	0x20000d14

08005460 <ms5611_update>:
}

/**
 *	Read raw temperature and pressure from MS5611
 */
void ms5611_update(){
 8005460:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8005462:	2400      	movs	r4, #0
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8005464:	4f2f      	ldr	r7, [pc, #188]	; (8005524 <ms5611_update+0xc4>)
void ms5611_update(){
 8005466:	b085      	sub	sp, #20
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8005468:	783a      	ldrb	r2, [r7, #0]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 800546a:	4e2f      	ldr	r6, [pc, #188]	; (8005528 <ms5611_update+0xc8>)
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 800546c:	0052      	lsls	r2, r2, #1
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 800546e:	ad03      	add	r5, sp, #12
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8005470:	f042 0250 	orr.w	r2, r2, #80	; 0x50
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8005474:	4623      	mov	r3, r4
 8005476:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800547a:	2177      	movs	r1, #119	; 0x77
 800547c:	6830      	ldr	r0, [r6, #0]
 800547e:	9500      	str	r5, [sp, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8005480:	f8ad 400c 	strh.w	r4, [sp, #12]
 8005484:	f88d 400e 	strb.w	r4, [sp, #14]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8005488:	f7ff ff02 	bl	8005290 <I2C_write>
	delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 800548c:	200c      	movs	r0, #12
 800548e:	f000 fc8d 	bl	8005dac <delay>
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8005492:	4622      	mov	r2, r4
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8005494:	f8ad 400c 	strh.w	r4, [sp, #12]
 8005498:	f88d 400e 	strb.w	r4, [sp, #14]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 800549c:	2400      	movs	r4, #0
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 800549e:	6830      	ldr	r0, [r6, #0]
 80054a0:	9500      	str	r5, [sp, #0]
 80054a2:	2303      	movs	r3, #3
 80054a4:	2177      	movs	r1, #119	; 0x77
 80054a6:	f7ff fee3 	bl	8005270 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 80054aa:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80054ae:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80054b2:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80054b6:	021b      	lsls	r3, r3, #8
 80054b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (temp != 0){
 80054bc:	4313      	orrs	r3, r2
		raw_temperature = temp;
 80054be:	bf18      	it	ne
 80054c0:	4a1a      	ldrne	r2, [pc, #104]	; (800552c <ms5611_update+0xcc>)
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80054c2:	f04f 0177 	mov.w	r1, #119	; 0x77
		raw_temperature = temp;
 80054c6:	bf18      	it	ne
 80054c8:	6013      	strne	r3, [r2, #0]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80054ca:	783a      	ldrb	r2, [r7, #0]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80054cc:	4623      	mov	r3, r4
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80054ce:	0052      	lsls	r2, r2, #1
 80054d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80054d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054d8:	6830      	ldr	r0, [r6, #0]
 80054da:	9500      	str	r5, [sp, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80054dc:	f8ad 400c 	strh.w	r4, [sp, #12]
 80054e0:	f88d 400e 	strb.w	r4, [sp, #14]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80054e4:	f7ff fed4 	bl	8005290 <I2C_write>
	delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 80054e8:	200c      	movs	r0, #12
 80054ea:	f000 fc5f 	bl	8005dac <delay>
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 80054ee:	4622      	mov	r2, r4
 80054f0:	6830      	ldr	r0, [r6, #0]
 80054f2:	9500      	str	r5, [sp, #0]
 80054f4:	2303      	movs	r3, #3
 80054f6:	2177      	movs	r1, #119	; 0x77
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80054f8:	f8ad 400c 	strh.w	r4, [sp, #12]
 80054fc:	f88d 400e 	strb.w	r4, [sp, #14]
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8005500:	f7ff feb6 	bl	8005270 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8005504:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8005508:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800550c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8005510:	021b      	lsls	r3, r3, #8
 8005512:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (temp != 0){
 8005516:	4313      	orrs	r3, r2
		raw_pressure = temp;
 8005518:	bf1c      	itt	ne
 800551a:	4a05      	ldrne	r2, [pc, #20]	; (8005530 <ms5611_update+0xd0>)
 800551c:	6013      	strne	r3, [r2, #0]
	ms5611_update_temperature();
	ms5611_update_pressure();
}
 800551e:	b005      	add	sp, #20
 8005520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005522:	bf00      	nop
 8005524:	2000003c 	.word	0x2000003c
 8005528:	200007d4 	.word	0x200007d4
 800552c:	20000d24 	.word	0x20000d24
 8005530:	20000d14 	.word	0x20000d14
 8005534:	00000000 	.word	0x00000000

08005538 <ms5611_get_pressure>:

/**
 * Get calibrated pressure, unit: mBar
 * @return calibrated pressure
 */
double ms5611_get_pressure(){
 8005538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 800553c:	4b74      	ldr	r3, [pc, #464]	; (8005710 <ms5611_get_pressure+0x1d8>)
 800553e:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8005734 <ms5611_get_pressure+0x1fc>
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	f8b8 3008 	ldrh.w	r3, [r8, #8]
double ms5611_get_pressure(){
 8005548:	b085      	sub	sp, #20
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 800554a:	f8b8 000a 	ldrh.w	r0, [r8, #10]
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 800554e:	eba2 2903 	sub.w	r9, r2, r3, lsl #8
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8005552:	f7fa ff57 	bl	8000404 <__aeabi_i2d>
 8005556:	2200      	movs	r2, #0
 8005558:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800555c:	f7fa ffbc 	bl	80004d8 <__aeabi_dmul>
 8005560:	4604      	mov	r4, r0
 8005562:	4648      	mov	r0, r9
 8005564:	460d      	mov	r5, r1
 8005566:	f7fa ff3d 	bl	80003e4 <__aeabi_ui2d>
 800556a:	4602      	mov	r2, r0
 800556c:	460b      	mov	r3, r1
 800556e:	4620      	mov	r0, r4
 8005570:	4629      	mov	r1, r5
 8005572:	f7fa ffb1 	bl	80004d8 <__aeabi_dmul>
 8005576:	4604      	mov	r4, r0

	double OFF = fc[1] * (65536.0) + fc[3] * dT / (128);
 8005578:	f8b8 0006 	ldrh.w	r0, [r8, #6]
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 800557c:	460d      	mov	r5, r1
	double OFF = fc[1] * (65536.0) + fc[3] * dT / (128);
 800557e:	fb09 f000 	mul.w	r0, r9, r0
 8005582:	09c0      	lsrs	r0, r0, #7
 8005584:	f7fa ff2e 	bl	80003e4 <__aeabi_ui2d>
 8005588:	4606      	mov	r6, r0
 800558a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800558e:	460f      	mov	r7, r1
 8005590:	f7fa ff38 	bl	8000404 <__aeabi_i2d>
 8005594:	2200      	movs	r2, #0
 8005596:	4b5f      	ldr	r3, [pc, #380]	; (8005714 <ms5611_get_pressure+0x1dc>)
 8005598:	f7fa ff9e 	bl	80004d8 <__aeabi_dmul>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4630      	mov	r0, r6
 80055a2:	4639      	mov	r1, r7
 80055a4:	f7fa fde2 	bl	800016c <__adddf3>
 80055a8:	4682      	mov	sl, r0
	double SENS = fc[0] * (32768.0) + fc[2] * dT / (256);
 80055aa:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80055ae:	468b      	mov	fp, r1
 80055b0:	fb09 f000 	mul.w	r0, r9, r0
 80055b4:	0a00      	lsrs	r0, r0, #8
 80055b6:	f7fa ff15 	bl	80003e4 <__aeabi_ui2d>
 80055ba:	4606      	mov	r6, r0
 80055bc:	f8b8 0000 	ldrh.w	r0, [r8]
 80055c0:	460f      	mov	r7, r1
 80055c2:	f7fa ff1f 	bl	8000404 <__aeabi_i2d>
 80055c6:	2200      	movs	r2, #0
 80055c8:	4b53      	ldr	r3, [pc, #332]	; (8005718 <ms5611_get_pressure+0x1e0>)
 80055ca:	f7fa ff85 	bl	80004d8 <__aeabi_dmul>
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	4630      	mov	r0, r6
 80055d4:	4639      	mov	r1, r7
 80055d6:	f7fa fdc9 	bl	800016c <__adddf3>

	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 80055da:	4b50      	ldr	r3, [pc, #320]	; (800571c <ms5611_get_pressure+0x1e4>)
	double SENS = fc[0] * (32768.0) + fc[2] * dT / (256);
 80055dc:	4606      	mov	r6, r0
	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 80055de:	6818      	ldr	r0, [r3, #0]
	double SENS = fc[0] * (32768.0) + fc[2] * dT / (256);
 80055e0:	460f      	mov	r7, r1
	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 80055e2:	f7fa feff 	bl	80003e4 <__aeabi_ui2d>

	double T2=0, OFF2=0, SENS2=0;
	if (TEMP < 2000){
 80055e6:	2200      	movs	r2, #0
	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 80055e8:	e9cd 0100 	strd	r0, r1, [sp]
	if (TEMP < 2000){
 80055ec:	2300      	movs	r3, #0
 80055ee:	4620      	mov	r0, r4
 80055f0:	4629      	mov	r1, r5
 80055f2:	f7fb f9e3 	bl	80009bc <__aeabi_dcmplt>
 80055f6:	b9a8      	cbnz	r0, 8005624 <ms5611_get_pressure+0xec>

	TEMP = TEMP - T2;
	OFF = OFF - OFF2;
	SENS = SENS - SENS2;

	P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit mbar
 80055f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055fc:	2200      	movs	r2, #0
 80055fe:	4b48      	ldr	r3, [pc, #288]	; (8005720 <ms5611_get_pressure+0x1e8>)
 8005600:	f7fa ff6a 	bl	80004d8 <__aeabi_dmul>
 8005604:	4632      	mov	r2, r6
 8005606:	463b      	mov	r3, r7
 8005608:	f7fa ff66 	bl	80004d8 <__aeabi_dmul>
 800560c:	4652      	mov	r2, sl
 800560e:	465b      	mov	r3, fp
 8005610:	f7fa fdaa 	bl	8000168 <__aeabi_dsub>
	return P / 100;//unit mbar
 8005614:	a338      	add	r3, pc, #224	; (adr r3, 80056f8 <ms5611_get_pressure+0x1c0>)
 8005616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561a:	f7fa ff5d 	bl	80004d8 <__aeabi_dmul>
}
 800561e:	b005      	add	sp, #20
 8005620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		OFF2 = 5 * (TEMP-2000) * (TEMP-2000) / 2;
 8005624:	4622      	mov	r2, r4
 8005626:	462b      	mov	r3, r5
 8005628:	4620      	mov	r0, r4
 800562a:	4629      	mov	r1, r5
 800562c:	f7fa ff54 	bl	80004d8 <__aeabi_dmul>
 8005630:	2200      	movs	r2, #0
 8005632:	4b3c      	ldr	r3, [pc, #240]	; (8005724 <ms5611_get_pressure+0x1ec>)
 8005634:	4680      	mov	r8, r0
 8005636:	4689      	mov	r9, r1
 8005638:	f7fa ff4e 	bl	80004d8 <__aeabi_dmul>
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 800563c:	2200      	movs	r2, #0
		OFF2 = 5 * (TEMP-2000) * (TEMP-2000) / 2;
 800563e:	e9cd 0102 	strd	r0, r1, [sp, #8]
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 8005642:	4b39      	ldr	r3, [pc, #228]	; (8005728 <ms5611_get_pressure+0x1f0>)
 8005644:	4640      	mov	r0, r8
 8005646:	4649      	mov	r1, r9
 8005648:	f7fa ff46 	bl	80004d8 <__aeabi_dmul>
		if (TEMP < -1500){
 800564c:	a32c      	add	r3, pc, #176	; (adr r3, 8005700 <ms5611_get_pressure+0x1c8>)
 800564e:	e9d3 2300 	ldrd	r2, r3, [r3]
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 8005652:	4680      	mov	r8, r0
 8005654:	4689      	mov	r9, r1
		if (TEMP < -1500){
 8005656:	4620      	mov	r0, r4
 8005658:	4629      	mov	r1, r5
 800565a:	f7fb f9af 	bl	80009bc <__aeabi_dcmplt>
 800565e:	b3c8      	cbz	r0, 80056d4 <ms5611_get_pressure+0x19c>
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 8005660:	a329      	add	r3, pc, #164	; (adr r3, 8005708 <ms5611_get_pressure+0x1d0>)
 8005662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005666:	4620      	mov	r0, r4
 8005668:	4629      	mov	r1, r5
 800566a:	f7fa fd7f 	bl	800016c <__adddf3>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	f7fa ff31 	bl	80004d8 <__aeabi_dmul>
 8005676:	4642      	mov	r2, r8
 8005678:	4604      	mov	r4, r0
 800567a:	460d      	mov	r5, r1
 800567c:	464b      	mov	r3, r9
 800567e:	4630      	mov	r0, r6
 8005680:	4639      	mov	r1, r7
 8005682:	f7fa fd71 	bl	8000168 <__aeabi_dsub>
			SENS2 = SENS2 + 11/2 * (TEMP + 1500) * (TEMP + 1500);
 8005686:	2200      	movs	r2, #0
 8005688:	4606      	mov	r6, r0
 800568a:	460f      	mov	r7, r1
 800568c:	4b27      	ldr	r3, [pc, #156]	; (800572c <ms5611_get_pressure+0x1f4>)
 800568e:	4620      	mov	r0, r4
 8005690:	4629      	mov	r1, r5
 8005692:	f7fa ff21 	bl	80004d8 <__aeabi_dmul>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	4630      	mov	r0, r6
 800569c:	4639      	mov	r1, r7
 800569e:	f7fa fd63 	bl	8000168 <__aeabi_dsub>
 80056a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056a6:	4606      	mov	r6, r0
 80056a8:	460f      	mov	r7, r1
 80056aa:	4650      	mov	r0, sl
 80056ac:	4659      	mov	r1, fp
 80056ae:	f7fa fd5b 	bl	8000168 <__aeabi_dsub>
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 80056b2:	2200      	movs	r2, #0
 80056b4:	4680      	mov	r8, r0
 80056b6:	4689      	mov	r9, r1
 80056b8:	4b1d      	ldr	r3, [pc, #116]	; (8005730 <ms5611_get_pressure+0x1f8>)
 80056ba:	4620      	mov	r0, r4
 80056bc:	4629      	mov	r1, r5
 80056be:	f7fa ff0b 	bl	80004d8 <__aeabi_dmul>
 80056c2:	4602      	mov	r2, r0
 80056c4:	460b      	mov	r3, r1
 80056c6:	4640      	mov	r0, r8
 80056c8:	4649      	mov	r1, r9
 80056ca:	f7fa fd4d 	bl	8000168 <__aeabi_dsub>
 80056ce:	4682      	mov	sl, r0
 80056d0:	468b      	mov	fp, r1
 80056d2:	e791      	b.n	80055f8 <ms5611_get_pressure+0xc0>
 80056d4:	4642      	mov	r2, r8
 80056d6:	464b      	mov	r3, r9
 80056d8:	4630      	mov	r0, r6
 80056da:	4639      	mov	r1, r7
 80056dc:	f7fa fd44 	bl	8000168 <__aeabi_dsub>
 80056e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056e4:	4606      	mov	r6, r0
 80056e6:	460f      	mov	r7, r1
 80056e8:	4650      	mov	r0, sl
 80056ea:	4659      	mov	r1, fp
 80056ec:	f7fa fd3c 	bl	8000168 <__aeabi_dsub>
 80056f0:	4682      	mov	sl, r0
 80056f2:	468b      	mov	fp, r1
 80056f4:	e780      	b.n	80055f8 <ms5611_get_pressure+0xc0>
 80056f6:	bf00      	nop
 80056f8:	47ae147b 	.word	0x47ae147b
 80056fc:	3e947ae1 	.word	0x3e947ae1
 8005700:	00000000 	.word	0x00000000
 8005704:	c0ab5800 	.word	0xc0ab5800
 8005708:	00000000 	.word	0x00000000
 800570c:	40ab5800 	.word	0x40ab5800
 8005710:	20000d24 	.word	0x20000d24
 8005714:	40f00000 	.word	0x40f00000
 8005718:	40e00000 	.word	0x40e00000
 800571c:	20000d14 	.word	0x20000d14
 8005720:	3ea00000 	.word	0x3ea00000
 8005724:	40040000 	.word	0x40040000
 8005728:	3ff40000 	.word	0x3ff40000
 800572c:	40140000 	.word	0x40140000
 8005730:	401c0000 	.word	0x401c0000
 8005734:	20000d18 	.word	0x20000d18

08005738 <ms5611_timer_update>:
void ms5611_timer_update(){
 8005738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (read_index == 0){
 800573c:	4c74      	ldr	r4, [pc, #464]	; (8005910 <ms5611_timer_update+0x1d8>)
 800573e:	4d75      	ldr	r5, [pc, #468]	; (8005914 <ms5611_timer_update+0x1dc>)
 8005740:	7826      	ldrb	r6, [r4, #0]
void ms5611_timer_update(){
 8005742:	b086      	sub	sp, #24
 8005744:	6828      	ldr	r0, [r5, #0]
	if (read_index == 0){
 8005746:	2e00      	cmp	r6, #0
 8005748:	d076      	beq.n	8005838 <ms5611_timer_update+0x100>
	}else if (read_index == TEMP_READ_INTERVAL - 1){
 800574a:	2e09      	cmp	r6, #9
	uint8_t buffer[3] = {0x00,0x00,0x00};
 800574c:	f04f 0600 	mov.w	r6, #0
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8005750:	f10d 0a14 	add.w	sl, sp, #20
 8005754:	4632      	mov	r2, r6
 8005756:	f8cd a000 	str.w	sl, [sp]
 800575a:	f04f 0303 	mov.w	r3, #3
 800575e:	f04f 0177 	mov.w	r1, #119	; 0x77
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8005762:	f8ad 6014 	strh.w	r6, [sp, #20]
 8005766:	f88d 6016 	strb.w	r6, [sp, #22]
	}else if (read_index == TEMP_READ_INTERVAL - 1){
 800576a:	d033      	beq.n	80057d4 <ms5611_timer_update+0x9c>
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 800576c:	f7ff fd80 	bl	8005270 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8005770:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8005774:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8005778:	f89d 2016 	ldrb.w	r2, [sp, #22]
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (temp != 0){
 8005782:	4313      	orrs	r3, r2
		raw_pressure = temp;
 8005784:	bf18      	it	ne
 8005786:	4a64      	ldrne	r2, [pc, #400]	; (8005918 <ms5611_timer_update+0x1e0>)
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8005788:	f04f 0600 	mov.w	r6, #0
		raw_pressure = temp;
 800578c:	bf18      	it	ne
 800578e:	6013      	strne	r3, [r2, #0]
		XIMU_sens.pressure = ms5611_get_pressure();
 8005790:	f7ff fed2 	bl	8005538 <ms5611_get_pressure>
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8005794:	4a61      	ldr	r2, [pc, #388]	; (800591c <ms5611_timer_update+0x1e4>)
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8005796:	682b      	ldr	r3, [r5, #0]
		XIMU_sens.pressure = ms5611_get_pressure();
 8005798:	4d61      	ldr	r5, [pc, #388]	; (8005920 <ms5611_timer_update+0x1e8>)
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 800579a:	7812      	ldrb	r2, [r2, #0]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 800579c:	f8cd a000 	str.w	sl, [sp]
		XIMU_sens.pressure = ms5611_get_pressure();
 80057a0:	e9c5 011e 	strd	r0, r1, [r5, #120]	; 0x78
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80057a4:	0052      	lsls	r2, r2, #1
 80057a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80057aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057ae:	2177      	movs	r1, #119	; 0x77
 80057b0:	4618      	mov	r0, r3
 80057b2:	4633      	mov	r3, r6
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80057b4:	f8ad 6014 	strh.w	r6, [sp, #20]
 80057b8:	f88d 6016 	strb.w	r6, [sp, #22]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80057bc:	f7ff fd68 	bl	8005290 <I2C_write>
		read_index++;
 80057c0:	7823      	ldrb	r3, [r4, #0]
 80057c2:	3301      	adds	r3, #1
 80057c4:	7023      	strb	r3, [r4, #0]
	XIMU_sens.pt_ts = millis();
 80057c6:	f000 faeb 	bl	8005da0 <millis>
 80057ca:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
}
 80057ce:	b006      	add	sp, #24
 80057d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 80057d4:	f7ff fd4c 	bl	8005270 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 80057d8:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80057dc:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80057e0:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80057e4:	021b      	lsls	r3, r3, #8
 80057e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (temp != 0){
 80057ea:	4313      	orrs	r3, r2
		raw_pressure = temp;
 80057ec:	bf18      	it	ne
 80057ee:	4a4a      	ldrne	r2, [pc, #296]	; (8005918 <ms5611_timer_update+0x1e0>)
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80057f0:	f04f 0600 	mov.w	r6, #0
		raw_pressure = temp;
 80057f4:	bf18      	it	ne
 80057f6:	6013      	strne	r3, [r2, #0]
		XIMU_sens.pressure = ms5611_get_pressure();
 80057f8:	f7ff fe9e 	bl	8005538 <ms5611_get_pressure>
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 80057fc:	4a47      	ldr	r2, [pc, #284]	; (800591c <ms5611_timer_update+0x1e4>)
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80057fe:	682b      	ldr	r3, [r5, #0]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8005800:	7812      	ldrb	r2, [r2, #0]
		XIMU_sens.pressure = ms5611_get_pressure();
 8005802:	4d47      	ldr	r5, [pc, #284]	; (8005920 <ms5611_timer_update+0x1e8>)
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8005804:	0052      	lsls	r2, r2, #1
 8005806:	f042 0250 	orr.w	r2, r2, #80	; 0x50
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 800580a:	f8cd a000 	str.w	sl, [sp]
 800580e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
		XIMU_sens.pressure = ms5611_get_pressure();
 8005812:	e9c5 011e 	strd	r0, r1, [r5, #120]	; 0x78
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8005816:	2177      	movs	r1, #119	; 0x77
 8005818:	4618      	mov	r0, r3
 800581a:	4633      	mov	r3, r6
	uint8_t buffer[3] = {0x00,0x00,0x00};
 800581c:	f8ad 6014 	strh.w	r6, [sp, #20]
 8005820:	f88d 6016 	strb.w	r6, [sp, #22]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8005824:	f7ff fd34 	bl	8005290 <I2C_write>
		read_index = 0;
 8005828:	7026      	strb	r6, [r4, #0]
	XIMU_sens.pt_ts = millis();
 800582a:	f000 fab9 	bl	8005da0 <millis>
 800582e:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
}
 8005832:	b006      	add	sp, #24
 8005834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8005838:	f10d 0a14 	add.w	sl, sp, #20
 800583c:	4632      	mov	r2, r6
 800583e:	2303      	movs	r3, #3
 8005840:	2177      	movs	r1, #119	; 0x77
 8005842:	f8cd a000 	str.w	sl, [sp]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8005846:	f8ad 6014 	strh.w	r6, [sp, #20]
 800584a:	f88d 6016 	strb.w	r6, [sp, #22]
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 800584e:	f7ff fd0f 	bl	8005270 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8005852:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8005856:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800585a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800585e:	0200      	lsls	r0, r0, #8
 8005860:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
	if (temp != 0){
 8005864:	4318      	orrs	r0, r3
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 8005866:	4e2f      	ldr	r6, [pc, #188]	; (8005924 <ms5611_timer_update+0x1ec>)
		raw_temperature = temp;
 8005868:	4b2f      	ldr	r3, [pc, #188]	; (8005928 <ms5611_timer_update+0x1f0>)
 800586a:	bf0c      	ite	eq
 800586c:	6818      	ldreq	r0, [r3, #0]
 800586e:	6018      	strne	r0, [r3, #0]
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 8005870:	8933      	ldrh	r3, [r6, #8]
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8005872:	eba0 2003 	sub.w	r0, r0, r3, lsl #8
 8005876:	f7fa fdb5 	bl	80003e4 <__aeabi_ui2d>
 800587a:	4680      	mov	r8, r0
 800587c:	4689      	mov	r9, r1
 800587e:	8970      	ldrh	r0, [r6, #10]
 8005880:	f7fa fdc0 	bl	8000404 <__aeabi_i2d>
 8005884:	2200      	movs	r2, #0
 8005886:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800588a:	f7fa fe25 	bl	80004d8 <__aeabi_dmul>
 800588e:	4642      	mov	r2, r8
 8005890:	464b      	mov	r3, r9
 8005892:	f7fa fe21 	bl	80004d8 <__aeabi_dmul>
 8005896:	2200      	movs	r2, #0
 8005898:	4b24      	ldr	r3, [pc, #144]	; (800592c <ms5611_timer_update+0x1f4>)
 800589a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800589e:	f7fa fc65 	bl	800016c <__adddf3>
	if (TEMP < 2000.0){
 80058a2:	2200      	movs	r2, #0
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 80058a4:	4606      	mov	r6, r0
 80058a6:	460f      	mov	r7, r1
	if (TEMP < 2000.0){
 80058a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058ac:	2300      	movs	r3, #0
 80058ae:	f7fb f885 	bl	80009bc <__aeabi_dcmplt>
 80058b2:	b998      	cbnz	r0, 80058dc <ms5611_timer_update+0x1a4>
	return TEMP / 100.0;
 80058b4:	a314      	add	r3, pc, #80	; (adr r3, 8005908 <ms5611_timer_update+0x1d0>)
 80058b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ba:	4630      	mov	r0, r6
 80058bc:	4639      	mov	r1, r7
 80058be:	f7fa fe0b 	bl	80004d8 <__aeabi_dmul>
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80058c2:	4a16      	ldr	r2, [pc, #88]	; (800591c <ms5611_timer_update+0x1e4>)
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80058c4:	682b      	ldr	r3, [r5, #0]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80058c6:	7812      	ldrb	r2, [r2, #0]
		XIMU_sens.temperature = ms5611_get_temperature();
 80058c8:	4d15      	ldr	r5, [pc, #84]	; (8005920 <ms5611_timer_update+0x1e8>)
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80058ca:	0052      	lsls	r2, r2, #1
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80058cc:	f8cd a000 	str.w	sl, [sp]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80058d0:	2600      	movs	r6, #0
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80058d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		XIMU_sens.temperature = ms5611_get_temperature();
 80058d6:	e9c5 0120 	strd	r0, r1, [r5, #128]	; 0x80
 80058da:	e766      	b.n	80057aa <ms5611_timer_update+0x72>
		T2 = dT * (dT / (2147483648.0));
 80058dc:	4642      	mov	r2, r8
 80058de:	464b      	mov	r3, r9
 80058e0:	4640      	mov	r0, r8
 80058e2:	4649      	mov	r1, r9
 80058e4:	f7fa fdf8 	bl	80004d8 <__aeabi_dmul>
 80058e8:	2200      	movs	r2, #0
 80058ea:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 80058ee:	f7fa fdf3 	bl	80004d8 <__aeabi_dmul>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	4630      	mov	r0, r6
 80058f8:	4639      	mov	r1, r7
 80058fa:	f7fa fc35 	bl	8000168 <__aeabi_dsub>
 80058fe:	4606      	mov	r6, r0
 8005900:	460f      	mov	r7, r1
 8005902:	e7d7      	b.n	80058b4 <ms5611_timer_update+0x17c>
 8005904:	f3af 8000 	nop.w
 8005908:	47ae147b 	.word	0x47ae147b
 800590c:	3f847ae1 	.word	0x3f847ae1
 8005910:	200003be 	.word	0x200003be
 8005914:	200007d4 	.word	0x200007d4
 8005918:	20000d14 	.word	0x20000d14
 800591c:	2000003c 	.word	0x2000003c
 8005920:	200005f8 	.word	0x200005f8
 8005924:	20000d18 	.word	0x20000d18
 8005928:	20000d24 	.word	0x20000d24
 800592c:	409f4000 	.word	0x409f4000

08005930 <quat2mat>:
#include "quaternion.h"
#include "arm_math.h"



void quat2mat(arm_matrix_instance_f32* q_,arm_matrix_instance_f32* R_){
 8005930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifdef QUATERNION_SIZE_CHECK
	if (q_->numCols != 1 || q_->numRows != 4 || R_->numCols != 3 || R_->numRows != 3){
		return;
	}
#endif
	float32_t* q = q_->pData;
 8005934:	6845      	ldr	r5, [r0, #4]
void quat2mat(arm_matrix_instance_f32* q_,arm_matrix_instance_f32* R_){
 8005936:	b085      	sub	sp, #20
	float32_t* R = R_->pData;

	float32_t q0_2 = q[0]*q[0];
 8005938:	f8d5 a000 	ldr.w	sl, [r5]
	float32_t* R = R_->pData;
 800593c:	684c      	ldr	r4, [r1, #4]
	float32_t q0_2 = q[0]*q[0];
 800593e:	4650      	mov	r0, sl
 8005940:	4651      	mov	r1, sl
 8005942:	f7fb fa1f 	bl	8000d84 <__aeabi_fmul>
	float32_t q1_2 = q[1]*q[1];
 8005946:	f8d5 8004 	ldr.w	r8, [r5, #4]
	float32_t q0_2 = q[0]*q[0];
 800594a:	9002      	str	r0, [sp, #8]
	float32_t q1_2 = q[1]*q[1];
 800594c:	4641      	mov	r1, r8
 800594e:	4640      	mov	r0, r8
 8005950:	f7fb fa18 	bl	8000d84 <__aeabi_fmul>
	float32_t q2_2 = q[2]*q[2];
 8005954:	68af      	ldr	r7, [r5, #8]
	float32_t q1_2 = q[1]*q[1];
 8005956:	9000      	str	r0, [sp, #0]
	float32_t q2_2 = q[2]*q[2];
 8005958:	4639      	mov	r1, r7
 800595a:	4638      	mov	r0, r7
 800595c:	f7fb fa12 	bl	8000d84 <__aeabi_fmul>
	float32_t q3_2 = q[3]*q[3];
 8005960:	f8d5 900c 	ldr.w	r9, [r5, #12]
	float32_t q2_2 = q[2]*q[2];
 8005964:	4606      	mov	r6, r0
	float32_t q3_2 = q[3]*q[3];
 8005966:	4649      	mov	r1, r9
 8005968:	4648      	mov	r0, r9
 800596a:	f7fb fa0b 	bl	8000d84 <__aeabi_fmul>
	float32_t q0q1_ = 2 * q[0]*q[1];
 800596e:	4641      	mov	r1, r8
	float32_t q3_2 = q[3]*q[3];
 8005970:	4605      	mov	r5, r0
	float32_t q0q1_ = 2 * q[0]*q[1];
 8005972:	4650      	mov	r0, sl
 8005974:	f7fb fa06 	bl	8000d84 <__aeabi_fmul>
 8005978:	4601      	mov	r1, r0
 800597a:	f7fb f8fb 	bl	8000b74 <__addsf3>
	float32_t q0q2_ = 2 * q[0]*q[2];
 800597e:	4639      	mov	r1, r7
	float32_t q0q1_ = 2 * q[0]*q[1];
 8005980:	9003      	str	r0, [sp, #12]
	float32_t q0q2_ = 2 * q[0]*q[2];
 8005982:	4650      	mov	r0, sl
 8005984:	f7fb f9fe 	bl	8000d84 <__aeabi_fmul>
 8005988:	4601      	mov	r1, r0
 800598a:	f7fb f8f3 	bl	8000b74 <__addsf3>
	float32_t q0q3_ = 2 * q[0]*q[3];
 800598e:	4649      	mov	r1, r9
	float32_t q0q2_ = 2 * q[0]*q[2];
 8005990:	9001      	str	r0, [sp, #4]
	float32_t q0q3_ = 2 * q[0]*q[3];
 8005992:	4650      	mov	r0, sl
 8005994:	f7fb f9f6 	bl	8000d84 <__aeabi_fmul>
 8005998:	4601      	mov	r1, r0
 800599a:	f7fb f8eb 	bl	8000b74 <__addsf3>
	float32_t q1q2_ = 2 * q[1]*q[2];
 800599e:	4639      	mov	r1, r7
	float32_t q0q3_ = 2 * q[0]*q[3];
 80059a0:	4682      	mov	sl, r0
	float32_t q1q2_ = 2 * q[1]*q[2];
 80059a2:	4640      	mov	r0, r8
 80059a4:	f7fb f9ee 	bl	8000d84 <__aeabi_fmul>
 80059a8:	4601      	mov	r1, r0
 80059aa:	f7fb f8e3 	bl	8000b74 <__addsf3>
	float32_t q1q3_ = 2 * q[1]*q[3];
 80059ae:	4649      	mov	r1, r9
	float32_t q1q2_ = 2 * q[1]*q[2];
 80059b0:	4683      	mov	fp, r0
	float32_t q1q3_ = 2 * q[1]*q[3];
 80059b2:	4640      	mov	r0, r8
 80059b4:	f7fb f9e6 	bl	8000d84 <__aeabi_fmul>
 80059b8:	4601      	mov	r1, r0
 80059ba:	f7fb f8db 	bl	8000b74 <__addsf3>
	float32_t q2q3_ = 2 * q[2]*q[3];
 80059be:	4649      	mov	r1, r9
	float32_t q1q3_ = 2 * q[1]*q[3];
 80059c0:	4680      	mov	r8, r0
	float32_t q2q3_ = 2 * q[2]*q[3];
 80059c2:	4638      	mov	r0, r7
 80059c4:	f7fb f9de 	bl	8000d84 <__aeabi_fmul>
 80059c8:	4601      	mov	r1, r0
 80059ca:	f7fb f8d3 	bl	8000b74 <__addsf3>

	R[0] = q0_2 + q1_2 - q2_2 - q3_2;
 80059ce:	f8dd 9008 	ldr.w	r9, [sp, #8]
	float32_t q2q3_ = 2 * q[2]*q[3];
 80059d2:	4607      	mov	r7, r0
	R[0] = q0_2 + q1_2 - q2_2 - q3_2;
 80059d4:	9900      	ldr	r1, [sp, #0]
 80059d6:	4648      	mov	r0, r9
 80059d8:	f7fb f8cc 	bl	8000b74 <__addsf3>
 80059dc:	4631      	mov	r1, r6
 80059de:	f7fb f8c7 	bl	8000b70 <__aeabi_fsub>
 80059e2:	4629      	mov	r1, r5
 80059e4:	f7fb f8c4 	bl	8000b70 <__aeabi_fsub>
	R[1] = q1q2_ - q0q3_;
 80059e8:	4651      	mov	r1, sl
	R[0] = q0_2 + q1_2 - q2_2 - q3_2;
 80059ea:	6020      	str	r0, [r4, #0]
	R[1] = q1q2_ - q0q3_;
 80059ec:	4658      	mov	r0, fp
 80059ee:	f7fb f8bf 	bl	8000b70 <__aeabi_fsub>
	R[2] = q1q3_ + q0q2_;
 80059f2:	4641      	mov	r1, r8
	R[1] = q1q2_ - q0q3_;
 80059f4:	6060      	str	r0, [r4, #4]
	R[2] = q1q3_ + q0q2_;
 80059f6:	9801      	ldr	r0, [sp, #4]
 80059f8:	f7fb f8bc 	bl	8000b74 <__addsf3>
	R[3] = q1q2_ + q0q3_;
 80059fc:	4659      	mov	r1, fp
	R[2] = q1q3_ + q0q2_;
 80059fe:	60a0      	str	r0, [r4, #8]
	R[3] = q1q2_ + q0q3_;
 8005a00:	4650      	mov	r0, sl
 8005a02:	f7fb f8b7 	bl	8000b74 <__addsf3>
	R[4] = q0_2 - q1_2 + q2_2 - q3_2;
 8005a06:	9900      	ldr	r1, [sp, #0]
	R[3] = q1q2_ + q0q3_;
 8005a08:	60e0      	str	r0, [r4, #12]
	R[4] = q0_2 - q1_2 + q2_2 - q3_2;
 8005a0a:	4648      	mov	r0, r9
 8005a0c:	f7fb f8b0 	bl	8000b70 <__aeabi_fsub>
 8005a10:	4629      	mov	r1, r5
 8005a12:	4681      	mov	r9, r0
 8005a14:	f7fb f8ac 	bl	8000b70 <__aeabi_fsub>
 8005a18:	4631      	mov	r1, r6
 8005a1a:	f7fb f8ab 	bl	8000b74 <__addsf3>
	R[5] = q2q3_ - q0q1_;
 8005a1e:	f8dd a00c 	ldr.w	sl, [sp, #12]
	R[4] = q0_2 - q1_2 + q2_2 - q3_2;
 8005a22:	6120      	str	r0, [r4, #16]
	R[5] = q2q3_ - q0q1_;
 8005a24:	4651      	mov	r1, sl
 8005a26:	4638      	mov	r0, r7
 8005a28:	f7fb f8a2 	bl	8000b70 <__aeabi_fsub>
	R[6] = q1q3_ - q0q2_;
 8005a2c:	9901      	ldr	r1, [sp, #4]
	R[5] = q2q3_ - q0q1_;
 8005a2e:	6160      	str	r0, [r4, #20]
	R[6] = q1q3_ - q0q2_;
 8005a30:	4640      	mov	r0, r8
 8005a32:	f7fb f89d 	bl	8000b70 <__aeabi_fsub>
	R[7] = q2q3_ + q0q1_;
 8005a36:	4639      	mov	r1, r7
	R[6] = q1q3_ - q0q2_;
 8005a38:	61a0      	str	r0, [r4, #24]
	R[7] = q2q3_ + q0q1_;
 8005a3a:	4650      	mov	r0, sl
 8005a3c:	f7fb f89a 	bl	8000b74 <__addsf3>
	R[8] = q0_2 - q1_2 - q2_2 + q3_2;
 8005a40:	4631      	mov	r1, r6
	R[7] = q2q3_ + q0q1_;
 8005a42:	61e0      	str	r0, [r4, #28]
	R[8] = q0_2 - q1_2 - q2_2 + q3_2;
 8005a44:	4648      	mov	r0, r9
 8005a46:	f7fb f893 	bl	8000b70 <__aeabi_fsub>
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	f7fb f892 	bl	8000b74 <__addsf3>
 8005a50:	6220      	str	r0, [r4, #32]
}
 8005a52:	b005      	add	sp, #20
 8005a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005a58 <mat2quat>:

void mat2quat(arm_matrix_instance_f32* R_,arm_matrix_instance_f32* q_){
 8005a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a5c:	460e      	mov	r6, r1

	float32_t* R = R_->pData;
 8005a5e:	6844      	ldr	r4, [r0, #4]
	float32_t* q = q_->pData;

	double t;
	if (R[8] < 0){
 8005a60:	2100      	movs	r1, #0
 8005a62:	f8d4 8020 	ldr.w	r8, [r4, #32]
	float32_t* q = q_->pData;
 8005a66:	6875      	ldr	r5, [r6, #4]
	if (R[8] < 0){
 8005a68:	4640      	mov	r0, r8
 8005a6a:	f8d4 9000 	ldr.w	r9, [r4]
 8005a6e:	6927      	ldr	r7, [r4, #16]
 8005a70:	f7fb fb26 	bl	80010c0 <__aeabi_fcmplt>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	d15a      	bne.n	8005b2e <mat2quat+0xd6>
			q[1] = R[3]+R[1];
			q[2] = t;
			q[3] = R[7]+R[5];
		}
	 }else{
		 if (R[0] < -R[4]){
 8005a78:	f107 4000 	add.w	r0, r7, #2147483648	; 0x80000000
 8005a7c:	4649      	mov	r1, r9
 8005a7e:	f7fb fb3d 	bl	80010fc <__aeabi_fcmpgt>
 8005a82:	2800      	cmp	r0, #0
 8005a84:	d132      	bne.n	8005aec <mat2quat+0x94>
			 q[0] = R[3]-R[1];
			 q[1] = R[2]+R[6];
			 q[2] = R[7]+R[5];
			 q[3] = t;
		 }else{
			 t = 1 + R[0] + R[4] + R[8];
 8005a86:	4649      	mov	r1, r9
 8005a88:	4640      	mov	r0, r8
 8005a8a:	f7fb f873 	bl	8000b74 <__addsf3>
 8005a8e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005a92:	f7fb f86f 	bl	8000b74 <__addsf3>
 8005a96:	4639      	mov	r1, r7
 8005a98:	f7fb f86c 	bl	8000b74 <__addsf3>
 8005a9c:	4607      	mov	r7, r0
 8005a9e:	f7fa fcc3 	bl	8000428 <__aeabi_f2d>

			 q[0] = t;
 8005aa2:	602f      	str	r7, [r5, #0]
			 t = 1 + R[0] + R[4] + R[8];
 8005aa4:	4680      	mov	r8, r0
 8005aa6:	4689      	mov	r9, r1
			 q[1] = R[7]-R[5];
 8005aa8:	69e0      	ldr	r0, [r4, #28]
 8005aaa:	6961      	ldr	r1, [r4, #20]
 8005aac:	f7fb f860 	bl	8000b70 <__aeabi_fsub>
 8005ab0:	6068      	str	r0, [r5, #4]
			 q[2] = R[2]-R[6];
 8005ab2:	69a1      	ldr	r1, [r4, #24]
 8005ab4:	68a0      	ldr	r0, [r4, #8]
 8005ab6:	f7fb f85b 	bl	8000b70 <__aeabi_fsub>
 8005aba:	60a8      	str	r0, [r5, #8]
			 q[3] = R[3]-R[1];
 8005abc:	6861      	ldr	r1, [r4, #4]
 8005abe:	68e0      	ldr	r0, [r4, #12]
 8005ac0:	f7fb f856 	bl	8000b70 <__aeabi_fsub>
 8005ac4:	60e8      	str	r0, [r5, #12]
		 }
	 }

	//normalize
	arm_mat_scale_f32(q_,0.5f / sqrt(t),q_);
 8005ac6:	4640      	mov	r0, r8
 8005ac8:	4649      	mov	r1, r9
 8005aca:	f007 f9c1 	bl	800ce50 <sqrt>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	4939      	ldr	r1, [pc, #228]	; (8005bbc <mat2quat+0x164>)
 8005ad6:	f7fa fe29 	bl	800072c <__aeabi_ddiv>
 8005ada:	f7fa fff5 	bl	8000ac8 <__aeabi_d2f>
 8005ade:	4632      	mov	r2, r6
 8005ae0:	4601      	mov	r1, r0
 8005ae2:	4630      	mov	r0, r6
}
 8005ae4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	arm_mat_scale_f32(q_,0.5f / sqrt(t),q_);
 8005ae8:	f004 b9c6 	b.w	8009e78 <arm_mat_scale_f32>
			 t = 1 - R[0] - R[4] + R[8];
 8005aec:	4640      	mov	r0, r8
 8005aee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005af2:	f7fb f83f 	bl	8000b74 <__addsf3>
 8005af6:	4649      	mov	r1, r9
 8005af8:	f7fb f83a 	bl	8000b70 <__aeabi_fsub>
 8005afc:	4639      	mov	r1, r7
 8005afe:	f7fb f837 	bl	8000b70 <__aeabi_fsub>
 8005b02:	4607      	mov	r7, r0
 8005b04:	f7fa fc90 	bl	8000428 <__aeabi_f2d>
 8005b08:	4680      	mov	r8, r0
 8005b0a:	4689      	mov	r9, r1
			 q[0] = R[3]-R[1];
 8005b0c:	68e0      	ldr	r0, [r4, #12]
 8005b0e:	6861      	ldr	r1, [r4, #4]
 8005b10:	f7fb f82e 	bl	8000b70 <__aeabi_fsub>
 8005b14:	6028      	str	r0, [r5, #0]
			 q[1] = R[2]+R[6];
 8005b16:	69a1      	ldr	r1, [r4, #24]
 8005b18:	68a0      	ldr	r0, [r4, #8]
 8005b1a:	f7fb f82b 	bl	8000b74 <__addsf3>
 8005b1e:	6068      	str	r0, [r5, #4]
			 q[2] = R[7]+R[5];
 8005b20:	6961      	ldr	r1, [r4, #20]
 8005b22:	69e0      	ldr	r0, [r4, #28]
 8005b24:	f7fb f826 	bl	8000b74 <__addsf3>
			 q[3] = t;
 8005b28:	60ef      	str	r7, [r5, #12]
			 q[2] = R[7]+R[5];
 8005b2a:	60a8      	str	r0, [r5, #8]
 8005b2c:	e7cb      	b.n	8005ac6 <mat2quat+0x6e>
		if (R[0] > R[4]){
 8005b2e:	4639      	mov	r1, r7
 8005b30:	4648      	mov	r0, r9
 8005b32:	f7fb fae3 	bl	80010fc <__aeabi_fcmpgt>
 8005b36:	b300      	cbz	r0, 8005b7a <mat2quat+0x122>
			t = 1 + R[0] - R[4] - R[8];
 8005b38:	4639      	mov	r1, r7
 8005b3a:	4648      	mov	r0, r9
 8005b3c:	f7fb f818 	bl	8000b70 <__aeabi_fsub>
 8005b40:	4641      	mov	r1, r8
 8005b42:	f7fb f815 	bl	8000b70 <__aeabi_fsub>
 8005b46:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005b4a:	f7fb f813 	bl	8000b74 <__addsf3>
 8005b4e:	4607      	mov	r7, r0
 8005b50:	f7fa fc6a 	bl	8000428 <__aeabi_f2d>
 8005b54:	4680      	mov	r8, r0
 8005b56:	4689      	mov	r9, r1
			q[0] = R[7]-R[5];
 8005b58:	69e0      	ldr	r0, [r4, #28]
 8005b5a:	6961      	ldr	r1, [r4, #20]
 8005b5c:	f7fb f808 	bl	8000b70 <__aeabi_fsub>
			q[1] = t;
 8005b60:	606f      	str	r7, [r5, #4]
			q[0] = R[7]-R[5];
 8005b62:	6028      	str	r0, [r5, #0]
			q[2] = R[3]+R[1];
 8005b64:	6861      	ldr	r1, [r4, #4]
 8005b66:	68e0      	ldr	r0, [r4, #12]
 8005b68:	f7fb f804 	bl	8000b74 <__addsf3>
 8005b6c:	60a8      	str	r0, [r5, #8]
			q[3] = R[2]+R[6];
 8005b6e:	69a1      	ldr	r1, [r4, #24]
 8005b70:	68a0      	ldr	r0, [r4, #8]
 8005b72:	f7fa ffff 	bl	8000b74 <__addsf3>
 8005b76:	60e8      	str	r0, [r5, #12]
 8005b78:	e7a5      	b.n	8005ac6 <mat2quat+0x6e>
			t = 1 - R[0] + R[4] - R[8];
 8005b7a:	4649      	mov	r1, r9
 8005b7c:	4638      	mov	r0, r7
 8005b7e:	f7fa fff7 	bl	8000b70 <__aeabi_fsub>
 8005b82:	4641      	mov	r1, r8
 8005b84:	f7fa fff4 	bl	8000b70 <__aeabi_fsub>
 8005b88:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005b8c:	f7fa fff2 	bl	8000b74 <__addsf3>
 8005b90:	4607      	mov	r7, r0
 8005b92:	f7fa fc49 	bl	8000428 <__aeabi_f2d>
 8005b96:	4680      	mov	r8, r0
 8005b98:	4689      	mov	r9, r1
			q[0] = R[2]-R[6];
 8005b9a:	68a0      	ldr	r0, [r4, #8]
 8005b9c:	69a1      	ldr	r1, [r4, #24]
 8005b9e:	f7fa ffe7 	bl	8000b70 <__aeabi_fsub>
 8005ba2:	6028      	str	r0, [r5, #0]
			q[1] = R[3]+R[1];
 8005ba4:	6861      	ldr	r1, [r4, #4]
 8005ba6:	68e0      	ldr	r0, [r4, #12]
 8005ba8:	f7fa ffe4 	bl	8000b74 <__addsf3>
			q[2] = t;
 8005bac:	60af      	str	r7, [r5, #8]
			q[1] = R[3]+R[1];
 8005bae:	6068      	str	r0, [r5, #4]
			q[3] = R[7]+R[5];
 8005bb0:	6961      	ldr	r1, [r4, #20]
 8005bb2:	69e0      	ldr	r0, [r4, #28]
 8005bb4:	f7fa ffde 	bl	8000b74 <__addsf3>
 8005bb8:	60e8      	str	r0, [r5, #12]
 8005bba:	e784      	b.n	8005ac6 <mat2quat+0x6e>
 8005bbc:	3fe00000 	.word	0x3fe00000

08005bc0 <otimes>:
}

/**
 * quaternion multiplication
 */
void otimes(arm_matrix_instance_f32* q1,arm_matrix_instance_f32* q2,arm_matrix_instance_f32* q_res){
 8005bc0:	b570      	push	{r4, r5, r6, lr}
 8005bc2:	4616      	mov	r6, r2
	arm_matrix_instance_f32 qL;
	float32_t qL_data[4*4];
	arm_mat_init_f32(&qL,4,4,qL_data);
 8005bc4:	2204      	movs	r2, #4
void otimes(arm_matrix_instance_f32* q1,arm_matrix_instance_f32* q2,arm_matrix_instance_f32* q_res){
 8005bc6:	4604      	mov	r4, r0
 8005bc8:	460d      	mov	r5, r1
 8005bca:	b092      	sub	sp, #72	; 0x48
	arm_mat_init_f32(&qL,4,4,qL_data);
 8005bcc:	4668      	mov	r0, sp
 8005bce:	4611      	mov	r1, r2
 8005bd0:	ab02      	add	r3, sp, #8
 8005bd2:	f004 fbb9 	bl	800a348 <arm_mat_init_f32>
	float32_t* q = q_->pData;
 8005bd6:	6864      	ldr	r4, [r4, #4]
	float32_t* qL = qL_->pData;
 8005bd8:	9b01      	ldr	r3, [sp, #4]
	qL[0] = q[0];		qL[1] = -q[1];		qL[2] = -q[2];		qL[3] = -q[3];
 8005bda:	6821      	ldr	r1, [r4, #0]

	quat_L(q1,&qL);
	arm_mat_mult_f32(&qL,q2,q_res);
 8005bdc:	4632      	mov	r2, r6
	qL[0] = q[0];		qL[1] = -q[1];		qL[2] = -q[2];		qL[3] = -q[3];
 8005bde:	6019      	str	r1, [r3, #0]
 8005be0:	6860      	ldr	r0, [r4, #4]
	arm_mat_mult_f32(&qL,q2,q_res);
 8005be2:	4629      	mov	r1, r5
	qL[0] = q[0];		qL[1] = -q[1];		qL[2] = -q[2];		qL[3] = -q[3];
 8005be4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005be8:	6058      	str	r0, [r3, #4]
 8005bea:	68a5      	ldr	r5, [r4, #8]
	arm_mat_mult_f32(&qL,q2,q_res);
 8005bec:	4668      	mov	r0, sp
	qL[0] = q[0];		qL[1] = -q[1];		qL[2] = -q[2];		qL[3] = -q[3];
 8005bee:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8005bf2:	609d      	str	r5, [r3, #8]
 8005bf4:	68e5      	ldr	r5, [r4, #12]
 8005bf6:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8005bfa:	60dd      	str	r5, [r3, #12]
	qL[4] = q[1];		qL[5] = q[0];		qL[6] = -q[3];		qL[7] = q[2];
 8005bfc:	6865      	ldr	r5, [r4, #4]
 8005bfe:	611d      	str	r5, [r3, #16]
 8005c00:	6825      	ldr	r5, [r4, #0]
 8005c02:	615d      	str	r5, [r3, #20]
 8005c04:	68e5      	ldr	r5, [r4, #12]
 8005c06:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8005c0a:	619d      	str	r5, [r3, #24]
 8005c0c:	68a5      	ldr	r5, [r4, #8]
 8005c0e:	61dd      	str	r5, [r3, #28]
	qL[8] = q[2];		qL[9] = q[3];		qL[10] = q[0];		qL[11] = -q[1];
 8005c10:	68a5      	ldr	r5, [r4, #8]
 8005c12:	621d      	str	r5, [r3, #32]
 8005c14:	68e5      	ldr	r5, [r4, #12]
 8005c16:	625d      	str	r5, [r3, #36]	; 0x24
 8005c18:	6825      	ldr	r5, [r4, #0]
 8005c1a:	629d      	str	r5, [r3, #40]	; 0x28
 8005c1c:	6865      	ldr	r5, [r4, #4]
 8005c1e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8005c22:	62dd      	str	r5, [r3, #44]	; 0x2c
	qL[12] = q[3];		qL[13] = -q[2];		qL[14] = q[1];		qL[15] = q[0];
 8005c24:	68e5      	ldr	r5, [r4, #12]
 8005c26:	631d      	str	r5, [r3, #48]	; 0x30
 8005c28:	68a5      	ldr	r5, [r4, #8]
 8005c2a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8005c2e:	635d      	str	r5, [r3, #52]	; 0x34
 8005c30:	6865      	ldr	r5, [r4, #4]
 8005c32:	639d      	str	r5, [r3, #56]	; 0x38
 8005c34:	6824      	ldr	r4, [r4, #0]
 8005c36:	63dc      	str	r4, [r3, #60]	; 0x3c
	arm_mat_mult_f32(&qL,q2,q_res);
 8005c38:	f004 f980 	bl	8009f3c <arm_mat_mult_f32>
}
 8005c3c:	b012      	add	sp, #72	; 0x48
 8005c3e:	bd70      	pop	{r4, r5, r6, pc}

08005c40 <quatexp2>:

/**
 * quaternion exponential
 */
void quatexp2(arm_matrix_instance_f32* phi_, arm_matrix_instance_f32* q_){
 8005c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	float32_t* q = q_->pData;
	float32_t* phi = phi_->pData;
 8005c44:	6844      	ldr	r4, [r0, #4]
	float32_t* q = q_->pData;
 8005c46:	684d      	ldr	r5, [r1, #4]

	float32_t theta = 0.5 * sqrt(phi[0]*phi[0] + phi[1]*phi[1] + phi[2]*phi[2]);
 8005c48:	6821      	ldr	r1, [r4, #0]
 8005c4a:	6867      	ldr	r7, [r4, #4]
 8005c4c:	4608      	mov	r0, r1
 8005c4e:	f7fb f899 	bl	8000d84 <__aeabi_fmul>
 8005c52:	4639      	mov	r1, r7
 8005c54:	4606      	mov	r6, r0
 8005c56:	4638      	mov	r0, r7
 8005c58:	f7fb f894 	bl	8000d84 <__aeabi_fmul>
 8005c5c:	4601      	mov	r1, r0
 8005c5e:	4630      	mov	r0, r6
 8005c60:	f7fa ff88 	bl	8000b74 <__addsf3>
 8005c64:	68a7      	ldr	r7, [r4, #8]
 8005c66:	4606      	mov	r6, r0
 8005c68:	4639      	mov	r1, r7
 8005c6a:	4638      	mov	r0, r7
 8005c6c:	f7fb f88a 	bl	8000d84 <__aeabi_fmul>
 8005c70:	4601      	mov	r1, r0
 8005c72:	4630      	mov	r0, r6
 8005c74:	f7fa ff7e 	bl	8000b74 <__addsf3>
 8005c78:	f7fa fbd6 	bl	8000428 <__aeabi_f2d>
 8005c7c:	f007 f8e8 	bl	800ce50 <sqrt>
 8005c80:	2200      	movs	r2, #0
 8005c82:	4b35      	ldr	r3, [pc, #212]	; (8005d58 <quatexp2+0x118>)
 8005c84:	f7fa fc28 	bl	80004d8 <__aeabi_dmul>
 8005c88:	f7fa ff1e 	bl	8000ac8 <__aeabi_d2f>

	if (fabs(theta) <= 1e-6){
 8005c8c:	f7fa fbcc 	bl	8000428 <__aeabi_f2d>
 8005c90:	a32f      	add	r3, pc, #188	; (adr r3, 8005d50 <quatexp2+0x110>)
 8005c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c96:	4606      	mov	r6, r0
 8005c98:	460f      	mov	r7, r1
 8005c9a:	f7fa fe99 	bl	80009d0 <__aeabi_dcmple>
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d14c      	bne.n	8005d3c <quatexp2+0xfc>
		q[0] = 1;	q[1] = 0;	q[2] = 0;	q[3] = 0;
		return;
	}

	q[0] = cos(theta);
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	4639      	mov	r1, r7
 8005ca6:	f007 f807 	bl	800ccb8 <cos>
 8005caa:	f7fa ff0d 	bl	8000ac8 <__aeabi_d2f>
	q[1] = sin(theta) * 0.5 * phi[0] / theta;
 8005cae:	4639      	mov	r1, r7
	q[0] = cos(theta);
 8005cb0:	6028      	str	r0, [r5, #0]
	q[1] = sin(theta) * 0.5 * phi[0] / theta;
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	f007 f836 	bl	800cd24 <sin>
 8005cb8:	4632      	mov	r2, r6
 8005cba:	4680      	mov	r8, r0
 8005cbc:	4689      	mov	r9, r1
 8005cbe:	463b      	mov	r3, r7
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	4926      	ldr	r1, [pc, #152]	; (8005d5c <quatexp2+0x11c>)
 8005cc4:	f7fa fd32 	bl	800072c <__aeabi_ddiv>
 8005cc8:	4606      	mov	r6, r0
 8005cca:	460f      	mov	r7, r1
 8005ccc:	6820      	ldr	r0, [r4, #0]
 8005cce:	f7fa fbab 	bl	8000428 <__aeabi_f2d>
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	4b20      	ldr	r3, [pc, #128]	; (8005d58 <quatexp2+0x118>)
 8005cd6:	f7fa fbff 	bl	80004d8 <__aeabi_dmul>
 8005cda:	4632      	mov	r2, r6
 8005cdc:	463b      	mov	r3, r7
 8005cde:	f7fa fbfb 	bl	80004d8 <__aeabi_dmul>
 8005ce2:	4642      	mov	r2, r8
 8005ce4:	464b      	mov	r3, r9
 8005ce6:	f7fa fbf7 	bl	80004d8 <__aeabi_dmul>
 8005cea:	f7fa feed 	bl	8000ac8 <__aeabi_d2f>
 8005cee:	6068      	str	r0, [r5, #4]
	q[2] = sin(theta) * 0.5 * phi[1] / theta;
 8005cf0:	6860      	ldr	r0, [r4, #4]
 8005cf2:	f7fa fb99 	bl	8000428 <__aeabi_f2d>
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	4b17      	ldr	r3, [pc, #92]	; (8005d58 <quatexp2+0x118>)
 8005cfa:	f7fa fbed 	bl	80004d8 <__aeabi_dmul>
 8005cfe:	4632      	mov	r2, r6
 8005d00:	463b      	mov	r3, r7
 8005d02:	f7fa fbe9 	bl	80004d8 <__aeabi_dmul>
 8005d06:	4642      	mov	r2, r8
 8005d08:	464b      	mov	r3, r9
 8005d0a:	f7fa fbe5 	bl	80004d8 <__aeabi_dmul>
 8005d0e:	f7fa fedb 	bl	8000ac8 <__aeabi_d2f>
 8005d12:	60a8      	str	r0, [r5, #8]
	q[3] = sin(theta) * 0.5 * phi[2] / theta;
 8005d14:	68a0      	ldr	r0, [r4, #8]
 8005d16:	f7fa fb87 	bl	8000428 <__aeabi_f2d>
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	4b0e      	ldr	r3, [pc, #56]	; (8005d58 <quatexp2+0x118>)
 8005d1e:	f7fa fbdb 	bl	80004d8 <__aeabi_dmul>
 8005d22:	4632      	mov	r2, r6
 8005d24:	463b      	mov	r3, r7
 8005d26:	f7fa fbd7 	bl	80004d8 <__aeabi_dmul>
 8005d2a:	4642      	mov	r2, r8
 8005d2c:	464b      	mov	r3, r9
 8005d2e:	f7fa fbd3 	bl	80004d8 <__aeabi_dmul>
 8005d32:	f7fa fec9 	bl	8000ac8 <__aeabi_d2f>
 8005d36:	60e8      	str	r0, [r5, #12]
}
 8005d38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		q[0] = 1;	q[1] = 0;	q[2] = 0;	q[3] = 0;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005d42:	606b      	str	r3, [r5, #4]
 8005d44:	602a      	str	r2, [r5, #0]
 8005d46:	60ab      	str	r3, [r5, #8]
 8005d48:	60eb      	str	r3, [r5, #12]
}
 8005d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d4e:	bf00      	nop
 8005d50:	a0b5ed8d 	.word	0xa0b5ed8d
 8005d54:	3eb0c6f7 	.word	0x3eb0c6f7
 8005d58:	3fe00000 	.word	0x3fe00000
 8005d5c:	3ff00000 	.word	0x3ff00000

08005d60 <systickInit>:

static volatile uint32_t ticks = 0;

void systickInit(){

	   if (SysTick_Config(SystemCoreClock / SYSTICK_FREQ)){
 8005d60:	4b0b      	ldr	r3, [pc, #44]	; (8005d90 <systickInit+0x30>)
 8005d62:	4a0c      	ldr	r2, [pc, #48]	; (8005d94 <systickInit+0x34>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	fba2 2303 	umull	r2, r3, r2, r3
 8005d6a:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d72:	d300      	bcc.n	8005d76 <systickInit+0x16>
 8005d74:	e7fe      	b.n	8005d74 <systickInit+0x14>
void systickInit(){
 8005d76:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d78:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d7a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d7c:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d7e:	4a06      	ldr	r2, [pc, #24]	; (8005d98 <systickInit+0x38>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d80:	4c06      	ldr	r4, [pc, #24]	; (8005d9c <systickInit+0x3c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d82:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d84:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
		   while (1){ /* Error in initializing Systick */ }
	   }
}
 8005d88:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d8a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d8c:	6011      	str	r1, [r2, #0]
 8005d8e:	4770      	bx	lr
 8005d90:	20000038 	.word	0x20000038
 8005d94:	10624dd3 	.word	0x10624dd3
 8005d98:	e000e010 	.word	0xe000e010
 8005d9c:	e000ed00 	.word	0xe000ed00

08005da0 <millis>:
/**
 * return milliseconds
 * @return time since systickInit in milliseconds
 */
uint32_t millis(){
	return ticks;
 8005da0:	4b01      	ldr	r3, [pc, #4]	; (8005da8 <millis+0x8>)
 8005da2:	6818      	ldr	r0, [r3, #0]
}
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	200003c0 	.word	0x200003c0

08005dac <delay>:
	return ticks;
 8005dac:	4a03      	ldr	r2, [pc, #12]	; (8005dbc <delay+0x10>)
 8005dae:	6811      	ldr	r1, [r2, #0]
 8005db0:	6813      	ldr	r3, [r2, #0]
 * delay milliseconds
 * @param ms milliseconds to delay
 */
void delay(uint32_t ms){
	uint32_t start = millis();
	while(millis() - start < ms){
 8005db2:	1a5b      	subs	r3, r3, r1
 8005db4:	4283      	cmp	r3, r0
 8005db6:	d3fb      	bcc.n	8005db0 <delay+0x4>
		//do nothing
	}
}
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	200003c0 	.word	0x200003c0

08005dc0 <systick_Inc>:
/**
 * add this function in stm32f1xx_it
 * called by the system to update systick accordingly
 */
void systick_Inc(void) {
  ticks++;
 8005dc0:	4a02      	ldr	r2, [pc, #8]	; (8005dcc <systick_Inc+0xc>)
 8005dc2:	6813      	ldr	r3, [r2, #0]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	6013      	str	r3, [r2, #0]
}
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	200003c0 	.word	0x200003c0

08005dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005dd0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005dd6:	490d      	ldr	r1, [pc, #52]	; (8005e0c <HAL_InitTick+0x3c>)
 8005dd8:	4a0d      	ldr	r2, [pc, #52]	; (8005e10 <HAL_InitTick+0x40>)
 8005dda:	7809      	ldrb	r1, [r1, #0]
 8005ddc:	6812      	ldr	r2, [r2, #0]
 8005dde:	fbb3 f3f1 	udiv	r3, r3, r1
{
 8005de2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005de4:	fbb2 f0f3 	udiv	r0, r2, r3
 8005de8:	f000 f8a2 	bl	8005f30 <HAL_SYSTICK_Config>
 8005dec:	b908      	cbnz	r0, 8005df2 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005dee:	2d0f      	cmp	r5, #15
 8005df0:	d901      	bls.n	8005df6 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8005df2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8005df4:	bd38      	pop	{r3, r4, r5, pc}
 8005df6:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005df8:	4602      	mov	r2, r0
 8005dfa:	4629      	mov	r1, r5
 8005dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005e00:	f000 f852 	bl	8005ea8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005e04:	4b03      	ldr	r3, [pc, #12]	; (8005e14 <HAL_InitTick+0x44>)
 8005e06:	4620      	mov	r0, r4
 8005e08:	601d      	str	r5, [r3, #0]
}
 8005e0a:	bd38      	pop	{r3, r4, r5, pc}
 8005e0c:	2000003d 	.word	0x2000003d
 8005e10:	20000038 	.word	0x20000038
 8005e14:	20000040 	.word	0x20000040

08005e18 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e18:	4a07      	ldr	r2, [pc, #28]	; (8005e38 <HAL_Init+0x20>)
{
 8005e1a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e1c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e1e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e20:	f043 0310 	orr.w	r3, r3, #16
 8005e24:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e26:	f000 f82d 	bl	8005e84 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	f7ff ffd0 	bl	8005dd0 <HAL_InitTick>
  HAL_MspInit();
 8005e30:	f7fc fd7c 	bl	800292c <HAL_MspInit>
}
 8005e34:	2000      	movs	r0, #0
 8005e36:	bd08      	pop	{r3, pc}
 8005e38:	40022000 	.word	0x40022000

08005e3c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005e3c:	4a03      	ldr	r2, [pc, #12]	; (8005e4c <HAL_IncTick+0x10>)
 8005e3e:	4b04      	ldr	r3, [pc, #16]	; (8005e50 <HAL_IncTick+0x14>)
 8005e40:	6811      	ldr	r1, [r2, #0]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	440b      	add	r3, r1
 8005e46:	6013      	str	r3, [r2, #0]
}
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	20000d28 	.word	0x20000d28
 8005e50:	2000003d 	.word	0x2000003d

08005e54 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005e54:	4b01      	ldr	r3, [pc, #4]	; (8005e5c <HAL_GetTick+0x8>)
 8005e56:	6818      	ldr	r0, [r3, #0]
}
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	20000d28 	.word	0x20000d28

08005e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e60:	b538      	push	{r3, r4, r5, lr}
 8005e62:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005e64:	f7ff fff6 	bl	8005e54 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e68:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8005e6a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8005e6c:	d002      	beq.n	8005e74 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e6e:	4b04      	ldr	r3, [pc, #16]	; (8005e80 <HAL_Delay+0x20>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e74:	f7ff ffee 	bl	8005e54 <HAL_GetTick>
 8005e78:	1b40      	subs	r0, r0, r5
 8005e7a:	42a0      	cmp	r0, r4
 8005e7c:	d3fa      	bcc.n	8005e74 <HAL_Delay+0x14>
  {
  }
}
 8005e7e:	bd38      	pop	{r3, r4, r5, pc}
 8005e80:	2000003d 	.word	0x2000003d

08005e84 <HAL_NVIC_SetPriorityGrouping>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e84:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e88:	4a06      	ldr	r2, [pc, #24]	; (8005ea4 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005e8a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e8c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005e8e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e92:	400b      	ands	r3, r1
 8005e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8005e9c:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8005e9e:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	e000ed00 	.word	0xe000ed00

08005ea8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ea8:	4b18      	ldr	r3, [pc, #96]	; (8005f0c <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005eaa:	b430      	push	{r4, r5}
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005eb2:	f1c3 0507 	rsb	r5, r3, #7
 8005eb6:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005eb8:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ebc:	bf28      	it	cs
 8005ebe:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ec0:	2c06      	cmp	r4, #6
 8005ec2:	d919      	bls.n	8005ef8 <HAL_NVIC_SetPriority+0x50>
 8005ec4:	f04f 34ff 	mov.w	r4, #4294967295
 8005ec8:	3b03      	subs	r3, #3
 8005eca:	409c      	lsls	r4, r3
 8005ecc:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed4:	40aa      	lsls	r2, r5
 8005ed6:	ea21 0102 	bic.w	r1, r1, r2
 8005eda:	fa01 f203 	lsl.w	r2, r1, r3
 8005ede:	4322      	orrs	r2, r4
 8005ee0:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	db0a      	blt.n	8005efe <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ee8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005eec:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005ef0:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005ef4:	bc30      	pop	{r4, r5}
 8005ef6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ef8:	2400      	movs	r4, #0
 8005efa:	4623      	mov	r3, r4
 8005efc:	e7e8      	b.n	8005ed0 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005efe:	4b04      	ldr	r3, [pc, #16]	; (8005f10 <HAL_NVIC_SetPriority+0x68>)
 8005f00:	f000 000f 	and.w	r0, r0, #15
 8005f04:	4403      	add	r3, r0
 8005f06:	761a      	strb	r2, [r3, #24]
 8005f08:	bc30      	pop	{r4, r5}
 8005f0a:	4770      	bx	lr
 8005f0c:	e000ed00 	.word	0xe000ed00
 8005f10:	e000ecfc 	.word	0xe000ecfc

08005f14 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005f14:	2800      	cmp	r0, #0
 8005f16:	db07      	blt.n	8005f28 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f18:	2301      	movs	r3, #1
 8005f1a:	f000 011f 	and.w	r1, r0, #31
 8005f1e:	4a03      	ldr	r2, [pc, #12]	; (8005f2c <HAL_NVIC_EnableIRQ+0x18>)
 8005f20:	408b      	lsls	r3, r1
 8005f22:	0940      	lsrs	r0, r0, #5
 8005f24:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	e000e100 	.word	0xe000e100

08005f30 <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f30:	3801      	subs	r0, #1
 8005f32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005f36:	d20d      	bcs.n	8005f54 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f38:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f3a:	25f0      	movs	r5, #240	; 0xf0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f3c:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f3e:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f40:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f42:	4c06      	ldr	r4, [pc, #24]	; (8005f5c <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f44:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f46:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f4a:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8005f4c:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f4e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f50:	6019      	str	r1, [r3, #0]
 8005f52:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005f54:	2001      	movs	r0, #1
 8005f56:	4770      	bx	lr
 8005f58:	e000e010 	.word	0xe000e010
 8005f5c:	e000ed00 	.word	0xe000ed00

08005f60 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005f60:	b350      	cbz	r0, 8005fb8 <HAL_DMA_Init+0x58>
 8005f62:	4602      	mov	r2, r0
{
 8005f64:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005f66:	e9d0 3601 	ldrd	r3, r6, [r0, #4]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f6a:	2400      	movs	r4, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005f6c:	2501      	movs	r5, #1
  tmp |=  hdma->Init.Direction        |
 8005f6e:	4333      	orrs	r3, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f70:	68d6      	ldr	r6, [r2, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005f72:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f74:	4333      	orrs	r3, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005f76:	4911      	ldr	r1, [pc, #68]	; (8005fbc <HAL_DMA_Init+0x5c>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f78:	6916      	ldr	r6, [r2, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005f7a:	4f11      	ldr	r7, [pc, #68]	; (8005fc0 <HAL_DMA_Init+0x60>)
 8005f7c:	4401      	add	r1, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f7e:	4333      	orrs	r3, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f80:	6956      	ldr	r6, [r2, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005f82:	fba7 7101 	umull	r7, r1, r7, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f86:	4333      	orrs	r3, r6
 8005f88:	6996      	ldr	r6, [r2, #24]
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f8a:	69d7      	ldr	r7, [r2, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f8c:	4333      	orrs	r3, r6
  tmp = hdma->Instance->CCR;
 8005f8e:	6806      	ldr	r6, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005f90:	0909      	lsrs	r1, r1, #4
 8005f92:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005f94:	f426 567f 	bic.w	r6, r6, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f98:	433b      	orrs	r3, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005f9a:	f026 0630 	bic.w	r6, r6, #48	; 0x30
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005f9e:	6411      	str	r1, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005fa0:	4908      	ldr	r1, [pc, #32]	; (8005fc4 <HAL_DMA_Init+0x64>)
  tmp |=  hdma->Init.Direction        |
 8005fa2:	4333      	orrs	r3, r6
  hdma->DmaBaseAddress = DMA1;
 8005fa4:	63d1      	str	r1, [r2, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8005fa6:	6003      	str	r3, [r0, #0]
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;

  return HAL_OK;
 8005fa8:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005faa:	6394      	str	r4, [r2, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8005fac:	f882 4020 	strb.w	r4, [r2, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8005fb0:	f882 5021 	strb.w	r5, [r2, #33]	; 0x21
}
 8005fb4:	bcf0      	pop	{r4, r5, r6, r7}
 8005fb6:	4770      	bx	lr
    return HAL_ERROR;
 8005fb8:	2001      	movs	r0, #1
}
 8005fba:	4770      	bx	lr
 8005fbc:	bffdfff8 	.word	0xbffdfff8
 8005fc0:	cccccccd 	.word	0xcccccccd
 8005fc4:	40020000 	.word	0x40020000

08005fc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fc8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005fca:	f890 4020 	ldrb.w	r4, [r0, #32]
 8005fce:	2c01      	cmp	r4, #1
 8005fd0:	d032      	beq.n	8006038 <HAL_DMA_Start_IT+0x70>
 8005fd2:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005fd4:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8005fd8:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8005fdc:	42a5      	cmp	r5, r4
 8005fde:	d125      	bne.n	800602c <HAL_DMA_Start_IT+0x64>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fe0:	2600      	movs	r6, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8005fe2:	f04f 0e02 	mov.w	lr, #2
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005fe6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fe8:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8005fea:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005fec:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8005fee:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 8005ff2:	40bd      	lsls	r5, r7
    __HAL_DMA_DISABLE(hdma);
 8005ff4:	f026 0601 	bic.w	r6, r6, #1

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ff8:	6847      	ldr	r7, [r0, #4]
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ffa:	f880 e021 	strb.w	lr, [r0, #33]	; 0x21
    __HAL_DMA_DISABLE(hdma);
 8005ffe:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006000:	f8cc 5004 	str.w	r5, [ip, #4]
  hdma->Instance->CNDTR = DataLength;
 8006004:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 8006006:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006008:	2f10      	cmp	r7, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800600a:	bf0b      	itete	eq
 800600c:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800600e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006010:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8006012:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8006014:	b19b      	cbz	r3, 800603e <HAL_DMA_Start_IT+0x76>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	f043 030e 	orr.w	r3, r3, #14
 800601c:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800601e:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 8006020:	6822      	ldr	r2, [r4, #0]
}
 8006022:	4618      	mov	r0, r3
    __HAL_DMA_ENABLE(hdma);
 8006024:	f042 0201 	orr.w	r2, r2, #1
 8006028:	6022      	str	r2, [r4, #0]
}
 800602a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hdma); 
 800602c:	2200      	movs	r2, #0
    status = HAL_BUSY;
 800602e:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma); 
 8006030:	f880 2020 	strb.w	r2, [r0, #32]
}
 8006034:	4618      	mov	r0, r3
 8006036:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8006038:	2302      	movs	r3, #2
}
 800603a:	4618      	mov	r0, r3
 800603c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800603e:	6823      	ldr	r3, [r4, #0]
 8006040:	f023 0304 	bic.w	r3, r3, #4
 8006044:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	f043 030a 	orr.w	r3, r3, #10
 800604c:	6023      	str	r3, [r4, #0]
 800604e:	e7e6      	b.n	800601e <HAL_DMA_Start_IT+0x56>

08006050 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006050:	2204      	movs	r2, #4
{
 8006052:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006054:	e9d0 610f 	ldrd	r6, r1, [r0, #60]	; 0x3c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006058:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800605a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800605c:	408a      	lsls	r2, r1
 800605e:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 8006060:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006062:	d01f      	beq.n	80060a4 <HAL_DMA_IRQHandler+0x54>
 8006064:	076a      	lsls	r2, r5, #29
 8006066:	d51d      	bpl.n	80060a4 <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	0691      	lsls	r1, r2, #26
 800606c:	d403      	bmi.n	8006076 <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	f022 0204 	bic.w	r2, r2, #4
 8006074:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006076:	4a3f      	ldr	r2, [pc, #252]	; (8006174 <HAL_DMA_IRQHandler+0x124>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d05c      	beq.n	8006136 <HAL_DMA_IRQHandler+0xe6>
 800607c:	3214      	adds	r2, #20
 800607e:	4293      	cmp	r3, r2
 8006080:	d061      	beq.n	8006146 <HAL_DMA_IRQHandler+0xf6>
 8006082:	3214      	adds	r2, #20
 8006084:	4293      	cmp	r3, r2
 8006086:	d068      	beq.n	800615a <HAL_DMA_IRQHandler+0x10a>
 8006088:	3214      	adds	r2, #20
 800608a:	4293      	cmp	r3, r2
 800608c:	d06b      	beq.n	8006166 <HAL_DMA_IRQHandler+0x116>
 800608e:	3214      	adds	r2, #20
 8006090:	4293      	cmp	r3, r2
 8006092:	d05d      	beq.n	8006150 <HAL_DMA_IRQHandler+0x100>
 8006094:	3214      	adds	r2, #20
 8006096:	4293      	cmp	r3, r2
 8006098:	bf0c      	ite	eq
 800609a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800609e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80060a2:	e049      	b.n	8006138 <HAL_DMA_IRQHandler+0xe8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80060a4:	2202      	movs	r2, #2
 80060a6:	408a      	lsls	r2, r1
 80060a8:	4222      	tst	r2, r4
 80060aa:	d022      	beq.n	80060f2 <HAL_DMA_IRQHandler+0xa2>
 80060ac:	07aa      	lsls	r2, r5, #30
 80060ae:	d520      	bpl.n	80060f2 <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	0691      	lsls	r1, r2, #26
 80060b4:	d406      	bmi.n	80060c4 <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 80060b6:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	f022 020a 	bic.w	r2, r2, #10
 80060be:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80060c0:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80060c4:	4a2b      	ldr	r2, [pc, #172]	; (8006174 <HAL_DMA_IRQHandler+0x124>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d02b      	beq.n	8006122 <HAL_DMA_IRQHandler+0xd2>
 80060ca:	3214      	adds	r2, #20
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d042      	beq.n	8006156 <HAL_DMA_IRQHandler+0x106>
 80060d0:	3214      	adds	r2, #20
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d044      	beq.n	8006160 <HAL_DMA_IRQHandler+0x110>
 80060d6:	3214      	adds	r2, #20
 80060d8:	4293      	cmp	r3, r2
 80060da:	d036      	beq.n	800614a <HAL_DMA_IRQHandler+0xfa>
 80060dc:	3214      	adds	r2, #20
 80060de:	4293      	cmp	r3, r2
 80060e0:	d044      	beq.n	800616c <HAL_DMA_IRQHandler+0x11c>
 80060e2:	3214      	adds	r2, #20
 80060e4:	4293      	cmp	r3, r2
 80060e6:	bf0c      	ite	eq
 80060e8:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80060ec:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80060f0:	e018      	b.n	8006124 <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80060f2:	2208      	movs	r2, #8
 80060f4:	408a      	lsls	r2, r1
 80060f6:	4222      	tst	r2, r4
 80060f8:	d01b      	beq.n	8006132 <HAL_DMA_IRQHandler+0xe2>
 80060fa:	072a      	lsls	r2, r5, #28
 80060fc:	d519      	bpl.n	8006132 <HAL_DMA_IRQHandler+0xe2>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80060fe:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8006100:	2500      	movs	r5, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006102:	681c      	ldr	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006104:	fa02 f101 	lsl.w	r1, r2, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006108:	f024 040e 	bic.w	r4, r4, #14
 800610c:	601c      	str	r4, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 800610e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006110:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006112:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8006114:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8006118:	f880 5020 	strb.w	r5, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800611c:	b14b      	cbz	r3, 8006132 <HAL_DMA_IRQHandler+0xe2>
}
 800611e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8006120:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006122:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8006124:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006126:	4c14      	ldr	r4, [pc, #80]	; (8006178 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferCpltCallback != NULL)
 8006128:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800612a:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 800612c:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8006130:	b93a      	cbnz	r2, 8006142 <HAL_DMA_IRQHandler+0xf2>
}
 8006132:	bc70      	pop	{r4, r5, r6}
 8006134:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006136:	2304      	movs	r3, #4
 8006138:	490f      	ldr	r1, [pc, #60]	; (8006178 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferHalfCpltCallback != NULL)
 800613a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800613c:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800613e:	2a00      	cmp	r2, #0
 8006140:	d0f7      	beq.n	8006132 <HAL_DMA_IRQHandler+0xe2>
}
 8006142:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8006144:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006146:	2340      	movs	r3, #64	; 0x40
 8006148:	e7f6      	b.n	8006138 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800614a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800614e:	e7e9      	b.n	8006124 <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006150:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006154:	e7f0      	b.n	8006138 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006156:	2320      	movs	r3, #32
 8006158:	e7e4      	b.n	8006124 <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800615a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800615e:	e7eb      	b.n	8006138 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006164:	e7de      	b.n	8006124 <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006166:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800616a:	e7e5      	b.n	8006138 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800616c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006170:	e7d8      	b.n	8006124 <HAL_DMA_IRQHandler+0xd4>
 8006172:	bf00      	nop
 8006174:	40020008 	.word	0x40020008
 8006178:	40020000 	.word	0x40020000

0800617c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800617c:	680a      	ldr	r2, [r1, #0]
 800617e:	2a00      	cmp	r2, #0
 8006180:	f000 80db 	beq.w	800633a <HAL_GPIO_Init+0x1be>
{
 8006184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00u;
 8006188:	f04f 0a00 	mov.w	sl, #0
{
 800618c:	b085      	sub	sp, #20
  uint32_t position = 0x00u;
 800618e:	4655      	mov	r5, sl
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006190:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 8006364 <HAL_GPIO_Init+0x1e8>
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006194:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 8006368 <HAL_GPIO_Init+0x1ec>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006198:	4f6d      	ldr	r7, [pc, #436]	; (8006350 <HAL_GPIO_Init+0x1d4>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800619a:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 800636c <HAL_GPIO_Init+0x1f0>
 800619e:	e003      	b.n	80061a8 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 80061a0:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061a2:	fa32 f305 	lsrs.w	r3, r2, r5
 80061a6:	d078      	beq.n	800629a <HAL_GPIO_Init+0x11e>
    ioposition = (0x01uL << position);
 80061a8:	2301      	movs	r3, #1
 80061aa:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80061ac:	ea02 0403 	and.w	r4, r2, r3
    if (iocurrent == ioposition)
 80061b0:	42a3      	cmp	r3, r4
 80061b2:	d1f5      	bne.n	80061a0 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 80061b4:	684a      	ldr	r2, [r1, #4]
 80061b6:	2a12      	cmp	r2, #18
 80061b8:	f000 809e 	beq.w	80062f8 <HAL_GPIO_Init+0x17c>
 80061bc:	f200 8087 	bhi.w	80062ce <HAL_GPIO_Init+0x152>
 80061c0:	2a02      	cmp	r2, #2
 80061c2:	f000 809d 	beq.w	8006300 <HAL_GPIO_Init+0x184>
 80061c6:	d97c      	bls.n	80062c2 <HAL_GPIO_Init+0x146>
 80061c8:	2a03      	cmp	r2, #3
 80061ca:	d069      	beq.n	80062a0 <HAL_GPIO_Init+0x124>
 80061cc:	2a11      	cmp	r2, #17
 80061ce:	d102      	bne.n	80061d6 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80061d0:	68cb      	ldr	r3, [r1, #12]
 80061d2:	f103 0a04 	add.w	sl, r3, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80061d6:	2cff      	cmp	r4, #255	; 0xff
 80061d8:	d866      	bhi.n	80062a8 <HAL_GPIO_Init+0x12c>
 80061da:	4681      	mov	r9, r0
 80061dc:	6803      	ldr	r3, [r0, #0]
 80061de:	00aa      	lsls	r2, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80061e0:	260f      	movs	r6, #15
 80061e2:	fa06 fb02 	lsl.w	fp, r6, r2
 80061e6:	ea23 030b 	bic.w	r3, r3, fp
 80061ea:	fa0a f202 	lsl.w	r2, sl, r2
 80061ee:	4313      	orrs	r3, r2
 80061f0:	f8c9 3000 	str.w	r3, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80061f4:	684a      	ldr	r2, [r1, #4]
 80061f6:	00d3      	lsls	r3, r2, #3
 80061f8:	d561      	bpl.n	80062be <HAL_GPIO_Init+0x142>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80061fa:	f8dc 9018 	ldr.w	r9, [ip, #24]
 80061fe:	f025 0303 	bic.w	r3, r5, #3
 8006202:	f049 0901 	orr.w	r9, r9, #1
 8006206:	f8cc 9018 	str.w	r9, [ip, #24]
 800620a:	f8dc 9018 	ldr.w	r9, [ip, #24]
 800620e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006212:	f009 0901 	and.w	r9, r9, #1
 8006216:	f8cd 900c 	str.w	r9, [sp, #12]
 800621a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800621e:	f005 0903 	and.w	r9, r5, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006222:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006226:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800622a:	f8d3 b008 	ldr.w	fp, [r3, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800622e:	fa06 f609 	lsl.w	r6, r6, r9
 8006232:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006236:	4570      	cmp	r0, lr
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006238:	9601      	str	r6, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800623a:	d011      	beq.n	8006260 <HAL_GPIO_Init+0xe4>
 800623c:	4540      	cmp	r0, r8
 800623e:	d063      	beq.n	8006308 <HAL_GPIO_Init+0x18c>
 8006240:	4e44      	ldr	r6, [pc, #272]	; (8006354 <HAL_GPIO_Init+0x1d8>)
 8006242:	42b0      	cmp	r0, r6
 8006244:	d07a      	beq.n	800633c <HAL_GPIO_Init+0x1c0>
 8006246:	4e44      	ldr	r6, [pc, #272]	; (8006358 <HAL_GPIO_Init+0x1dc>)
 8006248:	42b0      	cmp	r0, r6
 800624a:	bf0c      	ite	eq
 800624c:	f04f 0b03 	moveq.w	fp, #3
 8006250:	f04f 0b04 	movne.w	fp, #4
 8006254:	9e01      	ldr	r6, [sp, #4]
 8006256:	fa0b f909 	lsl.w	r9, fp, r9
 800625a:	ea46 0609 	orr.w	r6, r6, r9
 800625e:	9601      	str	r6, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 8006260:	609e      	str	r6, [r3, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8006262:	683b      	ldr	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006264:	03d6      	lsls	r6, r2, #15
          SET_BIT(EXTI->IMR, iocurrent);
 8006266:	bf4c      	ite	mi
 8006268:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800626a:	43a3      	bicpl	r3, r4
 800626c:	603b      	str	r3, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800626e:	687b      	ldr	r3, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006270:	0396      	lsls	r6, r2, #14
          SET_BIT(EXTI->EMR, iocurrent);
 8006272:	bf4c      	ite	mi
 8006274:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006276:	43a3      	bicpl	r3, r4
 8006278:	607b      	str	r3, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800627a:	68bb      	ldr	r3, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800627c:	02d6      	lsls	r6, r2, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 800627e:	bf4c      	ite	mi
 8006280:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006282:	43a3      	bicpl	r3, r4
 8006284:	60bb      	str	r3, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006286:	0292      	lsls	r2, r2, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 8006288:	68fb      	ldr	r3, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800628a:	d515      	bpl.n	80062b8 <HAL_GPIO_Init+0x13c>
          SET_BIT(EXTI->FTSR, iocurrent);
 800628c:	431c      	orrs	r4, r3
 800628e:	60fc      	str	r4, [r7, #12]
 8006290:	680a      	ldr	r2, [r1, #0]
	position++;
 8006292:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006294:	fa32 f305 	lsrs.w	r3, r2, r5
 8006298:	d186      	bne.n	80061a8 <HAL_GPIO_Init+0x2c>
  }
}
 800629a:	b005      	add	sp, #20
 800629c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80062a0:	2cff      	cmp	r4, #255	; 0xff
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80062a2:	f04f 0a00 	mov.w	sl, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80062a6:	d998      	bls.n	80061da <HAL_GPIO_Init+0x5e>
 80062a8:	f105 4280 	add.w	r2, r5, #1073741824	; 0x40000000
 80062ac:	3a08      	subs	r2, #8
 80062ae:	6843      	ldr	r3, [r0, #4]
 80062b0:	0092      	lsls	r2, r2, #2
 80062b2:	f100 0904 	add.w	r9, r0, #4
 80062b6:	e793      	b.n	80061e0 <HAL_GPIO_Init+0x64>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80062b8:	ea23 0404 	bic.w	r4, r3, r4
 80062bc:	60fc      	str	r4, [r7, #12]
 80062be:	680a      	ldr	r2, [r1, #0]
 80062c0:	e76e      	b.n	80061a0 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 80062c2:	b1a2      	cbz	r2, 80062ee <HAL_GPIO_Init+0x172>
 80062c4:	2a01      	cmp	r2, #1
 80062c6:	d186      	bne.n	80061d6 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80062c8:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 80062cc:	e783      	b.n	80061d6 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 80062ce:	4e23      	ldr	r6, [pc, #140]	; (800635c <HAL_GPIO_Init+0x1e0>)
 80062d0:	42b2      	cmp	r2, r6
 80062d2:	d00c      	beq.n	80062ee <HAL_GPIO_Init+0x172>
 80062d4:	d920      	bls.n	8006318 <HAL_GPIO_Init+0x19c>
 80062d6:	4e22      	ldr	r6, [pc, #136]	; (8006360 <HAL_GPIO_Init+0x1e4>)
 80062d8:	42b2      	cmp	r2, r6
 80062da:	d008      	beq.n	80062ee <HAL_GPIO_Init+0x172>
 80062dc:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80062e0:	42b2      	cmp	r2, r6
 80062e2:	d004      	beq.n	80062ee <HAL_GPIO_Init+0x172>
 80062e4:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 80062e8:	42b2      	cmp	r2, r6
 80062ea:	f47f af74 	bne.w	80061d6 <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80062ee:	688a      	ldr	r2, [r1, #8]
 80062f0:	b9e2      	cbnz	r2, 800632c <HAL_GPIO_Init+0x1b0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80062f2:	f04f 0a04 	mov.w	sl, #4
 80062f6:	e76e      	b.n	80061d6 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80062f8:	68cb      	ldr	r3, [r1, #12]
 80062fa:	f103 0a0c 	add.w	sl, r3, #12
          break;
 80062fe:	e76a      	b.n	80061d6 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006300:	68cb      	ldr	r3, [r1, #12]
 8006302:	f103 0a08 	add.w	sl, r3, #8
          break;
 8006306:	e766      	b.n	80061d6 <HAL_GPIO_Init+0x5a>
 8006308:	f04f 0b01 	mov.w	fp, #1
 800630c:	fa0b f909 	lsl.w	r9, fp, r9
 8006310:	ea46 0609 	orr.w	r6, r6, r9
 8006314:	9601      	str	r6, [sp, #4]
 8006316:	e7a3      	b.n	8006260 <HAL_GPIO_Init+0xe4>
      switch (GPIO_Init->Mode)
 8006318:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800631c:	42b2      	cmp	r2, r6
 800631e:	d0e6      	beq.n	80062ee <HAL_GPIO_Init+0x172>
 8006320:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8006324:	42b2      	cmp	r2, r6
 8006326:	f47f af56 	bne.w	80061d6 <HAL_GPIO_Init+0x5a>
 800632a:	e7e0      	b.n	80062ee <HAL_GPIO_Init+0x172>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800632c:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800632e:	bf0c      	ite	eq
 8006330:	6103      	streq	r3, [r0, #16]
            GPIOx->BRR = ioposition;
 8006332:	6143      	strne	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006334:	f04f 0a08 	mov.w	sl, #8
 8006338:	e74d      	b.n	80061d6 <HAL_GPIO_Init+0x5a>
 800633a:	4770      	bx	lr
 800633c:	f04f 0b02 	mov.w	fp, #2
 8006340:	9e01      	ldr	r6, [sp, #4]
 8006342:	fa0b f909 	lsl.w	r9, fp, r9
 8006346:	ea46 0609 	orr.w	r6, r6, r9
 800634a:	9601      	str	r6, [sp, #4]
 800634c:	e788      	b.n	8006260 <HAL_GPIO_Init+0xe4>
 800634e:	bf00      	nop
 8006350:	40010400 	.word	0x40010400
 8006354:	40011000 	.word	0x40011000
 8006358:	40011400 	.word	0x40011400
 800635c:	10210000 	.word	0x10210000
 8006360:	10310000 	.word	0x10310000
 8006364:	40021000 	.word	0x40021000
 8006368:	40010800 	.word	0x40010800
 800636c:	40010c00 	.word	0x40010c00

08006370 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006370:	b902      	cbnz	r2, 8006374 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006372:	0409      	lsls	r1, r1, #16
 8006374:	6101      	str	r1, [r0, #16]
  }
}
 8006376:	4770      	bx	lr

08006378 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006378:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 800637c:	4689      	mov	r9, r1
 800637e:	4616      	mov	r6, r2
 8006380:	461f      	mov	r7, r3
 8006382:	4605      	mov	r5, r0
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006384:	6800      	ldr	r0, [r0, #0]
{
 8006386:	b082      	sub	sp, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006388:	6804      	ldr	r4, [r0, #0]
 800638a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800638e:	6004      	str	r4, [r0, #0]
{
 8006390:	9c08      	ldr	r4, [sp, #32]
 8006392:	1c62      	adds	r2, r4, #1
 8006394:	d140      	bne.n	8006418 <I2C_RequestMemoryWrite+0xa0>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006396:	6943      	ldr	r3, [r0, #20]
 8006398:	07db      	lsls	r3, r3, #31
 800639a:	d5fc      	bpl.n	8006396 <I2C_RequestMemoryWrite+0x1e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800639c:	f009 01fe 	and.w	r1, r9, #254	; 0xfe
 80063a0:	6101      	str	r1, [r0, #16]
 80063a2:	1c63      	adds	r3, r4, #1
 80063a4:	d012      	beq.n	80063cc <I2C_RequestMemoryWrite+0x54>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063a6:	6943      	ldr	r3, [r0, #20]
 80063a8:	079b      	lsls	r3, r3, #30
 80063aa:	d412      	bmi.n	80063d2 <I2C_RequestMemoryWrite+0x5a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063ac:	6943      	ldr	r3, [r0, #20]
 80063ae:	055a      	lsls	r2, r3, #21
 80063b0:	d43e      	bmi.n	8006430 <I2C_RequestMemoryWrite+0xb8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063b2:	f7ff fd4f 	bl	8005e54 <HAL_GetTick>
 80063b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b8:	1ac0      	subs	r0, r0, r3
 80063ba:	4284      	cmp	r4, r0
 80063bc:	d350      	bcc.n	8006460 <I2C_RequestMemoryWrite+0xe8>
 80063be:	2c00      	cmp	r4, #0
 80063c0:	d04e      	beq.n	8006460 <I2C_RequestMemoryWrite+0xe8>
 80063c2:	6828      	ldr	r0, [r5, #0]
 80063c4:	e7ed      	b.n	80063a2 <I2C_RequestMemoryWrite+0x2a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063c6:	6943      	ldr	r3, [r0, #20]
 80063c8:	055a      	lsls	r2, r3, #21
 80063ca:	d431      	bmi.n	8006430 <I2C_RequestMemoryWrite+0xb8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063cc:	6943      	ldr	r3, [r0, #20]
 80063ce:	0799      	lsls	r1, r3, #30
 80063d0:	d5f9      	bpl.n	80063c6 <I2C_RequestMemoryWrite+0x4e>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063d2:	2300      	movs	r3, #0
 80063d4:	9301      	str	r3, [sp, #4]
 80063d6:	6943      	ldr	r3, [r0, #20]
 80063d8:	9301      	str	r3, [sp, #4]
 80063da:	6983      	ldr	r3, [r0, #24]
 80063dc:	9301      	str	r3, [sp, #4]
 80063de:	9b01      	ldr	r3, [sp, #4]
 80063e0:	1c62      	adds	r2, r4, #1
 80063e2:	d003      	beq.n	80063ec <I2C_RequestMemoryWrite+0x74>
 80063e4:	e04b      	b.n	800647e <I2C_RequestMemoryWrite+0x106>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063e6:	6943      	ldr	r3, [r0, #20]
 80063e8:	0559      	lsls	r1, r3, #21
 80063ea:	d458      	bmi.n	800649e <I2C_RequestMemoryWrite+0x126>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063ec:	6943      	ldr	r3, [r0, #20]
 80063ee:	061b      	lsls	r3, r3, #24
 80063f0:	d5f9      	bpl.n	80063e6 <I2C_RequestMemoryWrite+0x6e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063f2:	2f01      	cmp	r7, #1
 80063f4:	d00a      	beq.n	800640c <I2C_RequestMemoryWrite+0x94>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80063f6:	0a33      	lsrs	r3, r6, #8
 80063f8:	6103      	str	r3, [r0, #16]
 80063fa:	1c67      	adds	r7, r4, #1
 80063fc:	d003      	beq.n	8006406 <I2C_RequestMemoryWrite+0x8e>
 80063fe:	e084      	b.n	800650a <I2C_RequestMemoryWrite+0x192>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006400:	6943      	ldr	r3, [r0, #20]
 8006402:	055a      	lsls	r2, r3, #21
 8006404:	d467      	bmi.n	80064d6 <I2C_RequestMemoryWrite+0x15e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006406:	6943      	ldr	r3, [r0, #20]
 8006408:	0619      	lsls	r1, r3, #24
 800640a:	d5f9      	bpl.n	8006400 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800640c:	b2f6      	uxtb	r6, r6
 800640e:	6106      	str	r6, [r0, #16]
  return HAL_OK;
 8006410:	2000      	movs	r0, #0
}
 8006412:	b002      	add	sp, #8
 8006414:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006418:	6943      	ldr	r3, [r0, #20]
 800641a:	07d9      	lsls	r1, r3, #31
 800641c:	d4be      	bmi.n	800639c <I2C_RequestMemoryWrite+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800641e:	f7ff fd19 	bl	8005e54 <HAL_GetTick>
 8006422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006424:	1ac0      	subs	r0, r0, r3
 8006426:	4284      	cmp	r4, r0
 8006428:	d31a      	bcc.n	8006460 <I2C_RequestMemoryWrite+0xe8>
 800642a:	b1cc      	cbz	r4, 8006460 <I2C_RequestMemoryWrite+0xe8>
 800642c:	6828      	ldr	r0, [r5, #0]
 800642e:	e7b0      	b.n	8006392 <I2C_RequestMemoryWrite+0x1a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006430:	f46f 6480 	mvn.w	r4, #1024	; 0x400
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006434:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8006436:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006438:	6803      	ldr	r3, [r0, #0]
 800643a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800643e:	6003      	str	r3, [r0, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006440:	6144      	str	r4, [r0, #20]
    return HAL_ERROR;
 8006442:	2001      	movs	r0, #1
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006444:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006446:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800644a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800644e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006450:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006454:	f043 0304 	orr.w	r3, r3, #4
 8006458:	642b      	str	r3, [r5, #64]	; 0x40
}
 800645a:	b002      	add	sp, #8
 800645c:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006460:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8006462:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006464:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006466:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800646a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800646e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006470:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006474:	f043 0320 	orr.w	r3, r3, #32
 8006478:	642b      	str	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 800647a:	2001      	movs	r0, #1
 800647c:	e7c9      	b.n	8006412 <I2C_RequestMemoryWrite+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800647e:	6943      	ldr	r3, [r0, #20]
 8006480:	061a      	lsls	r2, r3, #24
 8006482:	d4b6      	bmi.n	80063f2 <I2C_RequestMemoryWrite+0x7a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006484:	6943      	ldr	r3, [r0, #20]
 8006486:	0559      	lsls	r1, r3, #21
 8006488:	d409      	bmi.n	800649e <I2C_RequestMemoryWrite+0x126>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800648a:	f7ff fce3 	bl	8005e54 <HAL_GetTick>
 800648e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006490:	1ac0      	subs	r0, r0, r3
 8006492:	4284      	cmp	r4, r0
 8006494:	d349      	bcc.n	800652a <I2C_RequestMemoryWrite+0x1b2>
 8006496:	2c00      	cmp	r4, #0
 8006498:	d047      	beq.n	800652a <I2C_RequestMemoryWrite+0x1b2>
 800649a:	6828      	ldr	r0, [r5, #0]
 800649c:	e7a0      	b.n	80063e0 <I2C_RequestMemoryWrite+0x68>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 800649e:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80064a0:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064a2:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80064a6:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80064a8:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80064aa:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064ae:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064b2:	6c2b      	ldr	r3, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064b4:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064b8:	f043 0304 	orr.w	r3, r3, #4
 80064bc:	642b      	str	r3, [r5, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064be:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80064c0:	2b04      	cmp	r3, #4
 80064c2:	d001      	beq.n	80064c8 <I2C_RequestMemoryWrite+0x150>
    return HAL_ERROR;
 80064c4:	2001      	movs	r0, #1
 80064c6:	e7a4      	b.n	8006412 <I2C_RequestMemoryWrite+0x9a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064c8:	682a      	ldr	r2, [r5, #0]
    return HAL_ERROR;
 80064ca:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064cc:	6813      	ldr	r3, [r2, #0]
 80064ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064d2:	6013      	str	r3, [r2, #0]
 80064d4:	e79d      	b.n	8006412 <I2C_RequestMemoryWrite+0x9a>
    hi2c->PreviousState       = I2C_STATE_NONE;
 80064d6:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80064d8:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064da:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80064de:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80064e0:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80064e2:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064e6:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064ea:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80064ec:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064f0:	f043 0304 	orr.w	r3, r3, #4
 80064f4:	642b      	str	r3, [r5, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064f6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80064f8:	2b04      	cmp	r3, #4
 80064fa:	d1e3      	bne.n	80064c4 <I2C_RequestMemoryWrite+0x14c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064fc:	682a      	ldr	r2, [r5, #0]
      return HAL_ERROR;
 80064fe:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006500:	6813      	ldr	r3, [r2, #0]
 8006502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006506:	6013      	str	r3, [r2, #0]
 8006508:	e783      	b.n	8006412 <I2C_RequestMemoryWrite+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800650a:	6943      	ldr	r3, [r0, #20]
 800650c:	061b      	lsls	r3, r3, #24
 800650e:	f53f af7d 	bmi.w	800640c <I2C_RequestMemoryWrite+0x94>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006512:	6943      	ldr	r3, [r0, #20]
 8006514:	055b      	lsls	r3, r3, #21
 8006516:	d4de      	bmi.n	80064d6 <I2C_RequestMemoryWrite+0x15e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006518:	f7ff fc9c 	bl	8005e54 <HAL_GetTick>
 800651c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800651e:	1ac0      	subs	r0, r0, r3
 8006520:	4284      	cmp	r4, r0
 8006522:	d310      	bcc.n	8006546 <I2C_RequestMemoryWrite+0x1ce>
 8006524:	b17c      	cbz	r4, 8006546 <I2C_RequestMemoryWrite+0x1ce>
 8006526:	6828      	ldr	r0, [r5, #0]
 8006528:	e767      	b.n	80063fa <I2C_RequestMemoryWrite+0x82>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800652a:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800652c:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800652e:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006530:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006534:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006538:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800653a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800653e:	f043 0320 	orr.w	r3, r3, #32
 8006542:	642b      	str	r3, [r5, #64]	; 0x40
 8006544:	e7bb      	b.n	80064be <I2C_RequestMemoryWrite+0x146>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006546:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006548:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800654a:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800654c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006550:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006554:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006556:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800655a:	f043 0320 	orr.w	r3, r3, #32
 800655e:	642b      	str	r3, [r5, #64]	; 0x40
 8006560:	e7c9      	b.n	80064f6 <I2C_RequestMemoryWrite+0x17e>
 8006562:	bf00      	nop

08006564 <I2C_RequestMemoryRead>:
{
 8006564:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8006568:	461f      	mov	r7, r3
 800656a:	4605      	mov	r5, r0
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800656c:	6800      	ldr	r0, [r0, #0]
{
 800656e:	4689      	mov	r9, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006570:	6801      	ldr	r1, [r0, #0]
{
 8006572:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006574:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8006578:	6001      	str	r1, [r0, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800657a:	6802      	ldr	r2, [r0, #0]
{
 800657c:	b082      	sub	sp, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800657e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
{
 8006582:	9c08      	ldr	r4, [sp, #32]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006584:	6002      	str	r2, [r0, #0]
 8006586:	1c61      	adds	r1, r4, #1
 8006588:	d157      	bne.n	800663a <I2C_RequestMemoryRead+0xd6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800658a:	6943      	ldr	r3, [r0, #20]
 800658c:	07da      	lsls	r2, r3, #31
 800658e:	d5fc      	bpl.n	800658a <I2C_RequestMemoryRead+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006590:	fa5f f989 	uxtb.w	r9, r9
 8006594:	f009 03fe 	and.w	r3, r9, #254	; 0xfe
 8006598:	6103      	str	r3, [r0, #16]
 800659a:	1c62      	adds	r2, r4, #1
 800659c:	d012      	beq.n	80065c4 <I2C_RequestMemoryRead+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800659e:	6943      	ldr	r3, [r0, #20]
 80065a0:	079a      	lsls	r2, r3, #30
 80065a2:	d412      	bmi.n	80065ca <I2C_RequestMemoryRead+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065a4:	6943      	ldr	r3, [r0, #20]
 80065a6:	0559      	lsls	r1, r3, #21
 80065a8:	d453      	bmi.n	8006652 <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065aa:	f7ff fc53 	bl	8005e54 <HAL_GetTick>
 80065ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b0:	1ac0      	subs	r0, r0, r3
 80065b2:	4284      	cmp	r4, r0
 80065b4:	d37c      	bcc.n	80066b0 <I2C_RequestMemoryRead+0x14c>
 80065b6:	2c00      	cmp	r4, #0
 80065b8:	d07a      	beq.n	80066b0 <I2C_RequestMemoryRead+0x14c>
 80065ba:	6828      	ldr	r0, [r5, #0]
 80065bc:	e7ed      	b.n	800659a <I2C_RequestMemoryRead+0x36>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065be:	6943      	ldr	r3, [r0, #20]
 80065c0:	0559      	lsls	r1, r3, #21
 80065c2:	d446      	bmi.n	8006652 <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065c4:	6943      	ldr	r3, [r0, #20]
 80065c6:	079b      	lsls	r3, r3, #30
 80065c8:	d5f9      	bpl.n	80065be <I2C_RequestMemoryRead+0x5a>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065ca:	2300      	movs	r3, #0
 80065cc:	9301      	str	r3, [sp, #4]
 80065ce:	6943      	ldr	r3, [r0, #20]
 80065d0:	9301      	str	r3, [sp, #4]
 80065d2:	6983      	ldr	r3, [r0, #24]
 80065d4:	9301      	str	r3, [sp, #4]
 80065d6:	9b01      	ldr	r3, [sp, #4]
 80065d8:	1c61      	adds	r1, r4, #1
 80065da:	d003      	beq.n	80065e4 <I2C_RequestMemoryRead+0x80>
 80065dc:	e076      	b.n	80066cc <I2C_RequestMemoryRead+0x168>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065de:	6943      	ldr	r3, [r0, #20]
 80065e0:	055b      	lsls	r3, r3, #21
 80065e2:	d44e      	bmi.n	8006682 <I2C_RequestMemoryRead+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065e4:	6943      	ldr	r3, [r0, #20]
 80065e6:	061a      	lsls	r2, r3, #24
 80065e8:	d5f9      	bpl.n	80065de <I2C_RequestMemoryRead+0x7a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065ea:	2f01      	cmp	r7, #1
 80065ec:	d17e      	bne.n	80066ec <I2C_RequestMemoryRead+0x188>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065ee:	b2f6      	uxtb	r6, r6
 80065f0:	6106      	str	r6, [r0, #16]
 80065f2:	1c67      	adds	r7, r4, #1
 80065f4:	d003      	beq.n	80065fe <I2C_RequestMemoryRead+0x9a>
 80065f6:	e08d      	b.n	8006714 <I2C_RequestMemoryRead+0x1b0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065f8:	6943      	ldr	r3, [r0, #20]
 80065fa:	0559      	lsls	r1, r3, #21
 80065fc:	d441      	bmi.n	8006682 <I2C_RequestMemoryRead+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065fe:	6943      	ldr	r3, [r0, #20]
 8006600:	061e      	lsls	r6, r3, #24
 8006602:	d5f9      	bpl.n	80065f8 <I2C_RequestMemoryRead+0x94>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006604:	6803      	ldr	r3, [r0, #0]
 8006606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800660a:	6003      	str	r3, [r0, #0]
 800660c:	1c63      	adds	r3, r4, #1
 800660e:	f040 80a1 	bne.w	8006754 <I2C_RequestMemoryRead+0x1f0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006612:	6943      	ldr	r3, [r0, #20]
 8006614:	07df      	lsls	r7, r3, #31
 8006616:	d5fc      	bpl.n	8006612 <I2C_RequestMemoryRead+0xae>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006618:	f049 0901 	orr.w	r9, r9, #1
 800661c:	f8c0 9010 	str.w	r9, [r0, #16]
 8006620:	1c62      	adds	r2, r4, #1
 8006622:	d003      	beq.n	800662c <I2C_RequestMemoryRead+0xc8>
 8006624:	e0b2      	b.n	800678c <I2C_RequestMemoryRead+0x228>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006626:	6943      	ldr	r3, [r0, #20]
 8006628:	055b      	lsls	r3, r3, #21
 800662a:	d412      	bmi.n	8006652 <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800662c:	6943      	ldr	r3, [r0, #20]
 800662e:	43db      	mvns	r3, r3
 8006630:	f013 0302 	ands.w	r3, r3, #2
 8006634:	d1f7      	bne.n	8006626 <I2C_RequestMemoryRead+0xc2>
  return HAL_OK;
 8006636:	4618      	mov	r0, r3
 8006638:	e020      	b.n	800667c <I2C_RequestMemoryRead+0x118>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800663a:	6943      	ldr	r3, [r0, #20]
 800663c:	07db      	lsls	r3, r3, #31
 800663e:	d4a7      	bmi.n	8006590 <I2C_RequestMemoryRead+0x2c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006640:	f7ff fc08 	bl	8005e54 <HAL_GetTick>
 8006644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006646:	1ac0      	subs	r0, r0, r3
 8006648:	4284      	cmp	r4, r0
 800664a:	d331      	bcc.n	80066b0 <I2C_RequestMemoryRead+0x14c>
 800664c:	b384      	cbz	r4, 80066b0 <I2C_RequestMemoryRead+0x14c>
 800664e:	6828      	ldr	r0, [r5, #0]
 8006650:	e799      	b.n	8006586 <I2C_RequestMemoryRead+0x22>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006652:	f46f 6480 	mvn.w	r4, #1024	; 0x400
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006656:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8006658:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800665a:	6803      	ldr	r3, [r0, #0]
 800665c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006660:	6003      	str	r3, [r0, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006662:	6144      	str	r4, [r0, #20]
    return HAL_ERROR;
 8006664:	2001      	movs	r0, #1
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006666:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006668:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800666c:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006670:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006672:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006676:	f043 0304 	orr.w	r3, r3, #4
 800667a:	642b      	str	r3, [r5, #64]	; 0x40
}
 800667c:	b002      	add	sp, #8
 800667e:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    hi2c->PreviousState       = I2C_STATE_NONE;
 8006682:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8006684:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006686:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 800668a:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800668c:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800668e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006692:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006696:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8006698:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800669c:	f043 0304 	orr.w	r3, r3, #4
 80066a0:	642b      	str	r3, [r5, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066a2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80066a4:	2b04      	cmp	r3, #4
 80066a6:	d02e      	beq.n	8006706 <I2C_RequestMemoryRead+0x1a2>
    return HAL_ERROR;
 80066a8:	2001      	movs	r0, #1
}
 80066aa:	b002      	add	sp, #8
 80066ac:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 80066b0:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80066b2:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80066b4:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80066b6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80066ba:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066be:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80066c0:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066c4:	f043 0320 	orr.w	r3, r3, #32
 80066c8:	642b      	str	r3, [r5, #64]	; 0x40
 80066ca:	e7ed      	b.n	80066a8 <I2C_RequestMemoryRead+0x144>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066cc:	6943      	ldr	r3, [r0, #20]
 80066ce:	0619      	lsls	r1, r3, #24
 80066d0:	d48b      	bmi.n	80065ea <I2C_RequestMemoryRead+0x86>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066d2:	6943      	ldr	r3, [r0, #20]
 80066d4:	055b      	lsls	r3, r3, #21
 80066d6:	d4d4      	bmi.n	8006682 <I2C_RequestMemoryRead+0x11e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066d8:	f7ff fbbc 	bl	8005e54 <HAL_GetTick>
 80066dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066de:	1ac0      	subs	r0, r0, r3
 80066e0:	4284      	cmp	r4, r0
 80066e2:	d345      	bcc.n	8006770 <I2C_RequestMemoryRead+0x20c>
 80066e4:	2c00      	cmp	r4, #0
 80066e6:	d043      	beq.n	8006770 <I2C_RequestMemoryRead+0x20c>
 80066e8:	6828      	ldr	r0, [r5, #0]
 80066ea:	e775      	b.n	80065d8 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80066ec:	0a33      	lsrs	r3, r6, #8
 80066ee:	6103      	str	r3, [r0, #16]
 80066f0:	1c63      	adds	r3, r4, #1
 80066f2:	d003      	beq.n	80066fc <I2C_RequestMemoryRead+0x198>
 80066f4:	e01e      	b.n	8006734 <I2C_RequestMemoryRead+0x1d0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066f6:	6943      	ldr	r3, [r0, #20]
 80066f8:	0559      	lsls	r1, r3, #21
 80066fa:	d4c2      	bmi.n	8006682 <I2C_RequestMemoryRead+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066fc:	6943      	ldr	r3, [r0, #20]
 80066fe:	061f      	lsls	r7, r3, #24
 8006700:	f53f af75 	bmi.w	80065ee <I2C_RequestMemoryRead+0x8a>
 8006704:	e7f7      	b.n	80066f6 <I2C_RequestMemoryRead+0x192>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006706:	682a      	ldr	r2, [r5, #0]
    return HAL_ERROR;
 8006708:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800670a:	6813      	ldr	r3, [r2, #0]
 800670c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006710:	6013      	str	r3, [r2, #0]
 8006712:	e7b3      	b.n	800667c <I2C_RequestMemoryRead+0x118>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006714:	6943      	ldr	r3, [r0, #20]
 8006716:	061a      	lsls	r2, r3, #24
 8006718:	f53f af74 	bmi.w	8006604 <I2C_RequestMemoryRead+0xa0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800671c:	6943      	ldr	r3, [r0, #20]
 800671e:	055b      	lsls	r3, r3, #21
 8006720:	d4af      	bmi.n	8006682 <I2C_RequestMemoryRead+0x11e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006722:	f7ff fb97 	bl	8005e54 <HAL_GetTick>
 8006726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006728:	1ac0      	subs	r0, r0, r3
 800672a:	4284      	cmp	r4, r0
 800672c:	d320      	bcc.n	8006770 <I2C_RequestMemoryRead+0x20c>
 800672e:	b1fc      	cbz	r4, 8006770 <I2C_RequestMemoryRead+0x20c>
 8006730:	6828      	ldr	r0, [r5, #0]
 8006732:	e75e      	b.n	80065f2 <I2C_RequestMemoryRead+0x8e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006734:	6943      	ldr	r3, [r0, #20]
 8006736:	061a      	lsls	r2, r3, #24
 8006738:	f53f af59 	bmi.w	80065ee <I2C_RequestMemoryRead+0x8a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800673c:	6943      	ldr	r3, [r0, #20]
 800673e:	055a      	lsls	r2, r3, #21
 8006740:	d49f      	bmi.n	8006682 <I2C_RequestMemoryRead+0x11e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006742:	f7ff fb87 	bl	8005e54 <HAL_GetTick>
 8006746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006748:	1ac0      	subs	r0, r0, r3
 800674a:	4284      	cmp	r4, r0
 800674c:	d310      	bcc.n	8006770 <I2C_RequestMemoryRead+0x20c>
 800674e:	b17c      	cbz	r4, 8006770 <I2C_RequestMemoryRead+0x20c>
 8006750:	6828      	ldr	r0, [r5, #0]
 8006752:	e7cd      	b.n	80066f0 <I2C_RequestMemoryRead+0x18c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006754:	6943      	ldr	r3, [r0, #20]
 8006756:	07de      	lsls	r6, r3, #31
 8006758:	f53f af5e 	bmi.w	8006618 <I2C_RequestMemoryRead+0xb4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800675c:	f7ff fb7a 	bl	8005e54 <HAL_GetTick>
 8006760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006762:	1ac0      	subs	r0, r0, r3
 8006764:	4284      	cmp	r4, r0
 8006766:	d3a3      	bcc.n	80066b0 <I2C_RequestMemoryRead+0x14c>
 8006768:	2c00      	cmp	r4, #0
 800676a:	d0a1      	beq.n	80066b0 <I2C_RequestMemoryRead+0x14c>
 800676c:	6828      	ldr	r0, [r5, #0]
 800676e:	e74d      	b.n	800660c <I2C_RequestMemoryRead+0xa8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006770:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006772:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006774:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006776:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800677a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800677e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006780:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006784:	f043 0320 	orr.w	r3, r3, #32
 8006788:	642b      	str	r3, [r5, #64]	; 0x40
 800678a:	e78a      	b.n	80066a2 <I2C_RequestMemoryRead+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800678c:	6943      	ldr	r3, [r0, #20]
 800678e:	43db      	mvns	r3, r3
 8006790:	f013 0302 	ands.w	r3, r3, #2
 8006794:	f43f af4f 	beq.w	8006636 <I2C_RequestMemoryRead+0xd2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006798:	6943      	ldr	r3, [r0, #20]
 800679a:	0559      	lsls	r1, r3, #21
 800679c:	f53f af59 	bmi.w	8006652 <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067a0:	f7ff fb58 	bl	8005e54 <HAL_GetTick>
 80067a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067a6:	1ac0      	subs	r0, r0, r3
 80067a8:	4284      	cmp	r4, r0
 80067aa:	d381      	bcc.n	80066b0 <I2C_RequestMemoryRead+0x14c>
 80067ac:	2c00      	cmp	r4, #0
 80067ae:	f43f af7f 	beq.w	80066b0 <I2C_RequestMemoryRead+0x14c>
 80067b2:	6828      	ldr	r0, [r5, #0]
 80067b4:	e734      	b.n	8006620 <I2C_RequestMemoryRead+0xbc>
 80067b6:	bf00      	nop

080067b8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80067b8:	2800      	cmp	r0, #0
 80067ba:	f000 8097 	beq.w	80068ec <HAL_I2C_Init+0x134>
{
 80067be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067c0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80067c4:	4604      	mov	r4, r0
 80067c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f000 8087 	beq.w	80068de <HAL_I2C_Init+0x126>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80067d0:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80067d2:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80067d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80067d8:	6813      	ldr	r3, [r2, #0]
 80067da:	f023 0301 	bic.w	r3, r3, #1
 80067de:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80067e0:	f001 fa6c 	bl	8007cbc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80067e4:	6862      	ldr	r2, [r4, #4]
 80067e6:	4b4b      	ldr	r3, [pc, #300]	; (8006914 <HAL_I2C_Init+0x15c>)
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d84b      	bhi.n	8006884 <HAL_I2C_Init+0xcc>
 80067ec:	4b4a      	ldr	r3, [pc, #296]	; (8006918 <HAL_I2C_Init+0x160>)
 80067ee:	4298      	cmp	r0, r3
 80067f0:	d97a      	bls.n	80068e8 <HAL_I2C_Init+0x130>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80067f2:	1e43      	subs	r3, r0, #1
 80067f4:	0052      	lsls	r2, r2, #1
 80067f6:	fbb3 f2f2 	udiv	r2, r3, r2
  freqrange = I2C_FREQRANGE(pclk1);
 80067fa:	4948      	ldr	r1, [pc, #288]	; (800691c <HAL_I2C_Init+0x164>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80067fc:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80067fe:	fba1 1000 	umull	r1, r0, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006802:	6859      	ldr	r1, [r3, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8006804:	0c80      	lsrs	r0, r0, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006806:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800680a:	4301      	orrs	r1, r0
 800680c:	6059      	str	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800680e:	6a19      	ldr	r1, [r3, #32]
 8006810:	3001      	adds	r0, #1
 8006812:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8006816:	4308      	orrs	r0, r1
 8006818:	6218      	str	r0, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800681a:	1c50      	adds	r0, r2, #1
 800681c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8006820:	2804      	cmp	r0, #4
 8006822:	bf38      	it	cc
 8006824:	2004      	movcc	r0, #4
 8006826:	69d9      	ldr	r1, [r3, #28]
 8006828:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800682c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006830:	2500      	movs	r5, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8006832:	2620      	movs	r6, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006834:	4308      	orrs	r0, r1
 8006836:	61d8      	str	r0, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006838:	6819      	ldr	r1, [r3, #0]
 800683a:	e9d4 2007 	ldrd	r2, r0, [r4, #28]
 800683e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8006842:	4302      	orrs	r2, r0
 8006844:	430a      	orrs	r2, r1
 8006846:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006848:	6899      	ldr	r1, [r3, #8]
 800684a:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 800684e:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8006852:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006856:	4302      	orrs	r2, r0
 8006858:	430a      	orrs	r2, r1
 800685a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800685c:	68d9      	ldr	r1, [r3, #12]
 800685e:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8006862:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006866:	4302      	orrs	r2, r0
 8006868:	430a      	orrs	r2, r1
 800686a:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 800686c:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800686e:	4628      	mov	r0, r5
  __HAL_I2C_ENABLE(hi2c);
 8006870:	f042 0201 	orr.w	r2, r2, #1
 8006874:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006876:	6425      	str	r5, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006878:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800687c:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800687e:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 8006882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006884:	4b26      	ldr	r3, [pc, #152]	; (8006920 <HAL_I2C_Init+0x168>)
 8006886:	4298      	cmp	r0, r3
 8006888:	d92e      	bls.n	80068e8 <HAL_I2C_Init+0x130>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800688a:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 800688e:	4d23      	ldr	r5, [pc, #140]	; (800691c <HAL_I2C_Init+0x164>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006890:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8006892:	fba5 6500 	umull	r6, r5, r5, r0
 8006896:	0cad      	lsrs	r5, r5, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006898:	fb01 f105 	mul.w	r1, r1, r5
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800689c:	685e      	ldr	r6, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800689e:	4f21      	ldr	r7, [pc, #132]	; (8006924 <HAL_I2C_Init+0x16c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80068a0:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80068a4:	fba7 7101 	umull	r7, r1, r7, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80068a8:	4335      	orrs	r5, r6
 80068aa:	605d      	str	r5, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80068ac:	6a1d      	ldr	r5, [r3, #32]
 80068ae:	0989      	lsrs	r1, r1, #6
 80068b0:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80068b4:	3101      	adds	r1, #1
 80068b6:	4329      	orrs	r1, r5
 80068b8:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80068ba:	69d9      	ldr	r1, [r3, #28]
 80068bc:	68a5      	ldr	r5, [r4, #8]
 80068be:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80068c2:	3801      	subs	r0, #1
 80068c4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80068c8:	b995      	cbnz	r5, 80068f0 <HAL_I2C_Init+0x138>
 80068ca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80068ce:	fbb0 f0f2 	udiv	r0, r0, r2
 80068d2:	3001      	adds	r0, #1
 80068d4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80068d8:	b9c0      	cbnz	r0, 800690c <HAL_I2C_Init+0x154>
 80068da:	2001      	movs	r0, #1
 80068dc:	e7a8      	b.n	8006830 <HAL_I2C_Init+0x78>
    hi2c->Lock = HAL_UNLOCKED;
 80068de:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80068e2:	f7fc f845 	bl	8002970 <HAL_I2C_MspInit>
 80068e6:	e773      	b.n	80067d0 <HAL_I2C_Init+0x18>
    return HAL_ERROR;
 80068e8:	2001      	movs	r0, #1
}
 80068ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80068ec:	2001      	movs	r0, #1
}
 80068ee:	4770      	bx	lr
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80068f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80068f4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80068f8:	fbb0 f0f2 	udiv	r0, r0, r2
 80068fc:	3001      	adds	r0, #1
 80068fe:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8006902:	2800      	cmp	r0, #0
 8006904:	d0e9      	beq.n	80068da <HAL_I2C_Init+0x122>
 8006906:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 800690a:	e791      	b.n	8006830 <HAL_I2C_Init+0x78>
 800690c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8006910:	e78e      	b.n	8006830 <HAL_I2C_Init+0x78>
 8006912:	bf00      	nop
 8006914:	000186a0 	.word	0x000186a0
 8006918:	001e847f 	.word	0x001e847f
 800691c:	431bde83 	.word	0x431bde83
 8006920:	003d08ff 	.word	0x003d08ff
 8006924:	10624dd3 	.word	0x10624dd3

08006928 <HAL_I2C_Mem_Write>:
{
 8006928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692c:	4604      	mov	r4, r0
 800692e:	b083      	sub	sp, #12
 8006930:	469a      	mov	sl, r3
 8006932:	460f      	mov	r7, r1
 8006934:	4690      	mov	r8, r2
 8006936:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 800693a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 800693c:	f7ff fa8a 	bl	8005e54 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006940:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006944:	2b20      	cmp	r3, #32
 8006946:	d004      	beq.n	8006952 <HAL_I2C_Mem_Write+0x2a>
      return HAL_BUSY;
 8006948:	2702      	movs	r7, #2
}
 800694a:	4638      	mov	r0, r7
 800694c:	b003      	add	sp, #12
 800694e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006952:	4605      	mov	r5, r0
 8006954:	e005      	b.n	8006962 <HAL_I2C_Mem_Write+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006956:	f7ff fa7d 	bl	8005e54 <HAL_GetTick>
 800695a:	1b40      	subs	r0, r0, r5
 800695c:	2819      	cmp	r0, #25
 800695e:	f200 80a6 	bhi.w	8006aae <HAL_I2C_Mem_Write+0x186>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006962:	6822      	ldr	r2, [r4, #0]
 8006964:	6993      	ldr	r3, [r2, #24]
 8006966:	43db      	mvns	r3, r3
 8006968:	f013 0b02 	ands.w	fp, r3, #2
 800696c:	d0f3      	beq.n	8006956 <HAL_I2C_Mem_Write+0x2e>
    __HAL_LOCK(hi2c);
 800696e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006972:	2b01      	cmp	r3, #1
 8006974:	d0e8      	beq.n	8006948 <HAL_I2C_Mem_Write+0x20>
 8006976:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006978:	6813      	ldr	r3, [r2, #0]
    __HAL_LOCK(hi2c);
 800697a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800697e:	07d8      	lsls	r0, r3, #31
 8006980:	d402      	bmi.n	8006988 <HAL_I2C_Mem_Write+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8006982:	6813      	ldr	r3, [r2, #0]
 8006984:	430b      	orrs	r3, r1
 8006986:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006988:	f04f 0e21 	mov.w	lr, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800698c:	f04f 0c40 	mov.w	ip, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006990:	2000      	movs	r0, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006992:	6811      	ldr	r1, [r2, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006994:	4653      	mov	r3, sl
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006996:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800699a:	6011      	str	r1, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800699c:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069a0:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069a4:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80069a6:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069aa:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069ae:	4639      	mov	r1, r7
    hi2c->pBuffPtr    = pData;
 80069b0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069b2:	f5a0 3080 	sub.w	r0, r0, #65536	; 0x10000
    hi2c->pBuffPtr    = pData;
 80069b6:	6267      	str	r7, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069b8:	4642      	mov	r2, r8
 80069ba:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069be:	62e0      	str	r0, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80069c0:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069c4:	4620      	mov	r0, r4
 80069c6:	f7ff fcd7 	bl	8006378 <I2C_RequestMemoryWrite>
 80069ca:	4607      	mov	r7, r0
 80069cc:	2800      	cmp	r0, #0
 80069ce:	d14b      	bne.n	8006a68 <HAL_I2C_Mem_Write+0x140>
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 80069d4:	b1fa      	cbz	r2, 8006a16 <HAL_I2C_Mem_Write+0xee>
 80069d6:	1c72      	adds	r2, r6, #1
 80069d8:	d003      	beq.n	80069e2 <HAL_I2C_Mem_Write+0xba>
 80069da:	e04a      	b.n	8006a72 <HAL_I2C_Mem_Write+0x14a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069dc:	695a      	ldr	r2, [r3, #20]
 80069de:	0551      	lsls	r1, r2, #21
 80069e0:	d42f      	bmi.n	8006a42 <HAL_I2C_Mem_Write+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069e2:	695a      	ldr	r2, [r3, #20]
 80069e4:	0610      	lsls	r0, r2, #24
 80069e6:	d5f9      	bpl.n	80069dc <HAL_I2C_Mem_Write+0xb4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069e8:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80069ec:	f8b4 8028 	ldrh.w	r8, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069f0:	46f4      	mov	ip, lr
 80069f2:	f81c 1b01 	ldrb.w	r1, [ip], #1
      hi2c->XferSize--;
 80069f6:	f108 32ff 	add.w	r2, r8, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069fa:	6119      	str	r1, [r3, #16]
      hi2c->XferCount--;
 80069fc:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80069fe:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8006a00:	3901      	subs	r1, #1
 8006a02:	b289      	uxth	r1, r1
 8006a04:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a06:	6958      	ldr	r0, [r3, #20]
      hi2c->pBuffPtr++;
 8006a08:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a0c:	0740      	lsls	r0, r0, #29
      hi2c->XferSize--;
 8006a0e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a10:	d5e0      	bpl.n	80069d4 <HAL_I2C_Mem_Write+0xac>
 8006a12:	2a00      	cmp	r2, #0
 8006a14:	d13c      	bne.n	8006a90 <HAL_I2C_Mem_Write+0x168>
 8006a16:	1c72      	adds	r2, r6, #1
 8006a18:	d003      	beq.n	8006a22 <HAL_I2C_Mem_Write+0xfa>
 8006a1a:	e05d      	b.n	8006ad8 <HAL_I2C_Mem_Write+0x1b0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a1c:	695a      	ldr	r2, [r3, #20]
 8006a1e:	0551      	lsls	r1, r2, #21
 8006a20:	d468      	bmi.n	8006af4 <HAL_I2C_Mem_Write+0x1cc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a22:	695a      	ldr	r2, [r3, #20]
 8006a24:	0750      	lsls	r0, r2, #29
 8006a26:	d5f9      	bpl.n	8006a1c <HAL_I2C_Mem_Write+0xf4>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a28:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8006a2a:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a32:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8006a34:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8006a38:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a3c:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 8006a40:	e783      	b.n	800694a <HAL_I2C_Mem_Write+0x22>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a42:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a44:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a48:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a4a:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a4c:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a4e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a52:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a56:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8006a58:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a5c:	f043 0304 	orr.w	r3, r3, #4
 8006a60:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a64:	2b04      	cmp	r3, #4
 8006a66:	d030      	beq.n	8006aca <HAL_I2C_Mem_Write+0x1a2>
      return HAL_ERROR;
 8006a68:	2701      	movs	r7, #1
}
 8006a6a:	4638      	mov	r0, r7
 8006a6c:	b003      	add	sp, #12
 8006a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a72:	695a      	ldr	r2, [r3, #20]
 8006a74:	0612      	lsls	r2, r2, #24
 8006a76:	d4b7      	bmi.n	80069e8 <HAL_I2C_Mem_Write+0xc0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a78:	695a      	ldr	r2, [r3, #20]
 8006a7a:	0551      	lsls	r1, r2, #21
 8006a7c:	d4e1      	bmi.n	8006a42 <HAL_I2C_Mem_Write+0x11a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a7e:	f7ff f9e9 	bl	8005e54 <HAL_GetTick>
 8006a82:	1b40      	subs	r0, r0, r5
 8006a84:	4286      	cmp	r6, r0
 8006a86:	d34f      	bcc.n	8006b28 <HAL_I2C_Mem_Write+0x200>
 8006a88:	2e00      	cmp	r6, #0
 8006a8a:	d04d      	beq.n	8006b28 <HAL_I2C_Mem_Write+0x200>
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	e7a2      	b.n	80069d6 <HAL_I2C_Mem_Write+0xae>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a90:	f89e 1001 	ldrb.w	r1, [lr, #1]
        hi2c->XferSize--;
 8006a94:	f1a8 0202 	sub.w	r2, r8, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a98:	6119      	str	r1, [r3, #16]
        hi2c->XferCount--;
 8006a9a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8006a9c:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 8006a9e:	3801      	subs	r0, #1
        hi2c->pBuffPtr++;
 8006aa0:	f10e 0102 	add.w	r1, lr, #2
        hi2c->XferCount--;
 8006aa4:	b280      	uxth	r0, r0
        hi2c->XferSize--;
 8006aa6:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8006aa8:	6261      	str	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8006aaa:	8560      	strh	r0, [r4, #42]	; 0x2a
 8006aac:	e792      	b.n	80069d4 <HAL_I2C_Mem_Write+0xac>
        hi2c->State             = HAL_I2C_STATE_READY;
 8006aae:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006ab0:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006ab4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ab8:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006abc:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006abe:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ac2:	f043 0320 	orr.w	r3, r3, #32
 8006ac6:	6423      	str	r3, [r4, #64]	; 0x40
 8006ac8:	e73e      	b.n	8006948 <HAL_I2C_Mem_Write+0x20>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aca:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR;
 8006acc:	2701      	movs	r7, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ace:	6813      	ldr	r3, [r2, #0]
 8006ad0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ad4:	6013      	str	r3, [r2, #0]
 8006ad6:	e738      	b.n	800694a <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ad8:	695a      	ldr	r2, [r3, #20]
 8006ada:	0752      	lsls	r2, r2, #29
 8006adc:	d4a4      	bmi.n	8006a28 <HAL_I2C_Mem_Write+0x100>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ade:	695a      	ldr	r2, [r3, #20]
 8006ae0:	0551      	lsls	r1, r2, #21
 8006ae2:	d407      	bmi.n	8006af4 <HAL_I2C_Mem_Write+0x1cc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ae4:	f7ff f9b6 	bl	8005e54 <HAL_GetTick>
 8006ae8:	1b40      	subs	r0, r0, r5
 8006aea:	4286      	cmp	r6, r0
 8006aec:	d32a      	bcc.n	8006b44 <HAL_I2C_Mem_Write+0x21c>
 8006aee:	b34e      	cbz	r6, 8006b44 <HAL_I2C_Mem_Write+0x21c>
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	e790      	b.n	8006a16 <HAL_I2C_Mem_Write+0xee>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8006af4:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006af6:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8006afa:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006afc:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8006afe:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b00:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b04:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b08:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8006b0a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b0e:	f043 0304 	orr.w	r3, r3, #4
 8006b12:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	d1a6      	bne.n	8006a68 <HAL_I2C_Mem_Write+0x140>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b1a:	6822      	ldr	r2, [r4, #0]
      return HAL_ERROR;
 8006b1c:	2701      	movs	r7, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b1e:	6813      	ldr	r3, [r2, #0]
 8006b20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b24:	6013      	str	r3, [r2, #0]
 8006b26:	e710      	b.n	800694a <HAL_I2C_Mem_Write+0x22>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006b28:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006b2a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006b2c:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006b2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006b32:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006b36:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006b38:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006b3c:	f043 0320 	orr.w	r3, r3, #32
 8006b40:	6423      	str	r3, [r4, #64]	; 0x40
 8006b42:	e78e      	b.n	8006a62 <HAL_I2C_Mem_Write+0x13a>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006b44:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006b46:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006b48:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006b4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006b4e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006b52:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006b54:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006b58:	f043 0320 	orr.w	r3, r3, #32
 8006b5c:	6423      	str	r3, [r4, #64]	; 0x40
 8006b5e:	e7d9      	b.n	8006b14 <HAL_I2C_Mem_Write+0x1ec>

08006b60 <HAL_I2C_Mem_Read>:
{
 8006b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b64:	4604      	mov	r4, r0
 8006b66:	b087      	sub	sp, #28
 8006b68:	469a      	mov	sl, r3
 8006b6a:	460f      	mov	r7, r1
 8006b6c:	4690      	mov	r8, r2
 8006b6e:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
 8006b72:	9d12      	ldr	r5, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8006b74:	f7ff f96e 	bl	8005e54 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b78:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006b7c:	2b20      	cmp	r3, #32
 8006b7e:	d004      	beq.n	8006b8a <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 8006b80:	2702      	movs	r7, #2
}
 8006b82:	4638      	mov	r0, r7
 8006b84:	b007      	add	sp, #28
 8006b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b8a:	4606      	mov	r6, r0
 8006b8c:	e004      	b.n	8006b98 <HAL_I2C_Mem_Read+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b8e:	f7ff f961 	bl	8005e54 <HAL_GetTick>
 8006b92:	1b80      	subs	r0, r0, r6
 8006b94:	2819      	cmp	r0, #25
 8006b96:	d84d      	bhi.n	8006c34 <HAL_I2C_Mem_Read+0xd4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b98:	6822      	ldr	r2, [r4, #0]
 8006b9a:	6993      	ldr	r3, [r2, #24]
 8006b9c:	43db      	mvns	r3, r3
 8006b9e:	f013 0b02 	ands.w	fp, r3, #2
 8006ba2:	d0f4      	beq.n	8006b8e <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 8006ba4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d0e9      	beq.n	8006b80 <HAL_I2C_Mem_Read+0x20>
 8006bac:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006bae:	6813      	ldr	r3, [r2, #0]
    __HAL_LOCK(hi2c);
 8006bb0:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006bb4:	07db      	lsls	r3, r3, #31
 8006bb6:	d402      	bmi.n	8006bbe <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8006bb8:	6813      	ldr	r3, [r2, #0]
 8006bba:	430b      	orrs	r3, r1
 8006bbc:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006bbe:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006bc2:	f04f 0c40 	mov.w	ip, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bc6:	2000      	movs	r0, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bc8:	6811      	ldr	r1, [r2, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006bca:	4653      	mov	r3, sl
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bcc:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8006bd0:	6011      	str	r1, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006bd2:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006bd6:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bda:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8006bdc:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006be0:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006be4:	4639      	mov	r1, r7
    hi2c->pBuffPtr    = pData;
 8006be6:	9f10      	ldr	r7, [sp, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006be8:	f5a0 3080 	sub.w	r0, r0, #65536	; 0x10000
    hi2c->pBuffPtr    = pData;
 8006bec:	6267      	str	r7, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006bee:	4642      	mov	r2, r8
 8006bf0:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bf4:	62e0      	str	r0, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8006bf6:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	f7ff fcb2 	bl	8006564 <I2C_RequestMemoryRead>
 8006c00:	4607      	mov	r7, r0
 8006c02:	b9a8      	cbnz	r0, 8006c30 <HAL_I2C_Mem_Read+0xd0>
    if (hi2c->XferSize == 0U)
 8006c04:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006c06:	6822      	ldr	r2, [r4, #0]
 8006c08:	bb13      	cbnz	r3, 8006c50 <HAL_I2C_Mem_Read+0xf0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c0a:	9002      	str	r0, [sp, #8]
 8006c0c:	6953      	ldr	r3, [r2, #20]
 8006c0e:	9302      	str	r3, [sp, #8]
 8006c10:	6993      	ldr	r3, [r2, #24]
 8006c12:	9302      	str	r3, [sp, #8]
 8006c14:	9b02      	ldr	r3, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c16:	6813      	ldr	r3, [r2, #0]
 8006c18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c1c:	6013      	str	r3, [r2, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c1e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8006c20:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8006c22:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8006c26:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c2a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8006c2e:	e7a8      	b.n	8006b82 <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 8006c30:	2701      	movs	r7, #1
 8006c32:	e7a6      	b.n	8006b82 <HAL_I2C_Mem_Read+0x22>
        hi2c->State             = HAL_I2C_STATE_READY;
 8006c34:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006c36:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006c3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006c3e:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006c42:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006c44:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006c48:	f043 0320 	orr.w	r3, r3, #32
 8006c4c:	6423      	str	r3, [r4, #64]	; 0x40
 8006c4e:	e797      	b.n	8006b80 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d07c      	beq.n	8006d4e <HAL_I2C_Mem_Read+0x1ee>
    else if (hi2c->XferSize == 2U)
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	f000 811d 	beq.w	8006e94 <HAL_I2C_Mem_Read+0x334>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c5a:	6811      	ldr	r1, [r2, #0]
 8006c5c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8006c60:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c62:	9005      	str	r0, [sp, #20]
 8006c64:	6951      	ldr	r1, [r2, #20]
 8006c66:	9105      	str	r1, [sp, #20]
 8006c68:	6992      	ldr	r2, [r2, #24]
 8006c6a:	9205      	str	r2, [sp, #20]
 8006c6c:	9a05      	ldr	r2, [sp, #20]
    while (hi2c->XferSize > 0U)
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d0d5      	beq.n	8006c1e <HAL_I2C_Mem_Read+0xbe>
      if (hi2c->XferSize <= 3U)
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d87e      	bhi.n	8006d74 <HAL_I2C_Mem_Read+0x214>
        if (hi2c->XferSize == 1U)
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	f000 80d8 	beq.w	8006e2c <HAL_I2C_Mem_Read+0x2cc>
        else if (hi2c->XferSize == 2U)
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d04c      	beq.n	8006d1a <HAL_I2C_Mem_Read+0x1ba>
 8006c80:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c82:	6822      	ldr	r2, [r4, #0]
 8006c84:	f040 80a7 	bne.w	8006dd6 <HAL_I2C_Mem_Read+0x276>
 8006c88:	6953      	ldr	r3, [r2, #20]
 8006c8a:	0759      	lsls	r1, r3, #29
 8006c8c:	d5fc      	bpl.n	8006c88 <HAL_I2C_Mem_Read+0x128>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c8e:	6813      	ldr	r3, [r2, #0]
 8006c90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c94:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006c96:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c98:	6822      	ldr	r2, [r4, #0]
 8006c9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c9c:	6912      	ldr	r2, [r2, #16]
 8006c9e:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8006ca0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8006ca2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006ca4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006ca6:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8006ca8:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8006caa:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8006cac:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8006cae:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006cb0:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006cb2:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006cb4:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cb6:	6822      	ldr	r2, [r4, #0]
 8006cb8:	f040 80ab 	bne.w	8006e12 <HAL_I2C_Mem_Read+0x2b2>
 8006cbc:	6953      	ldr	r3, [r2, #20]
 8006cbe:	0759      	lsls	r1, r3, #29
 8006cc0:	d5fc      	bpl.n	8006cbc <HAL_I2C_Mem_Read+0x15c>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cc2:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cca:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ccc:	6913      	ldr	r3, [r2, #16]
 8006cce:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8006cd0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8006cd2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006cd4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8006cda:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8006cdc:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8006cde:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8006ce0:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006ce2:	8522      	strh	r2, [r4, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8006ce4:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ce6:	6822      	ldr	r2, [r4, #0]
 8006ce8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cea:	6912      	ldr	r2, [r2, #16]
 8006cec:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8006cee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8006cf0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8006cf2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8006cf4:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 8006cf6:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8006cf8:	3101      	adds	r1, #1
          hi2c->XferCount--;
 8006cfa:	b292      	uxth	r2, r2
          hi2c->XferSize--;
 8006cfc:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8006cfe:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8006d00:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8006d02:	8523      	strh	r3, [r4, #40]	; 0x28
 8006d04:	e7b3      	b.n	8006c6e <HAL_I2C_Mem_Read+0x10e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d06:	6953      	ldr	r3, [r2, #20]
 8006d08:	075b      	lsls	r3, r3, #29
 8006d0a:	d40c      	bmi.n	8006d26 <HAL_I2C_Mem_Read+0x1c6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d0c:	f7ff f8a2 	bl	8005e54 <HAL_GetTick>
 8006d10:	1b80      	subs	r0, r0, r6
 8006d12:	4285      	cmp	r5, r0
 8006d14:	d36b      	bcc.n	8006dee <HAL_I2C_Mem_Read+0x28e>
 8006d16:	2d00      	cmp	r5, #0
 8006d18:	d069      	beq.n	8006dee <HAL_I2C_Mem_Read+0x28e>
 8006d1a:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d1c:	6822      	ldr	r2, [r4, #0]
 8006d1e:	d1f2      	bne.n	8006d06 <HAL_I2C_Mem_Read+0x1a6>
 8006d20:	6953      	ldr	r3, [r2, #20]
 8006d22:	0759      	lsls	r1, r3, #29
 8006d24:	d5fc      	bpl.n	8006d20 <HAL_I2C_Mem_Read+0x1c0>
  __ASM volatile ("cpsid i" : : : "memory");
 8006d26:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d28:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d32:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8006d38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8006d3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006d3c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006d3e:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8006d40:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8006d42:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8006d44:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8006d46:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006d48:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006d4a:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006d4c:	e7ca      	b.n	8006ce4 <HAL_I2C_Mem_Read+0x184>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d4e:	6813      	ldr	r3, [r2, #0]
 8006d50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	9003      	str	r0, [sp, #12]
 8006d5c:	695a      	ldr	r2, [r3, #20]
 8006d5e:	9203      	str	r2, [sp, #12]
 8006d60:	699a      	ldr	r2, [r3, #24]
 8006d62:	9203      	str	r2, [sp, #12]
 8006d64:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006d6e:	b662      	cpsie	i
 8006d70:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006d72:	e77c      	b.n	8006c6e <HAL_I2C_Mem_Read+0x10e>
 8006d74:	b945      	cbnz	r5, 8006d88 <HAL_I2C_Mem_Read+0x228>
 8006d76:	e07e      	b.n	8006e76 <HAL_I2C_Mem_Read+0x316>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d78:	695a      	ldr	r2, [r3, #20]
 8006d7a:	06d1      	lsls	r1, r2, #27
 8006d7c:	d468      	bmi.n	8006e50 <HAL_I2C_Mem_Read+0x2f0>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d7e:	f7ff f869 	bl	8005e54 <HAL_GetTick>
 8006d82:	1b80      	subs	r0, r0, r6
 8006d84:	4285      	cmp	r5, r0
 8006d86:	d332      	bcc.n	8006dee <HAL_I2C_Mem_Read+0x28e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d88:	6823      	ldr	r3, [r4, #0]
 8006d8a:	695a      	ldr	r2, [r3, #20]
 8006d8c:	0650      	lsls	r0, r2, #25
 8006d8e:	d5f3      	bpl.n	8006d78 <HAL_I2C_Mem_Read+0x218>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d90:	691a      	ldr	r2, [r3, #16]
 8006d92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d94:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8006d96:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d98:	6821      	ldr	r1, [r4, #0]
        hi2c->XferCount--;
 8006d9a:	3a01      	subs	r2, #1
 8006d9c:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 8006d9e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8006da0:	8562      	strh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006da2:	6948      	ldr	r0, [r1, #20]
        hi2c->pBuffPtr++;
 8006da4:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8006da6:	3b01      	subs	r3, #1
 8006da8:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8006daa:	f102 0c01 	add.w	ip, r2, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006dae:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 8006db0:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8006db2:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006db6:	f57f af5a 	bpl.w	8006c6e <HAL_I2C_Mem_Read+0x10e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dba:	690b      	ldr	r3, [r1, #16]
 8006dbc:	7053      	strb	r3, [r2, #1]
          hi2c->XferSize--;
 8006dbe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006dc0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8006dc2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006dc4:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 8006dc6:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 8006dc8:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 8006dca:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 8006dcc:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8006dce:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006dd0:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8006dd2:	6261      	str	r1, [r4, #36]	; 0x24
 8006dd4:	e74b      	b.n	8006c6e <HAL_I2C_Mem_Read+0x10e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006dd6:	6953      	ldr	r3, [r2, #20]
 8006dd8:	075b      	lsls	r3, r3, #29
 8006dda:	f53f af58 	bmi.w	8006c8e <HAL_I2C_Mem_Read+0x12e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dde:	f7ff f839 	bl	8005e54 <HAL_GetTick>
 8006de2:	1b80      	subs	r0, r0, r6
 8006de4:	4285      	cmp	r5, r0
 8006de6:	d302      	bcc.n	8006dee <HAL_I2C_Mem_Read+0x28e>
 8006de8:	2d00      	cmp	r5, #0
 8006dea:	f47f af49 	bne.w	8006c80 <HAL_I2C_Mem_Read+0x120>
          return HAL_ERROR;
 8006dee:	2701      	movs	r7, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006df0:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006df2:	2320      	movs	r3, #32
}
 8006df4:	4638      	mov	r0, r7
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006df6:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006df8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006dfc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e00:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006e02:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e06:	f043 0320 	orr.w	r3, r3, #32
 8006e0a:	6423      	str	r3, [r4, #64]	; 0x40
}
 8006e0c:	b007      	add	sp, #28
 8006e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e12:	6953      	ldr	r3, [r2, #20]
 8006e14:	075b      	lsls	r3, r3, #29
 8006e16:	f53f af54 	bmi.w	8006cc2 <HAL_I2C_Mem_Read+0x162>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e1a:	f7ff f81b 	bl	8005e54 <HAL_GetTick>
 8006e1e:	1b80      	subs	r0, r0, r6
 8006e20:	4285      	cmp	r5, r0
 8006e22:	d3e4      	bcc.n	8006dee <HAL_I2C_Mem_Read+0x28e>
 8006e24:	2d00      	cmp	r5, #0
 8006e26:	f47f af45 	bne.w	8006cb4 <HAL_I2C_Mem_Read+0x154>
 8006e2a:	e7e0      	b.n	8006dee <HAL_I2C_Mem_Read+0x28e>
 8006e2c:	b945      	cbnz	r5, 8006e40 <HAL_I2C_Mem_Read+0x2e0>
 8006e2e:	e02c      	b.n	8006e8a <HAL_I2C_Mem_Read+0x32a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e30:	695a      	ldr	r2, [r3, #20]
 8006e32:	06d1      	lsls	r1, r2, #27
 8006e34:	d40c      	bmi.n	8006e50 <HAL_I2C_Mem_Read+0x2f0>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e36:	f7ff f80d 	bl	8005e54 <HAL_GetTick>
 8006e3a:	1b80      	subs	r0, r0, r6
 8006e3c:	4285      	cmp	r5, r0
 8006e3e:	d3d6      	bcc.n	8006dee <HAL_I2C_Mem_Read+0x28e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	695a      	ldr	r2, [r3, #20]
 8006e44:	0650      	lsls	r0, r2, #25
 8006e46:	d5f3      	bpl.n	8006e30 <HAL_I2C_Mem_Read+0x2d0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e48:	691a      	ldr	r2, [r3, #16]
 8006e4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e4c:	701a      	strb	r2, [r3, #0]
 8006e4e:	e7b6      	b.n	8006dbe <HAL_I2C_Mem_Read+0x25e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e50:	f06f 0010 	mvn.w	r0, #16
          return HAL_ERROR;
 8006e54:	2701      	movs	r7, #1
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e56:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e58:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e5a:	6158      	str	r0, [r3, #20]
}
 8006e5c:	4638      	mov	r0, r7
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e5e:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e60:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e64:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006e68:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006e6a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006e6e:	6423      	str	r3, [r4, #64]	; 0x40
}
 8006e70:	b007      	add	sp, #28
 8006e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e76:	6823      	ldr	r3, [r4, #0]
 8006e78:	695a      	ldr	r2, [r3, #20]
 8006e7a:	0652      	lsls	r2, r2, #25
 8006e7c:	d488      	bmi.n	8006d90 <HAL_I2C_Mem_Read+0x230>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e7e:	695a      	ldr	r2, [r3, #20]
 8006e80:	06d5      	lsls	r5, r2, #27
 8006e82:	d4e5      	bmi.n	8006e50 <HAL_I2C_Mem_Read+0x2f0>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e84:	f7fe ffe6 	bl	8005e54 <HAL_GetTick>
 8006e88:	e7b1      	b.n	8006dee <HAL_I2C_Mem_Read+0x28e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	695a      	ldr	r2, [r3, #20]
 8006e8e:	0652      	lsls	r2, r2, #25
 8006e90:	d5f5      	bpl.n	8006e7e <HAL_I2C_Mem_Read+0x31e>
 8006e92:	e7d9      	b.n	8006e48 <HAL_I2C_Mem_Read+0x2e8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e94:	6813      	ldr	r3, [r2, #0]
 8006e96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006e9a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e9c:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	9004      	str	r0, [sp, #16]
 8006ea2:	695a      	ldr	r2, [r3, #20]
 8006ea4:	9204      	str	r2, [sp, #16]
 8006ea6:	699a      	ldr	r2, [r3, #24]
 8006ea8:	9204      	str	r2, [sp, #16]
 8006eaa:	9a04      	ldr	r2, [sp, #16]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eb2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006eb4:	b662      	cpsie	i
 8006eb6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006eb8:	e6d9      	b.n	8006c6e <HAL_I2C_Mem_Read+0x10e>
 8006eba:	bf00      	nop

08006ebc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ebe:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	d074      	beq.n	8006fae <HAL_PCD_Init+0xf2>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006ec4:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8006ec8:	4604      	mov	r4, r0
 8006eca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d068      	beq.n	8006fa4 <HAL_PCD_Init+0xe8>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006ed2:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006ed4:	4626      	mov	r6, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8006ed6:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 8006eda:	6820      	ldr	r0, [r4, #0]
 8006edc:	f001 fa90 	bl	8008400 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006ee0:	f856 cb10 	ldr.w	ip, [r6], #16
 8006ee4:	466d      	mov	r5, sp
 8006ee6:	4637      	mov	r7, r6
 8006ee8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006eea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	1d27      	adds	r7, r4, #4
 8006ef0:	602b      	str	r3, [r5, #0]
 8006ef2:	4660      	mov	r0, ip
 8006ef4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8006ef8:	f001 fa70 	bl	80083dc <USB_CoreInit>
 8006efc:	4605      	mov	r5, r0
 8006efe:	b130      	cbz	r0, 8006f0e <HAL_PCD_Init+0x52>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f00:	2302      	movs	r3, #2
    return HAL_ERROR;
 8006f02:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f04:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8006f08:	4628      	mov	r0, r5
 8006f0a:	b007      	add	sp, #28
 8006f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006f0e:	4601      	mov	r1, r0
 8006f10:	6820      	ldr	r0, [r4, #0]
 8006f12:	f001 fa7f 	bl	8008414 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f16:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8006f1a:	f1bc 0f00 	cmp.w	ip, #0
 8006f1e:	d029      	beq.n	8006f74 <HAL_PCD_Init+0xb8>
 8006f20:	4628      	mov	r0, r5
    hpcd->IN_ep[i].is_in = 1U;
 8006f22:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006f26:	462a      	mov	r2, r5
    hpcd->IN_ep[i].is_in = 1U;
 8006f28:	eb04 1340 	add.w	r3, r4, r0, lsl #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f2c:	1c45      	adds	r5, r0, #1
    hpcd->IN_ep[i].num = i;
 8006f2e:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006f32:	86d8      	strh	r0, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f34:	b2e8      	uxtb	r0, r5
 8006f36:	4560      	cmp	r0, ip
    hpcd->IN_ep[i].is_in = 1U;
 8006f38:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006f3c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006f40:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 8006f44:	641a      	str	r2, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f46:	d3ef      	bcc.n	8006f28 <HAL_PCD_Init+0x6c>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f48:	2300      	movs	r3, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	eb04 1243 	add.w	r2, r4, r3, lsl #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f50:	1c5d      	adds	r5, r3, #1
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006f52:	f103 000a 	add.w	r0, r3, #10
    hpcd->OUT_ep[i].num = i;
 8006f56:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f5a:	b2eb      	uxtb	r3, r5
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006f5c:	0140      	lsls	r0, r0, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f5e:	4563      	cmp	r3, ip
    hpcd->OUT_ep[i].is_in = 0U;
 8006f60:	f882 1129 	strb.w	r1, [r2, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006f64:	f882 112b 	strb.w	r1, [r2, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006f68:	f8c2 1138 	str.w	r1, [r2, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006f6c:	f8c2 113c 	str.w	r1, [r2, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006f70:	5021      	str	r1, [r4, r0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f72:	d3eb      	bcc.n	8006f4c <HAL_PCD_Init+0x90>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006f76:	466d      	mov	r5, sp
 8006f78:	f8d4 c000 	ldr.w	ip, [r4]
 8006f7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f7e:	6833      	ldr	r3, [r6, #0]
 8006f80:	4660      	mov	r0, ip
 8006f82:	602b      	str	r3, [r5, #0]
 8006f84:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8006f88:	f001 fa46 	bl	8008418 <USB_DevInit>
 8006f8c:	4605      	mov	r5, r0
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	d1b6      	bne.n	8006f00 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_READY;
 8006f92:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8006f94:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  (void)USB_DevDisconnect(hpcd->Instance);
 8006f98:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8006f9a:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8006f9e:	f001 fe59 	bl	8008c54 <USB_DevDisconnect>
  return HAL_OK;
 8006fa2:	e7b1      	b.n	8006f08 <HAL_PCD_Init+0x4c>
    hpcd->Lock = HAL_UNLOCKED;
 8006fa4:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
    HAL_PCD_MspInit(hpcd);
 8006fa8:	f002 fd6c 	bl	8009a84 <HAL_PCD_MspInit>
 8006fac:	e791      	b.n	8006ed2 <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 8006fae:	2501      	movs	r5, #1
}
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	b007      	add	sp, #28
 8006fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fb6:	bf00      	nop

08006fb8 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8006fb8:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d010      	beq.n	8006fe2 <HAL_PCD_Start+0x2a>
 8006fc0:	2101      	movs	r1, #1
{
 8006fc2:	b510      	push	{r4, lr}
 8006fc4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8006fc6:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8006fca:	f002 fe89 	bl	8009ce0 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8006fce:	6820      	ldr	r0, [r4, #0]
 8006fd0:	f001 fe3e 	bl	8008c50 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8006fd4:	6820      	ldr	r0, [r4, #0]
 8006fd6:	f001 fa09 	bl	80083ec <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8006fda:	2000      	movs	r0, #0
 8006fdc:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8006fe0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8006fe2:	2002      	movs	r0, #2
}
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop

08006fe8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006fe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fec:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8006fee:	6800      	ldr	r0, [r0, #0]
 8006ff0:	f001 fe32 	bl	8008c58 <USB_ReadInterrupts>
 8006ff4:	0401      	lsls	r1, r0, #16
 8006ff6:	6822      	ldr	r2, [r4, #0]
 8006ff8:	d443      	bmi.n	8007082 <HAL_PCD_IRQHandler+0x9a>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8006ffa:	4610      	mov	r0, r2
 8006ffc:	f001 fe2c 	bl	8008c58 <USB_ReadInterrupts>
 8007000:	0546      	lsls	r6, r0, #21
 8007002:	f100 8171 	bmi.w	80072e8 <HAL_PCD_IRQHandler+0x300>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8007006:	6820      	ldr	r0, [r4, #0]
 8007008:	f001 fe26 	bl	8008c58 <USB_ReadInterrupts>
 800700c:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007010:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8007012:	d007      	beq.n	8007024 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007014:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8007018:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800701c:	041b      	lsls	r3, r3, #16
 800701e:	0c1b      	lsrs	r3, r3, #16
 8007020:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8007024:	f001 fe18 	bl	8008c58 <USB_ReadInterrupts>
 8007028:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800702c:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800702e:	d007      	beq.n	8007040 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007030:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8007034:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007038:	041b      	lsls	r3, r3, #16
 800703a:	0c1b      	lsrs	r3, r3, #16
 800703c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8007040:	f001 fe0a 	bl	8008c58 <USB_ReadInterrupts>
 8007044:	04c5      	lsls	r5, r0, #19
 8007046:	f100 8131 	bmi.w	80072ac <HAL_PCD_IRQHandler+0x2c4>
 800704a:	6820      	ldr	r0, [r4, #0]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800704c:	f001 fe04 	bl	8008c58 <USB_ReadInterrupts>
 8007050:	0500      	lsls	r0, r0, #20
 8007052:	f100 8104 	bmi.w	800725e <HAL_PCD_IRQHandler+0x276>
#else
    HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8007056:	6820      	ldr	r0, [r4, #0]
 8007058:	f001 fdfe 	bl	8008c58 <USB_ReadInterrupts>
 800705c:	0582      	lsls	r2, r0, #22
 800705e:	f100 80f1 	bmi.w	8007244 <HAL_PCD_IRQHandler+0x25c>
#else
    HAL_PCD_SOFCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8007062:	6820      	ldr	r0, [r4, #0]
 8007064:	f001 fdf8 	bl	8008c58 <USB_ReadInterrupts>
 8007068:	05c3      	lsls	r3, r0, #23
 800706a:	d508      	bpl.n	800707e <HAL_PCD_IRQHandler+0x96>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800706c:	6822      	ldr	r2, [r4, #0]
 800706e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8007072:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007076:	041b      	lsls	r3, r3, #16
 8007078:	0c1b      	lsrs	r3, r3, #16
 800707a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 800707e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007082:	f8df a414 	ldr.w	sl, [pc, #1044]	; 8007498 <HAL_PCD_IRQHandler+0x4b0>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007086:	f8df b414 	ldr.w	fp, [pc, #1044]	; 800749c <HAL_PCD_IRQHandler+0x4b4>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800708a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800708e:	041f      	lsls	r7, r3, #16
 8007090:	d5b3      	bpl.n	8006ffa <HAL_PCD_IRQHandler+0x12>
    wIstr = hpcd->Instance->ISTR;
 8007092:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
 8007096:	b289      	uxth	r1, r1
    if (epindex == 0U)
 8007098:	f011 050f 	ands.w	r5, r1, #15
 800709c:	d157      	bne.n	800714e <HAL_PCD_IRQHandler+0x166>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800709e:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80070a2:	8813      	ldrh	r3, [r2, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80070a4:	f000 813e 	beq.w	8007324 <HAL_PCD_IRQHandler+0x33c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80070a8:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80070aa:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 80070ae:	f040 817a 	bne.w	80073a6 <HAL_PCD_IRQHandler+0x3be>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80070b2:	041b      	lsls	r3, r3, #16
 80070b4:	d5e9      	bpl.n	800708a <HAL_PCD_IRQHandler+0xa2>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80070b6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80070ba:	8811      	ldrh	r1, [r2, #0]
 80070bc:	400b      	ands	r3, r1
 80070be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c2:	8013      	strh	r3, [r2, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80070c4:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80070c8:	f894 1128 	ldrb.w	r1, [r4, #296]	; 0x128
 80070cc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80070d0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80070d4:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 80070d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070dc:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80070e0:	b19b      	cbz	r3, 800710a <HAL_PCD_IRQHandler+0x122>
 80070e2:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 80070e6:	b181      	cbz	r1, 800710a <HAL_PCD_IRQHandler+0x122>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80070e8:	4610      	mov	r0, r2
 80070ea:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 80070ee:	f001 fdb9 	bl	8008c64 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80070f2:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 80070f6:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80070fa:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 80070fc:	4413      	add	r3, r2
 80070fe:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007102:	4620      	mov	r0, r4
 8007104:	f002 fce4 	bl	8009ad0 <HAL_PCD_DataOutStageCallback>
 8007108:	6822      	ldr	r2, [r4, #0]
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800710a:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800710e:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 8007112:	b29b      	uxth	r3, r3
 8007114:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 8007118:	2900      	cmp	r1, #0
 800711a:	f040 8198 	bne.w	800744e <HAL_PCD_IRQHandler+0x466>
 800711e:	5ac1      	ldrh	r1, [r0, r3]
 8007120:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8007124:	0409      	lsls	r1, r1, #16
 8007126:	0c09      	lsrs	r1, r1, #16
 8007128:	52c1      	strh	r1, [r0, r3]
 800712a:	5ac1      	ldrh	r1, [r0, r3]
 800712c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8007130:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007134:	b289      	uxth	r1, r1
 8007136:	52c1      	strh	r1, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007138:	8811      	ldrh	r1, [r2, #0]
 800713a:	4bd6      	ldr	r3, [pc, #856]	; (8007494 <HAL_PCD_IRQHandler+0x4ac>)
 800713c:	400b      	ands	r3, r1
 800713e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8007142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800714a:	8013      	strh	r3, [r2, #0]
 800714c:	e79d      	b.n	800708a <HAL_PCD_IRQHandler+0xa2>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800714e:	f832 6025 	ldrh.w	r6, [r2, r5, lsl #2]
 8007152:	b2b6      	uxth	r6, r6
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007154:	0431      	lsls	r1, r6, #16
 8007156:	d426      	bmi.n	80071a6 <HAL_PCD_IRQHandler+0x1be>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007158:	0633      	lsls	r3, r6, #24
 800715a:	d596      	bpl.n	800708a <HAL_PCD_IRQHandler+0xa2>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800715c:	f832 1025 	ldrh.w	r1, [r2, r5, lsl #2]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007160:	eb04 1345 	add.w	r3, r4, r5, lsl #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007164:	ea0a 0101 	and.w	r1, sl, r1
 8007168:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800716c:	f822 1025 	strh.w	r1, [r2, r5, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007170:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8007174:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
        ep->xfer_buff += ep->xfer_count;
 8007178:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800717a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800717e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007182:	f8b1 1404 	ldrh.w	r1, [r1, #1028]	; 0x404

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8007186:	6c1d      	ldr	r5, [r3, #64]	; 0x40
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007188:	f3c1 0109 	ubfx	r1, r1, #0, #10
        ep->xfer_buff += ep->xfer_count;
 800718c:	1846      	adds	r6, r0, r1
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800718e:	6459      	str	r1, [r3, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8007190:	63de      	str	r6, [r3, #60]	; 0x3c
        if (ep->xfer_len == 0U)
 8007192:	2d00      	cmp	r5, #0
 8007194:	f040 80ef 	bne.w	8007376 <HAL_PCD_IRQHandler+0x38e>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007198:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800719c:	4620      	mov	r0, r4
 800719e:	f002 fc9f 	bl	8009ae0 <HAL_PCD_DataInStageCallback>
 80071a2:	6822      	ldr	r2, [r4, #0]
 80071a4:	e771      	b.n	800708a <HAL_PCD_IRQHandler+0xa2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80071a6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80071aa:	f832 1025 	ldrh.w	r1, [r2, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 80071ae:	016f      	lsls	r7, r5, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80071b0:	400b      	ands	r3, r1
 80071b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071b6:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 80071ba:	eb04 0907 	add.w	r9, r4, r7
 80071be:	f899 3134 	ldrb.w	r3, [r9, #308]	; 0x134
 80071c2:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 810f 	beq.w	80073ea <HAL_PCD_IRQHandler+0x402>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80071cc:	f899 3128 	ldrb.w	r3, [r9, #296]	; 0x128
 80071d0:	f832 c023 	ldrh.w	ip, [r2, r3, lsl #2]
 80071d4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80071d8:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80071dc:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
 80071e0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80071e4:	4463      	add	r3, ip
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80071e6:	f000 811b 	beq.w	8007420 <HAL_PCD_IRQHandler+0x438>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80071ea:	3302      	adds	r3, #2
 80071ec:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 80071f0:	f3c8 0809 	ubfx	r8, r8, #0, #10
            if (count != 0U)
 80071f4:	f1b8 0f00 	cmp.w	r8, #0
 80071f8:	f040 815d 	bne.w	80074b6 <HAL_PCD_IRQHandler+0x4ce>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80071fc:	880b      	ldrh	r3, [r1, #0]
 80071fe:	ea0b 0303 	and.w	r3, fp, r3
 8007202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007206:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800720a:	800b      	strh	r3, [r1, #0]
 800720c:	4427      	add	r7, r4
        ep->xfer_count += count;
 800720e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
        ep->xfer_buff += count;
 8007212:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007216:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
        ep->xfer_count += count;
 800721a:	4442      	add	r2, r8
        ep->xfer_buff += count;
 800721c:	4443      	add	r3, r8
        ep->xfer_count += count;
 800721e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
        ep->xfer_buff += count;
 8007222:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007226:	2800      	cmp	r0, #0
 8007228:	f000 80f7 	beq.w	800741a <HAL_PCD_IRQHandler+0x432>
 800722c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8007230:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 8007234:	4590      	cmp	r8, r2
 8007236:	f080 8114 	bcs.w	8007462 <HAL_PCD_IRQHandler+0x47a>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800723a:	4620      	mov	r0, r4
 800723c:	f002 fc48 	bl	8009ad0 <HAL_PCD_DataOutStageCallback>
 8007240:	6822      	ldr	r2, [r4, #0]
 8007242:	e789      	b.n	8007158 <HAL_PCD_IRQHandler+0x170>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007244:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8007246:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007248:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800724c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007250:	041b      	lsls	r3, r3, #16
 8007252:	0c1b      	lsrs	r3, r3, #16
 8007254:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8007258:	f002 fc4a 	bl	8009af0 <HAL_PCD_SOFCallback>
 800725c:	e701      	b.n	8007062 <HAL_PCD_IRQHandler+0x7a>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800725e:	6823      	ldr	r3, [r4, #0]
 8007260:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8007264:	4618      	mov	r0, r3
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8007266:	f042 0208 	orr.w	r2, r2, #8
 800726a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800726e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8007272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007276:	0412      	lsls	r2, r2, #16
 8007278:	0c12      	lsrs	r2, r2, #16
 800727a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800727e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8007282:	f042 0204 	orr.w	r2, r2, #4
 8007286:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800728a:	f001 fce5 	bl	8008c58 <USB_ReadInterrupts>
 800728e:	04c1      	lsls	r1, r0, #19
 8007290:	d508      	bpl.n	80072a4 <HAL_PCD_IRQHandler+0x2bc>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007292:	6822      	ldr	r2, [r4, #0]
 8007294:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8007298:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800729c:	041b      	lsls	r3, r3, #16
 800729e:	0c1b      	lsrs	r3, r3, #16
 80072a0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 80072a4:	4620      	mov	r0, r4
 80072a6:	f002 fc39 	bl	8009b1c <HAL_PCD_SuspendCallback>
 80072aa:	e6d4      	b.n	8007056 <HAL_PCD_IRQHandler+0x6e>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80072ac:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80072ae:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80072b0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80072b4:	f023 0304 	bic.w	r3, r3, #4
 80072b8:	041b      	lsls	r3, r3, #16
 80072ba:	0c1b      	lsrs	r3, r3, #16
 80072bc:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80072c0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80072c4:	f023 0308 	bic.w	r3, r3, #8
 80072c8:	041b      	lsls	r3, r3, #16
 80072ca:	0c1b      	lsrs	r3, r3, #16
 80072cc:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80072d0:	f002 fc34 	bl	8009b3c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80072d4:	6820      	ldr	r0, [r4, #0]
 80072d6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80072da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072de:	041b      	lsls	r3, r3, #16
 80072e0:	0c1b      	lsrs	r3, r3, #16
 80072e2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80072e6:	e6b1      	b.n	800704c <HAL_PCD_IRQHandler+0x64>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80072e8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80072ea:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80072ec:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80072f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072f4:	041b      	lsls	r3, r3, #16
 80072f6:	0c1b      	lsrs	r3, r3, #16
 80072f8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80072fc:	f002 fbfc 	bl	8009af8 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 8007300:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8007304:	2b01      	cmp	r3, #1
 8007306:	f43f ae7e 	beq.w	8007006 <HAL_PCD_IRQHandler+0x1e>
  hpcd->USB_Address = address;
 800730a:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 800730c:	2301      	movs	r3, #1
  hpcd->USB_Address = address;
 800730e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8007312:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007316:	4629      	mov	r1, r5
 8007318:	6820      	ldr	r0, [r4, #0]
 800731a:	f001 fc93 	bl	8008c44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800731e:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
 8007322:	e670      	b.n	8007006 <HAL_PCD_IRQHandler+0x1e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007324:	ea0a 0303 	and.w	r3, sl, r3
 8007328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800732c:	8013      	strh	r3, [r2, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800732e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8007332:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
        ep->xfer_buff += ep->xfer_count;
 8007336:	6be5      	ldr	r5, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007338:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800733c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8007340:	f8b2 3404 	ldrh.w	r3, [r2, #1028]	; 0x404
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007344:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007346:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 800734a:	441d      	add	r5, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800734c:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800734e:	63e5      	str	r5, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007350:	f002 fbc6 	bl	8009ae0 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007354:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007358:	b31b      	cbz	r3, 80073a2 <HAL_PCD_IRQHandler+0x3ba>
 800735a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800735c:	6822      	ldr	r2, [r4, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	f47f ae93 	bne.w	800708a <HAL_PCD_IRQHandler+0xa2>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007364:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8007368:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800736c:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8007370:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8007374:	e689      	b.n	800708a <HAL_PCD_IRQHandler+0xa2>
  ep->xfer_count = 0U;
 8007376:	f04f 0c00 	mov.w	ip, #0
  ep->is_in = 1U;
 800737a:	2701      	movs	r7, #1
 800737c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007380:	4610      	mov	r0, r2
 8007382:	f003 0207 	and.w	r2, r3, #7
 8007386:	0151      	lsls	r1, r2, #5
  ep->xfer_buff = pBuf;
 8007388:	1863      	adds	r3, r4, r1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800738a:	3128      	adds	r1, #40	; 0x28
  ep->num = ep_addr & EP_ADDR_MSK;
 800738c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  ep->xfer_len = len;
 8007390:	e9c3 650f 	strd	r6, r5, [r3, #60]	; 0x3c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007394:	4421      	add	r1, r4
  ep->xfer_count = 0U;
 8007396:	f8c3 c044 	str.w	ip, [r3, #68]	; 0x44
  ep->is_in = 1U;
 800739a:	f883 7029 	strb.w	r7, [r3, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800739e:	f001 fab3 	bl	8008908 <USB_EPStartXfer>
 80073a2:	6822      	ldr	r2, [r4, #0]
 80073a4:	e671      	b.n	800708a <HAL_PCD_IRQHandler+0xa2>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80073a6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80073aa:	f894 1128 	ldrb.w	r1, [r4, #296]	; 0x128
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80073ae:	4610      	mov	r0, r2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80073b0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80073b4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80073b8:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80073bc:	f504 710c 	add.w	r1, r4, #560	; 0x230
 80073c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073c4:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80073c8:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80073cc:	f001 fc4a 	bl	8008c64 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80073d0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80073d4:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80073d6:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80073d8:	8811      	ldrh	r1, [r2, #0]
 80073da:	400b      	ands	r3, r1
 80073dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073e0:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80073e2:	f002 fb6f 	bl	8009ac4 <HAL_PCD_SetupStageCallback>
 80073e6:	6822      	ldr	r2, [r4, #0]
 80073e8:	e64f      	b.n	800708a <HAL_PCD_IRQHandler+0xa2>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80073ea:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80073ee:	f899 1128 	ldrb.w	r1, [r9, #296]	; 0x128
 80073f2:	3306      	adds	r3, #6
 80073f4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80073f8:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 80073fc:	f3c8 0809 	ubfx	r8, r8, #0, #10
          if (count != 0U)
 8007400:	f1b8 0f00 	cmp.w	r8, #0
 8007404:	f43f af02 	beq.w	800720c <HAL_PCD_IRQHandler+0x224>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007408:	4610      	mov	r0, r2
 800740a:	4643      	mov	r3, r8
 800740c:	f8b9 212e 	ldrh.w	r2, [r9, #302]	; 0x12e
 8007410:	f8d9 113c 	ldr.w	r1, [r9, #316]	; 0x13c
 8007414:	f001 fc26 	bl	8008c64 <USB_ReadPMA>
 8007418:	e6f8      	b.n	800720c <HAL_PCD_IRQHandler+0x224>
 800741a:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 800741e:	e70c      	b.n	800723a <HAL_PCD_IRQHandler+0x252>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007420:	3306      	adds	r3, #6
 8007422:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 8007426:	f3c8 0809 	ubfx	r8, r8, #0, #10
            if (count != 0U)
 800742a:	f1b8 0f00 	cmp.w	r8, #0
 800742e:	f43f aee5 	beq.w	80071fc <HAL_PCD_IRQHandler+0x214>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007432:	4643      	mov	r3, r8
 8007434:	4610      	mov	r0, r2
 8007436:	f8b9 2132 	ldrh.w	r2, [r9, #306]	; 0x132
 800743a:	f8d9 113c 	ldr.w	r1, [r9, #316]	; 0x13c
 800743e:	f001 fc11 	bl	8008c64 <USB_ReadPMA>
 8007442:	f899 3128 	ldrb.w	r3, [r9, #296]	; 0x128
 8007446:	6821      	ldr	r1, [r4, #0]
 8007448:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800744c:	e6d6      	b.n	80071fc <HAL_PCD_IRQHandler+0x214>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800744e:	293e      	cmp	r1, #62	; 0x3e
 8007450:	d826      	bhi.n	80074a0 <HAL_PCD_IRQHandler+0x4b8>
 8007452:	084d      	lsrs	r5, r1, #1
 8007454:	07cf      	lsls	r7, r1, #31
 8007456:	bf48      	it	mi
 8007458:	3501      	addmi	r5, #1
 800745a:	02ad      	lsls	r5, r5, #10
 800745c:	b2ad      	uxth	r5, r5
 800745e:	52c5      	strh	r5, [r0, r3]
 8007460:	e66a      	b.n	8007138 <HAL_PCD_IRQHandler+0x150>
  ep->xfer_count = 0U;
 8007462:	f04f 0c00 	mov.w	ip, #0
 8007466:	f001 0107 	and.w	r1, r1, #7
 800746a:	014f      	lsls	r7, r1, #5
  ep->xfer_buff = pBuf;
 800746c:	19e2      	adds	r2, r4, r7
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800746e:	f507 7794 	add.w	r7, r7, #296	; 0x128
  ep->num = ep_addr & EP_ADDR_MSK;
 8007472:	f882 1128 	strb.w	r1, [r2, #296]	; 0x128
  ep->xfer_len = len;
 8007476:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140
  ep->xfer_buff = pBuf;
 800747a:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
  ep->xfer_count = 0U;
 800747e:	f8c2 c144 	str.w	ip, [r2, #324]	; 0x144
  ep->is_in = 0U;
 8007482:	f882 c129 	strb.w	ip, [r2, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007486:	19e1      	adds	r1, r4, r7
 8007488:	6820      	ldr	r0, [r4, #0]
 800748a:	f001 fa3d 	bl	8008908 <USB_EPStartXfer>
 800748e:	6822      	ldr	r2, [r4, #0]
 8007490:	e662      	b.n	8007158 <HAL_PCD_IRQHandler+0x170>
 8007492:	bf00      	nop
 8007494:	ffffbf8f 	.word	0xffffbf8f
 8007498:	ffff8f0f 	.word	0xffff8f0f
 800749c:	ffff8f8f 	.word	0xffff8f8f
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80074a0:	094d      	lsrs	r5, r1, #5
 80074a2:	06ce      	lsls	r6, r1, #27
 80074a4:	4906      	ldr	r1, [pc, #24]	; (80074c0 <HAL_PCD_IRQHandler+0x4d8>)
 80074a6:	bf08      	it	eq
 80074a8:	f105 35ff 	addeq.w	r5, r5, #4294967295
 80074ac:	ea41 2585 	orr.w	r5, r1, r5, lsl #10
 80074b0:	b2ad      	uxth	r5, r5
 80074b2:	52c5      	strh	r5, [r0, r3]
 80074b4:	e640      	b.n	8007138 <HAL_PCD_IRQHandler+0x150>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80074b6:	4610      	mov	r0, r2
 80074b8:	4643      	mov	r3, r8
 80074ba:	f8b9 2130 	ldrh.w	r2, [r9, #304]	; 0x130
 80074be:	e7bc      	b.n	800743a <HAL_PCD_IRQHandler+0x452>
 80074c0:	ffff8000 	.word	0xffff8000

080074c4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80074c4:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
 80074c8:	2a01      	cmp	r2, #1
 80074ca:	d00d      	beq.n	80074e8 <HAL_PCD_SetAddress+0x24>
{
 80074cc:	b510      	push	{r4, lr}
 80074ce:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80074d0:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 80074d2:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 80074d6:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80074da:	6800      	ldr	r0, [r0, #0]
 80074dc:	f001 fbb2 	bl	8008c44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80074e0:	2000      	movs	r0, #0
 80074e2:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 80074e6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80074e8:	2002      	movs	r0, #2
}
 80074ea:	4770      	bx	lr

080074ec <HAL_PCD_EP_Open>:
{
 80074ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ee:	f001 0507 	and.w	r5, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 80074f2:	0609      	lsls	r1, r1, #24
 80074f4:	ea4f 1445 	mov.w	r4, r5, lsl #5
 80074f8:	d41f      	bmi.n	800753a <HAL_PCD_EP_Open+0x4e>
    ep->is_in = 0U;
 80074fa:	2700      	movs	r7, #0
 80074fc:	1906      	adds	r6, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074fe:	f504 7194 	add.w	r1, r4, #296	; 0x128
    ep->is_in = 0U;
 8007502:	f886 7129 	strb.w	r7, [r6, #297]	; 0x129
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007506:	4401      	add	r1, r0
  if (ep->is_in != 0U)
 8007508:	784c      	ldrb	r4, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800750a:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 800750c:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 800750e:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8007510:	b104      	cbz	r4, 8007514 <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 8007512:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8007514:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8007516:	bf04      	itt	eq
 8007518:	2300      	moveq	r3, #0
 800751a:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800751c:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8007520:	2b01      	cmp	r3, #1
 8007522:	d012      	beq.n	800754a <HAL_PCD_EP_Open+0x5e>
 8007524:	2301      	movs	r3, #1
 8007526:	4604      	mov	r4, r0
 8007528:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800752c:	6800      	ldr	r0, [r0, #0]
 800752e:	f000 ff8d 	bl	800844c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007532:	2000      	movs	r0, #0
 8007534:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 8007538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->is_in = 1U;
 800753a:	2701      	movs	r7, #1
 800753c:	1906      	adds	r6, r0, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800753e:	f104 0128 	add.w	r1, r4, #40	; 0x28
    ep->is_in = 1U;
 8007542:	f886 7029 	strb.w	r7, [r6, #41]	; 0x29
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007546:	4401      	add	r1, r0
 8007548:	e7de      	b.n	8007508 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 800754a:	2002      	movs	r0, #2
}
 800754c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800754e:	bf00      	nop

08007550 <HAL_PCD_EP_Close>:
{
 8007550:	f001 0207 	and.w	r2, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 8007554:	0609      	lsls	r1, r1, #24
{
 8007556:	b510      	push	{r4, lr}
 8007558:	ea4f 1342 	mov.w	r3, r2, lsl #5
  if ((ep_addr & 0x80U) == 0x80U)
 800755c:	d416      	bmi.n	800758c <HAL_PCD_EP_Close+0x3c>
    ep->is_in = 0U;
 800755e:	2400      	movs	r4, #0
 8007560:	18c1      	adds	r1, r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007562:	f503 7394 	add.w	r3, r3, #296	; 0x128
    ep->is_in = 0U;
 8007566:	f881 4129 	strb.w	r4, [r1, #297]	; 0x129
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800756a:	18c1      	adds	r1, r0, r3
  ep->num   = ep_addr & EP_ADDR_MSK;
 800756c:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800756e:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8007572:	2b01      	cmp	r3, #1
 8007574:	d015      	beq.n	80075a2 <HAL_PCD_EP_Close+0x52>
 8007576:	2301      	movs	r3, #1
 8007578:	4604      	mov	r4, r0
 800757a:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800757e:	6800      	ldr	r0, [r0, #0]
 8007580:	f001 f8ec 	bl	800875c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007584:	2000      	movs	r0, #0
 8007586:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 800758a:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 800758c:	2401      	movs	r4, #1
 800758e:	18c1      	adds	r1, r0, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007590:	3328      	adds	r3, #40	; 0x28
    ep->is_in = 1U;
 8007592:	f881 4029 	strb.w	r4, [r1, #41]	; 0x29
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007596:	18c1      	adds	r1, r0, r3
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007598:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800759a:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d1e9      	bne.n	8007576 <HAL_PCD_EP_Close+0x26>
 80075a2:	2002      	movs	r0, #2
}
 80075a4:	bd10      	pop	{r4, pc}
 80075a6:	bf00      	nop

080075a8 <HAL_PCD_EP_Receive>:
{
 80075a8:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_count = 0U;
 80075aa:	2600      	movs	r6, #0
 80075ac:	f001 0107 	and.w	r1, r1, #7
 80075b0:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 80075b2:	1944      	adds	r4, r0, r5
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80075b4:	f505 7594 	add.w	r5, r5, #296	; 0x128
  ep->num = ep_addr & EP_ADDR_MSK;
 80075b8:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep->xfer_buff = pBuf;
 80075bc:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80075c0:	1941      	adds	r1, r0, r5
  ep->xfer_len = len;
 80075c2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80075c6:	6800      	ldr	r0, [r0, #0]
  ep->xfer_count = 0U;
 80075c8:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 80075cc:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80075d0:	f001 f99a 	bl	8008908 <USB_EPStartXfer>
}
 80075d4:	4630      	mov	r0, r6
 80075d6:	bd70      	pop	{r4, r5, r6, pc}

080075d8 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80075d8:	f001 0107 	and.w	r1, r1, #7
 80075dc:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 80075e0:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop

080075e8 <HAL_PCD_EP_Transmit>:
{
 80075e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ep->xfer_count = 0U;
 80075ea:	2600      	movs	r6, #0
  ep->is_in = 1U;
 80075ec:	2701      	movs	r7, #1
 80075ee:	f001 0107 	and.w	r1, r1, #7
 80075f2:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 80075f4:	1944      	adds	r4, r0, r5
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075f6:	3528      	adds	r5, #40	; 0x28
  ep->num = ep_addr & EP_ADDR_MSK;
 80075f8:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep->xfer_len = len;
 80075fc:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007600:	1941      	adds	r1, r0, r5
 8007602:	6800      	ldr	r0, [r0, #0]
  ep->is_in = 1U;
 8007604:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
  ep->xfer_count = 0U;
 8007608:	6466      	str	r6, [r4, #68]	; 0x44
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800760a:	f001 f97d 	bl	8008908 <USB_EPStartXfer>
}
 800760e:	4630      	mov	r0, r6
 8007610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007612:	bf00      	nop

08007614 <HAL_PCD_EP_SetStall>:
{
 8007614:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007616:	6843      	ldr	r3, [r0, #4]
 8007618:	f001 0507 	and.w	r5, r1, #7
 800761c:	429d      	cmp	r5, r3
 800761e:	d81b      	bhi.n	8007658 <HAL_PCD_EP_SetStall+0x44>
  if ((0x80U & ep_addr) == 0x80U)
 8007620:	060b      	lsls	r3, r1, #24
 8007622:	d41b      	bmi.n	800765c <HAL_PCD_EP_SetStall+0x48>
    ep->is_in = 0U;
 8007624:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8007626:	0149      	lsls	r1, r1, #5
    ep->is_in = 0U;
 8007628:	1843      	adds	r3, r0, r1
 800762a:	f883 4129 	strb.w	r4, [r3, #297]	; 0x129
  ep->is_stall = 1U;
 800762e:	2301      	movs	r3, #1
    ep = &hpcd->OUT_ep[ep_addr];
 8007630:	f501 7294 	add.w	r2, r1, #296	; 0x128
 8007634:	1881      	adds	r1, r0, r2
  ep->num = ep_addr & EP_ADDR_MSK;
 8007636:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8007638:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800763a:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
 800763e:	429a      	cmp	r2, r3
 8007640:	d01b      	beq.n	800767a <HAL_PCD_EP_SetStall+0x66>
 8007642:	4604      	mov	r4, r0
 8007644:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007648:	6800      	ldr	r0, [r0, #0]
 800764a:	f001 fa85 	bl	8008b58 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800764e:	b1b5      	cbz	r5, 800767e <HAL_PCD_EP_SetStall+0x6a>
  __HAL_UNLOCK(hpcd);
 8007650:	2000      	movs	r0, #0
 8007652:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 8007656:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007658:	2001      	movs	r0, #1
}
 800765a:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 800765c:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800765e:	016b      	lsls	r3, r5, #5
 8007660:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 8007664:	4403      	add	r3, r0
 8007666:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 800766a:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800766c:	4401      	add	r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 800766e:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8007670:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8007672:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
 8007676:	429a      	cmp	r2, r3
 8007678:	d1e3      	bne.n	8007642 <HAL_PCD_EP_SetStall+0x2e>
 800767a:	2002      	movs	r0, #2
}
 800767c:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800767e:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8007682:	6820      	ldr	r0, [r4, #0]
 8007684:	f001 faec 	bl	8008c60 <USB_EP0_OutStart>
 8007688:	e7e2      	b.n	8007650 <HAL_PCD_EP_SetStall+0x3c>
 800768a:	bf00      	nop

0800768c <HAL_PCD_EP_ClrStall>:
{
 800768c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800768e:	6843      	ldr	r3, [r0, #4]
 8007690:	f001 020f 	and.w	r2, r1, #15
 8007694:	429a      	cmp	r2, r3
 8007696:	d81e      	bhi.n	80076d6 <HAL_PCD_EP_ClrStall+0x4a>
 8007698:	f001 0207 	and.w	r2, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 800769c:	0609      	lsls	r1, r1, #24
 800769e:	ea4f 1342 	mov.w	r3, r2, lsl #5
 80076a2:	d41a      	bmi.n	80076da <HAL_PCD_EP_ClrStall+0x4e>
    ep->is_in = 0U;
 80076a4:	2500      	movs	r5, #0
 80076a6:	18c4      	adds	r4, r0, r3
 80076a8:	f884 5129 	strb.w	r5, [r4, #297]	; 0x129
  ep->is_stall = 0U;
 80076ac:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80076ae:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80076b2:	4401      	add	r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 80076b4:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 80076b6:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80076b8:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d01a      	beq.n	80076f6 <HAL_PCD_EP_ClrStall+0x6a>
 80076c0:	2301      	movs	r3, #1
 80076c2:	4604      	mov	r4, r0
 80076c4:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80076c8:	6800      	ldr	r0, [r0, #0]
 80076ca:	f001 fa67 	bl	8008b9c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80076ce:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
  return HAL_OK;
 80076d2:	4628      	mov	r0, r5
}
 80076d4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80076d6:	2001      	movs	r0, #1
}
 80076d8:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 80076da:	2501      	movs	r5, #1
 80076dc:	18c4      	adds	r4, r0, r3
 80076de:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
  ep->is_stall = 0U;
 80076e2:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076e4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80076e8:	4401      	add	r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 80076ea:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 80076ec:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80076ee:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d1e4      	bne.n	80076c0 <HAL_PCD_EP_ClrStall+0x34>
 80076f6:	2002      	movs	r0, #2
}
 80076f8:	bd38      	pop	{r3, r4, r5, pc}
 80076fa:	bf00      	nop

080076fc <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80076fc:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007700:	d00d      	beq.n	800771e <HAL_PCDEx_PMAConfig+0x22>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007702:	f001 0107 	and.w	r1, r1, #7
 8007706:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800770a:	3028      	adds	r0, #40	; 0x28
 800770c:	b299      	uxth	r1, r3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800770e:	b16a      	cbz	r2, 800772c <HAL_PCDEx_PMAConfig+0x30>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007710:	2201      	movs	r2, #1
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007712:	0c1b      	lsrs	r3, r3, #16
 8007714:	8143      	strh	r3, [r0, #10]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007716:	8101      	strh	r1, [r0, #8]
 8007718:	7302      	strb	r2, [r0, #12]
  }

  return HAL_OK;
}
 800771a:	2000      	movs	r0, #0
 800771c:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 800771e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8007722:	f500 7094 	add.w	r0, r0, #296	; 0x128
 8007726:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8007728:	2a00      	cmp	r2, #0
 800772a:	d1f1      	bne.n	8007710 <HAL_PCDEx_PMAConfig+0x14>
    ep->pmaadress = (uint16_t)pmaadress;
 800772c:	80c1      	strh	r1, [r0, #6]
 800772e:	7302      	strb	r2, [r0, #12]
}
 8007730:	2000      	movs	r0, #0
 8007732:	4770      	bx	lr

08007734 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007734:	2800      	cmp	r0, #0
 8007736:	f000 8155 	beq.w	80079e4 <HAL_RCC_OscConfig+0x2b0>
{
 800773a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800773e:	6803      	ldr	r3, [r0, #0]
{
 8007740:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007742:	07dd      	lsls	r5, r3, #31
 8007744:	4604      	mov	r4, r0
 8007746:	d535      	bpl.n	80077b4 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007748:	49a8      	ldr	r1, [pc, #672]	; (80079ec <HAL_RCC_OscConfig+0x2b8>)
 800774a:	684a      	ldr	r2, [r1, #4]
 800774c:	f002 020c 	and.w	r2, r2, #12
 8007750:	2a04      	cmp	r2, #4
 8007752:	f000 8105 	beq.w	8007960 <HAL_RCC_OscConfig+0x22c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007756:	684a      	ldr	r2, [r1, #4]
 8007758:	f002 020c 	and.w	r2, r2, #12
 800775c:	2a08      	cmp	r2, #8
 800775e:	f000 80fb 	beq.w	8007958 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007762:	6863      	ldr	r3, [r4, #4]
 8007764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007768:	d010      	beq.n	800778c <HAL_RCC_OscConfig+0x58>
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 8120 	beq.w	80079b0 <HAL_RCC_OscConfig+0x27c>
 8007770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007774:	f000 8178 	beq.w	8007a68 <HAL_RCC_OscConfig+0x334>
 8007778:	4b9c      	ldr	r3, [pc, #624]	; (80079ec <HAL_RCC_OscConfig+0x2b8>)
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007780:	601a      	str	r2, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	e004      	b.n	8007796 <HAL_RCC_OscConfig+0x62>
 800778c:	4a97      	ldr	r2, [pc, #604]	; (80079ec <HAL_RCC_OscConfig+0x2b8>)
 800778e:	6813      	ldr	r3, [r2, #0]
 8007790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007794:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007796:	f7fe fb5d 	bl	8005e54 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800779a:	4d94      	ldr	r5, [pc, #592]	; (80079ec <HAL_RCC_OscConfig+0x2b8>)
        tickstart = HAL_GetTick();
 800779c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800779e:	e005      	b.n	80077ac <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077a0:	f7fe fb58 	bl	8005e54 <HAL_GetTick>
 80077a4:	1b80      	subs	r0, r0, r6
 80077a6:	2864      	cmp	r0, #100	; 0x64
 80077a8:	f200 80f5 	bhi.w	8007996 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077ac:	682b      	ldr	r3, [r5, #0]
 80077ae:	039a      	lsls	r2, r3, #14
 80077b0:	d5f6      	bpl.n	80077a0 <HAL_RCC_OscConfig+0x6c>
 80077b2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077b4:	079f      	lsls	r7, r3, #30
 80077b6:	d44d      	bmi.n	8007854 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077b8:	071a      	lsls	r2, r3, #28
 80077ba:	d522      	bpl.n	8007802 <HAL_RCC_OscConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80077bc:	69a3      	ldr	r3, [r4, #24]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f000 80ba 	beq.w	8007938 <HAL_RCC_OscConfig+0x204>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077c4:	2201      	movs	r2, #1
 80077c6:	4b8a      	ldr	r3, [pc, #552]	; (80079f0 <HAL_RCC_OscConfig+0x2bc>)

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077c8:	4d88      	ldr	r5, [pc, #544]	; (80079ec <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_ENABLE();
 80077ca:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80077cc:	f7fe fb42 	bl	8005e54 <HAL_GetTick>
 80077d0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077d2:	e005      	b.n	80077e0 <HAL_RCC_OscConfig+0xac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077d4:	f7fe fb3e 	bl	8005e54 <HAL_GetTick>
 80077d8:	1b80      	subs	r0, r0, r6
 80077da:	2802      	cmp	r0, #2
 80077dc:	f200 80db 	bhi.w	8007996 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80077e2:	079b      	lsls	r3, r3, #30
 80077e4:	d5f6      	bpl.n	80077d4 <HAL_RCC_OscConfig+0xa0>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80077e6:	4b83      	ldr	r3, [pc, #524]	; (80079f4 <HAL_RCC_OscConfig+0x2c0>)
 80077e8:	4a83      	ldr	r2, [pc, #524]	; (80079f8 <HAL_RCC_OscConfig+0x2c4>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	fba2 2303 	umull	r2, r3, r2, r3
 80077f0:	0a5b      	lsrs	r3, r3, #9
 80077f2:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80077f4:	bf00      	nop
  }
  while (Delay --);
 80077f6:	9b01      	ldr	r3, [sp, #4]
 80077f8:	1e5a      	subs	r2, r3, #1
 80077fa:	9201      	str	r2, [sp, #4]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1f9      	bne.n	80077f4 <HAL_RCC_OscConfig+0xc0>
 8007800:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007802:	075d      	lsls	r5, r3, #29
 8007804:	d569      	bpl.n	80078da <HAL_RCC_OscConfig+0x1a6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007806:	4b79      	ldr	r3, [pc, #484]	; (80079ec <HAL_RCC_OscConfig+0x2b8>)
 8007808:	69da      	ldr	r2, [r3, #28]
 800780a:	00d0      	lsls	r0, r2, #3
 800780c:	f100 80ec 	bmi.w	80079e8 <HAL_RCC_OscConfig+0x2b4>
      pwrclkchanged = SET;
 8007810:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8007812:	69da      	ldr	r2, [r3, #28]
 8007814:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007818:	61da      	str	r2, [r3, #28]
 800781a:	69db      	ldr	r3, [r3, #28]
 800781c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007824:	4b75      	ldr	r3, [pc, #468]	; (80079fc <HAL_RCC_OscConfig+0x2c8>)
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	05d1      	lsls	r1, r2, #23
 800782a:	f140 80a3 	bpl.w	8007974 <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800782e:	68e3      	ldr	r3, [r4, #12]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d037      	beq.n	80078a4 <HAL_RCC_OscConfig+0x170>
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 80e7 	beq.w	8007a08 <HAL_RCC_OscConfig+0x2d4>
 800783a:	2b05      	cmp	r3, #5
 800783c:	4b6b      	ldr	r3, [pc, #428]	; (80079ec <HAL_RCC_OscConfig+0x2b8>)
 800783e:	6a1a      	ldr	r2, [r3, #32]
 8007840:	f000 811f 	beq.w	8007a82 <HAL_RCC_OscConfig+0x34e>
 8007844:	f022 0201 	bic.w	r2, r2, #1
 8007848:	621a      	str	r2, [r3, #32]
 800784a:	6a1a      	ldr	r2, [r3, #32]
 800784c:	f022 0204 	bic.w	r2, r2, #4
 8007850:	621a      	str	r2, [r3, #32]
 8007852:	e02c      	b.n	80078ae <HAL_RCC_OscConfig+0x17a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007854:	4a65      	ldr	r2, [pc, #404]	; (80079ec <HAL_RCC_OscConfig+0x2b8>)
 8007856:	6851      	ldr	r1, [r2, #4]
 8007858:	f011 0f0c 	tst.w	r1, #12
 800785c:	d061      	beq.n	8007922 <HAL_RCC_OscConfig+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800785e:	6851      	ldr	r1, [r2, #4]
 8007860:	f001 010c 	and.w	r1, r1, #12
 8007864:	2908      	cmp	r1, #8
 8007866:	d059      	beq.n	800791c <HAL_RCC_OscConfig+0x1e8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007868:	6923      	ldr	r3, [r4, #16]
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 80eb 	beq.w	8007a46 <HAL_RCC_OscConfig+0x312>
        __HAL_RCC_HSI_ENABLE();
 8007870:	2201      	movs	r2, #1
 8007872:	4b63      	ldr	r3, [pc, #396]	; (8007a00 <HAL_RCC_OscConfig+0x2cc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007874:	4d5d      	ldr	r5, [pc, #372]	; (80079ec <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_ENABLE();
 8007876:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007878:	f7fe faec 	bl	8005e54 <HAL_GetTick>
 800787c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800787e:	e005      	b.n	800788c <HAL_RCC_OscConfig+0x158>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007880:	f7fe fae8 	bl	8005e54 <HAL_GetTick>
 8007884:	1b80      	subs	r0, r0, r6
 8007886:	2802      	cmp	r0, #2
 8007888:	f200 8085 	bhi.w	8007996 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800788c:	682b      	ldr	r3, [r5, #0]
 800788e:	0798      	lsls	r0, r3, #30
 8007890:	d5f6      	bpl.n	8007880 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007892:	682b      	ldr	r3, [r5, #0]
 8007894:	6962      	ldr	r2, [r4, #20]
 8007896:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800789a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800789e:	602b      	str	r3, [r5, #0]
 80078a0:	6823      	ldr	r3, [r4, #0]
 80078a2:	e789      	b.n	80077b8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078a4:	4a51      	ldr	r2, [pc, #324]	; (80079ec <HAL_RCC_OscConfig+0x2b8>)
 80078a6:	6a13      	ldr	r3, [r2, #32]
 80078a8:	f043 0301 	orr.w	r3, r3, #1
 80078ac:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80078ae:	f7fe fad1 	bl	8005e54 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078b2:	4e4e      	ldr	r6, [pc, #312]	; (80079ec <HAL_RCC_OscConfig+0x2b8>)
      tickstart = HAL_GetTick();
 80078b4:	4680      	mov	r8, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078b6:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078ba:	e005      	b.n	80078c8 <HAL_RCC_OscConfig+0x194>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078bc:	f7fe faca 	bl	8005e54 <HAL_GetTick>
 80078c0:	eba0 0008 	sub.w	r0, r0, r8
 80078c4:	42b8      	cmp	r0, r7
 80078c6:	d866      	bhi.n	8007996 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078c8:	6a33      	ldr	r3, [r6, #32]
 80078ca:	079b      	lsls	r3, r3, #30
 80078cc:	d5f6      	bpl.n	80078bc <HAL_RCC_OscConfig+0x188>
    if (pwrclkchanged == SET)
 80078ce:	b125      	cbz	r5, 80078da <HAL_RCC_OscConfig+0x1a6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80078d0:	4a46      	ldr	r2, [pc, #280]	; (80079ec <HAL_RCC_OscConfig+0x2b8>)
 80078d2:	69d3      	ldr	r3, [r2, #28]
 80078d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078d8:	61d3      	str	r3, [r2, #28]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078da:	69e0      	ldr	r0, [r4, #28]
 80078dc:	b1d0      	cbz	r0, 8007914 <HAL_RCC_OscConfig+0x1e0>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078de:	4d43      	ldr	r5, [pc, #268]	; (80079ec <HAL_RCC_OscConfig+0x2b8>)
 80078e0:	686a      	ldr	r2, [r5, #4]
 80078e2:	f002 020c 	and.w	r2, r2, #12
 80078e6:	2a08      	cmp	r2, #8
 80078e8:	f000 80d3 	beq.w	8007a92 <HAL_RCC_OscConfig+0x35e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078ec:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80078ee:	f04f 0100 	mov.w	r1, #0
 80078f2:	4a44      	ldr	r2, [pc, #272]	; (8007a04 <HAL_RCC_OscConfig+0x2d0>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078f4:	f000 80de 	beq.w	8007ab4 <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_PLL_DISABLE();
 80078f8:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80078fa:	f7fe faab 	bl	8005e54 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80078fe:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8007900:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007902:	e004      	b.n	800790e <HAL_RCC_OscConfig+0x1da>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007904:	f7fe faa6 	bl	8005e54 <HAL_GetTick>
 8007908:	1b40      	subs	r0, r0, r5
 800790a:	2802      	cmp	r0, #2
 800790c:	d843      	bhi.n	8007996 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800790e:	6823      	ldr	r3, [r4, #0]
 8007910:	019b      	lsls	r3, r3, #6
 8007912:	d4f7      	bmi.n	8007904 <HAL_RCC_OscConfig+0x1d0>
  return HAL_OK;
 8007914:	2000      	movs	r0, #0
}
 8007916:	b002      	add	sp, #8
 8007918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800791c:	6852      	ldr	r2, [r2, #4]
 800791e:	03d6      	lsls	r6, r2, #15
 8007920:	d4a2      	bmi.n	8007868 <HAL_RCC_OscConfig+0x134>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007922:	4a32      	ldr	r2, [pc, #200]	; (80079ec <HAL_RCC_OscConfig+0x2b8>)
 8007924:	6812      	ldr	r2, [r2, #0]
 8007926:	0795      	lsls	r5, r2, #30
 8007928:	d539      	bpl.n	800799e <HAL_RCC_OscConfig+0x26a>
 800792a:	6922      	ldr	r2, [r4, #16]
 800792c:	2a01      	cmp	r2, #1
 800792e:	d036      	beq.n	800799e <HAL_RCC_OscConfig+0x26a>
        return HAL_ERROR;
 8007930:	2001      	movs	r0, #1
}
 8007932:	b002      	add	sp, #8
 8007934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8007938:	4a2d      	ldr	r2, [pc, #180]	; (80079f0 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800793a:	4d2c      	ldr	r5, [pc, #176]	; (80079ec <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_DISABLE();
 800793c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800793e:	f7fe fa89 	bl	8005e54 <HAL_GetTick>
 8007942:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007944:	e004      	b.n	8007950 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007946:	f7fe fa85 	bl	8005e54 <HAL_GetTick>
 800794a:	1b80      	subs	r0, r0, r6
 800794c:	2802      	cmp	r0, #2
 800794e:	d822      	bhi.n	8007996 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007950:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007952:	079f      	lsls	r7, r3, #30
 8007954:	d4f7      	bmi.n	8007946 <HAL_RCC_OscConfig+0x212>
 8007956:	e753      	b.n	8007800 <HAL_RCC_OscConfig+0xcc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007958:	684a      	ldr	r2, [r1, #4]
 800795a:	03d0      	lsls	r0, r2, #15
 800795c:	f57f af01 	bpl.w	8007762 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007960:	4a22      	ldr	r2, [pc, #136]	; (80079ec <HAL_RCC_OscConfig+0x2b8>)
 8007962:	6812      	ldr	r2, [r2, #0]
 8007964:	0391      	lsls	r1, r2, #14
 8007966:	f57f af25 	bpl.w	80077b4 <HAL_RCC_OscConfig+0x80>
 800796a:	6862      	ldr	r2, [r4, #4]
 800796c:	2a00      	cmp	r2, #0
 800796e:	f47f af21 	bne.w	80077b4 <HAL_RCC_OscConfig+0x80>
 8007972:	e7dd      	b.n	8007930 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007974:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007976:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007978:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800797c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800797e:	f7fe fa69 	bl	8005e54 <HAL_GetTick>
 8007982:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007984:	6833      	ldr	r3, [r6, #0]
 8007986:	05da      	lsls	r2, r3, #23
 8007988:	f53f af51 	bmi.w	800782e <HAL_RCC_OscConfig+0xfa>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800798c:	f7fe fa62 	bl	8005e54 <HAL_GetTick>
 8007990:	1bc0      	subs	r0, r0, r7
 8007992:	2864      	cmp	r0, #100	; 0x64
 8007994:	d9f6      	bls.n	8007984 <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 8007996:	2003      	movs	r0, #3
}
 8007998:	b002      	add	sp, #8
 800799a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800799e:	4913      	ldr	r1, [pc, #76]	; (80079ec <HAL_RCC_OscConfig+0x2b8>)
 80079a0:	6960      	ldr	r0, [r4, #20]
 80079a2:	680a      	ldr	r2, [r1, #0]
 80079a4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80079a8:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80079ac:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079ae:	e703      	b.n	80077b8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80079b4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80079b8:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079ba:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80079c0:	601a      	str	r2, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80079c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80079ca:	f7fe fa43 	bl	8005e54 <HAL_GetTick>
 80079ce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079d0:	e004      	b.n	80079dc <HAL_RCC_OscConfig+0x2a8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079d2:	f7fe fa3f 	bl	8005e54 <HAL_GetTick>
 80079d6:	1b80      	subs	r0, r0, r6
 80079d8:	2864      	cmp	r0, #100	; 0x64
 80079da:	d8dc      	bhi.n	8007996 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079dc:	682b      	ldr	r3, [r5, #0]
 80079de:	039b      	lsls	r3, r3, #14
 80079e0:	d4f7      	bmi.n	80079d2 <HAL_RCC_OscConfig+0x29e>
 80079e2:	e6e6      	b.n	80077b2 <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 80079e4:	2001      	movs	r0, #1
}
 80079e6:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 80079e8:	2500      	movs	r5, #0
 80079ea:	e71b      	b.n	8007824 <HAL_RCC_OscConfig+0xf0>
 80079ec:	40021000 	.word	0x40021000
 80079f0:	42420480 	.word	0x42420480
 80079f4:	20000038 	.word	0x20000038
 80079f8:	10624dd3 	.word	0x10624dd3
 80079fc:	40007000 	.word	0x40007000
 8007a00:	42420000 	.word	0x42420000
 8007a04:	42420060 	.word	0x42420060
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a0c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8007a10:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a12:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a14:	f022 0201 	bic.w	r2, r2, #1
 8007a18:	621a      	str	r2, [r3, #32]
 8007a1a:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a1c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a20:	f022 0204 	bic.w	r2, r2, #4
 8007a24:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 8007a26:	f7fe fa15 	bl	8005e54 <HAL_GetTick>
 8007a2a:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a2c:	e004      	b.n	8007a38 <HAL_RCC_OscConfig+0x304>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a2e:	f7fe fa11 	bl	8005e54 <HAL_GetTick>
 8007a32:	1bc0      	subs	r0, r0, r7
 8007a34:	4540      	cmp	r0, r8
 8007a36:	d8ae      	bhi.n	8007996 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a38:	6a33      	ldr	r3, [r6, #32]
 8007a3a:	0798      	lsls	r0, r3, #30
 8007a3c:	d4f7      	bmi.n	8007a2e <HAL_RCC_OscConfig+0x2fa>
    if (pwrclkchanged == SET)
 8007a3e:	2d00      	cmp	r5, #0
 8007a40:	f43f af4b 	beq.w	80078da <HAL_RCC_OscConfig+0x1a6>
 8007a44:	e744      	b.n	80078d0 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_DISABLE();
 8007a46:	4a34      	ldr	r2, [pc, #208]	; (8007b18 <HAL_RCC_OscConfig+0x3e4>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a48:	4d34      	ldr	r5, [pc, #208]	; (8007b1c <HAL_RCC_OscConfig+0x3e8>)
        __HAL_RCC_HSI_DISABLE();
 8007a4a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007a4c:	f7fe fa02 	bl	8005e54 <HAL_GetTick>
 8007a50:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a52:	e004      	b.n	8007a5e <HAL_RCC_OscConfig+0x32a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a54:	f7fe f9fe 	bl	8005e54 <HAL_GetTick>
 8007a58:	1b80      	subs	r0, r0, r6
 8007a5a:	2802      	cmp	r0, #2
 8007a5c:	d89b      	bhi.n	8007996 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a5e:	682b      	ldr	r3, [r5, #0]
 8007a60:	0799      	lsls	r1, r3, #30
 8007a62:	d4f7      	bmi.n	8007a54 <HAL_RCC_OscConfig+0x320>
 8007a64:	6823      	ldr	r3, [r4, #0]
 8007a66:	e6a7      	b.n	80077b8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a6c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007a76:	601a      	str	r2, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007a7e:	601a      	str	r2, [r3, #0]
 8007a80:	e689      	b.n	8007796 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a82:	f042 0204 	orr.w	r2, r2, #4
 8007a86:	621a      	str	r2, [r3, #32]
 8007a88:	6a1a      	ldr	r2, [r3, #32]
 8007a8a:	f042 0201 	orr.w	r2, r2, #1
 8007a8e:	621a      	str	r2, [r3, #32]
 8007a90:	e70d      	b.n	80078ae <HAL_RCC_OscConfig+0x17a>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a92:	2801      	cmp	r0, #1
 8007a94:	f43f af4d 	beq.w	8007932 <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 8007a98:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a9a:	6a22      	ldr	r2, [r4, #32]
 8007a9c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8007aa0:	4291      	cmp	r1, r2
 8007aa2:	f47f af45 	bne.w	8007930 <HAL_RCC_OscConfig+0x1fc>
 8007aa6:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007aa8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 8007aac:	1a18      	subs	r0, r3, r0
 8007aae:	bf18      	it	ne
 8007ab0:	2001      	movne	r0, #1
 8007ab2:	e73e      	b.n	8007932 <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_PLL_DISABLE();
 8007ab4:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8007ab6:	f7fe f9cd 	bl	8005e54 <HAL_GetTick>
 8007aba:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007abc:	e005      	b.n	8007aca <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007abe:	f7fe f9c9 	bl	8005e54 <HAL_GetTick>
 8007ac2:	1b80      	subs	r0, r0, r6
 8007ac4:	2802      	cmp	r0, #2
 8007ac6:	f63f af66 	bhi.w	8007996 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007aca:	682b      	ldr	r3, [r5, #0]
 8007acc:	0199      	lsls	r1, r3, #6
 8007ace:	d4f6      	bmi.n	8007abe <HAL_RCC_OscConfig+0x38a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007ad0:	6a22      	ldr	r2, [r4, #32]
 8007ad2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007ad6:	d105      	bne.n	8007ae4 <HAL_RCC_OscConfig+0x3b0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007ad8:	686b      	ldr	r3, [r5, #4]
 8007ada:	68a1      	ldr	r1, [r4, #8]
 8007adc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007ae0:	430b      	orrs	r3, r1
 8007ae2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8007ae4:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ae6:	4b0d      	ldr	r3, [pc, #52]	; (8007b1c <HAL_RCC_OscConfig+0x3e8>)
 8007ae8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007aea:	6859      	ldr	r1, [r3, #4]
 8007aec:	4302      	orrs	r2, r0
 8007aee:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8007af2:	480b      	ldr	r0, [pc, #44]	; (8007b20 <HAL_RCC_OscConfig+0x3ec>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007af4:	430a      	orrs	r2, r1
 8007af6:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8007af8:	6005      	str	r5, [r0, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007afa:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 8007afc:	f7fe f9aa 	bl	8005e54 <HAL_GetTick>
 8007b00:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007b02:	e005      	b.n	8007b10 <HAL_RCC_OscConfig+0x3dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b04:	f7fe f9a6 	bl	8005e54 <HAL_GetTick>
 8007b08:	1b40      	subs	r0, r0, r5
 8007b0a:	2802      	cmp	r0, #2
 8007b0c:	f63f af43 	bhi.w	8007996 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007b10:	6823      	ldr	r3, [r4, #0]
 8007b12:	019a      	lsls	r2, r3, #6
 8007b14:	d5f6      	bpl.n	8007b04 <HAL_RCC_OscConfig+0x3d0>
 8007b16:	e6fd      	b.n	8007914 <HAL_RCC_OscConfig+0x1e0>
 8007b18:	42420000 	.word	0x42420000
 8007b1c:	40021000 	.word	0x40021000
 8007b20:	42420060 	.word	0x42420060

08007b24 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8007b24:	b178      	cbz	r0, 8007b46 <HAL_RCC_ClockConfig+0x22>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b26:	4a5d      	ldr	r2, [pc, #372]	; (8007c9c <HAL_RCC_ClockConfig+0x178>)
 8007b28:	6813      	ldr	r3, [r2, #0]
 8007b2a:	f003 0307 	and.w	r3, r3, #7
 8007b2e:	428b      	cmp	r3, r1
 8007b30:	d20b      	bcs.n	8007b4a <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b32:	6813      	ldr	r3, [r2, #0]
 8007b34:	f023 0307 	bic.w	r3, r3, #7
 8007b38:	430b      	orrs	r3, r1
 8007b3a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b3c:	6813      	ldr	r3, [r2, #0]
 8007b3e:	f003 0307 	and.w	r3, r3, #7
 8007b42:	428b      	cmp	r3, r1
 8007b44:	d001      	beq.n	8007b4a <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8007b46:	2001      	movs	r0, #1
}
 8007b48:	4770      	bx	lr
{
 8007b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b4e:	6803      	ldr	r3, [r0, #0]
{
 8007b50:	b086      	sub	sp, #24
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b52:	079d      	lsls	r5, r3, #30
 8007b54:	d514      	bpl.n	8007b80 <HAL_RCC_ClockConfig+0x5c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b56:	075c      	lsls	r4, r3, #29
 8007b58:	d504      	bpl.n	8007b64 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b5a:	4c51      	ldr	r4, [pc, #324]	; (8007ca0 <HAL_RCC_ClockConfig+0x17c>)
 8007b5c:	6862      	ldr	r2, [r4, #4]
 8007b5e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8007b62:	6062      	str	r2, [r4, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b64:	071a      	lsls	r2, r3, #28
 8007b66:	d504      	bpl.n	8007b72 <HAL_RCC_ClockConfig+0x4e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b68:	4c4d      	ldr	r4, [pc, #308]	; (8007ca0 <HAL_RCC_ClockConfig+0x17c>)
 8007b6a:	6862      	ldr	r2, [r4, #4]
 8007b6c:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8007b70:	6062      	str	r2, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b72:	4c4b      	ldr	r4, [pc, #300]	; (8007ca0 <HAL_RCC_ClockConfig+0x17c>)
 8007b74:	6885      	ldr	r5, [r0, #8]
 8007b76:	6862      	ldr	r2, [r4, #4]
 8007b78:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007b7c:	432a      	orrs	r2, r5
 8007b7e:	6062      	str	r2, [r4, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b80:	07db      	lsls	r3, r3, #31
 8007b82:	4604      	mov	r4, r0
 8007b84:	460d      	mov	r5, r1
 8007b86:	d520      	bpl.n	8007bca <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b88:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b8a:	4b45      	ldr	r3, [pc, #276]	; (8007ca0 <HAL_RCC_ClockConfig+0x17c>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b8c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b8e:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b90:	d06f      	beq.n	8007c72 <HAL_RCC_ClockConfig+0x14e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b92:	2a02      	cmp	r2, #2
 8007b94:	d07e      	beq.n	8007c94 <HAL_RCC_ClockConfig+0x170>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b96:	0798      	lsls	r0, r3, #30
 8007b98:	d527      	bpl.n	8007bea <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b9a:	4e41      	ldr	r6, [pc, #260]	; (8007ca0 <HAL_RCC_ClockConfig+0x17c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b9c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ba0:	6873      	ldr	r3, [r6, #4]
 8007ba2:	f023 0303 	bic.w	r3, r3, #3
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8007baa:	f7fe f953 	bl	8005e54 <HAL_GetTick>
 8007bae:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bb0:	e004      	b.n	8007bbc <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bb2:	f7fe f94f 	bl	8005e54 <HAL_GetTick>
 8007bb6:	1bc0      	subs	r0, r0, r7
 8007bb8:	4540      	cmp	r0, r8
 8007bba:	d869      	bhi.n	8007c90 <HAL_RCC_ClockConfig+0x16c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bbc:	6873      	ldr	r3, [r6, #4]
 8007bbe:	6862      	ldr	r2, [r4, #4]
 8007bc0:	f003 030c 	and.w	r3, r3, #12
 8007bc4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007bc8:	d1f3      	bne.n	8007bb2 <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007bca:	4a34      	ldr	r2, [pc, #208]	; (8007c9c <HAL_RCC_ClockConfig+0x178>)
 8007bcc:	6813      	ldr	r3, [r2, #0]
 8007bce:	f003 0307 	and.w	r3, r3, #7
 8007bd2:	42ab      	cmp	r3, r5
 8007bd4:	d90d      	bls.n	8007bf2 <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bd6:	6813      	ldr	r3, [r2, #0]
 8007bd8:	f023 0307 	bic.w	r3, r3, #7
 8007bdc:	432b      	orrs	r3, r5
 8007bde:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007be0:	6813      	ldr	r3, [r2, #0]
 8007be2:	f003 0307 	and.w	r3, r3, #7
 8007be6:	42ab      	cmp	r3, r5
 8007be8:	d003      	beq.n	8007bf2 <HAL_RCC_ClockConfig+0xce>
    return HAL_ERROR;
 8007bea:	2001      	movs	r0, #1
}
 8007bec:	b006      	add	sp, #24
 8007bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bf2:	6823      	ldr	r3, [r4, #0]
 8007bf4:	0759      	lsls	r1, r3, #29
 8007bf6:	d506      	bpl.n	8007c06 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bf8:	4929      	ldr	r1, [pc, #164]	; (8007ca0 <HAL_RCC_ClockConfig+0x17c>)
 8007bfa:	68e0      	ldr	r0, [r4, #12]
 8007bfc:	684a      	ldr	r2, [r1, #4]
 8007bfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c02:	4302      	orrs	r2, r0
 8007c04:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c06:	071a      	lsls	r2, r3, #28
 8007c08:	d507      	bpl.n	8007c1a <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007c0a:	4a25      	ldr	r2, [pc, #148]	; (8007ca0 <HAL_RCC_ClockConfig+0x17c>)
 8007c0c:	6921      	ldr	r1, [r4, #16]
 8007c0e:	6853      	ldr	r3, [r2, #4]
 8007c10:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8007c14:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007c18:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007c1a:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007c1e:	4b21      	ldr	r3, [pc, #132]	; (8007ca4 <HAL_RCC_ClockConfig+0x180>)
 8007c20:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007c22:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007c26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007c28:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8007c2c:	491c      	ldr	r1, [pc, #112]	; (8007ca0 <HAL_RCC_ClockConfig+0x17c>)
 8007c2e:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8007c30:	f002 030c 	and.w	r3, r2, #12
 8007c34:	2b08      	cmp	r3, #8
 8007c36:	d11a      	bne.n	8007c6e <HAL_RCC_ClockConfig+0x14a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007c38:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8007c3c:	4423      	add	r3, r4
 8007c3e:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007c42:	03d3      	lsls	r3, r2, #15
 8007c44:	d418      	bmi.n	8007c78 <HAL_RCC_ClockConfig+0x154>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007c46:	4b18      	ldr	r3, [pc, #96]	; (8007ca8 <HAL_RCC_ClockConfig+0x184>)
 8007c48:	fb03 f300 	mul.w	r3, r3, r0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c4c:	4a14      	ldr	r2, [pc, #80]	; (8007ca0 <HAL_RCC_ClockConfig+0x17c>)
 8007c4e:	4817      	ldr	r0, [pc, #92]	; (8007cac <HAL_RCC_ClockConfig+0x188>)
 8007c50:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8007c52:	4917      	ldr	r1, [pc, #92]	; (8007cb0 <HAL_RCC_ClockConfig+0x18c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c54:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007c58:	5c80      	ldrb	r0, [r0, r2]
 8007c5a:	4a16      	ldr	r2, [pc, #88]	; (8007cb4 <HAL_RCC_ClockConfig+0x190>)
 8007c5c:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8007c5e:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c60:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8007c62:	f7fe f8b5 	bl	8005dd0 <HAL_InitTick>
  return HAL_OK;
 8007c66:	2000      	movs	r0, #0
}
 8007c68:	b006      	add	sp, #24
 8007c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSE_VALUE;
 8007c6e:	4b12      	ldr	r3, [pc, #72]	; (8007cb8 <HAL_RCC_ClockConfig+0x194>)
 8007c70:	e7ec      	b.n	8007c4c <HAL_RCC_ClockConfig+0x128>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c72:	039f      	lsls	r7, r3, #14
 8007c74:	d491      	bmi.n	8007b9a <HAL_RCC_ClockConfig+0x76>
 8007c76:	e7b8      	b.n	8007bea <HAL_RCC_ClockConfig+0xc6>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007c78:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007c7a:	4b0f      	ldr	r3, [pc, #60]	; (8007cb8 <HAL_RCC_ClockConfig+0x194>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007c7c:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007c80:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007c84:	4422      	add	r2, r4
 8007c86:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007c8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c8e:	e7dd      	b.n	8007c4c <HAL_RCC_ClockConfig+0x128>
        return HAL_TIMEOUT;
 8007c90:	2003      	movs	r0, #3
 8007c92:	e7ab      	b.n	8007bec <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c94:	019e      	lsls	r6, r3, #6
 8007c96:	d480      	bmi.n	8007b9a <HAL_RCC_ClockConfig+0x76>
 8007c98:	e7a7      	b.n	8007bea <HAL_RCC_ClockConfig+0xc6>
 8007c9a:	bf00      	nop
 8007c9c:	40022000 	.word	0x40022000
 8007ca0:	40021000 	.word	0x40021000
 8007ca4:	0800e368 	.word	0x0800e368
 8007ca8:	003d0900 	.word	0x003d0900
 8007cac:	0800efe8 	.word	0x0800efe8
 8007cb0:	20000040 	.word	0x20000040
 8007cb4:	20000038 	.word	0x20000038
 8007cb8:	007a1200 	.word	0x007a1200

08007cbc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007cbc:	4b04      	ldr	r3, [pc, #16]	; (8007cd0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8007cbe:	4905      	ldr	r1, [pc, #20]	; (8007cd4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8007cc0:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8007cc2:	4a05      	ldr	r2, [pc, #20]	; (8007cd8 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007cc4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007cc8:	5ccb      	ldrb	r3, [r1, r3]
 8007cca:	6810      	ldr	r0, [r2, #0]
}
 8007ccc:	40d8      	lsrs	r0, r3
 8007cce:	4770      	bx	lr
 8007cd0:	40021000 	.word	0x40021000
 8007cd4:	0800eff8 	.word	0x0800eff8
 8007cd8:	20000038 	.word	0x20000038

08007cdc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007cdc:	4b04      	ldr	r3, [pc, #16]	; (8007cf0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8007cde:	4905      	ldr	r1, [pc, #20]	; (8007cf4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8007ce0:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8007ce2:	4a05      	ldr	r2, [pc, #20]	; (8007cf8 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007ce4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007ce8:	5ccb      	ldrb	r3, [r1, r3]
 8007cea:	6810      	ldr	r0, [r2, #0]
}
 8007cec:	40d8      	lsrs	r0, r3
 8007cee:	4770      	bx	lr
 8007cf0:	40021000 	.word	0x40021000
 8007cf4:	0800eff8 	.word	0x0800eff8
 8007cf8:	20000038 	.word	0x20000038

08007cfc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d00:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007d02:	6800      	ldr	r0, [r0, #0]
{
 8007d04:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007d06:	07c5      	lsls	r5, r0, #31
 8007d08:	d52a      	bpl.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d0a:	4b3a      	ldr	r3, [pc, #232]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8007d0c:	69da      	ldr	r2, [r3, #28]
 8007d0e:	00d1      	lsls	r1, r2, #3
 8007d10:	d53d      	bpl.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d12:	4b39      	ldr	r3, [pc, #228]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus       pwrclkchanged = RESET;
 8007d14:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	05d2      	lsls	r2, r2, #23
 8007d1a:	d546      	bpl.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d1c:	4935      	ldr	r1, [pc, #212]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8007d1e:	6860      	ldr	r0, [r4, #4]
 8007d20:	6a0a      	ldr	r2, [r1, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d22:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8007d26:	d00f      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8007d28:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d00b      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d30:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d32:	2600      	movs	r6, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d34:	6a0b      	ldr	r3, [r1, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d36:	4a31      	ldr	r2, [pc, #196]	; (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d38:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d3c:	6017      	str	r7, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d3e:	6016      	str	r6, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007d40:	6208      	str	r0, [r1, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007d42:	07d8      	lsls	r0, r3, #31
 8007d44:	d445      	bmi.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8007d46:	6860      	ldr	r0, [r4, #4]
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d48:	4a2a      	ldr	r2, [pc, #168]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8007d4a:	6a13      	ldr	r3, [r2, #32]
 8007d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d50:	4303      	orrs	r3, r0
 8007d52:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007d54:	b11d      	cbz	r5, 8007d5e <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d56:	69d3      	ldr	r3, [r2, #28]
 8007d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d5c:	61d3      	str	r3, [r2, #28]
 8007d5e:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d60:	0783      	lsls	r3, r0, #30
 8007d62:	d506      	bpl.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d64:	4a23      	ldr	r2, [pc, #140]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8007d66:	68a1      	ldr	r1, [r4, #8]
 8007d68:	6853      	ldr	r3, [r2, #4]
 8007d6a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007d6e:	430b      	orrs	r3, r1
 8007d70:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d72:	f010 0010 	ands.w	r0, r0, #16
 8007d76:	d007      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007d78:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d7a:	4a1e      	ldr	r2, [pc, #120]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8007d7c:	68e1      	ldr	r1, [r4, #12]
 8007d7e:	6853      	ldr	r3, [r2, #4]
 8007d80:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007d84:	430b      	orrs	r3, r1
 8007d86:	6053      	str	r3, [r2, #4]
}
 8007d88:	b002      	add	sp, #8
 8007d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d8e:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8007d90:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007d96:	61da      	str	r2, [r3, #28]
 8007d98:	69db      	ldr	r3, [r3, #28]
 8007d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d9e:	9301      	str	r3, [sp, #4]
 8007da0:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007da2:	4b15      	ldr	r3, [pc, #84]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	05d2      	lsls	r2, r2, #23
 8007da8:	d4b8      	bmi.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007daa:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dac:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007dae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007db2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8007db4:	f7fe f84e 	bl	8005e54 <HAL_GetTick>
 8007db8:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dba:	6833      	ldr	r3, [r6, #0]
 8007dbc:	05db      	lsls	r3, r3, #23
 8007dbe:	d4ad      	bmi.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dc0:	f7fe f848 	bl	8005e54 <HAL_GetTick>
 8007dc4:	1bc0      	subs	r0, r0, r7
 8007dc6:	2864      	cmp	r0, #100	; 0x64
 8007dc8:	d9f7      	bls.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8007dca:	2003      	movs	r0, #3
}
 8007dcc:	b002      	add	sp, #8
 8007dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dd2:	460e      	mov	r6, r1
        tickstart = HAL_GetTick();
 8007dd4:	f7fe f83e 	bl	8005e54 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dd8:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8007ddc:	4680      	mov	r8, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dde:	6a33      	ldr	r3, [r6, #32]
 8007de0:	079a      	lsls	r2, r3, #30
 8007de2:	d4b0      	bmi.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007de4:	f7fe f836 	bl	8005e54 <HAL_GetTick>
 8007de8:	eba0 0008 	sub.w	r0, r0, r8
 8007dec:	42b8      	cmp	r0, r7
 8007dee:	d9f6      	bls.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007df0:	e7eb      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xce>
 8007df2:	bf00      	nop
 8007df4:	40021000 	.word	0x40021000
 8007df8:	40007000 	.word	0x40007000
 8007dfc:	42420440 	.word	0x42420440

08007e00 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e00:	2800      	cmp	r0, #0
 8007e02:	d036      	beq.n	8007e72 <HAL_TIM_Base_Init+0x72>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e04:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8007e08:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007e0a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007e0e:	4604      	mov	r4, r0
 8007e10:	b30b      	cbz	r3, 8007e56 <HAL_TIM_Base_Init+0x56>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e12:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e14:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e16:	4e20      	ldr	r6, [pc, #128]	; (8007e98 <HAL_TIM_Base_Init+0x98>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007e18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e1c:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8007e1e:	6813      	ldr	r3, [r2, #0]
 8007e20:	69a5      	ldr	r5, [r4, #24]
 8007e22:	68e0      	ldr	r0, [r4, #12]
 8007e24:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e26:	d026      	beq.n	8007e76 <HAL_TIM_Base_Init+0x76>
 8007e28:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007e2c:	d018      	beq.n	8007e60 <HAL_TIM_Base_Init+0x60>
 8007e2e:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8007e32:	42b2      	cmp	r2, r6
 8007e34:	d014      	beq.n	8007e60 <HAL_TIM_Base_Init+0x60>
 8007e36:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007e3a:	42b2      	cmp	r2, r6
 8007e3c:	d010      	beq.n	8007e60 <HAL_TIM_Base_Init+0x60>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e42:	432b      	orrs	r3, r5

  TIMx->CR1 = tmpcr1;
 8007e44:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e46:	62d0      	str	r0, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e48:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e4a:	2301      	movs	r3, #1
  return HAL_OK;
 8007e4c:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8007e4e:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 8007e50:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007e54:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8007e56:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007e5a:	f7fa fdbb 	bl	80029d4 <HAL_TIM_Base_MspInit>
 8007e5e:	e7d8      	b.n	8007e12 <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8007e60:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007e66:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e68:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e6e:	4333      	orrs	r3, r6
 8007e70:	e7e5      	b.n	8007e3e <HAL_TIM_Base_Init+0x3e>
    return HAL_ERROR;
 8007e72:	2001      	movs	r0, #1
}
 8007e74:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8007e76:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007e7c:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e7e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e84:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e8a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007e8c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e8e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007e90:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007e92:	6963      	ldr	r3, [r4, #20]
 8007e94:	6313      	str	r3, [r2, #48]	; 0x30
 8007e96:	e7d8      	b.n	8007e4a <HAL_TIM_Base_Init+0x4a>
 8007e98:	40012c00 	.word	0x40012c00

08007e9c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e9c:	6803      	ldr	r3, [r0, #0]
 8007e9e:	68da      	ldr	r2, [r3, #12]
 8007ea0:	f042 0201 	orr.w	r2, r2, #1
 8007ea4:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ea6:	689a      	ldr	r2, [r3, #8]
 8007ea8:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eac:	2a06      	cmp	r2, #6
 8007eae:	d003      	beq.n	8007eb8 <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	f042 0201 	orr.w	r2, r2, #1
 8007eb6:	601a      	str	r2, [r3, #0]
}
 8007eb8:	2000      	movs	r0, #0
 8007eba:	4770      	bx	lr

08007ebc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007ebc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d05a      	beq.n	8007f7a <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 8007ec4:	2202      	movs	r2, #2
{
 8007ec6:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8007ec8:	2501      	movs	r5, #1
  tmpsmcr = htim->Instance->SMCR;
 8007eca:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007ecc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007ed0:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8007ed2:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ed4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8007ed8:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8007edc:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 8007ede:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8007ee2:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8007ee4:	d074      	beq.n	8007fd0 <HAL_TIM_ConfigClockSource+0x114>
 8007ee6:	d94a      	bls.n	8007f7e <HAL_TIM_ConfigClockSource+0xc2>
 8007ee8:	2c60      	cmp	r4, #96	; 0x60
 8007eea:	d02d      	beq.n	8007f48 <HAL_TIM_ConfigClockSource+0x8c>
 8007eec:	d956      	bls.n	8007f9c <HAL_TIM_ConfigClockSource+0xe0>
 8007eee:	2c70      	cmp	r4, #112	; 0x70
 8007ef0:	d01a      	beq.n	8007f28 <HAL_TIM_ConfigClockSource+0x6c>
 8007ef2:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8007ef6:	d10e      	bne.n	8007f16 <HAL_TIM_ConfigClockSource+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ef8:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8007efc:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8007efe:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f00:	432a      	orrs	r2, r5
 8007f02:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f06:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f0a:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f0c:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f0e:	689a      	ldr	r2, [r3, #8]
 8007f10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f14:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	bcf0      	pop	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_READY;
 8007f1a:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8007f1c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8007f20:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  return HAL_OK;
 8007f24:	4618      	mov	r0, r3
}
 8007f26:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f28:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8007f2c:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8007f2e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f30:	432a      	orrs	r2, r5
 8007f32:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f36:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f3a:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8007f3c:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8007f3e:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f40:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8007f44:	609a      	str	r2, [r3, #8]
      break;
 8007f46:	e7e6      	b.n	8007f16 <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f48:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f4a:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f4c:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f50:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f52:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f54:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8007f56:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f58:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f60:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f64:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8007f68:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f6a:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8007f6c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f72:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8007f76:	609a      	str	r2, [r3, #8]
 8007f78:	e7cd      	b.n	8007f16 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8007f7a:	2002      	movs	r0, #2
}
 8007f7c:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8007f7e:	2c10      	cmp	r4, #16
 8007f80:	d004      	beq.n	8007f8c <HAL_TIM_ConfigClockSource+0xd0>
 8007f82:	d93d      	bls.n	8008000 <HAL_TIM_ConfigClockSource+0x144>
 8007f84:	2c20      	cmp	r4, #32
 8007f86:	d001      	beq.n	8007f8c <HAL_TIM_ConfigClockSource+0xd0>
 8007f88:	2c30      	cmp	r4, #48	; 0x30
 8007f8a:	d1c4      	bne.n	8007f16 <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 8007f8c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f8e:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f96:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 8007f98:	609c      	str	r4, [r3, #8]
 8007f9a:	e7bc      	b.n	8007f16 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8007f9c:	2c50      	cmp	r4, #80	; 0x50
 8007f9e:	d1ba      	bne.n	8007f16 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8007fa0:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fa2:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fa4:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fa6:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007faa:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fac:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fae:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fb0:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fb4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fb8:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8007fbc:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8007fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fc0:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8007fc2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fc4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fc8:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8007fcc:	609a      	str	r2, [r3, #8]
 8007fce:	e7a2      	b.n	8007f16 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8007fd0:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fd2:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fd4:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fd6:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fda:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fdc:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fde:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fe0:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fe4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fe8:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8007fec:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8007fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ff0:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8007ff2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ff4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ff8:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8007ffc:	609a      	str	r2, [r3, #8]
 8007ffe:	e78a      	b.n	8007f16 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8008000:	2c00      	cmp	r4, #0
 8008002:	d0c3      	beq.n	8007f8c <HAL_TIM_ConfigClockSource+0xd0>
 8008004:	e787      	b.n	8007f16 <HAL_TIM_ConfigClockSource+0x5a>
 8008006:	bf00      	nop

08008008 <HAL_TIM_PeriodElapsedCallback>:
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop

0800800c <HAL_TIM_OC_DelayElapsedCallback>:
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop

08008010 <HAL_TIM_IC_CaptureCallback>:
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop

08008014 <HAL_TIM_PWM_PulseFinishedCallback>:
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop

08008018 <HAL_TIM_TriggerCallback>:
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop

0800801c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800801c:	6803      	ldr	r3, [r0, #0]
{
 800801e:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008020:	691a      	ldr	r2, [r3, #16]
{
 8008022:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008024:	0791      	lsls	r1, r2, #30
 8008026:	d502      	bpl.n	800802e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008028:	68da      	ldr	r2, [r3, #12]
 800802a:	0792      	lsls	r2, r2, #30
 800802c:	d45f      	bmi.n	80080ee <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800802e:	691a      	ldr	r2, [r3, #16]
 8008030:	0750      	lsls	r0, r2, #29
 8008032:	d502      	bpl.n	800803a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008034:	68da      	ldr	r2, [r3, #12]
 8008036:	0751      	lsls	r1, r2, #29
 8008038:	d446      	bmi.n	80080c8 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800803a:	691a      	ldr	r2, [r3, #16]
 800803c:	0712      	lsls	r2, r2, #28
 800803e:	d502      	bpl.n	8008046 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008040:	68da      	ldr	r2, [r3, #12]
 8008042:	0710      	lsls	r0, r2, #28
 8008044:	d42e      	bmi.n	80080a4 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008046:	691a      	ldr	r2, [r3, #16]
 8008048:	06d2      	lsls	r2, r2, #27
 800804a:	d502      	bpl.n	8008052 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800804c:	68da      	ldr	r2, [r3, #12]
 800804e:	06d0      	lsls	r0, r2, #27
 8008050:	d418      	bmi.n	8008084 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008052:	691a      	ldr	r2, [r3, #16]
 8008054:	07d1      	lsls	r1, r2, #31
 8008056:	d502      	bpl.n	800805e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008058:	68da      	ldr	r2, [r3, #12]
 800805a:	07d2      	lsls	r2, r2, #31
 800805c:	d45d      	bmi.n	800811a <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800805e:	691a      	ldr	r2, [r3, #16]
 8008060:	0610      	lsls	r0, r2, #24
 8008062:	d502      	bpl.n	800806a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008064:	68da      	ldr	r2, [r3, #12]
 8008066:	0611      	lsls	r1, r2, #24
 8008068:	d45f      	bmi.n	800812a <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800806a:	691a      	ldr	r2, [r3, #16]
 800806c:	0652      	lsls	r2, r2, #25
 800806e:	d502      	bpl.n	8008076 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008070:	68da      	ldr	r2, [r3, #12]
 8008072:	0650      	lsls	r0, r2, #25
 8008074:	d461      	bmi.n	800813a <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008076:	691a      	ldr	r2, [r3, #16]
 8008078:	0691      	lsls	r1, r2, #26
 800807a:	d502      	bpl.n	8008082 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800807c:	68da      	ldr	r2, [r3, #12]
 800807e:	0692      	lsls	r2, r2, #26
 8008080:	d443      	bmi.n	800810a <HAL_TIM_IRQHandler+0xee>
}
 8008082:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008084:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008088:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800808a:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800808c:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800808e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008090:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008094:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008096:	d064      	beq.n	8008162 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8008098:	f7ff ffba 	bl	8008010 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800809c:	2200      	movs	r2, #0
 800809e:	6823      	ldr	r3, [r4, #0]
 80080a0:	7722      	strb	r2, [r4, #28]
 80080a2:	e7d6      	b.n	8008052 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080a4:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080a8:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080aa:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080ac:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80080ae:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080b0:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080b2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080b4:	d152      	bne.n	800815c <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080b6:	f7ff ffa9 	bl	800800c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080ba:	4620      	mov	r0, r4
 80080bc:	f7ff ffaa 	bl	8008014 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080c0:	2200      	movs	r2, #0
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	7722      	strb	r2, [r4, #28]
 80080c6:	e7be      	b.n	8008046 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80080c8:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080cc:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80080ce:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080d0:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80080d2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080d4:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080d8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080da:	d13c      	bne.n	8008156 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080dc:	f7ff ff96 	bl	800800c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080e0:	4620      	mov	r0, r4
 80080e2:	f7ff ff97 	bl	8008014 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080e6:	2200      	movs	r2, #0
 80080e8:	6823      	ldr	r3, [r4, #0]
 80080ea:	7722      	strb	r2, [r4, #28]
 80080ec:	e7a5      	b.n	800803a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080ee:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080f2:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080f4:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080f6:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080f8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080fa:	079b      	lsls	r3, r3, #30
 80080fc:	d025      	beq.n	800814a <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80080fe:	f7ff ff87 	bl	8008010 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008102:	2200      	movs	r2, #0
 8008104:	6823      	ldr	r3, [r4, #0]
 8008106:	7722      	strb	r2, [r4, #28]
 8008108:	e791      	b.n	800802e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800810a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800810e:	4620      	mov	r0, r4
}
 8008110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008114:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008116:	f000 b84d 	b.w	80081b4 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800811a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800811e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008120:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008122:	f7ff ff71 	bl	8008008 <HAL_TIM_PeriodElapsedCallback>
 8008126:	6823      	ldr	r3, [r4, #0]
 8008128:	e799      	b.n	800805e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800812a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800812e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008130:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008132:	f000 f841 	bl	80081b8 <HAL_TIMEx_BreakCallback>
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	e797      	b.n	800806a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800813a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800813e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008140:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008142:	f7ff ff69 	bl	8008018 <HAL_TIM_TriggerCallback>
 8008146:	6823      	ldr	r3, [r4, #0]
 8008148:	e795      	b.n	8008076 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800814a:	f7ff ff5f 	bl	800800c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800814e:	4620      	mov	r0, r4
 8008150:	f7ff ff60 	bl	8008014 <HAL_TIM_PWM_PulseFinishedCallback>
 8008154:	e7d5      	b.n	8008102 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8008156:	f7ff ff5b 	bl	8008010 <HAL_TIM_IC_CaptureCallback>
 800815a:	e7c4      	b.n	80080e6 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 800815c:	f7ff ff58 	bl	8008010 <HAL_TIM_IC_CaptureCallback>
 8008160:	e7ae      	b.n	80080c0 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008162:	f7ff ff53 	bl	800800c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008166:	4620      	mov	r0, r4
 8008168:	f7ff ff54 	bl	8008014 <HAL_TIM_PWM_PulseFinishedCallback>
 800816c:	e796      	b.n	800809c <HAL_TIM_IRQHandler+0x80>
 800816e:	bf00      	nop

08008170 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008170:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8008174:	2a01      	cmp	r2, #1
 8008176:	d01a      	beq.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008178:	2202      	movs	r2, #2
{
 800817a:	b4f0      	push	{r4, r5, r6, r7}
 800817c:	4603      	mov	r3, r0
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800817e:	2500      	movs	r5, #0
  htim->State = HAL_TIM_STATE_READY;
 8008180:	2601      	movs	r6, #1
  tmpcr2 = htim->Instance->CR2;
 8008182:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8008184:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8008188:	6860      	ldr	r0, [r4, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800818a:	e9d1 2700 	ldrd	r2, r7, [r1]
  tmpcr2 &= ~TIM_CR2_MMS;
 800818e:	f020 0170 	bic.w	r1, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008192:	4311      	orrs	r1, r2
  tmpsmcr = htim->Instance->SMCR;
 8008194:	68a2      	ldr	r2, [r4, #8]

  return HAL_OK;
 8008196:	4628      	mov	r0, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800819c:	433a      	orrs	r2, r7
  htim->Instance->CR2 = tmpcr2;
 800819e:	6061      	str	r1, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 80081a0:	60a2      	str	r2, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 80081a2:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80081a6:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
}
 80081aa:	bcf0      	pop	{r4, r5, r6, r7}
 80081ac:	4770      	bx	lr
  __HAL_LOCK(htim);
 80081ae:	2002      	movs	r0, #2
}
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop

080081b4 <HAL_TIMEx_CommutCallback>:
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop

080081b8 <HAL_TIMEx_BreakCallback>:
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop

080081bc <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081bc:	2800      	cmp	r0, #0
 80081be:	d05e      	beq.n	800827e <HAL_UART_Init+0xc2>
{
 80081c0:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80081c2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80081c6:	4604      	mov	r4, r0
 80081c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d051      	beq.n	8008274 <HAL_UART_Init+0xb8>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081d0:	2224      	movs	r2, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081d2:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80081d4:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80081d8:	68da      	ldr	r2, [r3, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081da:	68e0      	ldr	r0, [r4, #12]
  __HAL_UART_DISABLE(huart);
 80081dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081e0:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081e2:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80081e4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081e6:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80081ea:	4301      	orrs	r1, r0
 80081ec:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 80081ee:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80081f0:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 80081f4:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80081f8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80081fa:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80081fe:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8008200:	430a      	orrs	r2, r1
 8008202:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008204:	695a      	ldr	r2, [r3, #20]
 8008206:	69a0      	ldr	r0, [r4, #24]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8008208:	491f      	ldr	r1, [pc, #124]	; (8008288 <HAL_UART_Init+0xcc>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800820a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800820e:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 8008210:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008212:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8008214:	d035      	beq.n	8008282 <HAL_UART_Init+0xc6>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008216:	f7ff fd51 	bl	8007cbc <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800821a:	6862      	ldr	r2, [r4, #4]
 800821c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008220:	0092      	lsls	r2, r2, #2
 8008222:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008226:	fbb0 f0f2 	udiv	r0, r0, r2
 800822a:	2264      	movs	r2, #100	; 0x64
 800822c:	4d17      	ldr	r5, [pc, #92]	; (800828c <HAL_UART_Init+0xd0>)
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	fba5 c100 	umull	ip, r1, r5, r0
 8008234:	0949      	lsrs	r1, r1, #5
 8008236:	fb02 0211 	mls	r2, r2, r1, r0
 800823a:	0112      	lsls	r2, r2, #4
 800823c:	3232      	adds	r2, #50	; 0x32
 800823e:	fba5 0202 	umull	r0, r2, r5, r2
 8008242:	0109      	lsls	r1, r1, #4
 8008244:	eb01 1252 	add.w	r2, r1, r2, lsr #5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008248:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800824a:	2120      	movs	r1, #32
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800824c:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800824e:	691a      	ldr	r2, [r3, #16]
  return HAL_OK;
 8008250:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008252:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008256:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008258:	695a      	ldr	r2, [r3, #20]
 800825a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800825e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8008260:	68da      	ldr	r2, [r3, #12]
 8008262:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008266:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008268:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800826a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800826e:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8008272:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8008274:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8008278:	f7fa fbe6 	bl	8002a48 <HAL_UART_MspInit>
 800827c:	e7a8      	b.n	80081d0 <HAL_UART_Init+0x14>
    return HAL_ERROR;
 800827e:	2001      	movs	r0, #1
}
 8008280:	4770      	bx	lr
    pclk = HAL_RCC_GetPCLK2Freq();
 8008282:	f7ff fd2b 	bl	8007cdc <HAL_RCC_GetPCLK2Freq>
 8008286:	e7c8      	b.n	800821a <HAL_UART_Init+0x5e>
 8008288:	40013800 	.word	0x40013800
 800828c:	51eb851f 	.word	0x51eb851f

08008290 <HAL_UART_Receive_DMA>:
{
 8008290:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8008292:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
{
 8008296:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 8008298:	2c20      	cmp	r4, #32
 800829a:	d138      	bne.n	800830e <HAL_UART_Receive_DMA+0x7e>
    if ((pData == NULL) || (Size == 0U))
 800829c:	2900      	cmp	r1, #0
 800829e:	d039      	beq.n	8008314 <HAL_UART_Receive_DMA+0x84>
 80082a0:	2a00      	cmp	r2, #0
 80082a2:	d037      	beq.n	8008314 <HAL_UART_Receive_DMA+0x84>
    __HAL_LOCK(huart);
 80082a4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d030      	beq.n	800830e <HAL_UART_Receive_DMA+0x7e>
 80082ac:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ae:	2500      	movs	r5, #0
 80082b0:	4613      	mov	r3, r2
    __HAL_LOCK(huart);
 80082b2:	2601      	movs	r6, #1
 80082b4:	460a      	mov	r2, r1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082b6:	2122      	movs	r1, #34	; 0x22
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80082b8:	6b40      	ldr	r0, [r0, #52]	; 0x34
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ba:	63e5      	str	r5, [r4, #60]	; 0x3c
    __HAL_LOCK(huart);
 80082bc:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082c0:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80082c4:	4e15      	ldr	r6, [pc, #84]	; (800831c <HAL_UART_Receive_DMA+0x8c>)
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80082c6:	4916      	ldr	r1, [pc, #88]	; (8008320 <HAL_UART_Receive_DMA+0x90>)
    huart->pRxBuffPtr = pData;
 80082c8:	62a2      	str	r2, [r4, #40]	; 0x28
    huart->RxXferSize = Size;
 80082ca:	85a3      	strh	r3, [r4, #44]	; 0x2c
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80082cc:	6286      	str	r6, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80082ce:	62c1      	str	r1, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80082d0:	4e14      	ldr	r6, [pc, #80]	; (8008324 <HAL_UART_Receive_DMA+0x94>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80082d2:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferAbortCallback = NULL;
 80082d4:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80082d6:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80082d8:	3104      	adds	r1, #4
 80082da:	f7fd fe75 	bl	8005fc8 <HAL_DMA_Start_IT>
    return HAL_OK;
 80082de:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_OREFLAG(huart);
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	9501      	str	r5, [sp, #4]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	9201      	str	r2, [sp, #4]
 80082e8:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 80082ea:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 80082ee:	9201      	str	r2, [sp, #4]
 80082f0:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082f2:	68da      	ldr	r2, [r3, #12]
 80082f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082f8:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082fa:	695a      	ldr	r2, [r3, #20]
 80082fc:	f042 0201 	orr.w	r2, r2, #1
 8008300:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008302:	695a      	ldr	r2, [r3, #20]
 8008304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008308:	615a      	str	r2, [r3, #20]
}
 800830a:	b002      	add	sp, #8
 800830c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800830e:	2002      	movs	r0, #2
}
 8008310:	b002      	add	sp, #8
 8008312:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8008314:	2001      	movs	r0, #1
}
 8008316:	b002      	add	sp, #8
 8008318:	bd70      	pop	{r4, r5, r6, pc}
 800831a:	bf00      	nop
 800831c:	0800832d 	.word	0x0800832d
 8008320:	08008369 	.word	0x08008369
 8008324:	08008379 	.word	0x08008379

08008328 <HAL_UART_RxCpltCallback>:
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop

0800832c <UART_DMAReceiveCplt>:
{
 800832c:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800832e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008330:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f013 0320 	ands.w	r3, r3, #32
 8008338:	d110      	bne.n	800835c <UART_DMAReceiveCplt+0x30>
    huart->RxState = HAL_UART_STATE_READY;
 800833a:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800833c:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 800833e:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008340:	68d3      	ldr	r3, [r2, #12]
 8008342:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008346:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008348:	6953      	ldr	r3, [r2, #20]
 800834a:	f023 0301 	bic.w	r3, r3, #1
 800834e:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008350:	6953      	ldr	r3, [r2, #20]
 8008352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008356:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8008358:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 800835c:	f7ff ffe4 	bl	8008328 <HAL_UART_RxCpltCallback>
}
 8008360:	bd08      	pop	{r3, pc}
 8008362:	bf00      	nop

08008364 <HAL_UART_RxHalfCpltCallback>:
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop

08008368 <UART_DMARxHalfCplt>:
{
 8008368:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800836a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800836c:	f7ff fffa 	bl	8008364 <HAL_UART_RxHalfCpltCallback>
}
 8008370:	bd08      	pop	{r3, pc}
 8008372:	bf00      	nop

08008374 <HAL_UART_ErrorCallback>:
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop

08008378 <UART_DMAError>:
{
 8008378:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800837a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	6950      	ldr	r0, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008380:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
 8008384:	2921      	cmp	r1, #33	; 0x21
 8008386:	d01c      	beq.n	80083c2 <UART_DMAError+0x4a>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008388:	6950      	ldr	r0, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800838a:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 800838e:	2922      	cmp	r1, #34	; 0x22
 8008390:	d007      	beq.n	80083a2 <UART_DMAError+0x2a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008392:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8008394:	4618      	mov	r0, r3
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008396:	f042 0210 	orr.w	r2, r2, #16
 800839a:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800839c:	f7ff ffea 	bl	8008374 <HAL_UART_ErrorCallback>
}
 80083a0:	bd08      	pop	{r3, pc}
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80083a2:	0641      	lsls	r1, r0, #25
 80083a4:	d5f5      	bpl.n	8008392 <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 80083a6:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_READY;
 80083a8:	2020      	movs	r0, #32
    huart->RxXferCount = 0x00U;
 80083aa:	85d9      	strh	r1, [r3, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083ac:	68d1      	ldr	r1, [r2, #12]
 80083ae:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 80083b2:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083b4:	6951      	ldr	r1, [r2, #20]
 80083b6:	f021 0101 	bic.w	r1, r1, #1
 80083ba:	6151      	str	r1, [r2, #20]
  huart->RxState = HAL_UART_STATE_READY;
 80083bc:	f883 003a 	strb.w	r0, [r3, #58]	; 0x3a
 80083c0:	e7e7      	b.n	8008392 <UART_DMAError+0x1a>
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80083c2:	0600      	lsls	r0, r0, #24
 80083c4:	d5e0      	bpl.n	8008388 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 80083c6:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 80083c8:	2020      	movs	r0, #32
    huart->TxXferCount = 0x00U;
 80083ca:	84d9      	strh	r1, [r3, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80083cc:	68d1      	ldr	r1, [r2, #12]
 80083ce:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80083d2:	60d1      	str	r1, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 80083d4:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
 80083d8:	e7d6      	b.n	8008388 <UART_DMAError+0x10>
 80083da:	bf00      	nop

080083dc <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80083dc:	b084      	sub	sp, #16
 80083de:	a801      	add	r0, sp, #4
 80083e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80083e4:	b004      	add	sp, #16
 80083e6:	2000      	movs	r0, #0
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop

080083ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80083ec:	4602      	mov	r2, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80083ee:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80083f2:	2000      	movs	r0, #0
  USBx->CNTR |= winterruptmask;
 80083f4:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80083f8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
}
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop

08008400 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8008400:	f244 03ff 	movw	r3, #16639	; 0x40ff
{
 8008404:	4602      	mov	r2, r0
  USBx->CNTR &= ~winterruptmask;
 8008406:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40

  return HAL_OK;
}
 800840a:	2000      	movs	r0, #0
  USBx->CNTR &= ~winterruptmask;
 800840c:	400b      	ands	r3, r1
 800840e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
}
 8008412:	4770      	bx	lr

08008414 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8008414:	2000      	movs	r0, #0
 8008416:	4770      	bx	lr

08008418 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008418:	b084      	sub	sp, #16
 800841a:	b470      	push	{r4, r5, r6}
 800841c:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800841e:	2501      	movs	r5, #1

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8008420:	2000      	movs	r0, #0
  USBx->CNTR = USB_CNTR_FRES;
 8008422:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
  USBx->CNTR = 0;
 8008426:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800842a:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800842e:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8008432:	f8b4 6040 	ldrh.w	r6, [r4, #64]	; 0x40
{
 8008436:	ad04      	add	r5, sp, #16
  USBx->CNTR |= winterruptmask;
 8008438:	f446 463f 	orr.w	r6, r6, #48896	; 0xbf00
 800843c:	f8a4 6040 	strh.w	r6, [r4, #64]	; 0x40
{
 8008440:	e885 000e 	stmia.w	r5, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8008444:	bc70      	pop	{r4, r5, r6}
 8008446:	b004      	add	sp, #16
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop

0800844c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800844c:	b470      	push	{r4, r5, r6}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800844e:	780d      	ldrb	r5, [r1, #0]
{
 8008450:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008452:	f830 4025 	ldrh.w	r4, [r0, r5, lsl #2]
 8008456:	4abc      	ldr	r2, [pc, #752]	; (8008748 <USB_ActivateEndpoint+0x2fc>)

  /* initialize Endpoint */
  switch (ep->type)
 8008458:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800845a:	4022      	ands	r2, r4
  switch (ep->type)
 800845c:	2803      	cmp	r0, #3
 800845e:	f200 8142 	bhi.w	80086e6 <USB_ActivateEndpoint+0x29a>
 8008462:	e8df f000 	tbb	[pc, r0]
 8008466:	464e      	.short	0x464e
 8008468:	4a02      	.short	0x4a02
  HAL_StatusTypeDef ret = HAL_OK;
 800846a:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800846c:	f248 0480 	movw	r4, #32896	; 0x8080
 8008470:	4322      	orrs	r2, r4
 8008472:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008476:	780d      	ldrb	r5, [r1, #0]
 8008478:	4eb4      	ldr	r6, [pc, #720]	; (800874c <USB_ActivateEndpoint+0x300>)
 800847a:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800847e:	432c      	orrs	r4, r5
 8008480:	4032      	ands	r2, r6
 8008482:	4322      	orrs	r2, r4
 8008484:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  if (ep->doublebuffer == 0U)
 8008488:	7b0a      	ldrb	r2, [r1, #12]
 800848a:	2a00      	cmp	r2, #0
 800848c:	d13d      	bne.n	800850a <USB_ActivateEndpoint+0xbe>
 800848e:	88cc      	ldrh	r4, [r1, #6]
 8008490:	780a      	ldrb	r2, [r1, #0]
  {
    if (ep->is_in != 0U)
 8008492:	784d      	ldrb	r5, [r1, #1]
 8008494:	0864      	lsrs	r4, r4, #1
 8008496:	0064      	lsls	r4, r4, #1
 8008498:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800849c:	2d00      	cmp	r5, #0
 800849e:	f000 80e8 	beq.w	8008672 <USB_ActivateEndpoint+0x226>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80084a2:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80084a6:	442a      	add	r2, r5
 80084a8:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084ac:	780a      	ldrb	r2, [r1, #0]
 80084ae:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 80084b2:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80084b6:	066d      	lsls	r5, r5, #25
 80084b8:	d50b      	bpl.n	80084d2 <USB_ActivateEndpoint+0x86>
 80084ba:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80084be:	4026      	ands	r6, r4
 80084c0:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
 80084c4:	f046 06c0 	orr.w	r6, r6, #192	; 0xc0
 80084c8:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 80084cc:	780c      	ldrb	r4, [r1, #0]
 80084ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2

      if (ep->type != EP_TYPE_ISOC)
 80084d2:	78cb      	ldrb	r3, [r1, #3]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	f000 8120 	beq.w	800871a <USB_ActivateEndpoint+0x2ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80084da:	8822      	ldrh	r2, [r4, #0]
 80084dc:	4b9c      	ldr	r3, [pc, #624]	; (8008750 <USB_ActivateEndpoint+0x304>)
 80084de:	4013      	ands	r3, r2
 80084e0:	f083 0320 	eor.w	r3, r3, #32
 80084e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ec:	8023      	strh	r3, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 80084ee:	bc70      	pop	{r4, r5, r6}
 80084f0:	4770      	bx	lr
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80084f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 80084f6:	2000      	movs	r0, #0
      break;
 80084f8:	e7b8      	b.n	800846c <USB_ActivateEndpoint+0x20>
      wEpRegVal |= USB_EP_INTERRUPT;
 80084fa:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80084fe:	2000      	movs	r0, #0
      break;
 8008500:	e7b4      	b.n	800846c <USB_ActivateEndpoint+0x20>
      wEpRegVal |= USB_EP_CONTROL;
 8008502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8008506:	2000      	movs	r0, #0
      break;
 8008508:	e7b0      	b.n	800846c <USB_ActivateEndpoint+0x20>
    PCD_SET_EP_DBUF(USBx, ep->num);
 800850a:	780c      	ldrb	r4, [r1, #0]
 800850c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008510:	4032      	ands	r2, r6
 8008512:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8008516:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800851a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800851e:	780a      	ldrb	r2, [r1, #0]
 8008520:	890c      	ldrh	r4, [r1, #8]
 8008522:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8008526:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800852a:	0864      	lsrs	r4, r4, #1
 800852c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008530:	0064      	lsls	r4, r4, #1
 8008532:	b2ad      	uxth	r5, r5
 8008534:	5354      	strh	r4, [r2, r5]
 8008536:	780a      	ldrb	r2, [r1, #0]
 8008538:	894c      	ldrh	r4, [r1, #10]
 800853a:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800853e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8008542:	0864      	lsrs	r4, r4, #1
 8008544:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8008548:	0064      	lsls	r4, r4, #1
 800854a:	b2ad      	uxth	r5, r5
 800854c:	5354      	strh	r4, [r2, r5]
    if (ep->is_in == 0U)
 800854e:	784a      	ldrb	r2, [r1, #1]
 8008550:	2a00      	cmp	r2, #0
 8008552:	d142      	bne.n	80085da <USB_ActivateEndpoint+0x18e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008554:	780a      	ldrb	r2, [r1, #0]
 8008556:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 800855a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800855e:	046d      	lsls	r5, r5, #17
 8008560:	d50b      	bpl.n	800857a <USB_ActivateEndpoint+0x12e>
 8008562:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8008566:	4026      	ands	r6, r4
 8008568:	f446 4640 	orr.w	r6, r6, #49152	; 0xc000
 800856c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8008570:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8008574:	780c      	ldrb	r4, [r1, #0]
 8008576:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800857a:	8822      	ldrh	r2, [r4, #0]
 800857c:	0656      	lsls	r6, r2, #25
 800857e:	d50c      	bpl.n	800859a <USB_ActivateEndpoint+0x14e>
 8008580:	8822      	ldrh	r2, [r4, #0]
 8008582:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008586:	0512      	lsls	r2, r2, #20
 8008588:	0d12      	lsrs	r2, r2, #20
 800858a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800858e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8008592:	8022      	strh	r2, [r4, #0]
 8008594:	780c      	ldrb	r4, [r1, #0]
 8008596:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800859a:	f248 0680 	movw	r6, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 800859e:	8822      	ldrh	r2, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80085a0:	4d6c      	ldr	r5, [pc, #432]	; (8008754 <USB_ActivateEndpoint+0x308>)
      PCD_TX_DTOG(USBx, ep->num);
 80085a2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80085a6:	0512      	lsls	r2, r2, #20
 80085a8:	0d12      	lsrs	r2, r2, #20
 80085aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085ae:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80085b2:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80085b4:	780c      	ldrb	r4, [r1, #0]
 80085b6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80085ba:	402a      	ands	r2, r5
 80085bc:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80085c0:	4332      	orrs	r2, r6
 80085c2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80085c6:	7809      	ldrb	r1, [r1, #0]
 80085c8:	4a61      	ldr	r2, [pc, #388]	; (8008750 <USB_ActivateEndpoint+0x304>)
 80085ca:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
 80085ce:	4022      	ands	r2, r4
 80085d0:	4332      	orrs	r2, r6
 80085d2:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
}
 80085d6:	bc70      	pop	{r4, r5, r6}
 80085d8:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085da:	780a      	ldrb	r2, [r1, #0]
 80085dc:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 80085e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80085e4:	046d      	lsls	r5, r5, #17
 80085e6:	d50b      	bpl.n	8008600 <USB_ActivateEndpoint+0x1b4>
 80085e8:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80085ec:	4026      	ands	r6, r4
 80085ee:	f446 4640 	orr.w	r6, r6, #49152	; 0xc000
 80085f2:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 80085f6:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 80085fa:	780c      	ldrb	r4, [r1, #0]
 80085fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008600:	8822      	ldrh	r2, [r4, #0]
 8008602:	0652      	lsls	r2, r2, #25
 8008604:	d50c      	bpl.n	8008620 <USB_ActivateEndpoint+0x1d4>
 8008606:	8822      	ldrh	r2, [r4, #0]
 8008608:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800860c:	0512      	lsls	r2, r2, #20
 800860e:	0d12      	lsrs	r2, r2, #20
 8008610:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008614:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8008618:	8022      	strh	r2, [r4, #0]
 800861a:	780c      	ldrb	r4, [r1, #0]
 800861c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_RX_DTOG(USBx, ep->num);
 8008620:	8822      	ldrh	r2, [r4, #0]
 8008622:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008626:	0512      	lsls	r2, r2, #20
 8008628:	0d12      	lsrs	r2, r2, #20
 800862a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800862e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008632:	8022      	strh	r2, [r4, #0]
      if (ep->type != EP_TYPE_ISOC)
 8008634:	78ca      	ldrb	r2, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008636:	780c      	ldrb	r4, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 8008638:	2a01      	cmp	r2, #1
 800863a:	d061      	beq.n	8008700 <USB_ActivateEndpoint+0x2b4>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800863c:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8008640:	4a43      	ldr	r2, [pc, #268]	; (8008750 <USB_ActivateEndpoint+0x304>)
 8008642:	402a      	ands	r2, r5
 8008644:	f082 0220 	eor.w	r2, r2, #32
 8008648:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800864c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008650:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008654:	7809      	ldrb	r1, [r1, #0]
}
 8008656:	bc70      	pop	{r4, r5, r6}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008658:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800865c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008660:	0492      	lsls	r2, r2, #18
 8008662:	0c92      	lsrs	r2, r2, #18
 8008664:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008668:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800866c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
}
 8008670:	4770      	bx	lr
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008672:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008676:	690d      	ldr	r5, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008678:	4432      	add	r2, r6
 800867a:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800867e:	780a      	ldrb	r2, [r1, #0]
 8008680:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8008684:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8008688:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 800868c:	b2a4      	uxth	r4, r4
 800868e:	b365      	cbz	r5, 80086ea <USB_ActivateEndpoint+0x29e>
 8008690:	2d3e      	cmp	r5, #62	; 0x3e
 8008692:	d84d      	bhi.n	8008730 <USB_ActivateEndpoint+0x2e4>
 8008694:	086e      	lsrs	r6, r5, #1
 8008696:	07ed      	lsls	r5, r5, #31
 8008698:	bf48      	it	mi
 800869a:	3601      	addmi	r6, #1
 800869c:	02b6      	lsls	r6, r6, #10
 800869e:	b2b6      	uxth	r6, r6
 80086a0:	5316      	strh	r6, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086a2:	780c      	ldrb	r4, [r1, #0]
 80086a4:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80086a8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 80086ac:	046e      	lsls	r6, r5, #17
 80086ae:	d50e      	bpl.n	80086ce <USB_ActivateEndpoint+0x282>
 80086b0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80086b4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80086b8:	0512      	lsls	r2, r2, #20
 80086ba:	0d12      	lsrs	r2, r2, #20
 80086bc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80086c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80086c4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 80086c8:	780a      	ldrb	r2, [r1, #0]
 80086ca:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086ce:	8811      	ldrh	r1, [r2, #0]
 80086d0:	4b20      	ldr	r3, [pc, #128]	; (8008754 <USB_ActivateEndpoint+0x308>)
}
 80086d2:	bc70      	pop	{r4, r5, r6}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086d4:	400b      	ands	r3, r1
 80086d6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80086da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086e2:	8013      	strh	r3, [r2, #0]
}
 80086e4:	4770      	bx	lr
      ret = HAL_ERROR;
 80086e6:	2001      	movs	r0, #1
 80086e8:	e6c0      	b.n	800846c <USB_ActivateEndpoint+0x20>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80086ea:	5b15      	ldrh	r5, [r2, r4]
 80086ec:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 80086f0:	042d      	lsls	r5, r5, #16
 80086f2:	0c2d      	lsrs	r5, r5, #16
 80086f4:	5315      	strh	r5, [r2, r4]
 80086f6:	5b15      	ldrh	r5, [r2, r4]
 80086f8:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 80086fc:	5315      	strh	r5, [r2, r4]
 80086fe:	e7d0      	b.n	80086a2 <USB_ActivateEndpoint+0x256>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008700:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008704:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008708:	0512      	lsls	r2, r2, #20
 800870a:	0d12      	lsrs	r2, r2, #20
 800870c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008710:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008714:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8008718:	e79c      	b.n	8008654 <USB_ActivateEndpoint+0x208>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800871a:	8823      	ldrh	r3, [r4, #0]
 800871c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008720:	051b      	lsls	r3, r3, #20
 8008722:	0d1b      	lsrs	r3, r3, #20
 8008724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800872c:	8023      	strh	r3, [r4, #0]
 800872e:	e752      	b.n	80085d6 <USB_ActivateEndpoint+0x18a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008730:	096e      	lsrs	r6, r5, #5
 8008732:	06ed      	lsls	r5, r5, #27
 8008734:	4d08      	ldr	r5, [pc, #32]	; (8008758 <USB_ActivateEndpoint+0x30c>)
 8008736:	bf08      	it	eq
 8008738:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800873c:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 8008740:	b2ad      	uxth	r5, r5
 8008742:	5315      	strh	r5, [r2, r4]
 8008744:	e7ad      	b.n	80086a2 <USB_ActivateEndpoint+0x256>
 8008746:	bf00      	nop
 8008748:	ffff898f 	.word	0xffff898f
 800874c:	ffff8f8f 	.word	0xffff8f8f
 8008750:	ffff8fbf 	.word	0xffff8fbf
 8008754:	ffffbf8f 	.word	0xffffbf8f
 8008758:	ffff8000 	.word	0xffff8000

0800875c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800875c:	b430      	push	{r4, r5}
 800875e:	780a      	ldrb	r2, [r1, #0]
  if (ep->doublebuffer == 0U)
 8008760:	7b0d      	ldrb	r5, [r1, #12]
 8008762:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8008766:	784c      	ldrb	r4, [r1, #1]
 8008768:	bb15      	cbnz	r5, 80087b0 <USB_DeactivateEndpoint+0x54>
  {
    if (ep->is_in != 0U)
 800876a:	2c00      	cmp	r4, #0
 800876c:	f000 8099 	beq.w	80088a2 <USB_DeactivateEndpoint+0x146>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008770:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 8008774:	0664      	lsls	r4, r4, #25
 8008776:	d50e      	bpl.n	8008796 <USB_DeactivateEndpoint+0x3a>
 8008778:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800877c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008780:	051b      	lsls	r3, r3, #20
 8008782:	0d1b      	lsrs	r3, r3, #20
 8008784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008788:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800878c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8008790:	780b      	ldrb	r3, [r1, #0]
 8008792:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008796:	881a      	ldrh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8008798:	2000      	movs	r0, #0
 800879a:	bc30      	pop	{r4, r5}
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800879c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80087a0:	0512      	lsls	r2, r2, #20
 80087a2:	0d12      	lsrs	r2, r2, #20
 80087a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80087ac:	801a      	strh	r2, [r3, #0]
}
 80087ae:	4770      	bx	lr
    if (ep->is_in == 0U)
 80087b0:	2c00      	cmp	r4, #0
 80087b2:	d141      	bne.n	8008838 <USB_DeactivateEndpoint+0xdc>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087b4:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 80087b8:	0464      	lsls	r4, r4, #17
 80087ba:	d50e      	bpl.n	80087da <USB_DeactivateEndpoint+0x7e>
 80087bc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80087c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087c4:	051b      	lsls	r3, r3, #20
 80087c6:	0d1b      	lsrs	r3, r3, #20
 80087c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087d0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80087d4:	780b      	ldrb	r3, [r1, #0]
 80087d6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087da:	881a      	ldrh	r2, [r3, #0]
 80087dc:	0655      	lsls	r5, r2, #25
 80087de:	d50c      	bpl.n	80087fa <USB_DeactivateEndpoint+0x9e>
 80087e0:	881a      	ldrh	r2, [r3, #0]
 80087e2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80087e6:	0512      	lsls	r2, r2, #20
 80087e8:	0d12      	lsrs	r2, r2, #20
 80087ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087ee:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80087f2:	801a      	strh	r2, [r3, #0]
 80087f4:	780b      	ldrb	r3, [r1, #0]
 80087f6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80087fa:	f248 0580 	movw	r5, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 80087fe:	881a      	ldrh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008800:	4c3f      	ldr	r4, [pc, #252]	; (8008900 <USB_DeactivateEndpoint+0x1a4>)
      PCD_TX_DTOG(USBx, ep->num);
 8008802:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008806:	0512      	lsls	r2, r2, #20
 8008808:	0d12      	lsrs	r2, r2, #20
 800880a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800880e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8008812:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008814:	780a      	ldrb	r2, [r1, #0]
 8008816:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800881a:	4023      	ands	r3, r4
 800881c:	432b      	orrs	r3, r5
 800881e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008822:	780a      	ldrb	r2, [r1, #0]
 8008824:	4b37      	ldr	r3, [pc, #220]	; (8008904 <USB_DeactivateEndpoint+0x1a8>)
 8008826:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 800882a:	400b      	ands	r3, r1
 800882c:	431d      	orrs	r5, r3
 800882e:	f820 5022 	strh.w	r5, [r0, r2, lsl #2]
}
 8008832:	2000      	movs	r0, #0
 8008834:	bc30      	pop	{r4, r5}
 8008836:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008838:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 800883c:	0464      	lsls	r4, r4, #17
 800883e:	d50e      	bpl.n	800885e <USB_DeactivateEndpoint+0x102>
 8008840:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008844:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008848:	051b      	lsls	r3, r3, #20
 800884a:	0d1b      	lsrs	r3, r3, #20
 800884c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008854:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8008858:	780b      	ldrb	r3, [r1, #0]
 800885a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800885e:	881a      	ldrh	r2, [r3, #0]
 8008860:	0652      	lsls	r2, r2, #25
 8008862:	d43e      	bmi.n	80088e2 <USB_DeactivateEndpoint+0x186>
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008864:	f248 0580 	movw	r5, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8008868:	881a      	ldrh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800886a:	4c26      	ldr	r4, [pc, #152]	; (8008904 <USB_DeactivateEndpoint+0x1a8>)
      PCD_RX_DTOG(USBx, ep->num);
 800886c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008870:	0512      	lsls	r2, r2, #20
 8008872:	0d12      	lsrs	r2, r2, #20
 8008874:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008878:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800887c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800887e:	780a      	ldrb	r2, [r1, #0]
 8008880:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008884:	4023      	ands	r3, r4
 8008886:	432b      	orrs	r3, r5
 8008888:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800888c:	780a      	ldrb	r2, [r1, #0]
 800888e:	4b1c      	ldr	r3, [pc, #112]	; (8008900 <USB_DeactivateEndpoint+0x1a4>)
 8008890:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8008894:	400b      	ands	r3, r1
 8008896:	431d      	orrs	r5, r3
 8008898:	f820 5022 	strh.w	r5, [r0, r2, lsl #2]
}
 800889c:	2000      	movs	r0, #0
 800889e:	bc30      	pop	{r4, r5}
 80088a0:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088a2:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 80088a6:	0465      	lsls	r5, r4, #17
 80088a8:	d50e      	bpl.n	80088c8 <USB_DeactivateEndpoint+0x16c>
 80088aa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80088ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088b2:	051b      	lsls	r3, r3, #20
 80088b4:	0d1b      	lsrs	r3, r3, #20
 80088b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80088ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088be:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80088c2:	780b      	ldrb	r3, [r1, #0]
 80088c4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80088c8:	881a      	ldrh	r2, [r3, #0]
}
 80088ca:	2000      	movs	r0, #0
 80088cc:	bc30      	pop	{r4, r5}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80088ce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80088d2:	0492      	lsls	r2, r2, #18
 80088d4:	0c92      	lsrs	r2, r2, #18
 80088d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80088de:	801a      	strh	r2, [r3, #0]
}
 80088e0:	4770      	bx	lr
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088e2:	881a      	ldrh	r2, [r3, #0]
 80088e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80088e8:	0512      	lsls	r2, r2, #20
 80088ea:	0d12      	lsrs	r2, r2, #20
 80088ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088f0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80088f4:	801a      	strh	r2, [r3, #0]
 80088f6:	780b      	ldrb	r3, [r1, #0]
 80088f8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80088fc:	e7b2      	b.n	8008864 <USB_DeactivateEndpoint+0x108>
 80088fe:	bf00      	nop
 8008900:	ffffbf8f 	.word	0xffffbf8f
 8008904:	ffff8fbf 	.word	0xffff8fbf

08008908 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008908:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800890a:	784c      	ldrb	r4, [r1, #1]
 800890c:	698b      	ldr	r3, [r1, #24]
 800890e:	2c01      	cmp	r4, #1
 8008910:	690a      	ldr	r2, [r1, #16]
 8008912:	d05a      	beq.n	80089ca <USB_EPStartXfer+0xc2>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008914:	4293      	cmp	r3, r2
      ep->xfer_len -= len;
    }
    else
    {
      len = ep->xfer_len;
      ep->xfer_len = 0U;
 8008916:	bf98      	it	ls
 8008918:	2600      	movls	r6, #0
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800891a:	7b0d      	ldrb	r5, [r1, #12]
      ep->xfer_len -= len;
 800891c:	bf88      	it	hi
 800891e:	1a9e      	subhi	r6, r3, r2
 8008920:	618e      	str	r6, [r1, #24]
 8008922:	bf88      	it	hi
 8008924:	4613      	movhi	r3, r2
 8008926:	780a      	ldrb	r2, [r1, #0]
    if (ep->doublebuffer == 0U)
 8008928:	bb15      	cbnz	r5, 8008970 <USB_EPStartXfer+0x68>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800892a:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 800892e:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 8008932:	0112      	lsls	r2, r2, #4
 8008934:	442c      	add	r4, r5
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 80a8 	beq.w	8008a8c <USB_EPStartXfer+0x184>
 800893c:	2b3e      	cmp	r3, #62	; 0x3e
 800893e:	f200 80c9 	bhi.w	8008ad4 <USB_EPStartXfer+0x1cc>
 8008942:	085d      	lsrs	r5, r3, #1
 8008944:	07db      	lsls	r3, r3, #31
 8008946:	bf48      	it	mi
 8008948:	3501      	addmi	r5, #1
 800894a:	02ad      	lsls	r5, r5, #10
 800894c:	b2ad      	uxth	r5, r5
 800894e:	52a5      	strh	r5, [r4, r2]
 8008950:	780a      	ldrb	r2, [r1, #0]
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008952:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8008956:	4b7d      	ldr	r3, [pc, #500]	; (8008b4c <USB_EPStartXfer+0x244>)
  }

  return HAL_OK;
}
 8008958:	bcf0      	pop	{r4, r5, r6, r7}
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800895a:	400b      	ands	r3, r1
 800895c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8008960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008968:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800896c:	2000      	movs	r0, #0
 800896e:	4770      	bx	lr
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008970:	2c00      	cmp	r4, #0
 8008972:	d1ee      	bne.n	8008952 <USB_EPStartXfer+0x4a>
 8008974:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8008978:	f200 4404 	addw	r4, r0, #1028	; 0x404
 800897c:	0112      	lsls	r2, r2, #4
 800897e:	442c      	add	r4, r5
 8008980:	2b00      	cmp	r3, #0
 8008982:	f040 80b3 	bne.w	8008aec <USB_EPStartXfer+0x1e4>
 8008986:	5aa5      	ldrh	r5, [r4, r2]
 8008988:	4e71      	ldr	r6, [pc, #452]	; (8008b50 <USB_EPStartXfer+0x248>)
 800898a:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 800898e:	042d      	lsls	r5, r5, #16
 8008990:	0c2d      	lsrs	r5, r5, #16
 8008992:	52a5      	strh	r5, [r4, r2]
 8008994:	5aa5      	ldrh	r5, [r4, r2]
 8008996:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 800899a:	52a5      	strh	r5, [r4, r2]
 800899c:	784c      	ldrb	r4, [r1, #1]
 800899e:	2c00      	cmp	r4, #0
 80089a0:	f040 80af 	bne.w	8008b02 <USB_EPStartXfer+0x1fa>
 80089a4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80089a8:	780a      	ldrb	r2, [r1, #0]
 80089aa:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 80089ae:	0112      	lsls	r2, r2, #4
 80089b0:	441c      	add	r4, r3
 80089b2:	5aa3      	ldrh	r3, [r4, r2]
 80089b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80089b8:	041b      	lsls	r3, r3, #16
 80089ba:	0c1b      	lsrs	r3, r3, #16
 80089bc:	52a3      	strh	r3, [r4, r2]
 80089be:	5aa3      	ldrh	r3, [r4, r2]
 80089c0:	4333      	orrs	r3, r6
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	52a3      	strh	r3, [r4, r2]
 80089c6:	780a      	ldrb	r2, [r1, #0]
 80089c8:	e7c3      	b.n	8008952 <USB_EPStartXfer+0x4a>
    if (ep->xfer_len > ep->maxpacket)
 80089ca:	4293      	cmp	r3, r2
      ep->xfer_len -= len;
 80089cc:	bf86      	itte	hi
 80089ce:	1a9c      	subhi	r4, r3, r2
 80089d0:	4613      	movhi	r3, r2
      ep->xfer_len = 0U;
 80089d2:	2400      	movls	r4, #0
 80089d4:	b29a      	uxth	r2, r3
    if (ep->doublebuffer == 0U)
 80089d6:	7b0d      	ldrb	r5, [r1, #12]
 80089d8:	3201      	adds	r2, #1
 80089da:	0856      	lsrs	r6, r2, #1
 80089dc:	618c      	str	r4, [r1, #24]
 80089de:	b29b      	uxth	r3, r3
 80089e0:	694a      	ldr	r2, [r1, #20]
 80089e2:	f500 6780 	add.w	r7, r0, #1024	; 0x400
 80089e6:	b36d      	cbz	r5, 8008a44 <USB_EPStartXfer+0x13c>
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80089e8:	780d      	ldrb	r5, [r1, #0]
 80089ea:	f830 4025 	ldrh.w	r4, [r0, r5, lsl #2]
 80089ee:	012d      	lsls	r5, r5, #4
 80089f0:	0664      	lsls	r4, r4, #25
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80089f2:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80089f6:	d555      	bpl.n	8008aa4 <USB_EPStartXfer+0x19c>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80089f8:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 80089fc:	4464      	add	r4, ip
 80089fe:	5363      	strh	r3, [r4, r5]
        pmabuffer = ep->pmaaddr1;
 8008a00:	894c      	ldrh	r4, [r1, #10]
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a02:	eb07 0444 	add.w	r4, r7, r4, lsl #1

  for (i = n; i != 0U; i--)
 8008a06:	b13e      	cbz	r6, 8008a18 <USB_EPStartXfer+0x110>
 8008a08:	eb02 0346 	add.w	r3, r2, r6, lsl #1
 8008a0c:	f832 5b02 	ldrh.w	r5, [r2], #2
 8008a10:	4293      	cmp	r3, r2
  {
    temp1 = *pBuf;
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
    *pdwVal = (uint16_t)temp2;
 8008a12:	f824 5b04 	strh.w	r5, [r4], #4
  for (i = n; i != 0U; i--)
 8008a16:	d1f9      	bne.n	8008a0c <USB_EPStartXfer+0x104>
 8008a18:	780c      	ldrb	r4, [r1, #0]
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8008a1a:	784b      	ldrb	r3, [r1, #1]
 8008a1c:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d145      	bne.n	8008ab0 <USB_EPStartXfer+0x1a8>
 8008a24:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8008a28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a2c:	051b      	lsls	r3, r3, #20
 8008a2e:	0d1b      	lsrs	r3, r3, #20
 8008a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a38:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8008a3c:	780a      	ldrb	r2, [r1, #0]
 8008a3e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008a42:	e016      	b.n	8008a72 <USB_EPStartXfer+0x16a>
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a44:	88cc      	ldrh	r4, [r1, #6]
 8008a46:	eb07 0444 	add.w	r4, r7, r4, lsl #1
  for (i = n; i != 0U; i--)
 8008a4a:	b13e      	cbz	r6, 8008a5c <USB_EPStartXfer+0x154>
 8008a4c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008a50:	f832 5b02 	ldrh.w	r5, [r2], #2
    *pdwVal = (uint16_t)temp2;
 8008a54:	f824 5b04 	strh.w	r5, [r4], #4
  for (i = n; i != 0U; i--)
 8008a58:	42a6      	cmp	r6, r4
 8008a5a:	d1f9      	bne.n	8008a50 <USB_EPStartXfer+0x148>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008a5c:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8008a60:	780c      	ldrb	r4, [r1, #0]
 8008a62:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8008a66:	442a      	add	r2, r5
 8008a68:	0124      	lsls	r4, r4, #4
 8008a6a:	52a3      	strh	r3, [r4, r2]
 8008a6c:	780a      	ldrb	r2, [r1, #0]
 8008a6e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008a72:	8811      	ldrh	r1, [r2, #0]
 8008a74:	4b37      	ldr	r3, [pc, #220]	; (8008b54 <USB_EPStartXfer+0x24c>)
}
 8008a76:	2000      	movs	r0, #0
 8008a78:	bcf0      	pop	{r4, r5, r6, r7}
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008a7a:	400b      	ands	r3, r1
 8008a7c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8008a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a88:	8013      	strh	r3, [r2, #0]
}
 8008a8a:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008a8c:	5aa3      	ldrh	r3, [r4, r2]
 8008a8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a92:	041b      	lsls	r3, r3, #16
 8008a94:	0c1b      	lsrs	r3, r3, #16
 8008a96:	52a3      	strh	r3, [r4, r2]
 8008a98:	5aa3      	ldrh	r3, [r4, r2]
 8008a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a9e:	52a3      	strh	r3, [r4, r2]
 8008aa0:	780a      	ldrb	r2, [r1, #0]
 8008aa2:	e756      	b.n	8008952 <USB_EPStartXfer+0x4a>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008aa4:	f200 4404 	addw	r4, r0, #1028	; 0x404
 8008aa8:	4464      	add	r4, ip
 8008aaa:	5363      	strh	r3, [r4, r5]
        pmabuffer = ep->pmaaddr0;
 8008aac:	890c      	ldrh	r4, [r1, #8]
 8008aae:	e7a8      	b.n	8008a02 <USB_EPStartXfer+0xfa>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d1de      	bne.n	8008a72 <USB_EPStartXfer+0x16a>
 8008ab4:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8008ab8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008abc:	051b      	lsls	r3, r3, #20
 8008abe:	0d1b      	lsrs	r3, r3, #20
 8008ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ac8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8008acc:	780a      	ldrb	r2, [r1, #0]
 8008ace:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008ad2:	e7ce      	b.n	8008a72 <USB_EPStartXfer+0x16a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008ad4:	095d      	lsrs	r5, r3, #5
 8008ad6:	06df      	lsls	r7, r3, #27
 8008ad8:	4b1d      	ldr	r3, [pc, #116]	; (8008b50 <USB_EPStartXfer+0x248>)
 8008ada:	bf08      	it	eq
 8008adc:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8008ae0:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	52a3      	strh	r3, [r4, r2]
 8008ae8:	780a      	ldrb	r2, [r1, #0]
 8008aea:	e732      	b.n	8008952 <USB_EPStartXfer+0x4a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008aec:	2b3e      	cmp	r3, #62	; 0x3e
 8008aee:	d816      	bhi.n	8008b1e <USB_EPStartXfer+0x216>
 8008af0:	085d      	lsrs	r5, r3, #1
 8008af2:	07de      	lsls	r6, r3, #31
 8008af4:	bf48      	it	mi
 8008af6:	3501      	addmi	r5, #1
 8008af8:	02ad      	lsls	r5, r5, #10
 8008afa:	b2ad      	uxth	r5, r5
 8008afc:	52a5      	strh	r5, [r4, r2]
 8008afe:	784c      	ldrb	r4, [r1, #1]
 8008b00:	b1d4      	cbz	r4, 8008b38 <USB_EPStartXfer+0x230>
 8008b02:	2c01      	cmp	r4, #1
 8008b04:	780a      	ldrb	r2, [r1, #0]
 8008b06:	f47f af24 	bne.w	8008952 <USB_EPStartXfer+0x4a>
 8008b0a:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8008b0e:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 8008b12:	0112      	lsls	r2, r2, #4
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	442c      	add	r4, r5
 8008b18:	52a3      	strh	r3, [r4, r2]
 8008b1a:	780a      	ldrb	r2, [r1, #0]
 8008b1c:	e719      	b.n	8008952 <USB_EPStartXfer+0x4a>
 8008b1e:	095e      	lsrs	r6, r3, #5
 8008b20:	06dd      	lsls	r5, r3, #27
 8008b22:	4d0b      	ldr	r5, [pc, #44]	; (8008b50 <USB_EPStartXfer+0x248>)
 8008b24:	bf08      	it	eq
 8008b26:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8008b2a:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 8008b2e:	b2ad      	uxth	r5, r5
 8008b30:	52a5      	strh	r5, [r4, r2]
 8008b32:	784c      	ldrb	r4, [r1, #1]
 8008b34:	2c00      	cmp	r4, #0
 8008b36:	d1e4      	bne.n	8008b02 <USB_EPStartXfer+0x1fa>
 8008b38:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8008b3c:	780b      	ldrb	r3, [r1, #0]
 8008b3e:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8008b42:	4422      	add	r2, r4
 8008b44:	011b      	lsls	r3, r3, #4
 8008b46:	52d5      	strh	r5, [r2, r3]
 8008b48:	780a      	ldrb	r2, [r1, #0]
 8008b4a:	e702      	b.n	8008952 <USB_EPStartXfer+0x4a>
 8008b4c:	ffffbf8f 	.word	0xffffbf8f
 8008b50:	ffff8000 	.word	0xffff8000
 8008b54:	ffff8fbf 	.word	0xffff8fbf

08008b58 <USB_EPSetStall>:
  if (ep->is_in != 0U)
 8008b58:	784b      	ldrb	r3, [r1, #1]
 8008b5a:	780a      	ldrb	r2, [r1, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008b5c:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
  if (ep->is_in != 0U)
 8008b60:	b95b      	cbnz	r3, 8008b7a <USB_EPSetStall+0x22>
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008b62:	4b0c      	ldr	r3, [pc, #48]	; (8008b94 <USB_EPSetStall+0x3c>)
 8008b64:	400b      	ands	r3, r1
 8008b66:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b72:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8008b76:	2000      	movs	r0, #0
 8008b78:	4770      	bx	lr
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008b7a:	4b07      	ldr	r3, [pc, #28]	; (8008b98 <USB_EPSetStall+0x40>)
 8008b7c:	400b      	ands	r3, r1
 8008b7e:	f083 0310 	eor.w	r3, r3, #16
 8008b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b8a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8008b8e:	2000      	movs	r0, #0
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	ffffbf8f 	.word	0xffffbf8f
 8008b98:	ffff8fbf 	.word	0xffff8fbf

08008b9c <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 8008b9c:	7b0b      	ldrb	r3, [r1, #12]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d139      	bne.n	8008c16 <USB_EPClearStall+0x7a>
{
 8008ba2:	b410      	push	{r4}
 8008ba4:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in != 0U)
 8008ba6:	784c      	ldrb	r4, [r1, #1]
 8008ba8:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8008bac:	b314      	cbz	r4, 8008bf4 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bae:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8008bb2:	0652      	lsls	r2, r2, #25
 8008bb4:	d50b      	bpl.n	8008bce <USB_EPClearStall+0x32>
 8008bb6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8008bba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008bbe:	0512      	lsls	r2, r2, #20
 8008bc0:	0d12      	lsrs	r2, r2, #20
 8008bc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008bc6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8008bca:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8008bce:	78cb      	ldrb	r3, [r1, #3]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d01d      	beq.n	8008c10 <USB_EPClearStall+0x74>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008bd4:	780a      	ldrb	r2, [r1, #0]
 8008bd6:	4b19      	ldr	r3, [pc, #100]	; (8008c3c <USB_EPClearStall+0xa0>)
 8008bd8:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
}
 8008bdc:	bc10      	pop	{r4}
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008bde:	400b      	ands	r3, r1
 8008be0:	f083 0320 	eor.w	r3, r3, #32
 8008be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8008bf0:	2000      	movs	r0, #0
 8008bf2:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008bf4:	f830 4023 	ldrh.w	r4, [r0, r3, lsl #2]
 8008bf8:	0464      	lsls	r4, r4, #17
 8008bfa:	d40e      	bmi.n	8008c1a <USB_EPClearStall+0x7e>
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008bfc:	8811      	ldrh	r1, [r2, #0]
 8008bfe:	4b10      	ldr	r3, [pc, #64]	; (8008c40 <USB_EPClearStall+0xa4>)
 8008c00:	400b      	ands	r3, r1
 8008c02:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8008c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c0e:	8013      	strh	r3, [r2, #0]
}
 8008c10:	2000      	movs	r0, #0
 8008c12:	bc10      	pop	{r4}
 8008c14:	4770      	bx	lr
 8008c16:	2000      	movs	r0, #0
 8008c18:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c1a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8008c1e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008c22:	0512      	lsls	r2, r2, #20
 8008c24:	0d12      	lsrs	r2, r2, #20
 8008c26:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008c2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c2e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8008c32:	780a      	ldrb	r2, [r1, #0]
 8008c34:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008c38:	e7e0      	b.n	8008bfc <USB_EPClearStall+0x60>
 8008c3a:	bf00      	nop
 8008c3c:	ffff8fbf 	.word	0xffff8fbf
 8008c40:	ffffbf8f 	.word	0xffffbf8f

08008c44 <USB_SetDevAddress>:
  if (address == 0U)
 8008c44:	b911      	cbnz	r1, 8008c4c <USB_SetDevAddress+0x8>
    USBx->DADDR = USB_DADDR_EF;
 8008c46:	2380      	movs	r3, #128	; 0x80
 8008c48:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	4770      	bx	lr

08008c50 <USB_DevConnect>:
 8008c50:	2000      	movs	r0, #0
 8008c52:	4770      	bx	lr

08008c54 <USB_DevDisconnect>:
 8008c54:	2000      	movs	r0, #0
 8008c56:	4770      	bx	lr

08008c58 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 8008c58:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop

08008c60 <USB_EP0_OutStart>:
}
 8008c60:	2000      	movs	r0, #0
 8008c62:	4770      	bx	lr

08008c64 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008c64:	eb00 0242 	add.w	r2, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 8008c68:	0858      	lsrs	r0, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008c6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8008c6e:	d01a      	beq.n	8008ca6 <USB_ReadPMA+0x42>
{
 8008c70:	b4f0      	push	{r4, r5, r6, r7}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008c72:	4617      	mov	r7, r2
  for (i = n; i != 0U; i--)
 8008c74:	4606      	mov	r6, r0
 8008c76:	1c8d      	adds	r5, r1, #2
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008c78:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8008c7c:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8008c7e:	b2a4      	uxth	r4, r4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008c80:	ea4f 2c14 	mov.w	ip, r4, lsr #8
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008c84:	f805 4c02 	strb.w	r4, [r5, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008c88:	f805 cc01 	strb.w	ip, [r5, #-1]
 8008c8c:	f105 0502 	add.w	r5, r5, #2
  for (i = n; i != 0U; i--)
 8008c90:	d1f2      	bne.n	8008c78 <USB_ReadPMA+0x14>
  if ((wNBytes % 2U) != 0U)
  {
    temp = *pdwVal;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
  }
}
 8008c92:	bcf0      	pop	{r4, r5, r6, r7}
 8008c94:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8008c98:	eb02 0280 	add.w	r2, r2, r0, lsl #2
  if ((wNBytes % 2U) != 0U)
 8008c9c:	07d8      	lsls	r0, r3, #31
    temp = *pdwVal;
 8008c9e:	bf44      	itt	mi
 8008ca0:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008ca2:	700b      	strbmi	r3, [r1, #0]
}
 8008ca4:	4770      	bx	lr
  if ((wNBytes % 2U) != 0U)
 8008ca6:	07db      	lsls	r3, r3, #31
    temp = *pdwVal;
 8008ca8:	bf44      	itt	mi
 8008caa:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008cac:	700b      	strbmi	r3, [r1, #0]
 8008cae:	4770      	bx	lr

08008cb0 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008cb0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8008cb4:	b183      	cbz	r3, 8008cd8 <USBD_CDC_EP0_RxReady+0x28>
{
 8008cb6:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cb8:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008cbc:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8008cc0:	28ff      	cmp	r0, #255	; 0xff
 8008cc2:	d007      	beq.n	8008cd4 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8008cca:	4621      	mov	r1, r4
 8008ccc:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8008cce:	23ff      	movs	r3, #255	; 0xff
 8008cd0:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	bd10      	pop	{r4, pc}
 8008cd8:	2000      	movs	r0, #0
 8008cda:	4770      	bx	lr

08008cdc <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008cdc:	2343      	movs	r3, #67	; 0x43
 8008cde:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8008ce0:	4800      	ldr	r0, [pc, #0]	; (8008ce4 <USBD_CDC_GetFSCfgDesc+0x8>)
 8008ce2:	4770      	bx	lr
 8008ce4:	2000007c 	.word	0x2000007c

08008ce8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008ce8:	2343      	movs	r3, #67	; 0x43
 8008cea:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8008cec:	4800      	ldr	r0, [pc, #0]	; (8008cf0 <USBD_CDC_GetHSCfgDesc+0x8>)
 8008cee:	4770      	bx	lr
 8008cf0:	200000c0 	.word	0x200000c0

08008cf4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008cf4:	2343      	movs	r3, #67	; 0x43
 8008cf6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8008cf8:	4800      	ldr	r0, [pc, #0]	; (8008cfc <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8008cfa:	4770      	bx	lr
 8008cfc:	20000110 	.word	0x20000110

08008d00 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d00:	230a      	movs	r3, #10
 8008d02:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8008d04:	4800      	ldr	r0, [pc, #0]	; (8008d08 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8008d06:	4770      	bx	lr
 8008d08:	20000104 	.word	0x20000104

08008d0c <USBD_CDC_DataOut>:
{
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d10:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008d14:	f000 ffda 	bl	8009ccc <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8008d18:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008d1c:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8008d20:	b14b      	cbz	r3, 8008d36 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008d22:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8008d26:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8008d30:	4798      	blx	r3
    return USBD_OK;
 8008d32:	2000      	movs	r0, #0
}
 8008d34:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8008d36:	2002      	movs	r0, #2
}
 8008d38:	bd38      	pop	{r3, r4, r5, pc}
 8008d3a:	bf00      	nop

08008d3c <USBD_CDC_DataIn>:
{
 8008d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d3e:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8008d42:	b1d6      	cbz	r6, 8008d7a <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008d44:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8008d48:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008d4c:	69df      	ldr	r7, [r3, #28]
 8008d4e:	b14f      	cbz	r7, 8008d64 <USBD_CDC_DataIn+0x28>
 8008d50:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 8008d54:	eb02 1541 	add.w	r5, r2, r1, lsl #5
 8008d58:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8008d5a:	fbb7 f4f2 	udiv	r4, r7, r2
 8008d5e:	fb02 7414 	mls	r4, r2, r4, r7
 8008d62:	b11c      	cbz	r4, 8008d6c <USBD_CDC_DataIn+0x30>
      hcdc->TxState = 0U;
 8008d64:	2000      	movs	r0, #0
 8008d66:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
}
 8008d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8008d6c:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008d6e:	4622      	mov	r2, r4
 8008d70:	4623      	mov	r3, r4
 8008d72:	f000 ff8f 	bl	8009c94 <USBD_LL_Transmit>
    return USBD_OK;
 8008d76:	4620      	mov	r0, r4
}
 8008d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 8008d7a:	2002      	movs	r0, #2
}
 8008d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d7e:	bf00      	nop

08008d80 <USBD_CDC_Setup>:
{
 8008d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t ifalt = 0U;
 8008d84:	2700      	movs	r7, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d86:	780b      	ldrb	r3, [r1, #0]
{
 8008d88:	b082      	sub	sp, #8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d8a:	f013 0460 	ands.w	r4, r3, #96	; 0x60
{
 8008d8e:	460d      	mov	r5, r1
 8008d90:	4606      	mov	r6, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d92:	f8d0 82b8 	ldr.w	r8, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8008d96:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 8008d9a:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d9e:	d00f      	beq.n	8008dc0 <USBD_CDC_Setup+0x40>
 8008da0:	2c20      	cmp	r4, #32
 8008da2:	d117      	bne.n	8008dd4 <USBD_CDC_Setup+0x54>
      if (req->wLength)
 8008da4:	88cc      	ldrh	r4, [r1, #6]
 8008da6:	f891 c001 	ldrb.w	ip, [r1, #1]
 8008daa:	bb64      	cbnz	r4, 8008e06 <USBD_CDC_Setup+0x86>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008dac:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8008db0:	4622      	mov	r2, r4
 8008db2:	4660      	mov	r0, ip
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8008db8:	4620      	mov	r0, r4
}
 8008dba:	b002      	add	sp, #8
 8008dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      switch (req->bRequest)
 8008dc0:	784f      	ldrb	r7, [r1, #1]
 8008dc2:	2f0a      	cmp	r7, #10
 8008dc4:	d014      	beq.n	8008df0 <USBD_CDC_Setup+0x70>
 8008dc6:	2f0b      	cmp	r7, #11
 8008dc8:	d00c      	beq.n	8008de4 <USBD_CDC_Setup+0x64>
 8008dca:	b91f      	cbnz	r7, 8008dd4 <USBD_CDC_Setup+0x54>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dcc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008dd0:	2b03      	cmp	r3, #3
 8008dd2:	d028      	beq.n	8008e26 <USBD_CDC_Setup+0xa6>
          USBD_CtlError(pdev, req);
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	f000 fc9e 	bl	8009718 <USBD_CtlError>
          ret = USBD_FAIL;
 8008ddc:	2002      	movs	r0, #2
}
 8008dde:	b002      	add	sp, #8
 8008de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008de4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008de8:	2b03      	cmp	r3, #3
 8008dea:	d1f3      	bne.n	8008dd4 <USBD_CDC_Setup+0x54>
  uint8_t ret = USBD_OK;
 8008dec:	4620      	mov	r0, r4
 8008dee:	e7f6      	b.n	8008dde <USBD_CDC_Setup+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008df0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008df4:	2b03      	cmp	r3, #3
 8008df6:	d1ed      	bne.n	8008dd4 <USBD_CDC_Setup+0x54>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f10d 0105 	add.w	r1, sp, #5
 8008dfe:	f000 fcbd 	bl	800977c <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8008e02:	4620      	mov	r0, r4
 8008e04:	e7eb      	b.n	8008dde <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 8008e06:	061b      	lsls	r3, r3, #24
 8008e08:	d514      	bpl.n	8008e34 <USBD_CDC_Setup+0xb4>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e0a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8008e0e:	4622      	mov	r2, r4
 8008e10:	4660      	mov	r0, ip
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	4641      	mov	r1, r8
 8008e16:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e18:	88ea      	ldrh	r2, [r5, #6]
 8008e1a:	4641      	mov	r1, r8
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	f000 fcad 	bl	800977c <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8008e22:	4638      	mov	r0, r7
 8008e24:	e7db      	b.n	8008dde <USBD_CDC_Setup+0x5e>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008e26:	2202      	movs	r2, #2
 8008e28:	f10d 0106 	add.w	r1, sp, #6
 8008e2c:	f000 fca6 	bl	800977c <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8008e30:	4638      	mov	r0, r7
 8008e32:	e7d4      	b.n	8008dde <USBD_CDC_Setup+0x5e>
          hcdc->CmdOpCode = req->bRequest;
 8008e34:	f888 c200 	strb.w	ip, [r8, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008e38:	f888 4201 	strb.w	r4, [r8, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e3c:	4622      	mov	r2, r4
 8008e3e:	4641      	mov	r1, r8
 8008e40:	f000 fcb2 	bl	80097a8 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8008e44:	4638      	mov	r0, r7
 8008e46:	e7ca      	b.n	8008dde <USBD_CDC_Setup+0x5e>

08008e48 <USBD_CDC_DeInit>:
{
 8008e48:	b538      	push	{r3, r4, r5, lr}
 8008e4a:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008e4c:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008e4e:	2181      	movs	r1, #129	; 0x81
 8008e50:	f000 fed8 	bl	8009c04 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008e54:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008e56:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008e58:	4620      	mov	r0, r4
 8008e5a:	f000 fed3 	bl	8009c04 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008e5e:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008e62:	4620      	mov	r0, r4
 8008e64:	2182      	movs	r1, #130	; 0x82
 8008e66:	f000 fecd 	bl	8009c04 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8008e6a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008e6e:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8008e70:	b14b      	cbz	r3, 8008e86 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008e72:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008e7a:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8008e7e:	f000 ff2d 	bl	8009cdc <USBD_static_free>
    pdev->pClassData = NULL;
 8008e82:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8008e86:	2000      	movs	r0, #0
 8008e88:	bd38      	pop	{r3, r4, r5, pc}
 8008e8a:	bf00      	nop

08008e8c <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e8c:	7c03      	ldrb	r3, [r0, #16]
{
 8008e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e92:	4604      	mov	r4, r0
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008e94:	2501      	movs	r5, #1
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e96:	bbbb      	cbnz	r3, 8008f08 <USBD_CDC_Init+0x7c>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008e98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e9c:	2202      	movs	r2, #2
 8008e9e:	2181      	movs	r1, #129	; 0x81
 8008ea0:	f000 fea0 	bl	8009be4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ea4:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008eac:	2202      	movs	r2, #2
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f000 fe98 	bl	8009be4 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008eb4:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008eb8:	2701      	movs	r7, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008eba:	2308      	movs	r3, #8
 8008ebc:	2203      	movs	r2, #3
 8008ebe:	2182      	movs	r1, #130	; 0x82
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f000 fe8f 	bl	8009be4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008ec6:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008ec8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008ecc:	f000 ff02 	bl	8009cd4 <USBD_static_malloc>
 8008ed0:	4605      	mov	r5, r0
 8008ed2:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8008ed6:	b368      	cbz	r0, 8008f34 <USBD_CDC_Init+0xa8>
    hcdc->TxState = 0U;
 8008ed8:	2600      	movs	r6, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008eda:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ee2:	f894 8010 	ldrb.w	r8, [r4, #16]
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008ee6:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
    hcdc->TxState = 0U;
 8008eea:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008eee:	4639      	mov	r1, r7
    hcdc->RxState = 0U;
 8008ef0:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008ef4:	4620      	mov	r0, r4
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ef6:	f1b8 0f00 	cmp.w	r8, #0
 8008efa:	d014      	beq.n	8008f26 <USBD_CDC_Init+0x9a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008efc:	2340      	movs	r3, #64	; 0x40
 8008efe:	f000 fed7 	bl	8009cb0 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8008f02:	4630      	mov	r0, r6
}
 8008f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008f08:	2340      	movs	r3, #64	; 0x40
 8008f0a:	2202      	movs	r2, #2
 8008f0c:	2181      	movs	r1, #129	; 0x81
 8008f0e:	f000 fe69 	bl	8009be4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008f12:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008f14:	4629      	mov	r1, r5
 8008f16:	2340      	movs	r3, #64	; 0x40
 8008f18:	2202      	movs	r2, #2
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f000 fe62 	bl	8009be4 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008f20:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 8008f24:	e7c8      	b.n	8008eb8 <USBD_CDC_Init+0x2c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f2a:	f000 fec1 	bl	8009cb0 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8008f2e:	4640      	mov	r0, r8
}
 8008f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 8008f34:	4638      	mov	r0, r7
 8008f36:	e7e5      	b.n	8008f04 <USBD_CDC_Init+0x78>

08008f38 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8008f38:	b119      	cbz	r1, 8008f42 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8008f3a:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8008f3e:	2000      	movs	r0, #0
 8008f40:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8008f42:	2002      	movs	r0, #2
  }

  return ret;
}
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop

08008f48 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f48:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8008f4c:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8008f4e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008f52:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8008f56:	4770      	bx	lr

08008f58 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8008f58:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8008f5c:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8008f5e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8008f62:	4770      	bx	lr

08008f64 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f64:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  if (pdev->pClassData != NULL)
 8008f68:	b19a      	cbz	r2, 8008f92 <USBD_CDC_TransmitPacket+0x2e>
{
 8008f6a:	b538      	push	{r3, r4, r5, lr}
  {
    if (hcdc->TxState == 0U)
 8008f6c:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8008f70:	b10c      	cbz	r4, 8008f76 <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8008f72:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8008f74:	bd38      	pop	{r3, r4, r5, pc}
      hcdc->TxState = 1U;
 8008f76:	2501      	movs	r5, #1
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008f78:	f8d2 1210 	ldr.w	r1, [r2, #528]	; 0x210
      hcdc->TxState = 1U;
 8008f7c:	f8c2 5214 	str.w	r5, [r2, #532]	; 0x214
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008f80:	b28b      	uxth	r3, r1
 8008f82:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008f86:	6301      	str	r1, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008f88:	2181      	movs	r1, #129	; 0x81
 8008f8a:	f000 fe83 	bl	8009c94 <USBD_LL_Transmit>
      return USBD_OK;
 8008f8e:	4620      	mov	r0, r4
}
 8008f90:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8008f92:	2002      	movs	r0, #2
}
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop

08008f98 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f98:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008f9c:	b18a      	cbz	r2, 8008fc2 <USBD_CDC_ReceivePacket+0x2a>
{
 8008f9e:	b510      	push	{r4, lr}
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fa0:	7c04      	ldrb	r4, [r0, #16]
 8008fa2:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8008fa6:	b12c      	cbz	r4, 8008fb4 <USBD_CDC_ReceivePacket+0x1c>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008fa8:	2340      	movs	r3, #64	; 0x40
 8008faa:	2101      	movs	r1, #1
 8008fac:	f000 fe80 	bl	8009cb0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008fb0:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8008fb2:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8008fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fb8:	2101      	movs	r1, #1
 8008fba:	f000 fe79 	bl	8009cb0 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8008fbe:	4620      	mov	r0, r4
}
 8008fc0:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8008fc2:	2002      	movs	r0, #2
}
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop

08008fc8 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008fc8:	b188      	cbz	r0, 8008fee <USBD_Init+0x26>
{
 8008fca:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008fcc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008fd0:	b113      	cbz	r3, 8008fd8 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008fd8:	b109      	cbz	r1, 8008fde <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8008fda:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fde:	2301      	movs	r3, #1
  pdev->id = id;
 8008fe0:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fe2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008fe6:	f000 fdad 	bl	8009b44 <USBD_LL_Init>

  return USBD_OK;
 8008fea:	2000      	movs	r0, #0
}
 8008fec:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8008fee:	2002      	movs	r0, #2
}
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop

08008ff4 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8008ff4:	b119      	cbz	r1, 8008ffe <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008ff6:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008ffe:	2002      	movs	r0, #2
  }

  return status;
}
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop

08009004 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009004:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009006:	f000 fddf 	bl	8009bc8 <USBD_LL_Start>

  return USBD_OK;
}
 800900a:	2000      	movs	r0, #0
 800900c:	bd08      	pop	{r3, pc}
 800900e:	bf00      	nop

08009010 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009010:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8009012:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8009016:	b11b      	cbz	r3, 8009020 <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4798      	blx	r3
 800901c:	b900      	cbnz	r0, 8009020 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 800901e:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009020:	2002      	movs	r0, #2
}
 8009022:	bd08      	pop	{r3, pc}

08009024 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009024:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009026:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	4798      	blx	r3

  return USBD_OK;
}
 800902e:	2000      	movs	r0, #0
 8009030:	bd08      	pop	{r3, pc}
 8009032:	bf00      	nop

08009034 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009034:	b538      	push	{r3, r4, r5, lr}
 8009036:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009038:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 800903c:	4628      	mov	r0, r5
 800903e:	f000 fb57 	bl	80096f0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009042:	2001      	movs	r0, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8009044:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_data_len = pdev->request.wLength;
 8009048:	f8b4 22ae 	ldrh.w	r2, [r4, #686]	; 0x2ae
  switch (pdev->request.bmRequest & 0x1FU)
 800904c:	f001 031f 	and.w	r3, r1, #31
 8009050:	4283      	cmp	r3, r0
  pdev->ep0_state = USBD_EP0_SETUP;
 8009052:	f8c4 0294 	str.w	r0, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8009056:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800905a:	d015      	beq.n	8009088 <USBD_LL_SetupStage+0x54>
 800905c:	d30e      	bcc.n	800907c <USBD_LL_SetupStage+0x48>
 800905e:	2b02      	cmp	r3, #2
 8009060:	d006      	beq.n	8009070 <USBD_LL_SetupStage+0x3c>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009062:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8009066:	4620      	mov	r0, r4
 8009068:	f000 fdda 	bl	8009c20 <USBD_LL_StallEP>
      break;
  }

  return USBD_OK;
}
 800906c:	2000      	movs	r0, #0
 800906e:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdEPReq(pdev, &pdev->request);
 8009070:	4629      	mov	r1, r5
 8009072:	4620      	mov	r0, r4
 8009074:	f000 faa6 	bl	80095c4 <USBD_StdEPReq>
}
 8009078:	2000      	movs	r0, #0
 800907a:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdDevReq(pdev, &pdev->request);
 800907c:	4629      	mov	r1, r5
 800907e:	4620      	mov	r0, r4
 8009080:	f000 f8f6 	bl	8009270 <USBD_StdDevReq>
}
 8009084:	2000      	movs	r0, #0
 8009086:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8009088:	4629      	mov	r1, r5
 800908a:	4620      	mov	r0, r4
 800908c:	f000 fa6e 	bl	800956c <USBD_StdItfReq>
}
 8009090:	2000      	movs	r0, #0
 8009092:	bd38      	pop	{r3, r4, r5, pc}

08009094 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009094:	b570      	push	{r4, r5, r6, lr}
 8009096:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009098:	b941      	cbnz	r1, 80090ac <USBD_LL_DataOutStage+0x18>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800909a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800909e:	2b03      	cmp	r3, #3
 80090a0:	d00f      	beq.n	80090c2 <USBD_LL_DataOutStage+0x2e>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80090a2:	2b05      	cmp	r3, #5
 80090a4:	460c      	mov	r4, r1
 80090a6:	d02e      	beq.n	8009106 <USBD_LL_DataOutStage+0x72>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80090a8:	2000      	movs	r0, #0
}
 80090aa:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 80090ac:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80090b0:	699b      	ldr	r3, [r3, #24]
 80090b2:	b1c3      	cbz	r3, 80090e6 <USBD_LL_DataOutStage+0x52>
 80090b4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80090b8:	2a03      	cmp	r2, #3
 80090ba:	d114      	bne.n	80090e6 <USBD_LL_DataOutStage+0x52>
    pdev->pClass->DataOut(pdev, epnum);
 80090bc:	4798      	blx	r3
  return USBD_OK;
 80090be:	2000      	movs	r0, #0
}
 80090c0:	bd70      	pop	{r4, r5, r6, pc}
 80090c2:	4616      	mov	r6, r2
      if (pep->rem_length > pep->maxpacket)
 80090c4:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 80090c8:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d90c      	bls.n	80090ea <USBD_LL_DataOutStage+0x56>
        pep->rem_length -= pep->maxpacket;
 80090d0:	1a9b      	subs	r3, r3, r2
        USBD_CtlContinueRx(pdev, pdata,
 80090d2:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 80090d4:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 80090d8:	bf8c      	ite	hi
 80090da:	b29a      	uxthhi	r2, r3
 80090dc:	b292      	uxthls	r2, r2
 80090de:	4631      	mov	r1, r6
 80090e0:	f000 fb72 	bl	80097c8 <USBD_CtlContinueRx>
 80090e4:	e7e0      	b.n	80090a8 <USBD_LL_DataOutStage+0x14>
    return USBD_FAIL;
 80090e6:	2002      	movs	r0, #2
}
 80090e8:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80090ea:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	b123      	cbz	r3, 80090fc <USBD_LL_DataOutStage+0x68>
 80090f2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80090f6:	2a03      	cmp	r2, #3
 80090f8:	d100      	bne.n	80090fc <USBD_LL_DataOutStage+0x68>
          pdev->pClass->EP0_RxReady(pdev);
 80090fa:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80090fc:	4628      	mov	r0, r5
 80090fe:	f000 fb6b 	bl	80097d8 <USBD_CtlSendStatus>
  return USBD_OK;
 8009102:	2000      	movs	r0, #0
}
 8009104:	bd70      	pop	{r4, r5, r6, pc}
        pdev->ep0_state = USBD_EP0_IDLE;
 8009106:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800910a:	f000 fd89 	bl	8009c20 <USBD_LL_StallEP>
  return USBD_OK;
 800910e:	4620      	mov	r0, r4
}
 8009110:	bd70      	pop	{r4, r5, r6, pc}
 8009112:	bf00      	nop

08009114 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009114:	b570      	push	{r4, r5, r6, lr}
 8009116:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009118:	b981      	cbnz	r1, 800913c <USBD_LL_DataInStage+0x28>
 800911a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800911c:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8009120:	2a02      	cmp	r2, #2
 8009122:	d019      	beq.n	8009158 <USBD_LL_DataInStage+0x44>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009124:	f032 0304 	bics.w	r3, r2, #4
 8009128:	d102      	bne.n	8009130 <USBD_LL_DataInStage+0x1c>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800912a:	2180      	movs	r1, #128	; 0x80
 800912c:	f000 fd78 	bl	8009c20 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009130:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8009134:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 8009136:	2b01      	cmp	r3, #1
 8009138:	d00b      	beq.n	8009152 <USBD_LL_DataInStage+0x3e>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800913a:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 800913c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8009140:	695b      	ldr	r3, [r3, #20]
 8009142:	b363      	cbz	r3, 800919e <USBD_LL_DataInStage+0x8a>
 8009144:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8009148:	2a03      	cmp	r2, #3
 800914a:	d128      	bne.n	800919e <USBD_LL_DataInStage+0x8a>
    pdev->pClass->DataIn(pdev, epnum);
 800914c:	4798      	blx	r3
  return USBD_OK;
 800914e:	2000      	movs	r0, #0
}
 8009150:	bd70      	pop	{r4, r5, r6, pc}
      pdev->dev_test_mode = 0U;
 8009152:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
}
 8009156:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8009158:	e9d0 6208 	ldrd	r6, r2, [r0, #32]
 800915c:	4296      	cmp	r6, r2
 800915e:	d820      	bhi.n	80091a2 <USBD_LL_DataInStage+0x8e>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009160:	69c3      	ldr	r3, [r0, #28]
 8009162:	fbb3 f5f2 	udiv	r5, r3, r2
 8009166:	fb02 3515 	mls	r5, r2, r5, r3
 800916a:	b90d      	cbnz	r5, 8009170 <USBD_LL_DataInStage+0x5c>
 800916c:	429a      	cmp	r2, r3
 800916e:	d926      	bls.n	80091be <USBD_LL_DataInStage+0xaa>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009170:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	b12b      	cbz	r3, 8009184 <USBD_LL_DataInStage+0x70>
 8009178:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800917c:	2a03      	cmp	r2, #3
 800917e:	d101      	bne.n	8009184 <USBD_LL_DataInStage+0x70>
            pdev->pClass->EP0_TxSent(pdev);
 8009180:	4620      	mov	r0, r4
 8009182:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8009184:	2180      	movs	r1, #128	; 0x80
 8009186:	4620      	mov	r0, r4
 8009188:	f000 fd4a 	bl	8009c20 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800918c:	4620      	mov	r0, r4
 800918e:	f000 fb2f 	bl	80097f0 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 8009192:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
      pdev->dev_test_mode = 0U;
 8009196:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 8009198:	2b01      	cmp	r3, #1
 800919a:	d1ce      	bne.n	800913a <USBD_LL_DataInStage+0x26>
 800919c:	e7d9      	b.n	8009152 <USBD_LL_DataInStage+0x3e>
    return USBD_FAIL;
 800919e:	2002      	movs	r0, #2
}
 80091a0:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 80091a2:	1ab2      	subs	r2, r6, r2
 80091a4:	460d      	mov	r5, r1
 80091a6:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80091a8:	4619      	mov	r1, r3
 80091aa:	b292      	uxth	r2, r2
 80091ac:	f000 faf4 	bl	8009798 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091b0:	462b      	mov	r3, r5
 80091b2:	462a      	mov	r2, r5
 80091b4:	4629      	mov	r1, r5
 80091b6:	4620      	mov	r0, r4
 80091b8:	f000 fd7a 	bl	8009cb0 <USBD_LL_PrepareReceive>
 80091bc:	e7b8      	b.n	8009130 <USBD_LL_DataInStage+0x1c>
            (pep->total_length >= pep->maxpacket) &&
 80091be:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d2d4      	bcs.n	8009170 <USBD_LL_DataInStage+0x5c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80091c6:	462a      	mov	r2, r5
 80091c8:	f000 fae6 	bl	8009798 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80091cc:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 80091d0:	e7ee      	b.n	80091b0 <USBD_LL_DataInStage+0x9c>
 80091d2:	bf00      	nop

080091d4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80091d4:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091d6:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80091d8:	2640      	movs	r6, #64	; 0x40
{
 80091da:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80091dc:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091de:	4611      	mov	r1, r2
 80091e0:	4633      	mov	r3, r6
 80091e2:	f000 fcff 	bl	8009be4 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091e6:	4633      	mov	r3, r6
 80091e8:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80091ea:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80091ee:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091f2:	4620      	mov	r0, r4
 80091f4:	2200      	movs	r2, #0
 80091f6:	f000 fcf5 	bl	8009be4 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 80091fa:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80091fc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009200:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009202:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009204:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009208:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 800920c:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800920e:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8009212:	b123      	cbz	r3, 800921e <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009214:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8009218:	4620      	mov	r0, r4
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	4798      	blx	r3
  }

  return USBD_OK;
}
 800921e:	2000      	movs	r0, #0
 8009220:	bd70      	pop	{r4, r5, r6, pc}
 8009222:	bf00      	nop

08009224 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8009224:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8009226:	2000      	movs	r0, #0
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop

0800922c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800922c:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800922e:	2204      	movs	r2, #4
  pdev->dev_old_state =  pdev->dev_state;
 8009230:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8009234:	2000      	movs	r0, #0
  pdev->dev_old_state =  pdev->dev_state;
 8009236:	f883 129d 	strb.w	r1, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800923a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
}
 800923e:	4770      	bx	lr

08009240 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009240:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009244:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8009246:	bf04      	itt	eq
 8009248:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 800924c:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8009250:	2000      	movs	r0, #0
 8009252:	4770      	bx	lr

08009254 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009254:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8009258:	2a03      	cmp	r2, #3
 800925a:	d001      	beq.n	8009260 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 800925c:	2000      	movs	r0, #0
 800925e:	4770      	bx	lr
{
 8009260:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 8009262:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8009266:	69db      	ldr	r3, [r3, #28]
 8009268:	b103      	cbz	r3, 800926c <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 800926a:	4798      	blx	r3
}
 800926c:	2000      	movs	r0, #0
 800926e:	bd08      	pop	{r3, pc}

08009270 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009270:	b530      	push	{r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009272:	780b      	ldrb	r3, [r1, #0]
{
 8009274:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009276:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800927a:	2b20      	cmp	r3, #32
{
 800927c:	460d      	mov	r5, r1
 800927e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009280:	d028      	beq.n	80092d4 <USBD_StdDevReq+0x64>
 8009282:	2b40      	cmp	r3, #64	; 0x40
 8009284:	d026      	beq.n	80092d4 <USBD_StdDevReq+0x64>
 8009286:	b153      	cbz	r3, 800929e <USBD_StdDevReq+0x2e>
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8009288:	2180      	movs	r1, #128	; 0x80
 800928a:	4620      	mov	r0, r4
 800928c:	f000 fcc8 	bl	8009c20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009290:	4620      	mov	r0, r4
 8009292:	2100      	movs	r1, #0
 8009294:	f000 fcc4 	bl	8009c20 <USBD_LL_StallEP>
}
 8009298:	2000      	movs	r0, #0
 800929a:	b003      	add	sp, #12
 800929c:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 800929e:	784b      	ldrb	r3, [r1, #1]
 80092a0:	2b09      	cmp	r3, #9
 80092a2:	d8f1      	bhi.n	8009288 <USBD_StdDevReq+0x18>
 80092a4:	a201      	add	r2, pc, #4	; (adr r2, 80092ac <USBD_StdDevReq+0x3c>)
 80092a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092aa:	bf00      	nop
 80092ac:	08009329 	.word	0x08009329
 80092b0:	08009355 	.word	0x08009355
 80092b4:	08009289 	.word	0x08009289
 80092b8:	08009371 	.word	0x08009371
 80092bc:	08009289 	.word	0x08009289
 80092c0:	0800937d 	.word	0x0800937d
 80092c4:	080093bb 	.word	0x080093bb
 80092c8:	08009289 	.word	0x08009289
 80092cc:	080093f1 	.word	0x080093f1
 80092d0:	080092e7 	.word	0x080092e7
      pdev->pClass->Setup(pdev, req);
 80092d4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80092d8:	4629      	mov	r1, r5
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	4620      	mov	r0, r4
 80092de:	4798      	blx	r3
}
 80092e0:	2000      	movs	r0, #0
 80092e2:	b003      	add	sp, #12
 80092e4:	bd30      	pop	{r4, r5, pc}
  cfgidx = (uint8_t)(req->wValue);
 80092e6:	7889      	ldrb	r1, [r1, #2]
 80092e8:	4d9f      	ldr	r5, [pc, #636]	; (8009568 <USBD_StdDevReq+0x2f8>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80092ea:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80092ec:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80092ee:	d8cb      	bhi.n	8009288 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 80092f0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	f000 810d 	beq.w	8009514 <USBD_StdDevReq+0x2a4>
 80092fa:	2b03      	cmp	r3, #3
 80092fc:	f040 80fe 	bne.w	80094fc <USBD_StdDevReq+0x28c>
        if (cfgidx == 0U)
 8009300:	2900      	cmp	r1, #0
 8009302:	f000 8127 	beq.w	8009554 <USBD_StdDevReq+0x2e4>
        else if (cfgidx != pdev->dev_config)
 8009306:	6841      	ldr	r1, [r0, #4]
 8009308:	2901      	cmp	r1, #1
 800930a:	d009      	beq.n	8009320 <USBD_StdDevReq+0xb0>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800930c:	b2c9      	uxtb	r1, r1
 800930e:	f7ff fe89 	bl	8009024 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009312:	7829      	ldrb	r1, [r5, #0]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009314:	4620      	mov	r0, r4
          pdev->dev_config = cfgidx;
 8009316:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009318:	f7ff fe7a 	bl	8009010 <USBD_SetClassConfig>
 800931c:	2802      	cmp	r0, #2
 800931e:	d0b3      	beq.n	8009288 <USBD_StdDevReq+0x18>
    USBD_CtlSendStatus(pdev);
 8009320:	4620      	mov	r0, r4
 8009322:	f000 fa59 	bl	80097d8 <USBD_CtlSendStatus>
 8009326:	e7b7      	b.n	8009298 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 8009328:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800932c:	2203      	movs	r2, #3
 800932e:	3b01      	subs	r3, #1
 8009330:	2b02      	cmp	r3, #2
 8009332:	d8a9      	bhi.n	8009288 <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 8009334:	88cb      	ldrh	r3, [r1, #6]
 8009336:	2b02      	cmp	r3, #2
 8009338:	d1a6      	bne.n	8009288 <USBD_StdDevReq+0x18>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800933a:	2101      	movs	r1, #1
      if (pdev->dev_remote_wakeup)
 800933c:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009340:	60c1      	str	r1, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8009342:	b103      	cbz	r3, 8009346 <USBD_StdDevReq+0xd6>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009344:	60c2      	str	r2, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009346:	2202      	movs	r2, #2
 8009348:	f104 010c 	add.w	r1, r4, #12
 800934c:	4620      	mov	r0, r4
 800934e:	f000 fa15 	bl	800977c <USBD_CtlSendData>
 8009352:	e7a1      	b.n	8009298 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 8009354:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009358:	3b01      	subs	r3, #1
 800935a:	2b02      	cmp	r3, #2
 800935c:	d894      	bhi.n	8009288 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800935e:	884b      	ldrh	r3, [r1, #2]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d199      	bne.n	8009298 <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 8009364:	2300      	movs	r3, #0
 8009366:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800936a:	f000 fa35 	bl	80097d8 <USBD_CtlSendStatus>
 800936e:	e793      	b.n	8009298 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009370:	884b      	ldrh	r3, [r1, #2]
 8009372:	2b01      	cmp	r3, #1
 8009374:	d190      	bne.n	8009298 <USBD_StdDevReq+0x28>
    pdev->dev_remote_wakeup = 1U;
 8009376:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
 800937a:	e7d1      	b.n	8009320 <USBD_StdDevReq+0xb0>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800937c:	888b      	ldrh	r3, [r1, #4]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d182      	bne.n	8009288 <USBD_StdDevReq+0x18>
 8009382:	88cb      	ldrh	r3, [r1, #6]
 8009384:	2b00      	cmp	r3, #0
 8009386:	f47f af7f 	bne.w	8009288 <USBD_StdDevReq+0x18>
 800938a:	884d      	ldrh	r5, [r1, #2]
 800938c:	2d7f      	cmp	r5, #127	; 0x7f
 800938e:	f63f af7b 	bhi.w	8009288 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009392:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009396:	2b03      	cmp	r3, #3
 8009398:	f43f af76 	beq.w	8009288 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800939c:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800939e:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80093a2:	f000 fc69 	bl	8009c78 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80093a6:	4620      	mov	r0, r4
 80093a8:	f000 fa16 	bl	80097d8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80093ac:	2d00      	cmp	r5, #0
 80093ae:	f000 80cd 	beq.w	800954c <USBD_StdDevReq+0x2dc>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80093b2:	2302      	movs	r3, #2
 80093b4:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80093b8:	e76e      	b.n	8009298 <USBD_StdDevReq+0x28>
  uint16_t len = 0U;
 80093ba:	2300      	movs	r3, #0
          USBD_GetDescriptor(pdev, req);
 80093bc:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 80093be:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80093c2:	0a13      	lsrs	r3, r2, #8
 80093c4:	3b01      	subs	r3, #1
 80093c6:	2b06      	cmp	r3, #6
 80093c8:	f63f af5e 	bhi.w	8009288 <USBD_StdDevReq+0x18>
 80093cc:	a101      	add	r1, pc, #4	; (adr r1, 80093d4 <USBD_StdDevReq+0x164>)
 80093ce:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093d2:	bf00      	nop
 80093d4:	08009489 	.word	0x08009489
 80093d8:	08009471 	.word	0x08009471
 80093dc:	08009499 	.word	0x08009499
 80093e0:	08009289 	.word	0x08009289
 80093e4:	08009289 	.word	0x08009289
 80093e8:	0800945b 	.word	0x0800945b
 80093ec:	08009417 	.word	0x08009417
  if (req->wLength != 1U)
 80093f0:	88ca      	ldrh	r2, [r1, #6]
 80093f2:	2a01      	cmp	r2, #1
 80093f4:	f47f af48 	bne.w	8009288 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 80093f8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f43f af43 	beq.w	8009288 <USBD_StdDevReq+0x18>
 8009402:	2b02      	cmp	r3, #2
 8009404:	f240 8094 	bls.w	8009530 <USBD_StdDevReq+0x2c0>
 8009408:	2b03      	cmp	r3, #3
 800940a:	f47f af3d 	bne.w	8009288 <USBD_StdDevReq+0x18>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800940e:	1d01      	adds	r1, r0, #4
 8009410:	f000 f9b4 	bl	800977c <USBD_CtlSendData>
 8009414:	e740      	b.n	8009298 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009416:	7c03      	ldrb	r3, [r0, #16]
 8009418:	2b00      	cmp	r3, #0
 800941a:	f47f af35 	bne.w	8009288 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800941e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8009422:	f10d 0006 	add.w	r0, sp, #6
 8009426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009428:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800942a:	2307      	movs	r3, #7
 800942c:	7043      	strb	r3, [r0, #1]
    if ((len != 0U) && (req->wLength != 0U))
 800942e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009432:	88ea      	ldrh	r2, [r5, #6]
 8009434:	b16b      	cbz	r3, 8009452 <USBD_StdDevReq+0x1e2>
 8009436:	2a00      	cmp	r2, #0
 8009438:	f43f af72 	beq.w	8009320 <USBD_StdDevReq+0xb0>
      len = MIN(len, req->wLength);
 800943c:	4293      	cmp	r3, r2
 800943e:	bf28      	it	cs
 8009440:	4613      	movcs	r3, r2
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009442:	4601      	mov	r1, r0
 8009444:	461a      	mov	r2, r3
 8009446:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8009448:	f8ad 3006 	strh.w	r3, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800944c:	f000 f996 	bl	800977c <USBD_CtlSendData>
 8009450:	88ea      	ldrh	r2, [r5, #6]
    if (req->wLength == 0U)
 8009452:	2a00      	cmp	r2, #0
 8009454:	f47f af20 	bne.w	8009298 <USBD_StdDevReq+0x28>
 8009458:	e762      	b.n	8009320 <USBD_StdDevReq+0xb0>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800945a:	7c03      	ldrb	r3, [r0, #16]
 800945c:	2b00      	cmp	r3, #0
 800945e:	f47f af13 	bne.w	8009288 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009462:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8009466:	f10d 0006 	add.w	r0, sp, #6
 800946a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800946c:	4798      	blx	r3
 800946e:	e7de      	b.n	800942e <USBD_StdDevReq+0x1be>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009470:	7c02      	ldrb	r2, [r0, #16]
 8009472:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8009476:	2a00      	cmp	r2, #0
 8009478:	d161      	bne.n	800953e <USBD_StdDevReq+0x2ce>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800947a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800947c:	f10d 0006 	add.w	r0, sp, #6
 8009480:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009482:	2302      	movs	r3, #2
 8009484:	7043      	strb	r3, [r0, #1]
 8009486:	e7d2      	b.n	800942e <USBD_StdDevReq+0x1be>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009488:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800948c:	f10d 0106 	add.w	r1, sp, #6
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	7c00      	ldrb	r0, [r0, #16]
 8009494:	4798      	blx	r3
 8009496:	e7ca      	b.n	800942e <USBD_StdDevReq+0x1be>
      switch ((uint8_t)(req->wValue))
 8009498:	b2d2      	uxtb	r2, r2
 800949a:	2a05      	cmp	r2, #5
 800949c:	f63f aef4 	bhi.w	8009288 <USBD_StdDevReq+0x18>
 80094a0:	e8df f002 	tbb	[pc, r2]
 80094a4:	141a2026 	.word	0x141a2026
 80094a8:	030e      	.short	0x030e
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80094aa:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f43f aee9 	beq.w	8009288 <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80094b6:	f10d 0106 	add.w	r1, sp, #6
 80094ba:	7c20      	ldrb	r0, [r4, #16]
 80094bc:	4798      	blx	r3
 80094be:	e7b6      	b.n	800942e <USBD_StdDevReq+0x1be>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80094c0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1f5      	bne.n	80094b6 <USBD_StdDevReq+0x246>
 80094ca:	e6dd      	b.n	8009288 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80094cc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1ef      	bne.n	80094b6 <USBD_StdDevReq+0x246>
 80094d6:	e6d7      	b.n	8009288 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80094d8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1e9      	bne.n	80094b6 <USBD_StdDevReq+0x246>
 80094e2:	e6d1      	b.n	8009288 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80094e4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d1e3      	bne.n	80094b6 <USBD_StdDevReq+0x246>
 80094ee:	e6cb      	b.n	8009288 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80094f0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1dd      	bne.n	80094b6 <USBD_StdDevReq+0x246>
 80094fa:	e6c5      	b.n	8009288 <USBD_StdDevReq+0x18>
  USBD_LL_StallEP(pdev, 0x80U);
 80094fc:	2180      	movs	r1, #128	; 0x80
 80094fe:	f000 fb8f 	bl	8009c20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009502:	2100      	movs	r1, #0
 8009504:	4620      	mov	r0, r4
 8009506:	f000 fb8b 	bl	8009c20 <USBD_LL_StallEP>
        USBD_ClrClassConfig(pdev, cfgidx);
 800950a:	7829      	ldrb	r1, [r5, #0]
 800950c:	4620      	mov	r0, r4
 800950e:	f7ff fd89 	bl	8009024 <USBD_ClrClassConfig>
 8009512:	e6c1      	b.n	8009298 <USBD_StdDevReq+0x28>
        if (cfgidx)
 8009514:	2900      	cmp	r1, #0
 8009516:	f43f af03 	beq.w	8009320 <USBD_StdDevReq+0xb0>
          pdev->dev_config = cfgidx;
 800951a:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800951c:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 800951e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009520:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009524:	f7ff fd74 	bl	8009010 <USBD_SetClassConfig>
 8009528:	2802      	cmp	r0, #2
 800952a:	f47f aef9 	bne.w	8009320 <USBD_StdDevReq+0xb0>
 800952e:	e6ab      	b.n	8009288 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 8009530:	2300      	movs	r3, #0
 8009532:	4601      	mov	r1, r0
 8009534:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009538:	f000 f920 	bl	800977c <USBD_CtlSendData>
 800953c:	e6ac      	b.n	8009298 <USBD_StdDevReq+0x28>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800953e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009540:	f10d 0006 	add.w	r0, sp, #6
 8009544:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009546:	2302      	movs	r3, #2
 8009548:	7043      	strb	r3, [r0, #1]
 800954a:	e770      	b.n	800942e <USBD_StdDevReq+0x1be>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800954c:	2301      	movs	r3, #1
 800954e:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8009552:	e6a1      	b.n	8009298 <USBD_StdDevReq+0x28>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009554:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8009556:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009558:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 800955c:	f7ff fd62 	bl	8009024 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009560:	4620      	mov	r0, r4
 8009562:	f000 f939 	bl	80097d8 <USBD_CtlSendStatus>
 8009566:	e697      	b.n	8009298 <USBD_StdDevReq+0x28>
 8009568:	200003c4 	.word	0x200003c4

0800956c <USBD_StdItfReq>:
{
 800956c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800956e:	780b      	ldrb	r3, [r1, #0]
{
 8009570:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009572:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009576:	2b20      	cmp	r3, #32
{
 8009578:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800957a:	d00c      	beq.n	8009596 <USBD_StdItfReq+0x2a>
 800957c:	2b40      	cmp	r3, #64	; 0x40
 800957e:	d00a      	beq.n	8009596 <USBD_StdItfReq+0x2a>
 8009580:	b14b      	cbz	r3, 8009596 <USBD_StdItfReq+0x2a>
  USBD_LL_StallEP(pdev, 0x80U);
 8009582:	2180      	movs	r1, #128	; 0x80
 8009584:	4620      	mov	r0, r4
 8009586:	f000 fb4b 	bl	8009c20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800958a:	4620      	mov	r0, r4
 800958c:	2100      	movs	r1, #0
 800958e:	f000 fb47 	bl	8009c20 <USBD_LL_StallEP>
}
 8009592:	2000      	movs	r0, #0
 8009594:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8009596:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800959a:	3b01      	subs	r3, #1
 800959c:	2b02      	cmp	r3, #2
 800959e:	d8f0      	bhi.n	8009582 <USBD_StdItfReq+0x16>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80095a0:	792b      	ldrb	r3, [r5, #4]
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d8ed      	bhi.n	8009582 <USBD_StdItfReq+0x16>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095a6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80095aa:	4629      	mov	r1, r5
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	4620      	mov	r0, r4
 80095b0:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80095b2:	88eb      	ldrh	r3, [r5, #6]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1ec      	bne.n	8009592 <USBD_StdItfReq+0x26>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	d1ea      	bne.n	8009592 <USBD_StdItfReq+0x26>
              USBD_CtlSendStatus(pdev);
 80095bc:	4620      	mov	r0, r4
 80095be:	f000 f90b 	bl	80097d8 <USBD_CtlSendStatus>
 80095c2:	e7e6      	b.n	8009592 <USBD_StdItfReq+0x26>

080095c4 <USBD_StdEPReq>:
{
 80095c4:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095c6:	780b      	ldrb	r3, [r1, #0]
{
 80095c8:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095ce:	2b20      	cmp	r3, #32
 80095d0:	d00c      	beq.n	80095ec <USBD_StdEPReq+0x28>
 80095d2:	2b40      	cmp	r3, #64	; 0x40
 80095d4:	d00a      	beq.n	80095ec <USBD_StdEPReq+0x28>
 80095d6:	b183      	cbz	r3, 80095fa <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev, 0x80U);
 80095d8:	2180      	movs	r1, #128	; 0x80
 80095da:	4620      	mov	r0, r4
 80095dc:	f000 fb20 	bl	8009c20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80095e0:	4620      	mov	r0, r4
 80095e2:	2100      	movs	r1, #0
 80095e4:	f000 fb1c 	bl	8009c20 <USBD_LL_StallEP>
}
 80095e8:	2000      	movs	r0, #0
 80095ea:	bd70      	pop	{r4, r5, r6, pc}
      pdev->pClass->Setup(pdev, req);
 80095ec:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80095f0:	4620      	mov	r0, r4
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	4798      	blx	r3
}
 80095f6:	2000      	movs	r0, #0
 80095f8:	bd70      	pop	{r4, r5, r6, pc}
      switch (req->bRequest)
 80095fa:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80095fc:	888a      	ldrh	r2, [r1, #4]
      switch (req->bRequest)
 80095fe:	2b01      	cmp	r3, #1
  ep_addr  = LOBYTE(req->wIndex);
 8009600:	b2d5      	uxtb	r5, r2
      switch (req->bRequest)
 8009602:	d03e      	beq.n	8009682 <USBD_StdEPReq+0xbe>
 8009604:	d314      	bcc.n	8009630 <USBD_StdEPReq+0x6c>
 8009606:	2b03      	cmp	r3, #3
 8009608:	d1e6      	bne.n	80095d8 <USBD_StdEPReq+0x14>
          switch (pdev->dev_state)
 800960a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800960e:	2b02      	cmp	r3, #2
 8009610:	d046      	beq.n	80096a0 <USBD_StdEPReq+0xdc>
 8009612:	2b03      	cmp	r3, #3
 8009614:	d1e0      	bne.n	80095d8 <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009616:	884b      	ldrh	r3, [r1, #2]
 8009618:	b933      	cbnz	r3, 8009628 <USBD_StdEPReq+0x64>
                if ((ep_addr != 0x00U) &&
 800961a:	066a      	lsls	r2, r5, #25
 800961c:	d004      	beq.n	8009628 <USBD_StdEPReq+0x64>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800961e:	88cb      	ldrh	r3, [r1, #6]
 8009620:	b913      	cbnz	r3, 8009628 <USBD_StdEPReq+0x64>
                  USBD_LL_StallEP(pdev, ep_addr);
 8009622:	4629      	mov	r1, r5
 8009624:	f000 fafc 	bl	8009c20 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8009628:	4620      	mov	r0, r4
 800962a:	f000 f8d5 	bl	80097d8 <USBD_CtlSendStatus>
              break;
 800962e:	e7db      	b.n	80095e8 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 8009630:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009634:	2b02      	cmp	r3, #2
 8009636:	d03d      	beq.n	80096b4 <USBD_StdEPReq+0xf0>
 8009638:	2b03      	cmp	r3, #3
 800963a:	d1cd      	bne.n	80095d8 <USBD_StdEPReq+0x14>
 800963c:	f005 030f 	and.w	r3, r5, #15
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009640:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8009644:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009646:	eb00 0383 	add.w	r3, r0, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800964a:	d442      	bmi.n	80096d2 <USBD_StdEPReq+0x10e>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800964c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8009650:	2b00      	cmp	r3, #0
 8009652:	d0c1      	beq.n	80095d8 <USBD_StdEPReq+0x14>
 8009654:	f005 037f 	and.w	r3, r5, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009658:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 800965c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8009660:	f506 76aa 	add.w	r6, r6, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009664:	b133      	cbz	r3, 8009674 <USBD_StdEPReq+0xb0>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009666:	4629      	mov	r1, r5
 8009668:	4620      	mov	r0, r4
 800966a:	f000 faf5 	bl	8009c58 <USBD_LL_IsStallEP>
 800966e:	2800      	cmp	r0, #0
 8009670:	d03b      	beq.n	80096ea <USBD_StdEPReq+0x126>
                pep->status = 0x0001U;
 8009672:	2301      	movs	r3, #1
 8009674:	6033      	str	r3, [r6, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009676:	4631      	mov	r1, r6
 8009678:	4620      	mov	r0, r4
 800967a:	2202      	movs	r2, #2
 800967c:	f000 f87e 	bl	800977c <USBD_CtlSendData>
              break;
 8009680:	e7b2      	b.n	80095e8 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 8009682:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009686:	2b02      	cmp	r3, #2
 8009688:	d00a      	beq.n	80096a0 <USBD_StdEPReq+0xdc>
 800968a:	2b03      	cmp	r3, #3
 800968c:	d1a4      	bne.n	80095d8 <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800968e:	884b      	ldrh	r3, [r1, #2]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d1a9      	bne.n	80095e8 <USBD_StdEPReq+0x24>
                if ((ep_addr & 0x7FU) != 0x00U)
 8009694:	066e      	lsls	r6, r5, #25
 8009696:	d0c7      	beq.n	8009628 <USBD_StdEPReq+0x64>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009698:	4629      	mov	r1, r5
 800969a:	f000 facf 	bl	8009c3c <USBD_LL_ClearStallEP>
 800969e:	e7c3      	b.n	8009628 <USBD_StdEPReq+0x64>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096a0:	066b      	lsls	r3, r5, #25
 80096a2:	d099      	beq.n	80095d8 <USBD_StdEPReq+0x14>
                USBD_LL_StallEP(pdev, ep_addr);
 80096a4:	4629      	mov	r1, r5
 80096a6:	f000 fabb 	bl	8009c20 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80096aa:	4620      	mov	r0, r4
 80096ac:	2180      	movs	r1, #128	; 0x80
 80096ae:	f000 fab7 	bl	8009c20 <USBD_LL_StallEP>
 80096b2:	e799      	b.n	80095e8 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096b4:	0668      	lsls	r0, r5, #25
 80096b6:	d18f      	bne.n	80095d8 <USBD_StdEPReq+0x14>
              pep->status = 0x0000U;
 80096b8:	2300      	movs	r3, #0
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096ba:	0611      	lsls	r1, r2, #24
 80096bc:	bf4c      	ite	mi
 80096be:	f104 0114 	addmi.w	r1, r4, #20
 80096c2:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80096c6:	4620      	mov	r0, r4
              pep->status = 0x0000U;
 80096c8:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80096ca:	2202      	movs	r2, #2
 80096cc:	f000 f856 	bl	800977c <USBD_CtlSendData>
              break;
 80096d0:	e78a      	b.n	80095e8 <USBD_StdEPReq+0x24>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f43f af7f 	beq.w	80095d8 <USBD_StdEPReq+0x14>
 80096da:	f005 037f 	and.w	r3, r5, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096de:	1c5e      	adds	r6, r3, #1
 80096e0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80096e4:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80096e8:	e7bc      	b.n	8009664 <USBD_StdEPReq+0xa0>
                pep->status = 0x0000U;
 80096ea:	6030      	str	r0, [r6, #0]
 80096ec:	e7c3      	b.n	8009676 <USBD_StdEPReq+0xb2>
 80096ee:	bf00      	nop

080096f0 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 80096f0:	780b      	ldrb	r3, [r1, #0]
 80096f2:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80096f4:	784b      	ldrb	r3, [r1, #1]
 80096f6:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80096f8:	78ca      	ldrb	r2, [r1, #3]
 80096fa:	788b      	ldrb	r3, [r1, #2]
 80096fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009700:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009702:	794a      	ldrb	r2, [r1, #5]
 8009704:	790b      	ldrb	r3, [r1, #4]
 8009706:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800970a:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800970c:	79ca      	ldrb	r2, [r1, #7]
 800970e:	798b      	ldrb	r3, [r1, #6]
 8009710:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009714:	80c3      	strh	r3, [r0, #6]
}
 8009716:	4770      	bx	lr

08009718 <USBD_CtlError>:
{
 8009718:	b510      	push	{r4, lr}
 800971a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800971c:	2180      	movs	r1, #128	; 0x80
 800971e:	f000 fa7f 	bl	8009c20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009722:	4620      	mov	r0, r4
}
 8009724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8009728:	2100      	movs	r1, #0
 800972a:	f000 ba79 	b.w	8009c20 <USBD_LL_StallEP>
 800972e:	bf00      	nop

08009730 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 8009730:	b300      	cbz	r0, 8009774 <USBD_GetString+0x44>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8009732:	7803      	ldrb	r3, [r0, #0]
{
 8009734:	b430      	push	{r4, r5}
  while (*buf != '\0')
 8009736:	b1f3      	cbz	r3, 8009776 <USBD_GetString+0x46>
 8009738:	4604      	mov	r4, r0
  uint8_t  len = 0U;
 800973a:	2300      	movs	r3, #0
  while (*buf != '\0')
 800973c:	f814 5f01 	ldrb.w	r5, [r4, #1]!
  {
    len++;
 8009740:	3301      	adds	r3, #1
 8009742:	b2db      	uxtb	r3, r3
  while (*buf != '\0')
 8009744:	2d00      	cmp	r5, #0
 8009746:	d1f9      	bne.n	800973c <USBD_GetString+0xc>
 8009748:	005b      	lsls	r3, r3, #1
 800974a:	3302      	adds	r3, #2
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800974c:	2403      	movs	r4, #3
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800974e:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009750:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009752:	704c      	strb	r4, [r1, #1]
    while (*desc != '\0')
 8009754:	7804      	ldrb	r4, [r0, #0]
 8009756:	b15c      	cbz	r4, 8009770 <USBD_GetString+0x40>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009758:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 800975a:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 800975c:	1c5a      	adds	r2, r3, #1
 800975e:	b2d2      	uxtb	r2, r2
 8009760:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 8009762:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 8009764:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 8009768:	3302      	adds	r3, #2
 800976a:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 800976c:	2c00      	cmp	r4, #0
 800976e:	d1f5      	bne.n	800975c <USBD_GetString+0x2c>
}
 8009770:	bc30      	pop	{r4, r5}
 8009772:	4770      	bx	lr
 8009774:	4770      	bx	lr
  while (*buf != '\0')
 8009776:	2302      	movs	r3, #2
 8009778:	e7e8      	b.n	800974c <USBD_GetString+0x1c>
 800977a:	bf00      	nop

0800977c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800977c:	b538      	push	{r3, r4, r5, lr}
 800977e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009780:	2502      	movs	r5, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009782:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8009784:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009788:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800978c:	2100      	movs	r1, #0
 800978e:	f000 fa81 	bl	8009c94 <USBD_LL_Transmit>

  return USBD_OK;
}
 8009792:	2000      	movs	r0, #0
 8009794:	bd38      	pop	{r3, r4, r5, pc}
 8009796:	bf00      	nop

08009798 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009798:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800979a:	4613      	mov	r3, r2
 800979c:	460a      	mov	r2, r1
 800979e:	2100      	movs	r1, #0
 80097a0:	f000 fa78 	bl	8009c94 <USBD_LL_Transmit>

  return USBD_OK;
}
 80097a4:	2000      	movs	r0, #0
 80097a6:	bd08      	pop	{r3, pc}

080097a8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80097a8:	b538      	push	{r3, r4, r5, lr}
 80097aa:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80097ac:	2503      	movs	r5, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097ae:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
 80097b0:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80097b4:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80097b8:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097bc:	2100      	movs	r1, #0
 80097be:	f000 fa77 	bl	8009cb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80097c2:	2000      	movs	r0, #0
 80097c4:	bd38      	pop	{r3, r4, r5, pc}
 80097c6:	bf00      	nop

080097c8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80097c8:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097ca:	4613      	mov	r3, r2
 80097cc:	460a      	mov	r2, r1
 80097ce:	2100      	movs	r1, #0
 80097d0:	f000 fa6e 	bl	8009cb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80097d4:	2000      	movs	r0, #0
 80097d6:	bd08      	pop	{r3, pc}

080097d8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80097d8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80097da:	2204      	movs	r2, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80097dc:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80097de:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80097e2:	4619      	mov	r1, r3
 80097e4:	461a      	mov	r2, r3
 80097e6:	f000 fa55 	bl	8009c94 <USBD_LL_Transmit>

  return USBD_OK;
}
 80097ea:	2000      	movs	r0, #0
 80097ec:	bd08      	pop	{r3, pc}
 80097ee:	bf00      	nop

080097f0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80097f0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80097f2:	2205      	movs	r2, #5

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097f4:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80097f6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097fa:	4619      	mov	r1, r3
 80097fc:	461a      	mov	r2, r3
 80097fe:	f000 fa57 	bl	8009cb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8009802:	2000      	movs	r0, #0
 8009804:	bd08      	pop	{r3, pc}
 8009806:	bf00      	nop

08009808 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009808:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800980a:	2200      	movs	r2, #0
 800980c:	4910      	ldr	r1, [pc, #64]	; (8009850 <MX_USB_DEVICE_Init+0x48>)
 800980e:	4811      	ldr	r0, [pc, #68]	; (8009854 <MX_USB_DEVICE_Init+0x4c>)
 8009810:	f7ff fbda 	bl	8008fc8 <USBD_Init>
 8009814:	b9c0      	cbnz	r0, 8009848 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009816:	4910      	ldr	r1, [pc, #64]	; (8009858 <MX_USB_DEVICE_Init+0x50>)
 8009818:	480e      	ldr	r0, [pc, #56]	; (8009854 <MX_USB_DEVICE_Init+0x4c>)
 800981a:	f7ff fbeb 	bl	8008ff4 <USBD_RegisterClass>
 800981e:	b980      	cbnz	r0, 8009842 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009820:	490e      	ldr	r1, [pc, #56]	; (800985c <MX_USB_DEVICE_Init+0x54>)
 8009822:	480c      	ldr	r0, [pc, #48]	; (8009854 <MX_USB_DEVICE_Init+0x4c>)
 8009824:	f7ff fb88 	bl	8008f38 <USBD_CDC_RegisterInterface>
 8009828:	b940      	cbnz	r0, 800983c <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800982a:	480a      	ldr	r0, [pc, #40]	; (8009854 <MX_USB_DEVICE_Init+0x4c>)
 800982c:	f7ff fbea 	bl	8009004 <USBD_Start>
 8009830:	b900      	cbnz	r0, 8009834 <MX_USB_DEVICE_Init+0x2c>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009832:	bd08      	pop	{r3, pc}
 8009834:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8009838:	f7f9 b876 	b.w	8002928 <Error_Handler>
    Error_Handler();
 800983c:	f7f9 f874 	bl	8002928 <Error_Handler>
 8009840:	e7f3      	b.n	800982a <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8009842:	f7f9 f871 	bl	8002928 <Error_Handler>
 8009846:	e7eb      	b.n	8009820 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8009848:	f7f9 f86e 	bl	8002928 <Error_Handler>
 800984c:	e7e3      	b.n	8009816 <MX_USB_DEVICE_Init+0xe>
 800984e:	bf00      	nop
 8009850:	20000164 	.word	0x20000164
 8009854:	20000d2c 	.word	0x20000d2c
 8009858:	20000044 	.word	0x20000044
 800985c:	20000154 	.word	0x20000154

08009860 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8009860:	2000      	movs	r0, #0
 8009862:	4770      	bx	lr

08009864 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8009864:	2000      	movs	r0, #0
 8009866:	4770      	bx	lr

08009868 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009868:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800986a:	4c05      	ldr	r4, [pc, #20]	; (8009880 <CDC_Receive_FS+0x18>)
 800986c:	4601      	mov	r1, r0
 800986e:	4620      	mov	r0, r4
 8009870:	f7ff fb72 	bl	8008f58 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009874:	4620      	mov	r0, r4
 8009876:	f7ff fb8f 	bl	8008f98 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 800987a:	2000      	movs	r0, #0
 800987c:	bd10      	pop	{r4, pc}
 800987e:	bf00      	nop
 8009880:	20000d2c 	.word	0x20000d2c

08009884 <CDC_Init_FS>:
{
 8009884:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009886:	4c06      	ldr	r4, [pc, #24]	; (80098a0 <CDC_Init_FS+0x1c>)
 8009888:	2200      	movs	r2, #0
 800988a:	4620      	mov	r0, r4
 800988c:	4905      	ldr	r1, [pc, #20]	; (80098a4 <CDC_Init_FS+0x20>)
 800988e:	f7ff fb5b 	bl	8008f48 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009892:	4620      	mov	r0, r4
 8009894:	4904      	ldr	r1, [pc, #16]	; (80098a8 <CDC_Init_FS+0x24>)
 8009896:	f7ff fb5f 	bl	8008f58 <USBD_CDC_SetRxBuffer>
}
 800989a:	2000      	movs	r0, #0
 800989c:	bd10      	pop	{r4, pc}
 800989e:	bf00      	nop
 80098a0:	20000d2c 	.word	0x20000d2c
 80098a4:	200013d8 	.word	0x200013d8
 80098a8:	20000ff0 	.word	0x20000ff0

080098ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80098ac:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80098ae:	4c09      	ldr	r4, [pc, #36]	; (80098d4 <CDC_Transmit_FS+0x28>)
 80098b0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 80098b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80098b8:	b10b      	cbz	r3, 80098be <CDC_Transmit_FS+0x12>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 80098ba:	2001      	movs	r0, #1
 80098bc:	bd10      	pop	{r4, pc}
 80098be:	460a      	mov	r2, r1
 80098c0:	4601      	mov	r1, r0
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80098c2:	4620      	mov	r0, r4
 80098c4:	f7ff fb40 	bl	8008f48 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80098c8:	4620      	mov	r0, r4
}
 80098ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80098ce:	f7ff bb49 	b.w	8008f64 <USBD_CDC_TransmitPacket>
 80098d2:	bf00      	nop
 80098d4:	20000d2c 	.word	0x20000d2c

080098d8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80098d8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80098da:	4801      	ldr	r0, [pc, #4]	; (80098e0 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80098dc:	800b      	strh	r3, [r1, #0]
}
 80098de:	4770      	bx	lr
 80098e0:	20000180 	.word	0x20000180

080098e4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80098e4:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80098e6:	4801      	ldr	r0, [pc, #4]	; (80098ec <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80098e8:	800b      	strh	r3, [r1, #0]
}
 80098ea:	4770      	bx	lr
 80098ec:	20000194 	.word	0x20000194

080098f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098f0:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80098f2:	4c04      	ldr	r4, [pc, #16]	; (8009904 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80098f4:	460a      	mov	r2, r1
 80098f6:	4804      	ldr	r0, [pc, #16]	; (8009908 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80098f8:	4621      	mov	r1, r4
 80098fa:	f7ff ff19 	bl	8009730 <USBD_GetString>
  return USBD_StrDesc;
}
 80098fe:	4620      	mov	r0, r4
 8009900:	bd10      	pop	{r4, pc}
 8009902:	bf00      	nop
 8009904:	200017c0 	.word	0x200017c0
 8009908:	0800f034 	.word	0x0800f034

0800990c <USBD_FS_ProductStrDescriptor>:
{
 800990c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800990e:	4c04      	ldr	r4, [pc, #16]	; (8009920 <USBD_FS_ProductStrDescriptor+0x14>)
 8009910:	460a      	mov	r2, r1
 8009912:	4804      	ldr	r0, [pc, #16]	; (8009924 <USBD_FS_ProductStrDescriptor+0x18>)
 8009914:	4621      	mov	r1, r4
 8009916:	f7ff ff0b 	bl	8009730 <USBD_GetString>
}
 800991a:	4620      	mov	r0, r4
 800991c:	bd10      	pop	{r4, pc}
 800991e:	bf00      	nop
 8009920:	200017c0 	.word	0x200017c0
 8009924:	0800f048 	.word	0x0800f048

08009928 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009928:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800992a:	4c04      	ldr	r4, [pc, #16]	; (800993c <USBD_FS_ConfigStrDescriptor+0x14>)
 800992c:	460a      	mov	r2, r1
 800992e:	4804      	ldr	r0, [pc, #16]	; (8009940 <USBD_FS_ConfigStrDescriptor+0x18>)
 8009930:	4621      	mov	r1, r4
 8009932:	f7ff fefd 	bl	8009730 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8009936:	4620      	mov	r0, r4
 8009938:	bd10      	pop	{r4, pc}
 800993a:	bf00      	nop
 800993c:	200017c0 	.word	0x200017c0
 8009940:	0800f018 	.word	0x0800f018

08009944 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009944:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009946:	4c04      	ldr	r4, [pc, #16]	; (8009958 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8009948:	460a      	mov	r2, r1
 800994a:	4804      	ldr	r0, [pc, #16]	; (800995c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800994c:	4621      	mov	r1, r4
 800994e:	f7ff feef 	bl	8009730 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8009952:	4620      	mov	r0, r4
 8009954:	bd10      	pop	{r4, pc}
 8009956:	bf00      	nop
 8009958:	200017c0 	.word	0x200017c0
 800995c:	0800f024 	.word	0x0800f024

08009960 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8009960:	201a      	movs	r0, #26
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009962:	4a44      	ldr	r2, [pc, #272]	; (8009a74 <USBD_FS_SerialStrDescriptor+0x114>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009964:	4b44      	ldr	r3, [pc, #272]	; (8009a78 <USBD_FS_SerialStrDescriptor+0x118>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009966:	6812      	ldr	r2, [r2, #0]

  deviceserial0 += deviceserial2;
 8009968:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 800996a:	8008      	strh	r0, [r1, #0]

  if (deviceserial0 != 0)
 800996c:	18d2      	adds	r2, r2, r3
 800996e:	d101      	bne.n	8009974 <USBD_FS_SerialStrDescriptor+0x14>
}
 8009970:	4842      	ldr	r0, [pc, #264]	; (8009a7c <USBD_FS_SerialStrDescriptor+0x11c>)
 8009972:	4770      	bx	lr
{
 8009974:	b410      	push	{r4}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8009976:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8009978:	0f13      	lsrs	r3, r2, #28
 800997a:	b2d8      	uxtb	r0, r3
 800997c:	2b09      	cmp	r3, #9
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800997e:	4940      	ldr	r1, [pc, #256]	; (8009a80 <USBD_FS_SerialStrDescriptor+0x120>)
      pbuf[2 * idx] = (value >> 28) + '0';
 8009980:	4b3e      	ldr	r3, [pc, #248]	; (8009a7c <USBD_FS_SerialStrDescriptor+0x11c>)
 8009982:	bf94      	ite	ls
 8009984:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009986:	3037      	addhi	r0, #55	; 0x37
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009988:	6809      	ldr	r1, [r1, #0]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800998a:	7098      	strb	r0, [r3, #2]
    if (((value >> 28)) < 0xA)
 800998c:	f3c2 6003 	ubfx	r0, r2, #24, #4
 8009990:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8009992:	70dc      	strb	r4, [r3, #3]
 8009994:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8009996:	bf94      	ite	ls
 8009998:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800999a:	3437      	addhi	r4, #55	; 0x37
 800999c:	711c      	strb	r4, [r3, #4]
    pbuf[2 * idx + 1] = 0;
 800999e:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 80099a0:	f3c2 5003 	ubfx	r0, r2, #20, #4
 80099a4:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 80099a6:	715c      	strb	r4, [r3, #5]
 80099a8:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 80099aa:	bf94      	ite	ls
 80099ac:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099ae:	3437      	addhi	r4, #55	; 0x37
 80099b0:	719c      	strb	r4, [r3, #6]
    pbuf[2 * idx + 1] = 0;
 80099b2:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 80099b4:	f3c2 4003 	ubfx	r0, r2, #16, #4
 80099b8:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 80099ba:	71dc      	strb	r4, [r3, #7]
 80099bc:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 80099be:	bf94      	ite	ls
 80099c0:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099c2:	3437      	addhi	r4, #55	; 0x37
 80099c4:	721c      	strb	r4, [r3, #8]
    pbuf[2 * idx + 1] = 0;
 80099c6:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 80099c8:	f3c2 3003 	ubfx	r0, r2, #12, #4
 80099cc:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 80099ce:	725c      	strb	r4, [r3, #9]
 80099d0:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 80099d2:	bf94      	ite	ls
 80099d4:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099d6:	3437      	addhi	r4, #55	; 0x37
 80099d8:	729c      	strb	r4, [r3, #10]
    pbuf[2 * idx + 1] = 0;
 80099da:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 80099dc:	f3c2 2003 	ubfx	r0, r2, #8, #4
 80099e0:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 80099e2:	72dc      	strb	r4, [r3, #11]
 80099e4:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 80099e6:	bf94      	ite	ls
 80099e8:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099ea:	3437      	addhi	r4, #55	; 0x37
 80099ec:	731c      	strb	r4, [r3, #12]
    pbuf[2 * idx + 1] = 0;
 80099ee:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 80099f0:	f3c2 1003 	ubfx	r0, r2, #4, #4
 80099f4:	2809      	cmp	r0, #9
 80099f6:	f002 020f 	and.w	r2, r2, #15
    pbuf[2 * idx + 1] = 0;
 80099fa:	735c      	strb	r4, [r3, #13]
 80099fc:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 80099fe:	bf98      	it	ls
 8009a00:	3430      	addls	r4, #48	; 0x30
 8009a02:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a04:	bf88      	it	hi
 8009a06:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8009a08:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a0a:	bf94      	ite	ls
 8009a0c:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a0e:	3037      	addhi	r0, #55	; 0x37
 8009a10:	7418      	strb	r0, [r3, #16]
    pbuf[2 * idx + 1] = 0;
 8009a12:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 8009a14:	0f0a      	lsrs	r2, r1, #28
 8009a16:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 8009a18:	7458      	strb	r0, [r3, #17]
 8009a1a:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a1c:	bf94      	ite	ls
 8009a1e:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a20:	3037      	addhi	r0, #55	; 0x37
 8009a22:	7498      	strb	r0, [r3, #18]
    pbuf[2 * idx + 1] = 0;
 8009a24:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 8009a26:	f3c1 6203 	ubfx	r2, r1, #24, #4
 8009a2a:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 8009a2c:	74d8      	strb	r0, [r3, #19]
 8009a2e:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a30:	bf94      	ite	ls
 8009a32:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a34:	3037      	addhi	r0, #55	; 0x37
 8009a36:	7518      	strb	r0, [r3, #20]
    pbuf[2 * idx + 1] = 0;
 8009a38:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 8009a3a:	f3c1 5203 	ubfx	r2, r1, #20, #4
 8009a3e:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 8009a40:	7558      	strb	r0, [r3, #21]
    if (((value >> 28)) < 0xA)
 8009a42:	f3c1 4103 	ubfx	r1, r1, #16, #4
 8009a46:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a48:	bf98      	it	ls
 8009a4a:	3030      	addls	r0, #48	; 0x30
 8009a4c:	b2ca      	uxtb	r2, r1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a4e:	bf88      	it	hi
 8009a50:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 8009a52:	2909      	cmp	r1, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a54:	bf94      	ite	ls
 8009a56:	3230      	addls	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a58:	3237      	addhi	r2, #55	; 0x37
 8009a5a:	739c      	strb	r4, [r3, #14]
 8009a5c:	7598      	strb	r0, [r3, #22]
    pbuf[2 * idx + 1] = 0;
 8009a5e:	2400      	movs	r4, #0
 8009a60:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a62:	761a      	strb	r2, [r3, #24]
    pbuf[2 * idx + 1] = 0;
 8009a64:	2200      	movs	r2, #0
 8009a66:	75d8      	strb	r0, [r3, #23]
 8009a68:	73dc      	strb	r4, [r3, #15]
 8009a6a:	765a      	strb	r2, [r3, #25]
}
 8009a6c:	4803      	ldr	r0, [pc, #12]	; (8009a7c <USBD_FS_SerialStrDescriptor+0x11c>)
 8009a6e:	bc10      	pop	{r4}
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	1ffff7e8 	.word	0x1ffff7e8
 8009a78:	1ffff7f0 	.word	0x1ffff7f0
 8009a7c:	20000198 	.word	0x20000198
 8009a80:	1ffff7ec 	.word	0x1ffff7ec

08009a84 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 8009a84:	6802      	ldr	r2, [r0, #0]
 8009a86:	4b0e      	ldr	r3, [pc, #56]	; (8009ac0 <HAL_PCD_MspInit+0x3c>)
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d000      	beq.n	8009a8e <HAL_PCD_MspInit+0xa>
 8009a8c:	4770      	bx	lr
  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009a8e:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8009a90:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
{
 8009a94:	b510      	push	{r4, lr}
    __HAL_RCC_USB_CLK_ENABLE();
 8009a96:	69dc      	ldr	r4, [r3, #28]
{
 8009a98:	b082      	sub	sp, #8
    __HAL_RCC_USB_CLK_ENABLE();
 8009a9a:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8009a9e:	61dc      	str	r4, [r3, #28]
 8009aa0:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009aa2:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8009aa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009aa8:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009aaa:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8009aac:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009aae:	f7fc f9fb 	bl	8005ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009ab2:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009ab4:	b002      	add	sp, #8
 8009ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009aba:	f7fc ba2b 	b.w	8005f14 <HAL_NVIC_EnableIRQ>
 8009abe:	bf00      	nop
 8009ac0:	40005c00 	.word	0x40005c00

08009ac4 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ac4:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8009ac8:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8009acc:	f7ff bab2 	b.w	8009034 <USBD_LL_SetupStage>

08009ad0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ad0:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8009ad4:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8009ad8:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8009adc:	f7ff bada 	b.w	8009094 <USBD_LL_DataOutStage>

08009ae0 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ae0:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8009ae4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ae6:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8009aea:	f7ff bb13 	b.w	8009114 <USBD_LL_DataInStage>
 8009aee:	bf00      	nop

08009af0 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009af0:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8009af4:	f7ff bbae 	b.w	8009254 <USBD_LL_SOF>

08009af8 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009af8:	6883      	ldr	r3, [r0, #8]
{ 
 8009afa:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009afc:	2b02      	cmp	r3, #2
{ 
 8009afe:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009b00:	d001      	beq.n	8009b06 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8009b02:	f7f8 ff11 	bl	8002928 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b06:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 8009b0a:	2101      	movs	r1, #1
 8009b0c:	f7ff fb8a 	bl	8009224 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b10:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 8009b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b18:	f7ff bb5c 	b.w	80091d4 <USBD_LL_Reset>

08009b1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b1c:	b510      	push	{r4, lr}
 8009b1e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b20:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8009b24:	f7ff fb82 	bl	800922c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b28:	69a3      	ldr	r3, [r4, #24]
 8009b2a:	b123      	cbz	r3, 8009b36 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b2c:	4a02      	ldr	r2, [pc, #8]	; (8009b38 <HAL_PCD_SuspendCallback+0x1c>)
 8009b2e:	6913      	ldr	r3, [r2, #16]
 8009b30:	f043 0306 	orr.w	r3, r3, #6
 8009b34:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009b36:	bd10      	pop	{r4, pc}
 8009b38:	e000ed00 	.word	0xe000ed00

08009b3c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b3c:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8009b40:	f7ff bb7e 	b.w	8009240 <USBD_LL_Resume>

08009b44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b44:	b538      	push	{r3, r4, r5, lr}
 8009b46:	4604      	mov	r4, r0
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009b48:	2200      	movs	r2, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009b4a:	2508      	movs	r5, #8
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009b4c:	2102      	movs	r1, #2
  hpcd_USB_FS.pData = pdev;
 8009b4e:	4b1c      	ldr	r3, [pc, #112]	; (8009bc0 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Instance = USB;
 8009b50:	481c      	ldr	r0, [pc, #112]	; (8009bc4 <USBD_LL_Init+0x80>)
  pdev->pData = &hpcd_USB_FS;
 8009b52:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 8009b56:	6018      	str	r0, [r3, #0]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009b58:	4618      	mov	r0, r3
  hpcd_USB_FS.pData = pdev;
 8009b5a:	f8c3 4268 	str.w	r4, [r3, #616]	; 0x268
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009b5e:	e9c3 5101 	strd	r5, r1, [r3, #4]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009b62:	e9c3 2206 	strd	r2, r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009b66:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009b68:	f7fd f9a8 	bl	8006ebc <HAL_PCD_Init>
 8009b6c:	b108      	cbz	r0, 8009b72 <USBD_LL_Init+0x2e>
  {
    Error_Handler( );
 8009b6e:	f7f8 fedb 	bl	8002928 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009b72:	2200      	movs	r2, #0
 8009b74:	2318      	movs	r3, #24
 8009b76:	4611      	mov	r1, r2
 8009b78:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009b7c:	f7fd fdbe 	bl	80076fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009b80:	2358      	movs	r3, #88	; 0x58
 8009b82:	2200      	movs	r2, #0
 8009b84:	2180      	movs	r1, #128	; 0x80
 8009b86:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009b8a:	f7fd fdb7 	bl	80076fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009b8e:	23c0      	movs	r3, #192	; 0xc0
 8009b90:	2200      	movs	r2, #0
 8009b92:	2181      	movs	r1, #129	; 0x81
 8009b94:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009b98:	f7fd fdb0 	bl	80076fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009b9c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	2101      	movs	r1, #1
 8009ba4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009ba8:	f7fd fda8 	bl	80076fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009bac:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	2182      	movs	r1, #130	; 0x82
 8009bb8:	f7fd fda0 	bl	80076fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8009bbc:	2000      	movs	r0, #0
 8009bbe:	bd38      	pop	{r3, r4, r5, pc}
 8009bc0:	200019c0 	.word	0x200019c0
 8009bc4:	40005c00 	.word	0x40005c00

08009bc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009bc8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009bca:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009bce:	f7fd f9f3 	bl	8006fb8 <HAL_PCD_Start>
 8009bd2:	2803      	cmp	r0, #3
 8009bd4:	bf96      	itet	ls
 8009bd6:	4b02      	ldrls	r3, [pc, #8]	; (8009be0 <USBD_LL_Start+0x18>)
 8009bd8:	2002      	movhi	r0, #2
 8009bda:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8009bdc:	bd08      	pop	{r3, pc}
 8009bde:	bf00      	nop
 8009be0:	0800f054 	.word	0x0800f054

08009be4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009be4:	b510      	push	{r4, lr}
 8009be6:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009be8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009bec:	4613      	mov	r3, r2
 8009bee:	4622      	mov	r2, r4
 8009bf0:	f7fd fc7c 	bl	80074ec <HAL_PCD_EP_Open>
 8009bf4:	2803      	cmp	r0, #3
 8009bf6:	bf96      	itet	ls
 8009bf8:	4b01      	ldrls	r3, [pc, #4]	; (8009c00 <USBD_LL_OpenEP+0x1c>)
 8009bfa:	2002      	movhi	r0, #2
 8009bfc:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8009bfe:	bd10      	pop	{r4, pc}
 8009c00:	0800f054 	.word	0x0800f054

08009c04 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c04:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c06:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009c0a:	f7fd fca1 	bl	8007550 <HAL_PCD_EP_Close>
 8009c0e:	2803      	cmp	r0, #3
 8009c10:	bf96      	itet	ls
 8009c12:	4b02      	ldrls	r3, [pc, #8]	; (8009c1c <USBD_LL_CloseEP+0x18>)
 8009c14:	2002      	movhi	r0, #2
 8009c16:	5c18      	ldrbls	r0, [r3, r0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 8009c18:	bd08      	pop	{r3, pc}
 8009c1a:	bf00      	nop
 8009c1c:	0800f054 	.word	0x0800f054

08009c20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c20:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c22:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009c26:	f7fd fcf5 	bl	8007614 <HAL_PCD_EP_SetStall>
 8009c2a:	2803      	cmp	r0, #3
 8009c2c:	bf96      	itet	ls
 8009c2e:	4b02      	ldrls	r3, [pc, #8]	; (8009c38 <USBD_LL_StallEP+0x18>)
 8009c30:	2002      	movhi	r0, #2
 8009c32:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8009c34:	bd08      	pop	{r3, pc}
 8009c36:	bf00      	nop
 8009c38:	0800f054 	.word	0x0800f054

08009c3c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c3c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8009c3e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009c42:	f7fd fd23 	bl	800768c <HAL_PCD_EP_ClrStall>
 8009c46:	2803      	cmp	r0, #3
 8009c48:	bf96      	itet	ls
 8009c4a:	4b02      	ldrls	r3, [pc, #8]	; (8009c54 <USBD_LL_ClearStallEP+0x18>)
 8009c4c:	2002      	movhi	r0, #2
 8009c4e:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8009c50:	bd08      	pop	{r3, pc}
 8009c52:	bf00      	nop
 8009c54:	0800f054 	.word	0x0800f054

08009c58 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8009c58:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c5a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8009c5e:	d404      	bmi.n	8009c6a <USBD_LL_IsStallEP+0x12>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009c60:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009c64:	f893 012a 	ldrb.w	r0, [r3, #298]	; 0x12a
  }
}
 8009c68:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009c6a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8009c6e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009c72:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8009c76:	4770      	bx	lr

08009c78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009c78:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009c7a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009c7e:	f7fd fc21 	bl	80074c4 <HAL_PCD_SetAddress>
 8009c82:	2803      	cmp	r0, #3
 8009c84:	bf96      	itet	ls
 8009c86:	4b02      	ldrls	r3, [pc, #8]	; (8009c90 <USBD_LL_SetUSBAddress+0x18>)
 8009c88:	2002      	movhi	r0, #2
 8009c8a:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8009c8c:	bd08      	pop	{r3, pc}
 8009c8e:	bf00      	nop
 8009c90:	0800f054 	.word	0x0800f054

08009c94 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009c94:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009c96:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009c9a:	f7fd fca5 	bl	80075e8 <HAL_PCD_EP_Transmit>
 8009c9e:	2803      	cmp	r0, #3
 8009ca0:	bf96      	itet	ls
 8009ca2:	4b02      	ldrls	r3, [pc, #8]	; (8009cac <USBD_LL_Transmit+0x18>)
 8009ca4:	2002      	movhi	r0, #2
 8009ca6:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8009ca8:	bd08      	pop	{r3, pc}
 8009caa:	bf00      	nop
 8009cac:	0800f054 	.word	0x0800f054

08009cb0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009cb0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009cb2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009cb6:	f7fd fc77 	bl	80075a8 <HAL_PCD_EP_Receive>
 8009cba:	2803      	cmp	r0, #3
 8009cbc:	bf96      	itet	ls
 8009cbe:	4b02      	ldrls	r3, [pc, #8]	; (8009cc8 <USBD_LL_PrepareReceive+0x18>)
 8009cc0:	2002      	movhi	r0, #2
 8009cc2:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8009cc4:	bd08      	pop	{r3, pc}
 8009cc6:	bf00      	nop
 8009cc8:	0800f054 	.word	0x0800f054

08009ccc <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009ccc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009cd0:	f7fd bc82 	b.w	80075d8 <HAL_PCD_EP_GetRxCount>

08009cd4 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8009cd4:	4800      	ldr	r0, [pc, #0]	; (8009cd8 <USBD_static_malloc+0x4>)
 8009cd6:	4770      	bx	lr
 8009cd8:	200003c8 	.word	0x200003c8

08009cdc <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop

08009ce0 <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop

08009ce4 <arm_mat_trans_f32>:
 8009ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce8:	8803      	ldrh	r3, [r0, #0]
 8009cea:	884d      	ldrh	r5, [r1, #2]
 8009cec:	6847      	ldr	r7, [r0, #4]
 8009cee:	429d      	cmp	r5, r3
 8009cf0:	b083      	sub	sp, #12
 8009cf2:	8840      	ldrh	r0, [r0, #2]
 8009cf4:	684a      	ldr	r2, [r1, #4]
 8009cf6:	d149      	bne.n	8009d8c <arm_mat_trans_f32+0xa8>
 8009cf8:	f8b1 e000 	ldrh.w	lr, [r1]
 8009cfc:	4586      	cmp	lr, r0
 8009cfe:	d145      	bne.n	8009d8c <arm_mat_trans_f32+0xa8>
 8009d00:	4694      	mov	ip, r2
 8009d02:	ea4f 089e 	mov.w	r8, lr, lsr #2
 8009d06:	00a9      	lsls	r1, r5, #2
 8009d08:	fb08 f901 	mul.w	r9, r8, r1
 8009d0c:	f00e 0e03 	and.w	lr, lr, #3
 8009d10:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 8009d14:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8009d18:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8009d1c:	eb02 0a01 	add.w	sl, r2, r1
 8009d20:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8009d24:	9301      	str	r3, [sp, #4]
 8009d26:	00b6      	lsls	r6, r6, #2
 8009d28:	012d      	lsls	r5, r5, #4
 8009d2a:	4663      	mov	r3, ip
 8009d2c:	f1b8 0f00 	cmp.w	r8, #0
 8009d30:	d017      	beq.n	8009d62 <arm_mat_trans_f32+0x7e>
 8009d32:	4640      	mov	r0, r8
 8009d34:	f107 0210 	add.w	r2, r7, #16
 8009d38:	f852 4c10 	ldr.w	r4, [r2, #-16]
 8009d3c:	3801      	subs	r0, #1
 8009d3e:	601c      	str	r4, [r3, #0]
 8009d40:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 8009d44:	f102 0210 	add.w	r2, r2, #16
 8009d48:	505c      	str	r4, [r3, r1]
 8009d4a:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8009d4e:	f843 4011 	str.w	r4, [r3, r1, lsl #1]
 8009d52:	f852 4c14 	ldr.w	r4, [r2, #-20]
 8009d56:	519c      	str	r4, [r3, r6]
 8009d58:	442b      	add	r3, r5
 8009d5a:	d1ed      	bne.n	8009d38 <arm_mat_trans_f32+0x54>
 8009d5c:	445f      	add	r7, fp
 8009d5e:	eb09 030c 	add.w	r3, r9, ip
 8009d62:	f1be 0f00 	cmp.w	lr, #0
 8009d66:	d009      	beq.n	8009d7c <arm_mat_trans_f32+0x98>
 8009d68:	4672      	mov	r2, lr
 8009d6a:	4638      	mov	r0, r7
 8009d6c:	f850 4b04 	ldr.w	r4, [r0], #4
 8009d70:	3a01      	subs	r2, #1
 8009d72:	601c      	str	r4, [r3, #0]
 8009d74:	440b      	add	r3, r1
 8009d76:	d1f9      	bne.n	8009d6c <arm_mat_trans_f32+0x88>
 8009d78:	9b01      	ldr	r3, [sp, #4]
 8009d7a:	441f      	add	r7, r3
 8009d7c:	f10c 0c04 	add.w	ip, ip, #4
 8009d80:	45d4      	cmp	ip, sl
 8009d82:	d1d2      	bne.n	8009d2a <arm_mat_trans_f32+0x46>
 8009d84:	2000      	movs	r0, #0
 8009d86:	b003      	add	sp, #12
 8009d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8c:	f06f 0002 	mvn.w	r0, #2
 8009d90:	e7f9      	b.n	8009d86 <arm_mat_trans_f32+0xa2>
 8009d92:	bf00      	nop

08009d94 <arm_mat_sub_f32>:
 8009d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d98:	6803      	ldr	r3, [r0, #0]
 8009d9a:	e9d1 4b00 	ldrd	r4, fp, [r1]
 8009d9e:	42a3      	cmp	r3, r4
 8009da0:	b083      	sub	sp, #12
 8009da2:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8009da6:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8009daa:	d162      	bne.n	8009e72 <arm_mat_sub_f32+0xde>
 8009dac:	6812      	ldr	r2, [r2, #0]
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d15f      	bne.n	8009e72 <arm_mat_sub_f32+0xde>
 8009db2:	8803      	ldrh	r3, [r0, #0]
 8009db4:	8847      	ldrh	r7, [r0, #2]
 8009db6:	fb07 f703 	mul.w	r7, r7, r3
 8009dba:	08bb      	lsrs	r3, r7, #2
 8009dbc:	9301      	str	r3, [sp, #4]
 8009dbe:	d035      	beq.n	8009e2c <arm_mat_sub_f32+0x98>
 8009dc0:	4698      	mov	r8, r3
 8009dc2:	f10a 0610 	add.w	r6, sl, #16
 8009dc6:	f10b 0510 	add.w	r5, fp, #16
 8009dca:	f109 0410 	add.w	r4, r9, #16
 8009dce:	f855 1c10 	ldr.w	r1, [r5, #-16]
 8009dd2:	f856 0c10 	ldr.w	r0, [r6, #-16]
 8009dd6:	f7f6 fecb 	bl	8000b70 <__aeabi_fsub>
 8009dda:	f844 0c10 	str.w	r0, [r4, #-16]
 8009dde:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 8009de2:	f856 0c0c 	ldr.w	r0, [r6, #-12]
 8009de6:	f7f6 fec3 	bl	8000b70 <__aeabi_fsub>
 8009dea:	f844 0c0c 	str.w	r0, [r4, #-12]
 8009dee:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8009df2:	f856 0c08 	ldr.w	r0, [r6, #-8]
 8009df6:	f7f6 febb 	bl	8000b70 <__aeabi_fsub>
 8009dfa:	f844 0c08 	str.w	r0, [r4, #-8]
 8009dfe:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8009e02:	f856 0c04 	ldr.w	r0, [r6, #-4]
 8009e06:	f7f6 feb3 	bl	8000b70 <__aeabi_fsub>
 8009e0a:	f1b8 0801 	subs.w	r8, r8, #1
 8009e0e:	f844 0c04 	str.w	r0, [r4, #-4]
 8009e12:	f105 0510 	add.w	r5, r5, #16
 8009e16:	f106 0610 	add.w	r6, r6, #16
 8009e1a:	f104 0410 	add.w	r4, r4, #16
 8009e1e:	d1d6      	bne.n	8009dce <arm_mat_sub_f32+0x3a>
 8009e20:	9b01      	ldr	r3, [sp, #4]
 8009e22:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009e26:	44c2      	add	sl, r8
 8009e28:	44c3      	add	fp, r8
 8009e2a:	44c1      	add	r9, r8
 8009e2c:	f017 0703 	ands.w	r7, r7, #3
 8009e30:	d01b      	beq.n	8009e6a <arm_mat_sub_f32+0xd6>
 8009e32:	f8db 1000 	ldr.w	r1, [fp]
 8009e36:	f8da 0000 	ldr.w	r0, [sl]
 8009e3a:	f7f6 fe99 	bl	8000b70 <__aeabi_fsub>
 8009e3e:	3f01      	subs	r7, #1
 8009e40:	f8c9 0000 	str.w	r0, [r9]
 8009e44:	d011      	beq.n	8009e6a <arm_mat_sub_f32+0xd6>
 8009e46:	f8db 1004 	ldr.w	r1, [fp, #4]
 8009e4a:	f8da 0004 	ldr.w	r0, [sl, #4]
 8009e4e:	f7f6 fe8f 	bl	8000b70 <__aeabi_fsub>
 8009e52:	2f01      	cmp	r7, #1
 8009e54:	f8c9 0004 	str.w	r0, [r9, #4]
 8009e58:	d007      	beq.n	8009e6a <arm_mat_sub_f32+0xd6>
 8009e5a:	f8db 1008 	ldr.w	r1, [fp, #8]
 8009e5e:	f8da 0008 	ldr.w	r0, [sl, #8]
 8009e62:	f7f6 fe85 	bl	8000b70 <__aeabi_fsub>
 8009e66:	f8c9 0008 	str.w	r0, [r9, #8]
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	b003      	add	sp, #12
 8009e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e72:	f06f 0002 	mvn.w	r0, #2
 8009e76:	e7f9      	b.n	8009e6c <arm_mat_sub_f32+0xd8>

08009e78 <arm_mat_scale_f32>:
 8009e78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7c:	e9d2 3900 	ldrd	r3, r9, [r2]
 8009e80:	6804      	ldr	r4, [r0, #0]
 8009e82:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8009e86:	429c      	cmp	r4, r3
 8009e88:	d154      	bne.n	8009f34 <arm_mat_scale_f32+0xbc>
 8009e8a:	8803      	ldrh	r3, [r0, #0]
 8009e8c:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 8009e90:	460e      	mov	r6, r1
 8009e92:	fb08 f803 	mul.w	r8, r8, r3
 8009e96:	ea5f 0b98 	movs.w	fp, r8, lsr #2
 8009e9a:	d02a      	beq.n	8009ef2 <arm_mat_scale_f32+0x7a>
 8009e9c:	465f      	mov	r7, fp
 8009e9e:	f10a 0510 	add.w	r5, sl, #16
 8009ea2:	f109 0410 	add.w	r4, r9, #16
 8009ea6:	f855 0c10 	ldr.w	r0, [r5, #-16]
 8009eaa:	4631      	mov	r1, r6
 8009eac:	f7f6 ff6a 	bl	8000d84 <__aeabi_fmul>
 8009eb0:	f844 0c10 	str.w	r0, [r4, #-16]
 8009eb4:	f855 0c0c 	ldr.w	r0, [r5, #-12]
 8009eb8:	4631      	mov	r1, r6
 8009eba:	f7f6 ff63 	bl	8000d84 <__aeabi_fmul>
 8009ebe:	f844 0c0c 	str.w	r0, [r4, #-12]
 8009ec2:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8009ec6:	4631      	mov	r1, r6
 8009ec8:	f7f6 ff5c 	bl	8000d84 <__aeabi_fmul>
 8009ecc:	f844 0c08 	str.w	r0, [r4, #-8]
 8009ed0:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8009ed4:	4631      	mov	r1, r6
 8009ed6:	f7f6 ff55 	bl	8000d84 <__aeabi_fmul>
 8009eda:	3f01      	subs	r7, #1
 8009edc:	f844 0c04 	str.w	r0, [r4, #-4]
 8009ee0:	f105 0510 	add.w	r5, r5, #16
 8009ee4:	f104 0410 	add.w	r4, r4, #16
 8009ee8:	d1dd      	bne.n	8009ea6 <arm_mat_scale_f32+0x2e>
 8009eea:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
 8009eee:	44da      	add	sl, fp
 8009ef0:	44d9      	add	r9, fp
 8009ef2:	f018 0803 	ands.w	r8, r8, #3
 8009ef6:	d01a      	beq.n	8009f2e <arm_mat_scale_f32+0xb6>
 8009ef8:	f8da 0000 	ldr.w	r0, [sl]
 8009efc:	4631      	mov	r1, r6
 8009efe:	f7f6 ff41 	bl	8000d84 <__aeabi_fmul>
 8009f02:	f1b8 0801 	subs.w	r8, r8, #1
 8009f06:	f8c9 0000 	str.w	r0, [r9]
 8009f0a:	d010      	beq.n	8009f2e <arm_mat_scale_f32+0xb6>
 8009f0c:	f8da 0004 	ldr.w	r0, [sl, #4]
 8009f10:	4631      	mov	r1, r6
 8009f12:	f7f6 ff37 	bl	8000d84 <__aeabi_fmul>
 8009f16:	f1b8 0f01 	cmp.w	r8, #1
 8009f1a:	f8c9 0004 	str.w	r0, [r9, #4]
 8009f1e:	d006      	beq.n	8009f2e <arm_mat_scale_f32+0xb6>
 8009f20:	f8da 0008 	ldr.w	r0, [sl, #8]
 8009f24:	4631      	mov	r1, r6
 8009f26:	f7f6 ff2d 	bl	8000d84 <__aeabi_fmul>
 8009f2a:	f8c9 0008 	str.w	r0, [r9, #8]
 8009f2e:	2000      	movs	r0, #0
 8009f30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f34:	f06f 0002 	mvn.w	r0, #2
 8009f38:	e7fa      	b.n	8009f30 <arm_mat_scale_f32+0xb8>
 8009f3a:	bf00      	nop

08009f3c <arm_mat_mult_f32>:
 8009f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f40:	8847      	ldrh	r7, [r0, #2]
 8009f42:	880b      	ldrh	r3, [r1, #0]
 8009f44:	6844      	ldr	r4, [r0, #4]
 8009f46:	8800      	ldrh	r0, [r0, #0]
 8009f48:	b08f      	sub	sp, #60	; 0x3c
 8009f4a:	42bb      	cmp	r3, r7
 8009f4c:	9008      	str	r0, [sp, #32]
 8009f4e:	684e      	ldr	r6, [r1, #4]
 8009f50:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8009f54:	884d      	ldrh	r5, [r1, #2]
 8009f56:	f040 809f 	bne.w	800a098 <arm_mat_mult_f32+0x15c>
 8009f5a:	8817      	ldrh	r7, [r2, #0]
 8009f5c:	4287      	cmp	r7, r0
 8009f5e:	f040 809b 	bne.w	800a098 <arm_mat_mult_f32+0x15c>
 8009f62:	f8b2 8002 	ldrh.w	r8, [r2, #2]
 8009f66:	45a8      	cmp	r8, r5
 8009f68:	f040 8096 	bne.w	800a098 <arm_mat_mult_f32+0x15c>
 8009f6c:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8009f70:	910d      	str	r1, [sp, #52]	; 0x34
 8009f72:	0899      	lsrs	r1, r3, #2
 8009f74:	fb0b f201 	mul.w	r2, fp, r1
 8009f78:	9105      	str	r1, [sp, #20]
 8009f7a:	9207      	str	r2, [sp, #28]
 8009f7c:	eb04 1101 	add.w	r1, r4, r1, lsl #4
 8009f80:	ebc8 7288 	rsb	r2, r8, r8, lsl #30
 8009f84:	ea4f 0788 	mov.w	r7, r8, lsl #2
 8009f88:	0092      	lsls	r2, r2, #2
 8009f8a:	9104      	str	r1, [sp, #16]
 8009f8c:	f104 0110 	add.w	r1, r4, #16
 8009f90:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8009f94:	1d30      	adds	r0, r6, #4
 8009f96:	9103      	str	r1, [sp, #12]
 8009f98:	920b      	str	r2, [sp, #44]	; 0x2c
 8009f9a:	eb0c 0107 	add.w	r1, ip, r7
 8009f9e:	f003 0203 	and.w	r2, r3, #3
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	900c      	str	r0, [sp, #48]	; 0x30
 8009fa6:	9102      	str	r1, [sp, #8]
 8009fa8:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8009fac:	9206      	str	r2, [sp, #24]
 8009fae:	930a      	str	r3, [sp, #40]	; 0x28
 8009fb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fb2:	9a02      	ldr	r2, [sp, #8]
 8009fb4:	9301      	str	r3, [sp, #4]
 8009fb6:	9b03      	ldr	r3, [sp, #12]
 8009fb8:	3b10      	subs	r3, #16
 8009fba:	9309      	str	r3, [sp, #36]	; 0x24
 8009fbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fbe:	4413      	add	r3, r2
 8009fc0:	9300      	str	r3, [sp, #0]
 8009fc2:	9b05      	ldr	r3, [sp, #20]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d05f      	beq.n	800a088 <arm_mat_mult_f32+0x14c>
 8009fc8:	4699      	mov	r9, r3
 8009fca:	4634      	mov	r4, r6
 8009fcc:	f04f 0a00 	mov.w	sl, #0
 8009fd0:	9d03      	ldr	r5, [sp, #12]
 8009fd2:	6821      	ldr	r1, [r4, #0]
 8009fd4:	f855 0c10 	ldr.w	r0, [r5, #-16]
 8009fd8:	f7f6 fed4 	bl	8000d84 <__aeabi_fmul>
 8009fdc:	4651      	mov	r1, sl
 8009fde:	f7f6 fdc9 	bl	8000b74 <__addsf3>
 8009fe2:	4682      	mov	sl, r0
 8009fe4:	59e1      	ldr	r1, [r4, r7]
 8009fe6:	f855 0c0c 	ldr.w	r0, [r5, #-12]
 8009fea:	f7f6 fecb 	bl	8000d84 <__aeabi_fmul>
 8009fee:	4651      	mov	r1, sl
 8009ff0:	f7f6 fdc0 	bl	8000b74 <__addsf3>
 8009ff4:	4682      	mov	sl, r0
 8009ff6:	f854 1017 	ldr.w	r1, [r4, r7, lsl #1]
 8009ffa:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8009ffe:	f7f6 fec1 	bl	8000d84 <__aeabi_fmul>
 800a002:	4651      	mov	r1, sl
 800a004:	f7f6 fdb6 	bl	8000b74 <__addsf3>
 800a008:	4682      	mov	sl, r0
 800a00a:	f854 1008 	ldr.w	r1, [r4, r8]
 800a00e:	f855 0c04 	ldr.w	r0, [r5, #-4]
 800a012:	f7f6 feb7 	bl	8000d84 <__aeabi_fmul>
 800a016:	4651      	mov	r1, sl
 800a018:	f7f6 fdac 	bl	8000b74 <__addsf3>
 800a01c:	f1b9 0901 	subs.w	r9, r9, #1
 800a020:	445c      	add	r4, fp
 800a022:	4682      	mov	sl, r0
 800a024:	f105 0510 	add.w	r5, r5, #16
 800a028:	d1d3      	bne.n	8009fd2 <arm_mat_mult_f32+0x96>
 800a02a:	9b07      	ldr	r3, [sp, #28]
 800a02c:	9d04      	ldr	r5, [sp, #16]
 800a02e:	441e      	add	r6, r3
 800a030:	9b06      	ldr	r3, [sp, #24]
 800a032:	b16b      	cbz	r3, 800a050 <arm_mat_mult_f32+0x114>
 800a034:	461c      	mov	r4, r3
 800a036:	6831      	ldr	r1, [r6, #0]
 800a038:	f855 0b04 	ldr.w	r0, [r5], #4
 800a03c:	f7f6 fea2 	bl	8000d84 <__aeabi_fmul>
 800a040:	4601      	mov	r1, r0
 800a042:	4650      	mov	r0, sl
 800a044:	f7f6 fd96 	bl	8000b74 <__addsf3>
 800a048:	3c01      	subs	r4, #1
 800a04a:	443e      	add	r6, r7
 800a04c:	4682      	mov	sl, r0
 800a04e:	d1f2      	bne.n	800a036 <arm_mat_mult_f32+0xfa>
 800a050:	e9dd 3600 	ldrd	r3, r6, [sp]
 800a054:	1d32      	adds	r2, r6, #4
 800a056:	9201      	str	r2, [sp, #4]
 800a058:	9a02      	ldr	r2, [sp, #8]
 800a05a:	f843 ab04 	str.w	sl, [r3], #4
 800a05e:	4293      	cmp	r3, r2
 800a060:	9300      	str	r3, [sp, #0]
 800a062:	d1ae      	bne.n	8009fc2 <arm_mat_mult_f32+0x86>
 800a064:	4613      	mov	r3, r2
 800a066:	9a04      	ldr	r2, [sp, #16]
 800a068:	443b      	add	r3, r7
 800a06a:	4611      	mov	r1, r2
 800a06c:	9302      	str	r3, [sp, #8]
 800a06e:	9a03      	ldr	r2, [sp, #12]
 800a070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a072:	4419      	add	r1, r3
 800a074:	441a      	add	r2, r3
 800a076:	9b08      	ldr	r3, [sp, #32]
 800a078:	9104      	str	r1, [sp, #16]
 800a07a:	3b01      	subs	r3, #1
 800a07c:	9203      	str	r2, [sp, #12]
 800a07e:	9308      	str	r3, [sp, #32]
 800a080:	d006      	beq.n	800a090 <arm_mat_mult_f32+0x154>
 800a082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a084:	685e      	ldr	r6, [r3, #4]
 800a086:	e793      	b.n	8009fb0 <arm_mat_mult_f32+0x74>
 800a088:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a08a:	f04f 0a00 	mov.w	sl, #0
 800a08e:	e7cf      	b.n	800a030 <arm_mat_mult_f32+0xf4>
 800a090:	4618      	mov	r0, r3
 800a092:	b00f      	add	sp, #60	; 0x3c
 800a094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a098:	f06f 0002 	mvn.w	r0, #2
 800a09c:	b00f      	add	sp, #60	; 0x3c
 800a09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a2:	bf00      	nop

0800a0a4 <arm_mat_inverse_f32>:
 800a0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a8:	8804      	ldrh	r4, [r0, #0]
 800a0aa:	8842      	ldrh	r2, [r0, #2]
 800a0ac:	6843      	ldr	r3, [r0, #4]
 800a0ae:	684d      	ldr	r5, [r1, #4]
 800a0b0:	b095      	sub	sp, #84	; 0x54
 800a0b2:	4294      	cmp	r4, r2
 800a0b4:	9404      	str	r4, [sp, #16]
 800a0b6:	920b      	str	r2, [sp, #44]	; 0x2c
 800a0b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ba:	9512      	str	r5, [sp, #72]	; 0x48
 800a0bc:	f040 8137 	bne.w	800a32e <arm_mat_inverse_f32+0x28a>
 800a0c0:	880a      	ldrh	r2, [r1, #0]
 800a0c2:	884b      	ldrh	r3, [r1, #2]
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	f040 8132 	bne.w	800a32e <arm_mat_inverse_f32+0x28a>
 800a0ca:	429c      	cmp	r4, r3
 800a0cc:	f040 812f 	bne.w	800a32e <arm_mat_inverse_f32+0x28a>
 800a0d0:	9013      	str	r0, [sp, #76]	; 0x4c
 800a0d2:	b1fc      	cbz	r4, 800a114 <arm_mat_inverse_f32+0x70>
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 800a0da:	1e66      	subs	r6, r4, #1
 800a0dc:	f840 7b04 	str.w	r7, [r0], #4
 800a0e0:	d018      	beq.n	800a114 <arm_mat_inverse_f32+0x70>
 800a0e2:	2501      	movs	r5, #1
 800a0e4:	00b2      	lsls	r2, r6, #2
 800a0e6:	2100      	movs	r1, #0
 800a0e8:	00ac      	lsls	r4, r5, #2
 800a0ea:	eb00 0802 	add.w	r8, r0, r2
 800a0ee:	f000 fa07 	bl	800a500 <memset>
 800a0f2:	2d00      	cmp	r5, #0
 800a0f4:	f000 8120 	beq.w	800a338 <arm_mat_inverse_f32+0x294>
 800a0f8:	4622      	mov	r2, r4
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	4640      	mov	r0, r8
 800a0fe:	f000 f9ff 	bl	800a500 <memset>
 800a102:	4444      	add	r4, r8
 800a104:	3e01      	subs	r6, #1
 800a106:	f848 7025 	str.w	r7, [r8, r5, lsl #2]
 800a10a:	f104 0004 	add.w	r0, r4, #4
 800a10e:	f105 0501 	add.w	r5, r5, #1
 800a112:	d1e7      	bne.n	800a0e4 <arm_mat_inverse_f32+0x40>
 800a114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a116:	2b00      	cmp	r3, #0
 800a118:	f000 8100 	beq.w	800a31c <arm_mat_inverse_f32+0x278>
 800a11c:	2100      	movs	r1, #0
 800a11e:	009a      	lsls	r2, r3, #2
 800a120:	00db      	lsls	r3, r3, #3
 800a122:	3304      	adds	r3, #4
 800a124:	9102      	str	r1, [sp, #8]
 800a126:	910f      	str	r1, [sp, #60]	; 0x3c
 800a128:	1d11      	adds	r1, r2, #4
 800a12a:	9111      	str	r1, [sp, #68]	; 0x44
 800a12c:	9310      	str	r3, [sp, #64]	; 0x40
 800a12e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a132:	9203      	str	r2, [sp, #12]
 800a134:	e9cd 3107 	strd	r3, r1, [sp, #28]
 800a138:	eb01 0a02 	add.w	sl, r1, r2
 800a13c:	930a      	str	r3, [sp, #40]	; 0x28
 800a13e:	9b07      	ldr	r3, [sp, #28]
 800a140:	2100      	movs	r1, #0
 800a142:	f8d3 b000 	ldr.w	fp, [r3]
 800a146:	4658      	mov	r0, fp
 800a148:	f7f6 ffb0 	bl	80010ac <__aeabi_fcmpeq>
 800a14c:	2800      	cmp	r0, #0
 800a14e:	f040 8084 	bne.w	800a25a <arm_mat_inverse_f32+0x1b6>
 800a152:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a154:	9b02      	ldr	r3, [sp, #8]
 800a156:	1ad5      	subs	r5, r2, r3
 800a158:	3301      	adds	r3, #1
 800a15a:	930e      	str	r3, [sp, #56]	; 0x38
 800a15c:	9a03      	ldr	r2, [sp, #12]
 800a15e:	9b08      	ldr	r3, [sp, #32]
 800a160:	4413      	add	r3, r2
 800a162:	930d      	str	r3, [sp, #52]	; 0x34
 800a164:	b155      	cbz	r5, 800a17c <arm_mat_inverse_f32+0xd8>
 800a166:	2400      	movs	r4, #0
 800a168:	9e07      	ldr	r6, [sp, #28]
 800a16a:	6830      	ldr	r0, [r6, #0]
 800a16c:	4659      	mov	r1, fp
 800a16e:	f7f6 febd 	bl	8000eec <__aeabi_fdiv>
 800a172:	3401      	adds	r4, #1
 800a174:	42ac      	cmp	r4, r5
 800a176:	f846 0b04 	str.w	r0, [r6], #4
 800a17a:	d1f6      	bne.n	800a16a <arm_mat_inverse_f32+0xc6>
 800a17c:	9c08      	ldr	r4, [sp, #32]
 800a17e:	2600      	movs	r6, #0
 800a180:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800a182:	e000      	b.n	800a186 <arm_mat_inverse_f32+0xe2>
 800a184:	461e      	mov	r6, r3
 800a186:	6820      	ldr	r0, [r4, #0]
 800a188:	4659      	mov	r1, fp
 800a18a:	f7f6 feaf 	bl	8000eec <__aeabi_fdiv>
 800a18e:	1c73      	adds	r3, r6, #1
 800a190:	429f      	cmp	r7, r3
 800a192:	f844 0b04 	str.w	r0, [r4], #4
 800a196:	d1f5      	bne.n	800a184 <arm_mat_inverse_f32+0xe0>
 800a198:	9b04      	ldr	r3, [sp, #16]
 800a19a:	960c      	str	r6, [sp, #48]	; 0x30
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d03f      	beq.n	800a220 <arm_mat_inverse_f32+0x17c>
 800a1a0:	2700      	movs	r7, #0
 800a1a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a1a6:	9301      	str	r3, [sp, #4]
 800a1a8:	00ab      	lsls	r3, r5, #2
 800a1aa:	9306      	str	r3, [sp, #24]
 800a1ac:	9b02      	ldr	r3, [sp, #8]
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	9305      	str	r3, [sp, #20]
 800a1b2:	9b02      	ldr	r3, [sp, #8]
 800a1b4:	42bb      	cmp	r3, r7
 800a1b6:	d049      	beq.n	800a24c <arm_mat_inverse_f32+0x1a8>
 800a1b8:	f8d6 b000 	ldr.w	fp, [r6]
 800a1bc:	b1ad      	cbz	r5, 800a1ea <arm_mat_inverse_f32+0x146>
 800a1be:	f04f 0900 	mov.w	r9, #0
 800a1c2:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800a1c6:	1f34      	subs	r4, r6, #4
 800a1c8:	f858 1b04 	ldr.w	r1, [r8], #4
 800a1cc:	4658      	mov	r0, fp
 800a1ce:	f7f6 fdd9 	bl	8000d84 <__aeabi_fmul>
 800a1d2:	4601      	mov	r1, r0
 800a1d4:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800a1d8:	f7f6 fcca 	bl	8000b70 <__aeabi_fsub>
 800a1dc:	f109 0901 	add.w	r9, r9, #1
 800a1e0:	45a9      	cmp	r9, r5
 800a1e2:	6020      	str	r0, [r4, #0]
 800a1e4:	d1f0      	bne.n	800a1c8 <arm_mat_inverse_f32+0x124>
 800a1e6:	9b06      	ldr	r3, [sp, #24]
 800a1e8:	441e      	add	r6, r3
 800a1ea:	9b01      	ldr	r3, [sp, #4]
 800a1ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a1f0:	1f1c      	subs	r4, r3, #4
 800a1f2:	f859 1b04 	ldr.w	r1, [r9], #4
 800a1f6:	4658      	mov	r0, fp
 800a1f8:	f7f6 fdc4 	bl	8000d84 <__aeabi_fmul>
 800a1fc:	4601      	mov	r1, r0
 800a1fe:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800a202:	f7f6 fcb5 	bl	8000b70 <__aeabi_fsub>
 800a206:	45d1      	cmp	r9, sl
 800a208:	6020      	str	r0, [r4, #0]
 800a20a:	d1f2      	bne.n	800a1f2 <arm_mat_inverse_f32+0x14e>
 800a20c:	9b01      	ldr	r3, [sp, #4]
 800a20e:	9a03      	ldr	r2, [sp, #12]
 800a210:	4413      	add	r3, r2
 800a212:	9301      	str	r3, [sp, #4]
 800a214:	9b05      	ldr	r3, [sp, #20]
 800a216:	3701      	adds	r7, #1
 800a218:	441e      	add	r6, r3
 800a21a:	9b04      	ldr	r3, [sp, #16]
 800a21c:	42bb      	cmp	r3, r7
 800a21e:	d1c8      	bne.n	800a1b2 <arm_mat_inverse_f32+0x10e>
 800a220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a222:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a224:	3304      	adds	r3, #4
 800a226:	9309      	str	r3, [sp, #36]	; 0x24
 800a228:	9b07      	ldr	r3, [sp, #28]
 800a22a:	4413      	add	r3, r2
 800a22c:	9307      	str	r3, [sp, #28]
 800a22e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a230:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a232:	9308      	str	r3, [sp, #32]
 800a234:	9b03      	ldr	r3, [sp, #12]
 800a236:	449a      	add	sl, r3
 800a238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a23a:	4413      	add	r3, r2
 800a23c:	930a      	str	r3, [sp, #40]	; 0x28
 800a23e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a240:	9b02      	ldr	r3, [sp, #8]
 800a242:	4293      	cmp	r3, r2
 800a244:	d045      	beq.n	800a2d2 <arm_mat_inverse_f32+0x22e>
 800a246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a248:	9302      	str	r3, [sp, #8]
 800a24a:	e778      	b.n	800a13e <arm_mat_inverse_f32+0x9a>
 800a24c:	9b06      	ldr	r3, [sp, #24]
 800a24e:	9a03      	ldr	r2, [sp, #12]
 800a250:	441e      	add	r6, r3
 800a252:	9b01      	ldr	r3, [sp, #4]
 800a254:	4413      	add	r3, r2
 800a256:	9301      	str	r3, [sp, #4]
 800a258:	e7dc      	b.n	800a214 <arm_mat_inverse_f32+0x170>
 800a25a:	9b02      	ldr	r3, [sp, #8]
 800a25c:	9a04      	ldr	r2, [sp, #16]
 800a25e:	3301      	adds	r3, #1
 800a260:	4293      	cmp	r3, r2
 800a262:	930e      	str	r3, [sp, #56]	; 0x38
 800a264:	d206      	bcs.n	800a274 <arm_mat_inverse_f32+0x1d0>
 800a266:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a268:	2100      	movs	r1, #0
 800a26a:	6820      	ldr	r0, [r4, #0]
 800a26c:	f7f6 ff1e 	bl	80010ac <__aeabi_fcmpeq>
 800a270:	4623      	mov	r3, r4
 800a272:	b150      	cbz	r0, 800a28a <arm_mat_inverse_f32+0x1e6>
 800a274:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a276:	2b01      	cmp	r3, #1
 800a278:	d150      	bne.n	800a31c <arm_mat_inverse_f32+0x278>
 800a27a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a27c:	9a02      	ldr	r2, [sp, #8]
 800a27e:	1a9d      	subs	r5, r3, r2
 800a280:	9b08      	ldr	r3, [sp, #32]
 800a282:	9a03      	ldr	r2, [sp, #12]
 800a284:	4413      	add	r3, r2
 800a286:	930d      	str	r3, [sp, #52]	; 0x34
 800a288:	e76c      	b.n	800a164 <arm_mat_inverse_f32+0xc0>
 800a28a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a28c:	9902      	ldr	r1, [sp, #8]
 800a28e:	1a55      	subs	r5, r2, r1
 800a290:	d009      	beq.n	800a2a6 <arm_mat_inverse_f32+0x202>
 800a292:	9a07      	ldr	r2, [sp, #28]
 800a294:	6819      	ldr	r1, [r3, #0]
 800a296:	6814      	ldr	r4, [r2, #0]
 800a298:	3001      	adds	r0, #1
 800a29a:	4285      	cmp	r5, r0
 800a29c:	f843 4b04 	str.w	r4, [r3], #4
 800a2a0:	f842 1b04 	str.w	r1, [r2], #4
 800a2a4:	d1f6      	bne.n	800a294 <arm_mat_inverse_f32+0x1f0>
 800a2a6:	9a08      	ldr	r2, [sp, #32]
 800a2a8:	9b03      	ldr	r3, [sp, #12]
 800a2aa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a2ac:	18d3      	adds	r3, r2, r3
 800a2ae:	930d      	str	r3, [sp, #52]	; 0x34
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	6808      	ldr	r0, [r1, #0]
 800a2b6:	6814      	ldr	r4, [r2, #0]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	429e      	cmp	r6, r3
 800a2bc:	f841 4b04 	str.w	r4, [r1], #4
 800a2c0:	f842 0b04 	str.w	r0, [r2], #4
 800a2c4:	d1f6      	bne.n	800a2b4 <arm_mat_inverse_f32+0x210>
 800a2c6:	9b07      	ldr	r3, [sp, #28]
 800a2c8:	f8d3 b000 	ldr.w	fp, [r3]
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2d0:	e748      	b.n	800a164 <arm_mat_inverse_f32+0xc0>
 800a2d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d026      	beq.n	800a326 <arm_mat_inverse_f32+0x282>
 800a2d8:	4658      	mov	r0, fp
 800a2da:	2100      	movs	r1, #0
 800a2dc:	f7f6 fee6 	bl	80010ac <__aeabi_fcmpeq>
 800a2e0:	b910      	cbnz	r0, 800a2e8 <arm_mat_inverse_f32+0x244>
 800a2e2:	b015      	add	sp, #84	; 0x54
 800a2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e8:	9b04      	ldr	r3, [sp, #16]
 800a2ea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a2ec:	fb04 f403 	mul.w	r4, r4, r3
 800a2f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a2f2:	685d      	ldr	r5, [r3, #4]
 800a2f4:	b194      	cbz	r4, 800a31c <arm_mat_inverse_f32+0x278>
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	6828      	ldr	r0, [r5, #0]
 800a2fa:	f7f6 fed7 	bl	80010ac <__aeabi_fcmpeq>
 800a2fe:	2800      	cmp	r0, #0
 800a300:	d0ef      	beq.n	800a2e2 <arm_mat_inverse_f32+0x23e>
 800a302:	2600      	movs	r6, #0
 800a304:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800a306:	e006      	b.n	800a316 <arm_mat_inverse_f32+0x272>
 800a308:	4631      	mov	r1, r6
 800a30a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800a30e:	f7f6 fecd 	bl	80010ac <__aeabi_fcmpeq>
 800a312:	2800      	cmp	r0, #0
 800a314:	d0e5      	beq.n	800a2e2 <arm_mat_inverse_f32+0x23e>
 800a316:	3701      	adds	r7, #1
 800a318:	42bc      	cmp	r4, r7
 800a31a:	d1f5      	bne.n	800a308 <arm_mat_inverse_f32+0x264>
 800a31c:	f06f 0004 	mvn.w	r0, #4
 800a320:	b015      	add	sp, #84	; 0x54
 800a322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a326:	2000      	movs	r0, #0
 800a328:	b015      	add	sp, #84	; 0x54
 800a32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a32e:	f06f 0002 	mvn.w	r0, #2
 800a332:	b015      	add	sp, #84	; 0x54
 800a334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a338:	4640      	mov	r0, r8
 800a33a:	3e01      	subs	r6, #1
 800a33c:	f840 7b04 	str.w	r7, [r0], #4
 800a340:	f47f aecf 	bne.w	800a0e2 <arm_mat_inverse_f32+0x3e>
 800a344:	e6e6      	b.n	800a114 <arm_mat_inverse_f32+0x70>
 800a346:	bf00      	nop

0800a348 <arm_mat_init_f32>:
 800a348:	8001      	strh	r1, [r0, #0]
 800a34a:	8042      	strh	r2, [r0, #2]
 800a34c:	6043      	str	r3, [r0, #4]
 800a34e:	4770      	bx	lr

0800a350 <arm_mat_add_f32>:
 800a350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a354:	6803      	ldr	r3, [r0, #0]
 800a356:	e9d1 4b00 	ldrd	r4, fp, [r1]
 800a35a:	42a3      	cmp	r3, r4
 800a35c:	b083      	sub	sp, #12
 800a35e:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800a362:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800a366:	d162      	bne.n	800a42e <arm_mat_add_f32+0xde>
 800a368:	6812      	ldr	r2, [r2, #0]
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d15f      	bne.n	800a42e <arm_mat_add_f32+0xde>
 800a36e:	8803      	ldrh	r3, [r0, #0]
 800a370:	8847      	ldrh	r7, [r0, #2]
 800a372:	fb07 f703 	mul.w	r7, r7, r3
 800a376:	08bb      	lsrs	r3, r7, #2
 800a378:	9301      	str	r3, [sp, #4]
 800a37a:	d035      	beq.n	800a3e8 <arm_mat_add_f32+0x98>
 800a37c:	4698      	mov	r8, r3
 800a37e:	f10a 0610 	add.w	r6, sl, #16
 800a382:	f10b 0510 	add.w	r5, fp, #16
 800a386:	f109 0410 	add.w	r4, r9, #16
 800a38a:	f855 1c10 	ldr.w	r1, [r5, #-16]
 800a38e:	f856 0c10 	ldr.w	r0, [r6, #-16]
 800a392:	f7f6 fbef 	bl	8000b74 <__addsf3>
 800a396:	f844 0c10 	str.w	r0, [r4, #-16]
 800a39a:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 800a39e:	f856 0c0c 	ldr.w	r0, [r6, #-12]
 800a3a2:	f7f6 fbe7 	bl	8000b74 <__addsf3>
 800a3a6:	f844 0c0c 	str.w	r0, [r4, #-12]
 800a3aa:	f855 1c08 	ldr.w	r1, [r5, #-8]
 800a3ae:	f856 0c08 	ldr.w	r0, [r6, #-8]
 800a3b2:	f7f6 fbdf 	bl	8000b74 <__addsf3>
 800a3b6:	f844 0c08 	str.w	r0, [r4, #-8]
 800a3ba:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800a3be:	f856 0c04 	ldr.w	r0, [r6, #-4]
 800a3c2:	f7f6 fbd7 	bl	8000b74 <__addsf3>
 800a3c6:	f1b8 0801 	subs.w	r8, r8, #1
 800a3ca:	f844 0c04 	str.w	r0, [r4, #-4]
 800a3ce:	f105 0510 	add.w	r5, r5, #16
 800a3d2:	f106 0610 	add.w	r6, r6, #16
 800a3d6:	f104 0410 	add.w	r4, r4, #16
 800a3da:	d1d6      	bne.n	800a38a <arm_mat_add_f32+0x3a>
 800a3dc:	9b01      	ldr	r3, [sp, #4]
 800a3de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a3e2:	44c2      	add	sl, r8
 800a3e4:	44c3      	add	fp, r8
 800a3e6:	44c1      	add	r9, r8
 800a3e8:	f017 0703 	ands.w	r7, r7, #3
 800a3ec:	d01b      	beq.n	800a426 <arm_mat_add_f32+0xd6>
 800a3ee:	f8da 1000 	ldr.w	r1, [sl]
 800a3f2:	f8db 0000 	ldr.w	r0, [fp]
 800a3f6:	f7f6 fbbd 	bl	8000b74 <__addsf3>
 800a3fa:	3f01      	subs	r7, #1
 800a3fc:	f8c9 0000 	str.w	r0, [r9]
 800a400:	d011      	beq.n	800a426 <arm_mat_add_f32+0xd6>
 800a402:	f8db 1004 	ldr.w	r1, [fp, #4]
 800a406:	f8da 0004 	ldr.w	r0, [sl, #4]
 800a40a:	f7f6 fbb3 	bl	8000b74 <__addsf3>
 800a40e:	2f01      	cmp	r7, #1
 800a410:	f8c9 0004 	str.w	r0, [r9, #4]
 800a414:	d007      	beq.n	800a426 <arm_mat_add_f32+0xd6>
 800a416:	f8db 1008 	ldr.w	r1, [fp, #8]
 800a41a:	f8da 0008 	ldr.w	r0, [sl, #8]
 800a41e:	f7f6 fba9 	bl	8000b74 <__addsf3>
 800a422:	f8c9 0008 	str.w	r0, [r9, #8]
 800a426:	2000      	movs	r0, #0
 800a428:	b003      	add	sp, #12
 800a42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a42e:	f06f 0002 	mvn.w	r0, #2
 800a432:	e7f9      	b.n	800a428 <arm_mat_add_f32+0xd8>

0800a434 <atof>:
 800a434:	2100      	movs	r1, #0
 800a436:	f000 bee3 	b.w	800b200 <strtod>

0800a43a <atoi>:
 800a43a:	220a      	movs	r2, #10
 800a43c:	2100      	movs	r1, #0
 800a43e:	f000 bf7f 	b.w	800b340 <strtol>
	...

0800a444 <__errno>:
 800a444:	4b01      	ldr	r3, [pc, #4]	; (800a44c <__errno+0x8>)
 800a446:	6818      	ldr	r0, [r3, #0]
 800a448:	4770      	bx	lr
 800a44a:	bf00      	nop
 800a44c:	200001b4 	.word	0x200001b4

0800a450 <__libc_init_array>:
 800a450:	b570      	push	{r4, r5, r6, lr}
 800a452:	2500      	movs	r5, #0
 800a454:	4e0c      	ldr	r6, [pc, #48]	; (800a488 <__libc_init_array+0x38>)
 800a456:	4c0d      	ldr	r4, [pc, #52]	; (800a48c <__libc_init_array+0x3c>)
 800a458:	1ba4      	subs	r4, r4, r6
 800a45a:	10a4      	asrs	r4, r4, #2
 800a45c:	42a5      	cmp	r5, r4
 800a45e:	d109      	bne.n	800a474 <__libc_init_array+0x24>
 800a460:	f003 ff52 	bl	800e308 <_init>
 800a464:	2500      	movs	r5, #0
 800a466:	4e0a      	ldr	r6, [pc, #40]	; (800a490 <__libc_init_array+0x40>)
 800a468:	4c0a      	ldr	r4, [pc, #40]	; (800a494 <__libc_init_array+0x44>)
 800a46a:	1ba4      	subs	r4, r4, r6
 800a46c:	10a4      	asrs	r4, r4, #2
 800a46e:	42a5      	cmp	r5, r4
 800a470:	d105      	bne.n	800a47e <__libc_init_array+0x2e>
 800a472:	bd70      	pop	{r4, r5, r6, pc}
 800a474:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a478:	4798      	blx	r3
 800a47a:	3501      	adds	r5, #1
 800a47c:	e7ee      	b.n	800a45c <__libc_init_array+0xc>
 800a47e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a482:	4798      	blx	r3
 800a484:	3501      	adds	r5, #1
 800a486:	e7f2      	b.n	800a46e <__libc_init_array+0x1e>
 800a488:	0800f560 	.word	0x0800f560
 800a48c:	0800f560 	.word	0x0800f560
 800a490:	0800f560 	.word	0x0800f560
 800a494:	0800f564 	.word	0x0800f564

0800a498 <__itoa>:
 800a498:	1e93      	subs	r3, r2, #2
 800a49a:	2b22      	cmp	r3, #34	; 0x22
 800a49c:	b510      	push	{r4, lr}
 800a49e:	460c      	mov	r4, r1
 800a4a0:	d904      	bls.n	800a4ac <__itoa+0x14>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	461c      	mov	r4, r3
 800a4a6:	700b      	strb	r3, [r1, #0]
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	bd10      	pop	{r4, pc}
 800a4ac:	2a0a      	cmp	r2, #10
 800a4ae:	d109      	bne.n	800a4c4 <__itoa+0x2c>
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	da07      	bge.n	800a4c4 <__itoa+0x2c>
 800a4b4:	232d      	movs	r3, #45	; 0x2d
 800a4b6:	700b      	strb	r3, [r1, #0]
 800a4b8:	2101      	movs	r1, #1
 800a4ba:	4240      	negs	r0, r0
 800a4bc:	4421      	add	r1, r4
 800a4be:	f000 ff55 	bl	800b36c <__utoa>
 800a4c2:	e7f1      	b.n	800a4a8 <__itoa+0x10>
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	e7f9      	b.n	800a4bc <__itoa+0x24>

0800a4c8 <itoa>:
 800a4c8:	f7ff bfe6 	b.w	800a498 <__itoa>

0800a4cc <memcmp>:
 800a4cc:	b530      	push	{r4, r5, lr}
 800a4ce:	2400      	movs	r4, #0
 800a4d0:	42a2      	cmp	r2, r4
 800a4d2:	d101      	bne.n	800a4d8 <memcmp+0xc>
 800a4d4:	2000      	movs	r0, #0
 800a4d6:	e007      	b.n	800a4e8 <memcmp+0x1c>
 800a4d8:	5d03      	ldrb	r3, [r0, r4]
 800a4da:	3401      	adds	r4, #1
 800a4dc:	190d      	adds	r5, r1, r4
 800a4de:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800a4e2:	42ab      	cmp	r3, r5
 800a4e4:	d0f4      	beq.n	800a4d0 <memcmp+0x4>
 800a4e6:	1b58      	subs	r0, r3, r5
 800a4e8:	bd30      	pop	{r4, r5, pc}

0800a4ea <memcpy>:
 800a4ea:	b510      	push	{r4, lr}
 800a4ec:	1e43      	subs	r3, r0, #1
 800a4ee:	440a      	add	r2, r1
 800a4f0:	4291      	cmp	r1, r2
 800a4f2:	d100      	bne.n	800a4f6 <memcpy+0xc>
 800a4f4:	bd10      	pop	{r4, pc}
 800a4f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4fe:	e7f7      	b.n	800a4f0 <memcpy+0x6>

0800a500 <memset>:
 800a500:	4603      	mov	r3, r0
 800a502:	4402      	add	r2, r0
 800a504:	4293      	cmp	r3, r2
 800a506:	d100      	bne.n	800a50a <memset+0xa>
 800a508:	4770      	bx	lr
 800a50a:	f803 1b01 	strb.w	r1, [r3], #1
 800a50e:	e7f9      	b.n	800a504 <memset+0x4>

0800a510 <siscanf>:
 800a510:	b40e      	push	{r1, r2, r3}
 800a512:	f44f 7201 	mov.w	r2, #516	; 0x204
 800a516:	b530      	push	{r4, r5, lr}
 800a518:	b09c      	sub	sp, #112	; 0x70
 800a51a:	ac1f      	add	r4, sp, #124	; 0x7c
 800a51c:	f854 5b04 	ldr.w	r5, [r4], #4
 800a520:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a524:	9002      	str	r0, [sp, #8]
 800a526:	9006      	str	r0, [sp, #24]
 800a528:	f7f5 fe12 	bl	8000150 <strlen>
 800a52c:	4b0b      	ldr	r3, [pc, #44]	; (800a55c <siscanf+0x4c>)
 800a52e:	9003      	str	r0, [sp, #12]
 800a530:	930b      	str	r3, [sp, #44]	; 0x2c
 800a532:	2300      	movs	r3, #0
 800a534:	930f      	str	r3, [sp, #60]	; 0x3c
 800a536:	9314      	str	r3, [sp, #80]	; 0x50
 800a538:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a53c:	9007      	str	r0, [sp, #28]
 800a53e:	4808      	ldr	r0, [pc, #32]	; (800a560 <siscanf+0x50>)
 800a540:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a544:	462a      	mov	r2, r5
 800a546:	4623      	mov	r3, r4
 800a548:	a902      	add	r1, sp, #8
 800a54a:	6800      	ldr	r0, [r0, #0]
 800a54c:	9401      	str	r4, [sp, #4]
 800a54e:	f001 ff53 	bl	800c3f8 <__ssvfiscanf_r>
 800a552:	b01c      	add	sp, #112	; 0x70
 800a554:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a558:	b003      	add	sp, #12
 800a55a:	4770      	bx	lr
 800a55c:	0800a565 	.word	0x0800a565
 800a560:	200001b4 	.word	0x200001b4

0800a564 <__seofread>:
 800a564:	2000      	movs	r0, #0
 800a566:	4770      	bx	lr

0800a568 <stpcpy>:
 800a568:	4603      	mov	r3, r0
 800a56a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a56e:	4618      	mov	r0, r3
 800a570:	f803 2b01 	strb.w	r2, [r3], #1
 800a574:	2a00      	cmp	r2, #0
 800a576:	d1f8      	bne.n	800a56a <stpcpy+0x2>
 800a578:	4770      	bx	lr

0800a57a <strcpy>:
 800a57a:	4603      	mov	r3, r0
 800a57c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a580:	f803 2b01 	strb.w	r2, [r3], #1
 800a584:	2a00      	cmp	r2, #0
 800a586:	d1f9      	bne.n	800a57c <strcpy+0x2>
 800a588:	4770      	bx	lr

0800a58a <strstr>:
 800a58a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a58c:	7803      	ldrb	r3, [r0, #0]
 800a58e:	b17b      	cbz	r3, 800a5b0 <strstr+0x26>
 800a590:	4604      	mov	r4, r0
 800a592:	7823      	ldrb	r3, [r4, #0]
 800a594:	4620      	mov	r0, r4
 800a596:	1c66      	adds	r6, r4, #1
 800a598:	b17b      	cbz	r3, 800a5ba <strstr+0x30>
 800a59a:	1e4a      	subs	r2, r1, #1
 800a59c:	1e63      	subs	r3, r4, #1
 800a59e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800a5a2:	b14d      	cbz	r5, 800a5b8 <strstr+0x2e>
 800a5a4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a5a8:	4634      	mov	r4, r6
 800a5aa:	42af      	cmp	r7, r5
 800a5ac:	d0f7      	beq.n	800a59e <strstr+0x14>
 800a5ae:	e7f0      	b.n	800a592 <strstr+0x8>
 800a5b0:	780b      	ldrb	r3, [r1, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	bf18      	it	ne
 800a5b6:	2000      	movne	r0, #0
 800a5b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	e7fc      	b.n	800a5b8 <strstr+0x2e>

0800a5be <sulp>:
 800a5be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c2:	460f      	mov	r7, r1
 800a5c4:	4690      	mov	r8, r2
 800a5c6:	f001 fd27 	bl	800c018 <__ulp>
 800a5ca:	4604      	mov	r4, r0
 800a5cc:	460d      	mov	r5, r1
 800a5ce:	f1b8 0f00 	cmp.w	r8, #0
 800a5d2:	d011      	beq.n	800a5f8 <sulp+0x3a>
 800a5d4:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a5d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	dd0b      	ble.n	800a5f8 <sulp+0x3a>
 800a5e0:	2400      	movs	r4, #0
 800a5e2:	051b      	lsls	r3, r3, #20
 800a5e4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a5e8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a5ec:	4622      	mov	r2, r4
 800a5ee:	462b      	mov	r3, r5
 800a5f0:	f7f5 ff72 	bl	80004d8 <__aeabi_dmul>
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	460d      	mov	r5, r1
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	4629      	mov	r1, r5
 800a5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a600 <_strtod_l>:
 800a600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a604:	461f      	mov	r7, r3
 800a606:	2300      	movs	r3, #0
 800a608:	b0a1      	sub	sp, #132	; 0x84
 800a60a:	4683      	mov	fp, r0
 800a60c:	4638      	mov	r0, r7
 800a60e:	460e      	mov	r6, r1
 800a610:	9217      	str	r2, [sp, #92]	; 0x5c
 800a612:	931c      	str	r3, [sp, #112]	; 0x70
 800a614:	f001 fa22 	bl	800ba5c <__localeconv_l>
 800a618:	4680      	mov	r8, r0
 800a61a:	6800      	ldr	r0, [r0, #0]
 800a61c:	f7f5 fd98 	bl	8000150 <strlen>
 800a620:	f04f 0900 	mov.w	r9, #0
 800a624:	4604      	mov	r4, r0
 800a626:	f04f 0a00 	mov.w	sl, #0
 800a62a:	961b      	str	r6, [sp, #108]	; 0x6c
 800a62c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a62e:	781a      	ldrb	r2, [r3, #0]
 800a630:	2a0d      	cmp	r2, #13
 800a632:	d832      	bhi.n	800a69a <_strtod_l+0x9a>
 800a634:	2a09      	cmp	r2, #9
 800a636:	d236      	bcs.n	800a6a6 <_strtod_l+0xa6>
 800a638:	2a00      	cmp	r2, #0
 800a63a:	d03e      	beq.n	800a6ba <_strtod_l+0xba>
 800a63c:	2300      	movs	r3, #0
 800a63e:	930d      	str	r3, [sp, #52]	; 0x34
 800a640:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a642:	782b      	ldrb	r3, [r5, #0]
 800a644:	2b30      	cmp	r3, #48	; 0x30
 800a646:	f040 80ac 	bne.w	800a7a2 <_strtod_l+0x1a2>
 800a64a:	786b      	ldrb	r3, [r5, #1]
 800a64c:	2b58      	cmp	r3, #88	; 0x58
 800a64e:	d001      	beq.n	800a654 <_strtod_l+0x54>
 800a650:	2b78      	cmp	r3, #120	; 0x78
 800a652:	d167      	bne.n	800a724 <_strtod_l+0x124>
 800a654:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a656:	9702      	str	r7, [sp, #8]
 800a658:	9301      	str	r3, [sp, #4]
 800a65a:	ab1c      	add	r3, sp, #112	; 0x70
 800a65c:	9300      	str	r3, [sp, #0]
 800a65e:	4a89      	ldr	r2, [pc, #548]	; (800a884 <_strtod_l+0x284>)
 800a660:	ab1d      	add	r3, sp, #116	; 0x74
 800a662:	a91b      	add	r1, sp, #108	; 0x6c
 800a664:	4658      	mov	r0, fp
 800a666:	f000 ff0f 	bl	800b488 <__gethex>
 800a66a:	f010 0407 	ands.w	r4, r0, #7
 800a66e:	4606      	mov	r6, r0
 800a670:	d005      	beq.n	800a67e <_strtod_l+0x7e>
 800a672:	2c06      	cmp	r4, #6
 800a674:	d12b      	bne.n	800a6ce <_strtod_l+0xce>
 800a676:	2300      	movs	r3, #0
 800a678:	3501      	adds	r5, #1
 800a67a:	951b      	str	r5, [sp, #108]	; 0x6c
 800a67c:	930d      	str	r3, [sp, #52]	; 0x34
 800a67e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a680:	2b00      	cmp	r3, #0
 800a682:	f040 85a6 	bne.w	800b1d2 <_strtod_l+0xbd2>
 800a686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a688:	b1e3      	cbz	r3, 800a6c4 <_strtod_l+0xc4>
 800a68a:	464a      	mov	r2, r9
 800a68c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800a690:	4610      	mov	r0, r2
 800a692:	4619      	mov	r1, r3
 800a694:	b021      	add	sp, #132	; 0x84
 800a696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a69a:	2a2b      	cmp	r2, #43	; 0x2b
 800a69c:	d015      	beq.n	800a6ca <_strtod_l+0xca>
 800a69e:	2a2d      	cmp	r2, #45	; 0x2d
 800a6a0:	d004      	beq.n	800a6ac <_strtod_l+0xac>
 800a6a2:	2a20      	cmp	r2, #32
 800a6a4:	d1ca      	bne.n	800a63c <_strtod_l+0x3c>
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	931b      	str	r3, [sp, #108]	; 0x6c
 800a6aa:	e7bf      	b.n	800a62c <_strtod_l+0x2c>
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	920d      	str	r2, [sp, #52]	; 0x34
 800a6b0:	1c5a      	adds	r2, r3, #1
 800a6b2:	921b      	str	r2, [sp, #108]	; 0x6c
 800a6b4:	785b      	ldrb	r3, [r3, #1]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1c2      	bne.n	800a640 <_strtod_l+0x40>
 800a6ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6bc:	961b      	str	r6, [sp, #108]	; 0x6c
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f040 8585 	bne.w	800b1ce <_strtod_l+0xbce>
 800a6c4:	464a      	mov	r2, r9
 800a6c6:	4653      	mov	r3, sl
 800a6c8:	e7e2      	b.n	800a690 <_strtod_l+0x90>
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	e7ef      	b.n	800a6ae <_strtod_l+0xae>
 800a6ce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a6d0:	b13a      	cbz	r2, 800a6e2 <_strtod_l+0xe2>
 800a6d2:	2135      	movs	r1, #53	; 0x35
 800a6d4:	a81e      	add	r0, sp, #120	; 0x78
 800a6d6:	f001 fd92 	bl	800c1fe <__copybits>
 800a6da:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a6dc:	4658      	mov	r0, fp
 800a6de:	f001 fa05 	bl	800baec <_Bfree>
 800a6e2:	3c01      	subs	r4, #1
 800a6e4:	2c04      	cmp	r4, #4
 800a6e6:	d806      	bhi.n	800a6f6 <_strtod_l+0xf6>
 800a6e8:	e8df f004 	tbb	[pc, r4]
 800a6ec:	1714030a 	.word	0x1714030a
 800a6f0:	0a          	.byte	0x0a
 800a6f1:	00          	.byte	0x00
 800a6f2:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800a6f6:	0731      	lsls	r1, r6, #28
 800a6f8:	d5c1      	bpl.n	800a67e <_strtod_l+0x7e>
 800a6fa:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800a6fe:	e7be      	b.n	800a67e <_strtod_l+0x7e>
 800a700:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a702:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800a706:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a70a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a70e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800a712:	e7f0      	b.n	800a6f6 <_strtod_l+0xf6>
 800a714:	f8df a170 	ldr.w	sl, [pc, #368]	; 800a888 <_strtod_l+0x288>
 800a718:	e7ed      	b.n	800a6f6 <_strtod_l+0xf6>
 800a71a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800a71e:	f04f 39ff 	mov.w	r9, #4294967295
 800a722:	e7e8      	b.n	800a6f6 <_strtod_l+0xf6>
 800a724:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a726:	1c5a      	adds	r2, r3, #1
 800a728:	921b      	str	r2, [sp, #108]	; 0x6c
 800a72a:	785b      	ldrb	r3, [r3, #1]
 800a72c:	2b30      	cmp	r3, #48	; 0x30
 800a72e:	d0f9      	beq.n	800a724 <_strtod_l+0x124>
 800a730:	2b00      	cmp	r3, #0
 800a732:	d0a4      	beq.n	800a67e <_strtod_l+0x7e>
 800a734:	2301      	movs	r3, #1
 800a736:	2500      	movs	r5, #0
 800a738:	220a      	movs	r2, #10
 800a73a:	9307      	str	r3, [sp, #28]
 800a73c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a73e:	9506      	str	r5, [sp, #24]
 800a740:	9308      	str	r3, [sp, #32]
 800a742:	9504      	str	r5, [sp, #16]
 800a744:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a746:	7807      	ldrb	r7, [r0, #0]
 800a748:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800a74c:	b2d9      	uxtb	r1, r3
 800a74e:	2909      	cmp	r1, #9
 800a750:	d929      	bls.n	800a7a6 <_strtod_l+0x1a6>
 800a752:	4622      	mov	r2, r4
 800a754:	f8d8 1000 	ldr.w	r1, [r8]
 800a758:	f002 f937 	bl	800c9ca <strncmp>
 800a75c:	2800      	cmp	r0, #0
 800a75e:	d031      	beq.n	800a7c4 <_strtod_l+0x1c4>
 800a760:	2000      	movs	r0, #0
 800a762:	463b      	mov	r3, r7
 800a764:	4602      	mov	r2, r0
 800a766:	9c04      	ldr	r4, [sp, #16]
 800a768:	9005      	str	r0, [sp, #20]
 800a76a:	2b65      	cmp	r3, #101	; 0x65
 800a76c:	d001      	beq.n	800a772 <_strtod_l+0x172>
 800a76e:	2b45      	cmp	r3, #69	; 0x45
 800a770:	d114      	bne.n	800a79c <_strtod_l+0x19c>
 800a772:	b924      	cbnz	r4, 800a77e <_strtod_l+0x17e>
 800a774:	b910      	cbnz	r0, 800a77c <_strtod_l+0x17c>
 800a776:	9b07      	ldr	r3, [sp, #28]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d09e      	beq.n	800a6ba <_strtod_l+0xba>
 800a77c:	2400      	movs	r4, #0
 800a77e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a780:	1c73      	adds	r3, r6, #1
 800a782:	931b      	str	r3, [sp, #108]	; 0x6c
 800a784:	7873      	ldrb	r3, [r6, #1]
 800a786:	2b2b      	cmp	r3, #43	; 0x2b
 800a788:	d078      	beq.n	800a87c <_strtod_l+0x27c>
 800a78a:	2b2d      	cmp	r3, #45	; 0x2d
 800a78c:	d070      	beq.n	800a870 <_strtod_l+0x270>
 800a78e:	f04f 0c00 	mov.w	ip, #0
 800a792:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800a796:	2f09      	cmp	r7, #9
 800a798:	d97c      	bls.n	800a894 <_strtod_l+0x294>
 800a79a:	961b      	str	r6, [sp, #108]	; 0x6c
 800a79c:	f04f 0e00 	mov.w	lr, #0
 800a7a0:	e09a      	b.n	800a8d8 <_strtod_l+0x2d8>
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	e7c7      	b.n	800a736 <_strtod_l+0x136>
 800a7a6:	9904      	ldr	r1, [sp, #16]
 800a7a8:	3001      	adds	r0, #1
 800a7aa:	2908      	cmp	r1, #8
 800a7ac:	bfd7      	itett	le
 800a7ae:	9906      	ldrle	r1, [sp, #24]
 800a7b0:	fb02 3505 	mlagt	r5, r2, r5, r3
 800a7b4:	fb02 3301 	mlale	r3, r2, r1, r3
 800a7b8:	9306      	strle	r3, [sp, #24]
 800a7ba:	9b04      	ldr	r3, [sp, #16]
 800a7bc:	901b      	str	r0, [sp, #108]	; 0x6c
 800a7be:	3301      	adds	r3, #1
 800a7c0:	9304      	str	r3, [sp, #16]
 800a7c2:	e7bf      	b.n	800a744 <_strtod_l+0x144>
 800a7c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a7c6:	191a      	adds	r2, r3, r4
 800a7c8:	921b      	str	r2, [sp, #108]	; 0x6c
 800a7ca:	9a04      	ldr	r2, [sp, #16]
 800a7cc:	5d1b      	ldrb	r3, [r3, r4]
 800a7ce:	2a00      	cmp	r2, #0
 800a7d0:	d037      	beq.n	800a842 <_strtod_l+0x242>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	9c04      	ldr	r4, [sp, #16]
 800a7d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a7da:	2909      	cmp	r1, #9
 800a7dc:	d913      	bls.n	800a806 <_strtod_l+0x206>
 800a7de:	2101      	movs	r1, #1
 800a7e0:	9105      	str	r1, [sp, #20]
 800a7e2:	e7c2      	b.n	800a76a <_strtod_l+0x16a>
 800a7e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	1c5a      	adds	r2, r3, #1
 800a7ea:	921b      	str	r2, [sp, #108]	; 0x6c
 800a7ec:	785b      	ldrb	r3, [r3, #1]
 800a7ee:	2b30      	cmp	r3, #48	; 0x30
 800a7f0:	d0f8      	beq.n	800a7e4 <_strtod_l+0x1e4>
 800a7f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a7f6:	2a08      	cmp	r2, #8
 800a7f8:	f200 84f0 	bhi.w	800b1dc <_strtod_l+0xbdc>
 800a7fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a7fe:	9208      	str	r2, [sp, #32]
 800a800:	4602      	mov	r2, r0
 800a802:	2000      	movs	r0, #0
 800a804:	4604      	mov	r4, r0
 800a806:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800a80a:	f100 0101 	add.w	r1, r0, #1
 800a80e:	d012      	beq.n	800a836 <_strtod_l+0x236>
 800a810:	440a      	add	r2, r1
 800a812:	270a      	movs	r7, #10
 800a814:	4621      	mov	r1, r4
 800a816:	eb00 0c04 	add.w	ip, r0, r4
 800a81a:	458c      	cmp	ip, r1
 800a81c:	d113      	bne.n	800a846 <_strtod_l+0x246>
 800a81e:	1821      	adds	r1, r4, r0
 800a820:	2908      	cmp	r1, #8
 800a822:	f104 0401 	add.w	r4, r4, #1
 800a826:	4404      	add	r4, r0
 800a828:	dc19      	bgt.n	800a85e <_strtod_l+0x25e>
 800a82a:	210a      	movs	r1, #10
 800a82c:	9b06      	ldr	r3, [sp, #24]
 800a82e:	fb01 e303 	mla	r3, r1, r3, lr
 800a832:	9306      	str	r3, [sp, #24]
 800a834:	2100      	movs	r1, #0
 800a836:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a838:	1c58      	adds	r0, r3, #1
 800a83a:	901b      	str	r0, [sp, #108]	; 0x6c
 800a83c:	785b      	ldrb	r3, [r3, #1]
 800a83e:	4608      	mov	r0, r1
 800a840:	e7c9      	b.n	800a7d6 <_strtod_l+0x1d6>
 800a842:	9804      	ldr	r0, [sp, #16]
 800a844:	e7d3      	b.n	800a7ee <_strtod_l+0x1ee>
 800a846:	2908      	cmp	r1, #8
 800a848:	f101 0101 	add.w	r1, r1, #1
 800a84c:	dc03      	bgt.n	800a856 <_strtod_l+0x256>
 800a84e:	9b06      	ldr	r3, [sp, #24]
 800a850:	437b      	muls	r3, r7
 800a852:	9306      	str	r3, [sp, #24]
 800a854:	e7e1      	b.n	800a81a <_strtod_l+0x21a>
 800a856:	2910      	cmp	r1, #16
 800a858:	bfd8      	it	le
 800a85a:	437d      	mulle	r5, r7
 800a85c:	e7dd      	b.n	800a81a <_strtod_l+0x21a>
 800a85e:	2c10      	cmp	r4, #16
 800a860:	bfdc      	itt	le
 800a862:	210a      	movle	r1, #10
 800a864:	fb01 e505 	mlale	r5, r1, r5, lr
 800a868:	e7e4      	b.n	800a834 <_strtod_l+0x234>
 800a86a:	2301      	movs	r3, #1
 800a86c:	9305      	str	r3, [sp, #20]
 800a86e:	e781      	b.n	800a774 <_strtod_l+0x174>
 800a870:	f04f 0c01 	mov.w	ip, #1
 800a874:	1cb3      	adds	r3, r6, #2
 800a876:	931b      	str	r3, [sp, #108]	; 0x6c
 800a878:	78b3      	ldrb	r3, [r6, #2]
 800a87a:	e78a      	b.n	800a792 <_strtod_l+0x192>
 800a87c:	f04f 0c00 	mov.w	ip, #0
 800a880:	e7f8      	b.n	800a874 <_strtod_l+0x274>
 800a882:	bf00      	nop
 800a884:	0800f064 	.word	0x0800f064
 800a888:	7ff00000 	.word	0x7ff00000
 800a88c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a88e:	1c5f      	adds	r7, r3, #1
 800a890:	971b      	str	r7, [sp, #108]	; 0x6c
 800a892:	785b      	ldrb	r3, [r3, #1]
 800a894:	2b30      	cmp	r3, #48	; 0x30
 800a896:	d0f9      	beq.n	800a88c <_strtod_l+0x28c>
 800a898:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800a89c:	2f08      	cmp	r7, #8
 800a89e:	f63f af7d 	bhi.w	800a79c <_strtod_l+0x19c>
 800a8a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a8a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a8a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a8aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a8ac:	1c5f      	adds	r7, r3, #1
 800a8ae:	971b      	str	r7, [sp, #108]	; 0x6c
 800a8b0:	785b      	ldrb	r3, [r3, #1]
 800a8b2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800a8b6:	f1b8 0f09 	cmp.w	r8, #9
 800a8ba:	d937      	bls.n	800a92c <_strtod_l+0x32c>
 800a8bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8be:	1a7f      	subs	r7, r7, r1
 800a8c0:	2f08      	cmp	r7, #8
 800a8c2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a8c6:	dc37      	bgt.n	800a938 <_strtod_l+0x338>
 800a8c8:	45be      	cmp	lr, r7
 800a8ca:	bfa8      	it	ge
 800a8cc:	46be      	movge	lr, r7
 800a8ce:	f1bc 0f00 	cmp.w	ip, #0
 800a8d2:	d001      	beq.n	800a8d8 <_strtod_l+0x2d8>
 800a8d4:	f1ce 0e00 	rsb	lr, lr, #0
 800a8d8:	2c00      	cmp	r4, #0
 800a8da:	d151      	bne.n	800a980 <_strtod_l+0x380>
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	f47f aece 	bne.w	800a67e <_strtod_l+0x7e>
 800a8e2:	9a07      	ldr	r2, [sp, #28]
 800a8e4:	2a00      	cmp	r2, #0
 800a8e6:	f47f aeca 	bne.w	800a67e <_strtod_l+0x7e>
 800a8ea:	9a05      	ldr	r2, [sp, #20]
 800a8ec:	2a00      	cmp	r2, #0
 800a8ee:	f47f aee4 	bne.w	800a6ba <_strtod_l+0xba>
 800a8f2:	2b4e      	cmp	r3, #78	; 0x4e
 800a8f4:	d027      	beq.n	800a946 <_strtod_l+0x346>
 800a8f6:	dc21      	bgt.n	800a93c <_strtod_l+0x33c>
 800a8f8:	2b49      	cmp	r3, #73	; 0x49
 800a8fa:	f47f aede 	bne.w	800a6ba <_strtod_l+0xba>
 800a8fe:	49a4      	ldr	r1, [pc, #656]	; (800ab90 <_strtod_l+0x590>)
 800a900:	a81b      	add	r0, sp, #108	; 0x6c
 800a902:	f000 fff5 	bl	800b8f0 <__match>
 800a906:	2800      	cmp	r0, #0
 800a908:	f43f aed7 	beq.w	800a6ba <_strtod_l+0xba>
 800a90c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a90e:	49a1      	ldr	r1, [pc, #644]	; (800ab94 <_strtod_l+0x594>)
 800a910:	3b01      	subs	r3, #1
 800a912:	a81b      	add	r0, sp, #108	; 0x6c
 800a914:	931b      	str	r3, [sp, #108]	; 0x6c
 800a916:	f000 ffeb 	bl	800b8f0 <__match>
 800a91a:	b910      	cbnz	r0, 800a922 <_strtod_l+0x322>
 800a91c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a91e:	3301      	adds	r3, #1
 800a920:	931b      	str	r3, [sp, #108]	; 0x6c
 800a922:	f8df a284 	ldr.w	sl, [pc, #644]	; 800aba8 <_strtod_l+0x5a8>
 800a926:	f04f 0900 	mov.w	r9, #0
 800a92a:	e6a8      	b.n	800a67e <_strtod_l+0x7e>
 800a92c:	210a      	movs	r1, #10
 800a92e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a932:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a936:	e7b8      	b.n	800a8aa <_strtod_l+0x2aa>
 800a938:	46be      	mov	lr, r7
 800a93a:	e7c8      	b.n	800a8ce <_strtod_l+0x2ce>
 800a93c:	2b69      	cmp	r3, #105	; 0x69
 800a93e:	d0de      	beq.n	800a8fe <_strtod_l+0x2fe>
 800a940:	2b6e      	cmp	r3, #110	; 0x6e
 800a942:	f47f aeba 	bne.w	800a6ba <_strtod_l+0xba>
 800a946:	4994      	ldr	r1, [pc, #592]	; (800ab98 <_strtod_l+0x598>)
 800a948:	a81b      	add	r0, sp, #108	; 0x6c
 800a94a:	f000 ffd1 	bl	800b8f0 <__match>
 800a94e:	2800      	cmp	r0, #0
 800a950:	f43f aeb3 	beq.w	800a6ba <_strtod_l+0xba>
 800a954:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	2b28      	cmp	r3, #40	; 0x28
 800a95a:	d10e      	bne.n	800a97a <_strtod_l+0x37a>
 800a95c:	aa1e      	add	r2, sp, #120	; 0x78
 800a95e:	498f      	ldr	r1, [pc, #572]	; (800ab9c <_strtod_l+0x59c>)
 800a960:	a81b      	add	r0, sp, #108	; 0x6c
 800a962:	f000 ffd9 	bl	800b918 <__hexnan>
 800a966:	2805      	cmp	r0, #5
 800a968:	d107      	bne.n	800a97a <_strtod_l+0x37a>
 800a96a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a96c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800a970:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800a974:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 800a978:	e681      	b.n	800a67e <_strtod_l+0x7e>
 800a97a:	f8df a234 	ldr.w	sl, [pc, #564]	; 800abb0 <_strtod_l+0x5b0>
 800a97e:	e7d2      	b.n	800a926 <_strtod_l+0x326>
 800a980:	ebae 0302 	sub.w	r3, lr, r2
 800a984:	9307      	str	r3, [sp, #28]
 800a986:	9b04      	ldr	r3, [sp, #16]
 800a988:	9806      	ldr	r0, [sp, #24]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	bf08      	it	eq
 800a98e:	4623      	moveq	r3, r4
 800a990:	2c10      	cmp	r4, #16
 800a992:	9304      	str	r3, [sp, #16]
 800a994:	46a0      	mov	r8, r4
 800a996:	bfa8      	it	ge
 800a998:	f04f 0810 	movge.w	r8, #16
 800a99c:	f7f5 fd22 	bl	80003e4 <__aeabi_ui2d>
 800a9a0:	2c09      	cmp	r4, #9
 800a9a2:	4681      	mov	r9, r0
 800a9a4:	468a      	mov	sl, r1
 800a9a6:	dc13      	bgt.n	800a9d0 <_strtod_l+0x3d0>
 800a9a8:	9b07      	ldr	r3, [sp, #28]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f43f ae67 	beq.w	800a67e <_strtod_l+0x7e>
 800a9b0:	9b07      	ldr	r3, [sp, #28]
 800a9b2:	dd7e      	ble.n	800aab2 <_strtod_l+0x4b2>
 800a9b4:	2b16      	cmp	r3, #22
 800a9b6:	dc65      	bgt.n	800aa84 <_strtod_l+0x484>
 800a9b8:	4a79      	ldr	r2, [pc, #484]	; (800aba0 <_strtod_l+0x5a0>)
 800a9ba:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800a9be:	464a      	mov	r2, r9
 800a9c0:	e9de 0100 	ldrd	r0, r1, [lr]
 800a9c4:	4653      	mov	r3, sl
 800a9c6:	f7f5 fd87 	bl	80004d8 <__aeabi_dmul>
 800a9ca:	4681      	mov	r9, r0
 800a9cc:	468a      	mov	sl, r1
 800a9ce:	e656      	b.n	800a67e <_strtod_l+0x7e>
 800a9d0:	4b73      	ldr	r3, [pc, #460]	; (800aba0 <_strtod_l+0x5a0>)
 800a9d2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a9d6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a9da:	f7f5 fd7d 	bl	80004d8 <__aeabi_dmul>
 800a9de:	4606      	mov	r6, r0
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	460f      	mov	r7, r1
 800a9e4:	f7f5 fcfe 	bl	80003e4 <__aeabi_ui2d>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	4639      	mov	r1, r7
 800a9f0:	f7f5 fbbc 	bl	800016c <__adddf3>
 800a9f4:	2c0f      	cmp	r4, #15
 800a9f6:	4681      	mov	r9, r0
 800a9f8:	468a      	mov	sl, r1
 800a9fa:	ddd5      	ble.n	800a9a8 <_strtod_l+0x3a8>
 800a9fc:	9b07      	ldr	r3, [sp, #28]
 800a9fe:	eba4 0808 	sub.w	r8, r4, r8
 800aa02:	4498      	add	r8, r3
 800aa04:	f1b8 0f00 	cmp.w	r8, #0
 800aa08:	f340 809a 	ble.w	800ab40 <_strtod_l+0x540>
 800aa0c:	f018 030f 	ands.w	r3, r8, #15
 800aa10:	d00a      	beq.n	800aa28 <_strtod_l+0x428>
 800aa12:	4963      	ldr	r1, [pc, #396]	; (800aba0 <_strtod_l+0x5a0>)
 800aa14:	464a      	mov	r2, r9
 800aa16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa1e:	4653      	mov	r3, sl
 800aa20:	f7f5 fd5a 	bl	80004d8 <__aeabi_dmul>
 800aa24:	4681      	mov	r9, r0
 800aa26:	468a      	mov	sl, r1
 800aa28:	f038 080f 	bics.w	r8, r8, #15
 800aa2c:	d077      	beq.n	800ab1e <_strtod_l+0x51e>
 800aa2e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800aa32:	dd4b      	ble.n	800aacc <_strtod_l+0x4cc>
 800aa34:	f04f 0800 	mov.w	r8, #0
 800aa38:	f8cd 8010 	str.w	r8, [sp, #16]
 800aa3c:	f8cd 8020 	str.w	r8, [sp, #32]
 800aa40:	f8cd 8018 	str.w	r8, [sp, #24]
 800aa44:	2322      	movs	r3, #34	; 0x22
 800aa46:	f04f 0900 	mov.w	r9, #0
 800aa4a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800aba8 <_strtod_l+0x5a8>
 800aa4e:	f8cb 3000 	str.w	r3, [fp]
 800aa52:	9b08      	ldr	r3, [sp, #32]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f43f ae12 	beq.w	800a67e <_strtod_l+0x7e>
 800aa5a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aa5c:	4658      	mov	r0, fp
 800aa5e:	f001 f845 	bl	800baec <_Bfree>
 800aa62:	9906      	ldr	r1, [sp, #24]
 800aa64:	4658      	mov	r0, fp
 800aa66:	f001 f841 	bl	800baec <_Bfree>
 800aa6a:	9904      	ldr	r1, [sp, #16]
 800aa6c:	4658      	mov	r0, fp
 800aa6e:	f001 f83d 	bl	800baec <_Bfree>
 800aa72:	9908      	ldr	r1, [sp, #32]
 800aa74:	4658      	mov	r0, fp
 800aa76:	f001 f839 	bl	800baec <_Bfree>
 800aa7a:	4641      	mov	r1, r8
 800aa7c:	4658      	mov	r0, fp
 800aa7e:	f001 f835 	bl	800baec <_Bfree>
 800aa82:	e5fc      	b.n	800a67e <_strtod_l+0x7e>
 800aa84:	9a07      	ldr	r2, [sp, #28]
 800aa86:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	dbb6      	blt.n	800a9fc <_strtod_l+0x3fc>
 800aa8e:	4d44      	ldr	r5, [pc, #272]	; (800aba0 <_strtod_l+0x5a0>)
 800aa90:	f1c4 040f 	rsb	r4, r4, #15
 800aa94:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800aa98:	464a      	mov	r2, r9
 800aa9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa9e:	4653      	mov	r3, sl
 800aaa0:	f7f5 fd1a 	bl	80004d8 <__aeabi_dmul>
 800aaa4:	9b07      	ldr	r3, [sp, #28]
 800aaa6:	1b1c      	subs	r4, r3, r4
 800aaa8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800aaac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aab0:	e789      	b.n	800a9c6 <_strtod_l+0x3c6>
 800aab2:	f113 0f16 	cmn.w	r3, #22
 800aab6:	dba1      	blt.n	800a9fc <_strtod_l+0x3fc>
 800aab8:	4a39      	ldr	r2, [pc, #228]	; (800aba0 <_strtod_l+0x5a0>)
 800aaba:	4648      	mov	r0, r9
 800aabc:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800aac0:	e9d2 2300 	ldrd	r2, r3, [r2]
 800aac4:	4651      	mov	r1, sl
 800aac6:	f7f5 fe31 	bl	800072c <__aeabi_ddiv>
 800aaca:	e77e      	b.n	800a9ca <_strtod_l+0x3ca>
 800aacc:	2300      	movs	r3, #0
 800aace:	4648      	mov	r0, r9
 800aad0:	4651      	mov	r1, sl
 800aad2:	461d      	mov	r5, r3
 800aad4:	4e33      	ldr	r6, [pc, #204]	; (800aba4 <_strtod_l+0x5a4>)
 800aad6:	ea4f 1828 	mov.w	r8, r8, asr #4
 800aada:	f1b8 0f01 	cmp.w	r8, #1
 800aade:	dc21      	bgt.n	800ab24 <_strtod_l+0x524>
 800aae0:	b10b      	cbz	r3, 800aae6 <_strtod_l+0x4e6>
 800aae2:	4681      	mov	r9, r0
 800aae4:	468a      	mov	sl, r1
 800aae6:	4b2f      	ldr	r3, [pc, #188]	; (800aba4 <_strtod_l+0x5a4>)
 800aae8:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800aaec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800aaf0:	464a      	mov	r2, r9
 800aaf2:	e9d5 0100 	ldrd	r0, r1, [r5]
 800aaf6:	4653      	mov	r3, sl
 800aaf8:	f7f5 fcee 	bl	80004d8 <__aeabi_dmul>
 800aafc:	4b2a      	ldr	r3, [pc, #168]	; (800aba8 <_strtod_l+0x5a8>)
 800aafe:	460a      	mov	r2, r1
 800ab00:	400b      	ands	r3, r1
 800ab02:	492a      	ldr	r1, [pc, #168]	; (800abac <_strtod_l+0x5ac>)
 800ab04:	4681      	mov	r9, r0
 800ab06:	428b      	cmp	r3, r1
 800ab08:	d894      	bhi.n	800aa34 <_strtod_l+0x434>
 800ab0a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ab0e:	428b      	cmp	r3, r1
 800ab10:	bf86      	itte	hi
 800ab12:	f04f 39ff 	movhi.w	r9, #4294967295
 800ab16:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800abb4 <_strtod_l+0x5b4>
 800ab1a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800ab1e:	2300      	movs	r3, #0
 800ab20:	9305      	str	r3, [sp, #20]
 800ab22:	e07b      	b.n	800ac1c <_strtod_l+0x61c>
 800ab24:	f018 0f01 	tst.w	r8, #1
 800ab28:	d006      	beq.n	800ab38 <_strtod_l+0x538>
 800ab2a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800ab2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab32:	f7f5 fcd1 	bl	80004d8 <__aeabi_dmul>
 800ab36:	2301      	movs	r3, #1
 800ab38:	3501      	adds	r5, #1
 800ab3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ab3e:	e7cc      	b.n	800aada <_strtod_l+0x4da>
 800ab40:	d0ed      	beq.n	800ab1e <_strtod_l+0x51e>
 800ab42:	f1c8 0800 	rsb	r8, r8, #0
 800ab46:	f018 020f 	ands.w	r2, r8, #15
 800ab4a:	d00a      	beq.n	800ab62 <_strtod_l+0x562>
 800ab4c:	4b14      	ldr	r3, [pc, #80]	; (800aba0 <_strtod_l+0x5a0>)
 800ab4e:	4648      	mov	r0, r9
 800ab50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab54:	4651      	mov	r1, sl
 800ab56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5a:	f7f5 fde7 	bl	800072c <__aeabi_ddiv>
 800ab5e:	4681      	mov	r9, r0
 800ab60:	468a      	mov	sl, r1
 800ab62:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ab66:	d0da      	beq.n	800ab1e <_strtod_l+0x51e>
 800ab68:	f1b8 0f1f 	cmp.w	r8, #31
 800ab6c:	dd24      	ble.n	800abb8 <_strtod_l+0x5b8>
 800ab6e:	f04f 0800 	mov.w	r8, #0
 800ab72:	f8cd 8010 	str.w	r8, [sp, #16]
 800ab76:	f8cd 8020 	str.w	r8, [sp, #32]
 800ab7a:	f8cd 8018 	str.w	r8, [sp, #24]
 800ab7e:	2322      	movs	r3, #34	; 0x22
 800ab80:	f04f 0900 	mov.w	r9, #0
 800ab84:	f04f 0a00 	mov.w	sl, #0
 800ab88:	f8cb 3000 	str.w	r3, [fp]
 800ab8c:	e761      	b.n	800aa52 <_strtod_l+0x452>
 800ab8e:	bf00      	nop
 800ab90:	0800f058 	.word	0x0800f058
 800ab94:	0800f05b 	.word	0x0800f05b
 800ab98:	0800f061 	.word	0x0800f061
 800ab9c:	0800f078 	.word	0x0800f078
 800aba0:	0800f110 	.word	0x0800f110
 800aba4:	0800f0e8 	.word	0x0800f0e8
 800aba8:	7ff00000 	.word	0x7ff00000
 800abac:	7ca00000 	.word	0x7ca00000
 800abb0:	fff80000 	.word	0xfff80000
 800abb4:	7fefffff 	.word	0x7fefffff
 800abb8:	f018 0310 	ands.w	r3, r8, #16
 800abbc:	bf18      	it	ne
 800abbe:	236a      	movne	r3, #106	; 0x6a
 800abc0:	4648      	mov	r0, r9
 800abc2:	9305      	str	r3, [sp, #20]
 800abc4:	4651      	mov	r1, sl
 800abc6:	2300      	movs	r3, #0
 800abc8:	4da1      	ldr	r5, [pc, #644]	; (800ae50 <_strtod_l+0x850>)
 800abca:	f1b8 0f00 	cmp.w	r8, #0
 800abce:	f300 8113 	bgt.w	800adf8 <_strtod_l+0x7f8>
 800abd2:	b10b      	cbz	r3, 800abd8 <_strtod_l+0x5d8>
 800abd4:	4681      	mov	r9, r0
 800abd6:	468a      	mov	sl, r1
 800abd8:	9b05      	ldr	r3, [sp, #20]
 800abda:	b1bb      	cbz	r3, 800ac0c <_strtod_l+0x60c>
 800abdc:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800abe0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	4651      	mov	r1, sl
 800abe8:	dd10      	ble.n	800ac0c <_strtod_l+0x60c>
 800abea:	2b1f      	cmp	r3, #31
 800abec:	f340 8110 	ble.w	800ae10 <_strtod_l+0x810>
 800abf0:	2b34      	cmp	r3, #52	; 0x34
 800abf2:	bfd8      	it	le
 800abf4:	f04f 32ff 	movle.w	r2, #4294967295
 800abf8:	f04f 0900 	mov.w	r9, #0
 800abfc:	bfcf      	iteee	gt
 800abfe:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800ac02:	3b20      	suble	r3, #32
 800ac04:	fa02 f303 	lslle.w	r3, r2, r3
 800ac08:	ea03 0a01 	andle.w	sl, r3, r1
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	2300      	movs	r3, #0
 800ac10:	4648      	mov	r0, r9
 800ac12:	4651      	mov	r1, sl
 800ac14:	f7f5 fec8 	bl	80009a8 <__aeabi_dcmpeq>
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	d1a8      	bne.n	800ab6e <_strtod_l+0x56e>
 800ac1c:	9b06      	ldr	r3, [sp, #24]
 800ac1e:	9a04      	ldr	r2, [sp, #16]
 800ac20:	9300      	str	r3, [sp, #0]
 800ac22:	9908      	ldr	r1, [sp, #32]
 800ac24:	4623      	mov	r3, r4
 800ac26:	4658      	mov	r0, fp
 800ac28:	f000 ffb2 	bl	800bb90 <__s2b>
 800ac2c:	9008      	str	r0, [sp, #32]
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	f43f af00 	beq.w	800aa34 <_strtod_l+0x434>
 800ac34:	9a07      	ldr	r2, [sp, #28]
 800ac36:	9b07      	ldr	r3, [sp, #28]
 800ac38:	2a00      	cmp	r2, #0
 800ac3a:	f1c3 0300 	rsb	r3, r3, #0
 800ac3e:	bfa8      	it	ge
 800ac40:	2300      	movge	r3, #0
 800ac42:	f04f 0800 	mov.w	r8, #0
 800ac46:	930e      	str	r3, [sp, #56]	; 0x38
 800ac48:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ac4c:	9316      	str	r3, [sp, #88]	; 0x58
 800ac4e:	f8cd 8010 	str.w	r8, [sp, #16]
 800ac52:	9b08      	ldr	r3, [sp, #32]
 800ac54:	4658      	mov	r0, fp
 800ac56:	6859      	ldr	r1, [r3, #4]
 800ac58:	f000 ff14 	bl	800ba84 <_Balloc>
 800ac5c:	9006      	str	r0, [sp, #24]
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	f43f aef0 	beq.w	800aa44 <_strtod_l+0x444>
 800ac64:	9b08      	ldr	r3, [sp, #32]
 800ac66:	300c      	adds	r0, #12
 800ac68:	691a      	ldr	r2, [r3, #16]
 800ac6a:	f103 010c 	add.w	r1, r3, #12
 800ac6e:	3202      	adds	r2, #2
 800ac70:	0092      	lsls	r2, r2, #2
 800ac72:	f7ff fc3a 	bl	800a4ea <memcpy>
 800ac76:	ab1e      	add	r3, sp, #120	; 0x78
 800ac78:	9301      	str	r3, [sp, #4]
 800ac7a:	ab1d      	add	r3, sp, #116	; 0x74
 800ac7c:	9300      	str	r3, [sp, #0]
 800ac7e:	464a      	mov	r2, r9
 800ac80:	4653      	mov	r3, sl
 800ac82:	4658      	mov	r0, fp
 800ac84:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800ac88:	f001 fa3c 	bl	800c104 <__d2b>
 800ac8c:	901c      	str	r0, [sp, #112]	; 0x70
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	f43f aed8 	beq.w	800aa44 <_strtod_l+0x444>
 800ac94:	2101      	movs	r1, #1
 800ac96:	4658      	mov	r0, fp
 800ac98:	f001 f806 	bl	800bca8 <__i2b>
 800ac9c:	9004      	str	r0, [sp, #16]
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2800      	cmp	r0, #0
 800aca2:	f43f aecf 	beq.w	800aa44 <_strtod_l+0x444>
 800aca6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800aca8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800acaa:	2d00      	cmp	r5, #0
 800acac:	bfab      	itete	ge
 800acae:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800acb0:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800acb2:	18ee      	addge	r6, r5, r3
 800acb4:	1b5c      	sublt	r4, r3, r5
 800acb6:	9b05      	ldr	r3, [sp, #20]
 800acb8:	bfa8      	it	ge
 800acba:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800acbc:	eba5 0503 	sub.w	r5, r5, r3
 800acc0:	4415      	add	r5, r2
 800acc2:	4b64      	ldr	r3, [pc, #400]	; (800ae54 <_strtod_l+0x854>)
 800acc4:	f105 35ff 	add.w	r5, r5, #4294967295
 800acc8:	bfb8      	it	lt
 800acca:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800accc:	429d      	cmp	r5, r3
 800acce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800acd2:	f280 80af 	bge.w	800ae34 <_strtod_l+0x834>
 800acd6:	1b5b      	subs	r3, r3, r5
 800acd8:	2b1f      	cmp	r3, #31
 800acda:	eba2 0203 	sub.w	r2, r2, r3
 800acde:	f04f 0701 	mov.w	r7, #1
 800ace2:	f300 809c 	bgt.w	800ae1e <_strtod_l+0x81e>
 800ace6:	2500      	movs	r5, #0
 800ace8:	fa07 f303 	lsl.w	r3, r7, r3
 800acec:	930f      	str	r3, [sp, #60]	; 0x3c
 800acee:	18b7      	adds	r7, r6, r2
 800acf0:	9b05      	ldr	r3, [sp, #20]
 800acf2:	42be      	cmp	r6, r7
 800acf4:	4414      	add	r4, r2
 800acf6:	441c      	add	r4, r3
 800acf8:	4633      	mov	r3, r6
 800acfa:	bfa8      	it	ge
 800acfc:	463b      	movge	r3, r7
 800acfe:	42a3      	cmp	r3, r4
 800ad00:	bfa8      	it	ge
 800ad02:	4623      	movge	r3, r4
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	bfc2      	ittt	gt
 800ad08:	1aff      	subgt	r7, r7, r3
 800ad0a:	1ae4      	subgt	r4, r4, r3
 800ad0c:	1af6      	subgt	r6, r6, r3
 800ad0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad10:	b1bb      	cbz	r3, 800ad42 <_strtod_l+0x742>
 800ad12:	461a      	mov	r2, r3
 800ad14:	9904      	ldr	r1, [sp, #16]
 800ad16:	4658      	mov	r0, fp
 800ad18:	f001 f864 	bl	800bde4 <__pow5mult>
 800ad1c:	9004      	str	r0, [sp, #16]
 800ad1e:	2800      	cmp	r0, #0
 800ad20:	f43f ae90 	beq.w	800aa44 <_strtod_l+0x444>
 800ad24:	4601      	mov	r1, r0
 800ad26:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ad28:	4658      	mov	r0, fp
 800ad2a:	f000 ffc6 	bl	800bcba <__multiply>
 800ad2e:	9009      	str	r0, [sp, #36]	; 0x24
 800ad30:	2800      	cmp	r0, #0
 800ad32:	f43f ae87 	beq.w	800aa44 <_strtod_l+0x444>
 800ad36:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ad38:	4658      	mov	r0, fp
 800ad3a:	f000 fed7 	bl	800baec <_Bfree>
 800ad3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad40:	931c      	str	r3, [sp, #112]	; 0x70
 800ad42:	2f00      	cmp	r7, #0
 800ad44:	dc7a      	bgt.n	800ae3c <_strtod_l+0x83c>
 800ad46:	9b07      	ldr	r3, [sp, #28]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	dd08      	ble.n	800ad5e <_strtod_l+0x75e>
 800ad4c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ad4e:	9906      	ldr	r1, [sp, #24]
 800ad50:	4658      	mov	r0, fp
 800ad52:	f001 f847 	bl	800bde4 <__pow5mult>
 800ad56:	9006      	str	r0, [sp, #24]
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	f43f ae73 	beq.w	800aa44 <_strtod_l+0x444>
 800ad5e:	2c00      	cmp	r4, #0
 800ad60:	dd08      	ble.n	800ad74 <_strtod_l+0x774>
 800ad62:	4622      	mov	r2, r4
 800ad64:	9906      	ldr	r1, [sp, #24]
 800ad66:	4658      	mov	r0, fp
 800ad68:	f001 f88a 	bl	800be80 <__lshift>
 800ad6c:	9006      	str	r0, [sp, #24]
 800ad6e:	2800      	cmp	r0, #0
 800ad70:	f43f ae68 	beq.w	800aa44 <_strtod_l+0x444>
 800ad74:	2e00      	cmp	r6, #0
 800ad76:	dd08      	ble.n	800ad8a <_strtod_l+0x78a>
 800ad78:	4632      	mov	r2, r6
 800ad7a:	9904      	ldr	r1, [sp, #16]
 800ad7c:	4658      	mov	r0, fp
 800ad7e:	f001 f87f 	bl	800be80 <__lshift>
 800ad82:	9004      	str	r0, [sp, #16]
 800ad84:	2800      	cmp	r0, #0
 800ad86:	f43f ae5d 	beq.w	800aa44 <_strtod_l+0x444>
 800ad8a:	9a06      	ldr	r2, [sp, #24]
 800ad8c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ad8e:	4658      	mov	r0, fp
 800ad90:	f001 f8e4 	bl	800bf5c <__mdiff>
 800ad94:	4680      	mov	r8, r0
 800ad96:	2800      	cmp	r0, #0
 800ad98:	f43f ae54 	beq.w	800aa44 <_strtod_l+0x444>
 800ad9c:	2400      	movs	r4, #0
 800ad9e:	68c3      	ldr	r3, [r0, #12]
 800ada0:	9904      	ldr	r1, [sp, #16]
 800ada2:	60c4      	str	r4, [r0, #12]
 800ada4:	930c      	str	r3, [sp, #48]	; 0x30
 800ada6:	f001 f8bf 	bl	800bf28 <__mcmp>
 800adaa:	42a0      	cmp	r0, r4
 800adac:	da54      	bge.n	800ae58 <_strtod_l+0x858>
 800adae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800adb0:	b9f3      	cbnz	r3, 800adf0 <_strtod_l+0x7f0>
 800adb2:	f1b9 0f00 	cmp.w	r9, #0
 800adb6:	d11b      	bne.n	800adf0 <_strtod_l+0x7f0>
 800adb8:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800adbc:	b9c3      	cbnz	r3, 800adf0 <_strtod_l+0x7f0>
 800adbe:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800adc2:	0d1b      	lsrs	r3, r3, #20
 800adc4:	051b      	lsls	r3, r3, #20
 800adc6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800adca:	d911      	bls.n	800adf0 <_strtod_l+0x7f0>
 800adcc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800add0:	b91b      	cbnz	r3, 800adda <_strtod_l+0x7da>
 800add2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800add6:	2b01      	cmp	r3, #1
 800add8:	dd0a      	ble.n	800adf0 <_strtod_l+0x7f0>
 800adda:	4641      	mov	r1, r8
 800addc:	2201      	movs	r2, #1
 800adde:	4658      	mov	r0, fp
 800ade0:	f001 f84e 	bl	800be80 <__lshift>
 800ade4:	9904      	ldr	r1, [sp, #16]
 800ade6:	4680      	mov	r8, r0
 800ade8:	f001 f89e 	bl	800bf28 <__mcmp>
 800adec:	2800      	cmp	r0, #0
 800adee:	dc68      	bgt.n	800aec2 <_strtod_l+0x8c2>
 800adf0:	9b05      	ldr	r3, [sp, #20]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d172      	bne.n	800aedc <_strtod_l+0x8dc>
 800adf6:	e630      	b.n	800aa5a <_strtod_l+0x45a>
 800adf8:	f018 0f01 	tst.w	r8, #1
 800adfc:	d004      	beq.n	800ae08 <_strtod_l+0x808>
 800adfe:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae02:	f7f5 fb69 	bl	80004d8 <__aeabi_dmul>
 800ae06:	2301      	movs	r3, #1
 800ae08:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ae0c:	3508      	adds	r5, #8
 800ae0e:	e6dc      	b.n	800abca <_strtod_l+0x5ca>
 800ae10:	f04f 32ff 	mov.w	r2, #4294967295
 800ae14:	fa02 f303 	lsl.w	r3, r2, r3
 800ae18:	ea03 0909 	and.w	r9, r3, r9
 800ae1c:	e6f6      	b.n	800ac0c <_strtod_l+0x60c>
 800ae1e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800ae22:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800ae26:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800ae2a:	35e2      	adds	r5, #226	; 0xe2
 800ae2c:	fa07 f505 	lsl.w	r5, r7, r5
 800ae30:	970f      	str	r7, [sp, #60]	; 0x3c
 800ae32:	e75c      	b.n	800acee <_strtod_l+0x6ee>
 800ae34:	2301      	movs	r3, #1
 800ae36:	2500      	movs	r5, #0
 800ae38:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae3a:	e758      	b.n	800acee <_strtod_l+0x6ee>
 800ae3c:	463a      	mov	r2, r7
 800ae3e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ae40:	4658      	mov	r0, fp
 800ae42:	f001 f81d 	bl	800be80 <__lshift>
 800ae46:	901c      	str	r0, [sp, #112]	; 0x70
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	f47f af7c 	bne.w	800ad46 <_strtod_l+0x746>
 800ae4e:	e5f9      	b.n	800aa44 <_strtod_l+0x444>
 800ae50:	0800f090 	.word	0x0800f090
 800ae54:	fffffc02 	.word	0xfffffc02
 800ae58:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ae5c:	f040 8089 	bne.w	800af72 <_strtod_l+0x972>
 800ae60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae62:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800ae66:	b342      	cbz	r2, 800aeba <_strtod_l+0x8ba>
 800ae68:	4aaf      	ldr	r2, [pc, #700]	; (800b128 <_strtod_l+0xb28>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d156      	bne.n	800af1c <_strtod_l+0x91c>
 800ae6e:	9b05      	ldr	r3, [sp, #20]
 800ae70:	4648      	mov	r0, r9
 800ae72:	b1eb      	cbz	r3, 800aeb0 <_strtod_l+0x8b0>
 800ae74:	4653      	mov	r3, sl
 800ae76:	4aad      	ldr	r2, [pc, #692]	; (800b12c <_strtod_l+0xb2c>)
 800ae78:	f04f 31ff 	mov.w	r1, #4294967295
 800ae7c:	401a      	ands	r2, r3
 800ae7e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ae82:	d818      	bhi.n	800aeb6 <_strtod_l+0x8b6>
 800ae84:	0d12      	lsrs	r2, r2, #20
 800ae86:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ae8a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae8e:	4298      	cmp	r0, r3
 800ae90:	d144      	bne.n	800af1c <_strtod_l+0x91c>
 800ae92:	4ba7      	ldr	r3, [pc, #668]	; (800b130 <_strtod_l+0xb30>)
 800ae94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d102      	bne.n	800aea0 <_strtod_l+0x8a0>
 800ae9a:	3001      	adds	r0, #1
 800ae9c:	f43f add2 	beq.w	800aa44 <_strtod_l+0x444>
 800aea0:	4ba2      	ldr	r3, [pc, #648]	; (800b12c <_strtod_l+0xb2c>)
 800aea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aea4:	f04f 0900 	mov.w	r9, #0
 800aea8:	401a      	ands	r2, r3
 800aeaa:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800aeae:	e79f      	b.n	800adf0 <_strtod_l+0x7f0>
 800aeb0:	f04f 33ff 	mov.w	r3, #4294967295
 800aeb4:	e7eb      	b.n	800ae8e <_strtod_l+0x88e>
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	e7e9      	b.n	800ae8e <_strtod_l+0x88e>
 800aeba:	bb7b      	cbnz	r3, 800af1c <_strtod_l+0x91c>
 800aebc:	f1b9 0f00 	cmp.w	r9, #0
 800aec0:	d12c      	bne.n	800af1c <_strtod_l+0x91c>
 800aec2:	9905      	ldr	r1, [sp, #20]
 800aec4:	4653      	mov	r3, sl
 800aec6:	4a99      	ldr	r2, [pc, #612]	; (800b12c <_strtod_l+0xb2c>)
 800aec8:	b1f1      	cbz	r1, 800af08 <_strtod_l+0x908>
 800aeca:	ea02 010a 	and.w	r1, r2, sl
 800aece:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800aed2:	dc19      	bgt.n	800af08 <_strtod_l+0x908>
 800aed4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aed8:	f77f ae51 	ble.w	800ab7e <_strtod_l+0x57e>
 800aedc:	2300      	movs	r3, #0
 800aede:	4a95      	ldr	r2, [pc, #596]	; (800b134 <_strtod_l+0xb34>)
 800aee0:	4648      	mov	r0, r9
 800aee2:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800aee6:	4651      	mov	r1, sl
 800aee8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800aeec:	f7f5 faf4 	bl	80004d8 <__aeabi_dmul>
 800aef0:	4681      	mov	r9, r0
 800aef2:	468a      	mov	sl, r1
 800aef4:	2900      	cmp	r1, #0
 800aef6:	f47f adb0 	bne.w	800aa5a <_strtod_l+0x45a>
 800aefa:	2800      	cmp	r0, #0
 800aefc:	f47f adad 	bne.w	800aa5a <_strtod_l+0x45a>
 800af00:	2322      	movs	r3, #34	; 0x22
 800af02:	f8cb 3000 	str.w	r3, [fp]
 800af06:	e5a8      	b.n	800aa5a <_strtod_l+0x45a>
 800af08:	4013      	ands	r3, r2
 800af0a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800af0e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800af12:	f04f 39ff 	mov.w	r9, #4294967295
 800af16:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800af1a:	e769      	b.n	800adf0 <_strtod_l+0x7f0>
 800af1c:	b19d      	cbz	r5, 800af46 <_strtod_l+0x946>
 800af1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af20:	421d      	tst	r5, r3
 800af22:	f43f af65 	beq.w	800adf0 <_strtod_l+0x7f0>
 800af26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af28:	9a05      	ldr	r2, [sp, #20]
 800af2a:	4648      	mov	r0, r9
 800af2c:	4651      	mov	r1, sl
 800af2e:	b173      	cbz	r3, 800af4e <_strtod_l+0x94e>
 800af30:	f7ff fb45 	bl	800a5be <sulp>
 800af34:	4602      	mov	r2, r0
 800af36:	460b      	mov	r3, r1
 800af38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800af3c:	f7f5 f916 	bl	800016c <__adddf3>
 800af40:	4681      	mov	r9, r0
 800af42:	468a      	mov	sl, r1
 800af44:	e754      	b.n	800adf0 <_strtod_l+0x7f0>
 800af46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af48:	ea13 0f09 	tst.w	r3, r9
 800af4c:	e7e9      	b.n	800af22 <_strtod_l+0x922>
 800af4e:	f7ff fb36 	bl	800a5be <sulp>
 800af52:	4602      	mov	r2, r0
 800af54:	460b      	mov	r3, r1
 800af56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800af5a:	f7f5 f905 	bl	8000168 <__aeabi_dsub>
 800af5e:	2200      	movs	r2, #0
 800af60:	2300      	movs	r3, #0
 800af62:	4681      	mov	r9, r0
 800af64:	468a      	mov	sl, r1
 800af66:	f7f5 fd1f 	bl	80009a8 <__aeabi_dcmpeq>
 800af6a:	2800      	cmp	r0, #0
 800af6c:	f47f ae07 	bne.w	800ab7e <_strtod_l+0x57e>
 800af70:	e73e      	b.n	800adf0 <_strtod_l+0x7f0>
 800af72:	9904      	ldr	r1, [sp, #16]
 800af74:	4640      	mov	r0, r8
 800af76:	f001 f914 	bl	800c1a2 <__ratio>
 800af7a:	2200      	movs	r2, #0
 800af7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af80:	4606      	mov	r6, r0
 800af82:	460f      	mov	r7, r1
 800af84:	f7f5 fd24 	bl	80009d0 <__aeabi_dcmple>
 800af88:	2800      	cmp	r0, #0
 800af8a:	d075      	beq.n	800b078 <_strtod_l+0xa78>
 800af8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d047      	beq.n	800b022 <_strtod_l+0xa22>
 800af92:	2600      	movs	r6, #0
 800af94:	4f68      	ldr	r7, [pc, #416]	; (800b138 <_strtod_l+0xb38>)
 800af96:	4d68      	ldr	r5, [pc, #416]	; (800b138 <_strtod_l+0xb38>)
 800af98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af9e:	0d1b      	lsrs	r3, r3, #20
 800afa0:	051b      	lsls	r3, r3, #20
 800afa2:	930f      	str	r3, [sp, #60]	; 0x3c
 800afa4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800afa6:	4b65      	ldr	r3, [pc, #404]	; (800b13c <_strtod_l+0xb3c>)
 800afa8:	429a      	cmp	r2, r3
 800afaa:	f040 80cf 	bne.w	800b14c <_strtod_l+0xb4c>
 800afae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800afb2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800afb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afb8:	4648      	mov	r0, r9
 800afba:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800afbe:	4651      	mov	r1, sl
 800afc0:	f001 f82a 	bl	800c018 <__ulp>
 800afc4:	4602      	mov	r2, r0
 800afc6:	460b      	mov	r3, r1
 800afc8:	4630      	mov	r0, r6
 800afca:	4639      	mov	r1, r7
 800afcc:	f7f5 fa84 	bl	80004d8 <__aeabi_dmul>
 800afd0:	464a      	mov	r2, r9
 800afd2:	4653      	mov	r3, sl
 800afd4:	f7f5 f8ca 	bl	800016c <__adddf3>
 800afd8:	460b      	mov	r3, r1
 800afda:	4954      	ldr	r1, [pc, #336]	; (800b12c <_strtod_l+0xb2c>)
 800afdc:	4a58      	ldr	r2, [pc, #352]	; (800b140 <_strtod_l+0xb40>)
 800afde:	4019      	ands	r1, r3
 800afe0:	4291      	cmp	r1, r2
 800afe2:	4681      	mov	r9, r0
 800afe4:	d95e      	bls.n	800b0a4 <_strtod_l+0xaa4>
 800afe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afe8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800afec:	4293      	cmp	r3, r2
 800afee:	d103      	bne.n	800aff8 <_strtod_l+0x9f8>
 800aff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aff2:	3301      	adds	r3, #1
 800aff4:	f43f ad26 	beq.w	800aa44 <_strtod_l+0x444>
 800aff8:	f04f 39ff 	mov.w	r9, #4294967295
 800affc:	f8df a130 	ldr.w	sl, [pc, #304]	; 800b130 <_strtod_l+0xb30>
 800b000:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b002:	4658      	mov	r0, fp
 800b004:	f000 fd72 	bl	800baec <_Bfree>
 800b008:	9906      	ldr	r1, [sp, #24]
 800b00a:	4658      	mov	r0, fp
 800b00c:	f000 fd6e 	bl	800baec <_Bfree>
 800b010:	9904      	ldr	r1, [sp, #16]
 800b012:	4658      	mov	r0, fp
 800b014:	f000 fd6a 	bl	800baec <_Bfree>
 800b018:	4641      	mov	r1, r8
 800b01a:	4658      	mov	r0, fp
 800b01c:	f000 fd66 	bl	800baec <_Bfree>
 800b020:	e617      	b.n	800ac52 <_strtod_l+0x652>
 800b022:	f1b9 0f00 	cmp.w	r9, #0
 800b026:	d119      	bne.n	800b05c <_strtod_l+0xa5c>
 800b028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b02a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b02e:	b9e3      	cbnz	r3, 800b06a <_strtod_l+0xa6a>
 800b030:	2200      	movs	r2, #0
 800b032:	4b41      	ldr	r3, [pc, #260]	; (800b138 <_strtod_l+0xb38>)
 800b034:	4630      	mov	r0, r6
 800b036:	4639      	mov	r1, r7
 800b038:	f7f5 fcc0 	bl	80009bc <__aeabi_dcmplt>
 800b03c:	b9c8      	cbnz	r0, 800b072 <_strtod_l+0xa72>
 800b03e:	2200      	movs	r2, #0
 800b040:	4b40      	ldr	r3, [pc, #256]	; (800b144 <_strtod_l+0xb44>)
 800b042:	4630      	mov	r0, r6
 800b044:	4639      	mov	r1, r7
 800b046:	f7f5 fa47 	bl	80004d8 <__aeabi_dmul>
 800b04a:	4604      	mov	r4, r0
 800b04c:	460d      	mov	r5, r1
 800b04e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b052:	9418      	str	r4, [sp, #96]	; 0x60
 800b054:	9319      	str	r3, [sp, #100]	; 0x64
 800b056:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800b05a:	e79d      	b.n	800af98 <_strtod_l+0x998>
 800b05c:	f1b9 0f01 	cmp.w	r9, #1
 800b060:	d103      	bne.n	800b06a <_strtod_l+0xa6a>
 800b062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b064:	2b00      	cmp	r3, #0
 800b066:	f43f ad8a 	beq.w	800ab7e <_strtod_l+0x57e>
 800b06a:	2600      	movs	r6, #0
 800b06c:	4f36      	ldr	r7, [pc, #216]	; (800b148 <_strtod_l+0xb48>)
 800b06e:	2400      	movs	r4, #0
 800b070:	e791      	b.n	800af96 <_strtod_l+0x996>
 800b072:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b074:	4d33      	ldr	r5, [pc, #204]	; (800b144 <_strtod_l+0xb44>)
 800b076:	e7ea      	b.n	800b04e <_strtod_l+0xa4e>
 800b078:	4b32      	ldr	r3, [pc, #200]	; (800b144 <_strtod_l+0xb44>)
 800b07a:	2200      	movs	r2, #0
 800b07c:	4630      	mov	r0, r6
 800b07e:	4639      	mov	r1, r7
 800b080:	f7f5 fa2a 	bl	80004d8 <__aeabi_dmul>
 800b084:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b086:	4604      	mov	r4, r0
 800b088:	460d      	mov	r5, r1
 800b08a:	b933      	cbnz	r3, 800b09a <_strtod_l+0xa9a>
 800b08c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b090:	9010      	str	r0, [sp, #64]	; 0x40
 800b092:	9311      	str	r3, [sp, #68]	; 0x44
 800b094:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b098:	e77e      	b.n	800af98 <_strtod_l+0x998>
 800b09a:	4602      	mov	r2, r0
 800b09c:	460b      	mov	r3, r1
 800b09e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b0a2:	e7f7      	b.n	800b094 <_strtod_l+0xa94>
 800b0a4:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 800b0a8:	9b05      	ldr	r3, [sp, #20]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1a8      	bne.n	800b000 <_strtod_l+0xa00>
 800b0ae:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800b0b2:	0d1b      	lsrs	r3, r3, #20
 800b0b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b0b6:	051b      	lsls	r3, r3, #20
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	4656      	mov	r6, sl
 800b0bc:	d1a0      	bne.n	800b000 <_strtod_l+0xa00>
 800b0be:	4629      	mov	r1, r5
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	f7f5 fcb9 	bl	8000a38 <__aeabi_d2iz>
 800b0c6:	f7f5 f99d 	bl	8000404 <__aeabi_i2d>
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	4629      	mov	r1, r5
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f7f5 f849 	bl	8000168 <__aeabi_dsub>
 800b0d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0d8:	4604      	mov	r4, r0
 800b0da:	460d      	mov	r5, r1
 800b0dc:	b933      	cbnz	r3, 800b0ec <_strtod_l+0xaec>
 800b0de:	f1b9 0f00 	cmp.w	r9, #0
 800b0e2:	d103      	bne.n	800b0ec <_strtod_l+0xaec>
 800b0e4:	f3ca 0613 	ubfx	r6, sl, #0, #20
 800b0e8:	2e00      	cmp	r6, #0
 800b0ea:	d06a      	beq.n	800b1c2 <_strtod_l+0xbc2>
 800b0ec:	a30a      	add	r3, pc, #40	; (adr r3, 800b118 <_strtod_l+0xb18>)
 800b0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	4629      	mov	r1, r5
 800b0f6:	f7f5 fc61 	bl	80009bc <__aeabi_dcmplt>
 800b0fa:	2800      	cmp	r0, #0
 800b0fc:	f47f acad 	bne.w	800aa5a <_strtod_l+0x45a>
 800b100:	a307      	add	r3, pc, #28	; (adr r3, 800b120 <_strtod_l+0xb20>)
 800b102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b106:	4620      	mov	r0, r4
 800b108:	4629      	mov	r1, r5
 800b10a:	f7f5 fc75 	bl	80009f8 <__aeabi_dcmpgt>
 800b10e:	2800      	cmp	r0, #0
 800b110:	f43f af76 	beq.w	800b000 <_strtod_l+0xa00>
 800b114:	e4a1      	b.n	800aa5a <_strtod_l+0x45a>
 800b116:	bf00      	nop
 800b118:	94a03595 	.word	0x94a03595
 800b11c:	3fdfffff 	.word	0x3fdfffff
 800b120:	35afe535 	.word	0x35afe535
 800b124:	3fe00000 	.word	0x3fe00000
 800b128:	000fffff 	.word	0x000fffff
 800b12c:	7ff00000 	.word	0x7ff00000
 800b130:	7fefffff 	.word	0x7fefffff
 800b134:	39500000 	.word	0x39500000
 800b138:	3ff00000 	.word	0x3ff00000
 800b13c:	7fe00000 	.word	0x7fe00000
 800b140:	7c9fffff 	.word	0x7c9fffff
 800b144:	3fe00000 	.word	0x3fe00000
 800b148:	bff00000 	.word	0xbff00000
 800b14c:	9b05      	ldr	r3, [sp, #20]
 800b14e:	b313      	cbz	r3, 800b196 <_strtod_l+0xb96>
 800b150:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b152:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b156:	d81e      	bhi.n	800b196 <_strtod_l+0xb96>
 800b158:	a325      	add	r3, pc, #148	; (adr r3, 800b1f0 <_strtod_l+0xbf0>)
 800b15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15e:	4620      	mov	r0, r4
 800b160:	4629      	mov	r1, r5
 800b162:	f7f5 fc35 	bl	80009d0 <__aeabi_dcmple>
 800b166:	b190      	cbz	r0, 800b18e <_strtod_l+0xb8e>
 800b168:	4629      	mov	r1, r5
 800b16a:	4620      	mov	r0, r4
 800b16c:	f7f5 fc8c 	bl	8000a88 <__aeabi_d2uiz>
 800b170:	2800      	cmp	r0, #0
 800b172:	bf08      	it	eq
 800b174:	2001      	moveq	r0, #1
 800b176:	f7f5 f935 	bl	80003e4 <__aeabi_ui2d>
 800b17a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b17c:	4604      	mov	r4, r0
 800b17e:	460d      	mov	r5, r1
 800b180:	b9d3      	cbnz	r3, 800b1b8 <_strtod_l+0xbb8>
 800b182:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b186:	9012      	str	r0, [sp, #72]	; 0x48
 800b188:	9313      	str	r3, [sp, #76]	; 0x4c
 800b18a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800b18e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b190:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800b194:	1a9f      	subs	r7, r3, r2
 800b196:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b19a:	f000 ff3d 	bl	800c018 <__ulp>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	4639      	mov	r1, r7
 800b1a6:	f7f5 f997 	bl	80004d8 <__aeabi_dmul>
 800b1aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b1ae:	f7f4 ffdd 	bl	800016c <__adddf3>
 800b1b2:	4681      	mov	r9, r0
 800b1b4:	468a      	mov	sl, r1
 800b1b6:	e777      	b.n	800b0a8 <_strtod_l+0xaa8>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	460b      	mov	r3, r1
 800b1bc:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800b1c0:	e7e3      	b.n	800b18a <_strtod_l+0xb8a>
 800b1c2:	a30d      	add	r3, pc, #52	; (adr r3, 800b1f8 <_strtod_l+0xbf8>)
 800b1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c8:	f7f5 fbf8 	bl	80009bc <__aeabi_dcmplt>
 800b1cc:	e79f      	b.n	800b10e <_strtod_l+0xb0e>
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	930d      	str	r3, [sp, #52]	; 0x34
 800b1d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b1d6:	6013      	str	r3, [r2, #0]
 800b1d8:	f7ff ba55 	b.w	800a686 <_strtod_l+0x86>
 800b1dc:	2b65      	cmp	r3, #101	; 0x65
 800b1de:	f04f 0200 	mov.w	r2, #0
 800b1e2:	f43f ab42 	beq.w	800a86a <_strtod_l+0x26a>
 800b1e6:	2101      	movs	r1, #1
 800b1e8:	4614      	mov	r4, r2
 800b1ea:	9105      	str	r1, [sp, #20]
 800b1ec:	f7ff babf 	b.w	800a76e <_strtod_l+0x16e>
 800b1f0:	ffc00000 	.word	0xffc00000
 800b1f4:	41dfffff 	.word	0x41dfffff
 800b1f8:	94a03595 	.word	0x94a03595
 800b1fc:	3fcfffff 	.word	0x3fcfffff

0800b200 <strtod>:
 800b200:	4b06      	ldr	r3, [pc, #24]	; (800b21c <strtod+0x1c>)
 800b202:	b410      	push	{r4}
 800b204:	681c      	ldr	r4, [r3, #0]
 800b206:	4a06      	ldr	r2, [pc, #24]	; (800b220 <strtod+0x20>)
 800b208:	6a23      	ldr	r3, [r4, #32]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	bf08      	it	eq
 800b20e:	4613      	moveq	r3, r2
 800b210:	460a      	mov	r2, r1
 800b212:	4601      	mov	r1, r0
 800b214:	4620      	mov	r0, r4
 800b216:	bc10      	pop	{r4}
 800b218:	f7ff b9f2 	b.w	800a600 <_strtod_l>
 800b21c:	200001b4 	.word	0x200001b4
 800b220:	20000218 	.word	0x20000218

0800b224 <_strtol_l.isra.0>:
 800b224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b228:	4680      	mov	r8, r0
 800b22a:	4689      	mov	r9, r1
 800b22c:	4692      	mov	sl, r2
 800b22e:	461e      	mov	r6, r3
 800b230:	460f      	mov	r7, r1
 800b232:	463d      	mov	r5, r7
 800b234:	9808      	ldr	r0, [sp, #32]
 800b236:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b23a:	f000 fbfd 	bl	800ba38 <__locale_ctype_ptr_l>
 800b23e:	4420      	add	r0, r4
 800b240:	7843      	ldrb	r3, [r0, #1]
 800b242:	f013 0308 	ands.w	r3, r3, #8
 800b246:	d132      	bne.n	800b2ae <_strtol_l.isra.0+0x8a>
 800b248:	2c2d      	cmp	r4, #45	; 0x2d
 800b24a:	d132      	bne.n	800b2b2 <_strtol_l.isra.0+0x8e>
 800b24c:	2201      	movs	r2, #1
 800b24e:	787c      	ldrb	r4, [r7, #1]
 800b250:	1cbd      	adds	r5, r7, #2
 800b252:	2e00      	cmp	r6, #0
 800b254:	d05d      	beq.n	800b312 <_strtol_l.isra.0+0xee>
 800b256:	2e10      	cmp	r6, #16
 800b258:	d109      	bne.n	800b26e <_strtol_l.isra.0+0x4a>
 800b25a:	2c30      	cmp	r4, #48	; 0x30
 800b25c:	d107      	bne.n	800b26e <_strtol_l.isra.0+0x4a>
 800b25e:	782b      	ldrb	r3, [r5, #0]
 800b260:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b264:	2b58      	cmp	r3, #88	; 0x58
 800b266:	d14f      	bne.n	800b308 <_strtol_l.isra.0+0xe4>
 800b268:	2610      	movs	r6, #16
 800b26a:	786c      	ldrb	r4, [r5, #1]
 800b26c:	3502      	adds	r5, #2
 800b26e:	2a00      	cmp	r2, #0
 800b270:	bf14      	ite	ne
 800b272:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b276:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b27a:	2700      	movs	r7, #0
 800b27c:	fbb1 fcf6 	udiv	ip, r1, r6
 800b280:	4638      	mov	r0, r7
 800b282:	fb06 1e1c 	mls	lr, r6, ip, r1
 800b286:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b28a:	2b09      	cmp	r3, #9
 800b28c:	d817      	bhi.n	800b2be <_strtol_l.isra.0+0x9a>
 800b28e:	461c      	mov	r4, r3
 800b290:	42a6      	cmp	r6, r4
 800b292:	dd23      	ble.n	800b2dc <_strtol_l.isra.0+0xb8>
 800b294:	1c7b      	adds	r3, r7, #1
 800b296:	d007      	beq.n	800b2a8 <_strtol_l.isra.0+0x84>
 800b298:	4584      	cmp	ip, r0
 800b29a:	d31c      	bcc.n	800b2d6 <_strtol_l.isra.0+0xb2>
 800b29c:	d101      	bne.n	800b2a2 <_strtol_l.isra.0+0x7e>
 800b29e:	45a6      	cmp	lr, r4
 800b2a0:	db19      	blt.n	800b2d6 <_strtol_l.isra.0+0xb2>
 800b2a2:	2701      	movs	r7, #1
 800b2a4:	fb00 4006 	mla	r0, r0, r6, r4
 800b2a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2ac:	e7eb      	b.n	800b286 <_strtol_l.isra.0+0x62>
 800b2ae:	462f      	mov	r7, r5
 800b2b0:	e7bf      	b.n	800b232 <_strtol_l.isra.0+0xe>
 800b2b2:	2c2b      	cmp	r4, #43	; 0x2b
 800b2b4:	bf04      	itt	eq
 800b2b6:	1cbd      	addeq	r5, r7, #2
 800b2b8:	787c      	ldrbeq	r4, [r7, #1]
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	e7c9      	b.n	800b252 <_strtol_l.isra.0+0x2e>
 800b2be:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b2c2:	2b19      	cmp	r3, #25
 800b2c4:	d801      	bhi.n	800b2ca <_strtol_l.isra.0+0xa6>
 800b2c6:	3c37      	subs	r4, #55	; 0x37
 800b2c8:	e7e2      	b.n	800b290 <_strtol_l.isra.0+0x6c>
 800b2ca:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b2ce:	2b19      	cmp	r3, #25
 800b2d0:	d804      	bhi.n	800b2dc <_strtol_l.isra.0+0xb8>
 800b2d2:	3c57      	subs	r4, #87	; 0x57
 800b2d4:	e7dc      	b.n	800b290 <_strtol_l.isra.0+0x6c>
 800b2d6:	f04f 37ff 	mov.w	r7, #4294967295
 800b2da:	e7e5      	b.n	800b2a8 <_strtol_l.isra.0+0x84>
 800b2dc:	1c7b      	adds	r3, r7, #1
 800b2de:	d108      	bne.n	800b2f2 <_strtol_l.isra.0+0xce>
 800b2e0:	2322      	movs	r3, #34	; 0x22
 800b2e2:	4608      	mov	r0, r1
 800b2e4:	f8c8 3000 	str.w	r3, [r8]
 800b2e8:	f1ba 0f00 	cmp.w	sl, #0
 800b2ec:	d107      	bne.n	800b2fe <_strtol_l.isra.0+0xda>
 800b2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2f2:	b102      	cbz	r2, 800b2f6 <_strtol_l.isra.0+0xd2>
 800b2f4:	4240      	negs	r0, r0
 800b2f6:	f1ba 0f00 	cmp.w	sl, #0
 800b2fa:	d0f8      	beq.n	800b2ee <_strtol_l.isra.0+0xca>
 800b2fc:	b10f      	cbz	r7, 800b302 <_strtol_l.isra.0+0xde>
 800b2fe:	f105 39ff 	add.w	r9, r5, #4294967295
 800b302:	f8ca 9000 	str.w	r9, [sl]
 800b306:	e7f2      	b.n	800b2ee <_strtol_l.isra.0+0xca>
 800b308:	2430      	movs	r4, #48	; 0x30
 800b30a:	2e00      	cmp	r6, #0
 800b30c:	d1af      	bne.n	800b26e <_strtol_l.isra.0+0x4a>
 800b30e:	2608      	movs	r6, #8
 800b310:	e7ad      	b.n	800b26e <_strtol_l.isra.0+0x4a>
 800b312:	2c30      	cmp	r4, #48	; 0x30
 800b314:	d0a3      	beq.n	800b25e <_strtol_l.isra.0+0x3a>
 800b316:	260a      	movs	r6, #10
 800b318:	e7a9      	b.n	800b26e <_strtol_l.isra.0+0x4a>
	...

0800b31c <_strtol_r>:
 800b31c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b31e:	4c06      	ldr	r4, [pc, #24]	; (800b338 <_strtol_r+0x1c>)
 800b320:	4d06      	ldr	r5, [pc, #24]	; (800b33c <_strtol_r+0x20>)
 800b322:	6824      	ldr	r4, [r4, #0]
 800b324:	6a24      	ldr	r4, [r4, #32]
 800b326:	2c00      	cmp	r4, #0
 800b328:	bf08      	it	eq
 800b32a:	462c      	moveq	r4, r5
 800b32c:	9400      	str	r4, [sp, #0]
 800b32e:	f7ff ff79 	bl	800b224 <_strtol_l.isra.0>
 800b332:	b003      	add	sp, #12
 800b334:	bd30      	pop	{r4, r5, pc}
 800b336:	bf00      	nop
 800b338:	200001b4 	.word	0x200001b4
 800b33c:	20000218 	.word	0x20000218

0800b340 <strtol>:
 800b340:	4b08      	ldr	r3, [pc, #32]	; (800b364 <strtol+0x24>)
 800b342:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b344:	681c      	ldr	r4, [r3, #0]
 800b346:	4d08      	ldr	r5, [pc, #32]	; (800b368 <strtol+0x28>)
 800b348:	6a23      	ldr	r3, [r4, #32]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	bf08      	it	eq
 800b34e:	462b      	moveq	r3, r5
 800b350:	9300      	str	r3, [sp, #0]
 800b352:	4613      	mov	r3, r2
 800b354:	460a      	mov	r2, r1
 800b356:	4601      	mov	r1, r0
 800b358:	4620      	mov	r0, r4
 800b35a:	f7ff ff63 	bl	800b224 <_strtol_l.isra.0>
 800b35e:	b003      	add	sp, #12
 800b360:	bd30      	pop	{r4, r5, pc}
 800b362:	bf00      	nop
 800b364:	200001b4 	.word	0x200001b4
 800b368:	20000218 	.word	0x20000218

0800b36c <__utoa>:
 800b36c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b36e:	b08b      	sub	sp, #44	; 0x2c
 800b370:	4605      	mov	r5, r0
 800b372:	460c      	mov	r4, r1
 800b374:	466e      	mov	r6, sp
 800b376:	4b1b      	ldr	r3, [pc, #108]	; (800b3e4 <__utoa+0x78>)
 800b378:	f103 0c20 	add.w	ip, r3, #32
 800b37c:	4637      	mov	r7, r6
 800b37e:	6818      	ldr	r0, [r3, #0]
 800b380:	6859      	ldr	r1, [r3, #4]
 800b382:	3308      	adds	r3, #8
 800b384:	c703      	stmia	r7!, {r0, r1}
 800b386:	4563      	cmp	r3, ip
 800b388:	463e      	mov	r6, r7
 800b38a:	d1f7      	bne.n	800b37c <__utoa+0x10>
 800b38c:	6818      	ldr	r0, [r3, #0]
 800b38e:	791b      	ldrb	r3, [r3, #4]
 800b390:	6038      	str	r0, [r7, #0]
 800b392:	713b      	strb	r3, [r7, #4]
 800b394:	1e93      	subs	r3, r2, #2
 800b396:	2b22      	cmp	r3, #34	; 0x22
 800b398:	f04f 0300 	mov.w	r3, #0
 800b39c:	d904      	bls.n	800b3a8 <__utoa+0x3c>
 800b39e:	7023      	strb	r3, [r4, #0]
 800b3a0:	461c      	mov	r4, r3
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	b00b      	add	sp, #44	; 0x2c
 800b3a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3a8:	1e66      	subs	r6, r4, #1
 800b3aa:	fbb5 f0f2 	udiv	r0, r5, r2
 800b3ae:	fb02 5510 	mls	r5, r2, r0, r5
 800b3b2:	af0a      	add	r7, sp, #40	; 0x28
 800b3b4:	443d      	add	r5, r7
 800b3b6:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800b3ba:	1c59      	adds	r1, r3, #1
 800b3bc:	f806 5f01 	strb.w	r5, [r6, #1]!
 800b3c0:	4605      	mov	r5, r0
 800b3c2:	b968      	cbnz	r0, 800b3e0 <__utoa+0x74>
 800b3c4:	4622      	mov	r2, r4
 800b3c6:	5460      	strb	r0, [r4, r1]
 800b3c8:	4423      	add	r3, r4
 800b3ca:	1b19      	subs	r1, r3, r4
 800b3cc:	1b10      	subs	r0, r2, r4
 800b3ce:	4281      	cmp	r1, r0
 800b3d0:	dde7      	ble.n	800b3a2 <__utoa+0x36>
 800b3d2:	7811      	ldrb	r1, [r2, #0]
 800b3d4:	7818      	ldrb	r0, [r3, #0]
 800b3d6:	f802 0b01 	strb.w	r0, [r2], #1
 800b3da:	f803 1901 	strb.w	r1, [r3], #-1
 800b3de:	e7f4      	b.n	800b3ca <__utoa+0x5e>
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	e7e2      	b.n	800b3aa <__utoa+0x3e>
 800b3e4:	0800f0b8 	.word	0x0800f0b8

0800b3e8 <rshift>:
 800b3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3ea:	6906      	ldr	r6, [r0, #16]
 800b3ec:	114b      	asrs	r3, r1, #5
 800b3ee:	429e      	cmp	r6, r3
 800b3f0:	f100 0414 	add.w	r4, r0, #20
 800b3f4:	dd31      	ble.n	800b45a <rshift+0x72>
 800b3f6:	f011 011f 	ands.w	r1, r1, #31
 800b3fa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b3fe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800b402:	d108      	bne.n	800b416 <rshift+0x2e>
 800b404:	4621      	mov	r1, r4
 800b406:	42b2      	cmp	r2, r6
 800b408:	460b      	mov	r3, r1
 800b40a:	d211      	bcs.n	800b430 <rshift+0x48>
 800b40c:	f852 3b04 	ldr.w	r3, [r2], #4
 800b410:	f841 3b04 	str.w	r3, [r1], #4
 800b414:	e7f7      	b.n	800b406 <rshift+0x1e>
 800b416:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800b41a:	4623      	mov	r3, r4
 800b41c:	f1c1 0c20 	rsb	ip, r1, #32
 800b420:	40cd      	lsrs	r5, r1
 800b422:	3204      	adds	r2, #4
 800b424:	42b2      	cmp	r2, r6
 800b426:	4617      	mov	r7, r2
 800b428:	d30d      	bcc.n	800b446 <rshift+0x5e>
 800b42a:	601d      	str	r5, [r3, #0]
 800b42c:	b105      	cbz	r5, 800b430 <rshift+0x48>
 800b42e:	3304      	adds	r3, #4
 800b430:	42a3      	cmp	r3, r4
 800b432:	eba3 0204 	sub.w	r2, r3, r4
 800b436:	bf08      	it	eq
 800b438:	2300      	moveq	r3, #0
 800b43a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b43e:	6102      	str	r2, [r0, #16]
 800b440:	bf08      	it	eq
 800b442:	6143      	streq	r3, [r0, #20]
 800b444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b446:	683f      	ldr	r7, [r7, #0]
 800b448:	fa07 f70c 	lsl.w	r7, r7, ip
 800b44c:	433d      	orrs	r5, r7
 800b44e:	f843 5b04 	str.w	r5, [r3], #4
 800b452:	f852 5b04 	ldr.w	r5, [r2], #4
 800b456:	40cd      	lsrs	r5, r1
 800b458:	e7e4      	b.n	800b424 <rshift+0x3c>
 800b45a:	4623      	mov	r3, r4
 800b45c:	e7e8      	b.n	800b430 <rshift+0x48>

0800b45e <__hexdig_fun>:
 800b45e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b462:	2b09      	cmp	r3, #9
 800b464:	d802      	bhi.n	800b46c <__hexdig_fun+0xe>
 800b466:	3820      	subs	r0, #32
 800b468:	b2c0      	uxtb	r0, r0
 800b46a:	4770      	bx	lr
 800b46c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b470:	2b05      	cmp	r3, #5
 800b472:	d801      	bhi.n	800b478 <__hexdig_fun+0x1a>
 800b474:	3847      	subs	r0, #71	; 0x47
 800b476:	e7f7      	b.n	800b468 <__hexdig_fun+0xa>
 800b478:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b47c:	2b05      	cmp	r3, #5
 800b47e:	d801      	bhi.n	800b484 <__hexdig_fun+0x26>
 800b480:	3827      	subs	r0, #39	; 0x27
 800b482:	e7f1      	b.n	800b468 <__hexdig_fun+0xa>
 800b484:	2000      	movs	r0, #0
 800b486:	4770      	bx	lr

0800b488 <__gethex>:
 800b488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b48c:	b08b      	sub	sp, #44	; 0x2c
 800b48e:	9002      	str	r0, [sp, #8]
 800b490:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b492:	468a      	mov	sl, r1
 800b494:	4690      	mov	r8, r2
 800b496:	9306      	str	r3, [sp, #24]
 800b498:	f000 fae0 	bl	800ba5c <__localeconv_l>
 800b49c:	6803      	ldr	r3, [r0, #0]
 800b49e:	f04f 0b00 	mov.w	fp, #0
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	9303      	str	r3, [sp, #12]
 800b4a6:	f7f4 fe53 	bl	8000150 <strlen>
 800b4aa:	9b03      	ldr	r3, [sp, #12]
 800b4ac:	9001      	str	r0, [sp, #4]
 800b4ae:	4403      	add	r3, r0
 800b4b0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b4b4:	9307      	str	r3, [sp, #28]
 800b4b6:	f8da 3000 	ldr.w	r3, [sl]
 800b4ba:	3302      	adds	r3, #2
 800b4bc:	461f      	mov	r7, r3
 800b4be:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b4c2:	2830      	cmp	r0, #48	; 0x30
 800b4c4:	d06c      	beq.n	800b5a0 <__gethex+0x118>
 800b4c6:	f7ff ffca 	bl	800b45e <__hexdig_fun>
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	d16a      	bne.n	800b5a6 <__gethex+0x11e>
 800b4d0:	9a01      	ldr	r2, [sp, #4]
 800b4d2:	9903      	ldr	r1, [sp, #12]
 800b4d4:	4638      	mov	r0, r7
 800b4d6:	f001 fa78 	bl	800c9ca <strncmp>
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	d166      	bne.n	800b5ac <__gethex+0x124>
 800b4de:	9b01      	ldr	r3, [sp, #4]
 800b4e0:	5cf8      	ldrb	r0, [r7, r3]
 800b4e2:	18fe      	adds	r6, r7, r3
 800b4e4:	f7ff ffbb 	bl	800b45e <__hexdig_fun>
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d062      	beq.n	800b5b2 <__gethex+0x12a>
 800b4ec:	4633      	mov	r3, r6
 800b4ee:	7818      	ldrb	r0, [r3, #0]
 800b4f0:	461f      	mov	r7, r3
 800b4f2:	2830      	cmp	r0, #48	; 0x30
 800b4f4:	f103 0301 	add.w	r3, r3, #1
 800b4f8:	d0f9      	beq.n	800b4ee <__gethex+0x66>
 800b4fa:	f7ff ffb0 	bl	800b45e <__hexdig_fun>
 800b4fe:	fab0 f580 	clz	r5, r0
 800b502:	4634      	mov	r4, r6
 800b504:	f04f 0b01 	mov.w	fp, #1
 800b508:	096d      	lsrs	r5, r5, #5
 800b50a:	463a      	mov	r2, r7
 800b50c:	4616      	mov	r6, r2
 800b50e:	7830      	ldrb	r0, [r6, #0]
 800b510:	3201      	adds	r2, #1
 800b512:	f7ff ffa4 	bl	800b45e <__hexdig_fun>
 800b516:	2800      	cmp	r0, #0
 800b518:	d1f8      	bne.n	800b50c <__gethex+0x84>
 800b51a:	9a01      	ldr	r2, [sp, #4]
 800b51c:	9903      	ldr	r1, [sp, #12]
 800b51e:	4630      	mov	r0, r6
 800b520:	f001 fa53 	bl	800c9ca <strncmp>
 800b524:	b950      	cbnz	r0, 800b53c <__gethex+0xb4>
 800b526:	b954      	cbnz	r4, 800b53e <__gethex+0xb6>
 800b528:	9b01      	ldr	r3, [sp, #4]
 800b52a:	18f4      	adds	r4, r6, r3
 800b52c:	4622      	mov	r2, r4
 800b52e:	4616      	mov	r6, r2
 800b530:	7830      	ldrb	r0, [r6, #0]
 800b532:	3201      	adds	r2, #1
 800b534:	f7ff ff93 	bl	800b45e <__hexdig_fun>
 800b538:	2800      	cmp	r0, #0
 800b53a:	d1f8      	bne.n	800b52e <__gethex+0xa6>
 800b53c:	b10c      	cbz	r4, 800b542 <__gethex+0xba>
 800b53e:	1ba4      	subs	r4, r4, r6
 800b540:	00a4      	lsls	r4, r4, #2
 800b542:	7833      	ldrb	r3, [r6, #0]
 800b544:	2b50      	cmp	r3, #80	; 0x50
 800b546:	d001      	beq.n	800b54c <__gethex+0xc4>
 800b548:	2b70      	cmp	r3, #112	; 0x70
 800b54a:	d140      	bne.n	800b5ce <__gethex+0x146>
 800b54c:	7873      	ldrb	r3, [r6, #1]
 800b54e:	2b2b      	cmp	r3, #43	; 0x2b
 800b550:	d031      	beq.n	800b5b6 <__gethex+0x12e>
 800b552:	2b2d      	cmp	r3, #45	; 0x2d
 800b554:	d033      	beq.n	800b5be <__gethex+0x136>
 800b556:	f04f 0900 	mov.w	r9, #0
 800b55a:	1c71      	adds	r1, r6, #1
 800b55c:	7808      	ldrb	r0, [r1, #0]
 800b55e:	f7ff ff7e 	bl	800b45e <__hexdig_fun>
 800b562:	1e43      	subs	r3, r0, #1
 800b564:	b2db      	uxtb	r3, r3
 800b566:	2b18      	cmp	r3, #24
 800b568:	d831      	bhi.n	800b5ce <__gethex+0x146>
 800b56a:	f1a0 0210 	sub.w	r2, r0, #16
 800b56e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b572:	f7ff ff74 	bl	800b45e <__hexdig_fun>
 800b576:	1e43      	subs	r3, r0, #1
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	2b18      	cmp	r3, #24
 800b57c:	d922      	bls.n	800b5c4 <__gethex+0x13c>
 800b57e:	f1b9 0f00 	cmp.w	r9, #0
 800b582:	d000      	beq.n	800b586 <__gethex+0xfe>
 800b584:	4252      	negs	r2, r2
 800b586:	4414      	add	r4, r2
 800b588:	f8ca 1000 	str.w	r1, [sl]
 800b58c:	b30d      	cbz	r5, 800b5d2 <__gethex+0x14a>
 800b58e:	f1bb 0f00 	cmp.w	fp, #0
 800b592:	bf0c      	ite	eq
 800b594:	2706      	moveq	r7, #6
 800b596:	2700      	movne	r7, #0
 800b598:	4638      	mov	r0, r7
 800b59a:	b00b      	add	sp, #44	; 0x2c
 800b59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5a0:	f10b 0b01 	add.w	fp, fp, #1
 800b5a4:	e78a      	b.n	800b4bc <__gethex+0x34>
 800b5a6:	2500      	movs	r5, #0
 800b5a8:	462c      	mov	r4, r5
 800b5aa:	e7ae      	b.n	800b50a <__gethex+0x82>
 800b5ac:	463e      	mov	r6, r7
 800b5ae:	2501      	movs	r5, #1
 800b5b0:	e7c7      	b.n	800b542 <__gethex+0xba>
 800b5b2:	4604      	mov	r4, r0
 800b5b4:	e7fb      	b.n	800b5ae <__gethex+0x126>
 800b5b6:	f04f 0900 	mov.w	r9, #0
 800b5ba:	1cb1      	adds	r1, r6, #2
 800b5bc:	e7ce      	b.n	800b55c <__gethex+0xd4>
 800b5be:	f04f 0901 	mov.w	r9, #1
 800b5c2:	e7fa      	b.n	800b5ba <__gethex+0x132>
 800b5c4:	230a      	movs	r3, #10
 800b5c6:	fb03 0202 	mla	r2, r3, r2, r0
 800b5ca:	3a10      	subs	r2, #16
 800b5cc:	e7cf      	b.n	800b56e <__gethex+0xe6>
 800b5ce:	4631      	mov	r1, r6
 800b5d0:	e7da      	b.n	800b588 <__gethex+0x100>
 800b5d2:	4629      	mov	r1, r5
 800b5d4:	1bf3      	subs	r3, r6, r7
 800b5d6:	3b01      	subs	r3, #1
 800b5d8:	2b07      	cmp	r3, #7
 800b5da:	dc49      	bgt.n	800b670 <__gethex+0x1e8>
 800b5dc:	9802      	ldr	r0, [sp, #8]
 800b5de:	f000 fa51 	bl	800ba84 <_Balloc>
 800b5e2:	f04f 0b00 	mov.w	fp, #0
 800b5e6:	4605      	mov	r5, r0
 800b5e8:	46da      	mov	sl, fp
 800b5ea:	9b01      	ldr	r3, [sp, #4]
 800b5ec:	f100 0914 	add.w	r9, r0, #20
 800b5f0:	f1c3 0301 	rsb	r3, r3, #1
 800b5f4:	f8cd 9010 	str.w	r9, [sp, #16]
 800b5f8:	9308      	str	r3, [sp, #32]
 800b5fa:	42b7      	cmp	r7, r6
 800b5fc:	d33b      	bcc.n	800b676 <__gethex+0x1ee>
 800b5fe:	9804      	ldr	r0, [sp, #16]
 800b600:	f840 ab04 	str.w	sl, [r0], #4
 800b604:	eba0 0009 	sub.w	r0, r0, r9
 800b608:	1080      	asrs	r0, r0, #2
 800b60a:	6128      	str	r0, [r5, #16]
 800b60c:	0147      	lsls	r7, r0, #5
 800b60e:	4650      	mov	r0, sl
 800b610:	f000 fafc 	bl	800bc0c <__hi0bits>
 800b614:	f8d8 6000 	ldr.w	r6, [r8]
 800b618:	1a3f      	subs	r7, r7, r0
 800b61a:	42b7      	cmp	r7, r6
 800b61c:	dd64      	ble.n	800b6e8 <__gethex+0x260>
 800b61e:	1bbf      	subs	r7, r7, r6
 800b620:	4639      	mov	r1, r7
 800b622:	4628      	mov	r0, r5
 800b624:	f000 fe05 	bl	800c232 <__any_on>
 800b628:	4682      	mov	sl, r0
 800b62a:	b178      	cbz	r0, 800b64c <__gethex+0x1c4>
 800b62c:	f04f 0a01 	mov.w	sl, #1
 800b630:	1e7b      	subs	r3, r7, #1
 800b632:	1159      	asrs	r1, r3, #5
 800b634:	f003 021f 	and.w	r2, r3, #31
 800b638:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b63c:	fa0a f202 	lsl.w	r2, sl, r2
 800b640:	420a      	tst	r2, r1
 800b642:	d003      	beq.n	800b64c <__gethex+0x1c4>
 800b644:	4553      	cmp	r3, sl
 800b646:	dc46      	bgt.n	800b6d6 <__gethex+0x24e>
 800b648:	f04f 0a02 	mov.w	sl, #2
 800b64c:	4639      	mov	r1, r7
 800b64e:	4628      	mov	r0, r5
 800b650:	f7ff feca 	bl	800b3e8 <rshift>
 800b654:	443c      	add	r4, r7
 800b656:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b65a:	42a3      	cmp	r3, r4
 800b65c:	da52      	bge.n	800b704 <__gethex+0x27c>
 800b65e:	4629      	mov	r1, r5
 800b660:	9802      	ldr	r0, [sp, #8]
 800b662:	f000 fa43 	bl	800baec <_Bfree>
 800b666:	2300      	movs	r3, #0
 800b668:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b66a:	27a3      	movs	r7, #163	; 0xa3
 800b66c:	6013      	str	r3, [r2, #0]
 800b66e:	e793      	b.n	800b598 <__gethex+0x110>
 800b670:	3101      	adds	r1, #1
 800b672:	105b      	asrs	r3, r3, #1
 800b674:	e7b0      	b.n	800b5d8 <__gethex+0x150>
 800b676:	1e73      	subs	r3, r6, #1
 800b678:	9305      	str	r3, [sp, #20]
 800b67a:	9a07      	ldr	r2, [sp, #28]
 800b67c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b680:	4293      	cmp	r3, r2
 800b682:	d018      	beq.n	800b6b6 <__gethex+0x22e>
 800b684:	f1bb 0f20 	cmp.w	fp, #32
 800b688:	d107      	bne.n	800b69a <__gethex+0x212>
 800b68a:	9b04      	ldr	r3, [sp, #16]
 800b68c:	f8c3 a000 	str.w	sl, [r3]
 800b690:	f04f 0a00 	mov.w	sl, #0
 800b694:	46d3      	mov	fp, sl
 800b696:	3304      	adds	r3, #4
 800b698:	9304      	str	r3, [sp, #16]
 800b69a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b69e:	f7ff fede 	bl	800b45e <__hexdig_fun>
 800b6a2:	f000 000f 	and.w	r0, r0, #15
 800b6a6:	fa00 f00b 	lsl.w	r0, r0, fp
 800b6aa:	ea4a 0a00 	orr.w	sl, sl, r0
 800b6ae:	f10b 0b04 	add.w	fp, fp, #4
 800b6b2:	9b05      	ldr	r3, [sp, #20]
 800b6b4:	e00d      	b.n	800b6d2 <__gethex+0x24a>
 800b6b6:	9b05      	ldr	r3, [sp, #20]
 800b6b8:	9a08      	ldr	r2, [sp, #32]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	42bb      	cmp	r3, r7
 800b6be:	d3e1      	bcc.n	800b684 <__gethex+0x1fc>
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	9a01      	ldr	r2, [sp, #4]
 800b6c4:	9903      	ldr	r1, [sp, #12]
 800b6c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b6c8:	f001 f97f 	bl	800c9ca <strncmp>
 800b6cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	d1d8      	bne.n	800b684 <__gethex+0x1fc>
 800b6d2:	461e      	mov	r6, r3
 800b6d4:	e791      	b.n	800b5fa <__gethex+0x172>
 800b6d6:	1eb9      	subs	r1, r7, #2
 800b6d8:	4628      	mov	r0, r5
 800b6da:	f000 fdaa 	bl	800c232 <__any_on>
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d0b2      	beq.n	800b648 <__gethex+0x1c0>
 800b6e2:	f04f 0a03 	mov.w	sl, #3
 800b6e6:	e7b1      	b.n	800b64c <__gethex+0x1c4>
 800b6e8:	da09      	bge.n	800b6fe <__gethex+0x276>
 800b6ea:	1bf7      	subs	r7, r6, r7
 800b6ec:	4629      	mov	r1, r5
 800b6ee:	463a      	mov	r2, r7
 800b6f0:	9802      	ldr	r0, [sp, #8]
 800b6f2:	f000 fbc5 	bl	800be80 <__lshift>
 800b6f6:	4605      	mov	r5, r0
 800b6f8:	1be4      	subs	r4, r4, r7
 800b6fa:	f100 0914 	add.w	r9, r0, #20
 800b6fe:	f04f 0a00 	mov.w	sl, #0
 800b702:	e7a8      	b.n	800b656 <__gethex+0x1ce>
 800b704:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b708:	42a0      	cmp	r0, r4
 800b70a:	dd6b      	ble.n	800b7e4 <__gethex+0x35c>
 800b70c:	1b04      	subs	r4, r0, r4
 800b70e:	42a6      	cmp	r6, r4
 800b710:	dc2e      	bgt.n	800b770 <__gethex+0x2e8>
 800b712:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b716:	2b02      	cmp	r3, #2
 800b718:	d022      	beq.n	800b760 <__gethex+0x2d8>
 800b71a:	2b03      	cmp	r3, #3
 800b71c:	d024      	beq.n	800b768 <__gethex+0x2e0>
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d115      	bne.n	800b74e <__gethex+0x2c6>
 800b722:	42a6      	cmp	r6, r4
 800b724:	d113      	bne.n	800b74e <__gethex+0x2c6>
 800b726:	2e01      	cmp	r6, #1
 800b728:	dc0b      	bgt.n	800b742 <__gethex+0x2ba>
 800b72a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b72e:	9a06      	ldr	r2, [sp, #24]
 800b730:	2762      	movs	r7, #98	; 0x62
 800b732:	6013      	str	r3, [r2, #0]
 800b734:	2301      	movs	r3, #1
 800b736:	612b      	str	r3, [r5, #16]
 800b738:	f8c9 3000 	str.w	r3, [r9]
 800b73c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b73e:	601d      	str	r5, [r3, #0]
 800b740:	e72a      	b.n	800b598 <__gethex+0x110>
 800b742:	1e71      	subs	r1, r6, #1
 800b744:	4628      	mov	r0, r5
 800b746:	f000 fd74 	bl	800c232 <__any_on>
 800b74a:	2800      	cmp	r0, #0
 800b74c:	d1ed      	bne.n	800b72a <__gethex+0x2a2>
 800b74e:	4629      	mov	r1, r5
 800b750:	9802      	ldr	r0, [sp, #8]
 800b752:	f000 f9cb 	bl	800baec <_Bfree>
 800b756:	2300      	movs	r3, #0
 800b758:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b75a:	2750      	movs	r7, #80	; 0x50
 800b75c:	6013      	str	r3, [r2, #0]
 800b75e:	e71b      	b.n	800b598 <__gethex+0x110>
 800b760:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b762:	2b00      	cmp	r3, #0
 800b764:	d0e1      	beq.n	800b72a <__gethex+0x2a2>
 800b766:	e7f2      	b.n	800b74e <__gethex+0x2c6>
 800b768:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d1dd      	bne.n	800b72a <__gethex+0x2a2>
 800b76e:	e7ee      	b.n	800b74e <__gethex+0x2c6>
 800b770:	1e67      	subs	r7, r4, #1
 800b772:	f1ba 0f00 	cmp.w	sl, #0
 800b776:	d132      	bne.n	800b7de <__gethex+0x356>
 800b778:	b127      	cbz	r7, 800b784 <__gethex+0x2fc>
 800b77a:	4639      	mov	r1, r7
 800b77c:	4628      	mov	r0, r5
 800b77e:	f000 fd58 	bl	800c232 <__any_on>
 800b782:	4682      	mov	sl, r0
 800b784:	2301      	movs	r3, #1
 800b786:	117a      	asrs	r2, r7, #5
 800b788:	f007 071f 	and.w	r7, r7, #31
 800b78c:	fa03 f707 	lsl.w	r7, r3, r7
 800b790:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800b794:	4621      	mov	r1, r4
 800b796:	421f      	tst	r7, r3
 800b798:	f04f 0702 	mov.w	r7, #2
 800b79c:	4628      	mov	r0, r5
 800b79e:	bf18      	it	ne
 800b7a0:	f04a 0a02 	orrne.w	sl, sl, #2
 800b7a4:	1b36      	subs	r6, r6, r4
 800b7a6:	f7ff fe1f 	bl	800b3e8 <rshift>
 800b7aa:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b7ae:	f1ba 0f00 	cmp.w	sl, #0
 800b7b2:	d048      	beq.n	800b846 <__gethex+0x3be>
 800b7b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b7b8:	2b02      	cmp	r3, #2
 800b7ba:	d015      	beq.n	800b7e8 <__gethex+0x360>
 800b7bc:	2b03      	cmp	r3, #3
 800b7be:	d017      	beq.n	800b7f0 <__gethex+0x368>
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d109      	bne.n	800b7d8 <__gethex+0x350>
 800b7c4:	f01a 0f02 	tst.w	sl, #2
 800b7c8:	d006      	beq.n	800b7d8 <__gethex+0x350>
 800b7ca:	f8d9 3000 	ldr.w	r3, [r9]
 800b7ce:	ea4a 0a03 	orr.w	sl, sl, r3
 800b7d2:	f01a 0f01 	tst.w	sl, #1
 800b7d6:	d10e      	bne.n	800b7f6 <__gethex+0x36e>
 800b7d8:	f047 0710 	orr.w	r7, r7, #16
 800b7dc:	e033      	b.n	800b846 <__gethex+0x3be>
 800b7de:	f04f 0a01 	mov.w	sl, #1
 800b7e2:	e7cf      	b.n	800b784 <__gethex+0x2fc>
 800b7e4:	2701      	movs	r7, #1
 800b7e6:	e7e2      	b.n	800b7ae <__gethex+0x326>
 800b7e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7ea:	f1c3 0301 	rsb	r3, r3, #1
 800b7ee:	9315      	str	r3, [sp, #84]	; 0x54
 800b7f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d0f0      	beq.n	800b7d8 <__gethex+0x350>
 800b7f6:	f04f 0c00 	mov.w	ip, #0
 800b7fa:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800b7fe:	f105 0314 	add.w	r3, r5, #20
 800b802:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800b806:	eb03 010a 	add.w	r1, r3, sl
 800b80a:	4618      	mov	r0, r3
 800b80c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b810:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b814:	d01c      	beq.n	800b850 <__gethex+0x3c8>
 800b816:	3201      	adds	r2, #1
 800b818:	6002      	str	r2, [r0, #0]
 800b81a:	2f02      	cmp	r7, #2
 800b81c:	f105 0314 	add.w	r3, r5, #20
 800b820:	d138      	bne.n	800b894 <__gethex+0x40c>
 800b822:	f8d8 2000 	ldr.w	r2, [r8]
 800b826:	3a01      	subs	r2, #1
 800b828:	42b2      	cmp	r2, r6
 800b82a:	d10a      	bne.n	800b842 <__gethex+0x3ba>
 800b82c:	2201      	movs	r2, #1
 800b82e:	1171      	asrs	r1, r6, #5
 800b830:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b834:	f006 061f 	and.w	r6, r6, #31
 800b838:	fa02 f606 	lsl.w	r6, r2, r6
 800b83c:	421e      	tst	r6, r3
 800b83e:	bf18      	it	ne
 800b840:	4617      	movne	r7, r2
 800b842:	f047 0720 	orr.w	r7, r7, #32
 800b846:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b848:	601d      	str	r5, [r3, #0]
 800b84a:	9b06      	ldr	r3, [sp, #24]
 800b84c:	601c      	str	r4, [r3, #0]
 800b84e:	e6a3      	b.n	800b598 <__gethex+0x110>
 800b850:	4299      	cmp	r1, r3
 800b852:	f843 cc04 	str.w	ip, [r3, #-4]
 800b856:	d8d8      	bhi.n	800b80a <__gethex+0x382>
 800b858:	68ab      	ldr	r3, [r5, #8]
 800b85a:	4599      	cmp	r9, r3
 800b85c:	db12      	blt.n	800b884 <__gethex+0x3fc>
 800b85e:	6869      	ldr	r1, [r5, #4]
 800b860:	9802      	ldr	r0, [sp, #8]
 800b862:	3101      	adds	r1, #1
 800b864:	f000 f90e 	bl	800ba84 <_Balloc>
 800b868:	4683      	mov	fp, r0
 800b86a:	692a      	ldr	r2, [r5, #16]
 800b86c:	f105 010c 	add.w	r1, r5, #12
 800b870:	3202      	adds	r2, #2
 800b872:	0092      	lsls	r2, r2, #2
 800b874:	300c      	adds	r0, #12
 800b876:	f7fe fe38 	bl	800a4ea <memcpy>
 800b87a:	4629      	mov	r1, r5
 800b87c:	9802      	ldr	r0, [sp, #8]
 800b87e:	f000 f935 	bl	800baec <_Bfree>
 800b882:	465d      	mov	r5, fp
 800b884:	692b      	ldr	r3, [r5, #16]
 800b886:	1c5a      	adds	r2, r3, #1
 800b888:	612a      	str	r2, [r5, #16]
 800b88a:	2201      	movs	r2, #1
 800b88c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b890:	615a      	str	r2, [r3, #20]
 800b892:	e7c2      	b.n	800b81a <__gethex+0x392>
 800b894:	692a      	ldr	r2, [r5, #16]
 800b896:	454a      	cmp	r2, r9
 800b898:	dd0b      	ble.n	800b8b2 <__gethex+0x42a>
 800b89a:	2101      	movs	r1, #1
 800b89c:	4628      	mov	r0, r5
 800b89e:	f7ff fda3 	bl	800b3e8 <rshift>
 800b8a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b8a6:	3401      	adds	r4, #1
 800b8a8:	42a3      	cmp	r3, r4
 800b8aa:	f6ff aed8 	blt.w	800b65e <__gethex+0x1d6>
 800b8ae:	2701      	movs	r7, #1
 800b8b0:	e7c7      	b.n	800b842 <__gethex+0x3ba>
 800b8b2:	f016 061f 	ands.w	r6, r6, #31
 800b8b6:	d0fa      	beq.n	800b8ae <__gethex+0x426>
 800b8b8:	449a      	add	sl, r3
 800b8ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b8be:	f000 f9a5 	bl	800bc0c <__hi0bits>
 800b8c2:	f1c6 0620 	rsb	r6, r6, #32
 800b8c6:	42b0      	cmp	r0, r6
 800b8c8:	dbe7      	blt.n	800b89a <__gethex+0x412>
 800b8ca:	e7f0      	b.n	800b8ae <__gethex+0x426>

0800b8cc <L_shift>:
 800b8cc:	f1c2 0208 	rsb	r2, r2, #8
 800b8d0:	0092      	lsls	r2, r2, #2
 800b8d2:	b570      	push	{r4, r5, r6, lr}
 800b8d4:	f1c2 0620 	rsb	r6, r2, #32
 800b8d8:	6843      	ldr	r3, [r0, #4]
 800b8da:	6804      	ldr	r4, [r0, #0]
 800b8dc:	fa03 f506 	lsl.w	r5, r3, r6
 800b8e0:	432c      	orrs	r4, r5
 800b8e2:	40d3      	lsrs	r3, r2
 800b8e4:	6004      	str	r4, [r0, #0]
 800b8e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b8ea:	4288      	cmp	r0, r1
 800b8ec:	d3f4      	bcc.n	800b8d8 <L_shift+0xc>
 800b8ee:	bd70      	pop	{r4, r5, r6, pc}

0800b8f0 <__match>:
 800b8f0:	b530      	push	{r4, r5, lr}
 800b8f2:	6803      	ldr	r3, [r0, #0]
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8fa:	b914      	cbnz	r4, 800b902 <__match+0x12>
 800b8fc:	6003      	str	r3, [r0, #0]
 800b8fe:	2001      	movs	r0, #1
 800b900:	bd30      	pop	{r4, r5, pc}
 800b902:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b906:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b90a:	2d19      	cmp	r5, #25
 800b90c:	bf98      	it	ls
 800b90e:	3220      	addls	r2, #32
 800b910:	42a2      	cmp	r2, r4
 800b912:	d0f0      	beq.n	800b8f6 <__match+0x6>
 800b914:	2000      	movs	r0, #0
 800b916:	e7f3      	b.n	800b900 <__match+0x10>

0800b918 <__hexnan>:
 800b918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b91c:	2500      	movs	r5, #0
 800b91e:	680b      	ldr	r3, [r1, #0]
 800b920:	4682      	mov	sl, r0
 800b922:	115f      	asrs	r7, r3, #5
 800b924:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b928:	f013 031f 	ands.w	r3, r3, #31
 800b92c:	bf18      	it	ne
 800b92e:	3704      	addne	r7, #4
 800b930:	1f3e      	subs	r6, r7, #4
 800b932:	4690      	mov	r8, r2
 800b934:	46b1      	mov	r9, r6
 800b936:	4634      	mov	r4, r6
 800b938:	46ab      	mov	fp, r5
 800b93a:	b087      	sub	sp, #28
 800b93c:	6801      	ldr	r1, [r0, #0]
 800b93e:	9301      	str	r3, [sp, #4]
 800b940:	f847 5c04 	str.w	r5, [r7, #-4]
 800b944:	9502      	str	r5, [sp, #8]
 800b946:	784a      	ldrb	r2, [r1, #1]
 800b948:	1c4b      	adds	r3, r1, #1
 800b94a:	9303      	str	r3, [sp, #12]
 800b94c:	b342      	cbz	r2, 800b9a0 <__hexnan+0x88>
 800b94e:	4610      	mov	r0, r2
 800b950:	9105      	str	r1, [sp, #20]
 800b952:	9204      	str	r2, [sp, #16]
 800b954:	f7ff fd83 	bl	800b45e <__hexdig_fun>
 800b958:	2800      	cmp	r0, #0
 800b95a:	d143      	bne.n	800b9e4 <__hexnan+0xcc>
 800b95c:	9a04      	ldr	r2, [sp, #16]
 800b95e:	9905      	ldr	r1, [sp, #20]
 800b960:	2a20      	cmp	r2, #32
 800b962:	d818      	bhi.n	800b996 <__hexnan+0x7e>
 800b964:	9b02      	ldr	r3, [sp, #8]
 800b966:	459b      	cmp	fp, r3
 800b968:	dd13      	ble.n	800b992 <__hexnan+0x7a>
 800b96a:	454c      	cmp	r4, r9
 800b96c:	d206      	bcs.n	800b97c <__hexnan+0x64>
 800b96e:	2d07      	cmp	r5, #7
 800b970:	dc04      	bgt.n	800b97c <__hexnan+0x64>
 800b972:	462a      	mov	r2, r5
 800b974:	4649      	mov	r1, r9
 800b976:	4620      	mov	r0, r4
 800b978:	f7ff ffa8 	bl	800b8cc <L_shift>
 800b97c:	4544      	cmp	r4, r8
 800b97e:	d944      	bls.n	800ba0a <__hexnan+0xf2>
 800b980:	2300      	movs	r3, #0
 800b982:	f1a4 0904 	sub.w	r9, r4, #4
 800b986:	f844 3c04 	str.w	r3, [r4, #-4]
 800b98a:	461d      	mov	r5, r3
 800b98c:	464c      	mov	r4, r9
 800b98e:	f8cd b008 	str.w	fp, [sp, #8]
 800b992:	9903      	ldr	r1, [sp, #12]
 800b994:	e7d7      	b.n	800b946 <__hexnan+0x2e>
 800b996:	2a29      	cmp	r2, #41	; 0x29
 800b998:	d14a      	bne.n	800ba30 <__hexnan+0x118>
 800b99a:	3102      	adds	r1, #2
 800b99c:	f8ca 1000 	str.w	r1, [sl]
 800b9a0:	f1bb 0f00 	cmp.w	fp, #0
 800b9a4:	d044      	beq.n	800ba30 <__hexnan+0x118>
 800b9a6:	454c      	cmp	r4, r9
 800b9a8:	d206      	bcs.n	800b9b8 <__hexnan+0xa0>
 800b9aa:	2d07      	cmp	r5, #7
 800b9ac:	dc04      	bgt.n	800b9b8 <__hexnan+0xa0>
 800b9ae:	462a      	mov	r2, r5
 800b9b0:	4649      	mov	r1, r9
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	f7ff ff8a 	bl	800b8cc <L_shift>
 800b9b8:	4544      	cmp	r4, r8
 800b9ba:	d928      	bls.n	800ba0e <__hexnan+0xf6>
 800b9bc:	4643      	mov	r3, r8
 800b9be:	f854 2b04 	ldr.w	r2, [r4], #4
 800b9c2:	42a6      	cmp	r6, r4
 800b9c4:	f843 2b04 	str.w	r2, [r3], #4
 800b9c8:	d2f9      	bcs.n	800b9be <__hexnan+0xa6>
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f843 2b04 	str.w	r2, [r3], #4
 800b9d0:	429e      	cmp	r6, r3
 800b9d2:	d2fb      	bcs.n	800b9cc <__hexnan+0xb4>
 800b9d4:	6833      	ldr	r3, [r6, #0]
 800b9d6:	b91b      	cbnz	r3, 800b9e0 <__hexnan+0xc8>
 800b9d8:	4546      	cmp	r6, r8
 800b9da:	d127      	bne.n	800ba2c <__hexnan+0x114>
 800b9dc:	2301      	movs	r3, #1
 800b9de:	6033      	str	r3, [r6, #0]
 800b9e0:	2005      	movs	r0, #5
 800b9e2:	e026      	b.n	800ba32 <__hexnan+0x11a>
 800b9e4:	3501      	adds	r5, #1
 800b9e6:	2d08      	cmp	r5, #8
 800b9e8:	f10b 0b01 	add.w	fp, fp, #1
 800b9ec:	dd06      	ble.n	800b9fc <__hexnan+0xe4>
 800b9ee:	4544      	cmp	r4, r8
 800b9f0:	d9cf      	bls.n	800b992 <__hexnan+0x7a>
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	2501      	movs	r5, #1
 800b9f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b9fa:	3c04      	subs	r4, #4
 800b9fc:	6822      	ldr	r2, [r4, #0]
 800b9fe:	f000 000f 	and.w	r0, r0, #15
 800ba02:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ba06:	6020      	str	r0, [r4, #0]
 800ba08:	e7c3      	b.n	800b992 <__hexnan+0x7a>
 800ba0a:	2508      	movs	r5, #8
 800ba0c:	e7c1      	b.n	800b992 <__hexnan+0x7a>
 800ba0e:	9b01      	ldr	r3, [sp, #4]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d0df      	beq.n	800b9d4 <__hexnan+0xbc>
 800ba14:	f04f 32ff 	mov.w	r2, #4294967295
 800ba18:	f1c3 0320 	rsb	r3, r3, #32
 800ba1c:	fa22 f303 	lsr.w	r3, r2, r3
 800ba20:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800ba24:	401a      	ands	r2, r3
 800ba26:	f847 2c04 	str.w	r2, [r7, #-4]
 800ba2a:	e7d3      	b.n	800b9d4 <__hexnan+0xbc>
 800ba2c:	3e04      	subs	r6, #4
 800ba2e:	e7d1      	b.n	800b9d4 <__hexnan+0xbc>
 800ba30:	2004      	movs	r0, #4
 800ba32:	b007      	add	sp, #28
 800ba34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba38 <__locale_ctype_ptr_l>:
 800ba38:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800ba3c:	4770      	bx	lr
	...

0800ba40 <__locale_ctype_ptr>:
 800ba40:	4b04      	ldr	r3, [pc, #16]	; (800ba54 <__locale_ctype_ptr+0x14>)
 800ba42:	4a05      	ldr	r2, [pc, #20]	; (800ba58 <__locale_ctype_ptr+0x18>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	6a1b      	ldr	r3, [r3, #32]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	bf08      	it	eq
 800ba4c:	4613      	moveq	r3, r2
 800ba4e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800ba52:	4770      	bx	lr
 800ba54:	200001b4 	.word	0x200001b4
 800ba58:	20000218 	.word	0x20000218

0800ba5c <__localeconv_l>:
 800ba5c:	30f0      	adds	r0, #240	; 0xf0
 800ba5e:	4770      	bx	lr

0800ba60 <__ascii_mbtowc>:
 800ba60:	b082      	sub	sp, #8
 800ba62:	b901      	cbnz	r1, 800ba66 <__ascii_mbtowc+0x6>
 800ba64:	a901      	add	r1, sp, #4
 800ba66:	b142      	cbz	r2, 800ba7a <__ascii_mbtowc+0x1a>
 800ba68:	b14b      	cbz	r3, 800ba7e <__ascii_mbtowc+0x1e>
 800ba6a:	7813      	ldrb	r3, [r2, #0]
 800ba6c:	600b      	str	r3, [r1, #0]
 800ba6e:	7812      	ldrb	r2, [r2, #0]
 800ba70:	1c10      	adds	r0, r2, #0
 800ba72:	bf18      	it	ne
 800ba74:	2001      	movne	r0, #1
 800ba76:	b002      	add	sp, #8
 800ba78:	4770      	bx	lr
 800ba7a:	4610      	mov	r0, r2
 800ba7c:	e7fb      	b.n	800ba76 <__ascii_mbtowc+0x16>
 800ba7e:	f06f 0001 	mvn.w	r0, #1
 800ba82:	e7f8      	b.n	800ba76 <__ascii_mbtowc+0x16>

0800ba84 <_Balloc>:
 800ba84:	b570      	push	{r4, r5, r6, lr}
 800ba86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ba88:	4604      	mov	r4, r0
 800ba8a:	460e      	mov	r6, r1
 800ba8c:	b93d      	cbnz	r5, 800ba9e <_Balloc+0x1a>
 800ba8e:	2010      	movs	r0, #16
 800ba90:	f001 f880 	bl	800cb94 <malloc>
 800ba94:	6260      	str	r0, [r4, #36]	; 0x24
 800ba96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ba9a:	6005      	str	r5, [r0, #0]
 800ba9c:	60c5      	str	r5, [r0, #12]
 800ba9e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800baa0:	68eb      	ldr	r3, [r5, #12]
 800baa2:	b183      	cbz	r3, 800bac6 <_Balloc+0x42>
 800baa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800baac:	b9b8      	cbnz	r0, 800bade <_Balloc+0x5a>
 800baae:	2101      	movs	r1, #1
 800bab0:	fa01 f506 	lsl.w	r5, r1, r6
 800bab4:	1d6a      	adds	r2, r5, #5
 800bab6:	0092      	lsls	r2, r2, #2
 800bab8:	4620      	mov	r0, r4
 800baba:	f000 fbdb 	bl	800c274 <_calloc_r>
 800babe:	b160      	cbz	r0, 800bada <_Balloc+0x56>
 800bac0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800bac4:	e00e      	b.n	800bae4 <_Balloc+0x60>
 800bac6:	2221      	movs	r2, #33	; 0x21
 800bac8:	2104      	movs	r1, #4
 800baca:	4620      	mov	r0, r4
 800bacc:	f000 fbd2 	bl	800c274 <_calloc_r>
 800bad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bad2:	60e8      	str	r0, [r5, #12]
 800bad4:	68db      	ldr	r3, [r3, #12]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d1e4      	bne.n	800baa4 <_Balloc+0x20>
 800bada:	2000      	movs	r0, #0
 800badc:	bd70      	pop	{r4, r5, r6, pc}
 800bade:	6802      	ldr	r2, [r0, #0]
 800bae0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800bae4:	2300      	movs	r3, #0
 800bae6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800baea:	e7f7      	b.n	800badc <_Balloc+0x58>

0800baec <_Bfree>:
 800baec:	b570      	push	{r4, r5, r6, lr}
 800baee:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800baf0:	4606      	mov	r6, r0
 800baf2:	460d      	mov	r5, r1
 800baf4:	b93c      	cbnz	r4, 800bb06 <_Bfree+0x1a>
 800baf6:	2010      	movs	r0, #16
 800baf8:	f001 f84c 	bl	800cb94 <malloc>
 800bafc:	6270      	str	r0, [r6, #36]	; 0x24
 800bafe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb02:	6004      	str	r4, [r0, #0]
 800bb04:	60c4      	str	r4, [r0, #12]
 800bb06:	b13d      	cbz	r5, 800bb18 <_Bfree+0x2c>
 800bb08:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bb0a:	686a      	ldr	r2, [r5, #4]
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb12:	6029      	str	r1, [r5, #0]
 800bb14:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800bb18:	bd70      	pop	{r4, r5, r6, pc}

0800bb1a <__multadd>:
 800bb1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb1e:	461f      	mov	r7, r3
 800bb20:	4606      	mov	r6, r0
 800bb22:	460c      	mov	r4, r1
 800bb24:	2300      	movs	r3, #0
 800bb26:	690d      	ldr	r5, [r1, #16]
 800bb28:	f101 0c14 	add.w	ip, r1, #20
 800bb2c:	f8dc 0000 	ldr.w	r0, [ip]
 800bb30:	3301      	adds	r3, #1
 800bb32:	b281      	uxth	r1, r0
 800bb34:	fb02 7101 	mla	r1, r2, r1, r7
 800bb38:	0c00      	lsrs	r0, r0, #16
 800bb3a:	0c0f      	lsrs	r7, r1, #16
 800bb3c:	fb02 7000 	mla	r0, r2, r0, r7
 800bb40:	b289      	uxth	r1, r1
 800bb42:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800bb46:	429d      	cmp	r5, r3
 800bb48:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800bb4c:	f84c 1b04 	str.w	r1, [ip], #4
 800bb50:	dcec      	bgt.n	800bb2c <__multadd+0x12>
 800bb52:	b1d7      	cbz	r7, 800bb8a <__multadd+0x70>
 800bb54:	68a3      	ldr	r3, [r4, #8]
 800bb56:	42ab      	cmp	r3, r5
 800bb58:	dc12      	bgt.n	800bb80 <__multadd+0x66>
 800bb5a:	6861      	ldr	r1, [r4, #4]
 800bb5c:	4630      	mov	r0, r6
 800bb5e:	3101      	adds	r1, #1
 800bb60:	f7ff ff90 	bl	800ba84 <_Balloc>
 800bb64:	4680      	mov	r8, r0
 800bb66:	6922      	ldr	r2, [r4, #16]
 800bb68:	f104 010c 	add.w	r1, r4, #12
 800bb6c:	3202      	adds	r2, #2
 800bb6e:	0092      	lsls	r2, r2, #2
 800bb70:	300c      	adds	r0, #12
 800bb72:	f7fe fcba 	bl	800a4ea <memcpy>
 800bb76:	4621      	mov	r1, r4
 800bb78:	4630      	mov	r0, r6
 800bb7a:	f7ff ffb7 	bl	800baec <_Bfree>
 800bb7e:	4644      	mov	r4, r8
 800bb80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb84:	3501      	adds	r5, #1
 800bb86:	615f      	str	r7, [r3, #20]
 800bb88:	6125      	str	r5, [r4, #16]
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bb90 <__s2b>:
 800bb90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb94:	4615      	mov	r5, r2
 800bb96:	2209      	movs	r2, #9
 800bb98:	461f      	mov	r7, r3
 800bb9a:	3308      	adds	r3, #8
 800bb9c:	460c      	mov	r4, r1
 800bb9e:	fb93 f3f2 	sdiv	r3, r3, r2
 800bba2:	4606      	mov	r6, r0
 800bba4:	2201      	movs	r2, #1
 800bba6:	2100      	movs	r1, #0
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	db20      	blt.n	800bbee <__s2b+0x5e>
 800bbac:	4630      	mov	r0, r6
 800bbae:	f7ff ff69 	bl	800ba84 <_Balloc>
 800bbb2:	9b08      	ldr	r3, [sp, #32]
 800bbb4:	2d09      	cmp	r5, #9
 800bbb6:	6143      	str	r3, [r0, #20]
 800bbb8:	f04f 0301 	mov.w	r3, #1
 800bbbc:	6103      	str	r3, [r0, #16]
 800bbbe:	dd19      	ble.n	800bbf4 <__s2b+0x64>
 800bbc0:	f104 0809 	add.w	r8, r4, #9
 800bbc4:	46c1      	mov	r9, r8
 800bbc6:	442c      	add	r4, r5
 800bbc8:	f819 3b01 	ldrb.w	r3, [r9], #1
 800bbcc:	4601      	mov	r1, r0
 800bbce:	3b30      	subs	r3, #48	; 0x30
 800bbd0:	220a      	movs	r2, #10
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	f7ff ffa1 	bl	800bb1a <__multadd>
 800bbd8:	45a1      	cmp	r9, r4
 800bbda:	d1f5      	bne.n	800bbc8 <__s2b+0x38>
 800bbdc:	eb08 0405 	add.w	r4, r8, r5
 800bbe0:	3c08      	subs	r4, #8
 800bbe2:	1b2d      	subs	r5, r5, r4
 800bbe4:	1963      	adds	r3, r4, r5
 800bbe6:	42bb      	cmp	r3, r7
 800bbe8:	db07      	blt.n	800bbfa <__s2b+0x6a>
 800bbea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbee:	0052      	lsls	r2, r2, #1
 800bbf0:	3101      	adds	r1, #1
 800bbf2:	e7d9      	b.n	800bba8 <__s2b+0x18>
 800bbf4:	340a      	adds	r4, #10
 800bbf6:	2509      	movs	r5, #9
 800bbf8:	e7f3      	b.n	800bbe2 <__s2b+0x52>
 800bbfa:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bbfe:	4601      	mov	r1, r0
 800bc00:	3b30      	subs	r3, #48	; 0x30
 800bc02:	220a      	movs	r2, #10
 800bc04:	4630      	mov	r0, r6
 800bc06:	f7ff ff88 	bl	800bb1a <__multadd>
 800bc0a:	e7eb      	b.n	800bbe4 <__s2b+0x54>

0800bc0c <__hi0bits>:
 800bc0c:	0c02      	lsrs	r2, r0, #16
 800bc0e:	0412      	lsls	r2, r2, #16
 800bc10:	4603      	mov	r3, r0
 800bc12:	b9b2      	cbnz	r2, 800bc42 <__hi0bits+0x36>
 800bc14:	0403      	lsls	r3, r0, #16
 800bc16:	2010      	movs	r0, #16
 800bc18:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bc1c:	bf04      	itt	eq
 800bc1e:	021b      	lsleq	r3, r3, #8
 800bc20:	3008      	addeq	r0, #8
 800bc22:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bc26:	bf04      	itt	eq
 800bc28:	011b      	lsleq	r3, r3, #4
 800bc2a:	3004      	addeq	r0, #4
 800bc2c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bc30:	bf04      	itt	eq
 800bc32:	009b      	lsleq	r3, r3, #2
 800bc34:	3002      	addeq	r0, #2
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	db06      	blt.n	800bc48 <__hi0bits+0x3c>
 800bc3a:	005b      	lsls	r3, r3, #1
 800bc3c:	d503      	bpl.n	800bc46 <__hi0bits+0x3a>
 800bc3e:	3001      	adds	r0, #1
 800bc40:	4770      	bx	lr
 800bc42:	2000      	movs	r0, #0
 800bc44:	e7e8      	b.n	800bc18 <__hi0bits+0xc>
 800bc46:	2020      	movs	r0, #32
 800bc48:	4770      	bx	lr

0800bc4a <__lo0bits>:
 800bc4a:	6803      	ldr	r3, [r0, #0]
 800bc4c:	4601      	mov	r1, r0
 800bc4e:	f013 0207 	ands.w	r2, r3, #7
 800bc52:	d00b      	beq.n	800bc6c <__lo0bits+0x22>
 800bc54:	07da      	lsls	r2, r3, #31
 800bc56:	d423      	bmi.n	800bca0 <__lo0bits+0x56>
 800bc58:	0798      	lsls	r0, r3, #30
 800bc5a:	bf49      	itett	mi
 800bc5c:	085b      	lsrmi	r3, r3, #1
 800bc5e:	089b      	lsrpl	r3, r3, #2
 800bc60:	2001      	movmi	r0, #1
 800bc62:	600b      	strmi	r3, [r1, #0]
 800bc64:	bf5c      	itt	pl
 800bc66:	600b      	strpl	r3, [r1, #0]
 800bc68:	2002      	movpl	r0, #2
 800bc6a:	4770      	bx	lr
 800bc6c:	b298      	uxth	r0, r3
 800bc6e:	b9a8      	cbnz	r0, 800bc9c <__lo0bits+0x52>
 800bc70:	2010      	movs	r0, #16
 800bc72:	0c1b      	lsrs	r3, r3, #16
 800bc74:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bc78:	bf04      	itt	eq
 800bc7a:	0a1b      	lsreq	r3, r3, #8
 800bc7c:	3008      	addeq	r0, #8
 800bc7e:	071a      	lsls	r2, r3, #28
 800bc80:	bf04      	itt	eq
 800bc82:	091b      	lsreq	r3, r3, #4
 800bc84:	3004      	addeq	r0, #4
 800bc86:	079a      	lsls	r2, r3, #30
 800bc88:	bf04      	itt	eq
 800bc8a:	089b      	lsreq	r3, r3, #2
 800bc8c:	3002      	addeq	r0, #2
 800bc8e:	07da      	lsls	r2, r3, #31
 800bc90:	d402      	bmi.n	800bc98 <__lo0bits+0x4e>
 800bc92:	085b      	lsrs	r3, r3, #1
 800bc94:	d006      	beq.n	800bca4 <__lo0bits+0x5a>
 800bc96:	3001      	adds	r0, #1
 800bc98:	600b      	str	r3, [r1, #0]
 800bc9a:	4770      	bx	lr
 800bc9c:	4610      	mov	r0, r2
 800bc9e:	e7e9      	b.n	800bc74 <__lo0bits+0x2a>
 800bca0:	2000      	movs	r0, #0
 800bca2:	4770      	bx	lr
 800bca4:	2020      	movs	r0, #32
 800bca6:	4770      	bx	lr

0800bca8 <__i2b>:
 800bca8:	b510      	push	{r4, lr}
 800bcaa:	460c      	mov	r4, r1
 800bcac:	2101      	movs	r1, #1
 800bcae:	f7ff fee9 	bl	800ba84 <_Balloc>
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	6144      	str	r4, [r0, #20]
 800bcb6:	6102      	str	r2, [r0, #16]
 800bcb8:	bd10      	pop	{r4, pc}

0800bcba <__multiply>:
 800bcba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcbe:	4614      	mov	r4, r2
 800bcc0:	690a      	ldr	r2, [r1, #16]
 800bcc2:	6923      	ldr	r3, [r4, #16]
 800bcc4:	4688      	mov	r8, r1
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	bfbe      	ittt	lt
 800bcca:	460b      	movlt	r3, r1
 800bccc:	46a0      	movlt	r8, r4
 800bcce:	461c      	movlt	r4, r3
 800bcd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bcd4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bcd8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bcdc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bce0:	eb07 0609 	add.w	r6, r7, r9
 800bce4:	42b3      	cmp	r3, r6
 800bce6:	bfb8      	it	lt
 800bce8:	3101      	addlt	r1, #1
 800bcea:	f7ff fecb 	bl	800ba84 <_Balloc>
 800bcee:	f100 0514 	add.w	r5, r0, #20
 800bcf2:	462b      	mov	r3, r5
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800bcfa:	4573      	cmp	r3, lr
 800bcfc:	d316      	bcc.n	800bd2c <__multiply+0x72>
 800bcfe:	f104 0214 	add.w	r2, r4, #20
 800bd02:	f108 0114 	add.w	r1, r8, #20
 800bd06:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800bd0a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800bd0e:	9300      	str	r3, [sp, #0]
 800bd10:	9b00      	ldr	r3, [sp, #0]
 800bd12:	9201      	str	r2, [sp, #4]
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d80c      	bhi.n	800bd32 <__multiply+0x78>
 800bd18:	2e00      	cmp	r6, #0
 800bd1a:	dd03      	ble.n	800bd24 <__multiply+0x6a>
 800bd1c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d05d      	beq.n	800bde0 <__multiply+0x126>
 800bd24:	6106      	str	r6, [r0, #16]
 800bd26:	b003      	add	sp, #12
 800bd28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd2c:	f843 2b04 	str.w	r2, [r3], #4
 800bd30:	e7e3      	b.n	800bcfa <__multiply+0x40>
 800bd32:	f8b2 b000 	ldrh.w	fp, [r2]
 800bd36:	f1bb 0f00 	cmp.w	fp, #0
 800bd3a:	d023      	beq.n	800bd84 <__multiply+0xca>
 800bd3c:	4689      	mov	r9, r1
 800bd3e:	46ac      	mov	ip, r5
 800bd40:	f04f 0800 	mov.w	r8, #0
 800bd44:	f859 4b04 	ldr.w	r4, [r9], #4
 800bd48:	f8dc a000 	ldr.w	sl, [ip]
 800bd4c:	b2a3      	uxth	r3, r4
 800bd4e:	fa1f fa8a 	uxth.w	sl, sl
 800bd52:	fb0b a303 	mla	r3, fp, r3, sl
 800bd56:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bd5a:	f8dc 4000 	ldr.w	r4, [ip]
 800bd5e:	4443      	add	r3, r8
 800bd60:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bd64:	fb0b 840a 	mla	r4, fp, sl, r8
 800bd68:	46e2      	mov	sl, ip
 800bd6a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bd74:	454f      	cmp	r7, r9
 800bd76:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bd7a:	f84a 3b04 	str.w	r3, [sl], #4
 800bd7e:	d82b      	bhi.n	800bdd8 <__multiply+0x11e>
 800bd80:	f8cc 8004 	str.w	r8, [ip, #4]
 800bd84:	9b01      	ldr	r3, [sp, #4]
 800bd86:	3204      	adds	r2, #4
 800bd88:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800bd8c:	f1ba 0f00 	cmp.w	sl, #0
 800bd90:	d020      	beq.n	800bdd4 <__multiply+0x11a>
 800bd92:	4689      	mov	r9, r1
 800bd94:	46a8      	mov	r8, r5
 800bd96:	f04f 0b00 	mov.w	fp, #0
 800bd9a:	682b      	ldr	r3, [r5, #0]
 800bd9c:	f8b9 c000 	ldrh.w	ip, [r9]
 800bda0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	fb0a 440c 	mla	r4, sl, ip, r4
 800bdaa:	46c4      	mov	ip, r8
 800bdac:	445c      	add	r4, fp
 800bdae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bdb2:	f84c 3b04 	str.w	r3, [ip], #4
 800bdb6:	f859 3b04 	ldr.w	r3, [r9], #4
 800bdba:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800bdbe:	0c1b      	lsrs	r3, r3, #16
 800bdc0:	fb0a b303 	mla	r3, sl, r3, fp
 800bdc4:	454f      	cmp	r7, r9
 800bdc6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800bdca:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800bdce:	d805      	bhi.n	800bddc <__multiply+0x122>
 800bdd0:	f8c8 3004 	str.w	r3, [r8, #4]
 800bdd4:	3504      	adds	r5, #4
 800bdd6:	e79b      	b.n	800bd10 <__multiply+0x56>
 800bdd8:	46d4      	mov	ip, sl
 800bdda:	e7b3      	b.n	800bd44 <__multiply+0x8a>
 800bddc:	46e0      	mov	r8, ip
 800bdde:	e7dd      	b.n	800bd9c <__multiply+0xe2>
 800bde0:	3e01      	subs	r6, #1
 800bde2:	e799      	b.n	800bd18 <__multiply+0x5e>

0800bde4 <__pow5mult>:
 800bde4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bde8:	4615      	mov	r5, r2
 800bdea:	f012 0203 	ands.w	r2, r2, #3
 800bdee:	4606      	mov	r6, r0
 800bdf0:	460f      	mov	r7, r1
 800bdf2:	d007      	beq.n	800be04 <__pow5mult+0x20>
 800bdf4:	4c21      	ldr	r4, [pc, #132]	; (800be7c <__pow5mult+0x98>)
 800bdf6:	3a01      	subs	r2, #1
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bdfe:	f7ff fe8c 	bl	800bb1a <__multadd>
 800be02:	4607      	mov	r7, r0
 800be04:	10ad      	asrs	r5, r5, #2
 800be06:	d035      	beq.n	800be74 <__pow5mult+0x90>
 800be08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be0a:	b93c      	cbnz	r4, 800be1c <__pow5mult+0x38>
 800be0c:	2010      	movs	r0, #16
 800be0e:	f000 fec1 	bl	800cb94 <malloc>
 800be12:	6270      	str	r0, [r6, #36]	; 0x24
 800be14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be18:	6004      	str	r4, [r0, #0]
 800be1a:	60c4      	str	r4, [r0, #12]
 800be1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be24:	b94c      	cbnz	r4, 800be3a <__pow5mult+0x56>
 800be26:	f240 2171 	movw	r1, #625	; 0x271
 800be2a:	4630      	mov	r0, r6
 800be2c:	f7ff ff3c 	bl	800bca8 <__i2b>
 800be30:	2300      	movs	r3, #0
 800be32:	4604      	mov	r4, r0
 800be34:	f8c8 0008 	str.w	r0, [r8, #8]
 800be38:	6003      	str	r3, [r0, #0]
 800be3a:	f04f 0800 	mov.w	r8, #0
 800be3e:	07eb      	lsls	r3, r5, #31
 800be40:	d50a      	bpl.n	800be58 <__pow5mult+0x74>
 800be42:	4639      	mov	r1, r7
 800be44:	4622      	mov	r2, r4
 800be46:	4630      	mov	r0, r6
 800be48:	f7ff ff37 	bl	800bcba <__multiply>
 800be4c:	4681      	mov	r9, r0
 800be4e:	4639      	mov	r1, r7
 800be50:	4630      	mov	r0, r6
 800be52:	f7ff fe4b 	bl	800baec <_Bfree>
 800be56:	464f      	mov	r7, r9
 800be58:	106d      	asrs	r5, r5, #1
 800be5a:	d00b      	beq.n	800be74 <__pow5mult+0x90>
 800be5c:	6820      	ldr	r0, [r4, #0]
 800be5e:	b938      	cbnz	r0, 800be70 <__pow5mult+0x8c>
 800be60:	4622      	mov	r2, r4
 800be62:	4621      	mov	r1, r4
 800be64:	4630      	mov	r0, r6
 800be66:	f7ff ff28 	bl	800bcba <__multiply>
 800be6a:	6020      	str	r0, [r4, #0]
 800be6c:	f8c0 8000 	str.w	r8, [r0]
 800be70:	4604      	mov	r4, r0
 800be72:	e7e4      	b.n	800be3e <__pow5mult+0x5a>
 800be74:	4638      	mov	r0, r7
 800be76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be7a:	bf00      	nop
 800be7c:	0800f1d8 	.word	0x0800f1d8

0800be80 <__lshift>:
 800be80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be84:	460c      	mov	r4, r1
 800be86:	4607      	mov	r7, r0
 800be88:	4616      	mov	r6, r2
 800be8a:	6923      	ldr	r3, [r4, #16]
 800be8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be90:	eb0a 0903 	add.w	r9, sl, r3
 800be94:	6849      	ldr	r1, [r1, #4]
 800be96:	68a3      	ldr	r3, [r4, #8]
 800be98:	f109 0501 	add.w	r5, r9, #1
 800be9c:	42ab      	cmp	r3, r5
 800be9e:	db32      	blt.n	800bf06 <__lshift+0x86>
 800bea0:	4638      	mov	r0, r7
 800bea2:	f7ff fdef 	bl	800ba84 <_Balloc>
 800bea6:	2300      	movs	r3, #0
 800bea8:	4680      	mov	r8, r0
 800beaa:	461a      	mov	r2, r3
 800beac:	f100 0114 	add.w	r1, r0, #20
 800beb0:	4553      	cmp	r3, sl
 800beb2:	db2b      	blt.n	800bf0c <__lshift+0x8c>
 800beb4:	6920      	ldr	r0, [r4, #16]
 800beb6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800beba:	f104 0314 	add.w	r3, r4, #20
 800bebe:	f016 021f 	ands.w	r2, r6, #31
 800bec2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bec6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800beca:	d025      	beq.n	800bf18 <__lshift+0x98>
 800becc:	2000      	movs	r0, #0
 800bece:	f1c2 0e20 	rsb	lr, r2, #32
 800bed2:	468a      	mov	sl, r1
 800bed4:	681e      	ldr	r6, [r3, #0]
 800bed6:	4096      	lsls	r6, r2
 800bed8:	4330      	orrs	r0, r6
 800beda:	f84a 0b04 	str.w	r0, [sl], #4
 800bede:	f853 0b04 	ldr.w	r0, [r3], #4
 800bee2:	459c      	cmp	ip, r3
 800bee4:	fa20 f00e 	lsr.w	r0, r0, lr
 800bee8:	d814      	bhi.n	800bf14 <__lshift+0x94>
 800beea:	6048      	str	r0, [r1, #4]
 800beec:	b108      	cbz	r0, 800bef2 <__lshift+0x72>
 800beee:	f109 0502 	add.w	r5, r9, #2
 800bef2:	3d01      	subs	r5, #1
 800bef4:	4638      	mov	r0, r7
 800bef6:	f8c8 5010 	str.w	r5, [r8, #16]
 800befa:	4621      	mov	r1, r4
 800befc:	f7ff fdf6 	bl	800baec <_Bfree>
 800bf00:	4640      	mov	r0, r8
 800bf02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf06:	3101      	adds	r1, #1
 800bf08:	005b      	lsls	r3, r3, #1
 800bf0a:	e7c7      	b.n	800be9c <__lshift+0x1c>
 800bf0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bf10:	3301      	adds	r3, #1
 800bf12:	e7cd      	b.n	800beb0 <__lshift+0x30>
 800bf14:	4651      	mov	r1, sl
 800bf16:	e7dc      	b.n	800bed2 <__lshift+0x52>
 800bf18:	3904      	subs	r1, #4
 800bf1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf1e:	459c      	cmp	ip, r3
 800bf20:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf24:	d8f9      	bhi.n	800bf1a <__lshift+0x9a>
 800bf26:	e7e4      	b.n	800bef2 <__lshift+0x72>

0800bf28 <__mcmp>:
 800bf28:	6903      	ldr	r3, [r0, #16]
 800bf2a:	690a      	ldr	r2, [r1, #16]
 800bf2c:	b530      	push	{r4, r5, lr}
 800bf2e:	1a9b      	subs	r3, r3, r2
 800bf30:	d10c      	bne.n	800bf4c <__mcmp+0x24>
 800bf32:	0092      	lsls	r2, r2, #2
 800bf34:	3014      	adds	r0, #20
 800bf36:	3114      	adds	r1, #20
 800bf38:	1884      	adds	r4, r0, r2
 800bf3a:	4411      	add	r1, r2
 800bf3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bf40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bf44:	4295      	cmp	r5, r2
 800bf46:	d003      	beq.n	800bf50 <__mcmp+0x28>
 800bf48:	d305      	bcc.n	800bf56 <__mcmp+0x2e>
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	bd30      	pop	{r4, r5, pc}
 800bf50:	42a0      	cmp	r0, r4
 800bf52:	d3f3      	bcc.n	800bf3c <__mcmp+0x14>
 800bf54:	e7fa      	b.n	800bf4c <__mcmp+0x24>
 800bf56:	f04f 33ff 	mov.w	r3, #4294967295
 800bf5a:	e7f7      	b.n	800bf4c <__mcmp+0x24>

0800bf5c <__mdiff>:
 800bf5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf60:	460d      	mov	r5, r1
 800bf62:	4607      	mov	r7, r0
 800bf64:	4611      	mov	r1, r2
 800bf66:	4628      	mov	r0, r5
 800bf68:	4614      	mov	r4, r2
 800bf6a:	f7ff ffdd 	bl	800bf28 <__mcmp>
 800bf6e:	1e06      	subs	r6, r0, #0
 800bf70:	d108      	bne.n	800bf84 <__mdiff+0x28>
 800bf72:	4631      	mov	r1, r6
 800bf74:	4638      	mov	r0, r7
 800bf76:	f7ff fd85 	bl	800ba84 <_Balloc>
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800bf80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf84:	bfa4      	itt	ge
 800bf86:	4623      	movge	r3, r4
 800bf88:	462c      	movge	r4, r5
 800bf8a:	4638      	mov	r0, r7
 800bf8c:	6861      	ldr	r1, [r4, #4]
 800bf8e:	bfa6      	itte	ge
 800bf90:	461d      	movge	r5, r3
 800bf92:	2600      	movge	r6, #0
 800bf94:	2601      	movlt	r6, #1
 800bf96:	f7ff fd75 	bl	800ba84 <_Balloc>
 800bf9a:	f04f 0e00 	mov.w	lr, #0
 800bf9e:	60c6      	str	r6, [r0, #12]
 800bfa0:	692b      	ldr	r3, [r5, #16]
 800bfa2:	6926      	ldr	r6, [r4, #16]
 800bfa4:	f104 0214 	add.w	r2, r4, #20
 800bfa8:	f105 0914 	add.w	r9, r5, #20
 800bfac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800bfb0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800bfb4:	f100 0114 	add.w	r1, r0, #20
 800bfb8:	f852 ab04 	ldr.w	sl, [r2], #4
 800bfbc:	f859 5b04 	ldr.w	r5, [r9], #4
 800bfc0:	fa1f f38a 	uxth.w	r3, sl
 800bfc4:	4473      	add	r3, lr
 800bfc6:	b2ac      	uxth	r4, r5
 800bfc8:	1b1b      	subs	r3, r3, r4
 800bfca:	0c2c      	lsrs	r4, r5, #16
 800bfcc:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800bfd0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800bfd4:	b29b      	uxth	r3, r3
 800bfd6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800bfda:	45c8      	cmp	r8, r9
 800bfdc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800bfe0:	4694      	mov	ip, r2
 800bfe2:	f841 4b04 	str.w	r4, [r1], #4
 800bfe6:	d8e7      	bhi.n	800bfb8 <__mdiff+0x5c>
 800bfe8:	45bc      	cmp	ip, r7
 800bfea:	d304      	bcc.n	800bff6 <__mdiff+0x9a>
 800bfec:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800bff0:	b183      	cbz	r3, 800c014 <__mdiff+0xb8>
 800bff2:	6106      	str	r6, [r0, #16]
 800bff4:	e7c4      	b.n	800bf80 <__mdiff+0x24>
 800bff6:	f85c 4b04 	ldr.w	r4, [ip], #4
 800bffa:	b2a2      	uxth	r2, r4
 800bffc:	4472      	add	r2, lr
 800bffe:	1413      	asrs	r3, r2, #16
 800c000:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c004:	b292      	uxth	r2, r2
 800c006:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c00a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c00e:	f841 2b04 	str.w	r2, [r1], #4
 800c012:	e7e9      	b.n	800bfe8 <__mdiff+0x8c>
 800c014:	3e01      	subs	r6, #1
 800c016:	e7e9      	b.n	800bfec <__mdiff+0x90>

0800c018 <__ulp>:
 800c018:	4b10      	ldr	r3, [pc, #64]	; (800c05c <__ulp+0x44>)
 800c01a:	400b      	ands	r3, r1
 800c01c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c020:	2b00      	cmp	r3, #0
 800c022:	dd02      	ble.n	800c02a <__ulp+0x12>
 800c024:	2000      	movs	r0, #0
 800c026:	4619      	mov	r1, r3
 800c028:	4770      	bx	lr
 800c02a:	425b      	negs	r3, r3
 800c02c:	151b      	asrs	r3, r3, #20
 800c02e:	2b13      	cmp	r3, #19
 800c030:	f04f 0000 	mov.w	r0, #0
 800c034:	f04f 0100 	mov.w	r1, #0
 800c038:	dc04      	bgt.n	800c044 <__ulp+0x2c>
 800c03a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c03e:	fa42 f103 	asr.w	r1, r2, r3
 800c042:	4770      	bx	lr
 800c044:	2201      	movs	r2, #1
 800c046:	3b14      	subs	r3, #20
 800c048:	2b1e      	cmp	r3, #30
 800c04a:	bfce      	itee	gt
 800c04c:	4613      	movgt	r3, r2
 800c04e:	f1c3 031f 	rsble	r3, r3, #31
 800c052:	fa02 f303 	lslle.w	r3, r2, r3
 800c056:	4618      	mov	r0, r3
 800c058:	4770      	bx	lr
 800c05a:	bf00      	nop
 800c05c:	7ff00000 	.word	0x7ff00000

0800c060 <__b2d>:
 800c060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c064:	6907      	ldr	r7, [r0, #16]
 800c066:	f100 0914 	add.w	r9, r0, #20
 800c06a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c06e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c072:	f1a7 0804 	sub.w	r8, r7, #4
 800c076:	4630      	mov	r0, r6
 800c078:	f7ff fdc8 	bl	800bc0c <__hi0bits>
 800c07c:	f1c0 0320 	rsb	r3, r0, #32
 800c080:	280a      	cmp	r0, #10
 800c082:	600b      	str	r3, [r1, #0]
 800c084:	491e      	ldr	r1, [pc, #120]	; (800c100 <__b2d+0xa0>)
 800c086:	dc17      	bgt.n	800c0b8 <__b2d+0x58>
 800c088:	45c1      	cmp	r9, r8
 800c08a:	bf28      	it	cs
 800c08c:	2200      	movcs	r2, #0
 800c08e:	f1c0 0c0b 	rsb	ip, r0, #11
 800c092:	fa26 f30c 	lsr.w	r3, r6, ip
 800c096:	bf38      	it	cc
 800c098:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c09c:	ea43 0501 	orr.w	r5, r3, r1
 800c0a0:	f100 0315 	add.w	r3, r0, #21
 800c0a4:	fa06 f303 	lsl.w	r3, r6, r3
 800c0a8:	fa22 f20c 	lsr.w	r2, r2, ip
 800c0ac:	ea43 0402 	orr.w	r4, r3, r2
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	4629      	mov	r1, r5
 800c0b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0b8:	45c1      	cmp	r9, r8
 800c0ba:	bf3a      	itte	cc
 800c0bc:	f1a7 0808 	subcc.w	r8, r7, #8
 800c0c0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c0c4:	2200      	movcs	r2, #0
 800c0c6:	f1b0 030b 	subs.w	r3, r0, #11
 800c0ca:	d015      	beq.n	800c0f8 <__b2d+0x98>
 800c0cc:	409e      	lsls	r6, r3
 800c0ce:	f1c3 0720 	rsb	r7, r3, #32
 800c0d2:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800c0d6:	fa22 f107 	lsr.w	r1, r2, r7
 800c0da:	45c8      	cmp	r8, r9
 800c0dc:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800c0e0:	ea46 0501 	orr.w	r5, r6, r1
 800c0e4:	bf94      	ite	ls
 800c0e6:	2100      	movls	r1, #0
 800c0e8:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c0ec:	fa02 f003 	lsl.w	r0, r2, r3
 800c0f0:	40f9      	lsrs	r1, r7
 800c0f2:	ea40 0401 	orr.w	r4, r0, r1
 800c0f6:	e7db      	b.n	800c0b0 <__b2d+0x50>
 800c0f8:	ea46 0501 	orr.w	r5, r6, r1
 800c0fc:	4614      	mov	r4, r2
 800c0fe:	e7d7      	b.n	800c0b0 <__b2d+0x50>
 800c100:	3ff00000 	.word	0x3ff00000

0800c104 <__d2b>:
 800c104:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c108:	461c      	mov	r4, r3
 800c10a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800c10e:	2101      	movs	r1, #1
 800c110:	4690      	mov	r8, r2
 800c112:	f7ff fcb7 	bl	800ba84 <_Balloc>
 800c116:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800c11a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800c11e:	4607      	mov	r7, r0
 800c120:	bb34      	cbnz	r4, 800c170 <__d2b+0x6c>
 800c122:	9201      	str	r2, [sp, #4]
 800c124:	f1b8 0200 	subs.w	r2, r8, #0
 800c128:	d027      	beq.n	800c17a <__d2b+0x76>
 800c12a:	a802      	add	r0, sp, #8
 800c12c:	f840 2d08 	str.w	r2, [r0, #-8]!
 800c130:	f7ff fd8b 	bl	800bc4a <__lo0bits>
 800c134:	9900      	ldr	r1, [sp, #0]
 800c136:	b1f0      	cbz	r0, 800c176 <__d2b+0x72>
 800c138:	9a01      	ldr	r2, [sp, #4]
 800c13a:	f1c0 0320 	rsb	r3, r0, #32
 800c13e:	fa02 f303 	lsl.w	r3, r2, r3
 800c142:	430b      	orrs	r3, r1
 800c144:	40c2      	lsrs	r2, r0
 800c146:	617b      	str	r3, [r7, #20]
 800c148:	9201      	str	r2, [sp, #4]
 800c14a:	9b01      	ldr	r3, [sp, #4]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	bf14      	ite	ne
 800c150:	2102      	movne	r1, #2
 800c152:	2101      	moveq	r1, #1
 800c154:	61bb      	str	r3, [r7, #24]
 800c156:	6139      	str	r1, [r7, #16]
 800c158:	b1c4      	cbz	r4, 800c18c <__d2b+0x88>
 800c15a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c15e:	4404      	add	r4, r0
 800c160:	6034      	str	r4, [r6, #0]
 800c162:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c166:	6028      	str	r0, [r5, #0]
 800c168:	4638      	mov	r0, r7
 800c16a:	b002      	add	sp, #8
 800c16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c170:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c174:	e7d5      	b.n	800c122 <__d2b+0x1e>
 800c176:	6179      	str	r1, [r7, #20]
 800c178:	e7e7      	b.n	800c14a <__d2b+0x46>
 800c17a:	a801      	add	r0, sp, #4
 800c17c:	f7ff fd65 	bl	800bc4a <__lo0bits>
 800c180:	2101      	movs	r1, #1
 800c182:	9b01      	ldr	r3, [sp, #4]
 800c184:	6139      	str	r1, [r7, #16]
 800c186:	617b      	str	r3, [r7, #20]
 800c188:	3020      	adds	r0, #32
 800c18a:	e7e5      	b.n	800c158 <__d2b+0x54>
 800c18c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c190:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c194:	6030      	str	r0, [r6, #0]
 800c196:	6918      	ldr	r0, [r3, #16]
 800c198:	f7ff fd38 	bl	800bc0c <__hi0bits>
 800c19c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c1a0:	e7e1      	b.n	800c166 <__d2b+0x62>

0800c1a2 <__ratio>:
 800c1a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a6:	4688      	mov	r8, r1
 800c1a8:	4669      	mov	r1, sp
 800c1aa:	4681      	mov	r9, r0
 800c1ac:	f7ff ff58 	bl	800c060 <__b2d>
 800c1b0:	468b      	mov	fp, r1
 800c1b2:	4606      	mov	r6, r0
 800c1b4:	460f      	mov	r7, r1
 800c1b6:	4640      	mov	r0, r8
 800c1b8:	a901      	add	r1, sp, #4
 800c1ba:	f7ff ff51 	bl	800c060 <__b2d>
 800c1be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c1c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c1c6:	460d      	mov	r5, r1
 800c1c8:	eba3 0c02 	sub.w	ip, r3, r2
 800c1cc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c1d0:	1a9b      	subs	r3, r3, r2
 800c1d2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	bfd5      	itete	le
 800c1da:	460a      	movle	r2, r1
 800c1dc:	463a      	movgt	r2, r7
 800c1de:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c1e2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c1e6:	bfd8      	it	le
 800c1e8:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800c1ec:	462b      	mov	r3, r5
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	4659      	mov	r1, fp
 800c1f2:	4630      	mov	r0, r6
 800c1f4:	f7f4 fa9a 	bl	800072c <__aeabi_ddiv>
 800c1f8:	b003      	add	sp, #12
 800c1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c1fe <__copybits>:
 800c1fe:	3901      	subs	r1, #1
 800c200:	b510      	push	{r4, lr}
 800c202:	1149      	asrs	r1, r1, #5
 800c204:	6914      	ldr	r4, [r2, #16]
 800c206:	3101      	adds	r1, #1
 800c208:	f102 0314 	add.w	r3, r2, #20
 800c20c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c210:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c214:	42a3      	cmp	r3, r4
 800c216:	4602      	mov	r2, r0
 800c218:	d303      	bcc.n	800c222 <__copybits+0x24>
 800c21a:	2300      	movs	r3, #0
 800c21c:	428a      	cmp	r2, r1
 800c21e:	d305      	bcc.n	800c22c <__copybits+0x2e>
 800c220:	bd10      	pop	{r4, pc}
 800c222:	f853 2b04 	ldr.w	r2, [r3], #4
 800c226:	f840 2b04 	str.w	r2, [r0], #4
 800c22a:	e7f3      	b.n	800c214 <__copybits+0x16>
 800c22c:	f842 3b04 	str.w	r3, [r2], #4
 800c230:	e7f4      	b.n	800c21c <__copybits+0x1e>

0800c232 <__any_on>:
 800c232:	f100 0214 	add.w	r2, r0, #20
 800c236:	6900      	ldr	r0, [r0, #16]
 800c238:	114b      	asrs	r3, r1, #5
 800c23a:	4298      	cmp	r0, r3
 800c23c:	b510      	push	{r4, lr}
 800c23e:	db11      	blt.n	800c264 <__any_on+0x32>
 800c240:	dd0a      	ble.n	800c258 <__any_on+0x26>
 800c242:	f011 011f 	ands.w	r1, r1, #31
 800c246:	d007      	beq.n	800c258 <__any_on+0x26>
 800c248:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c24c:	fa24 f001 	lsr.w	r0, r4, r1
 800c250:	fa00 f101 	lsl.w	r1, r0, r1
 800c254:	428c      	cmp	r4, r1
 800c256:	d10b      	bne.n	800c270 <__any_on+0x3e>
 800c258:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d803      	bhi.n	800c268 <__any_on+0x36>
 800c260:	2000      	movs	r0, #0
 800c262:	bd10      	pop	{r4, pc}
 800c264:	4603      	mov	r3, r0
 800c266:	e7f7      	b.n	800c258 <__any_on+0x26>
 800c268:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c26c:	2900      	cmp	r1, #0
 800c26e:	d0f5      	beq.n	800c25c <__any_on+0x2a>
 800c270:	2001      	movs	r0, #1
 800c272:	e7f6      	b.n	800c262 <__any_on+0x30>

0800c274 <_calloc_r>:
 800c274:	b538      	push	{r3, r4, r5, lr}
 800c276:	fb02 f401 	mul.w	r4, r2, r1
 800c27a:	4621      	mov	r1, r4
 800c27c:	f000 f808 	bl	800c290 <_malloc_r>
 800c280:	4605      	mov	r5, r0
 800c282:	b118      	cbz	r0, 800c28c <_calloc_r+0x18>
 800c284:	4622      	mov	r2, r4
 800c286:	2100      	movs	r1, #0
 800c288:	f7fe f93a 	bl	800a500 <memset>
 800c28c:	4628      	mov	r0, r5
 800c28e:	bd38      	pop	{r3, r4, r5, pc}

0800c290 <_malloc_r>:
 800c290:	b570      	push	{r4, r5, r6, lr}
 800c292:	1ccd      	adds	r5, r1, #3
 800c294:	f025 0503 	bic.w	r5, r5, #3
 800c298:	3508      	adds	r5, #8
 800c29a:	2d0c      	cmp	r5, #12
 800c29c:	bf38      	it	cc
 800c29e:	250c      	movcc	r5, #12
 800c2a0:	2d00      	cmp	r5, #0
 800c2a2:	4606      	mov	r6, r0
 800c2a4:	db01      	blt.n	800c2aa <_malloc_r+0x1a>
 800c2a6:	42a9      	cmp	r1, r5
 800c2a8:	d903      	bls.n	800c2b2 <_malloc_r+0x22>
 800c2aa:	230c      	movs	r3, #12
 800c2ac:	6033      	str	r3, [r6, #0]
 800c2ae:	2000      	movs	r0, #0
 800c2b0:	bd70      	pop	{r4, r5, r6, pc}
 800c2b2:	f000 fc85 	bl	800cbc0 <__malloc_lock>
 800c2b6:	4a21      	ldr	r2, [pc, #132]	; (800c33c <_malloc_r+0xac>)
 800c2b8:	6814      	ldr	r4, [r2, #0]
 800c2ba:	4621      	mov	r1, r4
 800c2bc:	b991      	cbnz	r1, 800c2e4 <_malloc_r+0x54>
 800c2be:	4c20      	ldr	r4, [pc, #128]	; (800c340 <_malloc_r+0xb0>)
 800c2c0:	6823      	ldr	r3, [r4, #0]
 800c2c2:	b91b      	cbnz	r3, 800c2cc <_malloc_r+0x3c>
 800c2c4:	4630      	mov	r0, r6
 800c2c6:	f000 fb3f 	bl	800c948 <_sbrk_r>
 800c2ca:	6020      	str	r0, [r4, #0]
 800c2cc:	4629      	mov	r1, r5
 800c2ce:	4630      	mov	r0, r6
 800c2d0:	f000 fb3a 	bl	800c948 <_sbrk_r>
 800c2d4:	1c43      	adds	r3, r0, #1
 800c2d6:	d124      	bne.n	800c322 <_malloc_r+0x92>
 800c2d8:	230c      	movs	r3, #12
 800c2da:	4630      	mov	r0, r6
 800c2dc:	6033      	str	r3, [r6, #0]
 800c2de:	f000 fc70 	bl	800cbc2 <__malloc_unlock>
 800c2e2:	e7e4      	b.n	800c2ae <_malloc_r+0x1e>
 800c2e4:	680b      	ldr	r3, [r1, #0]
 800c2e6:	1b5b      	subs	r3, r3, r5
 800c2e8:	d418      	bmi.n	800c31c <_malloc_r+0x8c>
 800c2ea:	2b0b      	cmp	r3, #11
 800c2ec:	d90f      	bls.n	800c30e <_malloc_r+0x7e>
 800c2ee:	600b      	str	r3, [r1, #0]
 800c2f0:	18cc      	adds	r4, r1, r3
 800c2f2:	50cd      	str	r5, [r1, r3]
 800c2f4:	4630      	mov	r0, r6
 800c2f6:	f000 fc64 	bl	800cbc2 <__malloc_unlock>
 800c2fa:	f104 000b 	add.w	r0, r4, #11
 800c2fe:	1d23      	adds	r3, r4, #4
 800c300:	f020 0007 	bic.w	r0, r0, #7
 800c304:	1ac3      	subs	r3, r0, r3
 800c306:	d0d3      	beq.n	800c2b0 <_malloc_r+0x20>
 800c308:	425a      	negs	r2, r3
 800c30a:	50e2      	str	r2, [r4, r3]
 800c30c:	e7d0      	b.n	800c2b0 <_malloc_r+0x20>
 800c30e:	684b      	ldr	r3, [r1, #4]
 800c310:	428c      	cmp	r4, r1
 800c312:	bf16      	itet	ne
 800c314:	6063      	strne	r3, [r4, #4]
 800c316:	6013      	streq	r3, [r2, #0]
 800c318:	460c      	movne	r4, r1
 800c31a:	e7eb      	b.n	800c2f4 <_malloc_r+0x64>
 800c31c:	460c      	mov	r4, r1
 800c31e:	6849      	ldr	r1, [r1, #4]
 800c320:	e7cc      	b.n	800c2bc <_malloc_r+0x2c>
 800c322:	1cc4      	adds	r4, r0, #3
 800c324:	f024 0403 	bic.w	r4, r4, #3
 800c328:	42a0      	cmp	r0, r4
 800c32a:	d005      	beq.n	800c338 <_malloc_r+0xa8>
 800c32c:	1a21      	subs	r1, r4, r0
 800c32e:	4630      	mov	r0, r6
 800c330:	f000 fb0a 	bl	800c948 <_sbrk_r>
 800c334:	3001      	adds	r0, #1
 800c336:	d0cf      	beq.n	800c2d8 <_malloc_r+0x48>
 800c338:	6025      	str	r5, [r4, #0]
 800c33a:	e7db      	b.n	800c2f4 <_malloc_r+0x64>
 800c33c:	200005e8 	.word	0x200005e8
 800c340:	200005ec 	.word	0x200005ec

0800c344 <_sungetc_r>:
 800c344:	b538      	push	{r3, r4, r5, lr}
 800c346:	1c4b      	adds	r3, r1, #1
 800c348:	4614      	mov	r4, r2
 800c34a:	d103      	bne.n	800c354 <_sungetc_r+0x10>
 800c34c:	f04f 35ff 	mov.w	r5, #4294967295
 800c350:	4628      	mov	r0, r5
 800c352:	bd38      	pop	{r3, r4, r5, pc}
 800c354:	8993      	ldrh	r3, [r2, #12]
 800c356:	b2cd      	uxtb	r5, r1
 800c358:	f023 0320 	bic.w	r3, r3, #32
 800c35c:	8193      	strh	r3, [r2, #12]
 800c35e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c360:	6852      	ldr	r2, [r2, #4]
 800c362:	b18b      	cbz	r3, 800c388 <_sungetc_r+0x44>
 800c364:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c366:	4293      	cmp	r3, r2
 800c368:	dd08      	ble.n	800c37c <_sungetc_r+0x38>
 800c36a:	6823      	ldr	r3, [r4, #0]
 800c36c:	1e5a      	subs	r2, r3, #1
 800c36e:	6022      	str	r2, [r4, #0]
 800c370:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c374:	6863      	ldr	r3, [r4, #4]
 800c376:	3301      	adds	r3, #1
 800c378:	6063      	str	r3, [r4, #4]
 800c37a:	e7e9      	b.n	800c350 <_sungetc_r+0xc>
 800c37c:	4621      	mov	r1, r4
 800c37e:	f000 fbc3 	bl	800cb08 <__submore>
 800c382:	2800      	cmp	r0, #0
 800c384:	d0f1      	beq.n	800c36a <_sungetc_r+0x26>
 800c386:	e7e1      	b.n	800c34c <_sungetc_r+0x8>
 800c388:	6921      	ldr	r1, [r4, #16]
 800c38a:	6823      	ldr	r3, [r4, #0]
 800c38c:	b151      	cbz	r1, 800c3a4 <_sungetc_r+0x60>
 800c38e:	4299      	cmp	r1, r3
 800c390:	d208      	bcs.n	800c3a4 <_sungetc_r+0x60>
 800c392:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c396:	42a9      	cmp	r1, r5
 800c398:	d104      	bne.n	800c3a4 <_sungetc_r+0x60>
 800c39a:	3b01      	subs	r3, #1
 800c39c:	3201      	adds	r2, #1
 800c39e:	6023      	str	r3, [r4, #0]
 800c3a0:	6062      	str	r2, [r4, #4]
 800c3a2:	e7d5      	b.n	800c350 <_sungetc_r+0xc>
 800c3a4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c3a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3ac:	6363      	str	r3, [r4, #52]	; 0x34
 800c3ae:	2303      	movs	r3, #3
 800c3b0:	63a3      	str	r3, [r4, #56]	; 0x38
 800c3b2:	4623      	mov	r3, r4
 800c3b4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c3b8:	6023      	str	r3, [r4, #0]
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	e7dc      	b.n	800c378 <_sungetc_r+0x34>

0800c3be <__ssrefill_r>:
 800c3be:	b510      	push	{r4, lr}
 800c3c0:	460c      	mov	r4, r1
 800c3c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c3c4:	b169      	cbz	r1, 800c3e2 <__ssrefill_r+0x24>
 800c3c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3ca:	4299      	cmp	r1, r3
 800c3cc:	d001      	beq.n	800c3d2 <__ssrefill_r+0x14>
 800c3ce:	f000 fbf9 	bl	800cbc4 <_free_r>
 800c3d2:	2000      	movs	r0, #0
 800c3d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c3d6:	6360      	str	r0, [r4, #52]	; 0x34
 800c3d8:	6063      	str	r3, [r4, #4]
 800c3da:	b113      	cbz	r3, 800c3e2 <__ssrefill_r+0x24>
 800c3dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c3de:	6023      	str	r3, [r4, #0]
 800c3e0:	bd10      	pop	{r4, pc}
 800c3e2:	6923      	ldr	r3, [r4, #16]
 800c3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3e8:	6023      	str	r3, [r4, #0]
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	6063      	str	r3, [r4, #4]
 800c3ee:	89a3      	ldrh	r3, [r4, #12]
 800c3f0:	f043 0320 	orr.w	r3, r3, #32
 800c3f4:	81a3      	strh	r3, [r4, #12]
 800c3f6:	e7f3      	b.n	800c3e0 <__ssrefill_r+0x22>

0800c3f8 <__ssvfiscanf_r>:
 800c3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3fc:	460c      	mov	r4, r1
 800c3fe:	2100      	movs	r1, #0
 800c400:	4606      	mov	r6, r0
 800c402:	4692      	mov	sl, r2
 800c404:	270a      	movs	r7, #10
 800c406:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800c40a:	9144      	str	r1, [sp, #272]	; 0x110
 800c40c:	9145      	str	r1, [sp, #276]	; 0x114
 800c40e:	499e      	ldr	r1, [pc, #632]	; (800c688 <__ssvfiscanf_r+0x290>)
 800c410:	f10d 0804 	add.w	r8, sp, #4
 800c414:	91a0      	str	r1, [sp, #640]	; 0x280
 800c416:	499d      	ldr	r1, [pc, #628]	; (800c68c <__ssvfiscanf_r+0x294>)
 800c418:	f8df 9274 	ldr.w	r9, [pc, #628]	; 800c690 <__ssvfiscanf_r+0x298>
 800c41c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c420:	91a1      	str	r1, [sp, #644]	; 0x284
 800c422:	9300      	str	r3, [sp, #0]
 800c424:	f89a 3000 	ldrb.w	r3, [sl]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	f000 812a 	beq.w	800c682 <__ssvfiscanf_r+0x28a>
 800c42e:	4655      	mov	r5, sl
 800c430:	f7ff fb06 	bl	800ba40 <__locale_ctype_ptr>
 800c434:	f815 bb01 	ldrb.w	fp, [r5], #1
 800c438:	4458      	add	r0, fp
 800c43a:	7843      	ldrb	r3, [r0, #1]
 800c43c:	f013 0308 	ands.w	r3, r3, #8
 800c440:	d01c      	beq.n	800c47c <__ssvfiscanf_r+0x84>
 800c442:	6863      	ldr	r3, [r4, #4]
 800c444:	2b00      	cmp	r3, #0
 800c446:	dd12      	ble.n	800c46e <__ssvfiscanf_r+0x76>
 800c448:	f7ff fafa 	bl	800ba40 <__locale_ctype_ptr>
 800c44c:	6823      	ldr	r3, [r4, #0]
 800c44e:	781a      	ldrb	r2, [r3, #0]
 800c450:	4410      	add	r0, r2
 800c452:	7842      	ldrb	r2, [r0, #1]
 800c454:	0712      	lsls	r2, r2, #28
 800c456:	d401      	bmi.n	800c45c <__ssvfiscanf_r+0x64>
 800c458:	46aa      	mov	sl, r5
 800c45a:	e7e3      	b.n	800c424 <__ssvfiscanf_r+0x2c>
 800c45c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c45e:	3301      	adds	r3, #1
 800c460:	3201      	adds	r2, #1
 800c462:	9245      	str	r2, [sp, #276]	; 0x114
 800c464:	6862      	ldr	r2, [r4, #4]
 800c466:	6023      	str	r3, [r4, #0]
 800c468:	3a01      	subs	r2, #1
 800c46a:	6062      	str	r2, [r4, #4]
 800c46c:	e7e9      	b.n	800c442 <__ssvfiscanf_r+0x4a>
 800c46e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c470:	4621      	mov	r1, r4
 800c472:	4630      	mov	r0, r6
 800c474:	4798      	blx	r3
 800c476:	2800      	cmp	r0, #0
 800c478:	d0e6      	beq.n	800c448 <__ssvfiscanf_r+0x50>
 800c47a:	e7ed      	b.n	800c458 <__ssvfiscanf_r+0x60>
 800c47c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800c480:	f040 8082 	bne.w	800c588 <__ssvfiscanf_r+0x190>
 800c484:	9343      	str	r3, [sp, #268]	; 0x10c
 800c486:	9341      	str	r3, [sp, #260]	; 0x104
 800c488:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800c48c:	2b2a      	cmp	r3, #42	; 0x2a
 800c48e:	d103      	bne.n	800c498 <__ssvfiscanf_r+0xa0>
 800c490:	2310      	movs	r3, #16
 800c492:	f10a 0502 	add.w	r5, sl, #2
 800c496:	9341      	str	r3, [sp, #260]	; 0x104
 800c498:	46aa      	mov	sl, r5
 800c49a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800c49e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c4a2:	2a09      	cmp	r2, #9
 800c4a4:	d922      	bls.n	800c4ec <__ssvfiscanf_r+0xf4>
 800c4a6:	2203      	movs	r2, #3
 800c4a8:	4879      	ldr	r0, [pc, #484]	; (800c690 <__ssvfiscanf_r+0x298>)
 800c4aa:	f000 fb7b 	bl	800cba4 <memchr>
 800c4ae:	b138      	cbz	r0, 800c4c0 <__ssvfiscanf_r+0xc8>
 800c4b0:	eba0 0309 	sub.w	r3, r0, r9
 800c4b4:	2001      	movs	r0, #1
 800c4b6:	46aa      	mov	sl, r5
 800c4b8:	4098      	lsls	r0, r3
 800c4ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c4bc:	4318      	orrs	r0, r3
 800c4be:	9041      	str	r0, [sp, #260]	; 0x104
 800c4c0:	f89a 3000 	ldrb.w	r3, [sl]
 800c4c4:	f10a 0501 	add.w	r5, sl, #1
 800c4c8:	2b67      	cmp	r3, #103	; 0x67
 800c4ca:	d82b      	bhi.n	800c524 <__ssvfiscanf_r+0x12c>
 800c4cc:	2b65      	cmp	r3, #101	; 0x65
 800c4ce:	f080 809f 	bcs.w	800c610 <__ssvfiscanf_r+0x218>
 800c4d2:	2b47      	cmp	r3, #71	; 0x47
 800c4d4:	d810      	bhi.n	800c4f8 <__ssvfiscanf_r+0x100>
 800c4d6:	2b45      	cmp	r3, #69	; 0x45
 800c4d8:	f080 809a 	bcs.w	800c610 <__ssvfiscanf_r+0x218>
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d06c      	beq.n	800c5ba <__ssvfiscanf_r+0x1c2>
 800c4e0:	2b25      	cmp	r3, #37	; 0x25
 800c4e2:	d051      	beq.n	800c588 <__ssvfiscanf_r+0x190>
 800c4e4:	2303      	movs	r3, #3
 800c4e6:	9742      	str	r7, [sp, #264]	; 0x108
 800c4e8:	9347      	str	r3, [sp, #284]	; 0x11c
 800c4ea:	e027      	b.n	800c53c <__ssvfiscanf_r+0x144>
 800c4ec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c4ee:	fb07 1303 	mla	r3, r7, r3, r1
 800c4f2:	3b30      	subs	r3, #48	; 0x30
 800c4f4:	9343      	str	r3, [sp, #268]	; 0x10c
 800c4f6:	e7cf      	b.n	800c498 <__ssvfiscanf_r+0xa0>
 800c4f8:	2b5b      	cmp	r3, #91	; 0x5b
 800c4fa:	d06a      	beq.n	800c5d2 <__ssvfiscanf_r+0x1da>
 800c4fc:	d80c      	bhi.n	800c518 <__ssvfiscanf_r+0x120>
 800c4fe:	2b58      	cmp	r3, #88	; 0x58
 800c500:	d1f0      	bne.n	800c4e4 <__ssvfiscanf_r+0xec>
 800c502:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c508:	9241      	str	r2, [sp, #260]	; 0x104
 800c50a:	2210      	movs	r2, #16
 800c50c:	9242      	str	r2, [sp, #264]	; 0x108
 800c50e:	2b6e      	cmp	r3, #110	; 0x6e
 800c510:	bf8c      	ite	hi
 800c512:	2304      	movhi	r3, #4
 800c514:	2303      	movls	r3, #3
 800c516:	e010      	b.n	800c53a <__ssvfiscanf_r+0x142>
 800c518:	2b63      	cmp	r3, #99	; 0x63
 800c51a:	d065      	beq.n	800c5e8 <__ssvfiscanf_r+0x1f0>
 800c51c:	2b64      	cmp	r3, #100	; 0x64
 800c51e:	d1e1      	bne.n	800c4e4 <__ssvfiscanf_r+0xec>
 800c520:	9742      	str	r7, [sp, #264]	; 0x108
 800c522:	e7f4      	b.n	800c50e <__ssvfiscanf_r+0x116>
 800c524:	2b70      	cmp	r3, #112	; 0x70
 800c526:	d04b      	beq.n	800c5c0 <__ssvfiscanf_r+0x1c8>
 800c528:	d826      	bhi.n	800c578 <__ssvfiscanf_r+0x180>
 800c52a:	2b6e      	cmp	r3, #110	; 0x6e
 800c52c:	d062      	beq.n	800c5f4 <__ssvfiscanf_r+0x1fc>
 800c52e:	d84c      	bhi.n	800c5ca <__ssvfiscanf_r+0x1d2>
 800c530:	2b69      	cmp	r3, #105	; 0x69
 800c532:	d1d7      	bne.n	800c4e4 <__ssvfiscanf_r+0xec>
 800c534:	2300      	movs	r3, #0
 800c536:	9342      	str	r3, [sp, #264]	; 0x108
 800c538:	2303      	movs	r3, #3
 800c53a:	9347      	str	r3, [sp, #284]	; 0x11c
 800c53c:	6863      	ldr	r3, [r4, #4]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	dd68      	ble.n	800c614 <__ssvfiscanf_r+0x21c>
 800c542:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c544:	0659      	lsls	r1, r3, #25
 800c546:	d407      	bmi.n	800c558 <__ssvfiscanf_r+0x160>
 800c548:	f7ff fa7a 	bl	800ba40 <__locale_ctype_ptr>
 800c54c:	6823      	ldr	r3, [r4, #0]
 800c54e:	781a      	ldrb	r2, [r3, #0]
 800c550:	4410      	add	r0, r2
 800c552:	7842      	ldrb	r2, [r0, #1]
 800c554:	0712      	lsls	r2, r2, #28
 800c556:	d464      	bmi.n	800c622 <__ssvfiscanf_r+0x22a>
 800c558:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c55a:	2b02      	cmp	r3, #2
 800c55c:	dc73      	bgt.n	800c646 <__ssvfiscanf_r+0x24e>
 800c55e:	466b      	mov	r3, sp
 800c560:	4622      	mov	r2, r4
 800c562:	a941      	add	r1, sp, #260	; 0x104
 800c564:	4630      	mov	r0, r6
 800c566:	f000 f897 	bl	800c698 <_scanf_chars>
 800c56a:	2801      	cmp	r0, #1
 800c56c:	f000 8089 	beq.w	800c682 <__ssvfiscanf_r+0x28a>
 800c570:	2802      	cmp	r0, #2
 800c572:	f47f af71 	bne.w	800c458 <__ssvfiscanf_r+0x60>
 800c576:	e01d      	b.n	800c5b4 <__ssvfiscanf_r+0x1bc>
 800c578:	2b75      	cmp	r3, #117	; 0x75
 800c57a:	d0d1      	beq.n	800c520 <__ssvfiscanf_r+0x128>
 800c57c:	2b78      	cmp	r3, #120	; 0x78
 800c57e:	d0c0      	beq.n	800c502 <__ssvfiscanf_r+0x10a>
 800c580:	2b73      	cmp	r3, #115	; 0x73
 800c582:	d1af      	bne.n	800c4e4 <__ssvfiscanf_r+0xec>
 800c584:	2302      	movs	r3, #2
 800c586:	e7d8      	b.n	800c53a <__ssvfiscanf_r+0x142>
 800c588:	6863      	ldr	r3, [r4, #4]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	dd0c      	ble.n	800c5a8 <__ssvfiscanf_r+0x1b0>
 800c58e:	6823      	ldr	r3, [r4, #0]
 800c590:	781a      	ldrb	r2, [r3, #0]
 800c592:	455a      	cmp	r2, fp
 800c594:	d175      	bne.n	800c682 <__ssvfiscanf_r+0x28a>
 800c596:	3301      	adds	r3, #1
 800c598:	6862      	ldr	r2, [r4, #4]
 800c59a:	6023      	str	r3, [r4, #0]
 800c59c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c59e:	3a01      	subs	r2, #1
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	6062      	str	r2, [r4, #4]
 800c5a4:	9345      	str	r3, [sp, #276]	; 0x114
 800c5a6:	e757      	b.n	800c458 <__ssvfiscanf_r+0x60>
 800c5a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c5aa:	4621      	mov	r1, r4
 800c5ac:	4630      	mov	r0, r6
 800c5ae:	4798      	blx	r3
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	d0ec      	beq.n	800c58e <__ssvfiscanf_r+0x196>
 800c5b4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	d159      	bne.n	800c66e <__ssvfiscanf_r+0x276>
 800c5ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c5be:	e05c      	b.n	800c67a <__ssvfiscanf_r+0x282>
 800c5c0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c5c2:	f042 0220 	orr.w	r2, r2, #32
 800c5c6:	9241      	str	r2, [sp, #260]	; 0x104
 800c5c8:	e79b      	b.n	800c502 <__ssvfiscanf_r+0x10a>
 800c5ca:	2308      	movs	r3, #8
 800c5cc:	9342      	str	r3, [sp, #264]	; 0x108
 800c5ce:	2304      	movs	r3, #4
 800c5d0:	e7b3      	b.n	800c53a <__ssvfiscanf_r+0x142>
 800c5d2:	4629      	mov	r1, r5
 800c5d4:	4640      	mov	r0, r8
 800c5d6:	f000 f9c7 	bl	800c968 <__sccl>
 800c5da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c5dc:	4605      	mov	r5, r0
 800c5de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5e2:	9341      	str	r3, [sp, #260]	; 0x104
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	e7a8      	b.n	800c53a <__ssvfiscanf_r+0x142>
 800c5e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c5ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5ee:	9341      	str	r3, [sp, #260]	; 0x104
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	e7a2      	b.n	800c53a <__ssvfiscanf_r+0x142>
 800c5f4:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c5f6:	06c3      	lsls	r3, r0, #27
 800c5f8:	f53f af2e 	bmi.w	800c458 <__ssvfiscanf_r+0x60>
 800c5fc:	9b00      	ldr	r3, [sp, #0]
 800c5fe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c600:	1d19      	adds	r1, r3, #4
 800c602:	9100      	str	r1, [sp, #0]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	07c0      	lsls	r0, r0, #31
 800c608:	bf4c      	ite	mi
 800c60a:	801a      	strhmi	r2, [r3, #0]
 800c60c:	601a      	strpl	r2, [r3, #0]
 800c60e:	e723      	b.n	800c458 <__ssvfiscanf_r+0x60>
 800c610:	2305      	movs	r3, #5
 800c612:	e792      	b.n	800c53a <__ssvfiscanf_r+0x142>
 800c614:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c616:	4621      	mov	r1, r4
 800c618:	4630      	mov	r0, r6
 800c61a:	4798      	blx	r3
 800c61c:	2800      	cmp	r0, #0
 800c61e:	d090      	beq.n	800c542 <__ssvfiscanf_r+0x14a>
 800c620:	e7c8      	b.n	800c5b4 <__ssvfiscanf_r+0x1bc>
 800c622:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c624:	3201      	adds	r2, #1
 800c626:	9245      	str	r2, [sp, #276]	; 0x114
 800c628:	6862      	ldr	r2, [r4, #4]
 800c62a:	3a01      	subs	r2, #1
 800c62c:	2a00      	cmp	r2, #0
 800c62e:	6062      	str	r2, [r4, #4]
 800c630:	dd02      	ble.n	800c638 <__ssvfiscanf_r+0x240>
 800c632:	3301      	adds	r3, #1
 800c634:	6023      	str	r3, [r4, #0]
 800c636:	e787      	b.n	800c548 <__ssvfiscanf_r+0x150>
 800c638:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c63a:	4621      	mov	r1, r4
 800c63c:	4630      	mov	r0, r6
 800c63e:	4798      	blx	r3
 800c640:	2800      	cmp	r0, #0
 800c642:	d081      	beq.n	800c548 <__ssvfiscanf_r+0x150>
 800c644:	e7b6      	b.n	800c5b4 <__ssvfiscanf_r+0x1bc>
 800c646:	2b04      	cmp	r3, #4
 800c648:	dc06      	bgt.n	800c658 <__ssvfiscanf_r+0x260>
 800c64a:	466b      	mov	r3, sp
 800c64c:	4622      	mov	r2, r4
 800c64e:	a941      	add	r1, sp, #260	; 0x104
 800c650:	4630      	mov	r0, r6
 800c652:	f000 f883 	bl	800c75c <_scanf_i>
 800c656:	e788      	b.n	800c56a <__ssvfiscanf_r+0x172>
 800c658:	4b0e      	ldr	r3, [pc, #56]	; (800c694 <__ssvfiscanf_r+0x29c>)
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	f43f aefc 	beq.w	800c458 <__ssvfiscanf_r+0x60>
 800c660:	466b      	mov	r3, sp
 800c662:	4622      	mov	r2, r4
 800c664:	a941      	add	r1, sp, #260	; 0x104
 800c666:	4630      	mov	r0, r6
 800c668:	f3af 8000 	nop.w
 800c66c:	e77d      	b.n	800c56a <__ssvfiscanf_r+0x172>
 800c66e:	89a3      	ldrh	r3, [r4, #12]
 800c670:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c674:	bf18      	it	ne
 800c676:	f04f 30ff 	movne.w	r0, #4294967295
 800c67a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800c67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c682:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c684:	e7f9      	b.n	800c67a <__ssvfiscanf_r+0x282>
 800c686:	bf00      	nop
 800c688:	0800c345 	.word	0x0800c345
 800c68c:	0800c3bf 	.word	0x0800c3bf
 800c690:	0800f1e4 	.word	0x0800f1e4
 800c694:	00000000 	.word	0x00000000

0800c698 <_scanf_chars>:
 800c698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c69c:	4615      	mov	r5, r2
 800c69e:	688a      	ldr	r2, [r1, #8]
 800c6a0:	4680      	mov	r8, r0
 800c6a2:	460c      	mov	r4, r1
 800c6a4:	b932      	cbnz	r2, 800c6b4 <_scanf_chars+0x1c>
 800c6a6:	698a      	ldr	r2, [r1, #24]
 800c6a8:	2a00      	cmp	r2, #0
 800c6aa:	bf14      	ite	ne
 800c6ac:	f04f 32ff 	movne.w	r2, #4294967295
 800c6b0:	2201      	moveq	r2, #1
 800c6b2:	608a      	str	r2, [r1, #8]
 800c6b4:	2600      	movs	r6, #0
 800c6b6:	6822      	ldr	r2, [r4, #0]
 800c6b8:	06d1      	lsls	r1, r2, #27
 800c6ba:	bf5f      	itttt	pl
 800c6bc:	681a      	ldrpl	r2, [r3, #0]
 800c6be:	1d11      	addpl	r1, r2, #4
 800c6c0:	6019      	strpl	r1, [r3, #0]
 800c6c2:	6817      	ldrpl	r7, [r2, #0]
 800c6c4:	69a3      	ldr	r3, [r4, #24]
 800c6c6:	b1db      	cbz	r3, 800c700 <_scanf_chars+0x68>
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	d107      	bne.n	800c6dc <_scanf_chars+0x44>
 800c6cc:	682b      	ldr	r3, [r5, #0]
 800c6ce:	6962      	ldr	r2, [r4, #20]
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	5cd3      	ldrb	r3, [r2, r3]
 800c6d4:	b9a3      	cbnz	r3, 800c700 <_scanf_chars+0x68>
 800c6d6:	2e00      	cmp	r6, #0
 800c6d8:	d131      	bne.n	800c73e <_scanf_chars+0xa6>
 800c6da:	e006      	b.n	800c6ea <_scanf_chars+0x52>
 800c6dc:	2b02      	cmp	r3, #2
 800c6de:	d007      	beq.n	800c6f0 <_scanf_chars+0x58>
 800c6e0:	2e00      	cmp	r6, #0
 800c6e2:	d12c      	bne.n	800c73e <_scanf_chars+0xa6>
 800c6e4:	69a3      	ldr	r3, [r4, #24]
 800c6e6:	2b01      	cmp	r3, #1
 800c6e8:	d129      	bne.n	800c73e <_scanf_chars+0xa6>
 800c6ea:	2001      	movs	r0, #1
 800c6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6f0:	f7ff f9a6 	bl	800ba40 <__locale_ctype_ptr>
 800c6f4:	682b      	ldr	r3, [r5, #0]
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	4418      	add	r0, r3
 800c6fa:	7843      	ldrb	r3, [r0, #1]
 800c6fc:	071b      	lsls	r3, r3, #28
 800c6fe:	d4ef      	bmi.n	800c6e0 <_scanf_chars+0x48>
 800c700:	6823      	ldr	r3, [r4, #0]
 800c702:	3601      	adds	r6, #1
 800c704:	06da      	lsls	r2, r3, #27
 800c706:	bf5e      	ittt	pl
 800c708:	682b      	ldrpl	r3, [r5, #0]
 800c70a:	781b      	ldrbpl	r3, [r3, #0]
 800c70c:	703b      	strbpl	r3, [r7, #0]
 800c70e:	682a      	ldr	r2, [r5, #0]
 800c710:	686b      	ldr	r3, [r5, #4]
 800c712:	f102 0201 	add.w	r2, r2, #1
 800c716:	602a      	str	r2, [r5, #0]
 800c718:	68a2      	ldr	r2, [r4, #8]
 800c71a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c71e:	f102 32ff 	add.w	r2, r2, #4294967295
 800c722:	606b      	str	r3, [r5, #4]
 800c724:	bf58      	it	pl
 800c726:	3701      	addpl	r7, #1
 800c728:	60a2      	str	r2, [r4, #8]
 800c72a:	b142      	cbz	r2, 800c73e <_scanf_chars+0xa6>
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	dcc9      	bgt.n	800c6c4 <_scanf_chars+0x2c>
 800c730:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c734:	4629      	mov	r1, r5
 800c736:	4640      	mov	r0, r8
 800c738:	4798      	blx	r3
 800c73a:	2800      	cmp	r0, #0
 800c73c:	d0c2      	beq.n	800c6c4 <_scanf_chars+0x2c>
 800c73e:	6823      	ldr	r3, [r4, #0]
 800c740:	f013 0310 	ands.w	r3, r3, #16
 800c744:	d105      	bne.n	800c752 <_scanf_chars+0xba>
 800c746:	68e2      	ldr	r2, [r4, #12]
 800c748:	3201      	adds	r2, #1
 800c74a:	60e2      	str	r2, [r4, #12]
 800c74c:	69a2      	ldr	r2, [r4, #24]
 800c74e:	b102      	cbz	r2, 800c752 <_scanf_chars+0xba>
 800c750:	703b      	strb	r3, [r7, #0]
 800c752:	6923      	ldr	r3, [r4, #16]
 800c754:	2000      	movs	r0, #0
 800c756:	441e      	add	r6, r3
 800c758:	6126      	str	r6, [r4, #16]
 800c75a:	e7c7      	b.n	800c6ec <_scanf_chars+0x54>

0800c75c <_scanf_i>:
 800c75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c760:	460c      	mov	r4, r1
 800c762:	469a      	mov	sl, r3
 800c764:	4b74      	ldr	r3, [pc, #464]	; (800c938 <_scanf_i+0x1dc>)
 800c766:	b087      	sub	sp, #28
 800c768:	4683      	mov	fp, r0
 800c76a:	4616      	mov	r6, r2
 800c76c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c770:	ab03      	add	r3, sp, #12
 800c772:	68a7      	ldr	r7, [r4, #8]
 800c774:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c778:	4b70      	ldr	r3, [pc, #448]	; (800c93c <_scanf_i+0x1e0>)
 800c77a:	69a1      	ldr	r1, [r4, #24]
 800c77c:	4a70      	ldr	r2, [pc, #448]	; (800c940 <_scanf_i+0x1e4>)
 800c77e:	f104 091c 	add.w	r9, r4, #28
 800c782:	2903      	cmp	r1, #3
 800c784:	bf08      	it	eq
 800c786:	461a      	moveq	r2, r3
 800c788:	1e7b      	subs	r3, r7, #1
 800c78a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800c78e:	bf84      	itt	hi
 800c790:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c794:	60a3      	strhi	r3, [r4, #8]
 800c796:	6823      	ldr	r3, [r4, #0]
 800c798:	bf88      	it	hi
 800c79a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c79e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c7a2:	6023      	str	r3, [r4, #0]
 800c7a4:	bf98      	it	ls
 800c7a6:	2700      	movls	r7, #0
 800c7a8:	464b      	mov	r3, r9
 800c7aa:	f04f 0800 	mov.w	r8, #0
 800c7ae:	9200      	str	r2, [sp, #0]
 800c7b0:	bf88      	it	hi
 800c7b2:	197f      	addhi	r7, r7, r5
 800c7b4:	6831      	ldr	r1, [r6, #0]
 800c7b6:	9301      	str	r3, [sp, #4]
 800c7b8:	ab03      	add	r3, sp, #12
 800c7ba:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c7be:	2202      	movs	r2, #2
 800c7c0:	7809      	ldrb	r1, [r1, #0]
 800c7c2:	f000 f9ef 	bl	800cba4 <memchr>
 800c7c6:	9b01      	ldr	r3, [sp, #4]
 800c7c8:	b330      	cbz	r0, 800c818 <_scanf_i+0xbc>
 800c7ca:	f1b8 0f01 	cmp.w	r8, #1
 800c7ce:	d15a      	bne.n	800c886 <_scanf_i+0x12a>
 800c7d0:	6862      	ldr	r2, [r4, #4]
 800c7d2:	b92a      	cbnz	r2, 800c7e0 <_scanf_i+0x84>
 800c7d4:	2108      	movs	r1, #8
 800c7d6:	6822      	ldr	r2, [r4, #0]
 800c7d8:	6061      	str	r1, [r4, #4]
 800c7da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c7de:	6022      	str	r2, [r4, #0]
 800c7e0:	6822      	ldr	r2, [r4, #0]
 800c7e2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c7e6:	6022      	str	r2, [r4, #0]
 800c7e8:	68a2      	ldr	r2, [r4, #8]
 800c7ea:	1e51      	subs	r1, r2, #1
 800c7ec:	60a1      	str	r1, [r4, #8]
 800c7ee:	b19a      	cbz	r2, 800c818 <_scanf_i+0xbc>
 800c7f0:	6832      	ldr	r2, [r6, #0]
 800c7f2:	1c5d      	adds	r5, r3, #1
 800c7f4:	1c51      	adds	r1, r2, #1
 800c7f6:	6031      	str	r1, [r6, #0]
 800c7f8:	7812      	ldrb	r2, [r2, #0]
 800c7fa:	701a      	strb	r2, [r3, #0]
 800c7fc:	6873      	ldr	r3, [r6, #4]
 800c7fe:	3b01      	subs	r3, #1
 800c800:	2b00      	cmp	r3, #0
 800c802:	6073      	str	r3, [r6, #4]
 800c804:	dc07      	bgt.n	800c816 <_scanf_i+0xba>
 800c806:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c80a:	4631      	mov	r1, r6
 800c80c:	4658      	mov	r0, fp
 800c80e:	4798      	blx	r3
 800c810:	2800      	cmp	r0, #0
 800c812:	f040 8087 	bne.w	800c924 <_scanf_i+0x1c8>
 800c816:	462b      	mov	r3, r5
 800c818:	f108 0801 	add.w	r8, r8, #1
 800c81c:	f1b8 0f03 	cmp.w	r8, #3
 800c820:	d1c8      	bne.n	800c7b4 <_scanf_i+0x58>
 800c822:	6862      	ldr	r2, [r4, #4]
 800c824:	b90a      	cbnz	r2, 800c82a <_scanf_i+0xce>
 800c826:	220a      	movs	r2, #10
 800c828:	6062      	str	r2, [r4, #4]
 800c82a:	6862      	ldr	r2, [r4, #4]
 800c82c:	4945      	ldr	r1, [pc, #276]	; (800c944 <_scanf_i+0x1e8>)
 800c82e:	6960      	ldr	r0, [r4, #20]
 800c830:	1a89      	subs	r1, r1, r2
 800c832:	9301      	str	r3, [sp, #4]
 800c834:	f000 f898 	bl	800c968 <__sccl>
 800c838:	9b01      	ldr	r3, [sp, #4]
 800c83a:	f04f 0800 	mov.w	r8, #0
 800c83e:	461d      	mov	r5, r3
 800c840:	68a3      	ldr	r3, [r4, #8]
 800c842:	6822      	ldr	r2, [r4, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d03b      	beq.n	800c8c0 <_scanf_i+0x164>
 800c848:	6831      	ldr	r1, [r6, #0]
 800c84a:	6960      	ldr	r0, [r4, #20]
 800c84c:	f891 c000 	ldrb.w	ip, [r1]
 800c850:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c854:	2800      	cmp	r0, #0
 800c856:	d033      	beq.n	800c8c0 <_scanf_i+0x164>
 800c858:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c85c:	d121      	bne.n	800c8a2 <_scanf_i+0x146>
 800c85e:	0510      	lsls	r0, r2, #20
 800c860:	d51f      	bpl.n	800c8a2 <_scanf_i+0x146>
 800c862:	f108 0801 	add.w	r8, r8, #1
 800c866:	b117      	cbz	r7, 800c86e <_scanf_i+0x112>
 800c868:	3301      	adds	r3, #1
 800c86a:	3f01      	subs	r7, #1
 800c86c:	60a3      	str	r3, [r4, #8]
 800c86e:	6873      	ldr	r3, [r6, #4]
 800c870:	3b01      	subs	r3, #1
 800c872:	2b00      	cmp	r3, #0
 800c874:	6073      	str	r3, [r6, #4]
 800c876:	dd1c      	ble.n	800c8b2 <_scanf_i+0x156>
 800c878:	6833      	ldr	r3, [r6, #0]
 800c87a:	3301      	adds	r3, #1
 800c87c:	6033      	str	r3, [r6, #0]
 800c87e:	68a3      	ldr	r3, [r4, #8]
 800c880:	3b01      	subs	r3, #1
 800c882:	60a3      	str	r3, [r4, #8]
 800c884:	e7dc      	b.n	800c840 <_scanf_i+0xe4>
 800c886:	f1b8 0f02 	cmp.w	r8, #2
 800c88a:	d1ad      	bne.n	800c7e8 <_scanf_i+0x8c>
 800c88c:	6822      	ldr	r2, [r4, #0]
 800c88e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c892:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c896:	d1bf      	bne.n	800c818 <_scanf_i+0xbc>
 800c898:	2110      	movs	r1, #16
 800c89a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c89e:	6061      	str	r1, [r4, #4]
 800c8a0:	e7a1      	b.n	800c7e6 <_scanf_i+0x8a>
 800c8a2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c8a6:	6022      	str	r2, [r4, #0]
 800c8a8:	780b      	ldrb	r3, [r1, #0]
 800c8aa:	3501      	adds	r5, #1
 800c8ac:	f805 3c01 	strb.w	r3, [r5, #-1]
 800c8b0:	e7dd      	b.n	800c86e <_scanf_i+0x112>
 800c8b2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c8b6:	4631      	mov	r1, r6
 800c8b8:	4658      	mov	r0, fp
 800c8ba:	4798      	blx	r3
 800c8bc:	2800      	cmp	r0, #0
 800c8be:	d0de      	beq.n	800c87e <_scanf_i+0x122>
 800c8c0:	6823      	ldr	r3, [r4, #0]
 800c8c2:	05d9      	lsls	r1, r3, #23
 800c8c4:	d50c      	bpl.n	800c8e0 <_scanf_i+0x184>
 800c8c6:	454d      	cmp	r5, r9
 800c8c8:	d908      	bls.n	800c8dc <_scanf_i+0x180>
 800c8ca:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c8ce:	1e6f      	subs	r7, r5, #1
 800c8d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c8d4:	4632      	mov	r2, r6
 800c8d6:	4658      	mov	r0, fp
 800c8d8:	4798      	blx	r3
 800c8da:	463d      	mov	r5, r7
 800c8dc:	454d      	cmp	r5, r9
 800c8de:	d029      	beq.n	800c934 <_scanf_i+0x1d8>
 800c8e0:	6822      	ldr	r2, [r4, #0]
 800c8e2:	f012 0210 	ands.w	r2, r2, #16
 800c8e6:	d113      	bne.n	800c910 <_scanf_i+0x1b4>
 800c8e8:	702a      	strb	r2, [r5, #0]
 800c8ea:	6863      	ldr	r3, [r4, #4]
 800c8ec:	4649      	mov	r1, r9
 800c8ee:	4658      	mov	r0, fp
 800c8f0:	9e00      	ldr	r6, [sp, #0]
 800c8f2:	47b0      	blx	r6
 800c8f4:	f8da 3000 	ldr.w	r3, [sl]
 800c8f8:	6821      	ldr	r1, [r4, #0]
 800c8fa:	1d1a      	adds	r2, r3, #4
 800c8fc:	f8ca 2000 	str.w	r2, [sl]
 800c900:	f011 0f20 	tst.w	r1, #32
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	d010      	beq.n	800c92a <_scanf_i+0x1ce>
 800c908:	6018      	str	r0, [r3, #0]
 800c90a:	68e3      	ldr	r3, [r4, #12]
 800c90c:	3301      	adds	r3, #1
 800c90e:	60e3      	str	r3, [r4, #12]
 800c910:	2000      	movs	r0, #0
 800c912:	eba5 0509 	sub.w	r5, r5, r9
 800c916:	44a8      	add	r8, r5
 800c918:	6925      	ldr	r5, [r4, #16]
 800c91a:	4445      	add	r5, r8
 800c91c:	6125      	str	r5, [r4, #16]
 800c91e:	b007      	add	sp, #28
 800c920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c924:	f04f 0800 	mov.w	r8, #0
 800c928:	e7ca      	b.n	800c8c0 <_scanf_i+0x164>
 800c92a:	07ca      	lsls	r2, r1, #31
 800c92c:	bf4c      	ite	mi
 800c92e:	8018      	strhmi	r0, [r3, #0]
 800c930:	6018      	strpl	r0, [r3, #0]
 800c932:	e7ea      	b.n	800c90a <_scanf_i+0x1ae>
 800c934:	2001      	movs	r0, #1
 800c936:	e7f2      	b.n	800c91e <_scanf_i+0x1c2>
 800c938:	0800e378 	.word	0x0800e378
 800c93c:	0800b31d 	.word	0x0800b31d
 800c940:	0800cae5 	.word	0x0800cae5
 800c944:	0800f1f8 	.word	0x0800f1f8

0800c948 <_sbrk_r>:
 800c948:	b538      	push	{r3, r4, r5, lr}
 800c94a:	2300      	movs	r3, #0
 800c94c:	4c05      	ldr	r4, [pc, #20]	; (800c964 <_sbrk_r+0x1c>)
 800c94e:	4605      	mov	r5, r0
 800c950:	4608      	mov	r0, r1
 800c952:	6023      	str	r3, [r4, #0]
 800c954:	f7f6 f9d4 	bl	8002d00 <_sbrk>
 800c958:	1c43      	adds	r3, r0, #1
 800c95a:	d102      	bne.n	800c962 <_sbrk_r+0x1a>
 800c95c:	6823      	ldr	r3, [r4, #0]
 800c95e:	b103      	cbz	r3, 800c962 <_sbrk_r+0x1a>
 800c960:	602b      	str	r3, [r5, #0]
 800c962:	bd38      	pop	{r3, r4, r5, pc}
 800c964:	20001c2c 	.word	0x20001c2c

0800c968 <__sccl>:
 800c968:	b570      	push	{r4, r5, r6, lr}
 800c96a:	780b      	ldrb	r3, [r1, #0]
 800c96c:	1e44      	subs	r4, r0, #1
 800c96e:	2b5e      	cmp	r3, #94	; 0x5e
 800c970:	bf13      	iteet	ne
 800c972:	1c4a      	addne	r2, r1, #1
 800c974:	1c8a      	addeq	r2, r1, #2
 800c976:	784b      	ldrbeq	r3, [r1, #1]
 800c978:	2100      	movne	r1, #0
 800c97a:	bf08      	it	eq
 800c97c:	2101      	moveq	r1, #1
 800c97e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800c982:	f804 1f01 	strb.w	r1, [r4, #1]!
 800c986:	42ac      	cmp	r4, r5
 800c988:	d1fb      	bne.n	800c982 <__sccl+0x1a>
 800c98a:	b913      	cbnz	r3, 800c992 <__sccl+0x2a>
 800c98c:	3a01      	subs	r2, #1
 800c98e:	4610      	mov	r0, r2
 800c990:	bd70      	pop	{r4, r5, r6, pc}
 800c992:	f081 0401 	eor.w	r4, r1, #1
 800c996:	54c4      	strb	r4, [r0, r3]
 800c998:	1c51      	adds	r1, r2, #1
 800c99a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800c99e:	1e4e      	subs	r6, r1, #1
 800c9a0:	2d2d      	cmp	r5, #45	; 0x2d
 800c9a2:	460a      	mov	r2, r1
 800c9a4:	d006      	beq.n	800c9b4 <__sccl+0x4c>
 800c9a6:	2d5d      	cmp	r5, #93	; 0x5d
 800c9a8:	d0f1      	beq.n	800c98e <__sccl+0x26>
 800c9aa:	b90d      	cbnz	r5, 800c9b0 <__sccl+0x48>
 800c9ac:	4632      	mov	r2, r6
 800c9ae:	e7ee      	b.n	800c98e <__sccl+0x26>
 800c9b0:	462b      	mov	r3, r5
 800c9b2:	e7f0      	b.n	800c996 <__sccl+0x2e>
 800c9b4:	780e      	ldrb	r6, [r1, #0]
 800c9b6:	2e5d      	cmp	r6, #93	; 0x5d
 800c9b8:	d0fa      	beq.n	800c9b0 <__sccl+0x48>
 800c9ba:	42b3      	cmp	r3, r6
 800c9bc:	dcf8      	bgt.n	800c9b0 <__sccl+0x48>
 800c9be:	3301      	adds	r3, #1
 800c9c0:	429e      	cmp	r6, r3
 800c9c2:	54c4      	strb	r4, [r0, r3]
 800c9c4:	dcfb      	bgt.n	800c9be <__sccl+0x56>
 800c9c6:	3102      	adds	r1, #2
 800c9c8:	e7e7      	b.n	800c99a <__sccl+0x32>

0800c9ca <strncmp>:
 800c9ca:	b510      	push	{r4, lr}
 800c9cc:	b16a      	cbz	r2, 800c9ea <strncmp+0x20>
 800c9ce:	3901      	subs	r1, #1
 800c9d0:	1884      	adds	r4, r0, r2
 800c9d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c9d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d103      	bne.n	800c9e6 <strncmp+0x1c>
 800c9de:	42a0      	cmp	r0, r4
 800c9e0:	d001      	beq.n	800c9e6 <strncmp+0x1c>
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d1f5      	bne.n	800c9d2 <strncmp+0x8>
 800c9e6:	1a98      	subs	r0, r3, r2
 800c9e8:	bd10      	pop	{r4, pc}
 800c9ea:	4610      	mov	r0, r2
 800c9ec:	e7fc      	b.n	800c9e8 <strncmp+0x1e>

0800c9ee <_strtoul_l.isra.0>:
 800c9ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9f2:	4680      	mov	r8, r0
 800c9f4:	4689      	mov	r9, r1
 800c9f6:	4692      	mov	sl, r2
 800c9f8:	461e      	mov	r6, r3
 800c9fa:	460f      	mov	r7, r1
 800c9fc:	463d      	mov	r5, r7
 800c9fe:	9808      	ldr	r0, [sp, #32]
 800ca00:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca04:	f7ff f818 	bl	800ba38 <__locale_ctype_ptr_l>
 800ca08:	4420      	add	r0, r4
 800ca0a:	7843      	ldrb	r3, [r0, #1]
 800ca0c:	f013 0308 	ands.w	r3, r3, #8
 800ca10:	d130      	bne.n	800ca74 <_strtoul_l.isra.0+0x86>
 800ca12:	2c2d      	cmp	r4, #45	; 0x2d
 800ca14:	d130      	bne.n	800ca78 <_strtoul_l.isra.0+0x8a>
 800ca16:	2101      	movs	r1, #1
 800ca18:	787c      	ldrb	r4, [r7, #1]
 800ca1a:	1cbd      	adds	r5, r7, #2
 800ca1c:	2e00      	cmp	r6, #0
 800ca1e:	d05c      	beq.n	800cada <_strtoul_l.isra.0+0xec>
 800ca20:	2e10      	cmp	r6, #16
 800ca22:	d109      	bne.n	800ca38 <_strtoul_l.isra.0+0x4a>
 800ca24:	2c30      	cmp	r4, #48	; 0x30
 800ca26:	d107      	bne.n	800ca38 <_strtoul_l.isra.0+0x4a>
 800ca28:	782b      	ldrb	r3, [r5, #0]
 800ca2a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ca2e:	2b58      	cmp	r3, #88	; 0x58
 800ca30:	d14e      	bne.n	800cad0 <_strtoul_l.isra.0+0xe2>
 800ca32:	2610      	movs	r6, #16
 800ca34:	786c      	ldrb	r4, [r5, #1]
 800ca36:	3502      	adds	r5, #2
 800ca38:	f04f 32ff 	mov.w	r2, #4294967295
 800ca3c:	fbb2 f2f6 	udiv	r2, r2, r6
 800ca40:	2300      	movs	r3, #0
 800ca42:	fb06 fc02 	mul.w	ip, r6, r2
 800ca46:	4618      	mov	r0, r3
 800ca48:	ea6f 0c0c 	mvn.w	ip, ip
 800ca4c:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ca50:	2f09      	cmp	r7, #9
 800ca52:	d817      	bhi.n	800ca84 <_strtoul_l.isra.0+0x96>
 800ca54:	463c      	mov	r4, r7
 800ca56:	42a6      	cmp	r6, r4
 800ca58:	dd23      	ble.n	800caa2 <_strtoul_l.isra.0+0xb4>
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	db1e      	blt.n	800ca9c <_strtoul_l.isra.0+0xae>
 800ca5e:	4282      	cmp	r2, r0
 800ca60:	d31c      	bcc.n	800ca9c <_strtoul_l.isra.0+0xae>
 800ca62:	d101      	bne.n	800ca68 <_strtoul_l.isra.0+0x7a>
 800ca64:	45a4      	cmp	ip, r4
 800ca66:	db19      	blt.n	800ca9c <_strtoul_l.isra.0+0xae>
 800ca68:	2301      	movs	r3, #1
 800ca6a:	fb00 4006 	mla	r0, r0, r6, r4
 800ca6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca72:	e7eb      	b.n	800ca4c <_strtoul_l.isra.0+0x5e>
 800ca74:	462f      	mov	r7, r5
 800ca76:	e7c1      	b.n	800c9fc <_strtoul_l.isra.0+0xe>
 800ca78:	2c2b      	cmp	r4, #43	; 0x2b
 800ca7a:	bf04      	itt	eq
 800ca7c:	1cbd      	addeq	r5, r7, #2
 800ca7e:	787c      	ldrbeq	r4, [r7, #1]
 800ca80:	4619      	mov	r1, r3
 800ca82:	e7cb      	b.n	800ca1c <_strtoul_l.isra.0+0x2e>
 800ca84:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ca88:	2f19      	cmp	r7, #25
 800ca8a:	d801      	bhi.n	800ca90 <_strtoul_l.isra.0+0xa2>
 800ca8c:	3c37      	subs	r4, #55	; 0x37
 800ca8e:	e7e2      	b.n	800ca56 <_strtoul_l.isra.0+0x68>
 800ca90:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ca94:	2f19      	cmp	r7, #25
 800ca96:	d804      	bhi.n	800caa2 <_strtoul_l.isra.0+0xb4>
 800ca98:	3c57      	subs	r4, #87	; 0x57
 800ca9a:	e7dc      	b.n	800ca56 <_strtoul_l.isra.0+0x68>
 800ca9c:	f04f 33ff 	mov.w	r3, #4294967295
 800caa0:	e7e5      	b.n	800ca6e <_strtoul_l.isra.0+0x80>
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	da09      	bge.n	800caba <_strtoul_l.isra.0+0xcc>
 800caa6:	2322      	movs	r3, #34	; 0x22
 800caa8:	f04f 30ff 	mov.w	r0, #4294967295
 800caac:	f8c8 3000 	str.w	r3, [r8]
 800cab0:	f1ba 0f00 	cmp.w	sl, #0
 800cab4:	d107      	bne.n	800cac6 <_strtoul_l.isra.0+0xd8>
 800cab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caba:	b101      	cbz	r1, 800cabe <_strtoul_l.isra.0+0xd0>
 800cabc:	4240      	negs	r0, r0
 800cabe:	f1ba 0f00 	cmp.w	sl, #0
 800cac2:	d0f8      	beq.n	800cab6 <_strtoul_l.isra.0+0xc8>
 800cac4:	b10b      	cbz	r3, 800caca <_strtoul_l.isra.0+0xdc>
 800cac6:	f105 39ff 	add.w	r9, r5, #4294967295
 800caca:	f8ca 9000 	str.w	r9, [sl]
 800cace:	e7f2      	b.n	800cab6 <_strtoul_l.isra.0+0xc8>
 800cad0:	2430      	movs	r4, #48	; 0x30
 800cad2:	2e00      	cmp	r6, #0
 800cad4:	d1b0      	bne.n	800ca38 <_strtoul_l.isra.0+0x4a>
 800cad6:	2608      	movs	r6, #8
 800cad8:	e7ae      	b.n	800ca38 <_strtoul_l.isra.0+0x4a>
 800cada:	2c30      	cmp	r4, #48	; 0x30
 800cadc:	d0a4      	beq.n	800ca28 <_strtoul_l.isra.0+0x3a>
 800cade:	260a      	movs	r6, #10
 800cae0:	e7aa      	b.n	800ca38 <_strtoul_l.isra.0+0x4a>
	...

0800cae4 <_strtoul_r>:
 800cae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cae6:	4c06      	ldr	r4, [pc, #24]	; (800cb00 <_strtoul_r+0x1c>)
 800cae8:	4d06      	ldr	r5, [pc, #24]	; (800cb04 <_strtoul_r+0x20>)
 800caea:	6824      	ldr	r4, [r4, #0]
 800caec:	6a24      	ldr	r4, [r4, #32]
 800caee:	2c00      	cmp	r4, #0
 800caf0:	bf08      	it	eq
 800caf2:	462c      	moveq	r4, r5
 800caf4:	9400      	str	r4, [sp, #0]
 800caf6:	f7ff ff7a 	bl	800c9ee <_strtoul_l.isra.0>
 800cafa:	b003      	add	sp, #12
 800cafc:	bd30      	pop	{r4, r5, pc}
 800cafe:	bf00      	nop
 800cb00:	200001b4 	.word	0x200001b4
 800cb04:	20000218 	.word	0x20000218

0800cb08 <__submore>:
 800cb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb0c:	460c      	mov	r4, r1
 800cb0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cb10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb14:	4299      	cmp	r1, r3
 800cb16:	d11b      	bne.n	800cb50 <__submore+0x48>
 800cb18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cb1c:	f7ff fbb8 	bl	800c290 <_malloc_r>
 800cb20:	b918      	cbnz	r0, 800cb2a <__submore+0x22>
 800cb22:	f04f 30ff 	mov.w	r0, #4294967295
 800cb26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb2e:	63a3      	str	r3, [r4, #56]	; 0x38
 800cb30:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cb34:	6360      	str	r0, [r4, #52]	; 0x34
 800cb36:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cb3a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cb3e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cb42:	7043      	strb	r3, [r0, #1]
 800cb44:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cb48:	7003      	strb	r3, [r0, #0]
 800cb4a:	6020      	str	r0, [r4, #0]
 800cb4c:	2000      	movs	r0, #0
 800cb4e:	e7ea      	b.n	800cb26 <__submore+0x1e>
 800cb50:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cb52:	0077      	lsls	r7, r6, #1
 800cb54:	463a      	mov	r2, r7
 800cb56:	f000 f881 	bl	800cc5c <_realloc_r>
 800cb5a:	4605      	mov	r5, r0
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	d0e0      	beq.n	800cb22 <__submore+0x1a>
 800cb60:	eb00 0806 	add.w	r8, r0, r6
 800cb64:	4601      	mov	r1, r0
 800cb66:	4632      	mov	r2, r6
 800cb68:	4640      	mov	r0, r8
 800cb6a:	f7fd fcbe 	bl	800a4ea <memcpy>
 800cb6e:	f8c4 8000 	str.w	r8, [r4]
 800cb72:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cb76:	e7e9      	b.n	800cb4c <__submore+0x44>

0800cb78 <__ascii_wctomb>:
 800cb78:	b149      	cbz	r1, 800cb8e <__ascii_wctomb+0x16>
 800cb7a:	2aff      	cmp	r2, #255	; 0xff
 800cb7c:	bf8b      	itete	hi
 800cb7e:	238a      	movhi	r3, #138	; 0x8a
 800cb80:	700a      	strbls	r2, [r1, #0]
 800cb82:	6003      	strhi	r3, [r0, #0]
 800cb84:	2001      	movls	r0, #1
 800cb86:	bf88      	it	hi
 800cb88:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb8c:	4770      	bx	lr
 800cb8e:	4608      	mov	r0, r1
 800cb90:	4770      	bx	lr
	...

0800cb94 <malloc>:
 800cb94:	4b02      	ldr	r3, [pc, #8]	; (800cba0 <malloc+0xc>)
 800cb96:	4601      	mov	r1, r0
 800cb98:	6818      	ldr	r0, [r3, #0]
 800cb9a:	f7ff bb79 	b.w	800c290 <_malloc_r>
 800cb9e:	bf00      	nop
 800cba0:	200001b4 	.word	0x200001b4

0800cba4 <memchr>:
 800cba4:	b510      	push	{r4, lr}
 800cba6:	b2c9      	uxtb	r1, r1
 800cba8:	4402      	add	r2, r0
 800cbaa:	4290      	cmp	r0, r2
 800cbac:	4603      	mov	r3, r0
 800cbae:	d101      	bne.n	800cbb4 <memchr+0x10>
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	e003      	b.n	800cbbc <memchr+0x18>
 800cbb4:	781c      	ldrb	r4, [r3, #0]
 800cbb6:	3001      	adds	r0, #1
 800cbb8:	428c      	cmp	r4, r1
 800cbba:	d1f6      	bne.n	800cbaa <memchr+0x6>
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	bd10      	pop	{r4, pc}

0800cbc0 <__malloc_lock>:
 800cbc0:	4770      	bx	lr

0800cbc2 <__malloc_unlock>:
 800cbc2:	4770      	bx	lr

0800cbc4 <_free_r>:
 800cbc4:	b538      	push	{r3, r4, r5, lr}
 800cbc6:	4605      	mov	r5, r0
 800cbc8:	2900      	cmp	r1, #0
 800cbca:	d043      	beq.n	800cc54 <_free_r+0x90>
 800cbcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbd0:	1f0c      	subs	r4, r1, #4
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	bfb8      	it	lt
 800cbd6:	18e4      	addlt	r4, r4, r3
 800cbd8:	f7ff fff2 	bl	800cbc0 <__malloc_lock>
 800cbdc:	4a1e      	ldr	r2, [pc, #120]	; (800cc58 <_free_r+0x94>)
 800cbde:	6813      	ldr	r3, [r2, #0]
 800cbe0:	4610      	mov	r0, r2
 800cbe2:	b933      	cbnz	r3, 800cbf2 <_free_r+0x2e>
 800cbe4:	6063      	str	r3, [r4, #4]
 800cbe6:	6014      	str	r4, [r2, #0]
 800cbe8:	4628      	mov	r0, r5
 800cbea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbee:	f7ff bfe8 	b.w	800cbc2 <__malloc_unlock>
 800cbf2:	42a3      	cmp	r3, r4
 800cbf4:	d90b      	bls.n	800cc0e <_free_r+0x4a>
 800cbf6:	6821      	ldr	r1, [r4, #0]
 800cbf8:	1862      	adds	r2, r4, r1
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	bf01      	itttt	eq
 800cbfe:	681a      	ldreq	r2, [r3, #0]
 800cc00:	685b      	ldreq	r3, [r3, #4]
 800cc02:	1852      	addeq	r2, r2, r1
 800cc04:	6022      	streq	r2, [r4, #0]
 800cc06:	6063      	str	r3, [r4, #4]
 800cc08:	6004      	str	r4, [r0, #0]
 800cc0a:	e7ed      	b.n	800cbe8 <_free_r+0x24>
 800cc0c:	4613      	mov	r3, r2
 800cc0e:	685a      	ldr	r2, [r3, #4]
 800cc10:	b10a      	cbz	r2, 800cc16 <_free_r+0x52>
 800cc12:	42a2      	cmp	r2, r4
 800cc14:	d9fa      	bls.n	800cc0c <_free_r+0x48>
 800cc16:	6819      	ldr	r1, [r3, #0]
 800cc18:	1858      	adds	r0, r3, r1
 800cc1a:	42a0      	cmp	r0, r4
 800cc1c:	d10b      	bne.n	800cc36 <_free_r+0x72>
 800cc1e:	6820      	ldr	r0, [r4, #0]
 800cc20:	4401      	add	r1, r0
 800cc22:	1858      	adds	r0, r3, r1
 800cc24:	4282      	cmp	r2, r0
 800cc26:	6019      	str	r1, [r3, #0]
 800cc28:	d1de      	bne.n	800cbe8 <_free_r+0x24>
 800cc2a:	6810      	ldr	r0, [r2, #0]
 800cc2c:	6852      	ldr	r2, [r2, #4]
 800cc2e:	4401      	add	r1, r0
 800cc30:	6019      	str	r1, [r3, #0]
 800cc32:	605a      	str	r2, [r3, #4]
 800cc34:	e7d8      	b.n	800cbe8 <_free_r+0x24>
 800cc36:	d902      	bls.n	800cc3e <_free_r+0x7a>
 800cc38:	230c      	movs	r3, #12
 800cc3a:	602b      	str	r3, [r5, #0]
 800cc3c:	e7d4      	b.n	800cbe8 <_free_r+0x24>
 800cc3e:	6820      	ldr	r0, [r4, #0]
 800cc40:	1821      	adds	r1, r4, r0
 800cc42:	428a      	cmp	r2, r1
 800cc44:	bf01      	itttt	eq
 800cc46:	6811      	ldreq	r1, [r2, #0]
 800cc48:	6852      	ldreq	r2, [r2, #4]
 800cc4a:	1809      	addeq	r1, r1, r0
 800cc4c:	6021      	streq	r1, [r4, #0]
 800cc4e:	6062      	str	r2, [r4, #4]
 800cc50:	605c      	str	r4, [r3, #4]
 800cc52:	e7c9      	b.n	800cbe8 <_free_r+0x24>
 800cc54:	bd38      	pop	{r3, r4, r5, pc}
 800cc56:	bf00      	nop
 800cc58:	200005e8 	.word	0x200005e8

0800cc5c <_realloc_r>:
 800cc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc5e:	4607      	mov	r7, r0
 800cc60:	4614      	mov	r4, r2
 800cc62:	460e      	mov	r6, r1
 800cc64:	b921      	cbnz	r1, 800cc70 <_realloc_r+0x14>
 800cc66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cc6a:	4611      	mov	r1, r2
 800cc6c:	f7ff bb10 	b.w	800c290 <_malloc_r>
 800cc70:	b922      	cbnz	r2, 800cc7c <_realloc_r+0x20>
 800cc72:	f7ff ffa7 	bl	800cbc4 <_free_r>
 800cc76:	4625      	mov	r5, r4
 800cc78:	4628      	mov	r0, r5
 800cc7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc7c:	f000 f814 	bl	800cca8 <_malloc_usable_size_r>
 800cc80:	42a0      	cmp	r0, r4
 800cc82:	d20f      	bcs.n	800cca4 <_realloc_r+0x48>
 800cc84:	4621      	mov	r1, r4
 800cc86:	4638      	mov	r0, r7
 800cc88:	f7ff fb02 	bl	800c290 <_malloc_r>
 800cc8c:	4605      	mov	r5, r0
 800cc8e:	2800      	cmp	r0, #0
 800cc90:	d0f2      	beq.n	800cc78 <_realloc_r+0x1c>
 800cc92:	4631      	mov	r1, r6
 800cc94:	4622      	mov	r2, r4
 800cc96:	f7fd fc28 	bl	800a4ea <memcpy>
 800cc9a:	4631      	mov	r1, r6
 800cc9c:	4638      	mov	r0, r7
 800cc9e:	f7ff ff91 	bl	800cbc4 <_free_r>
 800cca2:	e7e9      	b.n	800cc78 <_realloc_r+0x1c>
 800cca4:	4635      	mov	r5, r6
 800cca6:	e7e7      	b.n	800cc78 <_realloc_r+0x1c>

0800cca8 <_malloc_usable_size_r>:
 800cca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccac:	1f18      	subs	r0, r3, #4
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	bfbc      	itt	lt
 800ccb2:	580b      	ldrlt	r3, [r1, r0]
 800ccb4:	18c0      	addlt	r0, r0, r3
 800ccb6:	4770      	bx	lr

0800ccb8 <cos>:
 800ccb8:	b530      	push	{r4, r5, lr}
 800ccba:	4a18      	ldr	r2, [pc, #96]	; (800cd1c <cos+0x64>)
 800ccbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	b087      	sub	sp, #28
 800ccc4:	dc04      	bgt.n	800ccd0 <cos+0x18>
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	2300      	movs	r3, #0
 800ccca:	f000 fd59 	bl	800d780 <__kernel_cos>
 800ccce:	e006      	b.n	800ccde <cos+0x26>
 800ccd0:	4a13      	ldr	r2, [pc, #76]	; (800cd20 <cos+0x68>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	dd05      	ble.n	800cce2 <cos+0x2a>
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	460b      	mov	r3, r1
 800ccda:	f7f3 fa45 	bl	8000168 <__aeabi_dsub>
 800ccde:	b007      	add	sp, #28
 800cce0:	bd30      	pop	{r4, r5, pc}
 800cce2:	aa02      	add	r2, sp, #8
 800cce4:	f000 fa5c 	bl	800d1a0 <__ieee754_rem_pio2>
 800cce8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccec:	f000 0403 	and.w	r4, r0, #3
 800ccf0:	2c01      	cmp	r4, #1
 800ccf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccf6:	d008      	beq.n	800cd0a <cos+0x52>
 800ccf8:	2c02      	cmp	r4, #2
 800ccfa:	d00c      	beq.n	800cd16 <cos+0x5e>
 800ccfc:	2c00      	cmp	r4, #0
 800ccfe:	d0e4      	beq.n	800ccca <cos+0x12>
 800cd00:	2401      	movs	r4, #1
 800cd02:	9400      	str	r4, [sp, #0]
 800cd04:	f001 f944 	bl	800df90 <__kernel_sin>
 800cd08:	e7e9      	b.n	800ccde <cos+0x26>
 800cd0a:	9400      	str	r4, [sp, #0]
 800cd0c:	f001 f940 	bl	800df90 <__kernel_sin>
 800cd10:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800cd14:	e7e3      	b.n	800ccde <cos+0x26>
 800cd16:	f000 fd33 	bl	800d780 <__kernel_cos>
 800cd1a:	e7f9      	b.n	800cd10 <cos+0x58>
 800cd1c:	3fe921fb 	.word	0x3fe921fb
 800cd20:	7fefffff 	.word	0x7fefffff

0800cd24 <sin>:
 800cd24:	b530      	push	{r4, r5, lr}
 800cd26:	4a1a      	ldr	r2, [pc, #104]	; (800cd90 <sin+0x6c>)
 800cd28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	b087      	sub	sp, #28
 800cd30:	dc06      	bgt.n	800cd40 <sin+0x1c>
 800cd32:	2300      	movs	r3, #0
 800cd34:	2200      	movs	r2, #0
 800cd36:	9300      	str	r3, [sp, #0]
 800cd38:	2300      	movs	r3, #0
 800cd3a:	f001 f929 	bl	800df90 <__kernel_sin>
 800cd3e:	e006      	b.n	800cd4e <sin+0x2a>
 800cd40:	4a14      	ldr	r2, [pc, #80]	; (800cd94 <sin+0x70>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	dd05      	ble.n	800cd52 <sin+0x2e>
 800cd46:	4602      	mov	r2, r0
 800cd48:	460b      	mov	r3, r1
 800cd4a:	f7f3 fa0d 	bl	8000168 <__aeabi_dsub>
 800cd4e:	b007      	add	sp, #28
 800cd50:	bd30      	pop	{r4, r5, pc}
 800cd52:	aa02      	add	r2, sp, #8
 800cd54:	f000 fa24 	bl	800d1a0 <__ieee754_rem_pio2>
 800cd58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd5c:	f000 0403 	and.w	r4, r0, #3
 800cd60:	2c01      	cmp	r4, #1
 800cd62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd66:	d005      	beq.n	800cd74 <sin+0x50>
 800cd68:	2c02      	cmp	r4, #2
 800cd6a:	d006      	beq.n	800cd7a <sin+0x56>
 800cd6c:	b964      	cbnz	r4, 800cd88 <sin+0x64>
 800cd6e:	2401      	movs	r4, #1
 800cd70:	9400      	str	r4, [sp, #0]
 800cd72:	e7e2      	b.n	800cd3a <sin+0x16>
 800cd74:	f000 fd04 	bl	800d780 <__kernel_cos>
 800cd78:	e7e9      	b.n	800cd4e <sin+0x2a>
 800cd7a:	2401      	movs	r4, #1
 800cd7c:	9400      	str	r4, [sp, #0]
 800cd7e:	f001 f907 	bl	800df90 <__kernel_sin>
 800cd82:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800cd86:	e7e2      	b.n	800cd4e <sin+0x2a>
 800cd88:	f000 fcfa 	bl	800d780 <__kernel_cos>
 800cd8c:	e7f9      	b.n	800cd82 <sin+0x5e>
 800cd8e:	bf00      	nop
 800cd90:	3fe921fb 	.word	0x3fe921fb
 800cd94:	7fefffff 	.word	0x7fefffff

0800cd98 <fmod>:
 800cd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd9c:	b08b      	sub	sp, #44	; 0x2c
 800cd9e:	461f      	mov	r7, r3
 800cda0:	4604      	mov	r4, r0
 800cda2:	460d      	mov	r5, r1
 800cda4:	4616      	mov	r6, r2
 800cda6:	f000 f8f1 	bl	800cf8c <__ieee754_fmod>
 800cdaa:	4b27      	ldr	r3, [pc, #156]	; (800ce48 <fmod+0xb0>)
 800cdac:	4680      	mov	r8, r0
 800cdae:	f993 a000 	ldrsb.w	sl, [r3]
 800cdb2:	4689      	mov	r9, r1
 800cdb4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800cdb8:	d030      	beq.n	800ce1c <fmod+0x84>
 800cdba:	4632      	mov	r2, r6
 800cdbc:	463b      	mov	r3, r7
 800cdbe:	4630      	mov	r0, r6
 800cdc0:	4639      	mov	r1, r7
 800cdc2:	f7f3 fe23 	bl	8000a0c <__aeabi_dcmpun>
 800cdc6:	bb48      	cbnz	r0, 800ce1c <fmod+0x84>
 800cdc8:	4622      	mov	r2, r4
 800cdca:	462b      	mov	r3, r5
 800cdcc:	4620      	mov	r0, r4
 800cdce:	4629      	mov	r1, r5
 800cdd0:	f7f3 fe1c 	bl	8000a0c <__aeabi_dcmpun>
 800cdd4:	4683      	mov	fp, r0
 800cdd6:	bb08      	cbnz	r0, 800ce1c <fmod+0x84>
 800cdd8:	2200      	movs	r2, #0
 800cdda:	2300      	movs	r3, #0
 800cddc:	4630      	mov	r0, r6
 800cdde:	4639      	mov	r1, r7
 800cde0:	f7f3 fde2 	bl	80009a8 <__aeabi_dcmpeq>
 800cde4:	b1d0      	cbz	r0, 800ce1c <fmod+0x84>
 800cde6:	2301      	movs	r3, #1
 800cde8:	9300      	str	r3, [sp, #0]
 800cdea:	4b18      	ldr	r3, [pc, #96]	; (800ce4c <fmod+0xb4>)
 800cdec:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800cdf0:	9301      	str	r3, [sp, #4]
 800cdf2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800cdf6:	f8cd b020 	str.w	fp, [sp, #32]
 800cdfa:	f1ba 0f00 	cmp.w	sl, #0
 800cdfe:	d112      	bne.n	800ce26 <fmod+0x8e>
 800ce00:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ce04:	4668      	mov	r0, sp
 800ce06:	f001 fa03 	bl	800e210 <matherr>
 800ce0a:	b1b8      	cbz	r0, 800ce3c <fmod+0xa4>
 800ce0c:	9b08      	ldr	r3, [sp, #32]
 800ce0e:	b11b      	cbz	r3, 800ce18 <fmod+0x80>
 800ce10:	f7fd fb18 	bl	800a444 <__errno>
 800ce14:	9b08      	ldr	r3, [sp, #32]
 800ce16:	6003      	str	r3, [r0, #0]
 800ce18:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800ce1c:	4640      	mov	r0, r8
 800ce1e:	4649      	mov	r1, r9
 800ce20:	b00b      	add	sp, #44	; 0x2c
 800ce22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce26:	2200      	movs	r2, #0
 800ce28:	2300      	movs	r3, #0
 800ce2a:	4610      	mov	r0, r2
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	f7f3 fc7d 	bl	800072c <__aeabi_ddiv>
 800ce32:	f1ba 0f02 	cmp.w	sl, #2
 800ce36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ce3a:	d1e3      	bne.n	800ce04 <fmod+0x6c>
 800ce3c:	f7fd fb02 	bl	800a444 <__errno>
 800ce40:	2321      	movs	r3, #33	; 0x21
 800ce42:	6003      	str	r3, [r0, #0]
 800ce44:	e7e2      	b.n	800ce0c <fmod+0x74>
 800ce46:	bf00      	nop
 800ce48:	20000384 	.word	0x20000384
 800ce4c:	0800f364 	.word	0x0800f364

0800ce50 <sqrt>:
 800ce50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce54:	b08b      	sub	sp, #44	; 0x2c
 800ce56:	4604      	mov	r4, r0
 800ce58:	460d      	mov	r5, r1
 800ce5a:	f000 fb91 	bl	800d580 <__ieee754_sqrt>
 800ce5e:	4b24      	ldr	r3, [pc, #144]	; (800cef0 <sqrt+0xa0>)
 800ce60:	4680      	mov	r8, r0
 800ce62:	f993 a000 	ldrsb.w	sl, [r3]
 800ce66:	4689      	mov	r9, r1
 800ce68:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ce6c:	d02b      	beq.n	800cec6 <sqrt+0x76>
 800ce6e:	4622      	mov	r2, r4
 800ce70:	462b      	mov	r3, r5
 800ce72:	4620      	mov	r0, r4
 800ce74:	4629      	mov	r1, r5
 800ce76:	f7f3 fdc9 	bl	8000a0c <__aeabi_dcmpun>
 800ce7a:	4683      	mov	fp, r0
 800ce7c:	bb18      	cbnz	r0, 800cec6 <sqrt+0x76>
 800ce7e:	2600      	movs	r6, #0
 800ce80:	2700      	movs	r7, #0
 800ce82:	4632      	mov	r2, r6
 800ce84:	463b      	mov	r3, r7
 800ce86:	4620      	mov	r0, r4
 800ce88:	4629      	mov	r1, r5
 800ce8a:	f7f3 fd97 	bl	80009bc <__aeabi_dcmplt>
 800ce8e:	b1d0      	cbz	r0, 800cec6 <sqrt+0x76>
 800ce90:	2301      	movs	r3, #1
 800ce92:	9300      	str	r3, [sp, #0]
 800ce94:	4b17      	ldr	r3, [pc, #92]	; (800cef4 <sqrt+0xa4>)
 800ce96:	f8cd b020 	str.w	fp, [sp, #32]
 800ce9a:	9301      	str	r3, [sp, #4]
 800ce9c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800cea0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800cea4:	f1ba 0f00 	cmp.w	sl, #0
 800cea8:	d112      	bne.n	800ced0 <sqrt+0x80>
 800ceaa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ceae:	4668      	mov	r0, sp
 800ceb0:	f001 f9ae 	bl	800e210 <matherr>
 800ceb4:	b1b8      	cbz	r0, 800cee6 <sqrt+0x96>
 800ceb6:	9b08      	ldr	r3, [sp, #32]
 800ceb8:	b11b      	cbz	r3, 800cec2 <sqrt+0x72>
 800ceba:	f7fd fac3 	bl	800a444 <__errno>
 800cebe:	9b08      	ldr	r3, [sp, #32]
 800cec0:	6003      	str	r3, [r0, #0]
 800cec2:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800cec6:	4640      	mov	r0, r8
 800cec8:	4649      	mov	r1, r9
 800ceca:	b00b      	add	sp, #44	; 0x2c
 800cecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ced0:	4632      	mov	r2, r6
 800ced2:	463b      	mov	r3, r7
 800ced4:	4630      	mov	r0, r6
 800ced6:	4639      	mov	r1, r7
 800ced8:	f7f3 fc28 	bl	800072c <__aeabi_ddiv>
 800cedc:	f1ba 0f02 	cmp.w	sl, #2
 800cee0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cee4:	d1e3      	bne.n	800ceae <sqrt+0x5e>
 800cee6:	f7fd faad 	bl	800a444 <__errno>
 800ceea:	2321      	movs	r3, #33	; 0x21
 800ceec:	6003      	str	r3, [r0, #0]
 800ceee:	e7e2      	b.n	800ceb6 <sqrt+0x66>
 800cef0:	20000384 	.word	0x20000384
 800cef4:	0800f369 	.word	0x0800f369

0800cef8 <sqrtf>:
 800cef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cefa:	b08b      	sub	sp, #44	; 0x2c
 800cefc:	4604      	mov	r4, r0
 800cefe:	f000 fbeb 	bl	800d6d8 <__ieee754_sqrtf>
 800cf02:	4b20      	ldr	r3, [pc, #128]	; (800cf84 <sqrtf+0x8c>)
 800cf04:	4606      	mov	r6, r0
 800cf06:	f993 5000 	ldrsb.w	r5, [r3]
 800cf0a:	1c6b      	adds	r3, r5, #1
 800cf0c:	d02a      	beq.n	800cf64 <sqrtf+0x6c>
 800cf0e:	4621      	mov	r1, r4
 800cf10:	4620      	mov	r0, r4
 800cf12:	f7f4 f8fd 	bl	8001110 <__aeabi_fcmpun>
 800cf16:	4607      	mov	r7, r0
 800cf18:	bb20      	cbnz	r0, 800cf64 <sqrtf+0x6c>
 800cf1a:	2100      	movs	r1, #0
 800cf1c:	4620      	mov	r0, r4
 800cf1e:	f7f4 f8cf 	bl	80010c0 <__aeabi_fcmplt>
 800cf22:	b1f8      	cbz	r0, 800cf64 <sqrtf+0x6c>
 800cf24:	2301      	movs	r3, #1
 800cf26:	9300      	str	r3, [sp, #0]
 800cf28:	4b17      	ldr	r3, [pc, #92]	; (800cf88 <sqrtf+0x90>)
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	9301      	str	r3, [sp, #4]
 800cf2e:	9708      	str	r7, [sp, #32]
 800cf30:	f7f3 fa7a 	bl	8000428 <__aeabi_f2d>
 800cf34:	2200      	movs	r2, #0
 800cf36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cf3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf3e:	2300      	movs	r3, #0
 800cf40:	b99d      	cbnz	r5, 800cf6a <sqrtf+0x72>
 800cf42:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cf46:	4668      	mov	r0, sp
 800cf48:	f001 f962 	bl	800e210 <matherr>
 800cf4c:	b1a8      	cbz	r0, 800cf7a <sqrtf+0x82>
 800cf4e:	9b08      	ldr	r3, [sp, #32]
 800cf50:	b11b      	cbz	r3, 800cf5a <sqrtf+0x62>
 800cf52:	f7fd fa77 	bl	800a444 <__errno>
 800cf56:	9b08      	ldr	r3, [sp, #32]
 800cf58:	6003      	str	r3, [r0, #0]
 800cf5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cf5e:	f7f3 fdb3 	bl	8000ac8 <__aeabi_d2f>
 800cf62:	4606      	mov	r6, r0
 800cf64:	4630      	mov	r0, r6
 800cf66:	b00b      	add	sp, #44	; 0x2c
 800cf68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf6a:	4610      	mov	r0, r2
 800cf6c:	4619      	mov	r1, r3
 800cf6e:	f7f3 fbdd 	bl	800072c <__aeabi_ddiv>
 800cf72:	2d02      	cmp	r5, #2
 800cf74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cf78:	d1e5      	bne.n	800cf46 <sqrtf+0x4e>
 800cf7a:	f7fd fa63 	bl	800a444 <__errno>
 800cf7e:	2321      	movs	r3, #33	; 0x21
 800cf80:	6003      	str	r3, [r0, #0]
 800cf82:	e7e4      	b.n	800cf4e <sqrtf+0x56>
 800cf84:	20000384 	.word	0x20000384
 800cf88:	0800f36e 	.word	0x0800f36e

0800cf8c <__ieee754_fmod>:
 800cf8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf90:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800cf94:	4682      	mov	sl, r0
 800cf96:	ea54 0002 	orrs.w	r0, r4, r2
 800cf9a:	461e      	mov	r6, r3
 800cf9c:	4694      	mov	ip, r2
 800cf9e:	4696      	mov	lr, r2
 800cfa0:	d00c      	beq.n	800cfbc <__ieee754_fmod+0x30>
 800cfa2:	4d78      	ldr	r5, [pc, #480]	; (800d184 <__ieee754_fmod+0x1f8>)
 800cfa4:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800cfa8:	45a8      	cmp	r8, r5
 800cfaa:	4689      	mov	r9, r1
 800cfac:	dc06      	bgt.n	800cfbc <__ieee754_fmod+0x30>
 800cfae:	4255      	negs	r5, r2
 800cfb0:	4315      	orrs	r5, r2
 800cfb2:	4f75      	ldr	r7, [pc, #468]	; (800d188 <__ieee754_fmod+0x1fc>)
 800cfb4:	ea44 75d5 	orr.w	r5, r4, r5, lsr #31
 800cfb8:	42bd      	cmp	r5, r7
 800cfba:	d908      	bls.n	800cfce <__ieee754_fmod+0x42>
 800cfbc:	4650      	mov	r0, sl
 800cfbe:	f7f3 fa8b 	bl	80004d8 <__aeabi_dmul>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	f7f3 fbb1 	bl	800072c <__aeabi_ddiv>
 800cfca:	4682      	mov	sl, r0
 800cfcc:	e00f      	b.n	800cfee <__ieee754_fmod+0x62>
 800cfce:	45a0      	cmp	r8, r4
 800cfd0:	4652      	mov	r2, sl
 800cfd2:	4657      	mov	r7, sl
 800cfd4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800cfd8:	dc0c      	bgt.n	800cff4 <__ieee754_fmod+0x68>
 800cfda:	db08      	blt.n	800cfee <__ieee754_fmod+0x62>
 800cfdc:	45e2      	cmp	sl, ip
 800cfde:	d306      	bcc.n	800cfee <__ieee754_fmod+0x62>
 800cfe0:	d108      	bne.n	800cff4 <__ieee754_fmod+0x68>
 800cfe2:	496a      	ldr	r1, [pc, #424]	; (800d18c <__ieee754_fmod+0x200>)
 800cfe4:	0fed      	lsrs	r5, r5, #31
 800cfe6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800cfea:	e9d5 a100 	ldrd	sl, r1, [r5]
 800cfee:	4650      	mov	r0, sl
 800cff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cff4:	4b66      	ldr	r3, [pc, #408]	; (800d190 <__ieee754_fmod+0x204>)
 800cff6:	4598      	cmp	r8, r3
 800cff8:	dc48      	bgt.n	800d08c <__ieee754_fmod+0x100>
 800cffa:	f1b8 0f00 	cmp.w	r8, #0
 800cffe:	d13c      	bne.n	800d07a <__ieee754_fmod+0xee>
 800d000:	4611      	mov	r1, r2
 800d002:	4864      	ldr	r0, [pc, #400]	; (800d194 <__ieee754_fmod+0x208>)
 800d004:	2900      	cmp	r1, #0
 800d006:	dc35      	bgt.n	800d074 <__ieee754_fmod+0xe8>
 800d008:	429c      	cmp	r4, r3
 800d00a:	dc4f      	bgt.n	800d0ac <__ieee754_fmod+0x120>
 800d00c:	2c00      	cmp	r4, #0
 800d00e:	d145      	bne.n	800d09c <__ieee754_fmod+0x110>
 800d010:	4661      	mov	r1, ip
 800d012:	4b60      	ldr	r3, [pc, #384]	; (800d194 <__ieee754_fmod+0x208>)
 800d014:	2900      	cmp	r1, #0
 800d016:	dc3e      	bgt.n	800d096 <__ieee754_fmod+0x10a>
 800d018:	495f      	ldr	r1, [pc, #380]	; (800d198 <__ieee754_fmod+0x20c>)
 800d01a:	4288      	cmp	r0, r1
 800d01c:	db4a      	blt.n	800d0b4 <__ieee754_fmod+0x128>
 800d01e:	f3c9 0113 	ubfx	r1, r9, #0, #20
 800d022:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d026:	4a5c      	ldr	r2, [pc, #368]	; (800d198 <__ieee754_fmod+0x20c>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	db57      	blt.n	800d0dc <__ieee754_fmod+0x150>
 800d02c:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800d030:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800d034:	1ac0      	subs	r0, r0, r3
 800d036:	1b8a      	subs	r2, r1, r6
 800d038:	eba7 040e 	sub.w	r4, r7, lr
 800d03c:	2800      	cmp	r0, #0
 800d03e:	d163      	bne.n	800d108 <__ieee754_fmod+0x17c>
 800d040:	4577      	cmp	r7, lr
 800d042:	bf38      	it	cc
 800d044:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800d048:	2a00      	cmp	r2, #0
 800d04a:	bfbc      	itt	lt
 800d04c:	463c      	movlt	r4, r7
 800d04e:	460a      	movlt	r2, r1
 800d050:	ea52 0104 	orrs.w	r1, r2, r4
 800d054:	d0c5      	beq.n	800cfe2 <__ieee754_fmod+0x56>
 800d056:	494e      	ldr	r1, [pc, #312]	; (800d190 <__ieee754_fmod+0x204>)
 800d058:	428a      	cmp	r2, r1
 800d05a:	dd6a      	ble.n	800d132 <__ieee754_fmod+0x1a6>
 800d05c:	494e      	ldr	r1, [pc, #312]	; (800d198 <__ieee754_fmod+0x20c>)
 800d05e:	428b      	cmp	r3, r1
 800d060:	db6d      	blt.n	800d13e <__ieee754_fmod+0x1b2>
 800d062:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 800d066:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800d06a:	4315      	orrs	r5, r2
 800d06c:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
 800d070:	4620      	mov	r0, r4
 800d072:	e7aa      	b.n	800cfca <__ieee754_fmod+0x3e>
 800d074:	3801      	subs	r0, #1
 800d076:	0049      	lsls	r1, r1, #1
 800d078:	e7c4      	b.n	800d004 <__ieee754_fmod+0x78>
 800d07a:	4847      	ldr	r0, [pc, #284]	; (800d198 <__ieee754_fmod+0x20c>)
 800d07c:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800d080:	0049      	lsls	r1, r1, #1
 800d082:	2900      	cmp	r1, #0
 800d084:	f100 30ff 	add.w	r0, r0, #4294967295
 800d088:	dcfa      	bgt.n	800d080 <__ieee754_fmod+0xf4>
 800d08a:	e7bd      	b.n	800d008 <__ieee754_fmod+0x7c>
 800d08c:	ea4f 5028 	mov.w	r0, r8, asr #20
 800d090:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800d094:	e7b8      	b.n	800d008 <__ieee754_fmod+0x7c>
 800d096:	3b01      	subs	r3, #1
 800d098:	0049      	lsls	r1, r1, #1
 800d09a:	e7bb      	b.n	800d014 <__ieee754_fmod+0x88>
 800d09c:	4b3e      	ldr	r3, [pc, #248]	; (800d198 <__ieee754_fmod+0x20c>)
 800d09e:	02e1      	lsls	r1, r4, #11
 800d0a0:	0049      	lsls	r1, r1, #1
 800d0a2:	2900      	cmp	r1, #0
 800d0a4:	f103 33ff 	add.w	r3, r3, #4294967295
 800d0a8:	dcfa      	bgt.n	800d0a0 <__ieee754_fmod+0x114>
 800d0aa:	e7b5      	b.n	800d018 <__ieee754_fmod+0x8c>
 800d0ac:	1523      	asrs	r3, r4, #20
 800d0ae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d0b2:	e7b1      	b.n	800d018 <__ieee754_fmod+0x8c>
 800d0b4:	1a0f      	subs	r7, r1, r0
 800d0b6:	2f1f      	cmp	r7, #31
 800d0b8:	dc0a      	bgt.n	800d0d0 <__ieee754_fmod+0x144>
 800d0ba:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 800d0be:	fa08 f807 	lsl.w	r8, r8, r7
 800d0c2:	fa22 f101 	lsr.w	r1, r2, r1
 800d0c6:	ea41 0108 	orr.w	r1, r1, r8
 800d0ca:	fa02 f707 	lsl.w	r7, r2, r7
 800d0ce:	e7aa      	b.n	800d026 <__ieee754_fmod+0x9a>
 800d0d0:	4932      	ldr	r1, [pc, #200]	; (800d19c <__ieee754_fmod+0x210>)
 800d0d2:	2700      	movs	r7, #0
 800d0d4:	1a09      	subs	r1, r1, r0
 800d0d6:	fa02 f101 	lsl.w	r1, r2, r1
 800d0da:	e7a4      	b.n	800d026 <__ieee754_fmod+0x9a>
 800d0dc:	eba2 0e03 	sub.w	lr, r2, r3
 800d0e0:	f1be 0f1f 	cmp.w	lr, #31
 800d0e4:	dc09      	bgt.n	800d0fa <__ieee754_fmod+0x16e>
 800d0e6:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 800d0ea:	fa04 f40e 	lsl.w	r4, r4, lr
 800d0ee:	fa2c f606 	lsr.w	r6, ip, r6
 800d0f2:	4326      	orrs	r6, r4
 800d0f4:	fa0c fe0e 	lsl.w	lr, ip, lr
 800d0f8:	e79c      	b.n	800d034 <__ieee754_fmod+0xa8>
 800d0fa:	4e28      	ldr	r6, [pc, #160]	; (800d19c <__ieee754_fmod+0x210>)
 800d0fc:	f04f 0e00 	mov.w	lr, #0
 800d100:	1af6      	subs	r6, r6, r3
 800d102:	fa0c f606 	lsl.w	r6, ip, r6
 800d106:	e795      	b.n	800d034 <__ieee754_fmod+0xa8>
 800d108:	4577      	cmp	r7, lr
 800d10a:	bf38      	it	cc
 800d10c:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800d110:	2a00      	cmp	r2, #0
 800d112:	da05      	bge.n	800d120 <__ieee754_fmod+0x194>
 800d114:	0ffa      	lsrs	r2, r7, #31
 800d116:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d11a:	007f      	lsls	r7, r7, #1
 800d11c:	3801      	subs	r0, #1
 800d11e:	e78a      	b.n	800d036 <__ieee754_fmod+0xaa>
 800d120:	ea52 0104 	orrs.w	r1, r2, r4
 800d124:	f43f af5d 	beq.w	800cfe2 <__ieee754_fmod+0x56>
 800d128:	0fe1      	lsrs	r1, r4, #31
 800d12a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800d12e:	0067      	lsls	r7, r4, #1
 800d130:	e7f4      	b.n	800d11c <__ieee754_fmod+0x190>
 800d132:	0fe0      	lsrs	r0, r4, #31
 800d134:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800d138:	0064      	lsls	r4, r4, #1
 800d13a:	3b01      	subs	r3, #1
 800d13c:	e78c      	b.n	800d058 <__ieee754_fmod+0xcc>
 800d13e:	1ac9      	subs	r1, r1, r3
 800d140:	2914      	cmp	r1, #20
 800d142:	dc0a      	bgt.n	800d15a <__ieee754_fmod+0x1ce>
 800d144:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800d148:	fa02 f303 	lsl.w	r3, r2, r3
 800d14c:	40cc      	lsrs	r4, r1
 800d14e:	4323      	orrs	r3, r4
 800d150:	410a      	asrs	r2, r1
 800d152:	ea42 0105 	orr.w	r1, r2, r5
 800d156:	4618      	mov	r0, r3
 800d158:	e737      	b.n	800cfca <__ieee754_fmod+0x3e>
 800d15a:	291f      	cmp	r1, #31
 800d15c:	dc07      	bgt.n	800d16e <__ieee754_fmod+0x1e2>
 800d15e:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800d162:	40cc      	lsrs	r4, r1
 800d164:	fa02 f303 	lsl.w	r3, r2, r3
 800d168:	4323      	orrs	r3, r4
 800d16a:	462a      	mov	r2, r5
 800d16c:	e7f1      	b.n	800d152 <__ieee754_fmod+0x1c6>
 800d16e:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800d172:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800d176:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800d17a:	33e2      	adds	r3, #226	; 0xe2
 800d17c:	fa42 f303 	asr.w	r3, r2, r3
 800d180:	e7f3      	b.n	800d16a <__ieee754_fmod+0x1de>
 800d182:	bf00      	nop
 800d184:	7fefffff 	.word	0x7fefffff
 800d188:	7ff00000 	.word	0x7ff00000
 800d18c:	0800f378 	.word	0x0800f378
 800d190:	000fffff 	.word	0x000fffff
 800d194:	fffffbed 	.word	0xfffffbed
 800d198:	fffffc02 	.word	0xfffffc02
 800d19c:	fffffbe2 	.word	0xfffffbe2

0800d1a0 <__ieee754_rem_pio2>:
 800d1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a4:	4614      	mov	r4, r2
 800d1a6:	4ac2      	ldr	r2, [pc, #776]	; (800d4b0 <__ieee754_rem_pio2+0x310>)
 800d1a8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800d1ac:	4592      	cmp	sl, r2
 800d1ae:	b08d      	sub	sp, #52	; 0x34
 800d1b0:	468b      	mov	fp, r1
 800d1b2:	dc07      	bgt.n	800d1c4 <__ieee754_rem_pio2+0x24>
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	e9c4 0100 	strd	r0, r1, [r4]
 800d1bc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d1c0:	2500      	movs	r5, #0
 800d1c2:	e023      	b.n	800d20c <__ieee754_rem_pio2+0x6c>
 800d1c4:	4abb      	ldr	r2, [pc, #748]	; (800d4b4 <__ieee754_rem_pio2+0x314>)
 800d1c6:	4592      	cmp	sl, r2
 800d1c8:	dc71      	bgt.n	800d2ae <__ieee754_rem_pio2+0x10e>
 800d1ca:	a3ab      	add	r3, pc, #684	; (adr r3, 800d478 <__ieee754_rem_pio2+0x2d8>)
 800d1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d0:	2900      	cmp	r1, #0
 800d1d2:	4db9      	ldr	r5, [pc, #740]	; (800d4b8 <__ieee754_rem_pio2+0x318>)
 800d1d4:	dd36      	ble.n	800d244 <__ieee754_rem_pio2+0xa4>
 800d1d6:	f7f2 ffc7 	bl	8000168 <__aeabi_dsub>
 800d1da:	45aa      	cmp	sl, r5
 800d1dc:	4606      	mov	r6, r0
 800d1de:	460f      	mov	r7, r1
 800d1e0:	d018      	beq.n	800d214 <__ieee754_rem_pio2+0x74>
 800d1e2:	a3a7      	add	r3, pc, #668	; (adr r3, 800d480 <__ieee754_rem_pio2+0x2e0>)
 800d1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e8:	f7f2 ffbe 	bl	8000168 <__aeabi_dsub>
 800d1ec:	4602      	mov	r2, r0
 800d1ee:	460b      	mov	r3, r1
 800d1f0:	4630      	mov	r0, r6
 800d1f2:	e9c4 2300 	strd	r2, r3, [r4]
 800d1f6:	4639      	mov	r1, r7
 800d1f8:	f7f2 ffb6 	bl	8000168 <__aeabi_dsub>
 800d1fc:	a3a0      	add	r3, pc, #640	; (adr r3, 800d480 <__ieee754_rem_pio2+0x2e0>)
 800d1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d202:	f7f2 ffb1 	bl	8000168 <__aeabi_dsub>
 800d206:	2501      	movs	r5, #1
 800d208:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d20c:	4628      	mov	r0, r5
 800d20e:	b00d      	add	sp, #52	; 0x34
 800d210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d214:	a39c      	add	r3, pc, #624	; (adr r3, 800d488 <__ieee754_rem_pio2+0x2e8>)
 800d216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21a:	f7f2 ffa5 	bl	8000168 <__aeabi_dsub>
 800d21e:	a39c      	add	r3, pc, #624	; (adr r3, 800d490 <__ieee754_rem_pio2+0x2f0>)
 800d220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d224:	4606      	mov	r6, r0
 800d226:	460f      	mov	r7, r1
 800d228:	f7f2 ff9e 	bl	8000168 <__aeabi_dsub>
 800d22c:	4602      	mov	r2, r0
 800d22e:	460b      	mov	r3, r1
 800d230:	4630      	mov	r0, r6
 800d232:	e9c4 2300 	strd	r2, r3, [r4]
 800d236:	4639      	mov	r1, r7
 800d238:	f7f2 ff96 	bl	8000168 <__aeabi_dsub>
 800d23c:	a394      	add	r3, pc, #592	; (adr r3, 800d490 <__ieee754_rem_pio2+0x2f0>)
 800d23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d242:	e7de      	b.n	800d202 <__ieee754_rem_pio2+0x62>
 800d244:	f7f2 ff92 	bl	800016c <__adddf3>
 800d248:	45aa      	cmp	sl, r5
 800d24a:	4606      	mov	r6, r0
 800d24c:	460f      	mov	r7, r1
 800d24e:	d016      	beq.n	800d27e <__ieee754_rem_pio2+0xde>
 800d250:	a38b      	add	r3, pc, #556	; (adr r3, 800d480 <__ieee754_rem_pio2+0x2e0>)
 800d252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d256:	f7f2 ff89 	bl	800016c <__adddf3>
 800d25a:	4602      	mov	r2, r0
 800d25c:	460b      	mov	r3, r1
 800d25e:	4630      	mov	r0, r6
 800d260:	e9c4 2300 	strd	r2, r3, [r4]
 800d264:	4639      	mov	r1, r7
 800d266:	f7f2 ff7f 	bl	8000168 <__aeabi_dsub>
 800d26a:	a385      	add	r3, pc, #532	; (adr r3, 800d480 <__ieee754_rem_pio2+0x2e0>)
 800d26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d270:	f7f2 ff7c 	bl	800016c <__adddf3>
 800d274:	f04f 35ff 	mov.w	r5, #4294967295
 800d278:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d27c:	e7c6      	b.n	800d20c <__ieee754_rem_pio2+0x6c>
 800d27e:	a382      	add	r3, pc, #520	; (adr r3, 800d488 <__ieee754_rem_pio2+0x2e8>)
 800d280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d284:	f7f2 ff72 	bl	800016c <__adddf3>
 800d288:	a381      	add	r3, pc, #516	; (adr r3, 800d490 <__ieee754_rem_pio2+0x2f0>)
 800d28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28e:	4606      	mov	r6, r0
 800d290:	460f      	mov	r7, r1
 800d292:	f7f2 ff6b 	bl	800016c <__adddf3>
 800d296:	4602      	mov	r2, r0
 800d298:	460b      	mov	r3, r1
 800d29a:	4630      	mov	r0, r6
 800d29c:	e9c4 2300 	strd	r2, r3, [r4]
 800d2a0:	4639      	mov	r1, r7
 800d2a2:	f7f2 ff61 	bl	8000168 <__aeabi_dsub>
 800d2a6:	a37a      	add	r3, pc, #488	; (adr r3, 800d490 <__ieee754_rem_pio2+0x2f0>)
 800d2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ac:	e7e0      	b.n	800d270 <__ieee754_rem_pio2+0xd0>
 800d2ae:	4a83      	ldr	r2, [pc, #524]	; (800d4bc <__ieee754_rem_pio2+0x31c>)
 800d2b0:	4592      	cmp	sl, r2
 800d2b2:	f300 80d2 	bgt.w	800d45a <__ieee754_rem_pio2+0x2ba>
 800d2b6:	f000 ff21 	bl	800e0fc <fabs>
 800d2ba:	a377      	add	r3, pc, #476	; (adr r3, 800d498 <__ieee754_rem_pio2+0x2f8>)
 800d2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c0:	4606      	mov	r6, r0
 800d2c2:	460f      	mov	r7, r1
 800d2c4:	f7f3 f908 	bl	80004d8 <__aeabi_dmul>
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	4b7d      	ldr	r3, [pc, #500]	; (800d4c0 <__ieee754_rem_pio2+0x320>)
 800d2cc:	f7f2 ff4e 	bl	800016c <__adddf3>
 800d2d0:	f7f3 fbb2 	bl	8000a38 <__aeabi_d2iz>
 800d2d4:	4605      	mov	r5, r0
 800d2d6:	f7f3 f895 	bl	8000404 <__aeabi_i2d>
 800d2da:	a367      	add	r3, pc, #412	; (adr r3, 800d478 <__ieee754_rem_pio2+0x2d8>)
 800d2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d2e4:	f7f3 f8f8 	bl	80004d8 <__aeabi_dmul>
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	460b      	mov	r3, r1
 800d2ec:	4630      	mov	r0, r6
 800d2ee:	4639      	mov	r1, r7
 800d2f0:	f7f2 ff3a 	bl	8000168 <__aeabi_dsub>
 800d2f4:	a362      	add	r3, pc, #392	; (adr r3, 800d480 <__ieee754_rem_pio2+0x2e0>)
 800d2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fa:	4606      	mov	r6, r0
 800d2fc:	460f      	mov	r7, r1
 800d2fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d302:	f7f3 f8e9 	bl	80004d8 <__aeabi_dmul>
 800d306:	2d1f      	cmp	r5, #31
 800d308:	4680      	mov	r8, r0
 800d30a:	4689      	mov	r9, r1
 800d30c:	dc0e      	bgt.n	800d32c <__ieee754_rem_pio2+0x18c>
 800d30e:	4b6d      	ldr	r3, [pc, #436]	; (800d4c4 <__ieee754_rem_pio2+0x324>)
 800d310:	1e6a      	subs	r2, r5, #1
 800d312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d316:	4553      	cmp	r3, sl
 800d318:	d008      	beq.n	800d32c <__ieee754_rem_pio2+0x18c>
 800d31a:	4642      	mov	r2, r8
 800d31c:	464b      	mov	r3, r9
 800d31e:	4630      	mov	r0, r6
 800d320:	4639      	mov	r1, r7
 800d322:	f7f2 ff21 	bl	8000168 <__aeabi_dsub>
 800d326:	e9c4 0100 	strd	r0, r1, [r4]
 800d32a:	e011      	b.n	800d350 <__ieee754_rem_pio2+0x1b0>
 800d32c:	464b      	mov	r3, r9
 800d32e:	4642      	mov	r2, r8
 800d330:	4630      	mov	r0, r6
 800d332:	4639      	mov	r1, r7
 800d334:	f7f2 ff18 	bl	8000168 <__aeabi_dsub>
 800d338:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800d33c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d340:	ebaa 0303 	sub.w	r3, sl, r3
 800d344:	2b10      	cmp	r3, #16
 800d346:	dc1f      	bgt.n	800d388 <__ieee754_rem_pio2+0x1e8>
 800d348:	4602      	mov	r2, r0
 800d34a:	460b      	mov	r3, r1
 800d34c:	e9c4 2300 	strd	r2, r3, [r4]
 800d350:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800d354:	4630      	mov	r0, r6
 800d356:	4653      	mov	r3, sl
 800d358:	4639      	mov	r1, r7
 800d35a:	f7f2 ff05 	bl	8000168 <__aeabi_dsub>
 800d35e:	4642      	mov	r2, r8
 800d360:	464b      	mov	r3, r9
 800d362:	f7f2 ff01 	bl	8000168 <__aeabi_dsub>
 800d366:	4602      	mov	r2, r0
 800d368:	460b      	mov	r3, r1
 800d36a:	f1bb 0f00 	cmp.w	fp, #0
 800d36e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d372:	f6bf af4b 	bge.w	800d20c <__ieee754_rem_pio2+0x6c>
 800d376:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800d37a:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800d37e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d382:	60e1      	str	r1, [r4, #12]
 800d384:	426d      	negs	r5, r5
 800d386:	e741      	b.n	800d20c <__ieee754_rem_pio2+0x6c>
 800d388:	a33f      	add	r3, pc, #252	; (adr r3, 800d488 <__ieee754_rem_pio2+0x2e8>)
 800d38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d392:	f7f3 f8a1 	bl	80004d8 <__aeabi_dmul>
 800d396:	4680      	mov	r8, r0
 800d398:	4689      	mov	r9, r1
 800d39a:	4602      	mov	r2, r0
 800d39c:	460b      	mov	r3, r1
 800d39e:	4630      	mov	r0, r6
 800d3a0:	4639      	mov	r1, r7
 800d3a2:	f7f2 fee1 	bl	8000168 <__aeabi_dsub>
 800d3a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	460b      	mov	r3, r1
 800d3ae:	4630      	mov	r0, r6
 800d3b0:	4639      	mov	r1, r7
 800d3b2:	f7f2 fed9 	bl	8000168 <__aeabi_dsub>
 800d3b6:	4642      	mov	r2, r8
 800d3b8:	464b      	mov	r3, r9
 800d3ba:	f7f2 fed5 	bl	8000168 <__aeabi_dsub>
 800d3be:	a334      	add	r3, pc, #208	; (adr r3, 800d490 <__ieee754_rem_pio2+0x2f0>)
 800d3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c4:	4606      	mov	r6, r0
 800d3c6:	460f      	mov	r7, r1
 800d3c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3cc:	f7f3 f884 	bl	80004d8 <__aeabi_dmul>
 800d3d0:	4632      	mov	r2, r6
 800d3d2:	463b      	mov	r3, r7
 800d3d4:	f7f2 fec8 	bl	8000168 <__aeabi_dsub>
 800d3d8:	460b      	mov	r3, r1
 800d3da:	4602      	mov	r2, r0
 800d3dc:	4680      	mov	r8, r0
 800d3de:	4689      	mov	r9, r1
 800d3e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d3e4:	f7f2 fec0 	bl	8000168 <__aeabi_dsub>
 800d3e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d3ec:	ebaa 0a03 	sub.w	sl, sl, r3
 800d3f0:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800d3f4:	dc06      	bgt.n	800d404 <__ieee754_rem_pio2+0x264>
 800d3f6:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800d3fa:	4602      	mov	r2, r0
 800d3fc:	460b      	mov	r3, r1
 800d3fe:	e9c4 2300 	strd	r2, r3, [r4]
 800d402:	e7a5      	b.n	800d350 <__ieee754_rem_pio2+0x1b0>
 800d404:	a326      	add	r3, pc, #152	; (adr r3, 800d4a0 <__ieee754_rem_pio2+0x300>)
 800d406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d40a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d40e:	f7f3 f863 	bl	80004d8 <__aeabi_dmul>
 800d412:	4680      	mov	r8, r0
 800d414:	4689      	mov	r9, r1
 800d416:	4602      	mov	r2, r0
 800d418:	460b      	mov	r3, r1
 800d41a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d41e:	f7f2 fea3 	bl	8000168 <__aeabi_dsub>
 800d422:	4602      	mov	r2, r0
 800d424:	460b      	mov	r3, r1
 800d426:	4606      	mov	r6, r0
 800d428:	460f      	mov	r7, r1
 800d42a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d42e:	f7f2 fe9b 	bl	8000168 <__aeabi_dsub>
 800d432:	4642      	mov	r2, r8
 800d434:	464b      	mov	r3, r9
 800d436:	f7f2 fe97 	bl	8000168 <__aeabi_dsub>
 800d43a:	a31b      	add	r3, pc, #108	; (adr r3, 800d4a8 <__ieee754_rem_pio2+0x308>)
 800d43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d440:	4680      	mov	r8, r0
 800d442:	4689      	mov	r9, r1
 800d444:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d448:	f7f3 f846 	bl	80004d8 <__aeabi_dmul>
 800d44c:	4642      	mov	r2, r8
 800d44e:	464b      	mov	r3, r9
 800d450:	f7f2 fe8a 	bl	8000168 <__aeabi_dsub>
 800d454:	4680      	mov	r8, r0
 800d456:	4689      	mov	r9, r1
 800d458:	e75f      	b.n	800d31a <__ieee754_rem_pio2+0x17a>
 800d45a:	4a1b      	ldr	r2, [pc, #108]	; (800d4c8 <__ieee754_rem_pio2+0x328>)
 800d45c:	4592      	cmp	sl, r2
 800d45e:	dd35      	ble.n	800d4cc <__ieee754_rem_pio2+0x32c>
 800d460:	4602      	mov	r2, r0
 800d462:	460b      	mov	r3, r1
 800d464:	f7f2 fe80 	bl	8000168 <__aeabi_dsub>
 800d468:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d46c:	e9c4 0100 	strd	r0, r1, [r4]
 800d470:	e6a6      	b.n	800d1c0 <__ieee754_rem_pio2+0x20>
 800d472:	bf00      	nop
 800d474:	f3af 8000 	nop.w
 800d478:	54400000 	.word	0x54400000
 800d47c:	3ff921fb 	.word	0x3ff921fb
 800d480:	1a626331 	.word	0x1a626331
 800d484:	3dd0b461 	.word	0x3dd0b461
 800d488:	1a600000 	.word	0x1a600000
 800d48c:	3dd0b461 	.word	0x3dd0b461
 800d490:	2e037073 	.word	0x2e037073
 800d494:	3ba3198a 	.word	0x3ba3198a
 800d498:	6dc9c883 	.word	0x6dc9c883
 800d49c:	3fe45f30 	.word	0x3fe45f30
 800d4a0:	2e000000 	.word	0x2e000000
 800d4a4:	3ba3198a 	.word	0x3ba3198a
 800d4a8:	252049c1 	.word	0x252049c1
 800d4ac:	397b839a 	.word	0x397b839a
 800d4b0:	3fe921fb 	.word	0x3fe921fb
 800d4b4:	4002d97b 	.word	0x4002d97b
 800d4b8:	3ff921fb 	.word	0x3ff921fb
 800d4bc:	413921fb 	.word	0x413921fb
 800d4c0:	3fe00000 	.word	0x3fe00000
 800d4c4:	0800f388 	.word	0x0800f388
 800d4c8:	7fefffff 	.word	0x7fefffff
 800d4cc:	ea4f 552a 	mov.w	r5, sl, asr #20
 800d4d0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800d4d4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800d4d8:	460f      	mov	r7, r1
 800d4da:	4606      	mov	r6, r0
 800d4dc:	f7f3 faac 	bl	8000a38 <__aeabi_d2iz>
 800d4e0:	f7f2 ff90 	bl	8000404 <__aeabi_i2d>
 800d4e4:	4602      	mov	r2, r0
 800d4e6:	460b      	mov	r3, r1
 800d4e8:	4630      	mov	r0, r6
 800d4ea:	4639      	mov	r1, r7
 800d4ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d4f0:	f7f2 fe3a 	bl	8000168 <__aeabi_dsub>
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	4b20      	ldr	r3, [pc, #128]	; (800d578 <__ieee754_rem_pio2+0x3d8>)
 800d4f8:	f7f2 ffee 	bl	80004d8 <__aeabi_dmul>
 800d4fc:	460f      	mov	r7, r1
 800d4fe:	4606      	mov	r6, r0
 800d500:	f7f3 fa9a 	bl	8000a38 <__aeabi_d2iz>
 800d504:	f7f2 ff7e 	bl	8000404 <__aeabi_i2d>
 800d508:	4602      	mov	r2, r0
 800d50a:	460b      	mov	r3, r1
 800d50c:	4630      	mov	r0, r6
 800d50e:	4639      	mov	r1, r7
 800d510:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d514:	f7f2 fe28 	bl	8000168 <__aeabi_dsub>
 800d518:	2200      	movs	r2, #0
 800d51a:	4b17      	ldr	r3, [pc, #92]	; (800d578 <__ieee754_rem_pio2+0x3d8>)
 800d51c:	f7f2 ffdc 	bl	80004d8 <__aeabi_dmul>
 800d520:	f04f 0803 	mov.w	r8, #3
 800d524:	2600      	movs	r6, #0
 800d526:	2700      	movs	r7, #0
 800d528:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d52c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800d530:	4632      	mov	r2, r6
 800d532:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d536:	463b      	mov	r3, r7
 800d538:	f108 3aff 	add.w	sl, r8, #4294967295
 800d53c:	f7f3 fa34 	bl	80009a8 <__aeabi_dcmpeq>
 800d540:	b9b8      	cbnz	r0, 800d572 <__ieee754_rem_pio2+0x3d2>
 800d542:	4b0e      	ldr	r3, [pc, #56]	; (800d57c <__ieee754_rem_pio2+0x3dc>)
 800d544:	462a      	mov	r2, r5
 800d546:	9301      	str	r3, [sp, #4]
 800d548:	2302      	movs	r3, #2
 800d54a:	4621      	mov	r1, r4
 800d54c:	9300      	str	r3, [sp, #0]
 800d54e:	a806      	add	r0, sp, #24
 800d550:	4643      	mov	r3, r8
 800d552:	f000 f9d3 	bl	800d8fc <__kernel_rem_pio2>
 800d556:	f1bb 0f00 	cmp.w	fp, #0
 800d55a:	4605      	mov	r5, r0
 800d55c:	f6bf ae56 	bge.w	800d20c <__ieee754_rem_pio2+0x6c>
 800d560:	6863      	ldr	r3, [r4, #4]
 800d562:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d566:	6063      	str	r3, [r4, #4]
 800d568:	68e3      	ldr	r3, [r4, #12]
 800d56a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d56e:	60e3      	str	r3, [r4, #12]
 800d570:	e708      	b.n	800d384 <__ieee754_rem_pio2+0x1e4>
 800d572:	46d0      	mov	r8, sl
 800d574:	e7dc      	b.n	800d530 <__ieee754_rem_pio2+0x390>
 800d576:	bf00      	nop
 800d578:	41700000 	.word	0x41700000
 800d57c:	0800f408 	.word	0x0800f408

0800d580 <__ieee754_sqrt>:
 800d580:	4b54      	ldr	r3, [pc, #336]	; (800d6d4 <__ieee754_sqrt+0x154>)
 800d582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d586:	438b      	bics	r3, r1
 800d588:	4606      	mov	r6, r0
 800d58a:	460d      	mov	r5, r1
 800d58c:	460a      	mov	r2, r1
 800d58e:	460c      	mov	r4, r1
 800d590:	d10f      	bne.n	800d5b2 <__ieee754_sqrt+0x32>
 800d592:	4602      	mov	r2, r0
 800d594:	460b      	mov	r3, r1
 800d596:	f7f2 ff9f 	bl	80004d8 <__aeabi_dmul>
 800d59a:	4602      	mov	r2, r0
 800d59c:	460b      	mov	r3, r1
 800d59e:	4630      	mov	r0, r6
 800d5a0:	4629      	mov	r1, r5
 800d5a2:	f7f2 fde3 	bl	800016c <__adddf3>
 800d5a6:	4606      	mov	r6, r0
 800d5a8:	460d      	mov	r5, r1
 800d5aa:	4630      	mov	r0, r6
 800d5ac:	4629      	mov	r1, r5
 800d5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5b2:	2900      	cmp	r1, #0
 800d5b4:	4607      	mov	r7, r0
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	dc0e      	bgt.n	800d5d8 <__ieee754_sqrt+0x58>
 800d5ba:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800d5be:	ea5c 0707 	orrs.w	r7, ip, r7
 800d5c2:	d0f2      	beq.n	800d5aa <__ieee754_sqrt+0x2a>
 800d5c4:	b141      	cbz	r1, 800d5d8 <__ieee754_sqrt+0x58>
 800d5c6:	4602      	mov	r2, r0
 800d5c8:	460b      	mov	r3, r1
 800d5ca:	f7f2 fdcd 	bl	8000168 <__aeabi_dsub>
 800d5ce:	4602      	mov	r2, r0
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	f7f3 f8ab 	bl	800072c <__aeabi_ddiv>
 800d5d6:	e7e6      	b.n	800d5a6 <__ieee754_sqrt+0x26>
 800d5d8:	1512      	asrs	r2, r2, #20
 800d5da:	d074      	beq.n	800d6c6 <__ieee754_sqrt+0x146>
 800d5dc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d5e0:	07d5      	lsls	r5, r2, #31
 800d5e2:	f04f 0500 	mov.w	r5, #0
 800d5e6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d5ea:	bf48      	it	mi
 800d5ec:	0fd9      	lsrmi	r1, r3, #31
 800d5ee:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800d5f2:	bf44      	itt	mi
 800d5f4:	005b      	lslmi	r3, r3, #1
 800d5f6:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800d5fa:	1051      	asrs	r1, r2, #1
 800d5fc:	0fda      	lsrs	r2, r3, #31
 800d5fe:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800d602:	4628      	mov	r0, r5
 800d604:	2216      	movs	r2, #22
 800d606:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800d60a:	005b      	lsls	r3, r3, #1
 800d60c:	1987      	adds	r7, r0, r6
 800d60e:	42a7      	cmp	r7, r4
 800d610:	bfde      	ittt	le
 800d612:	19b8      	addle	r0, r7, r6
 800d614:	1be4      	suble	r4, r4, r7
 800d616:	19ad      	addle	r5, r5, r6
 800d618:	0fdf      	lsrs	r7, r3, #31
 800d61a:	3a01      	subs	r2, #1
 800d61c:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800d620:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d624:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d628:	d1f0      	bne.n	800d60c <__ieee754_sqrt+0x8c>
 800d62a:	f04f 0c20 	mov.w	ip, #32
 800d62e:	4696      	mov	lr, r2
 800d630:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d634:	4284      	cmp	r4, r0
 800d636:	eb06 070e 	add.w	r7, r6, lr
 800d63a:	dc02      	bgt.n	800d642 <__ieee754_sqrt+0xc2>
 800d63c:	d112      	bne.n	800d664 <__ieee754_sqrt+0xe4>
 800d63e:	429f      	cmp	r7, r3
 800d640:	d810      	bhi.n	800d664 <__ieee754_sqrt+0xe4>
 800d642:	2f00      	cmp	r7, #0
 800d644:	eb07 0e06 	add.w	lr, r7, r6
 800d648:	da42      	bge.n	800d6d0 <__ieee754_sqrt+0x150>
 800d64a:	f1be 0f00 	cmp.w	lr, #0
 800d64e:	db3f      	blt.n	800d6d0 <__ieee754_sqrt+0x150>
 800d650:	f100 0801 	add.w	r8, r0, #1
 800d654:	1a24      	subs	r4, r4, r0
 800d656:	4640      	mov	r0, r8
 800d658:	429f      	cmp	r7, r3
 800d65a:	bf88      	it	hi
 800d65c:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800d660:	1bdb      	subs	r3, r3, r7
 800d662:	4432      	add	r2, r6
 800d664:	0064      	lsls	r4, r4, #1
 800d666:	f1bc 0c01 	subs.w	ip, ip, #1
 800d66a:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800d66e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d672:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d676:	d1dd      	bne.n	800d634 <__ieee754_sqrt+0xb4>
 800d678:	4323      	orrs	r3, r4
 800d67a:	d006      	beq.n	800d68a <__ieee754_sqrt+0x10a>
 800d67c:	1c54      	adds	r4, r2, #1
 800d67e:	bf0b      	itete	eq
 800d680:	4662      	moveq	r2, ip
 800d682:	3201      	addne	r2, #1
 800d684:	3501      	addeq	r5, #1
 800d686:	f022 0201 	bicne.w	r2, r2, #1
 800d68a:	106b      	asrs	r3, r5, #1
 800d68c:	0852      	lsrs	r2, r2, #1
 800d68e:	07e8      	lsls	r0, r5, #31
 800d690:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d694:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d698:	bf48      	it	mi
 800d69a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d69e:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800d6a2:	4616      	mov	r6, r2
 800d6a4:	e781      	b.n	800d5aa <__ieee754_sqrt+0x2a>
 800d6a6:	0adc      	lsrs	r4, r3, #11
 800d6a8:	3915      	subs	r1, #21
 800d6aa:	055b      	lsls	r3, r3, #21
 800d6ac:	2c00      	cmp	r4, #0
 800d6ae:	d0fa      	beq.n	800d6a6 <__ieee754_sqrt+0x126>
 800d6b0:	02e6      	lsls	r6, r4, #11
 800d6b2:	d50a      	bpl.n	800d6ca <__ieee754_sqrt+0x14a>
 800d6b4:	f1c2 0020 	rsb	r0, r2, #32
 800d6b8:	fa23 f000 	lsr.w	r0, r3, r0
 800d6bc:	1e55      	subs	r5, r2, #1
 800d6be:	4093      	lsls	r3, r2
 800d6c0:	4304      	orrs	r4, r0
 800d6c2:	1b4a      	subs	r2, r1, r5
 800d6c4:	e78a      	b.n	800d5dc <__ieee754_sqrt+0x5c>
 800d6c6:	4611      	mov	r1, r2
 800d6c8:	e7f0      	b.n	800d6ac <__ieee754_sqrt+0x12c>
 800d6ca:	0064      	lsls	r4, r4, #1
 800d6cc:	3201      	adds	r2, #1
 800d6ce:	e7ef      	b.n	800d6b0 <__ieee754_sqrt+0x130>
 800d6d0:	4680      	mov	r8, r0
 800d6d2:	e7bf      	b.n	800d654 <__ieee754_sqrt+0xd4>
 800d6d4:	7ff00000 	.word	0x7ff00000

0800d6d8 <__ieee754_sqrtf>:
 800d6d8:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800d6dc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d6e0:	b570      	push	{r4, r5, r6, lr}
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	4604      	mov	r4, r0
 800d6e6:	d309      	bcc.n	800d6fc <__ieee754_sqrtf+0x24>
 800d6e8:	4601      	mov	r1, r0
 800d6ea:	f7f3 fb4b 	bl	8000d84 <__aeabi_fmul>
 800d6ee:	4601      	mov	r1, r0
 800d6f0:	4620      	mov	r0, r4
 800d6f2:	f7f3 fa3f 	bl	8000b74 <__addsf3>
 800d6f6:	4604      	mov	r4, r0
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	bd70      	pop	{r4, r5, r6, pc}
 800d6fc:	2a00      	cmp	r2, #0
 800d6fe:	d0fb      	beq.n	800d6f8 <__ieee754_sqrtf+0x20>
 800d700:	2800      	cmp	r0, #0
 800d702:	da06      	bge.n	800d712 <__ieee754_sqrtf+0x3a>
 800d704:	4601      	mov	r1, r0
 800d706:	f7f3 fa33 	bl	8000b70 <__aeabi_fsub>
 800d70a:	4601      	mov	r1, r0
 800d70c:	f7f3 fbee 	bl	8000eec <__aeabi_fdiv>
 800d710:	e7f1      	b.n	800d6f6 <__ieee754_sqrtf+0x1e>
 800d712:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800d716:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800d71a:	d32e      	bcc.n	800d77a <__ieee754_sqrtf+0xa2>
 800d71c:	3c7f      	subs	r4, #127	; 0x7f
 800d71e:	07e2      	lsls	r2, r4, #31
 800d720:	f04f 0200 	mov.w	r2, #0
 800d724:	ea4f 0164 	mov.w	r1, r4, asr #1
 800d728:	4616      	mov	r6, r2
 800d72a:	f04f 0419 	mov.w	r4, #25
 800d72e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800d732:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d736:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d73a:	bf48      	it	mi
 800d73c:	005b      	lslmi	r3, r3, #1
 800d73e:	005b      	lsls	r3, r3, #1
 800d740:	1835      	adds	r5, r6, r0
 800d742:	429d      	cmp	r5, r3
 800d744:	bfde      	ittt	le
 800d746:	182e      	addle	r6, r5, r0
 800d748:	1b5b      	suble	r3, r3, r5
 800d74a:	1812      	addle	r2, r2, r0
 800d74c:	3c01      	subs	r4, #1
 800d74e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d752:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800d756:	d1f3      	bne.n	800d740 <__ieee754_sqrtf+0x68>
 800d758:	b113      	cbz	r3, 800d760 <__ieee754_sqrtf+0x88>
 800d75a:	3201      	adds	r2, #1
 800d75c:	f022 0201 	bic.w	r2, r2, #1
 800d760:	1054      	asrs	r4, r2, #1
 800d762:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800d766:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800d76a:	e7c5      	b.n	800d6f8 <__ieee754_sqrtf+0x20>
 800d76c:	005b      	lsls	r3, r3, #1
 800d76e:	3201      	adds	r2, #1
 800d770:	0219      	lsls	r1, r3, #8
 800d772:	d5fb      	bpl.n	800d76c <__ieee754_sqrtf+0x94>
 800d774:	3a01      	subs	r2, #1
 800d776:	1aa4      	subs	r4, r4, r2
 800d778:	e7d0      	b.n	800d71c <__ieee754_sqrtf+0x44>
 800d77a:	2200      	movs	r2, #0
 800d77c:	e7f8      	b.n	800d770 <__ieee754_sqrtf+0x98>
	...

0800d780 <__kernel_cos>:
 800d780:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d784:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d788:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800d78c:	4680      	mov	r8, r0
 800d78e:	460f      	mov	r7, r1
 800d790:	e9cd 2300 	strd	r2, r3, [sp]
 800d794:	da04      	bge.n	800d7a0 <__kernel_cos+0x20>
 800d796:	f7f3 f94f 	bl	8000a38 <__aeabi_d2iz>
 800d79a:	2800      	cmp	r0, #0
 800d79c:	f000 8086 	beq.w	800d8ac <__kernel_cos+0x12c>
 800d7a0:	4642      	mov	r2, r8
 800d7a2:	463b      	mov	r3, r7
 800d7a4:	4640      	mov	r0, r8
 800d7a6:	4639      	mov	r1, r7
 800d7a8:	f7f2 fe96 	bl	80004d8 <__aeabi_dmul>
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	4b4e      	ldr	r3, [pc, #312]	; (800d8e8 <__kernel_cos+0x168>)
 800d7b0:	4604      	mov	r4, r0
 800d7b2:	460d      	mov	r5, r1
 800d7b4:	f7f2 fe90 	bl	80004d8 <__aeabi_dmul>
 800d7b8:	a33f      	add	r3, pc, #252	; (adr r3, 800d8b8 <__kernel_cos+0x138>)
 800d7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7be:	4682      	mov	sl, r0
 800d7c0:	468b      	mov	fp, r1
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	4629      	mov	r1, r5
 800d7c6:	f7f2 fe87 	bl	80004d8 <__aeabi_dmul>
 800d7ca:	a33d      	add	r3, pc, #244	; (adr r3, 800d8c0 <__kernel_cos+0x140>)
 800d7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d0:	f7f2 fccc 	bl	800016c <__adddf3>
 800d7d4:	4622      	mov	r2, r4
 800d7d6:	462b      	mov	r3, r5
 800d7d8:	f7f2 fe7e 	bl	80004d8 <__aeabi_dmul>
 800d7dc:	a33a      	add	r3, pc, #232	; (adr r3, 800d8c8 <__kernel_cos+0x148>)
 800d7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e2:	f7f2 fcc1 	bl	8000168 <__aeabi_dsub>
 800d7e6:	4622      	mov	r2, r4
 800d7e8:	462b      	mov	r3, r5
 800d7ea:	f7f2 fe75 	bl	80004d8 <__aeabi_dmul>
 800d7ee:	a338      	add	r3, pc, #224	; (adr r3, 800d8d0 <__kernel_cos+0x150>)
 800d7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f4:	f7f2 fcba 	bl	800016c <__adddf3>
 800d7f8:	4622      	mov	r2, r4
 800d7fa:	462b      	mov	r3, r5
 800d7fc:	f7f2 fe6c 	bl	80004d8 <__aeabi_dmul>
 800d800:	a335      	add	r3, pc, #212	; (adr r3, 800d8d8 <__kernel_cos+0x158>)
 800d802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d806:	f7f2 fcaf 	bl	8000168 <__aeabi_dsub>
 800d80a:	4622      	mov	r2, r4
 800d80c:	462b      	mov	r3, r5
 800d80e:	f7f2 fe63 	bl	80004d8 <__aeabi_dmul>
 800d812:	a333      	add	r3, pc, #204	; (adr r3, 800d8e0 <__kernel_cos+0x160>)
 800d814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d818:	f7f2 fca8 	bl	800016c <__adddf3>
 800d81c:	4622      	mov	r2, r4
 800d81e:	462b      	mov	r3, r5
 800d820:	f7f2 fe5a 	bl	80004d8 <__aeabi_dmul>
 800d824:	4622      	mov	r2, r4
 800d826:	462b      	mov	r3, r5
 800d828:	f7f2 fe56 	bl	80004d8 <__aeabi_dmul>
 800d82c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d830:	4604      	mov	r4, r0
 800d832:	460d      	mov	r5, r1
 800d834:	4640      	mov	r0, r8
 800d836:	4639      	mov	r1, r7
 800d838:	f7f2 fe4e 	bl	80004d8 <__aeabi_dmul>
 800d83c:	460b      	mov	r3, r1
 800d83e:	4602      	mov	r2, r0
 800d840:	4629      	mov	r1, r5
 800d842:	4620      	mov	r0, r4
 800d844:	f7f2 fc90 	bl	8000168 <__aeabi_dsub>
 800d848:	4b28      	ldr	r3, [pc, #160]	; (800d8ec <__kernel_cos+0x16c>)
 800d84a:	4680      	mov	r8, r0
 800d84c:	429e      	cmp	r6, r3
 800d84e:	4689      	mov	r9, r1
 800d850:	dc0e      	bgt.n	800d870 <__kernel_cos+0xf0>
 800d852:	4602      	mov	r2, r0
 800d854:	460b      	mov	r3, r1
 800d856:	4650      	mov	r0, sl
 800d858:	4659      	mov	r1, fp
 800d85a:	f7f2 fc85 	bl	8000168 <__aeabi_dsub>
 800d85e:	4602      	mov	r2, r0
 800d860:	2000      	movs	r0, #0
 800d862:	460b      	mov	r3, r1
 800d864:	4922      	ldr	r1, [pc, #136]	; (800d8f0 <__kernel_cos+0x170>)
 800d866:	f7f2 fc7f 	bl	8000168 <__aeabi_dsub>
 800d86a:	b003      	add	sp, #12
 800d86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d870:	2400      	movs	r4, #0
 800d872:	4b20      	ldr	r3, [pc, #128]	; (800d8f4 <__kernel_cos+0x174>)
 800d874:	4622      	mov	r2, r4
 800d876:	429e      	cmp	r6, r3
 800d878:	bfcc      	ite	gt
 800d87a:	4d1f      	ldrgt	r5, [pc, #124]	; (800d8f8 <__kernel_cos+0x178>)
 800d87c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800d880:	462b      	mov	r3, r5
 800d882:	2000      	movs	r0, #0
 800d884:	491a      	ldr	r1, [pc, #104]	; (800d8f0 <__kernel_cos+0x170>)
 800d886:	f7f2 fc6f 	bl	8000168 <__aeabi_dsub>
 800d88a:	4622      	mov	r2, r4
 800d88c:	4606      	mov	r6, r0
 800d88e:	460f      	mov	r7, r1
 800d890:	462b      	mov	r3, r5
 800d892:	4650      	mov	r0, sl
 800d894:	4659      	mov	r1, fp
 800d896:	f7f2 fc67 	bl	8000168 <__aeabi_dsub>
 800d89a:	4642      	mov	r2, r8
 800d89c:	464b      	mov	r3, r9
 800d89e:	f7f2 fc63 	bl	8000168 <__aeabi_dsub>
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	460b      	mov	r3, r1
 800d8a6:	4630      	mov	r0, r6
 800d8a8:	4639      	mov	r1, r7
 800d8aa:	e7dc      	b.n	800d866 <__kernel_cos+0xe6>
 800d8ac:	2000      	movs	r0, #0
 800d8ae:	4910      	ldr	r1, [pc, #64]	; (800d8f0 <__kernel_cos+0x170>)
 800d8b0:	e7db      	b.n	800d86a <__kernel_cos+0xea>
 800d8b2:	bf00      	nop
 800d8b4:	f3af 8000 	nop.w
 800d8b8:	be8838d4 	.word	0xbe8838d4
 800d8bc:	bda8fae9 	.word	0xbda8fae9
 800d8c0:	bdb4b1c4 	.word	0xbdb4b1c4
 800d8c4:	3e21ee9e 	.word	0x3e21ee9e
 800d8c8:	809c52ad 	.word	0x809c52ad
 800d8cc:	3e927e4f 	.word	0x3e927e4f
 800d8d0:	19cb1590 	.word	0x19cb1590
 800d8d4:	3efa01a0 	.word	0x3efa01a0
 800d8d8:	16c15177 	.word	0x16c15177
 800d8dc:	3f56c16c 	.word	0x3f56c16c
 800d8e0:	5555554c 	.word	0x5555554c
 800d8e4:	3fa55555 	.word	0x3fa55555
 800d8e8:	3fe00000 	.word	0x3fe00000
 800d8ec:	3fd33332 	.word	0x3fd33332
 800d8f0:	3ff00000 	.word	0x3ff00000
 800d8f4:	3fe90000 	.word	0x3fe90000
 800d8f8:	3fd20000 	.word	0x3fd20000

0800d8fc <__kernel_rem_pio2>:
 800d8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d900:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d904:	9307      	str	r3, [sp, #28]
 800d906:	9104      	str	r1, [sp, #16]
 800d908:	4bbf      	ldr	r3, [pc, #764]	; (800dc08 <__kernel_rem_pio2+0x30c>)
 800d90a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800d90c:	1ed4      	subs	r4, r2, #3
 800d90e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d912:	2500      	movs	r5, #0
 800d914:	9302      	str	r3, [sp, #8]
 800d916:	9b07      	ldr	r3, [sp, #28]
 800d918:	9008      	str	r0, [sp, #32]
 800d91a:	3b01      	subs	r3, #1
 800d91c:	9306      	str	r3, [sp, #24]
 800d91e:	2318      	movs	r3, #24
 800d920:	fb94 f4f3 	sdiv	r4, r4, r3
 800d924:	f06f 0317 	mvn.w	r3, #23
 800d928:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800d92c:	fb04 3303 	mla	r3, r4, r3, r3
 800d930:	eb03 0a02 	add.w	sl, r3, r2
 800d934:	9a06      	ldr	r2, [sp, #24]
 800d936:	9b02      	ldr	r3, [sp, #8]
 800d938:	1aa7      	subs	r7, r4, r2
 800d93a:	eb03 0802 	add.w	r8, r3, r2
 800d93e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800d940:	2200      	movs	r2, #0
 800d942:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d946:	2300      	movs	r3, #0
 800d948:	ae1e      	add	r6, sp, #120	; 0x78
 800d94a:	4545      	cmp	r5, r8
 800d94c:	dd14      	ble.n	800d978 <__kernel_rem_pio2+0x7c>
 800d94e:	2600      	movs	r6, #0
 800d950:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800d954:	9b02      	ldr	r3, [sp, #8]
 800d956:	429e      	cmp	r6, r3
 800d958:	dc39      	bgt.n	800d9ce <__kernel_rem_pio2+0xd2>
 800d95a:	9b08      	ldr	r3, [sp, #32]
 800d95c:	f04f 0800 	mov.w	r8, #0
 800d960:	3b08      	subs	r3, #8
 800d962:	9300      	str	r3, [sp, #0]
 800d964:	9b07      	ldr	r3, [sp, #28]
 800d966:	f04f 0900 	mov.w	r9, #0
 800d96a:	199d      	adds	r5, r3, r6
 800d96c:	ab20      	add	r3, sp, #128	; 0x80
 800d96e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d972:	9305      	str	r3, [sp, #20]
 800d974:	2700      	movs	r7, #0
 800d976:	e023      	b.n	800d9c0 <__kernel_rem_pio2+0xc4>
 800d978:	42ef      	cmn	r7, r5
 800d97a:	d40b      	bmi.n	800d994 <__kernel_rem_pio2+0x98>
 800d97c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d980:	e9cd 2300 	strd	r2, r3, [sp]
 800d984:	f7f2 fd3e 	bl	8000404 <__aeabi_i2d>
 800d988:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d98c:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800d990:	3501      	adds	r5, #1
 800d992:	e7da      	b.n	800d94a <__kernel_rem_pio2+0x4e>
 800d994:	4610      	mov	r0, r2
 800d996:	4619      	mov	r1, r3
 800d998:	e7f8      	b.n	800d98c <__kernel_rem_pio2+0x90>
 800d99a:	9905      	ldr	r1, [sp, #20]
 800d99c:	9d00      	ldr	r5, [sp, #0]
 800d99e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800d9a2:	9105      	str	r1, [sp, #20]
 800d9a4:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800d9a8:	9500      	str	r5, [sp, #0]
 800d9aa:	f7f2 fd95 	bl	80004d8 <__aeabi_dmul>
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	4640      	mov	r0, r8
 800d9b4:	4649      	mov	r1, r9
 800d9b6:	f7f2 fbd9 	bl	800016c <__adddf3>
 800d9ba:	4680      	mov	r8, r0
 800d9bc:	4689      	mov	r9, r1
 800d9be:	3701      	adds	r7, #1
 800d9c0:	9b06      	ldr	r3, [sp, #24]
 800d9c2:	429f      	cmp	r7, r3
 800d9c4:	dde9      	ble.n	800d99a <__kernel_rem_pio2+0x9e>
 800d9c6:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800d9ca:	3601      	adds	r6, #1
 800d9cc:	e7c2      	b.n	800d954 <__kernel_rem_pio2+0x58>
 800d9ce:	9b02      	ldr	r3, [sp, #8]
 800d9d0:	aa0c      	add	r2, sp, #48	; 0x30
 800d9d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d9d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d9d8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800d9da:	9f02      	ldr	r7, [sp, #8]
 800d9dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d9e0:	930a      	str	r3, [sp, #40]	; 0x28
 800d9e2:	2600      	movs	r6, #0
 800d9e4:	ab98      	add	r3, sp, #608	; 0x260
 800d9e6:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800d9ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d9ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d9f2:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800d9f6:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800d9fa:	ab98      	add	r3, sp, #608	; 0x260
 800d9fc:	445b      	add	r3, fp
 800d9fe:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800da02:	1bbb      	subs	r3, r7, r6
 800da04:	2b00      	cmp	r3, #0
 800da06:	dc71      	bgt.n	800daec <__kernel_rem_pio2+0x1f0>
 800da08:	4652      	mov	r2, sl
 800da0a:	4640      	mov	r0, r8
 800da0c:	4649      	mov	r1, r9
 800da0e:	f000 fc03 	bl	800e218 <scalbn>
 800da12:	2200      	movs	r2, #0
 800da14:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800da18:	4604      	mov	r4, r0
 800da1a:	460d      	mov	r5, r1
 800da1c:	f7f2 fd5c 	bl	80004d8 <__aeabi_dmul>
 800da20:	f000 fb72 	bl	800e108 <floor>
 800da24:	2200      	movs	r2, #0
 800da26:	4b79      	ldr	r3, [pc, #484]	; (800dc0c <__kernel_rem_pio2+0x310>)
 800da28:	f7f2 fd56 	bl	80004d8 <__aeabi_dmul>
 800da2c:	4602      	mov	r2, r0
 800da2e:	460b      	mov	r3, r1
 800da30:	4620      	mov	r0, r4
 800da32:	4629      	mov	r1, r5
 800da34:	f7f2 fb98 	bl	8000168 <__aeabi_dsub>
 800da38:	460d      	mov	r5, r1
 800da3a:	4604      	mov	r4, r0
 800da3c:	f7f2 fffc 	bl	8000a38 <__aeabi_d2iz>
 800da40:	9005      	str	r0, [sp, #20]
 800da42:	f7f2 fcdf 	bl	8000404 <__aeabi_i2d>
 800da46:	4602      	mov	r2, r0
 800da48:	460b      	mov	r3, r1
 800da4a:	4620      	mov	r0, r4
 800da4c:	4629      	mov	r1, r5
 800da4e:	f7f2 fb8b 	bl	8000168 <__aeabi_dsub>
 800da52:	f1ba 0f00 	cmp.w	sl, #0
 800da56:	4680      	mov	r8, r0
 800da58:	4689      	mov	r9, r1
 800da5a:	dd6c      	ble.n	800db36 <__kernel_rem_pio2+0x23a>
 800da5c:	1e7a      	subs	r2, r7, #1
 800da5e:	ab0c      	add	r3, sp, #48	; 0x30
 800da60:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800da64:	f1ca 0118 	rsb	r1, sl, #24
 800da68:	9c05      	ldr	r4, [sp, #20]
 800da6a:	fa40 f301 	asr.w	r3, r0, r1
 800da6e:	441c      	add	r4, r3
 800da70:	408b      	lsls	r3, r1
 800da72:	1ac0      	subs	r0, r0, r3
 800da74:	ab0c      	add	r3, sp, #48	; 0x30
 800da76:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800da7a:	f1ca 0317 	rsb	r3, sl, #23
 800da7e:	9405      	str	r4, [sp, #20]
 800da80:	fa40 f303 	asr.w	r3, r0, r3
 800da84:	9300      	str	r3, [sp, #0]
 800da86:	9b00      	ldr	r3, [sp, #0]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	dd62      	ble.n	800db52 <__kernel_rem_pio2+0x256>
 800da8c:	2200      	movs	r2, #0
 800da8e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800da92:	4614      	mov	r4, r2
 800da94:	9b05      	ldr	r3, [sp, #20]
 800da96:	3301      	adds	r3, #1
 800da98:	9305      	str	r3, [sp, #20]
 800da9a:	4297      	cmp	r7, r2
 800da9c:	f300 809f 	bgt.w	800dbde <__kernel_rem_pio2+0x2e2>
 800daa0:	f1ba 0f00 	cmp.w	sl, #0
 800daa4:	dd07      	ble.n	800dab6 <__kernel_rem_pio2+0x1ba>
 800daa6:	f1ba 0f01 	cmp.w	sl, #1
 800daaa:	f000 80bb 	beq.w	800dc24 <__kernel_rem_pio2+0x328>
 800daae:	f1ba 0f02 	cmp.w	sl, #2
 800dab2:	f000 80c1 	beq.w	800dc38 <__kernel_rem_pio2+0x33c>
 800dab6:	9b00      	ldr	r3, [sp, #0]
 800dab8:	2b02      	cmp	r3, #2
 800daba:	d14a      	bne.n	800db52 <__kernel_rem_pio2+0x256>
 800dabc:	4642      	mov	r2, r8
 800dabe:	464b      	mov	r3, r9
 800dac0:	2000      	movs	r0, #0
 800dac2:	4953      	ldr	r1, [pc, #332]	; (800dc10 <__kernel_rem_pio2+0x314>)
 800dac4:	f7f2 fb50 	bl	8000168 <__aeabi_dsub>
 800dac8:	4680      	mov	r8, r0
 800daca:	4689      	mov	r9, r1
 800dacc:	2c00      	cmp	r4, #0
 800dace:	d040      	beq.n	800db52 <__kernel_rem_pio2+0x256>
 800dad0:	4652      	mov	r2, sl
 800dad2:	2000      	movs	r0, #0
 800dad4:	494e      	ldr	r1, [pc, #312]	; (800dc10 <__kernel_rem_pio2+0x314>)
 800dad6:	f000 fb9f 	bl	800e218 <scalbn>
 800dada:	4602      	mov	r2, r0
 800dadc:	460b      	mov	r3, r1
 800dade:	4640      	mov	r0, r8
 800dae0:	4649      	mov	r1, r9
 800dae2:	f7f2 fb41 	bl	8000168 <__aeabi_dsub>
 800dae6:	4680      	mov	r8, r0
 800dae8:	4689      	mov	r9, r1
 800daea:	e032      	b.n	800db52 <__kernel_rem_pio2+0x256>
 800daec:	2200      	movs	r2, #0
 800daee:	4b49      	ldr	r3, [pc, #292]	; (800dc14 <__kernel_rem_pio2+0x318>)
 800daf0:	4640      	mov	r0, r8
 800daf2:	4649      	mov	r1, r9
 800daf4:	f7f2 fcf0 	bl	80004d8 <__aeabi_dmul>
 800daf8:	f7f2 ff9e 	bl	8000a38 <__aeabi_d2iz>
 800dafc:	f7f2 fc82 	bl	8000404 <__aeabi_i2d>
 800db00:	2200      	movs	r2, #0
 800db02:	4b45      	ldr	r3, [pc, #276]	; (800dc18 <__kernel_rem_pio2+0x31c>)
 800db04:	e9cd 0100 	strd	r0, r1, [sp]
 800db08:	f7f2 fce6 	bl	80004d8 <__aeabi_dmul>
 800db0c:	4602      	mov	r2, r0
 800db0e:	460b      	mov	r3, r1
 800db10:	4640      	mov	r0, r8
 800db12:	4649      	mov	r1, r9
 800db14:	f7f2 fb28 	bl	8000168 <__aeabi_dsub>
 800db18:	f7f2 ff8e 	bl	8000a38 <__aeabi_d2iz>
 800db1c:	ab0c      	add	r3, sp, #48	; 0x30
 800db1e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800db22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800db26:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db2a:	f7f2 fb1f 	bl	800016c <__adddf3>
 800db2e:	3601      	adds	r6, #1
 800db30:	4680      	mov	r8, r0
 800db32:	4689      	mov	r9, r1
 800db34:	e765      	b.n	800da02 <__kernel_rem_pio2+0x106>
 800db36:	d105      	bne.n	800db44 <__kernel_rem_pio2+0x248>
 800db38:	1e7b      	subs	r3, r7, #1
 800db3a:	aa0c      	add	r2, sp, #48	; 0x30
 800db3c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800db40:	15c3      	asrs	r3, r0, #23
 800db42:	e79f      	b.n	800da84 <__kernel_rem_pio2+0x188>
 800db44:	2200      	movs	r2, #0
 800db46:	4b35      	ldr	r3, [pc, #212]	; (800dc1c <__kernel_rem_pio2+0x320>)
 800db48:	f7f2 ff4c 	bl	80009e4 <__aeabi_dcmpge>
 800db4c:	2800      	cmp	r0, #0
 800db4e:	d143      	bne.n	800dbd8 <__kernel_rem_pio2+0x2dc>
 800db50:	9000      	str	r0, [sp, #0]
 800db52:	2200      	movs	r2, #0
 800db54:	2300      	movs	r3, #0
 800db56:	4640      	mov	r0, r8
 800db58:	4649      	mov	r1, r9
 800db5a:	f7f2 ff25 	bl	80009a8 <__aeabi_dcmpeq>
 800db5e:	2800      	cmp	r0, #0
 800db60:	f000 80c3 	beq.w	800dcea <__kernel_rem_pio2+0x3ee>
 800db64:	1e7c      	subs	r4, r7, #1
 800db66:	4623      	mov	r3, r4
 800db68:	2200      	movs	r2, #0
 800db6a:	9902      	ldr	r1, [sp, #8]
 800db6c:	428b      	cmp	r3, r1
 800db6e:	da6a      	bge.n	800dc46 <__kernel_rem_pio2+0x34a>
 800db70:	2a00      	cmp	r2, #0
 800db72:	f000 8084 	beq.w	800dc7e <__kernel_rem_pio2+0x382>
 800db76:	ab0c      	add	r3, sp, #48	; 0x30
 800db78:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800db7c:	f1aa 0a18 	sub.w	sl, sl, #24
 800db80:	2b00      	cmp	r3, #0
 800db82:	f000 80b0 	beq.w	800dce6 <__kernel_rem_pio2+0x3ea>
 800db86:	4652      	mov	r2, sl
 800db88:	2000      	movs	r0, #0
 800db8a:	4921      	ldr	r1, [pc, #132]	; (800dc10 <__kernel_rem_pio2+0x314>)
 800db8c:	f000 fb44 	bl	800e218 <scalbn>
 800db90:	4625      	mov	r5, r4
 800db92:	4606      	mov	r6, r0
 800db94:	460f      	mov	r7, r1
 800db96:	f04f 0a00 	mov.w	sl, #0
 800db9a:	00e3      	lsls	r3, r4, #3
 800db9c:	aa98      	add	r2, sp, #608	; 0x260
 800db9e:	eb02 0803 	add.w	r8, r2, r3
 800dba2:	f8df b070 	ldr.w	fp, [pc, #112]	; 800dc14 <__kernel_rem_pio2+0x318>
 800dba6:	9306      	str	r3, [sp, #24]
 800dba8:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800dbac:	2d00      	cmp	r5, #0
 800dbae:	f280 80d2 	bge.w	800dd56 <__kernel_rem_pio2+0x45a>
 800dbb2:	2500      	movs	r5, #0
 800dbb4:	9a06      	ldr	r2, [sp, #24]
 800dbb6:	ab98      	add	r3, sp, #608	; 0x260
 800dbb8:	189e      	adds	r6, r3, r2
 800dbba:	3ea8      	subs	r6, #168	; 0xa8
 800dbbc:	1b63      	subs	r3, r4, r5
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	f2c0 80f9 	blt.w	800ddb6 <__kernel_rem_pio2+0x4ba>
 800dbc4:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800dc20 <__kernel_rem_pio2+0x324>
 800dbc8:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800dbcc:	f04f 0a00 	mov.w	sl, #0
 800dbd0:	f04f 0b00 	mov.w	fp, #0
 800dbd4:	2700      	movs	r7, #0
 800dbd6:	e0e2      	b.n	800dd9e <__kernel_rem_pio2+0x4a2>
 800dbd8:	2302      	movs	r3, #2
 800dbda:	9300      	str	r3, [sp, #0]
 800dbdc:	e756      	b.n	800da8c <__kernel_rem_pio2+0x190>
 800dbde:	ab0c      	add	r3, sp, #48	; 0x30
 800dbe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbe4:	b94c      	cbnz	r4, 800dbfa <__kernel_rem_pio2+0x2fe>
 800dbe6:	b12b      	cbz	r3, 800dbf4 <__kernel_rem_pio2+0x2f8>
 800dbe8:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800dbec:	a80c      	add	r0, sp, #48	; 0x30
 800dbee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	3201      	adds	r2, #1
 800dbf6:	461c      	mov	r4, r3
 800dbf8:	e74f      	b.n	800da9a <__kernel_rem_pio2+0x19e>
 800dbfa:	1acb      	subs	r3, r1, r3
 800dbfc:	a80c      	add	r0, sp, #48	; 0x30
 800dbfe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800dc02:	4623      	mov	r3, r4
 800dc04:	e7f6      	b.n	800dbf4 <__kernel_rem_pio2+0x2f8>
 800dc06:	bf00      	nop
 800dc08:	0800f550 	.word	0x0800f550
 800dc0c:	40200000 	.word	0x40200000
 800dc10:	3ff00000 	.word	0x3ff00000
 800dc14:	3e700000 	.word	0x3e700000
 800dc18:	41700000 	.word	0x41700000
 800dc1c:	3fe00000 	.word	0x3fe00000
 800dc20:	0800f508 	.word	0x0800f508
 800dc24:	1e7a      	subs	r2, r7, #1
 800dc26:	ab0c      	add	r3, sp, #48	; 0x30
 800dc28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc2c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dc30:	a90c      	add	r1, sp, #48	; 0x30
 800dc32:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800dc36:	e73e      	b.n	800dab6 <__kernel_rem_pio2+0x1ba>
 800dc38:	1e7a      	subs	r2, r7, #1
 800dc3a:	ab0c      	add	r3, sp, #48	; 0x30
 800dc3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc40:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800dc44:	e7f4      	b.n	800dc30 <__kernel_rem_pio2+0x334>
 800dc46:	a90c      	add	r1, sp, #48	; 0x30
 800dc48:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800dc4c:	3b01      	subs	r3, #1
 800dc4e:	430a      	orrs	r2, r1
 800dc50:	e78b      	b.n	800db6a <__kernel_rem_pio2+0x26e>
 800dc52:	3401      	adds	r4, #1
 800dc54:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dc58:	2a00      	cmp	r2, #0
 800dc5a:	d0fa      	beq.n	800dc52 <__kernel_rem_pio2+0x356>
 800dc5c:	ab98      	add	r3, sp, #608	; 0x260
 800dc5e:	449b      	add	fp, r3
 800dc60:	9b07      	ldr	r3, [sp, #28]
 800dc62:	1c7e      	adds	r6, r7, #1
 800dc64:	19dd      	adds	r5, r3, r7
 800dc66:	ab98      	add	r3, sp, #608	; 0x260
 800dc68:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800dc6c:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800dc70:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800dc74:	443c      	add	r4, r7
 800dc76:	42b4      	cmp	r4, r6
 800dc78:	da04      	bge.n	800dc84 <__kernel_rem_pio2+0x388>
 800dc7a:	4627      	mov	r7, r4
 800dc7c:	e6b1      	b.n	800d9e2 <__kernel_rem_pio2+0xe6>
 800dc7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc80:	2401      	movs	r4, #1
 800dc82:	e7e7      	b.n	800dc54 <__kernel_rem_pio2+0x358>
 800dc84:	f105 0308 	add.w	r3, r5, #8
 800dc88:	9309      	str	r3, [sp, #36]	; 0x24
 800dc8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc8c:	2700      	movs	r7, #0
 800dc8e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dc92:	f7f2 fbb7 	bl	8000404 <__aeabi_i2d>
 800dc96:	f04f 0800 	mov.w	r8, #0
 800dc9a:	f04f 0900 	mov.w	r9, #0
 800dc9e:	9b08      	ldr	r3, [sp, #32]
 800dca0:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800dca4:	3b08      	subs	r3, #8
 800dca6:	9300      	str	r3, [sp, #0]
 800dca8:	f105 0310 	add.w	r3, r5, #16
 800dcac:	9305      	str	r3, [sp, #20]
 800dcae:	9b06      	ldr	r3, [sp, #24]
 800dcb0:	429f      	cmp	r7, r3
 800dcb2:	dd04      	ble.n	800dcbe <__kernel_rem_pio2+0x3c2>
 800dcb4:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800dcb8:	3601      	adds	r6, #1
 800dcba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dcbc:	e7db      	b.n	800dc76 <__kernel_rem_pio2+0x37a>
 800dcbe:	9905      	ldr	r1, [sp, #20]
 800dcc0:	9d00      	ldr	r5, [sp, #0]
 800dcc2:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800dcc6:	9105      	str	r1, [sp, #20]
 800dcc8:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800dccc:	9500      	str	r5, [sp, #0]
 800dcce:	f7f2 fc03 	bl	80004d8 <__aeabi_dmul>
 800dcd2:	4602      	mov	r2, r0
 800dcd4:	460b      	mov	r3, r1
 800dcd6:	4640      	mov	r0, r8
 800dcd8:	4649      	mov	r1, r9
 800dcda:	f7f2 fa47 	bl	800016c <__adddf3>
 800dcde:	3701      	adds	r7, #1
 800dce0:	4680      	mov	r8, r0
 800dce2:	4689      	mov	r9, r1
 800dce4:	e7e3      	b.n	800dcae <__kernel_rem_pio2+0x3b2>
 800dce6:	3c01      	subs	r4, #1
 800dce8:	e745      	b.n	800db76 <__kernel_rem_pio2+0x27a>
 800dcea:	f1ca 0200 	rsb	r2, sl, #0
 800dcee:	4640      	mov	r0, r8
 800dcf0:	4649      	mov	r1, r9
 800dcf2:	f000 fa91 	bl	800e218 <scalbn>
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	4ba3      	ldr	r3, [pc, #652]	; (800df88 <__kernel_rem_pio2+0x68c>)
 800dcfa:	4604      	mov	r4, r0
 800dcfc:	460d      	mov	r5, r1
 800dcfe:	f7f2 fe71 	bl	80009e4 <__aeabi_dcmpge>
 800dd02:	b1f8      	cbz	r0, 800dd44 <__kernel_rem_pio2+0x448>
 800dd04:	2200      	movs	r2, #0
 800dd06:	4ba1      	ldr	r3, [pc, #644]	; (800df8c <__kernel_rem_pio2+0x690>)
 800dd08:	4620      	mov	r0, r4
 800dd0a:	4629      	mov	r1, r5
 800dd0c:	f7f2 fbe4 	bl	80004d8 <__aeabi_dmul>
 800dd10:	f7f2 fe92 	bl	8000a38 <__aeabi_d2iz>
 800dd14:	4606      	mov	r6, r0
 800dd16:	f7f2 fb75 	bl	8000404 <__aeabi_i2d>
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	4b9a      	ldr	r3, [pc, #616]	; (800df88 <__kernel_rem_pio2+0x68c>)
 800dd1e:	f7f2 fbdb 	bl	80004d8 <__aeabi_dmul>
 800dd22:	460b      	mov	r3, r1
 800dd24:	4602      	mov	r2, r0
 800dd26:	4629      	mov	r1, r5
 800dd28:	4620      	mov	r0, r4
 800dd2a:	f7f2 fa1d 	bl	8000168 <__aeabi_dsub>
 800dd2e:	f7f2 fe83 	bl	8000a38 <__aeabi_d2iz>
 800dd32:	1c7c      	adds	r4, r7, #1
 800dd34:	ab0c      	add	r3, sp, #48	; 0x30
 800dd36:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800dd3a:	f10a 0a18 	add.w	sl, sl, #24
 800dd3e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800dd42:	e720      	b.n	800db86 <__kernel_rem_pio2+0x28a>
 800dd44:	4620      	mov	r0, r4
 800dd46:	4629      	mov	r1, r5
 800dd48:	f7f2 fe76 	bl	8000a38 <__aeabi_d2iz>
 800dd4c:	ab0c      	add	r3, sp, #48	; 0x30
 800dd4e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800dd52:	463c      	mov	r4, r7
 800dd54:	e717      	b.n	800db86 <__kernel_rem_pio2+0x28a>
 800dd56:	ab0c      	add	r3, sp, #48	; 0x30
 800dd58:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dd5c:	f7f2 fb52 	bl	8000404 <__aeabi_i2d>
 800dd60:	4632      	mov	r2, r6
 800dd62:	463b      	mov	r3, r7
 800dd64:	f7f2 fbb8 	bl	80004d8 <__aeabi_dmul>
 800dd68:	4652      	mov	r2, sl
 800dd6a:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800dd6e:	465b      	mov	r3, fp
 800dd70:	4630      	mov	r0, r6
 800dd72:	4639      	mov	r1, r7
 800dd74:	f7f2 fbb0 	bl	80004d8 <__aeabi_dmul>
 800dd78:	3d01      	subs	r5, #1
 800dd7a:	4606      	mov	r6, r0
 800dd7c:	460f      	mov	r7, r1
 800dd7e:	e715      	b.n	800dbac <__kernel_rem_pio2+0x2b0>
 800dd80:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800dd84:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800dd88:	f7f2 fba6 	bl	80004d8 <__aeabi_dmul>
 800dd8c:	4602      	mov	r2, r0
 800dd8e:	460b      	mov	r3, r1
 800dd90:	4650      	mov	r0, sl
 800dd92:	4659      	mov	r1, fp
 800dd94:	f7f2 f9ea 	bl	800016c <__adddf3>
 800dd98:	4682      	mov	sl, r0
 800dd9a:	468b      	mov	fp, r1
 800dd9c:	3701      	adds	r7, #1
 800dd9e:	9b02      	ldr	r3, [sp, #8]
 800dda0:	429f      	cmp	r7, r3
 800dda2:	dc01      	bgt.n	800dda8 <__kernel_rem_pio2+0x4ac>
 800dda4:	42bd      	cmp	r5, r7
 800dda6:	daeb      	bge.n	800dd80 <__kernel_rem_pio2+0x484>
 800dda8:	ab48      	add	r3, sp, #288	; 0x120
 800ddaa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ddae:	e9c3 ab00 	strd	sl, fp, [r3]
 800ddb2:	3501      	adds	r5, #1
 800ddb4:	e702      	b.n	800dbbc <__kernel_rem_pio2+0x2c0>
 800ddb6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800ddb8:	2b03      	cmp	r3, #3
 800ddba:	d86c      	bhi.n	800de96 <__kernel_rem_pio2+0x59a>
 800ddbc:	e8df f003 	tbb	[pc, r3]
 800ddc0:	022f2f59 	.word	0x022f2f59
 800ddc4:	9a06      	ldr	r2, [sp, #24]
 800ddc6:	ab48      	add	r3, sp, #288	; 0x120
 800ddc8:	189d      	adds	r5, r3, r2
 800ddca:	46aa      	mov	sl, r5
 800ddcc:	46a3      	mov	fp, r4
 800ddce:	f1bb 0f00 	cmp.w	fp, #0
 800ddd2:	f300 8087 	bgt.w	800dee4 <__kernel_rem_pio2+0x5e8>
 800ddd6:	46a2      	mov	sl, r4
 800ddd8:	f1ba 0f01 	cmp.w	sl, #1
 800dddc:	f300 809f 	bgt.w	800df1e <__kernel_rem_pio2+0x622>
 800dde0:	2700      	movs	r7, #0
 800dde2:	463e      	mov	r6, r7
 800dde4:	9d06      	ldr	r5, [sp, #24]
 800dde6:	ab48      	add	r3, sp, #288	; 0x120
 800dde8:	3508      	adds	r5, #8
 800ddea:	441d      	add	r5, r3
 800ddec:	2c01      	cmp	r4, #1
 800ddee:	f300 80b3 	bgt.w	800df58 <__kernel_rem_pio2+0x65c>
 800ddf2:	9b00      	ldr	r3, [sp, #0]
 800ddf4:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800ddf6:	9849      	ldr	r0, [sp, #292]	; 0x124
 800ddf8:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800ddfa:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	f040 80b5 	bne.w	800df6c <__kernel_rem_pio2+0x670>
 800de02:	4603      	mov	r3, r0
 800de04:	462a      	mov	r2, r5
 800de06:	9804      	ldr	r0, [sp, #16]
 800de08:	e9c0 2300 	strd	r2, r3, [r0]
 800de0c:	4622      	mov	r2, r4
 800de0e:	460b      	mov	r3, r1
 800de10:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800de14:	463a      	mov	r2, r7
 800de16:	4633      	mov	r3, r6
 800de18:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800de1c:	e03b      	b.n	800de96 <__kernel_rem_pio2+0x59a>
 800de1e:	f04f 0c00 	mov.w	ip, #0
 800de22:	4626      	mov	r6, r4
 800de24:	4667      	mov	r7, ip
 800de26:	9d06      	ldr	r5, [sp, #24]
 800de28:	ab48      	add	r3, sp, #288	; 0x120
 800de2a:	3508      	adds	r5, #8
 800de2c:	441d      	add	r5, r3
 800de2e:	2e00      	cmp	r6, #0
 800de30:	da42      	bge.n	800deb8 <__kernel_rem_pio2+0x5bc>
 800de32:	9b00      	ldr	r3, [sp, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d049      	beq.n	800decc <__kernel_rem_pio2+0x5d0>
 800de38:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800de3c:	4662      	mov	r2, ip
 800de3e:	460b      	mov	r3, r1
 800de40:	9904      	ldr	r1, [sp, #16]
 800de42:	2601      	movs	r6, #1
 800de44:	e9c1 2300 	strd	r2, r3, [r1]
 800de48:	a948      	add	r1, sp, #288	; 0x120
 800de4a:	463b      	mov	r3, r7
 800de4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de50:	f7f2 f98a 	bl	8000168 <__aeabi_dsub>
 800de54:	4684      	mov	ip, r0
 800de56:	460f      	mov	r7, r1
 800de58:	ad48      	add	r5, sp, #288	; 0x120
 800de5a:	42b4      	cmp	r4, r6
 800de5c:	da38      	bge.n	800ded0 <__kernel_rem_pio2+0x5d4>
 800de5e:	9b00      	ldr	r3, [sp, #0]
 800de60:	b10b      	cbz	r3, 800de66 <__kernel_rem_pio2+0x56a>
 800de62:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800de66:	4662      	mov	r2, ip
 800de68:	463b      	mov	r3, r7
 800de6a:	9904      	ldr	r1, [sp, #16]
 800de6c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800de70:	e011      	b.n	800de96 <__kernel_rem_pio2+0x59a>
 800de72:	2700      	movs	r7, #0
 800de74:	463d      	mov	r5, r7
 800de76:	9b06      	ldr	r3, [sp, #24]
 800de78:	aa98      	add	r2, sp, #608	; 0x260
 800de7a:	4413      	add	r3, r2
 800de7c:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800de80:	2c00      	cmp	r4, #0
 800de82:	da0f      	bge.n	800dea4 <__kernel_rem_pio2+0x5a8>
 800de84:	9b00      	ldr	r3, [sp, #0]
 800de86:	b10b      	cbz	r3, 800de8c <__kernel_rem_pio2+0x590>
 800de88:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800de8c:	463a      	mov	r2, r7
 800de8e:	462b      	mov	r3, r5
 800de90:	9904      	ldr	r1, [sp, #16]
 800de92:	e9c1 2300 	strd	r2, r3, [r1]
 800de96:	9b05      	ldr	r3, [sp, #20]
 800de98:	f003 0007 	and.w	r0, r3, #7
 800de9c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800dea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dea4:	4638      	mov	r0, r7
 800dea6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800deaa:	4629      	mov	r1, r5
 800deac:	f7f2 f95e 	bl	800016c <__adddf3>
 800deb0:	3c01      	subs	r4, #1
 800deb2:	4607      	mov	r7, r0
 800deb4:	460d      	mov	r5, r1
 800deb6:	e7e3      	b.n	800de80 <__kernel_rem_pio2+0x584>
 800deb8:	4660      	mov	r0, ip
 800deba:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800debe:	4639      	mov	r1, r7
 800dec0:	f7f2 f954 	bl	800016c <__adddf3>
 800dec4:	3e01      	subs	r6, #1
 800dec6:	4684      	mov	ip, r0
 800dec8:	460f      	mov	r7, r1
 800deca:	e7b0      	b.n	800de2e <__kernel_rem_pio2+0x532>
 800decc:	4639      	mov	r1, r7
 800dece:	e7b5      	b.n	800de3c <__kernel_rem_pio2+0x540>
 800ded0:	4660      	mov	r0, ip
 800ded2:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800ded6:	4639      	mov	r1, r7
 800ded8:	f7f2 f948 	bl	800016c <__adddf3>
 800dedc:	3601      	adds	r6, #1
 800dede:	4684      	mov	ip, r0
 800dee0:	460f      	mov	r7, r1
 800dee2:	e7ba      	b.n	800de5a <__kernel_rem_pio2+0x55e>
 800dee4:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800dee8:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800deec:	4640      	mov	r0, r8
 800deee:	4649      	mov	r1, r9
 800def0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800def4:	f7f2 f93a 	bl	800016c <__adddf3>
 800def8:	4602      	mov	r2, r0
 800defa:	460b      	mov	r3, r1
 800defc:	4606      	mov	r6, r0
 800defe:	460f      	mov	r7, r1
 800df00:	4640      	mov	r0, r8
 800df02:	4649      	mov	r1, r9
 800df04:	f7f2 f930 	bl	8000168 <__aeabi_dsub>
 800df08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800df0c:	f7f2 f92e 	bl	800016c <__adddf3>
 800df10:	f10b 3bff 	add.w	fp, fp, #4294967295
 800df14:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800df18:	e9ca 6700 	strd	r6, r7, [sl]
 800df1c:	e757      	b.n	800ddce <__kernel_rem_pio2+0x4d2>
 800df1e:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800df22:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800df26:	4630      	mov	r0, r6
 800df28:	4639      	mov	r1, r7
 800df2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800df2e:	f7f2 f91d 	bl	800016c <__adddf3>
 800df32:	4602      	mov	r2, r0
 800df34:	460b      	mov	r3, r1
 800df36:	4680      	mov	r8, r0
 800df38:	4689      	mov	r9, r1
 800df3a:	4630      	mov	r0, r6
 800df3c:	4639      	mov	r1, r7
 800df3e:	f7f2 f913 	bl	8000168 <__aeabi_dsub>
 800df42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800df46:	f7f2 f911 	bl	800016c <__adddf3>
 800df4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df4e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800df52:	e9c5 8900 	strd	r8, r9, [r5]
 800df56:	e73f      	b.n	800ddd8 <__kernel_rem_pio2+0x4dc>
 800df58:	4638      	mov	r0, r7
 800df5a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800df5e:	4631      	mov	r1, r6
 800df60:	f7f2 f904 	bl	800016c <__adddf3>
 800df64:	3c01      	subs	r4, #1
 800df66:	4607      	mov	r7, r0
 800df68:	460e      	mov	r6, r1
 800df6a:	e73f      	b.n	800ddec <__kernel_rem_pio2+0x4f0>
 800df6c:	9b04      	ldr	r3, [sp, #16]
 800df6e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800df72:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800df76:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800df7a:	601d      	str	r5, [r3, #0]
 800df7c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800df80:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800df84:	615e      	str	r6, [r3, #20]
 800df86:	e786      	b.n	800de96 <__kernel_rem_pio2+0x59a>
 800df88:	41700000 	.word	0x41700000
 800df8c:	3e700000 	.word	0x3e700000

0800df90 <__kernel_sin>:
 800df90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df94:	b086      	sub	sp, #24
 800df96:	e9cd 2300 	strd	r2, r3, [sp]
 800df9a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df9e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800dfa2:	4682      	mov	sl, r0
 800dfa4:	460c      	mov	r4, r1
 800dfa6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800dfa8:	da03      	bge.n	800dfb2 <__kernel_sin+0x22>
 800dfaa:	f7f2 fd45 	bl	8000a38 <__aeabi_d2iz>
 800dfae:	2800      	cmp	r0, #0
 800dfb0:	d050      	beq.n	800e054 <__kernel_sin+0xc4>
 800dfb2:	4652      	mov	r2, sl
 800dfb4:	4623      	mov	r3, r4
 800dfb6:	4650      	mov	r0, sl
 800dfb8:	4621      	mov	r1, r4
 800dfba:	f7f2 fa8d 	bl	80004d8 <__aeabi_dmul>
 800dfbe:	4606      	mov	r6, r0
 800dfc0:	460f      	mov	r7, r1
 800dfc2:	4602      	mov	r2, r0
 800dfc4:	460b      	mov	r3, r1
 800dfc6:	4650      	mov	r0, sl
 800dfc8:	4621      	mov	r1, r4
 800dfca:	f7f2 fa85 	bl	80004d8 <__aeabi_dmul>
 800dfce:	a33e      	add	r3, pc, #248	; (adr r3, 800e0c8 <__kernel_sin+0x138>)
 800dfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd4:	4680      	mov	r8, r0
 800dfd6:	4689      	mov	r9, r1
 800dfd8:	4630      	mov	r0, r6
 800dfda:	4639      	mov	r1, r7
 800dfdc:	f7f2 fa7c 	bl	80004d8 <__aeabi_dmul>
 800dfe0:	a33b      	add	r3, pc, #236	; (adr r3, 800e0d0 <__kernel_sin+0x140>)
 800dfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe6:	f7f2 f8bf 	bl	8000168 <__aeabi_dsub>
 800dfea:	4632      	mov	r2, r6
 800dfec:	463b      	mov	r3, r7
 800dfee:	f7f2 fa73 	bl	80004d8 <__aeabi_dmul>
 800dff2:	a339      	add	r3, pc, #228	; (adr r3, 800e0d8 <__kernel_sin+0x148>)
 800dff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff8:	f7f2 f8b8 	bl	800016c <__adddf3>
 800dffc:	4632      	mov	r2, r6
 800dffe:	463b      	mov	r3, r7
 800e000:	f7f2 fa6a 	bl	80004d8 <__aeabi_dmul>
 800e004:	a336      	add	r3, pc, #216	; (adr r3, 800e0e0 <__kernel_sin+0x150>)
 800e006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e00a:	f7f2 f8ad 	bl	8000168 <__aeabi_dsub>
 800e00e:	4632      	mov	r2, r6
 800e010:	463b      	mov	r3, r7
 800e012:	f7f2 fa61 	bl	80004d8 <__aeabi_dmul>
 800e016:	a334      	add	r3, pc, #208	; (adr r3, 800e0e8 <__kernel_sin+0x158>)
 800e018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01c:	f7f2 f8a6 	bl	800016c <__adddf3>
 800e020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e024:	b9dd      	cbnz	r5, 800e05e <__kernel_sin+0xce>
 800e026:	4602      	mov	r2, r0
 800e028:	460b      	mov	r3, r1
 800e02a:	4630      	mov	r0, r6
 800e02c:	4639      	mov	r1, r7
 800e02e:	f7f2 fa53 	bl	80004d8 <__aeabi_dmul>
 800e032:	a32f      	add	r3, pc, #188	; (adr r3, 800e0f0 <__kernel_sin+0x160>)
 800e034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e038:	f7f2 f896 	bl	8000168 <__aeabi_dsub>
 800e03c:	4642      	mov	r2, r8
 800e03e:	464b      	mov	r3, r9
 800e040:	f7f2 fa4a 	bl	80004d8 <__aeabi_dmul>
 800e044:	4602      	mov	r2, r0
 800e046:	460b      	mov	r3, r1
 800e048:	4650      	mov	r0, sl
 800e04a:	4621      	mov	r1, r4
 800e04c:	f7f2 f88e 	bl	800016c <__adddf3>
 800e050:	4682      	mov	sl, r0
 800e052:	460c      	mov	r4, r1
 800e054:	4650      	mov	r0, sl
 800e056:	4621      	mov	r1, r4
 800e058:	b006      	add	sp, #24
 800e05a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e05e:	2200      	movs	r2, #0
 800e060:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e064:	4b24      	ldr	r3, [pc, #144]	; (800e0f8 <__kernel_sin+0x168>)
 800e066:	f7f2 fa37 	bl	80004d8 <__aeabi_dmul>
 800e06a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e06e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e072:	4640      	mov	r0, r8
 800e074:	4649      	mov	r1, r9
 800e076:	f7f2 fa2f 	bl	80004d8 <__aeabi_dmul>
 800e07a:	4602      	mov	r2, r0
 800e07c:	460b      	mov	r3, r1
 800e07e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e082:	f7f2 f871 	bl	8000168 <__aeabi_dsub>
 800e086:	4632      	mov	r2, r6
 800e088:	463b      	mov	r3, r7
 800e08a:	f7f2 fa25 	bl	80004d8 <__aeabi_dmul>
 800e08e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e092:	f7f2 f869 	bl	8000168 <__aeabi_dsub>
 800e096:	a316      	add	r3, pc, #88	; (adr r3, 800e0f0 <__kernel_sin+0x160>)
 800e098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e09c:	4606      	mov	r6, r0
 800e09e:	460f      	mov	r7, r1
 800e0a0:	4640      	mov	r0, r8
 800e0a2:	4649      	mov	r1, r9
 800e0a4:	f7f2 fa18 	bl	80004d8 <__aeabi_dmul>
 800e0a8:	4602      	mov	r2, r0
 800e0aa:	460b      	mov	r3, r1
 800e0ac:	4630      	mov	r0, r6
 800e0ae:	4639      	mov	r1, r7
 800e0b0:	f7f2 f85c 	bl	800016c <__adddf3>
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	460b      	mov	r3, r1
 800e0b8:	4650      	mov	r0, sl
 800e0ba:	4621      	mov	r1, r4
 800e0bc:	f7f2 f854 	bl	8000168 <__aeabi_dsub>
 800e0c0:	e7c6      	b.n	800e050 <__kernel_sin+0xc0>
 800e0c2:	bf00      	nop
 800e0c4:	f3af 8000 	nop.w
 800e0c8:	5acfd57c 	.word	0x5acfd57c
 800e0cc:	3de5d93a 	.word	0x3de5d93a
 800e0d0:	8a2b9ceb 	.word	0x8a2b9ceb
 800e0d4:	3e5ae5e6 	.word	0x3e5ae5e6
 800e0d8:	57b1fe7d 	.word	0x57b1fe7d
 800e0dc:	3ec71de3 	.word	0x3ec71de3
 800e0e0:	19c161d5 	.word	0x19c161d5
 800e0e4:	3f2a01a0 	.word	0x3f2a01a0
 800e0e8:	1110f8a6 	.word	0x1110f8a6
 800e0ec:	3f811111 	.word	0x3f811111
 800e0f0:	55555549 	.word	0x55555549
 800e0f4:	3fc55555 	.word	0x3fc55555
 800e0f8:	3fe00000 	.word	0x3fe00000

0800e0fc <fabs>:
 800e0fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e100:	4619      	mov	r1, r3
 800e102:	4770      	bx	lr
 800e104:	0000      	movs	r0, r0
	...

0800e108 <floor>:
 800e108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e10c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800e110:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800e114:	2e13      	cmp	r6, #19
 800e116:	4607      	mov	r7, r0
 800e118:	460b      	mov	r3, r1
 800e11a:	460c      	mov	r4, r1
 800e11c:	4605      	mov	r5, r0
 800e11e:	dc35      	bgt.n	800e18c <floor+0x84>
 800e120:	2e00      	cmp	r6, #0
 800e122:	da16      	bge.n	800e152 <floor+0x4a>
 800e124:	a336      	add	r3, pc, #216	; (adr r3, 800e200 <floor+0xf8>)
 800e126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12a:	f7f2 f81f 	bl	800016c <__adddf3>
 800e12e:	2200      	movs	r2, #0
 800e130:	2300      	movs	r3, #0
 800e132:	f7f2 fc61 	bl	80009f8 <__aeabi_dcmpgt>
 800e136:	b148      	cbz	r0, 800e14c <floor+0x44>
 800e138:	2c00      	cmp	r4, #0
 800e13a:	da5b      	bge.n	800e1f4 <floor+0xec>
 800e13c:	2500      	movs	r5, #0
 800e13e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e142:	4a31      	ldr	r2, [pc, #196]	; (800e208 <floor+0x100>)
 800e144:	433b      	orrs	r3, r7
 800e146:	42ab      	cmp	r3, r5
 800e148:	bf18      	it	ne
 800e14a:	4614      	movne	r4, r2
 800e14c:	4623      	mov	r3, r4
 800e14e:	462f      	mov	r7, r5
 800e150:	e026      	b.n	800e1a0 <floor+0x98>
 800e152:	4a2e      	ldr	r2, [pc, #184]	; (800e20c <floor+0x104>)
 800e154:	fa42 f806 	asr.w	r8, r2, r6
 800e158:	ea01 0208 	and.w	r2, r1, r8
 800e15c:	4302      	orrs	r2, r0
 800e15e:	d01f      	beq.n	800e1a0 <floor+0x98>
 800e160:	a327      	add	r3, pc, #156	; (adr r3, 800e200 <floor+0xf8>)
 800e162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e166:	f7f2 f801 	bl	800016c <__adddf3>
 800e16a:	2200      	movs	r2, #0
 800e16c:	2300      	movs	r3, #0
 800e16e:	f7f2 fc43 	bl	80009f8 <__aeabi_dcmpgt>
 800e172:	2800      	cmp	r0, #0
 800e174:	d0ea      	beq.n	800e14c <floor+0x44>
 800e176:	2c00      	cmp	r4, #0
 800e178:	bfbe      	ittt	lt
 800e17a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e17e:	fa43 f606 	asrlt.w	r6, r3, r6
 800e182:	19a4      	addlt	r4, r4, r6
 800e184:	ea24 0408 	bic.w	r4, r4, r8
 800e188:	2500      	movs	r5, #0
 800e18a:	e7df      	b.n	800e14c <floor+0x44>
 800e18c:	2e33      	cmp	r6, #51	; 0x33
 800e18e:	dd0b      	ble.n	800e1a8 <floor+0xa0>
 800e190:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e194:	d104      	bne.n	800e1a0 <floor+0x98>
 800e196:	4602      	mov	r2, r0
 800e198:	f7f1 ffe8 	bl	800016c <__adddf3>
 800e19c:	4607      	mov	r7, r0
 800e19e:	460b      	mov	r3, r1
 800e1a0:	4638      	mov	r0, r7
 800e1a2:	4619      	mov	r1, r3
 800e1a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1a8:	f04f 32ff 	mov.w	r2, #4294967295
 800e1ac:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800e1b0:	fa22 f808 	lsr.w	r8, r2, r8
 800e1b4:	ea18 0f00 	tst.w	r8, r0
 800e1b8:	d0f2      	beq.n	800e1a0 <floor+0x98>
 800e1ba:	a311      	add	r3, pc, #68	; (adr r3, 800e200 <floor+0xf8>)
 800e1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c0:	f7f1 ffd4 	bl	800016c <__adddf3>
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	f7f2 fc16 	bl	80009f8 <__aeabi_dcmpgt>
 800e1cc:	2800      	cmp	r0, #0
 800e1ce:	d0bd      	beq.n	800e14c <floor+0x44>
 800e1d0:	2c00      	cmp	r4, #0
 800e1d2:	da02      	bge.n	800e1da <floor+0xd2>
 800e1d4:	2e14      	cmp	r6, #20
 800e1d6:	d103      	bne.n	800e1e0 <floor+0xd8>
 800e1d8:	3401      	adds	r4, #1
 800e1da:	ea25 0508 	bic.w	r5, r5, r8
 800e1de:	e7b5      	b.n	800e14c <floor+0x44>
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e1e6:	fa03 f606 	lsl.w	r6, r3, r6
 800e1ea:	4435      	add	r5, r6
 800e1ec:	42bd      	cmp	r5, r7
 800e1ee:	bf38      	it	cc
 800e1f0:	18e4      	addcc	r4, r4, r3
 800e1f2:	e7f2      	b.n	800e1da <floor+0xd2>
 800e1f4:	2500      	movs	r5, #0
 800e1f6:	462c      	mov	r4, r5
 800e1f8:	e7a8      	b.n	800e14c <floor+0x44>
 800e1fa:	bf00      	nop
 800e1fc:	f3af 8000 	nop.w
 800e200:	8800759c 	.word	0x8800759c
 800e204:	7e37e43c 	.word	0x7e37e43c
 800e208:	bff00000 	.word	0xbff00000
 800e20c:	000fffff 	.word	0x000fffff

0800e210 <matherr>:
 800e210:	2000      	movs	r0, #0
 800e212:	4770      	bx	lr
 800e214:	0000      	movs	r0, r0
	...

0800e218 <scalbn>:
 800e218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e21a:	4616      	mov	r6, r2
 800e21c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e220:	4604      	mov	r4, r0
 800e222:	460d      	mov	r5, r1
 800e224:	460b      	mov	r3, r1
 800e226:	b982      	cbnz	r2, 800e24a <scalbn+0x32>
 800e228:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e22c:	4303      	orrs	r3, r0
 800e22e:	d034      	beq.n	800e29a <scalbn+0x82>
 800e230:	4b2d      	ldr	r3, [pc, #180]	; (800e2e8 <scalbn+0xd0>)
 800e232:	2200      	movs	r2, #0
 800e234:	f7f2 f950 	bl	80004d8 <__aeabi_dmul>
 800e238:	4b2c      	ldr	r3, [pc, #176]	; (800e2ec <scalbn+0xd4>)
 800e23a:	4604      	mov	r4, r0
 800e23c:	429e      	cmp	r6, r3
 800e23e:	460d      	mov	r5, r1
 800e240:	da0d      	bge.n	800e25e <scalbn+0x46>
 800e242:	a325      	add	r3, pc, #148	; (adr r3, 800e2d8 <scalbn+0xc0>)
 800e244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e248:	e01c      	b.n	800e284 <scalbn+0x6c>
 800e24a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800e24e:	42ba      	cmp	r2, r7
 800e250:	d109      	bne.n	800e266 <scalbn+0x4e>
 800e252:	4602      	mov	r2, r0
 800e254:	f7f1 ff8a 	bl	800016c <__adddf3>
 800e258:	4604      	mov	r4, r0
 800e25a:	460d      	mov	r5, r1
 800e25c:	e01d      	b.n	800e29a <scalbn+0x82>
 800e25e:	460b      	mov	r3, r1
 800e260:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e264:	3a36      	subs	r2, #54	; 0x36
 800e266:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e26a:	4432      	add	r2, r6
 800e26c:	428a      	cmp	r2, r1
 800e26e:	dd0c      	ble.n	800e28a <scalbn+0x72>
 800e270:	4622      	mov	r2, r4
 800e272:	462b      	mov	r3, r5
 800e274:	a11a      	add	r1, pc, #104	; (adr r1, 800e2e0 <scalbn+0xc8>)
 800e276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e27a:	f000 f83b 	bl	800e2f4 <copysign>
 800e27e:	a318      	add	r3, pc, #96	; (adr r3, 800e2e0 <scalbn+0xc8>)
 800e280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e284:	f7f2 f928 	bl	80004d8 <__aeabi_dmul>
 800e288:	e7e6      	b.n	800e258 <scalbn+0x40>
 800e28a:	2a00      	cmp	r2, #0
 800e28c:	dd08      	ble.n	800e2a0 <scalbn+0x88>
 800e28e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e292:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e296:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e29a:	4620      	mov	r0, r4
 800e29c:	4629      	mov	r1, r5
 800e29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2a0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e2a4:	da0b      	bge.n	800e2be <scalbn+0xa6>
 800e2a6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e2aa:	429e      	cmp	r6, r3
 800e2ac:	4622      	mov	r2, r4
 800e2ae:	462b      	mov	r3, r5
 800e2b0:	dce0      	bgt.n	800e274 <scalbn+0x5c>
 800e2b2:	a109      	add	r1, pc, #36	; (adr r1, 800e2d8 <scalbn+0xc0>)
 800e2b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2b8:	f000 f81c 	bl	800e2f4 <copysign>
 800e2bc:	e7c1      	b.n	800e242 <scalbn+0x2a>
 800e2be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e2c2:	3236      	adds	r2, #54	; 0x36
 800e2c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e2c8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e2cc:	4620      	mov	r0, r4
 800e2ce:	4629      	mov	r1, r5
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	4b07      	ldr	r3, [pc, #28]	; (800e2f0 <scalbn+0xd8>)
 800e2d4:	e7d6      	b.n	800e284 <scalbn+0x6c>
 800e2d6:	bf00      	nop
 800e2d8:	c2f8f359 	.word	0xc2f8f359
 800e2dc:	01a56e1f 	.word	0x01a56e1f
 800e2e0:	8800759c 	.word	0x8800759c
 800e2e4:	7e37e43c 	.word	0x7e37e43c
 800e2e8:	43500000 	.word	0x43500000
 800e2ec:	ffff3cb0 	.word	0xffff3cb0
 800e2f0:	3c900000 	.word	0x3c900000

0800e2f4 <copysign>:
 800e2f4:	b530      	push	{r4, r5, lr}
 800e2f6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800e2fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e2fe:	ea42 0503 	orr.w	r5, r2, r3
 800e302:	4629      	mov	r1, r5
 800e304:	bd30      	pop	{r4, r5, pc}
	...

0800e308 <_init>:
 800e308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e30a:	bf00      	nop
 800e30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e30e:	bc08      	pop	{r3}
 800e310:	469e      	mov	lr, r3
 800e312:	4770      	bx	lr

0800e314 <_fini>:
 800e314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e316:	bf00      	nop
 800e318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e31a:	bc08      	pop	{r3}
 800e31c:	469e      	mov	lr, r3
 800e31e:	4770      	bx	lr
