
XIMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dea0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001238  0800dfb0  0800dfb0  0001dfb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f1e8  0800f1e8  00020388  2**0
                  CONTENTS
  4 .ARM          00000000  0800f1e8  0800f1e8  00020388  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f1e8  0800f1e8  00020388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f1e8  0800f1e8  0001f1e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f1ec  0800f1ec  0001f1ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000388  20000000  0800f1f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018a8  20000388  0800f578  00020388  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001c30  0800f578  00021c30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039a85  00000000  00000000  000203b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000078cb  00000000  00000000  00059e36  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001bf77  00000000  00000000  00061701  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001608  00000000  00000000  0007d678  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000042f0  00000000  00000000  0007ec80  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001c23e  00000000  00000000  00082f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001c728  00000000  00000000  0009f1ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000835e7  00000000  00000000  000bb8d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      000000f0  00000000  00000000  0013eebd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ed4  00000000  00000000  0013efb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000388 	.word	0x20000388
 800012c:	00000000 	.word	0x00000000
 8000130:	0800df98 	.word	0x0800df98

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000038c 	.word	0x2000038c
 800014c:	0800df98 	.word	0x0800df98

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <mpu_set_bypass.part.1>:
/**
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
 800115c:	b570      	push	{r4, r5, r6, lr}
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;

    if (bypass_on) {
 800115e:	4606      	mov	r6, r0
int mpu_set_bypass(unsigned char bypass_on)
 8001160:	b082      	sub	sp, #8
 8001162:	4c36      	ldr	r4, [pc, #216]	; (800123c <mpu_set_bypass.part.1+0xe0>)
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001164:	f10d 0507 	add.w	r5, sp, #7
 8001168:	e9d4 3200 	ldrd	r3, r2, [r4]
 800116c:	7810      	ldrb	r0, [r2, #0]
 800116e:	7919      	ldrb	r1, [r3, #4]
 8001170:	2201      	movs	r2, #1
 8001172:	462b      	mov	r3, r5
    if (bypass_on) {
 8001174:	b33e      	cbz	r6, 80011c6 <mpu_set_bypass.part.1+0x6a>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001176:	f004 f86b 	bl	8005250 <i2c_read>
 800117a:	2800      	cmp	r0, #0
 800117c:	d15a      	bne.n	8001234 <mpu_set_bypass.part.1+0xd8>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
 800117e:	f89d 3007 	ldrb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001182:	6861      	ldr	r1, [r4, #4]
        tmp &= ~BIT_AUX_IF_EN;
 8001184:	f023 0320 	bic.w	r3, r3, #32
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001188:	6822      	ldr	r2, [r4, #0]
        tmp &= ~BIT_AUX_IF_EN;
 800118a:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800118e:	7808      	ldrb	r0, [r1, #0]
 8001190:	462b      	mov	r3, r5
 8001192:	7911      	ldrb	r1, [r2, #4]
 8001194:	2201      	movs	r2, #1
 8001196:	f004 f84b 	bl	8005230 <i2c_write>
 800119a:	2800      	cmp	r0, #0
 800119c:	d14a      	bne.n	8001234 <mpu_set_bypass.part.1+0xd8>
            return -1;
        delay_ms(3);
 800119e:	2003      	movs	r0, #3
 80011a0:	f004 f866 	bl	8005270 <delay_ms>
        tmp = BIT_BYPASS_EN;
 80011a4:	2202      	movs	r2, #2
        if (st.chip_cfg.active_low_int)
 80011a6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
        tmp = BIT_BYPASS_EN;
 80011aa:	f88d 2007 	strb.w	r2, [sp, #7]
        if (st.chip_cfg.active_low_int)
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d03e      	beq.n	8001230 <mpu_set_bypass.part.1+0xd4>
            tmp |= BIT_ACTL;
 80011b2:	2382      	movs	r3, #130	; 0x82
 80011b4:	22b2      	movs	r2, #178	; 0xb2
 80011b6:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.latched_int)
 80011ba:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80011be:	b343      	cbz	r3, 8001212 <mpu_set_bypass.part.1+0xb6>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80011c0:	f88d 2007 	strb.w	r2, [sp, #7]
 80011c4:	e025      	b.n	8001212 <mpu_set_bypass.part.1+0xb6>
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80011c6:	f004 f843 	bl	8005250 <i2c_read>
 80011ca:	bb98      	cbnz	r0, 8001234 <mpu_set_bypass.part.1+0xd8>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80011cc:	7aa2      	ldrb	r2, [r4, #10]
 80011ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011d2:	07d2      	lsls	r2, r2, #31
            tmp |= BIT_AUX_IF_EN;
 80011d4:	bf4c      	ite	mi
 80011d6:	f043 0320 	orrmi.w	r3, r3, #32
        else
            tmp &= ~BIT_AUX_IF_EN;
 80011da:	f003 03df 	andpl.w	r3, r3, #223	; 0xdf
 80011de:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80011e2:	e9d4 2100 	ldrd	r2, r1, [r4]
 80011e6:	462b      	mov	r3, r5
 80011e8:	7808      	ldrb	r0, [r1, #0]
 80011ea:	7911      	ldrb	r1, [r2, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f004 f81f 	bl	8005230 <i2c_write>
 80011f2:	b9f8      	cbnz	r0, 8001234 <mpu_set_bypass.part.1+0xd8>
            return -1;
        delay_ms(3);
 80011f4:	2003      	movs	r0, #3
 80011f6:	f004 f83b 	bl	8005270 <delay_ms>
        if (st.chip_cfg.active_low_int)
 80011fa:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80011fe:	b1ab      	cbz	r3, 800122c <mpu_set_bypass.part.1+0xd0>
 8001200:	21b0      	movs	r1, #176	; 0xb0
            tmp = BIT_ACTL;
 8001202:	2380      	movs	r3, #128	; 0x80
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
 8001204:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8001208:	f88d 3007 	strb.w	r3, [sp, #7]
 800120c:	b10a      	cbz	r2, 8001212 <mpu_set_bypass.part.1+0xb6>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800120e:	f88d 1007 	strb.w	r1, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001212:	e9d4 1200 	ldrd	r1, r2, [r4]
 8001216:	462b      	mov	r3, r5
 8001218:	7810      	ldrb	r0, [r2, #0]
 800121a:	7dc9      	ldrb	r1, [r1, #23]
 800121c:	2201      	movs	r2, #1
 800121e:	f004 f807 	bl	8005230 <i2c_write>
 8001222:	b938      	cbnz	r0, 8001234 <mpu_set_bypass.part.1+0xd8>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
 8001224:	2000      	movs	r0, #0
    st.chip_cfg.bypass_mode = bypass_on;
 8001226:	74a6      	strb	r6, [r4, #18]
}
 8001228:	b002      	add	sp, #8
 800122a:	bd70      	pop	{r4, r5, r6, pc}
        if (st.chip_cfg.active_low_int)
 800122c:	2130      	movs	r1, #48	; 0x30
 800122e:	e7e9      	b.n	8001204 <mpu_set_bypass.part.1+0xa8>
        if (st.chip_cfg.active_low_int)
 8001230:	2232      	movs	r2, #50	; 0x32
 8001232:	e7c2      	b.n	80011ba <mpu_set_bypass.part.1+0x5e>
            return -1;
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	e7f6      	b.n	8001228 <mpu_set_bypass.part.1+0xcc>
 800123a:	bf00      	nop
 800123c:	20000000 	.word	0x20000000

08001240 <mpu_set_bypass.part.1.constprop.7>:
int mpu_set_bypass(unsigned char bypass_on)
 8001240:	b510      	push	{r4, lr}
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001242:	4c20      	ldr	r4, [pc, #128]	; (80012c4 <mpu_set_bypass.part.1.constprop.7+0x84>)
int mpu_set_bypass(unsigned char bypass_on)
 8001244:	b082      	sub	sp, #8
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001246:	e9d4 2300 	ldrd	r2, r3, [r4]
 800124a:	7911      	ldrb	r1, [r2, #4]
 800124c:	7818      	ldrb	r0, [r3, #0]
 800124e:	2201      	movs	r2, #1
 8001250:	f10d 0307 	add.w	r3, sp, #7
 8001254:	f003 fffc 	bl	8005250 <i2c_read>
 8001258:	bb88      	cbnz	r0, 80012be <mpu_set_bypass.part.1.constprop.7+0x7e>
        tmp &= ~BIT_AUX_IF_EN;
 800125a:	f89d 3007 	ldrb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800125e:	6861      	ldr	r1, [r4, #4]
        tmp &= ~BIT_AUX_IF_EN;
 8001260:	f023 0320 	bic.w	r3, r3, #32
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001264:	6822      	ldr	r2, [r4, #0]
        tmp &= ~BIT_AUX_IF_EN;
 8001266:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800126a:	7808      	ldrb	r0, [r1, #0]
 800126c:	f10d 0307 	add.w	r3, sp, #7
 8001270:	7911      	ldrb	r1, [r2, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	f003 ffdc 	bl	8005230 <i2c_write>
 8001278:	bb08      	cbnz	r0, 80012be <mpu_set_bypass.part.1.constprop.7+0x7e>
        delay_ms(3);
 800127a:	2003      	movs	r0, #3
 800127c:	f003 fff8 	bl	8005270 <delay_ms>
        tmp = BIT_BYPASS_EN;
 8001280:	2202      	movs	r2, #2
        if (st.chip_cfg.active_low_int)
 8001282:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
        tmp = BIT_BYPASS_EN;
 8001286:	f88d 2007 	strb.w	r2, [sp, #7]
        if (st.chip_cfg.active_low_int)
 800128a:	b1b3      	cbz	r3, 80012ba <mpu_set_bypass.part.1.constprop.7+0x7a>
            tmp |= BIT_ACTL;
 800128c:	2382      	movs	r3, #130	; 0x82
 800128e:	22b2      	movs	r2, #178	; 0xb2
 8001290:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.latched_int)
 8001294:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8001298:	b10b      	cbz	r3, 800129e <mpu_set_bypass.part.1.constprop.7+0x5e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800129a:	f88d 2007 	strb.w	r2, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800129e:	e9d4 1200 	ldrd	r1, r2, [r4]
 80012a2:	f10d 0307 	add.w	r3, sp, #7
 80012a6:	7810      	ldrb	r0, [r2, #0]
 80012a8:	7dc9      	ldrb	r1, [r1, #23]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f003 ffc0 	bl	8005230 <i2c_write>
 80012b0:	b928      	cbnz	r0, 80012be <mpu_set_bypass.part.1.constprop.7+0x7e>
    st.chip_cfg.bypass_mode = bypass_on;
 80012b2:	2301      	movs	r3, #1
 80012b4:	74a3      	strb	r3, [r4, #18]
}
 80012b6:	b002      	add	sp, #8
 80012b8:	bd10      	pop	{r4, pc}
        if (st.chip_cfg.active_low_int)
 80012ba:	2232      	movs	r2, #50	; 0x32
 80012bc:	e7ea      	b.n	8001294 <mpu_set_bypass.part.1.constprop.7+0x54>
            return -1;
 80012be:	f04f 30ff 	mov.w	r0, #4294967295
 80012c2:	e7f8      	b.n	80012b6 <mpu_set_bypass.part.1.constprop.7+0x76>
 80012c4:	20000000 	.word	0x20000000

080012c8 <mpu_reset_fifo>:
{
 80012c8:	b570      	push	{r4, r5, r6, lr}
    if (!(st.chip_cfg.sensors))
 80012ca:	4c53      	ldr	r4, [pc, #332]	; (8001418 <mpu_reset_fifo+0x150>)
{
 80012cc:	b082      	sub	sp, #8
    if (!(st.chip_cfg.sensors))
 80012ce:	7aa3      	ldrb	r3, [r4, #10]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 809c 	beq.w	800140e <mpu_reset_fifo+0x146>
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80012d6:	e9d4 2100 	ldrd	r2, r1, [r4]
    data = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	ad02      	add	r5, sp, #8
 80012de:	f805 3d01 	strb.w	r3, [r5, #-1]!
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80012e2:	7808      	ldrb	r0, [r1, #0]
 80012e4:	462b      	mov	r3, r5
 80012e6:	7c51      	ldrb	r1, [r2, #17]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f003 ffa1 	bl	8005230 <i2c_write>
 80012ee:	2800      	cmp	r0, #0
 80012f0:	f040 808d 	bne.w	800140e <mpu_reset_fifo+0x146>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 80012f4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80012f8:	7951      	ldrb	r1, [r2, #5]
 80012fa:	7818      	ldrb	r0, [r3, #0]
 80012fc:	2201      	movs	r2, #1
 80012fe:	462b      	mov	r3, r5
 8001300:	f003 ff96 	bl	8005230 <i2c_write>
 8001304:	2800      	cmp	r0, #0
 8001306:	f040 8082 	bne.w	800140e <mpu_reset_fifo+0x146>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800130a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800130e:	7911      	ldrb	r1, [r2, #4]
 8001310:	7818      	ldrb	r0, [r3, #0]
 8001312:	2201      	movs	r2, #1
 8001314:	462b      	mov	r3, r5
 8001316:	f003 ff8b 	bl	8005230 <i2c_write>
 800131a:	2800      	cmp	r0, #0
 800131c:	d177      	bne.n	800140e <mpu_reset_fifo+0x146>
 800131e:	e9d4 2100 	ldrd	r2, r1, [r4]
    if (st.chip_cfg.dmp_on) {
 8001322:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001326:	7808      	ldrb	r0, [r1, #0]
 8001328:	7911      	ldrb	r1, [r2, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d13b      	bne.n	80013a6 <mpu_reset_fifo+0xde>
        data = BIT_FIFO_RST;
 800132e:	2604      	movs	r6, #4
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001330:	462b      	mov	r3, r5
 8001332:	2201      	movs	r2, #1
        data = BIT_FIFO_RST;
 8001334:	f88d 6007 	strb.w	r6, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001338:	f003 ff7a 	bl	8005230 <i2c_write>
 800133c:	2800      	cmp	r0, #0
 800133e:	d166      	bne.n	800140e <mpu_reset_fifo+0x146>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8001340:	7ca3      	ldrb	r3, [r4, #18]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d161      	bne.n	800140a <mpu_reset_fifo+0x142>
 8001346:	7aa3      	ldrb	r3, [r4, #10]
            data = BIT_FIFO_EN;
 8001348:	f013 0f01 	tst.w	r3, #1
 800134c:	bf14      	ite	ne
 800134e:	2160      	movne	r1, #96	; 0x60
 8001350:	2140      	moveq	r1, #64	; 0x40
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001352:	e9d4 3200 	ldrd	r3, r2, [r4]
 8001356:	f88d 1007 	strb.w	r1, [sp, #7]
 800135a:	7810      	ldrb	r0, [r2, #0]
 800135c:	7919      	ldrb	r1, [r3, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	462b      	mov	r3, r5
 8001362:	f003 ff65 	bl	8005230 <i2c_write>
 8001366:	2800      	cmp	r0, #0
 8001368:	d151      	bne.n	800140e <mpu_reset_fifo+0x146>
        if (st.chip_cfg.int_enable)
 800136a:	7c63      	ldrb	r3, [r4, #17]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800136c:	6861      	ldr	r1, [r4, #4]
        if (st.chip_cfg.int_enable)
 800136e:	3300      	adds	r3, #0
 8001370:	bf18      	it	ne
 8001372:	2301      	movne	r3, #1
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001374:	6822      	ldr	r2, [r4, #0]
        if (st.chip_cfg.int_enable)
 8001376:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800137a:	7808      	ldrb	r0, [r1, #0]
 800137c:	462b      	mov	r3, r5
 800137e:	7c51      	ldrb	r1, [r2, #17]
 8001380:	2201      	movs	r2, #1
 8001382:	f003 ff55 	bl	8005230 <i2c_write>
 8001386:	2800      	cmp	r0, #0
 8001388:	d141      	bne.n	800140e <mpu_reset_fifo+0x146>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 800138a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800138e:	7818      	ldrb	r0, [r3, #0]
 8001390:	7951      	ldrb	r1, [r2, #5]
 8001392:	4b22      	ldr	r3, [pc, #136]	; (800141c <mpu_reset_fifo+0x154>)
 8001394:	2201      	movs	r2, #1
 8001396:	f003 ff4b 	bl	8005230 <i2c_write>
 800139a:	3000      	adds	r0, #0
 800139c:	bf18      	it	ne
 800139e:	2001      	movne	r0, #1
 80013a0:	4240      	negs	r0, r0
}
 80013a2:	b002      	add	sp, #8
 80013a4:	bd70      	pop	{r4, r5, r6, pc}
        data = BIT_FIFO_RST | BIT_DMP_RST;
 80013a6:	260c      	movs	r6, #12
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80013a8:	462b      	mov	r3, r5
 80013aa:	2201      	movs	r2, #1
        data = BIT_FIFO_RST | BIT_DMP_RST;
 80013ac:	f88d 6007 	strb.w	r6, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80013b0:	f003 ff3e 	bl	8005230 <i2c_write>
 80013b4:	bb58      	cbnz	r0, 800140e <mpu_reset_fifo+0x146>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80013b6:	7aa3      	ldrb	r3, [r4, #10]
        data = BIT_DMP_EN | BIT_FIFO_EN;
 80013b8:	22c0      	movs	r2, #192	; 0xc0
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80013ba:	07db      	lsls	r3, r3, #31
            data |= BIT_AUX_IF_EN;
 80013bc:	bf48      	it	mi
 80013be:	23e0      	movmi	r3, #224	; 0xe0
        data = BIT_DMP_EN | BIT_FIFO_EN;
 80013c0:	f88d 2007 	strb.w	r2, [sp, #7]
            data |= BIT_AUX_IF_EN;
 80013c4:	bf48      	it	mi
 80013c6:	f88d 3007 	strbmi.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80013ca:	e9d4 2300 	ldrd	r2, r3, [r4]
 80013ce:	7911      	ldrb	r1, [r2, #4]
 80013d0:	7818      	ldrb	r0, [r3, #0]
 80013d2:	2201      	movs	r2, #1
 80013d4:	462b      	mov	r3, r5
 80013d6:	f003 ff2b 	bl	8005230 <i2c_write>
 80013da:	b9c0      	cbnz	r0, 800140e <mpu_reset_fifo+0x146>
        if (st.chip_cfg.int_enable)
 80013dc:	7c63      	ldrb	r3, [r4, #17]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80013de:	6861      	ldr	r1, [r4, #4]
            data = BIT_DMP_INT_EN;
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	bf18      	it	ne
 80013e4:	2302      	movne	r3, #2
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80013e6:	6822      	ldr	r2, [r4, #0]
 80013e8:	f88d 3007 	strb.w	r3, [sp, #7]
 80013ec:	7808      	ldrb	r0, [r1, #0]
 80013ee:	462b      	mov	r3, r5
 80013f0:	7c51      	ldrb	r1, [r2, #17]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f003 ff1c 	bl	8005230 <i2c_write>
 80013f8:	b948      	cbnz	r0, 800140e <mpu_reset_fifo+0x146>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 80013fa:	e9d4 2100 	ldrd	r2, r1, [r4]
        data = 0;
 80013fe:	f88d 0007 	strb.w	r0, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8001402:	7808      	ldrb	r0, [r1, #0]
 8001404:	462b      	mov	r3, r5
 8001406:	7951      	ldrb	r1, [r2, #5]
 8001408:	e7c4      	b.n	8001394 <mpu_reset_fifo+0xcc>
            data = BIT_FIFO_EN;
 800140a:	2140      	movs	r1, #64	; 0x40
 800140c:	e7a1      	b.n	8001352 <mpu_reset_fifo+0x8a>
        return -1;
 800140e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001412:	b002      	add	sp, #8
 8001414:	bd70      	pop	{r4, r5, r6, pc}
 8001416:	bf00      	nop
 8001418:	20000000 	.word	0x20000000
 800141c:	20000010 	.word	0x20000010

08001420 <mpu_lp_accel_mode>:
{
 8001420:	b570      	push	{r4, r5, r6, lr}
    if (rate > 40)
 8001422:	2828      	cmp	r0, #40	; 0x28
{
 8001424:	b082      	sub	sp, #8
    if (rate > 40)
 8001426:	f200 80ac 	bhi.w	8001582 <mpu_lp_accel_mode+0x162>
 800142a:	4c5b      	ldr	r4, [pc, #364]	; (8001598 <mpu_lp_accel_mode+0x178>)
 800142c:	4605      	mov	r5, r0
 800142e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    if (!rate) {
 8001432:	b9b8      	cbnz	r0, 8001464 <mpu_lp_accel_mode+0x44>
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 8001434:	2b00      	cmp	r3, #0
 8001436:	f040 8082 	bne.w	800153e <mpu_lp_accel_mode+0x11e>
 800143a:	ae01      	add	r6, sp, #4
        tmp[0] = 0;
 800143c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001440:	e9d4 1200 	ldrd	r1, r2, [r4]
        tmp[0] = 0;
 8001444:	f8ad 3004 	strh.w	r3, [sp, #4]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001448:	7810      	ldrb	r0, [r2, #0]
 800144a:	4633      	mov	r3, r6
 800144c:	7d49      	ldrb	r1, [r1, #21]
 800144e:	2202      	movs	r2, #2
 8001450:	f003 feee 	bl	8005230 <i2c_write>
 8001454:	4605      	mov	r5, r0
 8001456:	2800      	cmp	r0, #0
 8001458:	f040 8093 	bne.w	8001582 <mpu_lp_accel_mode+0x162>
        st.chip_cfg.lp_accel_mode = 0;
 800145c:	7520      	strb	r0, [r4, #20]
}
 800145e:	4628      	mov	r0, r5
 8001460:	b002      	add	sp, #8
 8001462:	bd70      	pop	{r4, r5, r6, pc}
    if (st.chip_cfg.latched_int == enable)
 8001464:	2b01      	cmp	r3, #1
 8001466:	d142      	bne.n	80014ee <mpu_lp_accel_mode+0xce>
 8001468:	ae01      	add	r6, sp, #4
    if (rate == 1)
 800146a:	2d01      	cmp	r5, #1
 800146c:	d05a      	beq.n	8001524 <mpu_lp_accel_mode+0x104>
    else if (rate == 2)
 800146e:	2d02      	cmp	r5, #2
 8001470:	f000 8081 	beq.w	8001576 <mpu_lp_accel_mode+0x156>
    else if (rate <= 5)
 8001474:	2d05      	cmp	r5, #5
 8001476:	d95e      	bls.n	8001536 <mpu_lp_accel_mode+0x116>
    else if (rate <= 10)
 8001478:	2d0a      	cmp	r5, #10
 800147a:	f200 8085 	bhi.w	8001588 <mpu_lp_accel_mode+0x168>
        tmp[0] = INV_LPA_10HZ;
 800147e:	2305      	movs	r3, #5
 8001480:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 8001484:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001488:	7a51      	ldrb	r1, [r2, #9]
 800148a:	7818      	ldrb	r0, [r3, #0]
 800148c:	2201      	movs	r2, #1
 800148e:	4633      	mov	r3, r6
 8001490:	f003 fece 	bl	8005230 <i2c_write>
 8001494:	2800      	cmp	r0, #0
 8001496:	d174      	bne.n	8001582 <mpu_lp_accel_mode+0x162>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 8001498:	e9d4 1200 	ldrd	r1, r2, [r4]
    tmp[0] = BIT_LPA_CYCLE;
 800149c:	2320      	movs	r3, #32
 800149e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 80014a2:	7810      	ldrb	r0, [r2, #0]
 80014a4:	4633      	mov	r3, r6
 80014a6:	7d49      	ldrb	r1, [r1, #21]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f003 fec1 	bl	8005230 <i2c_write>
 80014ae:	4605      	mov	r5, r0
 80014b0:	2800      	cmp	r0, #0
 80014b2:	d166      	bne.n	8001582 <mpu_lp_accel_mode+0x162>
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 80014b4:	2108      	movs	r1, #8
    st.chip_cfg.lp_accel_mode = 1;
 80014b6:	2201      	movs	r2, #1
    if (st.chip_cfg.dmp_on)
 80014b8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    st.chip_cfg.clk_src = 0;
 80014bc:	7320      	strb	r0, [r4, #12]
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 80014be:	72a1      	strb	r1, [r4, #10]
    st.chip_cfg.lp_accel_mode = 1;
 80014c0:	7522      	strb	r2, [r4, #20]
    if (st.chip_cfg.dmp_on)
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1cb      	bne.n	800145e <mpu_lp_accel_mode+0x3e>
        if (enable && st.chip_cfg.int_enable)
 80014c6:	7c63      	ldrb	r3, [r4, #17]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 80014c8:	7420      	strb	r0, [r4, #16]
        if (enable && st.chip_cfg.int_enable)
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1c7      	bne.n	800145e <mpu_lp_accel_mode+0x3e>
            tmp = BIT_DATA_RDY_EN;
 80014ce:	eb0d 0301 	add.w	r3, sp, r1
 80014d2:	f803 2d05 	strb.w	r2, [r3, #-5]!
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 80014d6:	e9d4 1000 	ldrd	r1, r0, [r4]
 80014da:	7800      	ldrb	r0, [r0, #0]
 80014dc:	7c49      	ldrb	r1, [r1, #17]
 80014de:	f003 fea7 	bl	8005230 <i2c_write>
 80014e2:	2800      	cmp	r0, #0
 80014e4:	d1bb      	bne.n	800145e <mpu_lp_accel_mode+0x3e>
        st.chip_cfg.int_enable = tmp;
 80014e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80014ea:	7463      	strb	r3, [r4, #17]
 80014ec:	e7b7      	b.n	800145e <mpu_lp_accel_mode+0x3e>
        return 0;

    if (enable)
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80014ee:	2230      	movs	r2, #48	; 0x30
    else
        tmp = 0;
    if (st.chip_cfg.bypass_mode)
 80014f0:	7ca3      	ldrb	r3, [r4, #18]
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80014f2:	f88d 2004 	strb.w	r2, [sp, #4]
    if (st.chip_cfg.bypass_mode)
 80014f6:	b9cb      	cbnz	r3, 800152c <mpu_lp_accel_mode+0x10c>
 80014f8:	22b0      	movs	r2, #176	; 0xb0
        tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
 80014fa:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80014fe:	b10b      	cbz	r3, 8001504 <mpu_lp_accel_mode+0xe4>
        tmp |= BIT_ACTL;
 8001500:	f88d 2004 	strb.w	r2, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001504:	ae01      	add	r6, sp, #4
 8001506:	e9d4 2300 	ldrd	r2, r3, [r4]
 800150a:	7dd1      	ldrb	r1, [r2, #23]
 800150c:	7818      	ldrb	r0, [r3, #0]
 800150e:	2201      	movs	r2, #1
 8001510:	4633      	mov	r3, r6
 8001512:	f003 fe8d 	bl	8005230 <i2c_write>
 8001516:	2800      	cmp	r0, #0
 8001518:	d1a7      	bne.n	800146a <mpu_lp_accel_mode+0x4a>
        return -1;
    st.chip_cfg.latched_int = enable;
 800151a:	2301      	movs	r3, #1
    if (rate == 1)
 800151c:	2d01      	cmp	r5, #1
    st.chip_cfg.latched_int = enable;
 800151e:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    if (rate == 1)
 8001522:	d1a4      	bne.n	800146e <mpu_lp_accel_mode+0x4e>
        tmp[0] = INV_LPA_1_25HZ;
 8001524:	2302      	movs	r3, #2
 8001526:	f88d 3004 	strb.w	r3, [sp, #4]
 800152a:	e7ab      	b.n	8001484 <mpu_lp_accel_mode+0x64>
        tmp |= BIT_BYPASS_EN;
 800152c:	2332      	movs	r3, #50	; 0x32
 800152e:	22b2      	movs	r2, #178	; 0xb2
 8001530:	f88d 3004 	strb.w	r3, [sp, #4]
 8001534:	e7e1      	b.n	80014fa <mpu_lp_accel_mode+0xda>
        tmp[0] = INV_LPA_5HZ;
 8001536:	2304      	movs	r3, #4
 8001538:	f88d 3004 	strb.w	r3, [sp, #4]
 800153c:	e7a2      	b.n	8001484 <mpu_lp_accel_mode+0x64>
    if (st.chip_cfg.bypass_mode)
 800153e:	7ca3      	ldrb	r3, [r4, #18]
        tmp = 0;
 8001540:	f88d 0004 	strb.w	r0, [sp, #4]
    if (st.chip_cfg.bypass_mode)
 8001544:	b1db      	cbz	r3, 800157e <mpu_lp_accel_mode+0x15e>
        tmp |= BIT_BYPASS_EN;
 8001546:	2302      	movs	r3, #2
 8001548:	2282      	movs	r2, #130	; 0x82
 800154a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (st.chip_cfg.active_low_int)
 800154e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001552:	b10b      	cbz	r3, 8001558 <mpu_lp_accel_mode+0x138>
        tmp |= BIT_ACTL;
 8001554:	f88d 2004 	strb.w	r2, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001558:	ae01      	add	r6, sp, #4
 800155a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800155e:	7dd1      	ldrb	r1, [r2, #23]
 8001560:	7818      	ldrb	r0, [r3, #0]
 8001562:	2201      	movs	r2, #1
 8001564:	4633      	mov	r3, r6
 8001566:	f003 fe63 	bl	8005230 <i2c_write>
 800156a:	2800      	cmp	r0, #0
 800156c:	f47f af66 	bne.w	800143c <mpu_lp_accel_mode+0x1c>
    st.chip_cfg.latched_int = enable;
 8001570:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
 8001574:	e762      	b.n	800143c <mpu_lp_accel_mode+0x1c>
        tmp[0] = INV_LPA_2_5HZ;
 8001576:	2303      	movs	r3, #3
 8001578:	f88d 3004 	strb.w	r3, [sp, #4]
 800157c:	e782      	b.n	8001484 <mpu_lp_accel_mode+0x64>
    if (st.chip_cfg.bypass_mode)
 800157e:	2280      	movs	r2, #128	; 0x80
 8001580:	e7e5      	b.n	800154e <mpu_lp_accel_mode+0x12e>
        return -1;
 8001582:	f04f 35ff 	mov.w	r5, #4294967295
 8001586:	e76a      	b.n	800145e <mpu_lp_accel_mode+0x3e>
    else if (rate <= 20)
 8001588:	2d14      	cmp	r5, #20
        tmp[0] = INV_LPA_20HZ;
 800158a:	bf94      	ite	ls
 800158c:	2306      	movls	r3, #6
        tmp[0] = INV_LPA_40HZ;
 800158e:	2307      	movhi	r3, #7
 8001590:	f88d 3004 	strb.w	r3, [sp, #4]
 8001594:	e776      	b.n	8001484 <mpu_lp_accel_mode+0x64>
 8001596:	bf00      	nop
 8001598:	20000000 	.word	0x20000000

0800159c <mpu_set_sample_rate>:
{
 800159c:	b570      	push	{r4, r5, r6, lr}
    if (!(st.chip_cfg.sensors))
 800159e:	4c62      	ldr	r4, [pc, #392]	; (8001728 <mpu_set_sample_rate+0x18c>)
{
 80015a0:	b082      	sub	sp, #8
    if (!(st.chip_cfg.sensors))
 80015a2:	7aa3      	ldrb	r3, [r4, #10]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 80af 	beq.w	8001708 <mpu_set_sample_rate+0x16c>
    if (st.chip_cfg.dmp_on)
 80015aa:	f894 6024 	ldrb.w	r6, [r4, #36]	; 0x24
 80015ae:	2e00      	cmp	r6, #0
 80015b0:	f040 80aa 	bne.w	8001708 <mpu_set_sample_rate+0x16c>
        if (st.chip_cfg.lp_accel_mode) {
 80015b4:	7d23      	ldrb	r3, [r4, #20]
 80015b6:	4605      	mov	r5, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d15a      	bne.n	8001672 <mpu_set_sample_rate+0xd6>
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 80015bc:	e9d4 1000 	ldrd	r1, r0, [r4]
 80015c0:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 80015c4:	462a      	mov	r2, r5
 80015c6:	bf28      	it	cs
 80015c8:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
        data = 1000 / rate - 1;
 80015cc:	2a04      	cmp	r2, #4
 80015ce:	bf38      	it	cc
 80015d0:	2204      	movcc	r2, #4
 80015d2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80015d6:	fb95 f2f2 	sdiv	r2, r5, r2
 80015da:	ab02      	add	r3, sp, #8
 80015dc:	3a01      	subs	r2, #1
 80015de:	f803 2d05 	strb.w	r2, [r3, #-5]!
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 80015e2:	7800      	ldrb	r0, [r0, #0]
 80015e4:	7849      	ldrb	r1, [r1, #1]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f003 fe22 	bl	8005230 <i2c_write>
 80015ec:	4606      	mov	r6, r0
 80015ee:	2800      	cmp	r0, #0
 80015f0:	f040 808a 	bne.w	8001708 <mpu_set_sample_rate+0x16c>
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80015f4:	f89d 3003 	ldrb.w	r3, [sp, #3]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 80015f8:	8d21      	ldrh	r1, [r4, #40]	; 0x28
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80015fa:	3301      	adds	r3, #1
 80015fc:	fb95 f3f3 	sdiv	r3, r5, r3
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 8001600:	2964      	cmp	r1, #100	; 0x64
 8001602:	460a      	mov	r2, r1
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8001604:	81e3      	strh	r3, [r4, #14]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 8001606:	bf28      	it	cs
 8001608:	2264      	movcs	r2, #100	; 0x64
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 800160a:	b1c1      	cbz	r1, 800163e <mpu_set_sample_rate+0xa2>
 800160c:	4293      	cmp	r3, r2
 800160e:	d316      	bcc.n	800163e <mpu_set_sample_rate+0xa2>
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8001610:	e9d4 1000 	ldrd	r1, r0, [r4]
    div = st.chip_cfg.sample_rate / rate - 1;
 8001614:	fbb3 f2f2 	udiv	r2, r3, r2
 8001618:	ab02      	add	r3, sp, #8
 800161a:	3a01      	subs	r2, #1
 800161c:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8001620:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
 8001624:	7800      	ldrb	r0, [r0, #0]
 8001626:	2201      	movs	r2, #1
 8001628:	f003 fe02 	bl	8005230 <i2c_write>
 800162c:	2800      	cmp	r0, #0
 800162e:	d179      	bne.n	8001724 <mpu_set_sample_rate+0x188>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 8001630:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001634:	89e3      	ldrh	r3, [r4, #14]
 8001636:	3201      	adds	r2, #1
 8001638:	fb93 f2f2 	sdiv	r2, r3, r2
 800163c:	8522      	strh	r2, [r4, #40]	; 0x28
    if (!(st.chip_cfg.sensors))
 800163e:	7aa2      	ldrb	r2, [r4, #10]
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8001640:	085b      	lsrs	r3, r3, #1
    if (!(st.chip_cfg.sensors))
 8001642:	b19a      	cbz	r2, 800166c <mpu_set_sample_rate+0xd0>
    if (lpf >= 188)
 8001644:	2bbb      	cmp	r3, #187	; 0xbb
 8001646:	d92b      	bls.n	80016a0 <mpu_set_sample_rate+0x104>
        data = INV_FILTER_188HZ;
 8001648:	2301      	movs	r3, #1
 800164a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (st.chip_cfg.lpf == data)
 800164e:	7ae2      	ldrb	r2, [r4, #11]
 8001650:	429a      	cmp	r2, r3
 8001652:	d00b      	beq.n	800166c <mpu_set_sample_rate+0xd0>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8001654:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001658:	7891      	ldrb	r1, [r2, #2]
 800165a:	7818      	ldrb	r0, [r3, #0]
 800165c:	2201      	movs	r2, #1
 800165e:	ab01      	add	r3, sp, #4
 8001660:	f003 fde6 	bl	8005230 <i2c_write>
 8001664:	b910      	cbnz	r0, 800166c <mpu_set_sample_rate+0xd0>
    st.chip_cfg.lpf = data;
 8001666:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800166a:	72e3      	strb	r3, [r4, #11]
}
 800166c:	4630      	mov	r0, r6
 800166e:	b002      	add	sp, #8
 8001670:	bd70      	pop	{r4, r5, r6, pc}
            if (rate && (rate <= 40)) {
 8001672:	1e43      	subs	r3, r0, #1
 8001674:	2b27      	cmp	r3, #39	; 0x27
 8001676:	d91b      	bls.n	80016b0 <mpu_set_sample_rate+0x114>
    if (st.chip_cfg.latched_int == enable)
 8001678:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800167c:	bb0b      	cbnz	r3, 80016c2 <mpu_set_sample_rate+0x126>
 800167e:	ae01      	add	r6, sp, #4
        tmp[0] = 0;
 8001680:	f44f 63e0 	mov.w	r3, #1792	; 0x700
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001684:	e9d4 1200 	ldrd	r1, r2, [r4]
        tmp[0] = 0;
 8001688:	f8ad 3004 	strh.w	r3, [sp, #4]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 800168c:	7810      	ldrb	r0, [r2, #0]
 800168e:	4633      	mov	r3, r6
 8001690:	7d49      	ldrb	r1, [r1, #21]
 8001692:	2202      	movs	r2, #2
 8001694:	f003 fdcc 	bl	8005230 <i2c_write>
 8001698:	2800      	cmp	r0, #0
 800169a:	d18f      	bne.n	80015bc <mpu_set_sample_rate+0x20>
        st.chip_cfg.lp_accel_mode = 0;
 800169c:	7520      	strb	r0, [r4, #20]
 800169e:	e78d      	b.n	80015bc <mpu_set_sample_rate+0x20>
    else if (lpf >= 98)
 80016a0:	2b61      	cmp	r3, #97	; 0x61
 80016a2:	d80a      	bhi.n	80016ba <mpu_set_sample_rate+0x11e>
    else if (lpf >= 42)
 80016a4:	2b29      	cmp	r3, #41	; 0x29
 80016a6:	d927      	bls.n	80016f8 <mpu_set_sample_rate+0x15c>
        data = INV_FILTER_42HZ;
 80016a8:	2303      	movs	r3, #3
 80016aa:	f88d 3004 	strb.w	r3, [sp, #4]
 80016ae:	e7ce      	b.n	800164e <mpu_set_sample_rate+0xb2>
                mpu_lp_accel_mode(rate);
 80016b0:	f7ff feb6 	bl	8001420 <mpu_lp_accel_mode>
}
 80016b4:	4630      	mov	r0, r6
 80016b6:	b002      	add	sp, #8
 80016b8:	bd70      	pop	{r4, r5, r6, pc}
        data = INV_FILTER_98HZ;
 80016ba:	2302      	movs	r3, #2
 80016bc:	f88d 3004 	strb.w	r3, [sp, #4]
 80016c0:	e7c5      	b.n	800164e <mpu_set_sample_rate+0xb2>
    if (st.chip_cfg.bypass_mode)
 80016c2:	7ca3      	ldrb	r3, [r4, #18]
        tmp = 0;
 80016c4:	f88d 6004 	strb.w	r6, [sp, #4]
    if (st.chip_cfg.bypass_mode)
 80016c8:	b32b      	cbz	r3, 8001716 <mpu_set_sample_rate+0x17a>
        tmp |= BIT_BYPASS_EN;
 80016ca:	2302      	movs	r3, #2
 80016cc:	2282      	movs	r2, #130	; 0x82
 80016ce:	f88d 3004 	strb.w	r3, [sp, #4]
    if (st.chip_cfg.active_low_int)
 80016d2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80016d6:	b10b      	cbz	r3, 80016dc <mpu_set_sample_rate+0x140>
        tmp |= BIT_ACTL;
 80016d8:	f88d 2004 	strb.w	r2, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80016dc:	ae01      	add	r6, sp, #4
 80016de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80016e2:	7dd1      	ldrb	r1, [r2, #23]
 80016e4:	7818      	ldrb	r0, [r3, #0]
 80016e6:	2201      	movs	r2, #1
 80016e8:	4633      	mov	r3, r6
 80016ea:	f003 fda1 	bl	8005230 <i2c_write>
 80016ee:	2800      	cmp	r0, #0
 80016f0:	d1c6      	bne.n	8001680 <mpu_set_sample_rate+0xe4>
    st.chip_cfg.latched_int = enable;
 80016f2:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
 80016f6:	e7c3      	b.n	8001680 <mpu_set_sample_rate+0xe4>
    else if (lpf >= 20)
 80016f8:	2b13      	cmp	r3, #19
 80016fa:	d808      	bhi.n	800170e <mpu_set_sample_rate+0x172>
    else if (lpf >= 10)
 80016fc:	2b09      	cmp	r3, #9
 80016fe:	d90c      	bls.n	800171a <mpu_set_sample_rate+0x17e>
        data = INV_FILTER_10HZ;
 8001700:	2305      	movs	r3, #5
 8001702:	f88d 3004 	strb.w	r3, [sp, #4]
 8001706:	e7a2      	b.n	800164e <mpu_set_sample_rate+0xb2>
        return -1;
 8001708:	f04f 36ff 	mov.w	r6, #4294967295
 800170c:	e7ae      	b.n	800166c <mpu_set_sample_rate+0xd0>
        data = INV_FILTER_20HZ;
 800170e:	2304      	movs	r3, #4
 8001710:	f88d 3004 	strb.w	r3, [sp, #4]
 8001714:	e79b      	b.n	800164e <mpu_set_sample_rate+0xb2>
    if (st.chip_cfg.bypass_mode)
 8001716:	2280      	movs	r2, #128	; 0x80
 8001718:	e7db      	b.n	80016d2 <mpu_set_sample_rate+0x136>
        data = INV_FILTER_5HZ;
 800171a:	2206      	movs	r2, #6
 800171c:	4613      	mov	r3, r2
 800171e:	f88d 2004 	strb.w	r2, [sp, #4]
 8001722:	e794      	b.n	800164e <mpu_set_sample_rate+0xb2>
 8001724:	89e3      	ldrh	r3, [r4, #14]
 8001726:	e78a      	b.n	800163e <mpu_set_sample_rate+0xa2>
 8001728:	20000000 	.word	0x20000000

0800172c <mpu_set_sensors>:
{
 800172c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800172e:	4605      	mov	r5, r0
 8001730:	4c76      	ldr	r4, [pc, #472]	; (800190c <mpu_set_sensors+0x1e0>)
 8001732:	b083      	sub	sp, #12
 8001734:	e9d4 3200 	ldrd	r3, r2, [r4]
 8001738:	7d59      	ldrb	r1, [r3, #21]
    if (sensors & INV_XYZ_GYRO)
 800173a:	f015 0370 	ands.w	r3, r5, #112	; 0x70
 800173e:	7810      	ldrb	r0, [r2, #0]
 8001740:	d07d      	beq.n	800183e <mpu_set_sensors+0x112>
        data = INV_CLK_PLL;
 8001742:	2301      	movs	r3, #1
 8001744:	f88d 3006 	strb.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8001748:	f10d 0606 	add.w	r6, sp, #6
 800174c:	4633      	mov	r3, r6
 800174e:	2201      	movs	r2, #1
 8001750:	f003 fd6e 	bl	8005230 <i2c_write>
 8001754:	2800      	cmp	r0, #0
 8001756:	f040 80d3 	bne.w	8001900 <mpu_set_sensors+0x1d4>
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 800175a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    data = 0;
 800175e:	f88d 0006 	strb.w	r0, [sp, #6]
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8001762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001766:	7323      	strb	r3, [r4, #12]
    if (!(sensors & INV_X_GYRO))
 8001768:	066b      	lsls	r3, r5, #25
 800176a:	d578      	bpl.n	800185e <mpu_set_sensors+0x132>
 800176c:	2338      	movs	r3, #56	; 0x38
 800176e:	2139      	movs	r1, #57	; 0x39
 8001770:	2201      	movs	r2, #1
 8001772:	f04f 0e3a 	mov.w	lr, #58	; 0x3a
 8001776:	f04f 0c3b 	mov.w	ip, #59	; 0x3b
 800177a:	2703      	movs	r7, #3
 800177c:	2002      	movs	r0, #2
    if (!(sensors & INV_Y_GYRO))
 800177e:	f015 0f20 	tst.w	r5, #32
 8001782:	d104      	bne.n	800178e <mpu_set_sensors+0x62>
        data |= BIT_STBY_YG;
 8001784:	4673      	mov	r3, lr
 8001786:	4661      	mov	r1, ip
 8001788:	463a      	mov	r2, r7
 800178a:	f88d 0006 	strb.w	r0, [sp, #6]
    if (!(sensors & INV_Z_GYRO))
 800178e:	06e8      	lsls	r0, r5, #27
        data |= BIT_STBY_ZG;
 8001790:	bf5c      	itt	pl
 8001792:	460b      	movpl	r3, r1
 8001794:	f88d 2006 	strbpl.w	r2, [sp, #6]
    if (!(sensors & INV_XYZ_ACCEL))
 8001798:	0729      	lsls	r1, r5, #28
        data |= BIT_STBY_XYZA;
 800179a:	bf58      	it	pl
 800179c:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 80017a0:	e9d4 2300 	ldrd	r2, r3, [r4]
 80017a4:	7d91      	ldrb	r1, [r2, #22]
 80017a6:	7818      	ldrb	r0, [r3, #0]
 80017a8:	2201      	movs	r2, #1
 80017aa:	4633      	mov	r3, r6
 80017ac:	f003 fd40 	bl	8005230 <i2c_write>
 80017b0:	4602      	mov	r2, r0
 80017b2:	2800      	cmp	r0, #0
 80017b4:	f040 80a4 	bne.w	8001900 <mpu_set_sensors+0x1d4>
 80017b8:	e9d4 3100 	ldrd	r3, r1, [r4]
 80017bc:	7808      	ldrb	r0, [r1, #0]
    if (sensors && (sensors != INV_XYZ_ACCEL))
 80017be:	2d00      	cmp	r5, #0
 80017c0:	d05d      	beq.n	800187e <mpu_set_sensors+0x152>
 80017c2:	2d08      	cmp	r5, #8
 80017c4:	d071      	beq.n	80018aa <mpu_set_sensors+0x17e>
    if (st.chip_cfg.latched_int == enable)
 80017c6:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 80017ca:	2900      	cmp	r1, #0
 80017cc:	d17b      	bne.n	80018c6 <mpu_set_sensors+0x19a>
 80017ce:	f10d 0707 	add.w	r7, sp, #7
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 80017d2:	7919      	ldrb	r1, [r3, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	463b      	mov	r3, r7
 80017d8:	f003 fd3a 	bl	8005250 <i2c_read>
 80017dc:	2800      	cmp	r0, #0
 80017de:	d16d      	bne.n	80018bc <mpu_set_sensors+0x190>
    if (sensors & INV_XYZ_COMPASS) {
 80017e0:	07ea      	lsls	r2, r5, #31
 80017e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80017e6:	d554      	bpl.n	8001892 <mpu_set_sensors+0x166>
        data = AKM_SINGLE_MEASUREMENT;
 80017e8:	2111      	movs	r1, #17
    if (st.chip_cfg.dmp_on)
 80017ea:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
        user_ctrl |= BIT_AUX_IF_EN;
 80017ee:	f043 0320 	orr.w	r3, r3, #32
 80017f2:	f88d 1006 	strb.w	r1, [sp, #6]
    if (st.chip_cfg.dmp_on)
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	d054      	beq.n	80018a4 <mpu_set_sensors+0x178>
        user_ctrl |= BIT_DMP_EN;
 80017fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017fe:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 8001802:	e9d4 1200 	ldrd	r1, r2, [r4]
 8001806:	4633      	mov	r3, r6
 8001808:	7810      	ldrb	r0, [r2, #0]
 800180a:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 800180e:	2201      	movs	r2, #1
 8001810:	f003 fd0e 	bl	8005230 <i2c_write>
 8001814:	2800      	cmp	r0, #0
 8001816:	d151      	bne.n	80018bc <mpu_set_sensors+0x190>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8001818:	e9d4 1200 	ldrd	r1, r2, [r4]
 800181c:	463b      	mov	r3, r7
 800181e:	7810      	ldrb	r0, [r2, #0]
 8001820:	7909      	ldrb	r1, [r1, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f003 fd04 	bl	8005230 <i2c_write>
 8001828:	4606      	mov	r6, r0
 800182a:	2800      	cmp	r0, #0
 800182c:	d146      	bne.n	80018bc <mpu_set_sensors+0x190>
    delay_ms(50);
 800182e:	2032      	movs	r0, #50	; 0x32
    st.chip_cfg.sensors = sensors;
 8001830:	72a5      	strb	r5, [r4, #10]
    st.chip_cfg.lp_accel_mode = 0;
 8001832:	7526      	strb	r6, [r4, #20]
    delay_ms(50);
 8001834:	f003 fd1c 	bl	8005270 <delay_ms>
}
 8001838:	4630      	mov	r0, r6
 800183a:	b003      	add	sp, #12
 800183c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (sensors)
 800183e:	b9dd      	cbnz	r5, 8001878 <mpu_set_sensors+0x14c>
        data = BIT_SLEEP;
 8001840:	2340      	movs	r3, #64	; 0x40
 8001842:	ae02      	add	r6, sp, #8
 8001844:	f806 3d02 	strb.w	r3, [r6, #-2]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8001848:	4633      	mov	r3, r6
 800184a:	2201      	movs	r2, #1
 800184c:	f003 fcf0 	bl	8005230 <i2c_write>
 8001850:	2800      	cmp	r0, #0
 8001852:	d155      	bne.n	8001900 <mpu_set_sensors+0x1d4>
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8001854:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800185c:	7323      	strb	r3, [r4, #12]
        data |= BIT_STBY_XG;
 800185e:	2204      	movs	r2, #4
 8001860:	233c      	movs	r3, #60	; 0x3c
 8001862:	f88d 2006 	strb.w	r2, [sp, #6]
 8001866:	213d      	movs	r1, #61	; 0x3d
 8001868:	2205      	movs	r2, #5
 800186a:	f04f 0e3e 	mov.w	lr, #62	; 0x3e
 800186e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 8001872:	2707      	movs	r7, #7
 8001874:	2006      	movs	r0, #6
 8001876:	e782      	b.n	800177e <mpu_set_sensors+0x52>
        data = 0;
 8001878:	f88d 3006 	strb.w	r3, [sp, #6]
 800187c:	e764      	b.n	8001748 <mpu_set_sensors+0x1c>
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 800187e:	f10d 0707 	add.w	r7, sp, #7
 8001882:	7919      	ldrb	r1, [r3, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	463b      	mov	r3, r7
 8001888:	f003 fce2 	bl	8005250 <i2c_read>
 800188c:	b9b0      	cbnz	r0, 80018bc <mpu_set_sensors+0x190>
 800188e:	f89d 3007 	ldrb.w	r3, [sp, #7]
        data = AKM_POWER_DOWN;
 8001892:	2110      	movs	r1, #16
    if (st.chip_cfg.dmp_on)
 8001894:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
        user_ctrl &= ~BIT_AUX_IF_EN;
 8001898:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800189c:	f88d 1006 	strb.w	r1, [sp, #6]
    if (st.chip_cfg.dmp_on)
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	d1aa      	bne.n	80017fa <mpu_set_sensors+0xce>
        user_ctrl &= ~BIT_DMP_EN;
 80018a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018a8:	e7a9      	b.n	80017fe <mpu_set_sensors+0xd2>
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 80018aa:	f10d 0707 	add.w	r7, sp, #7
 80018ae:	7919      	ldrb	r1, [r3, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	463b      	mov	r3, r7
 80018b4:	f003 fccc 	bl	8005250 <i2c_read>
 80018b8:	2800      	cmp	r0, #0
 80018ba:	d0e8      	beq.n	800188e <mpu_set_sensors+0x162>
        return -1;
 80018bc:	f04f 36ff 	mov.w	r6, #4294967295
}
 80018c0:	4630      	mov	r0, r6
 80018c2:	b003      	add	sp, #12
 80018c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (st.chip_cfg.bypass_mode)
 80018c6:	7ca1      	ldrb	r1, [r4, #18]
        tmp = 0;
 80018c8:	f88d 2007 	strb.w	r2, [sp, #7]
    if (st.chip_cfg.bypass_mode)
 80018cc:	b1b1      	cbz	r1, 80018fc <mpu_set_sensors+0x1d0>
        tmp |= BIT_BYPASS_EN;
 80018ce:	2202      	movs	r2, #2
 80018d0:	2182      	movs	r1, #130	; 0x82
 80018d2:	f88d 2007 	strb.w	r2, [sp, #7]
    if (st.chip_cfg.active_low_int)
 80018d6:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 80018da:	b10a      	cbz	r2, 80018e0 <mpu_set_sensors+0x1b4>
        tmp |= BIT_ACTL;
 80018dc:	f88d 1007 	strb.w	r1, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80018e0:	f10d 0707 	add.w	r7, sp, #7
 80018e4:	7dd9      	ldrb	r1, [r3, #23]
 80018e6:	2201      	movs	r2, #1
 80018e8:	463b      	mov	r3, r7
 80018ea:	f003 fca1 	bl	8005230 <i2c_write>
 80018ee:	b908      	cbnz	r0, 80018f4 <mpu_set_sensors+0x1c8>
    st.chip_cfg.latched_int = enable;
 80018f0:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
 80018f4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80018f8:	7810      	ldrb	r0, [r2, #0]
 80018fa:	e76a      	b.n	80017d2 <mpu_set_sensors+0xa6>
    if (st.chip_cfg.bypass_mode)
 80018fc:	2180      	movs	r1, #128	; 0x80
 80018fe:	e7ea      	b.n	80018d6 <mpu_set_sensors+0x1aa>
        st.chip_cfg.sensors = 0;
 8001900:	2300      	movs	r3, #0
        return -1;
 8001902:	f04f 36ff 	mov.w	r6, #4294967295
        st.chip_cfg.sensors = 0;
 8001906:	72a3      	strb	r3, [r4, #10]
        return -1;
 8001908:	e796      	b.n	8001838 <mpu_set_sensors+0x10c>
 800190a:	bf00      	nop
 800190c:	20000000 	.word	0x20000000

08001910 <mpu_init>:
    data[0] = BIT_RESET;
 8001910:	2380      	movs	r3, #128	; 0x80
{
 8001912:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001914:	b085      	sub	sp, #20
    data[0] = BIT_RESET;
 8001916:	ad04      	add	r5, sp, #16
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001918:	4c71      	ldr	r4, [pc, #452]	; (8001ae0 <mpu_init+0x1d0>)
    data[0] = BIT_RESET;
 800191a:	f805 3d08 	strb.w	r3, [r5, #-8]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800191e:	e9d4 2100 	ldrd	r2, r1, [r4]
 8001922:	462b      	mov	r3, r5
 8001924:	7808      	ldrb	r0, [r1, #0]
 8001926:	7d51      	ldrb	r1, [r2, #21]
 8001928:	2201      	movs	r2, #1
 800192a:	f003 fc81 	bl	8005230 <i2c_write>
 800192e:	2800      	cmp	r0, #0
 8001930:	f040 81a9 	bne.w	8001c86 <mpu_init+0x376>
 8001934:	4606      	mov	r6, r0
    delay_ms(100);
 8001936:	2064      	movs	r0, #100	; 0x64
 8001938:	f003 fc9a 	bl	8005270 <delay_ms>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800193c:	e9d4 3200 	ldrd	r3, r2, [r4]
    data[0] = 0x00;
 8001940:	f88d 6008 	strb.w	r6, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001944:	7810      	ldrb	r0, [r2, #0]
 8001946:	7d59      	ldrb	r1, [r3, #21]
 8001948:	2201      	movs	r2, #1
 800194a:	462b      	mov	r3, r5
 800194c:	f003 fc70 	bl	8005230 <i2c_write>
 8001950:	2800      	cmp	r0, #0
 8001952:	f040 8198 	bne.w	8001c86 <mpu_init+0x376>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 8001956:	e9d4 2100 	ldrd	r2, r1, [r4]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 800195a:	2348      	movs	r3, #72	; 0x48
   st.chip_cfg.accel_half = 0;
 800195c:	74e0      	strb	r0, [r4, #19]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 800195e:	f88d 3008 	strb.w	r3, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 8001962:	7808      	ldrb	r0, [r1, #0]
 8001964:	462b      	mov	r3, r5
 8001966:	7a11      	ldrb	r1, [r2, #8]
 8001968:	2201      	movs	r2, #1
 800196a:	f003 fc61 	bl	8005230 <i2c_write>
 800196e:	2800      	cmp	r0, #0
 8001970:	f040 8189 	bne.w	8001c86 <mpu_init+0x376>
    st.chip_cfg.sample_rate = 0xFFFF;
 8001974:	f64f 72ff 	movw	r2, #65535	; 0xffff
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8001978:	2701      	movs	r7, #1
    st.chip_cfg.gyro_fsr = 0xFF;
 800197a:	f04f 36ff 	mov.w	r6, #4294967295
    st.chip_cfg.fifo_enable = 0xFF;
 800197e:	f04f 0eff 	mov.w	lr, #255	; 0xff
        data = INV_FSR_2000DPS << 3;
 8001982:	f04f 0c18 	mov.w	ip, #24
    st.chip_cfg.fifo_enable = 0xFF;
 8001986:	7422      	strb	r2, [r4, #16]
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 8001988:	8522      	strh	r2, [r4, #40]	; 0x28
        data = INV_FSR_2000DPS << 3;
 800198a:	ad04      	add	r5, sp, #16
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 800198c:	6862      	ldr	r2, [r4, #4]
 800198e:	6821      	ldr	r1, [r4, #0]
        data = INV_FSR_2000DPS << 3;
 8001990:	f805 cd0c 	strb.w	ip, [r5, #-12]!
    st.chip_cfg.lp_accel_mode = 0;
 8001994:	82a0      	strh	r0, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8001996:	f8c4 0016 	str.w	r0, [r4, #22]
    st.chip_cfg.dmp_on = 0;
 800199a:	6260      	str	r0, [r4, #36]	; 0x24
    st.chip_cfg.gyro_fsr = 0xFF;
 800199c:	60a6      	str	r6, [r4, #8]
    st.chip_cfg.sample_rate = 0xFFFF;
 800199e:	81e6      	strh	r6, [r4, #14]
    st.chip_cfg.bypass_mode = 0xFF;
 80019a0:	f884 e012 	strb.w	lr, [r4, #18]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 80019a4:	7327      	strb	r7, [r4, #12]
    st.chip_cfg.active_low_int = 1;
 80019a6:	8467      	strh	r7, [r4, #34]	; 0x22
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 80019a8:	f8c4 001a 	str.w	r0, [r4, #26]
 80019ac:	f8c4 001e 	str.w	r0, [r4, #30]
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 80019b0:	7810      	ldrb	r0, [r2, #0]
 80019b2:	7989      	ldrb	r1, [r1, #6]
 80019b4:	462b      	mov	r3, r5
 80019b6:	463a      	mov	r2, r7
 80019b8:	f003 fc3a 	bl	8005230 <i2c_write>
 80019bc:	2800      	cmp	r0, #0
 80019be:	f040 808b 	bne.w	8001ad8 <mpu_init+0x1c8>
    st.chip_cfg.gyro_fsr = data >> 3;
 80019c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if (!(st.chip_cfg.sensors))
 80019c6:	7aa2      	ldrb	r2, [r4, #10]
    st.chip_cfg.gyro_fsr = data >> 3;
 80019c8:	08db      	lsrs	r3, r3, #3
 80019ca:	7223      	strb	r3, [r4, #8]
    if (!(st.chip_cfg.sensors))
 80019cc:	2a00      	cmp	r2, #0
 80019ce:	f000 815a 	beq.w	8001c86 <mpu_init+0x376>
    if (st.chip_cfg.accel_fsr == (data >> 3))
 80019d2:	7a63      	ldrb	r3, [r4, #9]
        data = INV_FSR_2G << 3;
 80019d4:	f88d 0004 	strb.w	r0, [sp, #4]
    if (st.chip_cfg.accel_fsr == (data >> 3))
 80019d8:	b193      	cbz	r3, 8001a00 <mpu_init+0xf0>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 80019da:	e9d4 1300 	ldrd	r1, r3, [r4]
 80019de:	463a      	mov	r2, r7
 80019e0:	7818      	ldrb	r0, [r3, #0]
 80019e2:	79c9      	ldrb	r1, [r1, #7]
 80019e4:	462b      	mov	r3, r5
 80019e6:	f003 fc23 	bl	8005230 <i2c_write>
 80019ea:	2800      	cmp	r0, #0
 80019ec:	f040 814b 	bne.w	8001c86 <mpu_init+0x376>
    st.chip_cfg.accel_fsr = data >> 3;
 80019f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if (!(st.chip_cfg.sensors))
 80019f4:	7aa2      	ldrb	r2, [r4, #10]
    st.chip_cfg.accel_fsr = data >> 3;
 80019f6:	08db      	lsrs	r3, r3, #3
 80019f8:	7263      	strb	r3, [r4, #9]
    if (!(st.chip_cfg.sensors))
 80019fa:	2a00      	cmp	r2, #0
 80019fc:	f000 8143 	beq.w	8001c86 <mpu_init+0x376>
        data = INV_FILTER_42HZ;
 8001a00:	2203      	movs	r2, #3
    if (st.chip_cfg.lpf == data)
 8001a02:	7ae3      	ldrb	r3, [r4, #11]
        data = INV_FILTER_42HZ;
 8001a04:	f88d 2004 	strb.w	r2, [sp, #4]
    if (st.chip_cfg.lpf == data)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d00d      	beq.n	8001a28 <mpu_init+0x118>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8001a0c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001a10:	7891      	ldrb	r1, [r2, #2]
 8001a12:	7818      	ldrb	r0, [r3, #0]
 8001a14:	2201      	movs	r2, #1
 8001a16:	462b      	mov	r3, r5
 8001a18:	f003 fc0a 	bl	8005230 <i2c_write>
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	f040 8132 	bne.w	8001c86 <mpu_init+0x376>
    st.chip_cfg.lpf = data;
 8001a22:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001a26:	72e3      	strb	r3, [r4, #11]
    if (mpu_set_sample_rate(1000))
 8001a28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a2c:	f7ff fdb6 	bl	800159c <mpu_set_sample_rate>
 8001a30:	2800      	cmp	r0, #0
 8001a32:	f040 8128 	bne.w	8001c86 <mpu_init+0x376>
    if (st.chip_cfg.dmp_on)
 8001a36:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001a3a:	b9c3      	cbnz	r3, 8001a6e <mpu_init+0x15e>
        if (!(st.chip_cfg.sensors))
 8001a3c:	7aa2      	ldrb	r2, [r4, #10]
 8001a3e:	2a00      	cmp	r2, #0
 8001a40:	f000 8121 	beq.w	8001c86 <mpu_init+0x376>
        if (sensors || st.chip_cfg.lp_accel_mode)
 8001a44:	7d22      	ldrb	r2, [r4, #20]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8001a46:	7423      	strb	r3, [r4, #16]
        if (sensors || st.chip_cfg.lp_accel_mode)
 8001a48:	2a00      	cmp	r2, #0
 8001a4a:	f000 8125 	beq.w	8001c98 <mpu_init+0x388>
        if (enable && st.chip_cfg.int_enable)
 8001a4e:	7c63      	ldrb	r3, [r4, #17]
 8001a50:	b96b      	cbnz	r3, 8001a6e <mpu_init+0x15e>
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001a52:	e9d4 1300 	ldrd	r1, r3, [r4]
            tmp = BIT_DATA_RDY_EN;
 8001a56:	2201      	movs	r2, #1
 8001a58:	f88d 2004 	strb.w	r2, [sp, #4]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001a5c:	7818      	ldrb	r0, [r3, #0]
 8001a5e:	7c49      	ldrb	r1, [r1, #17]
 8001a60:	462b      	mov	r3, r5
 8001a62:	f003 fbe5 	bl	8005230 <i2c_write>
 8001a66:	b910      	cbnz	r0, 8001a6e <mpu_init+0x15e>
        st.chip_cfg.int_enable = tmp;
 8001a68:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001a6c:	7463      	strb	r3, [r4, #17]
    if (st.chip_cfg.bypass_mode == bypass_on)
 8001a6e:	7ca3      	ldrb	r3, [r4, #18]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	f040 8105 	bne.w	8001c80 <mpu_init+0x370>
{
 8001a76:	260c      	movs	r6, #12
    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 8001a78:	462b      	mov	r3, r5
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4630      	mov	r0, r6
 8001a80:	f003 fbe6 	bl	8005250 <i2c_read>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8001a84:	1c73      	adds	r3, r6, #1
        if (!result && (data[0] == AKM_WHOAMI))
 8001a86:	b918      	cbnz	r0, 8001a90 <mpu_init+0x180>
 8001a88:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001a8c:	2a48      	cmp	r2, #72	; 0x48
 8001a8e:	d02b      	beq.n	8001ae8 <mpu_init+0x1d8>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8001a90:	b2de      	uxtb	r6, r3
 8001a92:	2e10      	cmp	r6, #16
 8001a94:	d1f0      	bne.n	8001a78 <mpu_init+0x168>
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8001a96:	89e3      	ldrh	r3, [r4, #14]
 8001a98:	2b09      	cmp	r3, #9
 8001a9a:	f240 80f4 	bls.w	8001c86 <mpu_init+0x376>
    div = st.chip_cfg.sample_rate / rate - 1;
 8001a9e:	4911      	ldr	r1, [pc, #68]	; (8001ae4 <mpu_init+0x1d4>)
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8001aa0:	6822      	ldr	r2, [r4, #0]
    div = st.chip_cfg.sample_rate / rate - 1;
 8001aa2:	fba1 1303 	umull	r1, r3, r1, r3
 8001aa6:	08db      	lsrs	r3, r3, #3
 8001aa8:	3b01      	subs	r3, #1
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8001aaa:	6860      	ldr	r0, [r4, #4]
    div = st.chip_cfg.sample_rate / rate - 1;
 8001aac:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8001ab0:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
 8001ab4:	462b      	mov	r3, r5
 8001ab6:	7800      	ldrb	r0, [r0, #0]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f003 fbb9 	bl	8005230 <i2c_write>
 8001abe:	4606      	mov	r6, r0
 8001ac0:	2800      	cmp	r0, #0
 8001ac2:	f040 80e0 	bne.w	8001c86 <mpu_init+0x376>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 8001ac6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001aca:	89e3      	ldrh	r3, [r4, #14]
 8001acc:	3201      	adds	r2, #1
 8001ace:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ad2:	8523      	strh	r3, [r4, #40]	; 0x28
    mpu_set_sensors(0);
 8001ad4:	f7ff fe2a 	bl	800172c <mpu_set_sensors>
}
 8001ad8:	4630      	mov	r0, r6
 8001ada:	b005      	add	sp, #20
 8001adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	cccccccd 	.word	0xcccccccd
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;

    data[0] = AKM_POWER_DOWN;
 8001ae8:	2710      	movs	r7, #16
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001aea:	4630      	mov	r0, r6
 8001aec:	462b      	mov	r3, r5
 8001aee:	2201      	movs	r2, #1
 8001af0:	210a      	movs	r1, #10
    st.chip_cfg.compass_addr = akm_addr;
 8001af2:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    data[0] = AKM_POWER_DOWN;
 8001af6:	f88d 7004 	strb.w	r7, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001afa:	f003 fb99 	bl	8005230 <i2c_write>
 8001afe:	2800      	cmp	r0, #0
 8001b00:	d1c9      	bne.n	8001a96 <mpu_init+0x186>
        return -1;
    delay_ms(1);

    data[0] = AKM_FUSE_ROM_ACCESS;
 8001b02:	261f      	movs	r6, #31
    delay_ms(1);
 8001b04:	2001      	movs	r0, #1
 8001b06:	f003 fbb3 	bl	8005270 <delay_ms>
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001b0a:	462b      	mov	r3, r5
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	210a      	movs	r1, #10
 8001b10:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    data[0] = AKM_FUSE_ROM_ACCESS;
 8001b14:	f88d 6004 	strb.w	r6, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001b18:	f003 fb8a 	bl	8005230 <i2c_write>
 8001b1c:	2800      	cmp	r0, #0
 8001b1e:	d1ba      	bne.n	8001a96 <mpu_init+0x186>
        return -1;
    delay_ms(1);
 8001b20:	2001      	movs	r0, #1
 8001b22:	f003 fba5 	bl	8005270 <delay_ms>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 8001b26:	462b      	mov	r3, r5
 8001b28:	2203      	movs	r2, #3
 8001b2a:	4639      	mov	r1, r7
 8001b2c:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8001b30:	f003 fb8e 	bl	8005250 <i2c_read>
 8001b34:	2800      	cmp	r0, #0
 8001b36:	d1ae      	bne.n	8001a96 <mpu_init+0x186>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8001b38:	f89d 2004 	ldrb.w	r2, [sp, #4]
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8001b3c:	f89d 0005 	ldrb.w	r0, [sp, #5]
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 8001b40:	f89d 6006 	ldrb.w	r6, [sp, #6]
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8001b44:	3280      	adds	r2, #128	; 0x80
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8001b46:	3080      	adds	r0, #128	; 0x80
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 8001b48:	3680      	adds	r6, #128	; 0x80
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8001b4a:	85a2      	strh	r2, [r4, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8001b4c:	85e0      	strh	r0, [r4, #46]	; 0x2e

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001b4e:	462b      	mov	r3, r5
 8001b50:	2201      	movs	r2, #1
 8001b52:	210a      	movs	r1, #10
 8001b54:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 8001b58:	8626      	strh	r6, [r4, #48]	; 0x30
    data[0] = AKM_POWER_DOWN;
 8001b5a:	f88d 7004 	strb.w	r7, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001b5e:	f003 fb67 	bl	8005230 <i2c_write>
 8001b62:	4606      	mov	r6, r0
 8001b64:	2800      	cmp	r0, #0
 8001b66:	d196      	bne.n	8001a96 <mpu_init+0x186>
        return -1;
    delay_ms(1);
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f003 fb81 	bl	8005270 <delay_ms>
    if (st.chip_cfg.bypass_mode == bypass_on)
 8001b6e:	7ca3      	ldrb	r3, [r4, #18]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f040 808d 	bne.w	8001c90 <mpu_init+0x380>

    mpu_set_bypass(0);

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8001b76:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = 0x40;
 8001b7a:	2140      	movs	r1, #64	; 0x40
 8001b7c:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8001b80:	7e91      	ldrb	r1, [r2, #26]
 8001b82:	7818      	ldrb	r0, [r3, #0]
 8001b84:	2201      	movs	r2, #1
 8001b86:	462b      	mov	r3, r5
 8001b88:	f003 fb52 	bl	8005230 <i2c_write>
 8001b8c:	2800      	cmp	r0, #0
 8001b8e:	d182      	bne.n	8001a96 <mpu_init+0x186>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8001b90:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 8001b94:	6862      	ldr	r2, [r4, #4]
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8001b96:	f063 037f 	orn	r3, r3, #127	; 0x7f
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 8001b9a:	6821      	ldr	r1, [r4, #0]
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8001b9c:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 8001ba0:	7810      	ldrb	r0, [r2, #0]
 8001ba2:	7f89      	ldrb	r1, [r1, #30]
 8001ba4:	462b      	mov	r3, r5
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f003 fb42 	bl	8005230 <i2c_write>
 8001bac:	2800      	cmp	r0, #0
 8001bae:	f47f af72 	bne.w	8001a96 <mpu_init+0x186>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 8001bb2:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = AKM_REG_ST1;
 8001bb6:	2102      	movs	r1, #2
 8001bb8:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 8001bbc:	7fd1      	ldrb	r1, [r2, #31]
 8001bbe:	7818      	ldrb	r0, [r3, #0]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	462b      	mov	r3, r5
 8001bc4:	f003 fb34 	bl	8005230 <i2c_write>
 8001bc8:	2800      	cmp	r0, #0
 8001bca:	f47f af64 	bne.w	8001a96 <mpu_init+0x186>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 8001bce:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = BIT_SLAVE_EN | 8;
 8001bd2:	2188      	movs	r1, #136	; 0x88
 8001bd4:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 8001bd8:	f892 1020 	ldrb.w	r1, [r2, #32]
 8001bdc:	7818      	ldrb	r0, [r3, #0]
 8001bde:	2201      	movs	r2, #1
 8001be0:	462b      	mov	r3, r5
 8001be2:	f003 fb25 	bl	8005230 <i2c_write>
 8001be6:	2800      	cmp	r0, #0
 8001be8:	f47f af55 	bne.w	8001a96 <mpu_init+0x186>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8001bec:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = st.chip_cfg.compass_addr;
 8001bf0:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 8001bf4:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8001bf8:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 8001bfc:	7818      	ldrb	r0, [r3, #0]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	462b      	mov	r3, r5
 8001c02:	f003 fb15 	bl	8005230 <i2c_write>
 8001c06:	2800      	cmp	r0, #0
 8001c08:	f47f af45 	bne.w	8001a96 <mpu_init+0x186>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8001c0c:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = AKM_REG_CNTL;
 8001c10:	210a      	movs	r1, #10
 8001c12:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8001c16:	f892 1022 	ldrb.w	r1, [r2, #34]	; 0x22
 8001c1a:	7818      	ldrb	r0, [r3, #0]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	462b      	mov	r3, r5
 8001c20:	f003 fb06 	bl	8005230 <i2c_write>
 8001c24:	2800      	cmp	r0, #0
 8001c26:	f47f af36 	bne.w	8001a96 <mpu_init+0x186>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8001c2a:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = BIT_SLAVE_EN | 1;
 8001c2e:	2181      	movs	r1, #129	; 0x81
 8001c30:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8001c34:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 8001c38:	7818      	ldrb	r0, [r3, #0]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	462b      	mov	r3, r5
 8001c3e:	f003 faf7 	bl	8005230 <i2c_write>
 8001c42:	2800      	cmp	r0, #0
 8001c44:	f47f af27 	bne.w	8001a96 <mpu_init+0x186>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 8001c48:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = AKM_SINGLE_MEASUREMENT;
 8001c4c:	2111      	movs	r1, #17
 8001c4e:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 8001c52:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
 8001c56:	7818      	ldrb	r0, [r3, #0]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	462b      	mov	r3, r5
 8001c5c:	f003 fae8 	bl	8005230 <i2c_write>
 8001c60:	2800      	cmp	r0, #0
 8001c62:	f47f af18 	bne.w	8001a96 <mpu_init+0x186>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 8001c66:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = 0x03;
 8001c6a:	2103      	movs	r1, #3
 8001c6c:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 8001c70:	f892 1027 	ldrb.w	r1, [r2, #39]	; 0x27
 8001c74:	7818      	ldrb	r0, [r3, #0]
 8001c76:	2201      	movs	r2, #1
 8001c78:	462b      	mov	r3, r5
 8001c7a:	f003 fad9 	bl	8005230 <i2c_write>
 8001c7e:	e70a      	b.n	8001a96 <mpu_init+0x186>
 8001c80:	f7ff fade 	bl	8001240 <mpu_set_bypass.part.1.constprop.7>
 8001c84:	e6f7      	b.n	8001a76 <mpu_init+0x166>
        return -1;
 8001c86:	f04f 36ff 	mov.w	r6, #4294967295
}
 8001c8a:	4630      	mov	r0, r6
 8001c8c:	b005      	add	sp, #20
 8001c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c90:	4630      	mov	r0, r6
 8001c92:	f7ff fa63 	bl	800115c <mpu_set_bypass.part.1>
 8001c96:	e76e      	b.n	8001b76 <mpu_init+0x266>
            tmp = 0x00;
 8001c98:	f88d 2004 	strb.w	r2, [sp, #4]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001c9c:	e9d4 1300 	ldrd	r1, r3, [r4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	7818      	ldrb	r0, [r3, #0]
 8001ca4:	7c49      	ldrb	r1, [r1, #17]
 8001ca6:	462b      	mov	r3, r5
 8001ca8:	f003 fac2 	bl	8005230 <i2c_write>
 8001cac:	2800      	cmp	r0, #0
 8001cae:	f43f aedb 	beq.w	8001a68 <mpu_init+0x158>
 8001cb2:	e6dc      	b.n	8001a6e <mpu_init+0x15e>

08001cb4 <mpu_read_fifo_stream>:
{
 8001cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!st.chip_cfg.dmp_on)
 8001cb8:	4d24      	ldr	r5, [pc, #144]	; (8001d4c <mpu_read_fifo_stream+0x98>)
{
 8001cba:	b082      	sub	sp, #8
    if (!st.chip_cfg.dmp_on)
 8001cbc:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d038      	beq.n	8001d36 <mpu_read_fifo_stream+0x82>
    if (!st.chip_cfg.sensors)
 8001cc4:	7aab      	ldrb	r3, [r5, #10]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d035      	beq.n	8001d36 <mpu_read_fifo_stream+0x82>
 8001cca:	4617      	mov	r7, r2
    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8001ccc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001cd0:	4688      	mov	r8, r1
 8001cd2:	4606      	mov	r6, r0
 8001cd4:	7b11      	ldrb	r1, [r2, #12]
 8001cd6:	7818      	ldrb	r0, [r3, #0]
 8001cd8:	2202      	movs	r2, #2
 8001cda:	ab01      	add	r3, sp, #4
 8001cdc:	f003 fab8 	bl	8005250 <i2c_read>
 8001ce0:	bb48      	cbnz	r0, 8001d36 <mpu_read_fifo_stream+0x82>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8001ce2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001ce6:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8001cea:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    if (fifo_count < length) {
 8001cee:	42b4      	cmp	r4, r6
 8001cf0:	d320      	bcc.n	8001d34 <mpu_read_fifo_stream+0x80>
 8001cf2:	e9d5 2300 	ldrd	r2, r3, [r5]
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8001cf6:	8859      	ldrh	r1, [r3, #2]
 8001cf8:	7818      	ldrb	r0, [r3, #0]
 8001cfa:	ebb4 0f51 	cmp.w	r4, r1, lsr #1
 8001cfe:	d90c      	bls.n	8001d1a <mpu_read_fifo_stream+0x66>
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8001d00:	7cd1      	ldrb	r1, [r2, #19]
 8001d02:	ab01      	add	r3, sp, #4
 8001d04:	2201      	movs	r2, #1
 8001d06:	f003 faa3 	bl	8005250 <i2c_read>
 8001d0a:	b9a0      	cbnz	r0, 8001d36 <mpu_read_fifo_stream+0x82>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8001d0c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001d10:	06db      	lsls	r3, r3, #27
 8001d12:	d415      	bmi.n	8001d40 <mpu_read_fifo_stream+0x8c>
 8001d14:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001d18:	7818      	ldrb	r0, [r3, #0]
    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 8001d1a:	7b51      	ldrb	r1, [r2, #13]
 8001d1c:	4643      	mov	r3, r8
 8001d1e:	b2f2      	uxtb	r2, r6
 8001d20:	f003 fa96 	bl	8005250 <i2c_read>
 8001d24:	b938      	cbnz	r0, 8001d36 <mpu_read_fifo_stream+0x82>
    more[0] = fifo_count / length - 1;
 8001d26:	fbb4 f4f6 	udiv	r4, r4, r6
 8001d2a:	3c01      	subs	r4, #1
 8001d2c:	703c      	strb	r4, [r7, #0]
}
 8001d2e:	b002      	add	sp, #8
 8001d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        more[0] = 0;
 8001d34:	7038      	strb	r0, [r7, #0]
        return -1;
 8001d36:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001d3a:	b002      	add	sp, #8
 8001d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            mpu_reset_fifo();
 8001d40:	f7ff fac2 	bl	80012c8 <mpu_reset_fifo>
            return -2;
 8001d44:	f06f 0001 	mvn.w	r0, #1
 8001d48:	e7f1      	b.n	8001d2e <mpu_read_fifo_stream+0x7a>
 8001d4a:	bf00      	nop
 8001d4c:	20000000 	.word	0x20000000

08001d50 <mpu_write_mem>:
    if (!data)
 8001d50:	b35a      	cbz	r2, 8001daa <mpu_write_mem+0x5a>
{
 8001d52:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!st.chip_cfg.sensors)
 8001d54:	4c16      	ldr	r4, [pc, #88]	; (8001db0 <mpu_write_mem+0x60>)
{
 8001d56:	b083      	sub	sp, #12
    if (!st.chip_cfg.sensors)
 8001d58:	7aa3      	ldrb	r3, [r4, #10]
 8001d5a:	b313      	cbz	r3, 8001da2 <mpu_write_mem+0x52>
    if (tmp[1] + length > st.hw->bank_size)
 8001d5c:	6867      	ldr	r7, [r4, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001d5e:	b2c3      	uxtb	r3, r0
    if (tmp[1] + length > st.hw->bank_size)
 8001d60:	897d      	ldrh	r5, [r7, #10]
 8001d62:	185e      	adds	r6, r3, r1
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8001d64:	0a00      	lsrs	r0, r0, #8
    if (tmp[1] + length > st.hw->bank_size)
 8001d66:	42ae      	cmp	r6, r5
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001d68:	f88d 3005 	strb.w	r3, [sp, #5]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8001d6c:	f88d 0004 	strb.w	r0, [sp, #4]
    if (tmp[1] + length > st.hw->bank_size)
 8001d70:	dc17      	bgt.n	8001da2 <mpu_write_mem+0x52>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	4615      	mov	r5, r2
 8001d76:	460e      	mov	r6, r1
 8001d78:	7838      	ldrb	r0, [r7, #0]
 8001d7a:	7ed9      	ldrb	r1, [r3, #27]
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	ab01      	add	r3, sp, #4
 8001d80:	f003 fa56 	bl	8005230 <i2c_write>
 8001d84:	b968      	cbnz	r0, 8001da2 <mpu_write_mem+0x52>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8001d86:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001d8a:	462b      	mov	r3, r5
 8001d8c:	b2f2      	uxtb	r2, r6
 8001d8e:	7e09      	ldrb	r1, [r1, #24]
 8001d90:	7800      	ldrb	r0, [r0, #0]
 8001d92:	f003 fa4d 	bl	8005230 <i2c_write>
 8001d96:	3000      	adds	r0, #0
 8001d98:	bf18      	it	ne
 8001d9a:	2001      	movne	r0, #1
 8001d9c:	4240      	negs	r0, r0
}
 8001d9e:	b003      	add	sp, #12
 8001da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
 8001da2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001da6:	b003      	add	sp, #12
 8001da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
 8001daa:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001dae:	4770      	bx	lr
 8001db0:	20000000 	.word	0x20000000

08001db4 <mpu_load_firmware>:
{
 8001db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (st.chip_cfg.dmp_loaded)
 8001db8:	4d4f      	ldr	r5, [pc, #316]	; (8001ef8 <mpu_load_firmware+0x144>)
{
 8001dba:	b08b      	sub	sp, #44	; 0x2c
    if (st.chip_cfg.dmp_loaded)
 8001dbc:	f895 4025 	ldrb.w	r4, [r5, #37]	; 0x25
 8001dc0:	2c00      	cmp	r4, #0
 8001dc2:	d172      	bne.n	8001eaa <mpu_load_firmware+0xf6>
    if (!firmware)
 8001dc4:	2900      	cmp	r1, #0
 8001dc6:	d070      	beq.n	8001eaa <mpu_load_firmware+0xf6>
 8001dc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001dcc:	9101      	str	r1, [sp, #4]
 8001dce:	4681      	mov	r9, r0
    for (ii = 0; ii < length; ii += this_write) {
 8001dd0:	2800      	cmp	r0, #0
 8001dd2:	f000 808c 	beq.w	8001eee <mpu_load_firmware+0x13a>
        this_write = min(LOAD_CHUNK, length - ii);
 8001dd6:	2810      	cmp	r0, #16
 8001dd8:	4606      	mov	r6, r0
 8001dda:	bfa8      	it	ge
 8001ddc:	2610      	movge	r6, #16
    if (!st.chip_cfg.sensors)
 8001dde:	7aab      	ldrb	r3, [r5, #10]
        this_write = min(LOAD_CHUNK, length - ii);
 8001de0:	fa1f fb86 	uxth.w	fp, r6
    if (!st.chip_cfg.sensors)
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d060      	beq.n	8001eaa <mpu_load_firmware+0xf6>
    if (tmp[1] + length > st.hw->bank_size)
 8001de8:	6869      	ldr	r1, [r5, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8001dea:	f8ad 4014 	strh.w	r4, [sp, #20]
    if (tmp[1] + length > st.hw->bank_size)
 8001dee:	894b      	ldrh	r3, [r1, #10]
 8001df0:	42b3      	cmp	r3, r6
 8001df2:	db5a      	blt.n	8001eaa <mpu_load_firmware+0xf6>
 8001df4:	9f01      	ldr	r7, [sp, #4]
 8001df6:	f10d 0a14 	add.w	sl, sp, #20
 8001dfa:	e035      	b.n	8001e68 <mpu_load_firmware+0xb4>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8001dfc:	682b      	ldr	r3, [r5, #0]
 8001dfe:	7808      	ldrb	r0, [r1, #0]
 8001e00:	2202      	movs	r2, #2
 8001e02:	7ed9      	ldrb	r1, [r3, #27]
 8001e04:	4653      	mov	r3, sl
 8001e06:	f003 fa13 	bl	8005230 <i2c_write>
 8001e0a:	2800      	cmp	r0, #0
 8001e0c:	d14d      	bne.n	8001eaa <mpu_load_firmware+0xf6>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8001e0e:	e9d5 1300 	ldrd	r1, r3, [r5]
 8001e12:	4642      	mov	r2, r8
 8001e14:	7818      	ldrb	r0, [r3, #0]
 8001e16:	7e09      	ldrb	r1, [r1, #24]
 8001e18:	ab06      	add	r3, sp, #24
 8001e1a:	f003 fa19 	bl	8005250 <i2c_read>
 8001e1e:	2800      	cmp	r0, #0
 8001e20:	d143      	bne.n	8001eaa <mpu_load_firmware+0xf6>
        if (memcmp(firmware+ii, cur, this_write))
 8001e22:	4632      	mov	r2, r6
 8001e24:	4638      	mov	r0, r7
 8001e26:	a906      	add	r1, sp, #24
 8001e28:	f008 fa34 	bl	800a294 <memcmp>
 8001e2c:	2800      	cmp	r0, #0
 8001e2e:	d141      	bne.n	8001eb4 <mpu_load_firmware+0x100>
    for (ii = 0; ii < length; ii += this_write) {
 8001e30:	445c      	add	r4, fp
 8001e32:	b2a4      	uxth	r4, r4
 8001e34:	45a1      	cmp	r9, r4
 8001e36:	d942      	bls.n	8001ebe <mpu_load_firmware+0x10a>
        this_write = min(LOAD_CHUNK, length - ii);
 8001e38:	eba9 0604 	sub.w	r6, r9, r4
 8001e3c:	2e10      	cmp	r6, #16
 8001e3e:	bfa8      	it	ge
 8001e40:	2610      	movge	r6, #16
    if (!data)
 8001e42:	9b01      	ldr	r3, [sp, #4]
        this_write = min(LOAD_CHUNK, length - ii);
 8001e44:	fa1f fb86 	uxth.w	fp, r6
    if (!data)
 8001e48:	191f      	adds	r7, r3, r4
 8001e4a:	d02e      	beq.n	8001eaa <mpu_load_firmware+0xf6>
    if (!st.chip_cfg.sensors)
 8001e4c:	7aab      	ldrb	r3, [r5, #10]
 8001e4e:	b363      	cbz	r3, 8001eaa <mpu_load_firmware+0xf6>
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8001e50:	0a22      	lsrs	r2, r4, #8
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001e52:	b2e3      	uxtb	r3, r4
    if (tmp[1] + length > st.hw->bank_size)
 8001e54:	6869      	ldr	r1, [r5, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8001e56:	f88d 2014 	strb.w	r2, [sp, #20]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001e5a:	f88d 3015 	strb.w	r3, [sp, #21]
    if (tmp[1] + length > st.hw->bank_size)
 8001e5e:	8948      	ldrh	r0, [r1, #10]
 8001e60:	b2b2      	uxth	r2, r6
 8001e62:	4413      	add	r3, r2
 8001e64:	4283      	cmp	r3, r0
 8001e66:	dc20      	bgt.n	8001eaa <mpu_load_firmware+0xf6>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8001e68:	682b      	ldr	r3, [r5, #0]
 8001e6a:	7808      	ldrb	r0, [r1, #0]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	7ed9      	ldrb	r1, [r3, #27]
 8001e70:	4653      	mov	r3, sl
 8001e72:	f003 f9dd 	bl	8005230 <i2c_write>
 8001e76:	b9c0      	cbnz	r0, 8001eaa <mpu_load_firmware+0xf6>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8001e78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001e7c:	fa5f f886 	uxtb.w	r8, r6
 8001e80:	7e11      	ldrb	r1, [r2, #24]
 8001e82:	7818      	ldrb	r0, [r3, #0]
 8001e84:	4642      	mov	r2, r8
 8001e86:	463b      	mov	r3, r7
 8001e88:	f003 f9d2 	bl	8005230 <i2c_write>
 8001e8c:	b968      	cbnz	r0, 8001eaa <mpu_load_firmware+0xf6>
    if (!st.chip_cfg.sensors)
 8001e8e:	7aab      	ldrb	r3, [r5, #10]
 8001e90:	b15b      	cbz	r3, 8001eaa <mpu_load_firmware+0xf6>
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8001e92:	0a22      	lsrs	r2, r4, #8
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001e94:	b2e3      	uxtb	r3, r4
    if (tmp[1] + length > st.hw->bank_size)
 8001e96:	6869      	ldr	r1, [r5, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001e98:	f88d 3015 	strb.w	r3, [sp, #21]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8001e9c:	f88d 2014 	strb.w	r2, [sp, #20]
 8001ea0:	b2b6      	uxth	r6, r6
    if (tmp[1] + length > st.hw->bank_size)
 8001ea2:	894a      	ldrh	r2, [r1, #10]
 8001ea4:	4433      	add	r3, r6
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	dda8      	ble.n	8001dfc <mpu_load_firmware+0x48>
            return -1;
 8001eaa:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001eae:	b00b      	add	sp, #44	; 0x2c
 8001eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return -2;
 8001eb4:	f06f 0001 	mvn.w	r0, #1
}
 8001eb8:	b00b      	add	sp, #44	; 0x2c
 8001eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ebe:	9802      	ldr	r0, [sp, #8]
    tmp[0] = start_addr >> 8;
 8001ec0:	0a03      	lsrs	r3, r0, #8
 8001ec2:	f88d 3014 	strb.w	r3, [sp, #20]
    tmp[1] = start_addr & 0xFF;
 8001ec6:	f88d 0015 	strb.w	r0, [sp, #21]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8001eca:	e9d5 1200 	ldrd	r1, r2, [r5]
 8001ece:	4653      	mov	r3, sl
 8001ed0:	7810      	ldrb	r0, [r2, #0]
 8001ed2:	7f49      	ldrb	r1, [r1, #29]
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	f003 f9ab 	bl	8005230 <i2c_write>
 8001eda:	2800      	cmp	r0, #0
 8001edc:	d1e5      	bne.n	8001eaa <mpu_load_firmware+0xf6>
    st.chip_cfg.dmp_loaded = 1;
 8001ede:	2301      	movs	r3, #1
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8001ee0:	9a03      	ldr	r2, [sp, #12]
    st.chip_cfg.dmp_loaded = 1;
 8001ee2:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8001ee6:	84ea      	strh	r2, [r5, #38]	; 0x26
}
 8001ee8:	b00b      	add	sp, #44	; 0x2c
 8001eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001eee:	f10d 0a14 	add.w	sl, sp, #20
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	e7e4      	b.n	8001ec0 <mpu_load_firmware+0x10c>
 8001ef6:	bf00      	nop
 8001ef8:	20000000 	.word	0x20000000

08001efc <mpu_set_dmp_state>:
{
 8001efc:	b570      	push	{r4, r5, r6, lr}
    if (st.chip_cfg.dmp_on == enable)
 8001efe:	4c6a      	ldr	r4, [pc, #424]	; (80020a8 <mpu_set_dmp_state+0x1ac>)
{
 8001f00:	b082      	sub	sp, #8
    if (st.chip_cfg.dmp_on == enable)
 8001f02:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8001f06:	4282      	cmp	r2, r0
 8001f08:	d066      	beq.n	8001fd8 <mpu_set_dmp_state+0xdc>
 8001f0a:	4603      	mov	r3, r0
    if (enable) {
 8001f0c:	2800      	cmp	r0, #0
 8001f0e:	d03c      	beq.n	8001f8a <mpu_set_dmp_state+0x8e>
        if (!st.chip_cfg.dmp_loaded)
 8001f10:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80c4 	beq.w	80020a2 <mpu_set_dmp_state+0x1a6>
    if (st.chip_cfg.dmp_on) {
 8001f1a:	2a00      	cmp	r2, #0
 8001f1c:	d05f      	beq.n	8001fde <mpu_set_dmp_state+0xe2>
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001f1e:	e9d4 1200 	ldrd	r1, r2, [r4]
            tmp = 0x00;
 8001f22:	2300      	movs	r3, #0
 8001f24:	ad02      	add	r5, sp, #8
 8001f26:	f805 3d01 	strb.w	r3, [r5, #-1]!
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001f2a:	7810      	ldrb	r0, [r2, #0]
 8001f2c:	462b      	mov	r3, r5
 8001f2e:	7c49      	ldrb	r1, [r1, #17]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f003 f97d 	bl	8005230 <i2c_write>
 8001f36:	b910      	cbnz	r0, 8001f3e <mpu_set_dmp_state+0x42>
        st.chip_cfg.int_enable = tmp;
 8001f38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001f3c:	7463      	strb	r3, [r4, #17]
    if (st.chip_cfg.bypass_mode == bypass_on)
 8001f3e:	7ca3      	ldrb	r3, [r4, #18]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d170      	bne.n	8002026 <mpu_set_dmp_state+0x12a>
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8001f44:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8001f46:	f7ff fb29 	bl	800159c <mpu_set_sample_rate>
        tmp = 0;
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	ab02      	add	r3, sp, #8
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001f4e:	6862      	ldr	r2, [r4, #4]
        tmp = 0;
 8001f50:	f803 1d02 	strb.w	r1, [r3, #-2]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001f54:	7810      	ldrb	r0, [r2, #0]
 8001f56:	2123      	movs	r1, #35	; 0x23
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f003 f969 	bl	8005230 <i2c_write>
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001f5e:	e9d4 1000 	ldrd	r1, r0, [r4]
            tmp = BIT_DMP_INT_EN;
 8001f62:	2302      	movs	r3, #2
        st.chip_cfg.dmp_on = 1;
 8001f64:	2201      	movs	r2, #1
            tmp = BIT_DMP_INT_EN;
 8001f66:	f88d 3007 	strb.w	r3, [sp, #7]
        st.chip_cfg.dmp_on = 1;
 8001f6a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001f6e:	462b      	mov	r3, r5
 8001f70:	7c49      	ldrb	r1, [r1, #17]
 8001f72:	7800      	ldrb	r0, [r0, #0]
 8001f74:	f003 f95c 	bl	8005230 <i2c_write>
 8001f78:	b910      	cbnz	r0, 8001f80 <mpu_set_dmp_state+0x84>
        st.chip_cfg.int_enable = tmp;
 8001f7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001f7e:	7463      	strb	r3, [r4, #17]
        mpu_reset_fifo();
 8001f80:	f7ff f9a2 	bl	80012c8 <mpu_reset_fifo>
    return 0;
 8001f84:	2000      	movs	r0, #0
}
 8001f86:	b002      	add	sp, #8
 8001f88:	bd70      	pop	{r4, r5, r6, pc}
 8001f8a:	6861      	ldr	r1, [r4, #4]
 8001f8c:	7808      	ldrb	r0, [r1, #0]
    if (st.chip_cfg.dmp_on) {
 8001f8e:	2a00      	cmp	r2, #0
 8001f90:	d138      	bne.n	8002004 <mpu_set_dmp_state+0x108>
        if (!st.chip_cfg.sensors)
 8001f92:	7aa3      	ldrb	r3, [r4, #10]
 8001f94:	f10d 0507 	add.w	r5, sp, #7
 8001f98:	b173      	cbz	r3, 8001fb8 <mpu_set_dmp_state+0xbc>
            tmp = 0x00;
 8001f9a:	ad02      	add	r5, sp, #8
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001f9c:	6821      	ldr	r1, [r4, #0]
            tmp = 0x00;
 8001f9e:	f805 2d01 	strb.w	r2, [r5, #-1]!
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001fa2:	462b      	mov	r3, r5
 8001fa4:	7c49      	ldrb	r1, [r1, #17]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f003 f942 	bl	8005230 <i2c_write>
 8001fac:	b910      	cbnz	r0, 8001fb4 <mpu_set_dmp_state+0xb8>
        st.chip_cfg.int_enable = tmp;
 8001fae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001fb2:	7463      	strb	r3, [r4, #17]
 8001fb4:	6863      	ldr	r3, [r4, #4]
 8001fb6:	7818      	ldrb	r0, [r3, #0]
        st.chip_cfg.dmp_on = 0;
 8001fb8:	2600      	movs	r6, #0
        tmp = st.chip_cfg.fifo_enable;
 8001fba:	7c21      	ldrb	r1, [r4, #16]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001fbc:	462b      	mov	r3, r5
 8001fbe:	2201      	movs	r2, #1
        tmp = st.chip_cfg.fifo_enable;
 8001fc0:	f88d 1007 	strb.w	r1, [sp, #7]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001fc4:	2123      	movs	r1, #35	; 0x23
 8001fc6:	f003 f933 	bl	8005230 <i2c_write>
        st.chip_cfg.dmp_on = 0;
 8001fca:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
        mpu_reset_fifo();
 8001fce:	f7ff f97b 	bl	80012c8 <mpu_reset_fifo>
 8001fd2:	4630      	mov	r0, r6
}
 8001fd4:	b002      	add	sp, #8
 8001fd6:	bd70      	pop	{r4, r5, r6, pc}
        return 0;
 8001fd8:	2000      	movs	r0, #0
}
 8001fda:	b002      	add	sp, #8
 8001fdc:	bd70      	pop	{r4, r5, r6, pc}
        if (!st.chip_cfg.sensors)
 8001fde:	7aa3      	ldrb	r3, [r4, #10]
 8001fe0:	f10d 0507 	add.w	r5, sp, #7
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0aa      	beq.n	8001f3e <mpu_set_dmp_state+0x42>
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001fe8:	e9d4 1000 	ldrd	r1, r0, [r4]
            tmp = 0x00;
 8001fec:	ad02      	add	r5, sp, #8
 8001fee:	f805 2d01 	strb.w	r2, [r5, #-1]!
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001ff2:	462b      	mov	r3, r5
 8001ff4:	7c49      	ldrb	r1, [r1, #17]
 8001ff6:	7800      	ldrb	r0, [r0, #0]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f003 f919 	bl	8005230 <i2c_write>
 8001ffe:	2800      	cmp	r0, #0
 8002000:	d09a      	beq.n	8001f38 <mpu_set_dmp_state+0x3c>
 8002002:	e79c      	b.n	8001f3e <mpu_set_dmp_state+0x42>
            tmp = 0x00;
 8002004:	ad02      	add	r5, sp, #8
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8002006:	6822      	ldr	r2, [r4, #0]
            tmp = 0x00;
 8002008:	f805 3d01 	strb.w	r3, [r5, #-1]!
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 800200c:	7c51      	ldrb	r1, [r2, #17]
 800200e:	462b      	mov	r3, r5
 8002010:	2201      	movs	r2, #1
 8002012:	f003 f90d 	bl	8005230 <i2c_write>
 8002016:	2800      	cmp	r0, #0
 8002018:	d1cc      	bne.n	8001fb4 <mpu_set_dmp_state+0xb8>
        st.chip_cfg.int_enable = tmp;
 800201a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800201e:	6863      	ldr	r3, [r4, #4]
 8002020:	7462      	strb	r2, [r4, #17]
 8002022:	7818      	ldrb	r0, [r3, #0]
 8002024:	e7c8      	b.n	8001fb8 <mpu_set_dmp_state+0xbc>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002026:	e9d4 2300 	ldrd	r2, r3, [r4]
 800202a:	7911      	ldrb	r1, [r2, #4]
 800202c:	7818      	ldrb	r0, [r3, #0]
 800202e:	2201      	movs	r2, #1
 8002030:	462b      	mov	r3, r5
 8002032:	f003 f90d 	bl	8005250 <i2c_read>
 8002036:	2800      	cmp	r0, #0
 8002038:	d184      	bne.n	8001f44 <mpu_set_dmp_state+0x48>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800203a:	7aa2      	ldrb	r2, [r4, #10]
 800203c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002040:	07d2      	lsls	r2, r2, #31
            tmp |= BIT_AUX_IF_EN;
 8002042:	bf4c      	ite	mi
 8002044:	f043 0320 	orrmi.w	r3, r3, #32
            tmp &= ~BIT_AUX_IF_EN;
 8002048:	f003 03df 	andpl.w	r3, r3, #223	; 0xdf
 800204c:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002050:	e9d4 1200 	ldrd	r1, r2, [r4]
 8002054:	462b      	mov	r3, r5
 8002056:	7810      	ldrb	r0, [r2, #0]
 8002058:	7909      	ldrb	r1, [r1, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f003 f8e8 	bl	8005230 <i2c_write>
 8002060:	2800      	cmp	r0, #0
 8002062:	f47f af6f 	bne.w	8001f44 <mpu_set_dmp_state+0x48>
        delay_ms(3);
 8002066:	2003      	movs	r0, #3
 8002068:	f003 f902 	bl	8005270 <delay_ms>
        if (st.chip_cfg.active_low_int)
 800206c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8002070:	b1ab      	cbz	r3, 800209e <mpu_set_dmp_state+0x1a2>
 8002072:	21b0      	movs	r1, #176	; 0xb0
            tmp = BIT_ACTL;
 8002074:	2380      	movs	r3, #128	; 0x80
        if (st.chip_cfg.latched_int)
 8002076:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 800207a:	f88d 3007 	strb.w	r3, [sp, #7]
 800207e:	b10a      	cbz	r2, 8002084 <mpu_set_dmp_state+0x188>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8002080:	f88d 1007 	strb.w	r1, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002084:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002088:	7dd1      	ldrb	r1, [r2, #23]
 800208a:	7818      	ldrb	r0, [r3, #0]
 800208c:	2201      	movs	r2, #1
 800208e:	462b      	mov	r3, r5
 8002090:	f003 f8ce 	bl	8005230 <i2c_write>
 8002094:	2800      	cmp	r0, #0
 8002096:	f47f af55 	bne.w	8001f44 <mpu_set_dmp_state+0x48>
    st.chip_cfg.bypass_mode = bypass_on;
 800209a:	74a0      	strb	r0, [r4, #18]
 800209c:	e752      	b.n	8001f44 <mpu_set_dmp_state+0x48>
        if (st.chip_cfg.active_low_int)
 800209e:	2130      	movs	r1, #48	; 0x30
 80020a0:	e7e9      	b.n	8002076 <mpu_set_dmp_state+0x17a>
            return -1;
 80020a2:	f04f 30ff 	mov.w	r0, #4294967295
 80020a6:	e76e      	b.n	8001f86 <mpu_set_dmp_state+0x8a>
 80020a8:	20000000 	.word	0x20000000

080020ac <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
 80020ac:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 80020ae:	4e2b      	ldr	r6, [pc, #172]	; (800215c <mpu_get_compass_reg+0xb0>)
{
 80020b0:	b085      	sub	sp, #20
    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 80020b2:	7ab3      	ldrb	r3, [r6, #10]
 80020b4:	07db      	lsls	r3, r3, #31
 80020b6:	d548      	bpl.n	800214a <mpu_get_compass_reg+0x9e>
        return -1;
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
 80020b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80020bc:	460d      	mov	r5, r1
 80020be:	4604      	mov	r4, r0
 80020c0:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
 80020c4:	7818      	ldrb	r0, [r3, #0]
 80020c6:	2208      	movs	r2, #8
 80020c8:	ab01      	add	r3, sp, #4
 80020ca:	f003 f8c1 	bl	8005250 <i2c_read>
 80020ce:	4607      	mov	r7, r0
 80020d0:	2800      	cmp	r0, #0
 80020d2:	d13a      	bne.n	800214a <mpu_get_compass_reg+0x9e>
        return -2;
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
 80020d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d137      	bne.n	8002150 <mpu_get_compass_reg+0xa4>
        return -2;
    if (tmp[7] & AKM_OVERFLOW)
 80020e0:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	db36      	blt.n	8002156 <mpu_get_compass_reg+0xaa>
        return -3;
#endif
    data[0] = (tmp[2] << 8) | tmp[1];
 80020e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80020ec:	f89d 1005 	ldrb.w	r1, [sp, #5]
    data[1] = (tmp[4] << 8) | tmp[3];
    data[2] = (tmp[6] << 8) | tmp[5];
 80020f0:	f89d 000a 	ldrb.w	r0, [sp, #10]
    data[0] = (tmp[2] << 8) | tmp[1];
 80020f4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
    data[1] = (tmp[4] << 8) | tmp[3];
 80020f8:	f89d c008 	ldrb.w	ip, [sp, #8]
 80020fc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    data[2] = (tmp[6] << 8) | tmp[5];
 8002100:	f89d 3009 	ldrb.w	r3, [sp, #9]
    data[1] = (tmp[4] << 8) | tmp[3];
 8002104:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    data[2] = (tmp[6] << 8) | tmp[5];
 8002108:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    data[0] = (tmp[2] << 8) | tmp[1];
 800210c:	b209      	sxth	r1, r1
    data[1] = (tmp[4] << 8) | tmp[3];
 800210e:	b212      	sxth	r2, r2
    data[2] = (tmp[6] << 8) | tmp[5];
 8002110:	b21b      	sxth	r3, r3
    data[0] = (tmp[2] << 8) | tmp[1];
 8002112:	8021      	strh	r1, [r4, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
 8002114:	8062      	strh	r2, [r4, #2]
    data[2] = (tmp[6] << 8) | tmp[5];
 8002116:	80a3      	strh	r3, [r4, #4]

    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
 8002118:	f9b6 002c 	ldrsh.w	r0, [r6, #44]	; 0x2c
 800211c:	fb01 f100 	mul.w	r1, r1, r0
 8002120:	1209      	asrs	r1, r1, #8
 8002122:	8021      	strh	r1, [r4, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
 8002124:	f9b6 102e 	ldrsh.w	r1, [r6, #46]	; 0x2e
 8002128:	fb02 f201 	mul.w	r2, r2, r1
 800212c:	1212      	asrs	r2, r2, #8
 800212e:	8062      	strh	r2, [r4, #2]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
 8002130:	f9b6 2030 	ldrsh.w	r2, [r6, #48]	; 0x30
 8002134:	fb03 f302 	mul.w	r3, r3, r2
 8002138:	121b      	asrs	r3, r3, #8
 800213a:	80a3      	strh	r3, [r4, #4]

    if (timestamp)
 800213c:	b115      	cbz	r5, 8002144 <mpu_get_compass_reg+0x98>
        get_ms(timestamp);
 800213e:	4628      	mov	r0, r5
 8002140:	f003 f898 	bl	8005274 <get_ms>
    return 0;
#else
    return -1;
#endif
}
 8002144:	4638      	mov	r0, r7
 8002146:	b005      	add	sp, #20
 8002148:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
 800214a:	f04f 37ff 	mov.w	r7, #4294967295
 800214e:	e7f9      	b.n	8002144 <mpu_get_compass_reg+0x98>
        return -2;
 8002150:	f06f 0701 	mvn.w	r7, #1
 8002154:	e7f6      	b.n	8002144 <mpu_get_compass_reg+0x98>
        return -3;
 8002156:	f06f 0702 	mvn.w	r7, #2
 800215a:	e7f3      	b.n	8002144 <mpu_get_compass_reg+0x98>
 800215c:	20000000 	.word	0x20000000

08002160 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 8002160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8002164:	4b59      	ldr	r3, [pc, #356]	; (80022cc <dmp_enable_feature+0x16c>)
{
 8002166:	b087      	sub	sp, #28
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8002168:	ad06      	add	r5, sp, #24
 800216a:	f845 3d0c 	str.w	r3, [r5, #-12]!
{
 800216e:	4604      	mov	r4, r0
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
    mpu_write_mem(D_0_104, 4, tmp);
 8002170:	462a      	mov	r2, r5
 8002172:	2104      	movs	r1, #4
 8002174:	2068      	movs	r0, #104	; 0x68
 8002176:	f7ff fdeb 	bl	8001d50 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 800217a:	23a3      	movs	r3, #163	; 0xa3
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 800217c:	f014 0840 	ands.w	r8, r4, #64	; 0x40
    tmp[0] = 0xA3;
 8002180:	f88d 300c 	strb.w	r3, [sp, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8002184:	f000 809b 	beq.w	80022be <dmp_enable_feature+0x15e>
        tmp[1] = 0xC0;
 8002188:	21c0      	movs	r1, #192	; 0xc0
        tmp[2] = 0xC8;
 800218a:	22c8      	movs	r2, #200	; 0xc8
        tmp[3] = 0xC2;
 800218c:	23c2      	movs	r3, #194	; 0xc2
        tmp[1] = 0xC0;
 800218e:	f88d 100d 	strb.w	r1, [sp, #13]
        tmp[2] = 0xC8;
 8002192:	f88d 200e 	strb.w	r2, [sp, #14]
        tmp[3] = 0xC2;
 8002196:	f88d 300f 	strb.w	r3, [sp, #15]
    } else {
        tmp[1] = 0xA3;
        tmp[2] = 0xA3;
        tmp[3] = 0xA3;
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800219a:	f414 77c0 	ands.w	r7, r4, #384	; 0x180
        tmp[4] = 0xC4;
        tmp[5] = 0xCC;
 800219e:	bf15      	itete	ne
 80021a0:	23c6      	movne	r3, #198	; 0xc6
        tmp[6] = 0xC6;
    } else {
        tmp[4] = 0xA3;
        tmp[5] = 0xA3;
 80021a2:	23a3      	moveq	r3, #163	; 0xa3
        tmp[4] = 0xC4;
 80021a4:	f64c 42c4 	movwne	r2, #52420	; 0xccc4
        tmp[4] = 0xA3;
 80021a8:	f24a 32a3 	movweq	r2, #41891	; 0xa3a3
        tmp[5] = 0xA3;
 80021ac:	f88d 3012 	strb.w	r3, [sp, #18]
        tmp[6] = 0xA3;
    }
    tmp[7] = 0xA3;
 80021b0:	23a3      	movs	r3, #163	; 0xa3
        tmp[4] = 0xA3;
 80021b2:	f8ad 2010 	strh.w	r2, [sp, #16]
    tmp[8] = 0xA3;
    tmp[9] = 0xA3;
    mpu_write_mem(CFG_15,10,tmp);
 80021b6:	210a      	movs	r1, #10
 80021b8:	462a      	mov	r2, r5
 80021ba:	f640 20a7 	movw	r0, #2727	; 0xaa7
    tmp[7] = 0xA3;
 80021be:	f88d 3013 	strb.w	r3, [sp, #19]
    tmp[8] = 0xA3;
 80021c2:	f88d 3014 	strb.w	r3, [sp, #20]
    tmp[9] = 0xA3;
 80021c6:	f88d 3015 	strb.w	r3, [sp, #21]
    mpu_write_mem(CFG_15,10,tmp);
 80021ca:	f7ff fdc1 	bl	8001d50 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
        tmp[0] = DINA20;
    else
        tmp[0] = 0xD8;
 80021ce:	f014 0903 	ands.w	r9, r4, #3
 80021d2:	bf14      	ite	ne
 80021d4:	2320      	movne	r3, #32
 80021d6:	23d8      	moveq	r3, #216	; 0xd8
    mpu_write_mem(CFG_27,1,tmp);
 80021d8:	462a      	mov	r2, r5
 80021da:	2101      	movs	r1, #1
 80021dc:	f640 20b6 	movw	r0, #2742	; 0xab6
 80021e0:	f88d 300c 	strb.w	r3, [sp, #12]
 80021e4:	f7ff fdb4 	bl	8001d50 <mpu_write_mem>
{
    if (enable) {
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 80021e8:	466b      	mov	r3, sp
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80021ea:	466e      	mov	r6, sp
    if (mask & DMP_FEATURE_GYRO_CAL)
 80021ec:	06a0      	lsls	r0, r4, #26
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 80021ee:	bf4c      	ite	mi
 80021f0:	4a37      	ldrmi	r2, [pc, #220]	; (80022d0 <dmp_enable_feature+0x170>)
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 80021f2:	4a38      	ldrpl	r2, [pc, #224]	; (80022d4 <dmp_enable_feature+0x174>)
 80021f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80021f6:	c303      	stmia	r3!, {r0, r1}
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80021f8:	2109      	movs	r1, #9
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 80021fa:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80021fc:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8002200:	4632      	mov	r2, r6
 8002202:	f7ff fda5 	bl	8001d50 <mpu_write_mem>
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8002206:	b157      	cbz	r7, 800221e <dmp_enable_feature+0xbe>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 8002208:	05e1      	lsls	r1, r4, #23
            tmp[0] = 0xB2;
 800220a:	bf4c      	ite	mi
 800220c:	4b32      	ldrmi	r3, [pc, #200]	; (80022d8 <dmp_enable_feature+0x178>)
            tmp[0] = DINAC0;
 800220e:	4b33      	ldrpl	r3, [pc, #204]	; (80022dc <dmp_enable_feature+0x17c>)
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8002210:	462a      	mov	r2, r5
 8002212:	2104      	movs	r1, #4
 8002214:	f640 20a2 	movw	r0, #2722	; 0xaa2
            tmp[0] = DINAC0;
 8002218:	9303      	str	r3, [sp, #12]
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 800221a:	f7ff fd99 	bl	8001d50 <mpu_write_mem>
    if (mask & DMP_FEATURE_LP_QUAT)
 800221e:	0762      	lsls	r2, r4, #29
        regs[1] = DINBC2;
        regs[2] = DINBC4;
        regs[3] = DINBC6;
    }
    else
        memset(regs, 0x8B, 4);
 8002220:	bf54      	ite	pl
 8002222:	f04f 338b 	movpl.w	r3, #2341178251	; 0x8b8b8b8b
        regs[0] = DINBC0;
 8002226:	4b2e      	ldrmi	r3, [pc, #184]	; (80022e0 <dmp_enable_feature+0x180>)

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8002228:	4632      	mov	r2, r6
 800222a:	2104      	movs	r1, #4
 800222c:	f640 2098 	movw	r0, #2712	; 0xa98
        memset(regs, 0x8B, 4);
 8002230:	9300      	str	r3, [sp, #0]
    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8002232:	f7ff fd8d 	bl	8001d50 <mpu_write_mem>

    return mpu_reset_fifo();
 8002236:	f7ff f847 	bl	80012c8 <mpu_reset_fifo>
    if (mask & DMP_FEATURE_6X_LP_QUAT)
 800223a:	06e3      	lsls	r3, r4, #27
        regs[0] = DINA20;
        regs[1] = DINA28;
        regs[2] = DINA30;
        regs[3] = DINA38;
    } else
        memset(regs, 0xA3, 4);
 800223c:	bf54      	ite	pl
 800223e:	f04f 33a3 	movpl.w	r3, #2745410467	; 0xa3a3a3a3
        regs[0] = DINA20;
 8002242:	4b28      	ldrmi	r3, [pc, #160]	; (80022e4 <dmp_enable_feature+0x184>)

    mpu_write_mem(CFG_8, 4, regs);
 8002244:	4632      	mov	r2, r6
 8002246:	2104      	movs	r1, #4
 8002248:	f640 209e 	movw	r0, #2718	; 0xa9e
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 800224c:	4d26      	ldr	r5, [pc, #152]	; (80022e8 <dmp_enable_feature+0x188>)
        memset(regs, 0xA3, 4);
 800224e:	9300      	str	r3, [sp, #0]
    mpu_write_mem(CFG_8, 4, regs);
 8002250:	f7ff fd7e 	bl	8001d50 <mpu_write_mem>

    return mpu_reset_fifo();
 8002254:	f7ff f838 	bl	80012c8 <mpu_reset_fifo>
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8002258:	f044 0308 	orr.w	r3, r4, #8
 800225c:	816b      	strh	r3, [r5, #10]
    mpu_reset_fifo();
 800225e:	f7ff f833 	bl	80012c8 <mpu_reset_fifo>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8002262:	f1b8 0f00 	cmp.w	r8, #0
 8002266:	d11c      	bne.n	80022a2 <dmp_enable_feature+0x142>
    dmp.packet_length = 0;
 8002268:	2304      	movs	r3, #4
 800226a:	2114      	movs	r1, #20
 800226c:	2210      	movs	r2, #16
 800226e:	f04f 0e0a 	mov.w	lr, #10
 8002272:	f04f 0c1a 	mov.w	ip, #26
 8002276:	2616      	movs	r6, #22
 8002278:	2006      	movs	r0, #6
 800227a:	f885 800e 	strb.w	r8, [r5, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 800227e:	b11f      	cbz	r7, 8002288 <dmp_enable_feature+0x128>
        dmp.packet_length += 6;
 8002280:	4673      	mov	r3, lr
 8002282:	4661      	mov	r1, ip
 8002284:	4632      	mov	r2, r6
 8002286:	73a8      	strb	r0, [r5, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 8002288:	f014 0f14 	tst.w	r4, #20
        dmp.packet_length += 16;
 800228c:	bf1c      	itt	ne
 800228e:	460b      	movne	r3, r1
 8002290:	73aa      	strbne	r2, [r5, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8002292:	f1b9 0f00 	cmp.w	r9, #0
 8002296:	d000      	beq.n	800229a <dmp_enable_feature+0x13a>
        dmp.packet_length += 4;
 8002298:	73ab      	strb	r3, [r5, #14]
}
 800229a:	2000      	movs	r0, #0
 800229c:	b007      	add	sp, #28
 800229e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        dmp.packet_length += 6;
 80022a2:	f04f 0806 	mov.w	r8, #6
 80022a6:	230a      	movs	r3, #10
 80022a8:	211a      	movs	r1, #26
 80022aa:	2216      	movs	r2, #22
 80022ac:	f04f 0e10 	mov.w	lr, #16
 80022b0:	f04f 0c20 	mov.w	ip, #32
 80022b4:	261c      	movs	r6, #28
 80022b6:	200c      	movs	r0, #12
 80022b8:	f885 800e 	strb.w	r8, [r5, #14]
 80022bc:	e7df      	b.n	800227e <dmp_enable_feature+0x11e>
        tmp[1] = 0xA3;
 80022be:	f88d 300d 	strb.w	r3, [sp, #13]
        tmp[2] = 0xA3;
 80022c2:	f88d 300e 	strb.w	r3, [sp, #14]
        tmp[3] = 0xA3;
 80022c6:	f88d 300f 	strb.w	r3, [sp, #15]
 80022ca:	e766      	b.n	800219a <dmp_enable_feature+0x3a>
 80022cc:	09e3ca02 	.word	0x09e3ca02
 80022d0:	0800dfbc 	.word	0x0800dfbc
 80022d4:	0800dfc8 	.word	0x0800dfc8
 80022d8:	9bb68bb2 	.word	0x9bb68bb2
 80022dc:	90b480b0 	.word	0x90b480b0
 80022e0:	c6c4c2c0 	.word	0xc6c4c2c0
 80022e4:	38302820 	.word	0x38302820
 80022e8:	200003a4 	.word	0x200003a4

080022ec <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 80022ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned char ii = 0;

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 80022f0:	2500      	movs	r5, #0
{
 80022f2:	b095      	sub	sp, #84	; 0x54
 80022f4:	9c1e      	ldr	r4, [sp, #120]	; 0x78

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 80022f6:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80024bc <dmp_read_fifo+0x1d0>
{
 80022fa:	4681      	mov	r9, r0
 80022fc:	460f      	mov	r7, r1
 80022fe:	4616      	mov	r6, r2
    sensors[0] = 0;
 8002300:	8025      	strh	r5, [r4, #0]
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8002302:	f898 000e 	ldrb.w	r0, [r8, #14]
 8002306:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8002308:	a90c      	add	r1, sp, #48	; 0x30
{
 800230a:	9305      	str	r3, [sp, #20]
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 800230c:	f7ff fcd2 	bl	8001cb4 <mpu_read_fifo_stream>
 8002310:	2800      	cmp	r0, #0
 8002312:	f040 80c9 	bne.w	80024a8 <dmp_read_fifo+0x1bc>
        return -1;

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8002316:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800231a:	4605      	mov	r5, r0
 800231c:	f013 0f14 	tst.w	r3, #20
 8002320:	f040 8086 	bne.w	8002430 <dmp_read_fifo+0x144>
 8002324:	2208      	movs	r2, #8
 8002326:	2105      	movs	r1, #5
 8002328:	9206      	str	r2, [sp, #24]
 800232a:	2204      	movs	r2, #4
 800232c:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8002330:	2203      	movs	r2, #3
 8002332:	9001      	str	r0, [sp, #4]
 8002334:	f04f 0a0b 	mov.w	sl, #11
 8002338:	f04f 0c0a 	mov.w	ip, #10
 800233c:	f04f 0b09 	mov.w	fp, #9
 8002340:	f04f 0807 	mov.w	r8, #7
 8002344:	f04f 0e06 	mov.w	lr, #6
 8002348:	2102      	movs	r1, #2
 800234a:	2001      	movs	r0, #1
 800234c:	9202      	str	r2, [sp, #8]
        }
        sensors[0] |= INV_WXYZ_QUAT;
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 800234e:	065a      	lsls	r2, r3, #25
 8002350:	d53a      	bpl.n	80023c8 <dmp_read_fifo+0xdc>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8002352:	9a01      	ldr	r2, [sp, #4]
 8002354:	ae14      	add	r6, sp, #80	; 0x50
 8002356:	4416      	add	r6, r2
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8002358:	9a02      	ldr	r2, [sp, #8]
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 800235a:	9607      	str	r6, [sp, #28]
 800235c:	ae14      	add	r6, sp, #80	; 0x50
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800235e:	1871      	adds	r1, r6, r1
 8002360:	4432      	add	r2, r6
 8002362:	9109      	str	r1, [sp, #36]	; 0x24
 8002364:	920a      	str	r2, [sp, #40]	; 0x28
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8002366:	9904      	ldr	r1, [sp, #16]
 8002368:	9a03      	ldr	r2, [sp, #12]
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 800236a:	1830      	adds	r0, r6, r0
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 800236c:	4432      	add	r2, r6
 800236e:	4431      	add	r1, r6
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8002370:	9e07      	ldr	r6, [sp, #28]
 8002372:	9008      	str	r0, [sp, #32]
        ii += 6;
        sensors[0] |= INV_XYZ_ACCEL;
 8002374:	f8cd b008 	str.w	fp, [sp, #8]
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8002378:	f816 bc20 	ldrb.w	fp, [r6, #-32]
 800237c:	9e08      	ldr	r6, [sp, #32]
        sensors[0] |= INV_XYZ_ACCEL;
 800237e:	4640      	mov	r0, r8
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8002380:	f816 8c20 	ldrb.w	r8, [r6, #-32]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8002384:	9e09      	ldr	r6, [sp, #36]	; 0x24
        sensors[0] |= INV_XYZ_ACCEL;
 8002386:	e9cd ca03 	strd	ip, sl, [sp, #12]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800238a:	f816 ac20 	ldrb.w	sl, [r6, #-32]
 800238e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
        sensors[0] |= INV_XYZ_ACCEL;
 8002390:	f8cd e004 	str.w	lr, [sp, #4]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8002394:	f816 ec20 	ldrb.w	lr, [r6, #-32]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8002398:	f812 6c20 	ldrb.w	r6, [r2, #-32]
 800239c:	910b      	str	r1, [sp, #44]	; 0x2c
 800239e:	4632      	mov	r2, r6
 80023a0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80023a2:	ea48 280b 	orr.w	r8, r8, fp, lsl #8
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80023a6:	f816 cc20 	ldrb.w	ip, [r6, #-32]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80023aa:	ea4e 2e0a 	orr.w	lr, lr, sl, lsl #8
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80023ae:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80023b2:	f8a7 8000 	strh.w	r8, [r7]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80023b6:	f8a7 e002 	strh.w	lr, [r7, #2]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80023ba:	f8a7 c004 	strh.w	ip, [r7, #4]
        sensors[0] |= INV_XYZ_ACCEL;
 80023be:	8827      	ldrh	r7, [r4, #0]
 80023c0:	9906      	ldr	r1, [sp, #24]
 80023c2:	f047 0708 	orr.w	r7, r7, #8
 80023c6:	8027      	strh	r7, [r4, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80023c8:	f413 7fc0 	tst.w	r3, #384	; 0x180
 80023cc:	d029      	beq.n	8002422 <dmp_read_fifo+0x136>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80023ce:	9e01      	ldr	r6, [sp, #4]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80023d0:	9a02      	ldr	r2, [sp, #8]
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80023d2:	ab14      	add	r3, sp, #80	; 0x50
 80023d4:	441e      	add	r6, r3
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80023d6:	eb03 0c01 	add.w	ip, r3, r1
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80023da:	4418      	add	r0, r3
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80023dc:	441a      	add	r2, r3
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80023de:	9b03      	ldr	r3, [sp, #12]
 80023e0:	a914      	add	r1, sp, #80	; 0x50
 80023e2:	440b      	add	r3, r1
 80023e4:	461f      	mov	r7, r3
 80023e6:	9b04      	ldr	r3, [sp, #16]
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80023e8:	f810 0c20 	ldrb.w	r0, [r0, #-32]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80023ec:	440b      	add	r3, r1
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80023ee:	f81c cc20 	ldrb.w	ip, [ip, #-32]
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80023f2:	f816 1c20 	ldrb.w	r1, [r6, #-32]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80023f6:	f812 2c20 	ldrb.w	r2, [r2, #-32]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80023fa:	f817 6c20 	ldrb.w	r6, [r7, #-32]
 80023fe:	f813 3c20 	ldrb.w	r3, [r3, #-32]
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8002402:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8002406:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800240a:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 800240e:	f8a9 1000 	strh.w	r1, [r9]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8002412:	f8a9 2002 	strh.w	r2, [r9, #2]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8002416:	f8a9 3004 	strh.w	r3, [r9, #4]
        ii += 6;
        sensors[0] |= INV_XYZ_GYRO;
 800241a:	8823      	ldrh	r3, [r4, #0]
 800241c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002420:	8023      	strh	r3, [r4, #0]
    }

    get_ms(timestamp);
 8002422:	9805      	ldr	r0, [sp, #20]
 8002424:	f002 ff26 	bl	8005274 <get_ms>
    return 0;
}
 8002428:	4628      	mov	r0, r5
 800242a:	b015      	add	sp, #84	; 0x54
 800242c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002430:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
 8002434:	ba09      	rev	r1, r1
        quat_q14[1] = quat[1] >> 16;
 8002436:	ea4f 4c21 	mov.w	ip, r1, asr #16
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800243a:	fb0c f00c 	mul.w	r0, ip, ip
 800243e:	fa92 fe82 	rev.w	lr, r2
        quat_q14[0] = quat[0] >> 16;
 8002442:	ea4f 4c2e 	mov.w	ip, lr, asr #16
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8002446:	fb0c 0c0c 	mla	ip, ip, ip, r0
 800244a:	980e      	ldr	r0, [sp, #56]	; 0x38
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800244c:	6071      	str	r1, [r6, #4]
 800244e:	ba00      	rev	r0, r0
        quat_q14[2] = quat[2] >> 16;
 8002450:	1402      	asrs	r2, r0, #16
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8002452:	fb02 cc02 	mla	ip, r2, r2, ip
 8002456:	990f      	ldr	r1, [sp, #60]	; 0x3c
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8002458:	f8c6 e000 	str.w	lr, [r6]
 800245c:	ba09      	rev	r1, r1
        quat_q14[3] = quat[3] >> 16;
 800245e:	140a      	asrs	r2, r1, #16
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8002460:	fb02 c202 	mla	r2, r2, r2, ip
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 8002464:	f102 4271 	add.w	r2, r2, #4043309056	; 0xf1000000
 8002468:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800246c:	e9c6 0102 	strd	r0, r1, [r6, #8]
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 8002470:	d81d      	bhi.n	80024ae <dmp_read_fifo+0x1c2>
        sensors[0] |= INV_WXYZ_QUAT;
 8002472:	8822      	ldrh	r2, [r4, #0]
 8002474:	2015      	movs	r0, #21
 8002476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800247a:	8022      	strh	r2, [r4, #0]
 800247c:	2218      	movs	r2, #24
 800247e:	9206      	str	r2, [sp, #24]
 8002480:	2214      	movs	r2, #20
 8002482:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8002486:	2213      	movs	r2, #19
 8002488:	9202      	str	r2, [sp, #8]
 800248a:	2210      	movs	r2, #16
 800248c:	f04f 0a1b 	mov.w	sl, #27
 8002490:	f04f 0c1a 	mov.w	ip, #26
 8002494:	f04f 0b19 	mov.w	fp, #25
 8002498:	f04f 0817 	mov.w	r8, #23
 800249c:	f04f 0e16 	mov.w	lr, #22
 80024a0:	2112      	movs	r1, #18
 80024a2:	2011      	movs	r0, #17
 80024a4:	9201      	str	r2, [sp, #4]
 80024a6:	e752      	b.n	800234e <dmp_read_fifo+0x62>
        return -1;
 80024a8:	f04f 35ff 	mov.w	r5, #4294967295
 80024ac:	e7bc      	b.n	8002428 <dmp_read_fifo+0x13c>
            mpu_reset_fifo();
 80024ae:	f7fe ff0b 	bl	80012c8 <mpu_reset_fifo>
            sensors[0] = 0;
 80024b2:	8025      	strh	r5, [r4, #0]
            return -1;
 80024b4:	f04f 35ff 	mov.w	r5, #4294967295
 80024b8:	e7b6      	b.n	8002428 <dmp_read_fifo+0x13c>
 80024ba:	bf00      	nop
 80024bc:	200003a4 	.word	0x200003a4

080024c0 <DMP_Init>:

int DMP_Init(void){
 80024c0:	b530      	push	{r4, r5, lr}
 80024c2:	b087      	sub	sp, #28

	struct int_param_s interrupt_config;//empty

	if (mpu_init(&interrupt_config)){
 80024c4:	4668      	mov	r0, sp
 80024c6:	f7ff fa23 	bl	8001910 <mpu_init>
 80024ca:	b110      	cbz	r0, 80024d2 <DMP_Init+0x12>
		return 1;
 80024cc:	2001      	movs	r0, #1
	if (mpu_set_dmp_state(1)){
		return 8;
	}

	return 0;
}
 80024ce:	b007      	add	sp, #28
 80024d0:	bd30      	pop	{r4, r5, pc}
	if (mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS)){
 80024d2:	2079      	movs	r0, #121	; 0x79
 80024d4:	f7ff f92a 	bl	800172c <mpu_set_sensors>
 80024d8:	2800      	cmp	r0, #0
 80024da:	d16d      	bne.n	80025b8 <DMP_Init+0xf8>
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 80024dc:	23c8      	movs	r3, #200	; 0xc8
 80024de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024e2:	493b      	ldr	r1, [pc, #236]	; (80025d0 <DMP_Init+0x110>)
 80024e4:	f640 30f6 	movw	r0, #3062	; 0xbf6
 80024e8:	f7ff fc64 	bl	8001db4 <mpu_load_firmware>
	if(dmp_load_motion_driver_firmware()){
 80024ec:	2800      	cmp	r0, #0
 80024ee:	d166      	bne.n	80025be <DMP_Init+0xfe>
    gyro_regs[0] = gyro_axes[orient & 3];
 80024f0:	f64c 514c 	movw	r1, #52556	; 0xcd4c
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 80024f4:	206c      	movs	r0, #108	; 0x6c
    accel_regs[0] = accel_axes[orient & 3];
 80024f6:	f64c 140c 	movw	r4, #51468	; 0xc90c
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 80024fa:	232c      	movs	r3, #44	; 0x2c
    gyro_regs[0] = gyro_axes[orient & 3];
 80024fc:	f8ad 1004 	strh.w	r1, [sp, #4]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8002500:	f88d 0006 	strb.w	r0, [sp, #6]
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8002504:	aa01      	add	r2, sp, #4
 8002506:	2103      	movs	r1, #3
 8002508:	f240 4026 	movw	r0, #1062	; 0x426
    accel_regs[0] = accel_axes[orient & 3];
 800250c:	f8ad 400c 	strh.w	r4, [sp, #12]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8002510:	f88d 300e 	strb.w	r3, [sp, #14]
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8002514:	f7ff fc1c 	bl	8001d50 <mpu_write_mem>
 8002518:	2800      	cmp	r0, #0
 800251a:	d154      	bne.n	80025c6 <DMP_Init+0x106>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 800251c:	ac03      	add	r4, sp, #12
 800251e:	4622      	mov	r2, r4
 8002520:	2103      	movs	r1, #3
 8002522:	f240 402a 	movw	r0, #1066	; 0x42a
 8002526:	f7ff fc13 	bl	8001d50 <mpu_write_mem>
 800252a:	2800      	cmp	r0, #0
 800252c:	d14b      	bne.n	80025c6 <DMP_Init+0x106>
    memcpy(gyro_regs, gyro_sign, 3);
 800252e:	f245 6236 	movw	r2, #22070	; 0x5636
 8002532:	2176      	movs	r1, #118	; 0x76
    memcpy(accel_regs, accel_sign, 3);
 8002534:	f244 6026 	movw	r0, #17958	; 0x4626
 8002538:	2366      	movs	r3, #102	; 0x66
    memcpy(gyro_regs, gyro_sign, 3);
 800253a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800253e:	f88d 1006 	strb.w	r1, [sp, #6]
    memcpy(accel_regs, accel_sign, 3);
 8002542:	f8ad 000c 	strh.w	r0, [sp, #12]
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8002546:	aa01      	add	r2, sp, #4
 8002548:	2103      	movs	r1, #3
 800254a:	f44f 6088 	mov.w	r0, #1088	; 0x440
    memcpy(accel_regs, accel_sign, 3);
 800254e:	f88d 300e 	strb.w	r3, [sp, #14]
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8002552:	f7ff fbfd 	bl	8001d50 <mpu_write_mem>
 8002556:	bbb0      	cbnz	r0, 80025c6 <DMP_Init+0x106>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8002558:	4622      	mov	r2, r4
 800255a:	2103      	movs	r1, #3
 800255c:	f240 4031 	movw	r0, #1073	; 0x431
 8002560:	f7ff fbf6 	bl	8001d50 <mpu_write_mem>
 8002564:	bb78      	cbnz	r0, 80025c6 <DMP_Init+0x106>
    dmp.orient = orient;
 8002566:	2388      	movs	r3, #136	; 0x88
 8002568:	4d1a      	ldr	r5, [pc, #104]	; (80025d4 <DMP_Init+0x114>)
	if(dmp_enable_feature(dmp_features)){
 800256a:	f44f 70b8 	mov.w	r0, #368	; 0x170
    dmp.orient = orient;
 800256e:	812b      	strh	r3, [r5, #8]
	if(dmp_enable_feature(dmp_features)){
 8002570:	f7ff fdf6 	bl	8002160 <dmp_enable_feature>
 8002574:	bb28      	cbnz	r0, 80025c2 <DMP_Init+0x102>
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8002576:	f44f 7280 	mov.w	r2, #256	; 0x100
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 800257a:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <DMP_Init+0x118>)
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 800257c:	f8ad 2004 	strh.w	r2, [sp, #4]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8002580:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002584:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if (mpu_write_mem(D_0_22, 2, tmp))
 8002588:	aa01      	add	r2, sp, #4
 800258a:	2102      	movs	r1, #2
 800258c:	f240 2016 	movw	r0, #534	; 0x216
 8002590:	f7ff fbde 	bl	8001d50 <mpu_write_mem>
 8002594:	b9c8      	cbnz	r0, 80025ca <DMP_Init+0x10a>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8002596:	4622      	mov	r2, r4
 8002598:	210c      	movs	r1, #12
 800259a:	f640 20c1 	movw	r0, #2753	; 0xac1
 800259e:	f7ff fbd7 	bl	8001d50 <mpu_write_mem>
 80025a2:	b990      	cbnz	r0, 80025ca <DMP_Init+0x10a>
    dmp.fifo_rate = rate;
 80025a4:	2364      	movs	r3, #100	; 0x64
	if (mpu_set_dmp_state(1)){
 80025a6:	2001      	movs	r0, #1
    dmp.fifo_rate = rate;
 80025a8:	81ab      	strh	r3, [r5, #12]
	if (mpu_set_dmp_state(1)){
 80025aa:	f7ff fca7 	bl	8001efc <mpu_set_dmp_state>
		return 8;
 80025ae:	2800      	cmp	r0, #0
 80025b0:	bf14      	ite	ne
 80025b2:	2008      	movne	r0, #8
 80025b4:	2000      	moveq	r0, #0
 80025b6:	e78a      	b.n	80024ce <DMP_Init+0xe>
		return 2;
 80025b8:	2002      	movs	r0, #2
}
 80025ba:	b007      	add	sp, #28
 80025bc:	bd30      	pop	{r4, r5, pc}
		return 4;//ERROR
 80025be:	2004      	movs	r0, #4
 80025c0:	e785      	b.n	80024ce <DMP_Init+0xe>
		return 6;
 80025c2:	2006      	movs	r0, #6
 80025c4:	e783      	b.n	80024ce <DMP_Init+0xe>
		return 5;
 80025c6:	2005      	movs	r0, #5
 80025c8:	e781      	b.n	80024ce <DMP_Init+0xe>
		return 7;
 80025ca:	2007      	movs	r0, #7
 80025cc:	e77f      	b.n	80024ce <DMP_Init+0xe>
 80025ce:	bf00      	nop
 80025d0:	0800e080 	.word	0x0800e080
 80025d4:	200003a4 	.word	0x200003a4
 80025d8:	0800dfb0 	.word	0x0800dfb0

080025dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025dc:	b530      	push	{r4, r5, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025de:	2201      	movs	r2, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025e0:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025e6:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80025e8:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
{
 80025ec:	b095      	sub	sp, #84	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025ee:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025f0:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025f2:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025f4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025f6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80025f8:	9113      	str	r1, [sp, #76]	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025fa:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025fc:	9405      	str	r4, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025fe:	9401      	str	r4, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002600:	940d      	str	r4, [sp, #52]	; 0x34
 8002602:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002606:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800260a:	e9cd 4408 	strd	r4, r4, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800260e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002612:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002614:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002616:	f004 ff71 	bl	80074fc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800261a:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800261c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002620:	4629      	mov	r1, r5
 8002622:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002624:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002626:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002628:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800262a:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800262c:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800262e:	f005 f95d 	bl	80078ec <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002632:	2310      	movs	r3, #16
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002634:	a801      	add	r0, sp, #4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002636:	9404      	str	r4, [sp, #16]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002638:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800263a:	f005 fa43 	bl	8007ac4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800263e:	b015      	add	sp, #84	; 0x54
 8002640:	bd30      	pop	{r4, r5, pc}
 8002642:	bf00      	nop
 8002644:	0000      	movs	r0, r0
	...

08002648 <main>:
{
 8002648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ximu_state = XIMU_STATE_STM_INIT;
 800264c:	2400      	movs	r4, #0
{
 800264e:	f5ad 5d4d 	sub.w	sp, sp, #13120	; 0x3340
	ximu_state = XIMU_STATE_STM_INIT;
 8002652:	4f9d      	ldr	r7, [pc, #628]	; (80028c8 <main+0x280>)
{
 8002654:	b081      	sub	sp, #4
	ximu_state = XIMU_STATE_STM_INIT;
 8002656:	703c      	strb	r4, [r7, #0]
  HAL_Init();
 8002658:	f003 fac2 	bl	8005be0 <HAL_Init>
  SystemClock_Config();
 800265c:	f7ff ffbe 	bl	80025dc <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 8002664:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002668:	4d98      	ldr	r5, [pc, #608]	; (80028cc <main+0x284>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800266a:	4622      	mov	r2, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800266c:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800266e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002672:	f043 0310 	orr.w	r3, r3, #16
 8002676:	61ab      	str	r3, [r5, #24]
 8002678:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800267a:	4895      	ldr	r0, [pc, #596]	; (80028d0 <main+0x288>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800267c:	f003 0310 	and.w	r3, r3, #16
 8002680:	9308      	str	r3, [sp, #32]
 8002682:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002684:	69ab      	ldr	r3, [r5, #24]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002686:	f04f 0901 	mov.w	r9, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800268a:	f043 0320 	orr.w	r3, r3, #32
 800268e:	61ab      	str	r3, [r5, #24]
 8002690:	69ab      	ldr	r3, [r5, #24]
  hi2c1.Instance = I2C1;
 8002692:	4e90      	ldr	r6, [pc, #576]	; (80028d4 <main+0x28c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	9309      	str	r3, [sp, #36]	; 0x24
 800269a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800269c:	69ab      	ldr	r3, [r5, #24]
  htim2.Init.Prescaler = 7200;
 800269e:	f44f 5ae1 	mov.w	sl, #7200	; 0x1c20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a2:	f043 0304 	orr.w	r3, r3, #4
 80026a6:	61ab      	str	r3, [r5, #24]
 80026a8:	69ab      	ldr	r3, [r5, #24]
  htim2.Instance = TIM2;
 80026aa:	f8df 8248 	ldr.w	r8, [pc, #584]	; 80028f4 <main+0x2ac>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	930a      	str	r3, [sp, #40]	; 0x28
 80026b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b6:	69ab      	ldr	r3, [r5, #24]
  htim3.Instance = TIM3;
 80026b8:	f8df b23c 	ldr.w	fp, [pc, #572]	; 80028f8 <main+0x2b0>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026bc:	f043 0308 	orr.w	r3, r3, #8
 80026c0:	61ab      	str	r3, [r5, #24]
 80026c2:	69ab      	ldr	r3, [r5, #24]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80026ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80026cc:	f003 fd34 	bl	8006138 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80026d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026d4:	e9cd 3918 	strd	r3, r9, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026da:	a918      	add	r1, sp, #96	; 0x60
 80026dc:	487c      	ldr	r0, [pc, #496]	; (80028d0 <main+0x288>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026e2:	f003 fc2f 	bl	8005f44 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026e6:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80026e8:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026ea:	ea43 0309 	orr.w	r3, r3, r9
 80026ee:	616b      	str	r3, [r5, #20]
 80026f0:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80026f2:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026f4:	ea03 0309 	and.w	r3, r3, r9
 80026f8:	9307      	str	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80026fa:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026fc:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80026fe:	f003 fab7 	bl	8005c70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002702:	200f      	movs	r0, #15
 8002704:	f003 faea 	bl	8005cdc <HAL_NVIC_EnableIRQ>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002708:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 800270c:	4a72      	ldr	r2, [pc, #456]	; (80028d8 <main+0x290>)
  hi2c1.Instance = I2C1;
 800270e:	4973      	ldr	r1, [pc, #460]	; (80028dc <main+0x294>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002710:	4630      	mov	r0, r6
  hi2c1.Init.ClockSpeed = 100000;
 8002712:	e9c6 1200 	strd	r1, r2, [r6]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002716:	6133      	str	r3, [r6, #16]
  hi2c1.Init.OwnAddress1 = 0;
 8002718:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hi2c1.Init.OwnAddress2 = 0;
 800271c:	e9c6 4405 	strd	r4, r4, [r6, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002720:	e9c6 4407 	strd	r4, r4, [r6, #28]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002724:	f003 ff2c 	bl	8006580 <HAL_I2C_Init>
  MX_USB_DEVICE_Init();
 8002728:	f006 ff52 	bl	80095d0 <MX_USB_DEVICE_Init>
  htim2.Instance = TIM2;
 800272c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 1250;
 8002730:	f240 43e2 	movw	r3, #1250	; 0x4e2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002734:	ad15      	add	r5, sp, #84	; 0x54
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002736:	4640      	mov	r0, r8
  htim2.Instance = TIM2;
 8002738:	f8c8 1000 	str.w	r1, [r8]
  htim2.Init.Period = 1250;
 800273c:	f8c8 300c 	str.w	r3, [r8, #12]
  htim2.Init.Prescaler = 7200;
 8002740:	f8c8 a004 	str.w	sl, [r8, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002744:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
 8002748:	941b      	str	r4, [sp, #108]	; 0x6c
 800274a:	9418      	str	r4, [sp, #96]	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800274c:	9415      	str	r4, [sp, #84]	; 0x54
 800274e:	606c      	str	r4, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002750:	f8c8 4008 	str.w	r4, [r8, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002754:	f8c8 4010 	str.w	r4, [r8, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002758:	f8c8 4018 	str.w	r4, [r8, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800275c:	f005 fa34 	bl	8007bc8 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002764:	a918      	add	r1, sp, #96	; 0x60
 8002766:	4640      	mov	r0, r8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002768:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800276a:	f005 fa8b 	bl	8007c84 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800276e:	4629      	mov	r1, r5
 8002770:	4640      	mov	r0, r8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002772:	606c      	str	r4, [r5, #4]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002774:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002776:	f005 fbdf 	bl	8007f38 <HAL_TIMEx_MasterConfigSynchronization>
  htim3.Init.Period = 50;
 800277a:	2132      	movs	r1, #50	; 0x32
  htim3.Instance = TIM3;
 800277c:	4b58      	ldr	r3, [pc, #352]	; (80028e0 <main+0x298>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800277e:	4658      	mov	r0, fp
  htim3.Init.Prescaler = 7200;
 8002780:	f8cb a004 	str.w	sl, [fp, #4]
  htim3.Instance = TIM3;
 8002784:	f8cb 3000 	str.w	r3, [fp]
  htim3.Init.Period = 50;
 8002788:	f8cb 100c 	str.w	r1, [fp, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800278c:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
 8002790:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002792:	606c      	str	r4, [r5, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002794:	9418      	str	r4, [sp, #96]	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002796:	9415      	str	r4, [sp, #84]	; 0x54
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002798:	f8cb 4008 	str.w	r4, [fp, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800279c:	f8cb 4010 	str.w	r4, [fp, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027a0:	f8cb 4018 	str.w	r4, [fp, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027a4:	f005 fa10 	bl	8007bc8 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027ac:	a918      	add	r1, sp, #96	; 0x60
 80027ae:	4658      	mov	r0, fp
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027b0:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027b2:	f005 fa67 	bl	8007c84 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027b6:	4629      	mov	r1, r5
 80027b8:	4658      	mov	r0, fp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ba:	606c      	str	r4, [r5, #4]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027bc:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027be:	f005 fbbb 	bl	8007f38 <HAL_TIMEx_MasterConfigSynchronization>
  huart1.Init.BaudRate = 115200;
 80027c2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027c6:	210c      	movs	r1, #12
  huart1.Instance = USART1;
 80027c8:	f8df a130 	ldr.w	sl, [pc, #304]	; 80028fc <main+0x2b4>
 80027cc:	4a45      	ldr	r2, [pc, #276]	; (80028e4 <main+0x29c>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027ce:	4650      	mov	r0, sl
  huart1.Init.BaudRate = 115200;
 80027d0:	e9ca 2300 	strd	r2, r3, [sl]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027d4:	f8ca 1014 	str.w	r1, [sl, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027d8:	e9ca 4402 	strd	r4, r4, [sl, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027dc:	f8ca 4010 	str.w	r4, [sl, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e0:	e9ca 4406 	strd	r4, r4, [sl, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027e4:	f005 fbce 	bl	8007f84 <HAL_UART_Init>
  systickInit();
 80027e8:	f003 f99e 	bl	8005b28 <systickInit>
  HAL_TIM_Base_Start_IT(&htim2);
 80027ec:	4640      	mov	r0, r8
 80027ee:	f005 fa39 	bl	8007c64 <HAL_TIM_Base_Start_IT>
  led_set(LED_INIT);
 80027f2:	20cc      	movs	r0, #204	; 0xcc
 80027f4:	f002 fd10 	bl	8005218 <led_set>
  HAL_Delay(1000);//blink to show system (stm32, especially the crystal) is ok
 80027f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027fc:	f003 fa14 	bl	8005c28 <HAL_Delay>
  led_set(LED_FAULT);//Will not notice LED blinking unless the following initialization takes longer than expected
 8002800:	20aa      	movs	r0, #170	; 0xaa
  ximu_state = XIMU_STATE_DMP_INIT;
 8002802:	f887 9000 	strb.w	r9, [r7]
  led_set(LED_FAULT);//Will not notice LED blinking unless the following initialization takes longer than expected
 8002806:	f002 fd07 	bl	8005218 <led_set>
  mpu_set_i2c(&hi2c1);
 800280a:	4630      	mov	r0, r6
 800280c:	f002 fd0a 	bl	8005224 <mpu_set_i2c>
  ms5611_set_i2c(&hi2c1);
 8002810:	4630      	mov	r0, r6
 8002812:	f002 fd37 	bl	8005284 <ms5611_set_i2c>
  ms5611_init();
 8002816:	f002 fd3b 	bl	8005290 <ms5611_init>
  ms5611_update();
 800281a:	f002 fdb9 	bl	8005390 <ms5611_update>
  GNSS_set_huart(&huart1);
 800281e:	4650      	mov	r0, sl
 8002820:	f002 fa8c 	bl	8004d3c <GNSS_set_huart>
  GNSS_Init();
 8002824:	f002 fa90 	bl	8004d48 <GNSS_Init>
  int dmp_state = DMP_Init();
 8002828:	f7ff fe4a 	bl	80024c0 <DMP_Init>
  if (dmp_state){
 800282c:	b100      	cbz	r0, 8002830 <main+0x1e8>
 800282e:	e7fe      	b.n	800282e <main+0x1e6>
 8002830:	4606      	mov	r6, r0
  HAL_TIM_Base_Start_IT(&htim3);//start updating sensor data
 8002832:	4658      	mov	r0, fp
 8002834:	f005 fa16 	bl	8007c64 <HAL_TIM_Base_Start_IT>
  ximu_state = XIMU_STATE_GPS_INIT;
 8002838:	f04f 0302 	mov.w	r3, #2
  while (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){
 800283c:	4c2a      	ldr	r4, [pc, #168]	; (80028e8 <main+0x2a0>)
  led_set(LED_DISCONNECTED);//Fault cleared
 800283e:	4630      	mov	r0, r6
  ximu_state = XIMU_STATE_GPS_INIT;
 8002840:	703b      	strb	r3, [r7, #0]
  led_set(LED_DISCONNECTED);//Fault cleared
 8002842:	f002 fce9 	bl	8005218 <led_set>
  while (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){
 8002846:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800284a:	2b03      	cmp	r3, #3
 800284c:	d006      	beq.n	800285c <main+0x214>
	  led_set(LED_DISCONNECTED);//wait for connection
 800284e:	2000      	movs	r0, #0
 8002850:	f002 fce2 	bl	8005218 <led_set>
  while (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){
 8002854:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8002858:	2b03      	cmp	r3, #3
 800285a:	d1f8      	bne.n	800284e <main+0x206>
  float32_t am[3] = {0,0,-9.81};
 800285c:	2400      	movs	r4, #0
  ESKF_update(&eskf,0.01,am,wm,mm,lla,1);
 800285e:	2701      	movs	r7, #1
  led_set(LED_IDLE);//connection formed
 8002860:	20ff      	movs	r0, #255	; 0xff
 8002862:	f002 fcd9 	bl	8005218 <led_set>
  ESKF_new(&eskf);
 8002866:	a818      	add	r0, sp, #96	; 0x60
 8002868:	f000 faa2 	bl	8002db0 <ESKF_new>
  float32_t wm[3] = {0,0,0};
 800286c:	ae10      	add	r6, sp, #64	; 0x40
  float32_t lla[3] = {1,2,3};
 800286e:	4b1f      	ldr	r3, [pc, #124]	; (80028ec <main+0x2a4>)
  ESKF_update(&eskf,0.01,am,wm,mm,lla,1);
 8002870:	9503      	str	r5, [sp, #12]
  float32_t wm[3] = {0,0,0};
 8002872:	f846 4904 	str.w	r4, [r6], #-4
  ESKF_update(&eskf,0.01,am,wm,mm,lla,1);
 8002876:	9601      	str	r6, [sp, #4]
  float32_t lla[3] = {1,2,3};
 8002878:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800287c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  ESKF_update(&eskf,0.01,am,wm,mm,lla,1);
 8002880:	a30f      	add	r3, pc, #60	; (adr r3, 80028c0 <main+0x278>)
 8002882:	e9d3 2300 	ldrd	r2, r3, [r3]
  float32_t am[3] = {0,0,-9.81};
 8002886:	ad0c      	add	r5, sp, #48	; 0x30
  ESKF_update(&eskf,0.01,am,wm,mm,lla,1);
 8002888:	9704      	str	r7, [sp, #16]
 800288a:	9500      	str	r5, [sp, #0]
  float32_t wm[3] = {0,0,0};
 800288c:	60b4      	str	r4, [r6, #8]
  float32_t mm[3] = {0,1,0};
 800288e:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
  float32_t am[3] = {0,0,-9.81};
 8002892:	4f17      	ldr	r7, [pc, #92]	; (80028f0 <main+0x2a8>)
  float32_t mm[3] = {0,1,0};
 8002894:	a912      	add	r1, sp, #72	; 0x48
  ESKF_update(&eskf,0.01,am,wm,mm,lla,1);
 8002896:	9102      	str	r1, [sp, #8]
 8002898:	a818      	add	r0, sp, #96	; 0x60
  float32_t am[3] = {0,0,-9.81};
 800289a:	606c      	str	r4, [r5, #4]
  float32_t mm[3] = {0,1,0};
 800289c:	608c      	str	r4, [r1, #8]
  float32_t am[3] = {0,0,-9.81};
 800289e:	60af      	str	r7, [r5, #8]
  float32_t mm[3] = {0,1,0};
 80028a0:	604e      	str	r6, [r1, #4]
  float32_t am[3] = {0,0,-9.81};
 80028a2:	940c      	str	r4, [sp, #48]	; 0x30
  float32_t wm[3] = {0,0,0};
 80028a4:	940f      	str	r4, [sp, #60]	; 0x3c
  float32_t mm[3] = {0,1,0};
 80028a6:	9412      	str	r4, [sp, #72]	; 0x48
  ESKF_update(&eskf,0.01,am,wm,mm,lla,1);
 80028a8:	f000 fed2 	bl	8003650 <ESKF_update>
	  led_set(LED_MEASURING);
 80028ac:	20fe      	movs	r0, #254	; 0xfe
 80028ae:	f002 fcb3 	bl	8005218 <led_set>
	  HAL_Delay(10);
 80028b2:	200a      	movs	r0, #10
 80028b4:	f003 f9b8 	bl	8005c28 <HAL_Delay>
 80028b8:	e7f8      	b.n	80028ac <main+0x264>
 80028ba:	bf00      	nop
 80028bc:	f3af 8000 	nop.w
 80028c0:	47ae147b 	.word	0x47ae147b
 80028c4:	3f847ae1 	.word	0x3f847ae1
 80028c8:	20000790 	.word	0x20000790
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40011000 	.word	0x40011000
 80028d4:	200006a0 	.word	0x200006a0
 80028d8:	000186a0 	.word	0x000186a0
 80028dc:	40005400 	.word	0x40005400
 80028e0:	40000400 	.word	0x40000400
 80028e4:	40013800 	.word	0x40013800
 80028e8:	20000d2c 	.word	0x20000d2c
 80028ec:	0800dfec 	.word	0x0800dfec
 80028f0:	c11cf5c3 	.word	0xc11cf5c3
 80028f4:	200007d8 	.word	0x200007d8
 80028f8:	200006f4 	.word	0x200006f4
 80028fc:	20000794 	.word	0x20000794

08002900 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop

08002904 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002904:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <HAL_MspInit+0x3c>)
{
 8002906:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002908:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST 
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 800290a:	490e      	ldr	r1, [pc, #56]	; (8002944 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 800290c:	f042 0201 	orr.w	r2, r2, #1
 8002910:	619a      	str	r2, [r3, #24]
 8002912:	699a      	ldr	r2, [r3, #24]
 8002914:	f002 0201 	and.w	r2, r2, #1
 8002918:	9200      	str	r2, [sp, #0]
 800291a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800291c:	69da      	ldr	r2, [r3, #28]
 800291e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002922:	61da      	str	r2, [r3, #28]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292a:	9301      	str	r3, [sp, #4]
 800292c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 800292e:	684b      	ldr	r3, [r1, #4]
 8002930:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002934:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002938:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800293a:	b002      	add	sp, #8
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000
 8002944:	40010000 	.word	0x40010000

08002948 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002948:	2300      	movs	r3, #0
{
 800294a:	b530      	push	{r4, r5, lr}
  if(hi2c->Instance==I2C1)
 800294c:	6801      	ldr	r1, [r0, #0]
 800294e:	4a14      	ldr	r2, [pc, #80]	; (80029a0 <HAL_I2C_MspInit+0x58>)
{
 8002950:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C1)
 8002952:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002954:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002958:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hi2c->Instance==I2C1)
 800295c:	d001      	beq.n	8002962 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800295e:	b007      	add	sp, #28
 8002960:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002962:	20c0      	movs	r0, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002964:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002966:	2512      	movs	r5, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002968:	4c0e      	ldr	r4, [pc, #56]	; (80029a4 <HAL_I2C_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800296c:	69a3      	ldr	r3, [r4, #24]
 800296e:	f043 0308 	orr.w	r3, r3, #8
 8002972:	61a3      	str	r3, [r4, #24]
 8002974:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002976:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297e:	480a      	ldr	r0, [pc, #40]	; (80029a8 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002980:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002982:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002984:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002986:	f003 fadd 	bl	8005f44 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800298a:	69e3      	ldr	r3, [r4, #28]
 800298c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002990:	61e3      	str	r3, [r4, #28]
 8002992:	69e3      	ldr	r3, [r4, #28]
 8002994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	9b01      	ldr	r3, [sp, #4]
}
 800299c:	b007      	add	sp, #28
 800299e:	bd30      	pop	{r4, r5, pc}
 80029a0:	40005400 	.word	0x40005400
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40010c00 	.word	0x40010c00

080029ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029ac:	b510      	push	{r4, lr}
  if(htim_base->Instance==TIM2)
 80029ae:	6803      	ldr	r3, [r0, #0]
{
 80029b0:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 80029b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b6:	d019      	beq.n	80029ec <HAL_TIM_Base_MspInit+0x40>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80029b8:	4a17      	ldr	r2, [pc, #92]	; (8002a18 <HAL_TIM_Base_MspInit+0x6c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d001      	beq.n	80029c2 <HAL_TIM_Base_MspInit+0x16>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80029be:	b002      	add	sp, #8
 80029c0:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029c2:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029c4:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <HAL_TIM_Base_MspInit+0x70>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029c6:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029c8:	69dc      	ldr	r4, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029ca:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029cc:	f044 0402 	orr.w	r4, r4, #2
 80029d0:	61dc      	str	r4, [r3, #28]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	9301      	str	r3, [sp, #4]
 80029da:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029dc:	f003 f948 	bl	8005c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029e0:	201d      	movs	r0, #29
}
 80029e2:	b002      	add	sp, #8
 80029e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029e8:	f003 b978 	b.w	8005cdc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029ec:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029ee:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80029f2:	69dc      	ldr	r4, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029f4:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029f6:	f044 0401 	orr.w	r4, r4, #1
 80029fa:	61dc      	str	r4, [r3, #28]
 80029fc:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029fe:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a08:	f003 f932 	bl	8005c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a0c:	201c      	movs	r0, #28
}
 8002a0e:	b002      	add	sp, #8
 8002a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a14:	f003 b962 	b.w	8005cdc <HAL_NVIC_EnableIRQ>
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	40021000 	.word	0x40021000

08002a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a20:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a22:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8002a24:	6802      	ldr	r2, [r0, #0]
 8002a26:	4b26      	ldr	r3, [pc, #152]	; (8002ac0 <HAL_UART_MspInit+0xa0>)
{
 8002a28:	b086      	sub	sp, #24
  if(huart->Instance==USART1)
 8002a2a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002a30:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART1)
 8002a34:	d001      	beq.n	8002a3a <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a36:	b006      	add	sp, #24
 8002a38:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a3e:	4606      	mov	r6, r0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a40:	2002      	movs	r0, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a42:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a44:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002a48:	699a      	ldr	r2, [r3, #24]
 8002a4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a4e:	619a      	str	r2, [r3, #24]
 8002a50:	699a      	ldr	r2, [r3, #24]
 8002a52:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002a56:	9200      	str	r2, [sp, #0]
 8002a58:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5a:	699a      	ldr	r2, [r3, #24]
 8002a5c:	f042 0204 	orr.w	r2, r2, #4
 8002a60:	619a      	str	r2, [r3, #24]
 8002a62:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a64:	9102      	str	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6e:	9003      	str	r0, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a70:	4814      	ldr	r0, [pc, #80]	; (8002ac4 <HAL_UART_MspInit+0xa4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a72:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a74:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a76:	f003 fa65 	bl	8005f44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7e:	a902      	add	r1, sp, #8
 8002a80:	4810      	ldr	r0, [pc, #64]	; (8002ac4 <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a82:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	e9cd 4403 	strd	r4, r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a88:	f003 fa5c 	bl	8005f44 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a8c:	2080      	movs	r0, #128	; 0x80
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002a8e:	2220      	movs	r2, #32
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002a90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002a94:	4d0c      	ldr	r5, [pc, #48]	; (8002ac8 <HAL_UART_MspInit+0xa8>)
 8002a96:	490d      	ldr	r1, [pc, #52]	; (8002acc <HAL_UART_MspInit+0xac>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a98:	60e8      	str	r0, [r5, #12]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002a9a:	4628      	mov	r0, r5
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a9c:	e9c5 4401 	strd	r4, r4, [r5, #4]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aa0:	e9c5 4404 	strd	r4, r4, [r5, #16]
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002aa4:	6029      	str	r1, [r5, #0]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002aa6:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002aaa:	f003 f93d 	bl	8005d28 <HAL_DMA_Init>
 8002aae:	b918      	cbnz	r0, 8002ab8 <HAL_UART_MspInit+0x98>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002ab0:	6375      	str	r5, [r6, #52]	; 0x34
 8002ab2:	626e      	str	r6, [r5, #36]	; 0x24
}
 8002ab4:	b006      	add	sp, #24
 8002ab6:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8002ab8:	f7ff ff22 	bl	8002900 <Error_Handler>
 8002abc:	e7f8      	b.n	8002ab0 <HAL_UART_MspInit+0x90>
 8002abe:	bf00      	nop
 8002ac0:	40013800 	.word	0x40013800
 8002ac4:	40010800 	.word	0x40010800
 8002ac8:	20000734 	.word	0x20000734
 8002acc:	40020058 	.word	0x40020058

08002ad0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop

08002ad4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ad4:	e7fe      	b.n	8002ad4 <HardFault_Handler>
 8002ad6:	bf00      	nop

08002ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ad8:	e7fe      	b.n	8002ad8 <MemManage_Handler>
 8002ada:	bf00      	nop

08002adc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002adc:	e7fe      	b.n	8002adc <BusFault_Handler>
 8002ade:	bf00      	nop

08002ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ae0:	e7fe      	b.n	8002ae0 <UsageFault_Handler>
 8002ae2:	bf00      	nop

08002ae4 <SVC_Handler>:
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop

08002ae8 <DebugMon_Handler>:
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop

08002aec <PendSV_Handler>:
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop

08002af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002af0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002af2:	f003 f887 	bl	8005c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systick_Inc();
  /* USER CODE END SysTick_IRQn 1 */
}
 8002af6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  systick_Inc();
 8002afa:	f003 b845 	b.w	8005b88 <systick_Inc>
 8002afe:	bf00      	nop

08002b00 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002b00:	4801      	ldr	r0, [pc, #4]	; (8002b08 <DMA1_Channel5_IRQHandler+0x8>)
 8002b02:	f003 b989 	b.w	8005e18 <HAL_DMA_IRQHandler>
 8002b06:	bf00      	nop
 8002b08:	20000734 	.word	0x20000734

08002b0c <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002b0c:	4801      	ldr	r0, [pc, #4]	; (8002b14 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8002b0e:	f004 b94f 	b.w	8006db0 <HAL_PCD_IRQHandler>
 8002b12:	bf00      	nop
 8002b14:	200019c0 	.word	0x200019c0

08002b18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b1a:	4803      	ldr	r0, [pc, #12]	; (8002b28 <TIM2_IRQHandler+0x10>)
 8002b1c:	f005 f962 	bl	8007de4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  led_update();
  /* USER CODE END TIM2_IRQn 1 */
}
 8002b20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  led_update();
 8002b24:	f002 bb5c 	b.w	80051e0 <led_update>
 8002b28:	200007d8 	.word	0x200007d8

08002b2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b2c:	b530      	push	{r4, r5, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//this timer runs on 200Hz
	if (timer_index % 2 == 0){
 8002b2e:	4c65      	ldr	r4, [pc, #404]	; (8002cc4 <TIM3_IRQHandler+0x198>)
{
 8002b30:	b0f1      	sub	sp, #452	; 0x1c4
	if (timer_index % 2 == 0){
 8002b32:	f9b4 3000 	ldrsh.w	r3, [r4]
 8002b36:	f013 0501 	ands.w	r5, r3, #1
 8002b3a:	d022      	beq.n	8002b82 <TIM3_IRQHandler+0x56>
			CDC_Transmit_FS(str,strlen(str));
		  }

	}

	if (timer_index % 10 == 0){
 8002b3c:	4a62      	ldr	r2, [pc, #392]	; (8002cc8 <TIM3_IRQHandler+0x19c>)
 8002b3e:	17d9      	asrs	r1, r3, #31
 8002b40:	fb82 0203 	smull	r0, r2, r2, r3
 8002b44:	ebc1 02a2 	rsb	r2, r1, r2, asr #2
 8002b48:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002b4c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 8002b50:	b212      	sxth	r2, r2
 8002b52:	2a00      	cmp	r2, #0
 8002b54:	d03a      	beq.n	8002bcc <TIM3_IRQHandler+0xa0>
		//code here runs on 20Hz
		ms5611_timer_update();
	}

	if (timer_index % 20 == 0){
 8002b56:	4a5c      	ldr	r2, [pc, #368]	; (8002cc8 <TIM3_IRQHandler+0x19c>)
 8002b58:	fb82 0203 	smull	r0, r2, r2, r3
 8002b5c:	ebc1 01e2 	rsb	r1, r1, r2, asr #3
 8002b60:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002b64:	eba3 0181 	sub.w	r1, r3, r1, lsl #2
 8002b68:	b209      	sxth	r1, r1
 8002b6a:	b301      	cbz	r1, 8002bae <TIM3_IRQHandler+0x82>
			XIMU_sens.lon = GNSS.GNGGA.lon;
			XIMU_sens.gps_ts = millis();
		}
	}

	timer_index++;
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	b21b      	sxth	r3, r3
	if (timer_index == 200){
 8002b70:	2bc8      	cmp	r3, #200	; 0xc8
		timer_index = 0;
 8002b72:	bf08      	it	eq
 8002b74:	2300      	moveq	r3, #0
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b76:	4855      	ldr	r0, [pc, #340]	; (8002ccc <TIM3_IRQHandler+0x1a0>)
		timer_index = 0;
 8002b78:	8023      	strh	r3, [r4, #0]
  HAL_TIM_IRQHandler(&htim3);
 8002b7a:	f005 f933 	bl	8007de4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b7e:	b071      	add	sp, #452	; 0x1c4
 8002b80:	bd30      	pop	{r4, r5, pc}
		  int status = dmp_read_fifo(gyro, accel, quat, &timestamp, &sensors,&more);
 8002b82:	f10d 0209 	add.w	r2, sp, #9
 8002b86:	f10d 030a 	add.w	r3, sp, #10
 8002b8a:	e9cd 3200 	strd	r3, r2, [sp]
 8002b8e:	a804      	add	r0, sp, #16
 8002b90:	a906      	add	r1, sp, #24
 8002b92:	aa08      	add	r2, sp, #32
 8002b94:	ab03      	add	r3, sp, #12
		  short gyro[3] = {0,0,0}, accel[3] = {0,0,0}, sensors;
 8002b96:	9504      	str	r5, [sp, #16]
 8002b98:	f8ad 5014 	strh.w	r5, [sp, #20]
 8002b9c:	9506      	str	r5, [sp, #24]
 8002b9e:	f8ad 501c 	strh.w	r5, [sp, #28]
		  int status = dmp_read_fifo(gyro, accel, quat, &timestamp, &sensors,&more);
 8002ba2:	f7ff fba3 	bl	80022ec <dmp_read_fifo>
		  if (status == 0){
 8002ba6:	b1b8      	cbz	r0, 8002bd8 <TIM3_IRQHandler+0xac>
 8002ba8:	f9b4 3000 	ldrsh.w	r3, [r4]
 8002bac:	e7c6      	b.n	8002b3c <TIM3_IRQHandler+0x10>
		int status = mpu_get_compass_reg(data,NULL);
 8002bae:	a80c      	add	r0, sp, #48	; 0x30
 8002bb0:	f7ff fa7c 	bl	80020ac <mpu_get_compass_reg>
		if (status == 0){
 8002bb4:	2800      	cmp	r0, #0
 8002bb6:	d06a      	beq.n	8002c8e <TIM3_IRQHandler+0x162>
		GNSS_RX_Update();
 8002bb8:	f002 f8d2 	bl	8004d60 <GNSS_RX_Update>
		if (GNSS.GNGGA.status != 0){//data is valid
 8002bbc:	4b44      	ldr	r3, [pc, #272]	; (8002cd0 <TIM3_IRQHandler+0x1a4>)
 8002bbe:	f8d3 24a4 	ldr.w	r2, [r3, #1188]	; 0x4a4
 8002bc2:	2a00      	cmp	r2, #0
 8002bc4:	d151      	bne.n	8002c6a <TIM3_IRQHandler+0x13e>
 8002bc6:	f9b4 3000 	ldrsh.w	r3, [r4]
 8002bca:	e7cf      	b.n	8002b6c <TIM3_IRQHandler+0x40>
		ms5611_timer_update();
 8002bcc:	f002 fd4c 	bl	8005668 <ms5611_timer_update>
 8002bd0:	f9b4 3000 	ldrsh.w	r3, [r4]
 8002bd4:	17d9      	asrs	r1, r3, #31
 8002bd6:	e7be      	b.n	8002b56 <TIM3_IRQHandler+0x2a>
			  XIMU_sens.q0 = quat[0];
 8002bd8:	9808      	ldr	r0, [sp, #32]
 8002bda:	f7fd fc13 	bl	8000404 <__aeabi_i2d>
 8002bde:	4d3d      	ldr	r5, [pc, #244]	; (8002cd4 <TIM3_IRQHandler+0x1a8>)
 8002be0:	e9c5 0100 	strd	r0, r1, [r5]
			  XIMU_sens.q1 = quat[1];
 8002be4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002be6:	f7fd fc0d 	bl	8000404 <__aeabi_i2d>
 8002bea:	e9c5 0102 	strd	r0, r1, [r5, #8]
			  XIMU_sens.q2 = quat[2];
 8002bee:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002bf0:	f7fd fc08 	bl	8000404 <__aeabi_i2d>
 8002bf4:	e9c5 0104 	strd	r0, r1, [r5, #16]
			  XIMU_sens.q3 = quat[3];
 8002bf8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002bfa:	f7fd fc03 	bl	8000404 <__aeabi_i2d>
 8002bfe:	e9c5 0106 	strd	r0, r1, [r5, #24]
			  XIMU_sens.ax = accel[0];
 8002c02:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8002c06:	f7fd fbfd 	bl	8000404 <__aeabi_i2d>
 8002c0a:	e9c5 0108 	strd	r0, r1, [r5, #32]
			  XIMU_sens.ay = accel[1];
 8002c0e:	f9bd 001a 	ldrsh.w	r0, [sp, #26]
 8002c12:	f7fd fbf7 	bl	8000404 <__aeabi_i2d>
 8002c16:	e9c5 010a 	strd	r0, r1, [r5, #40]	; 0x28
			  XIMU_sens.az = accel[2];
 8002c1a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8002c1e:	f7fd fbf1 	bl	8000404 <__aeabi_i2d>
 8002c22:	e9c5 010c 	strd	r0, r1, [r5, #48]	; 0x30
			  XIMU_sens.gx = gyro[0];
 8002c26:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8002c2a:	f7fd fbeb 	bl	8000404 <__aeabi_i2d>
 8002c2e:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
			  XIMU_sens.gy = gyro[1];
 8002c32:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8002c36:	f7fd fbe5 	bl	8000404 <__aeabi_i2d>
 8002c3a:	e9c5 0110 	strd	r0, r1, [r5, #64]	; 0x40
			  XIMU_sens.gz = gyro[2];
 8002c3e:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8002c42:	f7fd fbdf 	bl	8000404 <__aeabi_i2d>
 8002c46:	e9c5 0112 	strd	r0, r1, [r5, #72]	; 0x48
			  XIMU_sens.qag_ts = millis();
 8002c4a:	f002 ff8d 	bl	8005b68 <millis>
 8002c4e:	6528      	str	r0, [r5, #80]	; 0x50
			  calc_absolute_acceleration();
 8002c50:	f001 fa0c 	bl	800406c <calc_absolute_acceleration>
			build_data_str(str);
 8002c54:	a80c      	add	r0, sp, #48	; 0x30
 8002c56:	f001 feb7 	bl	80049c8 <build_data_str>
			CDC_Transmit_FS(str,strlen(str));
 8002c5a:	a80c      	add	r0, sp, #48	; 0x30
 8002c5c:	f7fd fa78 	bl	8000150 <strlen>
 8002c60:	b281      	uxth	r1, r0
 8002c62:	a80c      	add	r0, sp, #48	; 0x30
 8002c64:	f006 fd06 	bl	8009674 <CDC_Transmit_FS>
 8002c68:	e79e      	b.n	8002ba8 <TIM3_IRQHandler+0x7c>
			XIMU_sens.lat = GNSS.GNGGA.lat;
 8002c6a:	4d1a      	ldr	r5, [pc, #104]	; (8002cd4 <TIM3_IRQHandler+0x1a8>)
 8002c6c:	f503 6290 	add.w	r2, r3, #1152	; 0x480
			XIMU_sens.lon = GNSS.GNGGA.lon;
 8002c70:	f503 6393 	add.w	r3, r3, #1176	; 0x498
			XIMU_sens.lat = GNSS.GNGGA.lat;
 8002c74:	e9d2 0100 	ldrd	r0, r1, [r2]
			XIMU_sens.lon = GNSS.GNGGA.lon;
 8002c78:	e9d3 2300 	ldrd	r2, r3, [r3]
			XIMU_sens.lat = GNSS.GNGGA.lat;
 8002c7c:	e9c5 0124 	strd	r0, r1, [r5, #144]	; 0x90
			XIMU_sens.lon = GNSS.GNGGA.lon;
 8002c80:	e9c5 2326 	strd	r2, r3, [r5, #152]	; 0x98
			XIMU_sens.gps_ts = millis();
 8002c84:	f002 ff70 	bl	8005b68 <millis>
 8002c88:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
 8002c8c:	e79b      	b.n	8002bc6 <TIM3_IRQHandler+0x9a>
			XIMU_sens.mx = data[0];
 8002c8e:	f9bd 0030 	ldrsh.w	r0, [sp, #48]	; 0x30
 8002c92:	f7fd fbb7 	bl	8000404 <__aeabi_i2d>
 8002c96:	4d0f      	ldr	r5, [pc, #60]	; (8002cd4 <TIM3_IRQHandler+0x1a8>)
 8002c98:	e9c5 0116 	strd	r0, r1, [r5, #88]	; 0x58
			XIMU_sens.my = data[1];
 8002c9c:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 8002ca0:	f7fd fbb0 	bl	8000404 <__aeabi_i2d>
 8002ca4:	e9c5 0118 	strd	r0, r1, [r5, #96]	; 0x60
			XIMU_sens.mz = data[2];
 8002ca8:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 8002cac:	f7fd fbaa 	bl	8000404 <__aeabi_i2d>
 8002cb0:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
			calibrate_mag_reading();
 8002cb4:	f001 f910 	bl	8003ed8 <calibrate_mag_reading>
			XIMU_sens.m_ts = millis();
 8002cb8:	f002 ff56 	bl	8005b68 <millis>
 8002cbc:	6728      	str	r0, [r5, #112]	; 0x70
			calc_magnetic_orientation();
 8002cbe:	f001 fbc1 	bl	8004444 <calc_magnetic_orientation>
 8002cc2:	e779      	b.n	8002bb8 <TIM3_IRQHandler+0x8c>
 8002cc4:	200003b4 	.word	0x200003b4
 8002cc8:	66666667 	.word	0x66666667
 8002ccc:	200006f4 	.word	0x200006f4
 8002cd0:	20000850 	.word	0x20000850
 8002cd4:	200005f8 	.word	0x200005f8

08002cd8 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002cd8:	4a0c      	ldr	r2, [pc, #48]	; (8002d0c <_sbrk+0x34>)
{
 8002cda:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8002cdc:	6813      	ldr	r3, [r2, #0]
 8002cde:	b133      	cbz	r3, 8002cee <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002ce0:	4669      	mov	r1, sp
 8002ce2:	4418      	add	r0, r3
 8002ce4:	4288      	cmp	r0, r1
 8002ce6:	d809      	bhi.n	8002cfc <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8002ce8:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8002cee:	4908      	ldr	r1, [pc, #32]	; (8002d10 <_sbrk+0x38>)
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	6011      	str	r1, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002cf4:	4669      	mov	r1, sp
 8002cf6:	4418      	add	r0, r3
 8002cf8:	4288      	cmp	r0, r1
 8002cfa:	d9f5      	bls.n	8002ce8 <_sbrk+0x10>
		errno = ENOMEM;
 8002cfc:	f007 fa86 	bl	800a20c <__errno>
 8002d00:	220c      	movs	r2, #12
		return (caddr_t) -1;
 8002d02:	f04f 33ff 	mov.w	r3, #4294967295
		errno = ENOMEM;
 8002d06:	6002      	str	r2, [r0, #0]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	bd08      	pop	{r3, pc}
 8002d0c:	200003b8 	.word	0x200003b8
 8002d10:	20001c30 	.word	0x20001c30

08002d14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d14:	b430      	push	{r4, r5}

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002d16:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002d1a:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR |= 0x00000001U;
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <SystemInit+0x44>)
  RCC->CFGR &= 0xF8FF0000U;
 8002d20:	4a0e      	ldr	r2, [pc, #56]	; (8002d5c <SystemInit+0x48>)
  RCC->CR |= 0x00000001U;
 8002d22:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002d24:	480e      	ldr	r0, [pc, #56]	; (8002d60 <SystemInit+0x4c>)
  RCC->CR |= 0x00000001U;
 8002d26:	f041 0101 	orr.w	r1, r1, #1
 8002d2a:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= 0xF8FF0000U;
 8002d2c:	6859      	ldr	r1, [r3, #4]
 8002d2e:	400a      	ands	r2, r1
 8002d30:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002d38:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d3c:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d44:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002d4c:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000U;
 8002d4e:	609d      	str	r5, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002d50:	6084      	str	r4, [r0, #8]
#endif 
}
 8002d52:	bc30      	pop	{r4, r5}
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	f8ff0000 	.word	0xf8ff0000
 8002d60:	e000ed00 	.word	0xe000ed00

08002d64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002d64:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002d66:	e003      	b.n	8002d70 <LoopCopyDataInit>

08002d68 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002d6a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d6c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d6e:	3104      	adds	r1, #4

08002d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d70:	480a      	ldr	r0, [pc, #40]	; (8002d9c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002d72:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002d74:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002d76:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002d78:	d3f6      	bcc.n	8002d68 <CopyDataInit>
  ldr r2, =_sbss
 8002d7a:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002d7c:	e002      	b.n	8002d84 <LoopFillZerobss>

08002d7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002d7e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002d80:	f842 3b04 	str.w	r3, [r2], #4

08002d84 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002d86:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002d88:	d3f9      	bcc.n	8002d7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d8a:	f7ff ffc3 	bl	8002d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d8e:	f007 fa43 	bl	800a218 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d92:	f7ff fc59 	bl	8002648 <main>
  bx lr
 8002d96:	4770      	bx	lr
  ldr r3, =_sidata
 8002d98:	0800f1f0 	.word	0x0800f1f0
  ldr r0, =_sdata
 8002d9c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002da0:	20000388 	.word	0x20000388
  ldr r2, =_sbss
 8002da4:	20000388 	.word	0x20000388
  ldr r3, = _ebss
 8002da8:	20001c30 	.word	0x20001c30

08002dac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dac:	e7fe      	b.n	8002dac <ADC1_2_IRQHandler>
	...

08002db0 <ESKF_new>:
	eskf->IMU_initialized = 0;
	eskf->MAG_initialized = 0;
	eskf->GPS_initialized = 0;

	//Utils
	arm_mat_init_f32(&eskf->I3,3,3,eskf->I3_data);
 8002db0:	f500 5387 	add.w	r3, r0, #4320	; 0x10e0
 8002db4:	3308      	adds	r3, #8
void ESKF_new(ESKF_filter* eskf){
 8002db6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	arm_mat_init_f32(&eskf->I3,3,3,eskf->I3_data);
 8002dba:	4619      	mov	r1, r3
void ESKF_new(ESKF_filter* eskf){
 8002dbc:	4604      	mov	r4, r0
	eskf->IMU_initialized = 0;
 8002dbe:	2500      	movs	r5, #0
	arm_mat_init_f32(&eskf->I3,3,3,eskf->I3_data);
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	f500 5387 	add.w	r3, r0, #4320	; 0x10e0
void ESKF_new(ESKF_filter* eskf){
 8002dc6:	b083      	sub	sp, #12
	arm_mat_init_f32(&eskf->I3,3,3,eskf->I3_data);
 8002dc8:	4689      	mov	r9, r1
 8002dca:	4608      	mov	r0, r1
	eskf->MAG_initialized = 0;
 8002dcc:	e9c4 5500 	strd	r5, r5, [r4]
	eskf->GPS_initialized = 0;
 8002dd0:	60a5      	str	r5, [r4, #8]
	arm_mat_init_f32(&eskf->I3,3,3,eskf->I3_data);
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	3310      	adds	r3, #16
 8002dd6:	f007 f99b 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->I12,12,12,eskf->I12_data);
 8002dda:	220c      	movs	r2, #12
 8002ddc:	f504 5688 	add.w	r6, r4, #4352	; 0x1100
 8002de0:	3614      	adds	r6, #20
 8002de2:	f504 5388 	add.w	r3, r4, #4352	; 0x1100
 8002de6:	4630      	mov	r0, r6
 8002de8:	4611      	mov	r1, r2
 8002dea:	331c      	adds	r3, #28
 8002dec:	f007 f990 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->I15,15,15,eskf->I15_data);
 8002df0:	220f      	movs	r2, #15
 8002df2:	f504 589a 	add.w	r8, r4, #4928	; 0x1340
 8002df6:	f108 081c 	add.w	r8, r8, #28
 8002dfa:	f504 539b 	add.w	r3, r4, #4960	; 0x1360
 8002dfe:	4640      	mov	r0, r8
 8002e00:	4611      	mov	r1, r2
 8002e02:	3304      	adds	r3, #4
	arm_mat_init_f32(&eskf->g,3,1,eskf->g_data);
 8002e04:	f504 57b7 	add.w	r7, r4, #5856	; 0x16e0
	arm_mat_init_f32(&eskf->I15,15,15,eskf->I15_data);
 8002e08:	f007 f982 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->g,3,1,eskf->g_data);
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	f504 53b7 	add.w	r3, r4, #5856	; 0x16e0
 8002e12:	3310      	adds	r3, #16
 8002e14:	2201      	movs	r2, #1
 8002e16:	2103      	movs	r1, #3
 8002e18:	4638      	mov	r0, r7
 8002e1a:	f007 f979 	bl	800a110 <arm_mat_init_f32>

	eye(&eskf->I3);
 8002e1e:	4648      	mov	r0, r9
 8002e20:	f8cd 9004 	str.w	r9, [sp, #4]
 8002e24:	f000 ff0c 	bl	8003c40 <eye>
	eye(&eskf->I12);
 8002e28:	4630      	mov	r0, r6
 8002e2a:	f000 ff09 	bl	8003c40 <eye>
	eye(&eskf->I15);
 8002e2e:	4640      	mov	r0, r8
 8002e30:	f000 ff06 	bl	8003c40 <eye>
	zeros(&eskf->g);	eskf->g_data[2] = -9.81;
 8002e34:	4638      	mov	r0, r7
 8002e36:	f000 fef9 	bl	8003c2c <zeros>
 8002e3a:	f241 63f8 	movw	r3, #5880	; 0x16f8
 8002e3e:	4af1      	ldr	r2, [pc, #964]	; (8003204 <ESKF_new+0x454>)

	//Nominal states
	arm_mat_init_f32(&eskf->p,3,1,eskf->p_data);
 8002e40:	f104 0a0c 	add.w	sl, r4, #12
	zeros(&eskf->g);	eskf->g_data[2] = -9.81;
 8002e44:	50e2      	str	r2, [r4, r3]
	arm_mat_init_f32(&eskf->v,3,1,eskf->v_data);
 8002e46:	f104 0920 	add.w	r9, r4, #32
	arm_mat_init_f32(&eskf->p,3,1,eskf->p_data);
 8002e4a:	4650      	mov	r0, sl
 8002e4c:	f104 0314 	add.w	r3, r4, #20
 8002e50:	2201      	movs	r2, #1
 8002e52:	2103      	movs	r1, #3
 8002e54:	f007 f95c 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->q,4,1,eskf->q_data);
 8002e58:	f104 0834 	add.w	r8, r4, #52	; 0x34
	arm_mat_init_f32(&eskf->v,3,1,eskf->v_data);
 8002e5c:	4648      	mov	r0, r9
 8002e5e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8002e62:	2201      	movs	r2, #1
 8002e64:	2103      	movs	r1, #3
 8002e66:	f007 f953 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->q,4,1,eskf->q_data);
 8002e6a:	4640      	mov	r0, r8
 8002e6c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8002e70:	2201      	movs	r2, #1
 8002e72:	2104      	movs	r1, #4
 8002e74:	f007 f94c 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->R,3,3,eskf->R_data);
 8002e78:	2203      	movs	r2, #3
 8002e7a:	f104 0b4c 	add.w	fp, r4, #76	; 0x4c
 8002e7e:	4658      	mov	r0, fp
 8002e80:	f104 0354 	add.w	r3, r4, #84	; 0x54
 8002e84:	4611      	mov	r1, r2
	arm_mat_init_f32(&eskf->ab,3,1,eskf->ab_data);
 8002e86:	f104 0778 	add.w	r7, r4, #120	; 0x78
 8002e8a:	9700      	str	r7, [sp, #0]
	arm_mat_init_f32(&eskf->R,3,3,eskf->R_data);
 8002e8c:	f007 f940 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->wb,3,1,eskf->wb_data);
 8002e90:	f104 078c 	add.w	r7, r4, #140	; 0x8c
	arm_mat_init_f32(&eskf->ab,3,1,eskf->ab_data);
 8002e94:	9800      	ldr	r0, [sp, #0]
 8002e96:	f104 0380 	add.w	r3, r4, #128	; 0x80
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	2103      	movs	r1, #3
 8002e9e:	f007 f937 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->wb,3,1,eskf->wb_data);
 8002ea2:	2103      	movs	r1, #3
 8002ea4:	f104 0394 	add.w	r3, r4, #148	; 0x94
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	4638      	mov	r0, r7
 8002eac:	f007 f930 	bl	800a110 <arm_mat_init_f32>

	zeros(&eskf->p);
 8002eb0:	4650      	mov	r0, sl
 8002eb2:	f000 febb 	bl	8003c2c <zeros>
	zeros(&eskf->v);
 8002eb6:	4648      	mov	r0, r9
 8002eb8:	f000 feb8 	bl	8003c2c <zeros>
	zeros(&eskf->q);eskf->q.pData[0] = 1.0;//q = [1,0,0,0]'
 8002ebc:	4640      	mov	r0, r8
 8002ebe:	f000 feb5 	bl	8003c2c <zeros>
 8002ec2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ec6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	eye(&eskf->R);
 8002ec8:	4658      	mov	r0, fp
	zeros(&eskf->q);eskf->q.pData[0] = 1.0;//q = [1,0,0,0]'
 8002eca:	601a      	str	r2, [r3, #0]
	eye(&eskf->R);
 8002ecc:	f000 feb8 	bl	8003c40 <eye>
	zeros(&eskf->ab);
 8002ed0:	9800      	ldr	r0, [sp, #0]
 8002ed2:	f000 feab 	bl	8003c2c <zeros>
	zeros(&eskf->wb);

	//Error states
	arm_mat_init_f32(&eskf->del_p,3,1,eskf->del_p_data);
 8002ed6:	f104 0ba0 	add.w	fp, r4, #160	; 0xa0
	zeros(&eskf->wb);
 8002eda:	4638      	mov	r0, r7
 8002edc:	f000 fea6 	bl	8003c2c <zeros>
	arm_mat_init_f32(&eskf->del_v,3,1,eskf->del_v_data);
 8002ee0:	f104 0ab4 	add.w	sl, r4, #180	; 0xb4
	arm_mat_init_f32(&eskf->del_p,3,1,eskf->del_p_data);
 8002ee4:	4658      	mov	r0, fp
 8002ee6:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
 8002eea:	2201      	movs	r2, #1
 8002eec:	2103      	movs	r1, #3
 8002eee:	f007 f90f 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->del_theta,3,1,eskf->del_theta_data);
 8002ef2:	f104 09c8 	add.w	r9, r4, #200	; 0xc8
	arm_mat_init_f32(&eskf->del_v,3,1,eskf->del_v_data);
 8002ef6:	4650      	mov	r0, sl
 8002ef8:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 8002efc:	2201      	movs	r2, #1
 8002efe:	2103      	movs	r1, #3
 8002f00:	f007 f906 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->del_ab,3,1,eskf->del_ab_data);
 8002f04:	f104 08dc 	add.w	r8, r4, #220	; 0xdc
	arm_mat_init_f32(&eskf->del_theta,3,1,eskf->del_theta_data);
 8002f08:	4648      	mov	r0, r9
 8002f0a:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
 8002f0e:	2201      	movs	r2, #1
 8002f10:	2103      	movs	r1, #3
 8002f12:	f007 f8fd 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->del_wb,3,1,eskf->del_wb_data);
 8002f16:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
	arm_mat_init_f32(&eskf->del_ab,3,1,eskf->del_ab_data);
 8002f1a:	4640      	mov	r0, r8
 8002f1c:	f104 03e4 	add.w	r3, r4, #228	; 0xe4
 8002f20:	2201      	movs	r2, #1
 8002f22:	2103      	movs	r1, #3
 8002f24:	f007 f8f4 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->del_wb,3,1,eskf->del_wb_data);
 8002f28:	f104 03f8 	add.w	r3, r4, #248	; 0xf8
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	2103      	movs	r1, #3
 8002f30:	4638      	mov	r0, r7
 8002f32:	f007 f8ed 	bl	800a110 <arm_mat_init_f32>

	zeros(&eskf->del_p);
 8002f36:	4658      	mov	r0, fp
 8002f38:	f000 fe78 	bl	8003c2c <zeros>
	zeros(&eskf->del_v);
 8002f3c:	4650      	mov	r0, sl
 8002f3e:	f000 fe75 	bl	8003c2c <zeros>
	zeros(&eskf->del_theta);
 8002f42:	4648      	mov	r0, r9
 8002f44:	f000 fe72 	bl	8003c2c <zeros>
	zeros(&eskf->del_ab);
 8002f48:	4640      	mov	r0, r8
 8002f4a:	f000 fe6f 	bl	8003c2c <zeros>
	zeros(&eskf->del_wb);
 8002f4e:	4638      	mov	r0, r7
 8002f50:	f000 fe6c 	bl	8003c2c <zeros>

	//covariance matrix
	arm_mat_init_f32(&eskf->P,15,15,eskf->P_data);
 8002f54:	220f      	movs	r2, #15
 8002f56:	f504 7782 	add.w	r7, r4, #260	; 0x104
 8002f5a:	4638      	mov	r0, r7
 8002f5c:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 8002f60:	4611      	mov	r1, r2
 8002f62:	f007 f8d5 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->Q,12,12,eskf->Q_data);
 8002f66:	220c      	movs	r2, #12
 8002f68:	f504 6892 	add.w	r8, r4, #1168	; 0x490
 8002f6c:	f504 6393 	add.w	r3, r4, #1176	; 0x498
 8002f70:	4611      	mov	r1, r2
 8002f72:	4640      	mov	r0, r8
 8002f74:	f007 f8cc 	bl	800a110 <arm_mat_init_f32>

	//for simplicity
	float32_t* P = eskf->P.pData;

	zeros(&eskf->P);
 8002f78:	4638      	mov	r0, r7
	float32_t* P = eskf->P.pData;
 8002f7a:	f8d4 7108 	ldr.w	r7, [r4, #264]	; 0x108
	zeros(&eskf->P);
 8002f7e:	f000 fe55 	bl	8003c2c <zeros>

	P[0] = P[16] = P[32] = P_INITIAL_COV;
	P[48] = P[64] = P[80] = V_INITIAL_COV;
	P[96] = P[112] = PR_INITIAL_COV;
	P[128] = Y_INITIAL_COV;
 8002f82:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
	P[0] = P[16] = P[32] = P_INITIAL_COV;
 8002f86:	4aa0      	ldr	r2, [pc, #640]	; (8003208 <ESKF_new+0x458>)
	P[144] = P[160] = P[176] = AB_INITIAL_COV;
 8002f88:	4ba0      	ldr	r3, [pc, #640]	; (800320c <ESKF_new+0x45c>)
	P[96] = P[112] = PR_INITIAL_COV;
 8002f8a:	49a1      	ldr	r1, [pc, #644]	; (8003210 <ESKF_new+0x460>)
	P[128] = Y_INITIAL_COV;
 8002f8c:	f8c7 c200 	str.w	ip, [r7, #512]	; 0x200
	P[192] = P[208] = P[224] = WB_INITIAL_COV;

	zeros(&eskf->Q);//Value of Q depends on dt
 8002f90:	4640      	mov	r0, r8
	P[0] = P[16] = P[32] = P_INITIAL_COV;
 8002f92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f96:	643a      	str	r2, [r7, #64]	; 0x40
 8002f98:	603a      	str	r2, [r7, #0]
	P[48] = P[64] = P[80] = V_INITIAL_COV;
 8002f9a:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8002f9e:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8002fa2:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
	P[96] = P[112] = PR_INITIAL_COV;
 8002fa6:	f8c7 11c0 	str.w	r1, [r7, #448]	; 0x1c0
 8002faa:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
	P[144] = P[160] = P[176] = AB_INITIAL_COV;
 8002fae:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8002fb2:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 8002fb6:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
	P[192] = P[208] = P[224] = WB_INITIAL_COV;
 8002fba:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 8002fbe:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 8002fc2:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
	zeros(&eskf->Q);//Value of Q depends on dt
 8002fc6:	f000 fe31 	bl	8003c2c <zeros>

	arm_mat_init_f32(&eskf->V_GPS,3,3,eskf->V_GPS_data);
 8002fca:	2203      	movs	r2, #3
 8002fcc:	f504 68db 	add.w	r8, r4, #1752	; 0x6d8
 8002fd0:	4640      	mov	r0, r8
 8002fd2:	f504 63dc 	add.w	r3, r4, #1760	; 0x6e0
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	f007 f89a 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->V_MAG,3,3,eskf->V_MAG_data);
 8002fdc:	2203      	movs	r2, #3
 8002fde:	f204 7704 	addw	r7, r4, #1796	; 0x704
 8002fe2:	f204 730c 	addw	r3, r4, #1804	; 0x70c
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	4638      	mov	r0, r7
 8002fea:	f007 f891 	bl	800a110 <arm_mat_init_f32>

	zeros(&eskf->V_GPS);
 8002fee:	4640      	mov	r0, r8
 8002ff0:	f000 fe1c 	bl	8003c2c <zeros>
	eskf->V_GPS.pData[0] = eskf->V_GPS.pData[4] = GPS_XY_INITIAL_COV;
 8002ff4:	f8d4 36dc 	ldr.w	r3, [r4, #1756]	; 0x6dc
 8002ff8:	4a86      	ldr	r2, [pc, #536]	; (8003214 <ESKF_new+0x464>)
	eskf->V_GPS.pData[8] = GPS_Z_INITIAL_COV;
 8002ffa:	4987      	ldr	r1, [pc, #540]	; (8003218 <ESKF_new+0x468>)

	zeros(&eskf->V_MAG);
 8002ffc:	4638      	mov	r0, r7
	eskf->V_GPS.pData[8] = GPS_Z_INITIAL_COV;
 8002ffe:	6219      	str	r1, [r3, #32]
	eskf->V_GPS.pData[0] = eskf->V_GPS.pData[4] = GPS_XY_INITIAL_COV;
 8003000:	611a      	str	r2, [r3, #16]
 8003002:	601a      	str	r2, [r3, #0]
	zeros(&eskf->V_MAG);
 8003004:	f000 fe12 	bl	8003c2c <zeros>
	eskf->V_MAG.pData[0] = eskf->V_MAG.pData[4] = eskf->V_MAG.pData[8] = MAG_INITIAL_COV;
 8003008:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000

	//state transfer matrix
	arm_mat_init_f32(&eskf->Fx,15,15,eskf->Fx_data);
 800300c:	220f      	movs	r2, #15
	eskf->V_MAG.pData[0] = eskf->V_MAG.pData[4] = eskf->V_MAG.pData[8] = MAG_INITIAL_COV;
 800300e:	f8d4 3708 	ldr.w	r3, [r4, #1800]	; 0x708
	arm_mat_init_f32(&eskf->Fx,15,15,eskf->Fx_data);
 8003012:	f504 68e6 	add.w	r8, r4, #1840	; 0x730
	arm_mat_init_f32(&eskf->Fi,15,12,eskf->Fi_data);
 8003016:	f604 27bc 	addw	r7, r4, #2748	; 0xabc
	eskf->V_MAG.pData[0] = eskf->V_MAG.pData[4] = eskf->V_MAG.pData[8] = MAG_INITIAL_COV;
 800301a:	6219      	str	r1, [r3, #32]
 800301c:	6119      	str	r1, [r3, #16]
 800301e:	6019      	str	r1, [r3, #0]
	arm_mat_init_f32(&eskf->Fx,15,15,eskf->Fx_data);
 8003020:	4640      	mov	r0, r8
 8003022:	f504 63e7 	add.w	r3, r4, #1848	; 0x738
 8003026:	4611      	mov	r1, r2
 8003028:	f007 f872 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->Fi,15,12,eskf->Fi_data);
 800302c:	f604 23c4 	addw	r3, r4, #2756	; 0xac4
 8003030:	220c      	movs	r2, #12
 8003032:	210f      	movs	r1, #15
 8003034:	4638      	mov	r0, r7
 8003036:	f007 f86b 	bl	800a110 <arm_mat_init_f32>

	eye(&eskf->Fx);//other part of Fx depends on dt
 800303a:	4640      	mov	r0, r8
 800303c:	f000 fe00 	bl	8003c40 <eye>

	zeros(&eskf->Fi);
 8003040:	4638      	mov	r0, r7
 8003042:	f000 fdf3 	bl	8003c2c <zeros>
	matcpy2(&eskf->Fi,&eskf->I12,3,0);
 8003046:	462b      	mov	r3, r5
 8003048:	4631      	mov	r1, r6
 800304a:	4638      	mov	r0, r7
 800304c:	2203      	movs	r2, #3
 800304e:	f000 fe27 	bl	8003ca0 <matcpy2>

	//observation
	arm_mat_init_f32(&eskf->z_GPS,3,1,eskf->z_GPS_data);
 8003052:	f604 539c 	addw	r3, r4, #3484	; 0xd9c
 8003056:	f604 5094 	addw	r0, r4, #3476	; 0xd94
 800305a:	2201      	movs	r2, #1
 800305c:	2103      	movs	r1, #3
 800305e:	f007 f857 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->z_MAG,3,1,eskf->z_MAG_data);

	//observation matrix
	arm_mat_init_f32(&eskf->H_GPS,3,15,eskf->H_GPS_data);
 8003062:	f604 56bc 	addw	r6, r4, #3516	; 0xdbc
	arm_mat_init_f32(&eskf->z_MAG,3,1,eskf->z_MAG_data);
 8003066:	f504 635b 	add.w	r3, r4, #3504	; 0xdb0
 800306a:	f604 50a8 	addw	r0, r4, #3496	; 0xda8
 800306e:	2201      	movs	r2, #1
 8003070:	2103      	movs	r1, #3
 8003072:	f007 f84d 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->H_MAG,3,15,eskf->H_MAG_data);
 8003076:	f604 6778 	addw	r7, r4, #3704	; 0xe78
	arm_mat_init_f32(&eskf->H_GPS,3,15,eskf->H_GPS_data);
 800307a:	4630      	mov	r0, r6
 800307c:	f604 53c4 	addw	r3, r4, #3524	; 0xdc4
 8003080:	220f      	movs	r2, #15
 8003082:	2103      	movs	r1, #3
 8003084:	f007 f844 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->H_MAG,3,15,eskf->H_MAG_data);
 8003088:	f504 6368 	add.w	r3, r4, #3712	; 0xe80
 800308c:	4638      	mov	r0, r7
 800308e:	220f      	movs	r2, #15
 8003090:	2103      	movs	r1, #3
 8003092:	f007 f83d 	bl	800a110 <arm_mat_init_f32>

	zeros(&eskf->H_GPS);
 8003096:	4630      	mov	r0, r6
 8003098:	f000 fdc8 	bl	8003c2c <zeros>
	matcpy2(&eskf->H_GPS,&eskf->I3,0,0);
 800309c:	462b      	mov	r3, r5
 800309e:	462a      	mov	r2, r5
 80030a0:	9901      	ldr	r1, [sp, #4]
 80030a2:	4630      	mov	r0, r6
 80030a4:	f000 fdfc 	bl	8003ca0 <matcpy2>

	zeros(&eskf->H_MAG);//H_MAG depends on q

	//Kalman gain matrix
	arm_mat_init_f32(&eskf->K_GPS,15,3,eskf->K_GPS_data);
 80030a8:	f604 7834 	addw	r8, r4, #3892	; 0xf34
	zeros(&eskf->H_MAG);//H_MAG depends on q
 80030ac:	4638      	mov	r0, r7
 80030ae:	f000 fdbd 	bl	8003c2c <zeros>
	arm_mat_init_f32(&eskf->K_MAG,15,3,eskf->K_MAG_data);
 80030b2:	f504 677f 	add.w	r7, r4, #4080	; 0xff0
	arm_mat_init_f32(&eskf->K_GPS,15,3,eskf->K_GPS_data);
 80030b6:	4640      	mov	r0, r8
 80030b8:	f604 733c 	addw	r3, r4, #3900	; 0xf3c
 80030bc:	2203      	movs	r2, #3
 80030be:	210f      	movs	r1, #15
 80030c0:	f007 f826 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->K_MAG,15,3,eskf->K_MAG_data);
 80030c4:	f604 73f8 	addw	r3, r4, #4088	; 0xff8
 80030c8:	2203      	movs	r2, #3
 80030ca:	210f      	movs	r1, #15
 80030cc:	4638      	mov	r0, r7
 80030ce:	f007 f81f 	bl	800a110 <arm_mat_init_f32>

	zeros(&eskf->K_GPS);
 80030d2:	4640      	mov	r0, r8
 80030d4:	f000 fdaa 	bl	8003c2c <zeros>
	zeros(&eskf->K_MAG);

	//measurements
	arm_mat_init_f32(&eskf->am,3,1,eskf->am_data);
 80030d8:	f504 5885 	add.w	r8, r4, #4256	; 0x10a0
	zeros(&eskf->K_MAG);
 80030dc:	4638      	mov	r0, r7
 80030de:	f000 fda5 	bl	8003c2c <zeros>
	arm_mat_init_f32(&eskf->am,3,1,eskf->am_data);
 80030e2:	f108 080c 	add.w	r8, r8, #12
 80030e6:	f504 5385 	add.w	r3, r4, #4256	; 0x10a0
	arm_mat_init_f32(&eskf->wm,3,1,eskf->wm_data);
 80030ea:	f504 5986 	add.w	r9, r4, #4288	; 0x10c0
	arm_mat_init_f32(&eskf->am,3,1,eskf->am_data);
 80030ee:	4640      	mov	r0, r8
 80030f0:	3314      	adds	r3, #20
 80030f2:	2201      	movs	r2, #1
 80030f4:	2103      	movs	r1, #3
 80030f6:	f007 f80b 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->wm,3,1,eskf->wm_data);
 80030fa:	464b      	mov	r3, r9
 80030fc:	4648      	mov	r0, r9
 80030fe:	3308      	adds	r3, #8
 8003100:	2201      	movs	r2, #1
 8003102:	2103      	movs	r1, #3
	arm_mat_init_f32(&eskf->mm,3,1,eskf->mm_data);
 8003104:	464f      	mov	r7, r9
	arm_mat_init_f32(&eskf->wm,3,1,eskf->wm_data);
 8003106:	f007 f803 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->mm,3,1,eskf->mm_data);
 800310a:	464b      	mov	r3, r9
 800310c:	3714      	adds	r7, #20
 800310e:	331c      	adds	r3, #28
 8003110:	2201      	movs	r2, #1
 8003112:	2103      	movs	r1, #3
 8003114:	4638      	mov	r0, r7
 8003116:	f006 fffb 	bl	800a110 <arm_mat_init_f32>

	zeros(&eskf->am);
 800311a:	4640      	mov	r0, r8
 800311c:	f000 fd86 	bl	8003c2c <zeros>
	zeros(&eskf->wm);
 8003120:	4648      	mov	r0, r9
 8003122:	f000 fd83 	bl	8003c2c <zeros>
	//Initialization variables
	eskf->IMU_init_count = 0;
	eskf->MAG_init_count = 0;
	eskf->GPS_init_count = 0;

	arm_mat_init_f32(&eskf->am_init,3,1,eskf->am_init_data);
 8003126:	f504 58b8 	add.w	r8, r4, #5888	; 0x1700
	zeros(&eskf->mm);
 800312a:	4638      	mov	r0, r7
 800312c:	f000 fd7e 	bl	8003c2c <zeros>
	eskf->MAG_init_count = 0;
 8003130:	4641      	mov	r1, r8
	eskf->IMU_init_count = 0;
 8003132:	f241 60fc 	movw	r0, #5884	; 0x16fc
	eskf->GPS_init_count = 0;
 8003136:	f241 7204 	movw	r2, #5892	; 0x1704
	arm_mat_init_f32(&eskf->am_init,3,1,eskf->am_init_data);
 800313a:	460b      	mov	r3, r1
 800313c:	f108 0808 	add.w	r8, r8, #8
	eskf->IMU_init_count = 0;
 8003140:	5025      	str	r5, [r4, r0]
	arm_mat_init_f32(&eskf->am_init,3,1,eskf->am_init_data);
 8003142:	3310      	adds	r3, #16
	eskf->MAG_init_count = 0;
 8003144:	600d      	str	r5, [r1, #0]
	arm_mat_init_f32(&eskf->am_init,3,1,eskf->am_init_data);
 8003146:	4640      	mov	r0, r8
	eskf->GPS_init_count = 0;
 8003148:	50a5      	str	r5, [r4, r2]
	arm_mat_init_f32(&eskf->am_init,3,1,eskf->am_init_data);
 800314a:	2103      	movs	r1, #3
 800314c:	2201      	movs	r2, #1
	arm_mat_init_f32(&eskf->mm_init,3,1,eskf->mm_init_data);
 800314e:	f504 57b8 	add.w	r7, r4, #5888	; 0x1700
	arm_mat_init_f32(&eskf->am_init,3,1,eskf->am_init_data);
 8003152:	f006 ffdd 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->mm_init,3,1,eskf->mm_init_data);
 8003156:	371c      	adds	r7, #28
 8003158:	f504 53b9 	add.w	r3, r4, #5920	; 0x1720
 800315c:	4638      	mov	r0, r7
 800315e:	3304      	adds	r3, #4
 8003160:	2201      	movs	r2, #1
 8003162:	2103      	movs	r1, #3
	arm_mat_init_f32(&eskf->m_ref,3,1,eskf->m_ref_data);
 8003164:	f504 55ba 	add.w	r5, r4, #5952	; 0x1740
	arm_mat_init_f32(&eskf->mm_init,3,1,eskf->mm_init_data);
 8003168:	f006 ffd2 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->m_ref,3,1,eskf->m_ref_data);
 800316c:	3508      	adds	r5, #8
 800316e:	f504 53ba 	add.w	r3, r4, #5952	; 0x1740
 8003172:	3310      	adds	r3, #16
 8003174:	2201      	movs	r2, #1
 8003176:	2103      	movs	r1, #3
 8003178:	4628      	mov	r0, r5
 800317a:	f006 ffc9 	bl	800a110 <arm_mat_init_f32>

	zeros(&eskf->am_init);
 800317e:	4640      	mov	r0, r8
 8003180:	f000 fd54 	bl	8003c2c <zeros>
	zeros(&eskf->mm_init);
 8003184:	4638      	mov	r0, r7
 8003186:	f000 fd51 	bl	8003c2c <zeros>
	zeros(&eskf->m_ref);
 800318a:	4628      	mov	r0, r5
 800318c:	f000 fd4e 	bl	8003c2c <zeros>

	//time
	eskf->last_t = 0;
 8003190:	f504 52bb 	add.w	r2, r4, #5984	; 0x1760
 8003194:	f04f 0800 	mov.w	r8, #0
 8003198:	f04f 0900 	mov.w	r9, #0

	//AUX variables necessary during computation
	arm_mat_init_f32(&eskf->am_unbias,3,1,eskf->am_unbias_data);
 800319c:	4613      	mov	r3, r2
 800319e:	4610      	mov	r0, r2
	eskf->last_t = 0;
 80031a0:	e9c2 8900 	strd	r8, r9, [r2]
	arm_mat_init_f32(&eskf->am_unbias,3,1,eskf->am_unbias_data);
 80031a4:	3310      	adds	r3, #16
 80031a6:	3008      	adds	r0, #8
 80031a8:	2201      	movs	r2, #1
 80031aa:	2103      	movs	r1, #3
 80031ac:	f006 ffb0 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->wm_unbias,3,1,eskf->wm_unbias_data);
 80031b0:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 80031b4:	f504 50bb 	add.w	r0, r4, #5984	; 0x1760
 80031b8:	3304      	adds	r3, #4
 80031ba:	301c      	adds	r0, #28
 80031bc:	2201      	movs	r2, #1
 80031be:	2103      	movs	r1, #3
 80031c0:	f006 ffa6 	bl	800a110 <arm_mat_init_f32>

	arm_mat_init_f32(&eskf->del_q,4,1,eskf->del_q_data);
 80031c4:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 80031c8:	4618      	mov	r0, r3
 80031ca:	2201      	movs	r2, #1
 80031cc:	3318      	adds	r3, #24
 80031ce:	3010      	adds	r0, #16
 80031d0:	2104      	movs	r1, #4
 80031d2:	f006 ff9d 	bl	800a110 <arm_mat_init_f32>

	arm_mat_init_f32(&eskf->R_hat_am_unbias,3,3,eskf->R_hat_am_unbias_data);
 80031d6:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80031da:	2203      	movs	r2, #3
 80031dc:	4618      	mov	r0, r3
 80031de:	4611      	mov	r1, r2
 80031e0:	3310      	adds	r3, #16
 80031e2:	3008      	adds	r0, #8
 80031e4:	f006 ff94 	bl	800a110 <arm_mat_init_f32>

	arm_mat_init_f32(&eskf->Fx_T,15,15,eskf->Fx_T_data);
 80031e8:	f504 53be 	add.w	r3, r4, #6080	; 0x17c0
 80031ec:	220f      	movs	r2, #15
 80031ee:	4618      	mov	r0, r3
 80031f0:	4611      	mov	r1, r2
 80031f2:	331c      	adds	r3, #28
 80031f4:	3014      	adds	r0, #20
 80031f6:	f006 ff8b 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->Fx_P,15,15,eskf->Fx_P_data);
 80031fa:	220f      	movs	r2, #15
 80031fc:	f504 53db 	add.w	r3, r4, #7008	; 0x1b60
 8003200:	e00c      	b.n	800321c <ESKF_new+0x46c>
 8003202:	bf00      	nop
 8003204:	c11cf5c3 	.word	0xc11cf5c3
 8003208:	42c80000 	.word	0x42c80000
 800320c:	39d1b717 	.word	0x39d1b717
 8003210:	3d23d70a 	.word	0x3d23d70a
 8003214:	3fe7ae14 	.word	0x3fe7ae14
 8003218:	408a3d71 	.word	0x408a3d71
 800321c:	f504 50db 	add.w	r0, r4, #7008	; 0x1b60
 8003220:	4611      	mov	r1, r2
 8003222:	3308      	adds	r3, #8
 8003224:	f006 ff74 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->P_temp,15,15,eskf->P_temp_data);
 8003228:	f504 5312 	add.w	r3, r4, #9344	; 0x2480
 800322c:	220f      	movs	r2, #15
 800322e:	4618      	mov	r0, r3
 8003230:	4611      	mov	r1, r2
 8003232:	3324      	adds	r3, #36	; 0x24
 8003234:	301c      	adds	r0, #28
 8003236:	f006 ff6b 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->Fi_T,12,15,eskf->Fi_T_data);
 800323a:	f504 53f7 	add.w	r3, r4, #7904	; 0x1ee0
 800323e:	4618      	mov	r0, r3
 8003240:	220f      	movs	r2, #15
 8003242:	3314      	adds	r3, #20
 8003244:	300c      	adds	r0, #12
 8003246:	210c      	movs	r1, #12
 8003248:	f006 ff62 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->Fi_Q,15,12,eskf->Fi_Q_data);
 800324c:	f504 5307 	add.w	r3, r4, #8640	; 0x21c0
 8003250:	4618      	mov	r0, r3
 8003252:	220c      	movs	r2, #12
 8003254:	330c      	adds	r3, #12
 8003256:	3004      	adds	r0, #4
 8003258:	210f      	movs	r1, #15

	//MAG update related variables

	//GPS update related variables
	arm_mat_init_f32(&eskf->H_GPS_T,15,3,eskf->H_GPS_T_data);
 800325a:	f504 5520 	add.w	r5, r4, #10240	; 0x2800
	arm_mat_init_f32(&eskf->Fi_Q,15,12,eskf->Fi_Q_data);
 800325e:	f006 ff57 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->H_GPS_T,15,3,eskf->H_GPS_T_data);
 8003262:	3528      	adds	r5, #40	; 0x28
 8003264:	f504 5320 	add.w	r3, r4, #10240	; 0x2800
 8003268:	4628      	mov	r0, r5
 800326a:	3330      	adds	r3, #48	; 0x30
 800326c:	2203      	movs	r2, #3
 800326e:	210f      	movs	r1, #15
 8003270:	f006 ff4e 	bl	800a110 <arm_mat_init_f32>
	arm_mat_trans_f32(&eskf->H_GPS,&eskf->H_GPS_T);
 8003274:	4629      	mov	r1, r5
 8003276:	4630      	mov	r0, r6
 8003278:	f006 fc18 	bl	8009aac <arm_mat_trans_f32>

	arm_mat_init_f32(&eskf->COV_GPS,3,3,eskf->COV_GPS_data);
 800327c:	f504 5323 	add.w	r3, r4, #10432	; 0x28c0
 8003280:	2203      	movs	r2, #3
 8003282:	4618      	mov	r0, r3
 8003284:	4611      	mov	r1, r2
 8003286:	332c      	adds	r3, #44	; 0x2c
 8003288:	3024      	adds	r0, #36	; 0x24
 800328a:	f006 ff41 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->inv_COV_GPS,3,3,eskf->inv_COV_GPS_data);
 800328e:	f504 5324 	add.w	r3, r4, #10496	; 0x2900
 8003292:	2203      	movs	r2, #3
 8003294:	4618      	mov	r0, r3
 8003296:	4611      	mov	r1, r2
 8003298:	3318      	adds	r3, #24
 800329a:	3010      	adds	r0, #16
 800329c:	f006 ff38 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->P_H_GPS_T,15,3,eskf->P_H_GPS_T_data);
 80032a0:	f504 5325 	add.w	r3, r4, #10560	; 0x2940
 80032a4:	f504 5024 	add.w	r0, r4, #10496	; 0x2900
 80032a8:	3304      	adds	r3, #4
 80032aa:	303c      	adds	r0, #60	; 0x3c
 80032ac:	2203      	movs	r2, #3
 80032ae:	210f      	movs	r1, #15
 80032b0:	f006 ff2e 	bl	800a110 <arm_mat_init_f32>

	arm_mat_init_f32(&eskf->z_hx_GPS,3,1,eskf->z_hx_GPS_data);
 80032b4:	f504 5027 	add.w	r0, r4, #10688	; 0x29c0
 80032b8:	f504 5328 	add.w	r3, r4, #10752	; 0x2a00
 80032bc:	3038      	adds	r0, #56	; 0x38
 80032be:	2201      	movs	r2, #1
 80032c0:	2103      	movs	r1, #3
 80032c2:	f006 ff25 	bl	800a110 <arm_mat_init_f32>

	arm_mat_init_f32(&eskf->I_KH_GPS,15,15,eskf->I_KH_GPS_data);
 80032c6:	f504 5328 	add.w	r3, r4, #10752	; 0x2a00
 80032ca:	220f      	movs	r2, #15
 80032cc:	4618      	mov	r0, r3
 80032ce:	4611      	mov	r1, r2
 80032d0:	3314      	adds	r3, #20
 80032d2:	300c      	adds	r0, #12
 80032d4:	f006 ff1c 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->I_KH_GPS_T,15,15,eskf->I_KH_GPS_T_data);
 80032d8:	f504 5336 	add.w	r3, r4, #11648	; 0x2d80
 80032dc:	220f      	movs	r2, #15
 80032de:	4618      	mov	r0, r3
 80032e0:	4611      	mov	r1, r2
 80032e2:	3320      	adds	r3, #32
 80032e4:	3018      	adds	r0, #24
 80032e6:	f006 ff13 	bl	800a110 <arm_mat_init_f32>

	arm_mat_init_f32(&eskf->KV_GPS,15,3,eskf->KV_GPS_data);
 80032ea:	f504 5344 	add.w	r3, r4, #12544	; 0x3100
 80032ee:	4618      	mov	r0, r3
 80032f0:	2203      	movs	r2, #3
 80032f2:	332c      	adds	r3, #44	; 0x2c
 80032f4:	3024      	adds	r0, #36	; 0x24
 80032f6:	210f      	movs	r1, #15
 80032f8:	f006 ff0a 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->K_GPS_T,3,15,eskf->K_GPS_T_data);
 80032fc:	f504 5347 	add.w	r3, r4, #12736	; 0x31c0
 8003300:	4618      	mov	r0, r3
 8003302:	220f      	movs	r2, #15
 8003304:	3328      	adds	r3, #40	; 0x28
 8003306:	3020      	adds	r0, #32
 8003308:	2103      	movs	r1, #3
 800330a:	f006 ff01 	bl	800a110 <arm_mat_init_f32>


	//shared between MAG and GPS update
	arm_mat_init_f32(&eskf->del_x,15,1,eskf->del_x_data);
 800330e:	f504 534a 	add.w	r3, r4, #12928	; 0x3280
 8003312:	4618      	mov	r0, r3
 8003314:	2201      	movs	r2, #1
 8003316:	210f      	movs	r1, #15
 8003318:	3324      	adds	r3, #36	; 0x24
 800331a:	301c      	adds	r0, #28
}
 800331c:	b003      	add	sp, #12
 800331e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	arm_mat_init_f32(&eskf->del_x,15,1,eskf->del_x_data);
 8003322:	f006 bef5 	b.w	800a110 <arm_mat_init_f32>
 8003326:	bf00      	nop

08003328 <inject_error_state>:
}

/**
 * inject error into nominal state, and then reset error state.
 */
void inject_error_state(ESKF_filter* eskf){
 8003328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800332c:	4604      	mov	r4, r0
 800332e:	b086      	sub	sp, #24

	arm_matrix_instance_f32 tempquat;
	float32_t tempquat_data[4*1];
	arm_mat_init_f32(&tempquat,4,1,tempquat_data);
 8003330:	4668      	mov	r0, sp
 8003332:	ab02      	add	r3, sp, #8
 8003334:	2201      	movs	r2, #1
 8003336:	2104      	movs	r1, #4
 8003338:	f006 feea 	bl	800a110 <arm_mat_init_f32>

	//copy data in del_x to corresponding error state
	matslice(&eskf->del_x,&eskf->del_p,0,0);
 800333c:	2300      	movs	r3, #0
 800333e:	f504 554a 	add.w	r5, r4, #12928	; 0x3280
 8003342:	351c      	adds	r5, #28
 8003344:	f104 0aa0 	add.w	sl, r4, #160	; 0xa0
	matslice(&eskf->del_x,&eskf->del_v,3,0);
 8003348:	f104 08b4 	add.w	r8, r4, #180	; 0xb4
	matslice(&eskf->del_x,&eskf->del_p,0,0);
 800334c:	4628      	mov	r0, r5
 800334e:	4651      	mov	r1, sl
 8003350:	461a      	mov	r2, r3
 8003352:	f000 fcc1 	bl	8003cd8 <matslice>
	matslice(&eskf->del_x,&eskf->del_theta,6,0);
 8003356:	f104 09c8 	add.w	r9, r4, #200	; 0xc8
	matslice(&eskf->del_x,&eskf->del_v,3,0);
 800335a:	4628      	mov	r0, r5
 800335c:	4641      	mov	r1, r8
 800335e:	2300      	movs	r3, #0
 8003360:	2203      	movs	r2, #3
 8003362:	f000 fcb9 	bl	8003cd8 <matslice>
	matslice(&eskf->del_x,&eskf->del_ab,9,0);
 8003366:	f104 07dc 	add.w	r7, r4, #220	; 0xdc
	matslice(&eskf->del_x,&eskf->del_theta,6,0);
 800336a:	4628      	mov	r0, r5
 800336c:	4649      	mov	r1, r9
 800336e:	2300      	movs	r3, #0
 8003370:	2206      	movs	r2, #6
 8003372:	f000 fcb1 	bl	8003cd8 <matslice>
	matslice(&eskf->del_x,&eskf->del_wb,12,0);
 8003376:	f104 06f0 	add.w	r6, r4, #240	; 0xf0
	matslice(&eskf->del_x,&eskf->del_ab,9,0);
 800337a:	4628      	mov	r0, r5
 800337c:	4639      	mov	r1, r7
 800337e:	2300      	movs	r3, #0
 8003380:	2209      	movs	r2, #9
 8003382:	f000 fca9 	bl	8003cd8 <matslice>
	matslice(&eskf->del_x,&eskf->del_wb,12,0);
 8003386:	2300      	movs	r3, #0
 8003388:	4628      	mov	r0, r5
 800338a:	4631      	mov	r1, r6
 800338c:	220c      	movs	r2, #12
 800338e:	f000 fca3 	bl	8003cd8 <matslice>

	//inject error states into nominal states
	arm_mat_add_f32(&eskf->p,&eskf->del_p,&eskf->p);
 8003392:	f104 020c 	add.w	r2, r4, #12
 8003396:	4651      	mov	r1, sl
 8003398:	4610      	mov	r0, r2
 800339a:	f006 febd 	bl	800a118 <arm_mat_add_f32>
	arm_mat_add_f32(&eskf->v,&eskf->del_v,&eskf->v);

	quatexp2(&eskf->del_theta,&eskf->del_q);
 800339e:	f504 55bc 	add.w	r5, r4, #6016	; 0x1780
	arm_mat_add_f32(&eskf->v,&eskf->del_v,&eskf->v);
 80033a2:	f104 0220 	add.w	r2, r4, #32
 80033a6:	4641      	mov	r1, r8
 80033a8:	4610      	mov	r0, r2
	quatexp2(&eskf->del_theta,&eskf->del_q);
 80033aa:	3510      	adds	r5, #16
	arm_mat_add_f32(&eskf->v,&eskf->del_v,&eskf->v);
 80033ac:	f006 feb4 	bl	800a118 <arm_mat_add_f32>
	otimes(&eskf->q,&eskf->del_q,&tempquat);
 80033b0:	f104 0834 	add.w	r8, r4, #52	; 0x34
	quatexp2(&eskf->del_theta,&eskf->del_q);
 80033b4:	4648      	mov	r0, r9
 80033b6:	4629      	mov	r1, r5
 80033b8:	f002 fb26 	bl	8005a08 <quatexp2>
	otimes(&eskf->q,&eskf->del_q,&tempquat);
 80033bc:	466a      	mov	r2, sp
 80033be:	4629      	mov	r1, r5
 80033c0:	4640      	mov	r0, r8
 80033c2:	f002 fae1 	bl	8005988 <otimes>
	matcpy(&tempquat,&eskf->q);
 80033c6:	4641      	mov	r1, r8
 80033c8:	4668      	mov	r0, sp
 80033ca:	f000 fc57 	bl	8003c7c <matcpy>

	arm_mat_add_f32(&eskf->ab,&eskf->del_ab,&eskf->ab);
 80033ce:	f104 0278 	add.w	r2, r4, #120	; 0x78
 80033d2:	4639      	mov	r1, r7
 80033d4:	4610      	mov	r0, r2
 80033d6:	f006 fe9f 	bl	800a118 <arm_mat_add_f32>
	arm_mat_add_f32(&eskf->wb,&eskf->del_wb,&eskf->wb);
 80033da:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 80033de:	4631      	mov	r1, r6
 80033e0:	4610      	mov	r0, r2
 80033e2:	f006 fe99 	bl	800a118 <arm_mat_add_f32>

	//no need to reset del_p ~ del_wb to zero, since they always
	//get their value here.
}
 80033e6:	b006      	add	sp, #24
 80033e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033ec:	0000      	movs	r0, r0
	...

080033f0 <lla2xyz>:
}

/**
 * convert lla to ECEF xyz coordinate
 */
void lla2xyz(float32_t lla[3], float32_t xyz[3]){
 80033f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f4:	4604      	mov	r4, r0
 80033f6:	b085      	sub	sp, #20

	float32_t lat = lla[0] / 180.0 * M_PI;//DEG -> RAD
 80033f8:	6800      	ldr	r0, [r0, #0]
void lla2xyz(float32_t lla[3], float32_t xyz[3]){
 80033fa:	460d      	mov	r5, r1
	float32_t lat = lla[0] / 180.0 * M_PI;//DEG -> RAD
 80033fc:	f7fd f814 	bl	8000428 <__aeabi_f2d>
 8003400:	a33d      	add	r3, pc, #244	; (adr r3, 80034f8 <lla2xyz+0x108>)
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	f7fd f867 	bl	80004d8 <__aeabi_dmul>
 800340a:	f7fd fb5d 	bl	8000ac8 <__aeabi_d2f>

	float32_t a = 6378137.0;//earth semimajor axis in meters
	//float32_t f = 0.003352810664747;//reciprocal flattening
	float32_t e2 = 0.006694379990141;//eccentricity squared, e2 = 2*f - f^2

	float32_t sin_lat = sin(lat);
 800340e:	f7fd f80b 	bl	8000428 <__aeabi_f2d>
 8003412:	4606      	mov	r6, r0
 8003414:	460f      	mov	r7, r1
 8003416:	f009 fb69 	bl	800caec <sin>
 800341a:	f7fd fb55 	bl	8000ac8 <__aeabi_d2f>
	float32_t cos_lat = cos(lat);
 800341e:	4639      	mov	r1, r7
	float32_t sin_lat = sin(lat);
 8003420:	4682      	mov	sl, r0
	float32_t cos_lat = cos(lat);
 8003422:	4630      	mov	r0, r6
 8003424:	f009 fb2c 	bl	800ca80 <cos>
 8003428:	f7fd fb4e 	bl	8000ac8 <__aeabi_d2f>
 800342c:	4683      	mov	fp, r0
	float32_t lon = lla[1] / 180.0 * M_PI;
 800342e:	6860      	ldr	r0, [r4, #4]
 8003430:	f7fc fffa 	bl	8000428 <__aeabi_f2d>
 8003434:	a330      	add	r3, pc, #192	; (adr r3, 80034f8 <lla2xyz+0x108>)
 8003436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343a:	f7fd f84d 	bl	80004d8 <__aeabi_dmul>
 800343e:	f7fd fb43 	bl	8000ac8 <__aeabi_d2f>
	float32_t sin_lon = sin(lon);
 8003442:	f7fc fff1 	bl	8000428 <__aeabi_f2d>
 8003446:	4680      	mov	r8, r0
 8003448:	4689      	mov	r9, r1
 800344a:	f009 fb4f 	bl	800caec <sin>
 800344e:	4606      	mov	r6, r0
 8003450:	460f      	mov	r7, r1
	float32_t cos_lon = cos(lon);
 8003452:	4640      	mov	r0, r8
 8003454:	4649      	mov	r1, r9
 8003456:	f009 fb13 	bl	800ca80 <cos>
 800345a:	4680      	mov	r8, r0
 800345c:	4689      	mov	r9, r1

	float32_t chi = sqrt(1-e2 * sin_lat * sin_lat);
 800345e:	4650      	mov	r0, sl
 8003460:	4651      	mov	r1, sl
 8003462:	f7fd fc8f 	bl	8000d84 <__aeabi_fmul>
 8003466:	4926      	ldr	r1, [pc, #152]	; (8003500 <lla2xyz+0x110>)
 8003468:	f7fd fc8c 	bl	8000d84 <__aeabi_fmul>
 800346c:	4601      	mov	r1, r0
 800346e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003472:	f7fd fb7d 	bl	8000b70 <__aeabi_fsub>
 8003476:	f7fc ffd7 	bl	8000428 <__aeabi_f2d>
 800347a:	f009 fbcd 	bl	800cc18 <sqrt>
 800347e:	f7fd fb23 	bl	8000ac8 <__aeabi_d2f>
 8003482:	4601      	mov	r1, r0
 8003484:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003488:	f7fd fd30 	bl	8000eec <__aeabi_fdiv>

	xyz[0] = (a / chi + lla[2]) * cos_lat * cos_lon;
 800348c:	491d      	ldr	r1, [pc, #116]	; (8003504 <lla2xyz+0x114>)
 800348e:	9001      	str	r0, [sp, #4]
 8003490:	f7fd fc78 	bl	8000d84 <__aeabi_fmul>
 8003494:	68a1      	ldr	r1, [r4, #8]
 8003496:	9003      	str	r0, [sp, #12]
 8003498:	f7fd fb6c 	bl	8000b74 <__addsf3>
	float32_t cos_lon = cos(lon);
 800349c:	4649      	mov	r1, r9
	xyz[0] = (a / chi + lla[2]) * cos_lat * cos_lon;
 800349e:	9002      	str	r0, [sp, #8]
	float32_t cos_lon = cos(lon);
 80034a0:	4640      	mov	r0, r8
 80034a2:	f7fd fb11 	bl	8000ac8 <__aeabi_d2f>
	xyz[0] = (a / chi + lla[2]) * cos_lat * cos_lon;
 80034a6:	4659      	mov	r1, fp
 80034a8:	f7fd fc6c 	bl	8000d84 <__aeabi_fmul>
 80034ac:	9a02      	ldr	r2, [sp, #8]
 80034ae:	4601      	mov	r1, r0
 80034b0:	4610      	mov	r0, r2
 80034b2:	f7fd fc67 	bl	8000d84 <__aeabi_fmul>
 80034b6:	6028      	str	r0, [r5, #0]
	xyz[1] = (a / chi + lla[2]) * cos_lat * sin_lon;
 80034b8:	68a1      	ldr	r1, [r4, #8]
 80034ba:	9b03      	ldr	r3, [sp, #12]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fd fb59 	bl	8000b74 <__addsf3>
	float32_t sin_lon = sin(lon);
 80034c2:	4639      	mov	r1, r7
	xyz[1] = (a / chi + lla[2]) * cos_lat * sin_lon;
 80034c4:	4680      	mov	r8, r0
	float32_t sin_lon = sin(lon);
 80034c6:	4630      	mov	r0, r6
 80034c8:	f7fd fafe 	bl	8000ac8 <__aeabi_d2f>
	xyz[1] = (a / chi + lla[2]) * cos_lat * sin_lon;
 80034cc:	4659      	mov	r1, fp
 80034ce:	f7fd fc59 	bl	8000d84 <__aeabi_fmul>
 80034d2:	4601      	mov	r1, r0
 80034d4:	4640      	mov	r0, r8
 80034d6:	f7fd fc55 	bl	8000d84 <__aeabi_fmul>
	xyz[2] = (a * (1-e2) / chi + lla[2]) * sin_lat;
 80034da:	490b      	ldr	r1, [pc, #44]	; (8003508 <lla2xyz+0x118>)
	xyz[1] = (a / chi + lla[2]) * cos_lat * sin_lon;
 80034dc:	6068      	str	r0, [r5, #4]
	xyz[2] = (a * (1-e2) / chi + lla[2]) * sin_lat;
 80034de:	9801      	ldr	r0, [sp, #4]
 80034e0:	f7fd fc50 	bl	8000d84 <__aeabi_fmul>
 80034e4:	68a1      	ldr	r1, [r4, #8]
 80034e6:	f7fd fb45 	bl	8000b74 <__addsf3>
 80034ea:	4651      	mov	r1, sl
 80034ec:	f7fd fc4a 	bl	8000d84 <__aeabi_fmul>
 80034f0:	60a8      	str	r0, [r5, #8]
}
 80034f2:	b005      	add	sp, #20
 80034f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034f8:	a2529d39 	.word	0xa2529d39
 80034fc:	3f91df46 	.word	0x3f91df46
 8003500:	3bdb5c88 	.word	0x3bdb5c88
 8003504:	4ac2a532 	.word	0x4ac2a532
 8003508:	4ac1579f 	.word	0x4ac1579f
 800350c:	00000000 	.word	0x00000000

08003510 <lla2enu>:
void lla2enu(float32_t lla_ref[3], float32_t lla[3], float32_t enu[3]){
 8003510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003514:	460d      	mov	r5, r1
 8003516:	4606      	mov	r6, r0
 8003518:	b089      	sub	sp, #36	; 0x24
	lla2xyz(lla_ref,xyz_ref);
 800351a:	a902      	add	r1, sp, #8
void lla2enu(float32_t lla_ref[3], float32_t lla[3], float32_t enu[3]){
 800351c:	4614      	mov	r4, r2
	lla2xyz(lla_ref,xyz_ref);
 800351e:	f7ff ff67 	bl	80033f0 <lla2xyz>
	lla2xyz(lla,xyz);
 8003522:	4628      	mov	r0, r5
 8003524:	a905      	add	r1, sp, #20
 8003526:	f7ff ff63 	bl	80033f0 <lla2xyz>
	float32_t lat_ref = lla_ref[0] / 180.0 * M_PI;
 800352a:	6830      	ldr	r0, [r6, #0]
 800352c:	f7fc ff7c 	bl	8000428 <__aeabi_f2d>
 8003530:	a345      	add	r3, pc, #276	; (adr r3, 8003648 <lla2enu+0x138>)
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	f7fc ffcf 	bl	80004d8 <__aeabi_dmul>
 800353a:	f7fd fac5 	bl	8000ac8 <__aeabi_d2f>
	float32_t sin_lat_ref = sin(lat_ref);
 800353e:	f7fc ff73 	bl	8000428 <__aeabi_f2d>
 8003542:	4680      	mov	r8, r0
 8003544:	4689      	mov	r9, r1
 8003546:	f009 fad1 	bl	800caec <sin>
 800354a:	f7fd fabd 	bl	8000ac8 <__aeabi_d2f>
	float32_t cos_lat_ref = cos(lat_ref);
 800354e:	4649      	mov	r1, r9
	float32_t sin_lat_ref = sin(lat_ref);
 8003550:	4605      	mov	r5, r0
	float32_t cos_lat_ref = cos(lat_ref);
 8003552:	4640      	mov	r0, r8
 8003554:	f009 fa94 	bl	800ca80 <cos>
 8003558:	f7fd fab6 	bl	8000ac8 <__aeabi_d2f>
 800355c:	4681      	mov	r9, r0
	float32_t lon_ref = lla_ref[1] / 180.0 * M_PI;
 800355e:	6870      	ldr	r0, [r6, #4]
 8003560:	f7fc ff62 	bl	8000428 <__aeabi_f2d>
 8003564:	a338      	add	r3, pc, #224	; (adr r3, 8003648 <lla2enu+0x138>)
 8003566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356a:	f7fc ffb5 	bl	80004d8 <__aeabi_dmul>
 800356e:	f7fd faab 	bl	8000ac8 <__aeabi_d2f>
	float32_t sin_lon_ref = sin(lon_ref);
 8003572:	f7fc ff59 	bl	8000428 <__aeabi_f2d>
 8003576:	4606      	mov	r6, r0
 8003578:	460f      	mov	r7, r1
 800357a:	f009 fab7 	bl	800caec <sin>
 800357e:	f7fd faa3 	bl	8000ac8 <__aeabi_d2f>
	float32_t cos_lon_ref = cos(lon_ref);
 8003582:	4639      	mov	r1, r7
	float32_t sin_lon_ref = sin(lon_ref);
 8003584:	4680      	mov	r8, r0
	float32_t cos_lon_ref = cos(lon_ref);
 8003586:	4630      	mov	r0, r6
 8003588:	f009 fa7a 	bl	800ca80 <cos>
 800358c:	f7fd fa9c 	bl	8000ac8 <__aeabi_d2f>
	float32_t dx = xyz[0] - xyz_ref[0];
 8003590:	9902      	ldr	r1, [sp, #8]
	float32_t cos_lon_ref = cos(lon_ref);
 8003592:	4606      	mov	r6, r0
	float32_t dx = xyz[0] - xyz_ref[0];
 8003594:	9805      	ldr	r0, [sp, #20]
 8003596:	f7fd faeb 	bl	8000b70 <__aeabi_fsub>
	float32_t dy = xyz[1] - xyz_ref[1];
 800359a:	9903      	ldr	r1, [sp, #12]
	float32_t dx = xyz[0] - xyz_ref[0];
 800359c:	4607      	mov	r7, r0
	float32_t dy = xyz[1] - xyz_ref[1];
 800359e:	9806      	ldr	r0, [sp, #24]
 80035a0:	f7fd fae6 	bl	8000b70 <__aeabi_fsub>
	float32_t dz = xyz[2] - xyz_ref[2];
 80035a4:	9904      	ldr	r1, [sp, #16]
	float32_t dy = xyz[1] - xyz_ref[1];
 80035a6:	4682      	mov	sl, r0
	float32_t dz = xyz[2] - xyz_ref[2];
 80035a8:	9807      	ldr	r0, [sp, #28]
 80035aa:	f7fd fae1 	bl	8000b70 <__aeabi_fsub>
	enu[0] = -sin_lon_ref * dx + cos_lon_ref * dy;
 80035ae:	4651      	mov	r1, sl
	float32_t dz = xyz[2] - xyz_ref[2];
 80035b0:	4683      	mov	fp, r0
	enu[0] = -sin_lon_ref * dx + cos_lon_ref * dy;
 80035b2:	4630      	mov	r0, r6
 80035b4:	f7fd fbe6 	bl	8000d84 <__aeabi_fmul>
 80035b8:	4639      	mov	r1, r7
 80035ba:	9000      	str	r0, [sp, #0]
 80035bc:	4640      	mov	r0, r8
 80035be:	f7fd fbe1 	bl	8000d84 <__aeabi_fmul>
 80035c2:	9b00      	ldr	r3, [sp, #0]
 80035c4:	4601      	mov	r1, r0
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fd fad2 	bl	8000b70 <__aeabi_fsub>
	enu[1] = -sin_lat_ref*cos_lon_ref*dx - sin_lat_ref*sin_lon_ref*dy + cos_lat_ref * dz;
 80035cc:	4659      	mov	r1, fp
	enu[0] = -sin_lon_ref * dx + cos_lon_ref * dy;
 80035ce:	6020      	str	r0, [r4, #0]
	enu[1] = -sin_lat_ref*cos_lon_ref*dx - sin_lat_ref*sin_lon_ref*dy + cos_lat_ref * dz;
 80035d0:	4648      	mov	r0, r9
 80035d2:	f7fd fbd7 	bl	8000d84 <__aeabi_fmul>
 80035d6:	4641      	mov	r1, r8
 80035d8:	9001      	str	r0, [sp, #4]
 80035da:	4628      	mov	r0, r5
 80035dc:	f7fd fbd2 	bl	8000d84 <__aeabi_fmul>
 80035e0:	4651      	mov	r1, sl
 80035e2:	f7fd fbcf 	bl	8000d84 <__aeabi_fmul>
 80035e6:	4631      	mov	r1, r6
 80035e8:	9000      	str	r0, [sp, #0]
 80035ea:	4628      	mov	r0, r5
 80035ec:	f7fd fbca 	bl	8000d84 <__aeabi_fmul>
 80035f0:	4639      	mov	r1, r7
 80035f2:	f7fd fbc7 	bl	8000d84 <__aeabi_fmul>
 80035f6:	9a00      	ldr	r2, [sp, #0]
 80035f8:	4601      	mov	r1, r0
 80035fa:	4610      	mov	r0, r2
 80035fc:	f7fd faba 	bl	8000b74 <__addsf3>
 8003600:	9b01      	ldr	r3, [sp, #4]
 8003602:	4601      	mov	r1, r0
 8003604:	4618      	mov	r0, r3
 8003606:	f7fd fab3 	bl	8000b70 <__aeabi_fsub>
	enu[2] = cos_lat_ref*cos_lon_ref*dx + cos_lat_ref*sin_lon_ref*dy + sin_lat_ref * dz;
 800360a:	4651      	mov	r1, sl
	enu[1] = -sin_lat_ref*cos_lon_ref*dx - sin_lat_ref*sin_lon_ref*dy + cos_lat_ref * dz;
 800360c:	6060      	str	r0, [r4, #4]
	enu[2] = cos_lat_ref*cos_lon_ref*dx + cos_lat_ref*sin_lon_ref*dy + sin_lat_ref * dz;
 800360e:	4640      	mov	r0, r8
 8003610:	f7fd fbb8 	bl	8000d84 <__aeabi_fmul>
 8003614:	4639      	mov	r1, r7
 8003616:	4680      	mov	r8, r0
 8003618:	4630      	mov	r0, r6
 800361a:	f7fd fbb3 	bl	8000d84 <__aeabi_fmul>
 800361e:	4601      	mov	r1, r0
 8003620:	4640      	mov	r0, r8
 8003622:	f7fd faa7 	bl	8000b74 <__addsf3>
 8003626:	4649      	mov	r1, r9
 8003628:	f7fd fbac 	bl	8000d84 <__aeabi_fmul>
 800362c:	4659      	mov	r1, fp
 800362e:	4606      	mov	r6, r0
 8003630:	4628      	mov	r0, r5
 8003632:	f7fd fba7 	bl	8000d84 <__aeabi_fmul>
 8003636:	4601      	mov	r1, r0
 8003638:	4630      	mov	r0, r6
 800363a:	f7fd fa9b 	bl	8000b74 <__addsf3>
 800363e:	60a0      	str	r0, [r4, #8]
}
 8003640:	b009      	add	sp, #36	; 0x24
 8003642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003646:	bf00      	nop
 8003648:	a2529d39 	.word	0xa2529d39
 800364c:	3f91df46 	.word	0x3f91df46

08003650 <ESKF_update>:
void ESKF_update(ESKF_filter* eskf, double t, float32_t am[3], float32_t wm[3], float32_t mm[3], float32_t lla[3], int info){
 8003650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003654:	b09b      	sub	sp, #108	; 0x6c
 8003656:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8003658:	4604      	mov	r4, r0
	double mm_norm = sqrt(mm[0]*mm[0] + mm[1]*mm[1] + mm[2]*mm[2]);
 800365a:	f8d5 b000 	ldr.w	fp, [r5]
void ESKF_update(ESKF_filter* eskf, double t, float32_t am[3], float32_t wm[3], float32_t mm[3], float32_t lla[3], int info){
 800365e:	e9cd 2300 	strd	r2, r3, [sp]
	double mm_norm = sqrt(mm[0]*mm[0] + mm[1]*mm[1] + mm[2]*mm[2]);
 8003662:	4659      	mov	r1, fp
 8003664:	4658      	mov	r0, fp
 8003666:	f7fd fb8d 	bl	8000d84 <__aeabi_fmul>
 800366a:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800366e:	4606      	mov	r6, r0
 8003670:	4651      	mov	r1, sl
 8003672:	4650      	mov	r0, sl
 8003674:	f7fd fb86 	bl	8000d84 <__aeabi_fmul>
 8003678:	4601      	mov	r1, r0
 800367a:	4630      	mov	r0, r6
 800367c:	f7fd fa7a 	bl	8000b74 <__addsf3>
 8003680:	68af      	ldr	r7, [r5, #8]
 8003682:	4606      	mov	r6, r0
 8003684:	4639      	mov	r1, r7
 8003686:	4638      	mov	r0, r7
 8003688:	f7fd fb7c 	bl	8000d84 <__aeabi_fmul>
 800368c:	4601      	mov	r1, r0
 800368e:	4630      	mov	r0, r6
 8003690:	f7fd fa70 	bl	8000b74 <__addsf3>
 8003694:	4606      	mov	r6, r0
 8003696:	f7fc fec7 	bl	8000428 <__aeabi_f2d>
 800369a:	f009 fabd 	bl	800cc18 <sqrt>
	float32_t* Q = eskf->Q.pData;
 800369e:	f8d4 3494 	ldr.w	r3, [r4, #1172]	; 0x494
	double mm_norm = sqrt(mm[0]*mm[0] + mm[1]*mm[1] + mm[2]*mm[2]);
 80036a2:	4680      	mov	r8, r0
 80036a4:	4689      	mov	r9, r1
	if (mm_norm != 0){
 80036a6:	4630      	mov	r0, r6
 80036a8:	2100      	movs	r1, #0
	float32_t* Q = eskf->Q.pData;
 80036aa:	9302      	str	r3, [sp, #8]
void ESKF_update(ESKF_filter* eskf, double t, float32_t am[3], float32_t wm[3], float32_t mm[3], float32_t lla[3], int info){
 80036ac:	9e24      	ldr	r6, [sp, #144]	; 0x90
	if (mm_norm != 0){
 80036ae:	f7fd fcfd 	bl	80010ac <__aeabi_fcmpeq>
 80036b2:	bb28      	cbnz	r0, 8003700 <ESKF_update+0xb0>
 80036b4:	4642      	mov	r2, r8
 80036b6:	464b      	mov	r3, r9
 80036b8:	2000      	movs	r0, #0
 80036ba:	49a6      	ldr	r1, [pc, #664]	; (8003954 <ESKF_update+0x304>)
 80036bc:	f7fd f836 	bl	800072c <__aeabi_ddiv>
 80036c0:	4680      	mov	r8, r0
 80036c2:	4689      	mov	r9, r1
		mm[0] = mm[0] / mm_norm;
 80036c4:	4658      	mov	r0, fp
 80036c6:	f7fc feaf 	bl	8000428 <__aeabi_f2d>
 80036ca:	4642      	mov	r2, r8
 80036cc:	464b      	mov	r3, r9
 80036ce:	f7fc ff03 	bl	80004d8 <__aeabi_dmul>
 80036d2:	f7fd f9f9 	bl	8000ac8 <__aeabi_d2f>
 80036d6:	6028      	str	r0, [r5, #0]
		mm[1] = mm[1] / mm_norm;
 80036d8:	4650      	mov	r0, sl
 80036da:	f7fc fea5 	bl	8000428 <__aeabi_f2d>
 80036de:	4642      	mov	r2, r8
 80036e0:	464b      	mov	r3, r9
 80036e2:	f7fc fef9 	bl	80004d8 <__aeabi_dmul>
 80036e6:	f7fd f9ef 	bl	8000ac8 <__aeabi_d2f>
 80036ea:	6068      	str	r0, [r5, #4]
		mm[2] = mm[2] / mm_norm;
 80036ec:	4638      	mov	r0, r7
 80036ee:	f7fc fe9b 	bl	8000428 <__aeabi_f2d>
 80036f2:	4642      	mov	r2, r8
 80036f4:	464b      	mov	r3, r9
 80036f6:	f7fc feef 	bl	80004d8 <__aeabi_dmul>
 80036fa:	f7fd f9e5 	bl	8000ac8 <__aeabi_d2f>
 80036fe:	60a8      	str	r0, [r5, #8]
	memcpy(eskf->am.pData,am,3*sizeof(float32_t));
 8003700:	f241 03b0 	movw	r3, #4272	; 0x10b0
	memcpy(eskf->wm.pData,wm,3*sizeof(float32_t));
 8003704:	f241 01c4 	movw	r1, #4292	; 0x10c4
	memcpy(eskf->mm.pData,mm,3*sizeof(float32_t));
 8003708:	f241 02d8 	movw	r2, #4312	; 0x10d8
	memcpy(eskf->am.pData,am,3*sizeof(float32_t));
 800370c:	68b0      	ldr	r0, [r6, #8]
 800370e:	58e3      	ldr	r3, [r4, r3]
 8003710:	f8d6 c000 	ldr.w	ip, [r6]
 8003714:	6877      	ldr	r7, [r6, #4]
 8003716:	f8c3 c000 	str.w	ip, [r3]
 800371a:	605f      	str	r7, [r3, #4]
 800371c:	6098      	str	r0, [r3, #8]
	memcpy(eskf->wm.pData,wm,3*sizeof(float32_t));
 800371e:	5863      	ldr	r3, [r4, r1]
 8003720:	9925      	ldr	r1, [sp, #148]	; 0x94
 8003722:	6848      	ldr	r0, [r1, #4]
 8003724:	680e      	ldr	r6, [r1, #0]
 8003726:	6889      	ldr	r1, [r1, #8]
 8003728:	601e      	str	r6, [r3, #0]
 800372a:	6058      	str	r0, [r3, #4]
 800372c:	6099      	str	r1, [r3, #8]
	memcpy(eskf->mm.pData,mm,3*sizeof(float32_t));
 800372e:	58a3      	ldr	r3, [r4, r2]
 8003730:	6828      	ldr	r0, [r5, #0]
 8003732:	6869      	ldr	r1, [r5, #4]
 8003734:	68aa      	ldr	r2, [r5, #8]
 8003736:	6018      	str	r0, [r3, #0]
 8003738:	6059      	str	r1, [r3, #4]
 800373a:	609a      	str	r2, [r3, #8]
	if (eskf->IMU_initialized == 0 || eskf->MAG_initialized == 0 || eskf->GPS_initialized == 0){
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 80e1 	beq.w	8003906 <ESKF_update+0x2b6>
 8003744:	6863      	ldr	r3, [r4, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	f040 80f6 	bne.w	8003938 <ESKF_update+0x2e8>
		if (info == 1 && eskf->IMU_initialized == 0){
 800374c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800374e:	2b01      	cmp	r3, #1
 8003750:	f000 8106 	beq.w	8003960 <ESKF_update+0x310>
		if (info == 3 && eskf->GPS_initialized == 0){
 8003754:	2b03      	cmp	r3, #3
 8003756:	f040 80d3 	bne.w	8003900 <ESKF_update+0x2b0>
 800375a:	68a3      	ldr	r3, [r4, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d138      	bne.n	80037d2 <ESKF_update+0x182>
			eskf->lla_init[0] += lla[0];
 8003760:	f241 7530 	movw	r5, #5936	; 0x1730
 8003764:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003766:	5960      	ldr	r0, [r4, r5]
 8003768:	6819      	ldr	r1, [r3, #0]
 800376a:	f7fd fa03 	bl	8000b74 <__addsf3>
			eskf->lla_init[1] += lla[1];
 800376e:	f241 7634 	movw	r6, #5940	; 0x1734
 8003772:	9b27      	ldr	r3, [sp, #156]	; 0x9c
			eskf->lla_init[0] += lla[0];
 8003774:	5160      	str	r0, [r4, r5]
			eskf->lla_init[1] += lla[1];
 8003776:	6859      	ldr	r1, [r3, #4]
			eskf->lla_init[0] += lla[0];
 8003778:	4680      	mov	r8, r0
			eskf->lla_init[1] += lla[1];
 800377a:	59a0      	ldr	r0, [r4, r6]
 800377c:	f7fd f9fa 	bl	8000b74 <__addsf3>
			eskf->lla_init[2] += lla[2];
 8003780:	f241 7538 	movw	r5, #5944	; 0x1738
 8003784:	9b27      	ldr	r3, [sp, #156]	; 0x9c
			eskf->lla_init[1] += lla[1];
 8003786:	51a0      	str	r0, [r4, r6]
			eskf->lla_init[2] += lla[2];
 8003788:	6899      	ldr	r1, [r3, #8]
			eskf->lla_init[1] += lla[1];
 800378a:	4607      	mov	r7, r0
			eskf->lla_init[2] += lla[2];
 800378c:	5960      	ldr	r0, [r4, r5]
 800378e:	f7fd f9f1 	bl	8000b74 <__addsf3>
			eskf->GPS_init_count++;
 8003792:	f241 7204 	movw	r2, #5892	; 0x1704
 8003796:	58a3      	ldr	r3, [r4, r2]
			eskf->lla_init[2] += lla[2];
 8003798:	4606      	mov	r6, r0
			eskf->GPS_init_count++;
 800379a:	3301      	adds	r3, #1
			if (eskf->GPS_init_count == GPS_INITIALIZE_COUNT){
 800379c:	2b0a      	cmp	r3, #10
			eskf->lla_init[2] += lla[2];
 800379e:	5160      	str	r0, [r4, r5]
			eskf->GPS_init_count++;
 80037a0:	50a3      	str	r3, [r4, r2]
			if (eskf->GPS_init_count == GPS_INITIALIZE_COUNT){
 80037a2:	d116      	bne.n	80037d2 <ESKF_update+0x182>
				eskf->lla_origin[0] = eskf->lla_init[0] / GPS_INITIALIZE_COUNT;
 80037a4:	496c      	ldr	r1, [pc, #432]	; (8003958 <ESKF_update+0x308>)
 80037a6:	4640      	mov	r0, r8
 80037a8:	f7fd faec 	bl	8000d84 <__aeabi_fmul>
 80037ac:	f241 733c 	movw	r3, #5948	; 0x173c
				eskf->lla_origin[1] = eskf->lla_init[1] / GPS_INITIALIZE_COUNT;
 80037b0:	4969      	ldr	r1, [pc, #420]	; (8003958 <ESKF_update+0x308>)
				eskf->lla_origin[0] = eskf->lla_init[0] / GPS_INITIALIZE_COUNT;
 80037b2:	50e0      	str	r0, [r4, r3]
				eskf->lla_origin[1] = eskf->lla_init[1] / GPS_INITIALIZE_COUNT;
 80037b4:	4638      	mov	r0, r7
 80037b6:	f7fd fae5 	bl	8000d84 <__aeabi_fmul>
 80037ba:	f504 53ba 	add.w	r3, r4, #5952	; 0x1740
 80037be:	6018      	str	r0, [r3, #0]
				eskf->lla_origin[2] = eskf->lla_init[2] / GPS_INITIALIZE_COUNT;
 80037c0:	4965      	ldr	r1, [pc, #404]	; (8003958 <ESKF_update+0x308>)
 80037c2:	4630      	mov	r0, r6
 80037c4:	f7fd fade 	bl	8000d84 <__aeabi_fmul>
 80037c8:	f241 7244 	movw	r2, #5956	; 0x1744
				eskf->GPS_initialized = 1;
 80037cc:	2301      	movs	r3, #1
				eskf->lla_origin[2] = eskf->lla_init[2] / GPS_INITIALIZE_COUNT;
 80037ce:	50a0      	str	r0, [r4, r2]
				eskf->GPS_initialized = 1;
 80037d0:	60a3      	str	r3, [r4, #8]
		lla2enu(eskf->lla_origin,lla,eskf->z_GPS_data);
 80037d2:	f504 50b9 	add.w	r0, r4, #5920	; 0x1720
 80037d6:	301c      	adds	r0, #28
 80037d8:	f604 529c 	addw	r2, r4, #3484	; 0xd9c
 80037dc:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80037de:	f7ff fe97 	bl	8003510 <lla2enu>
		matslice(&eskf->P,&eskf->COV_GPS,0,0);
 80037e2:	2300      	movs	r3, #0
 80037e4:	f504 5523 	add.w	r5, r4, #10432	; 0x28c0
 80037e8:	f504 7782 	add.w	r7, r4, #260	; 0x104
 80037ec:	3524      	adds	r5, #36	; 0x24
 80037ee:	461a      	mov	r2, r3
 80037f0:	4629      	mov	r1, r5
 80037f2:	4638      	mov	r0, r7
		arm_mat_add_f32(&eskf->COV_GPS,&eskf->V_GPS,&eskf->COV_GPS);
 80037f4:	f504 69db 	add.w	r9, r4, #1752	; 0x6d8
		arm_mat_inverse_f32(&eskf->COV_GPS,&eskf->inv_COV_GPS);
 80037f8:	f504 5b24 	add.w	fp, r4, #10496	; 0x2900
		matslice(&eskf->P,&eskf->COV_GPS,0,0);
 80037fc:	f000 fa6c 	bl	8003cd8 <matslice>
		arm_mat_inverse_f32(&eskf->COV_GPS,&eskf->inv_COV_GPS);
 8003800:	f10b 0b10 	add.w	fp, fp, #16
		arm_mat_add_f32(&eskf->COV_GPS,&eskf->V_GPS,&eskf->COV_GPS);
 8003804:	462a      	mov	r2, r5
 8003806:	4628      	mov	r0, r5
 8003808:	4649      	mov	r1, r9
 800380a:	f006 fc85 	bl	800a118 <arm_mat_add_f32>
		arm_mat_mult_f32(&eskf->P,&eskf->H_GPS_T,&eskf->P_H_GPS_T);
 800380e:	f504 5a24 	add.w	sl, r4, #10496	; 0x2900
		arm_mat_inverse_f32(&eskf->COV_GPS,&eskf->inv_COV_GPS);
 8003812:	4628      	mov	r0, r5
 8003814:	4659      	mov	r1, fp
 8003816:	f006 fb29 	bl	8009e6c <arm_mat_inverse_f32>
		arm_mat_mult_f32(&eskf->P,&eskf->H_GPS_T,&eskf->P_H_GPS_T);
 800381a:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
 800381e:	f504 5120 	add.w	r1, r4, #10240	; 0x2800
		arm_mat_mult_f32(&eskf->P_H_GPS_T,&eskf->inv_COV_GPS,&eskf->K_GPS);
 8003822:	f604 7834 	addw	r8, r4, #3892	; 0xf34
		arm_mat_mult_f32(&eskf->P,&eskf->H_GPS_T,&eskf->P_H_GPS_T);
 8003826:	4652      	mov	r2, sl
 8003828:	3128      	adds	r1, #40	; 0x28
 800382a:	4638      	mov	r0, r7
		arm_mat_sub_f32(&eskf->z_GPS,&eskf->p,&eskf->z_hx_GPS);
 800382c:	f504 5627 	add.w	r6, r4, #10688	; 0x29c0
		arm_mat_mult_f32(&eskf->P,&eskf->H_GPS_T,&eskf->P_H_GPS_T);
 8003830:	f006 fa68 	bl	8009d04 <arm_mat_mult_f32>
		arm_mat_sub_f32(&eskf->z_GPS,&eskf->p,&eskf->z_hx_GPS);
 8003834:	3638      	adds	r6, #56	; 0x38
		arm_mat_mult_f32(&eskf->P_H_GPS_T,&eskf->inv_COV_GPS,&eskf->K_GPS);
 8003836:	4659      	mov	r1, fp
 8003838:	4650      	mov	r0, sl
 800383a:	4642      	mov	r2, r8
 800383c:	f006 fa62 	bl	8009d04 <arm_mat_mult_f32>
		arm_mat_sub_f32(&eskf->z_GPS,&eskf->p,&eskf->z_hx_GPS);
 8003840:	4632      	mov	r2, r6
 8003842:	f104 010c 	add.w	r1, r4, #12
 8003846:	f604 5094 	addw	r0, r4, #3476	; 0xd94
 800384a:	f006 f987 	bl	8009b5c <arm_mat_sub_f32>
		zeros(&eskf->I_KH_GPS);
 800384e:	f504 5528 	add.w	r5, r4, #10752	; 0x2a00
		arm_mat_mult_f32(&eskf->K_GPS,&eskf->z_hx_GPS,&eskf->del_x);
 8003852:	f504 524a 	add.w	r2, r4, #12928	; 0x3280
		zeros(&eskf->I_KH_GPS);
 8003856:	350c      	adds	r5, #12
		arm_mat_mult_f32(&eskf->K_GPS,&eskf->z_hx_GPS,&eskf->del_x);
 8003858:	4631      	mov	r1, r6
 800385a:	321c      	adds	r2, #28
 800385c:	4640      	mov	r0, r8
 800385e:	f006 fa51 	bl	8009d04 <arm_mat_mult_f32>
		zeros(&eskf->I_KH_GPS);
 8003862:	4628      	mov	r0, r5
 8003864:	f000 f9e2 	bl	8003c2c <zeros>
		matcpy2(&eskf->I_KH_GPS,&eskf->K_GPS,0,0);
 8003868:	2300      	movs	r3, #0
 800386a:	4628      	mov	r0, r5
 800386c:	461a      	mov	r2, r3
 800386e:	4641      	mov	r1, r8
 8003870:	f000 fa16 	bl	8003ca0 <matcpy2>
		arm_mat_scale_f32(&eskf->I_KH_GPS,-1,&eskf->I_KH_GPS);//now &eskf->I_KH_GPS = -K*H
 8003874:	462a      	mov	r2, r5
 8003876:	4628      	mov	r0, r5
 8003878:	4938      	ldr	r1, [pc, #224]	; (800395c <ESKF_update+0x30c>)
 800387a:	f006 f9e1 	bl	8009c40 <arm_mat_scale_f32>
		arm_mat_trans_f32(&eskf->I_KH_GPS,&eskf->I_KH_GPS_T);
 800387e:	f504 5a36 	add.w	sl, r4, #11648	; 0x2d80
		arm_mat_add_f32(&eskf->I_KH_GPS,&eskf->I15,&eskf->I_KH_GPS);
 8003882:	f504 519a 	add.w	r1, r4, #4928	; 0x1340
 8003886:	462a      	mov	r2, r5
		arm_mat_trans_f32(&eskf->I_KH_GPS,&eskf->I_KH_GPS_T);
 8003888:	f10a 0a18 	add.w	sl, sl, #24
		arm_mat_add_f32(&eskf->I_KH_GPS,&eskf->I15,&eskf->I_KH_GPS);
 800388c:	4628      	mov	r0, r5
 800388e:	311c      	adds	r1, #28
		arm_mat_mult_f32(&eskf->I_KH_GPS,&eskf->P,&eskf->P_temp);
 8003890:	f504 5612 	add.w	r6, r4, #9344	; 0x2480
 8003894:	361c      	adds	r6, #28
		arm_mat_add_f32(&eskf->I_KH_GPS,&eskf->I15,&eskf->I_KH_GPS);
 8003896:	f006 fc3f 	bl	800a118 <arm_mat_add_f32>
		arm_mat_trans_f32(&eskf->I_KH_GPS,&eskf->I_KH_GPS_T);
 800389a:	4651      	mov	r1, sl
 800389c:	4628      	mov	r0, r5
 800389e:	f006 f905 	bl	8009aac <arm_mat_trans_f32>
		arm_mat_mult_f32(&eskf->I_KH_GPS,&eskf->P,&eskf->P_temp);
 80038a2:	4632      	mov	r2, r6
 80038a4:	4628      	mov	r0, r5
 80038a6:	4639      	mov	r1, r7
 80038a8:	f006 fa2c 	bl	8009d04 <arm_mat_mult_f32>
		matcpy(&eskf->P_temp,&eskf->P);
 80038ac:	4639      	mov	r1, r7
 80038ae:	4630      	mov	r0, r6
 80038b0:	f000 f9e4 	bl	8003c7c <matcpy>
		arm_mat_mult_f32(&eskf->P,&eskf->I_KH_GPS_T,&eskf->P_temp);
 80038b4:	4632      	mov	r2, r6
 80038b6:	4651      	mov	r1, sl
 80038b8:	4638      	mov	r0, r7
		arm_mat_trans_f32(&eskf->K_GPS,&eskf->K_GPS_T);
 80038ba:	f504 5a47 	add.w	sl, r4, #12736	; 0x31c0
		arm_mat_mult_f32(&eskf->P,&eskf->I_KH_GPS_T,&eskf->P_temp);
 80038be:	f006 fa21 	bl	8009d04 <arm_mat_mult_f32>
		arm_mat_trans_f32(&eskf->K_GPS,&eskf->K_GPS_T);
 80038c2:	f10a 0a20 	add.w	sl, sl, #32
		matcpy(&eskf->P_temp,&eskf->P);
 80038c6:	4639      	mov	r1, r7
 80038c8:	4630      	mov	r0, r6
		arm_mat_mult_f32(&eskf->K_GPS,&eskf->V_GPS,&eskf->KV_GPS);
 80038ca:	f504 5544 	add.w	r5, r4, #12544	; 0x3100
		matcpy(&eskf->P_temp,&eskf->P);
 80038ce:	f000 f9d5 	bl	8003c7c <matcpy>
		arm_mat_mult_f32(&eskf->K_GPS,&eskf->V_GPS,&eskf->KV_GPS);
 80038d2:	3524      	adds	r5, #36	; 0x24
		arm_mat_trans_f32(&eskf->K_GPS,&eskf->K_GPS_T);
 80038d4:	4651      	mov	r1, sl
 80038d6:	4640      	mov	r0, r8
 80038d8:	f006 f8e8 	bl	8009aac <arm_mat_trans_f32>
		arm_mat_mult_f32(&eskf->K_GPS,&eskf->V_GPS,&eskf->KV_GPS);
 80038dc:	4649      	mov	r1, r9
 80038de:	462a      	mov	r2, r5
 80038e0:	4640      	mov	r0, r8
 80038e2:	f006 fa0f 	bl	8009d04 <arm_mat_mult_f32>
		arm_mat_mult_f32(&eskf->KV_GPS,&eskf->K_GPS_T,&eskf->P_temp);
 80038e6:	4632      	mov	r2, r6
 80038e8:	4651      	mov	r1, sl
 80038ea:	4628      	mov	r0, r5
 80038ec:	f006 fa0a 	bl	8009d04 <arm_mat_mult_f32>
		arm_mat_add_f32(&eskf->P,&eskf->P_temp,&eskf->P);
 80038f0:	463a      	mov	r2, r7
 80038f2:	4631      	mov	r1, r6
 80038f4:	4638      	mov	r0, r7
 80038f6:	f006 fc0f 	bl	800a118 <arm_mat_add_f32>
		inject_error_state(eskf);
 80038fa:	4620      	mov	r0, r4
 80038fc:	f7ff fd14 	bl	8003328 <inject_error_state>
}
 8003900:	b01b      	add	sp, #108	; 0x6c
 8003902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (info == 1 && eskf->IMU_initialized == 0){
 8003906:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003908:	2b01      	cmp	r3, #1
 800390a:	f47f af23 	bne.w	8003754 <ESKF_update+0x104>
			if (eskf->IMU_init_count < IMU_INITIALIZE_COUNT){
 800390e:	f241 66fc 	movw	r6, #5884	; 0x16fc
 8003912:	59a3      	ldr	r3, [r4, r6]
 8003914:	2b09      	cmp	r3, #9
 8003916:	f340 8174 	ble.w	8003c02 <ESKF_update+0x5b2>
 800391a:	f504 5585 	add.w	r5, r4, #4256	; 0x10a0
 800391e:	350c      	adds	r5, #12
			if (eskf->IMU_init_count == IMU_INITIALIZE_COUNT){
 8003920:	2b0a      	cmp	r3, #10
 8003922:	d120      	bne.n	8003966 <ESKF_update+0x316>
				arm_mat_scale_f32(&eskf->am_init,1.0/IMU_INITIALIZE_COUNT,&eskf->am_init);
 8003924:	f504 52b8 	add.w	r2, r4, #5888	; 0x1700
 8003928:	3208      	adds	r2, #8
 800392a:	4610      	mov	r0, r2
 800392c:	490a      	ldr	r1, [pc, #40]	; (8003958 <ESKF_update+0x308>)
 800392e:	f006 f987 	bl	8009c40 <arm_mat_scale_f32>
				eskf->IMU_initialized = 1;
 8003932:	2301      	movs	r3, #1
 8003934:	6023      	str	r3, [r4, #0]
 8003936:	e016      	b.n	8003966 <ESKF_update+0x316>
	if (eskf->IMU_initialized == 0 || eskf->MAG_initialized == 0 || eskf->GPS_initialized == 0){
 8003938:	68a3      	ldr	r3, [r4, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	f43f af06 	beq.w	800374c <ESKF_update+0xfc>
	if (info == 1){
 8003940:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003942:	2b01      	cmp	r3, #1
 8003944:	d00c      	beq.n	8003960 <ESKF_update+0x310>
	if (info == 3){
 8003946:	2b03      	cmp	r3, #3
 8003948:	f43f af43 	beq.w	80037d2 <ESKF_update+0x182>
}
 800394c:	b01b      	add	sp, #108	; 0x6c
 800394e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003952:	bf00      	nop
 8003954:	3ff00000 	.word	0x3ff00000
 8003958:	3dcccccd 	.word	0x3dcccccd
 800395c:	bf800000 	.word	0xbf800000
 8003960:	f504 5585 	add.w	r5, r4, #4256	; 0x10a0
 8003964:	350c      	adds	r5, #12
		double dt = t - eskf->last_t;
 8003966:	f504 56bb 	add.w	r6, r4, #5984	; 0x1760
 800396a:	e9dd 7800 	ldrd	r7, r8, [sp]
 800396e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003972:	4638      	mov	r0, r7
 8003974:	4641      	mov	r1, r8
 8003976:	f7fc fbf7 	bl	8000168 <__aeabi_dsub>
		eskf->last_t = t;
 800397a:	463a      	mov	r2, r7
 800397c:	4643      	mov	r3, r8
		double dt = t - eskf->last_t;
 800397e:	e9cd 0100 	strd	r0, r1, [sp]
		eskf->last_t = t;
 8003982:	e9c6 2300 	strd	r2, r3, [r6]
		arm_mat_init_f32(&tempvec,3,1,tempvec_data);
 8003986:	a804      	add	r0, sp, #16
 8003988:	ab0a      	add	r3, sp, #40	; 0x28
 800398a:	2201      	movs	r2, #1
 800398c:	2103      	movs	r1, #3
 800398e:	f006 fbbf 	bl	800a110 <arm_mat_init_f32>
		arm_mat_init_f32(&tempquat,4,1,tempquat_data);
 8003992:	ab06      	add	r3, sp, #24
 8003994:	4618      	mov	r0, r3
 8003996:	2201      	movs	r2, #1
 8003998:	ab0d      	add	r3, sp, #52	; 0x34
 800399a:	2104      	movs	r1, #4
 800399c:	f006 fbb8 	bl	800a110 <arm_mat_init_f32>
		arm_mat_init_f32(&tempmat,3,3,tempmat_data);
 80039a0:	2203      	movs	r2, #3
 80039a2:	ab08      	add	r3, sp, #32
		quat2mat(&eskf->q,&eskf->R);//Get equivlent representation of orientation
 80039a4:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 80039a8:	f104 0a34 	add.w	sl, r4, #52	; 0x34
		arm_mat_init_f32(&tempmat,3,3,tempmat_data);
 80039ac:	4611      	mov	r1, r2
 80039ae:	4618      	mov	r0, r3
		arm_mat_sub_f32(&eskf->am,&eskf->ab,&eskf->am_unbias);//subtract acc  bias
 80039b0:	f504 58bb 	add.w	r8, r4, #5984	; 0x1760
		arm_mat_init_f32(&tempmat,3,3,tempmat_data);
 80039b4:	ab11      	add	r3, sp, #68	; 0x44
 80039b6:	f006 fbab 	bl	800a110 <arm_mat_init_f32>
		arm_mat_sub_f32(&eskf->am,&eskf->ab,&eskf->am_unbias);//subtract acc  bias
 80039ba:	f108 0808 	add.w	r8, r8, #8
		quat2mat(&eskf->q,&eskf->R);//Get equivlent representation of orientation
 80039be:	4650      	mov	r0, sl
 80039c0:	4631      	mov	r1, r6
		arm_mat_sub_f32(&eskf->wm,&eskf->wb,&eskf->wm_unbias);//subtract gyro bias
 80039c2:	f504 59bb 	add.w	r9, r4, #5984	; 0x1760
		quat2mat(&eskf->q,&eskf->R);//Get equivlent representation of orientation
 80039c6:	f001 ff4b 	bl	8005860 <quat2mat>
		arm_mat_sub_f32(&eskf->wm,&eskf->wb,&eskf->wm_unbias);//subtract gyro bias
 80039ca:	f109 091c 	add.w	r9, r9, #28
		arm_mat_sub_f32(&eskf->am,&eskf->ab,&eskf->am_unbias);//subtract acc  bias
 80039ce:	4642      	mov	r2, r8
 80039d0:	f104 0178 	add.w	r1, r4, #120	; 0x78
 80039d4:	4628      	mov	r0, r5
 80039d6:	f006 f8c1 	bl	8009b5c <arm_mat_sub_f32>
		arm_mat_sub_f32(&eskf->wm,&eskf->wb,&eskf->wm_unbias);//subtract gyro bias
 80039da:	464a      	mov	r2, r9
 80039dc:	f104 018c 	add.w	r1, r4, #140	; 0x8c
 80039e0:	f504 5086 	add.w	r0, r4, #4288	; 0x10c0
 80039e4:	f006 f8ba 	bl	8009b5c <arm_mat_sub_f32>
		arm_mat_scale_f32(&eskf->v,dt,&tempvec);
 80039e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039ec:	f7fd f86c 	bl	8000ac8 <__aeabi_d2f>
 80039f0:	f104 0520 	add.w	r5, r4, #32
		arm_mat_add_f32(&eskf->p,&tempvec,&eskf->p);
 80039f4:	f104 070c 	add.w	r7, r4, #12
		arm_mat_scale_f32(&eskf->v,dt,&tempvec);
 80039f8:	4683      	mov	fp, r0
 80039fa:	aa04      	add	r2, sp, #16
 80039fc:	4601      	mov	r1, r0
 80039fe:	4628      	mov	r0, r5
 8003a00:	9503      	str	r5, [sp, #12]
 8003a02:	f006 f91d 	bl	8009c40 <arm_mat_scale_f32>
		arm_mat_add_f32(&eskf->p,&tempvec,&eskf->p);
 8003a06:	a904      	add	r1, sp, #16
 8003a08:	463a      	mov	r2, r7
 8003a0a:	4638      	mov	r0, r7
 8003a0c:	f006 fb84 	bl	800a118 <arm_mat_add_f32>
		arm_mat_add_f32(&tempvec,&eskf->g,&tempvec);
 8003a10:	f504 55b7 	add.w	r5, r4, #5856	; 0x16e0
		arm_mat_mult_f32(&eskf->R,&eskf->am_unbias,&tempvec);
 8003a14:	aa04      	add	r2, sp, #16
 8003a16:	4641      	mov	r1, r8
 8003a18:	4630      	mov	r0, r6
 8003a1a:	f006 f973 	bl	8009d04 <arm_mat_mult_f32>
		arm_mat_add_f32(&tempvec,&eskf->g,&tempvec);
 8003a1e:	3508      	adds	r5, #8
 8003a20:	aa04      	add	r2, sp, #16
 8003a22:	4629      	mov	r1, r5
 8003a24:	4610      	mov	r0, r2
 8003a26:	f006 fb77 	bl	800a118 <arm_mat_add_f32>
		arm_mat_scale_f32(&tempvec,0.5*dt_2,&tempvec);
 8003a2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a2e:	4610      	mov	r0, r2
 8003a30:	4619      	mov	r1, r3
 8003a32:	f7fc fd51 	bl	80004d8 <__aeabi_dmul>
 8003a36:	4b7a      	ldr	r3, [pc, #488]	; (8003c20 <ESKF_update+0x5d0>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f7fc fd4d 	bl	80004d8 <__aeabi_dmul>
 8003a3e:	f7fd f843 	bl	8000ac8 <__aeabi_d2f>
 8003a42:	aa04      	add	r2, sp, #16
 8003a44:	4601      	mov	r1, r0
 8003a46:	4610      	mov	r0, r2
 8003a48:	f006 f8fa 	bl	8009c40 <arm_mat_scale_f32>
		arm_mat_add_f32(&eskf->p,&tempvec,&eskf->p);
 8003a4c:	463a      	mov	r2, r7
 8003a4e:	a904      	add	r1, sp, #16
 8003a50:	4638      	mov	r0, r7
 8003a52:	f006 fb61 	bl	800a118 <arm_mat_add_f32>
		arm_mat_mult_f32(&eskf->R,&eskf->am_unbias,&tempvec);
 8003a56:	aa04      	add	r2, sp, #16
 8003a58:	4641      	mov	r1, r8
 8003a5a:	4630      	mov	r0, r6
 8003a5c:	f006 f952 	bl	8009d04 <arm_mat_mult_f32>
		arm_mat_add_f32(&tempvec,&eskf->g,&tempvec);
 8003a60:	aa04      	add	r2, sp, #16
 8003a62:	4629      	mov	r1, r5
 8003a64:	4610      	mov	r0, r2
 8003a66:	f006 fb57 	bl	800a118 <arm_mat_add_f32>
		arm_mat_scale_f32(&tempvec,dt,&tempvec);
 8003a6a:	aa04      	add	r2, sp, #16
 8003a6c:	4659      	mov	r1, fp
 8003a6e:	4610      	mov	r0, r2
 8003a70:	f006 f8e6 	bl	8009c40 <arm_mat_scale_f32>
		arm_mat_add_f32(&eskf->v,&tempvec,&eskf->v);
 8003a74:	9a03      	ldr	r2, [sp, #12]
 8003a76:	a904      	add	r1, sp, #16
 8003a78:	4610      	mov	r0, r2
		quatexp2(&tempvec,&eskf->del_q);
 8003a7a:	f504 55bc 	add.w	r5, r4, #6016	; 0x1780
		arm_mat_add_f32(&eskf->v,&tempvec,&eskf->v);
 8003a7e:	f006 fb4b 	bl	800a118 <arm_mat_add_f32>
		quatexp2(&tempvec,&eskf->del_q);
 8003a82:	3510      	adds	r5, #16
		arm_mat_scale_f32(&eskf->wm_unbias,dt,&tempvec);
 8003a84:	aa04      	add	r2, sp, #16
 8003a86:	4659      	mov	r1, fp
 8003a88:	4648      	mov	r0, r9
 8003a8a:	f006 f8d9 	bl	8009c40 <arm_mat_scale_f32>
		quatexp2(&tempvec,&eskf->del_q);
 8003a8e:	4629      	mov	r1, r5
 8003a90:	a804      	add	r0, sp, #16
 8003a92:	f001 ffb9 	bl	8005a08 <quatexp2>
		otimes(&eskf->q,&eskf->del_q,&tempquat);
 8003a96:	aa06      	add	r2, sp, #24
 8003a98:	4629      	mov	r1, r5
 8003a9a:	4650      	mov	r0, sl
 8003a9c:	f001 ff74 	bl	8005988 <otimes>
		matcpy(&tempquat,&eskf->q);
 8003aa0:	4651      	mov	r1, sl
 8003aa2:	a806      	add	r0, sp, #24
		eye(&eskf->Fx);
 8003aa4:	f504 65e6 	add.w	r5, r4, #1840	; 0x730
		matcpy(&tempquat,&eskf->q);
 8003aa8:	f000 f8e8 	bl	8003c7c <matcpy>
		quat2mat(&eskf->q,&eskf->R);//Update R to our best estimation
 8003aac:	4631      	mov	r1, r6
 8003aae:	4650      	mov	r0, sl
		arm_mat_scale_f32(&eskf->I3,dt,&tempmat);
 8003ab0:	f504 5a87 	add.w	sl, r4, #4320	; 0x10e0
		quat2mat(&eskf->q,&eskf->R);//Update R to our best estimation
 8003ab4:	f001 fed4 	bl	8005860 <quat2mat>
		arm_mat_scale_f32(&eskf->I3,dt,&tempmat);
 8003ab8:	f10a 0a08 	add.w	sl, sl, #8
		eye(&eskf->Fx);
 8003abc:	4628      	mov	r0, r5
 8003abe:	f000 f8bf 	bl	8003c40 <eye>
		arm_mat_scale_f32(&eskf->I3,dt,&tempmat);
 8003ac2:	aa08      	add	r2, sp, #32
 8003ac4:	4659      	mov	r1, fp
 8003ac6:	4650      	mov	r0, sl
 8003ac8:	f006 f8ba 	bl	8009c40 <arm_mat_scale_f32>
		arm_mat_mult_f32(&eskf->R,&tempmat,&eskf->R_hat_am_unbias);
 8003acc:	f504 57bd 	add.w	r7, r4, #6048	; 0x17a0
		matcpy2(&eskf->Fx,&tempmat,0,3);
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	a908      	add	r1, sp, #32
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f000 f8e2 	bl	8003ca0 <matcpy2>
		arm_mat_mult_f32(&eskf->R,&tempmat,&eskf->R_hat_am_unbias);
 8003adc:	3708      	adds	r7, #8
		hat(&eskf->am_unbias,&tempmat);
 8003ade:	a908      	add	r1, sp, #32
 8003ae0:	4640      	mov	r0, r8
 8003ae2:	f000 f915 	bl	8003d10 <hat>
		arm_mat_scale_f32(&eskf->R_hat_am_unbias,-dt,&eskf->R_hat_am_unbias);
 8003ae6:	f10b 4b00 	add.w	fp, fp, #2147483648	; 0x80000000
		arm_mat_mult_f32(&eskf->R,&tempmat,&eskf->R_hat_am_unbias);
 8003aea:	463a      	mov	r2, r7
 8003aec:	a908      	add	r1, sp, #32
 8003aee:	4630      	mov	r0, r6
 8003af0:	f006 f908 	bl	8009d04 <arm_mat_mult_f32>
		arm_mat_scale_f32(&eskf->R_hat_am_unbias,-dt,&eskf->R_hat_am_unbias);
 8003af4:	463a      	mov	r2, r7
 8003af6:	4659      	mov	r1, fp
 8003af8:	4638      	mov	r0, r7
 8003afa:	f006 f8a1 	bl	8009c40 <arm_mat_scale_f32>
		matcpy2(&eskf->Fx,&eskf->R_hat_am_unbias,3,6);
 8003afe:	4639      	mov	r1, r7
 8003b00:	4628      	mov	r0, r5
 8003b02:	2306      	movs	r3, #6
 8003b04:	2203      	movs	r2, #3
 8003b06:	f000 f8cb 	bl	8003ca0 <matcpy2>
		arm_mat_scale_f32(&eskf->R,-dt,&tempmat);
 8003b0a:	aa08      	add	r2, sp, #32
 8003b0c:	4659      	mov	r1, fp
 8003b0e:	4630      	mov	r0, r6
 8003b10:	f006 f896 	bl	8009c40 <arm_mat_scale_f32>
		matcpy2(&eskf->Fx,&tempmat,3,9);
 8003b14:	2309      	movs	r3, #9
 8003b16:	a908      	add	r1, sp, #32
 8003b18:	4628      	mov	r0, r5
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	f000 f8c0 	bl	8003ca0 <matcpy2>
		arm_mat_scale_f32(&eskf->wm_unbias,-dt,&tempvec);//changed dt to -dt is equivalent to transpose
 8003b20:	aa04      	add	r2, sp, #16
 8003b22:	4659      	mov	r1, fp
 8003b24:	4648      	mov	r0, r9
 8003b26:	f006 f88b 	bl	8009c40 <arm_mat_scale_f32>
		matexp2(&tempvec,&tempmat);
 8003b2a:	a908      	add	r1, sp, #32
 8003b2c:	a804      	add	r0, sp, #16
 8003b2e:	f000 f90f 	bl	8003d50 <matexp2>
		matcpy2(&eskf->Fx,&tempmat,6,6);
 8003b32:	2306      	movs	r3, #6
 8003b34:	a908      	add	r1, sp, #32
 8003b36:	461a      	mov	r2, r3
 8003b38:	4628      	mov	r0, r5
 8003b3a:	f000 f8b1 	bl	8003ca0 <matcpy2>
		arm_mat_scale_f32(&eskf->I3,-dt,&tempmat);
 8003b3e:	aa08      	add	r2, sp, #32
 8003b40:	4659      	mov	r1, fp
 8003b42:	4650      	mov	r0, sl
 8003b44:	f006 f87c 	bl	8009c40 <arm_mat_scale_f32>
		matcpy2(&eskf->Fx,&tempmat,6,12);
 8003b48:	a908      	add	r1, sp, #32
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	2206      	movs	r2, #6
 8003b4e:	230c      	movs	r3, #12
 8003b50:	f000 f8a6 	bl	8003ca0 <matcpy2>
		arm_mat_trans_f32(&eskf->Fx,&eskf->Fx_T);
 8003b54:	f504 57be 	add.w	r7, r4, #6080	; 0x17c0
		Q[39] = Q[52] = Q[65] = 1.0e-6;
 8003b58:	4b32      	ldr	r3, [pc, #200]	; (8003c24 <ESKF_update+0x5d4>)
		Q[0] = Q[13] = Q[26] = 1.0e-4;
 8003b5a:	9e02      	ldr	r6, [sp, #8]
 8003b5c:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 8003c28 <ESKF_update+0x5d8>
		arm_mat_trans_f32(&eskf->Fx,&eskf->Fx_T);
 8003b60:	3714      	adds	r7, #20
		Q[0] = Q[13] = Q[26] = 1.0e-4;
 8003b62:	f8c6 c068 	str.w	ip, [r6, #104]	; 0x68
 8003b66:	f8c6 c034 	str.w	ip, [r6, #52]	; 0x34
 8003b6a:	f8c6 c000 	str.w	ip, [r6]
		Q[39] = Q[52] = Q[65] = 1.0e-6;
 8003b6e:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
 8003b72:	f8c6 30d0 	str.w	r3, [r6, #208]	; 0xd0
 8003b76:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c
		Q[78] = Q[91] = Q[104] = 1e-6;//Due to computation precision, can't use dt here
 8003b7a:	f8c6 31a0 	str.w	r3, [r6, #416]	; 0x1a0
 8003b7e:	f8c6 316c 	str.w	r3, [r6, #364]	; 0x16c
 8003b82:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
		Q[117] = Q[130] = Q[143] = 1e-6;
 8003b86:	f8c6 323c 	str.w	r3, [r6, #572]	; 0x23c
 8003b8a:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
 8003b8e:	f8c6 31d4 	str.w	r3, [r6, #468]	; 0x1d4
		arm_mat_mult_f32(&eskf->Fx,&eskf->P,&eskf->Fx_P);
 8003b92:	f504 7882 	add.w	r8, r4, #260	; 0x104
 8003b96:	f504 59db 	add.w	r9, r4, #7008	; 0x1b60
		arm_mat_trans_f32(&eskf->Fx,&eskf->Fx_T);
 8003b9a:	4639      	mov	r1, r7
 8003b9c:	4628      	mov	r0, r5
		arm_mat_mult_f32(&eskf->Fx_P,&eskf->Fx_T,&eskf->P_temp);
 8003b9e:	f504 5612 	add.w	r6, r4, #9344	; 0x2480
		arm_mat_trans_f32(&eskf->Fx,&eskf->Fx_T);
 8003ba2:	f005 ff83 	bl	8009aac <arm_mat_trans_f32>
		arm_mat_mult_f32(&eskf->Fx_P,&eskf->Fx_T,&eskf->P_temp);
 8003ba6:	361c      	adds	r6, #28
		arm_mat_mult_f32(&eskf->Fx,&eskf->P,&eskf->Fx_P);
 8003ba8:	4641      	mov	r1, r8
 8003baa:	464a      	mov	r2, r9
 8003bac:	4628      	mov	r0, r5
 8003bae:	f006 f8a9 	bl	8009d04 <arm_mat_mult_f32>
		arm_mat_mult_f32(&eskf->Fi,&eskf->Q,&eskf->Fi_Q);
 8003bb2:	f504 5507 	add.w	r5, r4, #8640	; 0x21c0
		arm_mat_mult_f32(&eskf->Fx_P,&eskf->Fx_T,&eskf->P_temp);
 8003bb6:	4632      	mov	r2, r6
 8003bb8:	4639      	mov	r1, r7
 8003bba:	4648      	mov	r0, r9
 8003bbc:	f006 f8a2 	bl	8009d04 <arm_mat_mult_f32>
		arm_mat_mult_f32(&eskf->Fi,&eskf->Q,&eskf->Fi_Q);
 8003bc0:	3504      	adds	r5, #4
		matcpy(&eskf->P_temp,&eskf->P);
 8003bc2:	4641      	mov	r1, r8
 8003bc4:	4630      	mov	r0, r6
		arm_mat_mult_f32(&eskf->Fi,&eskf->Q,&eskf->Fi_Q);
 8003bc6:	f604 29bc 	addw	r9, r4, #2748	; 0xabc
		arm_mat_trans_f32(&eskf->Fi,&eskf->Fi_T);
 8003bca:	f504 57f7 	add.w	r7, r4, #7904	; 0x1ee0
		matcpy(&eskf->P_temp,&eskf->P);
 8003bce:	f000 f855 	bl	8003c7c <matcpy>
		arm_mat_trans_f32(&eskf->Fi,&eskf->Fi_T);
 8003bd2:	370c      	adds	r7, #12
		arm_mat_mult_f32(&eskf->Fi,&eskf->Q,&eskf->Fi_Q);
 8003bd4:	462a      	mov	r2, r5
 8003bd6:	f504 6192 	add.w	r1, r4, #1168	; 0x490
 8003bda:	4648      	mov	r0, r9
 8003bdc:	f006 f892 	bl	8009d04 <arm_mat_mult_f32>
		arm_mat_trans_f32(&eskf->Fi,&eskf->Fi_T);
 8003be0:	4639      	mov	r1, r7
 8003be2:	4648      	mov	r0, r9
 8003be4:	f005 ff62 	bl	8009aac <arm_mat_trans_f32>
		arm_mat_mult_f32(&eskf->Fi_Q,&eskf->Fi_T,&eskf->P_temp);
 8003be8:	4632      	mov	r2, r6
 8003bea:	4639      	mov	r1, r7
 8003bec:	4628      	mov	r0, r5
 8003bee:	f006 f889 	bl	8009d04 <arm_mat_mult_f32>
		arm_mat_add_f32(&eskf->P,&eskf->P_temp,&eskf->P);
 8003bf2:	4642      	mov	r2, r8
 8003bf4:	4631      	mov	r1, r6
 8003bf6:	4640      	mov	r0, r8
 8003bf8:	f006 fa8e 	bl	800a118 <arm_mat_add_f32>
}
 8003bfc:	b01b      	add	sp, #108	; 0x6c
 8003bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				arm_mat_add_f32(&eskf->am,&eskf->am_init,&eskf->am_init);
 8003c02:	f504 52b8 	add.w	r2, r4, #5888	; 0x1700
 8003c06:	f504 5585 	add.w	r5, r4, #4256	; 0x10a0
 8003c0a:	3208      	adds	r2, #8
 8003c0c:	350c      	adds	r5, #12
 8003c0e:	4611      	mov	r1, r2
 8003c10:	4628      	mov	r0, r5
 8003c12:	f006 fa81 	bl	800a118 <arm_mat_add_f32>
				eskf->IMU_init_count++;
 8003c16:	59a3      	ldr	r3, [r4, r6]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	51a3      	str	r3, [r4, r6]
 8003c1c:	e680      	b.n	8003920 <ESKF_update+0x2d0>
 8003c1e:	bf00      	nop
 8003c20:	3fe00000 	.word	0x3fe00000
 8003c24:	358637bd 	.word	0x358637bd
 8003c28:	38d1b717 	.word	0x38d1b717

08003c2c <zeros>:
#include "math.h"

#define MATH_UTILS_SIZE_CHECK

void zeros(arm_matrix_instance_f32* mat){
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003c2c:	8843      	ldrh	r3, [r0, #2]
 8003c2e:	8802      	ldrh	r2, [r0, #0]
 8003c30:	2100      	movs	r1, #0
 8003c32:	fb02 f203 	mul.w	r2, r2, r3
 8003c36:	6840      	ldr	r0, [r0, #4]
 8003c38:	0092      	lsls	r2, r2, #2
 8003c3a:	f006 bb45 	b.w	800a2c8 <memset>
 8003c3e:	bf00      	nop

08003c40 <eye>:
}

void eye(arm_matrix_instance_f32* mat){

#ifdef MATH_UTILS_SIZE_CHECK
	if (mat->numCols != mat->numRows){
 8003c40:	8842      	ldrh	r2, [r0, #2]
 8003c42:	8803      	ldrh	r3, [r0, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d000      	beq.n	8003c4a <eye+0xa>
 8003c48:	4770      	bx	lr
void eye(arm_matrix_instance_f32* mat){
 8003c4a:	b510      	push	{r4, lr}
 8003c4c:	4604      	mov	r4, r0
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003c4e:	fb02 f202 	mul.w	r2, r2, r2
 8003c52:	2100      	movs	r1, #0
 8003c54:	0092      	lsls	r2, r2, #2
 8003c56:	6840      	ldr	r0, [r0, #4]
 8003c58:	f006 fb36 	bl	800a2c8 <memset>
		return;
	}
#endif
	zeros(mat);
	for(int i = 0; i < (mat->numCols * mat->numRows); i += (mat->numCols+1)){
 8003c5c:	8861      	ldrh	r1, [r4, #2]
 8003c5e:	8822      	ldrh	r2, [r4, #0]
 8003c60:	fb01 f202 	mul.w	r2, r1, r2
 8003c64:	b14a      	cbz	r2, 8003c7a <eye+0x3a>
 8003c66:	2300      	movs	r3, #0
		mat->pData[i] = 1;
 8003c68:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003c6c:	6864      	ldr	r4, [r4, #4]
 8003c6e:	3101      	adds	r1, #1
 8003c70:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	for(int i = 0; i < (mat->numCols * mat->numRows); i += (mat->numCols+1)){
 8003c74:	440b      	add	r3, r1
 8003c76:	4293      	cmp	r3, r2
 8003c78:	dbfa      	blt.n	8003c70 <eye+0x30>
	}
}
 8003c7a:	bd10      	pop	{r4, pc}

08003c7c <matcpy>:

void matcpy(arm_matrix_instance_f32* mat1,arm_matrix_instance_f32* mat2){
 8003c7c:	4603      	mov	r3, r0

#ifdef MATH_UTILS_SIZE_CHECK
	if (mat1->numCols != mat2->numCols || mat1->numRows != mat2->numRows){
 8003c7e:	680a      	ldr	r2, [r1, #0]
 8003c80:	6800      	ldr	r0, [r0, #0]
 8003c82:	4290      	cmp	r0, r2
 8003c84:	d000      	beq.n	8003c88 <matcpy+0xc>
 8003c86:	4770      	bx	lr
void matcpy(arm_matrix_instance_f32* mat1,arm_matrix_instance_f32* mat2){
 8003c88:	b410      	push	{r4}
		return;
	}
#endif

	memcpy(mat2->pData,mat1->pData,mat1->numCols * mat1->numRows * sizeof(float32_t));
 8003c8a:	881a      	ldrh	r2, [r3, #0]
 8003c8c:	885c      	ldrh	r4, [r3, #2]
 8003c8e:	6848      	ldr	r0, [r1, #4]
 8003c90:	fb02 f204 	mul.w	r2, r2, r4
 8003c94:	6859      	ldr	r1, [r3, #4]
 8003c96:	0092      	lsls	r2, r2, #2
}
 8003c98:	bc10      	pop	{r4}
	memcpy(mat2->pData,mat1->pData,mat1->numCols * mat1->numRows * sizeof(float32_t));
 8003c9a:	f006 bb0a 	b.w	800a2b2 <memcpy>
 8003c9e:	bf00      	nop

08003ca0 <matcpy2>:


//copy mat2 to mat1 starting at i,j at mat1.
void matcpy2(arm_matrix_instance_f32* mat1,arm_matrix_instance_f32* mat2,int i, int j){
 8003ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	int i2;//row ind in mat2
	int k = i * mat1->numCols + j;
 8003ca2:	8846      	ldrh	r6, [r0, #2]

	for(i2 = 0; i2 < mat2->numRows; i2++){
 8003ca4:	880c      	ldrh	r4, [r1, #0]
	int k = i * mat1->numCols + j;
 8003ca6:	fb02 3606 	mla	r6, r2, r6, r3
	for(i2 = 0; i2 < mat2->numRows; i2++){
 8003caa:	b1a4      	cbz	r4, 8003cd6 <matcpy2+0x36>
 8003cac:	460d      	mov	r5, r1
 8003cae:	4607      	mov	r7, r0
 8003cb0:	2400      	movs	r4, #0
		memcpy(mat1->pData+k,mat2->pData + (i2 * mat2->numCols),mat2->numCols*sizeof(float32_t));
 8003cb2:	886a      	ldrh	r2, [r5, #2]
 8003cb4:	686b      	ldr	r3, [r5, #4]
 8003cb6:	fb04 f102 	mul.w	r1, r4, r2
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	0092      	lsls	r2, r2, #2
 8003cbe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8003cc2:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8003cc6:	f006 faf4 	bl	800a2b2 <memcpy>
	for(i2 = 0; i2 < mat2->numRows; i2++){
 8003cca:	882b      	ldrh	r3, [r5, #0]
		k += mat1->numCols;
 8003ccc:	887a      	ldrh	r2, [r7, #2]
	for(i2 = 0; i2 < mat2->numRows; i2++){
 8003cce:	3401      	adds	r4, #1
 8003cd0:	42a3      	cmp	r3, r4
		k += mat1->numCols;
 8003cd2:	4416      	add	r6, r2
	for(i2 = 0; i2 < mat2->numRows; i2++){
 8003cd4:	dced      	bgt.n	8003cb2 <matcpy2+0x12>
	}
}
 8003cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003cd8 <matslice>:
/**
 * copy chunk with size of mat2 from mat1 into mat2, starting at (i,j) in mat1.
 *
 *	TODO validate this function
 */
void matslice(arm_matrix_instance_f32* mat1,arm_matrix_instance_f32* mat2,int i, int j){
 8003cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	int k = i * mat1->numCols + j;
 8003cda:	8846      	ldrh	r6, [r0, #2]

	for (int i2 = 0; i2 < mat2->numRows; i2++){
 8003cdc:	880c      	ldrh	r4, [r1, #0]
	int k = i * mat1->numCols + j;
 8003cde:	fb02 3606 	mla	r6, r2, r6, r3
	for (int i2 = 0; i2 < mat2->numRows; i2++){
 8003ce2:	b1a4      	cbz	r4, 8003d0e <matslice+0x36>
 8003ce4:	460d      	mov	r5, r1
 8003ce6:	4607      	mov	r7, r0
 8003ce8:	2400      	movs	r4, #0
		memcpy(mat2->pData + i2 * mat2->numCols, mat1->pData + k, mat2->numCols*sizeof(float32_t));
 8003cea:	886a      	ldrh	r2, [r5, #2]
 8003cec:	686b      	ldr	r3, [r5, #4]
 8003cee:	fb04 f002 	mul.w	r0, r4, r2
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	0092      	lsls	r2, r2, #2
 8003cf6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003cfa:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8003cfe:	f006 fad8 	bl	800a2b2 <memcpy>
	for (int i2 = 0; i2 < mat2->numRows; i2++){
 8003d02:	882b      	ldrh	r3, [r5, #0]
		k += mat1->numCols;
 8003d04:	887a      	ldrh	r2, [r7, #2]
	for (int i2 = 0; i2 < mat2->numRows; i2++){
 8003d06:	3401      	adds	r4, #1
 8003d08:	42a3      	cmp	r3, r4
		k += mat1->numCols;
 8003d0a:	4416      	add	r6, r2
	for (int i2 = 0; i2 < mat2->numRows; i2++){
 8003d0c:	dced      	bgt.n	8003cea <matslice+0x12>
	}

}
 8003d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003d10 <hat>:
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003d10:	880a      	ldrh	r2, [r1, #0]

void hat(arm_matrix_instance_f32* v_, arm_matrix_instance_f32* v_hat_){
 8003d12:	b510      	push	{r4, lr}
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003d14:	884c      	ldrh	r4, [r1, #2]

	float32_t* v = v_->pData;
	float32_t* v_hat = v_hat_->pData;
 8003d16:	684b      	ldr	r3, [r1, #4]
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003d18:	fb02 f204 	mul.w	r2, r2, r4
 8003d1c:	2100      	movs	r1, #0
	float32_t* v = v_->pData;
 8003d1e:	6844      	ldr	r4, [r0, #4]
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003d20:	0092      	lsls	r2, r2, #2
 8003d22:	4618      	mov	r0, r3
 8003d24:	f006 fad0 	bl	800a2c8 <memset>

	zeros(v_hat_);

	v_hat[1] = -v[2];
 8003d28:	68a2      	ldr	r2, [r4, #8]
 8003d2a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8003d2e:	6042      	str	r2, [r0, #4]
	v_hat[2] = v[1];
 8003d30:	6862      	ldr	r2, [r4, #4]
 8003d32:	6082      	str	r2, [r0, #8]
	v_hat[3] = v[2];
 8003d34:	68a2      	ldr	r2, [r4, #8]
 8003d36:	60c2      	str	r2, [r0, #12]
	v_hat[5] = -v[0];
 8003d38:	6822      	ldr	r2, [r4, #0]
 8003d3a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8003d3e:	6142      	str	r2, [r0, #20]
	v_hat[6] = -v[1];
 8003d40:	6862      	ldr	r2, [r4, #4]
 8003d42:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8003d46:	6182      	str	r2, [r0, #24]
	v_hat[7] = v[0];
 8003d48:	6822      	ldr	r2, [r4, #0]
 8003d4a:	61c2      	str	r2, [r0, #28]
}
 8003d4c:	bd10      	pop	{r4, pc}
 8003d4e:	bf00      	nop

08003d50 <matexp2>:
	v[2] = v_hat[3] - v_hat[1];

	arm_mat_scale_f32(v_,0.5,v_);
}

void matexp2(arm_matrix_instance_f32* phi_, arm_matrix_instance_f32* R_){
 8003d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	float32_t* phi = phi_->pData;
 8003d54:	6843      	ldr	r3, [r0, #4]
void matexp2(arm_matrix_instance_f32* phi_, arm_matrix_instance_f32* R_){
 8003d56:	460d      	mov	r5, r1
	float32_t phi_norm = sqrt(phi[0]*phi[0] + phi[1]*phi[1] + phi[2]*phi[2]);
 8003d58:	6819      	ldr	r1, [r3, #0]
void matexp2(arm_matrix_instance_f32* phi_, arm_matrix_instance_f32* R_){
 8003d5a:	b097      	sub	sp, #92	; 0x5c
 8003d5c:	4604      	mov	r4, r0
	float32_t phi_norm = sqrt(phi[0]*phi[0] + phi[1]*phi[1] + phi[2]*phi[2]);
 8003d5e:	4608      	mov	r0, r1
 8003d60:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8003d64:	689f      	ldr	r7, [r3, #8]
 8003d66:	f7fd f80d 	bl	8000d84 <__aeabi_fmul>
 8003d6a:	4641      	mov	r1, r8
 8003d6c:	4606      	mov	r6, r0
 8003d6e:	4640      	mov	r0, r8
 8003d70:	f7fd f808 	bl	8000d84 <__aeabi_fmul>
 8003d74:	4601      	mov	r1, r0
 8003d76:	4630      	mov	r0, r6
 8003d78:	f7fc fefc 	bl	8000b74 <__addsf3>
 8003d7c:	4639      	mov	r1, r7
 8003d7e:	4606      	mov	r6, r0
 8003d80:	4638      	mov	r0, r7
 8003d82:	f7fc ffff 	bl	8000d84 <__aeabi_fmul>
 8003d86:	4601      	mov	r1, r0
 8003d88:	4630      	mov	r0, r6
 8003d8a:	f7fc fef3 	bl	8000b74 <__addsf3>
 8003d8e:	f7fc fb4b 	bl	8000428 <__aeabi_f2d>
 8003d92:	f008 ff41 	bl	800cc18 <sqrt>
 8003d96:	f7fc fe97 	bl	8000ac8 <__aeabi_d2f>
	float32_t tempmat_data[3*3];
	arm_matrix_instance_f32 u_hat;
	float32_t u_hat_data[3*3];


	arm_mat_init_f32(&tempmat,3,3,tempmat_data);
 8003d9a:	2203      	movs	r2, #3
 8003d9c:	ab04      	add	r3, sp, #16
 8003d9e:	4611      	mov	r1, r2
	float32_t phi_norm = sqrt(phi[0]*phi[0] + phi[1]*phi[1] + phi[2]*phi[2]);
 8003da0:	4606      	mov	r6, r0
	arm_mat_init_f32(&tempmat,3,3,tempmat_data);
 8003da2:	4668      	mov	r0, sp
 8003da4:	f006 f9b4 	bl	800a110 <arm_mat_init_f32>
	arm_mat_init_f32(&u_hat,3,3,u_hat_data);
 8003da8:	2203      	movs	r2, #3
 8003daa:	ab0d      	add	r3, sp, #52	; 0x34
 8003dac:	4611      	mov	r1, r2
 8003dae:	a802      	add	r0, sp, #8
 8003db0:	f006 f9ae 	bl	800a110 <arm_mat_init_f32>
	if (mat->numCols != mat->numRows){
 8003db4:	886a      	ldrh	r2, [r5, #2]
 8003db6:	882b      	ldrh	r3, [r5, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d06a      	beq.n	8003e92 <matexp2+0x142>
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003dbc:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8003dc0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
	float32_t* v_hat = v_hat_->pData;
 8003dc4:	9b03      	ldr	r3, [sp, #12]
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003dc6:	fb02 f201 	mul.w	r2, r2, r1
 8003dca:	4618      	mov	r0, r3
 8003dcc:	0092      	lsls	r2, r2, #2
 8003dce:	2100      	movs	r1, #0
	float32_t* v = v_->pData;
 8003dd0:	6864      	ldr	r4, [r4, #4]
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003dd2:	f006 fa79 	bl	800a2c8 <memset>
 8003dd6:	4603      	mov	r3, r0
	v_hat[1] = -v[2];
 8003dd8:	68a2      	ldr	r2, [r4, #8]

	eye(R_);

	hat(phi_,&u_hat);

	if (fabs(phi_norm >= 1e-6)){
 8003dda:	4630      	mov	r0, r6
	v_hat[1] = -v[2];
 8003ddc:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8003de0:	605a      	str	r2, [r3, #4]
	v_hat[2] = v[1];
 8003de2:	6862      	ldr	r2, [r4, #4]
 8003de4:	609a      	str	r2, [r3, #8]
	v_hat[3] = v[2];
 8003de6:	68a2      	ldr	r2, [r4, #8]
 8003de8:	60da      	str	r2, [r3, #12]
	v_hat[5] = -v[0];
 8003dea:	6822      	ldr	r2, [r4, #0]
 8003dec:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8003df0:	615a      	str	r2, [r3, #20]
	v_hat[6] = -v[1];
 8003df2:	6862      	ldr	r2, [r4, #4]
 8003df4:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8003df8:	619a      	str	r2, [r3, #24]
	v_hat[7] = v[0];
 8003dfa:	6822      	ldr	r2, [r4, #0]
 8003dfc:	61da      	str	r2, [r3, #28]
	if (fabs(phi_norm >= 1e-6)){
 8003dfe:	f7fc fb13 	bl	8000428 <__aeabi_f2d>
 8003e02:	a331      	add	r3, pc, #196	; (adr r3, 8003ec8 <matexp2+0x178>)
 8003e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e08:	4680      	mov	r8, r0
 8003e0a:	4689      	mov	r9, r1
 8003e0c:	f7fc fdea 	bl	80009e4 <__aeabi_dcmpge>
 8003e10:	b938      	cbnz	r0, 8003e22 <matexp2+0xd2>
		arm_mat_mult_f32(&u_hat,&u_hat,&tempmat);
		arm_mat_scale_f32(&tempmat,1-cos(phi_norm),&tempmat);
		arm_mat_add_f32(R_,&tempmat,R_);
	}else{
		//approximation: mat = eye(3) + phi^
		arm_mat_add_f32(R_,&u_hat,R_);
 8003e12:	a902      	add	r1, sp, #8
 8003e14:	462a      	mov	r2, r5
 8003e16:	4628      	mov	r0, r5
 8003e18:	f006 f97e 	bl	800a118 <arm_mat_add_f32>
	}
}
 8003e1c:	b017      	add	sp, #92	; 0x5c
 8003e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		arm_mat_scale_f32(&u_hat, 1/phi_norm, &u_hat);
 8003e22:	4631      	mov	r1, r6
 8003e24:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003e28:	f7fd f860 	bl	8000eec <__aeabi_fdiv>
 8003e2c:	aa02      	add	r2, sp, #8
 8003e2e:	4601      	mov	r1, r0
 8003e30:	4610      	mov	r0, r2
 8003e32:	f005 ff05 	bl	8009c40 <arm_mat_scale_f32>
		arm_mat_scale_f32(&u_hat,sin(phi_norm),&tempmat);
 8003e36:	4640      	mov	r0, r8
 8003e38:	4649      	mov	r1, r9
 8003e3a:	f008 fe57 	bl	800caec <sin>
 8003e3e:	f7fc fe43 	bl	8000ac8 <__aeabi_d2f>
 8003e42:	466a      	mov	r2, sp
 8003e44:	4601      	mov	r1, r0
 8003e46:	a802      	add	r0, sp, #8
 8003e48:	f005 fefa 	bl	8009c40 <arm_mat_scale_f32>
		arm_mat_add_f32(R_,&tempmat,R_);
 8003e4c:	462a      	mov	r2, r5
 8003e4e:	4669      	mov	r1, sp
 8003e50:	4628      	mov	r0, r5
 8003e52:	f006 f961 	bl	800a118 <arm_mat_add_f32>
		arm_mat_mult_f32(&u_hat,&u_hat,&tempmat);
 8003e56:	a902      	add	r1, sp, #8
 8003e58:	466a      	mov	r2, sp
 8003e5a:	4608      	mov	r0, r1
 8003e5c:	f005 ff52 	bl	8009d04 <arm_mat_mult_f32>
		arm_mat_scale_f32(&tempmat,1-cos(phi_norm),&tempmat);
 8003e60:	4640      	mov	r0, r8
 8003e62:	4649      	mov	r1, r9
 8003e64:	f008 fe0c 	bl	800ca80 <cos>
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	4918      	ldr	r1, [pc, #96]	; (8003ed0 <matexp2+0x180>)
 8003e6e:	2000      	movs	r0, #0
 8003e70:	f7fc f97a 	bl	8000168 <__aeabi_dsub>
 8003e74:	f7fc fe28 	bl	8000ac8 <__aeabi_d2f>
 8003e78:	466a      	mov	r2, sp
 8003e7a:	4601      	mov	r1, r0
 8003e7c:	4668      	mov	r0, sp
 8003e7e:	f005 fedf 	bl	8009c40 <arm_mat_scale_f32>
		arm_mat_add_f32(R_,&tempmat,R_);
 8003e82:	462a      	mov	r2, r5
 8003e84:	4669      	mov	r1, sp
 8003e86:	4628      	mov	r0, r5
 8003e88:	f006 f946 	bl	800a118 <arm_mat_add_f32>
}
 8003e8c:	b017      	add	sp, #92	; 0x5c
 8003e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003e92:	fb02 f202 	mul.w	r2, r2, r2
 8003e96:	2100      	movs	r1, #0
 8003e98:	0092      	lsls	r2, r2, #2
 8003e9a:	6868      	ldr	r0, [r5, #4]
 8003e9c:	f006 fa14 	bl	800a2c8 <memset>
	for(int i = 0; i < (mat->numCols * mat->numRows); i += (mat->numCols+1)){
 8003ea0:	8869      	ldrh	r1, [r5, #2]
 8003ea2:	882a      	ldrh	r2, [r5, #0]
 8003ea4:	fb01 f202 	mul.w	r2, r1, r2
 8003ea8:	2a00      	cmp	r2, #0
 8003eaa:	d087      	beq.n	8003dbc <matexp2+0x6c>
 8003eac:	2300      	movs	r3, #0
		mat->pData[i] = 1;
 8003eae:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003eb2:	686f      	ldr	r7, [r5, #4]
 8003eb4:	3101      	adds	r1, #1
 8003eb6:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
	for(int i = 0; i < (mat->numCols * mat->numRows); i += (mat->numCols+1)){
 8003eba:	440b      	add	r3, r1
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	dcfa      	bgt.n	8003eb6 <matexp2+0x166>
 8003ec0:	e77c      	b.n	8003dbc <matexp2+0x6c>
 8003ec2:	bf00      	nop
 8003ec4:	f3af 8000 	nop.w
 8003ec8:	a0b5ed8d 	.word	0xa0b5ed8d
 8003ecc:	3eb0c6f7 	.word	0x3eb0c6f7
 8003ed0:	3ff00000 	.word	0x3ff00000
 8003ed4:	00000000 	.word	0x00000000

08003ed8 <calibrate_mag_reading>:
#include "dataProcessing.h"
#include "string.h"
#include "stdlib.h"
#include "math.h"

void calibrate_mag_reading(){
 8003ed8:	e92d 4fd0 	stmdb	sp!, {r4, r6, r7, r8, r9, sl, fp, lr}

	double m[3]; //magnatic readings minus offset

	m[0] = XIMU_sens.mx - MAG_X_OFFSET;
 8003edc:	a34a      	add	r3, pc, #296	; (adr r3, 8004008 <calibrate_mag_reading+0x130>)
 8003ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee2:	4c61      	ldr	r4, [pc, #388]	; (8004068 <calibrate_mag_reading+0x190>)
void calibrate_mag_reading(){
 8003ee4:	b082      	sub	sp, #8
	m[0] = XIMU_sens.mx - MAG_X_OFFSET;
 8003ee6:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
 8003eea:	f7fc f93d 	bl	8000168 <__aeabi_dsub>
	m[1] = XIMU_sens.my - MAG_Y_OFFSET;
 8003eee:	a348      	add	r3, pc, #288	; (adr r3, 8004010 <calibrate_mag_reading+0x138>)
 8003ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
	m[0] = XIMU_sens.mx - MAG_X_OFFSET;
 8003ef4:	4606      	mov	r6, r0
 8003ef6:	460f      	mov	r7, r1
	m[1] = XIMU_sens.my - MAG_Y_OFFSET;
 8003ef8:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
 8003efc:	f7fc f934 	bl	8000168 <__aeabi_dsub>
	m[2] = XIMU_sens.mz - MAG_Z_OFFSET;
 8003f00:	a345      	add	r3, pc, #276	; (adr r3, 8004018 <calibrate_mag_reading+0x140>)
 8003f02:	e9d3 2300 	ldrd	r2, r3, [r3]
	m[1] = XIMU_sens.my - MAG_Y_OFFSET;
 8003f06:	4682      	mov	sl, r0
 8003f08:	468b      	mov	fp, r1
	m[2] = XIMU_sens.mz - MAG_Z_OFFSET;
 8003f0a:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
 8003f0e:	f7fc f92d 	bl	800016c <__adddf3>

	XIMU_sens.mx = MAG_TRANSF_11*m[0] + MAG_TRANSF_12*m[1] + MAG_TRANSF_13*m[2];
 8003f12:	a343      	add	r3, pc, #268	; (adr r3, 8004020 <calibrate_mag_reading+0x148>)
 8003f14:	e9d3 2300 	ldrd	r2, r3, [r3]
	m[2] = XIMU_sens.mz - MAG_Z_OFFSET;
 8003f18:	e9cd 0100 	strd	r0, r1, [sp]
	XIMU_sens.mx = MAG_TRANSF_11*m[0] + MAG_TRANSF_12*m[1] + MAG_TRANSF_13*m[2];
 8003f1c:	4630      	mov	r0, r6
 8003f1e:	4639      	mov	r1, r7
 8003f20:	f7fc fada 	bl	80004d8 <__aeabi_dmul>
 8003f24:	a340      	add	r3, pc, #256	; (adr r3, 8004028 <calibrate_mag_reading+0x150>)
 8003f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2a:	4680      	mov	r8, r0
 8003f2c:	4689      	mov	r9, r1
 8003f2e:	4650      	mov	r0, sl
 8003f30:	4659      	mov	r1, fp
 8003f32:	f7fc fad1 	bl	80004d8 <__aeabi_dmul>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4640      	mov	r0, r8
 8003f3c:	4649      	mov	r1, r9
 8003f3e:	f7fc f915 	bl	800016c <__adddf3>
 8003f42:	a33b      	add	r3, pc, #236	; (adr r3, 8004030 <calibrate_mag_reading+0x158>)
 8003f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f48:	4680      	mov	r8, r0
 8003f4a:	4689      	mov	r9, r1
 8003f4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f50:	f7fc fac2 	bl	80004d8 <__aeabi_dmul>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4640      	mov	r0, r8
 8003f5a:	4649      	mov	r1, r9
 8003f5c:	f7fc f906 	bl	800016c <__adddf3>
	XIMU_sens.my = MAG_TRANSF_21*m[0] + MAG_TRANSF_22*m[1] + MAG_TRANSF_23*m[2];
 8003f60:	a335      	add	r3, pc, #212	; (adr r3, 8004038 <calibrate_mag_reading+0x160>)
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
	XIMU_sens.mx = MAG_TRANSF_11*m[0] + MAG_TRANSF_12*m[1] + MAG_TRANSF_13*m[2];
 8003f66:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
	XIMU_sens.my = MAG_TRANSF_21*m[0] + MAG_TRANSF_22*m[1] + MAG_TRANSF_23*m[2];
 8003f6a:	4630      	mov	r0, r6
 8003f6c:	4639      	mov	r1, r7
 8003f6e:	f7fc fab3 	bl	80004d8 <__aeabi_dmul>
 8003f72:	a333      	add	r3, pc, #204	; (adr r3, 8004040 <calibrate_mag_reading+0x168>)
 8003f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f78:	4680      	mov	r8, r0
 8003f7a:	4689      	mov	r9, r1
 8003f7c:	4650      	mov	r0, sl
 8003f7e:	4659      	mov	r1, fp
 8003f80:	f7fc faaa 	bl	80004d8 <__aeabi_dmul>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	4640      	mov	r0, r8
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	f7fc f8ee 	bl	800016c <__adddf3>
 8003f90:	a32d      	add	r3, pc, #180	; (adr r3, 8004048 <calibrate_mag_reading+0x170>)
 8003f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f96:	4680      	mov	r8, r0
 8003f98:	4689      	mov	r9, r1
 8003f9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f9e:	f7fc fa9b 	bl	80004d8 <__aeabi_dmul>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4640      	mov	r0, r8
 8003fa8:	4649      	mov	r1, r9
 8003faa:	f7fc f8df 	bl	800016c <__adddf3>
	XIMU_sens.mz = MAG_TRANSF_31*m[0] + MAG_TRANSF_32*m[1] + MAG_TRANSF_33*m[2];
 8003fae:	a328      	add	r3, pc, #160	; (adr r3, 8004050 <calibrate_mag_reading+0x178>)
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
	XIMU_sens.my = MAG_TRANSF_21*m[0] + MAG_TRANSF_22*m[1] + MAG_TRANSF_23*m[2];
 8003fb4:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
	XIMU_sens.mz = MAG_TRANSF_31*m[0] + MAG_TRANSF_32*m[1] + MAG_TRANSF_33*m[2];
 8003fb8:	4630      	mov	r0, r6
 8003fba:	4639      	mov	r1, r7
 8003fbc:	f7fc fa8c 	bl	80004d8 <__aeabi_dmul>
 8003fc0:	a325      	add	r3, pc, #148	; (adr r3, 8004058 <calibrate_mag_reading+0x180>)
 8003fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc6:	4606      	mov	r6, r0
 8003fc8:	460f      	mov	r7, r1
 8003fca:	4650      	mov	r0, sl
 8003fcc:	4659      	mov	r1, fp
 8003fce:	f7fc fa83 	bl	80004d8 <__aeabi_dmul>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4630      	mov	r0, r6
 8003fd8:	4639      	mov	r1, r7
 8003fda:	f7fc f8c7 	bl	800016c <__adddf3>
 8003fde:	a320      	add	r3, pc, #128	; (adr r3, 8004060 <calibrate_mag_reading+0x188>)
 8003fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe4:	4606      	mov	r6, r0
 8003fe6:	460f      	mov	r7, r1
 8003fe8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003fec:	f7fc fa74 	bl	80004d8 <__aeabi_dmul>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	4639      	mov	r1, r7
 8003ff8:	f7fc f8b8 	bl	800016c <__adddf3>
 8003ffc:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
}
 8004000:	b002      	add	sp, #8
 8004002:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 8004006:	bf00      	nop
 8004008:	810624dd 	.word	0x810624dd
 800400c:	40615795 	.word	0x40615795
 8004010:	189374bc 	.word	0x189374bc
 8004014:	40706804 	.word	0x40706804
 8004018:	fdf3b646 	.word	0xfdf3b646
 800401c:	405268d4 	.word	0x405268d4
 8004020:	51eb851f 	.word	0x51eb851f
 8004024:	3ff31eb8 	.word	0x3ff31eb8
 8004028:	e5604189 	.word	0xe5604189
 800402c:	bfab22d0 	.word	0xbfab22d0
 8004030:	53f7ced9 	.word	0x53f7ced9
 8004034:	3faba5e3 	.word	0x3faba5e3
 8004038:	020c49ba 	.word	0x020c49ba
 800403c:	bfa6872b 	.word	0xbfa6872b
 8004040:	78d4fdf4 	.word	0x78d4fdf4
 8004044:	3ff326e9 	.word	0x3ff326e9
 8004048:	47ae147b 	.word	0x47ae147b
 800404c:	3f847ae1 	.word	0x3f847ae1
 8004050:	76c8b439 	.word	0x76c8b439
 8004054:	bf9a9fbe 	.word	0xbf9a9fbe
 8004058:	76c8b439 	.word	0x76c8b439
 800405c:	bf8a9fbe 	.word	0xbf8a9fbe
 8004060:	a5e353f8 	.word	0xa5e353f8
 8004064:	3ff2c49b 	.word	0x3ff2c49b
 8004068:	200005f8 	.word	0x200005f8

0800406c <calc_absolute_acceleration>:

void calc_absolute_acceleration() {
 800406c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	double ax = XIMU_sens.ax,	ay = XIMU_sens.ay,	az = XIMU_sens.az;
 8004070:	49c9      	ldr	r1, [pc, #804]	; (8004398 <calc_absolute_acceleration+0x32c>)
void calc_absolute_acceleration() {
 8004072:	b099      	sub	sp, #100	; 0x64
	double q0 = XIMU_sens.q0,	q1 = XIMU_sens.q1,	q2 = XIMU_sens.q2,	q3 = XIMU_sens.q3;
 8004074:	e9d1 8900 	ldrd	r8, r9, [r1]
 8004078:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
	double ax = XIMU_sens.ax,	ay = XIMU_sens.ay,	az = XIMU_sens.az;
 800407c:	e9d1 4508 	ldrd	r4, r5, [r1, #32]
 8004080:	e9d1 ab0c 	ldrd	sl, fp, [r1, #48]	; 0x30
	double q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3, norm_2;
	q0q0 = q0 * q0;
 8004084:	4642      	mov	r2, r8
 8004086:	464b      	mov	r3, r9
	double ax = XIMU_sens.ax,	ay = XIMU_sens.ay,	az = XIMU_sens.az;
 8004088:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800408c:	e9d1 450a 	ldrd	r4, r5, [r1, #40]	; 0x28
 8004090:	e9cd ab04 	strd	sl, fp, [sp, #16]
	double q0 = XIMU_sens.q0,	q1 = XIMU_sens.q1,	q2 = XIMU_sens.q2,	q3 = XIMU_sens.q3;
 8004094:	e9d1 ab06 	ldrd	sl, fp, [r1, #24]
	double ax = XIMU_sens.ax,	ay = XIMU_sens.ay,	az = XIMU_sens.az;
 8004098:	e9cd 4500 	strd	r4, r5, [sp]
	double q0 = XIMU_sens.q0,	q1 = XIMU_sens.q1,	q2 = XIMU_sens.q2,	q3 = XIMU_sens.q3;
 800409c:	e9d1 4504 	ldrd	r4, r5, [r1, #16]
	q0q0 = q0 * q0;
 80040a0:	4640      	mov	r0, r8
 80040a2:	4649      	mov	r1, r9
 80040a4:	f7fc fa18 	bl	80004d8 <__aeabi_dmul>
	q0q1 = q0 * q1;
 80040a8:	4632      	mov	r2, r6
	q0q0 = q0 * q0;
 80040aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
	q0q1 = q0 * q1;
 80040ae:	463b      	mov	r3, r7
 80040b0:	4640      	mov	r0, r8
 80040b2:	4649      	mov	r1, r9
 80040b4:	f7fc fa10 	bl	80004d8 <__aeabi_dmul>
	q0q2 = q0 * q2;
 80040b8:	4622      	mov	r2, r4
	q0q1 = q0 * q1;
 80040ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	q0q2 = q0 * q2;
 80040be:	462b      	mov	r3, r5
 80040c0:	4640      	mov	r0, r8
 80040c2:	4649      	mov	r1, r9
 80040c4:	f7fc fa08 	bl	80004d8 <__aeabi_dmul>
	q0q3 = q0 * q3;
 80040c8:	4652      	mov	r2, sl
	q0q2 = q0 * q2;
 80040ca:	e9cd 0108 	strd	r0, r1, [sp, #32]
	q0q3 = q0 * q3;
 80040ce:	465b      	mov	r3, fp
 80040d0:	4640      	mov	r0, r8
 80040d2:	4649      	mov	r1, r9
 80040d4:	f7fc fa00 	bl	80004d8 <__aeabi_dmul>
	q1q1 = q1 * q1;
 80040d8:	4632      	mov	r2, r6
	q0q3 = q0 * q3;
 80040da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	q1q1 = q1 * q1;
 80040de:	463b      	mov	r3, r7
 80040e0:	4630      	mov	r0, r6
 80040e2:	4639      	mov	r1, r7
 80040e4:	f7fc f9f8 	bl	80004d8 <__aeabi_dmul>
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040f0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80040f4:	f7fc f83a 	bl	800016c <__adddf3>
	q1q2 = q1 * q2;
 80040f8:	4622      	mov	r2, r4
 80040fa:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80040fe:	462b      	mov	r3, r5
 8004100:	4630      	mov	r0, r6
 8004102:	4639      	mov	r1, r7
 8004104:	f7fc f9e8 	bl	80004d8 <__aeabi_dmul>
	q1q3 = q1 * q3;
 8004108:	4652      	mov	r2, sl
	q1q2 = q1 * q2;
 800410a:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	q1q3 = q1 * q3;
 800410e:	465b      	mov	r3, fp
 8004110:	4630      	mov	r0, r6
 8004112:	4639      	mov	r1, r7
 8004114:	f7fc f9e0 	bl	80004d8 <__aeabi_dmul>
	q2q2 = q2 * q2;
 8004118:	4622      	mov	r2, r4
	q1q3 = q1 * q3;
 800411a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	q2q2 = q2 * q2;
 800411e:	462b      	mov	r3, r5
 8004120:	4620      	mov	r0, r4
 8004122:	4629      	mov	r1, r5
 8004124:	f7fc f9d8 	bl	80004d8 <__aeabi_dmul>
	q2q3 = q2 * q3;
 8004128:	4652      	mov	r2, sl
	q2q2 = q2 * q2;
 800412a:	4680      	mov	r8, r0
 800412c:	4689      	mov	r9, r1
	q2q3 = q2 * q3;
 800412e:	465b      	mov	r3, fp
 8004130:	4620      	mov	r0, r4
 8004132:	4629      	mov	r1, r5
 8004134:	f7fc f9d0 	bl	80004d8 <__aeabi_dmul>
	q3q3 = q3 * q3;
 8004138:	4652      	mov	r2, sl
	q2q3 = q2 * q3;
 800413a:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
	q3q3 = q3 * q3;
 800413e:	465b      	mov	r3, fp
 8004140:	4650      	mov	r0, sl
 8004142:	4659      	mov	r1, fp
 8004144:	f7fc f9c8 	bl	80004d8 <__aeabi_dmul>
 8004148:	e9dd 4500 	ldrd	r4, r5, [sp]
 800414c:	4682      	mov	sl, r0
 800414e:	468b      	mov	fp, r1
 8004150:	4622      	mov	r2, r4
 8004152:	462b      	mov	r3, r5
 8004154:	4620      	mov	r0, r4
 8004156:	4629      	mov	r1, r5
 8004158:	f7fc f808 	bl	800016c <__adddf3>
	norm_2 = q0q0 + q1q1 + q2q2 + q3q3;
 800415c:	4652      	mov	r2, sl
 800415e:	4604      	mov	r4, r0
 8004160:	460d      	mov	r5, r1
 8004162:	465b      	mov	r3, fp
 8004164:	4640      	mov	r0, r8
 8004166:	4649      	mov	r1, r9
 8004168:	f7fc f800 	bl	800016c <__adddf3>
 800416c:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 8004170:	4632      	mov	r2, r6
 8004172:	463b      	mov	r3, r7
 8004174:	f7fb fffa 	bl	800016c <__adddf3>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	2000      	movs	r0, #0
 800417e:	4987      	ldr	r1, [pc, #540]	; (800439c <calc_absolute_acceleration+0x330>)
 8004180:	f7fc fad4 	bl	800072c <__aeabi_ddiv>

	XIMU_u.ax_abs = (ax*q0q0 + 2*az*q0q2 - 2*ay*q0q3 + ax*q1q1 + 2*ay*q1q2 + 2*az*q1q3 - ax*q2q2 - ax*q3q3)/norm_2;
 8004184:	4632      	mov	r2, r6
 8004186:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800418a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800418e:	463b      	mov	r3, r7
 8004190:	f7fc f9a2 	bl	80004d8 <__aeabi_dmul>
 8004194:	4642      	mov	r2, r8
 8004196:	4606      	mov	r6, r0
 8004198:	460f      	mov	r7, r1
 800419a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800419e:	464b      	mov	r3, r9
 80041a0:	f7fc f99a 	bl	80004d8 <__aeabi_dmul>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4630      	mov	r0, r6
 80041aa:	4639      	mov	r1, r7
 80041ac:	f7fb ffdc 	bl	8000168 <__aeabi_dsub>
 80041b0:	4622      	mov	r2, r4
 80041b2:	4606      	mov	r6, r0
 80041b4:	460f      	mov	r7, r1
 80041b6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80041ba:	462b      	mov	r3, r5
 80041bc:	f7fc f98c 	bl	80004d8 <__aeabi_dmul>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4630      	mov	r0, r6
 80041c6:	4639      	mov	r1, r7
 80041c8:	f7fb ffd0 	bl	800016c <__adddf3>
 80041cc:	4652      	mov	r2, sl
 80041ce:	4606      	mov	r6, r0
 80041d0:	460f      	mov	r7, r1
 80041d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041d6:	465b      	mov	r3, fp
 80041d8:	f7fc f97e 	bl	80004d8 <__aeabi_dmul>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	4630      	mov	r0, r6
 80041e2:	4639      	mov	r1, r7
 80041e4:	f7fb ffc0 	bl	8000168 <__aeabi_dsub>
 80041e8:	4622      	mov	r2, r4
 80041ea:	4606      	mov	r6, r0
 80041ec:	460f      	mov	r7, r1
 80041ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80041f2:	462b      	mov	r3, r5
 80041f4:	f7fc f970 	bl	80004d8 <__aeabi_dmul>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4630      	mov	r0, r6
 80041fe:	4639      	mov	r1, r7
 8004200:	f7fb ffb2 	bl	8000168 <__aeabi_dsub>
 8004204:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004208:	4604      	mov	r4, r0
 800420a:	460d      	mov	r5, r1
 800420c:	4632      	mov	r2, r6
 800420e:	463b      	mov	r3, r7
 8004210:	4630      	mov	r0, r6
 8004212:	4639      	mov	r1, r7
 8004214:	f7fb ffaa 	bl	800016c <__adddf3>
 8004218:	4606      	mov	r6, r0
 800421a:	460f      	mov	r7, r1
 800421c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	f7fb ffa2 	bl	800016c <__adddf3>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4630      	mov	r0, r6
 800422e:	4639      	mov	r1, r7
 8004230:	f7fb ff9c 	bl	800016c <__adddf3>
 8004234:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8004238:	4632      	mov	r2, r6
 800423a:	463b      	mov	r3, r7
 800423c:	f7fc f94c 	bl	80004d8 <__aeabi_dmul>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4620      	mov	r0, r4
 8004246:	4629      	mov	r1, r5
 8004248:	f7fb ff90 	bl	800016c <__adddf3>
 800424c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004250:	f7fc f942 	bl	80004d8 <__aeabi_dmul>
 8004254:	4c52      	ldr	r4, [pc, #328]	; (80043a0 <calc_absolute_acceleration+0x334>)
 8004256:	4632      	mov	r2, r6
 8004258:	e9c4 0100 	strd	r0, r1, [r4]
 800425c:	463b      	mov	r3, r7
 800425e:	4630      	mov	r0, r6
 8004260:	4639      	mov	r1, r7
 8004262:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004266:	f7fb ff81 	bl	800016c <__adddf3>
	XIMU_u.ay_abs = (ay*q0q0 - 2*az*q0q1 + 2*ax*q0q3 - ay*q1q1 + 2*ax*q1q2 + ay*q2q2 + 2*az*q2q3 - ay*q3q3)/norm_2;
 800426a:	4642      	mov	r2, r8
 800426c:	4604      	mov	r4, r0
 800426e:	460d      	mov	r5, r1
 8004270:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004274:	464b      	mov	r3, r9
 8004276:	f7fb ff79 	bl	800016c <__adddf3>
 800427a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800427e:	f7fc f92b 	bl	80004d8 <__aeabi_dmul>
 8004282:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8004286:	4606      	mov	r6, r0
 8004288:	460f      	mov	r7, r1
 800428a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800428e:	f7fc f923 	bl	80004d8 <__aeabi_dmul>
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	4630      	mov	r0, r6
 8004298:	4639      	mov	r1, r7
 800429a:	f7fb ff65 	bl	8000168 <__aeabi_dsub>
 800429e:	4622      	mov	r2, r4
 80042a0:	4606      	mov	r6, r0
 80042a2:	460f      	mov	r7, r1
 80042a4:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 80042a8:	462b      	mov	r3, r5
 80042aa:	f7fc f915 	bl	80004d8 <__aeabi_dmul>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	4630      	mov	r0, r6
 80042b4:	4639      	mov	r1, r7
 80042b6:	f7fb ff59 	bl	800016c <__adddf3>
 80042ba:	4652      	mov	r2, sl
 80042bc:	4606      	mov	r6, r0
 80042be:	460f      	mov	r7, r1
 80042c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80042c4:	465b      	mov	r3, fp
 80042c6:	f7fc f907 	bl	80004d8 <__aeabi_dmul>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	4630      	mov	r0, r6
 80042d0:	4639      	mov	r1, r7
 80042d2:	f7fb ff49 	bl	8000168 <__aeabi_dsub>
 80042d6:	4622      	mov	r2, r4
 80042d8:	4606      	mov	r6, r0
 80042da:	460f      	mov	r7, r1
 80042dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80042e0:	462b      	mov	r3, r5
 80042e2:	f7fc f8f9 	bl	80004d8 <__aeabi_dmul>
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	4630      	mov	r0, r6
 80042ec:	4639      	mov	r1, r7
 80042ee:	f7fb ff3b 	bl	8000168 <__aeabi_dsub>
 80042f2:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80042f6:	4604      	mov	r4, r0
 80042f8:	460d      	mov	r5, r1
 80042fa:	4610      	mov	r0, r2
 80042fc:	4619      	mov	r1, r3
 80042fe:	f7fb ff35 	bl	800016c <__adddf3>
 8004302:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004306:	4606      	mov	r6, r0
 8004308:	460f      	mov	r7, r1
 800430a:	4610      	mov	r0, r2
 800430c:	4619      	mov	r1, r3
 800430e:	f7fb ff2d 	bl	800016c <__adddf3>
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	4630      	mov	r0, r6
 8004318:	4639      	mov	r1, r7
 800431a:	f7fb ff27 	bl	800016c <__adddf3>
 800431e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004322:	4632      	mov	r2, r6
 8004324:	463b      	mov	r3, r7
 8004326:	f7fc f8d7 	bl	80004d8 <__aeabi_dmul>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4620      	mov	r0, r4
 8004330:	4629      	mov	r1, r5
 8004332:	f7fb ff1b 	bl	800016c <__adddf3>
 8004336:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800433a:	f7fc f8cd 	bl	80004d8 <__aeabi_dmul>
 800433e:	4c18      	ldr	r4, [pc, #96]	; (80043a0 <calc_absolute_acceleration+0x334>)
 8004340:	4632      	mov	r2, r6
 8004342:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004346:	463b      	mov	r3, r7
 8004348:	4630      	mov	r0, r6
 800434a:	4639      	mov	r1, r7
 800434c:	f7fb ff0e 	bl	800016c <__adddf3>
	XIMU_u.az_abs = (az*q0q0 + 2*ay*q0q1 - 2*ax*q0q2 - az*q1q1 + 2*ax*q1q3 - az*q2q2 + 2*ay*q2q3 + az*q3q3)/norm_2;
 8004350:	4652      	mov	r2, sl
 8004352:	4604      	mov	r4, r0
 8004354:	460d      	mov	r5, r1
 8004356:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800435a:	465b      	mov	r3, fp
 800435c:	f7fb ff06 	bl	800016c <__adddf3>
 8004360:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004364:	4652      	mov	r2, sl
 8004366:	465b      	mov	r3, fp
 8004368:	f7fc f8b6 	bl	80004d8 <__aeabi_dmul>
 800436c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8004370:	4606      	mov	r6, r0
 8004372:	460f      	mov	r7, r1
 8004374:	4650      	mov	r0, sl
 8004376:	4659      	mov	r1, fp
 8004378:	f7fc f8ae 	bl	80004d8 <__aeabi_dmul>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4630      	mov	r0, r6
 8004382:	4639      	mov	r1, r7
 8004384:	f7fb fef0 	bl	8000168 <__aeabi_dsub>
 8004388:	4622      	mov	r2, r4
 800438a:	4606      	mov	r6, r0
 800438c:	460f      	mov	r7, r1
 800438e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004392:	462b      	mov	r3, r5
 8004394:	e006      	b.n	80043a4 <calc_absolute_acceleration+0x338>
 8004396:	bf00      	nop
 8004398:	200005f8 	.word	0x200005f8
 800439c:	3ff00000 	.word	0x3ff00000
 80043a0:	20000778 	.word	0x20000778
 80043a4:	f7fc f898 	bl	80004d8 <__aeabi_dmul>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4630      	mov	r0, r6
 80043ae:	4639      	mov	r1, r7
 80043b0:	f7fb fedc 	bl	800016c <__adddf3>
 80043b4:	4642      	mov	r2, r8
 80043b6:	4606      	mov	r6, r0
 80043b8:	460f      	mov	r7, r1
 80043ba:	464b      	mov	r3, r9
 80043bc:	4650      	mov	r0, sl
 80043be:	4659      	mov	r1, fp
 80043c0:	f7fc f88a 	bl	80004d8 <__aeabi_dmul>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4630      	mov	r0, r6
 80043ca:	4639      	mov	r1, r7
 80043cc:	f7fb fecc 	bl	8000168 <__aeabi_dsub>
 80043d0:	4622      	mov	r2, r4
 80043d2:	4606      	mov	r6, r0
 80043d4:	460f      	mov	r7, r1
 80043d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80043da:	462b      	mov	r3, r5
 80043dc:	f7fc f87c 	bl	80004d8 <__aeabi_dmul>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4630      	mov	r0, r6
 80043e6:	4639      	mov	r1, r7
 80043e8:	f7fb febe 	bl	8000168 <__aeabi_dsub>
 80043ec:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80043f0:	4604      	mov	r4, r0
 80043f2:	460d      	mov	r5, r1
 80043f4:	4610      	mov	r0, r2
 80043f6:	4619      	mov	r1, r3
 80043f8:	f7fb feb8 	bl	800016c <__adddf3>
 80043fc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004400:	4606      	mov	r6, r0
 8004402:	460f      	mov	r7, r1
 8004404:	4610      	mov	r0, r2
 8004406:	4619      	mov	r1, r3
 8004408:	f7fb feb0 	bl	800016c <__adddf3>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	4630      	mov	r0, r6
 8004412:	4639      	mov	r1, r7
 8004414:	f7fb feaa 	bl	800016c <__adddf3>
 8004418:	e9dd 2300 	ldrd	r2, r3, [sp]
 800441c:	f7fc f85c 	bl	80004d8 <__aeabi_dmul>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	4620      	mov	r0, r4
 8004426:	4629      	mov	r1, r5
 8004428:	f7fb fea0 	bl	800016c <__adddf3>
 800442c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004430:	f7fc f852 	bl	80004d8 <__aeabi_dmul>
 8004434:	4c02      	ldr	r4, [pc, #8]	; (8004440 <calc_absolute_acceleration+0x3d4>)
 8004436:	e9c4 0104 	strd	r0, r1, [r4, #16]
}
 800443a:	b019      	add	sp, #100	; 0x64
 800443c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004440:	20000778 	.word	0x20000778

08004444 <calc_magnetic_orientation>:
	v[0] /= norm;
	v[1] /= norm;
	v[2] /= norm;
}

void calc_magnetic_orientation(){
 8004444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	double g[3];
	g[0] = -XIMU_sens.ax;
 8004448:	4cd8      	ldr	r4, [pc, #864]	; (80047ac <calc_magnetic_orientation+0x368>)
void calc_magnetic_orientation(){
 800444a:	b091      	sub	sp, #68	; 0x44
	g[0] = -XIMU_sens.ax;
 800444c:	e9d4 8908 	ldrd	r8, r9, [r4, #32]
	g[1] = -XIMU_sens.ay;
	g[2] = -XIMU_sens.az;
 8004450:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 8004454:	4642      	mov	r2, r8
	g[1] = -XIMU_sens.ay;
 8004456:	e9d4 ab0a 	ldrd	sl, fp, [r4, #40]	; 0x28
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 800445a:	464b      	mov	r3, r9
	g[2] = -XIMU_sens.az;
 800445c:	e9cd 0100 	strd	r0, r1, [sp]
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 8004460:	4640      	mov	r0, r8
 8004462:	4649      	mov	r1, r9
 8004464:	f7fc f838 	bl	80004d8 <__aeabi_dmul>
 8004468:	4652      	mov	r2, sl
 800446a:	4606      	mov	r6, r0
 800446c:	460f      	mov	r7, r1
 800446e:	465b      	mov	r3, fp
 8004470:	4650      	mov	r0, sl
 8004472:	4659      	mov	r1, fp
 8004474:	f7fc f830 	bl	80004d8 <__aeabi_dmul>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4630      	mov	r0, r6
 800447e:	4639      	mov	r1, r7
 8004480:	f7fb fe74 	bl	800016c <__adddf3>
 8004484:	4606      	mov	r6, r0
 8004486:	460f      	mov	r7, r1
 8004488:	e9dd 0100 	ldrd	r0, r1, [sp]
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	f7fc f822 	bl	80004d8 <__aeabi_dmul>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4630      	mov	r0, r6
 800449a:	4639      	mov	r1, r7
 800449c:	f7fb fe66 	bl	800016c <__adddf3>
 80044a0:	f008 fbba 	bl	800cc18 <sqrt>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	2000      	movs	r0, #0
 80044aa:	49c1      	ldr	r1, [pc, #772]	; (80047b0 <calc_magnetic_orientation+0x36c>)
 80044ac:	f7fc f93e 	bl	800072c <__aeabi_ddiv>
 80044b0:	4606      	mov	r6, r0
 80044b2:	460f      	mov	r7, r1
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4640      	mov	r0, r8
 80044ba:	4649      	mov	r1, r9
 80044bc:	f7fc f80c 	bl	80004d8 <__aeabi_dmul>
 80044c0:	4684      	mov	ip, r0
 80044c2:	460d      	mov	r5, r1
 80044c4:	4632      	mov	r2, r6
 80044c6:	463b      	mov	r3, r7
 80044c8:	4650      	mov	r0, sl
 80044ca:	4659      	mov	r1, fp
 80044cc:	f8cd c00c 	str.w	ip, [sp, #12]
 80044d0:	9509      	str	r5, [sp, #36]	; 0x24
 80044d2:	f7fc f801 	bl	80004d8 <__aeabi_dmul>
 80044d6:	4684      	mov	ip, r0
 80044d8:	460d      	mov	r5, r1
 80044da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80044de:	4632      	mov	r2, r6
 80044e0:	463b      	mov	r3, r7
 80044e2:	f8cd c020 	str.w	ip, [sp, #32]
 80044e6:	950a      	str	r5, [sp, #40]	; 0x28
 80044e8:	f7fb fff6 	bl	80004d8 <__aeabi_dmul>
	 * 		+Z	-------------------------	-Z
	 *
	 */

	double m[3];
	m[0] = XIMU_sens.my;
 80044ec:	e9d4 8918 	ldrd	r8, r9, [r4, #96]	; 0x60
	m[1] = XIMU_sens.mx;
 80044f0:	e9d4 6716 	ldrd	r6, r7, [r4, #88]	; 0x58
	m[2] = -XIMU_sens.mz;
 80044f4:	e9d4 ab1a 	ldrd	sl, fp, [r4, #104]	; 0x68
 80044f8:	4684      	mov	ip, r0
 80044fa:	460d      	mov	r5, r1
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 80044fc:	4642      	mov	r2, r8
 80044fe:	464b      	mov	r3, r9
 8004500:	4640      	mov	r0, r8
 8004502:	4649      	mov	r1, r9
 8004504:	f8cd c000 	str.w	ip, [sp]
 8004508:	950b      	str	r5, [sp, #44]	; 0x2c
 800450a:	f7fb ffe5 	bl	80004d8 <__aeabi_dmul>
 800450e:	4632      	mov	r2, r6
 8004510:	4604      	mov	r4, r0
 8004512:	460d      	mov	r5, r1
 8004514:	463b      	mov	r3, r7
 8004516:	4630      	mov	r0, r6
 8004518:	4639      	mov	r1, r7
 800451a:	f7fb ffdd 	bl	80004d8 <__aeabi_dmul>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4620      	mov	r0, r4
 8004524:	4629      	mov	r1, r5
 8004526:	f7fb fe21 	bl	800016c <__adddf3>
 800452a:	4652      	mov	r2, sl
 800452c:	4604      	mov	r4, r0
 800452e:	460d      	mov	r5, r1
 8004530:	465b      	mov	r3, fp
 8004532:	4650      	mov	r0, sl
 8004534:	4659      	mov	r1, fp
 8004536:	f7fb ffcf 	bl	80004d8 <__aeabi_dmul>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	4620      	mov	r0, r4
 8004540:	4629      	mov	r1, r5
 8004542:	f7fb fe13 	bl	800016c <__adddf3>
 8004546:	f008 fb67 	bl	800cc18 <sqrt>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	2000      	movs	r0, #0
 8004550:	4997      	ldr	r1, [pc, #604]	; (80047b0 <calc_magnetic_orientation+0x36c>)
 8004552:	f7fc f8eb 	bl	800072c <__aeabi_ddiv>
 8004556:	4604      	mov	r4, r0
 8004558:	460d      	mov	r5, r1
	v[0] /= norm;
 800455a:	4602      	mov	r2, r0
 800455c:	460b      	mov	r3, r1
 800455e:	4640      	mov	r0, r8
 8004560:	4649      	mov	r1, r9
 8004562:	f7fb ffb9 	bl	80004d8 <__aeabi_dmul>
	v[1] /= norm;
 8004566:	4622      	mov	r2, r4
	v[0] /= norm;
 8004568:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
	v[1] /= norm;
 800456c:	462b      	mov	r3, r5
 800456e:	4630      	mov	r0, r6
 8004570:	4639      	mov	r1, r7
 8004572:	f7fb ffb1 	bl	80004d8 <__aeabi_dmul>
 8004576:	4622      	mov	r2, r4
 8004578:	4680      	mov	r8, r0
 800457a:	4689      	mov	r9, r1
 800457c:	462b      	mov	r3, r5
 800457e:	4650      	mov	r0, sl
 8004580:	4659      	mov	r1, fp
 8004582:	f7fb ffa9 	bl	80004d8 <__aeabi_dmul>
	normalize(m);

	//step1: cross gravity(negative acceleration) and magnetic field to get reference direction of East
	double East_ref[3] = {0};

	East_ref[0] = g[1]*m[2] - g[2]*m[1];
 8004586:	9a08      	ldr	r2, [sp, #32]
 8004588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800458a:	4682      	mov	sl, r0
 800458c:	468b      	mov	fp, r1
 800458e:	f7fb ffa3 	bl	80004d8 <__aeabi_dmul>
 8004592:	9d00      	ldr	r5, [sp, #0]
 8004594:	460f      	mov	r7, r1
 8004596:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004598:	4606      	mov	r6, r0
 800459a:	f101 4400 	add.w	r4, r1, #2147483648	; 0x80000000
 800459e:	462a      	mov	r2, r5
 80045a0:	4623      	mov	r3, r4
 80045a2:	4640      	mov	r0, r8
 80045a4:	4649      	mov	r1, r9
 80045a6:	f7fb ff97 	bl	80004d8 <__aeabi_dmul>
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	4630      	mov	r0, r6
 80045b0:	4639      	mov	r1, r7
 80045b2:	f7fb fdd9 	bl	8000168 <__aeabi_dsub>
	East_ref[1] = g[2]*m[0] - g[0]*m[2];
 80045b6:	462a      	mov	r2, r5
 80045b8:	4623      	mov	r3, r4
	East_ref[0] = g[1]*m[2] - g[2]*m[1];
 80045ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
	East_ref[1] = g[2]*m[0] - g[0]*m[2];
 80045be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80045c2:	9500      	str	r5, [sp, #0]
 80045c4:	f7fb ff88 	bl	80004d8 <__aeabi_dmul>
 80045c8:	4652      	mov	r2, sl
 80045ca:	465b      	mov	r3, fp
 80045cc:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80045d0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80045d4:	4606      	mov	r6, r0
 80045d6:	460f      	mov	r7, r1
 80045d8:	4650      	mov	r0, sl
 80045da:	4659      	mov	r1, fp
 80045dc:	f7fb ff7c 	bl	80004d8 <__aeabi_dmul>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4630      	mov	r0, r6
 80045e6:	4639      	mov	r1, r7
 80045e8:	f7fb fdbe 	bl	8000168 <__aeabi_dsub>
 80045ec:	f10b 4500 	add.w	r5, fp, #2147483648	; 0x80000000
 80045f0:	e9cd 0106 	strd	r0, r1, [sp, #24]
	East_ref[2] = g[0]*m[1] - g[1]*m[0];
 80045f4:	4652      	mov	r2, sl
 80045f6:	462b      	mov	r3, r5
 80045f8:	4640      	mov	r0, r8
 80045fa:	4649      	mov	r1, r9
 80045fc:	f8cd a00c 	str.w	sl, [sp, #12]
 8004600:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8004604:	f7fb ff68 	bl	80004d8 <__aeabi_dmul>
 8004608:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800460a:	4680      	mov	r8, r0
 800460c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8004610:	4689      	mov	r9, r1
 8004612:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004616:	9a08      	ldr	r2, [sp, #32]
 8004618:	4633      	mov	r3, r6
 800461a:	f7fb ff5d 	bl	80004d8 <__aeabi_dmul>
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	4640      	mov	r0, r8
 8004624:	4649      	mov	r1, r9
 8004626:	f7fb fd9f 	bl	8000168 <__aeabi_dsub>
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 800462a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
	East_ref[2] = g[0]*m[1] - g[1]*m[0];
 800462e:	4682      	mov	sl, r0
 8004630:	468b      	mov	fp, r1
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 8004632:	4642      	mov	r2, r8
 8004634:	464b      	mov	r3, r9
 8004636:	4640      	mov	r0, r8
 8004638:	4649      	mov	r1, r9
 800463a:	f7fb ff4d 	bl	80004d8 <__aeabi_dmul>
 800463e:	4680      	mov	r8, r0
 8004640:	4689      	mov	r9, r1
 8004642:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	f7fb ff45 	bl	80004d8 <__aeabi_dmul>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	4640      	mov	r0, r8
 8004654:	4649      	mov	r1, r9
 8004656:	f7fb fd89 	bl	800016c <__adddf3>
 800465a:	4652      	mov	r2, sl
 800465c:	4680      	mov	r8, r0
 800465e:	4689      	mov	r9, r1
 8004660:	465b      	mov	r3, fp
 8004662:	4650      	mov	r0, sl
 8004664:	4659      	mov	r1, fp
 8004666:	f7fb ff37 	bl	80004d8 <__aeabi_dmul>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	4640      	mov	r0, r8
 8004670:	4649      	mov	r1, r9
 8004672:	f7fb fd7b 	bl	800016c <__adddf3>
 8004676:	f008 facf 	bl	800cc18 <sqrt>
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	2000      	movs	r0, #0
 8004680:	494b      	ldr	r1, [pc, #300]	; (80047b0 <calc_magnetic_orientation+0x36c>)
 8004682:	f7fc f853 	bl	800072c <__aeabi_ddiv>
 8004686:	4680      	mov	r8, r0
 8004688:	4689      	mov	r9, r1
	v[0] /= norm;
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004692:	f7fb ff21 	bl	80004d8 <__aeabi_dmul>
	v[1] /= norm;
 8004696:	4642      	mov	r2, r8
 8004698:	464b      	mov	r3, r9
	v[0] /= norm;
 800469a:	e9cd 0104 	strd	r0, r1, [sp, #16]
	v[1] /= norm;
 800469e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046a2:	f7fb ff19 	bl	80004d8 <__aeabi_dmul>
	v[2] /= norm;
 80046a6:	4642      	mov	r2, r8
	v[1] /= norm;
 80046a8:	e9cd 0106 	strd	r0, r1, [sp, #24]
	v[2] /= norm;
 80046ac:	464b      	mov	r3, r9
 80046ae:	4650      	mov	r0, sl
 80046b0:	4659      	mov	r1, fp
 80046b2:	f7fb ff11 	bl	80004d8 <__aeabi_dmul>
	normalize(East_ref);

	//step2: cross East and gravity(negative acceleration) to get reference direction of North
	double North_ref[3] = {0};

	North_ref[0] = East_ref[1]*g[2] - East_ref[2]*g[1];
 80046b6:	9f00      	ldr	r7, [sp, #0]
	v[2] /= norm;
 80046b8:	4682      	mov	sl, r0
 80046ba:	468b      	mov	fp, r1
	North_ref[0] = East_ref[1]*g[2] - East_ref[2]*g[1];
 80046bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046c0:	463a      	mov	r2, r7
 80046c2:	4623      	mov	r3, r4
 80046c4:	f7fb ff08 	bl	80004d8 <__aeabi_dmul>
 80046c8:	9a08      	ldr	r2, [sp, #32]
 80046ca:	4680      	mov	r8, r0
 80046cc:	4689      	mov	r9, r1
 80046ce:	4633      	mov	r3, r6
 80046d0:	4650      	mov	r0, sl
 80046d2:	4659      	mov	r1, fp
 80046d4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 80046d8:	f7fb fefe 	bl	80004d8 <__aeabi_dmul>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4640      	mov	r0, r8
 80046e2:	4649      	mov	r1, r9
 80046e4:	f7fb fd40 	bl	8000168 <__aeabi_dsub>
	North_ref[1] = East_ref[2]*g[0] - East_ref[0]*g[2];
 80046e8:	462b      	mov	r3, r5
	North_ref[0] = East_ref[1]*g[2] - East_ref[2]*g[1];
 80046ea:	4682      	mov	sl, r0
 80046ec:	468b      	mov	fp, r1
	North_ref[1] = East_ref[2]*g[0] - East_ref[0]*g[2];
 80046ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80046f2:	9a03      	ldr	r2, [sp, #12]
 80046f4:	f7fb fef0 	bl	80004d8 <__aeabi_dmul>
 80046f8:	463a      	mov	r2, r7
 80046fa:	4680      	mov	r8, r0
 80046fc:	4689      	mov	r9, r1
 80046fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004702:	4623      	mov	r3, r4
 8004704:	9700      	str	r7, [sp, #0]
 8004706:	f7fb fee7 	bl	80004d8 <__aeabi_dmul>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	4640      	mov	r0, r8
 8004710:	4649      	mov	r1, r9
 8004712:	f7fb fd29 	bl	8000168 <__aeabi_dsub>
	North_ref[2] = East_ref[0]*g[1] - East_ref[1]*g[0];
 8004716:	4633      	mov	r3, r6
	North_ref[1] = East_ref[2]*g[0] - East_ref[0]*g[2];
 8004718:	4680      	mov	r8, r0
 800471a:	4689      	mov	r9, r1
	North_ref[2] = East_ref[0]*g[1] - East_ref[1]*g[0];
 800471c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004720:	9a08      	ldr	r2, [sp, #32]
 8004722:	f7fb fed9 	bl	80004d8 <__aeabi_dmul>
 8004726:	462b      	mov	r3, r5
 8004728:	4606      	mov	r6, r0
 800472a:	460f      	mov	r7, r1
 800472c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004730:	9a03      	ldr	r2, [sp, #12]
 8004732:	f7fb fed1 	bl	80004d8 <__aeabi_dmul>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4630      	mov	r0, r6
 800473c:	4639      	mov	r1, r7
 800473e:	f7fb fd13 	bl	8000168 <__aeabi_dsub>
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 8004742:	4652      	mov	r2, sl
	North_ref[2] = East_ref[0]*g[1] - East_ref[1]*g[0];
 8004744:	460f      	mov	r7, r1
 8004746:	4606      	mov	r6, r0
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 8004748:	465b      	mov	r3, fp
 800474a:	4650      	mov	r0, sl
 800474c:	4659      	mov	r1, fp
 800474e:	f7fb fec3 	bl	80004d8 <__aeabi_dmul>
 8004752:	4642      	mov	r2, r8
 8004754:	4604      	mov	r4, r0
 8004756:	460d      	mov	r5, r1
 8004758:	464b      	mov	r3, r9
 800475a:	4640      	mov	r0, r8
 800475c:	4649      	mov	r1, r9
 800475e:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8004762:	f7fb feb9 	bl	80004d8 <__aeabi_dmul>
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	4620      	mov	r0, r4
 800476c:	4629      	mov	r1, r5
 800476e:	f7fb fcfd 	bl	800016c <__adddf3>
 8004772:	463b      	mov	r3, r7
 8004774:	4604      	mov	r4, r0
 8004776:	460d      	mov	r5, r1
 8004778:	4632      	mov	r2, r6
 800477a:	4639      	mov	r1, r7
 800477c:	4630      	mov	r0, r6
 800477e:	f7fb feab 	bl	80004d8 <__aeabi_dmul>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	4620      	mov	r0, r4
 8004788:	4629      	mov	r1, r5
 800478a:	f7fb fcef 	bl	800016c <__adddf3>
 800478e:	f008 fa43 	bl	800cc18 <sqrt>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	2000      	movs	r0, #0
 8004798:	4905      	ldr	r1, [pc, #20]	; (80047b0 <calc_magnetic_orientation+0x36c>)
 800479a:	f7fb ffc7 	bl	800072c <__aeabi_ddiv>
 800479e:	4689      	mov	r9, r1
 80047a0:	4680      	mov	r8, r0
	v[0] /= norm;
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4650      	mov	r0, sl
 80047a8:	e004      	b.n	80047b4 <calc_magnetic_orientation+0x370>
 80047aa:	bf00      	nop
 80047ac:	200005f8 	.word	0x200005f8
 80047b0:	3ff00000 	.word	0x3ff00000
 80047b4:	4659      	mov	r1, fp
 80047b6:	f7fb fe8f 	bl	80004d8 <__aeabi_dmul>
	v[1] /= norm;
 80047ba:	464b      	mov	r3, r9
 80047bc:	4642      	mov	r2, r8
	v[0] /= norm;
 80047be:	4682      	mov	sl, r0
 80047c0:	468b      	mov	fp, r1
	v[1] /= norm;
 80047c2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80047c6:	f7fb fe87 	bl	80004d8 <__aeabi_dmul>
	v[2] /= norm;
 80047ca:	464b      	mov	r3, r9
 80047cc:	4642      	mov	r2, r8
	v[1] /= norm;
 80047ce:	4605      	mov	r5, r0
 80047d0:	460c      	mov	r4, r1
	v[2] /= norm;
 80047d2:	4630      	mov	r0, r6
 80047d4:	4639      	mov	r1, r7
 80047d6:	f7fb fe7f 	bl	80004d8 <__aeabi_dmul>
	m10 = North_ref[0];	m11 = North_ref[1];	m12 = North_ref[2];
	m20 = -g[0];		m21 = -g[1];		m22 = -g[2];

	//conversion from transposed rotation matrix to quaternion
	double t;
	if (m22 < 0){
 80047da:	9f00      	ldr	r7, [sp, #0]
 80047dc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
	v[2] /= norm;
 80047e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	if (m22 < 0){
 80047e4:	2200      	movs	r2, #0
 80047e6:	4638      	mov	r0, r7
 80047e8:	4649      	mov	r1, r9
 80047ea:	2300      	movs	r3, #0
 80047ec:	f7fc f8e6 	bl	80009bc <__aeabi_dcmplt>
 80047f0:	2800      	cmp	r0, #0
 80047f2:	f000 8088 	beq.w	8004906 <calc_magnetic_orientation+0x4c2>
 80047f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80047fa:	4650      	mov	r0, sl
 80047fc:	4659      	mov	r1, fp
 80047fe:	f7fb fcb5 	bl	800016c <__adddf3>
 8004802:	463a      	mov	r2, r7
 8004804:	464b      	mov	r3, r9
 8004806:	4682      	mov	sl, r0
 8004808:	468b      	mov	fp, r1
 800480a:	2000      	movs	r0, #0
 800480c:	496b      	ldr	r1, [pc, #428]	; (80049bc <calc_magnetic_orientation+0x578>)
 800480e:	f7fb fcab 	bl	8000168 <__aeabi_dsub>
		if (m00 > m11){
 8004812:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004816:	4606      	mov	r6, r0
 8004818:	4642      	mov	r2, r8
 800481a:	464b      	mov	r3, r9
 800481c:	460f      	mov	r7, r1
 800481e:	4628      	mov	r0, r5
 8004820:	4621      	mov	r1, r4
 8004822:	f7fc f8cb 	bl	80009bc <__aeabi_dcmplt>
			t = 1 + m00 - m11 - m22;
 8004826:	4642      	mov	r2, r8
 8004828:	464b      	mov	r3, r9
		if (m00 > m11){
 800482a:	2800      	cmp	r0, #0
 800482c:	d14c      	bne.n	80048c8 <calc_magnetic_orientation+0x484>
			XIMU_observ.mag_ref_q0 = m12-m21;
			XIMU_observ.mag_ref_q1 = t;
			XIMU_observ.mag_ref_q2 = m01+m10;
			XIMU_observ.mag_ref_q3 = m20+m02;
		}else{
			t = 1 - m00 + m11 - m22;
 800482e:	4630      	mov	r0, r6
 8004830:	4639      	mov	r1, r7
 8004832:	f7fb fc99 	bl	8000168 <__aeabi_dsub>
 8004836:	462a      	mov	r2, r5
 8004838:	4623      	mov	r3, r4
 800483a:	f7fb fc97 	bl	800016c <__adddf3>

			XIMU_observ.mag_ref_q0 = m20-m02;
 800483e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			t = 1 - m00 + m11 - m22;
 8004842:	4604      	mov	r4, r0
 8004844:	460d      	mov	r5, r1
			XIMU_observ.mag_ref_q0 = m20-m02;
 8004846:	9803      	ldr	r0, [sp, #12]
 8004848:	9909      	ldr	r1, [sp, #36]	; 0x24
 800484a:	f7fb fc8d 	bl	8000168 <__aeabi_dsub>
 800484e:	9a08      	ldr	r2, [sp, #32]
 8004850:	4680      	mov	r8, r0
 8004852:	4689      	mov	r9, r1
 8004854:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800485a:	f7fb fc87 	bl	800016c <__adddf3>
 800485e:	4626      	mov	r6, r4
 8004860:	462f      	mov	r7, r5
 8004862:	e9cd 0106 	strd	r0, r1, [sp, #24]
			 XIMU_observ.mag_ref_q3 = m01-m10;
		 }
	 }

	//normalize
	XIMU_observ.mag_ref_q0 *= 0.5f / sqrt(t);
 8004866:	4620      	mov	r0, r4
 8004868:	4629      	mov	r1, r5
 800486a:	f008 f9d5 	bl	800cc18 <sqrt>
 800486e:	4602      	mov	r2, r0
 8004870:	460b      	mov	r3, r1
 8004872:	2000      	movs	r0, #0
 8004874:	4952      	ldr	r1, [pc, #328]	; (80049c0 <calc_magnetic_orientation+0x57c>)
 8004876:	f7fb ff59 	bl	800072c <__aeabi_ddiv>
 800487a:	4604      	mov	r4, r0
 800487c:	460d      	mov	r5, r1
 800487e:	4622      	mov	r2, r4
 8004880:	462b      	mov	r3, r5
 8004882:	4640      	mov	r0, r8
 8004884:	4649      	mov	r1, r9
 8004886:	f7fb fe27 	bl	80004d8 <__aeabi_dmul>
 800488a:	f8df 8138 	ldr.w	r8, [pc, #312]	; 80049c4 <calc_magnetic_orientation+0x580>
	XIMU_observ.mag_ref_q1 *= 0.5f / sqrt(t);
 800488e:	4622      	mov	r2, r4
	XIMU_observ.mag_ref_q0 *= 0.5f / sqrt(t);
 8004890:	e9c8 0100 	strd	r0, r1, [r8]
	XIMU_observ.mag_ref_q1 *= 0.5f / sqrt(t);
 8004894:	462b      	mov	r3, r5
 8004896:	4650      	mov	r0, sl
 8004898:	4659      	mov	r1, fp
 800489a:	f7fb fe1d 	bl	80004d8 <__aeabi_dmul>
	XIMU_observ.mag_ref_q2 *= 0.5f / sqrt(t);
 800489e:	4632      	mov	r2, r6
	XIMU_observ.mag_ref_q1 *= 0.5f / sqrt(t);
 80048a0:	e9c8 0102 	strd	r0, r1, [r8, #8]
	XIMU_observ.mag_ref_q2 *= 0.5f / sqrt(t);
 80048a4:	463b      	mov	r3, r7
 80048a6:	4620      	mov	r0, r4
 80048a8:	4629      	mov	r1, r5
 80048aa:	f7fb fe15 	bl	80004d8 <__aeabi_dmul>
	XIMU_observ.mag_ref_q3 *= 0.5f / sqrt(t);
 80048ae:	4622      	mov	r2, r4
	XIMU_observ.mag_ref_q2 *= 0.5f / sqrt(t);
 80048b0:	e9c8 0104 	strd	r0, r1, [r8, #16]
	XIMU_observ.mag_ref_q3 *= 0.5f / sqrt(t);
 80048b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048b8:	462b      	mov	r3, r5
 80048ba:	f7fb fe0d 	bl	80004d8 <__aeabi_dmul>
 80048be:	e9c8 0106 	strd	r0, r1, [r8, #24]
}
 80048c2:	b011      	add	sp, #68	; 0x44
 80048c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			t = 1 + m00 - m11 - m22;
 80048c8:	4630      	mov	r0, r6
 80048ca:	4639      	mov	r1, r7
 80048cc:	f7fb fc4e 	bl	800016c <__adddf3>
 80048d0:	462a      	mov	r2, r5
 80048d2:	4623      	mov	r3, r4
 80048d4:	f7fb fc48 	bl	8000168 <__aeabi_dsub>
 80048d8:	9a08      	ldr	r2, [sp, #32]
 80048da:	4604      	mov	r4, r0
 80048dc:	460d      	mov	r5, r1
 80048de:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80048e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048e4:	f7fb fc40 	bl	8000168 <__aeabi_dsub>
 80048e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80048ec:	4680      	mov	r8, r0
 80048ee:	4689      	mov	r9, r1
 80048f0:	9803      	ldr	r0, [sp, #12]
 80048f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048f4:	f7fb fc3a 	bl	800016c <__adddf3>
 80048f8:	4656      	mov	r6, sl
 80048fa:	465f      	mov	r7, fp
 80048fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004900:	46a2      	mov	sl, r4
 8004902:	46ab      	mov	fp, r5
 8004904:	e7af      	b.n	8004866 <calc_magnetic_orientation+0x422>
 8004906:	4652      	mov	r2, sl
 8004908:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800490c:	465b      	mov	r3, fp
 800490e:	f7fb fc2b 	bl	8000168 <__aeabi_dsub>
 8004912:	2200      	movs	r2, #0
 8004914:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004918:	4b28      	ldr	r3, [pc, #160]	; (80049bc <calc_magnetic_orientation+0x578>)
 800491a:	9800      	ldr	r0, [sp, #0]
 800491c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800491e:	f7fb fc25 	bl	800016c <__adddf3>
		 if (m00 < -m11){
 8004922:	e9dd 9a04 	ldrd	r9, sl, [sp, #16]
 8004926:	4606      	mov	r6, r0
 8004928:	460f      	mov	r7, r1
 800492a:	464a      	mov	r2, r9
 800492c:	4653      	mov	r3, sl
 800492e:	4628      	mov	r0, r5
 8004930:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8004934:	f7fc f860 	bl	80009f8 <__aeabi_dcmpgt>
 8004938:	b9f0      	cbnz	r0, 8004978 <calc_magnetic_orientation+0x534>
			 t = 1 + m00 + m11 + m22;
 800493a:	4632      	mov	r2, r6
 800493c:	463b      	mov	r3, r7
 800493e:	4648      	mov	r0, r9
 8004940:	4651      	mov	r1, sl
 8004942:	f7fb fc13 	bl	800016c <__adddf3>
 8004946:	462a      	mov	r2, r5
 8004948:	4623      	mov	r3, r4
 800494a:	f7fb fc0f 	bl	800016c <__adddf3>
 800494e:	9a08      	ldr	r2, [sp, #32]
 8004950:	4604      	mov	r4, r0
 8004952:	460d      	mov	r5, r1
 8004954:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800495a:	f7fb fc05 	bl	8000168 <__aeabi_dsub>
			 XIMU_observ.mag_ref_q2 = m20-m02;
 800495e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004962:	4682      	mov	sl, r0
 8004964:	468b      	mov	fp, r1
 8004966:	9803      	ldr	r0, [sp, #12]
 8004968:	9909      	ldr	r1, [sp, #36]	; 0x24
 800496a:	f7fb fbfd 	bl	8000168 <__aeabi_dsub>
 800496e:	46a0      	mov	r8, r4
 8004970:	4606      	mov	r6, r0
 8004972:	460f      	mov	r7, r1
 8004974:	46a9      	mov	r9, r5
 8004976:	e776      	b.n	8004866 <calc_magnetic_orientation+0x422>
			 t = 1 - m00 - m11 + m22;
 8004978:	464a      	mov	r2, r9
 800497a:	4653      	mov	r3, sl
 800497c:	4630      	mov	r0, r6
 800497e:	4639      	mov	r1, r7
 8004980:	f7fb fbf2 	bl	8000168 <__aeabi_dsub>
 8004984:	462a      	mov	r2, r5
 8004986:	4623      	mov	r3, r4
 8004988:	f7fb fbee 	bl	8000168 <__aeabi_dsub>
 800498c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004990:	4604      	mov	r4, r0
 8004992:	460d      	mov	r5, r1
 8004994:	9803      	ldr	r0, [sp, #12]
 8004996:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004998:	f7fb fbe8 	bl	800016c <__adddf3>
 800499c:	9a08      	ldr	r2, [sp, #32]
 800499e:	4682      	mov	sl, r0
 80049a0:	468b      	mov	fp, r1
 80049a2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80049a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049a8:	f7fb fbe0 	bl	800016c <__adddf3>
 80049ac:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80049b0:	4606      	mov	r6, r0
 80049b2:	460f      	mov	r7, r1
 80049b4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80049b8:	e755      	b.n	8004866 <calc_magnetic_orientation+0x422>
 80049ba:	bf00      	nop
 80049bc:	3ff00000 	.word	0x3ff00000
 80049c0:	3fe00000 	.word	0x3fe00000
 80049c4:	20000818 	.word	0x20000818

080049c8 <build_data_str>:

void calc_absolute_position();
void calc_absolute_altitude();

void build_data_str(char* str){
 80049c8:	b570      	push	{r4, r5, r6, lr}

	char temp[30];
	char delim[2] = {'\t','\0'};
 80049ca:	2309      	movs	r3, #9
	char term[2] = {'\n','\0'};
 80049cc:	250a      	movs	r5, #10
void build_data_str(char* str){
 80049ce:	4604      	mov	r4, r0


	itoa((int)(XIMU_sens.q0),temp,10);
 80049d0:	4ecf      	ldr	r6, [pc, #828]	; (8004d10 <build_data_str+0x348>)
void build_data_str(char* str){
 80049d2:	b08a      	sub	sp, #40	; 0x28
	itoa((int)(XIMU_sens.q0),temp,10);
 80049d4:	e9d6 0100 	ldrd	r0, r1, [r6]
	char delim[2] = {'\t','\0'};
 80049d8:	f8ad 3000 	strh.w	r3, [sp]
	char term[2] = {'\n','\0'};
 80049dc:	f8ad 5004 	strh.w	r5, [sp, #4]
	itoa((int)(XIMU_sens.q0),temp,10);
 80049e0:	f7fc f82a 	bl	8000a38 <__aeabi_d2iz>
 80049e4:	462a      	mov	r2, r5
 80049e6:	a902      	add	r1, sp, #8
 80049e8:	f005 fc52 	bl	800a290 <itoa>
	strcpy(str,temp);
 80049ec:	a902      	add	r1, sp, #8
 80049ee:	4620      	mov	r0, r4
 80049f0:	f005 fc9e 	bl	800a330 <stpcpy>
	strcat(str,delim);
 80049f4:	4669      	mov	r1, sp
 80049f6:	f005 fca4 	bl	800a342 <strcpy>

	itoa((int)(XIMU_sens.q1),temp,10);
 80049fa:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
 80049fe:	f7fc f81b 	bl	8000a38 <__aeabi_d2iz>
 8004a02:	462a      	mov	r2, r5
 8004a04:	a902      	add	r1, sp, #8
 8004a06:	f005 fc43 	bl	800a290 <itoa>
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f7fb fba0 	bl	8000150 <strlen>
	strcat(str,temp);
 8004a10:	a902      	add	r1, sp, #8
 8004a12:	4420      	add	r0, r4
 8004a14:	f005 fc8c 	bl	800a330 <stpcpy>
	strcat(str,delim);
 8004a18:	4669      	mov	r1, sp
 8004a1a:	f005 fc92 	bl	800a342 <strcpy>

	itoa((int)(XIMU_sens.q2),temp,10);
 8004a1e:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 8004a22:	f7fc f809 	bl	8000a38 <__aeabi_d2iz>
 8004a26:	462a      	mov	r2, r5
 8004a28:	a902      	add	r1, sp, #8
 8004a2a:	f005 fc31 	bl	800a290 <itoa>
 8004a2e:	4620      	mov	r0, r4
 8004a30:	f7fb fb8e 	bl	8000150 <strlen>
	strcat(str,temp);
 8004a34:	a902      	add	r1, sp, #8
 8004a36:	4420      	add	r0, r4
 8004a38:	f005 fc7a 	bl	800a330 <stpcpy>
	strcat(str,delim);
 8004a3c:	4669      	mov	r1, sp
 8004a3e:	f005 fc80 	bl	800a342 <strcpy>

	itoa((int)(XIMU_sens.q3),temp,10);
 8004a42:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
 8004a46:	f7fb fff7 	bl	8000a38 <__aeabi_d2iz>
 8004a4a:	462a      	mov	r2, r5
 8004a4c:	a902      	add	r1, sp, #8
 8004a4e:	f005 fc1f 	bl	800a290 <itoa>
 8004a52:	4620      	mov	r0, r4
 8004a54:	f7fb fb7c 	bl	8000150 <strlen>
	strcat(str,temp);
 8004a58:	a902      	add	r1, sp, #8
 8004a5a:	4420      	add	r0, r4
 8004a5c:	f005 fc68 	bl	800a330 <stpcpy>
	strcat(str,delim);
 8004a60:	4669      	mov	r1, sp
 8004a62:	f005 fc6e 	bl	800a342 <strcpy>

	itoa((int)(XIMU_sens.ax*1000),temp,10);
 8004a66:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
 8004a6a:	4baa      	ldr	r3, [pc, #680]	; (8004d14 <build_data_str+0x34c>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f7fb fd33 	bl	80004d8 <__aeabi_dmul>
 8004a72:	f7fb ffe1 	bl	8000a38 <__aeabi_d2iz>
 8004a76:	462a      	mov	r2, r5
 8004a78:	a902      	add	r1, sp, #8
 8004a7a:	f005 fc09 	bl	800a290 <itoa>
 8004a7e:	4620      	mov	r0, r4
 8004a80:	f7fb fb66 	bl	8000150 <strlen>
	strcat(str,temp);
 8004a84:	a902      	add	r1, sp, #8
 8004a86:	4420      	add	r0, r4
 8004a88:	f005 fc52 	bl	800a330 <stpcpy>
	strcat(str,delim);
 8004a8c:	4669      	mov	r1, sp
 8004a8e:	f005 fc58 	bl	800a342 <strcpy>

	itoa((int)(XIMU_sens.ay*1000),temp,10);
 8004a92:	e9d6 010a 	ldrd	r0, r1, [r6, #40]	; 0x28
 8004a96:	4b9f      	ldr	r3, [pc, #636]	; (8004d14 <build_data_str+0x34c>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f7fb fd1d 	bl	80004d8 <__aeabi_dmul>
 8004a9e:	f7fb ffcb 	bl	8000a38 <__aeabi_d2iz>
 8004aa2:	462a      	mov	r2, r5
 8004aa4:	a902      	add	r1, sp, #8
 8004aa6:	f005 fbf3 	bl	800a290 <itoa>
 8004aaa:	4620      	mov	r0, r4
 8004aac:	f7fb fb50 	bl	8000150 <strlen>
	strcat(str,temp);
 8004ab0:	a902      	add	r1, sp, #8
 8004ab2:	4420      	add	r0, r4
 8004ab4:	f005 fc3c 	bl	800a330 <stpcpy>
	strcat(str,delim);
 8004ab8:	4669      	mov	r1, sp
 8004aba:	f005 fc42 	bl	800a342 <strcpy>

	itoa((int)(XIMU_sens.az*1000),temp,10);
 8004abe:	e9d6 010c 	ldrd	r0, r1, [r6, #48]	; 0x30
 8004ac2:	4b94      	ldr	r3, [pc, #592]	; (8004d14 <build_data_str+0x34c>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f7fb fd07 	bl	80004d8 <__aeabi_dmul>
 8004aca:	f7fb ffb5 	bl	8000a38 <__aeabi_d2iz>
 8004ace:	462a      	mov	r2, r5
 8004ad0:	a902      	add	r1, sp, #8
 8004ad2:	f005 fbdd 	bl	800a290 <itoa>
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f7fb fb3a 	bl	8000150 <strlen>
	strcat(str,temp);
 8004adc:	a902      	add	r1, sp, #8
 8004ade:	4420      	add	r0, r4
 8004ae0:	f005 fc26 	bl	800a330 <stpcpy>
	strcat(str,delim);
 8004ae4:	4669      	mov	r1, sp
 8004ae6:	f005 fc2c 	bl	800a342 <strcpy>

	itoa((int)(XIMU_sens.gx*1000),temp,10);
 8004aea:	e9d6 010e 	ldrd	r0, r1, [r6, #56]	; 0x38
 8004aee:	4b89      	ldr	r3, [pc, #548]	; (8004d14 <build_data_str+0x34c>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	f7fb fcf1 	bl	80004d8 <__aeabi_dmul>
 8004af6:	f7fb ff9f 	bl	8000a38 <__aeabi_d2iz>
 8004afa:	462a      	mov	r2, r5
 8004afc:	a902      	add	r1, sp, #8
 8004afe:	f005 fbc7 	bl	800a290 <itoa>
 8004b02:	4620      	mov	r0, r4
 8004b04:	f7fb fb24 	bl	8000150 <strlen>
	strcat(str,temp);
 8004b08:	a902      	add	r1, sp, #8
 8004b0a:	4420      	add	r0, r4
 8004b0c:	f005 fc10 	bl	800a330 <stpcpy>
	strcat(str,delim);
 8004b10:	4669      	mov	r1, sp
 8004b12:	f005 fc16 	bl	800a342 <strcpy>

	itoa((int)(XIMU_sens.gy*1000),temp,10);
 8004b16:	e9d6 0110 	ldrd	r0, r1, [r6, #64]	; 0x40
 8004b1a:	4b7e      	ldr	r3, [pc, #504]	; (8004d14 <build_data_str+0x34c>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f7fb fcdb 	bl	80004d8 <__aeabi_dmul>
 8004b22:	f7fb ff89 	bl	8000a38 <__aeabi_d2iz>
 8004b26:	462a      	mov	r2, r5
 8004b28:	a902      	add	r1, sp, #8
 8004b2a:	f005 fbb1 	bl	800a290 <itoa>
 8004b2e:	4620      	mov	r0, r4
 8004b30:	f7fb fb0e 	bl	8000150 <strlen>
	strcat(str,temp);
 8004b34:	a902      	add	r1, sp, #8
 8004b36:	4420      	add	r0, r4
 8004b38:	f005 fbfa 	bl	800a330 <stpcpy>
	strcat(str,delim);
 8004b3c:	4669      	mov	r1, sp
 8004b3e:	f005 fc00 	bl	800a342 <strcpy>

	itoa((int)(XIMU_sens.gz*1000),temp,10);
 8004b42:	e9d6 0112 	ldrd	r0, r1, [r6, #72]	; 0x48
 8004b46:	4b73      	ldr	r3, [pc, #460]	; (8004d14 <build_data_str+0x34c>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f7fb fcc5 	bl	80004d8 <__aeabi_dmul>
 8004b4e:	f7fb ff73 	bl	8000a38 <__aeabi_d2iz>
 8004b52:	462a      	mov	r2, r5
 8004b54:	a902      	add	r1, sp, #8
 8004b56:	f005 fb9b 	bl	800a290 <itoa>
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	f7fb faf8 	bl	8000150 <strlen>
	strcat(str,temp);
 8004b60:	a902      	add	r1, sp, #8
 8004b62:	4420      	add	r0, r4
 8004b64:	f005 fbe4 	bl	800a330 <stpcpy>
	strcat(str,delim);
 8004b68:	4669      	mov	r1, sp
 8004b6a:	f005 fbea 	bl	800a342 <strcpy>

	itoa((int)(XIMU_sens.mx*1000),temp,10);
 8004b6e:	e9d6 0116 	ldrd	r0, r1, [r6, #88]	; 0x58
 8004b72:	4b68      	ldr	r3, [pc, #416]	; (8004d14 <build_data_str+0x34c>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	f7fb fcaf 	bl	80004d8 <__aeabi_dmul>
 8004b7a:	f7fb ff5d 	bl	8000a38 <__aeabi_d2iz>
 8004b7e:	462a      	mov	r2, r5
 8004b80:	a902      	add	r1, sp, #8
 8004b82:	f005 fb85 	bl	800a290 <itoa>
 8004b86:	4620      	mov	r0, r4
 8004b88:	f7fb fae2 	bl	8000150 <strlen>
	strcat(str,temp);
 8004b8c:	a902      	add	r1, sp, #8
 8004b8e:	4420      	add	r0, r4
 8004b90:	f005 fbce 	bl	800a330 <stpcpy>
	strcat(str,delim);
 8004b94:	4669      	mov	r1, sp
 8004b96:	f005 fbd4 	bl	800a342 <strcpy>

	itoa((int)(XIMU_sens.my*1000),temp,10);
 8004b9a:	e9d6 0118 	ldrd	r0, r1, [r6, #96]	; 0x60
 8004b9e:	4b5d      	ldr	r3, [pc, #372]	; (8004d14 <build_data_str+0x34c>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f7fb fc99 	bl	80004d8 <__aeabi_dmul>
 8004ba6:	f7fb ff47 	bl	8000a38 <__aeabi_d2iz>
 8004baa:	462a      	mov	r2, r5
 8004bac:	a902      	add	r1, sp, #8
 8004bae:	f005 fb6f 	bl	800a290 <itoa>
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	f7fb facc 	bl	8000150 <strlen>
	strcat(str,temp);
 8004bb8:	a902      	add	r1, sp, #8
 8004bba:	4420      	add	r0, r4
 8004bbc:	f005 fbb8 	bl	800a330 <stpcpy>
	strcat(str,delim);
 8004bc0:	4669      	mov	r1, sp
 8004bc2:	f005 fbbe 	bl	800a342 <strcpy>

	itoa((int)(XIMU_sens.mz*1000),temp,10);
 8004bc6:	e9d6 011a 	ldrd	r0, r1, [r6, #104]	; 0x68
 8004bca:	4b52      	ldr	r3, [pc, #328]	; (8004d14 <build_data_str+0x34c>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f7fb fc83 	bl	80004d8 <__aeabi_dmul>
 8004bd2:	f7fb ff31 	bl	8000a38 <__aeabi_d2iz>
 8004bd6:	462a      	mov	r2, r5
 8004bd8:	a902      	add	r1, sp, #8
 8004bda:	f005 fb59 	bl	800a290 <itoa>
 8004bde:	4620      	mov	r0, r4
 8004be0:	f7fb fab6 	bl	8000150 <strlen>
	strcat(str,temp);
 8004be4:	a902      	add	r1, sp, #8
 8004be6:	4420      	add	r0, r4
 8004be8:	f005 fba2 	bl	800a330 <stpcpy>
	strcat(str,delim);
 8004bec:	4669      	mov	r1, sp
 8004bee:	f005 fba8 	bl	800a342 <strcpy>

	itoa((int)(XIMU_sens.pressure*1000),temp,10);
 8004bf2:	e9d6 011e 	ldrd	r0, r1, [r6, #120]	; 0x78
 8004bf6:	4b47      	ldr	r3, [pc, #284]	; (8004d14 <build_data_str+0x34c>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f7fb fc6d 	bl	80004d8 <__aeabi_dmul>
 8004bfe:	f7fb ff1b 	bl	8000a38 <__aeabi_d2iz>
 8004c02:	462a      	mov	r2, r5
 8004c04:	a902      	add	r1, sp, #8
 8004c06:	f005 fb43 	bl	800a290 <itoa>
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	f7fb faa0 	bl	8000150 <strlen>
	strcat(str,temp);
 8004c10:	a902      	add	r1, sp, #8
 8004c12:	4420      	add	r0, r4
 8004c14:	f005 fb8c 	bl	800a330 <stpcpy>
	strcat(str,delim);
 8004c18:	4669      	mov	r1, sp
 8004c1a:	f005 fb92 	bl	800a342 <strcpy>

	itoa((int)(XIMU_sens.temperature*1000),temp,10);
 8004c1e:	e9d6 0120 	ldrd	r0, r1, [r6, #128]	; 0x80
 8004c22:	4b3c      	ldr	r3, [pc, #240]	; (8004d14 <build_data_str+0x34c>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	f7fb fc57 	bl	80004d8 <__aeabi_dmul>
 8004c2a:	f7fb ff05 	bl	8000a38 <__aeabi_d2iz>
 8004c2e:	462a      	mov	r2, r5
 8004c30:	a902      	add	r1, sp, #8
 8004c32:	f005 fb2d 	bl	800a290 <itoa>
 8004c36:	4620      	mov	r0, r4
 8004c38:	f7fb fa8a 	bl	8000150 <strlen>
	strcat(str,temp);
 8004c3c:	a902      	add	r1, sp, #8
 8004c3e:	4420      	add	r0, r4
 8004c40:	f005 fb76 	bl	800a330 <stpcpy>
	strcat(str,delim);
 8004c44:	4669      	mov	r1, sp
 8004c46:	f005 fb7c 	bl	800a342 <strcpy>

	itoa((int)(XIMU_sens.lat*1000000),temp,10);
 8004c4a:	a32f      	add	r3, pc, #188	; (adr r3, 8004d08 <build_data_str+0x340>)
 8004c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c50:	e9d6 0124 	ldrd	r0, r1, [r6, #144]	; 0x90
 8004c54:	f7fb fc40 	bl	80004d8 <__aeabi_dmul>
 8004c58:	f7fb feee 	bl	8000a38 <__aeabi_d2iz>
 8004c5c:	462a      	mov	r2, r5
 8004c5e:	a902      	add	r1, sp, #8
 8004c60:	f005 fb16 	bl	800a290 <itoa>
 8004c64:	4620      	mov	r0, r4
 8004c66:	f7fb fa73 	bl	8000150 <strlen>
	strcat(str,temp);
 8004c6a:	a902      	add	r1, sp, #8
 8004c6c:	4420      	add	r0, r4
 8004c6e:	f005 fb5f 	bl	800a330 <stpcpy>
	strcat(str,delim);
 8004c72:	4669      	mov	r1, sp
 8004c74:	f005 fb65 	bl	800a342 <strcpy>

	itoa((int)(XIMU_sens.lon*1000000),temp,10);
 8004c78:	a323      	add	r3, pc, #140	; (adr r3, 8004d08 <build_data_str+0x340>)
 8004c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7e:	e9d6 0126 	ldrd	r0, r1, [r6, #152]	; 0x98
 8004c82:	f7fb fc29 	bl	80004d8 <__aeabi_dmul>
 8004c86:	f7fb fed7 	bl	8000a38 <__aeabi_d2iz>
 8004c8a:	462a      	mov	r2, r5
 8004c8c:	a902      	add	r1, sp, #8
 8004c8e:	f005 faff 	bl	800a290 <itoa>
 8004c92:	4620      	mov	r0, r4
 8004c94:	f7fb fa5c 	bl	8000150 <strlen>
	strcat(str,temp);
 8004c98:	a902      	add	r1, sp, #8
 8004c9a:	4420      	add	r0, r4
 8004c9c:	f005 fb48 	bl	800a330 <stpcpy>
	strcat(str,delim);
 8004ca0:	4669      	mov	r1, sp
 8004ca2:	f005 fb4e 	bl	800a342 <strcpy>

	itoa((int)(XIMU_sens.qag_ts),temp,10);
 8004ca6:	462a      	mov	r2, r5
 8004ca8:	a902      	add	r1, sp, #8
 8004caa:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8004cac:	f005 faf0 	bl	800a290 <itoa>
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	f7fb fa4d 	bl	8000150 <strlen>
	strcat(str,temp);
 8004cb6:	a902      	add	r1, sp, #8
 8004cb8:	4420      	add	r0, r4
 8004cba:	f005 fb39 	bl	800a330 <stpcpy>
	strcat(str,delim);
 8004cbe:	4669      	mov	r1, sp
 8004cc0:	f005 fb3f 	bl	800a342 <strcpy>

	itoa((int)(XIMU_sens.m_ts),temp,10);
 8004cc4:	462a      	mov	r2, r5
 8004cc6:	a902      	add	r1, sp, #8
 8004cc8:	6f30      	ldr	r0, [r6, #112]	; 0x70
 8004cca:	f005 fae1 	bl	800a290 <itoa>
 8004cce:	4620      	mov	r0, r4
 8004cd0:	f7fb fa3e 	bl	8000150 <strlen>
	strcat(str,temp);
 8004cd4:	a902      	add	r1, sp, #8
 8004cd6:	4420      	add	r0, r4
 8004cd8:	f005 fb2a 	bl	800a330 <stpcpy>
	strcat(str,delim);
 8004cdc:	4669      	mov	r1, sp
 8004cde:	f005 fb30 	bl	800a342 <strcpy>

	itoa((int)(XIMU_sens.pt_ts),temp,10);
 8004ce2:	462a      	mov	r2, r5
 8004ce4:	a902      	add	r1, sp, #8
 8004ce6:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
 8004cea:	f005 fad1 	bl	800a290 <itoa>
 8004cee:	4620      	mov	r0, r4
 8004cf0:	f7fb fa2e 	bl	8000150 <strlen>
	strcat(str,temp);
 8004cf4:	a902      	add	r1, sp, #8
 8004cf6:	4420      	add	r0, r4
 8004cf8:	f005 fb1a 	bl	800a330 <stpcpy>
	strcat(str,delim);
 8004cfc:	4669      	mov	r1, sp
 8004cfe:	f005 fb20 	bl	800a342 <strcpy>

	itoa((int)(XIMU_sens.gps_ts),temp,10);
 8004d02:	462a      	mov	r2, r5
 8004d04:	e008      	b.n	8004d18 <build_data_str+0x350>
 8004d06:	bf00      	nop
 8004d08:	00000000 	.word	0x00000000
 8004d0c:	412e8480 	.word	0x412e8480
 8004d10:	200005f8 	.word	0x200005f8
 8004d14:	408f4000 	.word	0x408f4000
 8004d18:	a902      	add	r1, sp, #8
 8004d1a:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
 8004d1e:	f005 fab7 	bl	800a290 <itoa>
 8004d22:	4620      	mov	r0, r4
 8004d24:	f7fb fa14 	bl	8000150 <strlen>
	strcat(str,temp);
 8004d28:	a902      	add	r1, sp, #8
 8004d2a:	4420      	add	r0, r4
 8004d2c:	f005 fb00 	bl	800a330 <stpcpy>
	strcat(str,term);
 8004d30:	a901      	add	r1, sp, #4
 8004d32:	f005 fb06 	bl	800a342 <strcpy>
}
 8004d36:	b00a      	add	sp, #40	; 0x28
 8004d38:	bd70      	pop	{r4, r5, r6, pc}
 8004d3a:	bf00      	nop

08004d3c <GNSS_set_huart>:
 */

#include "gnss.h"

void GNSS_set_huart(UART_HandleTypeDef* huart){
	huartx = huart;
 8004d3c:	4b01      	ldr	r3, [pc, #4]	; (8004d44 <GNSS_set_huart+0x8>)
 8004d3e:	6018      	str	r0, [r3, #0]
}
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	20000d10 	.word	0x20000d10

08004d48 <GNSS_Init>:
 * initializes the GNSS interrupt.
 *
 * call this function before main loop.
 */
void GNSS_Init(){
	HAL_UART_Receive_DMA(huartx, GNSS.dma_buffer, DMA_BUFFER_SIZE);
 8004d48:	4b03      	ldr	r3, [pc, #12]	; (8004d58 <GNSS_Init+0x10>)
 8004d4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d4e:	6818      	ldr	r0, [r3, #0]
 8004d50:	4902      	ldr	r1, [pc, #8]	; (8004d5c <GNSS_Init+0x14>)
 8004d52:	f003 b981 	b.w	8008058 <HAL_UART_Receive_DMA>
 8004d56:	bf00      	nop
 8004d58:	20000d10 	.word	0x20000d10
 8004d5c:	20000850 	.word	0x20000850

08004d60 <GNSS_RX_Update>:
	//https://www.devcoons.com/stm32-uart-receive-unknown-size-data-using-dma-and-freertos/
}

int GNSS_RX_Update(){
 8004d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d64:	b0b5      	sub	sp, #212	; 0xd4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d66:	b672      	cpsid	i

	__disable_irq();//I don't understand this
	int i = DMA_BUFFER_SIZE - huartx->hdmarx->Instance->CNDTR; //last byte received
 8004d68:	4b85      	ldr	r3, [pc, #532]	; (8004f80 <GNSS_RX_Update+0x220>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f5c3 6b80 	rsb	fp, r3, #1024	; 0x400
  __ASM volatile ("cpsie i" : : : "memory");
 8004d76:	b662      	cpsie	i
	__enable_irq();//I don't understand this

	int new_information = 0;
 8004d78:	f04f 0800 	mov.w	r8, #0
 8004d7c:	f8df a208 	ldr.w	sl, [pc, #520]	; 8004f88 <GNSS_RX_Update+0x228>
		GNSS.message_buffer[counter] = '\n';
		GNSS.message_buffer[counter+1] = '\0';
		GNSS.start = end;

		//parse message if it is GNGGA
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8004d80:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8004f8c <GNSS_RX_Update+0x22c>

		if (str != NULL){
			char fields[NUM_FIELDS][MAX_FIELD_SIZE];
			parse_GNGGA(GNSS.message_buffer,fields);
			//field 1: UTC time
			sscanf(fields[1],"%2d%2d%2d.%3d",&GNSS.GNGGA.UTC_Hour,&GNSS.GNGGA.UTC_Min,&GNSS.GNGGA.UTC_Second,&GNSS.GNGGA.UTC_Millis);
 8004d84:	f50a 638e 	add.w	r3, sl, #1136	; 0x470
 8004d88:	9303      	str	r3, [sp, #12]
		int counter = 0;
 8004d8a:	2700      	movs	r7, #0
		GNSS.message_buffer[counter] = '\n';
 8004d8c:	260a      	movs	r6, #10
 8004d8e:	f8da 4464 	ldr.w	r4, [sl, #1124]	; 0x464
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8004d92:	4d7c      	ldr	r5, [pc, #496]	; (8004f84 <GNSS_RX_Update+0x224>)
	while (GNSS.start != i){
 8004d94:	455c      	cmp	r4, fp
 8004d96:	f000 80e5 	beq.w	8004f64 <GNSS_RX_Update+0x204>
		if (GNSS.dma_buffer[GNSS.start] != '$'){
 8004d9a:	f81a 3004 	ldrb.w	r3, [sl, r4]
 8004d9e:	2b24      	cmp	r3, #36	; 0x24
 8004da0:	f040 80d4 	bne.w	8004f4c <GNSS_RX_Update+0x1ec>
int GNSS_RX_Update(){
 8004da4:	4623      	mov	r3, r4
 8004da6:	e002      	b.n	8004dae <GNSS_RX_Update+0x4e>
			if (GNSS.dma_buffer[end] == '\n'){
 8004da8:	2a0a      	cmp	r2, #10
 8004daa:	f000 80df 	beq.w	8004f6c <GNSS_RX_Update+0x20c>
		for(end = GNSS.start; end != i; end = (end + 1) % DMA_BUFFER_SIZE){
 8004dae:	3301      	adds	r3, #1
 8004db0:	425a      	negs	r2, r3
 8004db2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004db6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dba:	bf58      	it	pl
 8004dbc:	4253      	negpl	r3, r2
 8004dbe:	459b      	cmp	fp, r3
 8004dc0:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8004dc4:	d1f0      	bne.n	8004da8 <GNSS_RX_Update+0x48>
		if (GNSS.dma_buffer[end] != '\n'){break;}//if end not found, return.
 8004dc6:	2a0a      	cmp	r2, #10
 8004dc8:	f040 80cc 	bne.w	8004f64 <GNSS_RX_Update+0x204>
		for(end = GNSS.start; end != i; end = (end + 1) % DMA_BUFFER_SIZE){
 8004dcc:	465b      	mov	r3, fp
 8004dce:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8004f90 <GNSS_RX_Update+0x230>
		int counter = 0;
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	e000      	b.n	8004dd8 <GNSS_RX_Update+0x78>
			counter++;
 8004dd6:	4610      	mov	r0, r2
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 8004dd8:	1c61      	adds	r1, r4, #1
 8004dda:	424a      	negs	r2, r1
 8004ddc:	f3c2 0209 	ubfx	r2, r2, #0, #10
			GNSS.message_buffer[counter] = GNSS.dma_buffer[j];
 8004de0:	f81a e004 	ldrb.w	lr, [sl, r4]
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 8004de4:	f3c1 0409 	ubfx	r4, r1, #0, #10
 8004de8:	bf58      	it	pl
 8004dea:	4254      	negpl	r4, r2
 8004dec:	429c      	cmp	r4, r3
			GNSS.message_buffer[counter] = GNSS.dma_buffer[j];
 8004dee:	f80c ef01 	strb.w	lr, [ip, #1]!
			counter++;
 8004df2:	f100 0201 	add.w	r2, r0, #1
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 8004df6:	d1ee      	bne.n	8004dd6 <GNSS_RX_Update+0x76>
 8004df8:	3002      	adds	r0, #2
		GNSS.message_buffer[counter+1] = '\0';
 8004dfa:	eb0a 0300 	add.w	r3, sl, r0
		GNSS.message_buffer[counter] = '\n';
 8004dfe:	4452      	add	r2, sl
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8004e00:	4649      	mov	r1, r9
 8004e02:	4628      	mov	r0, r5
		GNSS.message_buffer[counter] = '\n';
 8004e04:	f882 6400 	strb.w	r6, [r2, #1024]	; 0x400
		GNSS.start = end;
 8004e08:	f8ca 4464 	str.w	r4, [sl, #1124]	; 0x464
		GNSS.message_buffer[counter+1] = '\0';
 8004e0c:	f883 7400 	strb.w	r7, [r3, #1024]	; 0x400
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8004e10:	f005 fa9f 	bl	800a352 <strstr>
		if (str != NULL){
 8004e14:	2800      	cmp	r0, #0
 8004e16:	d0bd      	beq.n	8004d94 <GNSS_RX_Update+0x34>
        fields[current_field][current_pos]='\0';
 8004e18:	2500      	movs	r5, #0
 8004e1a:	f89a 1400 	ldrb.w	r1, [sl, #1024]	; 0x400
    unsigned char* ch_ptr = msg;
 8004e1e:	4b59      	ldr	r3, [pc, #356]	; (8004f84 <GNSS_RX_Update+0x224>)
 8004e20:	aa07      	add	r2, sp, #28
    while (*ch_ptr != '\0'){
 8004e22:	2900      	cmp	r1, #0
 8004e24:	f000 80b9 	beq.w	8004f9a <GNSS_RX_Update+0x23a>
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004e28:	292c      	cmp	r1, #44	; 0x2c
 8004e2a:	f000 816c 	beq.w	8005106 <GNSS_RX_Update+0x3a6>
 8004e2e:	7858      	ldrb	r0, [r3, #1]
	        fields[current_field][current_pos] = *ch_ptr;
 8004e30:	7011      	strb	r1, [r2, #0]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004e32:	282c      	cmp	r0, #44	; 0x2c
	        ch_ptr++;
 8004e34:	f103 0101 	add.w	r1, r3, #1
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004e38:	f000 816c 	beq.w	8005114 <GNSS_RX_Update+0x3b4>
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	f000 816f 	beq.w	8005120 <GNSS_RX_Update+0x3c0>
 8004e42:	789c      	ldrb	r4, [r3, #2]
	        fields[current_field][current_pos] = *ch_ptr;
 8004e44:	7050      	strb	r0, [r2, #1]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004e46:	2c2c      	cmp	r4, #44	; 0x2c
	        ch_ptr++;
 8004e48:	f103 0102 	add.w	r1, r3, #2
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004e4c:	f000 816a 	beq.w	8005124 <GNSS_RX_Update+0x3c4>
 8004e50:	2c00      	cmp	r4, #0
 8004e52:	f000 816d 	beq.w	8005130 <GNSS_RX_Update+0x3d0>
 8004e56:	78d8      	ldrb	r0, [r3, #3]
	        fields[current_field][current_pos] = *ch_ptr;
 8004e58:	7094      	strb	r4, [r2, #2]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004e5a:	282c      	cmp	r0, #44	; 0x2c
	        ch_ptr++;
 8004e5c:	f103 0103 	add.w	r1, r3, #3
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004e60:	f000 8168 	beq.w	8005134 <GNSS_RX_Update+0x3d4>
 8004e64:	2800      	cmp	r0, #0
 8004e66:	f000 8167 	beq.w	8005138 <GNSS_RX_Update+0x3d8>
 8004e6a:	791c      	ldrb	r4, [r3, #4]
	        fields[current_field][current_pos] = *ch_ptr;
 8004e6c:	70d0      	strb	r0, [r2, #3]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004e6e:	2c2c      	cmp	r4, #44	; 0x2c
	        ch_ptr++;
 8004e70:	f103 0104 	add.w	r1, r3, #4
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004e74:	f000 8162 	beq.w	800513c <GNSS_RX_Update+0x3dc>
 8004e78:	2c00      	cmp	r4, #0
 8004e7a:	f000 8161 	beq.w	8005140 <GNSS_RX_Update+0x3e0>
 8004e7e:	7958      	ldrb	r0, [r3, #5]
	        fields[current_field][current_pos] = *ch_ptr;
 8004e80:	7114      	strb	r4, [r2, #4]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004e82:	282c      	cmp	r0, #44	; 0x2c
	        ch_ptr++;
 8004e84:	f103 0105 	add.w	r1, r3, #5
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004e88:	f000 815c 	beq.w	8005144 <GNSS_RX_Update+0x3e4>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	f000 815b 	beq.w	8005148 <GNSS_RX_Update+0x3e8>
 8004e92:	799c      	ldrb	r4, [r3, #6]
	        fields[current_field][current_pos] = *ch_ptr;
 8004e94:	7150      	strb	r0, [r2, #5]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004e96:	2c2c      	cmp	r4, #44	; 0x2c
	        ch_ptr++;
 8004e98:	f103 0106 	add.w	r1, r3, #6
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004e9c:	f000 8158 	beq.w	8005150 <GNSS_RX_Update+0x3f0>
 8004ea0:	2c00      	cmp	r4, #0
 8004ea2:	f000 8153 	beq.w	800514c <GNSS_RX_Update+0x3ec>
 8004ea6:	79d8      	ldrb	r0, [r3, #7]
	        fields[current_field][current_pos] = *ch_ptr;
 8004ea8:	7194      	strb	r4, [r2, #6]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004eaa:	282c      	cmp	r0, #44	; 0x2c
	        ch_ptr++;
 8004eac:	f103 0107 	add.w	r1, r3, #7
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004eb0:	f000 8150 	beq.w	8005154 <GNSS_RX_Update+0x3f4>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	f000 814f 	beq.w	8005158 <GNSS_RX_Update+0x3f8>
 8004eba:	7a1c      	ldrb	r4, [r3, #8]
	        fields[current_field][current_pos] = *ch_ptr;
 8004ebc:	71d0      	strb	r0, [r2, #7]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004ebe:	2c2c      	cmp	r4, #44	; 0x2c
	        ch_ptr++;
 8004ec0:	f103 0108 	add.w	r1, r3, #8
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004ec4:	f000 814a 	beq.w	800515c <GNSS_RX_Update+0x3fc>
 8004ec8:	2c00      	cmp	r4, #0
 8004eca:	f000 8149 	beq.w	8005160 <GNSS_RX_Update+0x400>
 8004ece:	7a58      	ldrb	r0, [r3, #9]
	        fields[current_field][current_pos] = *ch_ptr;
 8004ed0:	7214      	strb	r4, [r2, #8]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004ed2:	282c      	cmp	r0, #44	; 0x2c
	        ch_ptr++;
 8004ed4:	f103 0109 	add.w	r1, r3, #9
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004ed8:	f000 8144 	beq.w	8005164 <GNSS_RX_Update+0x404>
 8004edc:	2800      	cmp	r0, #0
 8004ede:	f000 8143 	beq.w	8005168 <GNSS_RX_Update+0x408>
 8004ee2:	7a9c      	ldrb	r4, [r3, #10]
	        fields[current_field][current_pos] = *ch_ptr;
 8004ee4:	7250      	strb	r0, [r2, #9]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004ee6:	2c2c      	cmp	r4, #44	; 0x2c
	        ch_ptr++;
 8004ee8:	f103 010a 	add.w	r1, r3, #10
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004eec:	f000 813e 	beq.w	800516c <GNSS_RX_Update+0x40c>
 8004ef0:	2c00      	cmp	r4, #0
 8004ef2:	f000 813d 	beq.w	8005170 <GNSS_RX_Update+0x410>
 8004ef6:	7ad8      	ldrb	r0, [r3, #11]
	        fields[current_field][current_pos] = *ch_ptr;
 8004ef8:	7294      	strb	r4, [r2, #10]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004efa:	282c      	cmp	r0, #44	; 0x2c
	        ch_ptr++;
 8004efc:	f103 010b 	add.w	r1, r3, #11
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004f00:	f000 8138 	beq.w	8005174 <GNSS_RX_Update+0x414>
 8004f04:	2800      	cmp	r0, #0
 8004f06:	f000 8137 	beq.w	8005178 <GNSS_RX_Update+0x418>
 8004f0a:	7b1c      	ldrb	r4, [r3, #12]
	        fields[current_field][current_pos] = *ch_ptr;
 8004f0c:	72d0      	strb	r0, [r2, #11]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004f0e:	2c2c      	cmp	r4, #44	; 0x2c
	        ch_ptr++;
 8004f10:	f103 010c 	add.w	r1, r3, #12
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004f14:	f000 8132 	beq.w	800517c <GNSS_RX_Update+0x41c>
 8004f18:	2c00      	cmp	r4, #0
 8004f1a:	d03b      	beq.n	8004f94 <GNSS_RX_Update+0x234>
 8004f1c:	7b58      	ldrb	r0, [r3, #13]
	        ch_ptr++;
 8004f1e:	f103 010d 	add.w	r1, r3, #13
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004f22:	282c      	cmp	r0, #44	; 0x2c
	        fields[current_field][current_pos] = *ch_ptr;
 8004f24:	7314      	strb	r4, [r2, #12]
	        current_pos++;
 8004f26:	f04f 030d 	mov.w	r3, #13
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004f2a:	d006      	beq.n	8004f3a <GNSS_RX_Update+0x1da>
 8004f2c:	b398      	cbz	r0, 8004f96 <GNSS_RX_Update+0x236>
	        fields[current_field][current_pos] = *ch_ptr;
 8004f2e:	54d0      	strb	r0, [r2, r3]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004f30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	        current_pos++;
 8004f34:	3301      	adds	r3, #1
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004f36:	282c      	cmp	r0, #44	; 0x2c
 8004f38:	d1f8      	bne.n	8004f2c <GNSS_RX_Update+0x1cc>
        fields[current_field][current_pos]='\0';
 8004f3a:	54d5      	strb	r5, [r2, r3]
	        ch_ptr++;
 8004f3c:	1c4b      	adds	r3, r1, #1
 8004f3e:	320c      	adds	r2, #12
 8004f40:	7849      	ldrb	r1, [r1, #1]
 8004f42:	e76e      	b.n	8004e22 <GNSS_RX_Update+0xc2>
				if (GNSS.dma_buffer[GNSS.start] == '$'){
 8004f44:	f81a 3004 	ldrb.w	r3, [sl, r4]
 8004f48:	2b24      	cmp	r3, #36	; 0x24
 8004f4a:	d015      	beq.n	8004f78 <GNSS_RX_Update+0x218>
			for(;GNSS.start != i;GNSS.start = (GNSS.start + 1) % DMA_BUFFER_SIZE){
 8004f4c:	3401      	adds	r4, #1
 8004f4e:	4263      	negs	r3, r4
 8004f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f54:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004f58:	bf58      	it	pl
 8004f5a:	425c      	negpl	r4, r3
 8004f5c:	455c      	cmp	r4, fp
 8004f5e:	d1f1      	bne.n	8004f44 <GNSS_RX_Update+0x1e4>
 8004f60:	f8ca 4464 	str.w	r4, [sl, #1124]	; 0x464
			new_information = 1;
		}
	}

	return new_information;
}
 8004f64:	4640      	mov	r0, r8
 8004f66:	b035      	add	sp, #212	; 0xd4
 8004f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 8004f6c:	42a3      	cmp	r3, r4
 8004f6e:	f47f af2e 	bne.w	8004dce <GNSS_RX_Update+0x6e>
 8004f72:	2001      	movs	r0, #1
		int counter = 0;
 8004f74:	2200      	movs	r2, #0
 8004f76:	e740      	b.n	8004dfa <GNSS_RX_Update+0x9a>
 8004f78:	f8ca 4464 	str.w	r4, [sl, #1124]	; 0x464
 8004f7c:	e712      	b.n	8004da4 <GNSS_RX_Update+0x44>
 8004f7e:	bf00      	nop
 8004f80:	20000d10 	.word	0x20000d10
 8004f84:	20000c50 	.word	0x20000c50
 8004f88:	20000850 	.word	0x20000850
 8004f8c:	0800ec90 	.word	0x0800ec90
 8004f90:	20000c4f 	.word	0x20000c4f
	        current_pos++;
 8004f94:	230c      	movs	r3, #12
        fields[current_field][current_pos]='\0';
 8004f96:	2100      	movs	r1, #0
 8004f98:	54d1      	strb	r1, [r2, r3]
			sscanf(fields[1],"%2d%2d%2d.%3d",&GNSS.GNGGA.UTC_Hour,&GNSS.GNGGA.UTC_Min,&GNSS.GNGGA.UTC_Second,&GNSS.GNGGA.UTC_Millis);
 8004f9a:	4b79      	ldr	r3, [pc, #484]	; (8005180 <GNSS_RX_Update+0x420>)
 8004f9c:	4979      	ldr	r1, [pc, #484]	; (8005184 <GNSS_RX_Update+0x424>)
 8004f9e:	f103 0208 	add.w	r2, r3, #8
 8004fa2:	9201      	str	r2, [sp, #4]
 8004fa4:	9a03      	ldr	r2, [sp, #12]
 8004fa6:	a80a      	add	r0, sp, #40	; 0x28
 8004fa8:	9200      	str	r2, [sp, #0]
 8004faa:	1f1a      	subs	r2, r3, #4
 8004fac:	f005 f994 	bl	800a2d8 <siscanf>
			GNSS.GNGGA.lat_raw = atof(fields[2]);
 8004fb0:	a80d      	add	r0, sp, #52	; 0x34
 8004fb2:	f005 f923 	bl	800a1fc <atof>
 8004fb6:	f7fb fd87 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.North_South = fields[3][0];
 8004fba:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
			GNSS.GNGGA.lat_raw = atof(fields[2]);
 8004fbe:	f8ca 0478 	str.w	r0, [sl, #1144]	; 0x478
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 8004fc2:	a813      	add	r0, sp, #76	; 0x4c
			GNSS.GNGGA.North_South = fields[3][0];
 8004fc4:	f88a 3488 	strb.w	r3, [sl, #1160]	; 0x488
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 8004fc8:	f005 f918 	bl	800a1fc <atof>
 8004fcc:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 800519c <GNSS_RX_Update+0x43c>
			GNSS.GNGGA.East_West = fields[5][0];
 8004fd0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 8004fd4:	e9c8 0100 	strd	r0, r1, [r8]
			GNSS.GNGGA.status = atoi(fields[6]);
 8004fd8:	a819      	add	r0, sp, #100	; 0x64
			GNSS.GNGGA.East_West = fields[5][0];
 8004fda:	f88a 34a0 	strb.w	r3, [sl, #1184]	; 0x4a0
			GNSS.GNGGA.status = atoi(fields[6]);
 8004fde:	f005 f910 	bl	800a202 <atoi>
 8004fe2:	f8ca 04a4 	str.w	r0, [sl, #1188]	; 0x4a4
			GNSS.GNGGA.num_sat = atoi(fields[7]);
 8004fe6:	a81c      	add	r0, sp, #112	; 0x70
 8004fe8:	f005 f90b 	bl	800a202 <atoi>
 8004fec:	f8ca 04a8 	str.w	r0, [sl, #1192]	; 0x4a8
			GNSS.GNGGA.HDOP = atof(fields[8]);
 8004ff0:	a81f      	add	r0, sp, #124	; 0x7c
 8004ff2:	f005 f903 	bl	800a1fc <atof>
 8004ff6:	f7fb fd67 	bl	8000ac8 <__aeabi_d2f>
 8004ffa:	f8ca 04ac 	str.w	r0, [sl, #1196]	; 0x4ac
			GNSS.GNGGA.MSL_alt = atof(fields[9]);
 8004ffe:	a822      	add	r0, sp, #136	; 0x88
 8005000:	f005 f8fc 	bl	800a1fc <atof>
 8005004:	f7fb fd60 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.MSL_Unit = fields[10][0];
 8005008:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
			GNSS.GNGGA.MSL_alt = atof(fields[9]);
 800500c:	f8ca 04b0 	str.w	r0, [sl, #1200]	; 0x4b0
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 8005010:	a828      	add	r0, sp, #160	; 0xa0
			GNSS.GNGGA.MSL_Unit = fields[10][0];
 8005012:	f88a 34b4 	strb.w	r3, [sl, #1204]	; 0x4b4
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 8005016:	f005 f8f1 	bl	800a1fc <atof>
 800501a:	f7fb fd55 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 800501e:	f8da 4478 	ldr.w	r4, [sl, #1144]	; 0x478
			GNSS.GNGGA.checksum[0] = fields[14][1];//fields[14][0] is always '*'
 8005022:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
			GNSS.GNGGA.checksum[1] = fields[14][2];
 8005026:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
			GNSS.GNGGA.Geoid_Unit = fields[12][0];
 800502a:	f89d 10ac 	ldrb.w	r1, [sp, #172]	; 0xac
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 800502e:	f8ca 04b8 	str.w	r0, [sl, #1208]	; 0x4b8
			GNSS.GNGGA.checksum[0] = fields[14][1];//fields[14][0] is always '*'
 8005032:	f88a 24bd 	strb.w	r2, [sl, #1213]	; 0x4bd
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 8005036:	4620      	mov	r0, r4
			GNSS.GNGGA.checksum[1] = fields[14][2];
 8005038:	f88a 34be 	strb.w	r3, [sl, #1214]	; 0x4be
			GNSS.GNGGA.Geoid_Unit = fields[12][0];
 800503c:	f88a 14bc 	strb.w	r1, [sl, #1212]	; 0x4bc
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 8005040:	f7fb f9f2 	bl	8000428 <__aeabi_f2d>
	return ((int)raw / 100) + (fmod(raw,100)/60);
 8005044:	2200      	movs	r2, #0
 8005046:	4b50      	ldr	r3, [pc, #320]	; (8005188 <GNSS_RX_Update+0x428>)
 8005048:	f007 fd8a 	bl	800cb60 <fmod>
 800504c:	4606      	mov	r6, r0
 800504e:	4620      	mov	r0, r4
 8005050:	460f      	mov	r7, r1
 8005052:	f7fc f85d 	bl	8001110 <__aeabi_f2iz>
 8005056:	4b4d      	ldr	r3, [pc, #308]	; (800518c <GNSS_RX_Update+0x42c>)
 8005058:	fb83 2300 	smull	r2, r3, r3, r0
 800505c:	17c0      	asrs	r0, r0, #31
 800505e:	ebc0 1063 	rsb	r0, r0, r3, asr #5
 8005062:	f7fb f9cf 	bl	8000404 <__aeabi_i2d>
 8005066:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800506a:	4604      	mov	r4, r0
 800506c:	460d      	mov	r5, r1
 800506e:	4b48      	ldr	r3, [pc, #288]	; (8005190 <GNSS_RX_Update+0x430>)
 8005070:	4630      	mov	r0, r6
 8005072:	4639      	mov	r1, r7
 8005074:	f7fb fa30 	bl	80004d8 <__aeabi_dmul>
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	4620      	mov	r0, r4
 800507e:	4629      	mov	r1, r5
 8005080:	f7fb f874 	bl	800016c <__adddf3>
			GNSS.GNGGA.lon = convert_raw_lat_lon(GNSS.GNGGA.lon_raw);
 8005084:	e9d8 6700 	ldrd	r6, r7, [r8]
	return ((int)raw / 100) + (fmod(raw,100)/60);
 8005088:	2200      	movs	r2, #0
 800508a:	460c      	mov	r4, r1
 800508c:	4605      	mov	r5, r0
 800508e:	4b3e      	ldr	r3, [pc, #248]	; (8005188 <GNSS_RX_Update+0x428>)
 8005090:	4630      	mov	r0, r6
 8005092:	4639      	mov	r1, r7
 8005094:	f007 fd64 	bl	800cb60 <fmod>
 8005098:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800509c:	4639      	mov	r1, r7
 800509e:	4630      	mov	r0, r6
 80050a0:	f7fb fcca 	bl	8000a38 <__aeabi_d2iz>
 80050a4:	4b39      	ldr	r3, [pc, #228]	; (800518c <GNSS_RX_Update+0x42c>)
			new_information = 1;
 80050a6:	f04f 0801 	mov.w	r8, #1
	return ((int)raw / 100) + (fmod(raw,100)/60);
 80050aa:	fb83 2300 	smull	r2, r3, r3, r0
 80050ae:	17c0      	asrs	r0, r0, #31
 80050b0:	ebc0 1063 	rsb	r0, r0, r3, asr #5
 80050b4:	f7fb f9a6 	bl	8000404 <__aeabi_i2d>
 80050b8:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80050bc:	4606      	mov	r6, r0
 80050be:	460f      	mov	r7, r1
 80050c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050c4:	4b32      	ldr	r3, [pc, #200]	; (8005190 <GNSS_RX_Update+0x430>)
 80050c6:	f7fb fa07 	bl	80004d8 <__aeabi_dmul>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	4630      	mov	r0, r6
 80050d0:	4639      	mov	r1, r7
 80050d2:	f7fb f84b 	bl	800016c <__adddf3>
			GNSS.GNGGA.lat = GNSS.GNGGA.North_South == 'N' ? GNSS.GNGGA.lat : -GNSS.GNGGA.lat;
 80050d6:	f89a 3488 	ldrb.w	r3, [sl, #1160]	; 0x488
 80050da:	4a2e      	ldr	r2, [pc, #184]	; (8005194 <GNSS_RX_Update+0x434>)
 80050dc:	2b4e      	cmp	r3, #78	; 0x4e
 80050de:	bf18      	it	ne
 80050e0:	f104 4400 	addne.w	r4, r4, #2147483648	; 0x80000000
 80050e4:	4623      	mov	r3, r4
 80050e6:	462c      	mov	r4, r5
 80050e8:	461d      	mov	r5, r3
			GNSS.GNGGA.lon = GNSS.GNGGA.East_West == 'E' ? GNSS.GNGGA.lon : -GNSS.GNGGA.lon;
 80050ea:	f89a 34a0 	ldrb.w	r3, [sl, #1184]	; 0x4a0
			GNSS.GNGGA.lat = GNSS.GNGGA.North_South == 'N' ? GNSS.GNGGA.lat : -GNSS.GNGGA.lat;
 80050ee:	e9c2 4500 	strd	r4, r5, [r2]
			GNSS.GNGGA.lon = GNSS.GNGGA.East_West == 'E' ? GNSS.GNGGA.lon : -GNSS.GNGGA.lon;
 80050f2:	2b45      	cmp	r3, #69	; 0x45
 80050f4:	bf18      	it	ne
 80050f6:	f101 4100 	addne.w	r1, r1, #2147483648	; 0x80000000
 80050fa:	460b      	mov	r3, r1
 80050fc:	4602      	mov	r2, r0
 80050fe:	4926      	ldr	r1, [pc, #152]	; (8005198 <GNSS_RX_Update+0x438>)
 8005100:	e9c1 2300 	strd	r2, r3, [r1]
 8005104:	e641      	b.n	8004d8a <GNSS_RX_Update+0x2a>
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8005106:	4619      	mov	r1, r3
        current_pos = 0;
 8005108:	2300      	movs	r3, #0
        fields[current_field][current_pos]='\0';
 800510a:	54d5      	strb	r5, [r2, r3]
	        ch_ptr++;
 800510c:	1c4b      	adds	r3, r1, #1
 800510e:	320c      	adds	r2, #12
 8005110:	7849      	ldrb	r1, [r1, #1]
 8005112:	e686      	b.n	8004e22 <GNSS_RX_Update+0xc2>
	        current_pos++;
 8005114:	2301      	movs	r3, #1
        fields[current_field][current_pos]='\0';
 8005116:	54d5      	strb	r5, [r2, r3]
	        ch_ptr++;
 8005118:	1c4b      	adds	r3, r1, #1
 800511a:	320c      	adds	r2, #12
 800511c:	7849      	ldrb	r1, [r1, #1]
 800511e:	e680      	b.n	8004e22 <GNSS_RX_Update+0xc2>
	        current_pos++;
 8005120:	2301      	movs	r3, #1
 8005122:	e738      	b.n	8004f96 <GNSS_RX_Update+0x236>
 8005124:	2302      	movs	r3, #2
        fields[current_field][current_pos]='\0';
 8005126:	54d5      	strb	r5, [r2, r3]
	        ch_ptr++;
 8005128:	1c4b      	adds	r3, r1, #1
 800512a:	320c      	adds	r2, #12
 800512c:	7849      	ldrb	r1, [r1, #1]
 800512e:	e678      	b.n	8004e22 <GNSS_RX_Update+0xc2>
	        current_pos++;
 8005130:	2302      	movs	r3, #2
 8005132:	e730      	b.n	8004f96 <GNSS_RX_Update+0x236>
 8005134:	2303      	movs	r3, #3
 8005136:	e700      	b.n	8004f3a <GNSS_RX_Update+0x1da>
 8005138:	2303      	movs	r3, #3
 800513a:	e72c      	b.n	8004f96 <GNSS_RX_Update+0x236>
 800513c:	2304      	movs	r3, #4
 800513e:	e6fc      	b.n	8004f3a <GNSS_RX_Update+0x1da>
 8005140:	2304      	movs	r3, #4
 8005142:	e728      	b.n	8004f96 <GNSS_RX_Update+0x236>
 8005144:	2305      	movs	r3, #5
 8005146:	e6f8      	b.n	8004f3a <GNSS_RX_Update+0x1da>
 8005148:	2305      	movs	r3, #5
 800514a:	e724      	b.n	8004f96 <GNSS_RX_Update+0x236>
 800514c:	2306      	movs	r3, #6
 800514e:	e722      	b.n	8004f96 <GNSS_RX_Update+0x236>
 8005150:	2306      	movs	r3, #6
 8005152:	e6f2      	b.n	8004f3a <GNSS_RX_Update+0x1da>
 8005154:	2307      	movs	r3, #7
 8005156:	e6f0      	b.n	8004f3a <GNSS_RX_Update+0x1da>
 8005158:	2307      	movs	r3, #7
 800515a:	e71c      	b.n	8004f96 <GNSS_RX_Update+0x236>
 800515c:	2308      	movs	r3, #8
 800515e:	e6ec      	b.n	8004f3a <GNSS_RX_Update+0x1da>
 8005160:	2308      	movs	r3, #8
 8005162:	e718      	b.n	8004f96 <GNSS_RX_Update+0x236>
 8005164:	2309      	movs	r3, #9
 8005166:	e6e8      	b.n	8004f3a <GNSS_RX_Update+0x1da>
 8005168:	2309      	movs	r3, #9
 800516a:	e714      	b.n	8004f96 <GNSS_RX_Update+0x236>
 800516c:	230a      	movs	r3, #10
 800516e:	e6e4      	b.n	8004f3a <GNSS_RX_Update+0x1da>
 8005170:	230a      	movs	r3, #10
 8005172:	e710      	b.n	8004f96 <GNSS_RX_Update+0x236>
 8005174:	230b      	movs	r3, #11
 8005176:	e6e0      	b.n	8004f3a <GNSS_RX_Update+0x1da>
 8005178:	230b      	movs	r3, #11
 800517a:	e70c      	b.n	8004f96 <GNSS_RX_Update+0x236>
 800517c:	230c      	movs	r3, #12
 800517e:	e6dc      	b.n	8004f3a <GNSS_RX_Update+0x1da>
 8005180:	20000cbc 	.word	0x20000cbc
 8005184:	0800ec98 	.word	0x0800ec98
 8005188:	40590000 	.word	0x40590000
 800518c:	51eb851f 	.word	0x51eb851f
 8005190:	3f911111 	.word	0x3f911111
 8005194:	20000cd0 	.word	0x20000cd0
 8005198:	20000ce8 	.word	0x20000ce8
 800519c:	20000ce0 	.word	0x20000ce0

080051a0 <I2C_read>:
 *      Author: yuche
 */

#include "i2c.h"

uint8_t I2C_read(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* output){
 80051a0:	b530      	push	{r4, r5, lr}
	int state = HAL_I2C_Mem_Read(i2cx,target_address << 1,register_address,sizeof(register_address),output,length,20);//timeout is magic. Do not touch
 80051a2:	2514      	movs	r5, #20
uint8_t I2C_read(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* output){
 80051a4:	b085      	sub	sp, #20
 80051a6:	9c08      	ldr	r4, [sp, #32]
	int state = HAL_I2C_Mem_Read(i2cx,target_address << 1,register_address,sizeof(register_address),output,length,20);//timeout is magic. Do not touch
 80051a8:	9301      	str	r3, [sp, #4]
 80051aa:	0049      	lsls	r1, r1, #1
 80051ac:	9502      	str	r5, [sp, #8]
 80051ae:	9400      	str	r4, [sp, #0]
 80051b0:	2301      	movs	r3, #1
 80051b2:	f001 fbb9 	bl	8006928 <HAL_I2C_Mem_Read>
	if (state != HAL_OK){
 80051b6:	b100      	cbz	r0, 80051ba <I2C_read+0x1a>
		__NOP();
 80051b8:	bf00      	nop
	}
	return state;
}
 80051ba:	b005      	add	sp, #20
 80051bc:	bd30      	pop	{r4, r5, pc}
 80051be:	bf00      	nop

080051c0 <I2C_write>:

uint8_t I2C_write(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* input){
 80051c0:	b530      	push	{r4, r5, lr}
	int state =  HAL_I2C_Mem_Write(i2cx,target_address << 1,register_address,sizeof(register_address),input,length,20);//timeout is magic. Do not touch
 80051c2:	2514      	movs	r5, #20
uint8_t I2C_write(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* input){
 80051c4:	b085      	sub	sp, #20
 80051c6:	9c08      	ldr	r4, [sp, #32]
	int state =  HAL_I2C_Mem_Write(i2cx,target_address << 1,register_address,sizeof(register_address),input,length,20);//timeout is magic. Do not touch
 80051c8:	9301      	str	r3, [sp, #4]
 80051ca:	0049      	lsls	r1, r1, #1
 80051cc:	9502      	str	r5, [sp, #8]
 80051ce:	9400      	str	r4, [sp, #0]
 80051d0:	2301      	movs	r3, #1
 80051d2:	f001 fa8d 	bl	80066f0 <HAL_I2C_Mem_Write>
	if (state != HAL_OK){
 80051d6:	b100      	cbz	r0, 80051da <I2C_write+0x1a>
			__NOP();
 80051d8:	bf00      	nop
		}
	return state;
}
 80051da:	b005      	add	sp, #20
 80051dc:	bd30      	pop	{r4, r5, pc}
 80051de:	bf00      	nop

080051e0 <led_update>:
#include "stm32f1xx_hal.h"

uint8_t led_pattern = LED_DISCONNECTED;
uint8_t led_state = 0;

void led_update(){
 80051e0:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,  1 - (led_pattern>>led_state) & 0x01);
 80051e2:	4b0a      	ldr	r3, [pc, #40]	; (800520c <led_update+0x2c>)
 80051e4:	4c0a      	ldr	r4, [pc, #40]	; (8005210 <led_update+0x30>)
 80051e6:	781a      	ldrb	r2, [r3, #0]
 80051e8:	7823      	ldrb	r3, [r4, #0]
 80051ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051ee:	411a      	asrs	r2, r3
 80051f0:	f1c2 0201 	rsb	r2, r2, #1
 80051f4:	f002 0201 	and.w	r2, r2, #1
 80051f8:	4806      	ldr	r0, [pc, #24]	; (8005214 <led_update+0x34>)
 80051fa:	f000 ff9d 	bl	8006138 <HAL_GPIO_WritePin>
	led_state++;
 80051fe:	7823      	ldrb	r3, [r4, #0]
 8005200:	3301      	adds	r3, #1
	led_state = led_state % 8;
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	7023      	strb	r3, [r4, #0]
}
 8005208:	bd10      	pop	{r4, pc}
 800520a:	bf00      	nop
 800520c:	200003bc 	.word	0x200003bc
 8005210:	200003bd 	.word	0x200003bd
 8005214:	40011000 	.word	0x40011000

08005218 <led_set>:

void led_set(uint8_t led_pattern_){
	led_pattern = led_pattern_;
 8005218:	4b01      	ldr	r3, [pc, #4]	; (8005220 <led_set+0x8>)
 800521a:	7018      	strb	r0, [r3, #0]
}
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	200003bc 	.word	0x200003bc

08005224 <mpu_set_i2c>:

enum MPU9250_GYRO_FSR gyro_fsr = MPU9250_NUM_GYRO_FSR;
enum MPU9250_ACCEL_FSR accel_fsr = MPU9250_NUM_ACCEL_FSR;

void mpu_set_i2c(I2C_HandleTypeDef* i2cx){
	mpu_i2cx = i2cx;
 8005224:	4b01      	ldr	r3, [pc, #4]	; (800522c <mpu_set_i2c+0x8>)
 8005226:	6018      	str	r0, [r3, #0]
}
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	200005f0 	.word	0x200005f0

08005230 <i2c_write>:
}

// Functions implemented for this platform(STM32F103) for DMP

int i2c_write(unsigned char slave_addr, unsigned char reg_addr,
		unsigned char length, unsigned char const *data){
 8005230:	b510      	push	{r4, lr}
	return I2C_write(mpu_i2cx,slave_addr,reg_addr,length,data);
 8005232:	4c06      	ldr	r4, [pc, #24]	; (800524c <i2c_write+0x1c>)
		unsigned char length, unsigned char const *data){
 8005234:	b082      	sub	sp, #8
	return I2C_write(mpu_i2cx,slave_addr,reg_addr,length,data);
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	6824      	ldr	r4, [r4, #0]
 800523a:	4613      	mov	r3, r2
 800523c:	460a      	mov	r2, r1
 800523e:	4601      	mov	r1, r0
 8005240:	4620      	mov	r0, r4
 8005242:	f7ff ffbd 	bl	80051c0 <I2C_write>
}
 8005246:	b002      	add	sp, #8
 8005248:	bd10      	pop	{r4, pc}
 800524a:	bf00      	nop
 800524c:	200005f0 	.word	0x200005f0

08005250 <i2c_read>:

int i2c_read(unsigned char slave_addr, unsigned char reg_addr,
		unsigned char length, unsigned char *data){
 8005250:	b510      	push	{r4, lr}
	return I2C_read(mpu_i2cx,slave_addr,reg_addr,length,data);
 8005252:	4c06      	ldr	r4, [pc, #24]	; (800526c <i2c_read+0x1c>)
		unsigned char length, unsigned char *data){
 8005254:	b082      	sub	sp, #8
	return I2C_read(mpu_i2cx,slave_addr,reg_addr,length,data);
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	6824      	ldr	r4, [r4, #0]
 800525a:	4613      	mov	r3, r2
 800525c:	460a      	mov	r2, r1
 800525e:	4601      	mov	r1, r0
 8005260:	4620      	mov	r0, r4
 8005262:	f7ff ff9d 	bl	80051a0 <I2C_read>
}
 8005266:	b002      	add	sp, #8
 8005268:	bd10      	pop	{r4, pc}
 800526a:	bf00      	nop
 800526c:	200005f0 	.word	0x200005f0

08005270 <delay_ms>:

void delay_ms(unsigned long num_ms){
	delay(num_ms);
 8005270:	f000 bc80 	b.w	8005b74 <delay>

08005274 <get_ms>:
}

unsigned long get_ms(unsigned long *count){
 8005274:	b510      	push	{r4, lr}
 8005276:	4604      	mov	r4, r0
	*count = millis();
 8005278:	f000 fc76 	bl	8005b68 <millis>
 800527c:	6020      	str	r0, [r4, #0]
}
 800527e:	4618      	mov	r0, r3
 8005280:	bd10      	pop	{r4, pc}
 8005282:	bf00      	nop

08005284 <ms5611_set_i2c>:
/**
 * select a hal I2C to talk to MS5611
 * @param i2cx The i2c port to talk to MS5611
 */
void ms5611_set_i2c(I2C_HandleTypeDef* i2cx){
	ms5611_i2cx = i2cx;
 8005284:	4b01      	ldr	r3, [pc, #4]	; (800528c <ms5611_set_i2c+0x8>)
 8005286:	6018      	str	r0, [r3, #0]
}
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	200007d4 	.word	0x200007d4

08005290 <ms5611_init>:
/**
 * Initialize MS5611: read and store factory calibration data.
 *
 * request ADC to start convert temperature data
 */
void ms5611_init(){
 8005290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005292:	24a2      	movs	r4, #162	; 0xa2
 8005294:	b085      	sub	sp, #20
 8005296:	4d39      	ldr	r5, [pc, #228]	; (800537c <ms5611_init+0xec>)
 8005298:	4f39      	ldr	r7, [pc, #228]	; (8005380 <ms5611_init+0xf0>)
 800529a:	ae03      	add	r6, sp, #12
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 800529c:	4622      	mov	r2, r4
 800529e:	6838      	ldr	r0, [r7, #0]
 80052a0:	2302      	movs	r3, #2
 80052a2:	9600      	str	r6, [sp, #0]
 80052a4:	2177      	movs	r1, #119	; 0x77
 80052a6:	f7ff ff7b 	bl	80051a0 <I2C_read>
 80052aa:	3402      	adds	r4, #2
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
		uint8_t reg_addr = MS5611_CMD_READ_PROM + (i << 1);//interval 2
		uint8_t buffer[2];
		ms5611_read_i2c(reg_addr,2,buffer);

		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 80052ac:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80052b0:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80052b4:	b2e4      	uxtb	r4, r4
 80052b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 80052ba:	2cae      	cmp	r4, #174	; 0xae
		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 80052bc:	f825 3b02 	strh.w	r3, [r5], #2
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 80052c0:	d1ec      	bne.n	800529c <ms5611_init+0xc>
/**
 * Start ADC conversion of raw temperature in MS5611.
 * The ADC data can be read 9.02ms later
 */
void ms5611_request_temperature(){
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80052c2:	2400      	movs	r4, #0
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 80052c4:	4d2f      	ldr	r5, [pc, #188]	; (8005384 <ms5611_init+0xf4>)
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80052c6:	4623      	mov	r3, r4
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 80052c8:	782a      	ldrb	r2, [r5, #0]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80052ca:	6838      	ldr	r0, [r7, #0]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 80052cc:	0052      	lsls	r2, r2, #1
 80052ce:	f042 0250 	orr.w	r2, r2, #80	; 0x50
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80052d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052d6:	2177      	movs	r1, #119	; 0x77
 80052d8:	9600      	str	r6, [sp, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80052da:	f8ad 400c 	strh.w	r4, [sp, #12]
 80052de:	f88d 400e 	strb.w	r4, [sp, #14]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80052e2:	f7ff ff6d 	bl	80051c0 <I2C_write>
 * Read raw temperature from MS5611.
 */
void ms5611_update_temperature(){

	ms5611_request_temperature();
	delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 80052e6:	200c      	movs	r0, #12
 80052e8:	f000 fc44 	bl	8005b74 <delay>
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 80052ec:	4622      	mov	r2, r4
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80052ee:	f8ad 400c 	strh.w	r4, [sp, #12]
 80052f2:	f88d 400e 	strb.w	r4, [sp, #14]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80052f6:	2400      	movs	r4, #0
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 80052f8:	6838      	ldr	r0, [r7, #0]
 80052fa:	2303      	movs	r3, #3
 80052fc:	9600      	str	r6, [sp, #0]
 80052fe:	2177      	movs	r1, #119	; 0x77
 8005300:	f7ff ff4e 	bl	80051a0 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8005304:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8005308:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800530c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8005310:	021b      	lsls	r3, r3, #8
 8005312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (temp != 0){
 8005316:	4313      	orrs	r3, r2
		raw_temperature = temp;
 8005318:	bf18      	it	ne
 800531a:	4a1b      	ldrne	r2, [pc, #108]	; (8005388 <ms5611_init+0xf8>)
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 800531c:	6838      	ldr	r0, [r7, #0]
		raw_temperature = temp;
 800531e:	bf18      	it	ne
 8005320:	6013      	strne	r3, [r2, #0]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8005322:	782a      	ldrb	r2, [r5, #0]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8005324:	4623      	mov	r3, r4
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8005326:	0052      	lsls	r2, r2, #1
 8005328:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 800532c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005330:	2177      	movs	r1, #119	; 0x77
 8005332:	9600      	str	r6, [sp, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8005334:	f8ad 400c 	strh.w	r4, [sp, #12]
 8005338:	f88d 400e 	strb.w	r4, [sp, #14]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 800533c:	f7ff ff40 	bl	80051c0 <I2C_write>
	delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8005340:	200c      	movs	r0, #12
 8005342:	f000 fc17 	bl	8005b74 <delay>
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8005346:	6838      	ldr	r0, [r7, #0]
 8005348:	4622      	mov	r2, r4
 800534a:	9600      	str	r6, [sp, #0]
 800534c:	2303      	movs	r3, #3
 800534e:	2177      	movs	r1, #119	; 0x77
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8005350:	f8ad 400c 	strh.w	r4, [sp, #12]
 8005354:	f88d 400e 	strb.w	r4, [sp, #14]
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8005358:	f7ff ff22 	bl	80051a0 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 800535c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8005360:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8005364:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8005368:	021b      	lsls	r3, r3, #8
 800536a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (temp != 0){
 800536e:	4313      	orrs	r3, r2
		raw_pressure = temp;
 8005370:	bf1c      	itt	ne
 8005372:	4a06      	ldrne	r2, [pc, #24]	; (800538c <ms5611_init+0xfc>)
 8005374:	6013      	strne	r3, [r2, #0]
}
 8005376:	b005      	add	sp, #20
 8005378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800537a:	bf00      	nop
 800537c:	20000d18 	.word	0x20000d18
 8005380:	200007d4 	.word	0x200007d4
 8005384:	2000003c 	.word	0x2000003c
 8005388:	20000d24 	.word	0x20000d24
 800538c:	20000d14 	.word	0x20000d14

08005390 <ms5611_update>:
}

/**
 *	Read raw temperature and pressure from MS5611
 */
void ms5611_update(){
 8005390:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8005392:	2400      	movs	r4, #0
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8005394:	4f2f      	ldr	r7, [pc, #188]	; (8005454 <ms5611_update+0xc4>)
void ms5611_update(){
 8005396:	b085      	sub	sp, #20
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8005398:	783a      	ldrb	r2, [r7, #0]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 800539a:	4e2f      	ldr	r6, [pc, #188]	; (8005458 <ms5611_update+0xc8>)
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 800539c:	0052      	lsls	r2, r2, #1
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 800539e:	ad03      	add	r5, sp, #12
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 80053a0:	f042 0250 	orr.w	r2, r2, #80	; 0x50
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80053a4:	4623      	mov	r3, r4
 80053a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053aa:	2177      	movs	r1, #119	; 0x77
 80053ac:	6830      	ldr	r0, [r6, #0]
 80053ae:	9500      	str	r5, [sp, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80053b0:	f8ad 400c 	strh.w	r4, [sp, #12]
 80053b4:	f88d 400e 	strb.w	r4, [sp, #14]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80053b8:	f7ff ff02 	bl	80051c0 <I2C_write>
	delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 80053bc:	200c      	movs	r0, #12
 80053be:	f000 fbd9 	bl	8005b74 <delay>
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 80053c2:	4622      	mov	r2, r4
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80053c4:	f8ad 400c 	strh.w	r4, [sp, #12]
 80053c8:	f88d 400e 	strb.w	r4, [sp, #14]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80053cc:	2400      	movs	r4, #0
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 80053ce:	6830      	ldr	r0, [r6, #0]
 80053d0:	9500      	str	r5, [sp, #0]
 80053d2:	2303      	movs	r3, #3
 80053d4:	2177      	movs	r1, #119	; 0x77
 80053d6:	f7ff fee3 	bl	80051a0 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 80053da:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80053de:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80053e2:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (temp != 0){
 80053ec:	4313      	orrs	r3, r2
		raw_temperature = temp;
 80053ee:	bf18      	it	ne
 80053f0:	4a1a      	ldrne	r2, [pc, #104]	; (800545c <ms5611_update+0xcc>)
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80053f2:	f04f 0177 	mov.w	r1, #119	; 0x77
		raw_temperature = temp;
 80053f6:	bf18      	it	ne
 80053f8:	6013      	strne	r3, [r2, #0]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80053fa:	783a      	ldrb	r2, [r7, #0]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80053fc:	4623      	mov	r3, r4
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80053fe:	0052      	lsls	r2, r2, #1
 8005400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8005404:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005408:	6830      	ldr	r0, [r6, #0]
 800540a:	9500      	str	r5, [sp, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 800540c:	f8ad 400c 	strh.w	r4, [sp, #12]
 8005410:	f88d 400e 	strb.w	r4, [sp, #14]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8005414:	f7ff fed4 	bl	80051c0 <I2C_write>
	delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8005418:	200c      	movs	r0, #12
 800541a:	f000 fbab 	bl	8005b74 <delay>
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 800541e:	4622      	mov	r2, r4
 8005420:	6830      	ldr	r0, [r6, #0]
 8005422:	9500      	str	r5, [sp, #0]
 8005424:	2303      	movs	r3, #3
 8005426:	2177      	movs	r1, #119	; 0x77
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8005428:	f8ad 400c 	strh.w	r4, [sp, #12]
 800542c:	f88d 400e 	strb.w	r4, [sp, #14]
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8005430:	f7ff feb6 	bl	80051a0 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8005434:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8005438:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800543c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8005440:	021b      	lsls	r3, r3, #8
 8005442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (temp != 0){
 8005446:	4313      	orrs	r3, r2
		raw_pressure = temp;
 8005448:	bf1c      	itt	ne
 800544a:	4a05      	ldrne	r2, [pc, #20]	; (8005460 <ms5611_update+0xd0>)
 800544c:	6013      	strne	r3, [r2, #0]
	ms5611_update_temperature();
	ms5611_update_pressure();
}
 800544e:	b005      	add	sp, #20
 8005450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005452:	bf00      	nop
 8005454:	2000003c 	.word	0x2000003c
 8005458:	200007d4 	.word	0x200007d4
 800545c:	20000d24 	.word	0x20000d24
 8005460:	20000d14 	.word	0x20000d14
 8005464:	00000000 	.word	0x00000000

08005468 <ms5611_get_pressure>:

/**
 * Get calibrated pressure, unit: mBar
 * @return calibrated pressure
 */
double ms5611_get_pressure(){
 8005468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 800546c:	4b74      	ldr	r3, [pc, #464]	; (8005640 <ms5611_get_pressure+0x1d8>)
 800546e:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8005664 <ms5611_get_pressure+0x1fc>
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	f8b8 3008 	ldrh.w	r3, [r8, #8]
double ms5611_get_pressure(){
 8005478:	b085      	sub	sp, #20
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 800547a:	f8b8 000a 	ldrh.w	r0, [r8, #10]
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 800547e:	eba2 2903 	sub.w	r9, r2, r3, lsl #8
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8005482:	f7fa ffbf 	bl	8000404 <__aeabi_i2d>
 8005486:	2200      	movs	r2, #0
 8005488:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800548c:	f7fb f824 	bl	80004d8 <__aeabi_dmul>
 8005490:	4604      	mov	r4, r0
 8005492:	4648      	mov	r0, r9
 8005494:	460d      	mov	r5, r1
 8005496:	f7fa ffa5 	bl	80003e4 <__aeabi_ui2d>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4620      	mov	r0, r4
 80054a0:	4629      	mov	r1, r5
 80054a2:	f7fb f819 	bl	80004d8 <__aeabi_dmul>
 80054a6:	4604      	mov	r4, r0

	double OFF = fc[1] * (65536.0) + fc[3] * dT / (128);
 80054a8:	f8b8 0006 	ldrh.w	r0, [r8, #6]
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 80054ac:	460d      	mov	r5, r1
	double OFF = fc[1] * (65536.0) + fc[3] * dT / (128);
 80054ae:	fb09 f000 	mul.w	r0, r9, r0
 80054b2:	09c0      	lsrs	r0, r0, #7
 80054b4:	f7fa ff96 	bl	80003e4 <__aeabi_ui2d>
 80054b8:	4606      	mov	r6, r0
 80054ba:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 80054be:	460f      	mov	r7, r1
 80054c0:	f7fa ffa0 	bl	8000404 <__aeabi_i2d>
 80054c4:	2200      	movs	r2, #0
 80054c6:	4b5f      	ldr	r3, [pc, #380]	; (8005644 <ms5611_get_pressure+0x1dc>)
 80054c8:	f7fb f806 	bl	80004d8 <__aeabi_dmul>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4630      	mov	r0, r6
 80054d2:	4639      	mov	r1, r7
 80054d4:	f7fa fe4a 	bl	800016c <__adddf3>
 80054d8:	4682      	mov	sl, r0
	double SENS = fc[0] * (32768.0) + fc[2] * dT / (256);
 80054da:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80054de:	468b      	mov	fp, r1
 80054e0:	fb09 f000 	mul.w	r0, r9, r0
 80054e4:	0a00      	lsrs	r0, r0, #8
 80054e6:	f7fa ff7d 	bl	80003e4 <__aeabi_ui2d>
 80054ea:	4606      	mov	r6, r0
 80054ec:	f8b8 0000 	ldrh.w	r0, [r8]
 80054f0:	460f      	mov	r7, r1
 80054f2:	f7fa ff87 	bl	8000404 <__aeabi_i2d>
 80054f6:	2200      	movs	r2, #0
 80054f8:	4b53      	ldr	r3, [pc, #332]	; (8005648 <ms5611_get_pressure+0x1e0>)
 80054fa:	f7fa ffed 	bl	80004d8 <__aeabi_dmul>
 80054fe:	4602      	mov	r2, r0
 8005500:	460b      	mov	r3, r1
 8005502:	4630      	mov	r0, r6
 8005504:	4639      	mov	r1, r7
 8005506:	f7fa fe31 	bl	800016c <__adddf3>

	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 800550a:	4b50      	ldr	r3, [pc, #320]	; (800564c <ms5611_get_pressure+0x1e4>)
	double SENS = fc[0] * (32768.0) + fc[2] * dT / (256);
 800550c:	4606      	mov	r6, r0
	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 800550e:	6818      	ldr	r0, [r3, #0]
	double SENS = fc[0] * (32768.0) + fc[2] * dT / (256);
 8005510:	460f      	mov	r7, r1
	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 8005512:	f7fa ff67 	bl	80003e4 <__aeabi_ui2d>

	double T2=0, OFF2=0, SENS2=0;
	if (TEMP < 2000){
 8005516:	2200      	movs	r2, #0
	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 8005518:	e9cd 0100 	strd	r0, r1, [sp]
	if (TEMP < 2000){
 800551c:	2300      	movs	r3, #0
 800551e:	4620      	mov	r0, r4
 8005520:	4629      	mov	r1, r5
 8005522:	f7fb fa4b 	bl	80009bc <__aeabi_dcmplt>
 8005526:	b9a8      	cbnz	r0, 8005554 <ms5611_get_pressure+0xec>

	TEMP = TEMP - T2;
	OFF = OFF - OFF2;
	SENS = SENS - SENS2;

	P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit mbar
 8005528:	e9dd 0100 	ldrd	r0, r1, [sp]
 800552c:	2200      	movs	r2, #0
 800552e:	4b48      	ldr	r3, [pc, #288]	; (8005650 <ms5611_get_pressure+0x1e8>)
 8005530:	f7fa ffd2 	bl	80004d8 <__aeabi_dmul>
 8005534:	4632      	mov	r2, r6
 8005536:	463b      	mov	r3, r7
 8005538:	f7fa ffce 	bl	80004d8 <__aeabi_dmul>
 800553c:	4652      	mov	r2, sl
 800553e:	465b      	mov	r3, fp
 8005540:	f7fa fe12 	bl	8000168 <__aeabi_dsub>
	return P / 100;//unit mbar
 8005544:	a338      	add	r3, pc, #224	; (adr r3, 8005628 <ms5611_get_pressure+0x1c0>)
 8005546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554a:	f7fa ffc5 	bl	80004d8 <__aeabi_dmul>
}
 800554e:	b005      	add	sp, #20
 8005550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		OFF2 = 5 * (TEMP-2000) * (TEMP-2000) / 2;
 8005554:	4622      	mov	r2, r4
 8005556:	462b      	mov	r3, r5
 8005558:	4620      	mov	r0, r4
 800555a:	4629      	mov	r1, r5
 800555c:	f7fa ffbc 	bl	80004d8 <__aeabi_dmul>
 8005560:	2200      	movs	r2, #0
 8005562:	4b3c      	ldr	r3, [pc, #240]	; (8005654 <ms5611_get_pressure+0x1ec>)
 8005564:	4680      	mov	r8, r0
 8005566:	4689      	mov	r9, r1
 8005568:	f7fa ffb6 	bl	80004d8 <__aeabi_dmul>
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 800556c:	2200      	movs	r2, #0
		OFF2 = 5 * (TEMP-2000) * (TEMP-2000) / 2;
 800556e:	e9cd 0102 	strd	r0, r1, [sp, #8]
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 8005572:	4b39      	ldr	r3, [pc, #228]	; (8005658 <ms5611_get_pressure+0x1f0>)
 8005574:	4640      	mov	r0, r8
 8005576:	4649      	mov	r1, r9
 8005578:	f7fa ffae 	bl	80004d8 <__aeabi_dmul>
		if (TEMP < -1500){
 800557c:	a32c      	add	r3, pc, #176	; (adr r3, 8005630 <ms5611_get_pressure+0x1c8>)
 800557e:	e9d3 2300 	ldrd	r2, r3, [r3]
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 8005582:	4680      	mov	r8, r0
 8005584:	4689      	mov	r9, r1
		if (TEMP < -1500){
 8005586:	4620      	mov	r0, r4
 8005588:	4629      	mov	r1, r5
 800558a:	f7fb fa17 	bl	80009bc <__aeabi_dcmplt>
 800558e:	b3c8      	cbz	r0, 8005604 <ms5611_get_pressure+0x19c>
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 8005590:	a329      	add	r3, pc, #164	; (adr r3, 8005638 <ms5611_get_pressure+0x1d0>)
 8005592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005596:	4620      	mov	r0, r4
 8005598:	4629      	mov	r1, r5
 800559a:	f7fa fde7 	bl	800016c <__adddf3>
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	f7fa ff99 	bl	80004d8 <__aeabi_dmul>
 80055a6:	4642      	mov	r2, r8
 80055a8:	4604      	mov	r4, r0
 80055aa:	460d      	mov	r5, r1
 80055ac:	464b      	mov	r3, r9
 80055ae:	4630      	mov	r0, r6
 80055b0:	4639      	mov	r1, r7
 80055b2:	f7fa fdd9 	bl	8000168 <__aeabi_dsub>
			SENS2 = SENS2 + 11/2 * (TEMP + 1500) * (TEMP + 1500);
 80055b6:	2200      	movs	r2, #0
 80055b8:	4606      	mov	r6, r0
 80055ba:	460f      	mov	r7, r1
 80055bc:	4b27      	ldr	r3, [pc, #156]	; (800565c <ms5611_get_pressure+0x1f4>)
 80055be:	4620      	mov	r0, r4
 80055c0:	4629      	mov	r1, r5
 80055c2:	f7fa ff89 	bl	80004d8 <__aeabi_dmul>
 80055c6:	4602      	mov	r2, r0
 80055c8:	460b      	mov	r3, r1
 80055ca:	4630      	mov	r0, r6
 80055cc:	4639      	mov	r1, r7
 80055ce:	f7fa fdcb 	bl	8000168 <__aeabi_dsub>
 80055d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055d6:	4606      	mov	r6, r0
 80055d8:	460f      	mov	r7, r1
 80055da:	4650      	mov	r0, sl
 80055dc:	4659      	mov	r1, fp
 80055de:	f7fa fdc3 	bl	8000168 <__aeabi_dsub>
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 80055e2:	2200      	movs	r2, #0
 80055e4:	4680      	mov	r8, r0
 80055e6:	4689      	mov	r9, r1
 80055e8:	4b1d      	ldr	r3, [pc, #116]	; (8005660 <ms5611_get_pressure+0x1f8>)
 80055ea:	4620      	mov	r0, r4
 80055ec:	4629      	mov	r1, r5
 80055ee:	f7fa ff73 	bl	80004d8 <__aeabi_dmul>
 80055f2:	4602      	mov	r2, r0
 80055f4:	460b      	mov	r3, r1
 80055f6:	4640      	mov	r0, r8
 80055f8:	4649      	mov	r1, r9
 80055fa:	f7fa fdb5 	bl	8000168 <__aeabi_dsub>
 80055fe:	4682      	mov	sl, r0
 8005600:	468b      	mov	fp, r1
 8005602:	e791      	b.n	8005528 <ms5611_get_pressure+0xc0>
 8005604:	4642      	mov	r2, r8
 8005606:	464b      	mov	r3, r9
 8005608:	4630      	mov	r0, r6
 800560a:	4639      	mov	r1, r7
 800560c:	f7fa fdac 	bl	8000168 <__aeabi_dsub>
 8005610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005614:	4606      	mov	r6, r0
 8005616:	460f      	mov	r7, r1
 8005618:	4650      	mov	r0, sl
 800561a:	4659      	mov	r1, fp
 800561c:	f7fa fda4 	bl	8000168 <__aeabi_dsub>
 8005620:	4682      	mov	sl, r0
 8005622:	468b      	mov	fp, r1
 8005624:	e780      	b.n	8005528 <ms5611_get_pressure+0xc0>
 8005626:	bf00      	nop
 8005628:	47ae147b 	.word	0x47ae147b
 800562c:	3e947ae1 	.word	0x3e947ae1
 8005630:	00000000 	.word	0x00000000
 8005634:	c0ab5800 	.word	0xc0ab5800
 8005638:	00000000 	.word	0x00000000
 800563c:	40ab5800 	.word	0x40ab5800
 8005640:	20000d24 	.word	0x20000d24
 8005644:	40f00000 	.word	0x40f00000
 8005648:	40e00000 	.word	0x40e00000
 800564c:	20000d14 	.word	0x20000d14
 8005650:	3ea00000 	.word	0x3ea00000
 8005654:	40040000 	.word	0x40040000
 8005658:	3ff40000 	.word	0x3ff40000
 800565c:	40140000 	.word	0x40140000
 8005660:	401c0000 	.word	0x401c0000
 8005664:	20000d18 	.word	0x20000d18

08005668 <ms5611_timer_update>:
void ms5611_timer_update(){
 8005668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (read_index == 0){
 800566c:	4c74      	ldr	r4, [pc, #464]	; (8005840 <ms5611_timer_update+0x1d8>)
 800566e:	4d75      	ldr	r5, [pc, #468]	; (8005844 <ms5611_timer_update+0x1dc>)
 8005670:	7826      	ldrb	r6, [r4, #0]
void ms5611_timer_update(){
 8005672:	b086      	sub	sp, #24
 8005674:	6828      	ldr	r0, [r5, #0]
	if (read_index == 0){
 8005676:	2e00      	cmp	r6, #0
 8005678:	d076      	beq.n	8005768 <ms5611_timer_update+0x100>
	}else if (read_index == TEMP_READ_INTERVAL - 1){
 800567a:	2e09      	cmp	r6, #9
	uint8_t buffer[3] = {0x00,0x00,0x00};
 800567c:	f04f 0600 	mov.w	r6, #0
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8005680:	f10d 0a14 	add.w	sl, sp, #20
 8005684:	4632      	mov	r2, r6
 8005686:	f8cd a000 	str.w	sl, [sp]
 800568a:	f04f 0303 	mov.w	r3, #3
 800568e:	f04f 0177 	mov.w	r1, #119	; 0x77
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8005692:	f8ad 6014 	strh.w	r6, [sp, #20]
 8005696:	f88d 6016 	strb.w	r6, [sp, #22]
	}else if (read_index == TEMP_READ_INTERVAL - 1){
 800569a:	d033      	beq.n	8005704 <ms5611_timer_update+0x9c>
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 800569c:	f7ff fd80 	bl	80051a0 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 80056a0:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80056a4:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80056a8:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80056ac:	021b      	lsls	r3, r3, #8
 80056ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (temp != 0){
 80056b2:	4313      	orrs	r3, r2
		raw_pressure = temp;
 80056b4:	bf18      	it	ne
 80056b6:	4a64      	ldrne	r2, [pc, #400]	; (8005848 <ms5611_timer_update+0x1e0>)
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80056b8:	f04f 0600 	mov.w	r6, #0
		raw_pressure = temp;
 80056bc:	bf18      	it	ne
 80056be:	6013      	strne	r3, [r2, #0]
		XIMU_sens.pressure = ms5611_get_pressure();
 80056c0:	f7ff fed2 	bl	8005468 <ms5611_get_pressure>
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80056c4:	4a61      	ldr	r2, [pc, #388]	; (800584c <ms5611_timer_update+0x1e4>)
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80056c6:	682b      	ldr	r3, [r5, #0]
		XIMU_sens.pressure = ms5611_get_pressure();
 80056c8:	4d61      	ldr	r5, [pc, #388]	; (8005850 <ms5611_timer_update+0x1e8>)
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80056ca:	7812      	ldrb	r2, [r2, #0]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80056cc:	f8cd a000 	str.w	sl, [sp]
		XIMU_sens.pressure = ms5611_get_pressure();
 80056d0:	e9c5 011e 	strd	r0, r1, [r5, #120]	; 0x78
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80056d4:	0052      	lsls	r2, r2, #1
 80056d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80056da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056de:	2177      	movs	r1, #119	; 0x77
 80056e0:	4618      	mov	r0, r3
 80056e2:	4633      	mov	r3, r6
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80056e4:	f8ad 6014 	strh.w	r6, [sp, #20]
 80056e8:	f88d 6016 	strb.w	r6, [sp, #22]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80056ec:	f7ff fd68 	bl	80051c0 <I2C_write>
		read_index++;
 80056f0:	7823      	ldrb	r3, [r4, #0]
 80056f2:	3301      	adds	r3, #1
 80056f4:	7023      	strb	r3, [r4, #0]
	XIMU_sens.pt_ts = millis();
 80056f6:	f000 fa37 	bl	8005b68 <millis>
 80056fa:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
}
 80056fe:	b006      	add	sp, #24
 8005700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8005704:	f7ff fd4c 	bl	80051a0 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8005708:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800570c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8005710:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8005714:	021b      	lsls	r3, r3, #8
 8005716:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (temp != 0){
 800571a:	4313      	orrs	r3, r2
		raw_pressure = temp;
 800571c:	bf18      	it	ne
 800571e:	4a4a      	ldrne	r2, [pc, #296]	; (8005848 <ms5611_timer_update+0x1e0>)
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8005720:	f04f 0600 	mov.w	r6, #0
		raw_pressure = temp;
 8005724:	bf18      	it	ne
 8005726:	6013      	strne	r3, [r2, #0]
		XIMU_sens.pressure = ms5611_get_pressure();
 8005728:	f7ff fe9e 	bl	8005468 <ms5611_get_pressure>
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 800572c:	4a47      	ldr	r2, [pc, #284]	; (800584c <ms5611_timer_update+0x1e4>)
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 800572e:	682b      	ldr	r3, [r5, #0]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8005730:	7812      	ldrb	r2, [r2, #0]
		XIMU_sens.pressure = ms5611_get_pressure();
 8005732:	4d47      	ldr	r5, [pc, #284]	; (8005850 <ms5611_timer_update+0x1e8>)
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8005734:	0052      	lsls	r2, r2, #1
 8005736:	f042 0250 	orr.w	r2, r2, #80	; 0x50
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 800573a:	f8cd a000 	str.w	sl, [sp]
 800573e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
		XIMU_sens.pressure = ms5611_get_pressure();
 8005742:	e9c5 011e 	strd	r0, r1, [r5, #120]	; 0x78
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8005746:	2177      	movs	r1, #119	; 0x77
 8005748:	4618      	mov	r0, r3
 800574a:	4633      	mov	r3, r6
	uint8_t buffer[3] = {0x00,0x00,0x00};
 800574c:	f8ad 6014 	strh.w	r6, [sp, #20]
 8005750:	f88d 6016 	strb.w	r6, [sp, #22]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8005754:	f7ff fd34 	bl	80051c0 <I2C_write>
		read_index = 0;
 8005758:	7026      	strb	r6, [r4, #0]
	XIMU_sens.pt_ts = millis();
 800575a:	f000 fa05 	bl	8005b68 <millis>
 800575e:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
}
 8005762:	b006      	add	sp, #24
 8005764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8005768:	f10d 0a14 	add.w	sl, sp, #20
 800576c:	4632      	mov	r2, r6
 800576e:	2303      	movs	r3, #3
 8005770:	2177      	movs	r1, #119	; 0x77
 8005772:	f8cd a000 	str.w	sl, [sp]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8005776:	f8ad 6014 	strh.w	r6, [sp, #20]
 800577a:	f88d 6016 	strb.w	r6, [sp, #22]
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 800577e:	f7ff fd0f 	bl	80051a0 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8005782:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8005786:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800578a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800578e:	0200      	lsls	r0, r0, #8
 8005790:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
	if (temp != 0){
 8005794:	4318      	orrs	r0, r3
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 8005796:	4e2f      	ldr	r6, [pc, #188]	; (8005854 <ms5611_timer_update+0x1ec>)
		raw_temperature = temp;
 8005798:	4b2f      	ldr	r3, [pc, #188]	; (8005858 <ms5611_timer_update+0x1f0>)
 800579a:	bf0c      	ite	eq
 800579c:	6818      	ldreq	r0, [r3, #0]
 800579e:	6018      	strne	r0, [r3, #0]
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 80057a0:	8933      	ldrh	r3, [r6, #8]
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 80057a2:	eba0 2003 	sub.w	r0, r0, r3, lsl #8
 80057a6:	f7fa fe1d 	bl	80003e4 <__aeabi_ui2d>
 80057aa:	4680      	mov	r8, r0
 80057ac:	4689      	mov	r9, r1
 80057ae:	8970      	ldrh	r0, [r6, #10]
 80057b0:	f7fa fe28 	bl	8000404 <__aeabi_i2d>
 80057b4:	2200      	movs	r2, #0
 80057b6:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80057ba:	f7fa fe8d 	bl	80004d8 <__aeabi_dmul>
 80057be:	4642      	mov	r2, r8
 80057c0:	464b      	mov	r3, r9
 80057c2:	f7fa fe89 	bl	80004d8 <__aeabi_dmul>
 80057c6:	2200      	movs	r2, #0
 80057c8:	4b24      	ldr	r3, [pc, #144]	; (800585c <ms5611_timer_update+0x1f4>)
 80057ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057ce:	f7fa fccd 	bl	800016c <__adddf3>
	if (TEMP < 2000.0){
 80057d2:	2200      	movs	r2, #0
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 80057d4:	4606      	mov	r6, r0
 80057d6:	460f      	mov	r7, r1
	if (TEMP < 2000.0){
 80057d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057dc:	2300      	movs	r3, #0
 80057de:	f7fb f8ed 	bl	80009bc <__aeabi_dcmplt>
 80057e2:	b998      	cbnz	r0, 800580c <ms5611_timer_update+0x1a4>
	return TEMP / 100.0;
 80057e4:	a314      	add	r3, pc, #80	; (adr r3, 8005838 <ms5611_timer_update+0x1d0>)
 80057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ea:	4630      	mov	r0, r6
 80057ec:	4639      	mov	r1, r7
 80057ee:	f7fa fe73 	bl	80004d8 <__aeabi_dmul>
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80057f2:	4a16      	ldr	r2, [pc, #88]	; (800584c <ms5611_timer_update+0x1e4>)
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80057f4:	682b      	ldr	r3, [r5, #0]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80057f6:	7812      	ldrb	r2, [r2, #0]
		XIMU_sens.temperature = ms5611_get_temperature();
 80057f8:	4d15      	ldr	r5, [pc, #84]	; (8005850 <ms5611_timer_update+0x1e8>)
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80057fa:	0052      	lsls	r2, r2, #1
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80057fc:	f8cd a000 	str.w	sl, [sp]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8005800:	2600      	movs	r6, #0
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8005802:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		XIMU_sens.temperature = ms5611_get_temperature();
 8005806:	e9c5 0120 	strd	r0, r1, [r5, #128]	; 0x80
 800580a:	e766      	b.n	80056da <ms5611_timer_update+0x72>
		T2 = dT * (dT / (2147483648.0));
 800580c:	4642      	mov	r2, r8
 800580e:	464b      	mov	r3, r9
 8005810:	4640      	mov	r0, r8
 8005812:	4649      	mov	r1, r9
 8005814:	f7fa fe60 	bl	80004d8 <__aeabi_dmul>
 8005818:	2200      	movs	r2, #0
 800581a:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 800581e:	f7fa fe5b 	bl	80004d8 <__aeabi_dmul>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	4630      	mov	r0, r6
 8005828:	4639      	mov	r1, r7
 800582a:	f7fa fc9d 	bl	8000168 <__aeabi_dsub>
 800582e:	4606      	mov	r6, r0
 8005830:	460f      	mov	r7, r1
 8005832:	e7d7      	b.n	80057e4 <ms5611_timer_update+0x17c>
 8005834:	f3af 8000 	nop.w
 8005838:	47ae147b 	.word	0x47ae147b
 800583c:	3f847ae1 	.word	0x3f847ae1
 8005840:	200003be 	.word	0x200003be
 8005844:	200007d4 	.word	0x200007d4
 8005848:	20000d14 	.word	0x20000d14
 800584c:	2000003c 	.word	0x2000003c
 8005850:	200005f8 	.word	0x200005f8
 8005854:	20000d18 	.word	0x20000d18
 8005858:	20000d24 	.word	0x20000d24
 800585c:	409f4000 	.word	0x409f4000

08005860 <quat2mat>:
#include "quaternion.h"
#include "arm_math.h"



void quat2mat(arm_matrix_instance_f32* q_,arm_matrix_instance_f32* R_){
 8005860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifdef QUATERNION_SIZE_CHECK
	if (q_->numCols != 1 || q_->numRows != 4 || R_->numCols != 3 || R_->numRows != 3){
		return;
	}
#endif
	float32_t* q = q_->pData;
 8005864:	6845      	ldr	r5, [r0, #4]
void quat2mat(arm_matrix_instance_f32* q_,arm_matrix_instance_f32* R_){
 8005866:	b085      	sub	sp, #20
	float32_t* R = R_->pData;

	float32_t q0_2 = q[0]*q[0];
 8005868:	f8d5 a000 	ldr.w	sl, [r5]
	float32_t* R = R_->pData;
 800586c:	684c      	ldr	r4, [r1, #4]
	float32_t q0_2 = q[0]*q[0];
 800586e:	4650      	mov	r0, sl
 8005870:	4651      	mov	r1, sl
 8005872:	f7fb fa87 	bl	8000d84 <__aeabi_fmul>
	float32_t q1_2 = q[1]*q[1];
 8005876:	f8d5 8004 	ldr.w	r8, [r5, #4]
	float32_t q0_2 = q[0]*q[0];
 800587a:	9002      	str	r0, [sp, #8]
	float32_t q1_2 = q[1]*q[1];
 800587c:	4641      	mov	r1, r8
 800587e:	4640      	mov	r0, r8
 8005880:	f7fb fa80 	bl	8000d84 <__aeabi_fmul>
	float32_t q2_2 = q[2]*q[2];
 8005884:	68af      	ldr	r7, [r5, #8]
	float32_t q1_2 = q[1]*q[1];
 8005886:	9000      	str	r0, [sp, #0]
	float32_t q2_2 = q[2]*q[2];
 8005888:	4639      	mov	r1, r7
 800588a:	4638      	mov	r0, r7
 800588c:	f7fb fa7a 	bl	8000d84 <__aeabi_fmul>
	float32_t q3_2 = q[3]*q[3];
 8005890:	f8d5 900c 	ldr.w	r9, [r5, #12]
	float32_t q2_2 = q[2]*q[2];
 8005894:	4606      	mov	r6, r0
	float32_t q3_2 = q[3]*q[3];
 8005896:	4649      	mov	r1, r9
 8005898:	4648      	mov	r0, r9
 800589a:	f7fb fa73 	bl	8000d84 <__aeabi_fmul>
	float32_t q0q1_ = 2 * q[0]*q[1];
 800589e:	4641      	mov	r1, r8
	float32_t q3_2 = q[3]*q[3];
 80058a0:	4605      	mov	r5, r0
	float32_t q0q1_ = 2 * q[0]*q[1];
 80058a2:	4650      	mov	r0, sl
 80058a4:	f7fb fa6e 	bl	8000d84 <__aeabi_fmul>
 80058a8:	4601      	mov	r1, r0
 80058aa:	f7fb f963 	bl	8000b74 <__addsf3>
	float32_t q0q2_ = 2 * q[0]*q[2];
 80058ae:	4639      	mov	r1, r7
	float32_t q0q1_ = 2 * q[0]*q[1];
 80058b0:	9003      	str	r0, [sp, #12]
	float32_t q0q2_ = 2 * q[0]*q[2];
 80058b2:	4650      	mov	r0, sl
 80058b4:	f7fb fa66 	bl	8000d84 <__aeabi_fmul>
 80058b8:	4601      	mov	r1, r0
 80058ba:	f7fb f95b 	bl	8000b74 <__addsf3>
	float32_t q0q3_ = 2 * q[0]*q[3];
 80058be:	4649      	mov	r1, r9
	float32_t q0q2_ = 2 * q[0]*q[2];
 80058c0:	9001      	str	r0, [sp, #4]
	float32_t q0q3_ = 2 * q[0]*q[3];
 80058c2:	4650      	mov	r0, sl
 80058c4:	f7fb fa5e 	bl	8000d84 <__aeabi_fmul>
 80058c8:	4601      	mov	r1, r0
 80058ca:	f7fb f953 	bl	8000b74 <__addsf3>
	float32_t q1q2_ = 2 * q[1]*q[2];
 80058ce:	4639      	mov	r1, r7
	float32_t q0q3_ = 2 * q[0]*q[3];
 80058d0:	4682      	mov	sl, r0
	float32_t q1q2_ = 2 * q[1]*q[2];
 80058d2:	4640      	mov	r0, r8
 80058d4:	f7fb fa56 	bl	8000d84 <__aeabi_fmul>
 80058d8:	4601      	mov	r1, r0
 80058da:	f7fb f94b 	bl	8000b74 <__addsf3>
	float32_t q1q3_ = 2 * q[1]*q[3];
 80058de:	4649      	mov	r1, r9
	float32_t q1q2_ = 2 * q[1]*q[2];
 80058e0:	4683      	mov	fp, r0
	float32_t q1q3_ = 2 * q[1]*q[3];
 80058e2:	4640      	mov	r0, r8
 80058e4:	f7fb fa4e 	bl	8000d84 <__aeabi_fmul>
 80058e8:	4601      	mov	r1, r0
 80058ea:	f7fb f943 	bl	8000b74 <__addsf3>
	float32_t q2q3_ = 2 * q[2]*q[3];
 80058ee:	4649      	mov	r1, r9
	float32_t q1q3_ = 2 * q[1]*q[3];
 80058f0:	4680      	mov	r8, r0
	float32_t q2q3_ = 2 * q[2]*q[3];
 80058f2:	4638      	mov	r0, r7
 80058f4:	f7fb fa46 	bl	8000d84 <__aeabi_fmul>
 80058f8:	4601      	mov	r1, r0
 80058fa:	f7fb f93b 	bl	8000b74 <__addsf3>

	R[0] = q0_2 + q1_2 - q2_2 - q3_2;
 80058fe:	f8dd 9008 	ldr.w	r9, [sp, #8]
	float32_t q2q3_ = 2 * q[2]*q[3];
 8005902:	4607      	mov	r7, r0
	R[0] = q0_2 + q1_2 - q2_2 - q3_2;
 8005904:	9900      	ldr	r1, [sp, #0]
 8005906:	4648      	mov	r0, r9
 8005908:	f7fb f934 	bl	8000b74 <__addsf3>
 800590c:	4631      	mov	r1, r6
 800590e:	f7fb f92f 	bl	8000b70 <__aeabi_fsub>
 8005912:	4629      	mov	r1, r5
 8005914:	f7fb f92c 	bl	8000b70 <__aeabi_fsub>
	R[1] = q1q2_ - q0q3_;
 8005918:	4651      	mov	r1, sl
	R[0] = q0_2 + q1_2 - q2_2 - q3_2;
 800591a:	6020      	str	r0, [r4, #0]
	R[1] = q1q2_ - q0q3_;
 800591c:	4658      	mov	r0, fp
 800591e:	f7fb f927 	bl	8000b70 <__aeabi_fsub>
	R[2] = q1q3_ + q0q2_;
 8005922:	4641      	mov	r1, r8
	R[1] = q1q2_ - q0q3_;
 8005924:	6060      	str	r0, [r4, #4]
	R[2] = q1q3_ + q0q2_;
 8005926:	9801      	ldr	r0, [sp, #4]
 8005928:	f7fb f924 	bl	8000b74 <__addsf3>
	R[3] = q1q2_ + q0q3_;
 800592c:	4659      	mov	r1, fp
	R[2] = q1q3_ + q0q2_;
 800592e:	60a0      	str	r0, [r4, #8]
	R[3] = q1q2_ + q0q3_;
 8005930:	4650      	mov	r0, sl
 8005932:	f7fb f91f 	bl	8000b74 <__addsf3>
	R[4] = q0_2 - q1_2 + q2_2 - q3_2;
 8005936:	9900      	ldr	r1, [sp, #0]
	R[3] = q1q2_ + q0q3_;
 8005938:	60e0      	str	r0, [r4, #12]
	R[4] = q0_2 - q1_2 + q2_2 - q3_2;
 800593a:	4648      	mov	r0, r9
 800593c:	f7fb f918 	bl	8000b70 <__aeabi_fsub>
 8005940:	4629      	mov	r1, r5
 8005942:	4681      	mov	r9, r0
 8005944:	f7fb f914 	bl	8000b70 <__aeabi_fsub>
 8005948:	4631      	mov	r1, r6
 800594a:	f7fb f913 	bl	8000b74 <__addsf3>
	R[5] = q2q3_ - q0q1_;
 800594e:	f8dd a00c 	ldr.w	sl, [sp, #12]
	R[4] = q0_2 - q1_2 + q2_2 - q3_2;
 8005952:	6120      	str	r0, [r4, #16]
	R[5] = q2q3_ - q0q1_;
 8005954:	4651      	mov	r1, sl
 8005956:	4638      	mov	r0, r7
 8005958:	f7fb f90a 	bl	8000b70 <__aeabi_fsub>
	R[6] = q1q3_ - q0q2_;
 800595c:	9901      	ldr	r1, [sp, #4]
	R[5] = q2q3_ - q0q1_;
 800595e:	6160      	str	r0, [r4, #20]
	R[6] = q1q3_ - q0q2_;
 8005960:	4640      	mov	r0, r8
 8005962:	f7fb f905 	bl	8000b70 <__aeabi_fsub>
	R[7] = q2q3_ + q0q1_;
 8005966:	4639      	mov	r1, r7
	R[6] = q1q3_ - q0q2_;
 8005968:	61a0      	str	r0, [r4, #24]
	R[7] = q2q3_ + q0q1_;
 800596a:	4650      	mov	r0, sl
 800596c:	f7fb f902 	bl	8000b74 <__addsf3>
	R[8] = q0_2 - q1_2 - q2_2 + q3_2;
 8005970:	4631      	mov	r1, r6
	R[7] = q2q3_ + q0q1_;
 8005972:	61e0      	str	r0, [r4, #28]
	R[8] = q0_2 - q1_2 - q2_2 + q3_2;
 8005974:	4648      	mov	r0, r9
 8005976:	f7fb f8fb 	bl	8000b70 <__aeabi_fsub>
 800597a:	4629      	mov	r1, r5
 800597c:	f7fb f8fa 	bl	8000b74 <__addsf3>
 8005980:	6220      	str	r0, [r4, #32]
}
 8005982:	b005      	add	sp, #20
 8005984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005988 <otimes>:
}

/**
 * quaternion multiplication
 */
void otimes(arm_matrix_instance_f32* q1,arm_matrix_instance_f32* q2,arm_matrix_instance_f32* q_res){
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	4616      	mov	r6, r2
	arm_matrix_instance_f32 qL;
	float32_t qL_data[4*4];
	arm_mat_init_f32(&qL,4,4,qL_data);
 800598c:	2204      	movs	r2, #4
void otimes(arm_matrix_instance_f32* q1,arm_matrix_instance_f32* q2,arm_matrix_instance_f32* q_res){
 800598e:	4604      	mov	r4, r0
 8005990:	460d      	mov	r5, r1
 8005992:	b092      	sub	sp, #72	; 0x48
	arm_mat_init_f32(&qL,4,4,qL_data);
 8005994:	4668      	mov	r0, sp
 8005996:	4611      	mov	r1, r2
 8005998:	ab02      	add	r3, sp, #8
 800599a:	f004 fbb9 	bl	800a110 <arm_mat_init_f32>
	float32_t* q = q_->pData;
 800599e:	6864      	ldr	r4, [r4, #4]
	float32_t* qL = qL_->pData;
 80059a0:	9b01      	ldr	r3, [sp, #4]
	qL[0] = q[0];		qL[1] = -q[1];		qL[2] = -q[2];		qL[3] = -q[3];
 80059a2:	6821      	ldr	r1, [r4, #0]

	quat_L(q1,&qL);
	arm_mat_mult_f32(&qL,q2,q_res);
 80059a4:	4632      	mov	r2, r6
	qL[0] = q[0];		qL[1] = -q[1];		qL[2] = -q[2];		qL[3] = -q[3];
 80059a6:	6019      	str	r1, [r3, #0]
 80059a8:	6860      	ldr	r0, [r4, #4]
	arm_mat_mult_f32(&qL,q2,q_res);
 80059aa:	4629      	mov	r1, r5
	qL[0] = q[0];		qL[1] = -q[1];		qL[2] = -q[2];		qL[3] = -q[3];
 80059ac:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80059b0:	6058      	str	r0, [r3, #4]
 80059b2:	68a5      	ldr	r5, [r4, #8]
	arm_mat_mult_f32(&qL,q2,q_res);
 80059b4:	4668      	mov	r0, sp
	qL[0] = q[0];		qL[1] = -q[1];		qL[2] = -q[2];		qL[3] = -q[3];
 80059b6:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80059ba:	609d      	str	r5, [r3, #8]
 80059bc:	68e5      	ldr	r5, [r4, #12]
 80059be:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80059c2:	60dd      	str	r5, [r3, #12]
	qL[4] = q[1];		qL[5] = q[0];		qL[6] = -q[3];		qL[7] = q[2];
 80059c4:	6865      	ldr	r5, [r4, #4]
 80059c6:	611d      	str	r5, [r3, #16]
 80059c8:	6825      	ldr	r5, [r4, #0]
 80059ca:	615d      	str	r5, [r3, #20]
 80059cc:	68e5      	ldr	r5, [r4, #12]
 80059ce:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80059d2:	619d      	str	r5, [r3, #24]
 80059d4:	68a5      	ldr	r5, [r4, #8]
 80059d6:	61dd      	str	r5, [r3, #28]
	qL[8] = q[2];		qL[9] = q[3];		qL[10] = q[0];		qL[11] = -q[1];
 80059d8:	68a5      	ldr	r5, [r4, #8]
 80059da:	621d      	str	r5, [r3, #32]
 80059dc:	68e5      	ldr	r5, [r4, #12]
 80059de:	625d      	str	r5, [r3, #36]	; 0x24
 80059e0:	6825      	ldr	r5, [r4, #0]
 80059e2:	629d      	str	r5, [r3, #40]	; 0x28
 80059e4:	6865      	ldr	r5, [r4, #4]
 80059e6:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80059ea:	62dd      	str	r5, [r3, #44]	; 0x2c
	qL[12] = q[3];		qL[13] = -q[2];		qL[14] = q[1];		qL[15] = q[0];
 80059ec:	68e5      	ldr	r5, [r4, #12]
 80059ee:	631d      	str	r5, [r3, #48]	; 0x30
 80059f0:	68a5      	ldr	r5, [r4, #8]
 80059f2:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80059f6:	635d      	str	r5, [r3, #52]	; 0x34
 80059f8:	6865      	ldr	r5, [r4, #4]
 80059fa:	639d      	str	r5, [r3, #56]	; 0x38
 80059fc:	6824      	ldr	r4, [r4, #0]
 80059fe:	63dc      	str	r4, [r3, #60]	; 0x3c
	arm_mat_mult_f32(&qL,q2,q_res);
 8005a00:	f004 f980 	bl	8009d04 <arm_mat_mult_f32>
}
 8005a04:	b012      	add	sp, #72	; 0x48
 8005a06:	bd70      	pop	{r4, r5, r6, pc}

08005a08 <quatexp2>:

/**
 * quaternion exponential
 */
void quatexp2(arm_matrix_instance_f32* phi_, arm_matrix_instance_f32* q_){
 8005a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	float32_t* q = q_->pData;
	float32_t* phi = phi_->pData;
 8005a0c:	6844      	ldr	r4, [r0, #4]
	float32_t* q = q_->pData;
 8005a0e:	684d      	ldr	r5, [r1, #4]

	float32_t theta = 0.5 * sqrt(phi[0]*phi[0] + phi[1]*phi[1] + phi[2]*phi[2]);
 8005a10:	6821      	ldr	r1, [r4, #0]
 8005a12:	6867      	ldr	r7, [r4, #4]
 8005a14:	4608      	mov	r0, r1
 8005a16:	f7fb f9b5 	bl	8000d84 <__aeabi_fmul>
 8005a1a:	4639      	mov	r1, r7
 8005a1c:	4606      	mov	r6, r0
 8005a1e:	4638      	mov	r0, r7
 8005a20:	f7fb f9b0 	bl	8000d84 <__aeabi_fmul>
 8005a24:	4601      	mov	r1, r0
 8005a26:	4630      	mov	r0, r6
 8005a28:	f7fb f8a4 	bl	8000b74 <__addsf3>
 8005a2c:	68a7      	ldr	r7, [r4, #8]
 8005a2e:	4606      	mov	r6, r0
 8005a30:	4639      	mov	r1, r7
 8005a32:	4638      	mov	r0, r7
 8005a34:	f7fb f9a6 	bl	8000d84 <__aeabi_fmul>
 8005a38:	4601      	mov	r1, r0
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	f7fb f89a 	bl	8000b74 <__addsf3>
 8005a40:	f7fa fcf2 	bl	8000428 <__aeabi_f2d>
 8005a44:	f007 f8e8 	bl	800cc18 <sqrt>
 8005a48:	2200      	movs	r2, #0
 8005a4a:	4b35      	ldr	r3, [pc, #212]	; (8005b20 <quatexp2+0x118>)
 8005a4c:	f7fa fd44 	bl	80004d8 <__aeabi_dmul>
 8005a50:	f7fb f83a 	bl	8000ac8 <__aeabi_d2f>

	if (fabs(theta) <= 1e-6){
 8005a54:	f7fa fce8 	bl	8000428 <__aeabi_f2d>
 8005a58:	a32f      	add	r3, pc, #188	; (adr r3, 8005b18 <quatexp2+0x110>)
 8005a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5e:	4606      	mov	r6, r0
 8005a60:	460f      	mov	r7, r1
 8005a62:	f7fa ffb5 	bl	80009d0 <__aeabi_dcmple>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d14c      	bne.n	8005b04 <quatexp2+0xfc>
		q[0] = 1;	q[1] = 0;	q[2] = 0;	q[3] = 0;
		return;
	}

	q[0] = cos(theta);
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	4639      	mov	r1, r7
 8005a6e:	f007 f807 	bl	800ca80 <cos>
 8005a72:	f7fb f829 	bl	8000ac8 <__aeabi_d2f>
	q[1] = sin(theta) * 0.5 * phi[0] / theta;
 8005a76:	4639      	mov	r1, r7
	q[0] = cos(theta);
 8005a78:	6028      	str	r0, [r5, #0]
	q[1] = sin(theta) * 0.5 * phi[0] / theta;
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	f007 f836 	bl	800caec <sin>
 8005a80:	4632      	mov	r2, r6
 8005a82:	4680      	mov	r8, r0
 8005a84:	4689      	mov	r9, r1
 8005a86:	463b      	mov	r3, r7
 8005a88:	2000      	movs	r0, #0
 8005a8a:	4926      	ldr	r1, [pc, #152]	; (8005b24 <quatexp2+0x11c>)
 8005a8c:	f7fa fe4e 	bl	800072c <__aeabi_ddiv>
 8005a90:	4606      	mov	r6, r0
 8005a92:	460f      	mov	r7, r1
 8005a94:	6820      	ldr	r0, [r4, #0]
 8005a96:	f7fa fcc7 	bl	8000428 <__aeabi_f2d>
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	4b20      	ldr	r3, [pc, #128]	; (8005b20 <quatexp2+0x118>)
 8005a9e:	f7fa fd1b 	bl	80004d8 <__aeabi_dmul>
 8005aa2:	4632      	mov	r2, r6
 8005aa4:	463b      	mov	r3, r7
 8005aa6:	f7fa fd17 	bl	80004d8 <__aeabi_dmul>
 8005aaa:	4642      	mov	r2, r8
 8005aac:	464b      	mov	r3, r9
 8005aae:	f7fa fd13 	bl	80004d8 <__aeabi_dmul>
 8005ab2:	f7fb f809 	bl	8000ac8 <__aeabi_d2f>
 8005ab6:	6068      	str	r0, [r5, #4]
	q[2] = sin(theta) * 0.5 * phi[1] / theta;
 8005ab8:	6860      	ldr	r0, [r4, #4]
 8005aba:	f7fa fcb5 	bl	8000428 <__aeabi_f2d>
 8005abe:	2200      	movs	r2, #0
 8005ac0:	4b17      	ldr	r3, [pc, #92]	; (8005b20 <quatexp2+0x118>)
 8005ac2:	f7fa fd09 	bl	80004d8 <__aeabi_dmul>
 8005ac6:	4632      	mov	r2, r6
 8005ac8:	463b      	mov	r3, r7
 8005aca:	f7fa fd05 	bl	80004d8 <__aeabi_dmul>
 8005ace:	4642      	mov	r2, r8
 8005ad0:	464b      	mov	r3, r9
 8005ad2:	f7fa fd01 	bl	80004d8 <__aeabi_dmul>
 8005ad6:	f7fa fff7 	bl	8000ac8 <__aeabi_d2f>
 8005ada:	60a8      	str	r0, [r5, #8]
	q[3] = sin(theta) * 0.5 * phi[2] / theta;
 8005adc:	68a0      	ldr	r0, [r4, #8]
 8005ade:	f7fa fca3 	bl	8000428 <__aeabi_f2d>
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	4b0e      	ldr	r3, [pc, #56]	; (8005b20 <quatexp2+0x118>)
 8005ae6:	f7fa fcf7 	bl	80004d8 <__aeabi_dmul>
 8005aea:	4632      	mov	r2, r6
 8005aec:	463b      	mov	r3, r7
 8005aee:	f7fa fcf3 	bl	80004d8 <__aeabi_dmul>
 8005af2:	4642      	mov	r2, r8
 8005af4:	464b      	mov	r3, r9
 8005af6:	f7fa fcef 	bl	80004d8 <__aeabi_dmul>
 8005afa:	f7fa ffe5 	bl	8000ac8 <__aeabi_d2f>
 8005afe:	60e8      	str	r0, [r5, #12]
}
 8005b00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		q[0] = 1;	q[1] = 0;	q[2] = 0;	q[3] = 0;
 8005b04:	2300      	movs	r3, #0
 8005b06:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005b0a:	606b      	str	r3, [r5, #4]
 8005b0c:	602a      	str	r2, [r5, #0]
 8005b0e:	60ab      	str	r3, [r5, #8]
 8005b10:	60eb      	str	r3, [r5, #12]
}
 8005b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b16:	bf00      	nop
 8005b18:	a0b5ed8d 	.word	0xa0b5ed8d
 8005b1c:	3eb0c6f7 	.word	0x3eb0c6f7
 8005b20:	3fe00000 	.word	0x3fe00000
 8005b24:	3ff00000 	.word	0x3ff00000

08005b28 <systickInit>:

static volatile uint32_t ticks = 0;

void systickInit(){

	   if (SysTick_Config(SystemCoreClock / SYSTICK_FREQ)){
 8005b28:	4b0b      	ldr	r3, [pc, #44]	; (8005b58 <systickInit+0x30>)
 8005b2a:	4a0c      	ldr	r2, [pc, #48]	; (8005b5c <systickInit+0x34>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b32:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b34:	3b01      	subs	r3, #1
 8005b36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b3a:	d300      	bcc.n	8005b3e <systickInit+0x16>
 8005b3c:	e7fe      	b.n	8005b3c <systickInit+0x14>
void systickInit(){
 8005b3e:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b40:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b42:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b44:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b46:	4a06      	ldr	r2, [pc, #24]	; (8005b60 <systickInit+0x38>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b48:	4c06      	ldr	r4, [pc, #24]	; (8005b64 <systickInit+0x3c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b4a:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b4c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
		   while (1){ /* Error in initializing Systick */ }
	   }
}
 8005b50:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b52:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b54:	6011      	str	r1, [r2, #0]
 8005b56:	4770      	bx	lr
 8005b58:	20000038 	.word	0x20000038
 8005b5c:	10624dd3 	.word	0x10624dd3
 8005b60:	e000e010 	.word	0xe000e010
 8005b64:	e000ed00 	.word	0xe000ed00

08005b68 <millis>:
/**
 * return milliseconds
 * @return time since systickInit in milliseconds
 */
uint32_t millis(){
	return ticks;
 8005b68:	4b01      	ldr	r3, [pc, #4]	; (8005b70 <millis+0x8>)
 8005b6a:	6818      	ldr	r0, [r3, #0]
}
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	200003c0 	.word	0x200003c0

08005b74 <delay>:
	return ticks;
 8005b74:	4a03      	ldr	r2, [pc, #12]	; (8005b84 <delay+0x10>)
 8005b76:	6811      	ldr	r1, [r2, #0]
 8005b78:	6813      	ldr	r3, [r2, #0]
 * delay milliseconds
 * @param ms milliseconds to delay
 */
void delay(uint32_t ms){
	uint32_t start = millis();
	while(millis() - start < ms){
 8005b7a:	1a5b      	subs	r3, r3, r1
 8005b7c:	4283      	cmp	r3, r0
 8005b7e:	d3fb      	bcc.n	8005b78 <delay+0x4>
		//do nothing
	}
}
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	200003c0 	.word	0x200003c0

08005b88 <systick_Inc>:
/**
 * add this function in stm32f1xx_it
 * called by the system to update systick accordingly
 */
void systick_Inc(void) {
  ticks++;
 8005b88:	4a02      	ldr	r2, [pc, #8]	; (8005b94 <systick_Inc+0xc>)
 8005b8a:	6813      	ldr	r3, [r2, #0]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	6013      	str	r3, [r2, #0]
}
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	200003c0 	.word	0x200003c0

08005b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b98:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b9e:	490d      	ldr	r1, [pc, #52]	; (8005bd4 <HAL_InitTick+0x3c>)
 8005ba0:	4a0d      	ldr	r2, [pc, #52]	; (8005bd8 <HAL_InitTick+0x40>)
 8005ba2:	7809      	ldrb	r1, [r1, #0]
 8005ba4:	6812      	ldr	r2, [r2, #0]
 8005ba6:	fbb3 f3f1 	udiv	r3, r3, r1
{
 8005baa:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005bac:	fbb2 f0f3 	udiv	r0, r2, r3
 8005bb0:	f000 f8a2 	bl	8005cf8 <HAL_SYSTICK_Config>
 8005bb4:	b908      	cbnz	r0, 8005bba <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005bb6:	2d0f      	cmp	r5, #15
 8005bb8:	d901      	bls.n	8005bbe <HAL_InitTick+0x26>
    return HAL_ERROR;
 8005bba:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8005bbc:	bd38      	pop	{r3, r4, r5, pc}
 8005bbe:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	4629      	mov	r1, r5
 8005bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc8:	f000 f852 	bl	8005c70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005bcc:	4b03      	ldr	r3, [pc, #12]	; (8005bdc <HAL_InitTick+0x44>)
 8005bce:	4620      	mov	r0, r4
 8005bd0:	601d      	str	r5, [r3, #0]
}
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
 8005bd4:	2000003d 	.word	0x2000003d
 8005bd8:	20000038 	.word	0x20000038
 8005bdc:	20000040 	.word	0x20000040

08005be0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005be0:	4a07      	ldr	r2, [pc, #28]	; (8005c00 <HAL_Init+0x20>)
{
 8005be2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005be4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005be6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005be8:	f043 0310 	orr.w	r3, r3, #16
 8005bec:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005bee:	f000 f82d 	bl	8005c4c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	f7ff ffd0 	bl	8005b98 <HAL_InitTick>
  HAL_MspInit();
 8005bf8:	f7fc fe84 	bl	8002904 <HAL_MspInit>
}
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	bd08      	pop	{r3, pc}
 8005c00:	40022000 	.word	0x40022000

08005c04 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005c04:	4a03      	ldr	r2, [pc, #12]	; (8005c14 <HAL_IncTick+0x10>)
 8005c06:	4b04      	ldr	r3, [pc, #16]	; (8005c18 <HAL_IncTick+0x14>)
 8005c08:	6811      	ldr	r1, [r2, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	440b      	add	r3, r1
 8005c0e:	6013      	str	r3, [r2, #0]
}
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	20000d28 	.word	0x20000d28
 8005c18:	2000003d 	.word	0x2000003d

08005c1c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005c1c:	4b01      	ldr	r3, [pc, #4]	; (8005c24 <HAL_GetTick+0x8>)
 8005c1e:	6818      	ldr	r0, [r3, #0]
}
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	20000d28 	.word	0x20000d28

08005c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c28:	b538      	push	{r3, r4, r5, lr}
 8005c2a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005c2c:	f7ff fff6 	bl	8005c1c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c30:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8005c32:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8005c34:	d002      	beq.n	8005c3c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c36:	4b04      	ldr	r3, [pc, #16]	; (8005c48 <HAL_Delay+0x20>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c3c:	f7ff ffee 	bl	8005c1c <HAL_GetTick>
 8005c40:	1b40      	subs	r0, r0, r5
 8005c42:	42a0      	cmp	r0, r4
 8005c44:	d3fa      	bcc.n	8005c3c <HAL_Delay+0x14>
  {
  }
}
 8005c46:	bd38      	pop	{r3, r4, r5, pc}
 8005c48:	2000003d 	.word	0x2000003d

08005c4c <HAL_NVIC_SetPriorityGrouping>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c4c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c50:	4a06      	ldr	r2, [pc, #24]	; (8005c6c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005c52:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c54:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005c56:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c5a:	400b      	ands	r3, r1
 8005c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8005c64:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8005c66:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	e000ed00 	.word	0xe000ed00

08005c70 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c70:	4b18      	ldr	r3, [pc, #96]	; (8005cd4 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c72:	b430      	push	{r4, r5}
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c7a:	f1c3 0507 	rsb	r5, r3, #7
 8005c7e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c80:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c84:	bf28      	it	cs
 8005c86:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c88:	2c06      	cmp	r4, #6
 8005c8a:	d919      	bls.n	8005cc0 <HAL_NVIC_SetPriority+0x50>
 8005c8c:	f04f 34ff 	mov.w	r4, #4294967295
 8005c90:	3b03      	subs	r3, #3
 8005c92:	409c      	lsls	r4, r3
 8005c94:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c98:	f04f 32ff 	mov.w	r2, #4294967295
 8005c9c:	40aa      	lsls	r2, r5
 8005c9e:	ea21 0102 	bic.w	r1, r1, r2
 8005ca2:	fa01 f203 	lsl.w	r2, r1, r3
 8005ca6:	4322      	orrs	r2, r4
 8005ca8:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8005caa:	2800      	cmp	r0, #0
 8005cac:	b2d2      	uxtb	r2, r2
 8005cae:	db0a      	blt.n	8005cc6 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cb0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005cb4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005cb8:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005cbc:	bc30      	pop	{r4, r5}
 8005cbe:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cc0:	2400      	movs	r4, #0
 8005cc2:	4623      	mov	r3, r4
 8005cc4:	e7e8      	b.n	8005c98 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cc6:	4b04      	ldr	r3, [pc, #16]	; (8005cd8 <HAL_NVIC_SetPriority+0x68>)
 8005cc8:	f000 000f 	and.w	r0, r0, #15
 8005ccc:	4403      	add	r3, r0
 8005cce:	761a      	strb	r2, [r3, #24]
 8005cd0:	bc30      	pop	{r4, r5}
 8005cd2:	4770      	bx	lr
 8005cd4:	e000ed00 	.word	0xe000ed00
 8005cd8:	e000ecfc 	.word	0xe000ecfc

08005cdc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	db07      	blt.n	8005cf0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	f000 011f 	and.w	r1, r0, #31
 8005ce6:	4a03      	ldr	r2, [pc, #12]	; (8005cf4 <HAL_NVIC_EnableIRQ+0x18>)
 8005ce8:	408b      	lsls	r3, r1
 8005cea:	0940      	lsrs	r0, r0, #5
 8005cec:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	e000e100 	.word	0xe000e100

08005cf8 <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005cf8:	3801      	subs	r0, #1
 8005cfa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005cfe:	d20d      	bcs.n	8005d1c <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d00:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d02:	25f0      	movs	r5, #240	; 0xf0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d04:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d06:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d08:	4b05      	ldr	r3, [pc, #20]	; (8005d20 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d0a:	4c06      	ldr	r4, [pc, #24]	; (8005d24 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d0c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d0e:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d12:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8005d14:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d16:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d18:	6019      	str	r1, [r3, #0]
 8005d1a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005d1c:	2001      	movs	r0, #1
 8005d1e:	4770      	bx	lr
 8005d20:	e000e010 	.word	0xe000e010
 8005d24:	e000ed00 	.word	0xe000ed00

08005d28 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005d28:	b350      	cbz	r0, 8005d80 <HAL_DMA_Init+0x58>
 8005d2a:	4602      	mov	r2, r0
{
 8005d2c:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005d2e:	e9d0 3601 	ldrd	r3, r6, [r0, #4]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d32:	2400      	movs	r4, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005d34:	2501      	movs	r5, #1
  tmp |=  hdma->Init.Direction        |
 8005d36:	4333      	orrs	r3, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d38:	68d6      	ldr	r6, [r2, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005d3a:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d3c:	4333      	orrs	r3, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005d3e:	4911      	ldr	r1, [pc, #68]	; (8005d84 <HAL_DMA_Init+0x5c>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d40:	6916      	ldr	r6, [r2, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005d42:	4f11      	ldr	r7, [pc, #68]	; (8005d88 <HAL_DMA_Init+0x60>)
 8005d44:	4401      	add	r1, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d46:	4333      	orrs	r3, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d48:	6956      	ldr	r6, [r2, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005d4a:	fba7 7101 	umull	r7, r1, r7, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d4e:	4333      	orrs	r3, r6
 8005d50:	6996      	ldr	r6, [r2, #24]
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d52:	69d7      	ldr	r7, [r2, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d54:	4333      	orrs	r3, r6
  tmp = hdma->Instance->CCR;
 8005d56:	6806      	ldr	r6, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005d58:	0909      	lsrs	r1, r1, #4
 8005d5a:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005d5c:	f426 567f 	bic.w	r6, r6, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d60:	433b      	orrs	r3, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005d62:	f026 0630 	bic.w	r6, r6, #48	; 0x30
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005d66:	6411      	str	r1, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005d68:	4908      	ldr	r1, [pc, #32]	; (8005d8c <HAL_DMA_Init+0x64>)
  tmp |=  hdma->Init.Direction        |
 8005d6a:	4333      	orrs	r3, r6
  hdma->DmaBaseAddress = DMA1;
 8005d6c:	63d1      	str	r1, [r2, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8005d6e:	6003      	str	r3, [r0, #0]
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;

  return HAL_OK;
 8005d70:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d72:	6394      	str	r4, [r2, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8005d74:	f882 4020 	strb.w	r4, [r2, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8005d78:	f882 5021 	strb.w	r5, [r2, #33]	; 0x21
}
 8005d7c:	bcf0      	pop	{r4, r5, r6, r7}
 8005d7e:	4770      	bx	lr
    return HAL_ERROR;
 8005d80:	2001      	movs	r0, #1
}
 8005d82:	4770      	bx	lr
 8005d84:	bffdfff8 	.word	0xbffdfff8
 8005d88:	cccccccd 	.word	0xcccccccd
 8005d8c:	40020000 	.word	0x40020000

08005d90 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d90:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005d92:	f890 4020 	ldrb.w	r4, [r0, #32]
 8005d96:	2c01      	cmp	r4, #1
 8005d98:	d032      	beq.n	8005e00 <HAL_DMA_Start_IT+0x70>
 8005d9a:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d9c:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8005da0:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8005da4:	42a5      	cmp	r5, r4
 8005da6:	d125      	bne.n	8005df4 <HAL_DMA_Start_IT+0x64>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005da8:	2600      	movs	r6, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8005daa:	f04f 0e02 	mov.w	lr, #2
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005dae:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005db0:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8005db2:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005db4:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8005db6:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 8005dba:	40bd      	lsls	r5, r7
    __HAL_DMA_DISABLE(hdma);
 8005dbc:	f026 0601 	bic.w	r6, r6, #1

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005dc0:	6847      	ldr	r7, [r0, #4]
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dc2:	f880 e021 	strb.w	lr, [r0, #33]	; 0x21
    __HAL_DMA_DISABLE(hdma);
 8005dc6:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005dc8:	f8cc 5004 	str.w	r5, [ip, #4]
  hdma->Instance->CNDTR = DataLength;
 8005dcc:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 8005dce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005dd0:	2f10      	cmp	r7, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005dd2:	bf0b      	itete	eq
 8005dd4:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8005dd6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005dd8:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8005dda:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8005ddc:	b19b      	cbz	r3, 8005e06 <HAL_DMA_Start_IT+0x76>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	f043 030e 	orr.w	r3, r3, #14
 8005de4:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005de6:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 8005de8:	6822      	ldr	r2, [r4, #0]
}
 8005dea:	4618      	mov	r0, r3
    __HAL_DMA_ENABLE(hdma);
 8005dec:	f042 0201 	orr.w	r2, r2, #1
 8005df0:	6022      	str	r2, [r4, #0]
}
 8005df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hdma); 
 8005df4:	2200      	movs	r2, #0
    status = HAL_BUSY;
 8005df6:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma); 
 8005df8:	f880 2020 	strb.w	r2, [r0, #32]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8005e00:	2302      	movs	r3, #2
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	f023 0304 	bic.w	r3, r3, #4
 8005e0c:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005e0e:	6823      	ldr	r3, [r4, #0]
 8005e10:	f043 030a 	orr.w	r3, r3, #10
 8005e14:	6023      	str	r3, [r4, #0]
 8005e16:	e7e6      	b.n	8005de6 <HAL_DMA_Start_IT+0x56>

08005e18 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005e18:	2204      	movs	r2, #4
{
 8005e1a:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005e1c:	e9d0 610f 	ldrd	r6, r1, [r0, #60]	; 0x3c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005e20:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005e22:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005e24:	408a      	lsls	r2, r1
 8005e26:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 8005e28:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005e2a:	d01f      	beq.n	8005e6c <HAL_DMA_IRQHandler+0x54>
 8005e2c:	076a      	lsls	r2, r5, #29
 8005e2e:	d51d      	bpl.n	8005e6c <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	0691      	lsls	r1, r2, #26
 8005e34:	d403      	bmi.n	8005e3e <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	f022 0204 	bic.w	r2, r2, #4
 8005e3c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005e3e:	4a3f      	ldr	r2, [pc, #252]	; (8005f3c <HAL_DMA_IRQHandler+0x124>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d05c      	beq.n	8005efe <HAL_DMA_IRQHandler+0xe6>
 8005e44:	3214      	adds	r2, #20
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d061      	beq.n	8005f0e <HAL_DMA_IRQHandler+0xf6>
 8005e4a:	3214      	adds	r2, #20
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d068      	beq.n	8005f22 <HAL_DMA_IRQHandler+0x10a>
 8005e50:	3214      	adds	r2, #20
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d06b      	beq.n	8005f2e <HAL_DMA_IRQHandler+0x116>
 8005e56:	3214      	adds	r2, #20
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d05d      	beq.n	8005f18 <HAL_DMA_IRQHandler+0x100>
 8005e5c:	3214      	adds	r2, #20
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	bf0c      	ite	eq
 8005e62:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8005e66:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8005e6a:	e049      	b.n	8005f00 <HAL_DMA_IRQHandler+0xe8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	408a      	lsls	r2, r1
 8005e70:	4222      	tst	r2, r4
 8005e72:	d022      	beq.n	8005eba <HAL_DMA_IRQHandler+0xa2>
 8005e74:	07aa      	lsls	r2, r5, #30
 8005e76:	d520      	bpl.n	8005eba <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	0691      	lsls	r1, r2, #26
 8005e7c:	d406      	bmi.n	8005e8c <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 8005e7e:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	f022 020a 	bic.w	r2, r2, #10
 8005e86:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005e88:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005e8c:	4a2b      	ldr	r2, [pc, #172]	; (8005f3c <HAL_DMA_IRQHandler+0x124>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d02b      	beq.n	8005eea <HAL_DMA_IRQHandler+0xd2>
 8005e92:	3214      	adds	r2, #20
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d042      	beq.n	8005f1e <HAL_DMA_IRQHandler+0x106>
 8005e98:	3214      	adds	r2, #20
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d044      	beq.n	8005f28 <HAL_DMA_IRQHandler+0x110>
 8005e9e:	3214      	adds	r2, #20
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d036      	beq.n	8005f12 <HAL_DMA_IRQHandler+0xfa>
 8005ea4:	3214      	adds	r2, #20
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d044      	beq.n	8005f34 <HAL_DMA_IRQHandler+0x11c>
 8005eaa:	3214      	adds	r2, #20
 8005eac:	4293      	cmp	r3, r2
 8005eae:	bf0c      	ite	eq
 8005eb0:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8005eb4:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8005eb8:	e018      	b.n	8005eec <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005eba:	2208      	movs	r2, #8
 8005ebc:	408a      	lsls	r2, r1
 8005ebe:	4222      	tst	r2, r4
 8005ec0:	d01b      	beq.n	8005efa <HAL_DMA_IRQHandler+0xe2>
 8005ec2:	072a      	lsls	r2, r5, #28
 8005ec4:	d519      	bpl.n	8005efa <HAL_DMA_IRQHandler+0xe2>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005ec6:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8005ec8:	2500      	movs	r5, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005eca:	681c      	ldr	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005ecc:	fa02 f101 	lsl.w	r1, r2, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ed0:	f024 040e 	bic.w	r4, r4, #14
 8005ed4:	601c      	str	r4, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 8005ed6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005ed8:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005eda:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8005edc:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8005ee0:	f880 5020 	strb.w	r5, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8005ee4:	b14b      	cbz	r3, 8005efa <HAL_DMA_IRQHandler+0xe2>
}
 8005ee6:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005ee8:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005eea:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8005eec:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005eee:	4c14      	ldr	r4, [pc, #80]	; (8005f40 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferCpltCallback != NULL)
 8005ef0:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005ef2:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 8005ef4:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8005ef8:	b93a      	cbnz	r2, 8005f0a <HAL_DMA_IRQHandler+0xf2>
}
 8005efa:	bc70      	pop	{r4, r5, r6}
 8005efc:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005efe:	2304      	movs	r3, #4
 8005f00:	490f      	ldr	r1, [pc, #60]	; (8005f40 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferHalfCpltCallback != NULL)
 8005f02:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005f04:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8005f06:	2a00      	cmp	r2, #0
 8005f08:	d0f7      	beq.n	8005efa <HAL_DMA_IRQHandler+0xe2>
}
 8005f0a:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8005f0c:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005f0e:	2340      	movs	r3, #64	; 0x40
 8005f10:	e7f6      	b.n	8005f00 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005f12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f16:	e7e9      	b.n	8005eec <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005f18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005f1c:	e7f0      	b.n	8005f00 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005f1e:	2320      	movs	r3, #32
 8005f20:	e7e4      	b.n	8005eec <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f26:	e7eb      	b.n	8005f00 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f2c:	e7de      	b.n	8005eec <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005f2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f32:	e7e5      	b.n	8005f00 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005f34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f38:	e7d8      	b.n	8005eec <HAL_DMA_IRQHandler+0xd4>
 8005f3a:	bf00      	nop
 8005f3c:	40020008 	.word	0x40020008
 8005f40:	40020000 	.word	0x40020000

08005f44 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f44:	680a      	ldr	r2, [r1, #0]
 8005f46:	2a00      	cmp	r2, #0
 8005f48:	f000 80db 	beq.w	8006102 <HAL_GPIO_Init+0x1be>
{
 8005f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00u;
 8005f50:	f04f 0a00 	mov.w	sl, #0
{
 8005f54:	b085      	sub	sp, #20
  uint32_t position = 0x00u;
 8005f56:	4655      	mov	r5, sl
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005f58:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 800612c <HAL_GPIO_Init+0x1e8>
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005f5c:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 8006130 <HAL_GPIO_Init+0x1ec>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005f60:	4f6d      	ldr	r7, [pc, #436]	; (8006118 <HAL_GPIO_Init+0x1d4>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005f62:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8006134 <HAL_GPIO_Init+0x1f0>
 8005f66:	e003      	b.n	8005f70 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8005f68:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f6a:	fa32 f305 	lsrs.w	r3, r2, r5
 8005f6e:	d078      	beq.n	8006062 <HAL_GPIO_Init+0x11e>
    ioposition = (0x01uL << position);
 8005f70:	2301      	movs	r3, #1
 8005f72:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f74:	ea02 0403 	and.w	r4, r2, r3
    if (iocurrent == ioposition)
 8005f78:	42a3      	cmp	r3, r4
 8005f7a:	d1f5      	bne.n	8005f68 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8005f7c:	684a      	ldr	r2, [r1, #4]
 8005f7e:	2a12      	cmp	r2, #18
 8005f80:	f000 809e 	beq.w	80060c0 <HAL_GPIO_Init+0x17c>
 8005f84:	f200 8087 	bhi.w	8006096 <HAL_GPIO_Init+0x152>
 8005f88:	2a02      	cmp	r2, #2
 8005f8a:	f000 809d 	beq.w	80060c8 <HAL_GPIO_Init+0x184>
 8005f8e:	d97c      	bls.n	800608a <HAL_GPIO_Init+0x146>
 8005f90:	2a03      	cmp	r2, #3
 8005f92:	d069      	beq.n	8006068 <HAL_GPIO_Init+0x124>
 8005f94:	2a11      	cmp	r2, #17
 8005f96:	d102      	bne.n	8005f9e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005f98:	68cb      	ldr	r3, [r1, #12]
 8005f9a:	f103 0a04 	add.w	sl, r3, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005f9e:	2cff      	cmp	r4, #255	; 0xff
 8005fa0:	d866      	bhi.n	8006070 <HAL_GPIO_Init+0x12c>
 8005fa2:	4681      	mov	r9, r0
 8005fa4:	6803      	ldr	r3, [r0, #0]
 8005fa6:	00aa      	lsls	r2, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005fa8:	260f      	movs	r6, #15
 8005faa:	fa06 fb02 	lsl.w	fp, r6, r2
 8005fae:	ea23 030b 	bic.w	r3, r3, fp
 8005fb2:	fa0a f202 	lsl.w	r2, sl, r2
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	f8c9 3000 	str.w	r3, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005fbc:	684a      	ldr	r2, [r1, #4]
 8005fbe:	00d3      	lsls	r3, r2, #3
 8005fc0:	d561      	bpl.n	8006086 <HAL_GPIO_Init+0x142>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005fc2:	f8dc 9018 	ldr.w	r9, [ip, #24]
 8005fc6:	f025 0303 	bic.w	r3, r5, #3
 8005fca:	f049 0901 	orr.w	r9, r9, #1
 8005fce:	f8cc 9018 	str.w	r9, [ip, #24]
 8005fd2:	f8dc 9018 	ldr.w	r9, [ip, #24]
 8005fd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fda:	f009 0901 	and.w	r9, r9, #1
 8005fde:	f8cd 900c 	str.w	r9, [sp, #12]
 8005fe2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005fe6:	f005 0903 	and.w	r9, r5, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005fea:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005fee:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8005ff2:	f8d3 b008 	ldr.w	fp, [r3, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005ff6:	fa06 f609 	lsl.w	r6, r6, r9
 8005ffa:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005ffe:	4570      	cmp	r0, lr
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006000:	9601      	str	r6, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006002:	d011      	beq.n	8006028 <HAL_GPIO_Init+0xe4>
 8006004:	4540      	cmp	r0, r8
 8006006:	d063      	beq.n	80060d0 <HAL_GPIO_Init+0x18c>
 8006008:	4e44      	ldr	r6, [pc, #272]	; (800611c <HAL_GPIO_Init+0x1d8>)
 800600a:	42b0      	cmp	r0, r6
 800600c:	d07a      	beq.n	8006104 <HAL_GPIO_Init+0x1c0>
 800600e:	4e44      	ldr	r6, [pc, #272]	; (8006120 <HAL_GPIO_Init+0x1dc>)
 8006010:	42b0      	cmp	r0, r6
 8006012:	bf0c      	ite	eq
 8006014:	f04f 0b03 	moveq.w	fp, #3
 8006018:	f04f 0b04 	movne.w	fp, #4
 800601c:	9e01      	ldr	r6, [sp, #4]
 800601e:	fa0b f909 	lsl.w	r9, fp, r9
 8006022:	ea46 0609 	orr.w	r6, r6, r9
 8006026:	9601      	str	r6, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 8006028:	609e      	str	r6, [r3, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800602a:	683b      	ldr	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800602c:	03d6      	lsls	r6, r2, #15
          SET_BIT(EXTI->IMR, iocurrent);
 800602e:	bf4c      	ite	mi
 8006030:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006032:	43a3      	bicpl	r3, r4
 8006034:	603b      	str	r3, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8006036:	687b      	ldr	r3, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006038:	0396      	lsls	r6, r2, #14
          SET_BIT(EXTI->EMR, iocurrent);
 800603a:	bf4c      	ite	mi
 800603c:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800603e:	43a3      	bicpl	r3, r4
 8006040:	607b      	str	r3, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8006042:	68bb      	ldr	r3, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006044:	02d6      	lsls	r6, r2, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 8006046:	bf4c      	ite	mi
 8006048:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800604a:	43a3      	bicpl	r3, r4
 800604c:	60bb      	str	r3, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800604e:	0292      	lsls	r2, r2, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 8006050:	68fb      	ldr	r3, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006052:	d515      	bpl.n	8006080 <HAL_GPIO_Init+0x13c>
          SET_BIT(EXTI->FTSR, iocurrent);
 8006054:	431c      	orrs	r4, r3
 8006056:	60fc      	str	r4, [r7, #12]
 8006058:	680a      	ldr	r2, [r1, #0]
	position++;
 800605a:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800605c:	fa32 f305 	lsrs.w	r3, r2, r5
 8006060:	d186      	bne.n	8005f70 <HAL_GPIO_Init+0x2c>
  }
}
 8006062:	b005      	add	sp, #20
 8006064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006068:	2cff      	cmp	r4, #255	; 0xff
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800606a:	f04f 0a00 	mov.w	sl, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800606e:	d998      	bls.n	8005fa2 <HAL_GPIO_Init+0x5e>
 8006070:	f105 4280 	add.w	r2, r5, #1073741824	; 0x40000000
 8006074:	3a08      	subs	r2, #8
 8006076:	6843      	ldr	r3, [r0, #4]
 8006078:	0092      	lsls	r2, r2, #2
 800607a:	f100 0904 	add.w	r9, r0, #4
 800607e:	e793      	b.n	8005fa8 <HAL_GPIO_Init+0x64>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006080:	ea23 0404 	bic.w	r4, r3, r4
 8006084:	60fc      	str	r4, [r7, #12]
 8006086:	680a      	ldr	r2, [r1, #0]
 8006088:	e76e      	b.n	8005f68 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 800608a:	b1a2      	cbz	r2, 80060b6 <HAL_GPIO_Init+0x172>
 800608c:	2a01      	cmp	r2, #1
 800608e:	d186      	bne.n	8005f9e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006090:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8006094:	e783      	b.n	8005f9e <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8006096:	4e23      	ldr	r6, [pc, #140]	; (8006124 <HAL_GPIO_Init+0x1e0>)
 8006098:	42b2      	cmp	r2, r6
 800609a:	d00c      	beq.n	80060b6 <HAL_GPIO_Init+0x172>
 800609c:	d920      	bls.n	80060e0 <HAL_GPIO_Init+0x19c>
 800609e:	4e22      	ldr	r6, [pc, #136]	; (8006128 <HAL_GPIO_Init+0x1e4>)
 80060a0:	42b2      	cmp	r2, r6
 80060a2:	d008      	beq.n	80060b6 <HAL_GPIO_Init+0x172>
 80060a4:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80060a8:	42b2      	cmp	r2, r6
 80060aa:	d004      	beq.n	80060b6 <HAL_GPIO_Init+0x172>
 80060ac:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 80060b0:	42b2      	cmp	r2, r6
 80060b2:	f47f af74 	bne.w	8005f9e <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80060b6:	688a      	ldr	r2, [r1, #8]
 80060b8:	b9e2      	cbnz	r2, 80060f4 <HAL_GPIO_Init+0x1b0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80060ba:	f04f 0a04 	mov.w	sl, #4
 80060be:	e76e      	b.n	8005f9e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80060c0:	68cb      	ldr	r3, [r1, #12]
 80060c2:	f103 0a0c 	add.w	sl, r3, #12
          break;
 80060c6:	e76a      	b.n	8005f9e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80060c8:	68cb      	ldr	r3, [r1, #12]
 80060ca:	f103 0a08 	add.w	sl, r3, #8
          break;
 80060ce:	e766      	b.n	8005f9e <HAL_GPIO_Init+0x5a>
 80060d0:	f04f 0b01 	mov.w	fp, #1
 80060d4:	fa0b f909 	lsl.w	r9, fp, r9
 80060d8:	ea46 0609 	orr.w	r6, r6, r9
 80060dc:	9601      	str	r6, [sp, #4]
 80060de:	e7a3      	b.n	8006028 <HAL_GPIO_Init+0xe4>
      switch (GPIO_Init->Mode)
 80060e0:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 80060e4:	42b2      	cmp	r2, r6
 80060e6:	d0e6      	beq.n	80060b6 <HAL_GPIO_Init+0x172>
 80060e8:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80060ec:	42b2      	cmp	r2, r6
 80060ee:	f47f af56 	bne.w	8005f9e <HAL_GPIO_Init+0x5a>
 80060f2:	e7e0      	b.n	80060b6 <HAL_GPIO_Init+0x172>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80060f4:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80060f6:	bf0c      	ite	eq
 80060f8:	6103      	streq	r3, [r0, #16]
            GPIOx->BRR = ioposition;
 80060fa:	6143      	strne	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80060fc:	f04f 0a08 	mov.w	sl, #8
 8006100:	e74d      	b.n	8005f9e <HAL_GPIO_Init+0x5a>
 8006102:	4770      	bx	lr
 8006104:	f04f 0b02 	mov.w	fp, #2
 8006108:	9e01      	ldr	r6, [sp, #4]
 800610a:	fa0b f909 	lsl.w	r9, fp, r9
 800610e:	ea46 0609 	orr.w	r6, r6, r9
 8006112:	9601      	str	r6, [sp, #4]
 8006114:	e788      	b.n	8006028 <HAL_GPIO_Init+0xe4>
 8006116:	bf00      	nop
 8006118:	40010400 	.word	0x40010400
 800611c:	40011000 	.word	0x40011000
 8006120:	40011400 	.word	0x40011400
 8006124:	10210000 	.word	0x10210000
 8006128:	10310000 	.word	0x10310000
 800612c:	40021000 	.word	0x40021000
 8006130:	40010800 	.word	0x40010800
 8006134:	40010c00 	.word	0x40010c00

08006138 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006138:	b902      	cbnz	r2, 800613c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800613a:	0409      	lsls	r1, r1, #16
 800613c:	6101      	str	r1, [r0, #16]
  }
}
 800613e:	4770      	bx	lr

08006140 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006140:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8006144:	4689      	mov	r9, r1
 8006146:	4616      	mov	r6, r2
 8006148:	461f      	mov	r7, r3
 800614a:	4605      	mov	r5, r0
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800614c:	6800      	ldr	r0, [r0, #0]
{
 800614e:	b082      	sub	sp, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006150:	6804      	ldr	r4, [r0, #0]
 8006152:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8006156:	6004      	str	r4, [r0, #0]
{
 8006158:	9c08      	ldr	r4, [sp, #32]
 800615a:	1c62      	adds	r2, r4, #1
 800615c:	d140      	bne.n	80061e0 <I2C_RequestMemoryWrite+0xa0>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800615e:	6943      	ldr	r3, [r0, #20]
 8006160:	07db      	lsls	r3, r3, #31
 8006162:	d5fc      	bpl.n	800615e <I2C_RequestMemoryWrite+0x1e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006164:	f009 01fe 	and.w	r1, r9, #254	; 0xfe
 8006168:	6101      	str	r1, [r0, #16]
 800616a:	1c63      	adds	r3, r4, #1
 800616c:	d012      	beq.n	8006194 <I2C_RequestMemoryWrite+0x54>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800616e:	6943      	ldr	r3, [r0, #20]
 8006170:	079b      	lsls	r3, r3, #30
 8006172:	d412      	bmi.n	800619a <I2C_RequestMemoryWrite+0x5a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006174:	6943      	ldr	r3, [r0, #20]
 8006176:	055a      	lsls	r2, r3, #21
 8006178:	d43e      	bmi.n	80061f8 <I2C_RequestMemoryWrite+0xb8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800617a:	f7ff fd4f 	bl	8005c1c <HAL_GetTick>
 800617e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006180:	1ac0      	subs	r0, r0, r3
 8006182:	4284      	cmp	r4, r0
 8006184:	d350      	bcc.n	8006228 <I2C_RequestMemoryWrite+0xe8>
 8006186:	2c00      	cmp	r4, #0
 8006188:	d04e      	beq.n	8006228 <I2C_RequestMemoryWrite+0xe8>
 800618a:	6828      	ldr	r0, [r5, #0]
 800618c:	e7ed      	b.n	800616a <I2C_RequestMemoryWrite+0x2a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800618e:	6943      	ldr	r3, [r0, #20]
 8006190:	055a      	lsls	r2, r3, #21
 8006192:	d431      	bmi.n	80061f8 <I2C_RequestMemoryWrite+0xb8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006194:	6943      	ldr	r3, [r0, #20]
 8006196:	0799      	lsls	r1, r3, #30
 8006198:	d5f9      	bpl.n	800618e <I2C_RequestMemoryWrite+0x4e>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800619a:	2300      	movs	r3, #0
 800619c:	9301      	str	r3, [sp, #4]
 800619e:	6943      	ldr	r3, [r0, #20]
 80061a0:	9301      	str	r3, [sp, #4]
 80061a2:	6983      	ldr	r3, [r0, #24]
 80061a4:	9301      	str	r3, [sp, #4]
 80061a6:	9b01      	ldr	r3, [sp, #4]
 80061a8:	1c62      	adds	r2, r4, #1
 80061aa:	d003      	beq.n	80061b4 <I2C_RequestMemoryWrite+0x74>
 80061ac:	e04b      	b.n	8006246 <I2C_RequestMemoryWrite+0x106>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061ae:	6943      	ldr	r3, [r0, #20]
 80061b0:	0559      	lsls	r1, r3, #21
 80061b2:	d458      	bmi.n	8006266 <I2C_RequestMemoryWrite+0x126>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061b4:	6943      	ldr	r3, [r0, #20]
 80061b6:	061b      	lsls	r3, r3, #24
 80061b8:	d5f9      	bpl.n	80061ae <I2C_RequestMemoryWrite+0x6e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061ba:	2f01      	cmp	r7, #1
 80061bc:	d00a      	beq.n	80061d4 <I2C_RequestMemoryWrite+0x94>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80061be:	0a33      	lsrs	r3, r6, #8
 80061c0:	6103      	str	r3, [r0, #16]
 80061c2:	1c67      	adds	r7, r4, #1
 80061c4:	d003      	beq.n	80061ce <I2C_RequestMemoryWrite+0x8e>
 80061c6:	e084      	b.n	80062d2 <I2C_RequestMemoryWrite+0x192>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061c8:	6943      	ldr	r3, [r0, #20]
 80061ca:	055a      	lsls	r2, r3, #21
 80061cc:	d467      	bmi.n	800629e <I2C_RequestMemoryWrite+0x15e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061ce:	6943      	ldr	r3, [r0, #20]
 80061d0:	0619      	lsls	r1, r3, #24
 80061d2:	d5f9      	bpl.n	80061c8 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061d4:	b2f6      	uxtb	r6, r6
 80061d6:	6106      	str	r6, [r0, #16]
  return HAL_OK;
 80061d8:	2000      	movs	r0, #0
}
 80061da:	b002      	add	sp, #8
 80061dc:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061e0:	6943      	ldr	r3, [r0, #20]
 80061e2:	07d9      	lsls	r1, r3, #31
 80061e4:	d4be      	bmi.n	8006164 <I2C_RequestMemoryWrite+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061e6:	f7ff fd19 	bl	8005c1c <HAL_GetTick>
 80061ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ec:	1ac0      	subs	r0, r0, r3
 80061ee:	4284      	cmp	r4, r0
 80061f0:	d31a      	bcc.n	8006228 <I2C_RequestMemoryWrite+0xe8>
 80061f2:	b1cc      	cbz	r4, 8006228 <I2C_RequestMemoryWrite+0xe8>
 80061f4:	6828      	ldr	r0, [r5, #0]
 80061f6:	e7b0      	b.n	800615a <I2C_RequestMemoryWrite+0x1a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061f8:	f46f 6480 	mvn.w	r4, #1024	; 0x400
      hi2c->PreviousState       = I2C_STATE_NONE;
 80061fc:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80061fe:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006200:	6803      	ldr	r3, [r0, #0]
 8006202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006206:	6003      	str	r3, [r0, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006208:	6144      	str	r4, [r0, #20]
    return HAL_ERROR;
 800620a:	2001      	movs	r0, #1
      hi2c->PreviousState       = I2C_STATE_NONE;
 800620c:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800620e:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006212:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006216:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006218:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800621c:	f043 0304 	orr.w	r3, r3, #4
 8006220:	642b      	str	r3, [r5, #64]	; 0x40
}
 8006222:	b002      	add	sp, #8
 8006224:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006228:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800622a:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800622c:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800622e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006232:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006236:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006238:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800623c:	f043 0320 	orr.w	r3, r3, #32
 8006240:	642b      	str	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8006242:	2001      	movs	r0, #1
 8006244:	e7c9      	b.n	80061da <I2C_RequestMemoryWrite+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006246:	6943      	ldr	r3, [r0, #20]
 8006248:	061a      	lsls	r2, r3, #24
 800624a:	d4b6      	bmi.n	80061ba <I2C_RequestMemoryWrite+0x7a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800624c:	6943      	ldr	r3, [r0, #20]
 800624e:	0559      	lsls	r1, r3, #21
 8006250:	d409      	bmi.n	8006266 <I2C_RequestMemoryWrite+0x126>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006252:	f7ff fce3 	bl	8005c1c <HAL_GetTick>
 8006256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006258:	1ac0      	subs	r0, r0, r3
 800625a:	4284      	cmp	r4, r0
 800625c:	d349      	bcc.n	80062f2 <I2C_RequestMemoryWrite+0x1b2>
 800625e:	2c00      	cmp	r4, #0
 8006260:	d047      	beq.n	80062f2 <I2C_RequestMemoryWrite+0x1b2>
 8006262:	6828      	ldr	r0, [r5, #0]
 8006264:	e7a0      	b.n	80061a8 <I2C_RequestMemoryWrite+0x68>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006266:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8006268:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800626a:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 800626e:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8006270:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006272:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006276:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800627a:	6c2b      	ldr	r3, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800627c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006280:	f043 0304 	orr.w	r3, r3, #4
 8006284:	642b      	str	r3, [r5, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006286:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8006288:	2b04      	cmp	r3, #4
 800628a:	d001      	beq.n	8006290 <I2C_RequestMemoryWrite+0x150>
    return HAL_ERROR;
 800628c:	2001      	movs	r0, #1
 800628e:	e7a4      	b.n	80061da <I2C_RequestMemoryWrite+0x9a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006290:	682a      	ldr	r2, [r5, #0]
    return HAL_ERROR;
 8006292:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006294:	6813      	ldr	r3, [r2, #0]
 8006296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800629a:	6013      	str	r3, [r2, #0]
 800629c:	e79d      	b.n	80061da <I2C_RequestMemoryWrite+0x9a>
    hi2c->PreviousState       = I2C_STATE_NONE;
 800629e:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80062a0:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062a2:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80062a6:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80062a8:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80062aa:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062ae:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062b2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80062b4:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062b8:	f043 0304 	orr.w	r3, r3, #4
 80062bc:	642b      	str	r3, [r5, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062be:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80062c0:	2b04      	cmp	r3, #4
 80062c2:	d1e3      	bne.n	800628c <I2C_RequestMemoryWrite+0x14c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c4:	682a      	ldr	r2, [r5, #0]
      return HAL_ERROR;
 80062c6:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c8:	6813      	ldr	r3, [r2, #0]
 80062ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	e783      	b.n	80061da <I2C_RequestMemoryWrite+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062d2:	6943      	ldr	r3, [r0, #20]
 80062d4:	061b      	lsls	r3, r3, #24
 80062d6:	f53f af7d 	bmi.w	80061d4 <I2C_RequestMemoryWrite+0x94>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062da:	6943      	ldr	r3, [r0, #20]
 80062dc:	055b      	lsls	r3, r3, #21
 80062de:	d4de      	bmi.n	800629e <I2C_RequestMemoryWrite+0x15e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e0:	f7ff fc9c 	bl	8005c1c <HAL_GetTick>
 80062e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062e6:	1ac0      	subs	r0, r0, r3
 80062e8:	4284      	cmp	r4, r0
 80062ea:	d310      	bcc.n	800630e <I2C_RequestMemoryWrite+0x1ce>
 80062ec:	b17c      	cbz	r4, 800630e <I2C_RequestMemoryWrite+0x1ce>
 80062ee:	6828      	ldr	r0, [r5, #0]
 80062f0:	e767      	b.n	80061c2 <I2C_RequestMemoryWrite+0x82>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80062f2:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80062f4:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80062f6:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80062f8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80062fc:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006300:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006302:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006306:	f043 0320 	orr.w	r3, r3, #32
 800630a:	642b      	str	r3, [r5, #64]	; 0x40
 800630c:	e7bb      	b.n	8006286 <I2C_RequestMemoryWrite+0x146>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800630e:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006310:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006312:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006314:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006318:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800631c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800631e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006322:	f043 0320 	orr.w	r3, r3, #32
 8006326:	642b      	str	r3, [r5, #64]	; 0x40
 8006328:	e7c9      	b.n	80062be <I2C_RequestMemoryWrite+0x17e>
 800632a:	bf00      	nop

0800632c <I2C_RequestMemoryRead>:
{
 800632c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8006330:	461f      	mov	r7, r3
 8006332:	4605      	mov	r5, r0
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006334:	6800      	ldr	r0, [r0, #0]
{
 8006336:	4689      	mov	r9, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006338:	6801      	ldr	r1, [r0, #0]
{
 800633a:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800633c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8006340:	6001      	str	r1, [r0, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006342:	6802      	ldr	r2, [r0, #0]
{
 8006344:	b082      	sub	sp, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
{
 800634a:	9c08      	ldr	r4, [sp, #32]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800634c:	6002      	str	r2, [r0, #0]
 800634e:	1c61      	adds	r1, r4, #1
 8006350:	d157      	bne.n	8006402 <I2C_RequestMemoryRead+0xd6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006352:	6943      	ldr	r3, [r0, #20]
 8006354:	07da      	lsls	r2, r3, #31
 8006356:	d5fc      	bpl.n	8006352 <I2C_RequestMemoryRead+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006358:	fa5f f989 	uxtb.w	r9, r9
 800635c:	f009 03fe 	and.w	r3, r9, #254	; 0xfe
 8006360:	6103      	str	r3, [r0, #16]
 8006362:	1c62      	adds	r2, r4, #1
 8006364:	d012      	beq.n	800638c <I2C_RequestMemoryRead+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006366:	6943      	ldr	r3, [r0, #20]
 8006368:	079a      	lsls	r2, r3, #30
 800636a:	d412      	bmi.n	8006392 <I2C_RequestMemoryRead+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800636c:	6943      	ldr	r3, [r0, #20]
 800636e:	0559      	lsls	r1, r3, #21
 8006370:	d453      	bmi.n	800641a <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006372:	f7ff fc53 	bl	8005c1c <HAL_GetTick>
 8006376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006378:	1ac0      	subs	r0, r0, r3
 800637a:	4284      	cmp	r4, r0
 800637c:	d37c      	bcc.n	8006478 <I2C_RequestMemoryRead+0x14c>
 800637e:	2c00      	cmp	r4, #0
 8006380:	d07a      	beq.n	8006478 <I2C_RequestMemoryRead+0x14c>
 8006382:	6828      	ldr	r0, [r5, #0]
 8006384:	e7ed      	b.n	8006362 <I2C_RequestMemoryRead+0x36>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006386:	6943      	ldr	r3, [r0, #20]
 8006388:	0559      	lsls	r1, r3, #21
 800638a:	d446      	bmi.n	800641a <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800638c:	6943      	ldr	r3, [r0, #20]
 800638e:	079b      	lsls	r3, r3, #30
 8006390:	d5f9      	bpl.n	8006386 <I2C_RequestMemoryRead+0x5a>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006392:	2300      	movs	r3, #0
 8006394:	9301      	str	r3, [sp, #4]
 8006396:	6943      	ldr	r3, [r0, #20]
 8006398:	9301      	str	r3, [sp, #4]
 800639a:	6983      	ldr	r3, [r0, #24]
 800639c:	9301      	str	r3, [sp, #4]
 800639e:	9b01      	ldr	r3, [sp, #4]
 80063a0:	1c61      	adds	r1, r4, #1
 80063a2:	d003      	beq.n	80063ac <I2C_RequestMemoryRead+0x80>
 80063a4:	e076      	b.n	8006494 <I2C_RequestMemoryRead+0x168>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063a6:	6943      	ldr	r3, [r0, #20]
 80063a8:	055b      	lsls	r3, r3, #21
 80063aa:	d44e      	bmi.n	800644a <I2C_RequestMemoryRead+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063ac:	6943      	ldr	r3, [r0, #20]
 80063ae:	061a      	lsls	r2, r3, #24
 80063b0:	d5f9      	bpl.n	80063a6 <I2C_RequestMemoryRead+0x7a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063b2:	2f01      	cmp	r7, #1
 80063b4:	d17e      	bne.n	80064b4 <I2C_RequestMemoryRead+0x188>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063b6:	b2f6      	uxtb	r6, r6
 80063b8:	6106      	str	r6, [r0, #16]
 80063ba:	1c67      	adds	r7, r4, #1
 80063bc:	d003      	beq.n	80063c6 <I2C_RequestMemoryRead+0x9a>
 80063be:	e08d      	b.n	80064dc <I2C_RequestMemoryRead+0x1b0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063c0:	6943      	ldr	r3, [r0, #20]
 80063c2:	0559      	lsls	r1, r3, #21
 80063c4:	d441      	bmi.n	800644a <I2C_RequestMemoryRead+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063c6:	6943      	ldr	r3, [r0, #20]
 80063c8:	061e      	lsls	r6, r3, #24
 80063ca:	d5f9      	bpl.n	80063c0 <I2C_RequestMemoryRead+0x94>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063cc:	6803      	ldr	r3, [r0, #0]
 80063ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063d2:	6003      	str	r3, [r0, #0]
 80063d4:	1c63      	adds	r3, r4, #1
 80063d6:	f040 80a1 	bne.w	800651c <I2C_RequestMemoryRead+0x1f0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063da:	6943      	ldr	r3, [r0, #20]
 80063dc:	07df      	lsls	r7, r3, #31
 80063de:	d5fc      	bpl.n	80063da <I2C_RequestMemoryRead+0xae>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80063e0:	f049 0901 	orr.w	r9, r9, #1
 80063e4:	f8c0 9010 	str.w	r9, [r0, #16]
 80063e8:	1c62      	adds	r2, r4, #1
 80063ea:	d003      	beq.n	80063f4 <I2C_RequestMemoryRead+0xc8>
 80063ec:	e0b2      	b.n	8006554 <I2C_RequestMemoryRead+0x228>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063ee:	6943      	ldr	r3, [r0, #20]
 80063f0:	055b      	lsls	r3, r3, #21
 80063f2:	d412      	bmi.n	800641a <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063f4:	6943      	ldr	r3, [r0, #20]
 80063f6:	43db      	mvns	r3, r3
 80063f8:	f013 0302 	ands.w	r3, r3, #2
 80063fc:	d1f7      	bne.n	80063ee <I2C_RequestMemoryRead+0xc2>
  return HAL_OK;
 80063fe:	4618      	mov	r0, r3
 8006400:	e020      	b.n	8006444 <I2C_RequestMemoryRead+0x118>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006402:	6943      	ldr	r3, [r0, #20]
 8006404:	07db      	lsls	r3, r3, #31
 8006406:	d4a7      	bmi.n	8006358 <I2C_RequestMemoryRead+0x2c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006408:	f7ff fc08 	bl	8005c1c <HAL_GetTick>
 800640c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800640e:	1ac0      	subs	r0, r0, r3
 8006410:	4284      	cmp	r4, r0
 8006412:	d331      	bcc.n	8006478 <I2C_RequestMemoryRead+0x14c>
 8006414:	b384      	cbz	r4, 8006478 <I2C_RequestMemoryRead+0x14c>
 8006416:	6828      	ldr	r0, [r5, #0]
 8006418:	e799      	b.n	800634e <I2C_RequestMemoryRead+0x22>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800641a:	f46f 6480 	mvn.w	r4, #1024	; 0x400
      hi2c->PreviousState       = I2C_STATE_NONE;
 800641e:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8006420:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006422:	6803      	ldr	r3, [r0, #0]
 8006424:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006428:	6003      	str	r3, [r0, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800642a:	6144      	str	r4, [r0, #20]
    return HAL_ERROR;
 800642c:	2001      	movs	r0, #1
      hi2c->PreviousState       = I2C_STATE_NONE;
 800642e:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006430:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006434:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006438:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800643a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800643e:	f043 0304 	orr.w	r3, r3, #4
 8006442:	642b      	str	r3, [r5, #64]	; 0x40
}
 8006444:	b002      	add	sp, #8
 8006446:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    hi2c->PreviousState       = I2C_STATE_NONE;
 800644a:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 800644c:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800644e:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8006452:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8006454:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006456:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800645a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800645e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8006460:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006464:	f043 0304 	orr.w	r3, r3, #4
 8006468:	642b      	str	r3, [r5, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800646a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800646c:	2b04      	cmp	r3, #4
 800646e:	d02e      	beq.n	80064ce <I2C_RequestMemoryRead+0x1a2>
    return HAL_ERROR;
 8006470:	2001      	movs	r0, #1
}
 8006472:	b002      	add	sp, #8
 8006474:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006478:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800647a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800647c:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800647e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006482:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006486:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006488:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800648c:	f043 0320 	orr.w	r3, r3, #32
 8006490:	642b      	str	r3, [r5, #64]	; 0x40
 8006492:	e7ed      	b.n	8006470 <I2C_RequestMemoryRead+0x144>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006494:	6943      	ldr	r3, [r0, #20]
 8006496:	0619      	lsls	r1, r3, #24
 8006498:	d48b      	bmi.n	80063b2 <I2C_RequestMemoryRead+0x86>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800649a:	6943      	ldr	r3, [r0, #20]
 800649c:	055b      	lsls	r3, r3, #21
 800649e:	d4d4      	bmi.n	800644a <I2C_RequestMemoryRead+0x11e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064a0:	f7ff fbbc 	bl	8005c1c <HAL_GetTick>
 80064a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064a6:	1ac0      	subs	r0, r0, r3
 80064a8:	4284      	cmp	r4, r0
 80064aa:	d345      	bcc.n	8006538 <I2C_RequestMemoryRead+0x20c>
 80064ac:	2c00      	cmp	r4, #0
 80064ae:	d043      	beq.n	8006538 <I2C_RequestMemoryRead+0x20c>
 80064b0:	6828      	ldr	r0, [r5, #0]
 80064b2:	e775      	b.n	80063a0 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80064b4:	0a33      	lsrs	r3, r6, #8
 80064b6:	6103      	str	r3, [r0, #16]
 80064b8:	1c63      	adds	r3, r4, #1
 80064ba:	d003      	beq.n	80064c4 <I2C_RequestMemoryRead+0x198>
 80064bc:	e01e      	b.n	80064fc <I2C_RequestMemoryRead+0x1d0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064be:	6943      	ldr	r3, [r0, #20]
 80064c0:	0559      	lsls	r1, r3, #21
 80064c2:	d4c2      	bmi.n	800644a <I2C_RequestMemoryRead+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064c4:	6943      	ldr	r3, [r0, #20]
 80064c6:	061f      	lsls	r7, r3, #24
 80064c8:	f53f af75 	bmi.w	80063b6 <I2C_RequestMemoryRead+0x8a>
 80064cc:	e7f7      	b.n	80064be <I2C_RequestMemoryRead+0x192>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ce:	682a      	ldr	r2, [r5, #0]
    return HAL_ERROR;
 80064d0:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064d2:	6813      	ldr	r3, [r2, #0]
 80064d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	e7b3      	b.n	8006444 <I2C_RequestMemoryRead+0x118>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064dc:	6943      	ldr	r3, [r0, #20]
 80064de:	061a      	lsls	r2, r3, #24
 80064e0:	f53f af74 	bmi.w	80063cc <I2C_RequestMemoryRead+0xa0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064e4:	6943      	ldr	r3, [r0, #20]
 80064e6:	055b      	lsls	r3, r3, #21
 80064e8:	d4af      	bmi.n	800644a <I2C_RequestMemoryRead+0x11e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ea:	f7ff fb97 	bl	8005c1c <HAL_GetTick>
 80064ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064f0:	1ac0      	subs	r0, r0, r3
 80064f2:	4284      	cmp	r4, r0
 80064f4:	d320      	bcc.n	8006538 <I2C_RequestMemoryRead+0x20c>
 80064f6:	b1fc      	cbz	r4, 8006538 <I2C_RequestMemoryRead+0x20c>
 80064f8:	6828      	ldr	r0, [r5, #0]
 80064fa:	e75e      	b.n	80063ba <I2C_RequestMemoryRead+0x8e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064fc:	6943      	ldr	r3, [r0, #20]
 80064fe:	061a      	lsls	r2, r3, #24
 8006500:	f53f af59 	bmi.w	80063b6 <I2C_RequestMemoryRead+0x8a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006504:	6943      	ldr	r3, [r0, #20]
 8006506:	055a      	lsls	r2, r3, #21
 8006508:	d49f      	bmi.n	800644a <I2C_RequestMemoryRead+0x11e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800650a:	f7ff fb87 	bl	8005c1c <HAL_GetTick>
 800650e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006510:	1ac0      	subs	r0, r0, r3
 8006512:	4284      	cmp	r4, r0
 8006514:	d310      	bcc.n	8006538 <I2C_RequestMemoryRead+0x20c>
 8006516:	b17c      	cbz	r4, 8006538 <I2C_RequestMemoryRead+0x20c>
 8006518:	6828      	ldr	r0, [r5, #0]
 800651a:	e7cd      	b.n	80064b8 <I2C_RequestMemoryRead+0x18c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800651c:	6943      	ldr	r3, [r0, #20]
 800651e:	07de      	lsls	r6, r3, #31
 8006520:	f53f af5e 	bmi.w	80063e0 <I2C_RequestMemoryRead+0xb4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006524:	f7ff fb7a 	bl	8005c1c <HAL_GetTick>
 8006528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800652a:	1ac0      	subs	r0, r0, r3
 800652c:	4284      	cmp	r4, r0
 800652e:	d3a3      	bcc.n	8006478 <I2C_RequestMemoryRead+0x14c>
 8006530:	2c00      	cmp	r4, #0
 8006532:	d0a1      	beq.n	8006478 <I2C_RequestMemoryRead+0x14c>
 8006534:	6828      	ldr	r0, [r5, #0]
 8006536:	e74d      	b.n	80063d4 <I2C_RequestMemoryRead+0xa8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006538:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800653a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800653c:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800653e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006542:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006546:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006548:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800654c:	f043 0320 	orr.w	r3, r3, #32
 8006550:	642b      	str	r3, [r5, #64]	; 0x40
 8006552:	e78a      	b.n	800646a <I2C_RequestMemoryRead+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006554:	6943      	ldr	r3, [r0, #20]
 8006556:	43db      	mvns	r3, r3
 8006558:	f013 0302 	ands.w	r3, r3, #2
 800655c:	f43f af4f 	beq.w	80063fe <I2C_RequestMemoryRead+0xd2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006560:	6943      	ldr	r3, [r0, #20]
 8006562:	0559      	lsls	r1, r3, #21
 8006564:	f53f af59 	bmi.w	800641a <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006568:	f7ff fb58 	bl	8005c1c <HAL_GetTick>
 800656c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800656e:	1ac0      	subs	r0, r0, r3
 8006570:	4284      	cmp	r4, r0
 8006572:	d381      	bcc.n	8006478 <I2C_RequestMemoryRead+0x14c>
 8006574:	2c00      	cmp	r4, #0
 8006576:	f43f af7f 	beq.w	8006478 <I2C_RequestMemoryRead+0x14c>
 800657a:	6828      	ldr	r0, [r5, #0]
 800657c:	e734      	b.n	80063e8 <I2C_RequestMemoryRead+0xbc>
 800657e:	bf00      	nop

08006580 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8006580:	2800      	cmp	r0, #0
 8006582:	f000 8097 	beq.w	80066b4 <HAL_I2C_Init+0x134>
{
 8006586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006588:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800658c:	4604      	mov	r4, r0
 800658e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 8087 	beq.w	80066a6 <HAL_I2C_Init+0x126>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006598:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800659a:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800659c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80065a0:	6813      	ldr	r3, [r2, #0]
 80065a2:	f023 0301 	bic.w	r3, r3, #1
 80065a6:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80065a8:	f001 fa6c 	bl	8007a84 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80065ac:	6862      	ldr	r2, [r4, #4]
 80065ae:	4b4b      	ldr	r3, [pc, #300]	; (80066dc <HAL_I2C_Init+0x15c>)
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d84b      	bhi.n	800664c <HAL_I2C_Init+0xcc>
 80065b4:	4b4a      	ldr	r3, [pc, #296]	; (80066e0 <HAL_I2C_Init+0x160>)
 80065b6:	4298      	cmp	r0, r3
 80065b8:	d97a      	bls.n	80066b0 <HAL_I2C_Init+0x130>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80065ba:	1e43      	subs	r3, r0, #1
 80065bc:	0052      	lsls	r2, r2, #1
 80065be:	fbb3 f2f2 	udiv	r2, r3, r2
  freqrange = I2C_FREQRANGE(pclk1);
 80065c2:	4948      	ldr	r1, [pc, #288]	; (80066e4 <HAL_I2C_Init+0x164>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80065c4:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80065c6:	fba1 1000 	umull	r1, r0, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80065ca:	6859      	ldr	r1, [r3, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80065cc:	0c80      	lsrs	r0, r0, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80065ce:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80065d2:	4301      	orrs	r1, r0
 80065d4:	6059      	str	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80065d6:	6a19      	ldr	r1, [r3, #32]
 80065d8:	3001      	adds	r0, #1
 80065da:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80065de:	4308      	orrs	r0, r1
 80065e0:	6218      	str	r0, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80065e2:	1c50      	adds	r0, r2, #1
 80065e4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80065e8:	2804      	cmp	r0, #4
 80065ea:	bf38      	it	cc
 80065ec:	2004      	movcc	r0, #4
 80065ee:	69d9      	ldr	r1, [r3, #28]
 80065f0:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80065f4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065f8:	2500      	movs	r5, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80065fa:	2620      	movs	r6, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80065fc:	4308      	orrs	r0, r1
 80065fe:	61d8      	str	r0, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006600:	6819      	ldr	r1, [r3, #0]
 8006602:	e9d4 2007 	ldrd	r2, r0, [r4, #28]
 8006606:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800660a:	4302      	orrs	r2, r0
 800660c:	430a      	orrs	r2, r1
 800660e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006610:	6899      	ldr	r1, [r3, #8]
 8006612:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 8006616:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800661a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800661e:	4302      	orrs	r2, r0
 8006620:	430a      	orrs	r2, r1
 8006622:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006624:	68d9      	ldr	r1, [r3, #12]
 8006626:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 800662a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800662e:	4302      	orrs	r2, r0
 8006630:	430a      	orrs	r2, r1
 8006632:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 8006634:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8006636:	4628      	mov	r0, r5
  __HAL_I2C_ENABLE(hi2c);
 8006638:	f042 0201 	orr.w	r2, r2, #1
 800663c:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800663e:	6425      	str	r5, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006640:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006644:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006646:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 800664a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800664c:	4b26      	ldr	r3, [pc, #152]	; (80066e8 <HAL_I2C_Init+0x168>)
 800664e:	4298      	cmp	r0, r3
 8006650:	d92e      	bls.n	80066b0 <HAL_I2C_Init+0x130>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006652:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8006656:	4d23      	ldr	r5, [pc, #140]	; (80066e4 <HAL_I2C_Init+0x164>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006658:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800665a:	fba5 6500 	umull	r6, r5, r5, r0
 800665e:	0cad      	lsrs	r5, r5, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006660:	fb01 f105 	mul.w	r1, r1, r5
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006664:	685e      	ldr	r6, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006666:	4f21      	ldr	r7, [pc, #132]	; (80066ec <HAL_I2C_Init+0x16c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006668:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800666c:	fba7 7101 	umull	r7, r1, r7, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006670:	4335      	orrs	r5, r6
 8006672:	605d      	str	r5, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006674:	6a1d      	ldr	r5, [r3, #32]
 8006676:	0989      	lsrs	r1, r1, #6
 8006678:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800667c:	3101      	adds	r1, #1
 800667e:	4329      	orrs	r1, r5
 8006680:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006682:	69d9      	ldr	r1, [r3, #28]
 8006684:	68a5      	ldr	r5, [r4, #8]
 8006686:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800668a:	3801      	subs	r0, #1
 800668c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006690:	b995      	cbnz	r5, 80066b8 <HAL_I2C_Init+0x138>
 8006692:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006696:	fbb0 f0f2 	udiv	r0, r0, r2
 800669a:	3001      	adds	r0, #1
 800669c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80066a0:	b9c0      	cbnz	r0, 80066d4 <HAL_I2C_Init+0x154>
 80066a2:	2001      	movs	r0, #1
 80066a4:	e7a8      	b.n	80065f8 <HAL_I2C_Init+0x78>
    hi2c->Lock = HAL_UNLOCKED;
 80066a6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80066aa:	f7fc f94d 	bl	8002948 <HAL_I2C_MspInit>
 80066ae:	e773      	b.n	8006598 <HAL_I2C_Init+0x18>
    return HAL_ERROR;
 80066b0:	2001      	movs	r0, #1
}
 80066b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80066b4:	2001      	movs	r0, #1
}
 80066b6:	4770      	bx	lr
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80066b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80066bc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80066c0:	fbb0 f0f2 	udiv	r0, r0, r2
 80066c4:	3001      	adds	r0, #1
 80066c6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80066ca:	2800      	cmp	r0, #0
 80066cc:	d0e9      	beq.n	80066a2 <HAL_I2C_Init+0x122>
 80066ce:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80066d2:	e791      	b.n	80065f8 <HAL_I2C_Init+0x78>
 80066d4:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80066d8:	e78e      	b.n	80065f8 <HAL_I2C_Init+0x78>
 80066da:	bf00      	nop
 80066dc:	000186a0 	.word	0x000186a0
 80066e0:	001e847f 	.word	0x001e847f
 80066e4:	431bde83 	.word	0x431bde83
 80066e8:	003d08ff 	.word	0x003d08ff
 80066ec:	10624dd3 	.word	0x10624dd3

080066f0 <HAL_I2C_Mem_Write>:
{
 80066f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f4:	4604      	mov	r4, r0
 80066f6:	b083      	sub	sp, #12
 80066f8:	469a      	mov	sl, r3
 80066fa:	460f      	mov	r7, r1
 80066fc:	4690      	mov	r8, r2
 80066fe:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8006702:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 8006704:	f7ff fa8a 	bl	8005c1c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006708:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800670c:	2b20      	cmp	r3, #32
 800670e:	d004      	beq.n	800671a <HAL_I2C_Mem_Write+0x2a>
      return HAL_BUSY;
 8006710:	2702      	movs	r7, #2
}
 8006712:	4638      	mov	r0, r7
 8006714:	b003      	add	sp, #12
 8006716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671a:	4605      	mov	r5, r0
 800671c:	e005      	b.n	800672a <HAL_I2C_Mem_Write+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800671e:	f7ff fa7d 	bl	8005c1c <HAL_GetTick>
 8006722:	1b40      	subs	r0, r0, r5
 8006724:	2819      	cmp	r0, #25
 8006726:	f200 80a6 	bhi.w	8006876 <HAL_I2C_Mem_Write+0x186>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800672a:	6822      	ldr	r2, [r4, #0]
 800672c:	6993      	ldr	r3, [r2, #24]
 800672e:	43db      	mvns	r3, r3
 8006730:	f013 0b02 	ands.w	fp, r3, #2
 8006734:	d0f3      	beq.n	800671e <HAL_I2C_Mem_Write+0x2e>
    __HAL_LOCK(hi2c);
 8006736:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800673a:	2b01      	cmp	r3, #1
 800673c:	d0e8      	beq.n	8006710 <HAL_I2C_Mem_Write+0x20>
 800673e:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006740:	6813      	ldr	r3, [r2, #0]
    __HAL_LOCK(hi2c);
 8006742:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006746:	07d8      	lsls	r0, r3, #31
 8006748:	d402      	bmi.n	8006750 <HAL_I2C_Mem_Write+0x60>
      __HAL_I2C_ENABLE(hi2c);
 800674a:	6813      	ldr	r3, [r2, #0]
 800674c:	430b      	orrs	r3, r1
 800674e:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006750:	f04f 0e21 	mov.w	lr, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006754:	f04f 0c40 	mov.w	ip, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006758:	2000      	movs	r0, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800675a:	6811      	ldr	r1, [r2, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800675c:	4653      	mov	r3, sl
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800675e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8006762:	6011      	str	r1, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006764:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006768:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800676c:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800676e:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006772:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006776:	4639      	mov	r1, r7
    hi2c->pBuffPtr    = pData;
 8006778:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800677a:	f5a0 3080 	sub.w	r0, r0, #65536	; 0x10000
    hi2c->pBuffPtr    = pData;
 800677e:	6267      	str	r7, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006780:	4642      	mov	r2, r8
 8006782:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006786:	62e0      	str	r0, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8006788:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800678c:	4620      	mov	r0, r4
 800678e:	f7ff fcd7 	bl	8006140 <I2C_RequestMemoryWrite>
 8006792:	4607      	mov	r7, r0
 8006794:	2800      	cmp	r0, #0
 8006796:	d14b      	bne.n	8006830 <HAL_I2C_Mem_Write+0x140>
 8006798:	6823      	ldr	r3, [r4, #0]
 800679a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 800679c:	b1fa      	cbz	r2, 80067de <HAL_I2C_Mem_Write+0xee>
 800679e:	1c72      	adds	r2, r6, #1
 80067a0:	d003      	beq.n	80067aa <HAL_I2C_Mem_Write+0xba>
 80067a2:	e04a      	b.n	800683a <HAL_I2C_Mem_Write+0x14a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067a4:	695a      	ldr	r2, [r3, #20]
 80067a6:	0551      	lsls	r1, r2, #21
 80067a8:	d42f      	bmi.n	800680a <HAL_I2C_Mem_Write+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067aa:	695a      	ldr	r2, [r3, #20]
 80067ac:	0610      	lsls	r0, r2, #24
 80067ae:	d5f9      	bpl.n	80067a4 <HAL_I2C_Mem_Write+0xb4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067b0:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80067b4:	f8b4 8028 	ldrh.w	r8, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067b8:	46f4      	mov	ip, lr
 80067ba:	f81c 1b01 	ldrb.w	r1, [ip], #1
      hi2c->XferSize--;
 80067be:	f108 32ff 	add.w	r2, r8, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067c2:	6119      	str	r1, [r3, #16]
      hi2c->XferCount--;
 80067c4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80067c6:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80067c8:	3901      	subs	r1, #1
 80067ca:	b289      	uxth	r1, r1
 80067cc:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80067ce:	6958      	ldr	r0, [r3, #20]
      hi2c->pBuffPtr++;
 80067d0:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80067d4:	0740      	lsls	r0, r0, #29
      hi2c->XferSize--;
 80067d6:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80067d8:	d5e0      	bpl.n	800679c <HAL_I2C_Mem_Write+0xac>
 80067da:	2a00      	cmp	r2, #0
 80067dc:	d13c      	bne.n	8006858 <HAL_I2C_Mem_Write+0x168>
 80067de:	1c72      	adds	r2, r6, #1
 80067e0:	d003      	beq.n	80067ea <HAL_I2C_Mem_Write+0xfa>
 80067e2:	e05d      	b.n	80068a0 <HAL_I2C_Mem_Write+0x1b0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067e4:	695a      	ldr	r2, [r3, #20]
 80067e6:	0551      	lsls	r1, r2, #21
 80067e8:	d468      	bmi.n	80068bc <HAL_I2C_Mem_Write+0x1cc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067ea:	695a      	ldr	r2, [r3, #20]
 80067ec:	0750      	lsls	r0, r2, #29
 80067ee:	d5f9      	bpl.n	80067e4 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067f0:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80067f2:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067fa:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80067fc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8006800:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006804:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 8006808:	e783      	b.n	8006712 <HAL_I2C_Mem_Write+0x22>
    hi2c->PreviousState       = I2C_STATE_NONE;
 800680a:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800680c:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8006810:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006812:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8006814:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006816:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800681a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800681e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8006820:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006824:	f043 0304 	orr.w	r3, r3, #4
 8006828:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800682a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800682c:	2b04      	cmp	r3, #4
 800682e:	d030      	beq.n	8006892 <HAL_I2C_Mem_Write+0x1a2>
      return HAL_ERROR;
 8006830:	2701      	movs	r7, #1
}
 8006832:	4638      	mov	r0, r7
 8006834:	b003      	add	sp, #12
 8006836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800683a:	695a      	ldr	r2, [r3, #20]
 800683c:	0612      	lsls	r2, r2, #24
 800683e:	d4b7      	bmi.n	80067b0 <HAL_I2C_Mem_Write+0xc0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006840:	695a      	ldr	r2, [r3, #20]
 8006842:	0551      	lsls	r1, r2, #21
 8006844:	d4e1      	bmi.n	800680a <HAL_I2C_Mem_Write+0x11a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006846:	f7ff f9e9 	bl	8005c1c <HAL_GetTick>
 800684a:	1b40      	subs	r0, r0, r5
 800684c:	4286      	cmp	r6, r0
 800684e:	d34f      	bcc.n	80068f0 <HAL_I2C_Mem_Write+0x200>
 8006850:	2e00      	cmp	r6, #0
 8006852:	d04d      	beq.n	80068f0 <HAL_I2C_Mem_Write+0x200>
 8006854:	6823      	ldr	r3, [r4, #0]
 8006856:	e7a2      	b.n	800679e <HAL_I2C_Mem_Write+0xae>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006858:	f89e 1001 	ldrb.w	r1, [lr, #1]
        hi2c->XferSize--;
 800685c:	f1a8 0202 	sub.w	r2, r8, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006860:	6119      	str	r1, [r3, #16]
        hi2c->XferCount--;
 8006862:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8006864:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 8006866:	3801      	subs	r0, #1
        hi2c->pBuffPtr++;
 8006868:	f10e 0102 	add.w	r1, lr, #2
        hi2c->XferCount--;
 800686c:	b280      	uxth	r0, r0
        hi2c->XferSize--;
 800686e:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8006870:	6261      	str	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8006872:	8560      	strh	r0, [r4, #42]	; 0x2a
 8006874:	e792      	b.n	800679c <HAL_I2C_Mem_Write+0xac>
        hi2c->State             = HAL_I2C_STATE_READY;
 8006876:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006878:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800687c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006880:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006884:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006886:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800688a:	f043 0320 	orr.w	r3, r3, #32
 800688e:	6423      	str	r3, [r4, #64]	; 0x40
 8006890:	e73e      	b.n	8006710 <HAL_I2C_Mem_Write+0x20>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006892:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR;
 8006894:	2701      	movs	r7, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006896:	6813      	ldr	r3, [r2, #0]
 8006898:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800689c:	6013      	str	r3, [r2, #0]
 800689e:	e738      	b.n	8006712 <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068a0:	695a      	ldr	r2, [r3, #20]
 80068a2:	0752      	lsls	r2, r2, #29
 80068a4:	d4a4      	bmi.n	80067f0 <HAL_I2C_Mem_Write+0x100>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068a6:	695a      	ldr	r2, [r3, #20]
 80068a8:	0551      	lsls	r1, r2, #21
 80068aa:	d407      	bmi.n	80068bc <HAL_I2C_Mem_Write+0x1cc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ac:	f7ff f9b6 	bl	8005c1c <HAL_GetTick>
 80068b0:	1b40      	subs	r0, r0, r5
 80068b2:	4286      	cmp	r6, r0
 80068b4:	d32a      	bcc.n	800690c <HAL_I2C_Mem_Write+0x21c>
 80068b6:	b34e      	cbz	r6, 800690c <HAL_I2C_Mem_Write+0x21c>
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	e790      	b.n	80067de <HAL_I2C_Mem_Write+0xee>
    hi2c->PreviousState       = I2C_STATE_NONE;
 80068bc:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068be:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 80068c2:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068c4:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80068c6:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80068c8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068cc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80068d2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068d6:	f043 0304 	orr.w	r3, r3, #4
 80068da:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d1a6      	bne.n	8006830 <HAL_I2C_Mem_Write+0x140>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068e2:	6822      	ldr	r2, [r4, #0]
      return HAL_ERROR;
 80068e4:	2701      	movs	r7, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068e6:	6813      	ldr	r3, [r2, #0]
 80068e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068ec:	6013      	str	r3, [r2, #0]
 80068ee:	e710      	b.n	8006712 <HAL_I2C_Mem_Write+0x22>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80068f0:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80068f2:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80068f4:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80068f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80068fa:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80068fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006900:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006904:	f043 0320 	orr.w	r3, r3, #32
 8006908:	6423      	str	r3, [r4, #64]	; 0x40
 800690a:	e78e      	b.n	800682a <HAL_I2C_Mem_Write+0x13a>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800690c:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800690e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006910:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006912:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006916:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800691a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800691c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006920:	f043 0320 	orr.w	r3, r3, #32
 8006924:	6423      	str	r3, [r4, #64]	; 0x40
 8006926:	e7d9      	b.n	80068dc <HAL_I2C_Mem_Write+0x1ec>

08006928 <HAL_I2C_Mem_Read>:
{
 8006928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692c:	4604      	mov	r4, r0
 800692e:	b087      	sub	sp, #28
 8006930:	469a      	mov	sl, r3
 8006932:	460f      	mov	r7, r1
 8006934:	4690      	mov	r8, r2
 8006936:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
 800693a:	9d12      	ldr	r5, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 800693c:	f7ff f96e 	bl	8005c1c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006940:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006944:	2b20      	cmp	r3, #32
 8006946:	d004      	beq.n	8006952 <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 8006948:	2702      	movs	r7, #2
}
 800694a:	4638      	mov	r0, r7
 800694c:	b007      	add	sp, #28
 800694e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006952:	4606      	mov	r6, r0
 8006954:	e004      	b.n	8006960 <HAL_I2C_Mem_Read+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006956:	f7ff f961 	bl	8005c1c <HAL_GetTick>
 800695a:	1b80      	subs	r0, r0, r6
 800695c:	2819      	cmp	r0, #25
 800695e:	d84d      	bhi.n	80069fc <HAL_I2C_Mem_Read+0xd4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006960:	6822      	ldr	r2, [r4, #0]
 8006962:	6993      	ldr	r3, [r2, #24]
 8006964:	43db      	mvns	r3, r3
 8006966:	f013 0b02 	ands.w	fp, r3, #2
 800696a:	d0f4      	beq.n	8006956 <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 800696c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006970:	2b01      	cmp	r3, #1
 8006972:	d0e9      	beq.n	8006948 <HAL_I2C_Mem_Read+0x20>
 8006974:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006976:	6813      	ldr	r3, [r2, #0]
    __HAL_LOCK(hi2c);
 8006978:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800697c:	07db      	lsls	r3, r3, #31
 800697e:	d402      	bmi.n	8006986 <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8006980:	6813      	ldr	r3, [r2, #0]
 8006982:	430b      	orrs	r3, r1
 8006984:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006986:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800698a:	f04f 0c40 	mov.w	ip, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800698e:	2000      	movs	r0, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006990:	6811      	ldr	r1, [r2, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006992:	4653      	mov	r3, sl
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006994:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8006998:	6011      	str	r1, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800699a:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800699e:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069a2:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80069a4:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069a8:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069ac:	4639      	mov	r1, r7
    hi2c->pBuffPtr    = pData;
 80069ae:	9f10      	ldr	r7, [sp, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069b0:	f5a0 3080 	sub.w	r0, r0, #65536	; 0x10000
    hi2c->pBuffPtr    = pData;
 80069b4:	6267      	str	r7, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069b6:	4642      	mov	r2, r8
 80069b8:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069bc:	62e0      	str	r0, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80069be:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069c2:	4620      	mov	r0, r4
 80069c4:	f7ff fcb2 	bl	800632c <I2C_RequestMemoryRead>
 80069c8:	4607      	mov	r7, r0
 80069ca:	b9a8      	cbnz	r0, 80069f8 <HAL_I2C_Mem_Read+0xd0>
    if (hi2c->XferSize == 0U)
 80069cc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80069ce:	6822      	ldr	r2, [r4, #0]
 80069d0:	bb13      	cbnz	r3, 8006a18 <HAL_I2C_Mem_Read+0xf0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069d2:	9002      	str	r0, [sp, #8]
 80069d4:	6953      	ldr	r3, [r2, #20]
 80069d6:	9302      	str	r3, [sp, #8]
 80069d8:	6993      	ldr	r3, [r2, #24]
 80069da:	9302      	str	r3, [sp, #8]
 80069dc:	9b02      	ldr	r3, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069de:	6813      	ldr	r3, [r2, #0]
 80069e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069e4:	6013      	str	r3, [r2, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069e6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80069e8:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80069ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80069ee:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80069f6:	e7a8      	b.n	800694a <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 80069f8:	2701      	movs	r7, #1
 80069fa:	e7a6      	b.n	800694a <HAL_I2C_Mem_Read+0x22>
        hi2c->State             = HAL_I2C_STATE_READY;
 80069fc:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80069fe:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006a02:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006a06:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006a0c:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a10:	f043 0320 	orr.w	r3, r3, #32
 8006a14:	6423      	str	r3, [r4, #64]	; 0x40
 8006a16:	e797      	b.n	8006948 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d07c      	beq.n	8006b16 <HAL_I2C_Mem_Read+0x1ee>
    else if (hi2c->XferSize == 2U)
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	f000 811d 	beq.w	8006c5c <HAL_I2C_Mem_Read+0x334>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a22:	6811      	ldr	r1, [r2, #0]
 8006a24:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8006a28:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a2a:	9005      	str	r0, [sp, #20]
 8006a2c:	6951      	ldr	r1, [r2, #20]
 8006a2e:	9105      	str	r1, [sp, #20]
 8006a30:	6992      	ldr	r2, [r2, #24]
 8006a32:	9205      	str	r2, [sp, #20]
 8006a34:	9a05      	ldr	r2, [sp, #20]
    while (hi2c->XferSize > 0U)
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0d5      	beq.n	80069e6 <HAL_I2C_Mem_Read+0xbe>
      if (hi2c->XferSize <= 3U)
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	d87e      	bhi.n	8006b3c <HAL_I2C_Mem_Read+0x214>
        if (hi2c->XferSize == 1U)
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	f000 80d8 	beq.w	8006bf4 <HAL_I2C_Mem_Read+0x2cc>
        else if (hi2c->XferSize == 2U)
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d04c      	beq.n	8006ae2 <HAL_I2C_Mem_Read+0x1ba>
 8006a48:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a4a:	6822      	ldr	r2, [r4, #0]
 8006a4c:	f040 80a7 	bne.w	8006b9e <HAL_I2C_Mem_Read+0x276>
 8006a50:	6953      	ldr	r3, [r2, #20]
 8006a52:	0759      	lsls	r1, r3, #29
 8006a54:	d5fc      	bpl.n	8006a50 <HAL_I2C_Mem_Read+0x128>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a56:	6813      	ldr	r3, [r2, #0]
 8006a58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a5c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a5e:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a60:	6822      	ldr	r2, [r4, #0]
 8006a62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a64:	6912      	ldr	r2, [r2, #16]
 8006a66:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8006a68:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8006a6a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006a6c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006a6e:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8006a70:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8006a72:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8006a74:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8006a76:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006a78:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006a7a:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006a7c:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a7e:	6822      	ldr	r2, [r4, #0]
 8006a80:	f040 80ab 	bne.w	8006bda <HAL_I2C_Mem_Read+0x2b2>
 8006a84:	6953      	ldr	r3, [r2, #20]
 8006a86:	0759      	lsls	r1, r3, #29
 8006a88:	d5fc      	bpl.n	8006a84 <HAL_I2C_Mem_Read+0x15c>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a8a:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a92:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a94:	6913      	ldr	r3, [r2, #16]
 8006a96:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8006a98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8006a9a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006a9c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8006aa2:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8006aa4:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8006aa6:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8006aa8:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006aaa:	8522      	strh	r2, [r4, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8006aac:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aae:	6822      	ldr	r2, [r4, #0]
 8006ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ab2:	6912      	ldr	r2, [r2, #16]
 8006ab4:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8006ab6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8006ab8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8006aba:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8006abc:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 8006abe:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8006ac0:	3101      	adds	r1, #1
          hi2c->XferCount--;
 8006ac2:	b292      	uxth	r2, r2
          hi2c->XferSize--;
 8006ac4:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8006ac6:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8006ac8:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8006aca:	8523      	strh	r3, [r4, #40]	; 0x28
 8006acc:	e7b3      	b.n	8006a36 <HAL_I2C_Mem_Read+0x10e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ace:	6953      	ldr	r3, [r2, #20]
 8006ad0:	075b      	lsls	r3, r3, #29
 8006ad2:	d40c      	bmi.n	8006aee <HAL_I2C_Mem_Read+0x1c6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ad4:	f7ff f8a2 	bl	8005c1c <HAL_GetTick>
 8006ad8:	1b80      	subs	r0, r0, r6
 8006ada:	4285      	cmp	r5, r0
 8006adc:	d36b      	bcc.n	8006bb6 <HAL_I2C_Mem_Read+0x28e>
 8006ade:	2d00      	cmp	r5, #0
 8006ae0:	d069      	beq.n	8006bb6 <HAL_I2C_Mem_Read+0x28e>
 8006ae2:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ae4:	6822      	ldr	r2, [r4, #0]
 8006ae6:	d1f2      	bne.n	8006ace <HAL_I2C_Mem_Read+0x1a6>
 8006ae8:	6953      	ldr	r3, [r2, #20]
 8006aea:	0759      	lsls	r1, r3, #29
 8006aec:	d5fc      	bpl.n	8006ae8 <HAL_I2C_Mem_Read+0x1c0>
  __ASM volatile ("cpsid i" : : : "memory");
 8006aee:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006af0:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006af2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006afa:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8006b00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8006b02:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006b04:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006b06:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8006b08:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8006b0a:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8006b0c:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8006b0e:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006b10:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006b12:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006b14:	e7ca      	b.n	8006aac <HAL_I2C_Mem_Read+0x184>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b16:	6813      	ldr	r3, [r2, #0]
 8006b18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b1c:	6013      	str	r3, [r2, #0]
 8006b1e:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	9003      	str	r0, [sp, #12]
 8006b24:	695a      	ldr	r2, [r3, #20]
 8006b26:	9203      	str	r2, [sp, #12]
 8006b28:	699a      	ldr	r2, [r3, #24]
 8006b2a:	9203      	str	r2, [sp, #12]
 8006b2c:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006b36:	b662      	cpsie	i
 8006b38:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006b3a:	e77c      	b.n	8006a36 <HAL_I2C_Mem_Read+0x10e>
 8006b3c:	b945      	cbnz	r5, 8006b50 <HAL_I2C_Mem_Read+0x228>
 8006b3e:	e07e      	b.n	8006c3e <HAL_I2C_Mem_Read+0x316>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b40:	695a      	ldr	r2, [r3, #20]
 8006b42:	06d1      	lsls	r1, r2, #27
 8006b44:	d468      	bmi.n	8006c18 <HAL_I2C_Mem_Read+0x2f0>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b46:	f7ff f869 	bl	8005c1c <HAL_GetTick>
 8006b4a:	1b80      	subs	r0, r0, r6
 8006b4c:	4285      	cmp	r5, r0
 8006b4e:	d332      	bcc.n	8006bb6 <HAL_I2C_Mem_Read+0x28e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b50:	6823      	ldr	r3, [r4, #0]
 8006b52:	695a      	ldr	r2, [r3, #20]
 8006b54:	0650      	lsls	r0, r2, #25
 8006b56:	d5f3      	bpl.n	8006b40 <HAL_I2C_Mem_Read+0x218>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b58:	691a      	ldr	r2, [r3, #16]
 8006b5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b5c:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8006b5e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b60:	6821      	ldr	r1, [r4, #0]
        hi2c->XferCount--;
 8006b62:	3a01      	subs	r2, #1
 8006b64:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 8006b66:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8006b68:	8562      	strh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b6a:	6948      	ldr	r0, [r1, #20]
        hi2c->pBuffPtr++;
 8006b6c:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8006b72:	f102 0c01 	add.w	ip, r2, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b76:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 8006b78:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8006b7a:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b7e:	f57f af5a 	bpl.w	8006a36 <HAL_I2C_Mem_Read+0x10e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b82:	690b      	ldr	r3, [r1, #16]
 8006b84:	7053      	strb	r3, [r2, #1]
          hi2c->XferSize--;
 8006b86:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006b88:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8006b8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006b8c:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 8006b8e:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 8006b90:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 8006b92:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 8006b94:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8006b96:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006b98:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8006b9a:	6261      	str	r1, [r4, #36]	; 0x24
 8006b9c:	e74b      	b.n	8006a36 <HAL_I2C_Mem_Read+0x10e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b9e:	6953      	ldr	r3, [r2, #20]
 8006ba0:	075b      	lsls	r3, r3, #29
 8006ba2:	f53f af58 	bmi.w	8006a56 <HAL_I2C_Mem_Read+0x12e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ba6:	f7ff f839 	bl	8005c1c <HAL_GetTick>
 8006baa:	1b80      	subs	r0, r0, r6
 8006bac:	4285      	cmp	r5, r0
 8006bae:	d302      	bcc.n	8006bb6 <HAL_I2C_Mem_Read+0x28e>
 8006bb0:	2d00      	cmp	r5, #0
 8006bb2:	f47f af49 	bne.w	8006a48 <HAL_I2C_Mem_Read+0x120>
          return HAL_ERROR;
 8006bb6:	2701      	movs	r7, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006bb8:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006bba:	2320      	movs	r3, #32
}
 8006bbc:	4638      	mov	r0, r7
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006bbe:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006bc0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006bc4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006bc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006bca:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006bce:	f043 0320 	orr.w	r3, r3, #32
 8006bd2:	6423      	str	r3, [r4, #64]	; 0x40
}
 8006bd4:	b007      	add	sp, #28
 8006bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bda:	6953      	ldr	r3, [r2, #20]
 8006bdc:	075b      	lsls	r3, r3, #29
 8006bde:	f53f af54 	bmi.w	8006a8a <HAL_I2C_Mem_Read+0x162>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006be2:	f7ff f81b 	bl	8005c1c <HAL_GetTick>
 8006be6:	1b80      	subs	r0, r0, r6
 8006be8:	4285      	cmp	r5, r0
 8006bea:	d3e4      	bcc.n	8006bb6 <HAL_I2C_Mem_Read+0x28e>
 8006bec:	2d00      	cmp	r5, #0
 8006bee:	f47f af45 	bne.w	8006a7c <HAL_I2C_Mem_Read+0x154>
 8006bf2:	e7e0      	b.n	8006bb6 <HAL_I2C_Mem_Read+0x28e>
 8006bf4:	b945      	cbnz	r5, 8006c08 <HAL_I2C_Mem_Read+0x2e0>
 8006bf6:	e02c      	b.n	8006c52 <HAL_I2C_Mem_Read+0x32a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006bf8:	695a      	ldr	r2, [r3, #20]
 8006bfa:	06d1      	lsls	r1, r2, #27
 8006bfc:	d40c      	bmi.n	8006c18 <HAL_I2C_Mem_Read+0x2f0>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bfe:	f7ff f80d 	bl	8005c1c <HAL_GetTick>
 8006c02:	1b80      	subs	r0, r0, r6
 8006c04:	4285      	cmp	r5, r0
 8006c06:	d3d6      	bcc.n	8006bb6 <HAL_I2C_Mem_Read+0x28e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	695a      	ldr	r2, [r3, #20]
 8006c0c:	0650      	lsls	r0, r2, #25
 8006c0e:	d5f3      	bpl.n	8006bf8 <HAL_I2C_Mem_Read+0x2d0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c10:	691a      	ldr	r2, [r3, #16]
 8006c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c14:	701a      	strb	r2, [r3, #0]
 8006c16:	e7b6      	b.n	8006b86 <HAL_I2C_Mem_Read+0x25e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c18:	f06f 0010 	mvn.w	r0, #16
          return HAL_ERROR;
 8006c1c:	2701      	movs	r7, #1
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c1e:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c20:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c22:	6158      	str	r0, [r3, #20]
}
 8006c24:	4638      	mov	r0, r7
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c26:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c28:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c2c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006c30:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006c32:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006c36:	6423      	str	r3, [r4, #64]	; 0x40
}
 8006c38:	b007      	add	sp, #28
 8006c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	695a      	ldr	r2, [r3, #20]
 8006c42:	0652      	lsls	r2, r2, #25
 8006c44:	d488      	bmi.n	8006b58 <HAL_I2C_Mem_Read+0x230>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c46:	695a      	ldr	r2, [r3, #20]
 8006c48:	06d5      	lsls	r5, r2, #27
 8006c4a:	d4e5      	bmi.n	8006c18 <HAL_I2C_Mem_Read+0x2f0>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c4c:	f7fe ffe6 	bl	8005c1c <HAL_GetTick>
 8006c50:	e7b1      	b.n	8006bb6 <HAL_I2C_Mem_Read+0x28e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	695a      	ldr	r2, [r3, #20]
 8006c56:	0652      	lsls	r2, r2, #25
 8006c58:	d5f5      	bpl.n	8006c46 <HAL_I2C_Mem_Read+0x31e>
 8006c5a:	e7d9      	b.n	8006c10 <HAL_I2C_Mem_Read+0x2e8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c5c:	6813      	ldr	r3, [r2, #0]
 8006c5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006c62:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006c64:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c66:	6823      	ldr	r3, [r4, #0]
 8006c68:	9004      	str	r0, [sp, #16]
 8006c6a:	695a      	ldr	r2, [r3, #20]
 8006c6c:	9204      	str	r2, [sp, #16]
 8006c6e:	699a      	ldr	r2, [r3, #24]
 8006c70:	9204      	str	r2, [sp, #16]
 8006c72:	9a04      	ldr	r2, [sp, #16]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006c7c:	b662      	cpsie	i
 8006c7e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006c80:	e6d9      	b.n	8006a36 <HAL_I2C_Mem_Read+0x10e>
 8006c82:	bf00      	nop

08006c84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c86:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	d074      	beq.n	8006d76 <HAL_PCD_Init+0xf2>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006c8c:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8006c90:	4604      	mov	r4, r0
 8006c92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d068      	beq.n	8006d6c <HAL_PCD_Init+0xe8>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006c9a:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006c9c:	4626      	mov	r6, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8006c9e:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 8006ca2:	6820      	ldr	r0, [r4, #0]
 8006ca4:	f001 fa90 	bl	80081c8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006ca8:	f856 cb10 	ldr.w	ip, [r6], #16
 8006cac:	466d      	mov	r5, sp
 8006cae:	4637      	mov	r7, r6
 8006cb0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006cb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	1d27      	adds	r7, r4, #4
 8006cb8:	602b      	str	r3, [r5, #0]
 8006cba:	4660      	mov	r0, ip
 8006cbc:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8006cc0:	f001 fa70 	bl	80081a4 <USB_CoreInit>
 8006cc4:	4605      	mov	r5, r0
 8006cc6:	b130      	cbz	r0, 8006cd6 <HAL_PCD_Init+0x52>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006cc8:	2302      	movs	r3, #2
    return HAL_ERROR;
 8006cca:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006ccc:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	b007      	add	sp, #28
 8006cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006cd6:	4601      	mov	r1, r0
 8006cd8:	6820      	ldr	r0, [r4, #0]
 8006cda:	f001 fa7f 	bl	80081dc <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cde:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8006ce2:	f1bc 0f00 	cmp.w	ip, #0
 8006ce6:	d029      	beq.n	8006d3c <HAL_PCD_Init+0xb8>
 8006ce8:	4628      	mov	r0, r5
    hpcd->IN_ep[i].is_in = 1U;
 8006cea:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006cee:	462a      	mov	r2, r5
    hpcd->IN_ep[i].is_in = 1U;
 8006cf0:	eb04 1340 	add.w	r3, r4, r0, lsl #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cf4:	1c45      	adds	r5, r0, #1
    hpcd->IN_ep[i].num = i;
 8006cf6:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006cfa:	86d8      	strh	r0, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cfc:	b2e8      	uxtb	r0, r5
 8006cfe:	4560      	cmp	r0, ip
    hpcd->IN_ep[i].is_in = 1U;
 8006d00:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006d04:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006d08:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 8006d0c:	641a      	str	r2, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d0e:	d3ef      	bcc.n	8006cf0 <HAL_PCD_Init+0x6c>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d10:	2300      	movs	r3, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8006d12:	4619      	mov	r1, r3
 8006d14:	eb04 1243 	add.w	r2, r4, r3, lsl #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d18:	1c5d      	adds	r5, r3, #1
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d1a:	f103 000a 	add.w	r0, r3, #10
    hpcd->OUT_ep[i].num = i;
 8006d1e:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d22:	b2eb      	uxtb	r3, r5
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d24:	0140      	lsls	r0, r0, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d26:	4563      	cmp	r3, ip
    hpcd->OUT_ep[i].is_in = 0U;
 8006d28:	f882 1129 	strb.w	r1, [r2, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006d2c:	f882 112b 	strb.w	r1, [r2, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006d30:	f8c2 1138 	str.w	r1, [r2, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006d34:	f8c2 113c 	str.w	r1, [r2, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d38:	5021      	str	r1, [r4, r0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d3a:	d3eb      	bcc.n	8006d14 <HAL_PCD_Init+0x90>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d3c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006d3e:	466d      	mov	r5, sp
 8006d40:	f8d4 c000 	ldr.w	ip, [r4]
 8006d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d46:	6833      	ldr	r3, [r6, #0]
 8006d48:	4660      	mov	r0, ip
 8006d4a:	602b      	str	r3, [r5, #0]
 8006d4c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8006d50:	f001 fa46 	bl	80081e0 <USB_DevInit>
 8006d54:	4605      	mov	r5, r0
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d1b6      	bne.n	8006cc8 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_READY;
 8006d5a:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8006d5c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  (void)USB_DevDisconnect(hpcd->Instance);
 8006d60:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8006d62:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8006d66:	f001 fe59 	bl	8008a1c <USB_DevDisconnect>
  return HAL_OK;
 8006d6a:	e7b1      	b.n	8006cd0 <HAL_PCD_Init+0x4c>
    hpcd->Lock = HAL_UNLOCKED;
 8006d6c:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
    HAL_PCD_MspInit(hpcd);
 8006d70:	f002 fd6c 	bl	800984c <HAL_PCD_MspInit>
 8006d74:	e791      	b.n	8006c9a <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 8006d76:	2501      	movs	r5, #1
}
 8006d78:	4628      	mov	r0, r5
 8006d7a:	b007      	add	sp, #28
 8006d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d7e:	bf00      	nop

08006d80 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8006d80:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d010      	beq.n	8006daa <HAL_PCD_Start+0x2a>
 8006d88:	2101      	movs	r1, #1
{
 8006d8a:	b510      	push	{r4, lr}
 8006d8c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8006d8e:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8006d92:	f002 fe89 	bl	8009aa8 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8006d96:	6820      	ldr	r0, [r4, #0]
 8006d98:	f001 fe3e 	bl	8008a18 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8006d9c:	6820      	ldr	r0, [r4, #0]
 8006d9e:	f001 fa09 	bl	80081b4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8006da2:	2000      	movs	r0, #0
 8006da4:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8006da8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8006daa:	2002      	movs	r0, #2
}
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop

08006db0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006db0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db4:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8006db6:	6800      	ldr	r0, [r0, #0]
 8006db8:	f001 fe32 	bl	8008a20 <USB_ReadInterrupts>
 8006dbc:	0401      	lsls	r1, r0, #16
 8006dbe:	6822      	ldr	r2, [r4, #0]
 8006dc0:	d443      	bmi.n	8006e4a <HAL_PCD_IRQHandler+0x9a>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8006dc2:	4610      	mov	r0, r2
 8006dc4:	f001 fe2c 	bl	8008a20 <USB_ReadInterrupts>
 8006dc8:	0546      	lsls	r6, r0, #21
 8006dca:	f100 8171 	bmi.w	80070b0 <HAL_PCD_IRQHandler+0x300>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8006dce:	6820      	ldr	r0, [r4, #0]
 8006dd0:	f001 fe26 	bl	8008a20 <USB_ReadInterrupts>
 8006dd4:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006dd8:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8006dda:	d007      	beq.n	8006dec <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006ddc:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8006de0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006de4:	041b      	lsls	r3, r3, #16
 8006de6:	0c1b      	lsrs	r3, r3, #16
 8006de8:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8006dec:	f001 fe18 	bl	8008a20 <USB_ReadInterrupts>
 8006df0:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006df4:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8006df6:	d007      	beq.n	8006e08 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006df8:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8006dfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e00:	041b      	lsls	r3, r3, #16
 8006e02:	0c1b      	lsrs	r3, r3, #16
 8006e04:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8006e08:	f001 fe0a 	bl	8008a20 <USB_ReadInterrupts>
 8006e0c:	04c5      	lsls	r5, r0, #19
 8006e0e:	f100 8131 	bmi.w	8007074 <HAL_PCD_IRQHandler+0x2c4>
 8006e12:	6820      	ldr	r0, [r4, #0]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8006e14:	f001 fe04 	bl	8008a20 <USB_ReadInterrupts>
 8006e18:	0500      	lsls	r0, r0, #20
 8006e1a:	f100 8104 	bmi.w	8007026 <HAL_PCD_IRQHandler+0x276>
#else
    HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8006e1e:	6820      	ldr	r0, [r4, #0]
 8006e20:	f001 fdfe 	bl	8008a20 <USB_ReadInterrupts>
 8006e24:	0582      	lsls	r2, r0, #22
 8006e26:	f100 80f1 	bmi.w	800700c <HAL_PCD_IRQHandler+0x25c>
#else
    HAL_PCD_SOFCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8006e2a:	6820      	ldr	r0, [r4, #0]
 8006e2c:	f001 fdf8 	bl	8008a20 <USB_ReadInterrupts>
 8006e30:	05c3      	lsls	r3, r0, #23
 8006e32:	d508      	bpl.n	8006e46 <HAL_PCD_IRQHandler+0x96>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006e34:	6822      	ldr	r2, [r4, #0]
 8006e36:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8006e3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e3e:	041b      	lsls	r3, r3, #16
 8006e40:	0c1b      	lsrs	r3, r3, #16
 8006e42:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 8006e46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006e4a:	f8df a414 	ldr.w	sl, [pc, #1044]	; 8007260 <HAL_PCD_IRQHandler+0x4b0>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006e4e:	f8df b414 	ldr.w	fp, [pc, #1044]	; 8007264 <HAL_PCD_IRQHandler+0x4b4>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006e52:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8006e56:	041f      	lsls	r7, r3, #16
 8006e58:	d5b3      	bpl.n	8006dc2 <HAL_PCD_IRQHandler+0x12>
    wIstr = hpcd->Instance->ISTR;
 8006e5a:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
 8006e5e:	b289      	uxth	r1, r1
    if (epindex == 0U)
 8006e60:	f011 050f 	ands.w	r5, r1, #15
 8006e64:	d157      	bne.n	8006f16 <HAL_PCD_IRQHandler+0x166>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006e66:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006e6a:	8813      	ldrh	r3, [r2, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006e6c:	f000 813e 	beq.w	80070ec <HAL_PCD_IRQHandler+0x33c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006e70:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006e72:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 8006e76:	f040 817a 	bne.w	800716e <HAL_PCD_IRQHandler+0x3be>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006e7a:	041b      	lsls	r3, r3, #16
 8006e7c:	d5e9      	bpl.n	8006e52 <HAL_PCD_IRQHandler+0xa2>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006e7e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006e82:	8811      	ldrh	r1, [r2, #0]
 8006e84:	400b      	ands	r3, r1
 8006e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e8a:	8013      	strh	r3, [r2, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006e8c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8006e90:	f894 1128 	ldrb.w	r1, [r4, #296]	; 0x128
 8006e94:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006e98:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8006e9c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8006ea0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ea4:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006ea8:	b19b      	cbz	r3, 8006ed2 <HAL_PCD_IRQHandler+0x122>
 8006eaa:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8006eae:	b181      	cbz	r1, 8006ed2 <HAL_PCD_IRQHandler+0x122>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8006eb6:	f001 fdb9 	bl	8008a2c <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8006eba:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8006ebe:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006ec2:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f002 fce4 	bl	8009898 <HAL_PCD_DataOutStageCallback>
 8006ed0:	6822      	ldr	r2, [r4, #0]
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006ed2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8006ed6:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 8006ee0:	2900      	cmp	r1, #0
 8006ee2:	f040 8198 	bne.w	8007216 <HAL_PCD_IRQHandler+0x466>
 8006ee6:	5ac1      	ldrh	r1, [r0, r3]
 8006ee8:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8006eec:	0409      	lsls	r1, r1, #16
 8006eee:	0c09      	lsrs	r1, r1, #16
 8006ef0:	52c1      	strh	r1, [r0, r3]
 8006ef2:	5ac1      	ldrh	r1, [r0, r3]
 8006ef4:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8006ef8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8006efc:	b289      	uxth	r1, r1
 8006efe:	52c1      	strh	r1, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006f00:	8811      	ldrh	r1, [r2, #0]
 8006f02:	4bd6      	ldr	r3, [pc, #856]	; (800725c <HAL_PCD_IRQHandler+0x4ac>)
 8006f04:	400b      	ands	r3, r1
 8006f06:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f12:	8013      	strh	r3, [r2, #0]
 8006f14:	e79d      	b.n	8006e52 <HAL_PCD_IRQHandler+0xa2>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006f16:	f832 6025 	ldrh.w	r6, [r2, r5, lsl #2]
 8006f1a:	b2b6      	uxth	r6, r6
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006f1c:	0431      	lsls	r1, r6, #16
 8006f1e:	d426      	bmi.n	8006f6e <HAL_PCD_IRQHandler+0x1be>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006f20:	0633      	lsls	r3, r6, #24
 8006f22:	d596      	bpl.n	8006e52 <HAL_PCD_IRQHandler+0xa2>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006f24:	f832 1025 	ldrh.w	r1, [r2, r5, lsl #2]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006f28:	eb04 1345 	add.w	r3, r4, r5, lsl #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006f2c:	ea0a 0101 	and.w	r1, sl, r1
 8006f30:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8006f34:	f822 1025 	strh.w	r1, [r2, r5, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006f38:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8006f3c:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
        ep->xfer_buff += ep->xfer_count;
 8006f40:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006f42:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8006f46:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006f4a:	f8b1 1404 	ldrh.w	r1, [r1, #1028]	; 0x404

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8006f4e:	6c1d      	ldr	r5, [r3, #64]	; 0x40
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006f50:	f3c1 0109 	ubfx	r1, r1, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8006f54:	1846      	adds	r6, r0, r1
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006f56:	6459      	str	r1, [r3, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8006f58:	63de      	str	r6, [r3, #60]	; 0x3c
        if (ep->xfer_len == 0U)
 8006f5a:	2d00      	cmp	r5, #0
 8006f5c:	f040 80ef 	bne.w	800713e <HAL_PCD_IRQHandler+0x38e>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006f60:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8006f64:	4620      	mov	r0, r4
 8006f66:	f002 fc9f 	bl	80098a8 <HAL_PCD_DataInStageCallback>
 8006f6a:	6822      	ldr	r2, [r4, #0]
 8006f6c:	e771      	b.n	8006e52 <HAL_PCD_IRQHandler+0xa2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006f6e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006f72:	f832 1025 	ldrh.w	r1, [r2, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8006f76:	016f      	lsls	r7, r5, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006f78:	400b      	ands	r3, r1
 8006f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f7e:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8006f82:	eb04 0907 	add.w	r9, r4, r7
 8006f86:	f899 3134 	ldrb.w	r3, [r9, #308]	; 0x134
 8006f8a:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f000 810f 	beq.w	80071b2 <HAL_PCD_IRQHandler+0x402>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006f94:	f899 3128 	ldrb.w	r3, [r9, #296]	; 0x128
 8006f98:	f832 c023 	ldrh.w	ip, [r2, r3, lsl #2]
 8006f9c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8006fa0:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006fa4:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
 8006fa8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006fac:	4463      	add	r3, ip
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006fae:	f000 811b 	beq.w	80071e8 <HAL_PCD_IRQHandler+0x438>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006fb2:	3302      	adds	r3, #2
 8006fb4:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 8006fb8:	f3c8 0809 	ubfx	r8, r8, #0, #10
            if (count != 0U)
 8006fbc:	f1b8 0f00 	cmp.w	r8, #0
 8006fc0:	f040 815d 	bne.w	800727e <HAL_PCD_IRQHandler+0x4ce>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006fc4:	880b      	ldrh	r3, [r1, #0]
 8006fc6:	ea0b 0303 	and.w	r3, fp, r3
 8006fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fd2:	800b      	strh	r3, [r1, #0]
 8006fd4:	4427      	add	r7, r4
        ep->xfer_count += count;
 8006fd6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
        ep->xfer_buff += count;
 8006fda:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006fde:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
        ep->xfer_count += count;
 8006fe2:	4442      	add	r2, r8
        ep->xfer_buff += count;
 8006fe4:	4443      	add	r3, r8
        ep->xfer_count += count;
 8006fe6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
        ep->xfer_buff += count;
 8006fea:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	f000 80f7 	beq.w	80071e2 <HAL_PCD_IRQHandler+0x432>
 8006ff4:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8006ff8:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 8006ffc:	4590      	cmp	r8, r2
 8006ffe:	f080 8114 	bcs.w	800722a <HAL_PCD_IRQHandler+0x47a>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007002:	4620      	mov	r0, r4
 8007004:	f002 fc48 	bl	8009898 <HAL_PCD_DataOutStageCallback>
 8007008:	6822      	ldr	r2, [r4, #0]
 800700a:	e789      	b.n	8006f20 <HAL_PCD_IRQHandler+0x170>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800700c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 800700e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007010:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8007014:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007018:	041b      	lsls	r3, r3, #16
 800701a:	0c1b      	lsrs	r3, r3, #16
 800701c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8007020:	f002 fc4a 	bl	80098b8 <HAL_PCD_SOFCallback>
 8007024:	e701      	b.n	8006e2a <HAL_PCD_IRQHandler+0x7a>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800702c:	4618      	mov	r0, r3
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800702e:	f042 0208 	orr.w	r2, r2, #8
 8007032:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8007036:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800703a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800703e:	0412      	lsls	r2, r2, #16
 8007040:	0c12      	lsrs	r2, r2, #16
 8007042:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8007046:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800704a:	f042 0204 	orr.w	r2, r2, #4
 800704e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8007052:	f001 fce5 	bl	8008a20 <USB_ReadInterrupts>
 8007056:	04c1      	lsls	r1, r0, #19
 8007058:	d508      	bpl.n	800706c <HAL_PCD_IRQHandler+0x2bc>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800705a:	6822      	ldr	r2, [r4, #0]
 800705c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8007060:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007064:	041b      	lsls	r3, r3, #16
 8007066:	0c1b      	lsrs	r3, r3, #16
 8007068:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 800706c:	4620      	mov	r0, r4
 800706e:	f002 fc39 	bl	80098e4 <HAL_PCD_SuspendCallback>
 8007072:	e6d4      	b.n	8006e1e <HAL_PCD_IRQHandler+0x6e>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8007074:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8007076:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8007078:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800707c:	f023 0304 	bic.w	r3, r3, #4
 8007080:	041b      	lsls	r3, r3, #16
 8007082:	0c1b      	lsrs	r3, r3, #16
 8007084:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007088:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800708c:	f023 0308 	bic.w	r3, r3, #8
 8007090:	041b      	lsls	r3, r3, #16
 8007092:	0c1b      	lsrs	r3, r3, #16
 8007094:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8007098:	f002 fc34 	bl	8009904 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800709c:	6820      	ldr	r0, [r4, #0]
 800709e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80070a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070a6:	041b      	lsls	r3, r3, #16
 80070a8:	0c1b      	lsrs	r3, r3, #16
 80070aa:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80070ae:	e6b1      	b.n	8006e14 <HAL_PCD_IRQHandler+0x64>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80070b0:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80070b2:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80070b4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80070b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070bc:	041b      	lsls	r3, r3, #16
 80070be:	0c1b      	lsrs	r3, r3, #16
 80070c0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80070c4:	f002 fbfc 	bl	80098c0 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 80070c8:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	f43f ae7e 	beq.w	8006dce <HAL_PCD_IRQHandler+0x1e>
  hpcd->USB_Address = address;
 80070d2:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 80070d4:	2301      	movs	r3, #1
  hpcd->USB_Address = address;
 80070d6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 80070da:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80070de:	4629      	mov	r1, r5
 80070e0:	6820      	ldr	r0, [r4, #0]
 80070e2:	f001 fc93 	bl	8008a0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80070e6:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
 80070ea:	e670      	b.n	8006dce <HAL_PCD_IRQHandler+0x1e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80070ec:	ea0a 0303 	and.w	r3, sl, r3
 80070f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070f4:	8013      	strh	r3, [r2, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80070f6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80070fa:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
        ep->xfer_buff += ep->xfer_count;
 80070fe:	6be5      	ldr	r5, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007100:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8007104:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8007108:	f8b2 3404 	ldrh.w	r3, [r2, #1028]	; 0x404
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800710c:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800710e:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8007112:	441d      	add	r5, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007114:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8007116:	63e5      	str	r5, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007118:	f002 fbc6 	bl	80098a8 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800711c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007120:	b31b      	cbz	r3, 800716a <HAL_PCD_IRQHandler+0x3ba>
 8007122:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007124:	6822      	ldr	r2, [r4, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	f47f ae93 	bne.w	8006e52 <HAL_PCD_IRQHandler+0xa2>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800712c:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8007130:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8007134:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8007138:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800713c:	e689      	b.n	8006e52 <HAL_PCD_IRQHandler+0xa2>
  ep->xfer_count = 0U;
 800713e:	f04f 0c00 	mov.w	ip, #0
  ep->is_in = 1U;
 8007142:	2701      	movs	r7, #1
 8007144:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007148:	4610      	mov	r0, r2
 800714a:	f003 0207 	and.w	r2, r3, #7
 800714e:	0151      	lsls	r1, r2, #5
  ep->xfer_buff = pBuf;
 8007150:	1863      	adds	r3, r4, r1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007152:	3128      	adds	r1, #40	; 0x28
  ep->num = ep_addr & EP_ADDR_MSK;
 8007154:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  ep->xfer_len = len;
 8007158:	e9c3 650f 	strd	r6, r5, [r3, #60]	; 0x3c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800715c:	4421      	add	r1, r4
  ep->xfer_count = 0U;
 800715e:	f8c3 c044 	str.w	ip, [r3, #68]	; 0x44
  ep->is_in = 1U;
 8007162:	f883 7029 	strb.w	r7, [r3, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007166:	f001 fab3 	bl	80086d0 <USB_EPStartXfer>
 800716a:	6822      	ldr	r2, [r4, #0]
 800716c:	e671      	b.n	8006e52 <HAL_PCD_IRQHandler+0xa2>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800716e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8007172:	f894 1128 	ldrb.w	r1, [r4, #296]	; 0x128
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007176:	4610      	mov	r0, r2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007178:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800717c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8007180:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007184:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8007188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800718c:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007190:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007194:	f001 fc4a 	bl	8008a2c <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007198:	f640 738f 	movw	r3, #3983	; 0xf8f
 800719c:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800719e:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80071a0:	8811      	ldrh	r1, [r2, #0]
 80071a2:	400b      	ands	r3, r1
 80071a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071a8:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80071aa:	f002 fb6f 	bl	800988c <HAL_PCD_SetupStageCallback>
 80071ae:	6822      	ldr	r2, [r4, #0]
 80071b0:	e64f      	b.n	8006e52 <HAL_PCD_IRQHandler+0xa2>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80071b2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80071b6:	f899 1128 	ldrb.w	r1, [r9, #296]	; 0x128
 80071ba:	3306      	adds	r3, #6
 80071bc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80071c0:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 80071c4:	f3c8 0809 	ubfx	r8, r8, #0, #10
          if (count != 0U)
 80071c8:	f1b8 0f00 	cmp.w	r8, #0
 80071cc:	f43f af02 	beq.w	8006fd4 <HAL_PCD_IRQHandler+0x224>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80071d0:	4610      	mov	r0, r2
 80071d2:	4643      	mov	r3, r8
 80071d4:	f8b9 212e 	ldrh.w	r2, [r9, #302]	; 0x12e
 80071d8:	f8d9 113c 	ldr.w	r1, [r9, #316]	; 0x13c
 80071dc:	f001 fc26 	bl	8008a2c <USB_ReadPMA>
 80071e0:	e6f8      	b.n	8006fd4 <HAL_PCD_IRQHandler+0x224>
 80071e2:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 80071e6:	e70c      	b.n	8007002 <HAL_PCD_IRQHandler+0x252>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80071e8:	3306      	adds	r3, #6
 80071ea:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 80071ee:	f3c8 0809 	ubfx	r8, r8, #0, #10
            if (count != 0U)
 80071f2:	f1b8 0f00 	cmp.w	r8, #0
 80071f6:	f43f aee5 	beq.w	8006fc4 <HAL_PCD_IRQHandler+0x214>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80071fa:	4643      	mov	r3, r8
 80071fc:	4610      	mov	r0, r2
 80071fe:	f8b9 2132 	ldrh.w	r2, [r9, #306]	; 0x132
 8007202:	f8d9 113c 	ldr.w	r1, [r9, #316]	; 0x13c
 8007206:	f001 fc11 	bl	8008a2c <USB_ReadPMA>
 800720a:	f899 3128 	ldrb.w	r3, [r9, #296]	; 0x128
 800720e:	6821      	ldr	r1, [r4, #0]
 8007210:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8007214:	e6d6      	b.n	8006fc4 <HAL_PCD_IRQHandler+0x214>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007216:	293e      	cmp	r1, #62	; 0x3e
 8007218:	d826      	bhi.n	8007268 <HAL_PCD_IRQHandler+0x4b8>
 800721a:	084d      	lsrs	r5, r1, #1
 800721c:	07cf      	lsls	r7, r1, #31
 800721e:	bf48      	it	mi
 8007220:	3501      	addmi	r5, #1
 8007222:	02ad      	lsls	r5, r5, #10
 8007224:	b2ad      	uxth	r5, r5
 8007226:	52c5      	strh	r5, [r0, r3]
 8007228:	e66a      	b.n	8006f00 <HAL_PCD_IRQHandler+0x150>
  ep->xfer_count = 0U;
 800722a:	f04f 0c00 	mov.w	ip, #0
 800722e:	f001 0107 	and.w	r1, r1, #7
 8007232:	014f      	lsls	r7, r1, #5
  ep->xfer_buff = pBuf;
 8007234:	19e2      	adds	r2, r4, r7
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007236:	f507 7794 	add.w	r7, r7, #296	; 0x128
  ep->num = ep_addr & EP_ADDR_MSK;
 800723a:	f882 1128 	strb.w	r1, [r2, #296]	; 0x128
  ep->xfer_len = len;
 800723e:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140
  ep->xfer_buff = pBuf;
 8007242:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
  ep->xfer_count = 0U;
 8007246:	f8c2 c144 	str.w	ip, [r2, #324]	; 0x144
  ep->is_in = 0U;
 800724a:	f882 c129 	strb.w	ip, [r2, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800724e:	19e1      	adds	r1, r4, r7
 8007250:	6820      	ldr	r0, [r4, #0]
 8007252:	f001 fa3d 	bl	80086d0 <USB_EPStartXfer>
 8007256:	6822      	ldr	r2, [r4, #0]
 8007258:	e662      	b.n	8006f20 <HAL_PCD_IRQHandler+0x170>
 800725a:	bf00      	nop
 800725c:	ffffbf8f 	.word	0xffffbf8f
 8007260:	ffff8f0f 	.word	0xffff8f0f
 8007264:	ffff8f8f 	.word	0xffff8f8f
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007268:	094d      	lsrs	r5, r1, #5
 800726a:	06ce      	lsls	r6, r1, #27
 800726c:	4906      	ldr	r1, [pc, #24]	; (8007288 <HAL_PCD_IRQHandler+0x4d8>)
 800726e:	bf08      	it	eq
 8007270:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8007274:	ea41 2585 	orr.w	r5, r1, r5, lsl #10
 8007278:	b2ad      	uxth	r5, r5
 800727a:	52c5      	strh	r5, [r0, r3]
 800727c:	e640      	b.n	8006f00 <HAL_PCD_IRQHandler+0x150>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800727e:	4610      	mov	r0, r2
 8007280:	4643      	mov	r3, r8
 8007282:	f8b9 2130 	ldrh.w	r2, [r9, #304]	; 0x130
 8007286:	e7bc      	b.n	8007202 <HAL_PCD_IRQHandler+0x452>
 8007288:	ffff8000 	.word	0xffff8000

0800728c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800728c:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
 8007290:	2a01      	cmp	r2, #1
 8007292:	d00d      	beq.n	80072b0 <HAL_PCD_SetAddress+0x24>
{
 8007294:	b510      	push	{r4, lr}
 8007296:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8007298:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 800729a:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 800729e:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80072a2:	6800      	ldr	r0, [r0, #0]
 80072a4:	f001 fbb2 	bl	8008a0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80072a8:	2000      	movs	r0, #0
 80072aa:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 80072ae:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80072b0:	2002      	movs	r0, #2
}
 80072b2:	4770      	bx	lr

080072b4 <HAL_PCD_EP_Open>:
{
 80072b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b6:	f001 0507 	and.w	r5, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 80072ba:	0609      	lsls	r1, r1, #24
 80072bc:	ea4f 1445 	mov.w	r4, r5, lsl #5
 80072c0:	d41f      	bmi.n	8007302 <HAL_PCD_EP_Open+0x4e>
    ep->is_in = 0U;
 80072c2:	2700      	movs	r7, #0
 80072c4:	1906      	adds	r6, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80072c6:	f504 7194 	add.w	r1, r4, #296	; 0x128
    ep->is_in = 0U;
 80072ca:	f886 7129 	strb.w	r7, [r6, #297]	; 0x129
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80072ce:	4401      	add	r1, r0
  if (ep->is_in != 0U)
 80072d0:	784c      	ldrb	r4, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072d2:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 80072d4:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 80072d6:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80072d8:	b104      	cbz	r4, 80072dc <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 80072da:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 80072dc:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80072de:	bf04      	itt	eq
 80072e0:	2300      	moveq	r3, #0
 80072e2:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80072e4:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d012      	beq.n	8007312 <HAL_PCD_EP_Open+0x5e>
 80072ec:	2301      	movs	r3, #1
 80072ee:	4604      	mov	r4, r0
 80072f0:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80072f4:	6800      	ldr	r0, [r0, #0]
 80072f6:	f000 ff8d 	bl	8008214 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80072fa:	2000      	movs	r0, #0
 80072fc:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 8007300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->is_in = 1U;
 8007302:	2701      	movs	r7, #1
 8007304:	1906      	adds	r6, r0, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007306:	f104 0128 	add.w	r1, r4, #40	; 0x28
    ep->is_in = 1U;
 800730a:	f886 7029 	strb.w	r7, [r6, #41]	; 0x29
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800730e:	4401      	add	r1, r0
 8007310:	e7de      	b.n	80072d0 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 8007312:	2002      	movs	r0, #2
}
 8007314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007316:	bf00      	nop

08007318 <HAL_PCD_EP_Close>:
{
 8007318:	f001 0207 	and.w	r2, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 800731c:	0609      	lsls	r1, r1, #24
{
 800731e:	b510      	push	{r4, lr}
 8007320:	ea4f 1342 	mov.w	r3, r2, lsl #5
  if ((ep_addr & 0x80U) == 0x80U)
 8007324:	d416      	bmi.n	8007354 <HAL_PCD_EP_Close+0x3c>
    ep->is_in = 0U;
 8007326:	2400      	movs	r4, #0
 8007328:	18c1      	adds	r1, r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800732a:	f503 7394 	add.w	r3, r3, #296	; 0x128
    ep->is_in = 0U;
 800732e:	f881 4129 	strb.w	r4, [r1, #297]	; 0x129
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007332:	18c1      	adds	r1, r0, r3
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007334:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8007336:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 800733a:	2b01      	cmp	r3, #1
 800733c:	d015      	beq.n	800736a <HAL_PCD_EP_Close+0x52>
 800733e:	2301      	movs	r3, #1
 8007340:	4604      	mov	r4, r0
 8007342:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007346:	6800      	ldr	r0, [r0, #0]
 8007348:	f001 f8ec 	bl	8008524 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800734c:	2000      	movs	r0, #0
 800734e:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 8007352:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 8007354:	2401      	movs	r4, #1
 8007356:	18c1      	adds	r1, r0, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007358:	3328      	adds	r3, #40	; 0x28
    ep->is_in = 1U;
 800735a:	f881 4029 	strb.w	r4, [r1, #41]	; 0x29
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800735e:	18c1      	adds	r1, r0, r3
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007360:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8007362:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8007366:	2b01      	cmp	r3, #1
 8007368:	d1e9      	bne.n	800733e <HAL_PCD_EP_Close+0x26>
 800736a:	2002      	movs	r0, #2
}
 800736c:	bd10      	pop	{r4, pc}
 800736e:	bf00      	nop

08007370 <HAL_PCD_EP_Receive>:
{
 8007370:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_count = 0U;
 8007372:	2600      	movs	r6, #0
 8007374:	f001 0107 	and.w	r1, r1, #7
 8007378:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 800737a:	1944      	adds	r4, r0, r5
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800737c:	f505 7594 	add.w	r5, r5, #296	; 0x128
  ep->num = ep_addr & EP_ADDR_MSK;
 8007380:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep->xfer_buff = pBuf;
 8007384:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007388:	1941      	adds	r1, r0, r5
  ep->xfer_len = len;
 800738a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800738e:	6800      	ldr	r0, [r0, #0]
  ep->xfer_count = 0U;
 8007390:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 8007394:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007398:	f001 f99a 	bl	80086d0 <USB_EPStartXfer>
}
 800739c:	4630      	mov	r0, r6
 800739e:	bd70      	pop	{r4, r5, r6, pc}

080073a0 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80073a0:	f001 0107 	and.w	r1, r1, #7
 80073a4:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 80073a8:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop

080073b0 <HAL_PCD_EP_Transmit>:
{
 80073b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ep->xfer_count = 0U;
 80073b2:	2600      	movs	r6, #0
  ep->is_in = 1U;
 80073b4:	2701      	movs	r7, #1
 80073b6:	f001 0107 	and.w	r1, r1, #7
 80073ba:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 80073bc:	1944      	adds	r4, r0, r5
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073be:	3528      	adds	r5, #40	; 0x28
  ep->num = ep_addr & EP_ADDR_MSK;
 80073c0:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep->xfer_len = len;
 80073c4:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80073c8:	1941      	adds	r1, r0, r5
 80073ca:	6800      	ldr	r0, [r0, #0]
  ep->is_in = 1U;
 80073cc:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
  ep->xfer_count = 0U;
 80073d0:	6466      	str	r6, [r4, #68]	; 0x44
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80073d2:	f001 f97d 	bl	80086d0 <USB_EPStartXfer>
}
 80073d6:	4630      	mov	r0, r6
 80073d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073da:	bf00      	nop

080073dc <HAL_PCD_EP_SetStall>:
{
 80073dc:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80073de:	6843      	ldr	r3, [r0, #4]
 80073e0:	f001 0507 	and.w	r5, r1, #7
 80073e4:	429d      	cmp	r5, r3
 80073e6:	d81b      	bhi.n	8007420 <HAL_PCD_EP_SetStall+0x44>
  if ((0x80U & ep_addr) == 0x80U)
 80073e8:	060b      	lsls	r3, r1, #24
 80073ea:	d41b      	bmi.n	8007424 <HAL_PCD_EP_SetStall+0x48>
    ep->is_in = 0U;
 80073ec:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80073ee:	0149      	lsls	r1, r1, #5
    ep->is_in = 0U;
 80073f0:	1843      	adds	r3, r0, r1
 80073f2:	f883 4129 	strb.w	r4, [r3, #297]	; 0x129
  ep->is_stall = 1U;
 80073f6:	2301      	movs	r3, #1
    ep = &hpcd->OUT_ep[ep_addr];
 80073f8:	f501 7294 	add.w	r2, r1, #296	; 0x128
 80073fc:	1881      	adds	r1, r0, r2
  ep->num = ep_addr & EP_ADDR_MSK;
 80073fe:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8007400:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8007402:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
 8007406:	429a      	cmp	r2, r3
 8007408:	d01b      	beq.n	8007442 <HAL_PCD_EP_SetStall+0x66>
 800740a:	4604      	mov	r4, r0
 800740c:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007410:	6800      	ldr	r0, [r0, #0]
 8007412:	f001 fa85 	bl	8008920 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007416:	b1b5      	cbz	r5, 8007446 <HAL_PCD_EP_SetStall+0x6a>
  __HAL_UNLOCK(hpcd);
 8007418:	2000      	movs	r0, #0
 800741a:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 800741e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007420:	2001      	movs	r0, #1
}
 8007422:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8007424:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007426:	016b      	lsls	r3, r5, #5
 8007428:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 800742c:	4403      	add	r3, r0
 800742e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 8007432:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007434:	4401      	add	r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 8007436:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8007438:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800743a:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
 800743e:	429a      	cmp	r2, r3
 8007440:	d1e3      	bne.n	800740a <HAL_PCD_EP_SetStall+0x2e>
 8007442:	2002      	movs	r0, #2
}
 8007444:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8007446:	f504 710c 	add.w	r1, r4, #560	; 0x230
 800744a:	6820      	ldr	r0, [r4, #0]
 800744c:	f001 faec 	bl	8008a28 <USB_EP0_OutStart>
 8007450:	e7e2      	b.n	8007418 <HAL_PCD_EP_SetStall+0x3c>
 8007452:	bf00      	nop

08007454 <HAL_PCD_EP_ClrStall>:
{
 8007454:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007456:	6843      	ldr	r3, [r0, #4]
 8007458:	f001 020f 	and.w	r2, r1, #15
 800745c:	429a      	cmp	r2, r3
 800745e:	d81e      	bhi.n	800749e <HAL_PCD_EP_ClrStall+0x4a>
 8007460:	f001 0207 	and.w	r2, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 8007464:	0609      	lsls	r1, r1, #24
 8007466:	ea4f 1342 	mov.w	r3, r2, lsl #5
 800746a:	d41a      	bmi.n	80074a2 <HAL_PCD_EP_ClrStall+0x4e>
    ep->is_in = 0U;
 800746c:	2500      	movs	r5, #0
 800746e:	18c4      	adds	r4, r0, r3
 8007470:	f884 5129 	strb.w	r5, [r4, #297]	; 0x129
  ep->is_stall = 0U;
 8007474:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007476:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800747a:	4401      	add	r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 800747c:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 800747e:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8007480:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8007484:	2b01      	cmp	r3, #1
 8007486:	d01a      	beq.n	80074be <HAL_PCD_EP_ClrStall+0x6a>
 8007488:	2301      	movs	r3, #1
 800748a:	4604      	mov	r4, r0
 800748c:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007490:	6800      	ldr	r0, [r0, #0]
 8007492:	f001 fa67 	bl	8008964 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007496:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
  return HAL_OK;
 800749a:	4628      	mov	r0, r5
}
 800749c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800749e:	2001      	movs	r0, #1
}
 80074a0:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 80074a2:	2501      	movs	r5, #1
 80074a4:	18c4      	adds	r4, r0, r3
 80074a6:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
  ep->is_stall = 0U;
 80074aa:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074ac:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80074b0:	4401      	add	r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 80074b2:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 80074b4:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80074b6:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d1e4      	bne.n	8007488 <HAL_PCD_EP_ClrStall+0x34>
 80074be:	2002      	movs	r0, #2
}
 80074c0:	bd38      	pop	{r3, r4, r5, pc}
 80074c2:	bf00      	nop

080074c4 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80074c4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80074c8:	d00d      	beq.n	80074e6 <HAL_PCDEx_PMAConfig+0x22>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074ca:	f001 0107 	and.w	r1, r1, #7
 80074ce:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80074d2:	3028      	adds	r0, #40	; 0x28
 80074d4:	b299      	uxth	r1, r3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80074d6:	b16a      	cbz	r2, 80074f4 <HAL_PCDEx_PMAConfig+0x30>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80074d8:	2201      	movs	r2, #1
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80074da:	0c1b      	lsrs	r3, r3, #16
 80074dc:	8143      	strh	r3, [r0, #10]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80074de:	8101      	strh	r1, [r0, #8]
 80074e0:	7302      	strb	r2, [r0, #12]
  }

  return HAL_OK;
}
 80074e2:	2000      	movs	r0, #0
 80074e4:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 80074e6:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80074ea:	f500 7094 	add.w	r0, r0, #296	; 0x128
 80074ee:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 80074f0:	2a00      	cmp	r2, #0
 80074f2:	d1f1      	bne.n	80074d8 <HAL_PCDEx_PMAConfig+0x14>
    ep->pmaadress = (uint16_t)pmaadress;
 80074f4:	80c1      	strh	r1, [r0, #6]
 80074f6:	7302      	strb	r2, [r0, #12]
}
 80074f8:	2000      	movs	r0, #0
 80074fa:	4770      	bx	lr

080074fc <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80074fc:	2800      	cmp	r0, #0
 80074fe:	f000 8155 	beq.w	80077ac <HAL_RCC_OscConfig+0x2b0>
{
 8007502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007506:	6803      	ldr	r3, [r0, #0]
{
 8007508:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800750a:	07dd      	lsls	r5, r3, #31
 800750c:	4604      	mov	r4, r0
 800750e:	d535      	bpl.n	800757c <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007510:	49a8      	ldr	r1, [pc, #672]	; (80077b4 <HAL_RCC_OscConfig+0x2b8>)
 8007512:	684a      	ldr	r2, [r1, #4]
 8007514:	f002 020c 	and.w	r2, r2, #12
 8007518:	2a04      	cmp	r2, #4
 800751a:	f000 8105 	beq.w	8007728 <HAL_RCC_OscConfig+0x22c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800751e:	684a      	ldr	r2, [r1, #4]
 8007520:	f002 020c 	and.w	r2, r2, #12
 8007524:	2a08      	cmp	r2, #8
 8007526:	f000 80fb 	beq.w	8007720 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800752a:	6863      	ldr	r3, [r4, #4]
 800752c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007530:	d010      	beq.n	8007554 <HAL_RCC_OscConfig+0x58>
 8007532:	2b00      	cmp	r3, #0
 8007534:	f000 8120 	beq.w	8007778 <HAL_RCC_OscConfig+0x27c>
 8007538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800753c:	f000 8178 	beq.w	8007830 <HAL_RCC_OscConfig+0x334>
 8007540:	4b9c      	ldr	r3, [pc, #624]	; (80077b4 <HAL_RCC_OscConfig+0x2b8>)
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007550:	601a      	str	r2, [r3, #0]
 8007552:	e004      	b.n	800755e <HAL_RCC_OscConfig+0x62>
 8007554:	4a97      	ldr	r2, [pc, #604]	; (80077b4 <HAL_RCC_OscConfig+0x2b8>)
 8007556:	6813      	ldr	r3, [r2, #0]
 8007558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800755c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800755e:	f7fe fb5d 	bl	8005c1c <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007562:	4d94      	ldr	r5, [pc, #592]	; (80077b4 <HAL_RCC_OscConfig+0x2b8>)
        tickstart = HAL_GetTick();
 8007564:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007566:	e005      	b.n	8007574 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007568:	f7fe fb58 	bl	8005c1c <HAL_GetTick>
 800756c:	1b80      	subs	r0, r0, r6
 800756e:	2864      	cmp	r0, #100	; 0x64
 8007570:	f200 80f5 	bhi.w	800775e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007574:	682b      	ldr	r3, [r5, #0]
 8007576:	039a      	lsls	r2, r3, #14
 8007578:	d5f6      	bpl.n	8007568 <HAL_RCC_OscConfig+0x6c>
 800757a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800757c:	079f      	lsls	r7, r3, #30
 800757e:	d44d      	bmi.n	800761c <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007580:	071a      	lsls	r2, r3, #28
 8007582:	d522      	bpl.n	80075ca <HAL_RCC_OscConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007584:	69a3      	ldr	r3, [r4, #24]
 8007586:	2b00      	cmp	r3, #0
 8007588:	f000 80ba 	beq.w	8007700 <HAL_RCC_OscConfig+0x204>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800758c:	2201      	movs	r2, #1
 800758e:	4b8a      	ldr	r3, [pc, #552]	; (80077b8 <HAL_RCC_OscConfig+0x2bc>)

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007590:	4d88      	ldr	r5, [pc, #544]	; (80077b4 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_ENABLE();
 8007592:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8007594:	f7fe fb42 	bl	8005c1c <HAL_GetTick>
 8007598:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800759a:	e005      	b.n	80075a8 <HAL_RCC_OscConfig+0xac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800759c:	f7fe fb3e 	bl	8005c1c <HAL_GetTick>
 80075a0:	1b80      	subs	r0, r0, r6
 80075a2:	2802      	cmp	r0, #2
 80075a4:	f200 80db 	bhi.w	800775e <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80075aa:	079b      	lsls	r3, r3, #30
 80075ac:	d5f6      	bpl.n	800759c <HAL_RCC_OscConfig+0xa0>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80075ae:	4b83      	ldr	r3, [pc, #524]	; (80077bc <HAL_RCC_OscConfig+0x2c0>)
 80075b0:	4a83      	ldr	r2, [pc, #524]	; (80077c0 <HAL_RCC_OscConfig+0x2c4>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	fba2 2303 	umull	r2, r3, r2, r3
 80075b8:	0a5b      	lsrs	r3, r3, #9
 80075ba:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80075bc:	bf00      	nop
  }
  while (Delay --);
 80075be:	9b01      	ldr	r3, [sp, #4]
 80075c0:	1e5a      	subs	r2, r3, #1
 80075c2:	9201      	str	r2, [sp, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1f9      	bne.n	80075bc <HAL_RCC_OscConfig+0xc0>
 80075c8:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075ca:	075d      	lsls	r5, r3, #29
 80075cc:	d569      	bpl.n	80076a2 <HAL_RCC_OscConfig+0x1a6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075ce:	4b79      	ldr	r3, [pc, #484]	; (80077b4 <HAL_RCC_OscConfig+0x2b8>)
 80075d0:	69da      	ldr	r2, [r3, #28]
 80075d2:	00d0      	lsls	r0, r2, #3
 80075d4:	f100 80ec 	bmi.w	80077b0 <HAL_RCC_OscConfig+0x2b4>
      pwrclkchanged = SET;
 80075d8:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80075da:	69da      	ldr	r2, [r3, #28]
 80075dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80075e0:	61da      	str	r2, [r3, #28]
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075ec:	4b75      	ldr	r3, [pc, #468]	; (80077c4 <HAL_RCC_OscConfig+0x2c8>)
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	05d1      	lsls	r1, r2, #23
 80075f2:	f140 80a3 	bpl.w	800773c <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075f6:	68e3      	ldr	r3, [r4, #12]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d037      	beq.n	800766c <HAL_RCC_OscConfig+0x170>
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 80e7 	beq.w	80077d0 <HAL_RCC_OscConfig+0x2d4>
 8007602:	2b05      	cmp	r3, #5
 8007604:	4b6b      	ldr	r3, [pc, #428]	; (80077b4 <HAL_RCC_OscConfig+0x2b8>)
 8007606:	6a1a      	ldr	r2, [r3, #32]
 8007608:	f000 811f 	beq.w	800784a <HAL_RCC_OscConfig+0x34e>
 800760c:	f022 0201 	bic.w	r2, r2, #1
 8007610:	621a      	str	r2, [r3, #32]
 8007612:	6a1a      	ldr	r2, [r3, #32]
 8007614:	f022 0204 	bic.w	r2, r2, #4
 8007618:	621a      	str	r2, [r3, #32]
 800761a:	e02c      	b.n	8007676 <HAL_RCC_OscConfig+0x17a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800761c:	4a65      	ldr	r2, [pc, #404]	; (80077b4 <HAL_RCC_OscConfig+0x2b8>)
 800761e:	6851      	ldr	r1, [r2, #4]
 8007620:	f011 0f0c 	tst.w	r1, #12
 8007624:	d061      	beq.n	80076ea <HAL_RCC_OscConfig+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007626:	6851      	ldr	r1, [r2, #4]
 8007628:	f001 010c 	and.w	r1, r1, #12
 800762c:	2908      	cmp	r1, #8
 800762e:	d059      	beq.n	80076e4 <HAL_RCC_OscConfig+0x1e8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007630:	6923      	ldr	r3, [r4, #16]
 8007632:	2b00      	cmp	r3, #0
 8007634:	f000 80eb 	beq.w	800780e <HAL_RCC_OscConfig+0x312>
        __HAL_RCC_HSI_ENABLE();
 8007638:	2201      	movs	r2, #1
 800763a:	4b63      	ldr	r3, [pc, #396]	; (80077c8 <HAL_RCC_OscConfig+0x2cc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800763c:	4d5d      	ldr	r5, [pc, #372]	; (80077b4 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_ENABLE();
 800763e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007640:	f7fe faec 	bl	8005c1c <HAL_GetTick>
 8007644:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007646:	e005      	b.n	8007654 <HAL_RCC_OscConfig+0x158>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007648:	f7fe fae8 	bl	8005c1c <HAL_GetTick>
 800764c:	1b80      	subs	r0, r0, r6
 800764e:	2802      	cmp	r0, #2
 8007650:	f200 8085 	bhi.w	800775e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007654:	682b      	ldr	r3, [r5, #0]
 8007656:	0798      	lsls	r0, r3, #30
 8007658:	d5f6      	bpl.n	8007648 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800765a:	682b      	ldr	r3, [r5, #0]
 800765c:	6962      	ldr	r2, [r4, #20]
 800765e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007662:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007666:	602b      	str	r3, [r5, #0]
 8007668:	6823      	ldr	r3, [r4, #0]
 800766a:	e789      	b.n	8007580 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800766c:	4a51      	ldr	r2, [pc, #324]	; (80077b4 <HAL_RCC_OscConfig+0x2b8>)
 800766e:	6a13      	ldr	r3, [r2, #32]
 8007670:	f043 0301 	orr.w	r3, r3, #1
 8007674:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8007676:	f7fe fad1 	bl	8005c1c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800767a:	4e4e      	ldr	r6, [pc, #312]	; (80077b4 <HAL_RCC_OscConfig+0x2b8>)
      tickstart = HAL_GetTick();
 800767c:	4680      	mov	r8, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800767e:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007682:	e005      	b.n	8007690 <HAL_RCC_OscConfig+0x194>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007684:	f7fe faca 	bl	8005c1c <HAL_GetTick>
 8007688:	eba0 0008 	sub.w	r0, r0, r8
 800768c:	42b8      	cmp	r0, r7
 800768e:	d866      	bhi.n	800775e <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007690:	6a33      	ldr	r3, [r6, #32]
 8007692:	079b      	lsls	r3, r3, #30
 8007694:	d5f6      	bpl.n	8007684 <HAL_RCC_OscConfig+0x188>
    if (pwrclkchanged == SET)
 8007696:	b125      	cbz	r5, 80076a2 <HAL_RCC_OscConfig+0x1a6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007698:	4a46      	ldr	r2, [pc, #280]	; (80077b4 <HAL_RCC_OscConfig+0x2b8>)
 800769a:	69d3      	ldr	r3, [r2, #28]
 800769c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076a0:	61d3      	str	r3, [r2, #28]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076a2:	69e0      	ldr	r0, [r4, #28]
 80076a4:	b1d0      	cbz	r0, 80076dc <HAL_RCC_OscConfig+0x1e0>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80076a6:	4d43      	ldr	r5, [pc, #268]	; (80077b4 <HAL_RCC_OscConfig+0x2b8>)
 80076a8:	686a      	ldr	r2, [r5, #4]
 80076aa:	f002 020c 	and.w	r2, r2, #12
 80076ae:	2a08      	cmp	r2, #8
 80076b0:	f000 80d3 	beq.w	800785a <HAL_RCC_OscConfig+0x35e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076b4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80076b6:	f04f 0100 	mov.w	r1, #0
 80076ba:	4a44      	ldr	r2, [pc, #272]	; (80077cc <HAL_RCC_OscConfig+0x2d0>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076bc:	f000 80de 	beq.w	800787c <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_PLL_DISABLE();
 80076c0:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80076c2:	f7fe faab 	bl	8005c1c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80076c6:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80076c8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80076ca:	e004      	b.n	80076d6 <HAL_RCC_OscConfig+0x1da>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076cc:	f7fe faa6 	bl	8005c1c <HAL_GetTick>
 80076d0:	1b40      	subs	r0, r0, r5
 80076d2:	2802      	cmp	r0, #2
 80076d4:	d843      	bhi.n	800775e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	019b      	lsls	r3, r3, #6
 80076da:	d4f7      	bmi.n	80076cc <HAL_RCC_OscConfig+0x1d0>
  return HAL_OK;
 80076dc:	2000      	movs	r0, #0
}
 80076de:	b002      	add	sp, #8
 80076e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80076e4:	6852      	ldr	r2, [r2, #4]
 80076e6:	03d6      	lsls	r6, r2, #15
 80076e8:	d4a2      	bmi.n	8007630 <HAL_RCC_OscConfig+0x134>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076ea:	4a32      	ldr	r2, [pc, #200]	; (80077b4 <HAL_RCC_OscConfig+0x2b8>)
 80076ec:	6812      	ldr	r2, [r2, #0]
 80076ee:	0795      	lsls	r5, r2, #30
 80076f0:	d539      	bpl.n	8007766 <HAL_RCC_OscConfig+0x26a>
 80076f2:	6922      	ldr	r2, [r4, #16]
 80076f4:	2a01      	cmp	r2, #1
 80076f6:	d036      	beq.n	8007766 <HAL_RCC_OscConfig+0x26a>
        return HAL_ERROR;
 80076f8:	2001      	movs	r0, #1
}
 80076fa:	b002      	add	sp, #8
 80076fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8007700:	4a2d      	ldr	r2, [pc, #180]	; (80077b8 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007702:	4d2c      	ldr	r5, [pc, #176]	; (80077b4 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_DISABLE();
 8007704:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8007706:	f7fe fa89 	bl	8005c1c <HAL_GetTick>
 800770a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800770c:	e004      	b.n	8007718 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800770e:	f7fe fa85 	bl	8005c1c <HAL_GetTick>
 8007712:	1b80      	subs	r0, r0, r6
 8007714:	2802      	cmp	r0, #2
 8007716:	d822      	bhi.n	800775e <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007718:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800771a:	079f      	lsls	r7, r3, #30
 800771c:	d4f7      	bmi.n	800770e <HAL_RCC_OscConfig+0x212>
 800771e:	e753      	b.n	80075c8 <HAL_RCC_OscConfig+0xcc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007720:	684a      	ldr	r2, [r1, #4]
 8007722:	03d0      	lsls	r0, r2, #15
 8007724:	f57f af01 	bpl.w	800752a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007728:	4a22      	ldr	r2, [pc, #136]	; (80077b4 <HAL_RCC_OscConfig+0x2b8>)
 800772a:	6812      	ldr	r2, [r2, #0]
 800772c:	0391      	lsls	r1, r2, #14
 800772e:	f57f af25 	bpl.w	800757c <HAL_RCC_OscConfig+0x80>
 8007732:	6862      	ldr	r2, [r4, #4]
 8007734:	2a00      	cmp	r2, #0
 8007736:	f47f af21 	bne.w	800757c <HAL_RCC_OscConfig+0x80>
 800773a:	e7dd      	b.n	80076f8 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800773c:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800773e:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007740:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007744:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8007746:	f7fe fa69 	bl	8005c1c <HAL_GetTick>
 800774a:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800774c:	6833      	ldr	r3, [r6, #0]
 800774e:	05da      	lsls	r2, r3, #23
 8007750:	f53f af51 	bmi.w	80075f6 <HAL_RCC_OscConfig+0xfa>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007754:	f7fe fa62 	bl	8005c1c <HAL_GetTick>
 8007758:	1bc0      	subs	r0, r0, r7
 800775a:	2864      	cmp	r0, #100	; 0x64
 800775c:	d9f6      	bls.n	800774c <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 800775e:	2003      	movs	r0, #3
}
 8007760:	b002      	add	sp, #8
 8007762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007766:	4913      	ldr	r1, [pc, #76]	; (80077b4 <HAL_RCC_OscConfig+0x2b8>)
 8007768:	6960      	ldr	r0, [r4, #20]
 800776a:	680a      	ldr	r2, [r1, #0]
 800776c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8007770:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8007774:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007776:	e703      	b.n	8007580 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007778:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800777c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8007780:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007782:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007784:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007790:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007792:	f7fe fa43 	bl	8005c1c <HAL_GetTick>
 8007796:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007798:	e004      	b.n	80077a4 <HAL_RCC_OscConfig+0x2a8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800779a:	f7fe fa3f 	bl	8005c1c <HAL_GetTick>
 800779e:	1b80      	subs	r0, r0, r6
 80077a0:	2864      	cmp	r0, #100	; 0x64
 80077a2:	d8dc      	bhi.n	800775e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077a4:	682b      	ldr	r3, [r5, #0]
 80077a6:	039b      	lsls	r3, r3, #14
 80077a8:	d4f7      	bmi.n	800779a <HAL_RCC_OscConfig+0x29e>
 80077aa:	e6e6      	b.n	800757a <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 80077ac:	2001      	movs	r0, #1
}
 80077ae:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 80077b0:	2500      	movs	r5, #0
 80077b2:	e71b      	b.n	80075ec <HAL_RCC_OscConfig+0xf0>
 80077b4:	40021000 	.word	0x40021000
 80077b8:	42420480 	.word	0x42420480
 80077bc:	20000038 	.word	0x20000038
 80077c0:	10624dd3 	.word	0x10624dd3
 80077c4:	40007000 	.word	0x40007000
 80077c8:	42420000 	.word	0x42420000
 80077cc:	42420060 	.word	0x42420060
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80077d4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80077d8:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077da:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077dc:	f022 0201 	bic.w	r2, r2, #1
 80077e0:	621a      	str	r2, [r3, #32]
 80077e2:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077e4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077e8:	f022 0204 	bic.w	r2, r2, #4
 80077ec:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 80077ee:	f7fe fa15 	bl	8005c1c <HAL_GetTick>
 80077f2:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077f4:	e004      	b.n	8007800 <HAL_RCC_OscConfig+0x304>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077f6:	f7fe fa11 	bl	8005c1c <HAL_GetTick>
 80077fa:	1bc0      	subs	r0, r0, r7
 80077fc:	4540      	cmp	r0, r8
 80077fe:	d8ae      	bhi.n	800775e <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007800:	6a33      	ldr	r3, [r6, #32]
 8007802:	0798      	lsls	r0, r3, #30
 8007804:	d4f7      	bmi.n	80077f6 <HAL_RCC_OscConfig+0x2fa>
    if (pwrclkchanged == SET)
 8007806:	2d00      	cmp	r5, #0
 8007808:	f43f af4b 	beq.w	80076a2 <HAL_RCC_OscConfig+0x1a6>
 800780c:	e744      	b.n	8007698 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_DISABLE();
 800780e:	4a34      	ldr	r2, [pc, #208]	; (80078e0 <HAL_RCC_OscConfig+0x3e4>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007810:	4d34      	ldr	r5, [pc, #208]	; (80078e4 <HAL_RCC_OscConfig+0x3e8>)
        __HAL_RCC_HSI_DISABLE();
 8007812:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007814:	f7fe fa02 	bl	8005c1c <HAL_GetTick>
 8007818:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800781a:	e004      	b.n	8007826 <HAL_RCC_OscConfig+0x32a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800781c:	f7fe f9fe 	bl	8005c1c <HAL_GetTick>
 8007820:	1b80      	subs	r0, r0, r6
 8007822:	2802      	cmp	r0, #2
 8007824:	d89b      	bhi.n	800775e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007826:	682b      	ldr	r3, [r5, #0]
 8007828:	0799      	lsls	r1, r3, #30
 800782a:	d4f7      	bmi.n	800781c <HAL_RCC_OscConfig+0x320>
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	e6a7      	b.n	8007580 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007830:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007834:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	e689      	b.n	800755e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800784a:	f042 0204 	orr.w	r2, r2, #4
 800784e:	621a      	str	r2, [r3, #32]
 8007850:	6a1a      	ldr	r2, [r3, #32]
 8007852:	f042 0201 	orr.w	r2, r2, #1
 8007856:	621a      	str	r2, [r3, #32]
 8007858:	e70d      	b.n	8007676 <HAL_RCC_OscConfig+0x17a>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800785a:	2801      	cmp	r0, #1
 800785c:	f43f af4d 	beq.w	80076fa <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 8007860:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007862:	6a22      	ldr	r2, [r4, #32]
 8007864:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8007868:	4291      	cmp	r1, r2
 800786a:	f47f af45 	bne.w	80076f8 <HAL_RCC_OscConfig+0x1fc>
 800786e:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007870:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 8007874:	1a18      	subs	r0, r3, r0
 8007876:	bf18      	it	ne
 8007878:	2001      	movne	r0, #1
 800787a:	e73e      	b.n	80076fa <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_PLL_DISABLE();
 800787c:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 800787e:	f7fe f9cd 	bl	8005c1c <HAL_GetTick>
 8007882:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007884:	e005      	b.n	8007892 <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007886:	f7fe f9c9 	bl	8005c1c <HAL_GetTick>
 800788a:	1b80      	subs	r0, r0, r6
 800788c:	2802      	cmp	r0, #2
 800788e:	f63f af66 	bhi.w	800775e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007892:	682b      	ldr	r3, [r5, #0]
 8007894:	0199      	lsls	r1, r3, #6
 8007896:	d4f6      	bmi.n	8007886 <HAL_RCC_OscConfig+0x38a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007898:	6a22      	ldr	r2, [r4, #32]
 800789a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800789e:	d105      	bne.n	80078ac <HAL_RCC_OscConfig+0x3b0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80078a0:	686b      	ldr	r3, [r5, #4]
 80078a2:	68a1      	ldr	r1, [r4, #8]
 80078a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80078a8:	430b      	orrs	r3, r1
 80078aa:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80078ac:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80078ae:	4b0d      	ldr	r3, [pc, #52]	; (80078e4 <HAL_RCC_OscConfig+0x3e8>)
 80078b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80078b2:	6859      	ldr	r1, [r3, #4]
 80078b4:	4302      	orrs	r2, r0
 80078b6:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 80078ba:	480b      	ldr	r0, [pc, #44]	; (80078e8 <HAL_RCC_OscConfig+0x3ec>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80078bc:	430a      	orrs	r2, r1
 80078be:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80078c0:	6005      	str	r5, [r0, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80078c2:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 80078c4:	f7fe f9aa 	bl	8005c1c <HAL_GetTick>
 80078c8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80078ca:	e005      	b.n	80078d8 <HAL_RCC_OscConfig+0x3dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078cc:	f7fe f9a6 	bl	8005c1c <HAL_GetTick>
 80078d0:	1b40      	subs	r0, r0, r5
 80078d2:	2802      	cmp	r0, #2
 80078d4:	f63f af43 	bhi.w	800775e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80078d8:	6823      	ldr	r3, [r4, #0]
 80078da:	019a      	lsls	r2, r3, #6
 80078dc:	d5f6      	bpl.n	80078cc <HAL_RCC_OscConfig+0x3d0>
 80078de:	e6fd      	b.n	80076dc <HAL_RCC_OscConfig+0x1e0>
 80078e0:	42420000 	.word	0x42420000
 80078e4:	40021000 	.word	0x40021000
 80078e8:	42420060 	.word	0x42420060

080078ec <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80078ec:	b178      	cbz	r0, 800790e <HAL_RCC_ClockConfig+0x22>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80078ee:	4a5d      	ldr	r2, [pc, #372]	; (8007a64 <HAL_RCC_ClockConfig+0x178>)
 80078f0:	6813      	ldr	r3, [r2, #0]
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	428b      	cmp	r3, r1
 80078f8:	d20b      	bcs.n	8007912 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078fa:	6813      	ldr	r3, [r2, #0]
 80078fc:	f023 0307 	bic.w	r3, r3, #7
 8007900:	430b      	orrs	r3, r1
 8007902:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007904:	6813      	ldr	r3, [r2, #0]
 8007906:	f003 0307 	and.w	r3, r3, #7
 800790a:	428b      	cmp	r3, r1
 800790c:	d001      	beq.n	8007912 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 800790e:	2001      	movs	r0, #1
}
 8007910:	4770      	bx	lr
{
 8007912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007916:	6803      	ldr	r3, [r0, #0]
{
 8007918:	b086      	sub	sp, #24
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800791a:	079d      	lsls	r5, r3, #30
 800791c:	d514      	bpl.n	8007948 <HAL_RCC_ClockConfig+0x5c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800791e:	075c      	lsls	r4, r3, #29
 8007920:	d504      	bpl.n	800792c <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007922:	4c51      	ldr	r4, [pc, #324]	; (8007a68 <HAL_RCC_ClockConfig+0x17c>)
 8007924:	6862      	ldr	r2, [r4, #4]
 8007926:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800792a:	6062      	str	r2, [r4, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800792c:	071a      	lsls	r2, r3, #28
 800792e:	d504      	bpl.n	800793a <HAL_RCC_ClockConfig+0x4e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007930:	4c4d      	ldr	r4, [pc, #308]	; (8007a68 <HAL_RCC_ClockConfig+0x17c>)
 8007932:	6862      	ldr	r2, [r4, #4]
 8007934:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8007938:	6062      	str	r2, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800793a:	4c4b      	ldr	r4, [pc, #300]	; (8007a68 <HAL_RCC_ClockConfig+0x17c>)
 800793c:	6885      	ldr	r5, [r0, #8]
 800793e:	6862      	ldr	r2, [r4, #4]
 8007940:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007944:	432a      	orrs	r2, r5
 8007946:	6062      	str	r2, [r4, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007948:	07db      	lsls	r3, r3, #31
 800794a:	4604      	mov	r4, r0
 800794c:	460d      	mov	r5, r1
 800794e:	d520      	bpl.n	8007992 <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007950:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007952:	4b45      	ldr	r3, [pc, #276]	; (8007a68 <HAL_RCC_ClockConfig+0x17c>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007954:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007956:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007958:	d06f      	beq.n	8007a3a <HAL_RCC_ClockConfig+0x14e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800795a:	2a02      	cmp	r2, #2
 800795c:	d07e      	beq.n	8007a5c <HAL_RCC_ClockConfig+0x170>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800795e:	0798      	lsls	r0, r3, #30
 8007960:	d527      	bpl.n	80079b2 <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007962:	4e41      	ldr	r6, [pc, #260]	; (8007a68 <HAL_RCC_ClockConfig+0x17c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007964:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007968:	6873      	ldr	r3, [r6, #4]
 800796a:	f023 0303 	bic.w	r3, r3, #3
 800796e:	4313      	orrs	r3, r2
 8007970:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8007972:	f7fe f953 	bl	8005c1c <HAL_GetTick>
 8007976:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007978:	e004      	b.n	8007984 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800797a:	f7fe f94f 	bl	8005c1c <HAL_GetTick>
 800797e:	1bc0      	subs	r0, r0, r7
 8007980:	4540      	cmp	r0, r8
 8007982:	d869      	bhi.n	8007a58 <HAL_RCC_ClockConfig+0x16c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007984:	6873      	ldr	r3, [r6, #4]
 8007986:	6862      	ldr	r2, [r4, #4]
 8007988:	f003 030c 	and.w	r3, r3, #12
 800798c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007990:	d1f3      	bne.n	800797a <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007992:	4a34      	ldr	r2, [pc, #208]	; (8007a64 <HAL_RCC_ClockConfig+0x178>)
 8007994:	6813      	ldr	r3, [r2, #0]
 8007996:	f003 0307 	and.w	r3, r3, #7
 800799a:	42ab      	cmp	r3, r5
 800799c:	d90d      	bls.n	80079ba <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800799e:	6813      	ldr	r3, [r2, #0]
 80079a0:	f023 0307 	bic.w	r3, r3, #7
 80079a4:	432b      	orrs	r3, r5
 80079a6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079a8:	6813      	ldr	r3, [r2, #0]
 80079aa:	f003 0307 	and.w	r3, r3, #7
 80079ae:	42ab      	cmp	r3, r5
 80079b0:	d003      	beq.n	80079ba <HAL_RCC_ClockConfig+0xce>
    return HAL_ERROR;
 80079b2:	2001      	movs	r0, #1
}
 80079b4:	b006      	add	sp, #24
 80079b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	0759      	lsls	r1, r3, #29
 80079be:	d506      	bpl.n	80079ce <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079c0:	4929      	ldr	r1, [pc, #164]	; (8007a68 <HAL_RCC_ClockConfig+0x17c>)
 80079c2:	68e0      	ldr	r0, [r4, #12]
 80079c4:	684a      	ldr	r2, [r1, #4]
 80079c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80079ca:	4302      	orrs	r2, r0
 80079cc:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079ce:	071a      	lsls	r2, r3, #28
 80079d0:	d507      	bpl.n	80079e2 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80079d2:	4a25      	ldr	r2, [pc, #148]	; (8007a68 <HAL_RCC_ClockConfig+0x17c>)
 80079d4:	6921      	ldr	r1, [r4, #16]
 80079d6:	6853      	ldr	r3, [r2, #4]
 80079d8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80079dc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80079e0:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80079e2:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80079e6:	4b21      	ldr	r3, [pc, #132]	; (8007a6c <HAL_RCC_ClockConfig+0x180>)
 80079e8:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80079ea:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80079ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80079f0:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 80079f4:	491c      	ldr	r1, [pc, #112]	; (8007a68 <HAL_RCC_ClockConfig+0x17c>)
 80079f6:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80079f8:	f002 030c 	and.w	r3, r2, #12
 80079fc:	2b08      	cmp	r3, #8
 80079fe:	d11a      	bne.n	8007a36 <HAL_RCC_ClockConfig+0x14a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007a00:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8007a04:	4423      	add	r3, r4
 8007a06:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007a0a:	03d3      	lsls	r3, r2, #15
 8007a0c:	d418      	bmi.n	8007a40 <HAL_RCC_ClockConfig+0x154>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007a0e:	4b18      	ldr	r3, [pc, #96]	; (8007a70 <HAL_RCC_ClockConfig+0x184>)
 8007a10:	fb03 f300 	mul.w	r3, r3, r0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007a14:	4a14      	ldr	r2, [pc, #80]	; (8007a68 <HAL_RCC_ClockConfig+0x17c>)
 8007a16:	4817      	ldr	r0, [pc, #92]	; (8007a74 <HAL_RCC_ClockConfig+0x188>)
 8007a18:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8007a1a:	4917      	ldr	r1, [pc, #92]	; (8007a78 <HAL_RCC_ClockConfig+0x18c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007a1c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007a20:	5c80      	ldrb	r0, [r0, r2]
 8007a22:	4a16      	ldr	r2, [pc, #88]	; (8007a7c <HAL_RCC_ClockConfig+0x190>)
 8007a24:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8007a26:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007a28:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8007a2a:	f7fe f8b5 	bl	8005b98 <HAL_InitTick>
  return HAL_OK;
 8007a2e:	2000      	movs	r0, #0
}
 8007a30:	b006      	add	sp, #24
 8007a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSE_VALUE;
 8007a36:	4b12      	ldr	r3, [pc, #72]	; (8007a80 <HAL_RCC_ClockConfig+0x194>)
 8007a38:	e7ec      	b.n	8007a14 <HAL_RCC_ClockConfig+0x128>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a3a:	039f      	lsls	r7, r3, #14
 8007a3c:	d491      	bmi.n	8007962 <HAL_RCC_ClockConfig+0x76>
 8007a3e:	e7b8      	b.n	80079b2 <HAL_RCC_ClockConfig+0xc6>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007a40:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007a42:	4b0f      	ldr	r3, [pc, #60]	; (8007a80 <HAL_RCC_ClockConfig+0x194>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007a44:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007a48:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007a4c:	4422      	add	r2, r4
 8007a4e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007a52:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a56:	e7dd      	b.n	8007a14 <HAL_RCC_ClockConfig+0x128>
        return HAL_TIMEOUT;
 8007a58:	2003      	movs	r0, #3
 8007a5a:	e7ab      	b.n	80079b4 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a5c:	019e      	lsls	r6, r3, #6
 8007a5e:	d480      	bmi.n	8007962 <HAL_RCC_ClockConfig+0x76>
 8007a60:	e7a7      	b.n	80079b2 <HAL_RCC_ClockConfig+0xc6>
 8007a62:	bf00      	nop
 8007a64:	40022000 	.word	0x40022000
 8007a68:	40021000 	.word	0x40021000
 8007a6c:	0800dff8 	.word	0x0800dff8
 8007a70:	003d0900 	.word	0x003d0900
 8007a74:	0800ec78 	.word	0x0800ec78
 8007a78:	20000040 	.word	0x20000040
 8007a7c:	20000038 	.word	0x20000038
 8007a80:	007a1200 	.word	0x007a1200

08007a84 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007a84:	4b04      	ldr	r3, [pc, #16]	; (8007a98 <HAL_RCC_GetPCLK1Freq+0x14>)
 8007a86:	4905      	ldr	r1, [pc, #20]	; (8007a9c <HAL_RCC_GetPCLK1Freq+0x18>)
 8007a88:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8007a8a:	4a05      	ldr	r2, [pc, #20]	; (8007aa0 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007a8c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007a90:	5ccb      	ldrb	r3, [r1, r3]
 8007a92:	6810      	ldr	r0, [r2, #0]
}
 8007a94:	40d8      	lsrs	r0, r3
 8007a96:	4770      	bx	lr
 8007a98:	40021000 	.word	0x40021000
 8007a9c:	0800ec88 	.word	0x0800ec88
 8007aa0:	20000038 	.word	0x20000038

08007aa4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007aa4:	4b04      	ldr	r3, [pc, #16]	; (8007ab8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8007aa6:	4905      	ldr	r1, [pc, #20]	; (8007abc <HAL_RCC_GetPCLK2Freq+0x18>)
 8007aa8:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8007aaa:	4a05      	ldr	r2, [pc, #20]	; (8007ac0 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007aac:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007ab0:	5ccb      	ldrb	r3, [r1, r3]
 8007ab2:	6810      	ldr	r0, [r2, #0]
}
 8007ab4:	40d8      	lsrs	r0, r3
 8007ab6:	4770      	bx	lr
 8007ab8:	40021000 	.word	0x40021000
 8007abc:	0800ec88 	.word	0x0800ec88
 8007ac0:	20000038 	.word	0x20000038

08007ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007aca:	6800      	ldr	r0, [r0, #0]
{
 8007acc:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007ace:	07c5      	lsls	r5, r0, #31
 8007ad0:	d52a      	bpl.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ad2:	4b3a      	ldr	r3, [pc, #232]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8007ad4:	69da      	ldr	r2, [r3, #28]
 8007ad6:	00d1      	lsls	r1, r2, #3
 8007ad8:	d53d      	bpl.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ada:	4b39      	ldr	r3, [pc, #228]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus       pwrclkchanged = RESET;
 8007adc:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	05d2      	lsls	r2, r2, #23
 8007ae2:	d546      	bpl.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007ae4:	4935      	ldr	r1, [pc, #212]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8007ae6:	6860      	ldr	r0, [r4, #4]
 8007ae8:	6a0a      	ldr	r2, [r1, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007aea:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8007aee:	d00f      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8007af0:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d00b      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007af8:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007afa:	2600      	movs	r6, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007afc:	6a0b      	ldr	r3, [r1, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8007afe:	4a31      	ldr	r2, [pc, #196]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b04:	6017      	str	r7, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b06:	6016      	str	r6, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007b08:	6208      	str	r0, [r1, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007b0a:	07d8      	lsls	r0, r3, #31
 8007b0c:	d445      	bmi.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8007b0e:	6860      	ldr	r0, [r4, #4]
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b10:	4a2a      	ldr	r2, [pc, #168]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8007b12:	6a13      	ldr	r3, [r2, #32]
 8007b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b18:	4303      	orrs	r3, r0
 8007b1a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007b1c:	b11d      	cbz	r5, 8007b26 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b1e:	69d3      	ldr	r3, [r2, #28]
 8007b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b24:	61d3      	str	r3, [r2, #28]
 8007b26:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b28:	0783      	lsls	r3, r0, #30
 8007b2a:	d506      	bpl.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b2c:	4a23      	ldr	r2, [pc, #140]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8007b2e:	68a1      	ldr	r1, [r4, #8]
 8007b30:	6853      	ldr	r3, [r2, #4]
 8007b32:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007b36:	430b      	orrs	r3, r1
 8007b38:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007b3a:	f010 0010 	ands.w	r0, r0, #16
 8007b3e:	d007      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007b40:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b42:	4a1e      	ldr	r2, [pc, #120]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8007b44:	68e1      	ldr	r1, [r4, #12]
 8007b46:	6853      	ldr	r3, [r2, #4]
 8007b48:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007b4c:	430b      	orrs	r3, r1
 8007b4e:	6053      	str	r3, [r2, #4]
}
 8007b50:	b002      	add	sp, #8
 8007b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b56:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8007b58:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b5a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007b5e:	61da      	str	r2, [r3, #28]
 8007b60:	69db      	ldr	r3, [r3, #28]
 8007b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b66:	9301      	str	r3, [sp, #4]
 8007b68:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b6a:	4b15      	ldr	r3, [pc, #84]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	05d2      	lsls	r2, r2, #23
 8007b70:	d4b8      	bmi.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b72:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b74:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b7a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8007b7c:	f7fe f84e 	bl	8005c1c <HAL_GetTick>
 8007b80:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b82:	6833      	ldr	r3, [r6, #0]
 8007b84:	05db      	lsls	r3, r3, #23
 8007b86:	d4ad      	bmi.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b88:	f7fe f848 	bl	8005c1c <HAL_GetTick>
 8007b8c:	1bc0      	subs	r0, r0, r7
 8007b8e:	2864      	cmp	r0, #100	; 0x64
 8007b90:	d9f7      	bls.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8007b92:	2003      	movs	r0, #3
}
 8007b94:	b002      	add	sp, #8
 8007b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b9a:	460e      	mov	r6, r1
        tickstart = HAL_GetTick();
 8007b9c:	f7fe f83e 	bl	8005c1c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ba0:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8007ba4:	4680      	mov	r8, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ba6:	6a33      	ldr	r3, [r6, #32]
 8007ba8:	079a      	lsls	r2, r3, #30
 8007baa:	d4b0      	bmi.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bac:	f7fe f836 	bl	8005c1c <HAL_GetTick>
 8007bb0:	eba0 0008 	sub.w	r0, r0, r8
 8007bb4:	42b8      	cmp	r0, r7
 8007bb6:	d9f6      	bls.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007bb8:	e7eb      	b.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8007bba:	bf00      	nop
 8007bbc:	40021000 	.word	0x40021000
 8007bc0:	40007000 	.word	0x40007000
 8007bc4:	42420440 	.word	0x42420440

08007bc8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	d036      	beq.n	8007c3a <HAL_TIM_Base_Init+0x72>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bcc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8007bd0:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007bd2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007bd6:	4604      	mov	r4, r0
 8007bd8:	b30b      	cbz	r3, 8007c1e <HAL_TIM_Base_Init+0x56>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bda:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bdc:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bde:	4e20      	ldr	r6, [pc, #128]	; (8007c60 <HAL_TIM_Base_Init+0x98>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007be0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007be4:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8007be6:	6813      	ldr	r3, [r2, #0]
 8007be8:	69a5      	ldr	r5, [r4, #24]
 8007bea:	68e0      	ldr	r0, [r4, #12]
 8007bec:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bee:	d026      	beq.n	8007c3e <HAL_TIM_Base_Init+0x76>
 8007bf0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007bf4:	d018      	beq.n	8007c28 <HAL_TIM_Base_Init+0x60>
 8007bf6:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8007bfa:	42b2      	cmp	r2, r6
 8007bfc:	d014      	beq.n	8007c28 <HAL_TIM_Base_Init+0x60>
 8007bfe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007c02:	42b2      	cmp	r2, r6
 8007c04:	d010      	beq.n	8007c28 <HAL_TIM_Base_Init+0x60>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c0a:	432b      	orrs	r3, r5

  TIMx->CR1 = tmpcr1;
 8007c0c:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c0e:	62d0      	str	r0, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c10:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c12:	2301      	movs	r3, #1
  return HAL_OK;
 8007c14:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8007c16:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 8007c18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007c1c:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8007c1e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007c22:	f7fa fec3 	bl	80029ac <HAL_TIM_Base_MspInit>
 8007c26:	e7d8      	b.n	8007bda <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8007c28:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007c2e:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c30:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c36:	4333      	orrs	r3, r6
 8007c38:	e7e5      	b.n	8007c06 <HAL_TIM_Base_Init+0x3e>
    return HAL_ERROR;
 8007c3a:	2001      	movs	r0, #1
}
 8007c3c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8007c3e:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007c44:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c46:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c4c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c52:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007c54:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c56:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007c58:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007c5a:	6963      	ldr	r3, [r4, #20]
 8007c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8007c5e:	e7d8      	b.n	8007c12 <HAL_TIM_Base_Init+0x4a>
 8007c60:	40012c00 	.word	0x40012c00

08007c64 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c64:	6803      	ldr	r3, [r0, #0]
 8007c66:	68da      	ldr	r2, [r3, #12]
 8007c68:	f042 0201 	orr.w	r2, r2, #1
 8007c6c:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c6e:	689a      	ldr	r2, [r3, #8]
 8007c70:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c74:	2a06      	cmp	r2, #6
 8007c76:	d003      	beq.n	8007c80 <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	f042 0201 	orr.w	r2, r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]
}
 8007c80:	2000      	movs	r0, #0
 8007c82:	4770      	bx	lr

08007c84 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007c84:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d05a      	beq.n	8007d42 <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 8007c8c:	2202      	movs	r2, #2
{
 8007c8e:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8007c90:	2501      	movs	r5, #1
  tmpsmcr = htim->Instance->SMCR;
 8007c92:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007c94:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007c98:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8007c9a:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c9c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8007ca0:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8007ca4:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 8007ca6:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8007caa:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8007cac:	d074      	beq.n	8007d98 <HAL_TIM_ConfigClockSource+0x114>
 8007cae:	d94a      	bls.n	8007d46 <HAL_TIM_ConfigClockSource+0xc2>
 8007cb0:	2c60      	cmp	r4, #96	; 0x60
 8007cb2:	d02d      	beq.n	8007d10 <HAL_TIM_ConfigClockSource+0x8c>
 8007cb4:	d956      	bls.n	8007d64 <HAL_TIM_ConfigClockSource+0xe0>
 8007cb6:	2c70      	cmp	r4, #112	; 0x70
 8007cb8:	d01a      	beq.n	8007cf0 <HAL_TIM_ConfigClockSource+0x6c>
 8007cba:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8007cbe:	d10e      	bne.n	8007cde <HAL_TIM_ConfigClockSource+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cc0:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8007cc4:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8007cc6:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cc8:	432a      	orrs	r2, r5
 8007cca:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cce:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cd2:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cd4:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007cd6:	689a      	ldr	r2, [r3, #8]
 8007cd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cdc:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	bcf0      	pop	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_READY;
 8007ce2:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8007ce4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8007ce8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  return HAL_OK;
 8007cec:	4618      	mov	r0, r3
}
 8007cee:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cf0:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8007cf4:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8007cf6:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cf8:	432a      	orrs	r2, r5
 8007cfa:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cfe:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d02:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8007d04:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8007d06:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d08:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8007d0c:	609a      	str	r2, [r3, #8]
      break;
 8007d0e:	e7e6      	b.n	8007cde <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d10:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d12:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d14:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d18:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d1a:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d1c:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8007d1e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d20:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d28:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d2c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8007d30:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d32:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8007d34:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d36:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d3a:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8007d3e:	609a      	str	r2, [r3, #8]
 8007d40:	e7cd      	b.n	8007cde <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8007d42:	2002      	movs	r0, #2
}
 8007d44:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8007d46:	2c10      	cmp	r4, #16
 8007d48:	d004      	beq.n	8007d54 <HAL_TIM_ConfigClockSource+0xd0>
 8007d4a:	d93d      	bls.n	8007dc8 <HAL_TIM_ConfigClockSource+0x144>
 8007d4c:	2c20      	cmp	r4, #32
 8007d4e:	d001      	beq.n	8007d54 <HAL_TIM_ConfigClockSource+0xd0>
 8007d50:	2c30      	cmp	r4, #48	; 0x30
 8007d52:	d1c4      	bne.n	8007cde <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 8007d54:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d56:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d5a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d5e:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 8007d60:	609c      	str	r4, [r3, #8]
 8007d62:	e7bc      	b.n	8007cde <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8007d64:	2c50      	cmp	r4, #80	; 0x50
 8007d66:	d1ba      	bne.n	8007cde <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8007d68:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d6a:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d6c:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d6e:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d72:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d74:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d76:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d78:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d7c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d80:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8007d84:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8007d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d88:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8007d8a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d8c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d90:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8007d94:	609a      	str	r2, [r3, #8]
 8007d96:	e7a2      	b.n	8007cde <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8007d98:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d9a:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d9c:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d9e:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007da2:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007da4:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007da6:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007da8:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007db0:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8007db4:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8007db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007db8:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8007dba:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dbc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007dc0:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8007dc4:	609a      	str	r2, [r3, #8]
 8007dc6:	e78a      	b.n	8007cde <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8007dc8:	2c00      	cmp	r4, #0
 8007dca:	d0c3      	beq.n	8007d54 <HAL_TIM_ConfigClockSource+0xd0>
 8007dcc:	e787      	b.n	8007cde <HAL_TIM_ConfigClockSource+0x5a>
 8007dce:	bf00      	nop

08007dd0 <HAL_TIM_PeriodElapsedCallback>:
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop

08007dd4 <HAL_TIM_OC_DelayElapsedCallback>:
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop

08007dd8 <HAL_TIM_IC_CaptureCallback>:
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop

08007ddc <HAL_TIM_PWM_PulseFinishedCallback>:
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop

08007de0 <HAL_TIM_TriggerCallback>:
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop

08007de4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007de4:	6803      	ldr	r3, [r0, #0]
{
 8007de6:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007de8:	691a      	ldr	r2, [r3, #16]
{
 8007dea:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007dec:	0791      	lsls	r1, r2, #30
 8007dee:	d502      	bpl.n	8007df6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	0792      	lsls	r2, r2, #30
 8007df4:	d45f      	bmi.n	8007eb6 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007df6:	691a      	ldr	r2, [r3, #16]
 8007df8:	0750      	lsls	r0, r2, #29
 8007dfa:	d502      	bpl.n	8007e02 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007dfc:	68da      	ldr	r2, [r3, #12]
 8007dfe:	0751      	lsls	r1, r2, #29
 8007e00:	d446      	bmi.n	8007e90 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e02:	691a      	ldr	r2, [r3, #16]
 8007e04:	0712      	lsls	r2, r2, #28
 8007e06:	d502      	bpl.n	8007e0e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e08:	68da      	ldr	r2, [r3, #12]
 8007e0a:	0710      	lsls	r0, r2, #28
 8007e0c:	d42e      	bmi.n	8007e6c <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e0e:	691a      	ldr	r2, [r3, #16]
 8007e10:	06d2      	lsls	r2, r2, #27
 8007e12:	d502      	bpl.n	8007e1a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e14:	68da      	ldr	r2, [r3, #12]
 8007e16:	06d0      	lsls	r0, r2, #27
 8007e18:	d418      	bmi.n	8007e4c <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e1a:	691a      	ldr	r2, [r3, #16]
 8007e1c:	07d1      	lsls	r1, r2, #31
 8007e1e:	d502      	bpl.n	8007e26 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e20:	68da      	ldr	r2, [r3, #12]
 8007e22:	07d2      	lsls	r2, r2, #31
 8007e24:	d45d      	bmi.n	8007ee2 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e26:	691a      	ldr	r2, [r3, #16]
 8007e28:	0610      	lsls	r0, r2, #24
 8007e2a:	d502      	bpl.n	8007e32 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e2c:	68da      	ldr	r2, [r3, #12]
 8007e2e:	0611      	lsls	r1, r2, #24
 8007e30:	d45f      	bmi.n	8007ef2 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e32:	691a      	ldr	r2, [r3, #16]
 8007e34:	0652      	lsls	r2, r2, #25
 8007e36:	d502      	bpl.n	8007e3e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e38:	68da      	ldr	r2, [r3, #12]
 8007e3a:	0650      	lsls	r0, r2, #25
 8007e3c:	d461      	bmi.n	8007f02 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e3e:	691a      	ldr	r2, [r3, #16]
 8007e40:	0691      	lsls	r1, r2, #26
 8007e42:	d502      	bpl.n	8007e4a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e44:	68da      	ldr	r2, [r3, #12]
 8007e46:	0692      	lsls	r2, r2, #26
 8007e48:	d443      	bmi.n	8007ed2 <HAL_TIM_IRQHandler+0xee>
}
 8007e4a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e4c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e50:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e52:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e54:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8007e56:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e58:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e5c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e5e:	d064      	beq.n	8007f2a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8007e60:	f7ff ffba 	bl	8007dd8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e64:	2200      	movs	r2, #0
 8007e66:	6823      	ldr	r3, [r4, #0]
 8007e68:	7722      	strb	r2, [r4, #28]
 8007e6a:	e7d6      	b.n	8007e1a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e6c:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e70:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e72:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e74:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8007e76:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e78:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e7a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e7c:	d152      	bne.n	8007f24 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e7e:	f7ff ffa9 	bl	8007dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e82:	4620      	mov	r0, r4
 8007e84:	f7ff ffaa 	bl	8007ddc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e88:	2200      	movs	r2, #0
 8007e8a:	6823      	ldr	r3, [r4, #0]
 8007e8c:	7722      	strb	r2, [r4, #28]
 8007e8e:	e7be      	b.n	8007e0e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e90:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e94:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e96:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e98:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8007e9a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e9c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ea0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ea2:	d13c      	bne.n	8007f1e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ea4:	f7ff ff96 	bl	8007dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f7ff ff97 	bl	8007ddc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eae:	2200      	movs	r2, #0
 8007eb0:	6823      	ldr	r3, [r4, #0]
 8007eb2:	7722      	strb	r2, [r4, #28]
 8007eb4:	e7a5      	b.n	8007e02 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007eb6:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007eba:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ebc:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ebe:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ec0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ec2:	079b      	lsls	r3, r3, #30
 8007ec4:	d025      	beq.n	8007f12 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8007ec6:	f7ff ff87 	bl	8007dd8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eca:	2200      	movs	r2, #0
 8007ecc:	6823      	ldr	r3, [r4, #0]
 8007ece:	7722      	strb	r2, [r4, #28]
 8007ed0:	e791      	b.n	8007df6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ed2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8007ed6:	4620      	mov	r0, r4
}
 8007ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007edc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007ede:	f000 b84d 	b.w	8007f7c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ee2:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ee6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ee8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007eea:	f7ff ff71 	bl	8007dd0 <HAL_TIM_PeriodElapsedCallback>
 8007eee:	6823      	ldr	r3, [r4, #0]
 8007ef0:	e799      	b.n	8007e26 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ef2:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8007ef6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ef8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007efa:	f000 f841 	bl	8007f80 <HAL_TIMEx_BreakCallback>
 8007efe:	6823      	ldr	r3, [r4, #0]
 8007f00:	e797      	b.n	8007e32 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f02:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8007f06:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f08:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007f0a:	f7ff ff69 	bl	8007de0 <HAL_TIM_TriggerCallback>
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	e795      	b.n	8007e3e <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f12:	f7ff ff5f 	bl	8007dd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f16:	4620      	mov	r0, r4
 8007f18:	f7ff ff60 	bl	8007ddc <HAL_TIM_PWM_PulseFinishedCallback>
 8007f1c:	e7d5      	b.n	8007eca <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8007f1e:	f7ff ff5b 	bl	8007dd8 <HAL_TIM_IC_CaptureCallback>
 8007f22:	e7c4      	b.n	8007eae <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8007f24:	f7ff ff58 	bl	8007dd8 <HAL_TIM_IC_CaptureCallback>
 8007f28:	e7ae      	b.n	8007e88 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f2a:	f7ff ff53 	bl	8007dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f7ff ff54 	bl	8007ddc <HAL_TIM_PWM_PulseFinishedCallback>
 8007f34:	e796      	b.n	8007e64 <HAL_TIM_IRQHandler+0x80>
 8007f36:	bf00      	nop

08007f38 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f38:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8007f3c:	2a01      	cmp	r2, #1
 8007f3e:	d01a      	beq.n	8007f76 <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f40:	2202      	movs	r2, #2
{
 8007f42:	b4f0      	push	{r4, r5, r6, r7}
 8007f44:	4603      	mov	r3, r0
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8007f46:	2500      	movs	r5, #0
  htim->State = HAL_TIM_STATE_READY;
 8007f48:	2601      	movs	r6, #1
  tmpcr2 = htim->Instance->CR2;
 8007f4a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007f4c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8007f50:	6860      	ldr	r0, [r4, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f52:	e9d1 2700 	ldrd	r2, r7, [r1]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f56:	f020 0170 	bic.w	r1, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f5a:	4311      	orrs	r1, r2
  tmpsmcr = htim->Instance->SMCR;
 8007f5c:	68a2      	ldr	r2, [r4, #8]

  return HAL_OK;
 8007f5e:	4628      	mov	r0, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007f60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f64:	433a      	orrs	r2, r7
  htim->Instance->CR2 = tmpcr2;
 8007f66:	6061      	str	r1, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8007f68:	60a2      	str	r2, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8007f6a:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007f6e:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
}
 8007f72:	bcf0      	pop	{r4, r5, r6, r7}
 8007f74:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007f76:	2002      	movs	r0, #2
}
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop

08007f7c <HAL_TIMEx_CommutCallback>:
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop

08007f80 <HAL_TIMEx_BreakCallback>:
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop

08007f84 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d05e      	beq.n	8008046 <HAL_UART_Init+0xc2>
{
 8007f88:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f8a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8007f8e:	4604      	mov	r4, r0
 8007f90:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d051      	beq.n	800803c <HAL_UART_Init+0xb8>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f98:	2224      	movs	r2, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f9a:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007f9c:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8007fa0:	68da      	ldr	r2, [r3, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fa2:	68e0      	ldr	r0, [r4, #12]
  __HAL_UART_DISABLE(huart);
 8007fa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fa8:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007faa:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007fac:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fae:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8007fb2:	4301      	orrs	r1, r0
 8007fb4:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8007fb6:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007fb8:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 8007fbc:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007fc0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8007fc2:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007fc6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8007fc8:	430a      	orrs	r2, r1
 8007fca:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007fcc:	695a      	ldr	r2, [r3, #20]
 8007fce:	69a0      	ldr	r0, [r4, #24]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8007fd0:	491f      	ldr	r1, [pc, #124]	; (8008050 <HAL_UART_Init+0xcc>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007fd2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007fd6:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 8007fd8:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007fda:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8007fdc:	d035      	beq.n	800804a <HAL_UART_Init+0xc6>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007fde:	f7ff fd51 	bl	8007a84 <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007fe2:	6862      	ldr	r2, [r4, #4]
 8007fe4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007fe8:	0092      	lsls	r2, r2, #2
 8007fea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007fee:	fbb0 f0f2 	udiv	r0, r0, r2
 8007ff2:	2264      	movs	r2, #100	; 0x64
 8007ff4:	4d17      	ldr	r5, [pc, #92]	; (8008054 <HAL_UART_Init+0xd0>)
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	fba5 c100 	umull	ip, r1, r5, r0
 8007ffc:	0949      	lsrs	r1, r1, #5
 8007ffe:	fb02 0211 	mls	r2, r2, r1, r0
 8008002:	0112      	lsls	r2, r2, #4
 8008004:	3232      	adds	r2, #50	; 0x32
 8008006:	fba5 0202 	umull	r0, r2, r5, r2
 800800a:	0109      	lsls	r1, r1, #4
 800800c:	eb01 1252 	add.w	r2, r1, r2, lsr #5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008010:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8008012:	2120      	movs	r1, #32
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008014:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008016:	691a      	ldr	r2, [r3, #16]
  return HAL_OK;
 8008018:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800801a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800801e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008020:	695a      	ldr	r2, [r3, #20]
 8008022:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008026:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8008028:	68da      	ldr	r2, [r3, #12]
 800802a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800802e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008030:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008032:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008036:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 800803a:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 800803c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8008040:	f7fa fcee 	bl	8002a20 <HAL_UART_MspInit>
 8008044:	e7a8      	b.n	8007f98 <HAL_UART_Init+0x14>
    return HAL_ERROR;
 8008046:	2001      	movs	r0, #1
}
 8008048:	4770      	bx	lr
    pclk = HAL_RCC_GetPCLK2Freq();
 800804a:	f7ff fd2b 	bl	8007aa4 <HAL_RCC_GetPCLK2Freq>
 800804e:	e7c8      	b.n	8007fe2 <HAL_UART_Init+0x5e>
 8008050:	40013800 	.word	0x40013800
 8008054:	51eb851f 	.word	0x51eb851f

08008058 <HAL_UART_Receive_DMA>:
{
 8008058:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800805a:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
{
 800805e:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 8008060:	2c20      	cmp	r4, #32
 8008062:	d138      	bne.n	80080d6 <HAL_UART_Receive_DMA+0x7e>
    if ((pData == NULL) || (Size == 0U))
 8008064:	2900      	cmp	r1, #0
 8008066:	d039      	beq.n	80080dc <HAL_UART_Receive_DMA+0x84>
 8008068:	2a00      	cmp	r2, #0
 800806a:	d037      	beq.n	80080dc <HAL_UART_Receive_DMA+0x84>
    __HAL_LOCK(huart);
 800806c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8008070:	2b01      	cmp	r3, #1
 8008072:	d030      	beq.n	80080d6 <HAL_UART_Receive_DMA+0x7e>
 8008074:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008076:	2500      	movs	r5, #0
 8008078:	4613      	mov	r3, r2
    __HAL_LOCK(huart);
 800807a:	2601      	movs	r6, #1
 800807c:	460a      	mov	r2, r1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800807e:	2122      	movs	r1, #34	; 0x22
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008080:	6b40      	ldr	r0, [r0, #52]	; 0x34
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008082:	63e5      	str	r5, [r4, #60]	; 0x3c
    __HAL_LOCK(huart);
 8008084:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008088:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800808c:	4e15      	ldr	r6, [pc, #84]	; (80080e4 <HAL_UART_Receive_DMA+0x8c>)
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800808e:	4916      	ldr	r1, [pc, #88]	; (80080e8 <HAL_UART_Receive_DMA+0x90>)
    huart->pRxBuffPtr = pData;
 8008090:	62a2      	str	r2, [r4, #40]	; 0x28
    huart->RxXferSize = Size;
 8008092:	85a3      	strh	r3, [r4, #44]	; 0x2c
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008094:	6286      	str	r6, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008096:	62c1      	str	r1, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008098:	4e14      	ldr	r6, [pc, #80]	; (80080ec <HAL_UART_Receive_DMA+0x94>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800809a:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferAbortCallback = NULL;
 800809c:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800809e:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80080a0:	3104      	adds	r1, #4
 80080a2:	f7fd fe75 	bl	8005d90 <HAL_DMA_Start_IT>
    return HAL_OK;
 80080a6:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_OREFLAG(huart);
 80080a8:	6823      	ldr	r3, [r4, #0]
 80080aa:	9501      	str	r5, [sp, #4]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	9201      	str	r2, [sp, #4]
 80080b0:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 80080b2:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 80080b6:	9201      	str	r2, [sp, #4]
 80080b8:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080ba:	68da      	ldr	r2, [r3, #12]
 80080bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080c0:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080c2:	695a      	ldr	r2, [r3, #20]
 80080c4:	f042 0201 	orr.w	r2, r2, #1
 80080c8:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ca:	695a      	ldr	r2, [r3, #20]
 80080cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080d0:	615a      	str	r2, [r3, #20]
}
 80080d2:	b002      	add	sp, #8
 80080d4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80080d6:	2002      	movs	r0, #2
}
 80080d8:	b002      	add	sp, #8
 80080da:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80080dc:	2001      	movs	r0, #1
}
 80080de:	b002      	add	sp, #8
 80080e0:	bd70      	pop	{r4, r5, r6, pc}
 80080e2:	bf00      	nop
 80080e4:	080080f5 	.word	0x080080f5
 80080e8:	08008131 	.word	0x08008131
 80080ec:	08008141 	.word	0x08008141

080080f0 <HAL_UART_RxCpltCallback>:
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop

080080f4 <UART_DMAReceiveCplt>:
{
 80080f4:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80080f6:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f013 0320 	ands.w	r3, r3, #32
 8008100:	d110      	bne.n	8008124 <UART_DMAReceiveCplt+0x30>
    huart->RxState = HAL_UART_STATE_READY;
 8008102:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008104:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 8008106:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008108:	68d3      	ldr	r3, [r2, #12]
 800810a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800810e:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008110:	6953      	ldr	r3, [r2, #20]
 8008112:	f023 0301 	bic.w	r3, r3, #1
 8008116:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008118:	6953      	ldr	r3, [r2, #20]
 800811a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800811e:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8008120:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8008124:	f7ff ffe4 	bl	80080f0 <HAL_UART_RxCpltCallback>
}
 8008128:	bd08      	pop	{r3, pc}
 800812a:	bf00      	nop

0800812c <HAL_UART_RxHalfCpltCallback>:
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop

08008130 <UART_DMARxHalfCplt>:
{
 8008130:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8008132:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008134:	f7ff fffa 	bl	800812c <HAL_UART_RxHalfCpltCallback>
}
 8008138:	bd08      	pop	{r3, pc}
 800813a:	bf00      	nop

0800813c <HAL_UART_ErrorCallback>:
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop

08008140 <UART_DMAError>:
{
 8008140:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008142:	6a43      	ldr	r3, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	6950      	ldr	r0, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008148:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
 800814c:	2921      	cmp	r1, #33	; 0x21
 800814e:	d01c      	beq.n	800818a <UART_DMAError+0x4a>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008150:	6950      	ldr	r0, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008152:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 8008156:	2922      	cmp	r1, #34	; 0x22
 8008158:	d007      	beq.n	800816a <UART_DMAError+0x2a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800815a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800815c:	4618      	mov	r0, r3
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800815e:	f042 0210 	orr.w	r2, r2, #16
 8008162:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8008164:	f7ff ffea 	bl	800813c <HAL_UART_ErrorCallback>
}
 8008168:	bd08      	pop	{r3, pc}
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800816a:	0641      	lsls	r1, r0, #25
 800816c:	d5f5      	bpl.n	800815a <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 800816e:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008170:	2020      	movs	r0, #32
    huart->RxXferCount = 0x00U;
 8008172:	85d9      	strh	r1, [r3, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008174:	68d1      	ldr	r1, [r2, #12]
 8008176:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 800817a:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800817c:	6951      	ldr	r1, [r2, #20]
 800817e:	f021 0101 	bic.w	r1, r1, #1
 8008182:	6151      	str	r1, [r2, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8008184:	f883 003a 	strb.w	r0, [r3, #58]	; 0x3a
 8008188:	e7e7      	b.n	800815a <UART_DMAError+0x1a>
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800818a:	0600      	lsls	r0, r0, #24
 800818c:	d5e0      	bpl.n	8008150 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 800818e:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8008190:	2020      	movs	r0, #32
    huart->TxXferCount = 0x00U;
 8008192:	84d9      	strh	r1, [r3, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008194:	68d1      	ldr	r1, [r2, #12]
 8008196:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800819a:	60d1      	str	r1, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 800819c:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
 80081a0:	e7d6      	b.n	8008150 <UART_DMAError+0x10>
 80081a2:	bf00      	nop

080081a4 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80081a4:	b084      	sub	sp, #16
 80081a6:	a801      	add	r0, sp, #4
 80081a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80081ac:	b004      	add	sp, #16
 80081ae:	2000      	movs	r0, #0
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop

080081b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80081b4:	4602      	mov	r2, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80081b6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80081ba:	2000      	movs	r0, #0
  USBx->CNTR |= winterruptmask;
 80081bc:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80081c0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
}
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop

080081c8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80081c8:	f244 03ff 	movw	r3, #16639	; 0x40ff
{
 80081cc:	4602      	mov	r2, r0
  USBx->CNTR &= ~winterruptmask;
 80081ce:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40

  return HAL_OK;
}
 80081d2:	2000      	movs	r0, #0
  USBx->CNTR &= ~winterruptmask;
 80081d4:	400b      	ands	r3, r1
 80081d6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
}
 80081da:	4770      	bx	lr

080081dc <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80081dc:	2000      	movs	r0, #0
 80081de:	4770      	bx	lr

080081e0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80081e0:	b084      	sub	sp, #16
 80081e2:	b470      	push	{r4, r5, r6}
 80081e4:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80081e6:	2501      	movs	r5, #1

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80081e8:	2000      	movs	r0, #0
  USBx->CNTR = USB_CNTR_FRES;
 80081ea:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
  USBx->CNTR = 0;
 80081ee:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80081f2:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80081f6:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 80081fa:	f8b4 6040 	ldrh.w	r6, [r4, #64]	; 0x40
{
 80081fe:	ad04      	add	r5, sp, #16
  USBx->CNTR |= winterruptmask;
 8008200:	f446 463f 	orr.w	r6, r6, #48896	; 0xbf00
 8008204:	f8a4 6040 	strh.w	r6, [r4, #64]	; 0x40
{
 8008208:	e885 000e 	stmia.w	r5, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 800820c:	bc70      	pop	{r4, r5, r6}
 800820e:	b004      	add	sp, #16
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop

08008214 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008214:	b470      	push	{r4, r5, r6}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008216:	780d      	ldrb	r5, [r1, #0]
{
 8008218:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800821a:	f830 4025 	ldrh.w	r4, [r0, r5, lsl #2]
 800821e:	4abc      	ldr	r2, [pc, #752]	; (8008510 <USB_ActivateEndpoint+0x2fc>)

  /* initialize Endpoint */
  switch (ep->type)
 8008220:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008222:	4022      	ands	r2, r4
  switch (ep->type)
 8008224:	2803      	cmp	r0, #3
 8008226:	f200 8142 	bhi.w	80084ae <USB_ActivateEndpoint+0x29a>
 800822a:	e8df f000 	tbb	[pc, r0]
 800822e:	464e      	.short	0x464e
 8008230:	4a02      	.short	0x4a02
  HAL_StatusTypeDef ret = HAL_OK;
 8008232:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8008234:	f248 0480 	movw	r4, #32896	; 0x8080
 8008238:	4322      	orrs	r2, r4
 800823a:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800823e:	780d      	ldrb	r5, [r1, #0]
 8008240:	4eb4      	ldr	r6, [pc, #720]	; (8008514 <USB_ActivateEndpoint+0x300>)
 8008242:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8008246:	432c      	orrs	r4, r5
 8008248:	4032      	ands	r2, r6
 800824a:	4322      	orrs	r2, r4
 800824c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  if (ep->doublebuffer == 0U)
 8008250:	7b0a      	ldrb	r2, [r1, #12]
 8008252:	2a00      	cmp	r2, #0
 8008254:	d13d      	bne.n	80082d2 <USB_ActivateEndpoint+0xbe>
 8008256:	88cc      	ldrh	r4, [r1, #6]
 8008258:	780a      	ldrb	r2, [r1, #0]
  {
    if (ep->is_in != 0U)
 800825a:	784d      	ldrb	r5, [r1, #1]
 800825c:	0864      	lsrs	r4, r4, #1
 800825e:	0064      	lsls	r4, r4, #1
 8008260:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8008264:	2d00      	cmp	r5, #0
 8008266:	f000 80e8 	beq.w	800843a <USB_ActivateEndpoint+0x226>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800826a:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800826e:	442a      	add	r2, r5
 8008270:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008274:	780a      	ldrb	r2, [r1, #0]
 8008276:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 800827a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800827e:	066d      	lsls	r5, r5, #25
 8008280:	d50b      	bpl.n	800829a <USB_ActivateEndpoint+0x86>
 8008282:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8008286:	4026      	ands	r6, r4
 8008288:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
 800828c:	f046 06c0 	orr.w	r6, r6, #192	; 0xc0
 8008290:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8008294:	780c      	ldrb	r4, [r1, #0]
 8008296:	eb03 0484 	add.w	r4, r3, r4, lsl #2

      if (ep->type != EP_TYPE_ISOC)
 800829a:	78cb      	ldrb	r3, [r1, #3]
 800829c:	2b01      	cmp	r3, #1
 800829e:	f000 8120 	beq.w	80084e2 <USB_ActivateEndpoint+0x2ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80082a2:	8822      	ldrh	r2, [r4, #0]
 80082a4:	4b9c      	ldr	r3, [pc, #624]	; (8008518 <USB_ActivateEndpoint+0x304>)
 80082a6:	4013      	ands	r3, r2
 80082a8:	f083 0320 	eor.w	r3, r3, #32
 80082ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082b4:	8023      	strh	r3, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 80082b6:	bc70      	pop	{r4, r5, r6}
 80082b8:	4770      	bx	lr
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80082ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 80082be:	2000      	movs	r0, #0
      break;
 80082c0:	e7b8      	b.n	8008234 <USB_ActivateEndpoint+0x20>
      wEpRegVal |= USB_EP_INTERRUPT;
 80082c2:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80082c6:	2000      	movs	r0, #0
      break;
 80082c8:	e7b4      	b.n	8008234 <USB_ActivateEndpoint+0x20>
      wEpRegVal |= USB_EP_CONTROL;
 80082ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 80082ce:	2000      	movs	r0, #0
      break;
 80082d0:	e7b0      	b.n	8008234 <USB_ActivateEndpoint+0x20>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80082d2:	780c      	ldrb	r4, [r1, #0]
 80082d4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80082d8:	4032      	ands	r2, r6
 80082da:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80082de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80082e2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80082e6:	780a      	ldrb	r2, [r1, #0]
 80082e8:	890c      	ldrh	r4, [r1, #8]
 80082ea:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 80082ee:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80082f2:	0864      	lsrs	r4, r4, #1
 80082f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80082f8:	0064      	lsls	r4, r4, #1
 80082fa:	b2ad      	uxth	r5, r5
 80082fc:	5354      	strh	r4, [r2, r5]
 80082fe:	780a      	ldrb	r2, [r1, #0]
 8008300:	894c      	ldrh	r4, [r1, #10]
 8008302:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8008306:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800830a:	0864      	lsrs	r4, r4, #1
 800830c:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8008310:	0064      	lsls	r4, r4, #1
 8008312:	b2ad      	uxth	r5, r5
 8008314:	5354      	strh	r4, [r2, r5]
    if (ep->is_in == 0U)
 8008316:	784a      	ldrb	r2, [r1, #1]
 8008318:	2a00      	cmp	r2, #0
 800831a:	d142      	bne.n	80083a2 <USB_ActivateEndpoint+0x18e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800831c:	780a      	ldrb	r2, [r1, #0]
 800831e:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8008322:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008326:	046d      	lsls	r5, r5, #17
 8008328:	d50b      	bpl.n	8008342 <USB_ActivateEndpoint+0x12e>
 800832a:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800832e:	4026      	ands	r6, r4
 8008330:	f446 4640 	orr.w	r6, r6, #49152	; 0xc000
 8008334:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8008338:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 800833c:	780c      	ldrb	r4, [r1, #0]
 800833e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008342:	8822      	ldrh	r2, [r4, #0]
 8008344:	0656      	lsls	r6, r2, #25
 8008346:	d50c      	bpl.n	8008362 <USB_ActivateEndpoint+0x14e>
 8008348:	8822      	ldrh	r2, [r4, #0]
 800834a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800834e:	0512      	lsls	r2, r2, #20
 8008350:	0d12      	lsrs	r2, r2, #20
 8008352:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008356:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800835a:	8022      	strh	r2, [r4, #0]
 800835c:	780c      	ldrb	r4, [r1, #0]
 800835e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008362:	f248 0680 	movw	r6, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8008366:	8822      	ldrh	r2, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008368:	4d6c      	ldr	r5, [pc, #432]	; (800851c <USB_ActivateEndpoint+0x308>)
      PCD_TX_DTOG(USBx, ep->num);
 800836a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800836e:	0512      	lsls	r2, r2, #20
 8008370:	0d12      	lsrs	r2, r2, #20
 8008372:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008376:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800837a:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800837c:	780c      	ldrb	r4, [r1, #0]
 800837e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008382:	402a      	ands	r2, r5
 8008384:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8008388:	4332      	orrs	r2, r6
 800838a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800838e:	7809      	ldrb	r1, [r1, #0]
 8008390:	4a61      	ldr	r2, [pc, #388]	; (8008518 <USB_ActivateEndpoint+0x304>)
 8008392:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
 8008396:	4022      	ands	r2, r4
 8008398:	4332      	orrs	r2, r6
 800839a:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
}
 800839e:	bc70      	pop	{r4, r5, r6}
 80083a0:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083a2:	780a      	ldrb	r2, [r1, #0]
 80083a4:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 80083a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80083ac:	046d      	lsls	r5, r5, #17
 80083ae:	d50b      	bpl.n	80083c8 <USB_ActivateEndpoint+0x1b4>
 80083b0:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80083b4:	4026      	ands	r6, r4
 80083b6:	f446 4640 	orr.w	r6, r6, #49152	; 0xc000
 80083ba:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 80083be:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 80083c2:	780c      	ldrb	r4, [r1, #0]
 80083c4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083c8:	8822      	ldrh	r2, [r4, #0]
 80083ca:	0652      	lsls	r2, r2, #25
 80083cc:	d50c      	bpl.n	80083e8 <USB_ActivateEndpoint+0x1d4>
 80083ce:	8822      	ldrh	r2, [r4, #0]
 80083d0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80083d4:	0512      	lsls	r2, r2, #20
 80083d6:	0d12      	lsrs	r2, r2, #20
 80083d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083dc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80083e0:	8022      	strh	r2, [r4, #0]
 80083e2:	780c      	ldrb	r4, [r1, #0]
 80083e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_RX_DTOG(USBx, ep->num);
 80083e8:	8822      	ldrh	r2, [r4, #0]
 80083ea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80083ee:	0512      	lsls	r2, r2, #20
 80083f0:	0d12      	lsrs	r2, r2, #20
 80083f2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80083f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083fa:	8022      	strh	r2, [r4, #0]
      if (ep->type != EP_TYPE_ISOC)
 80083fc:	78ca      	ldrb	r2, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80083fe:	780c      	ldrb	r4, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 8008400:	2a01      	cmp	r2, #1
 8008402:	d061      	beq.n	80084c8 <USB_ActivateEndpoint+0x2b4>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008404:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8008408:	4a43      	ldr	r2, [pc, #268]	; (8008518 <USB_ActivateEndpoint+0x304>)
 800840a:	402a      	ands	r2, r5
 800840c:	f082 0220 	eor.w	r2, r2, #32
 8008410:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008414:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008418:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800841c:	7809      	ldrb	r1, [r1, #0]
}
 800841e:	bc70      	pop	{r4, r5, r6}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008420:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8008424:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008428:	0492      	lsls	r2, r2, #18
 800842a:	0c92      	lsrs	r2, r2, #18
 800842c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008430:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008434:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
}
 8008438:	4770      	bx	lr
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800843a:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800843e:	690d      	ldr	r5, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008440:	4432      	add	r2, r6
 8008442:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008446:	780a      	ldrb	r2, [r1, #0]
 8008448:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800844c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8008450:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8008454:	b2a4      	uxth	r4, r4
 8008456:	b365      	cbz	r5, 80084b2 <USB_ActivateEndpoint+0x29e>
 8008458:	2d3e      	cmp	r5, #62	; 0x3e
 800845a:	d84d      	bhi.n	80084f8 <USB_ActivateEndpoint+0x2e4>
 800845c:	086e      	lsrs	r6, r5, #1
 800845e:	07ed      	lsls	r5, r5, #31
 8008460:	bf48      	it	mi
 8008462:	3601      	addmi	r6, #1
 8008464:	02b6      	lsls	r6, r6, #10
 8008466:	b2b6      	uxth	r6, r6
 8008468:	5316      	strh	r6, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800846a:	780c      	ldrb	r4, [r1, #0]
 800846c:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8008470:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8008474:	046e      	lsls	r6, r5, #17
 8008476:	d50e      	bpl.n	8008496 <USB_ActivateEndpoint+0x282>
 8008478:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800847c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008480:	0512      	lsls	r2, r2, #20
 8008482:	0d12      	lsrs	r2, r2, #20
 8008484:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008488:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800848c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8008490:	780a      	ldrb	r2, [r1, #0]
 8008492:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008496:	8811      	ldrh	r1, [r2, #0]
 8008498:	4b20      	ldr	r3, [pc, #128]	; (800851c <USB_ActivateEndpoint+0x308>)
}
 800849a:	bc70      	pop	{r4, r5, r6}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800849c:	400b      	ands	r3, r1
 800849e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80084a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084aa:	8013      	strh	r3, [r2, #0]
}
 80084ac:	4770      	bx	lr
      ret = HAL_ERROR;
 80084ae:	2001      	movs	r0, #1
 80084b0:	e6c0      	b.n	8008234 <USB_ActivateEndpoint+0x20>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80084b2:	5b15      	ldrh	r5, [r2, r4]
 80084b4:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 80084b8:	042d      	lsls	r5, r5, #16
 80084ba:	0c2d      	lsrs	r5, r5, #16
 80084bc:	5315      	strh	r5, [r2, r4]
 80084be:	5b15      	ldrh	r5, [r2, r4]
 80084c0:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 80084c4:	5315      	strh	r5, [r2, r4]
 80084c6:	e7d0      	b.n	800846a <USB_ActivateEndpoint+0x256>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80084c8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80084cc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80084d0:	0512      	lsls	r2, r2, #20
 80084d2:	0d12      	lsrs	r2, r2, #20
 80084d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80084dc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 80084e0:	e79c      	b.n	800841c <USB_ActivateEndpoint+0x208>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80084e2:	8823      	ldrh	r3, [r4, #0]
 80084e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80084e8:	051b      	lsls	r3, r3, #20
 80084ea:	0d1b      	lsrs	r3, r3, #20
 80084ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084f4:	8023      	strh	r3, [r4, #0]
 80084f6:	e752      	b.n	800839e <USB_ActivateEndpoint+0x18a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80084f8:	096e      	lsrs	r6, r5, #5
 80084fa:	06ed      	lsls	r5, r5, #27
 80084fc:	4d08      	ldr	r5, [pc, #32]	; (8008520 <USB_ActivateEndpoint+0x30c>)
 80084fe:	bf08      	it	eq
 8008500:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8008504:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 8008508:	b2ad      	uxth	r5, r5
 800850a:	5315      	strh	r5, [r2, r4]
 800850c:	e7ad      	b.n	800846a <USB_ActivateEndpoint+0x256>
 800850e:	bf00      	nop
 8008510:	ffff898f 	.word	0xffff898f
 8008514:	ffff8f8f 	.word	0xffff8f8f
 8008518:	ffff8fbf 	.word	0xffff8fbf
 800851c:	ffffbf8f 	.word	0xffffbf8f
 8008520:	ffff8000 	.word	0xffff8000

08008524 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008524:	b430      	push	{r4, r5}
 8008526:	780a      	ldrb	r2, [r1, #0]
  if (ep->doublebuffer == 0U)
 8008528:	7b0d      	ldrb	r5, [r1, #12]
 800852a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 800852e:	784c      	ldrb	r4, [r1, #1]
 8008530:	bb15      	cbnz	r5, 8008578 <USB_DeactivateEndpoint+0x54>
  {
    if (ep->is_in != 0U)
 8008532:	2c00      	cmp	r4, #0
 8008534:	f000 8099 	beq.w	800866a <USB_DeactivateEndpoint+0x146>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008538:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 800853c:	0664      	lsls	r4, r4, #25
 800853e:	d50e      	bpl.n	800855e <USB_DeactivateEndpoint+0x3a>
 8008540:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008544:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008548:	051b      	lsls	r3, r3, #20
 800854a:	0d1b      	lsrs	r3, r3, #20
 800854c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008550:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008554:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8008558:	780b      	ldrb	r3, [r1, #0]
 800855a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800855e:	881a      	ldrh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8008560:	2000      	movs	r0, #0
 8008562:	bc30      	pop	{r4, r5}
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008564:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008568:	0512      	lsls	r2, r2, #20
 800856a:	0d12      	lsrs	r2, r2, #20
 800856c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008570:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008574:	801a      	strh	r2, [r3, #0]
}
 8008576:	4770      	bx	lr
    if (ep->is_in == 0U)
 8008578:	2c00      	cmp	r4, #0
 800857a:	d141      	bne.n	8008600 <USB_DeactivateEndpoint+0xdc>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800857c:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 8008580:	0464      	lsls	r4, r4, #17
 8008582:	d50e      	bpl.n	80085a2 <USB_DeactivateEndpoint+0x7e>
 8008584:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008588:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800858c:	051b      	lsls	r3, r3, #20
 800858e:	0d1b      	lsrs	r3, r3, #20
 8008590:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008598:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800859c:	780b      	ldrb	r3, [r1, #0]
 800859e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085a2:	881a      	ldrh	r2, [r3, #0]
 80085a4:	0655      	lsls	r5, r2, #25
 80085a6:	d50c      	bpl.n	80085c2 <USB_DeactivateEndpoint+0x9e>
 80085a8:	881a      	ldrh	r2, [r3, #0]
 80085aa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80085ae:	0512      	lsls	r2, r2, #20
 80085b0:	0d12      	lsrs	r2, r2, #20
 80085b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085b6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80085ba:	801a      	strh	r2, [r3, #0]
 80085bc:	780b      	ldrb	r3, [r1, #0]
 80085be:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085c2:	f248 0580 	movw	r5, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 80085c6:	881a      	ldrh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085c8:	4c3f      	ldr	r4, [pc, #252]	; (80086c8 <USB_DeactivateEndpoint+0x1a4>)
      PCD_TX_DTOG(USBx, ep->num);
 80085ca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80085ce:	0512      	lsls	r2, r2, #20
 80085d0:	0d12      	lsrs	r2, r2, #20
 80085d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085d6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80085da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085dc:	780a      	ldrb	r2, [r1, #0]
 80085de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80085e2:	4023      	ands	r3, r4
 80085e4:	432b      	orrs	r3, r5
 80085e6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80085ea:	780a      	ldrb	r2, [r1, #0]
 80085ec:	4b37      	ldr	r3, [pc, #220]	; (80086cc <USB_DeactivateEndpoint+0x1a8>)
 80085ee:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 80085f2:	400b      	ands	r3, r1
 80085f4:	431d      	orrs	r5, r3
 80085f6:	f820 5022 	strh.w	r5, [r0, r2, lsl #2]
}
 80085fa:	2000      	movs	r0, #0
 80085fc:	bc30      	pop	{r4, r5}
 80085fe:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008600:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 8008604:	0464      	lsls	r4, r4, #17
 8008606:	d50e      	bpl.n	8008626 <USB_DeactivateEndpoint+0x102>
 8008608:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800860c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008610:	051b      	lsls	r3, r3, #20
 8008612:	0d1b      	lsrs	r3, r3, #20
 8008614:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800861c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8008620:	780b      	ldrb	r3, [r1, #0]
 8008622:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008626:	881a      	ldrh	r2, [r3, #0]
 8008628:	0652      	lsls	r2, r2, #25
 800862a:	d43e      	bmi.n	80086aa <USB_DeactivateEndpoint+0x186>
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800862c:	f248 0580 	movw	r5, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8008630:	881a      	ldrh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008632:	4c26      	ldr	r4, [pc, #152]	; (80086cc <USB_DeactivateEndpoint+0x1a8>)
      PCD_RX_DTOG(USBx, ep->num);
 8008634:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008638:	0512      	lsls	r2, r2, #20
 800863a:	0d12      	lsrs	r2, r2, #20
 800863c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008640:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008644:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008646:	780a      	ldrb	r2, [r1, #0]
 8008648:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800864c:	4023      	ands	r3, r4
 800864e:	432b      	orrs	r3, r5
 8008650:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008654:	780a      	ldrb	r2, [r1, #0]
 8008656:	4b1c      	ldr	r3, [pc, #112]	; (80086c8 <USB_DeactivateEndpoint+0x1a4>)
 8008658:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 800865c:	400b      	ands	r3, r1
 800865e:	431d      	orrs	r5, r3
 8008660:	f820 5022 	strh.w	r5, [r0, r2, lsl #2]
}
 8008664:	2000      	movs	r0, #0
 8008666:	bc30      	pop	{r4, r5}
 8008668:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800866a:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 800866e:	0465      	lsls	r5, r4, #17
 8008670:	d50e      	bpl.n	8008690 <USB_DeactivateEndpoint+0x16c>
 8008672:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008676:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800867a:	051b      	lsls	r3, r3, #20
 800867c:	0d1b      	lsrs	r3, r3, #20
 800867e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008686:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800868a:	780b      	ldrb	r3, [r1, #0]
 800868c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008690:	881a      	ldrh	r2, [r3, #0]
}
 8008692:	2000      	movs	r0, #0
 8008694:	bc30      	pop	{r4, r5}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008696:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800869a:	0492      	lsls	r2, r2, #18
 800869c:	0c92      	lsrs	r2, r2, #18
 800869e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80086a6:	801a      	strh	r2, [r3, #0]
}
 80086a8:	4770      	bx	lr
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086aa:	881a      	ldrh	r2, [r3, #0]
 80086ac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80086b0:	0512      	lsls	r2, r2, #20
 80086b2:	0d12      	lsrs	r2, r2, #20
 80086b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086b8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80086bc:	801a      	strh	r2, [r3, #0]
 80086be:	780b      	ldrb	r3, [r1, #0]
 80086c0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80086c4:	e7b2      	b.n	800862c <USB_DeactivateEndpoint+0x108>
 80086c6:	bf00      	nop
 80086c8:	ffffbf8f 	.word	0xffffbf8f
 80086cc:	ffff8fbf 	.word	0xffff8fbf

080086d0 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80086d0:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086d2:	784c      	ldrb	r4, [r1, #1]
 80086d4:	698b      	ldr	r3, [r1, #24]
 80086d6:	2c01      	cmp	r4, #1
 80086d8:	690a      	ldr	r2, [r1, #16]
 80086da:	d05a      	beq.n	8008792 <USB_EPStartXfer+0xc2>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80086dc:	4293      	cmp	r3, r2
      ep->xfer_len -= len;
    }
    else
    {
      len = ep->xfer_len;
      ep->xfer_len = 0U;
 80086de:	bf98      	it	ls
 80086e0:	2600      	movls	r6, #0
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80086e2:	7b0d      	ldrb	r5, [r1, #12]
      ep->xfer_len -= len;
 80086e4:	bf88      	it	hi
 80086e6:	1a9e      	subhi	r6, r3, r2
 80086e8:	618e      	str	r6, [r1, #24]
 80086ea:	bf88      	it	hi
 80086ec:	4613      	movhi	r3, r2
 80086ee:	780a      	ldrb	r2, [r1, #0]
    if (ep->doublebuffer == 0U)
 80086f0:	bb15      	cbnz	r5, 8008738 <USB_EPStartXfer+0x68>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80086f2:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 80086f6:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 80086fa:	0112      	lsls	r2, r2, #4
 80086fc:	442c      	add	r4, r5
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f000 80a8 	beq.w	8008854 <USB_EPStartXfer+0x184>
 8008704:	2b3e      	cmp	r3, #62	; 0x3e
 8008706:	f200 80c9 	bhi.w	800889c <USB_EPStartXfer+0x1cc>
 800870a:	085d      	lsrs	r5, r3, #1
 800870c:	07db      	lsls	r3, r3, #31
 800870e:	bf48      	it	mi
 8008710:	3501      	addmi	r5, #1
 8008712:	02ad      	lsls	r5, r5, #10
 8008714:	b2ad      	uxth	r5, r5
 8008716:	52a5      	strh	r5, [r4, r2]
 8008718:	780a      	ldrb	r2, [r1, #0]
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800871a:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 800871e:	4b7d      	ldr	r3, [pc, #500]	; (8008914 <USB_EPStartXfer+0x244>)
  }

  return HAL_OK;
}
 8008720:	bcf0      	pop	{r4, r5, r6, r7}
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008722:	400b      	ands	r3, r1
 8008724:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8008728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800872c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008730:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8008734:	2000      	movs	r0, #0
 8008736:	4770      	bx	lr
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008738:	2c00      	cmp	r4, #0
 800873a:	d1ee      	bne.n	800871a <USB_EPStartXfer+0x4a>
 800873c:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8008740:	f200 4404 	addw	r4, r0, #1028	; 0x404
 8008744:	0112      	lsls	r2, r2, #4
 8008746:	442c      	add	r4, r5
 8008748:	2b00      	cmp	r3, #0
 800874a:	f040 80b3 	bne.w	80088b4 <USB_EPStartXfer+0x1e4>
 800874e:	5aa5      	ldrh	r5, [r4, r2]
 8008750:	4e71      	ldr	r6, [pc, #452]	; (8008918 <USB_EPStartXfer+0x248>)
 8008752:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8008756:	042d      	lsls	r5, r5, #16
 8008758:	0c2d      	lsrs	r5, r5, #16
 800875a:	52a5      	strh	r5, [r4, r2]
 800875c:	5aa5      	ldrh	r5, [r4, r2]
 800875e:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8008762:	52a5      	strh	r5, [r4, r2]
 8008764:	784c      	ldrb	r4, [r1, #1]
 8008766:	2c00      	cmp	r4, #0
 8008768:	f040 80af 	bne.w	80088ca <USB_EPStartXfer+0x1fa>
 800876c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008770:	780a      	ldrb	r2, [r1, #0]
 8008772:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 8008776:	0112      	lsls	r2, r2, #4
 8008778:	441c      	add	r4, r3
 800877a:	5aa3      	ldrh	r3, [r4, r2]
 800877c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008780:	041b      	lsls	r3, r3, #16
 8008782:	0c1b      	lsrs	r3, r3, #16
 8008784:	52a3      	strh	r3, [r4, r2]
 8008786:	5aa3      	ldrh	r3, [r4, r2]
 8008788:	4333      	orrs	r3, r6
 800878a:	b29b      	uxth	r3, r3
 800878c:	52a3      	strh	r3, [r4, r2]
 800878e:	780a      	ldrb	r2, [r1, #0]
 8008790:	e7c3      	b.n	800871a <USB_EPStartXfer+0x4a>
    if (ep->xfer_len > ep->maxpacket)
 8008792:	4293      	cmp	r3, r2
      ep->xfer_len -= len;
 8008794:	bf86      	itte	hi
 8008796:	1a9c      	subhi	r4, r3, r2
 8008798:	4613      	movhi	r3, r2
      ep->xfer_len = 0U;
 800879a:	2400      	movls	r4, #0
 800879c:	b29a      	uxth	r2, r3
    if (ep->doublebuffer == 0U)
 800879e:	7b0d      	ldrb	r5, [r1, #12]
 80087a0:	3201      	adds	r2, #1
 80087a2:	0856      	lsrs	r6, r2, #1
 80087a4:	618c      	str	r4, [r1, #24]
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	694a      	ldr	r2, [r1, #20]
 80087aa:	f500 6780 	add.w	r7, r0, #1024	; 0x400
 80087ae:	b36d      	cbz	r5, 800880c <USB_EPStartXfer+0x13c>
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80087b0:	780d      	ldrb	r5, [r1, #0]
 80087b2:	f830 4025 	ldrh.w	r4, [r0, r5, lsl #2]
 80087b6:	012d      	lsls	r5, r5, #4
 80087b8:	0664      	lsls	r4, r4, #25
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80087ba:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80087be:	d555      	bpl.n	800886c <USB_EPStartXfer+0x19c>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80087c0:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 80087c4:	4464      	add	r4, ip
 80087c6:	5363      	strh	r3, [r4, r5]
        pmabuffer = ep->pmaaddr1;
 80087c8:	894c      	ldrh	r4, [r1, #10]
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80087ca:	eb07 0444 	add.w	r4, r7, r4, lsl #1

  for (i = n; i != 0U; i--)
 80087ce:	b13e      	cbz	r6, 80087e0 <USB_EPStartXfer+0x110>
 80087d0:	eb02 0346 	add.w	r3, r2, r6, lsl #1
 80087d4:	f832 5b02 	ldrh.w	r5, [r2], #2
 80087d8:	4293      	cmp	r3, r2
  {
    temp1 = *pBuf;
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
    *pdwVal = (uint16_t)temp2;
 80087da:	f824 5b04 	strh.w	r5, [r4], #4
  for (i = n; i != 0U; i--)
 80087de:	d1f9      	bne.n	80087d4 <USB_EPStartXfer+0x104>
 80087e0:	780c      	ldrb	r4, [r1, #0]
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80087e2:	784b      	ldrb	r3, [r1, #1]
 80087e4:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d145      	bne.n	8008878 <USB_EPStartXfer+0x1a8>
 80087ec:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80087f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087f4:	051b      	lsls	r3, r3, #20
 80087f6:	0d1b      	lsrs	r3, r3, #20
 80087f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008800:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8008804:	780a      	ldrb	r2, [r1, #0]
 8008806:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800880a:	e016      	b.n	800883a <USB_EPStartXfer+0x16a>
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800880c:	88cc      	ldrh	r4, [r1, #6]
 800880e:	eb07 0444 	add.w	r4, r7, r4, lsl #1
  for (i = n; i != 0U; i--)
 8008812:	b13e      	cbz	r6, 8008824 <USB_EPStartXfer+0x154>
 8008814:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008818:	f832 5b02 	ldrh.w	r5, [r2], #2
    *pdwVal = (uint16_t)temp2;
 800881c:	f824 5b04 	strh.w	r5, [r4], #4
  for (i = n; i != 0U; i--)
 8008820:	42a6      	cmp	r6, r4
 8008822:	d1f9      	bne.n	8008818 <USB_EPStartXfer+0x148>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008824:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8008828:	780c      	ldrb	r4, [r1, #0]
 800882a:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800882e:	442a      	add	r2, r5
 8008830:	0124      	lsls	r4, r4, #4
 8008832:	52a3      	strh	r3, [r4, r2]
 8008834:	780a      	ldrb	r2, [r1, #0]
 8008836:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800883a:	8811      	ldrh	r1, [r2, #0]
 800883c:	4b37      	ldr	r3, [pc, #220]	; (800891c <USB_EPStartXfer+0x24c>)
}
 800883e:	2000      	movs	r0, #0
 8008840:	bcf0      	pop	{r4, r5, r6, r7}
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008842:	400b      	ands	r3, r1
 8008844:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8008848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800884c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008850:	8013      	strh	r3, [r2, #0]
}
 8008852:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008854:	5aa3      	ldrh	r3, [r4, r2]
 8008856:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800885a:	041b      	lsls	r3, r3, #16
 800885c:	0c1b      	lsrs	r3, r3, #16
 800885e:	52a3      	strh	r3, [r4, r2]
 8008860:	5aa3      	ldrh	r3, [r4, r2]
 8008862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008866:	52a3      	strh	r3, [r4, r2]
 8008868:	780a      	ldrb	r2, [r1, #0]
 800886a:	e756      	b.n	800871a <USB_EPStartXfer+0x4a>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800886c:	f200 4404 	addw	r4, r0, #1028	; 0x404
 8008870:	4464      	add	r4, ip
 8008872:	5363      	strh	r3, [r4, r5]
        pmabuffer = ep->pmaaddr0;
 8008874:	890c      	ldrh	r4, [r1, #8]
 8008876:	e7a8      	b.n	80087ca <USB_EPStartXfer+0xfa>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8008878:	2b01      	cmp	r3, #1
 800887a:	d1de      	bne.n	800883a <USB_EPStartXfer+0x16a>
 800887c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8008880:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008884:	051b      	lsls	r3, r3, #20
 8008886:	0d1b      	lsrs	r3, r3, #20
 8008888:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800888c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008890:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8008894:	780a      	ldrb	r2, [r1, #0]
 8008896:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800889a:	e7ce      	b.n	800883a <USB_EPStartXfer+0x16a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800889c:	095d      	lsrs	r5, r3, #5
 800889e:	06df      	lsls	r7, r3, #27
 80088a0:	4b1d      	ldr	r3, [pc, #116]	; (8008918 <USB_EPStartXfer+0x248>)
 80088a2:	bf08      	it	eq
 80088a4:	f105 35ff 	addeq.w	r5, r5, #4294967295
 80088a8:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	52a3      	strh	r3, [r4, r2]
 80088b0:	780a      	ldrb	r2, [r1, #0]
 80088b2:	e732      	b.n	800871a <USB_EPStartXfer+0x4a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80088b4:	2b3e      	cmp	r3, #62	; 0x3e
 80088b6:	d816      	bhi.n	80088e6 <USB_EPStartXfer+0x216>
 80088b8:	085d      	lsrs	r5, r3, #1
 80088ba:	07de      	lsls	r6, r3, #31
 80088bc:	bf48      	it	mi
 80088be:	3501      	addmi	r5, #1
 80088c0:	02ad      	lsls	r5, r5, #10
 80088c2:	b2ad      	uxth	r5, r5
 80088c4:	52a5      	strh	r5, [r4, r2]
 80088c6:	784c      	ldrb	r4, [r1, #1]
 80088c8:	b1d4      	cbz	r4, 8008900 <USB_EPStartXfer+0x230>
 80088ca:	2c01      	cmp	r4, #1
 80088cc:	780a      	ldrb	r2, [r1, #0]
 80088ce:	f47f af24 	bne.w	800871a <USB_EPStartXfer+0x4a>
 80088d2:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 80088d6:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 80088da:	0112      	lsls	r2, r2, #4
 80088dc:	b29b      	uxth	r3, r3
 80088de:	442c      	add	r4, r5
 80088e0:	52a3      	strh	r3, [r4, r2]
 80088e2:	780a      	ldrb	r2, [r1, #0]
 80088e4:	e719      	b.n	800871a <USB_EPStartXfer+0x4a>
 80088e6:	095e      	lsrs	r6, r3, #5
 80088e8:	06dd      	lsls	r5, r3, #27
 80088ea:	4d0b      	ldr	r5, [pc, #44]	; (8008918 <USB_EPStartXfer+0x248>)
 80088ec:	bf08      	it	eq
 80088ee:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80088f2:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 80088f6:	b2ad      	uxth	r5, r5
 80088f8:	52a5      	strh	r5, [r4, r2]
 80088fa:	784c      	ldrb	r4, [r1, #1]
 80088fc:	2c00      	cmp	r4, #0
 80088fe:	d1e4      	bne.n	80088ca <USB_EPStartXfer+0x1fa>
 8008900:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8008904:	780b      	ldrb	r3, [r1, #0]
 8008906:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 800890a:	4422      	add	r2, r4
 800890c:	011b      	lsls	r3, r3, #4
 800890e:	52d5      	strh	r5, [r2, r3]
 8008910:	780a      	ldrb	r2, [r1, #0]
 8008912:	e702      	b.n	800871a <USB_EPStartXfer+0x4a>
 8008914:	ffffbf8f 	.word	0xffffbf8f
 8008918:	ffff8000 	.word	0xffff8000
 800891c:	ffff8fbf 	.word	0xffff8fbf

08008920 <USB_EPSetStall>:
  if (ep->is_in != 0U)
 8008920:	784b      	ldrb	r3, [r1, #1]
 8008922:	780a      	ldrb	r2, [r1, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008924:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
  if (ep->is_in != 0U)
 8008928:	b95b      	cbnz	r3, 8008942 <USB_EPSetStall+0x22>
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800892a:	4b0c      	ldr	r3, [pc, #48]	; (800895c <USB_EPSetStall+0x3c>)
 800892c:	400b      	ands	r3, r1
 800892e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800893a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800893e:	2000      	movs	r0, #0
 8008940:	4770      	bx	lr
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008942:	4b07      	ldr	r3, [pc, #28]	; (8008960 <USB_EPSetStall+0x40>)
 8008944:	400b      	ands	r3, r1
 8008946:	f083 0310 	eor.w	r3, r3, #16
 800894a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800894e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008952:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8008956:	2000      	movs	r0, #0
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	ffffbf8f 	.word	0xffffbf8f
 8008960:	ffff8fbf 	.word	0xffff8fbf

08008964 <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 8008964:	7b0b      	ldrb	r3, [r1, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d139      	bne.n	80089de <USB_EPClearStall+0x7a>
{
 800896a:	b410      	push	{r4}
 800896c:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in != 0U)
 800896e:	784c      	ldrb	r4, [r1, #1]
 8008970:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8008974:	b314      	cbz	r4, 80089bc <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008976:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800897a:	0652      	lsls	r2, r2, #25
 800897c:	d50b      	bpl.n	8008996 <USB_EPClearStall+0x32>
 800897e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8008982:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008986:	0512      	lsls	r2, r2, #20
 8008988:	0d12      	lsrs	r2, r2, #20
 800898a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800898e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8008992:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8008996:	78cb      	ldrb	r3, [r1, #3]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d01d      	beq.n	80089d8 <USB_EPClearStall+0x74>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800899c:	780a      	ldrb	r2, [r1, #0]
 800899e:	4b19      	ldr	r3, [pc, #100]	; (8008a04 <USB_EPClearStall+0xa0>)
 80089a0:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
}
 80089a4:	bc10      	pop	{r4}
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80089a6:	400b      	ands	r3, r1
 80089a8:	f083 0320 	eor.w	r3, r3, #32
 80089ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089b4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80089b8:	2000      	movs	r0, #0
 80089ba:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089bc:	f830 4023 	ldrh.w	r4, [r0, r3, lsl #2]
 80089c0:	0464      	lsls	r4, r4, #17
 80089c2:	d40e      	bmi.n	80089e2 <USB_EPClearStall+0x7e>
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80089c4:	8811      	ldrh	r1, [r2, #0]
 80089c6:	4b10      	ldr	r3, [pc, #64]	; (8008a08 <USB_EPClearStall+0xa4>)
 80089c8:	400b      	ands	r3, r1
 80089ca:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80089ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089d6:	8013      	strh	r3, [r2, #0]
}
 80089d8:	2000      	movs	r0, #0
 80089da:	bc10      	pop	{r4}
 80089dc:	4770      	bx	lr
 80089de:	2000      	movs	r0, #0
 80089e0:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089e2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80089e6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80089ea:	0512      	lsls	r2, r2, #20
 80089ec:	0d12      	lsrs	r2, r2, #20
 80089ee:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80089f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80089f6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 80089fa:	780a      	ldrb	r2, [r1, #0]
 80089fc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008a00:	e7e0      	b.n	80089c4 <USB_EPClearStall+0x60>
 8008a02:	bf00      	nop
 8008a04:	ffff8fbf 	.word	0xffff8fbf
 8008a08:	ffffbf8f 	.word	0xffffbf8f

08008a0c <USB_SetDevAddress>:
  if (address == 0U)
 8008a0c:	b911      	cbnz	r1, 8008a14 <USB_SetDevAddress+0x8>
    USBx->DADDR = USB_DADDR_EF;
 8008a0e:	2380      	movs	r3, #128	; 0x80
 8008a10:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 8008a14:	2000      	movs	r0, #0
 8008a16:	4770      	bx	lr

08008a18 <USB_DevConnect>:
 8008a18:	2000      	movs	r0, #0
 8008a1a:	4770      	bx	lr

08008a1c <USB_DevDisconnect>:
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	4770      	bx	lr

08008a20 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 8008a20:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop

08008a28 <USB_EP0_OutStart>:
}
 8008a28:	2000      	movs	r0, #0
 8008a2a:	4770      	bx	lr

08008a2c <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a2c:	eb00 0242 	add.w	r2, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 8008a30:	0858      	lsrs	r0, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8008a36:	d01a      	beq.n	8008a6e <USB_ReadPMA+0x42>
{
 8008a38:	b4f0      	push	{r4, r5, r6, r7}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a3a:	4617      	mov	r7, r2
  for (i = n; i != 0U; i--)
 8008a3c:	4606      	mov	r6, r0
 8008a3e:	1c8d      	adds	r5, r1, #2
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008a40:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8008a44:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8008a46:	b2a4      	uxth	r4, r4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008a48:	ea4f 2c14 	mov.w	ip, r4, lsr #8
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008a4c:	f805 4c02 	strb.w	r4, [r5, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008a50:	f805 cc01 	strb.w	ip, [r5, #-1]
 8008a54:	f105 0502 	add.w	r5, r5, #2
  for (i = n; i != 0U; i--)
 8008a58:	d1f2      	bne.n	8008a40 <USB_ReadPMA+0x14>
  if ((wNBytes % 2U) != 0U)
  {
    temp = *pdwVal;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
  }
}
 8008a5a:	bcf0      	pop	{r4, r5, r6, r7}
 8008a5c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8008a60:	eb02 0280 	add.w	r2, r2, r0, lsl #2
  if ((wNBytes % 2U) != 0U)
 8008a64:	07d8      	lsls	r0, r3, #31
    temp = *pdwVal;
 8008a66:	bf44      	itt	mi
 8008a68:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008a6a:	700b      	strbmi	r3, [r1, #0]
}
 8008a6c:	4770      	bx	lr
  if ((wNBytes % 2U) != 0U)
 8008a6e:	07db      	lsls	r3, r3, #31
    temp = *pdwVal;
 8008a70:	bf44      	itt	mi
 8008a72:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008a74:	700b      	strbmi	r3, [r1, #0]
 8008a76:	4770      	bx	lr

08008a78 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008a78:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8008a7c:	b183      	cbz	r3, 8008aa0 <USBD_CDC_EP0_RxReady+0x28>
{
 8008a7e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a80:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008a84:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8008a88:	28ff      	cmp	r0, #255	; 0xff
 8008a8a:	d007      	beq.n	8008a9c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8008a92:	4621      	mov	r1, r4
 8008a94:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8008a96:	23ff      	movs	r3, #255	; 0xff
 8008a98:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8008a9c:	2000      	movs	r0, #0
 8008a9e:	bd10      	pop	{r4, pc}
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	4770      	bx	lr

08008aa4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008aa4:	2343      	movs	r3, #67	; 0x43
 8008aa6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8008aa8:	4800      	ldr	r0, [pc, #0]	; (8008aac <USBD_CDC_GetFSCfgDesc+0x8>)
 8008aaa:	4770      	bx	lr
 8008aac:	2000007c 	.word	0x2000007c

08008ab0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008ab0:	2343      	movs	r3, #67	; 0x43
 8008ab2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8008ab4:	4800      	ldr	r0, [pc, #0]	; (8008ab8 <USBD_CDC_GetHSCfgDesc+0x8>)
 8008ab6:	4770      	bx	lr
 8008ab8:	200000c0 	.word	0x200000c0

08008abc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008abc:	2343      	movs	r3, #67	; 0x43
 8008abe:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8008ac0:	4800      	ldr	r0, [pc, #0]	; (8008ac4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8008ac2:	4770      	bx	lr
 8008ac4:	20000110 	.word	0x20000110

08008ac8 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008ac8:	230a      	movs	r3, #10
 8008aca:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8008acc:	4800      	ldr	r0, [pc, #0]	; (8008ad0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8008ace:	4770      	bx	lr
 8008ad0:	20000104 	.word	0x20000104

08008ad4 <USBD_CDC_DataOut>:
{
 8008ad4:	b538      	push	{r3, r4, r5, lr}
 8008ad6:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ad8:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008adc:	f000 ffda 	bl	8009a94 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8008ae0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008ae4:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8008ae8:	b14b      	cbz	r3, 8008afe <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008aea:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8008aee:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8008af8:	4798      	blx	r3
    return USBD_OK;
 8008afa:	2000      	movs	r0, #0
}
 8008afc:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8008afe:	2002      	movs	r0, #2
}
 8008b00:	bd38      	pop	{r3, r4, r5, pc}
 8008b02:	bf00      	nop

08008b04 <USBD_CDC_DataIn>:
{
 8008b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b06:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8008b0a:	b1d6      	cbz	r6, 8008b42 <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008b0c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8008b10:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008b14:	69df      	ldr	r7, [r3, #28]
 8008b16:	b14f      	cbz	r7, 8008b2c <USBD_CDC_DataIn+0x28>
 8008b18:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 8008b1c:	eb02 1541 	add.w	r5, r2, r1, lsl #5
 8008b20:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8008b22:	fbb7 f4f2 	udiv	r4, r7, r2
 8008b26:	fb02 7414 	mls	r4, r2, r4, r7
 8008b2a:	b11c      	cbz	r4, 8008b34 <USBD_CDC_DataIn+0x30>
      hcdc->TxState = 0U;
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
}
 8008b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8008b34:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008b36:	4622      	mov	r2, r4
 8008b38:	4623      	mov	r3, r4
 8008b3a:	f000 ff8f 	bl	8009a5c <USBD_LL_Transmit>
    return USBD_OK;
 8008b3e:	4620      	mov	r0, r4
}
 8008b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 8008b42:	2002      	movs	r0, #2
}
 8008b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b46:	bf00      	nop

08008b48 <USBD_CDC_Setup>:
{
 8008b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t ifalt = 0U;
 8008b4c:	2700      	movs	r7, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b4e:	780b      	ldrb	r3, [r1, #0]
{
 8008b50:	b082      	sub	sp, #8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b52:	f013 0460 	ands.w	r4, r3, #96	; 0x60
{
 8008b56:	460d      	mov	r5, r1
 8008b58:	4606      	mov	r6, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b5a:	f8d0 82b8 	ldr.w	r8, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8008b5e:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 8008b62:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b66:	d00f      	beq.n	8008b88 <USBD_CDC_Setup+0x40>
 8008b68:	2c20      	cmp	r4, #32
 8008b6a:	d117      	bne.n	8008b9c <USBD_CDC_Setup+0x54>
      if (req->wLength)
 8008b6c:	88cc      	ldrh	r4, [r1, #6]
 8008b6e:	f891 c001 	ldrb.w	ip, [r1, #1]
 8008b72:	bb64      	cbnz	r4, 8008bce <USBD_CDC_Setup+0x86>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b74:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8008b78:	4622      	mov	r2, r4
 8008b7a:	4660      	mov	r0, ip
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8008b80:	4620      	mov	r0, r4
}
 8008b82:	b002      	add	sp, #8
 8008b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      switch (req->bRequest)
 8008b88:	784f      	ldrb	r7, [r1, #1]
 8008b8a:	2f0a      	cmp	r7, #10
 8008b8c:	d014      	beq.n	8008bb8 <USBD_CDC_Setup+0x70>
 8008b8e:	2f0b      	cmp	r7, #11
 8008b90:	d00c      	beq.n	8008bac <USBD_CDC_Setup+0x64>
 8008b92:	b91f      	cbnz	r7, 8008b9c <USBD_CDC_Setup+0x54>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b94:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008b98:	2b03      	cmp	r3, #3
 8008b9a:	d028      	beq.n	8008bee <USBD_CDC_Setup+0xa6>
          USBD_CtlError(pdev, req);
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	4629      	mov	r1, r5
 8008ba0:	f000 fc9e 	bl	80094e0 <USBD_CtlError>
          ret = USBD_FAIL;
 8008ba4:	2002      	movs	r0, #2
}
 8008ba6:	b002      	add	sp, #8
 8008ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008bac:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008bb0:	2b03      	cmp	r3, #3
 8008bb2:	d1f3      	bne.n	8008b9c <USBD_CDC_Setup+0x54>
  uint8_t ret = USBD_OK;
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	e7f6      	b.n	8008ba6 <USBD_CDC_Setup+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bb8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008bbc:	2b03      	cmp	r3, #3
 8008bbe:	d1ed      	bne.n	8008b9c <USBD_CDC_Setup+0x54>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f10d 0105 	add.w	r1, sp, #5
 8008bc6:	f000 fcbd 	bl	8009544 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8008bca:	4620      	mov	r0, r4
 8008bcc:	e7eb      	b.n	8008ba6 <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 8008bce:	061b      	lsls	r3, r3, #24
 8008bd0:	d514      	bpl.n	8008bfc <USBD_CDC_Setup+0xb4>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008bd2:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8008bd6:	4622      	mov	r2, r4
 8008bd8:	4660      	mov	r0, ip
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	4641      	mov	r1, r8
 8008bde:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008be0:	88ea      	ldrh	r2, [r5, #6]
 8008be2:	4641      	mov	r1, r8
 8008be4:	4630      	mov	r0, r6
 8008be6:	f000 fcad 	bl	8009544 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8008bea:	4638      	mov	r0, r7
 8008bec:	e7db      	b.n	8008ba6 <USBD_CDC_Setup+0x5e>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008bee:	2202      	movs	r2, #2
 8008bf0:	f10d 0106 	add.w	r1, sp, #6
 8008bf4:	f000 fca6 	bl	8009544 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8008bf8:	4638      	mov	r0, r7
 8008bfa:	e7d4      	b.n	8008ba6 <USBD_CDC_Setup+0x5e>
          hcdc->CmdOpCode = req->bRequest;
 8008bfc:	f888 c200 	strb.w	ip, [r8, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008c00:	f888 4201 	strb.w	r4, [r8, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008c04:	4622      	mov	r2, r4
 8008c06:	4641      	mov	r1, r8
 8008c08:	f000 fcb2 	bl	8009570 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8008c0c:	4638      	mov	r0, r7
 8008c0e:	e7ca      	b.n	8008ba6 <USBD_CDC_Setup+0x5e>

08008c10 <USBD_CDC_DeInit>:
{
 8008c10:	b538      	push	{r3, r4, r5, lr}
 8008c12:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008c14:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008c16:	2181      	movs	r1, #129	; 0x81
 8008c18:	f000 fed8 	bl	80099cc <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008c1c:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008c1e:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008c20:	4620      	mov	r0, r4
 8008c22:	f000 fed3 	bl	80099cc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008c26:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	2182      	movs	r1, #130	; 0x82
 8008c2e:	f000 fecd 	bl	80099cc <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8008c32:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008c36:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8008c38:	b14b      	cbz	r3, 8008c4e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008c3a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008c42:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8008c46:	f000 ff2d 	bl	8009aa4 <USBD_static_free>
    pdev->pClassData = NULL;
 8008c4a:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8008c4e:	2000      	movs	r0, #0
 8008c50:	bd38      	pop	{r3, r4, r5, pc}
 8008c52:	bf00      	nop

08008c54 <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c54:	7c03      	ldrb	r3, [r0, #16]
{
 8008c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c5a:	4604      	mov	r4, r0
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c5c:	2501      	movs	r5, #1
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c5e:	bbbb      	cbnz	r3, 8008cd0 <USBD_CDC_Init+0x7c>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c64:	2202      	movs	r2, #2
 8008c66:	2181      	movs	r1, #129	; 0x81
 8008c68:	f000 fea0 	bl	80099ac <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c6c:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c6e:	4629      	mov	r1, r5
 8008c70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c74:	2202      	movs	r2, #2
 8008c76:	4620      	mov	r0, r4
 8008c78:	f000 fe98 	bl	80099ac <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c7c:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008c80:	2701      	movs	r7, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008c82:	2308      	movs	r3, #8
 8008c84:	2203      	movs	r2, #3
 8008c86:	2182      	movs	r1, #130	; 0x82
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f000 fe8f 	bl	80099ac <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008c8e:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008c90:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008c94:	f000 ff02 	bl	8009a9c <USBD_static_malloc>
 8008c98:	4605      	mov	r5, r0
 8008c9a:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8008c9e:	b368      	cbz	r0, 8008cfc <USBD_CDC_Init+0xa8>
    hcdc->TxState = 0U;
 8008ca0:	2600      	movs	r6, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008ca2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008caa:	f894 8010 	ldrb.w	r8, [r4, #16]
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008cae:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
    hcdc->TxState = 0U;
 8008cb2:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008cb6:	4639      	mov	r1, r7
    hcdc->RxState = 0U;
 8008cb8:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008cbc:	4620      	mov	r0, r4
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cbe:	f1b8 0f00 	cmp.w	r8, #0
 8008cc2:	d014      	beq.n	8008cee <USBD_CDC_Init+0x9a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008cc4:	2340      	movs	r3, #64	; 0x40
 8008cc6:	f000 fed7 	bl	8009a78 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8008cca:	4630      	mov	r0, r6
}
 8008ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008cd0:	2340      	movs	r3, #64	; 0x40
 8008cd2:	2202      	movs	r2, #2
 8008cd4:	2181      	movs	r1, #129	; 0x81
 8008cd6:	f000 fe69 	bl	80099ac <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008cda:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008cdc:	4629      	mov	r1, r5
 8008cde:	2340      	movs	r3, #64	; 0x40
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f000 fe62 	bl	80099ac <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008ce8:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 8008cec:	e7c8      	b.n	8008c80 <USBD_CDC_Init+0x2c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008cee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cf2:	f000 fec1 	bl	8009a78 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8008cf6:	4640      	mov	r0, r8
}
 8008cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 8008cfc:	4638      	mov	r0, r7
 8008cfe:	e7e5      	b.n	8008ccc <USBD_CDC_Init+0x78>

08008d00 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8008d00:	b119      	cbz	r1, 8008d0a <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8008d02:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8008d06:	2000      	movs	r0, #0
 8008d08:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8008d0a:	2002      	movs	r0, #2
  }

  return ret;
}
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop

08008d10 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d10:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8008d14:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8008d16:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008d1a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8008d1e:	4770      	bx	lr

08008d20 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8008d20:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8008d24:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8008d26:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8008d2a:	4770      	bx	lr

08008d2c <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d2c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  if (pdev->pClassData != NULL)
 8008d30:	b19a      	cbz	r2, 8008d5a <USBD_CDC_TransmitPacket+0x2e>
{
 8008d32:	b538      	push	{r3, r4, r5, lr}
  {
    if (hcdc->TxState == 0U)
 8008d34:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8008d38:	b10c      	cbz	r4, 8008d3e <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8008d3a:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8008d3c:	bd38      	pop	{r3, r4, r5, pc}
      hcdc->TxState = 1U;
 8008d3e:	2501      	movs	r5, #1
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008d40:	f8d2 1210 	ldr.w	r1, [r2, #528]	; 0x210
      hcdc->TxState = 1U;
 8008d44:	f8c2 5214 	str.w	r5, [r2, #532]	; 0x214
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008d48:	b28b      	uxth	r3, r1
 8008d4a:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008d4e:	6301      	str	r1, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008d50:	2181      	movs	r1, #129	; 0x81
 8008d52:	f000 fe83 	bl	8009a5c <USBD_LL_Transmit>
      return USBD_OK;
 8008d56:	4620      	mov	r0, r4
}
 8008d58:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8008d5a:	2002      	movs	r0, #2
}
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop

08008d60 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d60:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008d64:	b18a      	cbz	r2, 8008d8a <USBD_CDC_ReceivePacket+0x2a>
{
 8008d66:	b510      	push	{r4, lr}
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d68:	7c04      	ldrb	r4, [r0, #16]
 8008d6a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8008d6e:	b12c      	cbz	r4, 8008d7c <USBD_CDC_ReceivePacket+0x1c>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008d70:	2340      	movs	r3, #64	; 0x40
 8008d72:	2101      	movs	r1, #1
 8008d74:	f000 fe80 	bl	8009a78 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008d78:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8008d7a:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8008d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d80:	2101      	movs	r1, #1
 8008d82:	f000 fe79 	bl	8009a78 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8008d86:	4620      	mov	r0, r4
}
 8008d88:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8008d8a:	2002      	movs	r0, #2
}
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop

08008d90 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008d90:	b188      	cbz	r0, 8008db6 <USBD_Init+0x26>
{
 8008d92:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008d94:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008d98:	b113      	cbz	r3, 8008da0 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008da0:	b109      	cbz	r1, 8008da6 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8008da2:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008da6:	2301      	movs	r3, #1
  pdev->id = id;
 8008da8:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008daa:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008dae:	f000 fdad 	bl	800990c <USBD_LL_Init>

  return USBD_OK;
 8008db2:	2000      	movs	r0, #0
}
 8008db4:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8008db6:	2002      	movs	r0, #2
}
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop

08008dbc <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8008dbc:	b119      	cbz	r1, 8008dc6 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008dbe:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008dc6:	2002      	movs	r0, #2
  }

  return status;
}
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop

08008dcc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008dcc:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008dce:	f000 fddf 	bl	8009990 <USBD_LL_Start>

  return USBD_OK;
}
 8008dd2:	2000      	movs	r0, #0
 8008dd4:	bd08      	pop	{r3, pc}
 8008dd6:	bf00      	nop

08008dd8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008dd8:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8008dda:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008dde:	b11b      	cbz	r3, 8008de8 <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4798      	blx	r3
 8008de4:	b900      	cbnz	r0, 8008de8 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8008de6:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008de8:	2002      	movs	r0, #2
}
 8008dea:	bd08      	pop	{r3, pc}

08008dec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008dec:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008dee:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	4798      	blx	r3

  return USBD_OK;
}
 8008df6:	2000      	movs	r0, #0
 8008df8:	bd08      	pop	{r3, pc}
 8008dfa:	bf00      	nop

08008dfc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008dfc:	b538      	push	{r3, r4, r5, lr}
 8008dfe:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008e00:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8008e04:	4628      	mov	r0, r5
 8008e06:	f000 fb57 	bl	80094b8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008e0a:	2001      	movs	r0, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8008e0c:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_data_len = pdev->request.wLength;
 8008e10:	f8b4 22ae 	ldrh.w	r2, [r4, #686]	; 0x2ae
  switch (pdev->request.bmRequest & 0x1FU)
 8008e14:	f001 031f 	and.w	r3, r1, #31
 8008e18:	4283      	cmp	r3, r0
  pdev->ep0_state = USBD_EP0_SETUP;
 8008e1a:	f8c4 0294 	str.w	r0, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8008e1e:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8008e22:	d015      	beq.n	8008e50 <USBD_LL_SetupStage+0x54>
 8008e24:	d30e      	bcc.n	8008e44 <USBD_LL_SetupStage+0x48>
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d006      	beq.n	8008e38 <USBD_LL_SetupStage+0x3c>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008e2a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f000 fdda 	bl	80099e8 <USBD_LL_StallEP>
      break;
  }

  return USBD_OK;
}
 8008e34:	2000      	movs	r0, #0
 8008e36:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdEPReq(pdev, &pdev->request);
 8008e38:	4629      	mov	r1, r5
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f000 faa6 	bl	800938c <USBD_StdEPReq>
}
 8008e40:	2000      	movs	r0, #0
 8008e42:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdDevReq(pdev, &pdev->request);
 8008e44:	4629      	mov	r1, r5
 8008e46:	4620      	mov	r0, r4
 8008e48:	f000 f8f6 	bl	8009038 <USBD_StdDevReq>
}
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8008e50:	4629      	mov	r1, r5
 8008e52:	4620      	mov	r0, r4
 8008e54:	f000 fa6e 	bl	8009334 <USBD_StdItfReq>
}
 8008e58:	2000      	movs	r0, #0
 8008e5a:	bd38      	pop	{r3, r4, r5, pc}

08008e5c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e5c:	b570      	push	{r4, r5, r6, lr}
 8008e5e:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008e60:	b941      	cbnz	r1, 8008e74 <USBD_LL_DataOutStage+0x18>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e62:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8008e66:	2b03      	cmp	r3, #3
 8008e68:	d00f      	beq.n	8008e8a <USBD_LL_DataOutStage+0x2e>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008e6a:	2b05      	cmp	r3, #5
 8008e6c:	460c      	mov	r4, r1
 8008e6e:	d02e      	beq.n	8008ece <USBD_LL_DataOutStage+0x72>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8008e70:	2000      	movs	r0, #0
}
 8008e72:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e74:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008e78:	699b      	ldr	r3, [r3, #24]
 8008e7a:	b1c3      	cbz	r3, 8008eae <USBD_LL_DataOutStage+0x52>
 8008e7c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008e80:	2a03      	cmp	r2, #3
 8008e82:	d114      	bne.n	8008eae <USBD_LL_DataOutStage+0x52>
    pdev->pClass->DataOut(pdev, epnum);
 8008e84:	4798      	blx	r3
  return USBD_OK;
 8008e86:	2000      	movs	r0, #0
}
 8008e88:	bd70      	pop	{r4, r5, r6, pc}
 8008e8a:	4616      	mov	r6, r2
      if (pep->rem_length > pep->maxpacket)
 8008e8c:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8008e90:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d90c      	bls.n	8008eb2 <USBD_LL_DataOutStage+0x56>
        pep->rem_length -= pep->maxpacket;
 8008e98:	1a9b      	subs	r3, r3, r2
        USBD_CtlContinueRx(pdev, pdata,
 8008e9a:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8008e9c:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8008ea0:	bf8c      	ite	hi
 8008ea2:	b29a      	uxthhi	r2, r3
 8008ea4:	b292      	uxthls	r2, r2
 8008ea6:	4631      	mov	r1, r6
 8008ea8:	f000 fb72 	bl	8009590 <USBD_CtlContinueRx>
 8008eac:	e7e0      	b.n	8008e70 <USBD_LL_DataOutStage+0x14>
    return USBD_FAIL;
 8008eae:	2002      	movs	r0, #2
}
 8008eb0:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008eb2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	b123      	cbz	r3, 8008ec4 <USBD_LL_DataOutStage+0x68>
 8008eba:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008ebe:	2a03      	cmp	r2, #3
 8008ec0:	d100      	bne.n	8008ec4 <USBD_LL_DataOutStage+0x68>
          pdev->pClass->EP0_RxReady(pdev);
 8008ec2:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	f000 fb6b 	bl	80095a0 <USBD_CtlSendStatus>
  return USBD_OK;
 8008eca:	2000      	movs	r0, #0
}
 8008ecc:	bd70      	pop	{r4, r5, r6, pc}
        pdev->ep0_state = USBD_EP0_IDLE;
 8008ece:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008ed2:	f000 fd89 	bl	80099e8 <USBD_LL_StallEP>
  return USBD_OK;
 8008ed6:	4620      	mov	r0, r4
}
 8008ed8:	bd70      	pop	{r4, r5, r6, pc}
 8008eda:	bf00      	nop

08008edc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008edc:	b570      	push	{r4, r5, r6, lr}
 8008ede:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008ee0:	b981      	cbnz	r1, 8008f04 <USBD_LL_DataInStage+0x28>
 8008ee2:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ee4:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8008ee8:	2a02      	cmp	r2, #2
 8008eea:	d019      	beq.n	8008f20 <USBD_LL_DataInStage+0x44>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008eec:	f032 0304 	bics.w	r3, r2, #4
 8008ef0:	d102      	bne.n	8008ef8 <USBD_LL_DataInStage+0x1c>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008ef2:	2180      	movs	r1, #128	; 0x80
 8008ef4:	f000 fd78 	bl	80099e8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008ef8:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8008efc:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d00b      	beq.n	8008f1a <USBD_LL_DataInStage+0x3e>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8008f02:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 8008f04:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	b363      	cbz	r3, 8008f66 <USBD_LL_DataInStage+0x8a>
 8008f0c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008f10:	2a03      	cmp	r2, #3
 8008f12:	d128      	bne.n	8008f66 <USBD_LL_DataInStage+0x8a>
    pdev->pClass->DataIn(pdev, epnum);
 8008f14:	4798      	blx	r3
  return USBD_OK;
 8008f16:	2000      	movs	r0, #0
}
 8008f18:	bd70      	pop	{r4, r5, r6, pc}
      pdev->dev_test_mode = 0U;
 8008f1a:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
}
 8008f1e:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8008f20:	e9d0 6208 	ldrd	r6, r2, [r0, #32]
 8008f24:	4296      	cmp	r6, r2
 8008f26:	d820      	bhi.n	8008f6a <USBD_LL_DataInStage+0x8e>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008f28:	69c3      	ldr	r3, [r0, #28]
 8008f2a:	fbb3 f5f2 	udiv	r5, r3, r2
 8008f2e:	fb02 3515 	mls	r5, r2, r5, r3
 8008f32:	b90d      	cbnz	r5, 8008f38 <USBD_LL_DataInStage+0x5c>
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d926      	bls.n	8008f86 <USBD_LL_DataInStage+0xaa>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008f38:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	b12b      	cbz	r3, 8008f4c <USBD_LL_DataInStage+0x70>
 8008f40:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8008f44:	2a03      	cmp	r2, #3
 8008f46:	d101      	bne.n	8008f4c <USBD_LL_DataInStage+0x70>
            pdev->pClass->EP0_TxSent(pdev);
 8008f48:	4620      	mov	r0, r4
 8008f4a:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8008f4c:	2180      	movs	r1, #128	; 0x80
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f000 fd4a 	bl	80099e8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008f54:	4620      	mov	r0, r4
 8008f56:	f000 fb2f 	bl	80095b8 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 8008f5a:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
      pdev->dev_test_mode = 0U;
 8008f5e:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d1ce      	bne.n	8008f02 <USBD_LL_DataInStage+0x26>
 8008f64:	e7d9      	b.n	8008f1a <USBD_LL_DataInStage+0x3e>
    return USBD_FAIL;
 8008f66:	2002      	movs	r0, #2
}
 8008f68:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8008f6a:	1ab2      	subs	r2, r6, r2
 8008f6c:	460d      	mov	r5, r1
 8008f6e:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008f70:	4619      	mov	r1, r3
 8008f72:	b292      	uxth	r2, r2
 8008f74:	f000 faf4 	bl	8009560 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f78:	462b      	mov	r3, r5
 8008f7a:	462a      	mov	r2, r5
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	4620      	mov	r0, r4
 8008f80:	f000 fd7a 	bl	8009a78 <USBD_LL_PrepareReceive>
 8008f84:	e7b8      	b.n	8008ef8 <USBD_LL_DataInStage+0x1c>
            (pep->total_length >= pep->maxpacket) &&
 8008f86:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d2d4      	bcs.n	8008f38 <USBD_LL_DataInStage+0x5c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f8e:	462a      	mov	r2, r5
 8008f90:	f000 fae6 	bl	8009560 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f94:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8008f98:	e7ee      	b.n	8008f78 <USBD_LL_DataInStage+0x9c>
 8008f9a:	bf00      	nop

08008f9c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008f9c:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f9e:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fa0:	2640      	movs	r6, #64	; 0x40
{
 8008fa2:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008fa4:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008fa6:	4611      	mov	r1, r2
 8008fa8:	4633      	mov	r3, r6
 8008faa:	f000 fcff 	bl	80099ac <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008fae:	4633      	mov	r3, r6
 8008fb0:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008fb2:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fb6:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008fba:	4620      	mov	r0, r4
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f000 fcf5 	bl	80099ac <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8008fc2:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8008fc4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008fc8:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fca:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fcc:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008fd0:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8008fd4:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8008fd6:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8008fda:	b123      	cbz	r3, 8008fe6 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008fdc:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	4798      	blx	r3
  }

  return USBD_OK;
}
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	bd70      	pop	{r4, r5, r6, pc}
 8008fea:	bf00      	nop

08008fec <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8008fec:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8008fee:	2000      	movs	r0, #0
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop

08008ff4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008ff4:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008ff6:	2204      	movs	r2, #4
  pdev->dev_old_state =  pdev->dev_state;
 8008ff8:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8008ffc:	2000      	movs	r0, #0
  pdev->dev_old_state =  pdev->dev_state;
 8008ffe:	f883 129d 	strb.w	r1, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009002:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
}
 8009006:	4770      	bx	lr

08009008 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009008:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800900c:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800900e:	bf04      	itt	eq
 8009010:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8009014:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8009018:	2000      	movs	r0, #0
 800901a:	4770      	bx	lr

0800901c <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800901c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8009020:	2a03      	cmp	r2, #3
 8009022:	d001      	beq.n	8009028 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8009024:	2000      	movs	r0, #0
 8009026:	4770      	bx	lr
{
 8009028:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 800902a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800902e:	69db      	ldr	r3, [r3, #28]
 8009030:	b103      	cbz	r3, 8009034 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 8009032:	4798      	blx	r3
}
 8009034:	2000      	movs	r0, #0
 8009036:	bd08      	pop	{r3, pc}

08009038 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009038:	b530      	push	{r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800903a:	780b      	ldrb	r3, [r1, #0]
{
 800903c:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800903e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009042:	2b20      	cmp	r3, #32
{
 8009044:	460d      	mov	r5, r1
 8009046:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009048:	d028      	beq.n	800909c <USBD_StdDevReq+0x64>
 800904a:	2b40      	cmp	r3, #64	; 0x40
 800904c:	d026      	beq.n	800909c <USBD_StdDevReq+0x64>
 800904e:	b153      	cbz	r3, 8009066 <USBD_StdDevReq+0x2e>
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8009050:	2180      	movs	r1, #128	; 0x80
 8009052:	4620      	mov	r0, r4
 8009054:	f000 fcc8 	bl	80099e8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009058:	4620      	mov	r0, r4
 800905a:	2100      	movs	r1, #0
 800905c:	f000 fcc4 	bl	80099e8 <USBD_LL_StallEP>
}
 8009060:	2000      	movs	r0, #0
 8009062:	b003      	add	sp, #12
 8009064:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8009066:	784b      	ldrb	r3, [r1, #1]
 8009068:	2b09      	cmp	r3, #9
 800906a:	d8f1      	bhi.n	8009050 <USBD_StdDevReq+0x18>
 800906c:	a201      	add	r2, pc, #4	; (adr r2, 8009074 <USBD_StdDevReq+0x3c>)
 800906e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009072:	bf00      	nop
 8009074:	080090f1 	.word	0x080090f1
 8009078:	0800911d 	.word	0x0800911d
 800907c:	08009051 	.word	0x08009051
 8009080:	08009139 	.word	0x08009139
 8009084:	08009051 	.word	0x08009051
 8009088:	08009145 	.word	0x08009145
 800908c:	08009183 	.word	0x08009183
 8009090:	08009051 	.word	0x08009051
 8009094:	080091b9 	.word	0x080091b9
 8009098:	080090af 	.word	0x080090af
      pdev->pClass->Setup(pdev, req);
 800909c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80090a0:	4629      	mov	r1, r5
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	4620      	mov	r0, r4
 80090a6:	4798      	blx	r3
}
 80090a8:	2000      	movs	r0, #0
 80090aa:	b003      	add	sp, #12
 80090ac:	bd30      	pop	{r4, r5, pc}
  cfgidx = (uint8_t)(req->wValue);
 80090ae:	7889      	ldrb	r1, [r1, #2]
 80090b0:	4d9f      	ldr	r5, [pc, #636]	; (8009330 <USBD_StdDevReq+0x2f8>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090b2:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80090b4:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090b6:	d8cb      	bhi.n	8009050 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 80090b8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80090bc:	2b02      	cmp	r3, #2
 80090be:	f000 810d 	beq.w	80092dc <USBD_StdDevReq+0x2a4>
 80090c2:	2b03      	cmp	r3, #3
 80090c4:	f040 80fe 	bne.w	80092c4 <USBD_StdDevReq+0x28c>
        if (cfgidx == 0U)
 80090c8:	2900      	cmp	r1, #0
 80090ca:	f000 8127 	beq.w	800931c <USBD_StdDevReq+0x2e4>
        else if (cfgidx != pdev->dev_config)
 80090ce:	6841      	ldr	r1, [r0, #4]
 80090d0:	2901      	cmp	r1, #1
 80090d2:	d009      	beq.n	80090e8 <USBD_StdDevReq+0xb0>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80090d4:	b2c9      	uxtb	r1, r1
 80090d6:	f7ff fe89 	bl	8008dec <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80090da:	7829      	ldrb	r1, [r5, #0]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80090dc:	4620      	mov	r0, r4
          pdev->dev_config = cfgidx;
 80090de:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80090e0:	f7ff fe7a 	bl	8008dd8 <USBD_SetClassConfig>
 80090e4:	2802      	cmp	r0, #2
 80090e6:	d0b3      	beq.n	8009050 <USBD_StdDevReq+0x18>
    USBD_CtlSendStatus(pdev);
 80090e8:	4620      	mov	r0, r4
 80090ea:	f000 fa59 	bl	80095a0 <USBD_CtlSendStatus>
 80090ee:	e7b7      	b.n	8009060 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 80090f0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80090f4:	2203      	movs	r2, #3
 80090f6:	3b01      	subs	r3, #1
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d8a9      	bhi.n	8009050 <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 80090fc:	88cb      	ldrh	r3, [r1, #6]
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d1a6      	bne.n	8009050 <USBD_StdDevReq+0x18>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009102:	2101      	movs	r1, #1
      if (pdev->dev_remote_wakeup)
 8009104:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009108:	60c1      	str	r1, [r0, #12]
      if (pdev->dev_remote_wakeup)
 800910a:	b103      	cbz	r3, 800910e <USBD_StdDevReq+0xd6>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800910c:	60c2      	str	r2, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800910e:	2202      	movs	r2, #2
 8009110:	f104 010c 	add.w	r1, r4, #12
 8009114:	4620      	mov	r0, r4
 8009116:	f000 fa15 	bl	8009544 <USBD_CtlSendData>
 800911a:	e7a1      	b.n	8009060 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800911c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8009120:	3b01      	subs	r3, #1
 8009122:	2b02      	cmp	r3, #2
 8009124:	d894      	bhi.n	8009050 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009126:	884b      	ldrh	r3, [r1, #2]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d199      	bne.n	8009060 <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 800912c:	2300      	movs	r3, #0
 800912e:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009132:	f000 fa35 	bl	80095a0 <USBD_CtlSendStatus>
 8009136:	e793      	b.n	8009060 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009138:	884b      	ldrh	r3, [r1, #2]
 800913a:	2b01      	cmp	r3, #1
 800913c:	d190      	bne.n	8009060 <USBD_StdDevReq+0x28>
    pdev->dev_remote_wakeup = 1U;
 800913e:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
 8009142:	e7d1      	b.n	80090e8 <USBD_StdDevReq+0xb0>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009144:	888b      	ldrh	r3, [r1, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d182      	bne.n	8009050 <USBD_StdDevReq+0x18>
 800914a:	88cb      	ldrh	r3, [r1, #6]
 800914c:	2b00      	cmp	r3, #0
 800914e:	f47f af7f 	bne.w	8009050 <USBD_StdDevReq+0x18>
 8009152:	884d      	ldrh	r5, [r1, #2]
 8009154:	2d7f      	cmp	r5, #127	; 0x7f
 8009156:	f63f af7b 	bhi.w	8009050 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800915a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800915e:	2b03      	cmp	r3, #3
 8009160:	f43f af76 	beq.w	8009050 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009164:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8009166:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800916a:	f000 fc69 	bl	8009a40 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800916e:	4620      	mov	r0, r4
 8009170:	f000 fa16 	bl	80095a0 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8009174:	2d00      	cmp	r5, #0
 8009176:	f000 80cd 	beq.w	8009314 <USBD_StdDevReq+0x2dc>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800917a:	2302      	movs	r3, #2
 800917c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8009180:	e76e      	b.n	8009060 <USBD_StdDevReq+0x28>
  uint16_t len = 0U;
 8009182:	2300      	movs	r3, #0
          USBD_GetDescriptor(pdev, req);
 8009184:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8009186:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800918a:	0a13      	lsrs	r3, r2, #8
 800918c:	3b01      	subs	r3, #1
 800918e:	2b06      	cmp	r3, #6
 8009190:	f63f af5e 	bhi.w	8009050 <USBD_StdDevReq+0x18>
 8009194:	a101      	add	r1, pc, #4	; (adr r1, 800919c <USBD_StdDevReq+0x164>)
 8009196:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800919a:	bf00      	nop
 800919c:	08009251 	.word	0x08009251
 80091a0:	08009239 	.word	0x08009239
 80091a4:	08009261 	.word	0x08009261
 80091a8:	08009051 	.word	0x08009051
 80091ac:	08009051 	.word	0x08009051
 80091b0:	08009223 	.word	0x08009223
 80091b4:	080091df 	.word	0x080091df
  if (req->wLength != 1U)
 80091b8:	88ca      	ldrh	r2, [r1, #6]
 80091ba:	2a01      	cmp	r2, #1
 80091bc:	f47f af48 	bne.w	8009050 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 80091c0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f43f af43 	beq.w	8009050 <USBD_StdDevReq+0x18>
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	f240 8094 	bls.w	80092f8 <USBD_StdDevReq+0x2c0>
 80091d0:	2b03      	cmp	r3, #3
 80091d2:	f47f af3d 	bne.w	8009050 <USBD_StdDevReq+0x18>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80091d6:	1d01      	adds	r1, r0, #4
 80091d8:	f000 f9b4 	bl	8009544 <USBD_CtlSendData>
 80091dc:	e740      	b.n	8009060 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091de:	7c03      	ldrb	r3, [r0, #16]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f47f af35 	bne.w	8009050 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80091e6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80091ea:	f10d 0006 	add.w	r0, sp, #6
 80091ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80091f2:	2307      	movs	r3, #7
 80091f4:	7043      	strb	r3, [r0, #1]
    if ((len != 0U) && (req->wLength != 0U))
 80091f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80091fa:	88ea      	ldrh	r2, [r5, #6]
 80091fc:	b16b      	cbz	r3, 800921a <USBD_StdDevReq+0x1e2>
 80091fe:	2a00      	cmp	r2, #0
 8009200:	f43f af72 	beq.w	80090e8 <USBD_StdDevReq+0xb0>
      len = MIN(len, req->wLength);
 8009204:	4293      	cmp	r3, r2
 8009206:	bf28      	it	cs
 8009208:	4613      	movcs	r3, r2
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800920a:	4601      	mov	r1, r0
 800920c:	461a      	mov	r2, r3
 800920e:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8009210:	f8ad 3006 	strh.w	r3, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009214:	f000 f996 	bl	8009544 <USBD_CtlSendData>
 8009218:	88ea      	ldrh	r2, [r5, #6]
    if (req->wLength == 0U)
 800921a:	2a00      	cmp	r2, #0
 800921c:	f47f af20 	bne.w	8009060 <USBD_StdDevReq+0x28>
 8009220:	e762      	b.n	80090e8 <USBD_StdDevReq+0xb0>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009222:	7c03      	ldrb	r3, [r0, #16]
 8009224:	2b00      	cmp	r3, #0
 8009226:	f47f af13 	bne.w	8009050 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800922a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800922e:	f10d 0006 	add.w	r0, sp, #6
 8009232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009234:	4798      	blx	r3
 8009236:	e7de      	b.n	80091f6 <USBD_StdDevReq+0x1be>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009238:	7c02      	ldrb	r2, [r0, #16]
 800923a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800923e:	2a00      	cmp	r2, #0
 8009240:	d161      	bne.n	8009306 <USBD_StdDevReq+0x2ce>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009244:	f10d 0006 	add.w	r0, sp, #6
 8009248:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800924a:	2302      	movs	r3, #2
 800924c:	7043      	strb	r3, [r0, #1]
 800924e:	e7d2      	b.n	80091f6 <USBD_StdDevReq+0x1be>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009250:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8009254:	f10d 0106 	add.w	r1, sp, #6
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	7c00      	ldrb	r0, [r0, #16]
 800925c:	4798      	blx	r3
 800925e:	e7ca      	b.n	80091f6 <USBD_StdDevReq+0x1be>
      switch ((uint8_t)(req->wValue))
 8009260:	b2d2      	uxtb	r2, r2
 8009262:	2a05      	cmp	r2, #5
 8009264:	f63f aef4 	bhi.w	8009050 <USBD_StdDevReq+0x18>
 8009268:	e8df f002 	tbb	[pc, r2]
 800926c:	141a2026 	.word	0x141a2026
 8009270:	030e      	.short	0x030e
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009272:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8009276:	699b      	ldr	r3, [r3, #24]
 8009278:	2b00      	cmp	r3, #0
 800927a:	f43f aee9 	beq.w	8009050 <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800927e:	f10d 0106 	add.w	r1, sp, #6
 8009282:	7c20      	ldrb	r0, [r4, #16]
 8009284:	4798      	blx	r3
 8009286:	e7b6      	b.n	80091f6 <USBD_StdDevReq+0x1be>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009288:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800928c:	695b      	ldr	r3, [r3, #20]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d1f5      	bne.n	800927e <USBD_StdDevReq+0x246>
 8009292:	e6dd      	b.n	8009050 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009294:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1ef      	bne.n	800927e <USBD_StdDevReq+0x246>
 800929e:	e6d7      	b.n	8009050 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80092a0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1e9      	bne.n	800927e <USBD_StdDevReq+0x246>
 80092aa:	e6d1      	b.n	8009050 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80092ac:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1e3      	bne.n	800927e <USBD_StdDevReq+0x246>
 80092b6:	e6cb      	b.n	8009050 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80092b8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1dd      	bne.n	800927e <USBD_StdDevReq+0x246>
 80092c2:	e6c5      	b.n	8009050 <USBD_StdDevReq+0x18>
  USBD_LL_StallEP(pdev, 0x80U);
 80092c4:	2180      	movs	r1, #128	; 0x80
 80092c6:	f000 fb8f 	bl	80099e8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80092ca:	2100      	movs	r1, #0
 80092cc:	4620      	mov	r0, r4
 80092ce:	f000 fb8b 	bl	80099e8 <USBD_LL_StallEP>
        USBD_ClrClassConfig(pdev, cfgidx);
 80092d2:	7829      	ldrb	r1, [r5, #0]
 80092d4:	4620      	mov	r0, r4
 80092d6:	f7ff fd89 	bl	8008dec <USBD_ClrClassConfig>
 80092da:	e6c1      	b.n	8009060 <USBD_StdDevReq+0x28>
        if (cfgidx)
 80092dc:	2900      	cmp	r1, #0
 80092de:	f43f af03 	beq.w	80090e8 <USBD_StdDevReq+0xb0>
          pdev->dev_config = cfgidx;
 80092e2:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80092e4:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 80092e6:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80092e8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80092ec:	f7ff fd74 	bl	8008dd8 <USBD_SetClassConfig>
 80092f0:	2802      	cmp	r0, #2
 80092f2:	f47f aef9 	bne.w	80090e8 <USBD_StdDevReq+0xb0>
 80092f6:	e6ab      	b.n	8009050 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 80092f8:	2300      	movs	r3, #0
 80092fa:	4601      	mov	r1, r0
 80092fc:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009300:	f000 f920 	bl	8009544 <USBD_CtlSendData>
 8009304:	e6ac      	b.n	8009060 <USBD_StdDevReq+0x28>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009308:	f10d 0006 	add.w	r0, sp, #6
 800930c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800930e:	2302      	movs	r3, #2
 8009310:	7043      	strb	r3, [r0, #1]
 8009312:	e770      	b.n	80091f6 <USBD_StdDevReq+0x1be>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009314:	2301      	movs	r3, #1
 8009316:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800931a:	e6a1      	b.n	8009060 <USBD_StdDevReq+0x28>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800931c:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800931e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009320:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8009324:	f7ff fd62 	bl	8008dec <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009328:	4620      	mov	r0, r4
 800932a:	f000 f939 	bl	80095a0 <USBD_CtlSendStatus>
 800932e:	e697      	b.n	8009060 <USBD_StdDevReq+0x28>
 8009330:	200003c4 	.word	0x200003c4

08009334 <USBD_StdItfReq>:
{
 8009334:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009336:	780b      	ldrb	r3, [r1, #0]
{
 8009338:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800933a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800933e:	2b20      	cmp	r3, #32
{
 8009340:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009342:	d00c      	beq.n	800935e <USBD_StdItfReq+0x2a>
 8009344:	2b40      	cmp	r3, #64	; 0x40
 8009346:	d00a      	beq.n	800935e <USBD_StdItfReq+0x2a>
 8009348:	b14b      	cbz	r3, 800935e <USBD_StdItfReq+0x2a>
  USBD_LL_StallEP(pdev, 0x80U);
 800934a:	2180      	movs	r1, #128	; 0x80
 800934c:	4620      	mov	r0, r4
 800934e:	f000 fb4b 	bl	80099e8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009352:	4620      	mov	r0, r4
 8009354:	2100      	movs	r1, #0
 8009356:	f000 fb47 	bl	80099e8 <USBD_LL_StallEP>
}
 800935a:	2000      	movs	r0, #0
 800935c:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 800935e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8009362:	3b01      	subs	r3, #1
 8009364:	2b02      	cmp	r3, #2
 8009366:	d8f0      	bhi.n	800934a <USBD_StdItfReq+0x16>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009368:	792b      	ldrb	r3, [r5, #4]
 800936a:	2b01      	cmp	r3, #1
 800936c:	d8ed      	bhi.n	800934a <USBD_StdItfReq+0x16>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800936e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8009372:	4629      	mov	r1, r5
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	4620      	mov	r0, r4
 8009378:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800937a:	88eb      	ldrh	r3, [r5, #6]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1ec      	bne.n	800935a <USBD_StdItfReq+0x26>
 8009380:	2800      	cmp	r0, #0
 8009382:	d1ea      	bne.n	800935a <USBD_StdItfReq+0x26>
              USBD_CtlSendStatus(pdev);
 8009384:	4620      	mov	r0, r4
 8009386:	f000 f90b 	bl	80095a0 <USBD_CtlSendStatus>
 800938a:	e7e6      	b.n	800935a <USBD_StdItfReq+0x26>

0800938c <USBD_StdEPReq>:
{
 800938c:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800938e:	780b      	ldrb	r3, [r1, #0]
{
 8009390:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009392:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009396:	2b20      	cmp	r3, #32
 8009398:	d00c      	beq.n	80093b4 <USBD_StdEPReq+0x28>
 800939a:	2b40      	cmp	r3, #64	; 0x40
 800939c:	d00a      	beq.n	80093b4 <USBD_StdEPReq+0x28>
 800939e:	b183      	cbz	r3, 80093c2 <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev, 0x80U);
 80093a0:	2180      	movs	r1, #128	; 0x80
 80093a2:	4620      	mov	r0, r4
 80093a4:	f000 fb20 	bl	80099e8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80093a8:	4620      	mov	r0, r4
 80093aa:	2100      	movs	r1, #0
 80093ac:	f000 fb1c 	bl	80099e8 <USBD_LL_StallEP>
}
 80093b0:	2000      	movs	r0, #0
 80093b2:	bd70      	pop	{r4, r5, r6, pc}
      pdev->pClass->Setup(pdev, req);
 80093b4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80093b8:	4620      	mov	r0, r4
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	4798      	blx	r3
}
 80093be:	2000      	movs	r0, #0
 80093c0:	bd70      	pop	{r4, r5, r6, pc}
      switch (req->bRequest)
 80093c2:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80093c4:	888a      	ldrh	r2, [r1, #4]
      switch (req->bRequest)
 80093c6:	2b01      	cmp	r3, #1
  ep_addr  = LOBYTE(req->wIndex);
 80093c8:	b2d5      	uxtb	r5, r2
      switch (req->bRequest)
 80093ca:	d03e      	beq.n	800944a <USBD_StdEPReq+0xbe>
 80093cc:	d314      	bcc.n	80093f8 <USBD_StdEPReq+0x6c>
 80093ce:	2b03      	cmp	r3, #3
 80093d0:	d1e6      	bne.n	80093a0 <USBD_StdEPReq+0x14>
          switch (pdev->dev_state)
 80093d2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d046      	beq.n	8009468 <USBD_StdEPReq+0xdc>
 80093da:	2b03      	cmp	r3, #3
 80093dc:	d1e0      	bne.n	80093a0 <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093de:	884b      	ldrh	r3, [r1, #2]
 80093e0:	b933      	cbnz	r3, 80093f0 <USBD_StdEPReq+0x64>
                if ((ep_addr != 0x00U) &&
 80093e2:	066a      	lsls	r2, r5, #25
 80093e4:	d004      	beq.n	80093f0 <USBD_StdEPReq+0x64>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80093e6:	88cb      	ldrh	r3, [r1, #6]
 80093e8:	b913      	cbnz	r3, 80093f0 <USBD_StdEPReq+0x64>
                  USBD_LL_StallEP(pdev, ep_addr);
 80093ea:	4629      	mov	r1, r5
 80093ec:	f000 fafc 	bl	80099e8 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80093f0:	4620      	mov	r0, r4
 80093f2:	f000 f8d5 	bl	80095a0 <USBD_CtlSendStatus>
              break;
 80093f6:	e7db      	b.n	80093b0 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 80093f8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d03d      	beq.n	800947c <USBD_StdEPReq+0xf0>
 8009400:	2b03      	cmp	r3, #3
 8009402:	d1cd      	bne.n	80093a0 <USBD_StdEPReq+0x14>
 8009404:	f005 030f 	and.w	r3, r5, #15
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009408:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 800940c:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800940e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8009412:	d442      	bmi.n	800949a <USBD_StdEPReq+0x10e>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009414:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8009418:	2b00      	cmp	r3, #0
 800941a:	d0c1      	beq.n	80093a0 <USBD_StdEPReq+0x14>
 800941c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009420:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 8009424:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8009428:	f506 76aa 	add.w	r6, r6, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800942c:	b133      	cbz	r3, 800943c <USBD_StdEPReq+0xb0>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800942e:	4629      	mov	r1, r5
 8009430:	4620      	mov	r0, r4
 8009432:	f000 faf5 	bl	8009a20 <USBD_LL_IsStallEP>
 8009436:	2800      	cmp	r0, #0
 8009438:	d03b      	beq.n	80094b2 <USBD_StdEPReq+0x126>
                pep->status = 0x0001U;
 800943a:	2301      	movs	r3, #1
 800943c:	6033      	str	r3, [r6, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800943e:	4631      	mov	r1, r6
 8009440:	4620      	mov	r0, r4
 8009442:	2202      	movs	r2, #2
 8009444:	f000 f87e 	bl	8009544 <USBD_CtlSendData>
              break;
 8009448:	e7b2      	b.n	80093b0 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 800944a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800944e:	2b02      	cmp	r3, #2
 8009450:	d00a      	beq.n	8009468 <USBD_StdEPReq+0xdc>
 8009452:	2b03      	cmp	r3, #3
 8009454:	d1a4      	bne.n	80093a0 <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009456:	884b      	ldrh	r3, [r1, #2]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1a9      	bne.n	80093b0 <USBD_StdEPReq+0x24>
                if ((ep_addr & 0x7FU) != 0x00U)
 800945c:	066e      	lsls	r6, r5, #25
 800945e:	d0c7      	beq.n	80093f0 <USBD_StdEPReq+0x64>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009460:	4629      	mov	r1, r5
 8009462:	f000 facf 	bl	8009a04 <USBD_LL_ClearStallEP>
 8009466:	e7c3      	b.n	80093f0 <USBD_StdEPReq+0x64>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009468:	066b      	lsls	r3, r5, #25
 800946a:	d099      	beq.n	80093a0 <USBD_StdEPReq+0x14>
                USBD_LL_StallEP(pdev, ep_addr);
 800946c:	4629      	mov	r1, r5
 800946e:	f000 fabb 	bl	80099e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009472:	4620      	mov	r0, r4
 8009474:	2180      	movs	r1, #128	; 0x80
 8009476:	f000 fab7 	bl	80099e8 <USBD_LL_StallEP>
 800947a:	e799      	b.n	80093b0 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800947c:	0668      	lsls	r0, r5, #25
 800947e:	d18f      	bne.n	80093a0 <USBD_StdEPReq+0x14>
              pep->status = 0x0000U;
 8009480:	2300      	movs	r3, #0
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009482:	0611      	lsls	r1, r2, #24
 8009484:	bf4c      	ite	mi
 8009486:	f104 0114 	addmi.w	r1, r4, #20
 800948a:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800948e:	4620      	mov	r0, r4
              pep->status = 0x0000U;
 8009490:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009492:	2202      	movs	r2, #2
 8009494:	f000 f856 	bl	8009544 <USBD_CtlSendData>
              break;
 8009498:	e78a      	b.n	80093b0 <USBD_StdEPReq+0x24>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800949a:	699b      	ldr	r3, [r3, #24]
 800949c:	2b00      	cmp	r3, #0
 800949e:	f43f af7f 	beq.w	80093a0 <USBD_StdEPReq+0x14>
 80094a2:	f005 037f 	and.w	r3, r5, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094a6:	1c5e      	adds	r6, r3, #1
 80094a8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80094ac:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80094b0:	e7bc      	b.n	800942c <USBD_StdEPReq+0xa0>
                pep->status = 0x0000U;
 80094b2:	6030      	str	r0, [r6, #0]
 80094b4:	e7c3      	b.n	800943e <USBD_StdEPReq+0xb2>
 80094b6:	bf00      	nop

080094b8 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 80094b8:	780b      	ldrb	r3, [r1, #0]
 80094ba:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80094bc:	784b      	ldrb	r3, [r1, #1]
 80094be:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80094c0:	78ca      	ldrb	r2, [r1, #3]
 80094c2:	788b      	ldrb	r3, [r1, #2]
 80094c4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80094c8:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80094ca:	794a      	ldrb	r2, [r1, #5]
 80094cc:	790b      	ldrb	r3, [r1, #4]
 80094ce:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80094d2:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80094d4:	79ca      	ldrb	r2, [r1, #7]
 80094d6:	798b      	ldrb	r3, [r1, #6]
 80094d8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80094dc:	80c3      	strh	r3, [r0, #6]
}
 80094de:	4770      	bx	lr

080094e0 <USBD_CtlError>:
{
 80094e0:	b510      	push	{r4, lr}
 80094e2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80094e4:	2180      	movs	r1, #128	; 0x80
 80094e6:	f000 fa7f 	bl	80099e8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80094ea:	4620      	mov	r0, r4
}
 80094ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80094f0:	2100      	movs	r1, #0
 80094f2:	f000 ba79 	b.w	80099e8 <USBD_LL_StallEP>
 80094f6:	bf00      	nop

080094f8 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 80094f8:	b300      	cbz	r0, 800953c <USBD_GetString+0x44>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80094fa:	7803      	ldrb	r3, [r0, #0]
{
 80094fc:	b430      	push	{r4, r5}
  while (*buf != '\0')
 80094fe:	b1f3      	cbz	r3, 800953e <USBD_GetString+0x46>
 8009500:	4604      	mov	r4, r0
  uint8_t  len = 0U;
 8009502:	2300      	movs	r3, #0
  while (*buf != '\0')
 8009504:	f814 5f01 	ldrb.w	r5, [r4, #1]!
  {
    len++;
 8009508:	3301      	adds	r3, #1
 800950a:	b2db      	uxtb	r3, r3
  while (*buf != '\0')
 800950c:	2d00      	cmp	r5, #0
 800950e:	d1f9      	bne.n	8009504 <USBD_GetString+0xc>
 8009510:	005b      	lsls	r3, r3, #1
 8009512:	3302      	adds	r3, #2
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009514:	2403      	movs	r4, #3
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009516:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009518:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800951a:	704c      	strb	r4, [r1, #1]
    while (*desc != '\0')
 800951c:	7804      	ldrb	r4, [r0, #0]
 800951e:	b15c      	cbz	r4, 8009538 <USBD_GetString+0x40>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009520:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 8009522:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 8009524:	1c5a      	adds	r2, r3, #1
 8009526:	b2d2      	uxtb	r2, r2
 8009528:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 800952a:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 800952c:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 8009530:	3302      	adds	r3, #2
 8009532:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 8009534:	2c00      	cmp	r4, #0
 8009536:	d1f5      	bne.n	8009524 <USBD_GetString+0x2c>
}
 8009538:	bc30      	pop	{r4, r5}
 800953a:	4770      	bx	lr
 800953c:	4770      	bx	lr
  while (*buf != '\0')
 800953e:	2302      	movs	r3, #2
 8009540:	e7e8      	b.n	8009514 <USBD_GetString+0x1c>
 8009542:	bf00      	nop

08009544 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009544:	b538      	push	{r3, r4, r5, lr}
 8009546:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009548:	2502      	movs	r5, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800954a:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800954c:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009550:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009554:	2100      	movs	r1, #0
 8009556:	f000 fa81 	bl	8009a5c <USBD_LL_Transmit>

  return USBD_OK;
}
 800955a:	2000      	movs	r0, #0
 800955c:	bd38      	pop	{r3, r4, r5, pc}
 800955e:	bf00      	nop

08009560 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009560:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009562:	4613      	mov	r3, r2
 8009564:	460a      	mov	r2, r1
 8009566:	2100      	movs	r1, #0
 8009568:	f000 fa78 	bl	8009a5c <USBD_LL_Transmit>

  return USBD_OK;
}
 800956c:	2000      	movs	r0, #0
 800956e:	bd08      	pop	{r3, pc}

08009570 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009570:	b538      	push	{r3, r4, r5, lr}
 8009572:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009574:	2503      	movs	r5, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009576:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
 8009578:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800957c:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009580:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009584:	2100      	movs	r1, #0
 8009586:	f000 fa77 	bl	8009a78 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800958a:	2000      	movs	r0, #0
 800958c:	bd38      	pop	{r3, r4, r5, pc}
 800958e:	bf00      	nop

08009590 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009590:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009592:	4613      	mov	r3, r2
 8009594:	460a      	mov	r2, r1
 8009596:	2100      	movs	r1, #0
 8009598:	f000 fa6e 	bl	8009a78 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800959c:	2000      	movs	r0, #0
 800959e:	bd08      	pop	{r3, pc}

080095a0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80095a0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80095a2:	2204      	movs	r2, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80095a4:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80095a6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80095aa:	4619      	mov	r1, r3
 80095ac:	461a      	mov	r2, r3
 80095ae:	f000 fa55 	bl	8009a5c <USBD_LL_Transmit>

  return USBD_OK;
}
 80095b2:	2000      	movs	r0, #0
 80095b4:	bd08      	pop	{r3, pc}
 80095b6:	bf00      	nop

080095b8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80095b8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80095ba:	2205      	movs	r2, #5

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095bc:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80095be:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095c2:	4619      	mov	r1, r3
 80095c4:	461a      	mov	r2, r3
 80095c6:	f000 fa57 	bl	8009a78 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80095ca:	2000      	movs	r0, #0
 80095cc:	bd08      	pop	{r3, pc}
 80095ce:	bf00      	nop

080095d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80095d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80095d2:	2200      	movs	r2, #0
 80095d4:	4910      	ldr	r1, [pc, #64]	; (8009618 <MX_USB_DEVICE_Init+0x48>)
 80095d6:	4811      	ldr	r0, [pc, #68]	; (800961c <MX_USB_DEVICE_Init+0x4c>)
 80095d8:	f7ff fbda 	bl	8008d90 <USBD_Init>
 80095dc:	b9c0      	cbnz	r0, 8009610 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80095de:	4910      	ldr	r1, [pc, #64]	; (8009620 <MX_USB_DEVICE_Init+0x50>)
 80095e0:	480e      	ldr	r0, [pc, #56]	; (800961c <MX_USB_DEVICE_Init+0x4c>)
 80095e2:	f7ff fbeb 	bl	8008dbc <USBD_RegisterClass>
 80095e6:	b980      	cbnz	r0, 800960a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80095e8:	490e      	ldr	r1, [pc, #56]	; (8009624 <MX_USB_DEVICE_Init+0x54>)
 80095ea:	480c      	ldr	r0, [pc, #48]	; (800961c <MX_USB_DEVICE_Init+0x4c>)
 80095ec:	f7ff fb88 	bl	8008d00 <USBD_CDC_RegisterInterface>
 80095f0:	b940      	cbnz	r0, 8009604 <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80095f2:	480a      	ldr	r0, [pc, #40]	; (800961c <MX_USB_DEVICE_Init+0x4c>)
 80095f4:	f7ff fbea 	bl	8008dcc <USBD_Start>
 80095f8:	b900      	cbnz	r0, 80095fc <MX_USB_DEVICE_Init+0x2c>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80095fa:	bd08      	pop	{r3, pc}
 80095fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8009600:	f7f9 b97e 	b.w	8002900 <Error_Handler>
    Error_Handler();
 8009604:	f7f9 f97c 	bl	8002900 <Error_Handler>
 8009608:	e7f3      	b.n	80095f2 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800960a:	f7f9 f979 	bl	8002900 <Error_Handler>
 800960e:	e7eb      	b.n	80095e8 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8009610:	f7f9 f976 	bl	8002900 <Error_Handler>
 8009614:	e7e3      	b.n	80095de <MX_USB_DEVICE_Init+0xe>
 8009616:	bf00      	nop
 8009618:	20000164 	.word	0x20000164
 800961c:	20000d2c 	.word	0x20000d2c
 8009620:	20000044 	.word	0x20000044
 8009624:	20000154 	.word	0x20000154

08009628 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8009628:	2000      	movs	r0, #0
 800962a:	4770      	bx	lr

0800962c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800962c:	2000      	movs	r0, #0
 800962e:	4770      	bx	lr

08009630 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009630:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009632:	4c05      	ldr	r4, [pc, #20]	; (8009648 <CDC_Receive_FS+0x18>)
 8009634:	4601      	mov	r1, r0
 8009636:	4620      	mov	r0, r4
 8009638:	f7ff fb72 	bl	8008d20 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800963c:	4620      	mov	r0, r4
 800963e:	f7ff fb8f 	bl	8008d60 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8009642:	2000      	movs	r0, #0
 8009644:	bd10      	pop	{r4, pc}
 8009646:	bf00      	nop
 8009648:	20000d2c 	.word	0x20000d2c

0800964c <CDC_Init_FS>:
{
 800964c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800964e:	4c06      	ldr	r4, [pc, #24]	; (8009668 <CDC_Init_FS+0x1c>)
 8009650:	2200      	movs	r2, #0
 8009652:	4620      	mov	r0, r4
 8009654:	4905      	ldr	r1, [pc, #20]	; (800966c <CDC_Init_FS+0x20>)
 8009656:	f7ff fb5b 	bl	8008d10 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800965a:	4620      	mov	r0, r4
 800965c:	4904      	ldr	r1, [pc, #16]	; (8009670 <CDC_Init_FS+0x24>)
 800965e:	f7ff fb5f 	bl	8008d20 <USBD_CDC_SetRxBuffer>
}
 8009662:	2000      	movs	r0, #0
 8009664:	bd10      	pop	{r4, pc}
 8009666:	bf00      	nop
 8009668:	20000d2c 	.word	0x20000d2c
 800966c:	200013d8 	.word	0x200013d8
 8009670:	20000ff0 	.word	0x20000ff0

08009674 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009674:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009676:	4c09      	ldr	r4, [pc, #36]	; (800969c <CDC_Transmit_FS+0x28>)
 8009678:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 800967c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009680:	b10b      	cbz	r3, 8009686 <CDC_Transmit_FS+0x12>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 8009682:	2001      	movs	r0, #1
 8009684:	bd10      	pop	{r4, pc}
 8009686:	460a      	mov	r2, r1
 8009688:	4601      	mov	r1, r0
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800968a:	4620      	mov	r0, r4
 800968c:	f7ff fb40 	bl	8008d10 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009690:	4620      	mov	r0, r4
}
 8009692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009696:	f7ff bb49 	b.w	8008d2c <USBD_CDC_TransmitPacket>
 800969a:	bf00      	nop
 800969c:	20000d2c 	.word	0x20000d2c

080096a0 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80096a0:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80096a2:	4801      	ldr	r0, [pc, #4]	; (80096a8 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80096a4:	800b      	strh	r3, [r1, #0]
}
 80096a6:	4770      	bx	lr
 80096a8:	20000180 	.word	0x20000180

080096ac <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80096ac:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80096ae:	4801      	ldr	r0, [pc, #4]	; (80096b4 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80096b0:	800b      	strh	r3, [r1, #0]
}
 80096b2:	4770      	bx	lr
 80096b4:	20000194 	.word	0x20000194

080096b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096b8:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80096ba:	4c04      	ldr	r4, [pc, #16]	; (80096cc <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80096bc:	460a      	mov	r2, r1
 80096be:	4804      	ldr	r0, [pc, #16]	; (80096d0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80096c0:	4621      	mov	r1, r4
 80096c2:	f7ff ff19 	bl	80094f8 <USBD_GetString>
  return USBD_StrDesc;
}
 80096c6:	4620      	mov	r0, r4
 80096c8:	bd10      	pop	{r4, pc}
 80096ca:	bf00      	nop
 80096cc:	200017c0 	.word	0x200017c0
 80096d0:	0800ecc4 	.word	0x0800ecc4

080096d4 <USBD_FS_ProductStrDescriptor>:
{
 80096d4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80096d6:	4c04      	ldr	r4, [pc, #16]	; (80096e8 <USBD_FS_ProductStrDescriptor+0x14>)
 80096d8:	460a      	mov	r2, r1
 80096da:	4804      	ldr	r0, [pc, #16]	; (80096ec <USBD_FS_ProductStrDescriptor+0x18>)
 80096dc:	4621      	mov	r1, r4
 80096de:	f7ff ff0b 	bl	80094f8 <USBD_GetString>
}
 80096e2:	4620      	mov	r0, r4
 80096e4:	bd10      	pop	{r4, pc}
 80096e6:	bf00      	nop
 80096e8:	200017c0 	.word	0x200017c0
 80096ec:	0800ecd8 	.word	0x0800ecd8

080096f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096f0:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80096f2:	4c04      	ldr	r4, [pc, #16]	; (8009704 <USBD_FS_ConfigStrDescriptor+0x14>)
 80096f4:	460a      	mov	r2, r1
 80096f6:	4804      	ldr	r0, [pc, #16]	; (8009708 <USBD_FS_ConfigStrDescriptor+0x18>)
 80096f8:	4621      	mov	r1, r4
 80096fa:	f7ff fefd 	bl	80094f8 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80096fe:	4620      	mov	r0, r4
 8009700:	bd10      	pop	{r4, pc}
 8009702:	bf00      	nop
 8009704:	200017c0 	.word	0x200017c0
 8009708:	0800eca8 	.word	0x0800eca8

0800970c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800970c:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800970e:	4c04      	ldr	r4, [pc, #16]	; (8009720 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8009710:	460a      	mov	r2, r1
 8009712:	4804      	ldr	r0, [pc, #16]	; (8009724 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8009714:	4621      	mov	r1, r4
 8009716:	f7ff feef 	bl	80094f8 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800971a:	4620      	mov	r0, r4
 800971c:	bd10      	pop	{r4, pc}
 800971e:	bf00      	nop
 8009720:	200017c0 	.word	0x200017c0
 8009724:	0800ecb4 	.word	0x0800ecb4

08009728 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8009728:	201a      	movs	r0, #26
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800972a:	4a44      	ldr	r2, [pc, #272]	; (800983c <USBD_FS_SerialStrDescriptor+0x114>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800972c:	4b44      	ldr	r3, [pc, #272]	; (8009840 <USBD_FS_SerialStrDescriptor+0x118>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800972e:	6812      	ldr	r2, [r2, #0]

  deviceserial0 += deviceserial2;
 8009730:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 8009732:	8008      	strh	r0, [r1, #0]

  if (deviceserial0 != 0)
 8009734:	18d2      	adds	r2, r2, r3
 8009736:	d101      	bne.n	800973c <USBD_FS_SerialStrDescriptor+0x14>
}
 8009738:	4842      	ldr	r0, [pc, #264]	; (8009844 <USBD_FS_SerialStrDescriptor+0x11c>)
 800973a:	4770      	bx	lr
{
 800973c:	b410      	push	{r4}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800973e:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8009740:	0f13      	lsrs	r3, r2, #28
 8009742:	b2d8      	uxtb	r0, r3
 8009744:	2b09      	cmp	r3, #9
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009746:	4940      	ldr	r1, [pc, #256]	; (8009848 <USBD_FS_SerialStrDescriptor+0x120>)
      pbuf[2 * idx] = (value >> 28) + '0';
 8009748:	4b3e      	ldr	r3, [pc, #248]	; (8009844 <USBD_FS_SerialStrDescriptor+0x11c>)
 800974a:	bf94      	ite	ls
 800974c:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800974e:	3037      	addhi	r0, #55	; 0x37
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009750:	6809      	ldr	r1, [r1, #0]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009752:	7098      	strb	r0, [r3, #2]
    if (((value >> 28)) < 0xA)
 8009754:	f3c2 6003 	ubfx	r0, r2, #24, #4
 8009758:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800975a:	70dc      	strb	r4, [r3, #3]
 800975c:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 800975e:	bf94      	ite	ls
 8009760:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009762:	3437      	addhi	r4, #55	; 0x37
 8009764:	711c      	strb	r4, [r3, #4]
    pbuf[2 * idx + 1] = 0;
 8009766:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8009768:	f3c2 5003 	ubfx	r0, r2, #20, #4
 800976c:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800976e:	715c      	strb	r4, [r3, #5]
 8009770:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8009772:	bf94      	ite	ls
 8009774:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009776:	3437      	addhi	r4, #55	; 0x37
 8009778:	719c      	strb	r4, [r3, #6]
    pbuf[2 * idx + 1] = 0;
 800977a:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 800977c:	f3c2 4003 	ubfx	r0, r2, #16, #4
 8009780:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8009782:	71dc      	strb	r4, [r3, #7]
 8009784:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8009786:	bf94      	ite	ls
 8009788:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800978a:	3437      	addhi	r4, #55	; 0x37
 800978c:	721c      	strb	r4, [r3, #8]
    pbuf[2 * idx + 1] = 0;
 800978e:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8009790:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8009794:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8009796:	725c      	strb	r4, [r3, #9]
 8009798:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 800979a:	bf94      	ite	ls
 800979c:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800979e:	3437      	addhi	r4, #55	; 0x37
 80097a0:	729c      	strb	r4, [r3, #10]
    pbuf[2 * idx + 1] = 0;
 80097a2:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 80097a4:	f3c2 2003 	ubfx	r0, r2, #8, #4
 80097a8:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 80097aa:	72dc      	strb	r4, [r3, #11]
 80097ac:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 80097ae:	bf94      	ite	ls
 80097b0:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80097b2:	3437      	addhi	r4, #55	; 0x37
 80097b4:	731c      	strb	r4, [r3, #12]
    pbuf[2 * idx + 1] = 0;
 80097b6:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 80097b8:	f3c2 1003 	ubfx	r0, r2, #4, #4
 80097bc:	2809      	cmp	r0, #9
 80097be:	f002 020f 	and.w	r2, r2, #15
    pbuf[2 * idx + 1] = 0;
 80097c2:	735c      	strb	r4, [r3, #13]
 80097c4:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 80097c6:	bf98      	it	ls
 80097c8:	3430      	addls	r4, #48	; 0x30
 80097ca:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80097cc:	bf88      	it	hi
 80097ce:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 80097d0:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 80097d2:	bf94      	ite	ls
 80097d4:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80097d6:	3037      	addhi	r0, #55	; 0x37
 80097d8:	7418      	strb	r0, [r3, #16]
    pbuf[2 * idx + 1] = 0;
 80097da:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 80097dc:	0f0a      	lsrs	r2, r1, #28
 80097de:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 80097e0:	7458      	strb	r0, [r3, #17]
 80097e2:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 80097e4:	bf94      	ite	ls
 80097e6:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80097e8:	3037      	addhi	r0, #55	; 0x37
 80097ea:	7498      	strb	r0, [r3, #18]
    pbuf[2 * idx + 1] = 0;
 80097ec:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 80097ee:	f3c1 6203 	ubfx	r2, r1, #24, #4
 80097f2:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 80097f4:	74d8      	strb	r0, [r3, #19]
 80097f6:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 80097f8:	bf94      	ite	ls
 80097fa:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80097fc:	3037      	addhi	r0, #55	; 0x37
 80097fe:	7518      	strb	r0, [r3, #20]
    pbuf[2 * idx + 1] = 0;
 8009800:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 8009802:	f3c1 5203 	ubfx	r2, r1, #20, #4
 8009806:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 8009808:	7558      	strb	r0, [r3, #21]
    if (((value >> 28)) < 0xA)
 800980a:	f3c1 4103 	ubfx	r1, r1, #16, #4
 800980e:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 8009810:	bf98      	it	ls
 8009812:	3030      	addls	r0, #48	; 0x30
 8009814:	b2ca      	uxtb	r2, r1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009816:	bf88      	it	hi
 8009818:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 800981a:	2909      	cmp	r1, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800981c:	bf94      	ite	ls
 800981e:	3230      	addls	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009820:	3237      	addhi	r2, #55	; 0x37
 8009822:	739c      	strb	r4, [r3, #14]
 8009824:	7598      	strb	r0, [r3, #22]
    pbuf[2 * idx + 1] = 0;
 8009826:	2400      	movs	r4, #0
 8009828:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800982a:	761a      	strb	r2, [r3, #24]
    pbuf[2 * idx + 1] = 0;
 800982c:	2200      	movs	r2, #0
 800982e:	75d8      	strb	r0, [r3, #23]
 8009830:	73dc      	strb	r4, [r3, #15]
 8009832:	765a      	strb	r2, [r3, #25]
}
 8009834:	4803      	ldr	r0, [pc, #12]	; (8009844 <USBD_FS_SerialStrDescriptor+0x11c>)
 8009836:	bc10      	pop	{r4}
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	1ffff7e8 	.word	0x1ffff7e8
 8009840:	1ffff7f0 	.word	0x1ffff7f0
 8009844:	20000198 	.word	0x20000198
 8009848:	1ffff7ec 	.word	0x1ffff7ec

0800984c <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 800984c:	6802      	ldr	r2, [r0, #0]
 800984e:	4b0e      	ldr	r3, [pc, #56]	; (8009888 <HAL_PCD_MspInit+0x3c>)
 8009850:	429a      	cmp	r2, r3
 8009852:	d000      	beq.n	8009856 <HAL_PCD_MspInit+0xa>
 8009854:	4770      	bx	lr
  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009856:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8009858:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
{
 800985c:	b510      	push	{r4, lr}
    __HAL_RCC_USB_CLK_ENABLE();
 800985e:	69dc      	ldr	r4, [r3, #28]
{
 8009860:	b082      	sub	sp, #8
    __HAL_RCC_USB_CLK_ENABLE();
 8009862:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8009866:	61dc      	str	r4, [r3, #28]
 8009868:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800986a:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800986c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009870:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009872:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8009874:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009876:	f7fc f9fb 	bl	8005c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800987a:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800987c:	b002      	add	sp, #8
 800987e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009882:	f7fc ba2b 	b.w	8005cdc <HAL_NVIC_EnableIRQ>
 8009886:	bf00      	nop
 8009888:	40005c00 	.word	0x40005c00

0800988c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800988c:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8009890:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8009894:	f7ff bab2 	b.w	8008dfc <USBD_LL_SetupStage>

08009898 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009898:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800989c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80098a0:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80098a4:	f7ff bada 	b.w	8008e5c <USBD_LL_DataOutStage>

080098a8 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80098a8:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80098ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098ae:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80098b2:	f7ff bb13 	b.w	8008edc <USBD_LL_DataInStage>
 80098b6:	bf00      	nop

080098b8 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80098b8:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80098bc:	f7ff bbae 	b.w	800901c <USBD_LL_SOF>

080098c0 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80098c0:	6883      	ldr	r3, [r0, #8]
{ 
 80098c2:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80098c4:	2b02      	cmp	r3, #2
{ 
 80098c6:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80098c8:	d001      	beq.n	80098ce <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 80098ca:	f7f9 f819 	bl	8002900 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80098ce:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 80098d2:	2101      	movs	r1, #1
 80098d4:	f7ff fb8a 	bl	8008fec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80098d8:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 80098dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80098e0:	f7ff bb5c 	b.w	8008f9c <USBD_LL_Reset>

080098e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098e4:	b510      	push	{r4, lr}
 80098e6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80098e8:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80098ec:	f7ff fb82 	bl	8008ff4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80098f0:	69a3      	ldr	r3, [r4, #24]
 80098f2:	b123      	cbz	r3, 80098fe <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098f4:	4a02      	ldr	r2, [pc, #8]	; (8009900 <HAL_PCD_SuspendCallback+0x1c>)
 80098f6:	6913      	ldr	r3, [r2, #16]
 80098f8:	f043 0306 	orr.w	r3, r3, #6
 80098fc:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80098fe:	bd10      	pop	{r4, pc}
 8009900:	e000ed00 	.word	0xe000ed00

08009904 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009904:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8009908:	f7ff bb7e 	b.w	8009008 <USBD_LL_Resume>

0800990c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800990c:	b538      	push	{r3, r4, r5, lr}
 800990e:	4604      	mov	r4, r0
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009910:	2200      	movs	r2, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009912:	2508      	movs	r5, #8
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009914:	2102      	movs	r1, #2
  hpcd_USB_FS.pData = pdev;
 8009916:	4b1c      	ldr	r3, [pc, #112]	; (8009988 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Instance = USB;
 8009918:	481c      	ldr	r0, [pc, #112]	; (800998c <USBD_LL_Init+0x80>)
  pdev->pData = &hpcd_USB_FS;
 800991a:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 800991e:	6018      	str	r0, [r3, #0]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009920:	4618      	mov	r0, r3
  hpcd_USB_FS.pData = pdev;
 8009922:	f8c3 4268 	str.w	r4, [r3, #616]	; 0x268
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009926:	e9c3 5101 	strd	r5, r1, [r3, #4]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800992a:	e9c3 2206 	strd	r2, r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800992e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009930:	f7fd f9a8 	bl	8006c84 <HAL_PCD_Init>
 8009934:	b108      	cbz	r0, 800993a <USBD_LL_Init+0x2e>
  {
    Error_Handler( );
 8009936:	f7f8 ffe3 	bl	8002900 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800993a:	2200      	movs	r2, #0
 800993c:	2318      	movs	r3, #24
 800993e:	4611      	mov	r1, r2
 8009940:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009944:	f7fd fdbe 	bl	80074c4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009948:	2358      	movs	r3, #88	; 0x58
 800994a:	2200      	movs	r2, #0
 800994c:	2180      	movs	r1, #128	; 0x80
 800994e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009952:	f7fd fdb7 	bl	80074c4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009956:	23c0      	movs	r3, #192	; 0xc0
 8009958:	2200      	movs	r2, #0
 800995a:	2181      	movs	r1, #129	; 0x81
 800995c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009960:	f7fd fdb0 	bl	80074c4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009964:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009968:	2200      	movs	r2, #0
 800996a:	2101      	movs	r1, #1
 800996c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009970:	f7fd fda8 	bl	80074c4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009974:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800997c:	2200      	movs	r2, #0
 800997e:	2182      	movs	r1, #130	; 0x82
 8009980:	f7fd fda0 	bl	80074c4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8009984:	2000      	movs	r0, #0
 8009986:	bd38      	pop	{r3, r4, r5, pc}
 8009988:	200019c0 	.word	0x200019c0
 800998c:	40005c00 	.word	0x40005c00

08009990 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009990:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009992:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009996:	f7fd f9f3 	bl	8006d80 <HAL_PCD_Start>
 800999a:	2803      	cmp	r0, #3
 800999c:	bf96      	itet	ls
 800999e:	4b02      	ldrls	r3, [pc, #8]	; (80099a8 <USBD_LL_Start+0x18>)
 80099a0:	2002      	movhi	r0, #2
 80099a2:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80099a4:	bd08      	pop	{r3, pc}
 80099a6:	bf00      	nop
 80099a8:	0800ece4 	.word	0x0800ece4

080099ac <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80099ac:	b510      	push	{r4, lr}
 80099ae:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80099b0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80099b4:	4613      	mov	r3, r2
 80099b6:	4622      	mov	r2, r4
 80099b8:	f7fd fc7c 	bl	80072b4 <HAL_PCD_EP_Open>
 80099bc:	2803      	cmp	r0, #3
 80099be:	bf96      	itet	ls
 80099c0:	4b01      	ldrls	r3, [pc, #4]	; (80099c8 <USBD_LL_OpenEP+0x1c>)
 80099c2:	2002      	movhi	r0, #2
 80099c4:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 80099c6:	bd10      	pop	{r4, pc}
 80099c8:	0800ece4 	.word	0x0800ece4

080099cc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099cc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80099ce:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80099d2:	f7fd fca1 	bl	8007318 <HAL_PCD_EP_Close>
 80099d6:	2803      	cmp	r0, #3
 80099d8:	bf96      	itet	ls
 80099da:	4b02      	ldrls	r3, [pc, #8]	; (80099e4 <USBD_LL_CloseEP+0x18>)
 80099dc:	2002      	movhi	r0, #2
 80099de:	5c18      	ldrbls	r0, [r3, r0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 80099e0:	bd08      	pop	{r3, pc}
 80099e2:	bf00      	nop
 80099e4:	0800ece4 	.word	0x0800ece4

080099e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099e8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80099ea:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80099ee:	f7fd fcf5 	bl	80073dc <HAL_PCD_EP_SetStall>
 80099f2:	2803      	cmp	r0, #3
 80099f4:	bf96      	itet	ls
 80099f6:	4b02      	ldrls	r3, [pc, #8]	; (8009a00 <USBD_LL_StallEP+0x18>)
 80099f8:	2002      	movhi	r0, #2
 80099fa:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 80099fc:	bd08      	pop	{r3, pc}
 80099fe:	bf00      	nop
 8009a00:	0800ece4 	.word	0x0800ece4

08009a04 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a04:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8009a06:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009a0a:	f7fd fd23 	bl	8007454 <HAL_PCD_EP_ClrStall>
 8009a0e:	2803      	cmp	r0, #3
 8009a10:	bf96      	itet	ls
 8009a12:	4b02      	ldrls	r3, [pc, #8]	; (8009a1c <USBD_LL_ClearStallEP+0x18>)
 8009a14:	2002      	movhi	r0, #2
 8009a16:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8009a18:	bd08      	pop	{r3, pc}
 8009a1a:	bf00      	nop
 8009a1c:	0800ece4 	.word	0x0800ece4

08009a20 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8009a20:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a22:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8009a26:	d404      	bmi.n	8009a32 <USBD_LL_IsStallEP+0x12>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009a28:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009a2c:	f893 012a 	ldrb.w	r0, [r3, #298]	; 0x12a
  }
}
 8009a30:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009a32:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8009a36:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009a3a:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8009a3e:	4770      	bx	lr

08009a40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009a40:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009a42:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009a46:	f7fd fc21 	bl	800728c <HAL_PCD_SetAddress>
 8009a4a:	2803      	cmp	r0, #3
 8009a4c:	bf96      	itet	ls
 8009a4e:	4b02      	ldrls	r3, [pc, #8]	; (8009a58 <USBD_LL_SetUSBAddress+0x18>)
 8009a50:	2002      	movhi	r0, #2
 8009a52:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8009a54:	bd08      	pop	{r3, pc}
 8009a56:	bf00      	nop
 8009a58:	0800ece4 	.word	0x0800ece4

08009a5c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009a5c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a5e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009a62:	f7fd fca5 	bl	80073b0 <HAL_PCD_EP_Transmit>
 8009a66:	2803      	cmp	r0, #3
 8009a68:	bf96      	itet	ls
 8009a6a:	4b02      	ldrls	r3, [pc, #8]	; (8009a74 <USBD_LL_Transmit+0x18>)
 8009a6c:	2002      	movhi	r0, #2
 8009a6e:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8009a70:	bd08      	pop	{r3, pc}
 8009a72:	bf00      	nop
 8009a74:	0800ece4 	.word	0x0800ece4

08009a78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009a78:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a7a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009a7e:	f7fd fc77 	bl	8007370 <HAL_PCD_EP_Receive>
 8009a82:	2803      	cmp	r0, #3
 8009a84:	bf96      	itet	ls
 8009a86:	4b02      	ldrls	r3, [pc, #8]	; (8009a90 <USBD_LL_PrepareReceive+0x18>)
 8009a88:	2002      	movhi	r0, #2
 8009a8a:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8009a8c:	bd08      	pop	{r3, pc}
 8009a8e:	bf00      	nop
 8009a90:	0800ece4 	.word	0x0800ece4

08009a94 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a94:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009a98:	f7fd bc82 	b.w	80073a0 <HAL_PCD_EP_GetRxCount>

08009a9c <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8009a9c:	4800      	ldr	r0, [pc, #0]	; (8009aa0 <USBD_static_malloc+0x4>)
 8009a9e:	4770      	bx	lr
 8009aa0:	200003c8 	.word	0x200003c8

08009aa4 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop

08009aa8 <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop

08009aac <arm_mat_trans_f32>:
 8009aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab0:	8803      	ldrh	r3, [r0, #0]
 8009ab2:	884d      	ldrh	r5, [r1, #2]
 8009ab4:	6847      	ldr	r7, [r0, #4]
 8009ab6:	429d      	cmp	r5, r3
 8009ab8:	b083      	sub	sp, #12
 8009aba:	8840      	ldrh	r0, [r0, #2]
 8009abc:	684a      	ldr	r2, [r1, #4]
 8009abe:	d149      	bne.n	8009b54 <arm_mat_trans_f32+0xa8>
 8009ac0:	f8b1 e000 	ldrh.w	lr, [r1]
 8009ac4:	4586      	cmp	lr, r0
 8009ac6:	d145      	bne.n	8009b54 <arm_mat_trans_f32+0xa8>
 8009ac8:	4694      	mov	ip, r2
 8009aca:	ea4f 089e 	mov.w	r8, lr, lsr #2
 8009ace:	00a9      	lsls	r1, r5, #2
 8009ad0:	fb08 f901 	mul.w	r9, r8, r1
 8009ad4:	f00e 0e03 	and.w	lr, lr, #3
 8009ad8:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 8009adc:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8009ae0:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8009ae4:	eb02 0a01 	add.w	sl, r2, r1
 8009ae8:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8009aec:	9301      	str	r3, [sp, #4]
 8009aee:	00b6      	lsls	r6, r6, #2
 8009af0:	012d      	lsls	r5, r5, #4
 8009af2:	4663      	mov	r3, ip
 8009af4:	f1b8 0f00 	cmp.w	r8, #0
 8009af8:	d017      	beq.n	8009b2a <arm_mat_trans_f32+0x7e>
 8009afa:	4640      	mov	r0, r8
 8009afc:	f107 0210 	add.w	r2, r7, #16
 8009b00:	f852 4c10 	ldr.w	r4, [r2, #-16]
 8009b04:	3801      	subs	r0, #1
 8009b06:	601c      	str	r4, [r3, #0]
 8009b08:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 8009b0c:	f102 0210 	add.w	r2, r2, #16
 8009b10:	505c      	str	r4, [r3, r1]
 8009b12:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8009b16:	f843 4011 	str.w	r4, [r3, r1, lsl #1]
 8009b1a:	f852 4c14 	ldr.w	r4, [r2, #-20]
 8009b1e:	519c      	str	r4, [r3, r6]
 8009b20:	442b      	add	r3, r5
 8009b22:	d1ed      	bne.n	8009b00 <arm_mat_trans_f32+0x54>
 8009b24:	445f      	add	r7, fp
 8009b26:	eb09 030c 	add.w	r3, r9, ip
 8009b2a:	f1be 0f00 	cmp.w	lr, #0
 8009b2e:	d009      	beq.n	8009b44 <arm_mat_trans_f32+0x98>
 8009b30:	4672      	mov	r2, lr
 8009b32:	4638      	mov	r0, r7
 8009b34:	f850 4b04 	ldr.w	r4, [r0], #4
 8009b38:	3a01      	subs	r2, #1
 8009b3a:	601c      	str	r4, [r3, #0]
 8009b3c:	440b      	add	r3, r1
 8009b3e:	d1f9      	bne.n	8009b34 <arm_mat_trans_f32+0x88>
 8009b40:	9b01      	ldr	r3, [sp, #4]
 8009b42:	441f      	add	r7, r3
 8009b44:	f10c 0c04 	add.w	ip, ip, #4
 8009b48:	45d4      	cmp	ip, sl
 8009b4a:	d1d2      	bne.n	8009af2 <arm_mat_trans_f32+0x46>
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	b003      	add	sp, #12
 8009b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b54:	f06f 0002 	mvn.w	r0, #2
 8009b58:	e7f9      	b.n	8009b4e <arm_mat_trans_f32+0xa2>
 8009b5a:	bf00      	nop

08009b5c <arm_mat_sub_f32>:
 8009b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b60:	6803      	ldr	r3, [r0, #0]
 8009b62:	e9d1 4b00 	ldrd	r4, fp, [r1]
 8009b66:	42a3      	cmp	r3, r4
 8009b68:	b083      	sub	sp, #12
 8009b6a:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8009b6e:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8009b72:	d162      	bne.n	8009c3a <arm_mat_sub_f32+0xde>
 8009b74:	6812      	ldr	r2, [r2, #0]
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d15f      	bne.n	8009c3a <arm_mat_sub_f32+0xde>
 8009b7a:	8803      	ldrh	r3, [r0, #0]
 8009b7c:	8847      	ldrh	r7, [r0, #2]
 8009b7e:	fb07 f703 	mul.w	r7, r7, r3
 8009b82:	08bb      	lsrs	r3, r7, #2
 8009b84:	9301      	str	r3, [sp, #4]
 8009b86:	d035      	beq.n	8009bf4 <arm_mat_sub_f32+0x98>
 8009b88:	4698      	mov	r8, r3
 8009b8a:	f10a 0610 	add.w	r6, sl, #16
 8009b8e:	f10b 0510 	add.w	r5, fp, #16
 8009b92:	f109 0410 	add.w	r4, r9, #16
 8009b96:	f855 1c10 	ldr.w	r1, [r5, #-16]
 8009b9a:	f856 0c10 	ldr.w	r0, [r6, #-16]
 8009b9e:	f7f6 ffe7 	bl	8000b70 <__aeabi_fsub>
 8009ba2:	f844 0c10 	str.w	r0, [r4, #-16]
 8009ba6:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 8009baa:	f856 0c0c 	ldr.w	r0, [r6, #-12]
 8009bae:	f7f6 ffdf 	bl	8000b70 <__aeabi_fsub>
 8009bb2:	f844 0c0c 	str.w	r0, [r4, #-12]
 8009bb6:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8009bba:	f856 0c08 	ldr.w	r0, [r6, #-8]
 8009bbe:	f7f6 ffd7 	bl	8000b70 <__aeabi_fsub>
 8009bc2:	f844 0c08 	str.w	r0, [r4, #-8]
 8009bc6:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8009bca:	f856 0c04 	ldr.w	r0, [r6, #-4]
 8009bce:	f7f6 ffcf 	bl	8000b70 <__aeabi_fsub>
 8009bd2:	f1b8 0801 	subs.w	r8, r8, #1
 8009bd6:	f844 0c04 	str.w	r0, [r4, #-4]
 8009bda:	f105 0510 	add.w	r5, r5, #16
 8009bde:	f106 0610 	add.w	r6, r6, #16
 8009be2:	f104 0410 	add.w	r4, r4, #16
 8009be6:	d1d6      	bne.n	8009b96 <arm_mat_sub_f32+0x3a>
 8009be8:	9b01      	ldr	r3, [sp, #4]
 8009bea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009bee:	44c2      	add	sl, r8
 8009bf0:	44c3      	add	fp, r8
 8009bf2:	44c1      	add	r9, r8
 8009bf4:	f017 0703 	ands.w	r7, r7, #3
 8009bf8:	d01b      	beq.n	8009c32 <arm_mat_sub_f32+0xd6>
 8009bfa:	f8db 1000 	ldr.w	r1, [fp]
 8009bfe:	f8da 0000 	ldr.w	r0, [sl]
 8009c02:	f7f6 ffb5 	bl	8000b70 <__aeabi_fsub>
 8009c06:	3f01      	subs	r7, #1
 8009c08:	f8c9 0000 	str.w	r0, [r9]
 8009c0c:	d011      	beq.n	8009c32 <arm_mat_sub_f32+0xd6>
 8009c0e:	f8db 1004 	ldr.w	r1, [fp, #4]
 8009c12:	f8da 0004 	ldr.w	r0, [sl, #4]
 8009c16:	f7f6 ffab 	bl	8000b70 <__aeabi_fsub>
 8009c1a:	2f01      	cmp	r7, #1
 8009c1c:	f8c9 0004 	str.w	r0, [r9, #4]
 8009c20:	d007      	beq.n	8009c32 <arm_mat_sub_f32+0xd6>
 8009c22:	f8db 1008 	ldr.w	r1, [fp, #8]
 8009c26:	f8da 0008 	ldr.w	r0, [sl, #8]
 8009c2a:	f7f6 ffa1 	bl	8000b70 <__aeabi_fsub>
 8009c2e:	f8c9 0008 	str.w	r0, [r9, #8]
 8009c32:	2000      	movs	r0, #0
 8009c34:	b003      	add	sp, #12
 8009c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c3a:	f06f 0002 	mvn.w	r0, #2
 8009c3e:	e7f9      	b.n	8009c34 <arm_mat_sub_f32+0xd8>

08009c40 <arm_mat_scale_f32>:
 8009c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c44:	e9d2 3900 	ldrd	r3, r9, [r2]
 8009c48:	6804      	ldr	r4, [r0, #0]
 8009c4a:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8009c4e:	429c      	cmp	r4, r3
 8009c50:	d154      	bne.n	8009cfc <arm_mat_scale_f32+0xbc>
 8009c52:	8803      	ldrh	r3, [r0, #0]
 8009c54:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 8009c58:	460e      	mov	r6, r1
 8009c5a:	fb08 f803 	mul.w	r8, r8, r3
 8009c5e:	ea5f 0b98 	movs.w	fp, r8, lsr #2
 8009c62:	d02a      	beq.n	8009cba <arm_mat_scale_f32+0x7a>
 8009c64:	465f      	mov	r7, fp
 8009c66:	f10a 0510 	add.w	r5, sl, #16
 8009c6a:	f109 0410 	add.w	r4, r9, #16
 8009c6e:	f855 0c10 	ldr.w	r0, [r5, #-16]
 8009c72:	4631      	mov	r1, r6
 8009c74:	f7f7 f886 	bl	8000d84 <__aeabi_fmul>
 8009c78:	f844 0c10 	str.w	r0, [r4, #-16]
 8009c7c:	f855 0c0c 	ldr.w	r0, [r5, #-12]
 8009c80:	4631      	mov	r1, r6
 8009c82:	f7f7 f87f 	bl	8000d84 <__aeabi_fmul>
 8009c86:	f844 0c0c 	str.w	r0, [r4, #-12]
 8009c8a:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8009c8e:	4631      	mov	r1, r6
 8009c90:	f7f7 f878 	bl	8000d84 <__aeabi_fmul>
 8009c94:	f844 0c08 	str.w	r0, [r4, #-8]
 8009c98:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8009c9c:	4631      	mov	r1, r6
 8009c9e:	f7f7 f871 	bl	8000d84 <__aeabi_fmul>
 8009ca2:	3f01      	subs	r7, #1
 8009ca4:	f844 0c04 	str.w	r0, [r4, #-4]
 8009ca8:	f105 0510 	add.w	r5, r5, #16
 8009cac:	f104 0410 	add.w	r4, r4, #16
 8009cb0:	d1dd      	bne.n	8009c6e <arm_mat_scale_f32+0x2e>
 8009cb2:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
 8009cb6:	44da      	add	sl, fp
 8009cb8:	44d9      	add	r9, fp
 8009cba:	f018 0803 	ands.w	r8, r8, #3
 8009cbe:	d01a      	beq.n	8009cf6 <arm_mat_scale_f32+0xb6>
 8009cc0:	f8da 0000 	ldr.w	r0, [sl]
 8009cc4:	4631      	mov	r1, r6
 8009cc6:	f7f7 f85d 	bl	8000d84 <__aeabi_fmul>
 8009cca:	f1b8 0801 	subs.w	r8, r8, #1
 8009cce:	f8c9 0000 	str.w	r0, [r9]
 8009cd2:	d010      	beq.n	8009cf6 <arm_mat_scale_f32+0xb6>
 8009cd4:	f8da 0004 	ldr.w	r0, [sl, #4]
 8009cd8:	4631      	mov	r1, r6
 8009cda:	f7f7 f853 	bl	8000d84 <__aeabi_fmul>
 8009cde:	f1b8 0f01 	cmp.w	r8, #1
 8009ce2:	f8c9 0004 	str.w	r0, [r9, #4]
 8009ce6:	d006      	beq.n	8009cf6 <arm_mat_scale_f32+0xb6>
 8009ce8:	f8da 0008 	ldr.w	r0, [sl, #8]
 8009cec:	4631      	mov	r1, r6
 8009cee:	f7f7 f849 	bl	8000d84 <__aeabi_fmul>
 8009cf2:	f8c9 0008 	str.w	r0, [r9, #8]
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cfc:	f06f 0002 	mvn.w	r0, #2
 8009d00:	e7fa      	b.n	8009cf8 <arm_mat_scale_f32+0xb8>
 8009d02:	bf00      	nop

08009d04 <arm_mat_mult_f32>:
 8009d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d08:	8847      	ldrh	r7, [r0, #2]
 8009d0a:	880b      	ldrh	r3, [r1, #0]
 8009d0c:	6844      	ldr	r4, [r0, #4]
 8009d0e:	8800      	ldrh	r0, [r0, #0]
 8009d10:	b08f      	sub	sp, #60	; 0x3c
 8009d12:	42bb      	cmp	r3, r7
 8009d14:	9008      	str	r0, [sp, #32]
 8009d16:	684e      	ldr	r6, [r1, #4]
 8009d18:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8009d1c:	884d      	ldrh	r5, [r1, #2]
 8009d1e:	f040 809f 	bne.w	8009e60 <arm_mat_mult_f32+0x15c>
 8009d22:	8817      	ldrh	r7, [r2, #0]
 8009d24:	4287      	cmp	r7, r0
 8009d26:	f040 809b 	bne.w	8009e60 <arm_mat_mult_f32+0x15c>
 8009d2a:	f8b2 8002 	ldrh.w	r8, [r2, #2]
 8009d2e:	45a8      	cmp	r8, r5
 8009d30:	f040 8096 	bne.w	8009e60 <arm_mat_mult_f32+0x15c>
 8009d34:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8009d38:	910d      	str	r1, [sp, #52]	; 0x34
 8009d3a:	0899      	lsrs	r1, r3, #2
 8009d3c:	fb0b f201 	mul.w	r2, fp, r1
 8009d40:	9105      	str	r1, [sp, #20]
 8009d42:	9207      	str	r2, [sp, #28]
 8009d44:	eb04 1101 	add.w	r1, r4, r1, lsl #4
 8009d48:	ebc8 7288 	rsb	r2, r8, r8, lsl #30
 8009d4c:	ea4f 0788 	mov.w	r7, r8, lsl #2
 8009d50:	0092      	lsls	r2, r2, #2
 8009d52:	9104      	str	r1, [sp, #16]
 8009d54:	f104 0110 	add.w	r1, r4, #16
 8009d58:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8009d5c:	1d30      	adds	r0, r6, #4
 8009d5e:	9103      	str	r1, [sp, #12]
 8009d60:	920b      	str	r2, [sp, #44]	; 0x2c
 8009d62:	eb0c 0107 	add.w	r1, ip, r7
 8009d66:	f003 0203 	and.w	r2, r3, #3
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	900c      	str	r0, [sp, #48]	; 0x30
 8009d6e:	9102      	str	r1, [sp, #8]
 8009d70:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8009d74:	9206      	str	r2, [sp, #24]
 8009d76:	930a      	str	r3, [sp, #40]	; 0x28
 8009d78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d7a:	9a02      	ldr	r2, [sp, #8]
 8009d7c:	9301      	str	r3, [sp, #4]
 8009d7e:	9b03      	ldr	r3, [sp, #12]
 8009d80:	3b10      	subs	r3, #16
 8009d82:	9309      	str	r3, [sp, #36]	; 0x24
 8009d84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d86:	4413      	add	r3, r2
 8009d88:	9300      	str	r3, [sp, #0]
 8009d8a:	9b05      	ldr	r3, [sp, #20]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d05f      	beq.n	8009e50 <arm_mat_mult_f32+0x14c>
 8009d90:	4699      	mov	r9, r3
 8009d92:	4634      	mov	r4, r6
 8009d94:	f04f 0a00 	mov.w	sl, #0
 8009d98:	9d03      	ldr	r5, [sp, #12]
 8009d9a:	6821      	ldr	r1, [r4, #0]
 8009d9c:	f855 0c10 	ldr.w	r0, [r5, #-16]
 8009da0:	f7f6 fff0 	bl	8000d84 <__aeabi_fmul>
 8009da4:	4651      	mov	r1, sl
 8009da6:	f7f6 fee5 	bl	8000b74 <__addsf3>
 8009daa:	4682      	mov	sl, r0
 8009dac:	59e1      	ldr	r1, [r4, r7]
 8009dae:	f855 0c0c 	ldr.w	r0, [r5, #-12]
 8009db2:	f7f6 ffe7 	bl	8000d84 <__aeabi_fmul>
 8009db6:	4651      	mov	r1, sl
 8009db8:	f7f6 fedc 	bl	8000b74 <__addsf3>
 8009dbc:	4682      	mov	sl, r0
 8009dbe:	f854 1017 	ldr.w	r1, [r4, r7, lsl #1]
 8009dc2:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8009dc6:	f7f6 ffdd 	bl	8000d84 <__aeabi_fmul>
 8009dca:	4651      	mov	r1, sl
 8009dcc:	f7f6 fed2 	bl	8000b74 <__addsf3>
 8009dd0:	4682      	mov	sl, r0
 8009dd2:	f854 1008 	ldr.w	r1, [r4, r8]
 8009dd6:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8009dda:	f7f6 ffd3 	bl	8000d84 <__aeabi_fmul>
 8009dde:	4651      	mov	r1, sl
 8009de0:	f7f6 fec8 	bl	8000b74 <__addsf3>
 8009de4:	f1b9 0901 	subs.w	r9, r9, #1
 8009de8:	445c      	add	r4, fp
 8009dea:	4682      	mov	sl, r0
 8009dec:	f105 0510 	add.w	r5, r5, #16
 8009df0:	d1d3      	bne.n	8009d9a <arm_mat_mult_f32+0x96>
 8009df2:	9b07      	ldr	r3, [sp, #28]
 8009df4:	9d04      	ldr	r5, [sp, #16]
 8009df6:	441e      	add	r6, r3
 8009df8:	9b06      	ldr	r3, [sp, #24]
 8009dfa:	b16b      	cbz	r3, 8009e18 <arm_mat_mult_f32+0x114>
 8009dfc:	461c      	mov	r4, r3
 8009dfe:	6831      	ldr	r1, [r6, #0]
 8009e00:	f855 0b04 	ldr.w	r0, [r5], #4
 8009e04:	f7f6 ffbe 	bl	8000d84 <__aeabi_fmul>
 8009e08:	4601      	mov	r1, r0
 8009e0a:	4650      	mov	r0, sl
 8009e0c:	f7f6 feb2 	bl	8000b74 <__addsf3>
 8009e10:	3c01      	subs	r4, #1
 8009e12:	443e      	add	r6, r7
 8009e14:	4682      	mov	sl, r0
 8009e16:	d1f2      	bne.n	8009dfe <arm_mat_mult_f32+0xfa>
 8009e18:	e9dd 3600 	ldrd	r3, r6, [sp]
 8009e1c:	1d32      	adds	r2, r6, #4
 8009e1e:	9201      	str	r2, [sp, #4]
 8009e20:	9a02      	ldr	r2, [sp, #8]
 8009e22:	f843 ab04 	str.w	sl, [r3], #4
 8009e26:	4293      	cmp	r3, r2
 8009e28:	9300      	str	r3, [sp, #0]
 8009e2a:	d1ae      	bne.n	8009d8a <arm_mat_mult_f32+0x86>
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	9a04      	ldr	r2, [sp, #16]
 8009e30:	443b      	add	r3, r7
 8009e32:	4611      	mov	r1, r2
 8009e34:	9302      	str	r3, [sp, #8]
 8009e36:	9a03      	ldr	r2, [sp, #12]
 8009e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e3a:	4419      	add	r1, r3
 8009e3c:	441a      	add	r2, r3
 8009e3e:	9b08      	ldr	r3, [sp, #32]
 8009e40:	9104      	str	r1, [sp, #16]
 8009e42:	3b01      	subs	r3, #1
 8009e44:	9203      	str	r2, [sp, #12]
 8009e46:	9308      	str	r3, [sp, #32]
 8009e48:	d006      	beq.n	8009e58 <arm_mat_mult_f32+0x154>
 8009e4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e4c:	685e      	ldr	r6, [r3, #4]
 8009e4e:	e793      	b.n	8009d78 <arm_mat_mult_f32+0x74>
 8009e50:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009e52:	f04f 0a00 	mov.w	sl, #0
 8009e56:	e7cf      	b.n	8009df8 <arm_mat_mult_f32+0xf4>
 8009e58:	4618      	mov	r0, r3
 8009e5a:	b00f      	add	sp, #60	; 0x3c
 8009e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e60:	f06f 0002 	mvn.w	r0, #2
 8009e64:	b00f      	add	sp, #60	; 0x3c
 8009e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e6a:	bf00      	nop

08009e6c <arm_mat_inverse_f32>:
 8009e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e70:	8804      	ldrh	r4, [r0, #0]
 8009e72:	8842      	ldrh	r2, [r0, #2]
 8009e74:	6843      	ldr	r3, [r0, #4]
 8009e76:	684d      	ldr	r5, [r1, #4]
 8009e78:	b095      	sub	sp, #84	; 0x54
 8009e7a:	4294      	cmp	r4, r2
 8009e7c:	9404      	str	r4, [sp, #16]
 8009e7e:	920b      	str	r2, [sp, #44]	; 0x2c
 8009e80:	9309      	str	r3, [sp, #36]	; 0x24
 8009e82:	9512      	str	r5, [sp, #72]	; 0x48
 8009e84:	f040 8137 	bne.w	800a0f6 <arm_mat_inverse_f32+0x28a>
 8009e88:	880a      	ldrh	r2, [r1, #0]
 8009e8a:	884b      	ldrh	r3, [r1, #2]
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	f040 8132 	bne.w	800a0f6 <arm_mat_inverse_f32+0x28a>
 8009e92:	429c      	cmp	r4, r3
 8009e94:	f040 812f 	bne.w	800a0f6 <arm_mat_inverse_f32+0x28a>
 8009e98:	9013      	str	r0, [sp, #76]	; 0x4c
 8009e9a:	b1fc      	cbz	r4, 8009edc <arm_mat_inverse_f32+0x70>
 8009e9c:	4628      	mov	r0, r5
 8009e9e:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 8009ea2:	1e66      	subs	r6, r4, #1
 8009ea4:	f840 7b04 	str.w	r7, [r0], #4
 8009ea8:	d018      	beq.n	8009edc <arm_mat_inverse_f32+0x70>
 8009eaa:	2501      	movs	r5, #1
 8009eac:	00b2      	lsls	r2, r6, #2
 8009eae:	2100      	movs	r1, #0
 8009eb0:	00ac      	lsls	r4, r5, #2
 8009eb2:	eb00 0802 	add.w	r8, r0, r2
 8009eb6:	f000 fa07 	bl	800a2c8 <memset>
 8009eba:	2d00      	cmp	r5, #0
 8009ebc:	f000 8120 	beq.w	800a100 <arm_mat_inverse_f32+0x294>
 8009ec0:	4622      	mov	r2, r4
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	4640      	mov	r0, r8
 8009ec6:	f000 f9ff 	bl	800a2c8 <memset>
 8009eca:	4444      	add	r4, r8
 8009ecc:	3e01      	subs	r6, #1
 8009ece:	f848 7025 	str.w	r7, [r8, r5, lsl #2]
 8009ed2:	f104 0004 	add.w	r0, r4, #4
 8009ed6:	f105 0501 	add.w	r5, r5, #1
 8009eda:	d1e7      	bne.n	8009eac <arm_mat_inverse_f32+0x40>
 8009edc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	f000 8100 	beq.w	800a0e4 <arm_mat_inverse_f32+0x278>
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	009a      	lsls	r2, r3, #2
 8009ee8:	00db      	lsls	r3, r3, #3
 8009eea:	3304      	adds	r3, #4
 8009eec:	9102      	str	r1, [sp, #8]
 8009eee:	910f      	str	r1, [sp, #60]	; 0x3c
 8009ef0:	1d11      	adds	r1, r2, #4
 8009ef2:	9111      	str	r1, [sp, #68]	; 0x44
 8009ef4:	9310      	str	r3, [sp, #64]	; 0x40
 8009ef6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009efa:	9203      	str	r2, [sp, #12]
 8009efc:	e9cd 3107 	strd	r3, r1, [sp, #28]
 8009f00:	eb01 0a02 	add.w	sl, r1, r2
 8009f04:	930a      	str	r3, [sp, #40]	; 0x28
 8009f06:	9b07      	ldr	r3, [sp, #28]
 8009f08:	2100      	movs	r1, #0
 8009f0a:	f8d3 b000 	ldr.w	fp, [r3]
 8009f0e:	4658      	mov	r0, fp
 8009f10:	f7f7 f8cc 	bl	80010ac <__aeabi_fcmpeq>
 8009f14:	2800      	cmp	r0, #0
 8009f16:	f040 8084 	bne.w	800a022 <arm_mat_inverse_f32+0x1b6>
 8009f1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f1c:	9b02      	ldr	r3, [sp, #8]
 8009f1e:	1ad5      	subs	r5, r2, r3
 8009f20:	3301      	adds	r3, #1
 8009f22:	930e      	str	r3, [sp, #56]	; 0x38
 8009f24:	9a03      	ldr	r2, [sp, #12]
 8009f26:	9b08      	ldr	r3, [sp, #32]
 8009f28:	4413      	add	r3, r2
 8009f2a:	930d      	str	r3, [sp, #52]	; 0x34
 8009f2c:	b155      	cbz	r5, 8009f44 <arm_mat_inverse_f32+0xd8>
 8009f2e:	2400      	movs	r4, #0
 8009f30:	9e07      	ldr	r6, [sp, #28]
 8009f32:	6830      	ldr	r0, [r6, #0]
 8009f34:	4659      	mov	r1, fp
 8009f36:	f7f6 ffd9 	bl	8000eec <__aeabi_fdiv>
 8009f3a:	3401      	adds	r4, #1
 8009f3c:	42ac      	cmp	r4, r5
 8009f3e:	f846 0b04 	str.w	r0, [r6], #4
 8009f42:	d1f6      	bne.n	8009f32 <arm_mat_inverse_f32+0xc6>
 8009f44:	9c08      	ldr	r4, [sp, #32]
 8009f46:	2600      	movs	r6, #0
 8009f48:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009f4a:	e000      	b.n	8009f4e <arm_mat_inverse_f32+0xe2>
 8009f4c:	461e      	mov	r6, r3
 8009f4e:	6820      	ldr	r0, [r4, #0]
 8009f50:	4659      	mov	r1, fp
 8009f52:	f7f6 ffcb 	bl	8000eec <__aeabi_fdiv>
 8009f56:	1c73      	adds	r3, r6, #1
 8009f58:	429f      	cmp	r7, r3
 8009f5a:	f844 0b04 	str.w	r0, [r4], #4
 8009f5e:	d1f5      	bne.n	8009f4c <arm_mat_inverse_f32+0xe0>
 8009f60:	9b04      	ldr	r3, [sp, #16]
 8009f62:	960c      	str	r6, [sp, #48]	; 0x30
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d03f      	beq.n	8009fe8 <arm_mat_inverse_f32+0x17c>
 8009f68:	2700      	movs	r7, #0
 8009f6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f6c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009f6e:	9301      	str	r3, [sp, #4]
 8009f70:	00ab      	lsls	r3, r5, #2
 8009f72:	9306      	str	r3, [sp, #24]
 8009f74:	9b02      	ldr	r3, [sp, #8]
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	9305      	str	r3, [sp, #20]
 8009f7a:	9b02      	ldr	r3, [sp, #8]
 8009f7c:	42bb      	cmp	r3, r7
 8009f7e:	d049      	beq.n	800a014 <arm_mat_inverse_f32+0x1a8>
 8009f80:	f8d6 b000 	ldr.w	fp, [r6]
 8009f84:	b1ad      	cbz	r5, 8009fb2 <arm_mat_inverse_f32+0x146>
 8009f86:	f04f 0900 	mov.w	r9, #0
 8009f8a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8009f8e:	1f34      	subs	r4, r6, #4
 8009f90:	f858 1b04 	ldr.w	r1, [r8], #4
 8009f94:	4658      	mov	r0, fp
 8009f96:	f7f6 fef5 	bl	8000d84 <__aeabi_fmul>
 8009f9a:	4601      	mov	r1, r0
 8009f9c:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8009fa0:	f7f6 fde6 	bl	8000b70 <__aeabi_fsub>
 8009fa4:	f109 0901 	add.w	r9, r9, #1
 8009fa8:	45a9      	cmp	r9, r5
 8009faa:	6020      	str	r0, [r4, #0]
 8009fac:	d1f0      	bne.n	8009f90 <arm_mat_inverse_f32+0x124>
 8009fae:	9b06      	ldr	r3, [sp, #24]
 8009fb0:	441e      	add	r6, r3
 8009fb2:	9b01      	ldr	r3, [sp, #4]
 8009fb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009fb8:	1f1c      	subs	r4, r3, #4
 8009fba:	f859 1b04 	ldr.w	r1, [r9], #4
 8009fbe:	4658      	mov	r0, fp
 8009fc0:	f7f6 fee0 	bl	8000d84 <__aeabi_fmul>
 8009fc4:	4601      	mov	r1, r0
 8009fc6:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8009fca:	f7f6 fdd1 	bl	8000b70 <__aeabi_fsub>
 8009fce:	45d1      	cmp	r9, sl
 8009fd0:	6020      	str	r0, [r4, #0]
 8009fd2:	d1f2      	bne.n	8009fba <arm_mat_inverse_f32+0x14e>
 8009fd4:	9b01      	ldr	r3, [sp, #4]
 8009fd6:	9a03      	ldr	r2, [sp, #12]
 8009fd8:	4413      	add	r3, r2
 8009fda:	9301      	str	r3, [sp, #4]
 8009fdc:	9b05      	ldr	r3, [sp, #20]
 8009fde:	3701      	adds	r7, #1
 8009fe0:	441e      	add	r6, r3
 8009fe2:	9b04      	ldr	r3, [sp, #16]
 8009fe4:	42bb      	cmp	r3, r7
 8009fe6:	d1c8      	bne.n	8009f7a <arm_mat_inverse_f32+0x10e>
 8009fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009fec:	3304      	adds	r3, #4
 8009fee:	9309      	str	r3, [sp, #36]	; 0x24
 8009ff0:	9b07      	ldr	r3, [sp, #28]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	9307      	str	r3, [sp, #28]
 8009ff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ff8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ffa:	9308      	str	r3, [sp, #32]
 8009ffc:	9b03      	ldr	r3, [sp, #12]
 8009ffe:	449a      	add	sl, r3
 800a000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a002:	4413      	add	r3, r2
 800a004:	930a      	str	r3, [sp, #40]	; 0x28
 800a006:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a008:	9b02      	ldr	r3, [sp, #8]
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d045      	beq.n	800a09a <arm_mat_inverse_f32+0x22e>
 800a00e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a010:	9302      	str	r3, [sp, #8]
 800a012:	e778      	b.n	8009f06 <arm_mat_inverse_f32+0x9a>
 800a014:	9b06      	ldr	r3, [sp, #24]
 800a016:	9a03      	ldr	r2, [sp, #12]
 800a018:	441e      	add	r6, r3
 800a01a:	9b01      	ldr	r3, [sp, #4]
 800a01c:	4413      	add	r3, r2
 800a01e:	9301      	str	r3, [sp, #4]
 800a020:	e7dc      	b.n	8009fdc <arm_mat_inverse_f32+0x170>
 800a022:	9b02      	ldr	r3, [sp, #8]
 800a024:	9a04      	ldr	r2, [sp, #16]
 800a026:	3301      	adds	r3, #1
 800a028:	4293      	cmp	r3, r2
 800a02a:	930e      	str	r3, [sp, #56]	; 0x38
 800a02c:	d206      	bcs.n	800a03c <arm_mat_inverse_f32+0x1d0>
 800a02e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a030:	2100      	movs	r1, #0
 800a032:	6820      	ldr	r0, [r4, #0]
 800a034:	f7f7 f83a 	bl	80010ac <__aeabi_fcmpeq>
 800a038:	4623      	mov	r3, r4
 800a03a:	b150      	cbz	r0, 800a052 <arm_mat_inverse_f32+0x1e6>
 800a03c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d150      	bne.n	800a0e4 <arm_mat_inverse_f32+0x278>
 800a042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a044:	9a02      	ldr	r2, [sp, #8]
 800a046:	1a9d      	subs	r5, r3, r2
 800a048:	9b08      	ldr	r3, [sp, #32]
 800a04a:	9a03      	ldr	r2, [sp, #12]
 800a04c:	4413      	add	r3, r2
 800a04e:	930d      	str	r3, [sp, #52]	; 0x34
 800a050:	e76c      	b.n	8009f2c <arm_mat_inverse_f32+0xc0>
 800a052:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a054:	9902      	ldr	r1, [sp, #8]
 800a056:	1a55      	subs	r5, r2, r1
 800a058:	d009      	beq.n	800a06e <arm_mat_inverse_f32+0x202>
 800a05a:	9a07      	ldr	r2, [sp, #28]
 800a05c:	6819      	ldr	r1, [r3, #0]
 800a05e:	6814      	ldr	r4, [r2, #0]
 800a060:	3001      	adds	r0, #1
 800a062:	4285      	cmp	r5, r0
 800a064:	f843 4b04 	str.w	r4, [r3], #4
 800a068:	f842 1b04 	str.w	r1, [r2], #4
 800a06c:	d1f6      	bne.n	800a05c <arm_mat_inverse_f32+0x1f0>
 800a06e:	9a08      	ldr	r2, [sp, #32]
 800a070:	9b03      	ldr	r3, [sp, #12]
 800a072:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a074:	18d3      	adds	r3, r2, r3
 800a076:	930d      	str	r3, [sp, #52]	; 0x34
 800a078:	4619      	mov	r1, r3
 800a07a:	2300      	movs	r3, #0
 800a07c:	6808      	ldr	r0, [r1, #0]
 800a07e:	6814      	ldr	r4, [r2, #0]
 800a080:	3301      	adds	r3, #1
 800a082:	429e      	cmp	r6, r3
 800a084:	f841 4b04 	str.w	r4, [r1], #4
 800a088:	f842 0b04 	str.w	r0, [r2], #4
 800a08c:	d1f6      	bne.n	800a07c <arm_mat_inverse_f32+0x210>
 800a08e:	9b07      	ldr	r3, [sp, #28]
 800a090:	f8d3 b000 	ldr.w	fp, [r3]
 800a094:	2301      	movs	r3, #1
 800a096:	930f      	str	r3, [sp, #60]	; 0x3c
 800a098:	e748      	b.n	8009f2c <arm_mat_inverse_f32+0xc0>
 800a09a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d026      	beq.n	800a0ee <arm_mat_inverse_f32+0x282>
 800a0a0:	4658      	mov	r0, fp
 800a0a2:	2100      	movs	r1, #0
 800a0a4:	f7f7 f802 	bl	80010ac <__aeabi_fcmpeq>
 800a0a8:	b910      	cbnz	r0, 800a0b0 <arm_mat_inverse_f32+0x244>
 800a0aa:	b015      	add	sp, #84	; 0x54
 800a0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b0:	9b04      	ldr	r3, [sp, #16]
 800a0b2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a0b4:	fb04 f403 	mul.w	r4, r4, r3
 800a0b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a0ba:	685d      	ldr	r5, [r3, #4]
 800a0bc:	b194      	cbz	r4, 800a0e4 <arm_mat_inverse_f32+0x278>
 800a0be:	2100      	movs	r1, #0
 800a0c0:	6828      	ldr	r0, [r5, #0]
 800a0c2:	f7f6 fff3 	bl	80010ac <__aeabi_fcmpeq>
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	d0ef      	beq.n	800a0aa <arm_mat_inverse_f32+0x23e>
 800a0ca:	2600      	movs	r6, #0
 800a0cc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800a0ce:	e006      	b.n	800a0de <arm_mat_inverse_f32+0x272>
 800a0d0:	4631      	mov	r1, r6
 800a0d2:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800a0d6:	f7f6 ffe9 	bl	80010ac <__aeabi_fcmpeq>
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	d0e5      	beq.n	800a0aa <arm_mat_inverse_f32+0x23e>
 800a0de:	3701      	adds	r7, #1
 800a0e0:	42bc      	cmp	r4, r7
 800a0e2:	d1f5      	bne.n	800a0d0 <arm_mat_inverse_f32+0x264>
 800a0e4:	f06f 0004 	mvn.w	r0, #4
 800a0e8:	b015      	add	sp, #84	; 0x54
 800a0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ee:	2000      	movs	r0, #0
 800a0f0:	b015      	add	sp, #84	; 0x54
 800a0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f6:	f06f 0002 	mvn.w	r0, #2
 800a0fa:	b015      	add	sp, #84	; 0x54
 800a0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a100:	4640      	mov	r0, r8
 800a102:	3e01      	subs	r6, #1
 800a104:	f840 7b04 	str.w	r7, [r0], #4
 800a108:	f47f aecf 	bne.w	8009eaa <arm_mat_inverse_f32+0x3e>
 800a10c:	e6e6      	b.n	8009edc <arm_mat_inverse_f32+0x70>
 800a10e:	bf00      	nop

0800a110 <arm_mat_init_f32>:
 800a110:	8001      	strh	r1, [r0, #0]
 800a112:	8042      	strh	r2, [r0, #2]
 800a114:	6043      	str	r3, [r0, #4]
 800a116:	4770      	bx	lr

0800a118 <arm_mat_add_f32>:
 800a118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a11c:	6803      	ldr	r3, [r0, #0]
 800a11e:	e9d1 4b00 	ldrd	r4, fp, [r1]
 800a122:	42a3      	cmp	r3, r4
 800a124:	b083      	sub	sp, #12
 800a126:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800a12a:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800a12e:	d162      	bne.n	800a1f6 <arm_mat_add_f32+0xde>
 800a130:	6812      	ldr	r2, [r2, #0]
 800a132:	4293      	cmp	r3, r2
 800a134:	d15f      	bne.n	800a1f6 <arm_mat_add_f32+0xde>
 800a136:	8803      	ldrh	r3, [r0, #0]
 800a138:	8847      	ldrh	r7, [r0, #2]
 800a13a:	fb07 f703 	mul.w	r7, r7, r3
 800a13e:	08bb      	lsrs	r3, r7, #2
 800a140:	9301      	str	r3, [sp, #4]
 800a142:	d035      	beq.n	800a1b0 <arm_mat_add_f32+0x98>
 800a144:	4698      	mov	r8, r3
 800a146:	f10a 0610 	add.w	r6, sl, #16
 800a14a:	f10b 0510 	add.w	r5, fp, #16
 800a14e:	f109 0410 	add.w	r4, r9, #16
 800a152:	f855 1c10 	ldr.w	r1, [r5, #-16]
 800a156:	f856 0c10 	ldr.w	r0, [r6, #-16]
 800a15a:	f7f6 fd0b 	bl	8000b74 <__addsf3>
 800a15e:	f844 0c10 	str.w	r0, [r4, #-16]
 800a162:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 800a166:	f856 0c0c 	ldr.w	r0, [r6, #-12]
 800a16a:	f7f6 fd03 	bl	8000b74 <__addsf3>
 800a16e:	f844 0c0c 	str.w	r0, [r4, #-12]
 800a172:	f855 1c08 	ldr.w	r1, [r5, #-8]
 800a176:	f856 0c08 	ldr.w	r0, [r6, #-8]
 800a17a:	f7f6 fcfb 	bl	8000b74 <__addsf3>
 800a17e:	f844 0c08 	str.w	r0, [r4, #-8]
 800a182:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800a186:	f856 0c04 	ldr.w	r0, [r6, #-4]
 800a18a:	f7f6 fcf3 	bl	8000b74 <__addsf3>
 800a18e:	f1b8 0801 	subs.w	r8, r8, #1
 800a192:	f844 0c04 	str.w	r0, [r4, #-4]
 800a196:	f105 0510 	add.w	r5, r5, #16
 800a19a:	f106 0610 	add.w	r6, r6, #16
 800a19e:	f104 0410 	add.w	r4, r4, #16
 800a1a2:	d1d6      	bne.n	800a152 <arm_mat_add_f32+0x3a>
 800a1a4:	9b01      	ldr	r3, [sp, #4]
 800a1a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a1aa:	44c2      	add	sl, r8
 800a1ac:	44c3      	add	fp, r8
 800a1ae:	44c1      	add	r9, r8
 800a1b0:	f017 0703 	ands.w	r7, r7, #3
 800a1b4:	d01b      	beq.n	800a1ee <arm_mat_add_f32+0xd6>
 800a1b6:	f8da 1000 	ldr.w	r1, [sl]
 800a1ba:	f8db 0000 	ldr.w	r0, [fp]
 800a1be:	f7f6 fcd9 	bl	8000b74 <__addsf3>
 800a1c2:	3f01      	subs	r7, #1
 800a1c4:	f8c9 0000 	str.w	r0, [r9]
 800a1c8:	d011      	beq.n	800a1ee <arm_mat_add_f32+0xd6>
 800a1ca:	f8db 1004 	ldr.w	r1, [fp, #4]
 800a1ce:	f8da 0004 	ldr.w	r0, [sl, #4]
 800a1d2:	f7f6 fccf 	bl	8000b74 <__addsf3>
 800a1d6:	2f01      	cmp	r7, #1
 800a1d8:	f8c9 0004 	str.w	r0, [r9, #4]
 800a1dc:	d007      	beq.n	800a1ee <arm_mat_add_f32+0xd6>
 800a1de:	f8db 1008 	ldr.w	r1, [fp, #8]
 800a1e2:	f8da 0008 	ldr.w	r0, [sl, #8]
 800a1e6:	f7f6 fcc5 	bl	8000b74 <__addsf3>
 800a1ea:	f8c9 0008 	str.w	r0, [r9, #8]
 800a1ee:	2000      	movs	r0, #0
 800a1f0:	b003      	add	sp, #12
 800a1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f6:	f06f 0002 	mvn.w	r0, #2
 800a1fa:	e7f9      	b.n	800a1f0 <arm_mat_add_f32+0xd8>

0800a1fc <atof>:
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	f000 bee3 	b.w	800afc8 <strtod>

0800a202 <atoi>:
 800a202:	220a      	movs	r2, #10
 800a204:	2100      	movs	r1, #0
 800a206:	f000 bf7f 	b.w	800b108 <strtol>
	...

0800a20c <__errno>:
 800a20c:	4b01      	ldr	r3, [pc, #4]	; (800a214 <__errno+0x8>)
 800a20e:	6818      	ldr	r0, [r3, #0]
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop
 800a214:	200001b4 	.word	0x200001b4

0800a218 <__libc_init_array>:
 800a218:	b570      	push	{r4, r5, r6, lr}
 800a21a:	2500      	movs	r5, #0
 800a21c:	4e0c      	ldr	r6, [pc, #48]	; (800a250 <__libc_init_array+0x38>)
 800a21e:	4c0d      	ldr	r4, [pc, #52]	; (800a254 <__libc_init_array+0x3c>)
 800a220:	1ba4      	subs	r4, r4, r6
 800a222:	10a4      	asrs	r4, r4, #2
 800a224:	42a5      	cmp	r5, r4
 800a226:	d109      	bne.n	800a23c <__libc_init_array+0x24>
 800a228:	f003 feb6 	bl	800df98 <_init>
 800a22c:	2500      	movs	r5, #0
 800a22e:	4e0a      	ldr	r6, [pc, #40]	; (800a258 <__libc_init_array+0x40>)
 800a230:	4c0a      	ldr	r4, [pc, #40]	; (800a25c <__libc_init_array+0x44>)
 800a232:	1ba4      	subs	r4, r4, r6
 800a234:	10a4      	asrs	r4, r4, #2
 800a236:	42a5      	cmp	r5, r4
 800a238:	d105      	bne.n	800a246 <__libc_init_array+0x2e>
 800a23a:	bd70      	pop	{r4, r5, r6, pc}
 800a23c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a240:	4798      	blx	r3
 800a242:	3501      	adds	r5, #1
 800a244:	e7ee      	b.n	800a224 <__libc_init_array+0xc>
 800a246:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a24a:	4798      	blx	r3
 800a24c:	3501      	adds	r5, #1
 800a24e:	e7f2      	b.n	800a236 <__libc_init_array+0x1e>
 800a250:	0800f1e8 	.word	0x0800f1e8
 800a254:	0800f1e8 	.word	0x0800f1e8
 800a258:	0800f1e8 	.word	0x0800f1e8
 800a25c:	0800f1ec 	.word	0x0800f1ec

0800a260 <__itoa>:
 800a260:	1e93      	subs	r3, r2, #2
 800a262:	2b22      	cmp	r3, #34	; 0x22
 800a264:	b510      	push	{r4, lr}
 800a266:	460c      	mov	r4, r1
 800a268:	d904      	bls.n	800a274 <__itoa+0x14>
 800a26a:	2300      	movs	r3, #0
 800a26c:	461c      	mov	r4, r3
 800a26e:	700b      	strb	r3, [r1, #0]
 800a270:	4620      	mov	r0, r4
 800a272:	bd10      	pop	{r4, pc}
 800a274:	2a0a      	cmp	r2, #10
 800a276:	d109      	bne.n	800a28c <__itoa+0x2c>
 800a278:	2800      	cmp	r0, #0
 800a27a:	da07      	bge.n	800a28c <__itoa+0x2c>
 800a27c:	232d      	movs	r3, #45	; 0x2d
 800a27e:	700b      	strb	r3, [r1, #0]
 800a280:	2101      	movs	r1, #1
 800a282:	4240      	negs	r0, r0
 800a284:	4421      	add	r1, r4
 800a286:	f000 ff55 	bl	800b134 <__utoa>
 800a28a:	e7f1      	b.n	800a270 <__itoa+0x10>
 800a28c:	2100      	movs	r1, #0
 800a28e:	e7f9      	b.n	800a284 <__itoa+0x24>

0800a290 <itoa>:
 800a290:	f7ff bfe6 	b.w	800a260 <__itoa>

0800a294 <memcmp>:
 800a294:	b530      	push	{r4, r5, lr}
 800a296:	2400      	movs	r4, #0
 800a298:	42a2      	cmp	r2, r4
 800a29a:	d101      	bne.n	800a2a0 <memcmp+0xc>
 800a29c:	2000      	movs	r0, #0
 800a29e:	e007      	b.n	800a2b0 <memcmp+0x1c>
 800a2a0:	5d03      	ldrb	r3, [r0, r4]
 800a2a2:	3401      	adds	r4, #1
 800a2a4:	190d      	adds	r5, r1, r4
 800a2a6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800a2aa:	42ab      	cmp	r3, r5
 800a2ac:	d0f4      	beq.n	800a298 <memcmp+0x4>
 800a2ae:	1b58      	subs	r0, r3, r5
 800a2b0:	bd30      	pop	{r4, r5, pc}

0800a2b2 <memcpy>:
 800a2b2:	b510      	push	{r4, lr}
 800a2b4:	1e43      	subs	r3, r0, #1
 800a2b6:	440a      	add	r2, r1
 800a2b8:	4291      	cmp	r1, r2
 800a2ba:	d100      	bne.n	800a2be <memcpy+0xc>
 800a2bc:	bd10      	pop	{r4, pc}
 800a2be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2c6:	e7f7      	b.n	800a2b8 <memcpy+0x6>

0800a2c8 <memset>:
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	4402      	add	r2, r0
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d100      	bne.n	800a2d2 <memset+0xa>
 800a2d0:	4770      	bx	lr
 800a2d2:	f803 1b01 	strb.w	r1, [r3], #1
 800a2d6:	e7f9      	b.n	800a2cc <memset+0x4>

0800a2d8 <siscanf>:
 800a2d8:	b40e      	push	{r1, r2, r3}
 800a2da:	f44f 7201 	mov.w	r2, #516	; 0x204
 800a2de:	b530      	push	{r4, r5, lr}
 800a2e0:	b09c      	sub	sp, #112	; 0x70
 800a2e2:	ac1f      	add	r4, sp, #124	; 0x7c
 800a2e4:	f854 5b04 	ldr.w	r5, [r4], #4
 800a2e8:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a2ec:	9002      	str	r0, [sp, #8]
 800a2ee:	9006      	str	r0, [sp, #24]
 800a2f0:	f7f5 ff2e 	bl	8000150 <strlen>
 800a2f4:	4b0b      	ldr	r3, [pc, #44]	; (800a324 <siscanf+0x4c>)
 800a2f6:	9003      	str	r0, [sp, #12]
 800a2f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2fe:	9314      	str	r3, [sp, #80]	; 0x50
 800a300:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a304:	9007      	str	r0, [sp, #28]
 800a306:	4808      	ldr	r0, [pc, #32]	; (800a328 <siscanf+0x50>)
 800a308:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a30c:	462a      	mov	r2, r5
 800a30e:	4623      	mov	r3, r4
 800a310:	a902      	add	r1, sp, #8
 800a312:	6800      	ldr	r0, [r0, #0]
 800a314:	9401      	str	r4, [sp, #4]
 800a316:	f001 ff53 	bl	800c1c0 <__ssvfiscanf_r>
 800a31a:	b01c      	add	sp, #112	; 0x70
 800a31c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a320:	b003      	add	sp, #12
 800a322:	4770      	bx	lr
 800a324:	0800a32d 	.word	0x0800a32d
 800a328:	200001b4 	.word	0x200001b4

0800a32c <__seofread>:
 800a32c:	2000      	movs	r0, #0
 800a32e:	4770      	bx	lr

0800a330 <stpcpy>:
 800a330:	4603      	mov	r3, r0
 800a332:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a336:	4618      	mov	r0, r3
 800a338:	f803 2b01 	strb.w	r2, [r3], #1
 800a33c:	2a00      	cmp	r2, #0
 800a33e:	d1f8      	bne.n	800a332 <stpcpy+0x2>
 800a340:	4770      	bx	lr

0800a342 <strcpy>:
 800a342:	4603      	mov	r3, r0
 800a344:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a348:	f803 2b01 	strb.w	r2, [r3], #1
 800a34c:	2a00      	cmp	r2, #0
 800a34e:	d1f9      	bne.n	800a344 <strcpy+0x2>
 800a350:	4770      	bx	lr

0800a352 <strstr>:
 800a352:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a354:	7803      	ldrb	r3, [r0, #0]
 800a356:	b17b      	cbz	r3, 800a378 <strstr+0x26>
 800a358:	4604      	mov	r4, r0
 800a35a:	7823      	ldrb	r3, [r4, #0]
 800a35c:	4620      	mov	r0, r4
 800a35e:	1c66      	adds	r6, r4, #1
 800a360:	b17b      	cbz	r3, 800a382 <strstr+0x30>
 800a362:	1e4a      	subs	r2, r1, #1
 800a364:	1e63      	subs	r3, r4, #1
 800a366:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800a36a:	b14d      	cbz	r5, 800a380 <strstr+0x2e>
 800a36c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a370:	4634      	mov	r4, r6
 800a372:	42af      	cmp	r7, r5
 800a374:	d0f7      	beq.n	800a366 <strstr+0x14>
 800a376:	e7f0      	b.n	800a35a <strstr+0x8>
 800a378:	780b      	ldrb	r3, [r1, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	bf18      	it	ne
 800a37e:	2000      	movne	r0, #0
 800a380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a382:	4618      	mov	r0, r3
 800a384:	e7fc      	b.n	800a380 <strstr+0x2e>

0800a386 <sulp>:
 800a386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a38a:	460f      	mov	r7, r1
 800a38c:	4690      	mov	r8, r2
 800a38e:	f001 fd27 	bl	800bde0 <__ulp>
 800a392:	4604      	mov	r4, r0
 800a394:	460d      	mov	r5, r1
 800a396:	f1b8 0f00 	cmp.w	r8, #0
 800a39a:	d011      	beq.n	800a3c0 <sulp+0x3a>
 800a39c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a3a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	dd0b      	ble.n	800a3c0 <sulp+0x3a>
 800a3a8:	2400      	movs	r4, #0
 800a3aa:	051b      	lsls	r3, r3, #20
 800a3ac:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a3b0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a3b4:	4622      	mov	r2, r4
 800a3b6:	462b      	mov	r3, r5
 800a3b8:	f7f6 f88e 	bl	80004d8 <__aeabi_dmul>
 800a3bc:	4604      	mov	r4, r0
 800a3be:	460d      	mov	r5, r1
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	4629      	mov	r1, r5
 800a3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a3c8 <_strtod_l>:
 800a3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3cc:	461f      	mov	r7, r3
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	b0a1      	sub	sp, #132	; 0x84
 800a3d2:	4683      	mov	fp, r0
 800a3d4:	4638      	mov	r0, r7
 800a3d6:	460e      	mov	r6, r1
 800a3d8:	9217      	str	r2, [sp, #92]	; 0x5c
 800a3da:	931c      	str	r3, [sp, #112]	; 0x70
 800a3dc:	f001 fa22 	bl	800b824 <__localeconv_l>
 800a3e0:	4680      	mov	r8, r0
 800a3e2:	6800      	ldr	r0, [r0, #0]
 800a3e4:	f7f5 feb4 	bl	8000150 <strlen>
 800a3e8:	f04f 0900 	mov.w	r9, #0
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	f04f 0a00 	mov.w	sl, #0
 800a3f2:	961b      	str	r6, [sp, #108]	; 0x6c
 800a3f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a3f6:	781a      	ldrb	r2, [r3, #0]
 800a3f8:	2a0d      	cmp	r2, #13
 800a3fa:	d832      	bhi.n	800a462 <_strtod_l+0x9a>
 800a3fc:	2a09      	cmp	r2, #9
 800a3fe:	d236      	bcs.n	800a46e <_strtod_l+0xa6>
 800a400:	2a00      	cmp	r2, #0
 800a402:	d03e      	beq.n	800a482 <_strtod_l+0xba>
 800a404:	2300      	movs	r3, #0
 800a406:	930d      	str	r3, [sp, #52]	; 0x34
 800a408:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a40a:	782b      	ldrb	r3, [r5, #0]
 800a40c:	2b30      	cmp	r3, #48	; 0x30
 800a40e:	f040 80ac 	bne.w	800a56a <_strtod_l+0x1a2>
 800a412:	786b      	ldrb	r3, [r5, #1]
 800a414:	2b58      	cmp	r3, #88	; 0x58
 800a416:	d001      	beq.n	800a41c <_strtod_l+0x54>
 800a418:	2b78      	cmp	r3, #120	; 0x78
 800a41a:	d167      	bne.n	800a4ec <_strtod_l+0x124>
 800a41c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a41e:	9702      	str	r7, [sp, #8]
 800a420:	9301      	str	r3, [sp, #4]
 800a422:	ab1c      	add	r3, sp, #112	; 0x70
 800a424:	9300      	str	r3, [sp, #0]
 800a426:	4a89      	ldr	r2, [pc, #548]	; (800a64c <_strtod_l+0x284>)
 800a428:	ab1d      	add	r3, sp, #116	; 0x74
 800a42a:	a91b      	add	r1, sp, #108	; 0x6c
 800a42c:	4658      	mov	r0, fp
 800a42e:	f000 ff0f 	bl	800b250 <__gethex>
 800a432:	f010 0407 	ands.w	r4, r0, #7
 800a436:	4606      	mov	r6, r0
 800a438:	d005      	beq.n	800a446 <_strtod_l+0x7e>
 800a43a:	2c06      	cmp	r4, #6
 800a43c:	d12b      	bne.n	800a496 <_strtod_l+0xce>
 800a43e:	2300      	movs	r3, #0
 800a440:	3501      	adds	r5, #1
 800a442:	951b      	str	r5, [sp, #108]	; 0x6c
 800a444:	930d      	str	r3, [sp, #52]	; 0x34
 800a446:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a448:	2b00      	cmp	r3, #0
 800a44a:	f040 85a6 	bne.w	800af9a <_strtod_l+0xbd2>
 800a44e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a450:	b1e3      	cbz	r3, 800a48c <_strtod_l+0xc4>
 800a452:	464a      	mov	r2, r9
 800a454:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800a458:	4610      	mov	r0, r2
 800a45a:	4619      	mov	r1, r3
 800a45c:	b021      	add	sp, #132	; 0x84
 800a45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a462:	2a2b      	cmp	r2, #43	; 0x2b
 800a464:	d015      	beq.n	800a492 <_strtod_l+0xca>
 800a466:	2a2d      	cmp	r2, #45	; 0x2d
 800a468:	d004      	beq.n	800a474 <_strtod_l+0xac>
 800a46a:	2a20      	cmp	r2, #32
 800a46c:	d1ca      	bne.n	800a404 <_strtod_l+0x3c>
 800a46e:	3301      	adds	r3, #1
 800a470:	931b      	str	r3, [sp, #108]	; 0x6c
 800a472:	e7bf      	b.n	800a3f4 <_strtod_l+0x2c>
 800a474:	2201      	movs	r2, #1
 800a476:	920d      	str	r2, [sp, #52]	; 0x34
 800a478:	1c5a      	adds	r2, r3, #1
 800a47a:	921b      	str	r2, [sp, #108]	; 0x6c
 800a47c:	785b      	ldrb	r3, [r3, #1]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1c2      	bne.n	800a408 <_strtod_l+0x40>
 800a482:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a484:	961b      	str	r6, [sp, #108]	; 0x6c
 800a486:	2b00      	cmp	r3, #0
 800a488:	f040 8585 	bne.w	800af96 <_strtod_l+0xbce>
 800a48c:	464a      	mov	r2, r9
 800a48e:	4653      	mov	r3, sl
 800a490:	e7e2      	b.n	800a458 <_strtod_l+0x90>
 800a492:	2200      	movs	r2, #0
 800a494:	e7ef      	b.n	800a476 <_strtod_l+0xae>
 800a496:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a498:	b13a      	cbz	r2, 800a4aa <_strtod_l+0xe2>
 800a49a:	2135      	movs	r1, #53	; 0x35
 800a49c:	a81e      	add	r0, sp, #120	; 0x78
 800a49e:	f001 fd92 	bl	800bfc6 <__copybits>
 800a4a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a4a4:	4658      	mov	r0, fp
 800a4a6:	f001 fa05 	bl	800b8b4 <_Bfree>
 800a4aa:	3c01      	subs	r4, #1
 800a4ac:	2c04      	cmp	r4, #4
 800a4ae:	d806      	bhi.n	800a4be <_strtod_l+0xf6>
 800a4b0:	e8df f004 	tbb	[pc, r4]
 800a4b4:	1714030a 	.word	0x1714030a
 800a4b8:	0a          	.byte	0x0a
 800a4b9:	00          	.byte	0x00
 800a4ba:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800a4be:	0731      	lsls	r1, r6, #28
 800a4c0:	d5c1      	bpl.n	800a446 <_strtod_l+0x7e>
 800a4c2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800a4c6:	e7be      	b.n	800a446 <_strtod_l+0x7e>
 800a4c8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a4ca:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800a4ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a4d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a4d6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800a4da:	e7f0      	b.n	800a4be <_strtod_l+0xf6>
 800a4dc:	f8df a170 	ldr.w	sl, [pc, #368]	; 800a650 <_strtod_l+0x288>
 800a4e0:	e7ed      	b.n	800a4be <_strtod_l+0xf6>
 800a4e2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800a4e6:	f04f 39ff 	mov.w	r9, #4294967295
 800a4ea:	e7e8      	b.n	800a4be <_strtod_l+0xf6>
 800a4ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a4ee:	1c5a      	adds	r2, r3, #1
 800a4f0:	921b      	str	r2, [sp, #108]	; 0x6c
 800a4f2:	785b      	ldrb	r3, [r3, #1]
 800a4f4:	2b30      	cmp	r3, #48	; 0x30
 800a4f6:	d0f9      	beq.n	800a4ec <_strtod_l+0x124>
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d0a4      	beq.n	800a446 <_strtod_l+0x7e>
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	2500      	movs	r5, #0
 800a500:	220a      	movs	r2, #10
 800a502:	9307      	str	r3, [sp, #28]
 800a504:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a506:	9506      	str	r5, [sp, #24]
 800a508:	9308      	str	r3, [sp, #32]
 800a50a:	9504      	str	r5, [sp, #16]
 800a50c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a50e:	7807      	ldrb	r7, [r0, #0]
 800a510:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800a514:	b2d9      	uxtb	r1, r3
 800a516:	2909      	cmp	r1, #9
 800a518:	d929      	bls.n	800a56e <_strtod_l+0x1a6>
 800a51a:	4622      	mov	r2, r4
 800a51c:	f8d8 1000 	ldr.w	r1, [r8]
 800a520:	f002 f937 	bl	800c792 <strncmp>
 800a524:	2800      	cmp	r0, #0
 800a526:	d031      	beq.n	800a58c <_strtod_l+0x1c4>
 800a528:	2000      	movs	r0, #0
 800a52a:	463b      	mov	r3, r7
 800a52c:	4602      	mov	r2, r0
 800a52e:	9c04      	ldr	r4, [sp, #16]
 800a530:	9005      	str	r0, [sp, #20]
 800a532:	2b65      	cmp	r3, #101	; 0x65
 800a534:	d001      	beq.n	800a53a <_strtod_l+0x172>
 800a536:	2b45      	cmp	r3, #69	; 0x45
 800a538:	d114      	bne.n	800a564 <_strtod_l+0x19c>
 800a53a:	b924      	cbnz	r4, 800a546 <_strtod_l+0x17e>
 800a53c:	b910      	cbnz	r0, 800a544 <_strtod_l+0x17c>
 800a53e:	9b07      	ldr	r3, [sp, #28]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d09e      	beq.n	800a482 <_strtod_l+0xba>
 800a544:	2400      	movs	r4, #0
 800a546:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a548:	1c73      	adds	r3, r6, #1
 800a54a:	931b      	str	r3, [sp, #108]	; 0x6c
 800a54c:	7873      	ldrb	r3, [r6, #1]
 800a54e:	2b2b      	cmp	r3, #43	; 0x2b
 800a550:	d078      	beq.n	800a644 <_strtod_l+0x27c>
 800a552:	2b2d      	cmp	r3, #45	; 0x2d
 800a554:	d070      	beq.n	800a638 <_strtod_l+0x270>
 800a556:	f04f 0c00 	mov.w	ip, #0
 800a55a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800a55e:	2f09      	cmp	r7, #9
 800a560:	d97c      	bls.n	800a65c <_strtod_l+0x294>
 800a562:	961b      	str	r6, [sp, #108]	; 0x6c
 800a564:	f04f 0e00 	mov.w	lr, #0
 800a568:	e09a      	b.n	800a6a0 <_strtod_l+0x2d8>
 800a56a:	2300      	movs	r3, #0
 800a56c:	e7c7      	b.n	800a4fe <_strtod_l+0x136>
 800a56e:	9904      	ldr	r1, [sp, #16]
 800a570:	3001      	adds	r0, #1
 800a572:	2908      	cmp	r1, #8
 800a574:	bfd7      	itett	le
 800a576:	9906      	ldrle	r1, [sp, #24]
 800a578:	fb02 3505 	mlagt	r5, r2, r5, r3
 800a57c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a580:	9306      	strle	r3, [sp, #24]
 800a582:	9b04      	ldr	r3, [sp, #16]
 800a584:	901b      	str	r0, [sp, #108]	; 0x6c
 800a586:	3301      	adds	r3, #1
 800a588:	9304      	str	r3, [sp, #16]
 800a58a:	e7bf      	b.n	800a50c <_strtod_l+0x144>
 800a58c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a58e:	191a      	adds	r2, r3, r4
 800a590:	921b      	str	r2, [sp, #108]	; 0x6c
 800a592:	9a04      	ldr	r2, [sp, #16]
 800a594:	5d1b      	ldrb	r3, [r3, r4]
 800a596:	2a00      	cmp	r2, #0
 800a598:	d037      	beq.n	800a60a <_strtod_l+0x242>
 800a59a:	4602      	mov	r2, r0
 800a59c:	9c04      	ldr	r4, [sp, #16]
 800a59e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a5a2:	2909      	cmp	r1, #9
 800a5a4:	d913      	bls.n	800a5ce <_strtod_l+0x206>
 800a5a6:	2101      	movs	r1, #1
 800a5a8:	9105      	str	r1, [sp, #20]
 800a5aa:	e7c2      	b.n	800a532 <_strtod_l+0x16a>
 800a5ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5ae:	3001      	adds	r0, #1
 800a5b0:	1c5a      	adds	r2, r3, #1
 800a5b2:	921b      	str	r2, [sp, #108]	; 0x6c
 800a5b4:	785b      	ldrb	r3, [r3, #1]
 800a5b6:	2b30      	cmp	r3, #48	; 0x30
 800a5b8:	d0f8      	beq.n	800a5ac <_strtod_l+0x1e4>
 800a5ba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a5be:	2a08      	cmp	r2, #8
 800a5c0:	f200 84f0 	bhi.w	800afa4 <_strtod_l+0xbdc>
 800a5c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a5c6:	9208      	str	r2, [sp, #32]
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800a5d2:	f100 0101 	add.w	r1, r0, #1
 800a5d6:	d012      	beq.n	800a5fe <_strtod_l+0x236>
 800a5d8:	440a      	add	r2, r1
 800a5da:	270a      	movs	r7, #10
 800a5dc:	4621      	mov	r1, r4
 800a5de:	eb00 0c04 	add.w	ip, r0, r4
 800a5e2:	458c      	cmp	ip, r1
 800a5e4:	d113      	bne.n	800a60e <_strtod_l+0x246>
 800a5e6:	1821      	adds	r1, r4, r0
 800a5e8:	2908      	cmp	r1, #8
 800a5ea:	f104 0401 	add.w	r4, r4, #1
 800a5ee:	4404      	add	r4, r0
 800a5f0:	dc19      	bgt.n	800a626 <_strtod_l+0x25e>
 800a5f2:	210a      	movs	r1, #10
 800a5f4:	9b06      	ldr	r3, [sp, #24]
 800a5f6:	fb01 e303 	mla	r3, r1, r3, lr
 800a5fa:	9306      	str	r3, [sp, #24]
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a600:	1c58      	adds	r0, r3, #1
 800a602:	901b      	str	r0, [sp, #108]	; 0x6c
 800a604:	785b      	ldrb	r3, [r3, #1]
 800a606:	4608      	mov	r0, r1
 800a608:	e7c9      	b.n	800a59e <_strtod_l+0x1d6>
 800a60a:	9804      	ldr	r0, [sp, #16]
 800a60c:	e7d3      	b.n	800a5b6 <_strtod_l+0x1ee>
 800a60e:	2908      	cmp	r1, #8
 800a610:	f101 0101 	add.w	r1, r1, #1
 800a614:	dc03      	bgt.n	800a61e <_strtod_l+0x256>
 800a616:	9b06      	ldr	r3, [sp, #24]
 800a618:	437b      	muls	r3, r7
 800a61a:	9306      	str	r3, [sp, #24]
 800a61c:	e7e1      	b.n	800a5e2 <_strtod_l+0x21a>
 800a61e:	2910      	cmp	r1, #16
 800a620:	bfd8      	it	le
 800a622:	437d      	mulle	r5, r7
 800a624:	e7dd      	b.n	800a5e2 <_strtod_l+0x21a>
 800a626:	2c10      	cmp	r4, #16
 800a628:	bfdc      	itt	le
 800a62a:	210a      	movle	r1, #10
 800a62c:	fb01 e505 	mlale	r5, r1, r5, lr
 800a630:	e7e4      	b.n	800a5fc <_strtod_l+0x234>
 800a632:	2301      	movs	r3, #1
 800a634:	9305      	str	r3, [sp, #20]
 800a636:	e781      	b.n	800a53c <_strtod_l+0x174>
 800a638:	f04f 0c01 	mov.w	ip, #1
 800a63c:	1cb3      	adds	r3, r6, #2
 800a63e:	931b      	str	r3, [sp, #108]	; 0x6c
 800a640:	78b3      	ldrb	r3, [r6, #2]
 800a642:	e78a      	b.n	800a55a <_strtod_l+0x192>
 800a644:	f04f 0c00 	mov.w	ip, #0
 800a648:	e7f8      	b.n	800a63c <_strtod_l+0x274>
 800a64a:	bf00      	nop
 800a64c:	0800ecf4 	.word	0x0800ecf4
 800a650:	7ff00000 	.word	0x7ff00000
 800a654:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a656:	1c5f      	adds	r7, r3, #1
 800a658:	971b      	str	r7, [sp, #108]	; 0x6c
 800a65a:	785b      	ldrb	r3, [r3, #1]
 800a65c:	2b30      	cmp	r3, #48	; 0x30
 800a65e:	d0f9      	beq.n	800a654 <_strtod_l+0x28c>
 800a660:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800a664:	2f08      	cmp	r7, #8
 800a666:	f63f af7d 	bhi.w	800a564 <_strtod_l+0x19c>
 800a66a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a66e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a670:	9309      	str	r3, [sp, #36]	; 0x24
 800a672:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a674:	1c5f      	adds	r7, r3, #1
 800a676:	971b      	str	r7, [sp, #108]	; 0x6c
 800a678:	785b      	ldrb	r3, [r3, #1]
 800a67a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800a67e:	f1b8 0f09 	cmp.w	r8, #9
 800a682:	d937      	bls.n	800a6f4 <_strtod_l+0x32c>
 800a684:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a686:	1a7f      	subs	r7, r7, r1
 800a688:	2f08      	cmp	r7, #8
 800a68a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a68e:	dc37      	bgt.n	800a700 <_strtod_l+0x338>
 800a690:	45be      	cmp	lr, r7
 800a692:	bfa8      	it	ge
 800a694:	46be      	movge	lr, r7
 800a696:	f1bc 0f00 	cmp.w	ip, #0
 800a69a:	d001      	beq.n	800a6a0 <_strtod_l+0x2d8>
 800a69c:	f1ce 0e00 	rsb	lr, lr, #0
 800a6a0:	2c00      	cmp	r4, #0
 800a6a2:	d151      	bne.n	800a748 <_strtod_l+0x380>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	f47f aece 	bne.w	800a446 <_strtod_l+0x7e>
 800a6aa:	9a07      	ldr	r2, [sp, #28]
 800a6ac:	2a00      	cmp	r2, #0
 800a6ae:	f47f aeca 	bne.w	800a446 <_strtod_l+0x7e>
 800a6b2:	9a05      	ldr	r2, [sp, #20]
 800a6b4:	2a00      	cmp	r2, #0
 800a6b6:	f47f aee4 	bne.w	800a482 <_strtod_l+0xba>
 800a6ba:	2b4e      	cmp	r3, #78	; 0x4e
 800a6bc:	d027      	beq.n	800a70e <_strtod_l+0x346>
 800a6be:	dc21      	bgt.n	800a704 <_strtod_l+0x33c>
 800a6c0:	2b49      	cmp	r3, #73	; 0x49
 800a6c2:	f47f aede 	bne.w	800a482 <_strtod_l+0xba>
 800a6c6:	49a4      	ldr	r1, [pc, #656]	; (800a958 <_strtod_l+0x590>)
 800a6c8:	a81b      	add	r0, sp, #108	; 0x6c
 800a6ca:	f000 fff5 	bl	800b6b8 <__match>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	f43f aed7 	beq.w	800a482 <_strtod_l+0xba>
 800a6d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a6d6:	49a1      	ldr	r1, [pc, #644]	; (800a95c <_strtod_l+0x594>)
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	a81b      	add	r0, sp, #108	; 0x6c
 800a6dc:	931b      	str	r3, [sp, #108]	; 0x6c
 800a6de:	f000 ffeb 	bl	800b6b8 <__match>
 800a6e2:	b910      	cbnz	r0, 800a6ea <_strtod_l+0x322>
 800a6e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	931b      	str	r3, [sp, #108]	; 0x6c
 800a6ea:	f8df a284 	ldr.w	sl, [pc, #644]	; 800a970 <_strtod_l+0x5a8>
 800a6ee:	f04f 0900 	mov.w	r9, #0
 800a6f2:	e6a8      	b.n	800a446 <_strtod_l+0x7e>
 800a6f4:	210a      	movs	r1, #10
 800a6f6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a6fa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a6fe:	e7b8      	b.n	800a672 <_strtod_l+0x2aa>
 800a700:	46be      	mov	lr, r7
 800a702:	e7c8      	b.n	800a696 <_strtod_l+0x2ce>
 800a704:	2b69      	cmp	r3, #105	; 0x69
 800a706:	d0de      	beq.n	800a6c6 <_strtod_l+0x2fe>
 800a708:	2b6e      	cmp	r3, #110	; 0x6e
 800a70a:	f47f aeba 	bne.w	800a482 <_strtod_l+0xba>
 800a70e:	4994      	ldr	r1, [pc, #592]	; (800a960 <_strtod_l+0x598>)
 800a710:	a81b      	add	r0, sp, #108	; 0x6c
 800a712:	f000 ffd1 	bl	800b6b8 <__match>
 800a716:	2800      	cmp	r0, #0
 800a718:	f43f aeb3 	beq.w	800a482 <_strtod_l+0xba>
 800a71c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	2b28      	cmp	r3, #40	; 0x28
 800a722:	d10e      	bne.n	800a742 <_strtod_l+0x37a>
 800a724:	aa1e      	add	r2, sp, #120	; 0x78
 800a726:	498f      	ldr	r1, [pc, #572]	; (800a964 <_strtod_l+0x59c>)
 800a728:	a81b      	add	r0, sp, #108	; 0x6c
 800a72a:	f000 ffd9 	bl	800b6e0 <__hexnan>
 800a72e:	2805      	cmp	r0, #5
 800a730:	d107      	bne.n	800a742 <_strtod_l+0x37a>
 800a732:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a734:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800a738:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800a73c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 800a740:	e681      	b.n	800a446 <_strtod_l+0x7e>
 800a742:	f8df a234 	ldr.w	sl, [pc, #564]	; 800a978 <_strtod_l+0x5b0>
 800a746:	e7d2      	b.n	800a6ee <_strtod_l+0x326>
 800a748:	ebae 0302 	sub.w	r3, lr, r2
 800a74c:	9307      	str	r3, [sp, #28]
 800a74e:	9b04      	ldr	r3, [sp, #16]
 800a750:	9806      	ldr	r0, [sp, #24]
 800a752:	2b00      	cmp	r3, #0
 800a754:	bf08      	it	eq
 800a756:	4623      	moveq	r3, r4
 800a758:	2c10      	cmp	r4, #16
 800a75a:	9304      	str	r3, [sp, #16]
 800a75c:	46a0      	mov	r8, r4
 800a75e:	bfa8      	it	ge
 800a760:	f04f 0810 	movge.w	r8, #16
 800a764:	f7f5 fe3e 	bl	80003e4 <__aeabi_ui2d>
 800a768:	2c09      	cmp	r4, #9
 800a76a:	4681      	mov	r9, r0
 800a76c:	468a      	mov	sl, r1
 800a76e:	dc13      	bgt.n	800a798 <_strtod_l+0x3d0>
 800a770:	9b07      	ldr	r3, [sp, #28]
 800a772:	2b00      	cmp	r3, #0
 800a774:	f43f ae67 	beq.w	800a446 <_strtod_l+0x7e>
 800a778:	9b07      	ldr	r3, [sp, #28]
 800a77a:	dd7e      	ble.n	800a87a <_strtod_l+0x4b2>
 800a77c:	2b16      	cmp	r3, #22
 800a77e:	dc65      	bgt.n	800a84c <_strtod_l+0x484>
 800a780:	4a79      	ldr	r2, [pc, #484]	; (800a968 <_strtod_l+0x5a0>)
 800a782:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800a786:	464a      	mov	r2, r9
 800a788:	e9de 0100 	ldrd	r0, r1, [lr]
 800a78c:	4653      	mov	r3, sl
 800a78e:	f7f5 fea3 	bl	80004d8 <__aeabi_dmul>
 800a792:	4681      	mov	r9, r0
 800a794:	468a      	mov	sl, r1
 800a796:	e656      	b.n	800a446 <_strtod_l+0x7e>
 800a798:	4b73      	ldr	r3, [pc, #460]	; (800a968 <_strtod_l+0x5a0>)
 800a79a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a79e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a7a2:	f7f5 fe99 	bl	80004d8 <__aeabi_dmul>
 800a7a6:	4606      	mov	r6, r0
 800a7a8:	4628      	mov	r0, r5
 800a7aa:	460f      	mov	r7, r1
 800a7ac:	f7f5 fe1a 	bl	80003e4 <__aeabi_ui2d>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	4630      	mov	r0, r6
 800a7b6:	4639      	mov	r1, r7
 800a7b8:	f7f5 fcd8 	bl	800016c <__adddf3>
 800a7bc:	2c0f      	cmp	r4, #15
 800a7be:	4681      	mov	r9, r0
 800a7c0:	468a      	mov	sl, r1
 800a7c2:	ddd5      	ble.n	800a770 <_strtod_l+0x3a8>
 800a7c4:	9b07      	ldr	r3, [sp, #28]
 800a7c6:	eba4 0808 	sub.w	r8, r4, r8
 800a7ca:	4498      	add	r8, r3
 800a7cc:	f1b8 0f00 	cmp.w	r8, #0
 800a7d0:	f340 809a 	ble.w	800a908 <_strtod_l+0x540>
 800a7d4:	f018 030f 	ands.w	r3, r8, #15
 800a7d8:	d00a      	beq.n	800a7f0 <_strtod_l+0x428>
 800a7da:	4963      	ldr	r1, [pc, #396]	; (800a968 <_strtod_l+0x5a0>)
 800a7dc:	464a      	mov	r2, r9
 800a7de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a7e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7e6:	4653      	mov	r3, sl
 800a7e8:	f7f5 fe76 	bl	80004d8 <__aeabi_dmul>
 800a7ec:	4681      	mov	r9, r0
 800a7ee:	468a      	mov	sl, r1
 800a7f0:	f038 080f 	bics.w	r8, r8, #15
 800a7f4:	d077      	beq.n	800a8e6 <_strtod_l+0x51e>
 800a7f6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a7fa:	dd4b      	ble.n	800a894 <_strtod_l+0x4cc>
 800a7fc:	f04f 0800 	mov.w	r8, #0
 800a800:	f8cd 8010 	str.w	r8, [sp, #16]
 800a804:	f8cd 8020 	str.w	r8, [sp, #32]
 800a808:	f8cd 8018 	str.w	r8, [sp, #24]
 800a80c:	2322      	movs	r3, #34	; 0x22
 800a80e:	f04f 0900 	mov.w	r9, #0
 800a812:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800a970 <_strtod_l+0x5a8>
 800a816:	f8cb 3000 	str.w	r3, [fp]
 800a81a:	9b08      	ldr	r3, [sp, #32]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	f43f ae12 	beq.w	800a446 <_strtod_l+0x7e>
 800a822:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a824:	4658      	mov	r0, fp
 800a826:	f001 f845 	bl	800b8b4 <_Bfree>
 800a82a:	9906      	ldr	r1, [sp, #24]
 800a82c:	4658      	mov	r0, fp
 800a82e:	f001 f841 	bl	800b8b4 <_Bfree>
 800a832:	9904      	ldr	r1, [sp, #16]
 800a834:	4658      	mov	r0, fp
 800a836:	f001 f83d 	bl	800b8b4 <_Bfree>
 800a83a:	9908      	ldr	r1, [sp, #32]
 800a83c:	4658      	mov	r0, fp
 800a83e:	f001 f839 	bl	800b8b4 <_Bfree>
 800a842:	4641      	mov	r1, r8
 800a844:	4658      	mov	r0, fp
 800a846:	f001 f835 	bl	800b8b4 <_Bfree>
 800a84a:	e5fc      	b.n	800a446 <_strtod_l+0x7e>
 800a84c:	9a07      	ldr	r2, [sp, #28]
 800a84e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a852:	4293      	cmp	r3, r2
 800a854:	dbb6      	blt.n	800a7c4 <_strtod_l+0x3fc>
 800a856:	4d44      	ldr	r5, [pc, #272]	; (800a968 <_strtod_l+0x5a0>)
 800a858:	f1c4 040f 	rsb	r4, r4, #15
 800a85c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a860:	464a      	mov	r2, r9
 800a862:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a866:	4653      	mov	r3, sl
 800a868:	f7f5 fe36 	bl	80004d8 <__aeabi_dmul>
 800a86c:	9b07      	ldr	r3, [sp, #28]
 800a86e:	1b1c      	subs	r4, r3, r4
 800a870:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a874:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a878:	e789      	b.n	800a78e <_strtod_l+0x3c6>
 800a87a:	f113 0f16 	cmn.w	r3, #22
 800a87e:	dba1      	blt.n	800a7c4 <_strtod_l+0x3fc>
 800a880:	4a39      	ldr	r2, [pc, #228]	; (800a968 <_strtod_l+0x5a0>)
 800a882:	4648      	mov	r0, r9
 800a884:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800a888:	e9d2 2300 	ldrd	r2, r3, [r2]
 800a88c:	4651      	mov	r1, sl
 800a88e:	f7f5 ff4d 	bl	800072c <__aeabi_ddiv>
 800a892:	e77e      	b.n	800a792 <_strtod_l+0x3ca>
 800a894:	2300      	movs	r3, #0
 800a896:	4648      	mov	r0, r9
 800a898:	4651      	mov	r1, sl
 800a89a:	461d      	mov	r5, r3
 800a89c:	4e33      	ldr	r6, [pc, #204]	; (800a96c <_strtod_l+0x5a4>)
 800a89e:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a8a2:	f1b8 0f01 	cmp.w	r8, #1
 800a8a6:	dc21      	bgt.n	800a8ec <_strtod_l+0x524>
 800a8a8:	b10b      	cbz	r3, 800a8ae <_strtod_l+0x4e6>
 800a8aa:	4681      	mov	r9, r0
 800a8ac:	468a      	mov	sl, r1
 800a8ae:	4b2f      	ldr	r3, [pc, #188]	; (800a96c <_strtod_l+0x5a4>)
 800a8b0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800a8b4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a8b8:	464a      	mov	r2, r9
 800a8ba:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a8be:	4653      	mov	r3, sl
 800a8c0:	f7f5 fe0a 	bl	80004d8 <__aeabi_dmul>
 800a8c4:	4b2a      	ldr	r3, [pc, #168]	; (800a970 <_strtod_l+0x5a8>)
 800a8c6:	460a      	mov	r2, r1
 800a8c8:	400b      	ands	r3, r1
 800a8ca:	492a      	ldr	r1, [pc, #168]	; (800a974 <_strtod_l+0x5ac>)
 800a8cc:	4681      	mov	r9, r0
 800a8ce:	428b      	cmp	r3, r1
 800a8d0:	d894      	bhi.n	800a7fc <_strtod_l+0x434>
 800a8d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a8d6:	428b      	cmp	r3, r1
 800a8d8:	bf86      	itte	hi
 800a8da:	f04f 39ff 	movhi.w	r9, #4294967295
 800a8de:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800a97c <_strtod_l+0x5b4>
 800a8e2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	9305      	str	r3, [sp, #20]
 800a8ea:	e07b      	b.n	800a9e4 <_strtod_l+0x61c>
 800a8ec:	f018 0f01 	tst.w	r8, #1
 800a8f0:	d006      	beq.n	800a900 <_strtod_l+0x538>
 800a8f2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800a8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fa:	f7f5 fded 	bl	80004d8 <__aeabi_dmul>
 800a8fe:	2301      	movs	r3, #1
 800a900:	3501      	adds	r5, #1
 800a902:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a906:	e7cc      	b.n	800a8a2 <_strtod_l+0x4da>
 800a908:	d0ed      	beq.n	800a8e6 <_strtod_l+0x51e>
 800a90a:	f1c8 0800 	rsb	r8, r8, #0
 800a90e:	f018 020f 	ands.w	r2, r8, #15
 800a912:	d00a      	beq.n	800a92a <_strtod_l+0x562>
 800a914:	4b14      	ldr	r3, [pc, #80]	; (800a968 <_strtod_l+0x5a0>)
 800a916:	4648      	mov	r0, r9
 800a918:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a91c:	4651      	mov	r1, sl
 800a91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a922:	f7f5 ff03 	bl	800072c <__aeabi_ddiv>
 800a926:	4681      	mov	r9, r0
 800a928:	468a      	mov	sl, r1
 800a92a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a92e:	d0da      	beq.n	800a8e6 <_strtod_l+0x51e>
 800a930:	f1b8 0f1f 	cmp.w	r8, #31
 800a934:	dd24      	ble.n	800a980 <_strtod_l+0x5b8>
 800a936:	f04f 0800 	mov.w	r8, #0
 800a93a:	f8cd 8010 	str.w	r8, [sp, #16]
 800a93e:	f8cd 8020 	str.w	r8, [sp, #32]
 800a942:	f8cd 8018 	str.w	r8, [sp, #24]
 800a946:	2322      	movs	r3, #34	; 0x22
 800a948:	f04f 0900 	mov.w	r9, #0
 800a94c:	f04f 0a00 	mov.w	sl, #0
 800a950:	f8cb 3000 	str.w	r3, [fp]
 800a954:	e761      	b.n	800a81a <_strtod_l+0x452>
 800a956:	bf00      	nop
 800a958:	0800ece8 	.word	0x0800ece8
 800a95c:	0800eceb 	.word	0x0800eceb
 800a960:	0800ecf1 	.word	0x0800ecf1
 800a964:	0800ed08 	.word	0x0800ed08
 800a968:	0800eda0 	.word	0x0800eda0
 800a96c:	0800ed78 	.word	0x0800ed78
 800a970:	7ff00000 	.word	0x7ff00000
 800a974:	7ca00000 	.word	0x7ca00000
 800a978:	fff80000 	.word	0xfff80000
 800a97c:	7fefffff 	.word	0x7fefffff
 800a980:	f018 0310 	ands.w	r3, r8, #16
 800a984:	bf18      	it	ne
 800a986:	236a      	movne	r3, #106	; 0x6a
 800a988:	4648      	mov	r0, r9
 800a98a:	9305      	str	r3, [sp, #20]
 800a98c:	4651      	mov	r1, sl
 800a98e:	2300      	movs	r3, #0
 800a990:	4da1      	ldr	r5, [pc, #644]	; (800ac18 <_strtod_l+0x850>)
 800a992:	f1b8 0f00 	cmp.w	r8, #0
 800a996:	f300 8113 	bgt.w	800abc0 <_strtod_l+0x7f8>
 800a99a:	b10b      	cbz	r3, 800a9a0 <_strtod_l+0x5d8>
 800a99c:	4681      	mov	r9, r0
 800a99e:	468a      	mov	sl, r1
 800a9a0:	9b05      	ldr	r3, [sp, #20]
 800a9a2:	b1bb      	cbz	r3, 800a9d4 <_strtod_l+0x60c>
 800a9a4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800a9a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	4651      	mov	r1, sl
 800a9b0:	dd10      	ble.n	800a9d4 <_strtod_l+0x60c>
 800a9b2:	2b1f      	cmp	r3, #31
 800a9b4:	f340 8110 	ble.w	800abd8 <_strtod_l+0x810>
 800a9b8:	2b34      	cmp	r3, #52	; 0x34
 800a9ba:	bfd8      	it	le
 800a9bc:	f04f 32ff 	movle.w	r2, #4294967295
 800a9c0:	f04f 0900 	mov.w	r9, #0
 800a9c4:	bfcf      	iteee	gt
 800a9c6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800a9ca:	3b20      	suble	r3, #32
 800a9cc:	fa02 f303 	lslle.w	r3, r2, r3
 800a9d0:	ea03 0a01 	andle.w	sl, r3, r1
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	4648      	mov	r0, r9
 800a9da:	4651      	mov	r1, sl
 800a9dc:	f7f5 ffe4 	bl	80009a8 <__aeabi_dcmpeq>
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	d1a8      	bne.n	800a936 <_strtod_l+0x56e>
 800a9e4:	9b06      	ldr	r3, [sp, #24]
 800a9e6:	9a04      	ldr	r2, [sp, #16]
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	9908      	ldr	r1, [sp, #32]
 800a9ec:	4623      	mov	r3, r4
 800a9ee:	4658      	mov	r0, fp
 800a9f0:	f000 ffb2 	bl	800b958 <__s2b>
 800a9f4:	9008      	str	r0, [sp, #32]
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	f43f af00 	beq.w	800a7fc <_strtod_l+0x434>
 800a9fc:	9a07      	ldr	r2, [sp, #28]
 800a9fe:	9b07      	ldr	r3, [sp, #28]
 800aa00:	2a00      	cmp	r2, #0
 800aa02:	f1c3 0300 	rsb	r3, r3, #0
 800aa06:	bfa8      	it	ge
 800aa08:	2300      	movge	r3, #0
 800aa0a:	f04f 0800 	mov.w	r8, #0
 800aa0e:	930e      	str	r3, [sp, #56]	; 0x38
 800aa10:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aa14:	9316      	str	r3, [sp, #88]	; 0x58
 800aa16:	f8cd 8010 	str.w	r8, [sp, #16]
 800aa1a:	9b08      	ldr	r3, [sp, #32]
 800aa1c:	4658      	mov	r0, fp
 800aa1e:	6859      	ldr	r1, [r3, #4]
 800aa20:	f000 ff14 	bl	800b84c <_Balloc>
 800aa24:	9006      	str	r0, [sp, #24]
 800aa26:	2800      	cmp	r0, #0
 800aa28:	f43f aef0 	beq.w	800a80c <_strtod_l+0x444>
 800aa2c:	9b08      	ldr	r3, [sp, #32]
 800aa2e:	300c      	adds	r0, #12
 800aa30:	691a      	ldr	r2, [r3, #16]
 800aa32:	f103 010c 	add.w	r1, r3, #12
 800aa36:	3202      	adds	r2, #2
 800aa38:	0092      	lsls	r2, r2, #2
 800aa3a:	f7ff fc3a 	bl	800a2b2 <memcpy>
 800aa3e:	ab1e      	add	r3, sp, #120	; 0x78
 800aa40:	9301      	str	r3, [sp, #4]
 800aa42:	ab1d      	add	r3, sp, #116	; 0x74
 800aa44:	9300      	str	r3, [sp, #0]
 800aa46:	464a      	mov	r2, r9
 800aa48:	4653      	mov	r3, sl
 800aa4a:	4658      	mov	r0, fp
 800aa4c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800aa50:	f001 fa3c 	bl	800becc <__d2b>
 800aa54:	901c      	str	r0, [sp, #112]	; 0x70
 800aa56:	2800      	cmp	r0, #0
 800aa58:	f43f aed8 	beq.w	800a80c <_strtod_l+0x444>
 800aa5c:	2101      	movs	r1, #1
 800aa5e:	4658      	mov	r0, fp
 800aa60:	f001 f806 	bl	800ba70 <__i2b>
 800aa64:	9004      	str	r0, [sp, #16]
 800aa66:	4603      	mov	r3, r0
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	f43f aecf 	beq.w	800a80c <_strtod_l+0x444>
 800aa6e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800aa70:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800aa72:	2d00      	cmp	r5, #0
 800aa74:	bfab      	itete	ge
 800aa76:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800aa78:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800aa7a:	18ee      	addge	r6, r5, r3
 800aa7c:	1b5c      	sublt	r4, r3, r5
 800aa7e:	9b05      	ldr	r3, [sp, #20]
 800aa80:	bfa8      	it	ge
 800aa82:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800aa84:	eba5 0503 	sub.w	r5, r5, r3
 800aa88:	4415      	add	r5, r2
 800aa8a:	4b64      	ldr	r3, [pc, #400]	; (800ac1c <_strtod_l+0x854>)
 800aa8c:	f105 35ff 	add.w	r5, r5, #4294967295
 800aa90:	bfb8      	it	lt
 800aa92:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800aa94:	429d      	cmp	r5, r3
 800aa96:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aa9a:	f280 80af 	bge.w	800abfc <_strtod_l+0x834>
 800aa9e:	1b5b      	subs	r3, r3, r5
 800aaa0:	2b1f      	cmp	r3, #31
 800aaa2:	eba2 0203 	sub.w	r2, r2, r3
 800aaa6:	f04f 0701 	mov.w	r7, #1
 800aaaa:	f300 809c 	bgt.w	800abe6 <_strtod_l+0x81e>
 800aaae:	2500      	movs	r5, #0
 800aab0:	fa07 f303 	lsl.w	r3, r7, r3
 800aab4:	930f      	str	r3, [sp, #60]	; 0x3c
 800aab6:	18b7      	adds	r7, r6, r2
 800aab8:	9b05      	ldr	r3, [sp, #20]
 800aaba:	42be      	cmp	r6, r7
 800aabc:	4414      	add	r4, r2
 800aabe:	441c      	add	r4, r3
 800aac0:	4633      	mov	r3, r6
 800aac2:	bfa8      	it	ge
 800aac4:	463b      	movge	r3, r7
 800aac6:	42a3      	cmp	r3, r4
 800aac8:	bfa8      	it	ge
 800aaca:	4623      	movge	r3, r4
 800aacc:	2b00      	cmp	r3, #0
 800aace:	bfc2      	ittt	gt
 800aad0:	1aff      	subgt	r7, r7, r3
 800aad2:	1ae4      	subgt	r4, r4, r3
 800aad4:	1af6      	subgt	r6, r6, r3
 800aad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aad8:	b1bb      	cbz	r3, 800ab0a <_strtod_l+0x742>
 800aada:	461a      	mov	r2, r3
 800aadc:	9904      	ldr	r1, [sp, #16]
 800aade:	4658      	mov	r0, fp
 800aae0:	f001 f864 	bl	800bbac <__pow5mult>
 800aae4:	9004      	str	r0, [sp, #16]
 800aae6:	2800      	cmp	r0, #0
 800aae8:	f43f ae90 	beq.w	800a80c <_strtod_l+0x444>
 800aaec:	4601      	mov	r1, r0
 800aaee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800aaf0:	4658      	mov	r0, fp
 800aaf2:	f000 ffc6 	bl	800ba82 <__multiply>
 800aaf6:	9009      	str	r0, [sp, #36]	; 0x24
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	f43f ae87 	beq.w	800a80c <_strtod_l+0x444>
 800aafe:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ab00:	4658      	mov	r0, fp
 800ab02:	f000 fed7 	bl	800b8b4 <_Bfree>
 800ab06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab08:	931c      	str	r3, [sp, #112]	; 0x70
 800ab0a:	2f00      	cmp	r7, #0
 800ab0c:	dc7a      	bgt.n	800ac04 <_strtod_l+0x83c>
 800ab0e:	9b07      	ldr	r3, [sp, #28]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	dd08      	ble.n	800ab26 <_strtod_l+0x75e>
 800ab14:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ab16:	9906      	ldr	r1, [sp, #24]
 800ab18:	4658      	mov	r0, fp
 800ab1a:	f001 f847 	bl	800bbac <__pow5mult>
 800ab1e:	9006      	str	r0, [sp, #24]
 800ab20:	2800      	cmp	r0, #0
 800ab22:	f43f ae73 	beq.w	800a80c <_strtod_l+0x444>
 800ab26:	2c00      	cmp	r4, #0
 800ab28:	dd08      	ble.n	800ab3c <_strtod_l+0x774>
 800ab2a:	4622      	mov	r2, r4
 800ab2c:	9906      	ldr	r1, [sp, #24]
 800ab2e:	4658      	mov	r0, fp
 800ab30:	f001 f88a 	bl	800bc48 <__lshift>
 800ab34:	9006      	str	r0, [sp, #24]
 800ab36:	2800      	cmp	r0, #0
 800ab38:	f43f ae68 	beq.w	800a80c <_strtod_l+0x444>
 800ab3c:	2e00      	cmp	r6, #0
 800ab3e:	dd08      	ble.n	800ab52 <_strtod_l+0x78a>
 800ab40:	4632      	mov	r2, r6
 800ab42:	9904      	ldr	r1, [sp, #16]
 800ab44:	4658      	mov	r0, fp
 800ab46:	f001 f87f 	bl	800bc48 <__lshift>
 800ab4a:	9004      	str	r0, [sp, #16]
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	f43f ae5d 	beq.w	800a80c <_strtod_l+0x444>
 800ab52:	9a06      	ldr	r2, [sp, #24]
 800ab54:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ab56:	4658      	mov	r0, fp
 800ab58:	f001 f8e4 	bl	800bd24 <__mdiff>
 800ab5c:	4680      	mov	r8, r0
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	f43f ae54 	beq.w	800a80c <_strtod_l+0x444>
 800ab64:	2400      	movs	r4, #0
 800ab66:	68c3      	ldr	r3, [r0, #12]
 800ab68:	9904      	ldr	r1, [sp, #16]
 800ab6a:	60c4      	str	r4, [r0, #12]
 800ab6c:	930c      	str	r3, [sp, #48]	; 0x30
 800ab6e:	f001 f8bf 	bl	800bcf0 <__mcmp>
 800ab72:	42a0      	cmp	r0, r4
 800ab74:	da54      	bge.n	800ac20 <_strtod_l+0x858>
 800ab76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab78:	b9f3      	cbnz	r3, 800abb8 <_strtod_l+0x7f0>
 800ab7a:	f1b9 0f00 	cmp.w	r9, #0
 800ab7e:	d11b      	bne.n	800abb8 <_strtod_l+0x7f0>
 800ab80:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800ab84:	b9c3      	cbnz	r3, 800abb8 <_strtod_l+0x7f0>
 800ab86:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800ab8a:	0d1b      	lsrs	r3, r3, #20
 800ab8c:	051b      	lsls	r3, r3, #20
 800ab8e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ab92:	d911      	bls.n	800abb8 <_strtod_l+0x7f0>
 800ab94:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800ab98:	b91b      	cbnz	r3, 800aba2 <_strtod_l+0x7da>
 800ab9a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	dd0a      	ble.n	800abb8 <_strtod_l+0x7f0>
 800aba2:	4641      	mov	r1, r8
 800aba4:	2201      	movs	r2, #1
 800aba6:	4658      	mov	r0, fp
 800aba8:	f001 f84e 	bl	800bc48 <__lshift>
 800abac:	9904      	ldr	r1, [sp, #16]
 800abae:	4680      	mov	r8, r0
 800abb0:	f001 f89e 	bl	800bcf0 <__mcmp>
 800abb4:	2800      	cmp	r0, #0
 800abb6:	dc68      	bgt.n	800ac8a <_strtod_l+0x8c2>
 800abb8:	9b05      	ldr	r3, [sp, #20]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d172      	bne.n	800aca4 <_strtod_l+0x8dc>
 800abbe:	e630      	b.n	800a822 <_strtod_l+0x45a>
 800abc0:	f018 0f01 	tst.w	r8, #1
 800abc4:	d004      	beq.n	800abd0 <_strtod_l+0x808>
 800abc6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800abca:	f7f5 fc85 	bl	80004d8 <__aeabi_dmul>
 800abce:	2301      	movs	r3, #1
 800abd0:	ea4f 0868 	mov.w	r8, r8, asr #1
 800abd4:	3508      	adds	r5, #8
 800abd6:	e6dc      	b.n	800a992 <_strtod_l+0x5ca>
 800abd8:	f04f 32ff 	mov.w	r2, #4294967295
 800abdc:	fa02 f303 	lsl.w	r3, r2, r3
 800abe0:	ea03 0909 	and.w	r9, r3, r9
 800abe4:	e6f6      	b.n	800a9d4 <_strtod_l+0x60c>
 800abe6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800abea:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800abee:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800abf2:	35e2      	adds	r5, #226	; 0xe2
 800abf4:	fa07 f505 	lsl.w	r5, r7, r5
 800abf8:	970f      	str	r7, [sp, #60]	; 0x3c
 800abfa:	e75c      	b.n	800aab6 <_strtod_l+0x6ee>
 800abfc:	2301      	movs	r3, #1
 800abfe:	2500      	movs	r5, #0
 800ac00:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac02:	e758      	b.n	800aab6 <_strtod_l+0x6ee>
 800ac04:	463a      	mov	r2, r7
 800ac06:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ac08:	4658      	mov	r0, fp
 800ac0a:	f001 f81d 	bl	800bc48 <__lshift>
 800ac0e:	901c      	str	r0, [sp, #112]	; 0x70
 800ac10:	2800      	cmp	r0, #0
 800ac12:	f47f af7c 	bne.w	800ab0e <_strtod_l+0x746>
 800ac16:	e5f9      	b.n	800a80c <_strtod_l+0x444>
 800ac18:	0800ed20 	.word	0x0800ed20
 800ac1c:	fffffc02 	.word	0xfffffc02
 800ac20:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ac24:	f040 8089 	bne.w	800ad3a <_strtod_l+0x972>
 800ac28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac2a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800ac2e:	b342      	cbz	r2, 800ac82 <_strtod_l+0x8ba>
 800ac30:	4aaf      	ldr	r2, [pc, #700]	; (800aef0 <_strtod_l+0xb28>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d156      	bne.n	800ace4 <_strtod_l+0x91c>
 800ac36:	9b05      	ldr	r3, [sp, #20]
 800ac38:	4648      	mov	r0, r9
 800ac3a:	b1eb      	cbz	r3, 800ac78 <_strtod_l+0x8b0>
 800ac3c:	4653      	mov	r3, sl
 800ac3e:	4aad      	ldr	r2, [pc, #692]	; (800aef4 <_strtod_l+0xb2c>)
 800ac40:	f04f 31ff 	mov.w	r1, #4294967295
 800ac44:	401a      	ands	r2, r3
 800ac46:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ac4a:	d818      	bhi.n	800ac7e <_strtod_l+0x8b6>
 800ac4c:	0d12      	lsrs	r2, r2, #20
 800ac4e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ac52:	fa01 f303 	lsl.w	r3, r1, r3
 800ac56:	4298      	cmp	r0, r3
 800ac58:	d144      	bne.n	800ace4 <_strtod_l+0x91c>
 800ac5a:	4ba7      	ldr	r3, [pc, #668]	; (800aef8 <_strtod_l+0xb30>)
 800ac5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d102      	bne.n	800ac68 <_strtod_l+0x8a0>
 800ac62:	3001      	adds	r0, #1
 800ac64:	f43f add2 	beq.w	800a80c <_strtod_l+0x444>
 800ac68:	4ba2      	ldr	r3, [pc, #648]	; (800aef4 <_strtod_l+0xb2c>)
 800ac6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac6c:	f04f 0900 	mov.w	r9, #0
 800ac70:	401a      	ands	r2, r3
 800ac72:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800ac76:	e79f      	b.n	800abb8 <_strtod_l+0x7f0>
 800ac78:	f04f 33ff 	mov.w	r3, #4294967295
 800ac7c:	e7eb      	b.n	800ac56 <_strtod_l+0x88e>
 800ac7e:	460b      	mov	r3, r1
 800ac80:	e7e9      	b.n	800ac56 <_strtod_l+0x88e>
 800ac82:	bb7b      	cbnz	r3, 800ace4 <_strtod_l+0x91c>
 800ac84:	f1b9 0f00 	cmp.w	r9, #0
 800ac88:	d12c      	bne.n	800ace4 <_strtod_l+0x91c>
 800ac8a:	9905      	ldr	r1, [sp, #20]
 800ac8c:	4653      	mov	r3, sl
 800ac8e:	4a99      	ldr	r2, [pc, #612]	; (800aef4 <_strtod_l+0xb2c>)
 800ac90:	b1f1      	cbz	r1, 800acd0 <_strtod_l+0x908>
 800ac92:	ea02 010a 	and.w	r1, r2, sl
 800ac96:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ac9a:	dc19      	bgt.n	800acd0 <_strtod_l+0x908>
 800ac9c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aca0:	f77f ae51 	ble.w	800a946 <_strtod_l+0x57e>
 800aca4:	2300      	movs	r3, #0
 800aca6:	4a95      	ldr	r2, [pc, #596]	; (800aefc <_strtod_l+0xb34>)
 800aca8:	4648      	mov	r0, r9
 800acaa:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800acae:	4651      	mov	r1, sl
 800acb0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800acb4:	f7f5 fc10 	bl	80004d8 <__aeabi_dmul>
 800acb8:	4681      	mov	r9, r0
 800acba:	468a      	mov	sl, r1
 800acbc:	2900      	cmp	r1, #0
 800acbe:	f47f adb0 	bne.w	800a822 <_strtod_l+0x45a>
 800acc2:	2800      	cmp	r0, #0
 800acc4:	f47f adad 	bne.w	800a822 <_strtod_l+0x45a>
 800acc8:	2322      	movs	r3, #34	; 0x22
 800acca:	f8cb 3000 	str.w	r3, [fp]
 800acce:	e5a8      	b.n	800a822 <_strtod_l+0x45a>
 800acd0:	4013      	ands	r3, r2
 800acd2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800acd6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800acda:	f04f 39ff 	mov.w	r9, #4294967295
 800acde:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800ace2:	e769      	b.n	800abb8 <_strtod_l+0x7f0>
 800ace4:	b19d      	cbz	r5, 800ad0e <_strtod_l+0x946>
 800ace6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ace8:	421d      	tst	r5, r3
 800acea:	f43f af65 	beq.w	800abb8 <_strtod_l+0x7f0>
 800acee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acf0:	9a05      	ldr	r2, [sp, #20]
 800acf2:	4648      	mov	r0, r9
 800acf4:	4651      	mov	r1, sl
 800acf6:	b173      	cbz	r3, 800ad16 <_strtod_l+0x94e>
 800acf8:	f7ff fb45 	bl	800a386 <sulp>
 800acfc:	4602      	mov	r2, r0
 800acfe:	460b      	mov	r3, r1
 800ad00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ad04:	f7f5 fa32 	bl	800016c <__adddf3>
 800ad08:	4681      	mov	r9, r0
 800ad0a:	468a      	mov	sl, r1
 800ad0c:	e754      	b.n	800abb8 <_strtod_l+0x7f0>
 800ad0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad10:	ea13 0f09 	tst.w	r3, r9
 800ad14:	e7e9      	b.n	800acea <_strtod_l+0x922>
 800ad16:	f7ff fb36 	bl	800a386 <sulp>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ad22:	f7f5 fa21 	bl	8000168 <__aeabi_dsub>
 800ad26:	2200      	movs	r2, #0
 800ad28:	2300      	movs	r3, #0
 800ad2a:	4681      	mov	r9, r0
 800ad2c:	468a      	mov	sl, r1
 800ad2e:	f7f5 fe3b 	bl	80009a8 <__aeabi_dcmpeq>
 800ad32:	2800      	cmp	r0, #0
 800ad34:	f47f ae07 	bne.w	800a946 <_strtod_l+0x57e>
 800ad38:	e73e      	b.n	800abb8 <_strtod_l+0x7f0>
 800ad3a:	9904      	ldr	r1, [sp, #16]
 800ad3c:	4640      	mov	r0, r8
 800ad3e:	f001 f914 	bl	800bf6a <__ratio>
 800ad42:	2200      	movs	r2, #0
 800ad44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad48:	4606      	mov	r6, r0
 800ad4a:	460f      	mov	r7, r1
 800ad4c:	f7f5 fe40 	bl	80009d0 <__aeabi_dcmple>
 800ad50:	2800      	cmp	r0, #0
 800ad52:	d075      	beq.n	800ae40 <_strtod_l+0xa78>
 800ad54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d047      	beq.n	800adea <_strtod_l+0xa22>
 800ad5a:	2600      	movs	r6, #0
 800ad5c:	4f68      	ldr	r7, [pc, #416]	; (800af00 <_strtod_l+0xb38>)
 800ad5e:	4d68      	ldr	r5, [pc, #416]	; (800af00 <_strtod_l+0xb38>)
 800ad60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad66:	0d1b      	lsrs	r3, r3, #20
 800ad68:	051b      	lsls	r3, r3, #20
 800ad6a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad6e:	4b65      	ldr	r3, [pc, #404]	; (800af04 <_strtod_l+0xb3c>)
 800ad70:	429a      	cmp	r2, r3
 800ad72:	f040 80cf 	bne.w	800af14 <_strtod_l+0xb4c>
 800ad76:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ad7a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800ad7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad80:	4648      	mov	r0, r9
 800ad82:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800ad86:	4651      	mov	r1, sl
 800ad88:	f001 f82a 	bl	800bde0 <__ulp>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	460b      	mov	r3, r1
 800ad90:	4630      	mov	r0, r6
 800ad92:	4639      	mov	r1, r7
 800ad94:	f7f5 fba0 	bl	80004d8 <__aeabi_dmul>
 800ad98:	464a      	mov	r2, r9
 800ad9a:	4653      	mov	r3, sl
 800ad9c:	f7f5 f9e6 	bl	800016c <__adddf3>
 800ada0:	460b      	mov	r3, r1
 800ada2:	4954      	ldr	r1, [pc, #336]	; (800aef4 <_strtod_l+0xb2c>)
 800ada4:	4a58      	ldr	r2, [pc, #352]	; (800af08 <_strtod_l+0xb40>)
 800ada6:	4019      	ands	r1, r3
 800ada8:	4291      	cmp	r1, r2
 800adaa:	4681      	mov	r9, r0
 800adac:	d95e      	bls.n	800ae6c <_strtod_l+0xaa4>
 800adae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adb0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d103      	bne.n	800adc0 <_strtod_l+0x9f8>
 800adb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adba:	3301      	adds	r3, #1
 800adbc:	f43f ad26 	beq.w	800a80c <_strtod_l+0x444>
 800adc0:	f04f 39ff 	mov.w	r9, #4294967295
 800adc4:	f8df a130 	ldr.w	sl, [pc, #304]	; 800aef8 <_strtod_l+0xb30>
 800adc8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800adca:	4658      	mov	r0, fp
 800adcc:	f000 fd72 	bl	800b8b4 <_Bfree>
 800add0:	9906      	ldr	r1, [sp, #24]
 800add2:	4658      	mov	r0, fp
 800add4:	f000 fd6e 	bl	800b8b4 <_Bfree>
 800add8:	9904      	ldr	r1, [sp, #16]
 800adda:	4658      	mov	r0, fp
 800addc:	f000 fd6a 	bl	800b8b4 <_Bfree>
 800ade0:	4641      	mov	r1, r8
 800ade2:	4658      	mov	r0, fp
 800ade4:	f000 fd66 	bl	800b8b4 <_Bfree>
 800ade8:	e617      	b.n	800aa1a <_strtod_l+0x652>
 800adea:	f1b9 0f00 	cmp.w	r9, #0
 800adee:	d119      	bne.n	800ae24 <_strtod_l+0xa5c>
 800adf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800adf6:	b9e3      	cbnz	r3, 800ae32 <_strtod_l+0xa6a>
 800adf8:	2200      	movs	r2, #0
 800adfa:	4b41      	ldr	r3, [pc, #260]	; (800af00 <_strtod_l+0xb38>)
 800adfc:	4630      	mov	r0, r6
 800adfe:	4639      	mov	r1, r7
 800ae00:	f7f5 fddc 	bl	80009bc <__aeabi_dcmplt>
 800ae04:	b9c8      	cbnz	r0, 800ae3a <_strtod_l+0xa72>
 800ae06:	2200      	movs	r2, #0
 800ae08:	4b40      	ldr	r3, [pc, #256]	; (800af0c <_strtod_l+0xb44>)
 800ae0a:	4630      	mov	r0, r6
 800ae0c:	4639      	mov	r1, r7
 800ae0e:	f7f5 fb63 	bl	80004d8 <__aeabi_dmul>
 800ae12:	4604      	mov	r4, r0
 800ae14:	460d      	mov	r5, r1
 800ae16:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ae1a:	9418      	str	r4, [sp, #96]	; 0x60
 800ae1c:	9319      	str	r3, [sp, #100]	; 0x64
 800ae1e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800ae22:	e79d      	b.n	800ad60 <_strtod_l+0x998>
 800ae24:	f1b9 0f01 	cmp.w	r9, #1
 800ae28:	d103      	bne.n	800ae32 <_strtod_l+0xa6a>
 800ae2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f43f ad8a 	beq.w	800a946 <_strtod_l+0x57e>
 800ae32:	2600      	movs	r6, #0
 800ae34:	4f36      	ldr	r7, [pc, #216]	; (800af10 <_strtod_l+0xb48>)
 800ae36:	2400      	movs	r4, #0
 800ae38:	e791      	b.n	800ad5e <_strtod_l+0x996>
 800ae3a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ae3c:	4d33      	ldr	r5, [pc, #204]	; (800af0c <_strtod_l+0xb44>)
 800ae3e:	e7ea      	b.n	800ae16 <_strtod_l+0xa4e>
 800ae40:	4b32      	ldr	r3, [pc, #200]	; (800af0c <_strtod_l+0xb44>)
 800ae42:	2200      	movs	r2, #0
 800ae44:	4630      	mov	r0, r6
 800ae46:	4639      	mov	r1, r7
 800ae48:	f7f5 fb46 	bl	80004d8 <__aeabi_dmul>
 800ae4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae4e:	4604      	mov	r4, r0
 800ae50:	460d      	mov	r5, r1
 800ae52:	b933      	cbnz	r3, 800ae62 <_strtod_l+0xa9a>
 800ae54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae58:	9010      	str	r0, [sp, #64]	; 0x40
 800ae5a:	9311      	str	r3, [sp, #68]	; 0x44
 800ae5c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ae60:	e77e      	b.n	800ad60 <_strtod_l+0x998>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ae6a:	e7f7      	b.n	800ae5c <_strtod_l+0xa94>
 800ae6c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 800ae70:	9b05      	ldr	r3, [sp, #20]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d1a8      	bne.n	800adc8 <_strtod_l+0xa00>
 800ae76:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800ae7a:	0d1b      	lsrs	r3, r3, #20
 800ae7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae7e:	051b      	lsls	r3, r3, #20
 800ae80:	429a      	cmp	r2, r3
 800ae82:	4656      	mov	r6, sl
 800ae84:	d1a0      	bne.n	800adc8 <_strtod_l+0xa00>
 800ae86:	4629      	mov	r1, r5
 800ae88:	4620      	mov	r0, r4
 800ae8a:	f7f5 fdd5 	bl	8000a38 <__aeabi_d2iz>
 800ae8e:	f7f5 fab9 	bl	8000404 <__aeabi_i2d>
 800ae92:	460b      	mov	r3, r1
 800ae94:	4602      	mov	r2, r0
 800ae96:	4629      	mov	r1, r5
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f7f5 f965 	bl	8000168 <__aeabi_dsub>
 800ae9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aea0:	4604      	mov	r4, r0
 800aea2:	460d      	mov	r5, r1
 800aea4:	b933      	cbnz	r3, 800aeb4 <_strtod_l+0xaec>
 800aea6:	f1b9 0f00 	cmp.w	r9, #0
 800aeaa:	d103      	bne.n	800aeb4 <_strtod_l+0xaec>
 800aeac:	f3ca 0613 	ubfx	r6, sl, #0, #20
 800aeb0:	2e00      	cmp	r6, #0
 800aeb2:	d06a      	beq.n	800af8a <_strtod_l+0xbc2>
 800aeb4:	a30a      	add	r3, pc, #40	; (adr r3, 800aee0 <_strtod_l+0xb18>)
 800aeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeba:	4620      	mov	r0, r4
 800aebc:	4629      	mov	r1, r5
 800aebe:	f7f5 fd7d 	bl	80009bc <__aeabi_dcmplt>
 800aec2:	2800      	cmp	r0, #0
 800aec4:	f47f acad 	bne.w	800a822 <_strtod_l+0x45a>
 800aec8:	a307      	add	r3, pc, #28	; (adr r3, 800aee8 <_strtod_l+0xb20>)
 800aeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aece:	4620      	mov	r0, r4
 800aed0:	4629      	mov	r1, r5
 800aed2:	f7f5 fd91 	bl	80009f8 <__aeabi_dcmpgt>
 800aed6:	2800      	cmp	r0, #0
 800aed8:	f43f af76 	beq.w	800adc8 <_strtod_l+0xa00>
 800aedc:	e4a1      	b.n	800a822 <_strtod_l+0x45a>
 800aede:	bf00      	nop
 800aee0:	94a03595 	.word	0x94a03595
 800aee4:	3fdfffff 	.word	0x3fdfffff
 800aee8:	35afe535 	.word	0x35afe535
 800aeec:	3fe00000 	.word	0x3fe00000
 800aef0:	000fffff 	.word	0x000fffff
 800aef4:	7ff00000 	.word	0x7ff00000
 800aef8:	7fefffff 	.word	0x7fefffff
 800aefc:	39500000 	.word	0x39500000
 800af00:	3ff00000 	.word	0x3ff00000
 800af04:	7fe00000 	.word	0x7fe00000
 800af08:	7c9fffff 	.word	0x7c9fffff
 800af0c:	3fe00000 	.word	0x3fe00000
 800af10:	bff00000 	.word	0xbff00000
 800af14:	9b05      	ldr	r3, [sp, #20]
 800af16:	b313      	cbz	r3, 800af5e <_strtod_l+0xb96>
 800af18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af1a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800af1e:	d81e      	bhi.n	800af5e <_strtod_l+0xb96>
 800af20:	a325      	add	r3, pc, #148	; (adr r3, 800afb8 <_strtod_l+0xbf0>)
 800af22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af26:	4620      	mov	r0, r4
 800af28:	4629      	mov	r1, r5
 800af2a:	f7f5 fd51 	bl	80009d0 <__aeabi_dcmple>
 800af2e:	b190      	cbz	r0, 800af56 <_strtod_l+0xb8e>
 800af30:	4629      	mov	r1, r5
 800af32:	4620      	mov	r0, r4
 800af34:	f7f5 fda8 	bl	8000a88 <__aeabi_d2uiz>
 800af38:	2800      	cmp	r0, #0
 800af3a:	bf08      	it	eq
 800af3c:	2001      	moveq	r0, #1
 800af3e:	f7f5 fa51 	bl	80003e4 <__aeabi_ui2d>
 800af42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af44:	4604      	mov	r4, r0
 800af46:	460d      	mov	r5, r1
 800af48:	b9d3      	cbnz	r3, 800af80 <_strtod_l+0xbb8>
 800af4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af4e:	9012      	str	r0, [sp, #72]	; 0x48
 800af50:	9313      	str	r3, [sp, #76]	; 0x4c
 800af52:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800af56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af58:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800af5c:	1a9f      	subs	r7, r3, r2
 800af5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800af62:	f000 ff3d 	bl	800bde0 <__ulp>
 800af66:	4602      	mov	r2, r0
 800af68:	460b      	mov	r3, r1
 800af6a:	4630      	mov	r0, r6
 800af6c:	4639      	mov	r1, r7
 800af6e:	f7f5 fab3 	bl	80004d8 <__aeabi_dmul>
 800af72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800af76:	f7f5 f8f9 	bl	800016c <__adddf3>
 800af7a:	4681      	mov	r9, r0
 800af7c:	468a      	mov	sl, r1
 800af7e:	e777      	b.n	800ae70 <_strtod_l+0xaa8>
 800af80:	4602      	mov	r2, r0
 800af82:	460b      	mov	r3, r1
 800af84:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800af88:	e7e3      	b.n	800af52 <_strtod_l+0xb8a>
 800af8a:	a30d      	add	r3, pc, #52	; (adr r3, 800afc0 <_strtod_l+0xbf8>)
 800af8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af90:	f7f5 fd14 	bl	80009bc <__aeabi_dcmplt>
 800af94:	e79f      	b.n	800aed6 <_strtod_l+0xb0e>
 800af96:	2300      	movs	r3, #0
 800af98:	930d      	str	r3, [sp, #52]	; 0x34
 800af9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af9c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af9e:	6013      	str	r3, [r2, #0]
 800afa0:	f7ff ba55 	b.w	800a44e <_strtod_l+0x86>
 800afa4:	2b65      	cmp	r3, #101	; 0x65
 800afa6:	f04f 0200 	mov.w	r2, #0
 800afaa:	f43f ab42 	beq.w	800a632 <_strtod_l+0x26a>
 800afae:	2101      	movs	r1, #1
 800afb0:	4614      	mov	r4, r2
 800afb2:	9105      	str	r1, [sp, #20]
 800afb4:	f7ff babf 	b.w	800a536 <_strtod_l+0x16e>
 800afb8:	ffc00000 	.word	0xffc00000
 800afbc:	41dfffff 	.word	0x41dfffff
 800afc0:	94a03595 	.word	0x94a03595
 800afc4:	3fcfffff 	.word	0x3fcfffff

0800afc8 <strtod>:
 800afc8:	4b06      	ldr	r3, [pc, #24]	; (800afe4 <strtod+0x1c>)
 800afca:	b410      	push	{r4}
 800afcc:	681c      	ldr	r4, [r3, #0]
 800afce:	4a06      	ldr	r2, [pc, #24]	; (800afe8 <strtod+0x20>)
 800afd0:	6a23      	ldr	r3, [r4, #32]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	bf08      	it	eq
 800afd6:	4613      	moveq	r3, r2
 800afd8:	460a      	mov	r2, r1
 800afda:	4601      	mov	r1, r0
 800afdc:	4620      	mov	r0, r4
 800afde:	bc10      	pop	{r4}
 800afe0:	f7ff b9f2 	b.w	800a3c8 <_strtod_l>
 800afe4:	200001b4 	.word	0x200001b4
 800afe8:	20000218 	.word	0x20000218

0800afec <_strtol_l.isra.0>:
 800afec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aff0:	4680      	mov	r8, r0
 800aff2:	4689      	mov	r9, r1
 800aff4:	4692      	mov	sl, r2
 800aff6:	461e      	mov	r6, r3
 800aff8:	460f      	mov	r7, r1
 800affa:	463d      	mov	r5, r7
 800affc:	9808      	ldr	r0, [sp, #32]
 800affe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b002:	f000 fbfd 	bl	800b800 <__locale_ctype_ptr_l>
 800b006:	4420      	add	r0, r4
 800b008:	7843      	ldrb	r3, [r0, #1]
 800b00a:	f013 0308 	ands.w	r3, r3, #8
 800b00e:	d132      	bne.n	800b076 <_strtol_l.isra.0+0x8a>
 800b010:	2c2d      	cmp	r4, #45	; 0x2d
 800b012:	d132      	bne.n	800b07a <_strtol_l.isra.0+0x8e>
 800b014:	2201      	movs	r2, #1
 800b016:	787c      	ldrb	r4, [r7, #1]
 800b018:	1cbd      	adds	r5, r7, #2
 800b01a:	2e00      	cmp	r6, #0
 800b01c:	d05d      	beq.n	800b0da <_strtol_l.isra.0+0xee>
 800b01e:	2e10      	cmp	r6, #16
 800b020:	d109      	bne.n	800b036 <_strtol_l.isra.0+0x4a>
 800b022:	2c30      	cmp	r4, #48	; 0x30
 800b024:	d107      	bne.n	800b036 <_strtol_l.isra.0+0x4a>
 800b026:	782b      	ldrb	r3, [r5, #0]
 800b028:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b02c:	2b58      	cmp	r3, #88	; 0x58
 800b02e:	d14f      	bne.n	800b0d0 <_strtol_l.isra.0+0xe4>
 800b030:	2610      	movs	r6, #16
 800b032:	786c      	ldrb	r4, [r5, #1]
 800b034:	3502      	adds	r5, #2
 800b036:	2a00      	cmp	r2, #0
 800b038:	bf14      	ite	ne
 800b03a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b03e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b042:	2700      	movs	r7, #0
 800b044:	fbb1 fcf6 	udiv	ip, r1, r6
 800b048:	4638      	mov	r0, r7
 800b04a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800b04e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b052:	2b09      	cmp	r3, #9
 800b054:	d817      	bhi.n	800b086 <_strtol_l.isra.0+0x9a>
 800b056:	461c      	mov	r4, r3
 800b058:	42a6      	cmp	r6, r4
 800b05a:	dd23      	ble.n	800b0a4 <_strtol_l.isra.0+0xb8>
 800b05c:	1c7b      	adds	r3, r7, #1
 800b05e:	d007      	beq.n	800b070 <_strtol_l.isra.0+0x84>
 800b060:	4584      	cmp	ip, r0
 800b062:	d31c      	bcc.n	800b09e <_strtol_l.isra.0+0xb2>
 800b064:	d101      	bne.n	800b06a <_strtol_l.isra.0+0x7e>
 800b066:	45a6      	cmp	lr, r4
 800b068:	db19      	blt.n	800b09e <_strtol_l.isra.0+0xb2>
 800b06a:	2701      	movs	r7, #1
 800b06c:	fb00 4006 	mla	r0, r0, r6, r4
 800b070:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b074:	e7eb      	b.n	800b04e <_strtol_l.isra.0+0x62>
 800b076:	462f      	mov	r7, r5
 800b078:	e7bf      	b.n	800affa <_strtol_l.isra.0+0xe>
 800b07a:	2c2b      	cmp	r4, #43	; 0x2b
 800b07c:	bf04      	itt	eq
 800b07e:	1cbd      	addeq	r5, r7, #2
 800b080:	787c      	ldrbeq	r4, [r7, #1]
 800b082:	461a      	mov	r2, r3
 800b084:	e7c9      	b.n	800b01a <_strtol_l.isra.0+0x2e>
 800b086:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b08a:	2b19      	cmp	r3, #25
 800b08c:	d801      	bhi.n	800b092 <_strtol_l.isra.0+0xa6>
 800b08e:	3c37      	subs	r4, #55	; 0x37
 800b090:	e7e2      	b.n	800b058 <_strtol_l.isra.0+0x6c>
 800b092:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b096:	2b19      	cmp	r3, #25
 800b098:	d804      	bhi.n	800b0a4 <_strtol_l.isra.0+0xb8>
 800b09a:	3c57      	subs	r4, #87	; 0x57
 800b09c:	e7dc      	b.n	800b058 <_strtol_l.isra.0+0x6c>
 800b09e:	f04f 37ff 	mov.w	r7, #4294967295
 800b0a2:	e7e5      	b.n	800b070 <_strtol_l.isra.0+0x84>
 800b0a4:	1c7b      	adds	r3, r7, #1
 800b0a6:	d108      	bne.n	800b0ba <_strtol_l.isra.0+0xce>
 800b0a8:	2322      	movs	r3, #34	; 0x22
 800b0aa:	4608      	mov	r0, r1
 800b0ac:	f8c8 3000 	str.w	r3, [r8]
 800b0b0:	f1ba 0f00 	cmp.w	sl, #0
 800b0b4:	d107      	bne.n	800b0c6 <_strtol_l.isra.0+0xda>
 800b0b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ba:	b102      	cbz	r2, 800b0be <_strtol_l.isra.0+0xd2>
 800b0bc:	4240      	negs	r0, r0
 800b0be:	f1ba 0f00 	cmp.w	sl, #0
 800b0c2:	d0f8      	beq.n	800b0b6 <_strtol_l.isra.0+0xca>
 800b0c4:	b10f      	cbz	r7, 800b0ca <_strtol_l.isra.0+0xde>
 800b0c6:	f105 39ff 	add.w	r9, r5, #4294967295
 800b0ca:	f8ca 9000 	str.w	r9, [sl]
 800b0ce:	e7f2      	b.n	800b0b6 <_strtol_l.isra.0+0xca>
 800b0d0:	2430      	movs	r4, #48	; 0x30
 800b0d2:	2e00      	cmp	r6, #0
 800b0d4:	d1af      	bne.n	800b036 <_strtol_l.isra.0+0x4a>
 800b0d6:	2608      	movs	r6, #8
 800b0d8:	e7ad      	b.n	800b036 <_strtol_l.isra.0+0x4a>
 800b0da:	2c30      	cmp	r4, #48	; 0x30
 800b0dc:	d0a3      	beq.n	800b026 <_strtol_l.isra.0+0x3a>
 800b0de:	260a      	movs	r6, #10
 800b0e0:	e7a9      	b.n	800b036 <_strtol_l.isra.0+0x4a>
	...

0800b0e4 <_strtol_r>:
 800b0e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0e6:	4c06      	ldr	r4, [pc, #24]	; (800b100 <_strtol_r+0x1c>)
 800b0e8:	4d06      	ldr	r5, [pc, #24]	; (800b104 <_strtol_r+0x20>)
 800b0ea:	6824      	ldr	r4, [r4, #0]
 800b0ec:	6a24      	ldr	r4, [r4, #32]
 800b0ee:	2c00      	cmp	r4, #0
 800b0f0:	bf08      	it	eq
 800b0f2:	462c      	moveq	r4, r5
 800b0f4:	9400      	str	r4, [sp, #0]
 800b0f6:	f7ff ff79 	bl	800afec <_strtol_l.isra.0>
 800b0fa:	b003      	add	sp, #12
 800b0fc:	bd30      	pop	{r4, r5, pc}
 800b0fe:	bf00      	nop
 800b100:	200001b4 	.word	0x200001b4
 800b104:	20000218 	.word	0x20000218

0800b108 <strtol>:
 800b108:	4b08      	ldr	r3, [pc, #32]	; (800b12c <strtol+0x24>)
 800b10a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b10c:	681c      	ldr	r4, [r3, #0]
 800b10e:	4d08      	ldr	r5, [pc, #32]	; (800b130 <strtol+0x28>)
 800b110:	6a23      	ldr	r3, [r4, #32]
 800b112:	2b00      	cmp	r3, #0
 800b114:	bf08      	it	eq
 800b116:	462b      	moveq	r3, r5
 800b118:	9300      	str	r3, [sp, #0]
 800b11a:	4613      	mov	r3, r2
 800b11c:	460a      	mov	r2, r1
 800b11e:	4601      	mov	r1, r0
 800b120:	4620      	mov	r0, r4
 800b122:	f7ff ff63 	bl	800afec <_strtol_l.isra.0>
 800b126:	b003      	add	sp, #12
 800b128:	bd30      	pop	{r4, r5, pc}
 800b12a:	bf00      	nop
 800b12c:	200001b4 	.word	0x200001b4
 800b130:	20000218 	.word	0x20000218

0800b134 <__utoa>:
 800b134:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b136:	b08b      	sub	sp, #44	; 0x2c
 800b138:	4605      	mov	r5, r0
 800b13a:	460c      	mov	r4, r1
 800b13c:	466e      	mov	r6, sp
 800b13e:	4b1b      	ldr	r3, [pc, #108]	; (800b1ac <__utoa+0x78>)
 800b140:	f103 0c20 	add.w	ip, r3, #32
 800b144:	4637      	mov	r7, r6
 800b146:	6818      	ldr	r0, [r3, #0]
 800b148:	6859      	ldr	r1, [r3, #4]
 800b14a:	3308      	adds	r3, #8
 800b14c:	c703      	stmia	r7!, {r0, r1}
 800b14e:	4563      	cmp	r3, ip
 800b150:	463e      	mov	r6, r7
 800b152:	d1f7      	bne.n	800b144 <__utoa+0x10>
 800b154:	6818      	ldr	r0, [r3, #0]
 800b156:	791b      	ldrb	r3, [r3, #4]
 800b158:	6038      	str	r0, [r7, #0]
 800b15a:	713b      	strb	r3, [r7, #4]
 800b15c:	1e93      	subs	r3, r2, #2
 800b15e:	2b22      	cmp	r3, #34	; 0x22
 800b160:	f04f 0300 	mov.w	r3, #0
 800b164:	d904      	bls.n	800b170 <__utoa+0x3c>
 800b166:	7023      	strb	r3, [r4, #0]
 800b168:	461c      	mov	r4, r3
 800b16a:	4620      	mov	r0, r4
 800b16c:	b00b      	add	sp, #44	; 0x2c
 800b16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b170:	1e66      	subs	r6, r4, #1
 800b172:	fbb5 f0f2 	udiv	r0, r5, r2
 800b176:	fb02 5510 	mls	r5, r2, r0, r5
 800b17a:	af0a      	add	r7, sp, #40	; 0x28
 800b17c:	443d      	add	r5, r7
 800b17e:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800b182:	1c59      	adds	r1, r3, #1
 800b184:	f806 5f01 	strb.w	r5, [r6, #1]!
 800b188:	4605      	mov	r5, r0
 800b18a:	b968      	cbnz	r0, 800b1a8 <__utoa+0x74>
 800b18c:	4622      	mov	r2, r4
 800b18e:	5460      	strb	r0, [r4, r1]
 800b190:	4423      	add	r3, r4
 800b192:	1b19      	subs	r1, r3, r4
 800b194:	1b10      	subs	r0, r2, r4
 800b196:	4281      	cmp	r1, r0
 800b198:	dde7      	ble.n	800b16a <__utoa+0x36>
 800b19a:	7811      	ldrb	r1, [r2, #0]
 800b19c:	7818      	ldrb	r0, [r3, #0]
 800b19e:	f802 0b01 	strb.w	r0, [r2], #1
 800b1a2:	f803 1901 	strb.w	r1, [r3], #-1
 800b1a6:	e7f4      	b.n	800b192 <__utoa+0x5e>
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	e7e2      	b.n	800b172 <__utoa+0x3e>
 800b1ac:	0800ed48 	.word	0x0800ed48

0800b1b0 <rshift>:
 800b1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1b2:	6906      	ldr	r6, [r0, #16]
 800b1b4:	114b      	asrs	r3, r1, #5
 800b1b6:	429e      	cmp	r6, r3
 800b1b8:	f100 0414 	add.w	r4, r0, #20
 800b1bc:	dd31      	ble.n	800b222 <rshift+0x72>
 800b1be:	f011 011f 	ands.w	r1, r1, #31
 800b1c2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b1c6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800b1ca:	d108      	bne.n	800b1de <rshift+0x2e>
 800b1cc:	4621      	mov	r1, r4
 800b1ce:	42b2      	cmp	r2, r6
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	d211      	bcs.n	800b1f8 <rshift+0x48>
 800b1d4:	f852 3b04 	ldr.w	r3, [r2], #4
 800b1d8:	f841 3b04 	str.w	r3, [r1], #4
 800b1dc:	e7f7      	b.n	800b1ce <rshift+0x1e>
 800b1de:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800b1e2:	4623      	mov	r3, r4
 800b1e4:	f1c1 0c20 	rsb	ip, r1, #32
 800b1e8:	40cd      	lsrs	r5, r1
 800b1ea:	3204      	adds	r2, #4
 800b1ec:	42b2      	cmp	r2, r6
 800b1ee:	4617      	mov	r7, r2
 800b1f0:	d30d      	bcc.n	800b20e <rshift+0x5e>
 800b1f2:	601d      	str	r5, [r3, #0]
 800b1f4:	b105      	cbz	r5, 800b1f8 <rshift+0x48>
 800b1f6:	3304      	adds	r3, #4
 800b1f8:	42a3      	cmp	r3, r4
 800b1fa:	eba3 0204 	sub.w	r2, r3, r4
 800b1fe:	bf08      	it	eq
 800b200:	2300      	moveq	r3, #0
 800b202:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b206:	6102      	str	r2, [r0, #16]
 800b208:	bf08      	it	eq
 800b20a:	6143      	streq	r3, [r0, #20]
 800b20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b20e:	683f      	ldr	r7, [r7, #0]
 800b210:	fa07 f70c 	lsl.w	r7, r7, ip
 800b214:	433d      	orrs	r5, r7
 800b216:	f843 5b04 	str.w	r5, [r3], #4
 800b21a:	f852 5b04 	ldr.w	r5, [r2], #4
 800b21e:	40cd      	lsrs	r5, r1
 800b220:	e7e4      	b.n	800b1ec <rshift+0x3c>
 800b222:	4623      	mov	r3, r4
 800b224:	e7e8      	b.n	800b1f8 <rshift+0x48>

0800b226 <__hexdig_fun>:
 800b226:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b22a:	2b09      	cmp	r3, #9
 800b22c:	d802      	bhi.n	800b234 <__hexdig_fun+0xe>
 800b22e:	3820      	subs	r0, #32
 800b230:	b2c0      	uxtb	r0, r0
 800b232:	4770      	bx	lr
 800b234:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b238:	2b05      	cmp	r3, #5
 800b23a:	d801      	bhi.n	800b240 <__hexdig_fun+0x1a>
 800b23c:	3847      	subs	r0, #71	; 0x47
 800b23e:	e7f7      	b.n	800b230 <__hexdig_fun+0xa>
 800b240:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b244:	2b05      	cmp	r3, #5
 800b246:	d801      	bhi.n	800b24c <__hexdig_fun+0x26>
 800b248:	3827      	subs	r0, #39	; 0x27
 800b24a:	e7f1      	b.n	800b230 <__hexdig_fun+0xa>
 800b24c:	2000      	movs	r0, #0
 800b24e:	4770      	bx	lr

0800b250 <__gethex>:
 800b250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b254:	b08b      	sub	sp, #44	; 0x2c
 800b256:	9002      	str	r0, [sp, #8]
 800b258:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b25a:	468a      	mov	sl, r1
 800b25c:	4690      	mov	r8, r2
 800b25e:	9306      	str	r3, [sp, #24]
 800b260:	f000 fae0 	bl	800b824 <__localeconv_l>
 800b264:	6803      	ldr	r3, [r0, #0]
 800b266:	f04f 0b00 	mov.w	fp, #0
 800b26a:	4618      	mov	r0, r3
 800b26c:	9303      	str	r3, [sp, #12]
 800b26e:	f7f4 ff6f 	bl	8000150 <strlen>
 800b272:	9b03      	ldr	r3, [sp, #12]
 800b274:	9001      	str	r0, [sp, #4]
 800b276:	4403      	add	r3, r0
 800b278:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b27c:	9307      	str	r3, [sp, #28]
 800b27e:	f8da 3000 	ldr.w	r3, [sl]
 800b282:	3302      	adds	r3, #2
 800b284:	461f      	mov	r7, r3
 800b286:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b28a:	2830      	cmp	r0, #48	; 0x30
 800b28c:	d06c      	beq.n	800b368 <__gethex+0x118>
 800b28e:	f7ff ffca 	bl	800b226 <__hexdig_fun>
 800b292:	4604      	mov	r4, r0
 800b294:	2800      	cmp	r0, #0
 800b296:	d16a      	bne.n	800b36e <__gethex+0x11e>
 800b298:	9a01      	ldr	r2, [sp, #4]
 800b29a:	9903      	ldr	r1, [sp, #12]
 800b29c:	4638      	mov	r0, r7
 800b29e:	f001 fa78 	bl	800c792 <strncmp>
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	d166      	bne.n	800b374 <__gethex+0x124>
 800b2a6:	9b01      	ldr	r3, [sp, #4]
 800b2a8:	5cf8      	ldrb	r0, [r7, r3]
 800b2aa:	18fe      	adds	r6, r7, r3
 800b2ac:	f7ff ffbb 	bl	800b226 <__hexdig_fun>
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	d062      	beq.n	800b37a <__gethex+0x12a>
 800b2b4:	4633      	mov	r3, r6
 800b2b6:	7818      	ldrb	r0, [r3, #0]
 800b2b8:	461f      	mov	r7, r3
 800b2ba:	2830      	cmp	r0, #48	; 0x30
 800b2bc:	f103 0301 	add.w	r3, r3, #1
 800b2c0:	d0f9      	beq.n	800b2b6 <__gethex+0x66>
 800b2c2:	f7ff ffb0 	bl	800b226 <__hexdig_fun>
 800b2c6:	fab0 f580 	clz	r5, r0
 800b2ca:	4634      	mov	r4, r6
 800b2cc:	f04f 0b01 	mov.w	fp, #1
 800b2d0:	096d      	lsrs	r5, r5, #5
 800b2d2:	463a      	mov	r2, r7
 800b2d4:	4616      	mov	r6, r2
 800b2d6:	7830      	ldrb	r0, [r6, #0]
 800b2d8:	3201      	adds	r2, #1
 800b2da:	f7ff ffa4 	bl	800b226 <__hexdig_fun>
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	d1f8      	bne.n	800b2d4 <__gethex+0x84>
 800b2e2:	9a01      	ldr	r2, [sp, #4]
 800b2e4:	9903      	ldr	r1, [sp, #12]
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	f001 fa53 	bl	800c792 <strncmp>
 800b2ec:	b950      	cbnz	r0, 800b304 <__gethex+0xb4>
 800b2ee:	b954      	cbnz	r4, 800b306 <__gethex+0xb6>
 800b2f0:	9b01      	ldr	r3, [sp, #4]
 800b2f2:	18f4      	adds	r4, r6, r3
 800b2f4:	4622      	mov	r2, r4
 800b2f6:	4616      	mov	r6, r2
 800b2f8:	7830      	ldrb	r0, [r6, #0]
 800b2fa:	3201      	adds	r2, #1
 800b2fc:	f7ff ff93 	bl	800b226 <__hexdig_fun>
 800b300:	2800      	cmp	r0, #0
 800b302:	d1f8      	bne.n	800b2f6 <__gethex+0xa6>
 800b304:	b10c      	cbz	r4, 800b30a <__gethex+0xba>
 800b306:	1ba4      	subs	r4, r4, r6
 800b308:	00a4      	lsls	r4, r4, #2
 800b30a:	7833      	ldrb	r3, [r6, #0]
 800b30c:	2b50      	cmp	r3, #80	; 0x50
 800b30e:	d001      	beq.n	800b314 <__gethex+0xc4>
 800b310:	2b70      	cmp	r3, #112	; 0x70
 800b312:	d140      	bne.n	800b396 <__gethex+0x146>
 800b314:	7873      	ldrb	r3, [r6, #1]
 800b316:	2b2b      	cmp	r3, #43	; 0x2b
 800b318:	d031      	beq.n	800b37e <__gethex+0x12e>
 800b31a:	2b2d      	cmp	r3, #45	; 0x2d
 800b31c:	d033      	beq.n	800b386 <__gethex+0x136>
 800b31e:	f04f 0900 	mov.w	r9, #0
 800b322:	1c71      	adds	r1, r6, #1
 800b324:	7808      	ldrb	r0, [r1, #0]
 800b326:	f7ff ff7e 	bl	800b226 <__hexdig_fun>
 800b32a:	1e43      	subs	r3, r0, #1
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	2b18      	cmp	r3, #24
 800b330:	d831      	bhi.n	800b396 <__gethex+0x146>
 800b332:	f1a0 0210 	sub.w	r2, r0, #16
 800b336:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b33a:	f7ff ff74 	bl	800b226 <__hexdig_fun>
 800b33e:	1e43      	subs	r3, r0, #1
 800b340:	b2db      	uxtb	r3, r3
 800b342:	2b18      	cmp	r3, #24
 800b344:	d922      	bls.n	800b38c <__gethex+0x13c>
 800b346:	f1b9 0f00 	cmp.w	r9, #0
 800b34a:	d000      	beq.n	800b34e <__gethex+0xfe>
 800b34c:	4252      	negs	r2, r2
 800b34e:	4414      	add	r4, r2
 800b350:	f8ca 1000 	str.w	r1, [sl]
 800b354:	b30d      	cbz	r5, 800b39a <__gethex+0x14a>
 800b356:	f1bb 0f00 	cmp.w	fp, #0
 800b35a:	bf0c      	ite	eq
 800b35c:	2706      	moveq	r7, #6
 800b35e:	2700      	movne	r7, #0
 800b360:	4638      	mov	r0, r7
 800b362:	b00b      	add	sp, #44	; 0x2c
 800b364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b368:	f10b 0b01 	add.w	fp, fp, #1
 800b36c:	e78a      	b.n	800b284 <__gethex+0x34>
 800b36e:	2500      	movs	r5, #0
 800b370:	462c      	mov	r4, r5
 800b372:	e7ae      	b.n	800b2d2 <__gethex+0x82>
 800b374:	463e      	mov	r6, r7
 800b376:	2501      	movs	r5, #1
 800b378:	e7c7      	b.n	800b30a <__gethex+0xba>
 800b37a:	4604      	mov	r4, r0
 800b37c:	e7fb      	b.n	800b376 <__gethex+0x126>
 800b37e:	f04f 0900 	mov.w	r9, #0
 800b382:	1cb1      	adds	r1, r6, #2
 800b384:	e7ce      	b.n	800b324 <__gethex+0xd4>
 800b386:	f04f 0901 	mov.w	r9, #1
 800b38a:	e7fa      	b.n	800b382 <__gethex+0x132>
 800b38c:	230a      	movs	r3, #10
 800b38e:	fb03 0202 	mla	r2, r3, r2, r0
 800b392:	3a10      	subs	r2, #16
 800b394:	e7cf      	b.n	800b336 <__gethex+0xe6>
 800b396:	4631      	mov	r1, r6
 800b398:	e7da      	b.n	800b350 <__gethex+0x100>
 800b39a:	4629      	mov	r1, r5
 800b39c:	1bf3      	subs	r3, r6, r7
 800b39e:	3b01      	subs	r3, #1
 800b3a0:	2b07      	cmp	r3, #7
 800b3a2:	dc49      	bgt.n	800b438 <__gethex+0x1e8>
 800b3a4:	9802      	ldr	r0, [sp, #8]
 800b3a6:	f000 fa51 	bl	800b84c <_Balloc>
 800b3aa:	f04f 0b00 	mov.w	fp, #0
 800b3ae:	4605      	mov	r5, r0
 800b3b0:	46da      	mov	sl, fp
 800b3b2:	9b01      	ldr	r3, [sp, #4]
 800b3b4:	f100 0914 	add.w	r9, r0, #20
 800b3b8:	f1c3 0301 	rsb	r3, r3, #1
 800b3bc:	f8cd 9010 	str.w	r9, [sp, #16]
 800b3c0:	9308      	str	r3, [sp, #32]
 800b3c2:	42b7      	cmp	r7, r6
 800b3c4:	d33b      	bcc.n	800b43e <__gethex+0x1ee>
 800b3c6:	9804      	ldr	r0, [sp, #16]
 800b3c8:	f840 ab04 	str.w	sl, [r0], #4
 800b3cc:	eba0 0009 	sub.w	r0, r0, r9
 800b3d0:	1080      	asrs	r0, r0, #2
 800b3d2:	6128      	str	r0, [r5, #16]
 800b3d4:	0147      	lsls	r7, r0, #5
 800b3d6:	4650      	mov	r0, sl
 800b3d8:	f000 fafc 	bl	800b9d4 <__hi0bits>
 800b3dc:	f8d8 6000 	ldr.w	r6, [r8]
 800b3e0:	1a3f      	subs	r7, r7, r0
 800b3e2:	42b7      	cmp	r7, r6
 800b3e4:	dd64      	ble.n	800b4b0 <__gethex+0x260>
 800b3e6:	1bbf      	subs	r7, r7, r6
 800b3e8:	4639      	mov	r1, r7
 800b3ea:	4628      	mov	r0, r5
 800b3ec:	f000 fe05 	bl	800bffa <__any_on>
 800b3f0:	4682      	mov	sl, r0
 800b3f2:	b178      	cbz	r0, 800b414 <__gethex+0x1c4>
 800b3f4:	f04f 0a01 	mov.w	sl, #1
 800b3f8:	1e7b      	subs	r3, r7, #1
 800b3fa:	1159      	asrs	r1, r3, #5
 800b3fc:	f003 021f 	and.w	r2, r3, #31
 800b400:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b404:	fa0a f202 	lsl.w	r2, sl, r2
 800b408:	420a      	tst	r2, r1
 800b40a:	d003      	beq.n	800b414 <__gethex+0x1c4>
 800b40c:	4553      	cmp	r3, sl
 800b40e:	dc46      	bgt.n	800b49e <__gethex+0x24e>
 800b410:	f04f 0a02 	mov.w	sl, #2
 800b414:	4639      	mov	r1, r7
 800b416:	4628      	mov	r0, r5
 800b418:	f7ff feca 	bl	800b1b0 <rshift>
 800b41c:	443c      	add	r4, r7
 800b41e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b422:	42a3      	cmp	r3, r4
 800b424:	da52      	bge.n	800b4cc <__gethex+0x27c>
 800b426:	4629      	mov	r1, r5
 800b428:	9802      	ldr	r0, [sp, #8]
 800b42a:	f000 fa43 	bl	800b8b4 <_Bfree>
 800b42e:	2300      	movs	r3, #0
 800b430:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b432:	27a3      	movs	r7, #163	; 0xa3
 800b434:	6013      	str	r3, [r2, #0]
 800b436:	e793      	b.n	800b360 <__gethex+0x110>
 800b438:	3101      	adds	r1, #1
 800b43a:	105b      	asrs	r3, r3, #1
 800b43c:	e7b0      	b.n	800b3a0 <__gethex+0x150>
 800b43e:	1e73      	subs	r3, r6, #1
 800b440:	9305      	str	r3, [sp, #20]
 800b442:	9a07      	ldr	r2, [sp, #28]
 800b444:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b448:	4293      	cmp	r3, r2
 800b44a:	d018      	beq.n	800b47e <__gethex+0x22e>
 800b44c:	f1bb 0f20 	cmp.w	fp, #32
 800b450:	d107      	bne.n	800b462 <__gethex+0x212>
 800b452:	9b04      	ldr	r3, [sp, #16]
 800b454:	f8c3 a000 	str.w	sl, [r3]
 800b458:	f04f 0a00 	mov.w	sl, #0
 800b45c:	46d3      	mov	fp, sl
 800b45e:	3304      	adds	r3, #4
 800b460:	9304      	str	r3, [sp, #16]
 800b462:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b466:	f7ff fede 	bl	800b226 <__hexdig_fun>
 800b46a:	f000 000f 	and.w	r0, r0, #15
 800b46e:	fa00 f00b 	lsl.w	r0, r0, fp
 800b472:	ea4a 0a00 	orr.w	sl, sl, r0
 800b476:	f10b 0b04 	add.w	fp, fp, #4
 800b47a:	9b05      	ldr	r3, [sp, #20]
 800b47c:	e00d      	b.n	800b49a <__gethex+0x24a>
 800b47e:	9b05      	ldr	r3, [sp, #20]
 800b480:	9a08      	ldr	r2, [sp, #32]
 800b482:	4413      	add	r3, r2
 800b484:	42bb      	cmp	r3, r7
 800b486:	d3e1      	bcc.n	800b44c <__gethex+0x1fc>
 800b488:	4618      	mov	r0, r3
 800b48a:	9a01      	ldr	r2, [sp, #4]
 800b48c:	9903      	ldr	r1, [sp, #12]
 800b48e:	9309      	str	r3, [sp, #36]	; 0x24
 800b490:	f001 f97f 	bl	800c792 <strncmp>
 800b494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b496:	2800      	cmp	r0, #0
 800b498:	d1d8      	bne.n	800b44c <__gethex+0x1fc>
 800b49a:	461e      	mov	r6, r3
 800b49c:	e791      	b.n	800b3c2 <__gethex+0x172>
 800b49e:	1eb9      	subs	r1, r7, #2
 800b4a0:	4628      	mov	r0, r5
 800b4a2:	f000 fdaa 	bl	800bffa <__any_on>
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	d0b2      	beq.n	800b410 <__gethex+0x1c0>
 800b4aa:	f04f 0a03 	mov.w	sl, #3
 800b4ae:	e7b1      	b.n	800b414 <__gethex+0x1c4>
 800b4b0:	da09      	bge.n	800b4c6 <__gethex+0x276>
 800b4b2:	1bf7      	subs	r7, r6, r7
 800b4b4:	4629      	mov	r1, r5
 800b4b6:	463a      	mov	r2, r7
 800b4b8:	9802      	ldr	r0, [sp, #8]
 800b4ba:	f000 fbc5 	bl	800bc48 <__lshift>
 800b4be:	4605      	mov	r5, r0
 800b4c0:	1be4      	subs	r4, r4, r7
 800b4c2:	f100 0914 	add.w	r9, r0, #20
 800b4c6:	f04f 0a00 	mov.w	sl, #0
 800b4ca:	e7a8      	b.n	800b41e <__gethex+0x1ce>
 800b4cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b4d0:	42a0      	cmp	r0, r4
 800b4d2:	dd6b      	ble.n	800b5ac <__gethex+0x35c>
 800b4d4:	1b04      	subs	r4, r0, r4
 800b4d6:	42a6      	cmp	r6, r4
 800b4d8:	dc2e      	bgt.n	800b538 <__gethex+0x2e8>
 800b4da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b4de:	2b02      	cmp	r3, #2
 800b4e0:	d022      	beq.n	800b528 <__gethex+0x2d8>
 800b4e2:	2b03      	cmp	r3, #3
 800b4e4:	d024      	beq.n	800b530 <__gethex+0x2e0>
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d115      	bne.n	800b516 <__gethex+0x2c6>
 800b4ea:	42a6      	cmp	r6, r4
 800b4ec:	d113      	bne.n	800b516 <__gethex+0x2c6>
 800b4ee:	2e01      	cmp	r6, #1
 800b4f0:	dc0b      	bgt.n	800b50a <__gethex+0x2ba>
 800b4f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b4f6:	9a06      	ldr	r2, [sp, #24]
 800b4f8:	2762      	movs	r7, #98	; 0x62
 800b4fa:	6013      	str	r3, [r2, #0]
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	612b      	str	r3, [r5, #16]
 800b500:	f8c9 3000 	str.w	r3, [r9]
 800b504:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b506:	601d      	str	r5, [r3, #0]
 800b508:	e72a      	b.n	800b360 <__gethex+0x110>
 800b50a:	1e71      	subs	r1, r6, #1
 800b50c:	4628      	mov	r0, r5
 800b50e:	f000 fd74 	bl	800bffa <__any_on>
 800b512:	2800      	cmp	r0, #0
 800b514:	d1ed      	bne.n	800b4f2 <__gethex+0x2a2>
 800b516:	4629      	mov	r1, r5
 800b518:	9802      	ldr	r0, [sp, #8]
 800b51a:	f000 f9cb 	bl	800b8b4 <_Bfree>
 800b51e:	2300      	movs	r3, #0
 800b520:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b522:	2750      	movs	r7, #80	; 0x50
 800b524:	6013      	str	r3, [r2, #0]
 800b526:	e71b      	b.n	800b360 <__gethex+0x110>
 800b528:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d0e1      	beq.n	800b4f2 <__gethex+0x2a2>
 800b52e:	e7f2      	b.n	800b516 <__gethex+0x2c6>
 800b530:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b532:	2b00      	cmp	r3, #0
 800b534:	d1dd      	bne.n	800b4f2 <__gethex+0x2a2>
 800b536:	e7ee      	b.n	800b516 <__gethex+0x2c6>
 800b538:	1e67      	subs	r7, r4, #1
 800b53a:	f1ba 0f00 	cmp.w	sl, #0
 800b53e:	d132      	bne.n	800b5a6 <__gethex+0x356>
 800b540:	b127      	cbz	r7, 800b54c <__gethex+0x2fc>
 800b542:	4639      	mov	r1, r7
 800b544:	4628      	mov	r0, r5
 800b546:	f000 fd58 	bl	800bffa <__any_on>
 800b54a:	4682      	mov	sl, r0
 800b54c:	2301      	movs	r3, #1
 800b54e:	117a      	asrs	r2, r7, #5
 800b550:	f007 071f 	and.w	r7, r7, #31
 800b554:	fa03 f707 	lsl.w	r7, r3, r7
 800b558:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800b55c:	4621      	mov	r1, r4
 800b55e:	421f      	tst	r7, r3
 800b560:	f04f 0702 	mov.w	r7, #2
 800b564:	4628      	mov	r0, r5
 800b566:	bf18      	it	ne
 800b568:	f04a 0a02 	orrne.w	sl, sl, #2
 800b56c:	1b36      	subs	r6, r6, r4
 800b56e:	f7ff fe1f 	bl	800b1b0 <rshift>
 800b572:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b576:	f1ba 0f00 	cmp.w	sl, #0
 800b57a:	d048      	beq.n	800b60e <__gethex+0x3be>
 800b57c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b580:	2b02      	cmp	r3, #2
 800b582:	d015      	beq.n	800b5b0 <__gethex+0x360>
 800b584:	2b03      	cmp	r3, #3
 800b586:	d017      	beq.n	800b5b8 <__gethex+0x368>
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d109      	bne.n	800b5a0 <__gethex+0x350>
 800b58c:	f01a 0f02 	tst.w	sl, #2
 800b590:	d006      	beq.n	800b5a0 <__gethex+0x350>
 800b592:	f8d9 3000 	ldr.w	r3, [r9]
 800b596:	ea4a 0a03 	orr.w	sl, sl, r3
 800b59a:	f01a 0f01 	tst.w	sl, #1
 800b59e:	d10e      	bne.n	800b5be <__gethex+0x36e>
 800b5a0:	f047 0710 	orr.w	r7, r7, #16
 800b5a4:	e033      	b.n	800b60e <__gethex+0x3be>
 800b5a6:	f04f 0a01 	mov.w	sl, #1
 800b5aa:	e7cf      	b.n	800b54c <__gethex+0x2fc>
 800b5ac:	2701      	movs	r7, #1
 800b5ae:	e7e2      	b.n	800b576 <__gethex+0x326>
 800b5b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5b2:	f1c3 0301 	rsb	r3, r3, #1
 800b5b6:	9315      	str	r3, [sp, #84]	; 0x54
 800b5b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d0f0      	beq.n	800b5a0 <__gethex+0x350>
 800b5be:	f04f 0c00 	mov.w	ip, #0
 800b5c2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800b5c6:	f105 0314 	add.w	r3, r5, #20
 800b5ca:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800b5ce:	eb03 010a 	add.w	r1, r3, sl
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5d8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b5dc:	d01c      	beq.n	800b618 <__gethex+0x3c8>
 800b5de:	3201      	adds	r2, #1
 800b5e0:	6002      	str	r2, [r0, #0]
 800b5e2:	2f02      	cmp	r7, #2
 800b5e4:	f105 0314 	add.w	r3, r5, #20
 800b5e8:	d138      	bne.n	800b65c <__gethex+0x40c>
 800b5ea:	f8d8 2000 	ldr.w	r2, [r8]
 800b5ee:	3a01      	subs	r2, #1
 800b5f0:	42b2      	cmp	r2, r6
 800b5f2:	d10a      	bne.n	800b60a <__gethex+0x3ba>
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	1171      	asrs	r1, r6, #5
 800b5f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b5fc:	f006 061f 	and.w	r6, r6, #31
 800b600:	fa02 f606 	lsl.w	r6, r2, r6
 800b604:	421e      	tst	r6, r3
 800b606:	bf18      	it	ne
 800b608:	4617      	movne	r7, r2
 800b60a:	f047 0720 	orr.w	r7, r7, #32
 800b60e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b610:	601d      	str	r5, [r3, #0]
 800b612:	9b06      	ldr	r3, [sp, #24]
 800b614:	601c      	str	r4, [r3, #0]
 800b616:	e6a3      	b.n	800b360 <__gethex+0x110>
 800b618:	4299      	cmp	r1, r3
 800b61a:	f843 cc04 	str.w	ip, [r3, #-4]
 800b61e:	d8d8      	bhi.n	800b5d2 <__gethex+0x382>
 800b620:	68ab      	ldr	r3, [r5, #8]
 800b622:	4599      	cmp	r9, r3
 800b624:	db12      	blt.n	800b64c <__gethex+0x3fc>
 800b626:	6869      	ldr	r1, [r5, #4]
 800b628:	9802      	ldr	r0, [sp, #8]
 800b62a:	3101      	adds	r1, #1
 800b62c:	f000 f90e 	bl	800b84c <_Balloc>
 800b630:	4683      	mov	fp, r0
 800b632:	692a      	ldr	r2, [r5, #16]
 800b634:	f105 010c 	add.w	r1, r5, #12
 800b638:	3202      	adds	r2, #2
 800b63a:	0092      	lsls	r2, r2, #2
 800b63c:	300c      	adds	r0, #12
 800b63e:	f7fe fe38 	bl	800a2b2 <memcpy>
 800b642:	4629      	mov	r1, r5
 800b644:	9802      	ldr	r0, [sp, #8]
 800b646:	f000 f935 	bl	800b8b4 <_Bfree>
 800b64a:	465d      	mov	r5, fp
 800b64c:	692b      	ldr	r3, [r5, #16]
 800b64e:	1c5a      	adds	r2, r3, #1
 800b650:	612a      	str	r2, [r5, #16]
 800b652:	2201      	movs	r2, #1
 800b654:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b658:	615a      	str	r2, [r3, #20]
 800b65a:	e7c2      	b.n	800b5e2 <__gethex+0x392>
 800b65c:	692a      	ldr	r2, [r5, #16]
 800b65e:	454a      	cmp	r2, r9
 800b660:	dd0b      	ble.n	800b67a <__gethex+0x42a>
 800b662:	2101      	movs	r1, #1
 800b664:	4628      	mov	r0, r5
 800b666:	f7ff fda3 	bl	800b1b0 <rshift>
 800b66a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b66e:	3401      	adds	r4, #1
 800b670:	42a3      	cmp	r3, r4
 800b672:	f6ff aed8 	blt.w	800b426 <__gethex+0x1d6>
 800b676:	2701      	movs	r7, #1
 800b678:	e7c7      	b.n	800b60a <__gethex+0x3ba>
 800b67a:	f016 061f 	ands.w	r6, r6, #31
 800b67e:	d0fa      	beq.n	800b676 <__gethex+0x426>
 800b680:	449a      	add	sl, r3
 800b682:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b686:	f000 f9a5 	bl	800b9d4 <__hi0bits>
 800b68a:	f1c6 0620 	rsb	r6, r6, #32
 800b68e:	42b0      	cmp	r0, r6
 800b690:	dbe7      	blt.n	800b662 <__gethex+0x412>
 800b692:	e7f0      	b.n	800b676 <__gethex+0x426>

0800b694 <L_shift>:
 800b694:	f1c2 0208 	rsb	r2, r2, #8
 800b698:	0092      	lsls	r2, r2, #2
 800b69a:	b570      	push	{r4, r5, r6, lr}
 800b69c:	f1c2 0620 	rsb	r6, r2, #32
 800b6a0:	6843      	ldr	r3, [r0, #4]
 800b6a2:	6804      	ldr	r4, [r0, #0]
 800b6a4:	fa03 f506 	lsl.w	r5, r3, r6
 800b6a8:	432c      	orrs	r4, r5
 800b6aa:	40d3      	lsrs	r3, r2
 800b6ac:	6004      	str	r4, [r0, #0]
 800b6ae:	f840 3f04 	str.w	r3, [r0, #4]!
 800b6b2:	4288      	cmp	r0, r1
 800b6b4:	d3f4      	bcc.n	800b6a0 <L_shift+0xc>
 800b6b6:	bd70      	pop	{r4, r5, r6, pc}

0800b6b8 <__match>:
 800b6b8:	b530      	push	{r4, r5, lr}
 800b6ba:	6803      	ldr	r3, [r0, #0]
 800b6bc:	3301      	adds	r3, #1
 800b6be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6c2:	b914      	cbnz	r4, 800b6ca <__match+0x12>
 800b6c4:	6003      	str	r3, [r0, #0]
 800b6c6:	2001      	movs	r0, #1
 800b6c8:	bd30      	pop	{r4, r5, pc}
 800b6ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b6d2:	2d19      	cmp	r5, #25
 800b6d4:	bf98      	it	ls
 800b6d6:	3220      	addls	r2, #32
 800b6d8:	42a2      	cmp	r2, r4
 800b6da:	d0f0      	beq.n	800b6be <__match+0x6>
 800b6dc:	2000      	movs	r0, #0
 800b6de:	e7f3      	b.n	800b6c8 <__match+0x10>

0800b6e0 <__hexnan>:
 800b6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e4:	2500      	movs	r5, #0
 800b6e6:	680b      	ldr	r3, [r1, #0]
 800b6e8:	4682      	mov	sl, r0
 800b6ea:	115f      	asrs	r7, r3, #5
 800b6ec:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b6f0:	f013 031f 	ands.w	r3, r3, #31
 800b6f4:	bf18      	it	ne
 800b6f6:	3704      	addne	r7, #4
 800b6f8:	1f3e      	subs	r6, r7, #4
 800b6fa:	4690      	mov	r8, r2
 800b6fc:	46b1      	mov	r9, r6
 800b6fe:	4634      	mov	r4, r6
 800b700:	46ab      	mov	fp, r5
 800b702:	b087      	sub	sp, #28
 800b704:	6801      	ldr	r1, [r0, #0]
 800b706:	9301      	str	r3, [sp, #4]
 800b708:	f847 5c04 	str.w	r5, [r7, #-4]
 800b70c:	9502      	str	r5, [sp, #8]
 800b70e:	784a      	ldrb	r2, [r1, #1]
 800b710:	1c4b      	adds	r3, r1, #1
 800b712:	9303      	str	r3, [sp, #12]
 800b714:	b342      	cbz	r2, 800b768 <__hexnan+0x88>
 800b716:	4610      	mov	r0, r2
 800b718:	9105      	str	r1, [sp, #20]
 800b71a:	9204      	str	r2, [sp, #16]
 800b71c:	f7ff fd83 	bl	800b226 <__hexdig_fun>
 800b720:	2800      	cmp	r0, #0
 800b722:	d143      	bne.n	800b7ac <__hexnan+0xcc>
 800b724:	9a04      	ldr	r2, [sp, #16]
 800b726:	9905      	ldr	r1, [sp, #20]
 800b728:	2a20      	cmp	r2, #32
 800b72a:	d818      	bhi.n	800b75e <__hexnan+0x7e>
 800b72c:	9b02      	ldr	r3, [sp, #8]
 800b72e:	459b      	cmp	fp, r3
 800b730:	dd13      	ble.n	800b75a <__hexnan+0x7a>
 800b732:	454c      	cmp	r4, r9
 800b734:	d206      	bcs.n	800b744 <__hexnan+0x64>
 800b736:	2d07      	cmp	r5, #7
 800b738:	dc04      	bgt.n	800b744 <__hexnan+0x64>
 800b73a:	462a      	mov	r2, r5
 800b73c:	4649      	mov	r1, r9
 800b73e:	4620      	mov	r0, r4
 800b740:	f7ff ffa8 	bl	800b694 <L_shift>
 800b744:	4544      	cmp	r4, r8
 800b746:	d944      	bls.n	800b7d2 <__hexnan+0xf2>
 800b748:	2300      	movs	r3, #0
 800b74a:	f1a4 0904 	sub.w	r9, r4, #4
 800b74e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b752:	461d      	mov	r5, r3
 800b754:	464c      	mov	r4, r9
 800b756:	f8cd b008 	str.w	fp, [sp, #8]
 800b75a:	9903      	ldr	r1, [sp, #12]
 800b75c:	e7d7      	b.n	800b70e <__hexnan+0x2e>
 800b75e:	2a29      	cmp	r2, #41	; 0x29
 800b760:	d14a      	bne.n	800b7f8 <__hexnan+0x118>
 800b762:	3102      	adds	r1, #2
 800b764:	f8ca 1000 	str.w	r1, [sl]
 800b768:	f1bb 0f00 	cmp.w	fp, #0
 800b76c:	d044      	beq.n	800b7f8 <__hexnan+0x118>
 800b76e:	454c      	cmp	r4, r9
 800b770:	d206      	bcs.n	800b780 <__hexnan+0xa0>
 800b772:	2d07      	cmp	r5, #7
 800b774:	dc04      	bgt.n	800b780 <__hexnan+0xa0>
 800b776:	462a      	mov	r2, r5
 800b778:	4649      	mov	r1, r9
 800b77a:	4620      	mov	r0, r4
 800b77c:	f7ff ff8a 	bl	800b694 <L_shift>
 800b780:	4544      	cmp	r4, r8
 800b782:	d928      	bls.n	800b7d6 <__hexnan+0xf6>
 800b784:	4643      	mov	r3, r8
 800b786:	f854 2b04 	ldr.w	r2, [r4], #4
 800b78a:	42a6      	cmp	r6, r4
 800b78c:	f843 2b04 	str.w	r2, [r3], #4
 800b790:	d2f9      	bcs.n	800b786 <__hexnan+0xa6>
 800b792:	2200      	movs	r2, #0
 800b794:	f843 2b04 	str.w	r2, [r3], #4
 800b798:	429e      	cmp	r6, r3
 800b79a:	d2fb      	bcs.n	800b794 <__hexnan+0xb4>
 800b79c:	6833      	ldr	r3, [r6, #0]
 800b79e:	b91b      	cbnz	r3, 800b7a8 <__hexnan+0xc8>
 800b7a0:	4546      	cmp	r6, r8
 800b7a2:	d127      	bne.n	800b7f4 <__hexnan+0x114>
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	6033      	str	r3, [r6, #0]
 800b7a8:	2005      	movs	r0, #5
 800b7aa:	e026      	b.n	800b7fa <__hexnan+0x11a>
 800b7ac:	3501      	adds	r5, #1
 800b7ae:	2d08      	cmp	r5, #8
 800b7b0:	f10b 0b01 	add.w	fp, fp, #1
 800b7b4:	dd06      	ble.n	800b7c4 <__hexnan+0xe4>
 800b7b6:	4544      	cmp	r4, r8
 800b7b8:	d9cf      	bls.n	800b75a <__hexnan+0x7a>
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	2501      	movs	r5, #1
 800b7be:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7c2:	3c04      	subs	r4, #4
 800b7c4:	6822      	ldr	r2, [r4, #0]
 800b7c6:	f000 000f 	and.w	r0, r0, #15
 800b7ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b7ce:	6020      	str	r0, [r4, #0]
 800b7d0:	e7c3      	b.n	800b75a <__hexnan+0x7a>
 800b7d2:	2508      	movs	r5, #8
 800b7d4:	e7c1      	b.n	800b75a <__hexnan+0x7a>
 800b7d6:	9b01      	ldr	r3, [sp, #4]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d0df      	beq.n	800b79c <__hexnan+0xbc>
 800b7dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b7e0:	f1c3 0320 	rsb	r3, r3, #32
 800b7e4:	fa22 f303 	lsr.w	r3, r2, r3
 800b7e8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b7ec:	401a      	ands	r2, r3
 800b7ee:	f847 2c04 	str.w	r2, [r7, #-4]
 800b7f2:	e7d3      	b.n	800b79c <__hexnan+0xbc>
 800b7f4:	3e04      	subs	r6, #4
 800b7f6:	e7d1      	b.n	800b79c <__hexnan+0xbc>
 800b7f8:	2004      	movs	r0, #4
 800b7fa:	b007      	add	sp, #28
 800b7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b800 <__locale_ctype_ptr_l>:
 800b800:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b804:	4770      	bx	lr
	...

0800b808 <__locale_ctype_ptr>:
 800b808:	4b04      	ldr	r3, [pc, #16]	; (800b81c <__locale_ctype_ptr+0x14>)
 800b80a:	4a05      	ldr	r2, [pc, #20]	; (800b820 <__locale_ctype_ptr+0x18>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	6a1b      	ldr	r3, [r3, #32]
 800b810:	2b00      	cmp	r3, #0
 800b812:	bf08      	it	eq
 800b814:	4613      	moveq	r3, r2
 800b816:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800b81a:	4770      	bx	lr
 800b81c:	200001b4 	.word	0x200001b4
 800b820:	20000218 	.word	0x20000218

0800b824 <__localeconv_l>:
 800b824:	30f0      	adds	r0, #240	; 0xf0
 800b826:	4770      	bx	lr

0800b828 <__ascii_mbtowc>:
 800b828:	b082      	sub	sp, #8
 800b82a:	b901      	cbnz	r1, 800b82e <__ascii_mbtowc+0x6>
 800b82c:	a901      	add	r1, sp, #4
 800b82e:	b142      	cbz	r2, 800b842 <__ascii_mbtowc+0x1a>
 800b830:	b14b      	cbz	r3, 800b846 <__ascii_mbtowc+0x1e>
 800b832:	7813      	ldrb	r3, [r2, #0]
 800b834:	600b      	str	r3, [r1, #0]
 800b836:	7812      	ldrb	r2, [r2, #0]
 800b838:	1c10      	adds	r0, r2, #0
 800b83a:	bf18      	it	ne
 800b83c:	2001      	movne	r0, #1
 800b83e:	b002      	add	sp, #8
 800b840:	4770      	bx	lr
 800b842:	4610      	mov	r0, r2
 800b844:	e7fb      	b.n	800b83e <__ascii_mbtowc+0x16>
 800b846:	f06f 0001 	mvn.w	r0, #1
 800b84a:	e7f8      	b.n	800b83e <__ascii_mbtowc+0x16>

0800b84c <_Balloc>:
 800b84c:	b570      	push	{r4, r5, r6, lr}
 800b84e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b850:	4604      	mov	r4, r0
 800b852:	460e      	mov	r6, r1
 800b854:	b93d      	cbnz	r5, 800b866 <_Balloc+0x1a>
 800b856:	2010      	movs	r0, #16
 800b858:	f001 f880 	bl	800c95c <malloc>
 800b85c:	6260      	str	r0, [r4, #36]	; 0x24
 800b85e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b862:	6005      	str	r5, [r0, #0]
 800b864:	60c5      	str	r5, [r0, #12]
 800b866:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b868:	68eb      	ldr	r3, [r5, #12]
 800b86a:	b183      	cbz	r3, 800b88e <_Balloc+0x42>
 800b86c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b86e:	68db      	ldr	r3, [r3, #12]
 800b870:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b874:	b9b8      	cbnz	r0, 800b8a6 <_Balloc+0x5a>
 800b876:	2101      	movs	r1, #1
 800b878:	fa01 f506 	lsl.w	r5, r1, r6
 800b87c:	1d6a      	adds	r2, r5, #5
 800b87e:	0092      	lsls	r2, r2, #2
 800b880:	4620      	mov	r0, r4
 800b882:	f000 fbdb 	bl	800c03c <_calloc_r>
 800b886:	b160      	cbz	r0, 800b8a2 <_Balloc+0x56>
 800b888:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b88c:	e00e      	b.n	800b8ac <_Balloc+0x60>
 800b88e:	2221      	movs	r2, #33	; 0x21
 800b890:	2104      	movs	r1, #4
 800b892:	4620      	mov	r0, r4
 800b894:	f000 fbd2 	bl	800c03c <_calloc_r>
 800b898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b89a:	60e8      	str	r0, [r5, #12]
 800b89c:	68db      	ldr	r3, [r3, #12]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d1e4      	bne.n	800b86c <_Balloc+0x20>
 800b8a2:	2000      	movs	r0, #0
 800b8a4:	bd70      	pop	{r4, r5, r6, pc}
 800b8a6:	6802      	ldr	r2, [r0, #0]
 800b8a8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8b2:	e7f7      	b.n	800b8a4 <_Balloc+0x58>

0800b8b4 <_Bfree>:
 800b8b4:	b570      	push	{r4, r5, r6, lr}
 800b8b6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b8b8:	4606      	mov	r6, r0
 800b8ba:	460d      	mov	r5, r1
 800b8bc:	b93c      	cbnz	r4, 800b8ce <_Bfree+0x1a>
 800b8be:	2010      	movs	r0, #16
 800b8c0:	f001 f84c 	bl	800c95c <malloc>
 800b8c4:	6270      	str	r0, [r6, #36]	; 0x24
 800b8c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8ca:	6004      	str	r4, [r0, #0]
 800b8cc:	60c4      	str	r4, [r0, #12]
 800b8ce:	b13d      	cbz	r5, 800b8e0 <_Bfree+0x2c>
 800b8d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b8d2:	686a      	ldr	r2, [r5, #4]
 800b8d4:	68db      	ldr	r3, [r3, #12]
 800b8d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b8da:	6029      	str	r1, [r5, #0]
 800b8dc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b8e0:	bd70      	pop	{r4, r5, r6, pc}

0800b8e2 <__multadd>:
 800b8e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8e6:	461f      	mov	r7, r3
 800b8e8:	4606      	mov	r6, r0
 800b8ea:	460c      	mov	r4, r1
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	690d      	ldr	r5, [r1, #16]
 800b8f0:	f101 0c14 	add.w	ip, r1, #20
 800b8f4:	f8dc 0000 	ldr.w	r0, [ip]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	b281      	uxth	r1, r0
 800b8fc:	fb02 7101 	mla	r1, r2, r1, r7
 800b900:	0c00      	lsrs	r0, r0, #16
 800b902:	0c0f      	lsrs	r7, r1, #16
 800b904:	fb02 7000 	mla	r0, r2, r0, r7
 800b908:	b289      	uxth	r1, r1
 800b90a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b90e:	429d      	cmp	r5, r3
 800b910:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b914:	f84c 1b04 	str.w	r1, [ip], #4
 800b918:	dcec      	bgt.n	800b8f4 <__multadd+0x12>
 800b91a:	b1d7      	cbz	r7, 800b952 <__multadd+0x70>
 800b91c:	68a3      	ldr	r3, [r4, #8]
 800b91e:	42ab      	cmp	r3, r5
 800b920:	dc12      	bgt.n	800b948 <__multadd+0x66>
 800b922:	6861      	ldr	r1, [r4, #4]
 800b924:	4630      	mov	r0, r6
 800b926:	3101      	adds	r1, #1
 800b928:	f7ff ff90 	bl	800b84c <_Balloc>
 800b92c:	4680      	mov	r8, r0
 800b92e:	6922      	ldr	r2, [r4, #16]
 800b930:	f104 010c 	add.w	r1, r4, #12
 800b934:	3202      	adds	r2, #2
 800b936:	0092      	lsls	r2, r2, #2
 800b938:	300c      	adds	r0, #12
 800b93a:	f7fe fcba 	bl	800a2b2 <memcpy>
 800b93e:	4621      	mov	r1, r4
 800b940:	4630      	mov	r0, r6
 800b942:	f7ff ffb7 	bl	800b8b4 <_Bfree>
 800b946:	4644      	mov	r4, r8
 800b948:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b94c:	3501      	adds	r5, #1
 800b94e:	615f      	str	r7, [r3, #20]
 800b950:	6125      	str	r5, [r4, #16]
 800b952:	4620      	mov	r0, r4
 800b954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b958 <__s2b>:
 800b958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b95c:	4615      	mov	r5, r2
 800b95e:	2209      	movs	r2, #9
 800b960:	461f      	mov	r7, r3
 800b962:	3308      	adds	r3, #8
 800b964:	460c      	mov	r4, r1
 800b966:	fb93 f3f2 	sdiv	r3, r3, r2
 800b96a:	4606      	mov	r6, r0
 800b96c:	2201      	movs	r2, #1
 800b96e:	2100      	movs	r1, #0
 800b970:	429a      	cmp	r2, r3
 800b972:	db20      	blt.n	800b9b6 <__s2b+0x5e>
 800b974:	4630      	mov	r0, r6
 800b976:	f7ff ff69 	bl	800b84c <_Balloc>
 800b97a:	9b08      	ldr	r3, [sp, #32]
 800b97c:	2d09      	cmp	r5, #9
 800b97e:	6143      	str	r3, [r0, #20]
 800b980:	f04f 0301 	mov.w	r3, #1
 800b984:	6103      	str	r3, [r0, #16]
 800b986:	dd19      	ble.n	800b9bc <__s2b+0x64>
 800b988:	f104 0809 	add.w	r8, r4, #9
 800b98c:	46c1      	mov	r9, r8
 800b98e:	442c      	add	r4, r5
 800b990:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b994:	4601      	mov	r1, r0
 800b996:	3b30      	subs	r3, #48	; 0x30
 800b998:	220a      	movs	r2, #10
 800b99a:	4630      	mov	r0, r6
 800b99c:	f7ff ffa1 	bl	800b8e2 <__multadd>
 800b9a0:	45a1      	cmp	r9, r4
 800b9a2:	d1f5      	bne.n	800b990 <__s2b+0x38>
 800b9a4:	eb08 0405 	add.w	r4, r8, r5
 800b9a8:	3c08      	subs	r4, #8
 800b9aa:	1b2d      	subs	r5, r5, r4
 800b9ac:	1963      	adds	r3, r4, r5
 800b9ae:	42bb      	cmp	r3, r7
 800b9b0:	db07      	blt.n	800b9c2 <__s2b+0x6a>
 800b9b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9b6:	0052      	lsls	r2, r2, #1
 800b9b8:	3101      	adds	r1, #1
 800b9ba:	e7d9      	b.n	800b970 <__s2b+0x18>
 800b9bc:	340a      	adds	r4, #10
 800b9be:	2509      	movs	r5, #9
 800b9c0:	e7f3      	b.n	800b9aa <__s2b+0x52>
 800b9c2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b9c6:	4601      	mov	r1, r0
 800b9c8:	3b30      	subs	r3, #48	; 0x30
 800b9ca:	220a      	movs	r2, #10
 800b9cc:	4630      	mov	r0, r6
 800b9ce:	f7ff ff88 	bl	800b8e2 <__multadd>
 800b9d2:	e7eb      	b.n	800b9ac <__s2b+0x54>

0800b9d4 <__hi0bits>:
 800b9d4:	0c02      	lsrs	r2, r0, #16
 800b9d6:	0412      	lsls	r2, r2, #16
 800b9d8:	4603      	mov	r3, r0
 800b9da:	b9b2      	cbnz	r2, 800ba0a <__hi0bits+0x36>
 800b9dc:	0403      	lsls	r3, r0, #16
 800b9de:	2010      	movs	r0, #16
 800b9e0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b9e4:	bf04      	itt	eq
 800b9e6:	021b      	lsleq	r3, r3, #8
 800b9e8:	3008      	addeq	r0, #8
 800b9ea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b9ee:	bf04      	itt	eq
 800b9f0:	011b      	lsleq	r3, r3, #4
 800b9f2:	3004      	addeq	r0, #4
 800b9f4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b9f8:	bf04      	itt	eq
 800b9fa:	009b      	lsleq	r3, r3, #2
 800b9fc:	3002      	addeq	r0, #2
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	db06      	blt.n	800ba10 <__hi0bits+0x3c>
 800ba02:	005b      	lsls	r3, r3, #1
 800ba04:	d503      	bpl.n	800ba0e <__hi0bits+0x3a>
 800ba06:	3001      	adds	r0, #1
 800ba08:	4770      	bx	lr
 800ba0a:	2000      	movs	r0, #0
 800ba0c:	e7e8      	b.n	800b9e0 <__hi0bits+0xc>
 800ba0e:	2020      	movs	r0, #32
 800ba10:	4770      	bx	lr

0800ba12 <__lo0bits>:
 800ba12:	6803      	ldr	r3, [r0, #0]
 800ba14:	4601      	mov	r1, r0
 800ba16:	f013 0207 	ands.w	r2, r3, #7
 800ba1a:	d00b      	beq.n	800ba34 <__lo0bits+0x22>
 800ba1c:	07da      	lsls	r2, r3, #31
 800ba1e:	d423      	bmi.n	800ba68 <__lo0bits+0x56>
 800ba20:	0798      	lsls	r0, r3, #30
 800ba22:	bf49      	itett	mi
 800ba24:	085b      	lsrmi	r3, r3, #1
 800ba26:	089b      	lsrpl	r3, r3, #2
 800ba28:	2001      	movmi	r0, #1
 800ba2a:	600b      	strmi	r3, [r1, #0]
 800ba2c:	bf5c      	itt	pl
 800ba2e:	600b      	strpl	r3, [r1, #0]
 800ba30:	2002      	movpl	r0, #2
 800ba32:	4770      	bx	lr
 800ba34:	b298      	uxth	r0, r3
 800ba36:	b9a8      	cbnz	r0, 800ba64 <__lo0bits+0x52>
 800ba38:	2010      	movs	r0, #16
 800ba3a:	0c1b      	lsrs	r3, r3, #16
 800ba3c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ba40:	bf04      	itt	eq
 800ba42:	0a1b      	lsreq	r3, r3, #8
 800ba44:	3008      	addeq	r0, #8
 800ba46:	071a      	lsls	r2, r3, #28
 800ba48:	bf04      	itt	eq
 800ba4a:	091b      	lsreq	r3, r3, #4
 800ba4c:	3004      	addeq	r0, #4
 800ba4e:	079a      	lsls	r2, r3, #30
 800ba50:	bf04      	itt	eq
 800ba52:	089b      	lsreq	r3, r3, #2
 800ba54:	3002      	addeq	r0, #2
 800ba56:	07da      	lsls	r2, r3, #31
 800ba58:	d402      	bmi.n	800ba60 <__lo0bits+0x4e>
 800ba5a:	085b      	lsrs	r3, r3, #1
 800ba5c:	d006      	beq.n	800ba6c <__lo0bits+0x5a>
 800ba5e:	3001      	adds	r0, #1
 800ba60:	600b      	str	r3, [r1, #0]
 800ba62:	4770      	bx	lr
 800ba64:	4610      	mov	r0, r2
 800ba66:	e7e9      	b.n	800ba3c <__lo0bits+0x2a>
 800ba68:	2000      	movs	r0, #0
 800ba6a:	4770      	bx	lr
 800ba6c:	2020      	movs	r0, #32
 800ba6e:	4770      	bx	lr

0800ba70 <__i2b>:
 800ba70:	b510      	push	{r4, lr}
 800ba72:	460c      	mov	r4, r1
 800ba74:	2101      	movs	r1, #1
 800ba76:	f7ff fee9 	bl	800b84c <_Balloc>
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	6144      	str	r4, [r0, #20]
 800ba7e:	6102      	str	r2, [r0, #16]
 800ba80:	bd10      	pop	{r4, pc}

0800ba82 <__multiply>:
 800ba82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba86:	4614      	mov	r4, r2
 800ba88:	690a      	ldr	r2, [r1, #16]
 800ba8a:	6923      	ldr	r3, [r4, #16]
 800ba8c:	4688      	mov	r8, r1
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	bfbe      	ittt	lt
 800ba92:	460b      	movlt	r3, r1
 800ba94:	46a0      	movlt	r8, r4
 800ba96:	461c      	movlt	r4, r3
 800ba98:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ba9c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800baa0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800baa4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800baa8:	eb07 0609 	add.w	r6, r7, r9
 800baac:	42b3      	cmp	r3, r6
 800baae:	bfb8      	it	lt
 800bab0:	3101      	addlt	r1, #1
 800bab2:	f7ff fecb 	bl	800b84c <_Balloc>
 800bab6:	f100 0514 	add.w	r5, r0, #20
 800baba:	462b      	mov	r3, r5
 800babc:	2200      	movs	r2, #0
 800babe:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800bac2:	4573      	cmp	r3, lr
 800bac4:	d316      	bcc.n	800baf4 <__multiply+0x72>
 800bac6:	f104 0214 	add.w	r2, r4, #20
 800baca:	f108 0114 	add.w	r1, r8, #20
 800bace:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800bad2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800bad6:	9300      	str	r3, [sp, #0]
 800bad8:	9b00      	ldr	r3, [sp, #0]
 800bada:	9201      	str	r2, [sp, #4]
 800badc:	4293      	cmp	r3, r2
 800bade:	d80c      	bhi.n	800bafa <__multiply+0x78>
 800bae0:	2e00      	cmp	r6, #0
 800bae2:	dd03      	ble.n	800baec <__multiply+0x6a>
 800bae4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d05d      	beq.n	800bba8 <__multiply+0x126>
 800baec:	6106      	str	r6, [r0, #16]
 800baee:	b003      	add	sp, #12
 800baf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf4:	f843 2b04 	str.w	r2, [r3], #4
 800baf8:	e7e3      	b.n	800bac2 <__multiply+0x40>
 800bafa:	f8b2 b000 	ldrh.w	fp, [r2]
 800bafe:	f1bb 0f00 	cmp.w	fp, #0
 800bb02:	d023      	beq.n	800bb4c <__multiply+0xca>
 800bb04:	4689      	mov	r9, r1
 800bb06:	46ac      	mov	ip, r5
 800bb08:	f04f 0800 	mov.w	r8, #0
 800bb0c:	f859 4b04 	ldr.w	r4, [r9], #4
 800bb10:	f8dc a000 	ldr.w	sl, [ip]
 800bb14:	b2a3      	uxth	r3, r4
 800bb16:	fa1f fa8a 	uxth.w	sl, sl
 800bb1a:	fb0b a303 	mla	r3, fp, r3, sl
 800bb1e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bb22:	f8dc 4000 	ldr.w	r4, [ip]
 800bb26:	4443      	add	r3, r8
 800bb28:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bb2c:	fb0b 840a 	mla	r4, fp, sl, r8
 800bb30:	46e2      	mov	sl, ip
 800bb32:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bb3c:	454f      	cmp	r7, r9
 800bb3e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bb42:	f84a 3b04 	str.w	r3, [sl], #4
 800bb46:	d82b      	bhi.n	800bba0 <__multiply+0x11e>
 800bb48:	f8cc 8004 	str.w	r8, [ip, #4]
 800bb4c:	9b01      	ldr	r3, [sp, #4]
 800bb4e:	3204      	adds	r2, #4
 800bb50:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800bb54:	f1ba 0f00 	cmp.w	sl, #0
 800bb58:	d020      	beq.n	800bb9c <__multiply+0x11a>
 800bb5a:	4689      	mov	r9, r1
 800bb5c:	46a8      	mov	r8, r5
 800bb5e:	f04f 0b00 	mov.w	fp, #0
 800bb62:	682b      	ldr	r3, [r5, #0]
 800bb64:	f8b9 c000 	ldrh.w	ip, [r9]
 800bb68:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	fb0a 440c 	mla	r4, sl, ip, r4
 800bb72:	46c4      	mov	ip, r8
 800bb74:	445c      	add	r4, fp
 800bb76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bb7a:	f84c 3b04 	str.w	r3, [ip], #4
 800bb7e:	f859 3b04 	ldr.w	r3, [r9], #4
 800bb82:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800bb86:	0c1b      	lsrs	r3, r3, #16
 800bb88:	fb0a b303 	mla	r3, sl, r3, fp
 800bb8c:	454f      	cmp	r7, r9
 800bb8e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800bb92:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800bb96:	d805      	bhi.n	800bba4 <__multiply+0x122>
 800bb98:	f8c8 3004 	str.w	r3, [r8, #4]
 800bb9c:	3504      	adds	r5, #4
 800bb9e:	e79b      	b.n	800bad8 <__multiply+0x56>
 800bba0:	46d4      	mov	ip, sl
 800bba2:	e7b3      	b.n	800bb0c <__multiply+0x8a>
 800bba4:	46e0      	mov	r8, ip
 800bba6:	e7dd      	b.n	800bb64 <__multiply+0xe2>
 800bba8:	3e01      	subs	r6, #1
 800bbaa:	e799      	b.n	800bae0 <__multiply+0x5e>

0800bbac <__pow5mult>:
 800bbac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbb0:	4615      	mov	r5, r2
 800bbb2:	f012 0203 	ands.w	r2, r2, #3
 800bbb6:	4606      	mov	r6, r0
 800bbb8:	460f      	mov	r7, r1
 800bbba:	d007      	beq.n	800bbcc <__pow5mult+0x20>
 800bbbc:	4c21      	ldr	r4, [pc, #132]	; (800bc44 <__pow5mult+0x98>)
 800bbbe:	3a01      	subs	r2, #1
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bbc6:	f7ff fe8c 	bl	800b8e2 <__multadd>
 800bbca:	4607      	mov	r7, r0
 800bbcc:	10ad      	asrs	r5, r5, #2
 800bbce:	d035      	beq.n	800bc3c <__pow5mult+0x90>
 800bbd0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bbd2:	b93c      	cbnz	r4, 800bbe4 <__pow5mult+0x38>
 800bbd4:	2010      	movs	r0, #16
 800bbd6:	f000 fec1 	bl	800c95c <malloc>
 800bbda:	6270      	str	r0, [r6, #36]	; 0x24
 800bbdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bbe0:	6004      	str	r4, [r0, #0]
 800bbe2:	60c4      	str	r4, [r0, #12]
 800bbe4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bbe8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bbec:	b94c      	cbnz	r4, 800bc02 <__pow5mult+0x56>
 800bbee:	f240 2171 	movw	r1, #625	; 0x271
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	f7ff ff3c 	bl	800ba70 <__i2b>
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	4604      	mov	r4, r0
 800bbfc:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc00:	6003      	str	r3, [r0, #0]
 800bc02:	f04f 0800 	mov.w	r8, #0
 800bc06:	07eb      	lsls	r3, r5, #31
 800bc08:	d50a      	bpl.n	800bc20 <__pow5mult+0x74>
 800bc0a:	4639      	mov	r1, r7
 800bc0c:	4622      	mov	r2, r4
 800bc0e:	4630      	mov	r0, r6
 800bc10:	f7ff ff37 	bl	800ba82 <__multiply>
 800bc14:	4681      	mov	r9, r0
 800bc16:	4639      	mov	r1, r7
 800bc18:	4630      	mov	r0, r6
 800bc1a:	f7ff fe4b 	bl	800b8b4 <_Bfree>
 800bc1e:	464f      	mov	r7, r9
 800bc20:	106d      	asrs	r5, r5, #1
 800bc22:	d00b      	beq.n	800bc3c <__pow5mult+0x90>
 800bc24:	6820      	ldr	r0, [r4, #0]
 800bc26:	b938      	cbnz	r0, 800bc38 <__pow5mult+0x8c>
 800bc28:	4622      	mov	r2, r4
 800bc2a:	4621      	mov	r1, r4
 800bc2c:	4630      	mov	r0, r6
 800bc2e:	f7ff ff28 	bl	800ba82 <__multiply>
 800bc32:	6020      	str	r0, [r4, #0]
 800bc34:	f8c0 8000 	str.w	r8, [r0]
 800bc38:	4604      	mov	r4, r0
 800bc3a:	e7e4      	b.n	800bc06 <__pow5mult+0x5a>
 800bc3c:	4638      	mov	r0, r7
 800bc3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc42:	bf00      	nop
 800bc44:	0800ee68 	.word	0x0800ee68

0800bc48 <__lshift>:
 800bc48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc4c:	460c      	mov	r4, r1
 800bc4e:	4607      	mov	r7, r0
 800bc50:	4616      	mov	r6, r2
 800bc52:	6923      	ldr	r3, [r4, #16]
 800bc54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc58:	eb0a 0903 	add.w	r9, sl, r3
 800bc5c:	6849      	ldr	r1, [r1, #4]
 800bc5e:	68a3      	ldr	r3, [r4, #8]
 800bc60:	f109 0501 	add.w	r5, r9, #1
 800bc64:	42ab      	cmp	r3, r5
 800bc66:	db32      	blt.n	800bcce <__lshift+0x86>
 800bc68:	4638      	mov	r0, r7
 800bc6a:	f7ff fdef 	bl	800b84c <_Balloc>
 800bc6e:	2300      	movs	r3, #0
 800bc70:	4680      	mov	r8, r0
 800bc72:	461a      	mov	r2, r3
 800bc74:	f100 0114 	add.w	r1, r0, #20
 800bc78:	4553      	cmp	r3, sl
 800bc7a:	db2b      	blt.n	800bcd4 <__lshift+0x8c>
 800bc7c:	6920      	ldr	r0, [r4, #16]
 800bc7e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc82:	f104 0314 	add.w	r3, r4, #20
 800bc86:	f016 021f 	ands.w	r2, r6, #31
 800bc8a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc8e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc92:	d025      	beq.n	800bce0 <__lshift+0x98>
 800bc94:	2000      	movs	r0, #0
 800bc96:	f1c2 0e20 	rsb	lr, r2, #32
 800bc9a:	468a      	mov	sl, r1
 800bc9c:	681e      	ldr	r6, [r3, #0]
 800bc9e:	4096      	lsls	r6, r2
 800bca0:	4330      	orrs	r0, r6
 800bca2:	f84a 0b04 	str.w	r0, [sl], #4
 800bca6:	f853 0b04 	ldr.w	r0, [r3], #4
 800bcaa:	459c      	cmp	ip, r3
 800bcac:	fa20 f00e 	lsr.w	r0, r0, lr
 800bcb0:	d814      	bhi.n	800bcdc <__lshift+0x94>
 800bcb2:	6048      	str	r0, [r1, #4]
 800bcb4:	b108      	cbz	r0, 800bcba <__lshift+0x72>
 800bcb6:	f109 0502 	add.w	r5, r9, #2
 800bcba:	3d01      	subs	r5, #1
 800bcbc:	4638      	mov	r0, r7
 800bcbe:	f8c8 5010 	str.w	r5, [r8, #16]
 800bcc2:	4621      	mov	r1, r4
 800bcc4:	f7ff fdf6 	bl	800b8b4 <_Bfree>
 800bcc8:	4640      	mov	r0, r8
 800bcca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcce:	3101      	adds	r1, #1
 800bcd0:	005b      	lsls	r3, r3, #1
 800bcd2:	e7c7      	b.n	800bc64 <__lshift+0x1c>
 800bcd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bcd8:	3301      	adds	r3, #1
 800bcda:	e7cd      	b.n	800bc78 <__lshift+0x30>
 800bcdc:	4651      	mov	r1, sl
 800bcde:	e7dc      	b.n	800bc9a <__lshift+0x52>
 800bce0:	3904      	subs	r1, #4
 800bce2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bce6:	459c      	cmp	ip, r3
 800bce8:	f841 2f04 	str.w	r2, [r1, #4]!
 800bcec:	d8f9      	bhi.n	800bce2 <__lshift+0x9a>
 800bcee:	e7e4      	b.n	800bcba <__lshift+0x72>

0800bcf0 <__mcmp>:
 800bcf0:	6903      	ldr	r3, [r0, #16]
 800bcf2:	690a      	ldr	r2, [r1, #16]
 800bcf4:	b530      	push	{r4, r5, lr}
 800bcf6:	1a9b      	subs	r3, r3, r2
 800bcf8:	d10c      	bne.n	800bd14 <__mcmp+0x24>
 800bcfa:	0092      	lsls	r2, r2, #2
 800bcfc:	3014      	adds	r0, #20
 800bcfe:	3114      	adds	r1, #20
 800bd00:	1884      	adds	r4, r0, r2
 800bd02:	4411      	add	r1, r2
 800bd04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd0c:	4295      	cmp	r5, r2
 800bd0e:	d003      	beq.n	800bd18 <__mcmp+0x28>
 800bd10:	d305      	bcc.n	800bd1e <__mcmp+0x2e>
 800bd12:	2301      	movs	r3, #1
 800bd14:	4618      	mov	r0, r3
 800bd16:	bd30      	pop	{r4, r5, pc}
 800bd18:	42a0      	cmp	r0, r4
 800bd1a:	d3f3      	bcc.n	800bd04 <__mcmp+0x14>
 800bd1c:	e7fa      	b.n	800bd14 <__mcmp+0x24>
 800bd1e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd22:	e7f7      	b.n	800bd14 <__mcmp+0x24>

0800bd24 <__mdiff>:
 800bd24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd28:	460d      	mov	r5, r1
 800bd2a:	4607      	mov	r7, r0
 800bd2c:	4611      	mov	r1, r2
 800bd2e:	4628      	mov	r0, r5
 800bd30:	4614      	mov	r4, r2
 800bd32:	f7ff ffdd 	bl	800bcf0 <__mcmp>
 800bd36:	1e06      	subs	r6, r0, #0
 800bd38:	d108      	bne.n	800bd4c <__mdiff+0x28>
 800bd3a:	4631      	mov	r1, r6
 800bd3c:	4638      	mov	r0, r7
 800bd3e:	f7ff fd85 	bl	800b84c <_Balloc>
 800bd42:	2301      	movs	r3, #1
 800bd44:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800bd48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd4c:	bfa4      	itt	ge
 800bd4e:	4623      	movge	r3, r4
 800bd50:	462c      	movge	r4, r5
 800bd52:	4638      	mov	r0, r7
 800bd54:	6861      	ldr	r1, [r4, #4]
 800bd56:	bfa6      	itte	ge
 800bd58:	461d      	movge	r5, r3
 800bd5a:	2600      	movge	r6, #0
 800bd5c:	2601      	movlt	r6, #1
 800bd5e:	f7ff fd75 	bl	800b84c <_Balloc>
 800bd62:	f04f 0e00 	mov.w	lr, #0
 800bd66:	60c6      	str	r6, [r0, #12]
 800bd68:	692b      	ldr	r3, [r5, #16]
 800bd6a:	6926      	ldr	r6, [r4, #16]
 800bd6c:	f104 0214 	add.w	r2, r4, #20
 800bd70:	f105 0914 	add.w	r9, r5, #20
 800bd74:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800bd78:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800bd7c:	f100 0114 	add.w	r1, r0, #20
 800bd80:	f852 ab04 	ldr.w	sl, [r2], #4
 800bd84:	f859 5b04 	ldr.w	r5, [r9], #4
 800bd88:	fa1f f38a 	uxth.w	r3, sl
 800bd8c:	4473      	add	r3, lr
 800bd8e:	b2ac      	uxth	r4, r5
 800bd90:	1b1b      	subs	r3, r3, r4
 800bd92:	0c2c      	lsrs	r4, r5, #16
 800bd94:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800bd98:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800bd9c:	b29b      	uxth	r3, r3
 800bd9e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800bda2:	45c8      	cmp	r8, r9
 800bda4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800bda8:	4694      	mov	ip, r2
 800bdaa:	f841 4b04 	str.w	r4, [r1], #4
 800bdae:	d8e7      	bhi.n	800bd80 <__mdiff+0x5c>
 800bdb0:	45bc      	cmp	ip, r7
 800bdb2:	d304      	bcc.n	800bdbe <__mdiff+0x9a>
 800bdb4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800bdb8:	b183      	cbz	r3, 800bddc <__mdiff+0xb8>
 800bdba:	6106      	str	r6, [r0, #16]
 800bdbc:	e7c4      	b.n	800bd48 <__mdiff+0x24>
 800bdbe:	f85c 4b04 	ldr.w	r4, [ip], #4
 800bdc2:	b2a2      	uxth	r2, r4
 800bdc4:	4472      	add	r2, lr
 800bdc6:	1413      	asrs	r3, r2, #16
 800bdc8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800bdcc:	b292      	uxth	r2, r2
 800bdce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bdd2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800bdd6:	f841 2b04 	str.w	r2, [r1], #4
 800bdda:	e7e9      	b.n	800bdb0 <__mdiff+0x8c>
 800bddc:	3e01      	subs	r6, #1
 800bdde:	e7e9      	b.n	800bdb4 <__mdiff+0x90>

0800bde0 <__ulp>:
 800bde0:	4b10      	ldr	r3, [pc, #64]	; (800be24 <__ulp+0x44>)
 800bde2:	400b      	ands	r3, r1
 800bde4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	dd02      	ble.n	800bdf2 <__ulp+0x12>
 800bdec:	2000      	movs	r0, #0
 800bdee:	4619      	mov	r1, r3
 800bdf0:	4770      	bx	lr
 800bdf2:	425b      	negs	r3, r3
 800bdf4:	151b      	asrs	r3, r3, #20
 800bdf6:	2b13      	cmp	r3, #19
 800bdf8:	f04f 0000 	mov.w	r0, #0
 800bdfc:	f04f 0100 	mov.w	r1, #0
 800be00:	dc04      	bgt.n	800be0c <__ulp+0x2c>
 800be02:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800be06:	fa42 f103 	asr.w	r1, r2, r3
 800be0a:	4770      	bx	lr
 800be0c:	2201      	movs	r2, #1
 800be0e:	3b14      	subs	r3, #20
 800be10:	2b1e      	cmp	r3, #30
 800be12:	bfce      	itee	gt
 800be14:	4613      	movgt	r3, r2
 800be16:	f1c3 031f 	rsble	r3, r3, #31
 800be1a:	fa02 f303 	lslle.w	r3, r2, r3
 800be1e:	4618      	mov	r0, r3
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	7ff00000 	.word	0x7ff00000

0800be28 <__b2d>:
 800be28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be2c:	6907      	ldr	r7, [r0, #16]
 800be2e:	f100 0914 	add.w	r9, r0, #20
 800be32:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800be36:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800be3a:	f1a7 0804 	sub.w	r8, r7, #4
 800be3e:	4630      	mov	r0, r6
 800be40:	f7ff fdc8 	bl	800b9d4 <__hi0bits>
 800be44:	f1c0 0320 	rsb	r3, r0, #32
 800be48:	280a      	cmp	r0, #10
 800be4a:	600b      	str	r3, [r1, #0]
 800be4c:	491e      	ldr	r1, [pc, #120]	; (800bec8 <__b2d+0xa0>)
 800be4e:	dc17      	bgt.n	800be80 <__b2d+0x58>
 800be50:	45c1      	cmp	r9, r8
 800be52:	bf28      	it	cs
 800be54:	2200      	movcs	r2, #0
 800be56:	f1c0 0c0b 	rsb	ip, r0, #11
 800be5a:	fa26 f30c 	lsr.w	r3, r6, ip
 800be5e:	bf38      	it	cc
 800be60:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800be64:	ea43 0501 	orr.w	r5, r3, r1
 800be68:	f100 0315 	add.w	r3, r0, #21
 800be6c:	fa06 f303 	lsl.w	r3, r6, r3
 800be70:	fa22 f20c 	lsr.w	r2, r2, ip
 800be74:	ea43 0402 	orr.w	r4, r3, r2
 800be78:	4620      	mov	r0, r4
 800be7a:	4629      	mov	r1, r5
 800be7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be80:	45c1      	cmp	r9, r8
 800be82:	bf3a      	itte	cc
 800be84:	f1a7 0808 	subcc.w	r8, r7, #8
 800be88:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800be8c:	2200      	movcs	r2, #0
 800be8e:	f1b0 030b 	subs.w	r3, r0, #11
 800be92:	d015      	beq.n	800bec0 <__b2d+0x98>
 800be94:	409e      	lsls	r6, r3
 800be96:	f1c3 0720 	rsb	r7, r3, #32
 800be9a:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800be9e:	fa22 f107 	lsr.w	r1, r2, r7
 800bea2:	45c8      	cmp	r8, r9
 800bea4:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800bea8:	ea46 0501 	orr.w	r5, r6, r1
 800beac:	bf94      	ite	ls
 800beae:	2100      	movls	r1, #0
 800beb0:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800beb4:	fa02 f003 	lsl.w	r0, r2, r3
 800beb8:	40f9      	lsrs	r1, r7
 800beba:	ea40 0401 	orr.w	r4, r0, r1
 800bebe:	e7db      	b.n	800be78 <__b2d+0x50>
 800bec0:	ea46 0501 	orr.w	r5, r6, r1
 800bec4:	4614      	mov	r4, r2
 800bec6:	e7d7      	b.n	800be78 <__b2d+0x50>
 800bec8:	3ff00000 	.word	0x3ff00000

0800becc <__d2b>:
 800becc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bed0:	461c      	mov	r4, r3
 800bed2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800bed6:	2101      	movs	r1, #1
 800bed8:	4690      	mov	r8, r2
 800beda:	f7ff fcb7 	bl	800b84c <_Balloc>
 800bede:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800bee2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800bee6:	4607      	mov	r7, r0
 800bee8:	bb34      	cbnz	r4, 800bf38 <__d2b+0x6c>
 800beea:	9201      	str	r2, [sp, #4]
 800beec:	f1b8 0200 	subs.w	r2, r8, #0
 800bef0:	d027      	beq.n	800bf42 <__d2b+0x76>
 800bef2:	a802      	add	r0, sp, #8
 800bef4:	f840 2d08 	str.w	r2, [r0, #-8]!
 800bef8:	f7ff fd8b 	bl	800ba12 <__lo0bits>
 800befc:	9900      	ldr	r1, [sp, #0]
 800befe:	b1f0      	cbz	r0, 800bf3e <__d2b+0x72>
 800bf00:	9a01      	ldr	r2, [sp, #4]
 800bf02:	f1c0 0320 	rsb	r3, r0, #32
 800bf06:	fa02 f303 	lsl.w	r3, r2, r3
 800bf0a:	430b      	orrs	r3, r1
 800bf0c:	40c2      	lsrs	r2, r0
 800bf0e:	617b      	str	r3, [r7, #20]
 800bf10:	9201      	str	r2, [sp, #4]
 800bf12:	9b01      	ldr	r3, [sp, #4]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	bf14      	ite	ne
 800bf18:	2102      	movne	r1, #2
 800bf1a:	2101      	moveq	r1, #1
 800bf1c:	61bb      	str	r3, [r7, #24]
 800bf1e:	6139      	str	r1, [r7, #16]
 800bf20:	b1c4      	cbz	r4, 800bf54 <__d2b+0x88>
 800bf22:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bf26:	4404      	add	r4, r0
 800bf28:	6034      	str	r4, [r6, #0]
 800bf2a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf2e:	6028      	str	r0, [r5, #0]
 800bf30:	4638      	mov	r0, r7
 800bf32:	b002      	add	sp, #8
 800bf34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf38:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bf3c:	e7d5      	b.n	800beea <__d2b+0x1e>
 800bf3e:	6179      	str	r1, [r7, #20]
 800bf40:	e7e7      	b.n	800bf12 <__d2b+0x46>
 800bf42:	a801      	add	r0, sp, #4
 800bf44:	f7ff fd65 	bl	800ba12 <__lo0bits>
 800bf48:	2101      	movs	r1, #1
 800bf4a:	9b01      	ldr	r3, [sp, #4]
 800bf4c:	6139      	str	r1, [r7, #16]
 800bf4e:	617b      	str	r3, [r7, #20]
 800bf50:	3020      	adds	r0, #32
 800bf52:	e7e5      	b.n	800bf20 <__d2b+0x54>
 800bf54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf58:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bf5c:	6030      	str	r0, [r6, #0]
 800bf5e:	6918      	ldr	r0, [r3, #16]
 800bf60:	f7ff fd38 	bl	800b9d4 <__hi0bits>
 800bf64:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bf68:	e7e1      	b.n	800bf2e <__d2b+0x62>

0800bf6a <__ratio>:
 800bf6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf6e:	4688      	mov	r8, r1
 800bf70:	4669      	mov	r1, sp
 800bf72:	4681      	mov	r9, r0
 800bf74:	f7ff ff58 	bl	800be28 <__b2d>
 800bf78:	468b      	mov	fp, r1
 800bf7a:	4606      	mov	r6, r0
 800bf7c:	460f      	mov	r7, r1
 800bf7e:	4640      	mov	r0, r8
 800bf80:	a901      	add	r1, sp, #4
 800bf82:	f7ff ff51 	bl	800be28 <__b2d>
 800bf86:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf8a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bf8e:	460d      	mov	r5, r1
 800bf90:	eba3 0c02 	sub.w	ip, r3, r2
 800bf94:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bf98:	1a9b      	subs	r3, r3, r2
 800bf9a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	bfd5      	itete	le
 800bfa2:	460a      	movle	r2, r1
 800bfa4:	463a      	movgt	r2, r7
 800bfa6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bfaa:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bfae:	bfd8      	it	le
 800bfb0:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800bfb4:	462b      	mov	r3, r5
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	4659      	mov	r1, fp
 800bfba:	4630      	mov	r0, r6
 800bfbc:	f7f4 fbb6 	bl	800072c <__aeabi_ddiv>
 800bfc0:	b003      	add	sp, #12
 800bfc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bfc6 <__copybits>:
 800bfc6:	3901      	subs	r1, #1
 800bfc8:	b510      	push	{r4, lr}
 800bfca:	1149      	asrs	r1, r1, #5
 800bfcc:	6914      	ldr	r4, [r2, #16]
 800bfce:	3101      	adds	r1, #1
 800bfd0:	f102 0314 	add.w	r3, r2, #20
 800bfd4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bfd8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bfdc:	42a3      	cmp	r3, r4
 800bfde:	4602      	mov	r2, r0
 800bfe0:	d303      	bcc.n	800bfea <__copybits+0x24>
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	428a      	cmp	r2, r1
 800bfe6:	d305      	bcc.n	800bff4 <__copybits+0x2e>
 800bfe8:	bd10      	pop	{r4, pc}
 800bfea:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfee:	f840 2b04 	str.w	r2, [r0], #4
 800bff2:	e7f3      	b.n	800bfdc <__copybits+0x16>
 800bff4:	f842 3b04 	str.w	r3, [r2], #4
 800bff8:	e7f4      	b.n	800bfe4 <__copybits+0x1e>

0800bffa <__any_on>:
 800bffa:	f100 0214 	add.w	r2, r0, #20
 800bffe:	6900      	ldr	r0, [r0, #16]
 800c000:	114b      	asrs	r3, r1, #5
 800c002:	4298      	cmp	r0, r3
 800c004:	b510      	push	{r4, lr}
 800c006:	db11      	blt.n	800c02c <__any_on+0x32>
 800c008:	dd0a      	ble.n	800c020 <__any_on+0x26>
 800c00a:	f011 011f 	ands.w	r1, r1, #31
 800c00e:	d007      	beq.n	800c020 <__any_on+0x26>
 800c010:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c014:	fa24 f001 	lsr.w	r0, r4, r1
 800c018:	fa00 f101 	lsl.w	r1, r0, r1
 800c01c:	428c      	cmp	r4, r1
 800c01e:	d10b      	bne.n	800c038 <__any_on+0x3e>
 800c020:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c024:	4293      	cmp	r3, r2
 800c026:	d803      	bhi.n	800c030 <__any_on+0x36>
 800c028:	2000      	movs	r0, #0
 800c02a:	bd10      	pop	{r4, pc}
 800c02c:	4603      	mov	r3, r0
 800c02e:	e7f7      	b.n	800c020 <__any_on+0x26>
 800c030:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c034:	2900      	cmp	r1, #0
 800c036:	d0f5      	beq.n	800c024 <__any_on+0x2a>
 800c038:	2001      	movs	r0, #1
 800c03a:	e7f6      	b.n	800c02a <__any_on+0x30>

0800c03c <_calloc_r>:
 800c03c:	b538      	push	{r3, r4, r5, lr}
 800c03e:	fb02 f401 	mul.w	r4, r2, r1
 800c042:	4621      	mov	r1, r4
 800c044:	f000 f808 	bl	800c058 <_malloc_r>
 800c048:	4605      	mov	r5, r0
 800c04a:	b118      	cbz	r0, 800c054 <_calloc_r+0x18>
 800c04c:	4622      	mov	r2, r4
 800c04e:	2100      	movs	r1, #0
 800c050:	f7fe f93a 	bl	800a2c8 <memset>
 800c054:	4628      	mov	r0, r5
 800c056:	bd38      	pop	{r3, r4, r5, pc}

0800c058 <_malloc_r>:
 800c058:	b570      	push	{r4, r5, r6, lr}
 800c05a:	1ccd      	adds	r5, r1, #3
 800c05c:	f025 0503 	bic.w	r5, r5, #3
 800c060:	3508      	adds	r5, #8
 800c062:	2d0c      	cmp	r5, #12
 800c064:	bf38      	it	cc
 800c066:	250c      	movcc	r5, #12
 800c068:	2d00      	cmp	r5, #0
 800c06a:	4606      	mov	r6, r0
 800c06c:	db01      	blt.n	800c072 <_malloc_r+0x1a>
 800c06e:	42a9      	cmp	r1, r5
 800c070:	d903      	bls.n	800c07a <_malloc_r+0x22>
 800c072:	230c      	movs	r3, #12
 800c074:	6033      	str	r3, [r6, #0]
 800c076:	2000      	movs	r0, #0
 800c078:	bd70      	pop	{r4, r5, r6, pc}
 800c07a:	f000 fc85 	bl	800c988 <__malloc_lock>
 800c07e:	4a21      	ldr	r2, [pc, #132]	; (800c104 <_malloc_r+0xac>)
 800c080:	6814      	ldr	r4, [r2, #0]
 800c082:	4621      	mov	r1, r4
 800c084:	b991      	cbnz	r1, 800c0ac <_malloc_r+0x54>
 800c086:	4c20      	ldr	r4, [pc, #128]	; (800c108 <_malloc_r+0xb0>)
 800c088:	6823      	ldr	r3, [r4, #0]
 800c08a:	b91b      	cbnz	r3, 800c094 <_malloc_r+0x3c>
 800c08c:	4630      	mov	r0, r6
 800c08e:	f000 fb3f 	bl	800c710 <_sbrk_r>
 800c092:	6020      	str	r0, [r4, #0]
 800c094:	4629      	mov	r1, r5
 800c096:	4630      	mov	r0, r6
 800c098:	f000 fb3a 	bl	800c710 <_sbrk_r>
 800c09c:	1c43      	adds	r3, r0, #1
 800c09e:	d124      	bne.n	800c0ea <_malloc_r+0x92>
 800c0a0:	230c      	movs	r3, #12
 800c0a2:	4630      	mov	r0, r6
 800c0a4:	6033      	str	r3, [r6, #0]
 800c0a6:	f000 fc70 	bl	800c98a <__malloc_unlock>
 800c0aa:	e7e4      	b.n	800c076 <_malloc_r+0x1e>
 800c0ac:	680b      	ldr	r3, [r1, #0]
 800c0ae:	1b5b      	subs	r3, r3, r5
 800c0b0:	d418      	bmi.n	800c0e4 <_malloc_r+0x8c>
 800c0b2:	2b0b      	cmp	r3, #11
 800c0b4:	d90f      	bls.n	800c0d6 <_malloc_r+0x7e>
 800c0b6:	600b      	str	r3, [r1, #0]
 800c0b8:	18cc      	adds	r4, r1, r3
 800c0ba:	50cd      	str	r5, [r1, r3]
 800c0bc:	4630      	mov	r0, r6
 800c0be:	f000 fc64 	bl	800c98a <__malloc_unlock>
 800c0c2:	f104 000b 	add.w	r0, r4, #11
 800c0c6:	1d23      	adds	r3, r4, #4
 800c0c8:	f020 0007 	bic.w	r0, r0, #7
 800c0cc:	1ac3      	subs	r3, r0, r3
 800c0ce:	d0d3      	beq.n	800c078 <_malloc_r+0x20>
 800c0d0:	425a      	negs	r2, r3
 800c0d2:	50e2      	str	r2, [r4, r3]
 800c0d4:	e7d0      	b.n	800c078 <_malloc_r+0x20>
 800c0d6:	684b      	ldr	r3, [r1, #4]
 800c0d8:	428c      	cmp	r4, r1
 800c0da:	bf16      	itet	ne
 800c0dc:	6063      	strne	r3, [r4, #4]
 800c0de:	6013      	streq	r3, [r2, #0]
 800c0e0:	460c      	movne	r4, r1
 800c0e2:	e7eb      	b.n	800c0bc <_malloc_r+0x64>
 800c0e4:	460c      	mov	r4, r1
 800c0e6:	6849      	ldr	r1, [r1, #4]
 800c0e8:	e7cc      	b.n	800c084 <_malloc_r+0x2c>
 800c0ea:	1cc4      	adds	r4, r0, #3
 800c0ec:	f024 0403 	bic.w	r4, r4, #3
 800c0f0:	42a0      	cmp	r0, r4
 800c0f2:	d005      	beq.n	800c100 <_malloc_r+0xa8>
 800c0f4:	1a21      	subs	r1, r4, r0
 800c0f6:	4630      	mov	r0, r6
 800c0f8:	f000 fb0a 	bl	800c710 <_sbrk_r>
 800c0fc:	3001      	adds	r0, #1
 800c0fe:	d0cf      	beq.n	800c0a0 <_malloc_r+0x48>
 800c100:	6025      	str	r5, [r4, #0]
 800c102:	e7db      	b.n	800c0bc <_malloc_r+0x64>
 800c104:	200005e8 	.word	0x200005e8
 800c108:	200005ec 	.word	0x200005ec

0800c10c <_sungetc_r>:
 800c10c:	b538      	push	{r3, r4, r5, lr}
 800c10e:	1c4b      	adds	r3, r1, #1
 800c110:	4614      	mov	r4, r2
 800c112:	d103      	bne.n	800c11c <_sungetc_r+0x10>
 800c114:	f04f 35ff 	mov.w	r5, #4294967295
 800c118:	4628      	mov	r0, r5
 800c11a:	bd38      	pop	{r3, r4, r5, pc}
 800c11c:	8993      	ldrh	r3, [r2, #12]
 800c11e:	b2cd      	uxtb	r5, r1
 800c120:	f023 0320 	bic.w	r3, r3, #32
 800c124:	8193      	strh	r3, [r2, #12]
 800c126:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c128:	6852      	ldr	r2, [r2, #4]
 800c12a:	b18b      	cbz	r3, 800c150 <_sungetc_r+0x44>
 800c12c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c12e:	4293      	cmp	r3, r2
 800c130:	dd08      	ble.n	800c144 <_sungetc_r+0x38>
 800c132:	6823      	ldr	r3, [r4, #0]
 800c134:	1e5a      	subs	r2, r3, #1
 800c136:	6022      	str	r2, [r4, #0]
 800c138:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c13c:	6863      	ldr	r3, [r4, #4]
 800c13e:	3301      	adds	r3, #1
 800c140:	6063      	str	r3, [r4, #4]
 800c142:	e7e9      	b.n	800c118 <_sungetc_r+0xc>
 800c144:	4621      	mov	r1, r4
 800c146:	f000 fbc3 	bl	800c8d0 <__submore>
 800c14a:	2800      	cmp	r0, #0
 800c14c:	d0f1      	beq.n	800c132 <_sungetc_r+0x26>
 800c14e:	e7e1      	b.n	800c114 <_sungetc_r+0x8>
 800c150:	6921      	ldr	r1, [r4, #16]
 800c152:	6823      	ldr	r3, [r4, #0]
 800c154:	b151      	cbz	r1, 800c16c <_sungetc_r+0x60>
 800c156:	4299      	cmp	r1, r3
 800c158:	d208      	bcs.n	800c16c <_sungetc_r+0x60>
 800c15a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c15e:	42a9      	cmp	r1, r5
 800c160:	d104      	bne.n	800c16c <_sungetc_r+0x60>
 800c162:	3b01      	subs	r3, #1
 800c164:	3201      	adds	r2, #1
 800c166:	6023      	str	r3, [r4, #0]
 800c168:	6062      	str	r2, [r4, #4]
 800c16a:	e7d5      	b.n	800c118 <_sungetc_r+0xc>
 800c16c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c170:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c174:	6363      	str	r3, [r4, #52]	; 0x34
 800c176:	2303      	movs	r3, #3
 800c178:	63a3      	str	r3, [r4, #56]	; 0x38
 800c17a:	4623      	mov	r3, r4
 800c17c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c180:	6023      	str	r3, [r4, #0]
 800c182:	2301      	movs	r3, #1
 800c184:	e7dc      	b.n	800c140 <_sungetc_r+0x34>

0800c186 <__ssrefill_r>:
 800c186:	b510      	push	{r4, lr}
 800c188:	460c      	mov	r4, r1
 800c18a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c18c:	b169      	cbz	r1, 800c1aa <__ssrefill_r+0x24>
 800c18e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c192:	4299      	cmp	r1, r3
 800c194:	d001      	beq.n	800c19a <__ssrefill_r+0x14>
 800c196:	f000 fbf9 	bl	800c98c <_free_r>
 800c19a:	2000      	movs	r0, #0
 800c19c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c19e:	6360      	str	r0, [r4, #52]	; 0x34
 800c1a0:	6063      	str	r3, [r4, #4]
 800c1a2:	b113      	cbz	r3, 800c1aa <__ssrefill_r+0x24>
 800c1a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c1a6:	6023      	str	r3, [r4, #0]
 800c1a8:	bd10      	pop	{r4, pc}
 800c1aa:	6923      	ldr	r3, [r4, #16]
 800c1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b0:	6023      	str	r3, [r4, #0]
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	6063      	str	r3, [r4, #4]
 800c1b6:	89a3      	ldrh	r3, [r4, #12]
 800c1b8:	f043 0320 	orr.w	r3, r3, #32
 800c1bc:	81a3      	strh	r3, [r4, #12]
 800c1be:	e7f3      	b.n	800c1a8 <__ssrefill_r+0x22>

0800c1c0 <__ssvfiscanf_r>:
 800c1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c4:	460c      	mov	r4, r1
 800c1c6:	2100      	movs	r1, #0
 800c1c8:	4606      	mov	r6, r0
 800c1ca:	4692      	mov	sl, r2
 800c1cc:	270a      	movs	r7, #10
 800c1ce:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800c1d2:	9144      	str	r1, [sp, #272]	; 0x110
 800c1d4:	9145      	str	r1, [sp, #276]	; 0x114
 800c1d6:	499e      	ldr	r1, [pc, #632]	; (800c450 <__ssvfiscanf_r+0x290>)
 800c1d8:	f10d 0804 	add.w	r8, sp, #4
 800c1dc:	91a0      	str	r1, [sp, #640]	; 0x280
 800c1de:	499d      	ldr	r1, [pc, #628]	; (800c454 <__ssvfiscanf_r+0x294>)
 800c1e0:	f8df 9274 	ldr.w	r9, [pc, #628]	; 800c458 <__ssvfiscanf_r+0x298>
 800c1e4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c1e8:	91a1      	str	r1, [sp, #644]	; 0x284
 800c1ea:	9300      	str	r3, [sp, #0]
 800c1ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	f000 812a 	beq.w	800c44a <__ssvfiscanf_r+0x28a>
 800c1f6:	4655      	mov	r5, sl
 800c1f8:	f7ff fb06 	bl	800b808 <__locale_ctype_ptr>
 800c1fc:	f815 bb01 	ldrb.w	fp, [r5], #1
 800c200:	4458      	add	r0, fp
 800c202:	7843      	ldrb	r3, [r0, #1]
 800c204:	f013 0308 	ands.w	r3, r3, #8
 800c208:	d01c      	beq.n	800c244 <__ssvfiscanf_r+0x84>
 800c20a:	6863      	ldr	r3, [r4, #4]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	dd12      	ble.n	800c236 <__ssvfiscanf_r+0x76>
 800c210:	f7ff fafa 	bl	800b808 <__locale_ctype_ptr>
 800c214:	6823      	ldr	r3, [r4, #0]
 800c216:	781a      	ldrb	r2, [r3, #0]
 800c218:	4410      	add	r0, r2
 800c21a:	7842      	ldrb	r2, [r0, #1]
 800c21c:	0712      	lsls	r2, r2, #28
 800c21e:	d401      	bmi.n	800c224 <__ssvfiscanf_r+0x64>
 800c220:	46aa      	mov	sl, r5
 800c222:	e7e3      	b.n	800c1ec <__ssvfiscanf_r+0x2c>
 800c224:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c226:	3301      	adds	r3, #1
 800c228:	3201      	adds	r2, #1
 800c22a:	9245      	str	r2, [sp, #276]	; 0x114
 800c22c:	6862      	ldr	r2, [r4, #4]
 800c22e:	6023      	str	r3, [r4, #0]
 800c230:	3a01      	subs	r2, #1
 800c232:	6062      	str	r2, [r4, #4]
 800c234:	e7e9      	b.n	800c20a <__ssvfiscanf_r+0x4a>
 800c236:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c238:	4621      	mov	r1, r4
 800c23a:	4630      	mov	r0, r6
 800c23c:	4798      	blx	r3
 800c23e:	2800      	cmp	r0, #0
 800c240:	d0e6      	beq.n	800c210 <__ssvfiscanf_r+0x50>
 800c242:	e7ed      	b.n	800c220 <__ssvfiscanf_r+0x60>
 800c244:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800c248:	f040 8082 	bne.w	800c350 <__ssvfiscanf_r+0x190>
 800c24c:	9343      	str	r3, [sp, #268]	; 0x10c
 800c24e:	9341      	str	r3, [sp, #260]	; 0x104
 800c250:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800c254:	2b2a      	cmp	r3, #42	; 0x2a
 800c256:	d103      	bne.n	800c260 <__ssvfiscanf_r+0xa0>
 800c258:	2310      	movs	r3, #16
 800c25a:	f10a 0502 	add.w	r5, sl, #2
 800c25e:	9341      	str	r3, [sp, #260]	; 0x104
 800c260:	46aa      	mov	sl, r5
 800c262:	f815 1b01 	ldrb.w	r1, [r5], #1
 800c266:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c26a:	2a09      	cmp	r2, #9
 800c26c:	d922      	bls.n	800c2b4 <__ssvfiscanf_r+0xf4>
 800c26e:	2203      	movs	r2, #3
 800c270:	4879      	ldr	r0, [pc, #484]	; (800c458 <__ssvfiscanf_r+0x298>)
 800c272:	f000 fb7b 	bl	800c96c <memchr>
 800c276:	b138      	cbz	r0, 800c288 <__ssvfiscanf_r+0xc8>
 800c278:	eba0 0309 	sub.w	r3, r0, r9
 800c27c:	2001      	movs	r0, #1
 800c27e:	46aa      	mov	sl, r5
 800c280:	4098      	lsls	r0, r3
 800c282:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c284:	4318      	orrs	r0, r3
 800c286:	9041      	str	r0, [sp, #260]	; 0x104
 800c288:	f89a 3000 	ldrb.w	r3, [sl]
 800c28c:	f10a 0501 	add.w	r5, sl, #1
 800c290:	2b67      	cmp	r3, #103	; 0x67
 800c292:	d82b      	bhi.n	800c2ec <__ssvfiscanf_r+0x12c>
 800c294:	2b65      	cmp	r3, #101	; 0x65
 800c296:	f080 809f 	bcs.w	800c3d8 <__ssvfiscanf_r+0x218>
 800c29a:	2b47      	cmp	r3, #71	; 0x47
 800c29c:	d810      	bhi.n	800c2c0 <__ssvfiscanf_r+0x100>
 800c29e:	2b45      	cmp	r3, #69	; 0x45
 800c2a0:	f080 809a 	bcs.w	800c3d8 <__ssvfiscanf_r+0x218>
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d06c      	beq.n	800c382 <__ssvfiscanf_r+0x1c2>
 800c2a8:	2b25      	cmp	r3, #37	; 0x25
 800c2aa:	d051      	beq.n	800c350 <__ssvfiscanf_r+0x190>
 800c2ac:	2303      	movs	r3, #3
 800c2ae:	9742      	str	r7, [sp, #264]	; 0x108
 800c2b0:	9347      	str	r3, [sp, #284]	; 0x11c
 800c2b2:	e027      	b.n	800c304 <__ssvfiscanf_r+0x144>
 800c2b4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c2b6:	fb07 1303 	mla	r3, r7, r3, r1
 800c2ba:	3b30      	subs	r3, #48	; 0x30
 800c2bc:	9343      	str	r3, [sp, #268]	; 0x10c
 800c2be:	e7cf      	b.n	800c260 <__ssvfiscanf_r+0xa0>
 800c2c0:	2b5b      	cmp	r3, #91	; 0x5b
 800c2c2:	d06a      	beq.n	800c39a <__ssvfiscanf_r+0x1da>
 800c2c4:	d80c      	bhi.n	800c2e0 <__ssvfiscanf_r+0x120>
 800c2c6:	2b58      	cmp	r3, #88	; 0x58
 800c2c8:	d1f0      	bne.n	800c2ac <__ssvfiscanf_r+0xec>
 800c2ca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c2cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2d0:	9241      	str	r2, [sp, #260]	; 0x104
 800c2d2:	2210      	movs	r2, #16
 800c2d4:	9242      	str	r2, [sp, #264]	; 0x108
 800c2d6:	2b6e      	cmp	r3, #110	; 0x6e
 800c2d8:	bf8c      	ite	hi
 800c2da:	2304      	movhi	r3, #4
 800c2dc:	2303      	movls	r3, #3
 800c2de:	e010      	b.n	800c302 <__ssvfiscanf_r+0x142>
 800c2e0:	2b63      	cmp	r3, #99	; 0x63
 800c2e2:	d065      	beq.n	800c3b0 <__ssvfiscanf_r+0x1f0>
 800c2e4:	2b64      	cmp	r3, #100	; 0x64
 800c2e6:	d1e1      	bne.n	800c2ac <__ssvfiscanf_r+0xec>
 800c2e8:	9742      	str	r7, [sp, #264]	; 0x108
 800c2ea:	e7f4      	b.n	800c2d6 <__ssvfiscanf_r+0x116>
 800c2ec:	2b70      	cmp	r3, #112	; 0x70
 800c2ee:	d04b      	beq.n	800c388 <__ssvfiscanf_r+0x1c8>
 800c2f0:	d826      	bhi.n	800c340 <__ssvfiscanf_r+0x180>
 800c2f2:	2b6e      	cmp	r3, #110	; 0x6e
 800c2f4:	d062      	beq.n	800c3bc <__ssvfiscanf_r+0x1fc>
 800c2f6:	d84c      	bhi.n	800c392 <__ssvfiscanf_r+0x1d2>
 800c2f8:	2b69      	cmp	r3, #105	; 0x69
 800c2fa:	d1d7      	bne.n	800c2ac <__ssvfiscanf_r+0xec>
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	9342      	str	r3, [sp, #264]	; 0x108
 800c300:	2303      	movs	r3, #3
 800c302:	9347      	str	r3, [sp, #284]	; 0x11c
 800c304:	6863      	ldr	r3, [r4, #4]
 800c306:	2b00      	cmp	r3, #0
 800c308:	dd68      	ble.n	800c3dc <__ssvfiscanf_r+0x21c>
 800c30a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c30c:	0659      	lsls	r1, r3, #25
 800c30e:	d407      	bmi.n	800c320 <__ssvfiscanf_r+0x160>
 800c310:	f7ff fa7a 	bl	800b808 <__locale_ctype_ptr>
 800c314:	6823      	ldr	r3, [r4, #0]
 800c316:	781a      	ldrb	r2, [r3, #0]
 800c318:	4410      	add	r0, r2
 800c31a:	7842      	ldrb	r2, [r0, #1]
 800c31c:	0712      	lsls	r2, r2, #28
 800c31e:	d464      	bmi.n	800c3ea <__ssvfiscanf_r+0x22a>
 800c320:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c322:	2b02      	cmp	r3, #2
 800c324:	dc73      	bgt.n	800c40e <__ssvfiscanf_r+0x24e>
 800c326:	466b      	mov	r3, sp
 800c328:	4622      	mov	r2, r4
 800c32a:	a941      	add	r1, sp, #260	; 0x104
 800c32c:	4630      	mov	r0, r6
 800c32e:	f000 f897 	bl	800c460 <_scanf_chars>
 800c332:	2801      	cmp	r0, #1
 800c334:	f000 8089 	beq.w	800c44a <__ssvfiscanf_r+0x28a>
 800c338:	2802      	cmp	r0, #2
 800c33a:	f47f af71 	bne.w	800c220 <__ssvfiscanf_r+0x60>
 800c33e:	e01d      	b.n	800c37c <__ssvfiscanf_r+0x1bc>
 800c340:	2b75      	cmp	r3, #117	; 0x75
 800c342:	d0d1      	beq.n	800c2e8 <__ssvfiscanf_r+0x128>
 800c344:	2b78      	cmp	r3, #120	; 0x78
 800c346:	d0c0      	beq.n	800c2ca <__ssvfiscanf_r+0x10a>
 800c348:	2b73      	cmp	r3, #115	; 0x73
 800c34a:	d1af      	bne.n	800c2ac <__ssvfiscanf_r+0xec>
 800c34c:	2302      	movs	r3, #2
 800c34e:	e7d8      	b.n	800c302 <__ssvfiscanf_r+0x142>
 800c350:	6863      	ldr	r3, [r4, #4]
 800c352:	2b00      	cmp	r3, #0
 800c354:	dd0c      	ble.n	800c370 <__ssvfiscanf_r+0x1b0>
 800c356:	6823      	ldr	r3, [r4, #0]
 800c358:	781a      	ldrb	r2, [r3, #0]
 800c35a:	455a      	cmp	r2, fp
 800c35c:	d175      	bne.n	800c44a <__ssvfiscanf_r+0x28a>
 800c35e:	3301      	adds	r3, #1
 800c360:	6862      	ldr	r2, [r4, #4]
 800c362:	6023      	str	r3, [r4, #0]
 800c364:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c366:	3a01      	subs	r2, #1
 800c368:	3301      	adds	r3, #1
 800c36a:	6062      	str	r2, [r4, #4]
 800c36c:	9345      	str	r3, [sp, #276]	; 0x114
 800c36e:	e757      	b.n	800c220 <__ssvfiscanf_r+0x60>
 800c370:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c372:	4621      	mov	r1, r4
 800c374:	4630      	mov	r0, r6
 800c376:	4798      	blx	r3
 800c378:	2800      	cmp	r0, #0
 800c37a:	d0ec      	beq.n	800c356 <__ssvfiscanf_r+0x196>
 800c37c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c37e:	2800      	cmp	r0, #0
 800c380:	d159      	bne.n	800c436 <__ssvfiscanf_r+0x276>
 800c382:	f04f 30ff 	mov.w	r0, #4294967295
 800c386:	e05c      	b.n	800c442 <__ssvfiscanf_r+0x282>
 800c388:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c38a:	f042 0220 	orr.w	r2, r2, #32
 800c38e:	9241      	str	r2, [sp, #260]	; 0x104
 800c390:	e79b      	b.n	800c2ca <__ssvfiscanf_r+0x10a>
 800c392:	2308      	movs	r3, #8
 800c394:	9342      	str	r3, [sp, #264]	; 0x108
 800c396:	2304      	movs	r3, #4
 800c398:	e7b3      	b.n	800c302 <__ssvfiscanf_r+0x142>
 800c39a:	4629      	mov	r1, r5
 800c39c:	4640      	mov	r0, r8
 800c39e:	f000 f9c7 	bl	800c730 <__sccl>
 800c3a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c3a4:	4605      	mov	r5, r0
 800c3a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3aa:	9341      	str	r3, [sp, #260]	; 0x104
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	e7a8      	b.n	800c302 <__ssvfiscanf_r+0x142>
 800c3b0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c3b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3b6:	9341      	str	r3, [sp, #260]	; 0x104
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	e7a2      	b.n	800c302 <__ssvfiscanf_r+0x142>
 800c3bc:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c3be:	06c3      	lsls	r3, r0, #27
 800c3c0:	f53f af2e 	bmi.w	800c220 <__ssvfiscanf_r+0x60>
 800c3c4:	9b00      	ldr	r3, [sp, #0]
 800c3c6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c3c8:	1d19      	adds	r1, r3, #4
 800c3ca:	9100      	str	r1, [sp, #0]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	07c0      	lsls	r0, r0, #31
 800c3d0:	bf4c      	ite	mi
 800c3d2:	801a      	strhmi	r2, [r3, #0]
 800c3d4:	601a      	strpl	r2, [r3, #0]
 800c3d6:	e723      	b.n	800c220 <__ssvfiscanf_r+0x60>
 800c3d8:	2305      	movs	r3, #5
 800c3da:	e792      	b.n	800c302 <__ssvfiscanf_r+0x142>
 800c3dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c3de:	4621      	mov	r1, r4
 800c3e0:	4630      	mov	r0, r6
 800c3e2:	4798      	blx	r3
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	d090      	beq.n	800c30a <__ssvfiscanf_r+0x14a>
 800c3e8:	e7c8      	b.n	800c37c <__ssvfiscanf_r+0x1bc>
 800c3ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c3ec:	3201      	adds	r2, #1
 800c3ee:	9245      	str	r2, [sp, #276]	; 0x114
 800c3f0:	6862      	ldr	r2, [r4, #4]
 800c3f2:	3a01      	subs	r2, #1
 800c3f4:	2a00      	cmp	r2, #0
 800c3f6:	6062      	str	r2, [r4, #4]
 800c3f8:	dd02      	ble.n	800c400 <__ssvfiscanf_r+0x240>
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	6023      	str	r3, [r4, #0]
 800c3fe:	e787      	b.n	800c310 <__ssvfiscanf_r+0x150>
 800c400:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c402:	4621      	mov	r1, r4
 800c404:	4630      	mov	r0, r6
 800c406:	4798      	blx	r3
 800c408:	2800      	cmp	r0, #0
 800c40a:	d081      	beq.n	800c310 <__ssvfiscanf_r+0x150>
 800c40c:	e7b6      	b.n	800c37c <__ssvfiscanf_r+0x1bc>
 800c40e:	2b04      	cmp	r3, #4
 800c410:	dc06      	bgt.n	800c420 <__ssvfiscanf_r+0x260>
 800c412:	466b      	mov	r3, sp
 800c414:	4622      	mov	r2, r4
 800c416:	a941      	add	r1, sp, #260	; 0x104
 800c418:	4630      	mov	r0, r6
 800c41a:	f000 f883 	bl	800c524 <_scanf_i>
 800c41e:	e788      	b.n	800c332 <__ssvfiscanf_r+0x172>
 800c420:	4b0e      	ldr	r3, [pc, #56]	; (800c45c <__ssvfiscanf_r+0x29c>)
 800c422:	2b00      	cmp	r3, #0
 800c424:	f43f aefc 	beq.w	800c220 <__ssvfiscanf_r+0x60>
 800c428:	466b      	mov	r3, sp
 800c42a:	4622      	mov	r2, r4
 800c42c:	a941      	add	r1, sp, #260	; 0x104
 800c42e:	4630      	mov	r0, r6
 800c430:	f3af 8000 	nop.w
 800c434:	e77d      	b.n	800c332 <__ssvfiscanf_r+0x172>
 800c436:	89a3      	ldrh	r3, [r4, #12]
 800c438:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c43c:	bf18      	it	ne
 800c43e:	f04f 30ff 	movne.w	r0, #4294967295
 800c442:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800c446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c44a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c44c:	e7f9      	b.n	800c442 <__ssvfiscanf_r+0x282>
 800c44e:	bf00      	nop
 800c450:	0800c10d 	.word	0x0800c10d
 800c454:	0800c187 	.word	0x0800c187
 800c458:	0800ee74 	.word	0x0800ee74
 800c45c:	00000000 	.word	0x00000000

0800c460 <_scanf_chars>:
 800c460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c464:	4615      	mov	r5, r2
 800c466:	688a      	ldr	r2, [r1, #8]
 800c468:	4680      	mov	r8, r0
 800c46a:	460c      	mov	r4, r1
 800c46c:	b932      	cbnz	r2, 800c47c <_scanf_chars+0x1c>
 800c46e:	698a      	ldr	r2, [r1, #24]
 800c470:	2a00      	cmp	r2, #0
 800c472:	bf14      	ite	ne
 800c474:	f04f 32ff 	movne.w	r2, #4294967295
 800c478:	2201      	moveq	r2, #1
 800c47a:	608a      	str	r2, [r1, #8]
 800c47c:	2600      	movs	r6, #0
 800c47e:	6822      	ldr	r2, [r4, #0]
 800c480:	06d1      	lsls	r1, r2, #27
 800c482:	bf5f      	itttt	pl
 800c484:	681a      	ldrpl	r2, [r3, #0]
 800c486:	1d11      	addpl	r1, r2, #4
 800c488:	6019      	strpl	r1, [r3, #0]
 800c48a:	6817      	ldrpl	r7, [r2, #0]
 800c48c:	69a3      	ldr	r3, [r4, #24]
 800c48e:	b1db      	cbz	r3, 800c4c8 <_scanf_chars+0x68>
 800c490:	2b01      	cmp	r3, #1
 800c492:	d107      	bne.n	800c4a4 <_scanf_chars+0x44>
 800c494:	682b      	ldr	r3, [r5, #0]
 800c496:	6962      	ldr	r2, [r4, #20]
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	5cd3      	ldrb	r3, [r2, r3]
 800c49c:	b9a3      	cbnz	r3, 800c4c8 <_scanf_chars+0x68>
 800c49e:	2e00      	cmp	r6, #0
 800c4a0:	d131      	bne.n	800c506 <_scanf_chars+0xa6>
 800c4a2:	e006      	b.n	800c4b2 <_scanf_chars+0x52>
 800c4a4:	2b02      	cmp	r3, #2
 800c4a6:	d007      	beq.n	800c4b8 <_scanf_chars+0x58>
 800c4a8:	2e00      	cmp	r6, #0
 800c4aa:	d12c      	bne.n	800c506 <_scanf_chars+0xa6>
 800c4ac:	69a3      	ldr	r3, [r4, #24]
 800c4ae:	2b01      	cmp	r3, #1
 800c4b0:	d129      	bne.n	800c506 <_scanf_chars+0xa6>
 800c4b2:	2001      	movs	r0, #1
 800c4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4b8:	f7ff f9a6 	bl	800b808 <__locale_ctype_ptr>
 800c4bc:	682b      	ldr	r3, [r5, #0]
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	4418      	add	r0, r3
 800c4c2:	7843      	ldrb	r3, [r0, #1]
 800c4c4:	071b      	lsls	r3, r3, #28
 800c4c6:	d4ef      	bmi.n	800c4a8 <_scanf_chars+0x48>
 800c4c8:	6823      	ldr	r3, [r4, #0]
 800c4ca:	3601      	adds	r6, #1
 800c4cc:	06da      	lsls	r2, r3, #27
 800c4ce:	bf5e      	ittt	pl
 800c4d0:	682b      	ldrpl	r3, [r5, #0]
 800c4d2:	781b      	ldrbpl	r3, [r3, #0]
 800c4d4:	703b      	strbpl	r3, [r7, #0]
 800c4d6:	682a      	ldr	r2, [r5, #0]
 800c4d8:	686b      	ldr	r3, [r5, #4]
 800c4da:	f102 0201 	add.w	r2, r2, #1
 800c4de:	602a      	str	r2, [r5, #0]
 800c4e0:	68a2      	ldr	r2, [r4, #8]
 800c4e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800c4e6:	f102 32ff 	add.w	r2, r2, #4294967295
 800c4ea:	606b      	str	r3, [r5, #4]
 800c4ec:	bf58      	it	pl
 800c4ee:	3701      	addpl	r7, #1
 800c4f0:	60a2      	str	r2, [r4, #8]
 800c4f2:	b142      	cbz	r2, 800c506 <_scanf_chars+0xa6>
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	dcc9      	bgt.n	800c48c <_scanf_chars+0x2c>
 800c4f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c4fc:	4629      	mov	r1, r5
 800c4fe:	4640      	mov	r0, r8
 800c500:	4798      	blx	r3
 800c502:	2800      	cmp	r0, #0
 800c504:	d0c2      	beq.n	800c48c <_scanf_chars+0x2c>
 800c506:	6823      	ldr	r3, [r4, #0]
 800c508:	f013 0310 	ands.w	r3, r3, #16
 800c50c:	d105      	bne.n	800c51a <_scanf_chars+0xba>
 800c50e:	68e2      	ldr	r2, [r4, #12]
 800c510:	3201      	adds	r2, #1
 800c512:	60e2      	str	r2, [r4, #12]
 800c514:	69a2      	ldr	r2, [r4, #24]
 800c516:	b102      	cbz	r2, 800c51a <_scanf_chars+0xba>
 800c518:	703b      	strb	r3, [r7, #0]
 800c51a:	6923      	ldr	r3, [r4, #16]
 800c51c:	2000      	movs	r0, #0
 800c51e:	441e      	add	r6, r3
 800c520:	6126      	str	r6, [r4, #16]
 800c522:	e7c7      	b.n	800c4b4 <_scanf_chars+0x54>

0800c524 <_scanf_i>:
 800c524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c528:	460c      	mov	r4, r1
 800c52a:	469a      	mov	sl, r3
 800c52c:	4b74      	ldr	r3, [pc, #464]	; (800c700 <_scanf_i+0x1dc>)
 800c52e:	b087      	sub	sp, #28
 800c530:	4683      	mov	fp, r0
 800c532:	4616      	mov	r6, r2
 800c534:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c538:	ab03      	add	r3, sp, #12
 800c53a:	68a7      	ldr	r7, [r4, #8]
 800c53c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c540:	4b70      	ldr	r3, [pc, #448]	; (800c704 <_scanf_i+0x1e0>)
 800c542:	69a1      	ldr	r1, [r4, #24]
 800c544:	4a70      	ldr	r2, [pc, #448]	; (800c708 <_scanf_i+0x1e4>)
 800c546:	f104 091c 	add.w	r9, r4, #28
 800c54a:	2903      	cmp	r1, #3
 800c54c:	bf08      	it	eq
 800c54e:	461a      	moveq	r2, r3
 800c550:	1e7b      	subs	r3, r7, #1
 800c552:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800c556:	bf84      	itt	hi
 800c558:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c55c:	60a3      	strhi	r3, [r4, #8]
 800c55e:	6823      	ldr	r3, [r4, #0]
 800c560:	bf88      	it	hi
 800c562:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c566:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c56a:	6023      	str	r3, [r4, #0]
 800c56c:	bf98      	it	ls
 800c56e:	2700      	movls	r7, #0
 800c570:	464b      	mov	r3, r9
 800c572:	f04f 0800 	mov.w	r8, #0
 800c576:	9200      	str	r2, [sp, #0]
 800c578:	bf88      	it	hi
 800c57a:	197f      	addhi	r7, r7, r5
 800c57c:	6831      	ldr	r1, [r6, #0]
 800c57e:	9301      	str	r3, [sp, #4]
 800c580:	ab03      	add	r3, sp, #12
 800c582:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c586:	2202      	movs	r2, #2
 800c588:	7809      	ldrb	r1, [r1, #0]
 800c58a:	f000 f9ef 	bl	800c96c <memchr>
 800c58e:	9b01      	ldr	r3, [sp, #4]
 800c590:	b330      	cbz	r0, 800c5e0 <_scanf_i+0xbc>
 800c592:	f1b8 0f01 	cmp.w	r8, #1
 800c596:	d15a      	bne.n	800c64e <_scanf_i+0x12a>
 800c598:	6862      	ldr	r2, [r4, #4]
 800c59a:	b92a      	cbnz	r2, 800c5a8 <_scanf_i+0x84>
 800c59c:	2108      	movs	r1, #8
 800c59e:	6822      	ldr	r2, [r4, #0]
 800c5a0:	6061      	str	r1, [r4, #4]
 800c5a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c5a6:	6022      	str	r2, [r4, #0]
 800c5a8:	6822      	ldr	r2, [r4, #0]
 800c5aa:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c5ae:	6022      	str	r2, [r4, #0]
 800c5b0:	68a2      	ldr	r2, [r4, #8]
 800c5b2:	1e51      	subs	r1, r2, #1
 800c5b4:	60a1      	str	r1, [r4, #8]
 800c5b6:	b19a      	cbz	r2, 800c5e0 <_scanf_i+0xbc>
 800c5b8:	6832      	ldr	r2, [r6, #0]
 800c5ba:	1c5d      	adds	r5, r3, #1
 800c5bc:	1c51      	adds	r1, r2, #1
 800c5be:	6031      	str	r1, [r6, #0]
 800c5c0:	7812      	ldrb	r2, [r2, #0]
 800c5c2:	701a      	strb	r2, [r3, #0]
 800c5c4:	6873      	ldr	r3, [r6, #4]
 800c5c6:	3b01      	subs	r3, #1
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	6073      	str	r3, [r6, #4]
 800c5cc:	dc07      	bgt.n	800c5de <_scanf_i+0xba>
 800c5ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c5d2:	4631      	mov	r1, r6
 800c5d4:	4658      	mov	r0, fp
 800c5d6:	4798      	blx	r3
 800c5d8:	2800      	cmp	r0, #0
 800c5da:	f040 8087 	bne.w	800c6ec <_scanf_i+0x1c8>
 800c5de:	462b      	mov	r3, r5
 800c5e0:	f108 0801 	add.w	r8, r8, #1
 800c5e4:	f1b8 0f03 	cmp.w	r8, #3
 800c5e8:	d1c8      	bne.n	800c57c <_scanf_i+0x58>
 800c5ea:	6862      	ldr	r2, [r4, #4]
 800c5ec:	b90a      	cbnz	r2, 800c5f2 <_scanf_i+0xce>
 800c5ee:	220a      	movs	r2, #10
 800c5f0:	6062      	str	r2, [r4, #4]
 800c5f2:	6862      	ldr	r2, [r4, #4]
 800c5f4:	4945      	ldr	r1, [pc, #276]	; (800c70c <_scanf_i+0x1e8>)
 800c5f6:	6960      	ldr	r0, [r4, #20]
 800c5f8:	1a89      	subs	r1, r1, r2
 800c5fa:	9301      	str	r3, [sp, #4]
 800c5fc:	f000 f898 	bl	800c730 <__sccl>
 800c600:	9b01      	ldr	r3, [sp, #4]
 800c602:	f04f 0800 	mov.w	r8, #0
 800c606:	461d      	mov	r5, r3
 800c608:	68a3      	ldr	r3, [r4, #8]
 800c60a:	6822      	ldr	r2, [r4, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d03b      	beq.n	800c688 <_scanf_i+0x164>
 800c610:	6831      	ldr	r1, [r6, #0]
 800c612:	6960      	ldr	r0, [r4, #20]
 800c614:	f891 c000 	ldrb.w	ip, [r1]
 800c618:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c61c:	2800      	cmp	r0, #0
 800c61e:	d033      	beq.n	800c688 <_scanf_i+0x164>
 800c620:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c624:	d121      	bne.n	800c66a <_scanf_i+0x146>
 800c626:	0510      	lsls	r0, r2, #20
 800c628:	d51f      	bpl.n	800c66a <_scanf_i+0x146>
 800c62a:	f108 0801 	add.w	r8, r8, #1
 800c62e:	b117      	cbz	r7, 800c636 <_scanf_i+0x112>
 800c630:	3301      	adds	r3, #1
 800c632:	3f01      	subs	r7, #1
 800c634:	60a3      	str	r3, [r4, #8]
 800c636:	6873      	ldr	r3, [r6, #4]
 800c638:	3b01      	subs	r3, #1
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	6073      	str	r3, [r6, #4]
 800c63e:	dd1c      	ble.n	800c67a <_scanf_i+0x156>
 800c640:	6833      	ldr	r3, [r6, #0]
 800c642:	3301      	adds	r3, #1
 800c644:	6033      	str	r3, [r6, #0]
 800c646:	68a3      	ldr	r3, [r4, #8]
 800c648:	3b01      	subs	r3, #1
 800c64a:	60a3      	str	r3, [r4, #8]
 800c64c:	e7dc      	b.n	800c608 <_scanf_i+0xe4>
 800c64e:	f1b8 0f02 	cmp.w	r8, #2
 800c652:	d1ad      	bne.n	800c5b0 <_scanf_i+0x8c>
 800c654:	6822      	ldr	r2, [r4, #0]
 800c656:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c65a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c65e:	d1bf      	bne.n	800c5e0 <_scanf_i+0xbc>
 800c660:	2110      	movs	r1, #16
 800c662:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c666:	6061      	str	r1, [r4, #4]
 800c668:	e7a1      	b.n	800c5ae <_scanf_i+0x8a>
 800c66a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c66e:	6022      	str	r2, [r4, #0]
 800c670:	780b      	ldrb	r3, [r1, #0]
 800c672:	3501      	adds	r5, #1
 800c674:	f805 3c01 	strb.w	r3, [r5, #-1]
 800c678:	e7dd      	b.n	800c636 <_scanf_i+0x112>
 800c67a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c67e:	4631      	mov	r1, r6
 800c680:	4658      	mov	r0, fp
 800c682:	4798      	blx	r3
 800c684:	2800      	cmp	r0, #0
 800c686:	d0de      	beq.n	800c646 <_scanf_i+0x122>
 800c688:	6823      	ldr	r3, [r4, #0]
 800c68a:	05d9      	lsls	r1, r3, #23
 800c68c:	d50c      	bpl.n	800c6a8 <_scanf_i+0x184>
 800c68e:	454d      	cmp	r5, r9
 800c690:	d908      	bls.n	800c6a4 <_scanf_i+0x180>
 800c692:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c696:	1e6f      	subs	r7, r5, #1
 800c698:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c69c:	4632      	mov	r2, r6
 800c69e:	4658      	mov	r0, fp
 800c6a0:	4798      	blx	r3
 800c6a2:	463d      	mov	r5, r7
 800c6a4:	454d      	cmp	r5, r9
 800c6a6:	d029      	beq.n	800c6fc <_scanf_i+0x1d8>
 800c6a8:	6822      	ldr	r2, [r4, #0]
 800c6aa:	f012 0210 	ands.w	r2, r2, #16
 800c6ae:	d113      	bne.n	800c6d8 <_scanf_i+0x1b4>
 800c6b0:	702a      	strb	r2, [r5, #0]
 800c6b2:	6863      	ldr	r3, [r4, #4]
 800c6b4:	4649      	mov	r1, r9
 800c6b6:	4658      	mov	r0, fp
 800c6b8:	9e00      	ldr	r6, [sp, #0]
 800c6ba:	47b0      	blx	r6
 800c6bc:	f8da 3000 	ldr.w	r3, [sl]
 800c6c0:	6821      	ldr	r1, [r4, #0]
 800c6c2:	1d1a      	adds	r2, r3, #4
 800c6c4:	f8ca 2000 	str.w	r2, [sl]
 800c6c8:	f011 0f20 	tst.w	r1, #32
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	d010      	beq.n	800c6f2 <_scanf_i+0x1ce>
 800c6d0:	6018      	str	r0, [r3, #0]
 800c6d2:	68e3      	ldr	r3, [r4, #12]
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	60e3      	str	r3, [r4, #12]
 800c6d8:	2000      	movs	r0, #0
 800c6da:	eba5 0509 	sub.w	r5, r5, r9
 800c6de:	44a8      	add	r8, r5
 800c6e0:	6925      	ldr	r5, [r4, #16]
 800c6e2:	4445      	add	r5, r8
 800c6e4:	6125      	str	r5, [r4, #16]
 800c6e6:	b007      	add	sp, #28
 800c6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ec:	f04f 0800 	mov.w	r8, #0
 800c6f0:	e7ca      	b.n	800c688 <_scanf_i+0x164>
 800c6f2:	07ca      	lsls	r2, r1, #31
 800c6f4:	bf4c      	ite	mi
 800c6f6:	8018      	strhmi	r0, [r3, #0]
 800c6f8:	6018      	strpl	r0, [r3, #0]
 800c6fa:	e7ea      	b.n	800c6d2 <_scanf_i+0x1ae>
 800c6fc:	2001      	movs	r0, #1
 800c6fe:	e7f2      	b.n	800c6e6 <_scanf_i+0x1c2>
 800c700:	0800e008 	.word	0x0800e008
 800c704:	0800b0e5 	.word	0x0800b0e5
 800c708:	0800c8ad 	.word	0x0800c8ad
 800c70c:	0800ee88 	.word	0x0800ee88

0800c710 <_sbrk_r>:
 800c710:	b538      	push	{r3, r4, r5, lr}
 800c712:	2300      	movs	r3, #0
 800c714:	4c05      	ldr	r4, [pc, #20]	; (800c72c <_sbrk_r+0x1c>)
 800c716:	4605      	mov	r5, r0
 800c718:	4608      	mov	r0, r1
 800c71a:	6023      	str	r3, [r4, #0]
 800c71c:	f7f6 fadc 	bl	8002cd8 <_sbrk>
 800c720:	1c43      	adds	r3, r0, #1
 800c722:	d102      	bne.n	800c72a <_sbrk_r+0x1a>
 800c724:	6823      	ldr	r3, [r4, #0]
 800c726:	b103      	cbz	r3, 800c72a <_sbrk_r+0x1a>
 800c728:	602b      	str	r3, [r5, #0]
 800c72a:	bd38      	pop	{r3, r4, r5, pc}
 800c72c:	20001c2c 	.word	0x20001c2c

0800c730 <__sccl>:
 800c730:	b570      	push	{r4, r5, r6, lr}
 800c732:	780b      	ldrb	r3, [r1, #0]
 800c734:	1e44      	subs	r4, r0, #1
 800c736:	2b5e      	cmp	r3, #94	; 0x5e
 800c738:	bf13      	iteet	ne
 800c73a:	1c4a      	addne	r2, r1, #1
 800c73c:	1c8a      	addeq	r2, r1, #2
 800c73e:	784b      	ldrbeq	r3, [r1, #1]
 800c740:	2100      	movne	r1, #0
 800c742:	bf08      	it	eq
 800c744:	2101      	moveq	r1, #1
 800c746:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800c74a:	f804 1f01 	strb.w	r1, [r4, #1]!
 800c74e:	42ac      	cmp	r4, r5
 800c750:	d1fb      	bne.n	800c74a <__sccl+0x1a>
 800c752:	b913      	cbnz	r3, 800c75a <__sccl+0x2a>
 800c754:	3a01      	subs	r2, #1
 800c756:	4610      	mov	r0, r2
 800c758:	bd70      	pop	{r4, r5, r6, pc}
 800c75a:	f081 0401 	eor.w	r4, r1, #1
 800c75e:	54c4      	strb	r4, [r0, r3]
 800c760:	1c51      	adds	r1, r2, #1
 800c762:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800c766:	1e4e      	subs	r6, r1, #1
 800c768:	2d2d      	cmp	r5, #45	; 0x2d
 800c76a:	460a      	mov	r2, r1
 800c76c:	d006      	beq.n	800c77c <__sccl+0x4c>
 800c76e:	2d5d      	cmp	r5, #93	; 0x5d
 800c770:	d0f1      	beq.n	800c756 <__sccl+0x26>
 800c772:	b90d      	cbnz	r5, 800c778 <__sccl+0x48>
 800c774:	4632      	mov	r2, r6
 800c776:	e7ee      	b.n	800c756 <__sccl+0x26>
 800c778:	462b      	mov	r3, r5
 800c77a:	e7f0      	b.n	800c75e <__sccl+0x2e>
 800c77c:	780e      	ldrb	r6, [r1, #0]
 800c77e:	2e5d      	cmp	r6, #93	; 0x5d
 800c780:	d0fa      	beq.n	800c778 <__sccl+0x48>
 800c782:	42b3      	cmp	r3, r6
 800c784:	dcf8      	bgt.n	800c778 <__sccl+0x48>
 800c786:	3301      	adds	r3, #1
 800c788:	429e      	cmp	r6, r3
 800c78a:	54c4      	strb	r4, [r0, r3]
 800c78c:	dcfb      	bgt.n	800c786 <__sccl+0x56>
 800c78e:	3102      	adds	r1, #2
 800c790:	e7e7      	b.n	800c762 <__sccl+0x32>

0800c792 <strncmp>:
 800c792:	b510      	push	{r4, lr}
 800c794:	b16a      	cbz	r2, 800c7b2 <strncmp+0x20>
 800c796:	3901      	subs	r1, #1
 800c798:	1884      	adds	r4, r0, r2
 800c79a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c79e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d103      	bne.n	800c7ae <strncmp+0x1c>
 800c7a6:	42a0      	cmp	r0, r4
 800c7a8:	d001      	beq.n	800c7ae <strncmp+0x1c>
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d1f5      	bne.n	800c79a <strncmp+0x8>
 800c7ae:	1a98      	subs	r0, r3, r2
 800c7b0:	bd10      	pop	{r4, pc}
 800c7b2:	4610      	mov	r0, r2
 800c7b4:	e7fc      	b.n	800c7b0 <strncmp+0x1e>

0800c7b6 <_strtoul_l.isra.0>:
 800c7b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7ba:	4680      	mov	r8, r0
 800c7bc:	4689      	mov	r9, r1
 800c7be:	4692      	mov	sl, r2
 800c7c0:	461e      	mov	r6, r3
 800c7c2:	460f      	mov	r7, r1
 800c7c4:	463d      	mov	r5, r7
 800c7c6:	9808      	ldr	r0, [sp, #32]
 800c7c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c7cc:	f7ff f818 	bl	800b800 <__locale_ctype_ptr_l>
 800c7d0:	4420      	add	r0, r4
 800c7d2:	7843      	ldrb	r3, [r0, #1]
 800c7d4:	f013 0308 	ands.w	r3, r3, #8
 800c7d8:	d130      	bne.n	800c83c <_strtoul_l.isra.0+0x86>
 800c7da:	2c2d      	cmp	r4, #45	; 0x2d
 800c7dc:	d130      	bne.n	800c840 <_strtoul_l.isra.0+0x8a>
 800c7de:	2101      	movs	r1, #1
 800c7e0:	787c      	ldrb	r4, [r7, #1]
 800c7e2:	1cbd      	adds	r5, r7, #2
 800c7e4:	2e00      	cmp	r6, #0
 800c7e6:	d05c      	beq.n	800c8a2 <_strtoul_l.isra.0+0xec>
 800c7e8:	2e10      	cmp	r6, #16
 800c7ea:	d109      	bne.n	800c800 <_strtoul_l.isra.0+0x4a>
 800c7ec:	2c30      	cmp	r4, #48	; 0x30
 800c7ee:	d107      	bne.n	800c800 <_strtoul_l.isra.0+0x4a>
 800c7f0:	782b      	ldrb	r3, [r5, #0]
 800c7f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c7f6:	2b58      	cmp	r3, #88	; 0x58
 800c7f8:	d14e      	bne.n	800c898 <_strtoul_l.isra.0+0xe2>
 800c7fa:	2610      	movs	r6, #16
 800c7fc:	786c      	ldrb	r4, [r5, #1]
 800c7fe:	3502      	adds	r5, #2
 800c800:	f04f 32ff 	mov.w	r2, #4294967295
 800c804:	fbb2 f2f6 	udiv	r2, r2, r6
 800c808:	2300      	movs	r3, #0
 800c80a:	fb06 fc02 	mul.w	ip, r6, r2
 800c80e:	4618      	mov	r0, r3
 800c810:	ea6f 0c0c 	mvn.w	ip, ip
 800c814:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c818:	2f09      	cmp	r7, #9
 800c81a:	d817      	bhi.n	800c84c <_strtoul_l.isra.0+0x96>
 800c81c:	463c      	mov	r4, r7
 800c81e:	42a6      	cmp	r6, r4
 800c820:	dd23      	ble.n	800c86a <_strtoul_l.isra.0+0xb4>
 800c822:	2b00      	cmp	r3, #0
 800c824:	db1e      	blt.n	800c864 <_strtoul_l.isra.0+0xae>
 800c826:	4282      	cmp	r2, r0
 800c828:	d31c      	bcc.n	800c864 <_strtoul_l.isra.0+0xae>
 800c82a:	d101      	bne.n	800c830 <_strtoul_l.isra.0+0x7a>
 800c82c:	45a4      	cmp	ip, r4
 800c82e:	db19      	blt.n	800c864 <_strtoul_l.isra.0+0xae>
 800c830:	2301      	movs	r3, #1
 800c832:	fb00 4006 	mla	r0, r0, r6, r4
 800c836:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c83a:	e7eb      	b.n	800c814 <_strtoul_l.isra.0+0x5e>
 800c83c:	462f      	mov	r7, r5
 800c83e:	e7c1      	b.n	800c7c4 <_strtoul_l.isra.0+0xe>
 800c840:	2c2b      	cmp	r4, #43	; 0x2b
 800c842:	bf04      	itt	eq
 800c844:	1cbd      	addeq	r5, r7, #2
 800c846:	787c      	ldrbeq	r4, [r7, #1]
 800c848:	4619      	mov	r1, r3
 800c84a:	e7cb      	b.n	800c7e4 <_strtoul_l.isra.0+0x2e>
 800c84c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c850:	2f19      	cmp	r7, #25
 800c852:	d801      	bhi.n	800c858 <_strtoul_l.isra.0+0xa2>
 800c854:	3c37      	subs	r4, #55	; 0x37
 800c856:	e7e2      	b.n	800c81e <_strtoul_l.isra.0+0x68>
 800c858:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c85c:	2f19      	cmp	r7, #25
 800c85e:	d804      	bhi.n	800c86a <_strtoul_l.isra.0+0xb4>
 800c860:	3c57      	subs	r4, #87	; 0x57
 800c862:	e7dc      	b.n	800c81e <_strtoul_l.isra.0+0x68>
 800c864:	f04f 33ff 	mov.w	r3, #4294967295
 800c868:	e7e5      	b.n	800c836 <_strtoul_l.isra.0+0x80>
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	da09      	bge.n	800c882 <_strtoul_l.isra.0+0xcc>
 800c86e:	2322      	movs	r3, #34	; 0x22
 800c870:	f04f 30ff 	mov.w	r0, #4294967295
 800c874:	f8c8 3000 	str.w	r3, [r8]
 800c878:	f1ba 0f00 	cmp.w	sl, #0
 800c87c:	d107      	bne.n	800c88e <_strtoul_l.isra.0+0xd8>
 800c87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c882:	b101      	cbz	r1, 800c886 <_strtoul_l.isra.0+0xd0>
 800c884:	4240      	negs	r0, r0
 800c886:	f1ba 0f00 	cmp.w	sl, #0
 800c88a:	d0f8      	beq.n	800c87e <_strtoul_l.isra.0+0xc8>
 800c88c:	b10b      	cbz	r3, 800c892 <_strtoul_l.isra.0+0xdc>
 800c88e:	f105 39ff 	add.w	r9, r5, #4294967295
 800c892:	f8ca 9000 	str.w	r9, [sl]
 800c896:	e7f2      	b.n	800c87e <_strtoul_l.isra.0+0xc8>
 800c898:	2430      	movs	r4, #48	; 0x30
 800c89a:	2e00      	cmp	r6, #0
 800c89c:	d1b0      	bne.n	800c800 <_strtoul_l.isra.0+0x4a>
 800c89e:	2608      	movs	r6, #8
 800c8a0:	e7ae      	b.n	800c800 <_strtoul_l.isra.0+0x4a>
 800c8a2:	2c30      	cmp	r4, #48	; 0x30
 800c8a4:	d0a4      	beq.n	800c7f0 <_strtoul_l.isra.0+0x3a>
 800c8a6:	260a      	movs	r6, #10
 800c8a8:	e7aa      	b.n	800c800 <_strtoul_l.isra.0+0x4a>
	...

0800c8ac <_strtoul_r>:
 800c8ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c8ae:	4c06      	ldr	r4, [pc, #24]	; (800c8c8 <_strtoul_r+0x1c>)
 800c8b0:	4d06      	ldr	r5, [pc, #24]	; (800c8cc <_strtoul_r+0x20>)
 800c8b2:	6824      	ldr	r4, [r4, #0]
 800c8b4:	6a24      	ldr	r4, [r4, #32]
 800c8b6:	2c00      	cmp	r4, #0
 800c8b8:	bf08      	it	eq
 800c8ba:	462c      	moveq	r4, r5
 800c8bc:	9400      	str	r4, [sp, #0]
 800c8be:	f7ff ff7a 	bl	800c7b6 <_strtoul_l.isra.0>
 800c8c2:	b003      	add	sp, #12
 800c8c4:	bd30      	pop	{r4, r5, pc}
 800c8c6:	bf00      	nop
 800c8c8:	200001b4 	.word	0x200001b4
 800c8cc:	20000218 	.word	0x20000218

0800c8d0 <__submore>:
 800c8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8d4:	460c      	mov	r4, r1
 800c8d6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c8d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8dc:	4299      	cmp	r1, r3
 800c8de:	d11b      	bne.n	800c918 <__submore+0x48>
 800c8e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c8e4:	f7ff fbb8 	bl	800c058 <_malloc_r>
 800c8e8:	b918      	cbnz	r0, 800c8f2 <__submore+0x22>
 800c8ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8f6:	63a3      	str	r3, [r4, #56]	; 0x38
 800c8f8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c8fc:	6360      	str	r0, [r4, #52]	; 0x34
 800c8fe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c902:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c906:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c90a:	7043      	strb	r3, [r0, #1]
 800c90c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c910:	7003      	strb	r3, [r0, #0]
 800c912:	6020      	str	r0, [r4, #0]
 800c914:	2000      	movs	r0, #0
 800c916:	e7ea      	b.n	800c8ee <__submore+0x1e>
 800c918:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c91a:	0077      	lsls	r7, r6, #1
 800c91c:	463a      	mov	r2, r7
 800c91e:	f000 f881 	bl	800ca24 <_realloc_r>
 800c922:	4605      	mov	r5, r0
 800c924:	2800      	cmp	r0, #0
 800c926:	d0e0      	beq.n	800c8ea <__submore+0x1a>
 800c928:	eb00 0806 	add.w	r8, r0, r6
 800c92c:	4601      	mov	r1, r0
 800c92e:	4632      	mov	r2, r6
 800c930:	4640      	mov	r0, r8
 800c932:	f7fd fcbe 	bl	800a2b2 <memcpy>
 800c936:	f8c4 8000 	str.w	r8, [r4]
 800c93a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c93e:	e7e9      	b.n	800c914 <__submore+0x44>

0800c940 <__ascii_wctomb>:
 800c940:	b149      	cbz	r1, 800c956 <__ascii_wctomb+0x16>
 800c942:	2aff      	cmp	r2, #255	; 0xff
 800c944:	bf8b      	itete	hi
 800c946:	238a      	movhi	r3, #138	; 0x8a
 800c948:	700a      	strbls	r2, [r1, #0]
 800c94a:	6003      	strhi	r3, [r0, #0]
 800c94c:	2001      	movls	r0, #1
 800c94e:	bf88      	it	hi
 800c950:	f04f 30ff 	movhi.w	r0, #4294967295
 800c954:	4770      	bx	lr
 800c956:	4608      	mov	r0, r1
 800c958:	4770      	bx	lr
	...

0800c95c <malloc>:
 800c95c:	4b02      	ldr	r3, [pc, #8]	; (800c968 <malloc+0xc>)
 800c95e:	4601      	mov	r1, r0
 800c960:	6818      	ldr	r0, [r3, #0]
 800c962:	f7ff bb79 	b.w	800c058 <_malloc_r>
 800c966:	bf00      	nop
 800c968:	200001b4 	.word	0x200001b4

0800c96c <memchr>:
 800c96c:	b510      	push	{r4, lr}
 800c96e:	b2c9      	uxtb	r1, r1
 800c970:	4402      	add	r2, r0
 800c972:	4290      	cmp	r0, r2
 800c974:	4603      	mov	r3, r0
 800c976:	d101      	bne.n	800c97c <memchr+0x10>
 800c978:	2300      	movs	r3, #0
 800c97a:	e003      	b.n	800c984 <memchr+0x18>
 800c97c:	781c      	ldrb	r4, [r3, #0]
 800c97e:	3001      	adds	r0, #1
 800c980:	428c      	cmp	r4, r1
 800c982:	d1f6      	bne.n	800c972 <memchr+0x6>
 800c984:	4618      	mov	r0, r3
 800c986:	bd10      	pop	{r4, pc}

0800c988 <__malloc_lock>:
 800c988:	4770      	bx	lr

0800c98a <__malloc_unlock>:
 800c98a:	4770      	bx	lr

0800c98c <_free_r>:
 800c98c:	b538      	push	{r3, r4, r5, lr}
 800c98e:	4605      	mov	r5, r0
 800c990:	2900      	cmp	r1, #0
 800c992:	d043      	beq.n	800ca1c <_free_r+0x90>
 800c994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c998:	1f0c      	subs	r4, r1, #4
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	bfb8      	it	lt
 800c99e:	18e4      	addlt	r4, r4, r3
 800c9a0:	f7ff fff2 	bl	800c988 <__malloc_lock>
 800c9a4:	4a1e      	ldr	r2, [pc, #120]	; (800ca20 <_free_r+0x94>)
 800c9a6:	6813      	ldr	r3, [r2, #0]
 800c9a8:	4610      	mov	r0, r2
 800c9aa:	b933      	cbnz	r3, 800c9ba <_free_r+0x2e>
 800c9ac:	6063      	str	r3, [r4, #4]
 800c9ae:	6014      	str	r4, [r2, #0]
 800c9b0:	4628      	mov	r0, r5
 800c9b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9b6:	f7ff bfe8 	b.w	800c98a <__malloc_unlock>
 800c9ba:	42a3      	cmp	r3, r4
 800c9bc:	d90b      	bls.n	800c9d6 <_free_r+0x4a>
 800c9be:	6821      	ldr	r1, [r4, #0]
 800c9c0:	1862      	adds	r2, r4, r1
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	bf01      	itttt	eq
 800c9c6:	681a      	ldreq	r2, [r3, #0]
 800c9c8:	685b      	ldreq	r3, [r3, #4]
 800c9ca:	1852      	addeq	r2, r2, r1
 800c9cc:	6022      	streq	r2, [r4, #0]
 800c9ce:	6063      	str	r3, [r4, #4]
 800c9d0:	6004      	str	r4, [r0, #0]
 800c9d2:	e7ed      	b.n	800c9b0 <_free_r+0x24>
 800c9d4:	4613      	mov	r3, r2
 800c9d6:	685a      	ldr	r2, [r3, #4]
 800c9d8:	b10a      	cbz	r2, 800c9de <_free_r+0x52>
 800c9da:	42a2      	cmp	r2, r4
 800c9dc:	d9fa      	bls.n	800c9d4 <_free_r+0x48>
 800c9de:	6819      	ldr	r1, [r3, #0]
 800c9e0:	1858      	adds	r0, r3, r1
 800c9e2:	42a0      	cmp	r0, r4
 800c9e4:	d10b      	bne.n	800c9fe <_free_r+0x72>
 800c9e6:	6820      	ldr	r0, [r4, #0]
 800c9e8:	4401      	add	r1, r0
 800c9ea:	1858      	adds	r0, r3, r1
 800c9ec:	4282      	cmp	r2, r0
 800c9ee:	6019      	str	r1, [r3, #0]
 800c9f0:	d1de      	bne.n	800c9b0 <_free_r+0x24>
 800c9f2:	6810      	ldr	r0, [r2, #0]
 800c9f4:	6852      	ldr	r2, [r2, #4]
 800c9f6:	4401      	add	r1, r0
 800c9f8:	6019      	str	r1, [r3, #0]
 800c9fa:	605a      	str	r2, [r3, #4]
 800c9fc:	e7d8      	b.n	800c9b0 <_free_r+0x24>
 800c9fe:	d902      	bls.n	800ca06 <_free_r+0x7a>
 800ca00:	230c      	movs	r3, #12
 800ca02:	602b      	str	r3, [r5, #0]
 800ca04:	e7d4      	b.n	800c9b0 <_free_r+0x24>
 800ca06:	6820      	ldr	r0, [r4, #0]
 800ca08:	1821      	adds	r1, r4, r0
 800ca0a:	428a      	cmp	r2, r1
 800ca0c:	bf01      	itttt	eq
 800ca0e:	6811      	ldreq	r1, [r2, #0]
 800ca10:	6852      	ldreq	r2, [r2, #4]
 800ca12:	1809      	addeq	r1, r1, r0
 800ca14:	6021      	streq	r1, [r4, #0]
 800ca16:	6062      	str	r2, [r4, #4]
 800ca18:	605c      	str	r4, [r3, #4]
 800ca1a:	e7c9      	b.n	800c9b0 <_free_r+0x24>
 800ca1c:	bd38      	pop	{r3, r4, r5, pc}
 800ca1e:	bf00      	nop
 800ca20:	200005e8 	.word	0x200005e8

0800ca24 <_realloc_r>:
 800ca24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca26:	4607      	mov	r7, r0
 800ca28:	4614      	mov	r4, r2
 800ca2a:	460e      	mov	r6, r1
 800ca2c:	b921      	cbnz	r1, 800ca38 <_realloc_r+0x14>
 800ca2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ca32:	4611      	mov	r1, r2
 800ca34:	f7ff bb10 	b.w	800c058 <_malloc_r>
 800ca38:	b922      	cbnz	r2, 800ca44 <_realloc_r+0x20>
 800ca3a:	f7ff ffa7 	bl	800c98c <_free_r>
 800ca3e:	4625      	mov	r5, r4
 800ca40:	4628      	mov	r0, r5
 800ca42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca44:	f000 f814 	bl	800ca70 <_malloc_usable_size_r>
 800ca48:	42a0      	cmp	r0, r4
 800ca4a:	d20f      	bcs.n	800ca6c <_realloc_r+0x48>
 800ca4c:	4621      	mov	r1, r4
 800ca4e:	4638      	mov	r0, r7
 800ca50:	f7ff fb02 	bl	800c058 <_malloc_r>
 800ca54:	4605      	mov	r5, r0
 800ca56:	2800      	cmp	r0, #0
 800ca58:	d0f2      	beq.n	800ca40 <_realloc_r+0x1c>
 800ca5a:	4631      	mov	r1, r6
 800ca5c:	4622      	mov	r2, r4
 800ca5e:	f7fd fc28 	bl	800a2b2 <memcpy>
 800ca62:	4631      	mov	r1, r6
 800ca64:	4638      	mov	r0, r7
 800ca66:	f7ff ff91 	bl	800c98c <_free_r>
 800ca6a:	e7e9      	b.n	800ca40 <_realloc_r+0x1c>
 800ca6c:	4635      	mov	r5, r6
 800ca6e:	e7e7      	b.n	800ca40 <_realloc_r+0x1c>

0800ca70 <_malloc_usable_size_r>:
 800ca70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca74:	1f18      	subs	r0, r3, #4
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	bfbc      	itt	lt
 800ca7a:	580b      	ldrlt	r3, [r1, r0]
 800ca7c:	18c0      	addlt	r0, r0, r3
 800ca7e:	4770      	bx	lr

0800ca80 <cos>:
 800ca80:	b530      	push	{r4, r5, lr}
 800ca82:	4a18      	ldr	r2, [pc, #96]	; (800cae4 <cos+0x64>)
 800ca84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	b087      	sub	sp, #28
 800ca8c:	dc04      	bgt.n	800ca98 <cos+0x18>
 800ca8e:	2200      	movs	r2, #0
 800ca90:	2300      	movs	r3, #0
 800ca92:	f000 fcbd 	bl	800d410 <__kernel_cos>
 800ca96:	e006      	b.n	800caa6 <cos+0x26>
 800ca98:	4a13      	ldr	r2, [pc, #76]	; (800cae8 <cos+0x68>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	dd05      	ble.n	800caaa <cos+0x2a>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	460b      	mov	r3, r1
 800caa2:	f7f3 fb61 	bl	8000168 <__aeabi_dsub>
 800caa6:	b007      	add	sp, #28
 800caa8:	bd30      	pop	{r4, r5, pc}
 800caaa:	aa02      	add	r2, sp, #8
 800caac:	f000 fa14 	bl	800ced8 <__ieee754_rem_pio2>
 800cab0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cab4:	f000 0403 	and.w	r4, r0, #3
 800cab8:	2c01      	cmp	r4, #1
 800caba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cabe:	d008      	beq.n	800cad2 <cos+0x52>
 800cac0:	2c02      	cmp	r4, #2
 800cac2:	d00c      	beq.n	800cade <cos+0x5e>
 800cac4:	2c00      	cmp	r4, #0
 800cac6:	d0e4      	beq.n	800ca92 <cos+0x12>
 800cac8:	2401      	movs	r4, #1
 800caca:	9400      	str	r4, [sp, #0]
 800cacc:	f001 f8a8 	bl	800dc20 <__kernel_sin>
 800cad0:	e7e9      	b.n	800caa6 <cos+0x26>
 800cad2:	9400      	str	r4, [sp, #0]
 800cad4:	f001 f8a4 	bl	800dc20 <__kernel_sin>
 800cad8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800cadc:	e7e3      	b.n	800caa6 <cos+0x26>
 800cade:	f000 fc97 	bl	800d410 <__kernel_cos>
 800cae2:	e7f9      	b.n	800cad8 <cos+0x58>
 800cae4:	3fe921fb 	.word	0x3fe921fb
 800cae8:	7fefffff 	.word	0x7fefffff

0800caec <sin>:
 800caec:	b530      	push	{r4, r5, lr}
 800caee:	4a1a      	ldr	r2, [pc, #104]	; (800cb58 <sin+0x6c>)
 800caf0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800caf4:	4293      	cmp	r3, r2
 800caf6:	b087      	sub	sp, #28
 800caf8:	dc06      	bgt.n	800cb08 <sin+0x1c>
 800cafa:	2300      	movs	r3, #0
 800cafc:	2200      	movs	r2, #0
 800cafe:	9300      	str	r3, [sp, #0]
 800cb00:	2300      	movs	r3, #0
 800cb02:	f001 f88d 	bl	800dc20 <__kernel_sin>
 800cb06:	e006      	b.n	800cb16 <sin+0x2a>
 800cb08:	4a14      	ldr	r2, [pc, #80]	; (800cb5c <sin+0x70>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	dd05      	ble.n	800cb1a <sin+0x2e>
 800cb0e:	4602      	mov	r2, r0
 800cb10:	460b      	mov	r3, r1
 800cb12:	f7f3 fb29 	bl	8000168 <__aeabi_dsub>
 800cb16:	b007      	add	sp, #28
 800cb18:	bd30      	pop	{r4, r5, pc}
 800cb1a:	aa02      	add	r2, sp, #8
 800cb1c:	f000 f9dc 	bl	800ced8 <__ieee754_rem_pio2>
 800cb20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb24:	f000 0403 	and.w	r4, r0, #3
 800cb28:	2c01      	cmp	r4, #1
 800cb2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb2e:	d005      	beq.n	800cb3c <sin+0x50>
 800cb30:	2c02      	cmp	r4, #2
 800cb32:	d006      	beq.n	800cb42 <sin+0x56>
 800cb34:	b964      	cbnz	r4, 800cb50 <sin+0x64>
 800cb36:	2401      	movs	r4, #1
 800cb38:	9400      	str	r4, [sp, #0]
 800cb3a:	e7e2      	b.n	800cb02 <sin+0x16>
 800cb3c:	f000 fc68 	bl	800d410 <__kernel_cos>
 800cb40:	e7e9      	b.n	800cb16 <sin+0x2a>
 800cb42:	2401      	movs	r4, #1
 800cb44:	9400      	str	r4, [sp, #0]
 800cb46:	f001 f86b 	bl	800dc20 <__kernel_sin>
 800cb4a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800cb4e:	e7e2      	b.n	800cb16 <sin+0x2a>
 800cb50:	f000 fc5e 	bl	800d410 <__kernel_cos>
 800cb54:	e7f9      	b.n	800cb4a <sin+0x5e>
 800cb56:	bf00      	nop
 800cb58:	3fe921fb 	.word	0x3fe921fb
 800cb5c:	7fefffff 	.word	0x7fefffff

0800cb60 <fmod>:
 800cb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb64:	b08b      	sub	sp, #44	; 0x2c
 800cb66:	461f      	mov	r7, r3
 800cb68:	4604      	mov	r4, r0
 800cb6a:	460d      	mov	r5, r1
 800cb6c:	4616      	mov	r6, r2
 800cb6e:	f000 f8a7 	bl	800ccc0 <__ieee754_fmod>
 800cb72:	4b27      	ldr	r3, [pc, #156]	; (800cc10 <fmod+0xb0>)
 800cb74:	4680      	mov	r8, r0
 800cb76:	f993 a000 	ldrsb.w	sl, [r3]
 800cb7a:	4689      	mov	r9, r1
 800cb7c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800cb80:	d030      	beq.n	800cbe4 <fmod+0x84>
 800cb82:	4632      	mov	r2, r6
 800cb84:	463b      	mov	r3, r7
 800cb86:	4630      	mov	r0, r6
 800cb88:	4639      	mov	r1, r7
 800cb8a:	f7f3 ff3f 	bl	8000a0c <__aeabi_dcmpun>
 800cb8e:	bb48      	cbnz	r0, 800cbe4 <fmod+0x84>
 800cb90:	4622      	mov	r2, r4
 800cb92:	462b      	mov	r3, r5
 800cb94:	4620      	mov	r0, r4
 800cb96:	4629      	mov	r1, r5
 800cb98:	f7f3 ff38 	bl	8000a0c <__aeabi_dcmpun>
 800cb9c:	4683      	mov	fp, r0
 800cb9e:	bb08      	cbnz	r0, 800cbe4 <fmod+0x84>
 800cba0:	2200      	movs	r2, #0
 800cba2:	2300      	movs	r3, #0
 800cba4:	4630      	mov	r0, r6
 800cba6:	4639      	mov	r1, r7
 800cba8:	f7f3 fefe 	bl	80009a8 <__aeabi_dcmpeq>
 800cbac:	b1d0      	cbz	r0, 800cbe4 <fmod+0x84>
 800cbae:	2301      	movs	r3, #1
 800cbb0:	9300      	str	r3, [sp, #0]
 800cbb2:	4b18      	ldr	r3, [pc, #96]	; (800cc14 <fmod+0xb4>)
 800cbb4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800cbb8:	9301      	str	r3, [sp, #4]
 800cbba:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800cbbe:	f8cd b020 	str.w	fp, [sp, #32]
 800cbc2:	f1ba 0f00 	cmp.w	sl, #0
 800cbc6:	d112      	bne.n	800cbee <fmod+0x8e>
 800cbc8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800cbcc:	4668      	mov	r0, sp
 800cbce:	f001 f967 	bl	800dea0 <matherr>
 800cbd2:	b1b8      	cbz	r0, 800cc04 <fmod+0xa4>
 800cbd4:	9b08      	ldr	r3, [sp, #32]
 800cbd6:	b11b      	cbz	r3, 800cbe0 <fmod+0x80>
 800cbd8:	f7fd fb18 	bl	800a20c <__errno>
 800cbdc:	9b08      	ldr	r3, [sp, #32]
 800cbde:	6003      	str	r3, [r0, #0]
 800cbe0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800cbe4:	4640      	mov	r0, r8
 800cbe6:	4649      	mov	r1, r9
 800cbe8:	b00b      	add	sp, #44	; 0x2c
 800cbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbee:	2200      	movs	r2, #0
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	4610      	mov	r0, r2
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	f7f3 fd99 	bl	800072c <__aeabi_ddiv>
 800cbfa:	f1ba 0f02 	cmp.w	sl, #2
 800cbfe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cc02:	d1e3      	bne.n	800cbcc <fmod+0x6c>
 800cc04:	f7fd fb02 	bl	800a20c <__errno>
 800cc08:	2321      	movs	r3, #33	; 0x21
 800cc0a:	6003      	str	r3, [r0, #0]
 800cc0c:	e7e2      	b.n	800cbd4 <fmod+0x74>
 800cc0e:	bf00      	nop
 800cc10:	20000384 	.word	0x20000384
 800cc14:	0800eff4 	.word	0x0800eff4

0800cc18 <sqrt>:
 800cc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc1c:	b08b      	sub	sp, #44	; 0x2c
 800cc1e:	4604      	mov	r4, r0
 800cc20:	460d      	mov	r5, r1
 800cc22:	f000 fb49 	bl	800d2b8 <__ieee754_sqrt>
 800cc26:	4b24      	ldr	r3, [pc, #144]	; (800ccb8 <sqrt+0xa0>)
 800cc28:	4680      	mov	r8, r0
 800cc2a:	f993 a000 	ldrsb.w	sl, [r3]
 800cc2e:	4689      	mov	r9, r1
 800cc30:	f1ba 3fff 	cmp.w	sl, #4294967295
 800cc34:	d02b      	beq.n	800cc8e <sqrt+0x76>
 800cc36:	4622      	mov	r2, r4
 800cc38:	462b      	mov	r3, r5
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	4629      	mov	r1, r5
 800cc3e:	f7f3 fee5 	bl	8000a0c <__aeabi_dcmpun>
 800cc42:	4683      	mov	fp, r0
 800cc44:	bb18      	cbnz	r0, 800cc8e <sqrt+0x76>
 800cc46:	2600      	movs	r6, #0
 800cc48:	2700      	movs	r7, #0
 800cc4a:	4632      	mov	r2, r6
 800cc4c:	463b      	mov	r3, r7
 800cc4e:	4620      	mov	r0, r4
 800cc50:	4629      	mov	r1, r5
 800cc52:	f7f3 feb3 	bl	80009bc <__aeabi_dcmplt>
 800cc56:	b1d0      	cbz	r0, 800cc8e <sqrt+0x76>
 800cc58:	2301      	movs	r3, #1
 800cc5a:	9300      	str	r3, [sp, #0]
 800cc5c:	4b17      	ldr	r3, [pc, #92]	; (800ccbc <sqrt+0xa4>)
 800cc5e:	f8cd b020 	str.w	fp, [sp, #32]
 800cc62:	9301      	str	r3, [sp, #4]
 800cc64:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800cc68:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800cc6c:	f1ba 0f00 	cmp.w	sl, #0
 800cc70:	d112      	bne.n	800cc98 <sqrt+0x80>
 800cc72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cc76:	4668      	mov	r0, sp
 800cc78:	f001 f912 	bl	800dea0 <matherr>
 800cc7c:	b1b8      	cbz	r0, 800ccae <sqrt+0x96>
 800cc7e:	9b08      	ldr	r3, [sp, #32]
 800cc80:	b11b      	cbz	r3, 800cc8a <sqrt+0x72>
 800cc82:	f7fd fac3 	bl	800a20c <__errno>
 800cc86:	9b08      	ldr	r3, [sp, #32]
 800cc88:	6003      	str	r3, [r0, #0]
 800cc8a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800cc8e:	4640      	mov	r0, r8
 800cc90:	4649      	mov	r1, r9
 800cc92:	b00b      	add	sp, #44	; 0x2c
 800cc94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc98:	4632      	mov	r2, r6
 800cc9a:	463b      	mov	r3, r7
 800cc9c:	4630      	mov	r0, r6
 800cc9e:	4639      	mov	r1, r7
 800cca0:	f7f3 fd44 	bl	800072c <__aeabi_ddiv>
 800cca4:	f1ba 0f02 	cmp.w	sl, #2
 800cca8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ccac:	d1e3      	bne.n	800cc76 <sqrt+0x5e>
 800ccae:	f7fd faad 	bl	800a20c <__errno>
 800ccb2:	2321      	movs	r3, #33	; 0x21
 800ccb4:	6003      	str	r3, [r0, #0]
 800ccb6:	e7e2      	b.n	800cc7e <sqrt+0x66>
 800ccb8:	20000384 	.word	0x20000384
 800ccbc:	0800eff9 	.word	0x0800eff9

0800ccc0 <__ieee754_fmod>:
 800ccc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccc4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800ccc8:	4682      	mov	sl, r0
 800ccca:	ea54 0002 	orrs.w	r0, r4, r2
 800ccce:	461e      	mov	r6, r3
 800ccd0:	4694      	mov	ip, r2
 800ccd2:	4696      	mov	lr, r2
 800ccd4:	d00c      	beq.n	800ccf0 <__ieee754_fmod+0x30>
 800ccd6:	4d78      	ldr	r5, [pc, #480]	; (800ceb8 <__ieee754_fmod+0x1f8>)
 800ccd8:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800ccdc:	45a8      	cmp	r8, r5
 800ccde:	4689      	mov	r9, r1
 800cce0:	dc06      	bgt.n	800ccf0 <__ieee754_fmod+0x30>
 800cce2:	4255      	negs	r5, r2
 800cce4:	4315      	orrs	r5, r2
 800cce6:	4f75      	ldr	r7, [pc, #468]	; (800cebc <__ieee754_fmod+0x1fc>)
 800cce8:	ea44 75d5 	orr.w	r5, r4, r5, lsr #31
 800ccec:	42bd      	cmp	r5, r7
 800ccee:	d908      	bls.n	800cd02 <__ieee754_fmod+0x42>
 800ccf0:	4650      	mov	r0, sl
 800ccf2:	f7f3 fbf1 	bl	80004d8 <__aeabi_dmul>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	f7f3 fd17 	bl	800072c <__aeabi_ddiv>
 800ccfe:	4682      	mov	sl, r0
 800cd00:	e00f      	b.n	800cd22 <__ieee754_fmod+0x62>
 800cd02:	45a0      	cmp	r8, r4
 800cd04:	4652      	mov	r2, sl
 800cd06:	4657      	mov	r7, sl
 800cd08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800cd0c:	dc0c      	bgt.n	800cd28 <__ieee754_fmod+0x68>
 800cd0e:	db08      	blt.n	800cd22 <__ieee754_fmod+0x62>
 800cd10:	45e2      	cmp	sl, ip
 800cd12:	d306      	bcc.n	800cd22 <__ieee754_fmod+0x62>
 800cd14:	d108      	bne.n	800cd28 <__ieee754_fmod+0x68>
 800cd16:	496a      	ldr	r1, [pc, #424]	; (800cec0 <__ieee754_fmod+0x200>)
 800cd18:	0fed      	lsrs	r5, r5, #31
 800cd1a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800cd1e:	e9d5 a100 	ldrd	sl, r1, [r5]
 800cd22:	4650      	mov	r0, sl
 800cd24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd28:	4b66      	ldr	r3, [pc, #408]	; (800cec4 <__ieee754_fmod+0x204>)
 800cd2a:	4598      	cmp	r8, r3
 800cd2c:	dc48      	bgt.n	800cdc0 <__ieee754_fmod+0x100>
 800cd2e:	f1b8 0f00 	cmp.w	r8, #0
 800cd32:	d13c      	bne.n	800cdae <__ieee754_fmod+0xee>
 800cd34:	4611      	mov	r1, r2
 800cd36:	4864      	ldr	r0, [pc, #400]	; (800cec8 <__ieee754_fmod+0x208>)
 800cd38:	2900      	cmp	r1, #0
 800cd3a:	dc35      	bgt.n	800cda8 <__ieee754_fmod+0xe8>
 800cd3c:	429c      	cmp	r4, r3
 800cd3e:	dc4f      	bgt.n	800cde0 <__ieee754_fmod+0x120>
 800cd40:	2c00      	cmp	r4, #0
 800cd42:	d145      	bne.n	800cdd0 <__ieee754_fmod+0x110>
 800cd44:	4661      	mov	r1, ip
 800cd46:	4b60      	ldr	r3, [pc, #384]	; (800cec8 <__ieee754_fmod+0x208>)
 800cd48:	2900      	cmp	r1, #0
 800cd4a:	dc3e      	bgt.n	800cdca <__ieee754_fmod+0x10a>
 800cd4c:	495f      	ldr	r1, [pc, #380]	; (800cecc <__ieee754_fmod+0x20c>)
 800cd4e:	4288      	cmp	r0, r1
 800cd50:	db4a      	blt.n	800cde8 <__ieee754_fmod+0x128>
 800cd52:	f3c9 0113 	ubfx	r1, r9, #0, #20
 800cd56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800cd5a:	4a5c      	ldr	r2, [pc, #368]	; (800cecc <__ieee754_fmod+0x20c>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	db57      	blt.n	800ce10 <__ieee754_fmod+0x150>
 800cd60:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800cd64:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800cd68:	1ac0      	subs	r0, r0, r3
 800cd6a:	1b8a      	subs	r2, r1, r6
 800cd6c:	eba7 040e 	sub.w	r4, r7, lr
 800cd70:	2800      	cmp	r0, #0
 800cd72:	d163      	bne.n	800ce3c <__ieee754_fmod+0x17c>
 800cd74:	4577      	cmp	r7, lr
 800cd76:	bf38      	it	cc
 800cd78:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800cd7c:	2a00      	cmp	r2, #0
 800cd7e:	bfbc      	itt	lt
 800cd80:	463c      	movlt	r4, r7
 800cd82:	460a      	movlt	r2, r1
 800cd84:	ea52 0104 	orrs.w	r1, r2, r4
 800cd88:	d0c5      	beq.n	800cd16 <__ieee754_fmod+0x56>
 800cd8a:	494e      	ldr	r1, [pc, #312]	; (800cec4 <__ieee754_fmod+0x204>)
 800cd8c:	428a      	cmp	r2, r1
 800cd8e:	dd6a      	ble.n	800ce66 <__ieee754_fmod+0x1a6>
 800cd90:	494e      	ldr	r1, [pc, #312]	; (800cecc <__ieee754_fmod+0x20c>)
 800cd92:	428b      	cmp	r3, r1
 800cd94:	db6d      	blt.n	800ce72 <__ieee754_fmod+0x1b2>
 800cd96:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 800cd9a:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800cd9e:	4315      	orrs	r5, r2
 800cda0:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
 800cda4:	4620      	mov	r0, r4
 800cda6:	e7aa      	b.n	800ccfe <__ieee754_fmod+0x3e>
 800cda8:	3801      	subs	r0, #1
 800cdaa:	0049      	lsls	r1, r1, #1
 800cdac:	e7c4      	b.n	800cd38 <__ieee754_fmod+0x78>
 800cdae:	4847      	ldr	r0, [pc, #284]	; (800cecc <__ieee754_fmod+0x20c>)
 800cdb0:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800cdb4:	0049      	lsls	r1, r1, #1
 800cdb6:	2900      	cmp	r1, #0
 800cdb8:	f100 30ff 	add.w	r0, r0, #4294967295
 800cdbc:	dcfa      	bgt.n	800cdb4 <__ieee754_fmod+0xf4>
 800cdbe:	e7bd      	b.n	800cd3c <__ieee754_fmod+0x7c>
 800cdc0:	ea4f 5028 	mov.w	r0, r8, asr #20
 800cdc4:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800cdc8:	e7b8      	b.n	800cd3c <__ieee754_fmod+0x7c>
 800cdca:	3b01      	subs	r3, #1
 800cdcc:	0049      	lsls	r1, r1, #1
 800cdce:	e7bb      	b.n	800cd48 <__ieee754_fmod+0x88>
 800cdd0:	4b3e      	ldr	r3, [pc, #248]	; (800cecc <__ieee754_fmod+0x20c>)
 800cdd2:	02e1      	lsls	r1, r4, #11
 800cdd4:	0049      	lsls	r1, r1, #1
 800cdd6:	2900      	cmp	r1, #0
 800cdd8:	f103 33ff 	add.w	r3, r3, #4294967295
 800cddc:	dcfa      	bgt.n	800cdd4 <__ieee754_fmod+0x114>
 800cdde:	e7b5      	b.n	800cd4c <__ieee754_fmod+0x8c>
 800cde0:	1523      	asrs	r3, r4, #20
 800cde2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cde6:	e7b1      	b.n	800cd4c <__ieee754_fmod+0x8c>
 800cde8:	1a0f      	subs	r7, r1, r0
 800cdea:	2f1f      	cmp	r7, #31
 800cdec:	dc0a      	bgt.n	800ce04 <__ieee754_fmod+0x144>
 800cdee:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 800cdf2:	fa08 f807 	lsl.w	r8, r8, r7
 800cdf6:	fa22 f101 	lsr.w	r1, r2, r1
 800cdfa:	ea41 0108 	orr.w	r1, r1, r8
 800cdfe:	fa02 f707 	lsl.w	r7, r2, r7
 800ce02:	e7aa      	b.n	800cd5a <__ieee754_fmod+0x9a>
 800ce04:	4932      	ldr	r1, [pc, #200]	; (800ced0 <__ieee754_fmod+0x210>)
 800ce06:	2700      	movs	r7, #0
 800ce08:	1a09      	subs	r1, r1, r0
 800ce0a:	fa02 f101 	lsl.w	r1, r2, r1
 800ce0e:	e7a4      	b.n	800cd5a <__ieee754_fmod+0x9a>
 800ce10:	eba2 0e03 	sub.w	lr, r2, r3
 800ce14:	f1be 0f1f 	cmp.w	lr, #31
 800ce18:	dc09      	bgt.n	800ce2e <__ieee754_fmod+0x16e>
 800ce1a:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 800ce1e:	fa04 f40e 	lsl.w	r4, r4, lr
 800ce22:	fa2c f606 	lsr.w	r6, ip, r6
 800ce26:	4326      	orrs	r6, r4
 800ce28:	fa0c fe0e 	lsl.w	lr, ip, lr
 800ce2c:	e79c      	b.n	800cd68 <__ieee754_fmod+0xa8>
 800ce2e:	4e28      	ldr	r6, [pc, #160]	; (800ced0 <__ieee754_fmod+0x210>)
 800ce30:	f04f 0e00 	mov.w	lr, #0
 800ce34:	1af6      	subs	r6, r6, r3
 800ce36:	fa0c f606 	lsl.w	r6, ip, r6
 800ce3a:	e795      	b.n	800cd68 <__ieee754_fmod+0xa8>
 800ce3c:	4577      	cmp	r7, lr
 800ce3e:	bf38      	it	cc
 800ce40:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800ce44:	2a00      	cmp	r2, #0
 800ce46:	da05      	bge.n	800ce54 <__ieee754_fmod+0x194>
 800ce48:	0ffa      	lsrs	r2, r7, #31
 800ce4a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ce4e:	007f      	lsls	r7, r7, #1
 800ce50:	3801      	subs	r0, #1
 800ce52:	e78a      	b.n	800cd6a <__ieee754_fmod+0xaa>
 800ce54:	ea52 0104 	orrs.w	r1, r2, r4
 800ce58:	f43f af5d 	beq.w	800cd16 <__ieee754_fmod+0x56>
 800ce5c:	0fe1      	lsrs	r1, r4, #31
 800ce5e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800ce62:	0067      	lsls	r7, r4, #1
 800ce64:	e7f4      	b.n	800ce50 <__ieee754_fmod+0x190>
 800ce66:	0fe0      	lsrs	r0, r4, #31
 800ce68:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800ce6c:	0064      	lsls	r4, r4, #1
 800ce6e:	3b01      	subs	r3, #1
 800ce70:	e78c      	b.n	800cd8c <__ieee754_fmod+0xcc>
 800ce72:	1ac9      	subs	r1, r1, r3
 800ce74:	2914      	cmp	r1, #20
 800ce76:	dc0a      	bgt.n	800ce8e <__ieee754_fmod+0x1ce>
 800ce78:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800ce7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ce80:	40cc      	lsrs	r4, r1
 800ce82:	4323      	orrs	r3, r4
 800ce84:	410a      	asrs	r2, r1
 800ce86:	ea42 0105 	orr.w	r1, r2, r5
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	e737      	b.n	800ccfe <__ieee754_fmod+0x3e>
 800ce8e:	291f      	cmp	r1, #31
 800ce90:	dc07      	bgt.n	800cea2 <__ieee754_fmod+0x1e2>
 800ce92:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800ce96:	40cc      	lsrs	r4, r1
 800ce98:	fa02 f303 	lsl.w	r3, r2, r3
 800ce9c:	4323      	orrs	r3, r4
 800ce9e:	462a      	mov	r2, r5
 800cea0:	e7f1      	b.n	800ce86 <__ieee754_fmod+0x1c6>
 800cea2:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800cea6:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800ceaa:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800ceae:	33e2      	adds	r3, #226	; 0xe2
 800ceb0:	fa42 f303 	asr.w	r3, r2, r3
 800ceb4:	e7f3      	b.n	800ce9e <__ieee754_fmod+0x1de>
 800ceb6:	bf00      	nop
 800ceb8:	7fefffff 	.word	0x7fefffff
 800cebc:	7ff00000 	.word	0x7ff00000
 800cec0:	0800f000 	.word	0x0800f000
 800cec4:	000fffff 	.word	0x000fffff
 800cec8:	fffffbed 	.word	0xfffffbed
 800cecc:	fffffc02 	.word	0xfffffc02
 800ced0:	fffffbe2 	.word	0xfffffbe2
 800ced4:	00000000 	.word	0x00000000

0800ced8 <__ieee754_rem_pio2>:
 800ced8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cedc:	4614      	mov	r4, r2
 800cede:	4ac2      	ldr	r2, [pc, #776]	; (800d1e8 <__ieee754_rem_pio2+0x310>)
 800cee0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800cee4:	4592      	cmp	sl, r2
 800cee6:	b08d      	sub	sp, #52	; 0x34
 800cee8:	468b      	mov	fp, r1
 800ceea:	dc07      	bgt.n	800cefc <__ieee754_rem_pio2+0x24>
 800ceec:	2200      	movs	r2, #0
 800ceee:	2300      	movs	r3, #0
 800cef0:	e9c4 0100 	strd	r0, r1, [r4]
 800cef4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800cef8:	2500      	movs	r5, #0
 800cefa:	e023      	b.n	800cf44 <__ieee754_rem_pio2+0x6c>
 800cefc:	4abb      	ldr	r2, [pc, #748]	; (800d1ec <__ieee754_rem_pio2+0x314>)
 800cefe:	4592      	cmp	sl, r2
 800cf00:	dc71      	bgt.n	800cfe6 <__ieee754_rem_pio2+0x10e>
 800cf02:	a3ab      	add	r3, pc, #684	; (adr r3, 800d1b0 <__ieee754_rem_pio2+0x2d8>)
 800cf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf08:	2900      	cmp	r1, #0
 800cf0a:	4db9      	ldr	r5, [pc, #740]	; (800d1f0 <__ieee754_rem_pio2+0x318>)
 800cf0c:	dd36      	ble.n	800cf7c <__ieee754_rem_pio2+0xa4>
 800cf0e:	f7f3 f92b 	bl	8000168 <__aeabi_dsub>
 800cf12:	45aa      	cmp	sl, r5
 800cf14:	4606      	mov	r6, r0
 800cf16:	460f      	mov	r7, r1
 800cf18:	d018      	beq.n	800cf4c <__ieee754_rem_pio2+0x74>
 800cf1a:	a3a7      	add	r3, pc, #668	; (adr r3, 800d1b8 <__ieee754_rem_pio2+0x2e0>)
 800cf1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf20:	f7f3 f922 	bl	8000168 <__aeabi_dsub>
 800cf24:	4602      	mov	r2, r0
 800cf26:	460b      	mov	r3, r1
 800cf28:	4630      	mov	r0, r6
 800cf2a:	e9c4 2300 	strd	r2, r3, [r4]
 800cf2e:	4639      	mov	r1, r7
 800cf30:	f7f3 f91a 	bl	8000168 <__aeabi_dsub>
 800cf34:	a3a0      	add	r3, pc, #640	; (adr r3, 800d1b8 <__ieee754_rem_pio2+0x2e0>)
 800cf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf3a:	f7f3 f915 	bl	8000168 <__aeabi_dsub>
 800cf3e:	2501      	movs	r5, #1
 800cf40:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cf44:	4628      	mov	r0, r5
 800cf46:	b00d      	add	sp, #52	; 0x34
 800cf48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf4c:	a39c      	add	r3, pc, #624	; (adr r3, 800d1c0 <__ieee754_rem_pio2+0x2e8>)
 800cf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf52:	f7f3 f909 	bl	8000168 <__aeabi_dsub>
 800cf56:	a39c      	add	r3, pc, #624	; (adr r3, 800d1c8 <__ieee754_rem_pio2+0x2f0>)
 800cf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5c:	4606      	mov	r6, r0
 800cf5e:	460f      	mov	r7, r1
 800cf60:	f7f3 f902 	bl	8000168 <__aeabi_dsub>
 800cf64:	4602      	mov	r2, r0
 800cf66:	460b      	mov	r3, r1
 800cf68:	4630      	mov	r0, r6
 800cf6a:	e9c4 2300 	strd	r2, r3, [r4]
 800cf6e:	4639      	mov	r1, r7
 800cf70:	f7f3 f8fa 	bl	8000168 <__aeabi_dsub>
 800cf74:	a394      	add	r3, pc, #592	; (adr r3, 800d1c8 <__ieee754_rem_pio2+0x2f0>)
 800cf76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf7a:	e7de      	b.n	800cf3a <__ieee754_rem_pio2+0x62>
 800cf7c:	f7f3 f8f6 	bl	800016c <__adddf3>
 800cf80:	45aa      	cmp	sl, r5
 800cf82:	4606      	mov	r6, r0
 800cf84:	460f      	mov	r7, r1
 800cf86:	d016      	beq.n	800cfb6 <__ieee754_rem_pio2+0xde>
 800cf88:	a38b      	add	r3, pc, #556	; (adr r3, 800d1b8 <__ieee754_rem_pio2+0x2e0>)
 800cf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8e:	f7f3 f8ed 	bl	800016c <__adddf3>
 800cf92:	4602      	mov	r2, r0
 800cf94:	460b      	mov	r3, r1
 800cf96:	4630      	mov	r0, r6
 800cf98:	e9c4 2300 	strd	r2, r3, [r4]
 800cf9c:	4639      	mov	r1, r7
 800cf9e:	f7f3 f8e3 	bl	8000168 <__aeabi_dsub>
 800cfa2:	a385      	add	r3, pc, #532	; (adr r3, 800d1b8 <__ieee754_rem_pio2+0x2e0>)
 800cfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa8:	f7f3 f8e0 	bl	800016c <__adddf3>
 800cfac:	f04f 35ff 	mov.w	r5, #4294967295
 800cfb0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cfb4:	e7c6      	b.n	800cf44 <__ieee754_rem_pio2+0x6c>
 800cfb6:	a382      	add	r3, pc, #520	; (adr r3, 800d1c0 <__ieee754_rem_pio2+0x2e8>)
 800cfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfbc:	f7f3 f8d6 	bl	800016c <__adddf3>
 800cfc0:	a381      	add	r3, pc, #516	; (adr r3, 800d1c8 <__ieee754_rem_pio2+0x2f0>)
 800cfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc6:	4606      	mov	r6, r0
 800cfc8:	460f      	mov	r7, r1
 800cfca:	f7f3 f8cf 	bl	800016c <__adddf3>
 800cfce:	4602      	mov	r2, r0
 800cfd0:	460b      	mov	r3, r1
 800cfd2:	4630      	mov	r0, r6
 800cfd4:	e9c4 2300 	strd	r2, r3, [r4]
 800cfd8:	4639      	mov	r1, r7
 800cfda:	f7f3 f8c5 	bl	8000168 <__aeabi_dsub>
 800cfde:	a37a      	add	r3, pc, #488	; (adr r3, 800d1c8 <__ieee754_rem_pio2+0x2f0>)
 800cfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe4:	e7e0      	b.n	800cfa8 <__ieee754_rem_pio2+0xd0>
 800cfe6:	4a83      	ldr	r2, [pc, #524]	; (800d1f4 <__ieee754_rem_pio2+0x31c>)
 800cfe8:	4592      	cmp	sl, r2
 800cfea:	f300 80d2 	bgt.w	800d192 <__ieee754_rem_pio2+0x2ba>
 800cfee:	f000 fecd 	bl	800dd8c <fabs>
 800cff2:	a377      	add	r3, pc, #476	; (adr r3, 800d1d0 <__ieee754_rem_pio2+0x2f8>)
 800cff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff8:	4606      	mov	r6, r0
 800cffa:	460f      	mov	r7, r1
 800cffc:	f7f3 fa6c 	bl	80004d8 <__aeabi_dmul>
 800d000:	2200      	movs	r2, #0
 800d002:	4b7d      	ldr	r3, [pc, #500]	; (800d1f8 <__ieee754_rem_pio2+0x320>)
 800d004:	f7f3 f8b2 	bl	800016c <__adddf3>
 800d008:	f7f3 fd16 	bl	8000a38 <__aeabi_d2iz>
 800d00c:	4605      	mov	r5, r0
 800d00e:	f7f3 f9f9 	bl	8000404 <__aeabi_i2d>
 800d012:	a367      	add	r3, pc, #412	; (adr r3, 800d1b0 <__ieee754_rem_pio2+0x2d8>)
 800d014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d01c:	f7f3 fa5c 	bl	80004d8 <__aeabi_dmul>
 800d020:	4602      	mov	r2, r0
 800d022:	460b      	mov	r3, r1
 800d024:	4630      	mov	r0, r6
 800d026:	4639      	mov	r1, r7
 800d028:	f7f3 f89e 	bl	8000168 <__aeabi_dsub>
 800d02c:	a362      	add	r3, pc, #392	; (adr r3, 800d1b8 <__ieee754_rem_pio2+0x2e0>)
 800d02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d032:	4606      	mov	r6, r0
 800d034:	460f      	mov	r7, r1
 800d036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d03a:	f7f3 fa4d 	bl	80004d8 <__aeabi_dmul>
 800d03e:	2d1f      	cmp	r5, #31
 800d040:	4680      	mov	r8, r0
 800d042:	4689      	mov	r9, r1
 800d044:	dc0e      	bgt.n	800d064 <__ieee754_rem_pio2+0x18c>
 800d046:	4b6d      	ldr	r3, [pc, #436]	; (800d1fc <__ieee754_rem_pio2+0x324>)
 800d048:	1e6a      	subs	r2, r5, #1
 800d04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d04e:	4553      	cmp	r3, sl
 800d050:	d008      	beq.n	800d064 <__ieee754_rem_pio2+0x18c>
 800d052:	4642      	mov	r2, r8
 800d054:	464b      	mov	r3, r9
 800d056:	4630      	mov	r0, r6
 800d058:	4639      	mov	r1, r7
 800d05a:	f7f3 f885 	bl	8000168 <__aeabi_dsub>
 800d05e:	e9c4 0100 	strd	r0, r1, [r4]
 800d062:	e011      	b.n	800d088 <__ieee754_rem_pio2+0x1b0>
 800d064:	464b      	mov	r3, r9
 800d066:	4642      	mov	r2, r8
 800d068:	4630      	mov	r0, r6
 800d06a:	4639      	mov	r1, r7
 800d06c:	f7f3 f87c 	bl	8000168 <__aeabi_dsub>
 800d070:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800d074:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d078:	ebaa 0303 	sub.w	r3, sl, r3
 800d07c:	2b10      	cmp	r3, #16
 800d07e:	dc1f      	bgt.n	800d0c0 <__ieee754_rem_pio2+0x1e8>
 800d080:	4602      	mov	r2, r0
 800d082:	460b      	mov	r3, r1
 800d084:	e9c4 2300 	strd	r2, r3, [r4]
 800d088:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800d08c:	4630      	mov	r0, r6
 800d08e:	4653      	mov	r3, sl
 800d090:	4639      	mov	r1, r7
 800d092:	f7f3 f869 	bl	8000168 <__aeabi_dsub>
 800d096:	4642      	mov	r2, r8
 800d098:	464b      	mov	r3, r9
 800d09a:	f7f3 f865 	bl	8000168 <__aeabi_dsub>
 800d09e:	4602      	mov	r2, r0
 800d0a0:	460b      	mov	r3, r1
 800d0a2:	f1bb 0f00 	cmp.w	fp, #0
 800d0a6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d0aa:	f6bf af4b 	bge.w	800cf44 <__ieee754_rem_pio2+0x6c>
 800d0ae:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800d0b2:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800d0b6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d0ba:	60e1      	str	r1, [r4, #12]
 800d0bc:	426d      	negs	r5, r5
 800d0be:	e741      	b.n	800cf44 <__ieee754_rem_pio2+0x6c>
 800d0c0:	a33f      	add	r3, pc, #252	; (adr r3, 800d1c0 <__ieee754_rem_pio2+0x2e8>)
 800d0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0ca:	f7f3 fa05 	bl	80004d8 <__aeabi_dmul>
 800d0ce:	4680      	mov	r8, r0
 800d0d0:	4689      	mov	r9, r1
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	4630      	mov	r0, r6
 800d0d8:	4639      	mov	r1, r7
 800d0da:	f7f3 f845 	bl	8000168 <__aeabi_dsub>
 800d0de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d0e2:	4602      	mov	r2, r0
 800d0e4:	460b      	mov	r3, r1
 800d0e6:	4630      	mov	r0, r6
 800d0e8:	4639      	mov	r1, r7
 800d0ea:	f7f3 f83d 	bl	8000168 <__aeabi_dsub>
 800d0ee:	4642      	mov	r2, r8
 800d0f0:	464b      	mov	r3, r9
 800d0f2:	f7f3 f839 	bl	8000168 <__aeabi_dsub>
 800d0f6:	a334      	add	r3, pc, #208	; (adr r3, 800d1c8 <__ieee754_rem_pio2+0x2f0>)
 800d0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0fc:	4606      	mov	r6, r0
 800d0fe:	460f      	mov	r7, r1
 800d100:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d104:	f7f3 f9e8 	bl	80004d8 <__aeabi_dmul>
 800d108:	4632      	mov	r2, r6
 800d10a:	463b      	mov	r3, r7
 800d10c:	f7f3 f82c 	bl	8000168 <__aeabi_dsub>
 800d110:	460b      	mov	r3, r1
 800d112:	4602      	mov	r2, r0
 800d114:	4680      	mov	r8, r0
 800d116:	4689      	mov	r9, r1
 800d118:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d11c:	f7f3 f824 	bl	8000168 <__aeabi_dsub>
 800d120:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d124:	ebaa 0a03 	sub.w	sl, sl, r3
 800d128:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800d12c:	dc06      	bgt.n	800d13c <__ieee754_rem_pio2+0x264>
 800d12e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800d132:	4602      	mov	r2, r0
 800d134:	460b      	mov	r3, r1
 800d136:	e9c4 2300 	strd	r2, r3, [r4]
 800d13a:	e7a5      	b.n	800d088 <__ieee754_rem_pio2+0x1b0>
 800d13c:	a326      	add	r3, pc, #152	; (adr r3, 800d1d8 <__ieee754_rem_pio2+0x300>)
 800d13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d142:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d146:	f7f3 f9c7 	bl	80004d8 <__aeabi_dmul>
 800d14a:	4680      	mov	r8, r0
 800d14c:	4689      	mov	r9, r1
 800d14e:	4602      	mov	r2, r0
 800d150:	460b      	mov	r3, r1
 800d152:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d156:	f7f3 f807 	bl	8000168 <__aeabi_dsub>
 800d15a:	4602      	mov	r2, r0
 800d15c:	460b      	mov	r3, r1
 800d15e:	4606      	mov	r6, r0
 800d160:	460f      	mov	r7, r1
 800d162:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d166:	f7f2 ffff 	bl	8000168 <__aeabi_dsub>
 800d16a:	4642      	mov	r2, r8
 800d16c:	464b      	mov	r3, r9
 800d16e:	f7f2 fffb 	bl	8000168 <__aeabi_dsub>
 800d172:	a31b      	add	r3, pc, #108	; (adr r3, 800d1e0 <__ieee754_rem_pio2+0x308>)
 800d174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d178:	4680      	mov	r8, r0
 800d17a:	4689      	mov	r9, r1
 800d17c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d180:	f7f3 f9aa 	bl	80004d8 <__aeabi_dmul>
 800d184:	4642      	mov	r2, r8
 800d186:	464b      	mov	r3, r9
 800d188:	f7f2 ffee 	bl	8000168 <__aeabi_dsub>
 800d18c:	4680      	mov	r8, r0
 800d18e:	4689      	mov	r9, r1
 800d190:	e75f      	b.n	800d052 <__ieee754_rem_pio2+0x17a>
 800d192:	4a1b      	ldr	r2, [pc, #108]	; (800d200 <__ieee754_rem_pio2+0x328>)
 800d194:	4592      	cmp	sl, r2
 800d196:	dd35      	ble.n	800d204 <__ieee754_rem_pio2+0x32c>
 800d198:	4602      	mov	r2, r0
 800d19a:	460b      	mov	r3, r1
 800d19c:	f7f2 ffe4 	bl	8000168 <__aeabi_dsub>
 800d1a0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d1a4:	e9c4 0100 	strd	r0, r1, [r4]
 800d1a8:	e6a6      	b.n	800cef8 <__ieee754_rem_pio2+0x20>
 800d1aa:	bf00      	nop
 800d1ac:	f3af 8000 	nop.w
 800d1b0:	54400000 	.word	0x54400000
 800d1b4:	3ff921fb 	.word	0x3ff921fb
 800d1b8:	1a626331 	.word	0x1a626331
 800d1bc:	3dd0b461 	.word	0x3dd0b461
 800d1c0:	1a600000 	.word	0x1a600000
 800d1c4:	3dd0b461 	.word	0x3dd0b461
 800d1c8:	2e037073 	.word	0x2e037073
 800d1cc:	3ba3198a 	.word	0x3ba3198a
 800d1d0:	6dc9c883 	.word	0x6dc9c883
 800d1d4:	3fe45f30 	.word	0x3fe45f30
 800d1d8:	2e000000 	.word	0x2e000000
 800d1dc:	3ba3198a 	.word	0x3ba3198a
 800d1e0:	252049c1 	.word	0x252049c1
 800d1e4:	397b839a 	.word	0x397b839a
 800d1e8:	3fe921fb 	.word	0x3fe921fb
 800d1ec:	4002d97b 	.word	0x4002d97b
 800d1f0:	3ff921fb 	.word	0x3ff921fb
 800d1f4:	413921fb 	.word	0x413921fb
 800d1f8:	3fe00000 	.word	0x3fe00000
 800d1fc:	0800f010 	.word	0x0800f010
 800d200:	7fefffff 	.word	0x7fefffff
 800d204:	ea4f 552a 	mov.w	r5, sl, asr #20
 800d208:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800d20c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800d210:	460f      	mov	r7, r1
 800d212:	4606      	mov	r6, r0
 800d214:	f7f3 fc10 	bl	8000a38 <__aeabi_d2iz>
 800d218:	f7f3 f8f4 	bl	8000404 <__aeabi_i2d>
 800d21c:	4602      	mov	r2, r0
 800d21e:	460b      	mov	r3, r1
 800d220:	4630      	mov	r0, r6
 800d222:	4639      	mov	r1, r7
 800d224:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d228:	f7f2 ff9e 	bl	8000168 <__aeabi_dsub>
 800d22c:	2200      	movs	r2, #0
 800d22e:	4b20      	ldr	r3, [pc, #128]	; (800d2b0 <__ieee754_rem_pio2+0x3d8>)
 800d230:	f7f3 f952 	bl	80004d8 <__aeabi_dmul>
 800d234:	460f      	mov	r7, r1
 800d236:	4606      	mov	r6, r0
 800d238:	f7f3 fbfe 	bl	8000a38 <__aeabi_d2iz>
 800d23c:	f7f3 f8e2 	bl	8000404 <__aeabi_i2d>
 800d240:	4602      	mov	r2, r0
 800d242:	460b      	mov	r3, r1
 800d244:	4630      	mov	r0, r6
 800d246:	4639      	mov	r1, r7
 800d248:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d24c:	f7f2 ff8c 	bl	8000168 <__aeabi_dsub>
 800d250:	2200      	movs	r2, #0
 800d252:	4b17      	ldr	r3, [pc, #92]	; (800d2b0 <__ieee754_rem_pio2+0x3d8>)
 800d254:	f7f3 f940 	bl	80004d8 <__aeabi_dmul>
 800d258:	f04f 0803 	mov.w	r8, #3
 800d25c:	2600      	movs	r6, #0
 800d25e:	2700      	movs	r7, #0
 800d260:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d264:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800d268:	4632      	mov	r2, r6
 800d26a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d26e:	463b      	mov	r3, r7
 800d270:	f108 3aff 	add.w	sl, r8, #4294967295
 800d274:	f7f3 fb98 	bl	80009a8 <__aeabi_dcmpeq>
 800d278:	b9b8      	cbnz	r0, 800d2aa <__ieee754_rem_pio2+0x3d2>
 800d27a:	4b0e      	ldr	r3, [pc, #56]	; (800d2b4 <__ieee754_rem_pio2+0x3dc>)
 800d27c:	462a      	mov	r2, r5
 800d27e:	9301      	str	r3, [sp, #4]
 800d280:	2302      	movs	r3, #2
 800d282:	4621      	mov	r1, r4
 800d284:	9300      	str	r3, [sp, #0]
 800d286:	a806      	add	r0, sp, #24
 800d288:	4643      	mov	r3, r8
 800d28a:	f000 f97f 	bl	800d58c <__kernel_rem_pio2>
 800d28e:	f1bb 0f00 	cmp.w	fp, #0
 800d292:	4605      	mov	r5, r0
 800d294:	f6bf ae56 	bge.w	800cf44 <__ieee754_rem_pio2+0x6c>
 800d298:	6863      	ldr	r3, [r4, #4]
 800d29a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d29e:	6063      	str	r3, [r4, #4]
 800d2a0:	68e3      	ldr	r3, [r4, #12]
 800d2a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d2a6:	60e3      	str	r3, [r4, #12]
 800d2a8:	e708      	b.n	800d0bc <__ieee754_rem_pio2+0x1e4>
 800d2aa:	46d0      	mov	r8, sl
 800d2ac:	e7dc      	b.n	800d268 <__ieee754_rem_pio2+0x390>
 800d2ae:	bf00      	nop
 800d2b0:	41700000 	.word	0x41700000
 800d2b4:	0800f090 	.word	0x0800f090

0800d2b8 <__ieee754_sqrt>:
 800d2b8:	4b54      	ldr	r3, [pc, #336]	; (800d40c <__ieee754_sqrt+0x154>)
 800d2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2be:	438b      	bics	r3, r1
 800d2c0:	4606      	mov	r6, r0
 800d2c2:	460d      	mov	r5, r1
 800d2c4:	460a      	mov	r2, r1
 800d2c6:	460c      	mov	r4, r1
 800d2c8:	d10f      	bne.n	800d2ea <__ieee754_sqrt+0x32>
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	f7f3 f903 	bl	80004d8 <__aeabi_dmul>
 800d2d2:	4602      	mov	r2, r0
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	4630      	mov	r0, r6
 800d2d8:	4629      	mov	r1, r5
 800d2da:	f7f2 ff47 	bl	800016c <__adddf3>
 800d2de:	4606      	mov	r6, r0
 800d2e0:	460d      	mov	r5, r1
 800d2e2:	4630      	mov	r0, r6
 800d2e4:	4629      	mov	r1, r5
 800d2e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2ea:	2900      	cmp	r1, #0
 800d2ec:	4607      	mov	r7, r0
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	dc0e      	bgt.n	800d310 <__ieee754_sqrt+0x58>
 800d2f2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800d2f6:	ea5c 0707 	orrs.w	r7, ip, r7
 800d2fa:	d0f2      	beq.n	800d2e2 <__ieee754_sqrt+0x2a>
 800d2fc:	b141      	cbz	r1, 800d310 <__ieee754_sqrt+0x58>
 800d2fe:	4602      	mov	r2, r0
 800d300:	460b      	mov	r3, r1
 800d302:	f7f2 ff31 	bl	8000168 <__aeabi_dsub>
 800d306:	4602      	mov	r2, r0
 800d308:	460b      	mov	r3, r1
 800d30a:	f7f3 fa0f 	bl	800072c <__aeabi_ddiv>
 800d30e:	e7e6      	b.n	800d2de <__ieee754_sqrt+0x26>
 800d310:	1512      	asrs	r2, r2, #20
 800d312:	d074      	beq.n	800d3fe <__ieee754_sqrt+0x146>
 800d314:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d318:	07d5      	lsls	r5, r2, #31
 800d31a:	f04f 0500 	mov.w	r5, #0
 800d31e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d322:	bf48      	it	mi
 800d324:	0fd9      	lsrmi	r1, r3, #31
 800d326:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800d32a:	bf44      	itt	mi
 800d32c:	005b      	lslmi	r3, r3, #1
 800d32e:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800d332:	1051      	asrs	r1, r2, #1
 800d334:	0fda      	lsrs	r2, r3, #31
 800d336:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800d33a:	4628      	mov	r0, r5
 800d33c:	2216      	movs	r2, #22
 800d33e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800d342:	005b      	lsls	r3, r3, #1
 800d344:	1987      	adds	r7, r0, r6
 800d346:	42a7      	cmp	r7, r4
 800d348:	bfde      	ittt	le
 800d34a:	19b8      	addle	r0, r7, r6
 800d34c:	1be4      	suble	r4, r4, r7
 800d34e:	19ad      	addle	r5, r5, r6
 800d350:	0fdf      	lsrs	r7, r3, #31
 800d352:	3a01      	subs	r2, #1
 800d354:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800d358:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d35c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d360:	d1f0      	bne.n	800d344 <__ieee754_sqrt+0x8c>
 800d362:	f04f 0c20 	mov.w	ip, #32
 800d366:	4696      	mov	lr, r2
 800d368:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d36c:	4284      	cmp	r4, r0
 800d36e:	eb06 070e 	add.w	r7, r6, lr
 800d372:	dc02      	bgt.n	800d37a <__ieee754_sqrt+0xc2>
 800d374:	d112      	bne.n	800d39c <__ieee754_sqrt+0xe4>
 800d376:	429f      	cmp	r7, r3
 800d378:	d810      	bhi.n	800d39c <__ieee754_sqrt+0xe4>
 800d37a:	2f00      	cmp	r7, #0
 800d37c:	eb07 0e06 	add.w	lr, r7, r6
 800d380:	da42      	bge.n	800d408 <__ieee754_sqrt+0x150>
 800d382:	f1be 0f00 	cmp.w	lr, #0
 800d386:	db3f      	blt.n	800d408 <__ieee754_sqrt+0x150>
 800d388:	f100 0801 	add.w	r8, r0, #1
 800d38c:	1a24      	subs	r4, r4, r0
 800d38e:	4640      	mov	r0, r8
 800d390:	429f      	cmp	r7, r3
 800d392:	bf88      	it	hi
 800d394:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800d398:	1bdb      	subs	r3, r3, r7
 800d39a:	4432      	add	r2, r6
 800d39c:	0064      	lsls	r4, r4, #1
 800d39e:	f1bc 0c01 	subs.w	ip, ip, #1
 800d3a2:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800d3a6:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d3aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d3ae:	d1dd      	bne.n	800d36c <__ieee754_sqrt+0xb4>
 800d3b0:	4323      	orrs	r3, r4
 800d3b2:	d006      	beq.n	800d3c2 <__ieee754_sqrt+0x10a>
 800d3b4:	1c54      	adds	r4, r2, #1
 800d3b6:	bf0b      	itete	eq
 800d3b8:	4662      	moveq	r2, ip
 800d3ba:	3201      	addne	r2, #1
 800d3bc:	3501      	addeq	r5, #1
 800d3be:	f022 0201 	bicne.w	r2, r2, #1
 800d3c2:	106b      	asrs	r3, r5, #1
 800d3c4:	0852      	lsrs	r2, r2, #1
 800d3c6:	07e8      	lsls	r0, r5, #31
 800d3c8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d3cc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d3d0:	bf48      	it	mi
 800d3d2:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d3d6:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800d3da:	4616      	mov	r6, r2
 800d3dc:	e781      	b.n	800d2e2 <__ieee754_sqrt+0x2a>
 800d3de:	0adc      	lsrs	r4, r3, #11
 800d3e0:	3915      	subs	r1, #21
 800d3e2:	055b      	lsls	r3, r3, #21
 800d3e4:	2c00      	cmp	r4, #0
 800d3e6:	d0fa      	beq.n	800d3de <__ieee754_sqrt+0x126>
 800d3e8:	02e6      	lsls	r6, r4, #11
 800d3ea:	d50a      	bpl.n	800d402 <__ieee754_sqrt+0x14a>
 800d3ec:	f1c2 0020 	rsb	r0, r2, #32
 800d3f0:	fa23 f000 	lsr.w	r0, r3, r0
 800d3f4:	1e55      	subs	r5, r2, #1
 800d3f6:	4093      	lsls	r3, r2
 800d3f8:	4304      	orrs	r4, r0
 800d3fa:	1b4a      	subs	r2, r1, r5
 800d3fc:	e78a      	b.n	800d314 <__ieee754_sqrt+0x5c>
 800d3fe:	4611      	mov	r1, r2
 800d400:	e7f0      	b.n	800d3e4 <__ieee754_sqrt+0x12c>
 800d402:	0064      	lsls	r4, r4, #1
 800d404:	3201      	adds	r2, #1
 800d406:	e7ef      	b.n	800d3e8 <__ieee754_sqrt+0x130>
 800d408:	4680      	mov	r8, r0
 800d40a:	e7bf      	b.n	800d38c <__ieee754_sqrt+0xd4>
 800d40c:	7ff00000 	.word	0x7ff00000

0800d410 <__kernel_cos>:
 800d410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d414:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d418:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800d41c:	4680      	mov	r8, r0
 800d41e:	460f      	mov	r7, r1
 800d420:	e9cd 2300 	strd	r2, r3, [sp]
 800d424:	da04      	bge.n	800d430 <__kernel_cos+0x20>
 800d426:	f7f3 fb07 	bl	8000a38 <__aeabi_d2iz>
 800d42a:	2800      	cmp	r0, #0
 800d42c:	f000 8086 	beq.w	800d53c <__kernel_cos+0x12c>
 800d430:	4642      	mov	r2, r8
 800d432:	463b      	mov	r3, r7
 800d434:	4640      	mov	r0, r8
 800d436:	4639      	mov	r1, r7
 800d438:	f7f3 f84e 	bl	80004d8 <__aeabi_dmul>
 800d43c:	2200      	movs	r2, #0
 800d43e:	4b4e      	ldr	r3, [pc, #312]	; (800d578 <__kernel_cos+0x168>)
 800d440:	4604      	mov	r4, r0
 800d442:	460d      	mov	r5, r1
 800d444:	f7f3 f848 	bl	80004d8 <__aeabi_dmul>
 800d448:	a33f      	add	r3, pc, #252	; (adr r3, 800d548 <__kernel_cos+0x138>)
 800d44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d44e:	4682      	mov	sl, r0
 800d450:	468b      	mov	fp, r1
 800d452:	4620      	mov	r0, r4
 800d454:	4629      	mov	r1, r5
 800d456:	f7f3 f83f 	bl	80004d8 <__aeabi_dmul>
 800d45a:	a33d      	add	r3, pc, #244	; (adr r3, 800d550 <__kernel_cos+0x140>)
 800d45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d460:	f7f2 fe84 	bl	800016c <__adddf3>
 800d464:	4622      	mov	r2, r4
 800d466:	462b      	mov	r3, r5
 800d468:	f7f3 f836 	bl	80004d8 <__aeabi_dmul>
 800d46c:	a33a      	add	r3, pc, #232	; (adr r3, 800d558 <__kernel_cos+0x148>)
 800d46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d472:	f7f2 fe79 	bl	8000168 <__aeabi_dsub>
 800d476:	4622      	mov	r2, r4
 800d478:	462b      	mov	r3, r5
 800d47a:	f7f3 f82d 	bl	80004d8 <__aeabi_dmul>
 800d47e:	a338      	add	r3, pc, #224	; (adr r3, 800d560 <__kernel_cos+0x150>)
 800d480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d484:	f7f2 fe72 	bl	800016c <__adddf3>
 800d488:	4622      	mov	r2, r4
 800d48a:	462b      	mov	r3, r5
 800d48c:	f7f3 f824 	bl	80004d8 <__aeabi_dmul>
 800d490:	a335      	add	r3, pc, #212	; (adr r3, 800d568 <__kernel_cos+0x158>)
 800d492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d496:	f7f2 fe67 	bl	8000168 <__aeabi_dsub>
 800d49a:	4622      	mov	r2, r4
 800d49c:	462b      	mov	r3, r5
 800d49e:	f7f3 f81b 	bl	80004d8 <__aeabi_dmul>
 800d4a2:	a333      	add	r3, pc, #204	; (adr r3, 800d570 <__kernel_cos+0x160>)
 800d4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a8:	f7f2 fe60 	bl	800016c <__adddf3>
 800d4ac:	4622      	mov	r2, r4
 800d4ae:	462b      	mov	r3, r5
 800d4b0:	f7f3 f812 	bl	80004d8 <__aeabi_dmul>
 800d4b4:	4622      	mov	r2, r4
 800d4b6:	462b      	mov	r3, r5
 800d4b8:	f7f3 f80e 	bl	80004d8 <__aeabi_dmul>
 800d4bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4c0:	4604      	mov	r4, r0
 800d4c2:	460d      	mov	r5, r1
 800d4c4:	4640      	mov	r0, r8
 800d4c6:	4639      	mov	r1, r7
 800d4c8:	f7f3 f806 	bl	80004d8 <__aeabi_dmul>
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	4602      	mov	r2, r0
 800d4d0:	4629      	mov	r1, r5
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	f7f2 fe48 	bl	8000168 <__aeabi_dsub>
 800d4d8:	4b28      	ldr	r3, [pc, #160]	; (800d57c <__kernel_cos+0x16c>)
 800d4da:	4680      	mov	r8, r0
 800d4dc:	429e      	cmp	r6, r3
 800d4de:	4689      	mov	r9, r1
 800d4e0:	dc0e      	bgt.n	800d500 <__kernel_cos+0xf0>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	4650      	mov	r0, sl
 800d4e8:	4659      	mov	r1, fp
 800d4ea:	f7f2 fe3d 	bl	8000168 <__aeabi_dsub>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	2000      	movs	r0, #0
 800d4f2:	460b      	mov	r3, r1
 800d4f4:	4922      	ldr	r1, [pc, #136]	; (800d580 <__kernel_cos+0x170>)
 800d4f6:	f7f2 fe37 	bl	8000168 <__aeabi_dsub>
 800d4fa:	b003      	add	sp, #12
 800d4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d500:	2400      	movs	r4, #0
 800d502:	4b20      	ldr	r3, [pc, #128]	; (800d584 <__kernel_cos+0x174>)
 800d504:	4622      	mov	r2, r4
 800d506:	429e      	cmp	r6, r3
 800d508:	bfcc      	ite	gt
 800d50a:	4d1f      	ldrgt	r5, [pc, #124]	; (800d588 <__kernel_cos+0x178>)
 800d50c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800d510:	462b      	mov	r3, r5
 800d512:	2000      	movs	r0, #0
 800d514:	491a      	ldr	r1, [pc, #104]	; (800d580 <__kernel_cos+0x170>)
 800d516:	f7f2 fe27 	bl	8000168 <__aeabi_dsub>
 800d51a:	4622      	mov	r2, r4
 800d51c:	4606      	mov	r6, r0
 800d51e:	460f      	mov	r7, r1
 800d520:	462b      	mov	r3, r5
 800d522:	4650      	mov	r0, sl
 800d524:	4659      	mov	r1, fp
 800d526:	f7f2 fe1f 	bl	8000168 <__aeabi_dsub>
 800d52a:	4642      	mov	r2, r8
 800d52c:	464b      	mov	r3, r9
 800d52e:	f7f2 fe1b 	bl	8000168 <__aeabi_dsub>
 800d532:	4602      	mov	r2, r0
 800d534:	460b      	mov	r3, r1
 800d536:	4630      	mov	r0, r6
 800d538:	4639      	mov	r1, r7
 800d53a:	e7dc      	b.n	800d4f6 <__kernel_cos+0xe6>
 800d53c:	2000      	movs	r0, #0
 800d53e:	4910      	ldr	r1, [pc, #64]	; (800d580 <__kernel_cos+0x170>)
 800d540:	e7db      	b.n	800d4fa <__kernel_cos+0xea>
 800d542:	bf00      	nop
 800d544:	f3af 8000 	nop.w
 800d548:	be8838d4 	.word	0xbe8838d4
 800d54c:	bda8fae9 	.word	0xbda8fae9
 800d550:	bdb4b1c4 	.word	0xbdb4b1c4
 800d554:	3e21ee9e 	.word	0x3e21ee9e
 800d558:	809c52ad 	.word	0x809c52ad
 800d55c:	3e927e4f 	.word	0x3e927e4f
 800d560:	19cb1590 	.word	0x19cb1590
 800d564:	3efa01a0 	.word	0x3efa01a0
 800d568:	16c15177 	.word	0x16c15177
 800d56c:	3f56c16c 	.word	0x3f56c16c
 800d570:	5555554c 	.word	0x5555554c
 800d574:	3fa55555 	.word	0x3fa55555
 800d578:	3fe00000 	.word	0x3fe00000
 800d57c:	3fd33332 	.word	0x3fd33332
 800d580:	3ff00000 	.word	0x3ff00000
 800d584:	3fe90000 	.word	0x3fe90000
 800d588:	3fd20000 	.word	0x3fd20000

0800d58c <__kernel_rem_pio2>:
 800d58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d590:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d594:	9307      	str	r3, [sp, #28]
 800d596:	9104      	str	r1, [sp, #16]
 800d598:	4bbf      	ldr	r3, [pc, #764]	; (800d898 <__kernel_rem_pio2+0x30c>)
 800d59a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800d59c:	1ed4      	subs	r4, r2, #3
 800d59e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d5a2:	2500      	movs	r5, #0
 800d5a4:	9302      	str	r3, [sp, #8]
 800d5a6:	9b07      	ldr	r3, [sp, #28]
 800d5a8:	9008      	str	r0, [sp, #32]
 800d5aa:	3b01      	subs	r3, #1
 800d5ac:	9306      	str	r3, [sp, #24]
 800d5ae:	2318      	movs	r3, #24
 800d5b0:	fb94 f4f3 	sdiv	r4, r4, r3
 800d5b4:	f06f 0317 	mvn.w	r3, #23
 800d5b8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800d5bc:	fb04 3303 	mla	r3, r4, r3, r3
 800d5c0:	eb03 0a02 	add.w	sl, r3, r2
 800d5c4:	9a06      	ldr	r2, [sp, #24]
 800d5c6:	9b02      	ldr	r3, [sp, #8]
 800d5c8:	1aa7      	subs	r7, r4, r2
 800d5ca:	eb03 0802 	add.w	r8, r3, r2
 800d5ce:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	ae1e      	add	r6, sp, #120	; 0x78
 800d5da:	4545      	cmp	r5, r8
 800d5dc:	dd14      	ble.n	800d608 <__kernel_rem_pio2+0x7c>
 800d5de:	2600      	movs	r6, #0
 800d5e0:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800d5e4:	9b02      	ldr	r3, [sp, #8]
 800d5e6:	429e      	cmp	r6, r3
 800d5e8:	dc39      	bgt.n	800d65e <__kernel_rem_pio2+0xd2>
 800d5ea:	9b08      	ldr	r3, [sp, #32]
 800d5ec:	f04f 0800 	mov.w	r8, #0
 800d5f0:	3b08      	subs	r3, #8
 800d5f2:	9300      	str	r3, [sp, #0]
 800d5f4:	9b07      	ldr	r3, [sp, #28]
 800d5f6:	f04f 0900 	mov.w	r9, #0
 800d5fa:	199d      	adds	r5, r3, r6
 800d5fc:	ab20      	add	r3, sp, #128	; 0x80
 800d5fe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d602:	9305      	str	r3, [sp, #20]
 800d604:	2700      	movs	r7, #0
 800d606:	e023      	b.n	800d650 <__kernel_rem_pio2+0xc4>
 800d608:	42ef      	cmn	r7, r5
 800d60a:	d40b      	bmi.n	800d624 <__kernel_rem_pio2+0x98>
 800d60c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d610:	e9cd 2300 	strd	r2, r3, [sp]
 800d614:	f7f2 fef6 	bl	8000404 <__aeabi_i2d>
 800d618:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d61c:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800d620:	3501      	adds	r5, #1
 800d622:	e7da      	b.n	800d5da <__kernel_rem_pio2+0x4e>
 800d624:	4610      	mov	r0, r2
 800d626:	4619      	mov	r1, r3
 800d628:	e7f8      	b.n	800d61c <__kernel_rem_pio2+0x90>
 800d62a:	9905      	ldr	r1, [sp, #20]
 800d62c:	9d00      	ldr	r5, [sp, #0]
 800d62e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800d632:	9105      	str	r1, [sp, #20]
 800d634:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800d638:	9500      	str	r5, [sp, #0]
 800d63a:	f7f2 ff4d 	bl	80004d8 <__aeabi_dmul>
 800d63e:	4602      	mov	r2, r0
 800d640:	460b      	mov	r3, r1
 800d642:	4640      	mov	r0, r8
 800d644:	4649      	mov	r1, r9
 800d646:	f7f2 fd91 	bl	800016c <__adddf3>
 800d64a:	4680      	mov	r8, r0
 800d64c:	4689      	mov	r9, r1
 800d64e:	3701      	adds	r7, #1
 800d650:	9b06      	ldr	r3, [sp, #24]
 800d652:	429f      	cmp	r7, r3
 800d654:	dde9      	ble.n	800d62a <__kernel_rem_pio2+0x9e>
 800d656:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800d65a:	3601      	adds	r6, #1
 800d65c:	e7c2      	b.n	800d5e4 <__kernel_rem_pio2+0x58>
 800d65e:	9b02      	ldr	r3, [sp, #8]
 800d660:	aa0c      	add	r2, sp, #48	; 0x30
 800d662:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d666:	930b      	str	r3, [sp, #44]	; 0x2c
 800d668:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800d66a:	9f02      	ldr	r7, [sp, #8]
 800d66c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d670:	930a      	str	r3, [sp, #40]	; 0x28
 800d672:	2600      	movs	r6, #0
 800d674:	ab98      	add	r3, sp, #608	; 0x260
 800d676:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800d67a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d67e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d682:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800d686:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800d68a:	ab98      	add	r3, sp, #608	; 0x260
 800d68c:	445b      	add	r3, fp
 800d68e:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800d692:	1bbb      	subs	r3, r7, r6
 800d694:	2b00      	cmp	r3, #0
 800d696:	dc71      	bgt.n	800d77c <__kernel_rem_pio2+0x1f0>
 800d698:	4652      	mov	r2, sl
 800d69a:	4640      	mov	r0, r8
 800d69c:	4649      	mov	r1, r9
 800d69e:	f000 fc03 	bl	800dea8 <scalbn>
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d6a8:	4604      	mov	r4, r0
 800d6aa:	460d      	mov	r5, r1
 800d6ac:	f7f2 ff14 	bl	80004d8 <__aeabi_dmul>
 800d6b0:	f000 fb72 	bl	800dd98 <floor>
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	4b79      	ldr	r3, [pc, #484]	; (800d89c <__kernel_rem_pio2+0x310>)
 800d6b8:	f7f2 ff0e 	bl	80004d8 <__aeabi_dmul>
 800d6bc:	4602      	mov	r2, r0
 800d6be:	460b      	mov	r3, r1
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	4629      	mov	r1, r5
 800d6c4:	f7f2 fd50 	bl	8000168 <__aeabi_dsub>
 800d6c8:	460d      	mov	r5, r1
 800d6ca:	4604      	mov	r4, r0
 800d6cc:	f7f3 f9b4 	bl	8000a38 <__aeabi_d2iz>
 800d6d0:	9005      	str	r0, [sp, #20]
 800d6d2:	f7f2 fe97 	bl	8000404 <__aeabi_i2d>
 800d6d6:	4602      	mov	r2, r0
 800d6d8:	460b      	mov	r3, r1
 800d6da:	4620      	mov	r0, r4
 800d6dc:	4629      	mov	r1, r5
 800d6de:	f7f2 fd43 	bl	8000168 <__aeabi_dsub>
 800d6e2:	f1ba 0f00 	cmp.w	sl, #0
 800d6e6:	4680      	mov	r8, r0
 800d6e8:	4689      	mov	r9, r1
 800d6ea:	dd6c      	ble.n	800d7c6 <__kernel_rem_pio2+0x23a>
 800d6ec:	1e7a      	subs	r2, r7, #1
 800d6ee:	ab0c      	add	r3, sp, #48	; 0x30
 800d6f0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d6f4:	f1ca 0118 	rsb	r1, sl, #24
 800d6f8:	9c05      	ldr	r4, [sp, #20]
 800d6fa:	fa40 f301 	asr.w	r3, r0, r1
 800d6fe:	441c      	add	r4, r3
 800d700:	408b      	lsls	r3, r1
 800d702:	1ac0      	subs	r0, r0, r3
 800d704:	ab0c      	add	r3, sp, #48	; 0x30
 800d706:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d70a:	f1ca 0317 	rsb	r3, sl, #23
 800d70e:	9405      	str	r4, [sp, #20]
 800d710:	fa40 f303 	asr.w	r3, r0, r3
 800d714:	9300      	str	r3, [sp, #0]
 800d716:	9b00      	ldr	r3, [sp, #0]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	dd62      	ble.n	800d7e2 <__kernel_rem_pio2+0x256>
 800d71c:	2200      	movs	r2, #0
 800d71e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d722:	4614      	mov	r4, r2
 800d724:	9b05      	ldr	r3, [sp, #20]
 800d726:	3301      	adds	r3, #1
 800d728:	9305      	str	r3, [sp, #20]
 800d72a:	4297      	cmp	r7, r2
 800d72c:	f300 809f 	bgt.w	800d86e <__kernel_rem_pio2+0x2e2>
 800d730:	f1ba 0f00 	cmp.w	sl, #0
 800d734:	dd07      	ble.n	800d746 <__kernel_rem_pio2+0x1ba>
 800d736:	f1ba 0f01 	cmp.w	sl, #1
 800d73a:	f000 80bb 	beq.w	800d8b4 <__kernel_rem_pio2+0x328>
 800d73e:	f1ba 0f02 	cmp.w	sl, #2
 800d742:	f000 80c1 	beq.w	800d8c8 <__kernel_rem_pio2+0x33c>
 800d746:	9b00      	ldr	r3, [sp, #0]
 800d748:	2b02      	cmp	r3, #2
 800d74a:	d14a      	bne.n	800d7e2 <__kernel_rem_pio2+0x256>
 800d74c:	4642      	mov	r2, r8
 800d74e:	464b      	mov	r3, r9
 800d750:	2000      	movs	r0, #0
 800d752:	4953      	ldr	r1, [pc, #332]	; (800d8a0 <__kernel_rem_pio2+0x314>)
 800d754:	f7f2 fd08 	bl	8000168 <__aeabi_dsub>
 800d758:	4680      	mov	r8, r0
 800d75a:	4689      	mov	r9, r1
 800d75c:	2c00      	cmp	r4, #0
 800d75e:	d040      	beq.n	800d7e2 <__kernel_rem_pio2+0x256>
 800d760:	4652      	mov	r2, sl
 800d762:	2000      	movs	r0, #0
 800d764:	494e      	ldr	r1, [pc, #312]	; (800d8a0 <__kernel_rem_pio2+0x314>)
 800d766:	f000 fb9f 	bl	800dea8 <scalbn>
 800d76a:	4602      	mov	r2, r0
 800d76c:	460b      	mov	r3, r1
 800d76e:	4640      	mov	r0, r8
 800d770:	4649      	mov	r1, r9
 800d772:	f7f2 fcf9 	bl	8000168 <__aeabi_dsub>
 800d776:	4680      	mov	r8, r0
 800d778:	4689      	mov	r9, r1
 800d77a:	e032      	b.n	800d7e2 <__kernel_rem_pio2+0x256>
 800d77c:	2200      	movs	r2, #0
 800d77e:	4b49      	ldr	r3, [pc, #292]	; (800d8a4 <__kernel_rem_pio2+0x318>)
 800d780:	4640      	mov	r0, r8
 800d782:	4649      	mov	r1, r9
 800d784:	f7f2 fea8 	bl	80004d8 <__aeabi_dmul>
 800d788:	f7f3 f956 	bl	8000a38 <__aeabi_d2iz>
 800d78c:	f7f2 fe3a 	bl	8000404 <__aeabi_i2d>
 800d790:	2200      	movs	r2, #0
 800d792:	4b45      	ldr	r3, [pc, #276]	; (800d8a8 <__kernel_rem_pio2+0x31c>)
 800d794:	e9cd 0100 	strd	r0, r1, [sp]
 800d798:	f7f2 fe9e 	bl	80004d8 <__aeabi_dmul>
 800d79c:	4602      	mov	r2, r0
 800d79e:	460b      	mov	r3, r1
 800d7a0:	4640      	mov	r0, r8
 800d7a2:	4649      	mov	r1, r9
 800d7a4:	f7f2 fce0 	bl	8000168 <__aeabi_dsub>
 800d7a8:	f7f3 f946 	bl	8000a38 <__aeabi_d2iz>
 800d7ac:	ab0c      	add	r3, sp, #48	; 0x30
 800d7ae:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800d7b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d7b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d7ba:	f7f2 fcd7 	bl	800016c <__adddf3>
 800d7be:	3601      	adds	r6, #1
 800d7c0:	4680      	mov	r8, r0
 800d7c2:	4689      	mov	r9, r1
 800d7c4:	e765      	b.n	800d692 <__kernel_rem_pio2+0x106>
 800d7c6:	d105      	bne.n	800d7d4 <__kernel_rem_pio2+0x248>
 800d7c8:	1e7b      	subs	r3, r7, #1
 800d7ca:	aa0c      	add	r2, sp, #48	; 0x30
 800d7cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d7d0:	15c3      	asrs	r3, r0, #23
 800d7d2:	e79f      	b.n	800d714 <__kernel_rem_pio2+0x188>
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	4b35      	ldr	r3, [pc, #212]	; (800d8ac <__kernel_rem_pio2+0x320>)
 800d7d8:	f7f3 f904 	bl	80009e4 <__aeabi_dcmpge>
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	d143      	bne.n	800d868 <__kernel_rem_pio2+0x2dc>
 800d7e0:	9000      	str	r0, [sp, #0]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	4640      	mov	r0, r8
 800d7e8:	4649      	mov	r1, r9
 800d7ea:	f7f3 f8dd 	bl	80009a8 <__aeabi_dcmpeq>
 800d7ee:	2800      	cmp	r0, #0
 800d7f0:	f000 80c3 	beq.w	800d97a <__kernel_rem_pio2+0x3ee>
 800d7f4:	1e7c      	subs	r4, r7, #1
 800d7f6:	4623      	mov	r3, r4
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	9902      	ldr	r1, [sp, #8]
 800d7fc:	428b      	cmp	r3, r1
 800d7fe:	da6a      	bge.n	800d8d6 <__kernel_rem_pio2+0x34a>
 800d800:	2a00      	cmp	r2, #0
 800d802:	f000 8084 	beq.w	800d90e <__kernel_rem_pio2+0x382>
 800d806:	ab0c      	add	r3, sp, #48	; 0x30
 800d808:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d80c:	f1aa 0a18 	sub.w	sl, sl, #24
 800d810:	2b00      	cmp	r3, #0
 800d812:	f000 80b0 	beq.w	800d976 <__kernel_rem_pio2+0x3ea>
 800d816:	4652      	mov	r2, sl
 800d818:	2000      	movs	r0, #0
 800d81a:	4921      	ldr	r1, [pc, #132]	; (800d8a0 <__kernel_rem_pio2+0x314>)
 800d81c:	f000 fb44 	bl	800dea8 <scalbn>
 800d820:	4625      	mov	r5, r4
 800d822:	4606      	mov	r6, r0
 800d824:	460f      	mov	r7, r1
 800d826:	f04f 0a00 	mov.w	sl, #0
 800d82a:	00e3      	lsls	r3, r4, #3
 800d82c:	aa98      	add	r2, sp, #608	; 0x260
 800d82e:	eb02 0803 	add.w	r8, r2, r3
 800d832:	f8df b070 	ldr.w	fp, [pc, #112]	; 800d8a4 <__kernel_rem_pio2+0x318>
 800d836:	9306      	str	r3, [sp, #24]
 800d838:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800d83c:	2d00      	cmp	r5, #0
 800d83e:	f280 80d2 	bge.w	800d9e6 <__kernel_rem_pio2+0x45a>
 800d842:	2500      	movs	r5, #0
 800d844:	9a06      	ldr	r2, [sp, #24]
 800d846:	ab98      	add	r3, sp, #608	; 0x260
 800d848:	189e      	adds	r6, r3, r2
 800d84a:	3ea8      	subs	r6, #168	; 0xa8
 800d84c:	1b63      	subs	r3, r4, r5
 800d84e:	2b00      	cmp	r3, #0
 800d850:	f2c0 80f9 	blt.w	800da46 <__kernel_rem_pio2+0x4ba>
 800d854:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800d8b0 <__kernel_rem_pio2+0x324>
 800d858:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800d85c:	f04f 0a00 	mov.w	sl, #0
 800d860:	f04f 0b00 	mov.w	fp, #0
 800d864:	2700      	movs	r7, #0
 800d866:	e0e2      	b.n	800da2e <__kernel_rem_pio2+0x4a2>
 800d868:	2302      	movs	r3, #2
 800d86a:	9300      	str	r3, [sp, #0]
 800d86c:	e756      	b.n	800d71c <__kernel_rem_pio2+0x190>
 800d86e:	ab0c      	add	r3, sp, #48	; 0x30
 800d870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d874:	b94c      	cbnz	r4, 800d88a <__kernel_rem_pio2+0x2fe>
 800d876:	b12b      	cbz	r3, 800d884 <__kernel_rem_pio2+0x2f8>
 800d878:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d87c:	a80c      	add	r0, sp, #48	; 0x30
 800d87e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800d882:	2301      	movs	r3, #1
 800d884:	3201      	adds	r2, #1
 800d886:	461c      	mov	r4, r3
 800d888:	e74f      	b.n	800d72a <__kernel_rem_pio2+0x19e>
 800d88a:	1acb      	subs	r3, r1, r3
 800d88c:	a80c      	add	r0, sp, #48	; 0x30
 800d88e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800d892:	4623      	mov	r3, r4
 800d894:	e7f6      	b.n	800d884 <__kernel_rem_pio2+0x2f8>
 800d896:	bf00      	nop
 800d898:	0800f1d8 	.word	0x0800f1d8
 800d89c:	40200000 	.word	0x40200000
 800d8a0:	3ff00000 	.word	0x3ff00000
 800d8a4:	3e700000 	.word	0x3e700000
 800d8a8:	41700000 	.word	0x41700000
 800d8ac:	3fe00000 	.word	0x3fe00000
 800d8b0:	0800f190 	.word	0x0800f190
 800d8b4:	1e7a      	subs	r2, r7, #1
 800d8b6:	ab0c      	add	r3, sp, #48	; 0x30
 800d8b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8bc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d8c0:	a90c      	add	r1, sp, #48	; 0x30
 800d8c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d8c6:	e73e      	b.n	800d746 <__kernel_rem_pio2+0x1ba>
 800d8c8:	1e7a      	subs	r2, r7, #1
 800d8ca:	ab0c      	add	r3, sp, #48	; 0x30
 800d8cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8d0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d8d4:	e7f4      	b.n	800d8c0 <__kernel_rem_pio2+0x334>
 800d8d6:	a90c      	add	r1, sp, #48	; 0x30
 800d8d8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d8dc:	3b01      	subs	r3, #1
 800d8de:	430a      	orrs	r2, r1
 800d8e0:	e78b      	b.n	800d7fa <__kernel_rem_pio2+0x26e>
 800d8e2:	3401      	adds	r4, #1
 800d8e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d8e8:	2a00      	cmp	r2, #0
 800d8ea:	d0fa      	beq.n	800d8e2 <__kernel_rem_pio2+0x356>
 800d8ec:	ab98      	add	r3, sp, #608	; 0x260
 800d8ee:	449b      	add	fp, r3
 800d8f0:	9b07      	ldr	r3, [sp, #28]
 800d8f2:	1c7e      	adds	r6, r7, #1
 800d8f4:	19dd      	adds	r5, r3, r7
 800d8f6:	ab98      	add	r3, sp, #608	; 0x260
 800d8f8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d8fc:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800d900:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800d904:	443c      	add	r4, r7
 800d906:	42b4      	cmp	r4, r6
 800d908:	da04      	bge.n	800d914 <__kernel_rem_pio2+0x388>
 800d90a:	4627      	mov	r7, r4
 800d90c:	e6b1      	b.n	800d672 <__kernel_rem_pio2+0xe6>
 800d90e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d910:	2401      	movs	r4, #1
 800d912:	e7e7      	b.n	800d8e4 <__kernel_rem_pio2+0x358>
 800d914:	f105 0308 	add.w	r3, r5, #8
 800d918:	9309      	str	r3, [sp, #36]	; 0x24
 800d91a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d91c:	2700      	movs	r7, #0
 800d91e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d922:	f7f2 fd6f 	bl	8000404 <__aeabi_i2d>
 800d926:	f04f 0800 	mov.w	r8, #0
 800d92a:	f04f 0900 	mov.w	r9, #0
 800d92e:	9b08      	ldr	r3, [sp, #32]
 800d930:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800d934:	3b08      	subs	r3, #8
 800d936:	9300      	str	r3, [sp, #0]
 800d938:	f105 0310 	add.w	r3, r5, #16
 800d93c:	9305      	str	r3, [sp, #20]
 800d93e:	9b06      	ldr	r3, [sp, #24]
 800d940:	429f      	cmp	r7, r3
 800d942:	dd04      	ble.n	800d94e <__kernel_rem_pio2+0x3c2>
 800d944:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800d948:	3601      	adds	r6, #1
 800d94a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d94c:	e7db      	b.n	800d906 <__kernel_rem_pio2+0x37a>
 800d94e:	9905      	ldr	r1, [sp, #20]
 800d950:	9d00      	ldr	r5, [sp, #0]
 800d952:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800d956:	9105      	str	r1, [sp, #20]
 800d958:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800d95c:	9500      	str	r5, [sp, #0]
 800d95e:	f7f2 fdbb 	bl	80004d8 <__aeabi_dmul>
 800d962:	4602      	mov	r2, r0
 800d964:	460b      	mov	r3, r1
 800d966:	4640      	mov	r0, r8
 800d968:	4649      	mov	r1, r9
 800d96a:	f7f2 fbff 	bl	800016c <__adddf3>
 800d96e:	3701      	adds	r7, #1
 800d970:	4680      	mov	r8, r0
 800d972:	4689      	mov	r9, r1
 800d974:	e7e3      	b.n	800d93e <__kernel_rem_pio2+0x3b2>
 800d976:	3c01      	subs	r4, #1
 800d978:	e745      	b.n	800d806 <__kernel_rem_pio2+0x27a>
 800d97a:	f1ca 0200 	rsb	r2, sl, #0
 800d97e:	4640      	mov	r0, r8
 800d980:	4649      	mov	r1, r9
 800d982:	f000 fa91 	bl	800dea8 <scalbn>
 800d986:	2200      	movs	r2, #0
 800d988:	4ba3      	ldr	r3, [pc, #652]	; (800dc18 <__kernel_rem_pio2+0x68c>)
 800d98a:	4604      	mov	r4, r0
 800d98c:	460d      	mov	r5, r1
 800d98e:	f7f3 f829 	bl	80009e4 <__aeabi_dcmpge>
 800d992:	b1f8      	cbz	r0, 800d9d4 <__kernel_rem_pio2+0x448>
 800d994:	2200      	movs	r2, #0
 800d996:	4ba1      	ldr	r3, [pc, #644]	; (800dc1c <__kernel_rem_pio2+0x690>)
 800d998:	4620      	mov	r0, r4
 800d99a:	4629      	mov	r1, r5
 800d99c:	f7f2 fd9c 	bl	80004d8 <__aeabi_dmul>
 800d9a0:	f7f3 f84a 	bl	8000a38 <__aeabi_d2iz>
 800d9a4:	4606      	mov	r6, r0
 800d9a6:	f7f2 fd2d 	bl	8000404 <__aeabi_i2d>
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	4b9a      	ldr	r3, [pc, #616]	; (800dc18 <__kernel_rem_pio2+0x68c>)
 800d9ae:	f7f2 fd93 	bl	80004d8 <__aeabi_dmul>
 800d9b2:	460b      	mov	r3, r1
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	4629      	mov	r1, r5
 800d9b8:	4620      	mov	r0, r4
 800d9ba:	f7f2 fbd5 	bl	8000168 <__aeabi_dsub>
 800d9be:	f7f3 f83b 	bl	8000a38 <__aeabi_d2iz>
 800d9c2:	1c7c      	adds	r4, r7, #1
 800d9c4:	ab0c      	add	r3, sp, #48	; 0x30
 800d9c6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800d9ca:	f10a 0a18 	add.w	sl, sl, #24
 800d9ce:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800d9d2:	e720      	b.n	800d816 <__kernel_rem_pio2+0x28a>
 800d9d4:	4620      	mov	r0, r4
 800d9d6:	4629      	mov	r1, r5
 800d9d8:	f7f3 f82e 	bl	8000a38 <__aeabi_d2iz>
 800d9dc:	ab0c      	add	r3, sp, #48	; 0x30
 800d9de:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800d9e2:	463c      	mov	r4, r7
 800d9e4:	e717      	b.n	800d816 <__kernel_rem_pio2+0x28a>
 800d9e6:	ab0c      	add	r3, sp, #48	; 0x30
 800d9e8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d9ec:	f7f2 fd0a 	bl	8000404 <__aeabi_i2d>
 800d9f0:	4632      	mov	r2, r6
 800d9f2:	463b      	mov	r3, r7
 800d9f4:	f7f2 fd70 	bl	80004d8 <__aeabi_dmul>
 800d9f8:	4652      	mov	r2, sl
 800d9fa:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800d9fe:	465b      	mov	r3, fp
 800da00:	4630      	mov	r0, r6
 800da02:	4639      	mov	r1, r7
 800da04:	f7f2 fd68 	bl	80004d8 <__aeabi_dmul>
 800da08:	3d01      	subs	r5, #1
 800da0a:	4606      	mov	r6, r0
 800da0c:	460f      	mov	r7, r1
 800da0e:	e715      	b.n	800d83c <__kernel_rem_pio2+0x2b0>
 800da10:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800da14:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800da18:	f7f2 fd5e 	bl	80004d8 <__aeabi_dmul>
 800da1c:	4602      	mov	r2, r0
 800da1e:	460b      	mov	r3, r1
 800da20:	4650      	mov	r0, sl
 800da22:	4659      	mov	r1, fp
 800da24:	f7f2 fba2 	bl	800016c <__adddf3>
 800da28:	4682      	mov	sl, r0
 800da2a:	468b      	mov	fp, r1
 800da2c:	3701      	adds	r7, #1
 800da2e:	9b02      	ldr	r3, [sp, #8]
 800da30:	429f      	cmp	r7, r3
 800da32:	dc01      	bgt.n	800da38 <__kernel_rem_pio2+0x4ac>
 800da34:	42bd      	cmp	r5, r7
 800da36:	daeb      	bge.n	800da10 <__kernel_rem_pio2+0x484>
 800da38:	ab48      	add	r3, sp, #288	; 0x120
 800da3a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800da3e:	e9c3 ab00 	strd	sl, fp, [r3]
 800da42:	3501      	adds	r5, #1
 800da44:	e702      	b.n	800d84c <__kernel_rem_pio2+0x2c0>
 800da46:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800da48:	2b03      	cmp	r3, #3
 800da4a:	d86c      	bhi.n	800db26 <__kernel_rem_pio2+0x59a>
 800da4c:	e8df f003 	tbb	[pc, r3]
 800da50:	022f2f59 	.word	0x022f2f59
 800da54:	9a06      	ldr	r2, [sp, #24]
 800da56:	ab48      	add	r3, sp, #288	; 0x120
 800da58:	189d      	adds	r5, r3, r2
 800da5a:	46aa      	mov	sl, r5
 800da5c:	46a3      	mov	fp, r4
 800da5e:	f1bb 0f00 	cmp.w	fp, #0
 800da62:	f300 8087 	bgt.w	800db74 <__kernel_rem_pio2+0x5e8>
 800da66:	46a2      	mov	sl, r4
 800da68:	f1ba 0f01 	cmp.w	sl, #1
 800da6c:	f300 809f 	bgt.w	800dbae <__kernel_rem_pio2+0x622>
 800da70:	2700      	movs	r7, #0
 800da72:	463e      	mov	r6, r7
 800da74:	9d06      	ldr	r5, [sp, #24]
 800da76:	ab48      	add	r3, sp, #288	; 0x120
 800da78:	3508      	adds	r5, #8
 800da7a:	441d      	add	r5, r3
 800da7c:	2c01      	cmp	r4, #1
 800da7e:	f300 80b3 	bgt.w	800dbe8 <__kernel_rem_pio2+0x65c>
 800da82:	9b00      	ldr	r3, [sp, #0]
 800da84:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800da86:	9849      	ldr	r0, [sp, #292]	; 0x124
 800da88:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800da8a:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	f040 80b5 	bne.w	800dbfc <__kernel_rem_pio2+0x670>
 800da92:	4603      	mov	r3, r0
 800da94:	462a      	mov	r2, r5
 800da96:	9804      	ldr	r0, [sp, #16]
 800da98:	e9c0 2300 	strd	r2, r3, [r0]
 800da9c:	4622      	mov	r2, r4
 800da9e:	460b      	mov	r3, r1
 800daa0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800daa4:	463a      	mov	r2, r7
 800daa6:	4633      	mov	r3, r6
 800daa8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800daac:	e03b      	b.n	800db26 <__kernel_rem_pio2+0x59a>
 800daae:	f04f 0c00 	mov.w	ip, #0
 800dab2:	4626      	mov	r6, r4
 800dab4:	4667      	mov	r7, ip
 800dab6:	9d06      	ldr	r5, [sp, #24]
 800dab8:	ab48      	add	r3, sp, #288	; 0x120
 800daba:	3508      	adds	r5, #8
 800dabc:	441d      	add	r5, r3
 800dabe:	2e00      	cmp	r6, #0
 800dac0:	da42      	bge.n	800db48 <__kernel_rem_pio2+0x5bc>
 800dac2:	9b00      	ldr	r3, [sp, #0]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d049      	beq.n	800db5c <__kernel_rem_pio2+0x5d0>
 800dac8:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800dacc:	4662      	mov	r2, ip
 800dace:	460b      	mov	r3, r1
 800dad0:	9904      	ldr	r1, [sp, #16]
 800dad2:	2601      	movs	r6, #1
 800dad4:	e9c1 2300 	strd	r2, r3, [r1]
 800dad8:	a948      	add	r1, sp, #288	; 0x120
 800dada:	463b      	mov	r3, r7
 800dadc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dae0:	f7f2 fb42 	bl	8000168 <__aeabi_dsub>
 800dae4:	4684      	mov	ip, r0
 800dae6:	460f      	mov	r7, r1
 800dae8:	ad48      	add	r5, sp, #288	; 0x120
 800daea:	42b4      	cmp	r4, r6
 800daec:	da38      	bge.n	800db60 <__kernel_rem_pio2+0x5d4>
 800daee:	9b00      	ldr	r3, [sp, #0]
 800daf0:	b10b      	cbz	r3, 800daf6 <__kernel_rem_pio2+0x56a>
 800daf2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800daf6:	4662      	mov	r2, ip
 800daf8:	463b      	mov	r3, r7
 800dafa:	9904      	ldr	r1, [sp, #16]
 800dafc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800db00:	e011      	b.n	800db26 <__kernel_rem_pio2+0x59a>
 800db02:	2700      	movs	r7, #0
 800db04:	463d      	mov	r5, r7
 800db06:	9b06      	ldr	r3, [sp, #24]
 800db08:	aa98      	add	r2, sp, #608	; 0x260
 800db0a:	4413      	add	r3, r2
 800db0c:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800db10:	2c00      	cmp	r4, #0
 800db12:	da0f      	bge.n	800db34 <__kernel_rem_pio2+0x5a8>
 800db14:	9b00      	ldr	r3, [sp, #0]
 800db16:	b10b      	cbz	r3, 800db1c <__kernel_rem_pio2+0x590>
 800db18:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800db1c:	463a      	mov	r2, r7
 800db1e:	462b      	mov	r3, r5
 800db20:	9904      	ldr	r1, [sp, #16]
 800db22:	e9c1 2300 	strd	r2, r3, [r1]
 800db26:	9b05      	ldr	r3, [sp, #20]
 800db28:	f003 0007 	and.w	r0, r3, #7
 800db2c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800db30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db34:	4638      	mov	r0, r7
 800db36:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800db3a:	4629      	mov	r1, r5
 800db3c:	f7f2 fb16 	bl	800016c <__adddf3>
 800db40:	3c01      	subs	r4, #1
 800db42:	4607      	mov	r7, r0
 800db44:	460d      	mov	r5, r1
 800db46:	e7e3      	b.n	800db10 <__kernel_rem_pio2+0x584>
 800db48:	4660      	mov	r0, ip
 800db4a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800db4e:	4639      	mov	r1, r7
 800db50:	f7f2 fb0c 	bl	800016c <__adddf3>
 800db54:	3e01      	subs	r6, #1
 800db56:	4684      	mov	ip, r0
 800db58:	460f      	mov	r7, r1
 800db5a:	e7b0      	b.n	800dabe <__kernel_rem_pio2+0x532>
 800db5c:	4639      	mov	r1, r7
 800db5e:	e7b5      	b.n	800dacc <__kernel_rem_pio2+0x540>
 800db60:	4660      	mov	r0, ip
 800db62:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800db66:	4639      	mov	r1, r7
 800db68:	f7f2 fb00 	bl	800016c <__adddf3>
 800db6c:	3601      	adds	r6, #1
 800db6e:	4684      	mov	ip, r0
 800db70:	460f      	mov	r7, r1
 800db72:	e7ba      	b.n	800daea <__kernel_rem_pio2+0x55e>
 800db74:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800db78:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800db7c:	4640      	mov	r0, r8
 800db7e:	4649      	mov	r1, r9
 800db80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800db84:	f7f2 faf2 	bl	800016c <__adddf3>
 800db88:	4602      	mov	r2, r0
 800db8a:	460b      	mov	r3, r1
 800db8c:	4606      	mov	r6, r0
 800db8e:	460f      	mov	r7, r1
 800db90:	4640      	mov	r0, r8
 800db92:	4649      	mov	r1, r9
 800db94:	f7f2 fae8 	bl	8000168 <__aeabi_dsub>
 800db98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800db9c:	f7f2 fae6 	bl	800016c <__adddf3>
 800dba0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dba4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dba8:	e9ca 6700 	strd	r6, r7, [sl]
 800dbac:	e757      	b.n	800da5e <__kernel_rem_pio2+0x4d2>
 800dbae:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800dbb2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800dbb6:	4630      	mov	r0, r6
 800dbb8:	4639      	mov	r1, r7
 800dbba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dbbe:	f7f2 fad5 	bl	800016c <__adddf3>
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	4680      	mov	r8, r0
 800dbc8:	4689      	mov	r9, r1
 800dbca:	4630      	mov	r0, r6
 800dbcc:	4639      	mov	r1, r7
 800dbce:	f7f2 facb 	bl	8000168 <__aeabi_dsub>
 800dbd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dbd6:	f7f2 fac9 	bl	800016c <__adddf3>
 800dbda:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dbde:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800dbe2:	e9c5 8900 	strd	r8, r9, [r5]
 800dbe6:	e73f      	b.n	800da68 <__kernel_rem_pio2+0x4dc>
 800dbe8:	4638      	mov	r0, r7
 800dbea:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800dbee:	4631      	mov	r1, r6
 800dbf0:	f7f2 fabc 	bl	800016c <__adddf3>
 800dbf4:	3c01      	subs	r4, #1
 800dbf6:	4607      	mov	r7, r0
 800dbf8:	460e      	mov	r6, r1
 800dbfa:	e73f      	b.n	800da7c <__kernel_rem_pio2+0x4f0>
 800dbfc:	9b04      	ldr	r3, [sp, #16]
 800dbfe:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800dc02:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800dc06:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800dc0a:	601d      	str	r5, [r3, #0]
 800dc0c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800dc10:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800dc14:	615e      	str	r6, [r3, #20]
 800dc16:	e786      	b.n	800db26 <__kernel_rem_pio2+0x59a>
 800dc18:	41700000 	.word	0x41700000
 800dc1c:	3e700000 	.word	0x3e700000

0800dc20 <__kernel_sin>:
 800dc20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc24:	b086      	sub	sp, #24
 800dc26:	e9cd 2300 	strd	r2, r3, [sp]
 800dc2a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dc2e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800dc32:	4682      	mov	sl, r0
 800dc34:	460c      	mov	r4, r1
 800dc36:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800dc38:	da03      	bge.n	800dc42 <__kernel_sin+0x22>
 800dc3a:	f7f2 fefd 	bl	8000a38 <__aeabi_d2iz>
 800dc3e:	2800      	cmp	r0, #0
 800dc40:	d050      	beq.n	800dce4 <__kernel_sin+0xc4>
 800dc42:	4652      	mov	r2, sl
 800dc44:	4623      	mov	r3, r4
 800dc46:	4650      	mov	r0, sl
 800dc48:	4621      	mov	r1, r4
 800dc4a:	f7f2 fc45 	bl	80004d8 <__aeabi_dmul>
 800dc4e:	4606      	mov	r6, r0
 800dc50:	460f      	mov	r7, r1
 800dc52:	4602      	mov	r2, r0
 800dc54:	460b      	mov	r3, r1
 800dc56:	4650      	mov	r0, sl
 800dc58:	4621      	mov	r1, r4
 800dc5a:	f7f2 fc3d 	bl	80004d8 <__aeabi_dmul>
 800dc5e:	a33e      	add	r3, pc, #248	; (adr r3, 800dd58 <__kernel_sin+0x138>)
 800dc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc64:	4680      	mov	r8, r0
 800dc66:	4689      	mov	r9, r1
 800dc68:	4630      	mov	r0, r6
 800dc6a:	4639      	mov	r1, r7
 800dc6c:	f7f2 fc34 	bl	80004d8 <__aeabi_dmul>
 800dc70:	a33b      	add	r3, pc, #236	; (adr r3, 800dd60 <__kernel_sin+0x140>)
 800dc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc76:	f7f2 fa77 	bl	8000168 <__aeabi_dsub>
 800dc7a:	4632      	mov	r2, r6
 800dc7c:	463b      	mov	r3, r7
 800dc7e:	f7f2 fc2b 	bl	80004d8 <__aeabi_dmul>
 800dc82:	a339      	add	r3, pc, #228	; (adr r3, 800dd68 <__kernel_sin+0x148>)
 800dc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc88:	f7f2 fa70 	bl	800016c <__adddf3>
 800dc8c:	4632      	mov	r2, r6
 800dc8e:	463b      	mov	r3, r7
 800dc90:	f7f2 fc22 	bl	80004d8 <__aeabi_dmul>
 800dc94:	a336      	add	r3, pc, #216	; (adr r3, 800dd70 <__kernel_sin+0x150>)
 800dc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9a:	f7f2 fa65 	bl	8000168 <__aeabi_dsub>
 800dc9e:	4632      	mov	r2, r6
 800dca0:	463b      	mov	r3, r7
 800dca2:	f7f2 fc19 	bl	80004d8 <__aeabi_dmul>
 800dca6:	a334      	add	r3, pc, #208	; (adr r3, 800dd78 <__kernel_sin+0x158>)
 800dca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcac:	f7f2 fa5e 	bl	800016c <__adddf3>
 800dcb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcb4:	b9dd      	cbnz	r5, 800dcee <__kernel_sin+0xce>
 800dcb6:	4602      	mov	r2, r0
 800dcb8:	460b      	mov	r3, r1
 800dcba:	4630      	mov	r0, r6
 800dcbc:	4639      	mov	r1, r7
 800dcbe:	f7f2 fc0b 	bl	80004d8 <__aeabi_dmul>
 800dcc2:	a32f      	add	r3, pc, #188	; (adr r3, 800dd80 <__kernel_sin+0x160>)
 800dcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc8:	f7f2 fa4e 	bl	8000168 <__aeabi_dsub>
 800dccc:	4642      	mov	r2, r8
 800dcce:	464b      	mov	r3, r9
 800dcd0:	f7f2 fc02 	bl	80004d8 <__aeabi_dmul>
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	460b      	mov	r3, r1
 800dcd8:	4650      	mov	r0, sl
 800dcda:	4621      	mov	r1, r4
 800dcdc:	f7f2 fa46 	bl	800016c <__adddf3>
 800dce0:	4682      	mov	sl, r0
 800dce2:	460c      	mov	r4, r1
 800dce4:	4650      	mov	r0, sl
 800dce6:	4621      	mov	r1, r4
 800dce8:	b006      	add	sp, #24
 800dcea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcee:	2200      	movs	r2, #0
 800dcf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dcf4:	4b24      	ldr	r3, [pc, #144]	; (800dd88 <__kernel_sin+0x168>)
 800dcf6:	f7f2 fbef 	bl	80004d8 <__aeabi_dmul>
 800dcfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dcfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dd02:	4640      	mov	r0, r8
 800dd04:	4649      	mov	r1, r9
 800dd06:	f7f2 fbe7 	bl	80004d8 <__aeabi_dmul>
 800dd0a:	4602      	mov	r2, r0
 800dd0c:	460b      	mov	r3, r1
 800dd0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd12:	f7f2 fa29 	bl	8000168 <__aeabi_dsub>
 800dd16:	4632      	mov	r2, r6
 800dd18:	463b      	mov	r3, r7
 800dd1a:	f7f2 fbdd 	bl	80004d8 <__aeabi_dmul>
 800dd1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd22:	f7f2 fa21 	bl	8000168 <__aeabi_dsub>
 800dd26:	a316      	add	r3, pc, #88	; (adr r3, 800dd80 <__kernel_sin+0x160>)
 800dd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2c:	4606      	mov	r6, r0
 800dd2e:	460f      	mov	r7, r1
 800dd30:	4640      	mov	r0, r8
 800dd32:	4649      	mov	r1, r9
 800dd34:	f7f2 fbd0 	bl	80004d8 <__aeabi_dmul>
 800dd38:	4602      	mov	r2, r0
 800dd3a:	460b      	mov	r3, r1
 800dd3c:	4630      	mov	r0, r6
 800dd3e:	4639      	mov	r1, r7
 800dd40:	f7f2 fa14 	bl	800016c <__adddf3>
 800dd44:	4602      	mov	r2, r0
 800dd46:	460b      	mov	r3, r1
 800dd48:	4650      	mov	r0, sl
 800dd4a:	4621      	mov	r1, r4
 800dd4c:	f7f2 fa0c 	bl	8000168 <__aeabi_dsub>
 800dd50:	e7c6      	b.n	800dce0 <__kernel_sin+0xc0>
 800dd52:	bf00      	nop
 800dd54:	f3af 8000 	nop.w
 800dd58:	5acfd57c 	.word	0x5acfd57c
 800dd5c:	3de5d93a 	.word	0x3de5d93a
 800dd60:	8a2b9ceb 	.word	0x8a2b9ceb
 800dd64:	3e5ae5e6 	.word	0x3e5ae5e6
 800dd68:	57b1fe7d 	.word	0x57b1fe7d
 800dd6c:	3ec71de3 	.word	0x3ec71de3
 800dd70:	19c161d5 	.word	0x19c161d5
 800dd74:	3f2a01a0 	.word	0x3f2a01a0
 800dd78:	1110f8a6 	.word	0x1110f8a6
 800dd7c:	3f811111 	.word	0x3f811111
 800dd80:	55555549 	.word	0x55555549
 800dd84:	3fc55555 	.word	0x3fc55555
 800dd88:	3fe00000 	.word	0x3fe00000

0800dd8c <fabs>:
 800dd8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dd90:	4619      	mov	r1, r3
 800dd92:	4770      	bx	lr
 800dd94:	0000      	movs	r0, r0
	...

0800dd98 <floor>:
 800dd98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd9c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800dda0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800dda4:	2e13      	cmp	r6, #19
 800dda6:	4607      	mov	r7, r0
 800dda8:	460b      	mov	r3, r1
 800ddaa:	460c      	mov	r4, r1
 800ddac:	4605      	mov	r5, r0
 800ddae:	dc35      	bgt.n	800de1c <floor+0x84>
 800ddb0:	2e00      	cmp	r6, #0
 800ddb2:	da16      	bge.n	800dde2 <floor+0x4a>
 800ddb4:	a336      	add	r3, pc, #216	; (adr r3, 800de90 <floor+0xf8>)
 800ddb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddba:	f7f2 f9d7 	bl	800016c <__adddf3>
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	f7f2 fe19 	bl	80009f8 <__aeabi_dcmpgt>
 800ddc6:	b148      	cbz	r0, 800dddc <floor+0x44>
 800ddc8:	2c00      	cmp	r4, #0
 800ddca:	da5b      	bge.n	800de84 <floor+0xec>
 800ddcc:	2500      	movs	r5, #0
 800ddce:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ddd2:	4a31      	ldr	r2, [pc, #196]	; (800de98 <floor+0x100>)
 800ddd4:	433b      	orrs	r3, r7
 800ddd6:	42ab      	cmp	r3, r5
 800ddd8:	bf18      	it	ne
 800ddda:	4614      	movne	r4, r2
 800dddc:	4623      	mov	r3, r4
 800ddde:	462f      	mov	r7, r5
 800dde0:	e026      	b.n	800de30 <floor+0x98>
 800dde2:	4a2e      	ldr	r2, [pc, #184]	; (800de9c <floor+0x104>)
 800dde4:	fa42 f806 	asr.w	r8, r2, r6
 800dde8:	ea01 0208 	and.w	r2, r1, r8
 800ddec:	4302      	orrs	r2, r0
 800ddee:	d01f      	beq.n	800de30 <floor+0x98>
 800ddf0:	a327      	add	r3, pc, #156	; (adr r3, 800de90 <floor+0xf8>)
 800ddf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf6:	f7f2 f9b9 	bl	800016c <__adddf3>
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	f7f2 fdfb 	bl	80009f8 <__aeabi_dcmpgt>
 800de02:	2800      	cmp	r0, #0
 800de04:	d0ea      	beq.n	800dddc <floor+0x44>
 800de06:	2c00      	cmp	r4, #0
 800de08:	bfbe      	ittt	lt
 800de0a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800de0e:	fa43 f606 	asrlt.w	r6, r3, r6
 800de12:	19a4      	addlt	r4, r4, r6
 800de14:	ea24 0408 	bic.w	r4, r4, r8
 800de18:	2500      	movs	r5, #0
 800de1a:	e7df      	b.n	800dddc <floor+0x44>
 800de1c:	2e33      	cmp	r6, #51	; 0x33
 800de1e:	dd0b      	ble.n	800de38 <floor+0xa0>
 800de20:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800de24:	d104      	bne.n	800de30 <floor+0x98>
 800de26:	4602      	mov	r2, r0
 800de28:	f7f2 f9a0 	bl	800016c <__adddf3>
 800de2c:	4607      	mov	r7, r0
 800de2e:	460b      	mov	r3, r1
 800de30:	4638      	mov	r0, r7
 800de32:	4619      	mov	r1, r3
 800de34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de38:	f04f 32ff 	mov.w	r2, #4294967295
 800de3c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800de40:	fa22 f808 	lsr.w	r8, r2, r8
 800de44:	ea18 0f00 	tst.w	r8, r0
 800de48:	d0f2      	beq.n	800de30 <floor+0x98>
 800de4a:	a311      	add	r3, pc, #68	; (adr r3, 800de90 <floor+0xf8>)
 800de4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de50:	f7f2 f98c 	bl	800016c <__adddf3>
 800de54:	2200      	movs	r2, #0
 800de56:	2300      	movs	r3, #0
 800de58:	f7f2 fdce 	bl	80009f8 <__aeabi_dcmpgt>
 800de5c:	2800      	cmp	r0, #0
 800de5e:	d0bd      	beq.n	800dddc <floor+0x44>
 800de60:	2c00      	cmp	r4, #0
 800de62:	da02      	bge.n	800de6a <floor+0xd2>
 800de64:	2e14      	cmp	r6, #20
 800de66:	d103      	bne.n	800de70 <floor+0xd8>
 800de68:	3401      	adds	r4, #1
 800de6a:	ea25 0508 	bic.w	r5, r5, r8
 800de6e:	e7b5      	b.n	800dddc <floor+0x44>
 800de70:	2301      	movs	r3, #1
 800de72:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800de76:	fa03 f606 	lsl.w	r6, r3, r6
 800de7a:	4435      	add	r5, r6
 800de7c:	42bd      	cmp	r5, r7
 800de7e:	bf38      	it	cc
 800de80:	18e4      	addcc	r4, r4, r3
 800de82:	e7f2      	b.n	800de6a <floor+0xd2>
 800de84:	2500      	movs	r5, #0
 800de86:	462c      	mov	r4, r5
 800de88:	e7a8      	b.n	800dddc <floor+0x44>
 800de8a:	bf00      	nop
 800de8c:	f3af 8000 	nop.w
 800de90:	8800759c 	.word	0x8800759c
 800de94:	7e37e43c 	.word	0x7e37e43c
 800de98:	bff00000 	.word	0xbff00000
 800de9c:	000fffff 	.word	0x000fffff

0800dea0 <matherr>:
 800dea0:	2000      	movs	r0, #0
 800dea2:	4770      	bx	lr
 800dea4:	0000      	movs	r0, r0
	...

0800dea8 <scalbn>:
 800dea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deaa:	4616      	mov	r6, r2
 800deac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800deb0:	4604      	mov	r4, r0
 800deb2:	460d      	mov	r5, r1
 800deb4:	460b      	mov	r3, r1
 800deb6:	b982      	cbnz	r2, 800deda <scalbn+0x32>
 800deb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800debc:	4303      	orrs	r3, r0
 800debe:	d034      	beq.n	800df2a <scalbn+0x82>
 800dec0:	4b2d      	ldr	r3, [pc, #180]	; (800df78 <scalbn+0xd0>)
 800dec2:	2200      	movs	r2, #0
 800dec4:	f7f2 fb08 	bl	80004d8 <__aeabi_dmul>
 800dec8:	4b2c      	ldr	r3, [pc, #176]	; (800df7c <scalbn+0xd4>)
 800deca:	4604      	mov	r4, r0
 800decc:	429e      	cmp	r6, r3
 800dece:	460d      	mov	r5, r1
 800ded0:	da0d      	bge.n	800deee <scalbn+0x46>
 800ded2:	a325      	add	r3, pc, #148	; (adr r3, 800df68 <scalbn+0xc0>)
 800ded4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded8:	e01c      	b.n	800df14 <scalbn+0x6c>
 800deda:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800dede:	42ba      	cmp	r2, r7
 800dee0:	d109      	bne.n	800def6 <scalbn+0x4e>
 800dee2:	4602      	mov	r2, r0
 800dee4:	f7f2 f942 	bl	800016c <__adddf3>
 800dee8:	4604      	mov	r4, r0
 800deea:	460d      	mov	r5, r1
 800deec:	e01d      	b.n	800df2a <scalbn+0x82>
 800deee:	460b      	mov	r3, r1
 800def0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800def4:	3a36      	subs	r2, #54	; 0x36
 800def6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800defa:	4432      	add	r2, r6
 800defc:	428a      	cmp	r2, r1
 800defe:	dd0c      	ble.n	800df1a <scalbn+0x72>
 800df00:	4622      	mov	r2, r4
 800df02:	462b      	mov	r3, r5
 800df04:	a11a      	add	r1, pc, #104	; (adr r1, 800df70 <scalbn+0xc8>)
 800df06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df0a:	f000 f83b 	bl	800df84 <copysign>
 800df0e:	a318      	add	r3, pc, #96	; (adr r3, 800df70 <scalbn+0xc8>)
 800df10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df14:	f7f2 fae0 	bl	80004d8 <__aeabi_dmul>
 800df18:	e7e6      	b.n	800dee8 <scalbn+0x40>
 800df1a:	2a00      	cmp	r2, #0
 800df1c:	dd08      	ble.n	800df30 <scalbn+0x88>
 800df1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800df22:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800df26:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800df2a:	4620      	mov	r0, r4
 800df2c:	4629      	mov	r1, r5
 800df2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df30:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800df34:	da0b      	bge.n	800df4e <scalbn+0xa6>
 800df36:	f24c 3350 	movw	r3, #50000	; 0xc350
 800df3a:	429e      	cmp	r6, r3
 800df3c:	4622      	mov	r2, r4
 800df3e:	462b      	mov	r3, r5
 800df40:	dce0      	bgt.n	800df04 <scalbn+0x5c>
 800df42:	a109      	add	r1, pc, #36	; (adr r1, 800df68 <scalbn+0xc0>)
 800df44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df48:	f000 f81c 	bl	800df84 <copysign>
 800df4c:	e7c1      	b.n	800ded2 <scalbn+0x2a>
 800df4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800df52:	3236      	adds	r2, #54	; 0x36
 800df54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800df58:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800df5c:	4620      	mov	r0, r4
 800df5e:	4629      	mov	r1, r5
 800df60:	2200      	movs	r2, #0
 800df62:	4b07      	ldr	r3, [pc, #28]	; (800df80 <scalbn+0xd8>)
 800df64:	e7d6      	b.n	800df14 <scalbn+0x6c>
 800df66:	bf00      	nop
 800df68:	c2f8f359 	.word	0xc2f8f359
 800df6c:	01a56e1f 	.word	0x01a56e1f
 800df70:	8800759c 	.word	0x8800759c
 800df74:	7e37e43c 	.word	0x7e37e43c
 800df78:	43500000 	.word	0x43500000
 800df7c:	ffff3cb0 	.word	0xffff3cb0
 800df80:	3c900000 	.word	0x3c900000

0800df84 <copysign>:
 800df84:	b530      	push	{r4, r5, lr}
 800df86:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800df8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800df8e:	ea42 0503 	orr.w	r5, r2, r3
 800df92:	4629      	mov	r1, r5
 800df94:	bd30      	pop	{r4, r5, pc}
	...

0800df98 <_init>:
 800df98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df9a:	bf00      	nop
 800df9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df9e:	bc08      	pop	{r3}
 800dfa0:	469e      	mov	lr, r3
 800dfa2:	4770      	bx	lr

0800dfa4 <_fini>:
 800dfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfa6:	bf00      	nop
 800dfa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfaa:	bc08      	pop	{r3}
 800dfac:	469e      	mov	lr, r3
 800dfae:	4770      	bx	lr
