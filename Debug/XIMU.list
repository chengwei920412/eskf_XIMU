
XIMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095c8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001040  080096d8  080096d8  000196d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a718  0800a718  00020388  2**0
                  CONTENTS
  4 .ARM          00000000  0800a718  0800a718  00020388  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a718  0800a718  00020388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a718  0800a718  0001a718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a71c  0800a71c  0001a71c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000388  20000000  0800a720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018a8  20000388  0800aaa8  00020388  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001c30  0800aaa8  00021c30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b32d  00000000  00000000  000203b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005c9d  00000000  00000000  0004b6de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00010f5d  00000000  00000000  0005137b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000014c0  00000000  00000000  000622d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002020  00000000  00000000  00063798  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001bd1a  00000000  00000000  000657b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00017972  00000000  00000000  000814d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00082a2a  00000000  00000000  00098e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0011b86e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e30  00000000  00000000  0011b8ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000388 	.word	0x20000388
 800012c:	00000000 	.word	0x00000000
 8000130:	080096c0 	.word	0x080096c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000038c 	.word	0x2000038c
 800014c:	080096c0 	.word	0x080096c0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8000b68:	b513      	push	{r0, r1, r4, lr}
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8000b6a:	4c13      	ldr	r4, [pc, #76]	; (8000bb8 <set_int_enable+0x50>)
 8000b6c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000b70:	b193      	cbz	r3, 8000b98 <set_int_enable+0x30>
        if (enable)
 8000b72:	b1c0      	cbz	r0, 8000ba6 <set_int_enable+0x3e>
            tmp = BIT_DMP_INT_EN;
 8000b74:	2302      	movs	r3, #2
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
 8000b76:	f88d 3007 	strb.w	r3, [sp, #7]
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8000b7a:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000b7e:	f10d 0307 	add.w	r3, sp, #7
 8000b82:	2201      	movs	r2, #1
 8000b84:	7c49      	ldrb	r1, [r1, #17]
 8000b86:	7800      	ldrb	r0, [r0, #0]
 8000b88:	f002 fa2c 	bl	8002fe4 <i2c_write>
 8000b8c:	b970      	cbnz	r0, 8000bac <set_int_enable+0x44>
            return -1;
        st.chip_cfg.int_enable = tmp;
 8000b8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000b92:	7463      	strb	r3, [r4, #17]
    }
    return 0;
}
 8000b94:	b002      	add	sp, #8
 8000b96:	bd10      	pop	{r4, pc}
        if (!st.chip_cfg.sensors)
 8000b98:	7aa2      	ldrb	r2, [r4, #10]
 8000b9a:	b13a      	cbz	r2, 8000bac <set_int_enable+0x44>
        if (enable && st.chip_cfg.int_enable)
 8000b9c:	b118      	cbz	r0, 8000ba6 <set_int_enable+0x3e>
 8000b9e:	7c62      	ldrb	r2, [r4, #17]
 8000ba0:	b93a      	cbnz	r2, 8000bb2 <set_int_enable+0x4a>
            tmp = BIT_DATA_RDY_EN;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e7e7      	b.n	8000b76 <set_int_enable+0xe>
            tmp = 0x00;
 8000ba6:	f88d 0007 	strb.w	r0, [sp, #7]
 8000baa:	e7e6      	b.n	8000b7a <set_int_enable+0x12>
            return -1;
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	e7f0      	b.n	8000b94 <set_int_enable+0x2c>
            return 0;
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	e7ee      	b.n	8000b94 <set_int_enable+0x2c>
 8000bb6:	bf00      	nop
 8000bb8:	20000000 	.word	0x20000000

08000bbc <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 8000bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8000bbe:	4c4e      	ldr	r4, [pc, #312]	; (8000cf8 <mpu_reset_fifo+0x13c>)
 8000bc0:	7aa3      	ldrb	r3, [r4, #10]
 8000bc2:	b91b      	cbnz	r3, 8000bcc <mpu_reset_fifo+0x10>
        return -1;
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
 8000bc8:	b003      	add	sp, #12
 8000bca:	bd30      	pop	{r4, r5, pc}
    data = 0;
 8000bcc:	2300      	movs	r3, #0
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000bce:	e9d4 1000 	ldrd	r1, r0, [r4]
    data = 0;
 8000bd2:	ad02      	add	r5, sp, #8
 8000bd4:	f805 3d01 	strb.w	r3, [r5, #-1]!
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000bd8:	462b      	mov	r3, r5
 8000bda:	2201      	movs	r2, #1
 8000bdc:	7c49      	ldrb	r1, [r1, #17]
 8000bde:	7800      	ldrb	r0, [r0, #0]
 8000be0:	f002 fa00 	bl	8002fe4 <i2c_write>
 8000be4:	2800      	cmp	r0, #0
 8000be6:	d1ed      	bne.n	8000bc4 <mpu_reset_fifo+0x8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8000be8:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000bec:	462b      	mov	r3, r5
 8000bee:	2201      	movs	r2, #1
 8000bf0:	7949      	ldrb	r1, [r1, #5]
 8000bf2:	7800      	ldrb	r0, [r0, #0]
 8000bf4:	f002 f9f6 	bl	8002fe4 <i2c_write>
 8000bf8:	2800      	cmp	r0, #0
 8000bfa:	d1e3      	bne.n	8000bc4 <mpu_reset_fifo+0x8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000bfc:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000c00:	462b      	mov	r3, r5
 8000c02:	2201      	movs	r2, #1
 8000c04:	7909      	ldrb	r1, [r1, #4]
 8000c06:	7800      	ldrb	r0, [r0, #0]
 8000c08:	f002 f9ec 	bl	8002fe4 <i2c_write>
 8000c0c:	2800      	cmp	r0, #0
 8000c0e:	d1d9      	bne.n	8000bc4 <mpu_reset_fifo+0x8>
 8000c10:	6863      	ldr	r3, [r4, #4]
 8000c12:	7818      	ldrb	r0, [r3, #0]
 8000c14:	6823      	ldr	r3, [r4, #0]
 8000c16:	7919      	ldrb	r1, [r3, #4]
    if (st.chip_cfg.dmp_on) {
 8000c18:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d039      	beq.n	8000c94 <mpu_reset_fifo+0xd8>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8000c20:	230c      	movs	r3, #12
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000c22:	2201      	movs	r2, #1
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8000c24:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000c28:	462b      	mov	r3, r5
 8000c2a:	f002 f9db 	bl	8002fe4 <i2c_write>
 8000c2e:	2800      	cmp	r0, #0
 8000c30:	d1c8      	bne.n	8000bc4 <mpu_reset_fifo+0x8>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000c32:	e9d4 1000 	ldrd	r1, r0, [r4]
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8000c36:	23c0      	movs	r3, #192	; 0xc0
 8000c38:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8000c3c:	7aa3      	ldrb	r3, [r4, #10]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000c3e:	7909      	ldrb	r1, [r1, #4]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8000c40:	07da      	lsls	r2, r3, #31
            data |= BIT_AUX_IF_EN;
 8000c42:	bf44      	itt	mi
 8000c44:	23e0      	movmi	r3, #224	; 0xe0
 8000c46:	f88d 3007 	strbmi.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	462b      	mov	r3, r5
 8000c4e:	7800      	ldrb	r0, [r0, #0]
 8000c50:	f002 f9c8 	bl	8002fe4 <i2c_write>
 8000c54:	2800      	cmp	r0, #0
 8000c56:	d1b5      	bne.n	8000bc4 <mpu_reset_fifo+0x8>
        if (st.chip_cfg.int_enable)
 8000c58:	7c63      	ldrb	r3, [r4, #17]
 8000c5a:	b103      	cbz	r3, 8000c5e <mpu_reset_fifo+0xa2>
            data = BIT_DMP_INT_EN;
 8000c5c:	2302      	movs	r3, #2
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000c5e:	e9d4 1000 	ldrd	r1, r0, [r4]
            data = 0;
 8000c62:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000c66:	2201      	movs	r2, #1
 8000c68:	462b      	mov	r3, r5
 8000c6a:	7c49      	ldrb	r1, [r1, #17]
 8000c6c:	7800      	ldrb	r0, [r0, #0]
 8000c6e:	f002 f9b9 	bl	8002fe4 <i2c_write>
 8000c72:	2800      	cmp	r0, #0
 8000c74:	d1a6      	bne.n	8000bc4 <mpu_reset_fifo+0x8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8000c76:	462b      	mov	r3, r5
        data = 0;
 8000c78:	f88d 0007 	strb.w	r0, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8000c7c:	e9d4 1000 	ldrd	r1, r0, [r4]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8000c80:	2201      	movs	r2, #1
 8000c82:	7949      	ldrb	r1, [r1, #5]
 8000c84:	7800      	ldrb	r0, [r0, #0]
 8000c86:	f002 f9ad 	bl	8002fe4 <i2c_write>
 8000c8a:	3000      	adds	r0, #0
 8000c8c:	bf18      	it	ne
 8000c8e:	2001      	movne	r0, #1
 8000c90:	4240      	negs	r0, r0
 8000c92:	e799      	b.n	8000bc8 <mpu_reset_fifo+0xc>
        data = BIT_FIFO_RST;
 8000c94:	2304      	movs	r3, #4
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000c96:	2201      	movs	r2, #1
        data = BIT_FIFO_RST;
 8000c98:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000c9c:	462b      	mov	r3, r5
 8000c9e:	f002 f9a1 	bl	8002fe4 <i2c_write>
 8000ca2:	2800      	cmp	r0, #0
 8000ca4:	d18e      	bne.n	8000bc4 <mpu_reset_fifo+0x8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8000ca6:	7ca3      	ldrb	r3, [r4, #18]
 8000ca8:	b913      	cbnz	r3, 8000cb0 <mpu_reset_fifo+0xf4>
 8000caa:	7aa3      	ldrb	r3, [r4, #10]
 8000cac:	07db      	lsls	r3, r3, #31
 8000cae:	d421      	bmi.n	8000cf4 <mpu_reset_fifo+0x138>
            data = BIT_FIFO_EN;
 8000cb0:	2340      	movs	r3, #64	; 0x40
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000cb2:	e9d4 1000 	ldrd	r1, r0, [r4]
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8000cb6:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000cba:	2201      	movs	r2, #1
 8000cbc:	462b      	mov	r3, r5
 8000cbe:	7909      	ldrb	r1, [r1, #4]
 8000cc0:	7800      	ldrb	r0, [r0, #0]
 8000cc2:	f002 f98f 	bl	8002fe4 <i2c_write>
 8000cc6:	2800      	cmp	r0, #0
 8000cc8:	f47f af7c 	bne.w	8000bc4 <mpu_reset_fifo+0x8>
        if (st.chip_cfg.int_enable)
 8000ccc:	7c63      	ldrb	r3, [r4, #17]
 8000cce:	b103      	cbz	r3, 8000cd2 <mpu_reset_fifo+0x116>
            data = BIT_DATA_RDY_EN;
 8000cd0:	2301      	movs	r3, #1
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000cd2:	e9d4 1000 	ldrd	r1, r0, [r4]
            data = 0;
 8000cd6:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000cda:	2201      	movs	r2, #1
 8000cdc:	462b      	mov	r3, r5
 8000cde:	7c49      	ldrb	r1, [r1, #17]
 8000ce0:	7800      	ldrb	r0, [r0, #0]
 8000ce2:	f002 f97f 	bl	8002fe4 <i2c_write>
 8000ce6:	2800      	cmp	r0, #0
 8000ce8:	f47f af6c 	bne.w	8000bc4 <mpu_reset_fifo+0x8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8000cec:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000cf0:	4b02      	ldr	r3, [pc, #8]	; (8000cfc <mpu_reset_fifo+0x140>)
 8000cf2:	e7c5      	b.n	8000c80 <mpu_reset_fifo+0xc4>
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8000cf4:	2360      	movs	r3, #96	; 0x60
 8000cf6:	e7dc      	b.n	8000cb2 <mpu_reset_fifo+0xf6>
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	20000010 	.word	0x20000010

08000d00 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8000d00:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8000d02:	4c1a      	ldr	r4, [pc, #104]	; (8000d6c <mpu_set_gyro_fsr+0x6c>)
 8000d04:	7aa3      	ldrb	r3, [r4, #10]
 8000d06:	b913      	cbnz	r3, 8000d0e <mpu_set_gyro_fsr+0xe>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	e01d      	b.n	8000d4a <mpu_set_gyro_fsr+0x4a>
    switch (fsr) {
 8000d0e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000d12:	d024      	beq.n	8000d5e <mpu_set_gyro_fsr+0x5e>
 8000d14:	d81b      	bhi.n	8000d4e <mpu_set_gyro_fsr+0x4e>
 8000d16:	28fa      	cmp	r0, #250	; 0xfa
 8000d18:	d1f6      	bne.n	8000d08 <mpu_set_gyro_fsr+0x8>
        data = INV_FSR_250DPS << 3;
 8000d1a:	2300      	movs	r3, #0
        data = INV_FSR_2000DPS << 3;
 8000d1c:	f88d 3007 	strb.w	r3, [sp, #7]
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8000d20:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000d24:	7a23      	ldrb	r3, [r4, #8]
 8000d26:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8000d2a:	d01c      	beq.n	8000d66 <mpu_set_gyro_fsr+0x66>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8000d2c:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000d30:	f10d 0307 	add.w	r3, sp, #7
 8000d34:	2201      	movs	r2, #1
 8000d36:	7989      	ldrb	r1, [r1, #6]
 8000d38:	7800      	ldrb	r0, [r0, #0]
 8000d3a:	f002 f953 	bl	8002fe4 <i2c_write>
 8000d3e:	2800      	cmp	r0, #0
 8000d40:	d1e2      	bne.n	8000d08 <mpu_set_gyro_fsr+0x8>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
 8000d42:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	7223      	strb	r3, [r4, #8]
    return 0;
}
 8000d4a:	b002      	add	sp, #8
 8000d4c:	bd10      	pop	{r4, pc}
    switch (fsr) {
 8000d4e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000d52:	d006      	beq.n	8000d62 <mpu_set_gyro_fsr+0x62>
 8000d54:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8000d58:	d1d6      	bne.n	8000d08 <mpu_set_gyro_fsr+0x8>
        data = INV_FSR_2000DPS << 3;
 8000d5a:	2318      	movs	r3, #24
 8000d5c:	e7de      	b.n	8000d1c <mpu_set_gyro_fsr+0x1c>
        data = INV_FSR_500DPS << 3;
 8000d5e:	2308      	movs	r3, #8
 8000d60:	e7dc      	b.n	8000d1c <mpu_set_gyro_fsr+0x1c>
        data = INV_FSR_1000DPS << 3;
 8000d62:	2310      	movs	r3, #16
 8000d64:	e7da      	b.n	8000d1c <mpu_set_gyro_fsr+0x1c>
        return 0;
 8000d66:	2000      	movs	r0, #0
 8000d68:	e7ef      	b.n	8000d4a <mpu_set_gyro_fsr+0x4a>
 8000d6a:	bf00      	nop
 8000d6c:	20000000 	.word	0x20000000

08000d70 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8000d70:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8000d72:	4c18      	ldr	r4, [pc, #96]	; (8000dd4 <mpu_set_accel_fsr+0x64>)
 8000d74:	7aa3      	ldrb	r3, [r4, #10]
 8000d76:	b913      	cbnz	r3, 8000d7e <mpu_set_accel_fsr+0xe>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	e01c      	b.n	8000db8 <mpu_set_accel_fsr+0x48>
    switch (fsr) {
 8000d7e:	2804      	cmp	r0, #4
 8000d80:	d022      	beq.n	8000dc8 <mpu_set_accel_fsr+0x58>
 8000d82:	d81b      	bhi.n	8000dbc <mpu_set_accel_fsr+0x4c>
 8000d84:	2802      	cmp	r0, #2
 8000d86:	d1f7      	bne.n	8000d78 <mpu_set_accel_fsr+0x8>
        data = INV_FSR_2G << 3;
 8000d88:	2300      	movs	r3, #0
        data = INV_FSR_16G << 3;
 8000d8a:	f88d 3007 	strb.w	r3, [sp, #7]
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 8000d8e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000d92:	7a63      	ldrb	r3, [r4, #9]
 8000d94:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8000d98:	d01a      	beq.n	8000dd0 <mpu_set_accel_fsr+0x60>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8000d9a:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000d9e:	f10d 0307 	add.w	r3, sp, #7
 8000da2:	2201      	movs	r2, #1
 8000da4:	79c9      	ldrb	r1, [r1, #7]
 8000da6:	7800      	ldrb	r0, [r0, #0]
 8000da8:	f002 f91c 	bl	8002fe4 <i2c_write>
 8000dac:	2800      	cmp	r0, #0
 8000dae:	d1e3      	bne.n	8000d78 <mpu_set_accel_fsr+0x8>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
 8000db0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000db4:	08db      	lsrs	r3, r3, #3
 8000db6:	7263      	strb	r3, [r4, #9]
    return 0;
}
 8000db8:	b002      	add	sp, #8
 8000dba:	bd10      	pop	{r4, pc}
    switch (fsr) {
 8000dbc:	2808      	cmp	r0, #8
 8000dbe:	d005      	beq.n	8000dcc <mpu_set_accel_fsr+0x5c>
 8000dc0:	2810      	cmp	r0, #16
 8000dc2:	d1d9      	bne.n	8000d78 <mpu_set_accel_fsr+0x8>
        data = INV_FSR_16G << 3;
 8000dc4:	2318      	movs	r3, #24
 8000dc6:	e7e0      	b.n	8000d8a <mpu_set_accel_fsr+0x1a>
        data = INV_FSR_4G << 3;
 8000dc8:	2308      	movs	r3, #8
 8000dca:	e7de      	b.n	8000d8a <mpu_set_accel_fsr+0x1a>
        data = INV_FSR_8G << 3;
 8000dcc:	2310      	movs	r3, #16
 8000dce:	e7dc      	b.n	8000d8a <mpu_set_accel_fsr+0x1a>
        return 0;
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	e7f1      	b.n	8000db8 <mpu_set_accel_fsr+0x48>
 8000dd4:	20000000 	.word	0x20000000

08000dd8 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8000dd8:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8000dda:	4c19      	ldr	r4, [pc, #100]	; (8000e40 <mpu_set_lpf+0x68>)
 8000ddc:	7aa3      	ldrb	r3, [r4, #10]
 8000dde:	b91b      	cbnz	r3, 8000de8 <mpu_set_lpf+0x10>
        return -1;
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
        return -1;
    st.chip_cfg.lpf = data;
    return 0;
}
 8000de4:	b002      	add	sp, #8
 8000de6:	bd10      	pop	{r4, pc}
    if (lpf >= 188)
 8000de8:	28bb      	cmp	r0, #187	; 0xbb
 8000dea:	d916      	bls.n	8000e1a <mpu_set_lpf+0x42>
        data = INV_FILTER_188HZ;
 8000dec:	2301      	movs	r3, #1
        data = INV_FILTER_5HZ;
 8000dee:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.lpf == data)
 8000df2:	7ae2      	ldrb	r2, [r4, #11]
 8000df4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d01f      	beq.n	8000e3c <mpu_set_lpf+0x64>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8000dfc:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000e00:	f10d 0307 	add.w	r3, sp, #7
 8000e04:	2201      	movs	r2, #1
 8000e06:	7889      	ldrb	r1, [r1, #2]
 8000e08:	7800      	ldrb	r0, [r0, #0]
 8000e0a:	f002 f8eb 	bl	8002fe4 <i2c_write>
 8000e0e:	2800      	cmp	r0, #0
 8000e10:	d1e6      	bne.n	8000de0 <mpu_set_lpf+0x8>
    st.chip_cfg.lpf = data;
 8000e12:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000e16:	72e3      	strb	r3, [r4, #11]
    return 0;
 8000e18:	e7e4      	b.n	8000de4 <mpu_set_lpf+0xc>
    else if (lpf >= 98)
 8000e1a:	2861      	cmp	r0, #97	; 0x61
 8000e1c:	d901      	bls.n	8000e22 <mpu_set_lpf+0x4a>
        data = INV_FILTER_98HZ;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	e7e5      	b.n	8000dee <mpu_set_lpf+0x16>
    else if (lpf >= 42)
 8000e22:	2829      	cmp	r0, #41	; 0x29
 8000e24:	d901      	bls.n	8000e2a <mpu_set_lpf+0x52>
        data = INV_FILTER_42HZ;
 8000e26:	2303      	movs	r3, #3
 8000e28:	e7e1      	b.n	8000dee <mpu_set_lpf+0x16>
    else if (lpf >= 20)
 8000e2a:	2813      	cmp	r0, #19
 8000e2c:	d901      	bls.n	8000e32 <mpu_set_lpf+0x5a>
        data = INV_FILTER_20HZ;
 8000e2e:	2304      	movs	r3, #4
 8000e30:	e7dd      	b.n	8000dee <mpu_set_lpf+0x16>
    else if (lpf >= 10)
 8000e32:	2809      	cmp	r0, #9
        data = INV_FILTER_10HZ;
 8000e34:	bf8c      	ite	hi
 8000e36:	2305      	movhi	r3, #5
        data = INV_FILTER_5HZ;
 8000e38:	2306      	movls	r3, #6
 8000e3a:	e7d8      	b.n	8000dee <mpu_set_lpf+0x16>
        return 0;
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	e7d1      	b.n	8000de4 <mpu_set_lpf+0xc>
 8000e40:	20000000 	.word	0x20000000

08000e44 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
 8000e44:	b513      	push	{r0, r1, r4, lr}
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8000e46:	b918      	cbnz	r0, 8000e50 <mpu_set_compass_sample_rate+0xc>
        return -1;
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
#else
    return -1;
#endif
}
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd10      	pop	{r4, pc}
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8000e50:	4c0e      	ldr	r4, [pc, #56]	; (8000e8c <mpu_set_compass_sample_rate+0x48>)
 8000e52:	89e3      	ldrh	r3, [r4, #14]
 8000e54:	4283      	cmp	r3, r0
 8000e56:	d3f7      	bcc.n	8000e48 <mpu_set_compass_sample_rate+0x4>
 8000e58:	2864      	cmp	r0, #100	; 0x64
 8000e5a:	d8f5      	bhi.n	8000e48 <mpu_set_compass_sample_rate+0x4>
    div = st.chip_cfg.sample_rate / rate - 1;
 8000e5c:	fbb3 f0f0 	udiv	r0, r3, r0
 8000e60:	ab02      	add	r3, sp, #8
 8000e62:	3801      	subs	r0, #1
 8000e64:	f803 0d01 	strb.w	r0, [r3, #-1]!
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8000e68:	2201      	movs	r2, #1
 8000e6a:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000e6e:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
 8000e72:	7800      	ldrb	r0, [r0, #0]
 8000e74:	f002 f8b6 	bl	8002fe4 <i2c_write>
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	d1e5      	bne.n	8000e48 <mpu_set_compass_sample_rate+0x4>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 8000e7c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000e80:	89e3      	ldrh	r3, [r4, #14]
 8000e82:	3201      	adds	r2, #1
 8000e84:	fb93 f3f2 	sdiv	r3, r3, r2
 8000e88:	8523      	strh	r3, [r4, #40]	; 0x28
    return 0;
 8000e8a:	e7df      	b.n	8000e4c <mpu_set_compass_sample_rate+0x8>
 8000e8c:	20000000 	.word	0x20000000

08000e90 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8000e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <mpu_configure_fifo+0x4c>)
 8000e94:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8000e98:	461e      	mov	r6, r3
 8000e9a:	b9e2      	cbnz	r2, 8000ed6 <mpu_configure_fifo+0x46>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
 8000e9c:	7a9c      	ldrb	r4, [r3, #10]
 8000e9e:	b19c      	cbz	r4, 8000ec8 <mpu_configure_fifo+0x38>
    sensors &= ~INV_XYZ_COMPASS;
 8000ea0:	f000 05fe 	and.w	r5, r0, #254	; 0xfe
            return -1;
        prev = st.chip_cfg.fifo_enable;
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8000ea4:	402c      	ands	r4, r5
        prev = st.chip_cfg.fifo_enable;
 8000ea6:	7c1f      	ldrb	r7, [r3, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8000ea8:	741c      	strb	r4, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 8000eaa:	1b64      	subs	r4, r4, r5
 8000eac:	bf18      	it	ne
 8000eae:	f04f 34ff 	movne.w	r4, #4294967295
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
 8000eb2:	b90d      	cbnz	r5, 8000eb8 <mpu_configure_fifo+0x28>
 8000eb4:	7d18      	ldrb	r0, [r3, #20]
 8000eb6:	b150      	cbz	r0, 8000ece <mpu_configure_fifo+0x3e>
            set_int_enable(1);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f7ff fe55 	bl	8000b68 <set_int_enable>
        else
            set_int_enable(0);
        if (sensors) {
 8000ebe:	b145      	cbz	r5, 8000ed2 <mpu_configure_fifo+0x42>
            if (mpu_reset_fifo()) {
 8000ec0:	f7ff fe7c 	bl	8000bbc <mpu_reset_fifo>
 8000ec4:	b128      	cbz	r0, 8000ed2 <mpu_configure_fifo+0x42>
                st.chip_cfg.fifo_enable = prev;
 8000ec6:	7437      	strb	r7, [r6, #16]
            return -1;
 8000ec8:	f04f 34ff 	mov.w	r4, #4294967295
 8000ecc:	e001      	b.n	8000ed2 <mpu_configure_fifo+0x42>
            set_int_enable(0);
 8000ece:	f7ff fe4b 	bl	8000b68 <set_int_enable>
            }
        }
    }

    return result;
}
 8000ed2:	4620      	mov	r0, r4
 8000ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8000ed6:	2400      	movs	r4, #0
 8000ed8:	e7fb      	b.n	8000ed2 <mpu_configure_fifo+0x42>
 8000eda:	bf00      	nop
 8000edc:	20000000 	.word	0x20000000

08000ee0 <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 8000ee0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 8000ee4:	4d24      	ldr	r5, [pc, #144]	; (8000f78 <mpu_read_fifo_stream+0x98>)
{
 8000ee6:	4606      	mov	r6, r0
    if (!st.chip_cfg.dmp_on)
 8000ee8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
 8000eec:	4689      	mov	r9, r1
 8000eee:	4617      	mov	r7, r2
 8000ef0:	46a8      	mov	r8, r5
    if (!st.chip_cfg.dmp_on)
 8000ef2:	b923      	cbnz	r3, 8000efe <mpu_read_fifo_stream+0x1e>
    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
        return -1;
    fifo_count = (tmp[0] << 8) | tmp[1];
    if (fifo_count < length) {
        more[0] = 0;
        return -1;
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
        return -1;
    more[0] = fifo_count / length - 1;
    return 0;
}
 8000ef8:	b003      	add	sp, #12
 8000efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!st.chip_cfg.sensors)
 8000efe:	7aab      	ldrb	r3, [r5, #10]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0f7      	beq.n	8000ef4 <mpu_read_fifo_stream+0x14>
    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8000f04:	e9d5 1000 	ldrd	r1, r0, [r5]
 8000f08:	ab01      	add	r3, sp, #4
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	7b09      	ldrb	r1, [r1, #12]
 8000f0e:	7800      	ldrb	r0, [r0, #0]
 8000f10:	f002 f876 	bl	8003000 <i2c_read>
 8000f14:	2800      	cmp	r0, #0
 8000f16:	d1ed      	bne.n	8000ef4 <mpu_read_fifo_stream+0x14>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8000f18:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000f1c:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8000f20:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    if (fifo_count < length) {
 8000f24:	42b4      	cmp	r4, r6
 8000f26:	d201      	bcs.n	8000f2c <mpu_read_fifo_stream+0x4c>
        more[0] = 0;
 8000f28:	7038      	strb	r0, [r7, #0]
 8000f2a:	e7e3      	b.n	8000ef4 <mpu_read_fifo_stream+0x14>
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8000f2c:	6868      	ldr	r0, [r5, #4]
 8000f2e:	8843      	ldrh	r3, [r0, #2]
 8000f30:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
 8000f34:	d911      	bls.n	8000f5a <mpu_read_fifo_stream+0x7a>
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8000f36:	6829      	ldr	r1, [r5, #0]
 8000f38:	ab01      	add	r3, sp, #4
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	7cc9      	ldrb	r1, [r1, #19]
 8000f3e:	7800      	ldrb	r0, [r0, #0]
 8000f40:	f002 f85e 	bl	8003000 <i2c_read>
 8000f44:	2800      	cmp	r0, #0
 8000f46:	d1d5      	bne.n	8000ef4 <mpu_read_fifo_stream+0x14>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8000f48:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000f4c:	06db      	lsls	r3, r3, #27
 8000f4e:	d504      	bpl.n	8000f5a <mpu_read_fifo_stream+0x7a>
            mpu_reset_fifo();
 8000f50:	f7ff fe34 	bl	8000bbc <mpu_reset_fifo>
            return -2;
 8000f54:	f06f 0001 	mvn.w	r0, #1
 8000f58:	e7ce      	b.n	8000ef8 <mpu_read_fifo_stream+0x18>
    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 8000f5a:	e9d8 1000 	ldrd	r1, r0, [r8]
 8000f5e:	464b      	mov	r3, r9
 8000f60:	b2f2      	uxtb	r2, r6
 8000f62:	7b49      	ldrb	r1, [r1, #13]
 8000f64:	7800      	ldrb	r0, [r0, #0]
 8000f66:	f002 f84b 	bl	8003000 <i2c_read>
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	d1c2      	bne.n	8000ef4 <mpu_read_fifo_stream+0x14>
    more[0] = fifo_count / length - 1;
 8000f6e:	fbb4 f4f6 	udiv	r4, r4, r6
 8000f72:	3c01      	subs	r4, #1
 8000f74:	703c      	strb	r4, [r7, #0]
    return 0;
 8000f76:	e7bf      	b.n	8000ef8 <mpu_read_fifo_stream+0x18>
 8000f78:	20000000 	.word	0x20000000

08000f7c <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8000f7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 8000f7e:	4c36      	ldr	r4, [pc, #216]	; (8001058 <mpu_set_bypass+0xdc>)
{
 8000f80:	4605      	mov	r5, r0
    if (st.chip_cfg.bypass_mode == bypass_on)
 8000f82:	7ca3      	ldrb	r3, [r4, #18]
 8000f84:	4283      	cmp	r3, r0
 8000f86:	d041      	beq.n	800100c <mpu_set_bypass+0x90>
 8000f88:	6863      	ldr	r3, [r4, #4]
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	7818      	ldrb	r0, [r3, #0]
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	7919      	ldrb	r1, [r3, #4]
 8000f92:	f10d 0307 	add.w	r3, sp, #7
    if (bypass_on) {
 8000f96:	2d00      	cmp	r5, #0
 8000f98:	d03a      	beq.n	8001010 <mpu_set_bypass+0x94>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8000f9a:	f002 f831 	bl	8003000 <i2c_read>
 8000f9e:	b118      	cbz	r0, 8000fa8 <mpu_set_bypass+0x2c>
            return -1;
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
 8000fa4:	b003      	add	sp, #12
 8000fa6:	bd30      	pop	{r4, r5, pc}
        tmp &= ~BIT_AUX_IF_EN;
 8000fa8:	f89d 3007 	ldrb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8000fac:	e9d4 1000 	ldrd	r1, r0, [r4]
        tmp &= ~BIT_AUX_IF_EN;
 8000fb0:	f023 0320 	bic.w	r3, r3, #32
 8000fb4:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f10d 0307 	add.w	r3, sp, #7
 8000fbe:	7909      	ldrb	r1, [r1, #4]
 8000fc0:	7800      	ldrb	r0, [r0, #0]
 8000fc2:	f002 f80f 	bl	8002fe4 <i2c_write>
 8000fc6:	2800      	cmp	r0, #0
 8000fc8:	d1ea      	bne.n	8000fa0 <mpu_set_bypass+0x24>
        delay_ms(3);
 8000fca:	2003      	movs	r0, #3
 8000fcc:	f002 f826 	bl	800301c <delay_ms>
        tmp = BIT_BYPASS_EN;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.active_low_int)
 8000fd6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8000fda:	b113      	cbz	r3, 8000fe2 <mpu_set_bypass+0x66>
            tmp |= BIT_ACTL;
 8000fdc:	2382      	movs	r3, #130	; 0x82
            tmp = 0;
 8000fde:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.latched_int)
 8000fe2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8000fe6:	b12b      	cbz	r3, 8000ff4 <mpu_set_bypass+0x78>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8000fe8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000fec:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000ff0:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8000ff4:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000ff8:	f10d 0307 	add.w	r3, sp, #7
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	7dc9      	ldrb	r1, [r1, #23]
 8001000:	7800      	ldrb	r0, [r0, #0]
 8001002:	f001 ffef 	bl	8002fe4 <i2c_write>
 8001006:	2800      	cmp	r0, #0
 8001008:	d1ca      	bne.n	8000fa0 <mpu_set_bypass+0x24>
    st.chip_cfg.bypass_mode = bypass_on;
 800100a:	74a5      	strb	r5, [r4, #18]
        return 0;
 800100c:	2000      	movs	r0, #0
 800100e:	e7c9      	b.n	8000fa4 <mpu_set_bypass+0x28>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001010:	f001 fff6 	bl	8003000 <i2c_read>
 8001014:	2800      	cmp	r0, #0
 8001016:	d1c3      	bne.n	8000fa0 <mpu_set_bypass+0x24>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001018:	e9d4 1000 	ldrd	r1, r0, [r4]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800101c:	7aa2      	ldrb	r2, [r4, #10]
 800101e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001022:	07d2      	lsls	r2, r2, #31
            tmp |= BIT_AUX_IF_EN;
 8001024:	bf4c      	ite	mi
 8001026:	f043 0320 	orrmi.w	r3, r3, #32
            tmp &= ~BIT_AUX_IF_EN;
 800102a:	f023 0320 	bicpl.w	r3, r3, #32
 800102e:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001032:	2201      	movs	r2, #1
 8001034:	f10d 0307 	add.w	r3, sp, #7
 8001038:	7909      	ldrb	r1, [r1, #4]
 800103a:	7800      	ldrb	r0, [r0, #0]
 800103c:	f001 ffd2 	bl	8002fe4 <i2c_write>
 8001040:	2800      	cmp	r0, #0
 8001042:	d1ad      	bne.n	8000fa0 <mpu_set_bypass+0x24>
        delay_ms(3);
 8001044:	2003      	movs	r0, #3
 8001046:	f001 ffe9 	bl	800301c <delay_ms>
        if (st.chip_cfg.active_low_int)
 800104a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0c5      	beq.n	8000fde <mpu_set_bypass+0x62>
            tmp = BIT_ACTL;
 8001052:	2380      	movs	r3, #128	; 0x80
 8001054:	e7c3      	b.n	8000fde <mpu_set_bypass+0x62>
 8001056:	bf00      	nop
 8001058:	20000000 	.word	0x20000000

0800105c <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 800105c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 800105e:	4c18      	ldr	r4, [pc, #96]	; (80010c0 <mpu_set_int_latched+0x64>)
{
 8001060:	4605      	mov	r5, r0
    if (st.chip_cfg.latched_int == enable)
 8001062:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8001066:	4283      	cmp	r3, r0
 8001068:	d028      	beq.n	80010bc <mpu_set_int_latched+0x60>
        return 0;

    if (enable)
 800106a:	b308      	cbz	r0, 80010b0 <mpu_set_int_latched+0x54>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800106c:	2330      	movs	r3, #48	; 0x30
 800106e:	f88d 3007 	strb.w	r3, [sp, #7]
    else
        tmp = 0;
    if (st.chip_cfg.bypass_mode)
 8001072:	7ca3      	ldrb	r3, [r4, #18]
 8001074:	b12b      	cbz	r3, 8001082 <mpu_set_int_latched+0x26>
        tmp |= BIT_BYPASS_EN;
 8001076:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800107a:	f043 0302 	orr.w	r3, r3, #2
 800107e:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.active_low_int)
 8001082:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001086:	b12b      	cbz	r3, 8001094 <mpu_set_int_latched+0x38>
        tmp |= BIT_ACTL;
 8001088:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800108c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001090:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001094:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001098:	f10d 0307 	add.w	r3, sp, #7
 800109c:	2201      	movs	r2, #1
 800109e:	7dc9      	ldrb	r1, [r1, #23]
 80010a0:	7800      	ldrb	r0, [r0, #0]
 80010a2:	f001 ff9f 	bl	8002fe4 <i2c_write>
 80010a6:	b930      	cbnz	r0, 80010b6 <mpu_set_int_latched+0x5a>
        return -1;
    st.chip_cfg.latched_int = enable;
 80010a8:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
    return 0;
}
 80010ac:	b003      	add	sp, #12
 80010ae:	bd30      	pop	{r4, r5, pc}
        tmp = 0;
 80010b0:	f88d 0007 	strb.w	r0, [sp, #7]
 80010b4:	e7dd      	b.n	8001072 <mpu_set_int_latched+0x16>
        return -1;
 80010b6:	f04f 30ff 	mov.w	r0, #4294967295
 80010ba:	e7f7      	b.n	80010ac <mpu_set_int_latched+0x50>
        return 0;
 80010bc:	2000      	movs	r0, #0
 80010be:	e7f5      	b.n	80010ac <mpu_set_int_latched+0x50>
 80010c0:	20000000 	.word	0x20000000

080010c4 <mpu_lp_accel_mode>:
    if (rate > 40)
 80010c4:	2828      	cmp	r0, #40	; 0x28
{
 80010c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80010c8:	4605      	mov	r5, r0
    if (rate > 40)
 80010ca:	d902      	bls.n	80010d2 <mpu_lp_accel_mode+0xe>
        return -1;
 80010cc:	f04f 35ff 	mov.w	r5, #4294967295
 80010d0:	e013      	b.n	80010fa <mpu_lp_accel_mode+0x36>
 80010d2:	4c28      	ldr	r4, [pc, #160]	; (8001174 <mpu_lp_accel_mode+0xb0>)
    if (!rate) {
 80010d4:	b9a0      	cbnz	r0, 8001100 <mpu_lp_accel_mode+0x3c>
        mpu_set_int_latched(0);
 80010d6:	f7ff ffc1 	bl	800105c <mpu_set_int_latched>
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80010da:	e9d4 1000 	ldrd	r1, r0, [r4]
        tmp[0] = 0;
 80010de:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80010e2:	f8ad 3004 	strh.w	r3, [sp, #4]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80010e6:	2202      	movs	r2, #2
 80010e8:	ab01      	add	r3, sp, #4
 80010ea:	7d49      	ldrb	r1, [r1, #21]
 80010ec:	7800      	ldrb	r0, [r0, #0]
 80010ee:	f001 ff79 	bl	8002fe4 <i2c_write>
 80010f2:	4605      	mov	r5, r0
 80010f4:	2800      	cmp	r0, #0
 80010f6:	d1e9      	bne.n	80010cc <mpu_lp_accel_mode+0x8>
        st.chip_cfg.lp_accel_mode = 0;
 80010f8:	7520      	strb	r0, [r4, #20]
}
 80010fa:	4628      	mov	r0, r5
 80010fc:	b003      	add	sp, #12
 80010fe:	bd30      	pop	{r4, r5, pc}
    mpu_set_int_latched(1);
 8001100:	2001      	movs	r0, #1
 8001102:	f7ff ffab 	bl	800105c <mpu_set_int_latched>
    if (rate == 1)
 8001106:	2d01      	cmp	r5, #1
 8001108:	d122      	bne.n	8001150 <mpu_lp_accel_mode+0x8c>
        tmp[0] = INV_LPA_1_25HZ;
 800110a:	2302      	movs	r3, #2
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 800110c:	e9d4 1000 	ldrd	r1, r0, [r4]
        tmp[0] = INV_LPA_40HZ;
 8001110:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 8001114:	2201      	movs	r2, #1
 8001116:	ab01      	add	r3, sp, #4
 8001118:	7a49      	ldrb	r1, [r1, #9]
 800111a:	7800      	ldrb	r0, [r0, #0]
 800111c:	f001 ff62 	bl	8002fe4 <i2c_write>
 8001120:	2800      	cmp	r0, #0
 8001122:	d1d3      	bne.n	80010cc <mpu_lp_accel_mode+0x8>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 8001124:	e9d4 1000 	ldrd	r1, r0, [r4]
    tmp[0] = BIT_LPA_CYCLE;
 8001128:	2320      	movs	r3, #32
 800112a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 800112e:	2201      	movs	r2, #1
 8001130:	ab01      	add	r3, sp, #4
 8001132:	7d49      	ldrb	r1, [r1, #21]
 8001134:	7800      	ldrb	r0, [r0, #0]
 8001136:	f001 ff55 	bl	8002fe4 <i2c_write>
 800113a:	4605      	mov	r5, r0
 800113c:	2800      	cmp	r0, #0
 800113e:	d1c5      	bne.n	80010cc <mpu_lp_accel_mode+0x8>
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8001140:	2308      	movs	r3, #8
 8001142:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.lp_accel_mode = 1;
 8001144:	2301      	movs	r3, #1
    st.chip_cfg.clk_src = 0;
 8001146:	7320      	strb	r0, [r4, #12]
    st.chip_cfg.lp_accel_mode = 1;
 8001148:	7523      	strb	r3, [r4, #20]
    mpu_configure_fifo(0);
 800114a:	f7ff fea1 	bl	8000e90 <mpu_configure_fifo>
 800114e:	e7d4      	b.n	80010fa <mpu_lp_accel_mode+0x36>
    else if (rate == 2)
 8001150:	2d02      	cmp	r5, #2
 8001152:	d101      	bne.n	8001158 <mpu_lp_accel_mode+0x94>
        tmp[0] = INV_LPA_2_5HZ;
 8001154:	2303      	movs	r3, #3
 8001156:	e7d9      	b.n	800110c <mpu_lp_accel_mode+0x48>
    else if (rate <= 5)
 8001158:	2d05      	cmp	r5, #5
 800115a:	d801      	bhi.n	8001160 <mpu_lp_accel_mode+0x9c>
        tmp[0] = INV_LPA_5HZ;
 800115c:	2304      	movs	r3, #4
 800115e:	e7d5      	b.n	800110c <mpu_lp_accel_mode+0x48>
    else if (rate <= 10)
 8001160:	2d0a      	cmp	r5, #10
 8001162:	d801      	bhi.n	8001168 <mpu_lp_accel_mode+0xa4>
        tmp[0] = INV_LPA_10HZ;
 8001164:	2305      	movs	r3, #5
 8001166:	e7d1      	b.n	800110c <mpu_lp_accel_mode+0x48>
    else if (rate <= 20)
 8001168:	2d14      	cmp	r5, #20
        tmp[0] = INV_LPA_20HZ;
 800116a:	bf94      	ite	ls
 800116c:	2306      	movls	r3, #6
        tmp[0] = INV_LPA_40HZ;
 800116e:	2307      	movhi	r3, #7
 8001170:	e7cc      	b.n	800110c <mpu_lp_accel_mode+0x48>
 8001172:	bf00      	nop
 8001174:	20000000 	.word	0x20000000

08001178 <mpu_set_sample_rate>:
{
 8001178:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!(st.chip_cfg.sensors))
 800117a:	4b22      	ldr	r3, [pc, #136]	; (8001204 <mpu_set_sample_rate+0x8c>)
{
 800117c:	4604      	mov	r4, r0
    if (!(st.chip_cfg.sensors))
 800117e:	7a9a      	ldrb	r2, [r3, #10]
 8001180:	461e      	mov	r6, r3
 8001182:	b922      	cbnz	r2, 800118e <mpu_set_sample_rate+0x16>
        return -1;
 8001184:	f04f 34ff 	mov.w	r4, #4294967295
}
 8001188:	4620      	mov	r0, r4
 800118a:	b002      	add	sp, #8
 800118c:	bd70      	pop	{r4, r5, r6, pc}
    if (st.chip_cfg.dmp_on)
 800118e:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
 8001192:	2d00      	cmp	r5, #0
 8001194:	d1f6      	bne.n	8001184 <mpu_set_sample_rate+0xc>
        if (st.chip_cfg.lp_accel_mode) {
 8001196:	7d1b      	ldrb	r3, [r3, #20]
 8001198:	b14b      	cbz	r3, 80011ae <mpu_set_sample_rate+0x36>
            if (rate && (rate <= 40)) {
 800119a:	1e43      	subs	r3, r0, #1
 800119c:	2b27      	cmp	r3, #39	; 0x27
 800119e:	d803      	bhi.n	80011a8 <mpu_set_sample_rate+0x30>
                mpu_lp_accel_mode(rate);
 80011a0:	f7ff ff90 	bl	80010c4 <mpu_lp_accel_mode>
                return 0;
 80011a4:	462c      	mov	r4, r5
 80011a6:	e7ef      	b.n	8001188 <mpu_set_sample_rate+0x10>
            mpu_lp_accel_mode(0);
 80011a8:	4628      	mov	r0, r5
 80011aa:	f7ff ff8b 	bl	80010c4 <mpu_lp_accel_mode>
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 80011ae:	e9d6 1000 	ldrd	r1, r0, [r6]
 80011b2:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80011b6:	bf28      	it	cs
 80011b8:	f44f 747a 	movcs.w	r4, #1000	; 0x3e8
        data = 1000 / rate - 1;
 80011bc:	2c04      	cmp	r4, #4
 80011be:	bf38      	it	cc
 80011c0:	2404      	movcc	r4, #4
 80011c2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80011c6:	fb95 f4f4 	sdiv	r4, r5, r4
 80011ca:	ab02      	add	r3, sp, #8
 80011cc:	3c01      	subs	r4, #1
 80011ce:	f803 4d01 	strb.w	r4, [r3, #-1]!
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 80011d2:	2201      	movs	r2, #1
 80011d4:	7849      	ldrb	r1, [r1, #1]
 80011d6:	7800      	ldrb	r0, [r0, #0]
 80011d8:	f001 ff04 	bl	8002fe4 <i2c_write>
 80011dc:	4604      	mov	r4, r0
 80011de:	2800      	cmp	r0, #0
 80011e0:	d1d0      	bne.n	8001184 <mpu_set_sample_rate+0xc>
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80011e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 80011e6:	8d30      	ldrh	r0, [r6, #40]	; 0x28
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80011e8:	3301      	adds	r3, #1
 80011ea:	fb95 f5f3 	sdiv	r5, r5, r3
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 80011ee:	2864      	cmp	r0, #100	; 0x64
 80011f0:	bf28      	it	cs
 80011f2:	2064      	movcs	r0, #100	; 0x64
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80011f4:	81f5      	strh	r5, [r6, #14]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 80011f6:	f7ff fe25 	bl	8000e44 <mpu_set_compass_sample_rate>
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 80011fa:	89f0      	ldrh	r0, [r6, #14]
 80011fc:	0840      	lsrs	r0, r0, #1
 80011fe:	f7ff fdeb 	bl	8000dd8 <mpu_set_lpf>
        return 0;
 8001202:	e7c1      	b.n	8001188 <mpu_set_sample_rate+0x10>
 8001204:	20000000 	.word	0x20000000

08001208 <mpu_set_sensors>:
    if (sensors & INV_XYZ_GYRO)
 8001208:	f010 0370 	ands.w	r3, r0, #112	; 0x70
{
 800120c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800120e:	4605      	mov	r5, r0
    if (sensors & INV_XYZ_GYRO)
 8001210:	d014      	beq.n	800123c <mpu_set_sensors+0x34>
        data = INV_CLK_PLL;
 8001212:	2301      	movs	r3, #1
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8001214:	4c49      	ldr	r4, [pc, #292]	; (800133c <mpu_set_sensors+0x134>)
        data = BIT_SLEEP;
 8001216:	f88d 3006 	strb.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 800121a:	e9d4 1000 	ldrd	r1, r0, [r4]
 800121e:	f10d 0306 	add.w	r3, sp, #6
 8001222:	2201      	movs	r2, #1
 8001224:	7d49      	ldrb	r1, [r1, #21]
 8001226:	7800      	ldrb	r0, [r0, #0]
 8001228:	f001 fedc 	bl	8002fe4 <i2c_write>
 800122c:	b150      	cbz	r0, 8001244 <mpu_set_sensors+0x3c>
        st.chip_cfg.sensors = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	72a3      	strb	r3, [r4, #10]
        return -1;
 8001232:	f04f 36ff 	mov.w	r6, #4294967295
}
 8001236:	4630      	mov	r0, r6
 8001238:	b002      	add	sp, #8
 800123a:	bd70      	pop	{r4, r5, r6, pc}
    else if (sensors)
 800123c:	2800      	cmp	r0, #0
 800123e:	d1e9      	bne.n	8001214 <mpu_set_sensors+0xc>
        data = BIT_SLEEP;
 8001240:	2340      	movs	r3, #64	; 0x40
 8001242:	e7e7      	b.n	8001214 <mpu_set_sensors+0xc>
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8001244:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8001248:	2201      	movs	r2, #1
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 800124a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800124e:	7323      	strb	r3, [r4, #12]
    if (!(sensors & INV_X_GYRO))
 8001250:	066b      	lsls	r3, r5, #25
        data |= BIT_STBY_XG;
 8001252:	bf56      	itet	pl
 8001254:	2304      	movpl	r3, #4
    data = 0;
 8001256:	f88d 0006 	strbmi.w	r0, [sp, #6]
        data |= BIT_STBY_XG;
 800125a:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (!(sensors & INV_Y_GYRO))
 800125e:	06ae      	lsls	r6, r5, #26
        data |= BIT_STBY_YG;
 8001260:	bf5e      	ittt	pl
 8001262:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
 8001266:	f043 0302 	orrpl.w	r3, r3, #2
 800126a:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (!(sensors & INV_Z_GYRO))
 800126e:	06e8      	lsls	r0, r5, #27
        data |= BIT_STBY_ZG;
 8001270:	bf5e      	ittt	pl
 8001272:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
 8001276:	f043 0301 	orrpl.w	r3, r3, #1
 800127a:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (!(sensors & INV_XYZ_ACCEL))
 800127e:	0729      	lsls	r1, r5, #28
        data |= BIT_STBY_XYZA;
 8001280:	bf58      	it	pl
 8001282:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8001286:	e9d4 1000 	ldrd	r1, r0, [r4]
        data |= BIT_STBY_XYZA;
 800128a:	bf5c      	itt	pl
 800128c:	f043 0338 	orrpl.w	r3, r3, #56	; 0x38
 8001290:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8001294:	7d89      	ldrb	r1, [r1, #22]
 8001296:	f10d 0306 	add.w	r3, sp, #6
 800129a:	7800      	ldrb	r0, [r0, #0]
 800129c:	f001 fea2 	bl	8002fe4 <i2c_write>
 80012a0:	2800      	cmp	r0, #0
 80012a2:	d1c4      	bne.n	800122e <mpu_set_sensors+0x26>
    if (sensors && (sensors != INV_XYZ_ACCEL))
 80012a4:	f015 0ff7 	tst.w	r5, #247	; 0xf7
 80012a8:	d001      	beq.n	80012ae <mpu_set_sensors+0xa6>
        mpu_set_int_latched(0);
 80012aa:	f7ff fed7 	bl	800105c <mpu_set_int_latched>
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 80012ae:	e9d4 1000 	ldrd	r1, r0, [r4]
 80012b2:	f10d 0307 	add.w	r3, sp, #7
 80012b6:	2201      	movs	r2, #1
 80012b8:	7909      	ldrb	r1, [r1, #4]
 80012ba:	7800      	ldrb	r0, [r0, #0]
 80012bc:	f001 fea0 	bl	8003000 <i2c_read>
 80012c0:	2800      	cmp	r0, #0
 80012c2:	d1b6      	bne.n	8001232 <mpu_set_sensors+0x2a>
    if (sensors & INV_XYZ_COMPASS) {
 80012c4:	07ea      	lsls	r2, r5, #31
        data = AKM_SINGLE_MEASUREMENT;
 80012c6:	bf4c      	ite	mi
 80012c8:	2211      	movmi	r2, #17
        data = AKM_POWER_DOWN;
 80012ca:	2210      	movpl	r2, #16
 80012cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
        data = AKM_SINGLE_MEASUREMENT;
 80012d0:	bf47      	ittee	mi
 80012d2:	f88d 2006 	strbmi.w	r2, [sp, #6]
        user_ctrl |= BIT_AUX_IF_EN;
 80012d6:	f043 0320 	orrmi.w	r3, r3, #32
        user_ctrl &= ~BIT_AUX_IF_EN;
 80012da:	f023 0320 	bicpl.w	r3, r3, #32
        data = AKM_POWER_DOWN;
 80012de:	f88d 2006 	strbpl.w	r2, [sp, #6]
    if (st.chip_cfg.dmp_on)
 80012e2:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
        user_ctrl &= ~BIT_AUX_IF_EN;
 80012e6:	f88d 3007 	strb.w	r3, [sp, #7]
 80012ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (st.chip_cfg.dmp_on)
 80012ee:	b30a      	cbz	r2, 8001334 <mpu_set_sensors+0x12c>
        user_ctrl |= BIT_DMP_EN;
 80012f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
        user_ctrl &= ~BIT_DMP_EN;
 80012f4:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 80012f8:	e9d4 1000 	ldrd	r1, r0, [r4]
 80012fc:	f10d 0306 	add.w	r3, sp, #6
 8001300:	2201      	movs	r2, #1
 8001302:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 8001306:	7800      	ldrb	r0, [r0, #0]
 8001308:	f001 fe6c 	bl	8002fe4 <i2c_write>
 800130c:	2800      	cmp	r0, #0
 800130e:	d190      	bne.n	8001232 <mpu_set_sensors+0x2a>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8001310:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001314:	f10d 0307 	add.w	r3, sp, #7
 8001318:	2201      	movs	r2, #1
 800131a:	7909      	ldrb	r1, [r1, #4]
 800131c:	7800      	ldrb	r0, [r0, #0]
 800131e:	f001 fe61 	bl	8002fe4 <i2c_write>
 8001322:	4606      	mov	r6, r0
 8001324:	2800      	cmp	r0, #0
 8001326:	d184      	bne.n	8001232 <mpu_set_sensors+0x2a>
    st.chip_cfg.lp_accel_mode = 0;
 8001328:	7520      	strb	r0, [r4, #20]
    delay_ms(50);
 800132a:	2032      	movs	r0, #50	; 0x32
    st.chip_cfg.sensors = sensors;
 800132c:	72a5      	strb	r5, [r4, #10]
    delay_ms(50);
 800132e:	f001 fe75 	bl	800301c <delay_ms>
    return 0;
 8001332:	e780      	b.n	8001236 <mpu_set_sensors+0x2e>
        user_ctrl &= ~BIT_DMP_EN;
 8001334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001338:	e7dc      	b.n	80012f4 <mpu_set_sensors+0xec>
 800133a:	bf00      	nop
 800133c:	20000000 	.word	0x20000000

08001340 <mpu_init>:
{
 8001340:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    data[0] = BIT_RESET;
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	ad04      	add	r5, sp, #16
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001346:	4ca1      	ldr	r4, [pc, #644]	; (80015cc <mpu_init+0x28c>)
    data[0] = BIT_RESET;
 8001348:	f805 3d08 	strb.w	r3, [r5, #-8]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800134c:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001350:	462b      	mov	r3, r5
 8001352:	2201      	movs	r2, #1
 8001354:	7d49      	ldrb	r1, [r1, #21]
 8001356:	7800      	ldrb	r0, [r0, #0]
 8001358:	f001 fe44 	bl	8002fe4 <i2c_write>
 800135c:	4606      	mov	r6, r0
 800135e:	b120      	cbz	r0, 800136a <mpu_init+0x2a>
        return -1;
 8001360:	f04f 34ff 	mov.w	r4, #4294967295
}
 8001364:	4620      	mov	r0, r4
 8001366:	b004      	add	sp, #16
 8001368:	bd70      	pop	{r4, r5, r6, pc}
    delay_ms(100);
 800136a:	2064      	movs	r0, #100	; 0x64
 800136c:	f001 fe56 	bl	800301c <delay_ms>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001370:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = 0x00;
 8001374:	f88d 6008 	strb.w	r6, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001378:	462b      	mov	r3, r5
 800137a:	2201      	movs	r2, #1
 800137c:	7d49      	ldrb	r1, [r1, #21]
 800137e:	7800      	ldrb	r0, [r0, #0]
 8001380:	f001 fe30 	bl	8002fe4 <i2c_write>
 8001384:	2800      	cmp	r0, #0
 8001386:	d1eb      	bne.n	8001360 <mpu_init+0x20>
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 8001388:	2348      	movs	r3, #72	; 0x48
   st.chip_cfg.accel_half = 0;
 800138a:	74e0      	strb	r0, [r4, #19]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 800138c:	f88d 3008 	strb.w	r3, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 8001390:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001394:	462b      	mov	r3, r5
 8001396:	2201      	movs	r2, #1
 8001398:	7a09      	ldrb	r1, [r1, #8]
 800139a:	7800      	ldrb	r0, [r0, #0]
 800139c:	f001 fe22 	bl	8002fe4 <i2c_write>
 80013a0:	2800      	cmp	r0, #0
 80013a2:	d1dd      	bne.n	8001360 <mpu_init+0x20>
    st.chip_cfg.sample_rate = 0xFFFF;
 80013a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    st.chip_cfg.lpf = 0xFF;
 80013a8:	2501      	movs	r5, #1
    st.chip_cfg.sample_rate = 0xFFFF;
 80013aa:	81e3      	strh	r3, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 80013ac:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 80013ae:	8523      	strh	r3, [r4, #40]	; 0x28
    st.chip_cfg.gyro_fsr = 0xFF;
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
    st.chip_cfg.bypass_mode = 0xFF;
 80013b4:	22ff      	movs	r2, #255	; 0xff
    st.chip_cfg.lp_accel_mode = 0;
 80013b6:	82a0      	strh	r0, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 80013b8:	f8c4 0016 	str.w	r0, [r4, #22]
 80013bc:	f8c4 001a 	str.w	r0, [r4, #26]
 80013c0:	f8c4 001e 	str.w	r0, [r4, #30]
    st.chip_cfg.dmp_on = 0;
 80013c4:	6260      	str	r0, [r4, #36]	; 0x24
    st.chip_cfg.gyro_fsr = 0xFF;
 80013c6:	60a3      	str	r3, [r4, #8]
    st.chip_cfg.lpf = 0xFF;
 80013c8:	7325      	strb	r5, [r4, #12]
    st.chip_cfg.active_low_int = 1;
 80013ca:	8465      	strh	r5, [r4, #34]	; 0x22
    if (mpu_set_gyro_fsr(2000))
 80013cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    st.chip_cfg.bypass_mode = 0xFF;
 80013d0:	74a2      	strb	r2, [r4, #18]
    if (mpu_set_gyro_fsr(2000))
 80013d2:	f7ff fc95 	bl	8000d00 <mpu_set_gyro_fsr>
 80013d6:	2800      	cmp	r0, #0
 80013d8:	d1c2      	bne.n	8001360 <mpu_init+0x20>
    if (mpu_set_accel_fsr(2))
 80013da:	2002      	movs	r0, #2
 80013dc:	f7ff fcc8 	bl	8000d70 <mpu_set_accel_fsr>
 80013e0:	2800      	cmp	r0, #0
 80013e2:	d1bd      	bne.n	8001360 <mpu_init+0x20>
    if (mpu_set_lpf(42))
 80013e4:	202a      	movs	r0, #42	; 0x2a
 80013e6:	f7ff fcf7 	bl	8000dd8 <mpu_set_lpf>
 80013ea:	2800      	cmp	r0, #0
 80013ec:	d1b8      	bne.n	8001360 <mpu_init+0x20>
    if (mpu_set_sample_rate(1000))
 80013ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013f2:	f7ff fec1 	bl	8001178 <mpu_set_sample_rate>
 80013f6:	2800      	cmp	r0, #0
 80013f8:	d1b2      	bne.n	8001360 <mpu_init+0x20>
    if (mpu_configure_fifo(0))
 80013fa:	f7ff fd49 	bl	8000e90 <mpu_configure_fifo>
 80013fe:	2800      	cmp	r0, #0
 8001400:	d1ae      	bne.n	8001360 <mpu_init+0x20>
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
 8001402:	4628      	mov	r0, r5
 8001404:	f7ff fdba 	bl	8000f7c <mpu_set_bypass>

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8001408:	250c      	movs	r5, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 800140a:	ab01      	add	r3, sp, #4
 800140c:	2201      	movs	r2, #1
 800140e:	2100      	movs	r1, #0
 8001410:	4628      	mov	r0, r5
 8001412:	f001 fdf5 	bl	8003000 <i2c_read>
        if (!result && (data[0] == AKM_WHOAMI))
 8001416:	b918      	cbnz	r0, 8001420 <mpu_init+0xe0>
 8001418:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800141c:	2b48      	cmp	r3, #72	; 0x48
 800141e:	d00c      	beq.n	800143a <mpu_init+0xfa>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8001420:	3501      	adds	r5, #1
 8001422:	b2ed      	uxtb	r5, r5
 8001424:	2d10      	cmp	r5, #16
 8001426:	d1f0      	bne.n	800140a <mpu_init+0xca>
    if (mpu_set_compass_sample_rate(10))
 8001428:	200a      	movs	r0, #10
 800142a:	f7ff fd0b 	bl	8000e44 <mpu_set_compass_sample_rate>
 800142e:	4604      	mov	r4, r0
 8001430:	2800      	cmp	r0, #0
 8001432:	d195      	bne.n	8001360 <mpu_init+0x20>
    mpu_set_sensors(0);
 8001434:	f7ff fee8 	bl	8001208 <mpu_set_sensors>
    return 0;
 8001438:	e794      	b.n	8001364 <mpu_init+0x24>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;

    data[0] = AKM_POWER_DOWN;
 800143a:	2610      	movs	r6, #16
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800143c:	ab01      	add	r3, sp, #4
 800143e:	2201      	movs	r2, #1
 8001440:	210a      	movs	r1, #10
 8001442:	4628      	mov	r0, r5
    st.chip_cfg.compass_addr = akm_addr;
 8001444:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
    data[0] = AKM_POWER_DOWN;
 8001448:	f88d 6004 	strb.w	r6, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800144c:	f001 fdca 	bl	8002fe4 <i2c_write>
 8001450:	2800      	cmp	r0, #0
 8001452:	d1e9      	bne.n	8001428 <mpu_init+0xe8>
        return -1;
    delay_ms(1);
 8001454:	2001      	movs	r0, #1
 8001456:	f001 fde1 	bl	800301c <delay_ms>

    data[0] = AKM_FUSE_ROM_ACCESS;
 800145a:	231f      	movs	r3, #31
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800145c:	2201      	movs	r2, #1
    data[0] = AKM_FUSE_ROM_ACCESS;
 800145e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001462:	210a      	movs	r1, #10
 8001464:	ab01      	add	r3, sp, #4
 8001466:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 800146a:	f001 fdbb 	bl	8002fe4 <i2c_write>
 800146e:	2800      	cmp	r0, #0
 8001470:	d1da      	bne.n	8001428 <mpu_init+0xe8>
        return -1;
    delay_ms(1);
 8001472:	2001      	movs	r0, #1
 8001474:	f001 fdd2 	bl	800301c <delay_ms>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 8001478:	ab01      	add	r3, sp, #4
 800147a:	2203      	movs	r2, #3
 800147c:	4631      	mov	r1, r6
 800147e:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8001482:	f001 fdbd 	bl	8003000 <i2c_read>
 8001486:	2800      	cmp	r0, #0
 8001488:	d1ce      	bne.n	8001428 <mpu_init+0xe8>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 800148a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800148e:	2201      	movs	r2, #1
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8001490:	3380      	adds	r3, #128	; 0x80
 8001492:	85a3      	strh	r3, [r4, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8001494:	f89d 3005 	ldrb.w	r3, [sp, #5]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001498:	210a      	movs	r1, #10
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 800149a:	3380      	adds	r3, #128	; 0x80
 800149c:	85e3      	strh	r3, [r4, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 800149e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80014a2:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 80014a6:	3380      	adds	r3, #128	; 0x80
 80014a8:	8623      	strh	r3, [r4, #48]	; 0x30
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80014aa:	ab01      	add	r3, sp, #4
    data[0] = AKM_POWER_DOWN;
 80014ac:	f88d 6004 	strb.w	r6, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80014b0:	f001 fd98 	bl	8002fe4 <i2c_write>
 80014b4:	4605      	mov	r5, r0
 80014b6:	2800      	cmp	r0, #0
 80014b8:	d1b6      	bne.n	8001428 <mpu_init+0xe8>
        return -1;
    delay_ms(1);
 80014ba:	2001      	movs	r0, #1
 80014bc:	f001 fdae 	bl	800301c <delay_ms>

    mpu_set_bypass(0);
 80014c0:	4628      	mov	r0, r5
 80014c2:	f7ff fd5b 	bl	8000f7c <mpu_set_bypass>

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 80014c6:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = 0x40;
 80014ca:	2340      	movs	r3, #64	; 0x40
 80014cc:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 80014d0:	2201      	movs	r2, #1
 80014d2:	ab01      	add	r3, sp, #4
 80014d4:	7e89      	ldrb	r1, [r1, #26]
 80014d6:	7800      	ldrb	r0, [r0, #0]
 80014d8:	f001 fd84 	bl	8002fe4 <i2c_write>
 80014dc:	2800      	cmp	r0, #0
 80014de:	d1a3      	bne.n	8001428 <mpu_init+0xe8>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 80014e0:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 80014e4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 80014e8:	2201      	movs	r2, #1
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 80014ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014ee:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 80014f2:	7f89      	ldrb	r1, [r1, #30]
 80014f4:	ab01      	add	r3, sp, #4
 80014f6:	7800      	ldrb	r0, [r0, #0]
 80014f8:	f001 fd74 	bl	8002fe4 <i2c_write>
 80014fc:	2800      	cmp	r0, #0
 80014fe:	d193      	bne.n	8001428 <mpu_init+0xe8>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 8001500:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = AKM_REG_ST1;
 8001504:	2302      	movs	r3, #2
 8001506:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 800150a:	2201      	movs	r2, #1
 800150c:	ab01      	add	r3, sp, #4
 800150e:	7fc9      	ldrb	r1, [r1, #31]
 8001510:	7800      	ldrb	r0, [r0, #0]
 8001512:	f001 fd67 	bl	8002fe4 <i2c_write>
 8001516:	2800      	cmp	r0, #0
 8001518:	d186      	bne.n	8001428 <mpu_init+0xe8>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 800151a:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = BIT_SLAVE_EN | 8;
 800151e:	2388      	movs	r3, #136	; 0x88
 8001520:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 8001524:	2201      	movs	r2, #1
 8001526:	ab01      	add	r3, sp, #4
 8001528:	f891 1020 	ldrb.w	r1, [r1, #32]
 800152c:	7800      	ldrb	r0, [r0, #0]
 800152e:	f001 fd59 	bl	8002fe4 <i2c_write>
 8001532:	2800      	cmp	r0, #0
 8001534:	f47f af78 	bne.w	8001428 <mpu_init+0xe8>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8001538:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = st.chip_cfg.compass_addr;
 800153c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8001540:	2201      	movs	r2, #1
    data[0] = st.chip_cfg.compass_addr;
 8001542:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8001546:	f891 1021 	ldrb.w	r1, [r1, #33]	; 0x21
 800154a:	ab01      	add	r3, sp, #4
 800154c:	7800      	ldrb	r0, [r0, #0]
 800154e:	f001 fd49 	bl	8002fe4 <i2c_write>
 8001552:	2800      	cmp	r0, #0
 8001554:	f47f af68 	bne.w	8001428 <mpu_init+0xe8>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8001558:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = AKM_REG_CNTL;
 800155c:	230a      	movs	r3, #10
 800155e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8001562:	2201      	movs	r2, #1
 8001564:	ab01      	add	r3, sp, #4
 8001566:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 800156a:	7800      	ldrb	r0, [r0, #0]
 800156c:	f001 fd3a 	bl	8002fe4 <i2c_write>
 8001570:	2800      	cmp	r0, #0
 8001572:	f47f af59 	bne.w	8001428 <mpu_init+0xe8>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8001576:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = BIT_SLAVE_EN | 1;
 800157a:	2381      	movs	r3, #129	; 0x81
 800157c:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8001580:	2201      	movs	r2, #1
 8001582:	ab01      	add	r3, sp, #4
 8001584:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
 8001588:	7800      	ldrb	r0, [r0, #0]
 800158a:	f001 fd2b 	bl	8002fe4 <i2c_write>
 800158e:	2800      	cmp	r0, #0
 8001590:	f47f af4a 	bne.w	8001428 <mpu_init+0xe8>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 8001594:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = AKM_SINGLE_MEASUREMENT;
 8001598:	2311      	movs	r3, #17
 800159a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 800159e:	2201      	movs	r2, #1
 80015a0:	ab01      	add	r3, sp, #4
 80015a2:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 80015a6:	7800      	ldrb	r0, [r0, #0]
 80015a8:	f001 fd1c 	bl	8002fe4 <i2c_write>
 80015ac:	2800      	cmp	r0, #0
 80015ae:	f47f af3b 	bne.w	8001428 <mpu_init+0xe8>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 80015b2:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = 0x03;
 80015b6:	2303      	movs	r3, #3
 80015b8:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 80015bc:	2201      	movs	r2, #1
 80015be:	ab01      	add	r3, sp, #4
 80015c0:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 80015c4:	7800      	ldrb	r0, [r0, #0]
 80015c6:	f001 fd0d 	bl	8002fe4 <i2c_write>
 80015ca:	e72d      	b.n	8001428 <mpu_init+0xe8>
 80015cc:	20000000 	.word	0x20000000

080015d0 <mpu_write_mem>:
{
 80015d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80015d2:	460d      	mov	r5, r1
    if (!data)
 80015d4:	4616      	mov	r6, r2
 80015d6:	b91a      	cbnz	r2, 80015e0 <mpu_write_mem+0x10>
        return -1;
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80015dc:	b003      	add	sp, #12
 80015de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!st.chip_cfg.sensors)
 80015e0:	4c12      	ldr	r4, [pc, #72]	; (800162c <mpu_write_mem+0x5c>)
 80015e2:	7aa3      	ldrb	r3, [r4, #10]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f7      	beq.n	80015d8 <mpu_write_mem+0x8>
    if (tmp[1] + length > st.hw->bank_size)
 80015e8:	6867      	ldr	r7, [r4, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 80015ea:	0a03      	lsrs	r3, r0, #8
 80015ec:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80015f0:	b2c0      	uxtb	r0, r0
    if (tmp[1] + length > st.hw->bank_size)
 80015f2:	897b      	ldrh	r3, [r7, #10]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80015f4:	f88d 0005 	strb.w	r0, [sp, #5]
    if (tmp[1] + length > st.hw->bank_size)
 80015f8:	4408      	add	r0, r1
 80015fa:	4298      	cmp	r0, r3
 80015fc:	dcec      	bgt.n	80015d8 <mpu_write_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80015fe:	6821      	ldr	r1, [r4, #0]
 8001600:	ab01      	add	r3, sp, #4
 8001602:	2202      	movs	r2, #2
 8001604:	7ec9      	ldrb	r1, [r1, #27]
 8001606:	7838      	ldrb	r0, [r7, #0]
 8001608:	f001 fcec 	bl	8002fe4 <i2c_write>
 800160c:	2800      	cmp	r0, #0
 800160e:	d1e3      	bne.n	80015d8 <mpu_write_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8001610:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001614:	4633      	mov	r3, r6
 8001616:	b2ea      	uxtb	r2, r5
 8001618:	7e09      	ldrb	r1, [r1, #24]
 800161a:	7800      	ldrb	r0, [r0, #0]
 800161c:	f001 fce2 	bl	8002fe4 <i2c_write>
 8001620:	3000      	adds	r0, #0
 8001622:	bf18      	it	ne
 8001624:	2001      	movne	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7d8      	b.n	80015dc <mpu_write_mem+0xc>
 800162a:	bf00      	nop
 800162c:	20000000 	.word	0x20000000

08001630 <mpu_read_mem>:
{
 8001630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001632:	460d      	mov	r5, r1
    if (!data)
 8001634:	4616      	mov	r6, r2
 8001636:	b91a      	cbnz	r2, 8001640 <mpu_read_mem+0x10>
        return -1;
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
}
 800163c:	b003      	add	sp, #12
 800163e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!st.chip_cfg.sensors)
 8001640:	4c12      	ldr	r4, [pc, #72]	; (800168c <mpu_read_mem+0x5c>)
 8001642:	7aa3      	ldrb	r3, [r4, #10]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f7      	beq.n	8001638 <mpu_read_mem+0x8>
    if (tmp[1] + length > st.hw->bank_size)
 8001648:	6867      	ldr	r7, [r4, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 800164a:	0a03      	lsrs	r3, r0, #8
 800164c:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001650:	b2c0      	uxtb	r0, r0
    if (tmp[1] + length > st.hw->bank_size)
 8001652:	897b      	ldrh	r3, [r7, #10]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001654:	f88d 0005 	strb.w	r0, [sp, #5]
    if (tmp[1] + length > st.hw->bank_size)
 8001658:	4408      	add	r0, r1
 800165a:	4298      	cmp	r0, r3
 800165c:	dcec      	bgt.n	8001638 <mpu_read_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800165e:	6821      	ldr	r1, [r4, #0]
 8001660:	ab01      	add	r3, sp, #4
 8001662:	2202      	movs	r2, #2
 8001664:	7ec9      	ldrb	r1, [r1, #27]
 8001666:	7838      	ldrb	r0, [r7, #0]
 8001668:	f001 fcbc 	bl	8002fe4 <i2c_write>
 800166c:	2800      	cmp	r0, #0
 800166e:	d1e3      	bne.n	8001638 <mpu_read_mem+0x8>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8001670:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001674:	4633      	mov	r3, r6
 8001676:	b2ea      	uxtb	r2, r5
 8001678:	7e09      	ldrb	r1, [r1, #24]
 800167a:	7800      	ldrb	r0, [r0, #0]
 800167c:	f001 fcc0 	bl	8003000 <i2c_read>
 8001680:	3000      	adds	r0, #0
 8001682:	bf18      	it	ne
 8001684:	2001      	movne	r0, #1
 8001686:	4240      	negs	r0, r0
 8001688:	e7d8      	b.n	800163c <mpu_read_mem+0xc>
 800168a:	bf00      	nop
 800168c:	20000000 	.word	0x20000000

08001690 <mpu_load_firmware>:
{
 8001690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (st.chip_cfg.dmp_loaded)
 8001694:	4d25      	ldr	r5, [pc, #148]	; (800172c <mpu_load_firmware+0x9c>)
{
 8001696:	b089      	sub	sp, #36	; 0x24
    if (st.chip_cfg.dmp_loaded)
 8001698:	f895 4025 	ldrb.w	r4, [r5, #37]	; 0x25
{
 800169c:	4607      	mov	r7, r0
 800169e:	4689      	mov	r9, r1
 80016a0:	4616      	mov	r6, r2
 80016a2:	9301      	str	r3, [sp, #4]
    if (st.chip_cfg.dmp_loaded)
 80016a4:	b124      	cbz	r4, 80016b0 <mpu_load_firmware+0x20>
        return -1;
 80016a6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80016aa:	b009      	add	sp, #36	; 0x24
 80016ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!firmware)
 80016b0:	2900      	cmp	r1, #0
 80016b2:	d0f8      	beq.n	80016a6 <mpu_load_firmware+0x16>
    for (ii = 0; ii < length; ii += this_write) {
 80016b4:	42bc      	cmp	r4, r7
 80016b6:	d314      	bcc.n	80016e2 <mpu_load_firmware+0x52>
    tmp[0] = start_addr >> 8;
 80016b8:	0a33      	lsrs	r3, r6, #8
 80016ba:	f88d 300c 	strb.w	r3, [sp, #12]
    tmp[1] = start_addr & 0xFF;
 80016be:	f88d 600d 	strb.w	r6, [sp, #13]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 80016c2:	e9d5 1000 	ldrd	r1, r0, [r5]
 80016c6:	ab03      	add	r3, sp, #12
 80016c8:	2202      	movs	r2, #2
 80016ca:	7f49      	ldrb	r1, [r1, #29]
 80016cc:	7800      	ldrb	r0, [r0, #0]
 80016ce:	f001 fc89 	bl	8002fe4 <i2c_write>
 80016d2:	2800      	cmp	r0, #0
 80016d4:	d1e7      	bne.n	80016a6 <mpu_load_firmware+0x16>
    st.chip_cfg.dmp_loaded = 1;
 80016d6:	2301      	movs	r3, #1
 80016d8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 80016dc:	9b01      	ldr	r3, [sp, #4]
 80016de:	84eb      	strh	r3, [r5, #38]	; 0x26
    return 0;
 80016e0:	e7e3      	b.n	80016aa <mpu_load_firmware+0x1a>
        this_write = min(LOAD_CHUNK, length - ii);
 80016e2:	eba7 0804 	sub.w	r8, r7, r4
 80016e6:	f1b8 0f10 	cmp.w	r8, #16
 80016ea:	bfa8      	it	ge
 80016ec:	f04f 0810 	movge.w	r8, #16
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 80016f0:	eb09 0b04 	add.w	fp, r9, r4
        this_write = min(LOAD_CHUNK, length - ii);
 80016f4:	fa1f fa88 	uxth.w	sl, r8
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 80016f8:	465a      	mov	r2, fp
 80016fa:	4651      	mov	r1, sl
 80016fc:	4620      	mov	r0, r4
 80016fe:	f7ff ff67 	bl	80015d0 <mpu_write_mem>
 8001702:	2800      	cmp	r0, #0
 8001704:	d1cf      	bne.n	80016a6 <mpu_load_firmware+0x16>
        if (mpu_read_mem(ii, this_write, cur))
 8001706:	aa04      	add	r2, sp, #16
 8001708:	4651      	mov	r1, sl
 800170a:	4620      	mov	r0, r4
 800170c:	f7ff ff90 	bl	8001630 <mpu_read_mem>
 8001710:	2800      	cmp	r0, #0
 8001712:	d1c8      	bne.n	80016a6 <mpu_load_firmware+0x16>
        if (memcmp(firmware+ii, cur, this_write))
 8001714:	4652      	mov	r2, sl
 8001716:	a904      	add	r1, sp, #16
 8001718:	4658      	mov	r0, fp
 800171a:	f005 fa6d 	bl	8006bf8 <memcmp>
 800171e:	b910      	cbnz	r0, 8001726 <mpu_load_firmware+0x96>
    for (ii = 0; ii < length; ii += this_write) {
 8001720:	4454      	add	r4, sl
 8001722:	b2a4      	uxth	r4, r4
 8001724:	e7c6      	b.n	80016b4 <mpu_load_firmware+0x24>
            return -2;
 8001726:	f06f 0001 	mvn.w	r0, #1
 800172a:	e7be      	b.n	80016aa <mpu_load_firmware+0x1a>
 800172c:	20000000 	.word	0x20000000

08001730 <mpu_set_dmp_state>:
{
 8001730:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (st.chip_cfg.dmp_on == enable)
 8001732:	4d1c      	ldr	r5, [pc, #112]	; (80017a4 <mpu_set_dmp_state+0x74>)
{
 8001734:	4604      	mov	r4, r0
    if (st.chip_cfg.dmp_on == enable)
 8001736:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800173a:	4283      	cmp	r3, r0
 800173c:	d01d      	beq.n	800177a <mpu_set_dmp_state+0x4a>
    if (enable) {
 800173e:	b1f8      	cbz	r0, 8001780 <mpu_set_dmp_state+0x50>
        if (!st.chip_cfg.dmp_loaded)
 8001740:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8001744:	b35b      	cbz	r3, 800179e <mpu_set_dmp_state+0x6e>
        tmp = 0;
 8001746:	2400      	movs	r4, #0
        set_int_enable(0);
 8001748:	2000      	movs	r0, #0
 800174a:	f7ff fa0d 	bl	8000b68 <set_int_enable>
        mpu_set_bypass(0);
 800174e:	2000      	movs	r0, #0
 8001750:	f7ff fc14 	bl	8000f7c <mpu_set_bypass>
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8001754:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 8001756:	f7ff fd0f 	bl	8001178 <mpu_set_sample_rate>
        tmp = 0;
 800175a:	ab02      	add	r3, sp, #8
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800175c:	6868      	ldr	r0, [r5, #4]
        tmp = 0;
 800175e:	f803 4d01 	strb.w	r4, [r3, #-1]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001762:	2201      	movs	r2, #1
 8001764:	2123      	movs	r1, #35	; 0x23
 8001766:	7800      	ldrb	r0, [r0, #0]
 8001768:	f001 fc3c 	bl	8002fe4 <i2c_write>
        st.chip_cfg.dmp_on = 1;
 800176c:	2001      	movs	r0, #1
 800176e:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
        set_int_enable(1);
 8001772:	f7ff f9f9 	bl	8000b68 <set_int_enable>
        mpu_reset_fifo();
 8001776:	f7ff fa21 	bl	8000bbc <mpu_reset_fifo>
        return 0;
 800177a:	2000      	movs	r0, #0
}
 800177c:	b003      	add	sp, #12
 800177e:	bd30      	pop	{r4, r5, pc}
        set_int_enable(0);
 8001780:	f7ff f9f2 	bl	8000b68 <set_int_enable>
        tmp = st.chip_cfg.fifo_enable;
 8001784:	7c2a      	ldrb	r2, [r5, #16]
 8001786:	ab02      	add	r3, sp, #8
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001788:	6868      	ldr	r0, [r5, #4]
        tmp = st.chip_cfg.fifo_enable;
 800178a:	f803 2d01 	strb.w	r2, [r3, #-1]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800178e:	2123      	movs	r1, #35	; 0x23
 8001790:	2201      	movs	r2, #1
 8001792:	7800      	ldrb	r0, [r0, #0]
 8001794:	f001 fc26 	bl	8002fe4 <i2c_write>
        st.chip_cfg.dmp_on = 0;
 8001798:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
 800179c:	e7eb      	b.n	8001776 <mpu_set_dmp_state+0x46>
            return -1;
 800179e:	f04f 30ff 	mov.w	r0, #4294967295
 80017a2:	e7eb      	b.n	800177c <mpu_set_dmp_state+0x4c>
 80017a4:	20000000 	.word	0x20000000

080017a8 <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
 80017a8:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 80017aa:	4e2a      	ldr	r6, [pc, #168]	; (8001854 <mpu_get_compass_reg+0xac>)
{
 80017ac:	b085      	sub	sp, #20
    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 80017ae:	7ab3      	ldrb	r3, [r6, #10]
{
 80017b0:	4604      	mov	r4, r0
    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 80017b2:	07db      	lsls	r3, r3, #31
{
 80017b4:	460d      	mov	r5, r1
    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 80017b6:	d404      	bmi.n	80017c2 <mpu_get_compass_reg+0x1a>
        return -1;
 80017b8:	f04f 37ff 	mov.w	r7, #4294967295
        get_ms(timestamp);
    return 0;
#else
    return -1;
#endif
}
 80017bc:	4638      	mov	r0, r7
 80017be:	b005      	add	sp, #20
 80017c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
 80017c2:	e9d6 1000 	ldrd	r1, r0, [r6]
 80017c6:	ab01      	add	r3, sp, #4
 80017c8:	2208      	movs	r2, #8
 80017ca:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 80017ce:	7800      	ldrb	r0, [r0, #0]
 80017d0:	f001 fc16 	bl	8003000 <i2c_read>
 80017d4:	4607      	mov	r7, r0
 80017d6:	2800      	cmp	r0, #0
 80017d8:	d1ee      	bne.n	80017b8 <mpu_get_compass_reg+0x10>
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
 80017da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d130      	bne.n	8001848 <mpu_get_compass_reg+0xa0>
    if (tmp[7] & AKM_OVERFLOW)
 80017e6:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db2f      	blt.n	800184e <mpu_get_compass_reg+0xa6>
    data[0] = (tmp[2] << 8) | tmp[1];
 80017ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80017f2:	f89d 1005 	ldrb.w	r1, [sp, #5]
    data[1] = (tmp[4] << 8) | tmp[3];
 80017f6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    data[0] = (tmp[2] << 8) | tmp[1];
 80017fa:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
    data[1] = (tmp[4] << 8) | tmp[3];
 80017fe:	f89d 3008 	ldrb.w	r3, [sp, #8]
    data[2] = (tmp[6] << 8) | tmp[5];
 8001802:	f89d 000a 	ldrb.w	r0, [sp, #10]
    data[1] = (tmp[4] << 8) | tmp[3];
 8001806:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    data[2] = (tmp[6] << 8) | tmp[5];
 800180a:	f89d 3009 	ldrb.w	r3, [sp, #9]
    data[0] = (tmp[2] << 8) | tmp[1];
 800180e:	b209      	sxth	r1, r1
    data[2] = (tmp[6] << 8) | tmp[5];
 8001810:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    data[1] = (tmp[4] << 8) | tmp[3];
 8001814:	b212      	sxth	r2, r2
    data[2] = (tmp[6] << 8) | tmp[5];
 8001816:	b21b      	sxth	r3, r3
    data[0] = (tmp[2] << 8) | tmp[1];
 8001818:	8021      	strh	r1, [r4, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
 800181a:	8062      	strh	r2, [r4, #2]
    data[2] = (tmp[6] << 8) | tmp[5];
 800181c:	80a3      	strh	r3, [r4, #4]
    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
 800181e:	f9b6 002c 	ldrsh.w	r0, [r6, #44]	; 0x2c
 8001822:	4341      	muls	r1, r0
 8001824:	1209      	asrs	r1, r1, #8
 8001826:	8021      	strh	r1, [r4, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
 8001828:	f9b6 102e 	ldrsh.w	r1, [r6, #46]	; 0x2e
 800182c:	434a      	muls	r2, r1
 800182e:	1212      	asrs	r2, r2, #8
 8001830:	8062      	strh	r2, [r4, #2]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
 8001832:	f9b6 2030 	ldrsh.w	r2, [r6, #48]	; 0x30
 8001836:	4353      	muls	r3, r2
 8001838:	121b      	asrs	r3, r3, #8
 800183a:	80a3      	strh	r3, [r4, #4]
    if (timestamp)
 800183c:	2d00      	cmp	r5, #0
 800183e:	d0bd      	beq.n	80017bc <mpu_get_compass_reg+0x14>
        get_ms(timestamp);
 8001840:	4628      	mov	r0, r5
 8001842:	f001 fbed 	bl	8003020 <get_ms>
 8001846:	e7b9      	b.n	80017bc <mpu_get_compass_reg+0x14>
        return -2;
 8001848:	f06f 0701 	mvn.w	r7, #1
 800184c:	e7b6      	b.n	80017bc <mpu_get_compass_reg+0x14>
        return -3;
 800184e:	f06f 0702 	mvn.w	r7, #2
 8001852:	e7b3      	b.n	80017bc <mpu_get_compass_reg+0x14>
 8001854:	20000000 	.word	0x20000000

08001858 <dmp_enable_gyro_cal.part.0>:
 *  called with @e DMP_FEATURE_SEND_CAL_GYRO, the biases will also be
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
 8001858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
    if (enable) {
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 800185a:	4a08      	ldr	r2, [pc, #32]	; (800187c <dmp_enable_gyro_cal.part.0+0x24>)
 800185c:	ab01      	add	r3, sp, #4
 800185e:	6810      	ldr	r0, [r2, #0]
 8001860:	6851      	ldr	r1, [r2, #4]
 8001862:	7a12      	ldrb	r2, [r2, #8]
 8001864:	c303      	stmia	r3!, {r0, r1}
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8001866:	2109      	movs	r1, #9
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8001868:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800186a:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 800186e:	aa01      	add	r2, sp, #4
 8001870:	f7ff feae 	bl	80015d0 <mpu_write_mem>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    }
}
 8001874:	b005      	add	sp, #20
 8001876:	f85d fb04 	ldr.w	pc, [sp], #4
 800187a:	bf00      	nop
 800187c:	080096d8 	.word	0x080096d8

08001880 <dmp_load_motion_driver_firmware>:
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8001880:	23c8      	movs	r3, #200	; 0xc8
 8001882:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001886:	4902      	ldr	r1, [pc, #8]	; (8001890 <dmp_load_motion_driver_firmware+0x10>)
 8001888:	f640 30f6 	movw	r0, #3062	; 0xbf6
 800188c:	f7ff bf00 	b.w	8001690 <mpu_load_firmware>
 8001890:	08009790 	.word	0x08009790

08001894 <dmp_set_orientation>:
{
 8001894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8001896:	f64c 534c 	movw	r3, #52556	; 0xcd4c
 800189a:	f8ad 3008 	strh.w	r3, [sp, #8]
 800189e:	236c      	movs	r3, #108	; 0x6c
 80018a0:	f88d 300a 	strb.w	r3, [sp, #10]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 80018a4:	f64c 130c 	movw	r3, #51468	; 0xc90c
 80018a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80018ac:	232c      	movs	r3, #44	; 0x2c
    gyro_regs[0] = gyro_axes[orient & 3];
 80018ae:	f000 0103 	and.w	r1, r0, #3
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 80018b2:	f88d 300e 	strb.w	r3, [sp, #14]
    gyro_regs[0] = gyro_axes[orient & 3];
 80018b6:	ab04      	add	r3, sp, #16
 80018b8:	4419      	add	r1, r3
 80018ba:	f811 3c08 	ldrb.w	r3, [r1, #-8]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 80018be:	f3c0 02c1 	ubfx	r2, r0, #3, #2
    gyro_regs[0] = gyro_axes[orient & 3];
 80018c2:	f88d 3000 	strb.w	r3, [sp]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 80018c6:	ab04      	add	r3, sp, #16
 80018c8:	441a      	add	r2, r3
 80018ca:	f812 3c08 	ldrb.w	r3, [r2, #-8]
{
 80018ce:	4604      	mov	r4, r0
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 80018d0:	f88d 3001 	strb.w	r3, [sp, #1]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 80018d4:	f3c0 1381 	ubfx	r3, r0, #6, #2
 80018d8:	a804      	add	r0, sp, #16
 80018da:	4403      	add	r3, r0
 80018dc:	f813 0c08 	ldrb.w	r0, [r3, #-8]
    accel_regs[0] = accel_axes[orient & 3];
 80018e0:	f811 1c04 	ldrb.w	r1, [r1, #-4]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 80018e4:	f812 2c04 	ldrb.w	r2, [r2, #-4]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 80018e8:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 80018ec:	f88d 0002 	strb.w	r0, [sp, #2]
    accel_regs[0] = accel_axes[orient & 3];
 80018f0:	f88d 1004 	strb.w	r1, [sp, #4]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 80018f4:	f88d 2005 	strb.w	r2, [sp, #5]
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 80018f8:	2103      	movs	r1, #3
 80018fa:	466a      	mov	r2, sp
 80018fc:	f240 4026 	movw	r0, #1062	; 0x426
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8001900:	f88d 3006 	strb.w	r3, [sp, #6]
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8001904:	f7ff fe64 	bl	80015d0 <mpu_write_mem>
 8001908:	b118      	cbz	r0, 8001912 <dmp_set_orientation+0x7e>
        return -1;
 800190a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800190e:	b004      	add	sp, #16
 8001910:	bd10      	pop	{r4, pc}
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8001912:	aa01      	add	r2, sp, #4
 8001914:	2103      	movs	r1, #3
 8001916:	f240 402a 	movw	r0, #1066	; 0x42a
 800191a:	f7ff fe59 	bl	80015d0 <mpu_write_mem>
 800191e:	2800      	cmp	r0, #0
 8001920:	d1f3      	bne.n	800190a <dmp_set_orientation+0x76>
    memcpy(gyro_regs, gyro_sign, 3);
 8001922:	f245 6336 	movw	r3, #22070	; 0x5636
 8001926:	f8ad 3000 	strh.w	r3, [sp]
 800192a:	2376      	movs	r3, #118	; 0x76
 800192c:	f88d 3002 	strb.w	r3, [sp, #2]
    memcpy(accel_regs, accel_sign, 3);
 8001930:	f244 6326 	movw	r3, #17958	; 0x4626
 8001934:	f8ad 3004 	strh.w	r3, [sp, #4]
 8001938:	2366      	movs	r3, #102	; 0x66
    if (orient & 4) {
 800193a:	0761      	lsls	r1, r4, #29
    memcpy(accel_regs, accel_sign, 3);
 800193c:	f88d 3006 	strb.w	r3, [sp, #6]
        gyro_regs[0] |= 1;
 8001940:	bf41      	itttt	mi
 8001942:	2337      	movmi	r3, #55	; 0x37
 8001944:	f88d 3000 	strbmi.w	r3, [sp]
        accel_regs[0] |= 1;
 8001948:	2327      	movmi	r3, #39	; 0x27
 800194a:	f88d 3004 	strbmi.w	r3, [sp, #4]
    if (orient & 0x20) {
 800194e:	06a2      	lsls	r2, r4, #26
        gyro_regs[1] |= 1;
 8001950:	bf41      	itttt	mi
 8001952:	2357      	movmi	r3, #87	; 0x57
 8001954:	f88d 3001 	strbmi.w	r3, [sp, #1]
        accel_regs[1] |= 1;
 8001958:	2347      	movmi	r3, #71	; 0x47
 800195a:	f88d 3005 	strbmi.w	r3, [sp, #5]
    if (orient & 0x100) {
 800195e:	05e3      	lsls	r3, r4, #23
        gyro_regs[2] |= 1;
 8001960:	bf42      	ittt	mi
 8001962:	2377      	movmi	r3, #119	; 0x77
 8001964:	f88d 3002 	strbmi.w	r3, [sp, #2]
        accel_regs[2] |= 1;
 8001968:	2367      	movmi	r3, #103	; 0x67
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 800196a:	466a      	mov	r2, sp
 800196c:	f04f 0103 	mov.w	r1, #3
 8001970:	f44f 6088 	mov.w	r0, #1088	; 0x440
        accel_regs[2] |= 1;
 8001974:	bf48      	it	mi
 8001976:	f88d 3006 	strbmi.w	r3, [sp, #6]
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 800197a:	f7ff fe29 	bl	80015d0 <mpu_write_mem>
 800197e:	2800      	cmp	r0, #0
 8001980:	d1c3      	bne.n	800190a <dmp_set_orientation+0x76>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8001982:	aa01      	add	r2, sp, #4
 8001984:	2103      	movs	r1, #3
 8001986:	f240 4031 	movw	r0, #1073	; 0x431
 800198a:	f7ff fe21 	bl	80015d0 <mpu_write_mem>
 800198e:	2800      	cmp	r0, #0
 8001990:	d1bb      	bne.n	800190a <dmp_set_orientation+0x76>
    dmp.orient = orient;
 8001992:	4b01      	ldr	r3, [pc, #4]	; (8001998 <dmp_set_orientation+0x104>)
 8001994:	811c      	strh	r4, [r3, #8]
    return 0;
 8001996:	e7ba      	b.n	800190e <dmp_set_orientation+0x7a>
 8001998:	200003a4 	.word	0x200003a4

0800199c <dmp_set_fifo_rate>:
{
 800199c:	b510      	push	{r4, lr}
 800199e:	4604      	mov	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 80019a0:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <dmp_set_fifo_rate+0x58>)
{
 80019a2:	b086      	sub	sp, #24
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 80019a4:	6810      	ldr	r0, [r2, #0]
 80019a6:	6851      	ldr	r1, [r2, #4]
 80019a8:	ab03      	add	r3, sp, #12
 80019aa:	c303      	stmia	r3!, {r0, r1}
 80019ac:	6890      	ldr	r0, [r2, #8]
    if (rate > DMP_SAMPLE_RATE)
 80019ae:	2cc8      	cmp	r4, #200	; 0xc8
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 80019b0:	6018      	str	r0, [r3, #0]
    if (rate > DMP_SAMPLE_RATE)
 80019b2:	d903      	bls.n	80019bc <dmp_set_fifo_rate+0x20>
        return -1;
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80019b8:	b006      	add	sp, #24
 80019ba:	bd10      	pop	{r4, pc}
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 80019bc:	2300      	movs	r3, #0
 80019be:	f88d 3004 	strb.w	r3, [sp, #4]
    div = DMP_SAMPLE_RATE / rate - 1;
 80019c2:	23c8      	movs	r3, #200	; 0xc8
 80019c4:	fb93 f3f4 	sdiv	r3, r3, r4
    if (mpu_write_mem(D_0_22, 2, tmp))
 80019c8:	aa01      	add	r2, sp, #4
    div = DMP_SAMPLE_RATE / rate - 1;
 80019ca:	3b01      	subs	r3, #1
    if (mpu_write_mem(D_0_22, 2, tmp))
 80019cc:	2102      	movs	r1, #2
 80019ce:	f240 2016 	movw	r0, #534	; 0x216
    tmp[1] = (unsigned char)(div & 0xFF);
 80019d2:	f88d 3005 	strb.w	r3, [sp, #5]
    if (mpu_write_mem(D_0_22, 2, tmp))
 80019d6:	f7ff fdfb 	bl	80015d0 <mpu_write_mem>
 80019da:	2800      	cmp	r0, #0
 80019dc:	d1ea      	bne.n	80019b4 <dmp_set_fifo_rate+0x18>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 80019de:	aa03      	add	r2, sp, #12
 80019e0:	210c      	movs	r1, #12
 80019e2:	f640 20c1 	movw	r0, #2753	; 0xac1
 80019e6:	f7ff fdf3 	bl	80015d0 <mpu_write_mem>
 80019ea:	2800      	cmp	r0, #0
 80019ec:	d1e2      	bne.n	80019b4 <dmp_set_fifo_rate+0x18>
    dmp.fifo_rate = rate;
 80019ee:	4b02      	ldr	r3, [pc, #8]	; (80019f8 <dmp_set_fifo_rate+0x5c>)
 80019f0:	819c      	strh	r4, [r3, #12]
    return 0;
 80019f2:	e7e1      	b.n	80019b8 <dmp_set_fifo_rate+0x1c>
 80019f4:	080096e1 	.word	0x080096e1
 80019f8:	200003a4 	.word	0x200003a4

080019fc <dmp_enable_gyro_cal>:
{
 80019fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (enable) {
 80019fe:	b120      	cbz	r0, 8001a0a <dmp_enable_gyro_cal+0xe>
 8001a00:	f7ff ff2a 	bl	8001858 <dmp_enable_gyro_cal.part.0>
}
 8001a04:	b005      	add	sp, #20
 8001a06:	f85d fb04 	ldr.w	pc, [sp], #4
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8001a0a:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <dmp_enable_gyro_cal+0x2c>)
 8001a0c:	ab01      	add	r3, sp, #4
 8001a0e:	6810      	ldr	r0, [r2, #0]
 8001a10:	6851      	ldr	r1, [r2, #4]
 8001a12:	7a12      	ldrb	r2, [r2, #8]
 8001a14:	c303      	stmia	r3!, {r0, r1}
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8001a16:	2109      	movs	r1, #9
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8001a18:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8001a1a:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8001a1e:	aa01      	add	r2, sp, #4
 8001a20:	f7ff fdd6 	bl	80015d0 <mpu_write_mem>
 8001a24:	e7ee      	b.n	8001a04 <dmp_enable_gyro_cal+0x8>
 8001a26:	bf00      	nop
 8001a28:	080096ed 	.word	0x080096ed

08001a2c <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 8001a2c:	b507      	push	{r0, r1, r2, lr}
    unsigned char regs[4];
    if (enable) {
 8001a2e:	b160      	cbz	r0, 8001a4a <dmp_enable_lp_quat+0x1e>
        regs[0] = DINBC0;
 8001a30:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <dmp_enable_lp_quat+0x24>)
        regs[3] = DINBC6;
    }
    else
        memset(regs, 0x8B, 4);

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8001a32:	aa01      	add	r2, sp, #4
 8001a34:	2104      	movs	r1, #4
 8001a36:	f640 2098 	movw	r0, #2712	; 0xa98
        memset(regs, 0x8B, 4);
 8001a3a:	9301      	str	r3, [sp, #4]
    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8001a3c:	f7ff fdc8 	bl	80015d0 <mpu_write_mem>

    return mpu_reset_fifo();
 8001a40:	f7ff f8bc 	bl	8000bbc <mpu_reset_fifo>
}
 8001a44:	b003      	add	sp, #12
 8001a46:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(regs, 0x8B, 4);
 8001a4a:	f04f 338b 	mov.w	r3, #2341178251	; 0x8b8b8b8b
 8001a4e:	e7f0      	b.n	8001a32 <dmp_enable_lp_quat+0x6>
 8001a50:	c6c4c2c0 	.word	0xc6c4c2c0

08001a54 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 8001a54:	b507      	push	{r0, r1, r2, lr}
    unsigned char regs[4];
    if (enable) {
 8001a56:	b160      	cbz	r0, 8001a72 <dmp_enable_6x_lp_quat+0x1e>
        regs[0] = DINA20;
 8001a58:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <dmp_enable_6x_lp_quat+0x24>)
        regs[2] = DINA30;
        regs[3] = DINA38;
    } else
        memset(regs, 0xA3, 4);

    mpu_write_mem(CFG_8, 4, regs);
 8001a5a:	aa01      	add	r2, sp, #4
 8001a5c:	2104      	movs	r1, #4
 8001a5e:	f640 209e 	movw	r0, #2718	; 0xa9e
        memset(regs, 0xA3, 4);
 8001a62:	9301      	str	r3, [sp, #4]
    mpu_write_mem(CFG_8, 4, regs);
 8001a64:	f7ff fdb4 	bl	80015d0 <mpu_write_mem>

    return mpu_reset_fifo();
 8001a68:	f7ff f8a8 	bl	8000bbc <mpu_reset_fifo>
}
 8001a6c:	b003      	add	sp, #12
 8001a6e:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(regs, 0xA3, 4);
 8001a72:	f04f 33a3 	mov.w	r3, #2745410467	; 0xa3a3a3a3
 8001a76:	e7f0      	b.n	8001a5a <dmp_enable_6x_lp_quat+0x6>
 8001a78:	38302820 	.word	0x38302820

08001a7c <dmp_enable_feature>:
{
 8001a7c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8001a80:	4b44      	ldr	r3, [pc, #272]	; (8001b94 <dmp_enable_feature+0x118>)
 8001a82:	ad04      	add	r5, sp, #16
 8001a84:	f845 3d0c 	str.w	r3, [r5, #-12]!
{
 8001a88:	4604      	mov	r4, r0
    mpu_write_mem(D_0_104, 4, tmp);
 8001a8a:	462a      	mov	r2, r5
 8001a8c:	2104      	movs	r1, #4
 8001a8e:	2068      	movs	r0, #104	; 0x68
 8001a90:	f7ff fd9e 	bl	80015d0 <mpu_write_mem>
    tmp[0] = 0xA3;
 8001a94:	23a3      	movs	r3, #163	; 0xa3
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8001a96:	f014 0740 	ands.w	r7, r4, #64	; 0x40
    tmp[0] = 0xA3;
 8001a9a:	f88d 3004 	strb.w	r3, [sp, #4]
        tmp[1] = 0xC0;
 8001a9e:	bf1f      	itttt	ne
 8001aa0:	23c0      	movne	r3, #192	; 0xc0
 8001aa2:	f88d 3005 	strbne.w	r3, [sp, #5]
        tmp[2] = 0xC8;
 8001aa6:	23c8      	movne	r3, #200	; 0xc8
 8001aa8:	f88d 3006 	strbne.w	r3, [sp, #6]
        tmp[3] = 0xC2;
 8001aac:	bf12      	itee	ne
 8001aae:	23c2      	movne	r3, #194	; 0xc2
        tmp[1] = 0xA3;
 8001ab0:	f88d 3005 	strbeq.w	r3, [sp, #5]
        tmp[2] = 0xA3;
 8001ab4:	f88d 3006 	strbeq.w	r3, [sp, #6]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8001ab8:	f414 78c0 	ands.w	r8, r4, #384	; 0x180
        tmp[3] = 0xA3;
 8001abc:	f88d 3007 	strb.w	r3, [sp, #7]
        tmp[4] = 0xC4;
 8001ac0:	bf15      	itete	ne
 8001ac2:	f64c 43c4 	movwne	r3, #52420	; 0xccc4
        tmp[4] = 0xA3;
 8001ac6:	f24a 33a3 	movweq	r3, #41891	; 0xa3a3
        tmp[4] = 0xC4;
 8001aca:	f8ad 3008 	strhne.w	r3, [sp, #8]
        tmp[4] = 0xA3;
 8001ace:	f8ad 3008 	strheq.w	r3, [sp, #8]
        tmp[5] = 0xCC;
 8001ad2:	bf14      	ite	ne
 8001ad4:	23c6      	movne	r3, #198	; 0xc6
        tmp[5] = 0xA3;
 8001ad6:	23a3      	moveq	r3, #163	; 0xa3
 8001ad8:	f88d 300a 	strb.w	r3, [sp, #10]
    tmp[7] = 0xA3;
 8001adc:	23a3      	movs	r3, #163	; 0xa3
    mpu_write_mem(CFG_15,10,tmp);
 8001ade:	462a      	mov	r2, r5
 8001ae0:	210a      	movs	r1, #10
 8001ae2:	f640 20a7 	movw	r0, #2727	; 0xaa7
    tmp[7] = 0xA3;
 8001ae6:	f88d 300b 	strb.w	r3, [sp, #11]
    tmp[8] = 0xA3;
 8001aea:	f88d 300c 	strb.w	r3, [sp, #12]
    tmp[9] = 0xA3;
 8001aee:	f88d 300d 	strb.w	r3, [sp, #13]
    mpu_write_mem(CFG_15,10,tmp);
 8001af2:	f7ff fd6d 	bl	80015d0 <mpu_write_mem>
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8001af6:	f014 0603 	ands.w	r6, r4, #3
        tmp[0] = DINA20;
 8001afa:	bf14      	ite	ne
 8001afc:	2320      	movne	r3, #32
        tmp[0] = 0xD8;
 8001afe:	23d8      	moveq	r3, #216	; 0xd8
    mpu_write_mem(CFG_27,1,tmp);
 8001b00:	462a      	mov	r2, r5
 8001b02:	2101      	movs	r1, #1
 8001b04:	f640 20b6 	movw	r0, #2742	; 0xab6
        tmp[0] = 0xD8;
 8001b08:	f88d 3004 	strb.w	r3, [sp, #4]
    mpu_write_mem(CFG_27,1,tmp);
 8001b0c:	f7ff fd60 	bl	80015d0 <mpu_write_mem>
    if (mask & DMP_FEATURE_GYRO_CAL)
 8001b10:	f014 0020 	ands.w	r0, r4, #32
 8001b14:	d038      	beq.n	8001b88 <dmp_enable_feature+0x10c>
 8001b16:	f7ff fe9f 	bl	8001858 <dmp_enable_gyro_cal.part.0>
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8001b1a:	f1b8 0f00 	cmp.w	r8, #0
 8001b1e:	d00a      	beq.n	8001b36 <dmp_enable_feature+0xba>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 8001b20:	05e3      	lsls	r3, r4, #23
            tmp[0] = 0xB2;
 8001b22:	bf4c      	ite	mi
 8001b24:	4b1c      	ldrmi	r3, [pc, #112]	; (8001b98 <dmp_enable_feature+0x11c>)
            tmp[0] = DINAC0;
 8001b26:	4b1d      	ldrpl	r3, [pc, #116]	; (8001b9c <dmp_enable_feature+0x120>)
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8001b28:	462a      	mov	r2, r5
 8001b2a:	2104      	movs	r1, #4
 8001b2c:	f640 20a2 	movw	r0, #2722	; 0xaa2
            tmp[0] = DINAC0;
 8001b30:	9301      	str	r3, [sp, #4]
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8001b32:	f7ff fd4d 	bl	80015d0 <mpu_write_mem>
    if (mask & DMP_FEATURE_LP_QUAT)
 8001b36:	f014 0004 	ands.w	r0, r4, #4
        dmp_enable_lp_quat(1);
 8001b3a:	bf18      	it	ne
 8001b3c:	2001      	movne	r0, #1
        dmp_enable_lp_quat(0);
 8001b3e:	f7ff ff75 	bl	8001a2c <dmp_enable_lp_quat>
    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8001b42:	f014 0010 	ands.w	r0, r4, #16
        dmp_enable_6x_lp_quat(1);
 8001b46:	bf18      	it	ne
 8001b48:	2001      	movne	r0, #1
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8001b4a:	4d15      	ldr	r5, [pc, #84]	; (8001ba0 <dmp_enable_feature+0x124>)
        dmp_enable_6x_lp_quat(0);
 8001b4c:	f7ff ff82 	bl	8001a54 <dmp_enable_6x_lp_quat>
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8001b50:	f044 0308 	orr.w	r3, r4, #8
 8001b54:	816b      	strh	r3, [r5, #10]
    mpu_reset_fifo();
 8001b56:	f7ff f831 	bl	8000bbc <mpu_reset_fifo>
 8001b5a:	462b      	mov	r3, r5
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8001b5c:	b9bf      	cbnz	r7, 8001b8e <dmp_enable_feature+0x112>
    dmp.packet_length = 0;
 8001b5e:	73af      	strb	r7, [r5, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8001b60:	f1b8 0f00 	cmp.w	r8, #0
 8001b64:	d002      	beq.n	8001b6c <dmp_enable_feature+0xf0>
        dmp.packet_length += 6;
 8001b66:	7b9a      	ldrb	r2, [r3, #14]
 8001b68:	3206      	adds	r2, #6
 8001b6a:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 8001b6c:	f014 0f14 	tst.w	r4, #20
        dmp.packet_length += 16;
 8001b70:	bf1e      	ittt	ne
 8001b72:	7b9a      	ldrbne	r2, [r3, #14]
 8001b74:	3210      	addne	r2, #16
 8001b76:	739a      	strbne	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8001b78:	b116      	cbz	r6, 8001b80 <dmp_enable_feature+0x104>
        dmp.packet_length += 4;
 8001b7a:	7b9a      	ldrb	r2, [r3, #14]
 8001b7c:	3204      	adds	r2, #4
 8001b7e:	739a      	strb	r2, [r3, #14]
}
 8001b80:	2000      	movs	r0, #0
 8001b82:	b004      	add	sp, #16
 8001b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        dmp_enable_gyro_cal(0);
 8001b88:	f7ff ff38 	bl	80019fc <dmp_enable_gyro_cal>
 8001b8c:	e7c5      	b.n	8001b1a <dmp_enable_feature+0x9e>
        dmp.packet_length += 6;
 8001b8e:	2206      	movs	r2, #6
 8001b90:	73aa      	strb	r2, [r5, #14]
 8001b92:	e7e5      	b.n	8001b60 <dmp_enable_feature+0xe4>
 8001b94:	09e3ca02 	.word	0x09e3ca02
 8001b98:	9bb68bb2 	.word	0x9bb68bb2
 8001b9c:	90b480b0 	.word	0x90b480b0
 8001ba0:	200003a4 	.word	0x200003a4

08001ba4 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 8001ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ba8:	461f      	mov	r7, r3
    unsigned char ii = 0;

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 8001baa:	2300      	movs	r3, #0
{
 8001bac:	b088      	sub	sp, #32
 8001bae:	9c10      	ldr	r4, [sp, #64]	; 0x40

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8001bb0:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8001cc0 <dmp_read_fifo+0x11c>
{
 8001bb4:	4605      	mov	r5, r0
 8001bb6:	460e      	mov	r6, r1
 8001bb8:	4691      	mov	r9, r2
    sensors[0] = 0;
 8001bba:	8023      	strh	r3, [r4, #0]
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8001bbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001bbe:	4669      	mov	r1, sp
 8001bc0:	f89a 000e 	ldrb.w	r0, [sl, #14]
 8001bc4:	f7ff f98c 	bl	8000ee0 <mpu_read_fifo_stream>
 8001bc8:	4680      	mov	r8, r0
 8001bca:	bb58      	cbnz	r0, 8001c24 <dmp_read_fifo+0x80>
        return -1;

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8001bcc:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 8001bd0:	f011 0f14 	tst.w	r1, #20
 8001bd4:	d072      	beq.n	8001cbc <dmp_read_fifo+0x118>
 8001bd6:	9b01      	ldr	r3, [sp, #4]
 8001bd8:	9800      	ldr	r0, [sp, #0]
 8001bda:	fa93 fc83 	rev.w	ip, r3
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8001bde:	f8c9 c004 	str.w	ip, [r9, #4]
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
        quat_q14[1] = quat[1] >> 16;
 8001be2:	ea4f 4c2c 	mov.w	ip, ip, asr #16
        quat_q14[2] = quat[2] >> 16;
        quat_q14[3] = quat[3] >> 16;
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8001be6:	fb0c fc0c 	mul.w	ip, ip, ip
 8001bea:	ba00      	rev	r0, r0
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8001bec:	f8c9 0000 	str.w	r0, [r9]
        quat_q14[0] = quat[0] >> 16;
 8001bf0:	1400      	asrs	r0, r0, #16
 8001bf2:	9b02      	ldr	r3, [sp, #8]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8001bf4:	fb00 c000 	mla	r0, r0, r0, ip
 8001bf8:	ba1b      	rev	r3, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8001bfa:	f8c9 3008 	str.w	r3, [r9, #8]
        quat_q14[2] = quat[2] >> 16;
 8001bfe:	141b      	asrs	r3, r3, #16
 8001c00:	9a03      	ldr	r2, [sp, #12]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8001c02:	fb03 0303 	mla	r3, r3, r3, r0
 8001c06:	ba12      	rev	r2, r2
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8001c08:	f8c9 200c 	str.w	r2, [r9, #12]
        quat_q14[3] = quat[3] >> 16;
 8001c0c:	1412      	asrs	r2, r2, #16
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8001c0e:	fb02 3202 	mla	r2, r2, r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 8001c12:	f102 4271 	add.w	r2, r2, #4043309056	; 0xf1000000
 8001c16:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8001c1a:	d906      	bls.n	8001c2a <dmp_read_fifo+0x86>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 8001c1c:	f7fe ffce 	bl	8000bbc <mpu_reset_fifo>
            sensors[0] = 0;
 8001c20:	f8a4 8000 	strh.w	r8, [r4]
        return -1;
 8001c24:	f04f 38ff 	mov.w	r8, #4294967295
 8001c28:	e044      	b.n	8001cb4 <dmp_read_fifo+0x110>
        ii += 16;
 8001c2a:	2210      	movs	r2, #16
            return -1;
        }
        sensors[0] |= INV_WXYZ_QUAT;
 8001c2c:	8823      	ldrh	r3, [r4, #0]
 8001c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c32:	8023      	strh	r3, [r4, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8001c34:	064b      	lsls	r3, r1, #25
 8001c36:	d51c      	bpl.n	8001c72 <dmp_read_fifo+0xce>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001c38:	ab08      	add	r3, sp, #32
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f813 cc20 	ldrb.w	ip, [r3, #-32]
 8001c40:	f813 0c1f 	ldrb.w	r0, [r3, #-31]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
        ii += 6;
 8001c44:	3206      	adds	r2, #6
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001c46:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8001c4a:	8030      	strh	r0, [r6, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001c4c:	f813 cc1e 	ldrb.w	ip, [r3, #-30]
 8001c50:	f813 0c1d 	ldrb.w	r0, [r3, #-29]
        ii += 6;
 8001c54:	b2d2      	uxtb	r2, r2
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001c56:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8001c5a:	8070      	strh	r0, [r6, #2]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8001c5c:	f813 0c1c 	ldrb.w	r0, [r3, #-28]
 8001c60:	f813 3c1b 	ldrb.w	r3, [r3, #-27]
 8001c64:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001c68:	80b3      	strh	r3, [r6, #4]
        sensors[0] |= INV_XYZ_ACCEL;
 8001c6a:	8823      	ldrh	r3, [r4, #0]
 8001c6c:	f043 0308 	orr.w	r3, r3, #8
 8001c70:	8023      	strh	r3, [r4, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8001c72:	f411 7fc0 	tst.w	r1, #384	; 0x180
 8001c76:	d01a      	beq.n	8001cae <dmp_read_fifo+0x10a>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001c78:	ab08      	add	r3, sp, #32
 8001c7a:	441a      	add	r2, r3
 8001c7c:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 8001c80:	f812 3c1f 	ldrb.w	r3, [r2, #-31]
 8001c84:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001c88:	802b      	strh	r3, [r5, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001c8a:	f812 1c1e 	ldrb.w	r1, [r2, #-30]
 8001c8e:	f812 3c1d 	ldrb.w	r3, [r2, #-29]
 8001c92:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001c96:	806b      	strh	r3, [r5, #2]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8001c98:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 8001c9c:	f812 3c1b 	ldrb.w	r3, [r2, #-27]
 8001ca0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001ca4:	80ab      	strh	r3, [r5, #4]
        ii += 6;
        sensors[0] |= INV_XYZ_GYRO;
 8001ca6:	8823      	ldrh	r3, [r4, #0]
 8001ca8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001cac:	8023      	strh	r3, [r4, #0]
    }

    get_ms(timestamp);
 8001cae:	4638      	mov	r0, r7
 8001cb0:	f001 f9b6 	bl	8003020 <get_ms>
    return 0;
}
 8001cb4:	4640      	mov	r0, r8
 8001cb6:	b008      	add	sp, #32
 8001cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    unsigned char ii = 0;
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	e7b9      	b.n	8001c34 <dmp_read_fifo+0x90>
 8001cc0:	200003a4 	.word	0x200003a4

08001cc4 <DMP_Init>:

int DMP_Init(void){
 8001cc4:	b507      	push	{r0, r1, r2, lr}

	struct int_param_s interrupt_config;//empty

	if (mpu_init(&interrupt_config)){
 8001cc6:	a801      	add	r0, sp, #4
 8001cc8:	f7ff fb3a 	bl	8001340 <mpu_init>
 8001ccc:	b9e8      	cbnz	r0, 8001d0a <DMP_Init+0x46>
		return 1;
	}

	if (mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS)){
 8001cce:	2079      	movs	r0, #121	; 0x79
 8001cd0:	f7ff fa9a 	bl	8001208 <mpu_set_sensors>
 8001cd4:	b9d8      	cbnz	r0, 8001d0e <DMP_Init+0x4a>
		return 2;
	}

	if(dmp_load_motion_driver_firmware()){
 8001cd6:	f7ff fdd3 	bl	8001880 <dmp_load_motion_driver_firmware>
 8001cda:	b9d0      	cbnz	r0, 8001d12 <DMP_Init+0x4e>

		return 4;//ERROR
	}

	if(dmp_set_orientation(0x88)){//set identity matrix
 8001cdc:	2088      	movs	r0, #136	; 0x88
 8001cde:	f7ff fdd9 	bl	8001894 <dmp_set_orientation>
 8001ce2:	b9c0      	cbnz	r0, 8001d16 <DMP_Init+0x52>
	}

	unsigned short dmp_features = DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_SEND_RAW_ACCEL
								| DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL;

	if(dmp_enable_feature(dmp_features)){
 8001ce4:	f44f 70b8 	mov.w	r0, #368	; 0x170
 8001ce8:	f7ff fec8 	bl	8001a7c <dmp_enable_feature>
 8001cec:	b9a8      	cbnz	r0, 8001d1a <DMP_Init+0x56>
		return 6;
	}

	if(dmp_set_fifo_rate(100)){
 8001cee:	2064      	movs	r0, #100	; 0x64
 8001cf0:	f7ff fe54 	bl	800199c <dmp_set_fifo_rate>
 8001cf4:	b998      	cbnz	r0, 8001d1e <DMP_Init+0x5a>
		return 7;
	}

	if (mpu_set_dmp_state(1)){
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f7ff fd1a 	bl	8001730 <mpu_set_dmp_state>
		return 8;
 8001cfc:	2800      	cmp	r0, #0
 8001cfe:	bf14      	ite	ne
 8001d00:	2008      	movne	r0, #8
 8001d02:	2000      	moveq	r0, #0
	}

	return 0;
}
 8001d04:	b003      	add	sp, #12
 8001d06:	f85d fb04 	ldr.w	pc, [sp], #4
		return 1;
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	e7fa      	b.n	8001d04 <DMP_Init+0x40>
		return 2;
 8001d0e:	2002      	movs	r0, #2
 8001d10:	e7f8      	b.n	8001d04 <DMP_Init+0x40>
		return 4;//ERROR
 8001d12:	2004      	movs	r0, #4
 8001d14:	e7f6      	b.n	8001d04 <DMP_Init+0x40>
		return 5;
 8001d16:	2005      	movs	r0, #5
 8001d18:	e7f4      	b.n	8001d04 <DMP_Init+0x40>
		return 6;
 8001d1a:	2006      	movs	r0, #6
 8001d1c:	e7f2      	b.n	8001d04 <DMP_Init+0x40>
		return 7;
 8001d1e:	2007      	movs	r0, #7
 8001d20:	e7f0      	b.n	8001d04 <DMP_Init+0x40>

08001d22 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d22:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d24:	2414      	movs	r4, #20
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d26:	2610      	movs	r6, #16
{
 8001d28:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d2a:	4622      	mov	r2, r4
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	a80c      	add	r0, sp, #48	; 0x30
 8001d30:	f004 ff7c 	bl	8006c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d34:	4622      	mov	r2, r4
 8001d36:	eb0d 0004 	add.w	r0, sp, r4
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	f004 ff76 	bl	8006c2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d40:	4632      	mov	r2, r6
 8001d42:	2100      	movs	r1, #0
 8001d44:	a801      	add	r0, sp, #4
 8001d46:	f004 ff71 	bl	8006c2c <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d4a:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d52:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d56:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d5a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d5e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d60:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d62:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d64:	f002 fe40 	bl	80049e8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d68:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d6a:	2400      	movs	r4, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d6c:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d74:	4629      	mov	r1, r5
 8001d76:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d78:	e9cd 4307 	strd	r4, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d7c:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d7e:	f003 f80b 	bl	8004d98 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d82:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001d84:	9601      	str	r6, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001d86:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d88:	f003 f8c2 	bl	8004f10 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001d8c:	b014      	add	sp, #80	; 0x50
 8001d8e:	bd70      	pop	{r4, r5, r6, pc}

08001d90 <main>:
{
 8001d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ximu_state = XIMU_STATE_STM_INIT;
 8001d94:	2400      	movs	r4, #0
 8001d96:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8001fc4 <main+0x234>
{
 8001d9a:	b08f      	sub	sp, #60	; 0x3c
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9c:	4d7f      	ldr	r5, [pc, #508]	; (8001f9c <main+0x20c>)
	ximu_state = XIMU_STATE_STM_INIT;
 8001d9e:	f889 4000 	strb.w	r4, [r9]
  HAL_Init();
 8001da2:	f001 fbc1 	bl	8003528 <HAL_Init>
  SystemClock_Config();
 8001da6:	f7ff ffbc 	bl	8001d22 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001daa:	4621      	mov	r1, r4
 8001dac:	2210      	movs	r2, #16
 8001dae:	a80a      	add	r0, sp, #40	; 0x28
 8001db0:	f004 ff3c 	bl	8006c2c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db4:	69ab      	ldr	r3, [r5, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001db6:	4622      	mov	r2, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db8:	f043 0310 	orr.w	r3, r3, #16
 8001dbc:	61ab      	str	r3, [r5, #24]
 8001dbe:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001dc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc4:	f003 0310 	and.w	r3, r3, #16
 8001dc8:	9304      	str	r3, [sp, #16]
 8001dca:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dcc:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001dce:	4874      	ldr	r0, [pc, #464]	; (8001fa0 <main+0x210>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd0:	f043 0320 	orr.w	r3, r3, #32
 8001dd4:	61ab      	str	r3, [r5, #24]
 8001dd6:	69ab      	ldr	r3, [r5, #24]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd8:	f04f 0b01 	mov.w	fp, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ddc:	f003 0320 	and.w	r3, r3, #32
 8001de0:	9305      	str	r3, [sp, #20]
 8001de2:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de4:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	f04f 0a02 	mov.w	sl, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	f043 0304 	orr.w	r3, r3, #4
 8001dee:	61ab      	str	r3, [r5, #24]
 8001df0:	69ab      	ldr	r3, [r5, #24]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df2:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	9306      	str	r3, [sp, #24]
 8001dfc:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	69ab      	ldr	r3, [r5, #24]
  htim2.Instance = TIM2;
 8001e00:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8001fc8 <main+0x238>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e04:	f043 0308 	orr.w	r3, r3, #8
 8001e08:	61ab      	str	r3, [r5, #24]
 8001e0a:	69ab      	ldr	r3, [r5, #24]
  htim3.Instance = TIM3;
 8001e0c:	4e65      	ldr	r6, [pc, #404]	; (8001fa4 <main+0x214>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	9307      	str	r3, [sp, #28]
 8001e14:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e16:	f001 fe09 	bl	8003a2c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1e:	a90a      	add	r1, sp, #40	; 0x28
 8001e20:	485f      	ldr	r0, [pc, #380]	; (8001fa0 <main+0x210>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e22:	e9cd 3b0a 	strd	r3, fp, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2c:	f001 fd1e 	bl	800386c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e30:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001e32:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e34:	ea43 030b 	orr.w	r3, r3, fp
 8001e38:	616b      	str	r3, [r5, #20]
 8001e3a:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001e3c:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e3e:	ea03 030b 	and.w	r3, r3, fp
 8001e42:	9303      	str	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001e44:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e46:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001e48:	f001 fbb6 	bl	80035b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001e4c:	200f      	movs	r0, #15
 8001e4e:	f001 fbe7 	bl	8003620 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8001e52:	4d55      	ldr	r5, [pc, #340]	; (8001fa8 <main+0x218>)
  hi2c1.Init.ClockSpeed = 100000;
 8001e54:	4a55      	ldr	r2, [pc, #340]	; (8001fac <main+0x21c>)
 8001e56:	4b56      	ldr	r3, [pc, #344]	; (8001fb0 <main+0x220>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e58:	4628      	mov	r0, r5
  hi2c1.Init.ClockSpeed = 100000;
 8001e5a:	e9c5 2300 	strd	r2, r3, [r5]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8001e62:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e66:	e9c5 3404 	strd	r3, r4, [r5, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e6a:	e9c5 4406 	strd	r4, r4, [r5, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e6e:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e70:	f001 ffa4 	bl	8003dbc <HAL_I2C_Init>
  MX_USB_DEVICE_Init();
 8001e74:	f004 fc68 	bl	8006748 <MX_USB_DEVICE_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e78:	4621      	mov	r1, r4
 8001e7a:	2210      	movs	r2, #16
 8001e7c:	a80a      	add	r0, sp, #40	; 0x28
 8001e7e:	f004 fed5 	bl	8006c2c <memset>
  htim2.Init.Prescaler = 7200;
 8001e82:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
  htim2.Init.Period = 1250;
 8001e86:	f240 42e2 	movw	r2, #1250	; 0x4e2
  htim2.Init.Prescaler = 7200;
 8001e8a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e8e:	4640      	mov	r0, r8
  htim2.Init.Prescaler = 7200;
 8001e90:	e9c8 1300 	strd	r1, r3, [r8]
 8001e94:	9301      	str	r3, [sp, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e96:	e9c8 2403 	strd	r2, r4, [r8, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9a:	e9cd 4408 	strd	r4, r4, [sp, #32]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9e:	f8c8 4008 	str.w	r4, [r8, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea2:	f8c8 4018 	str.w	r4, [r8, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ea6:	f003 f99b 	bl	80051e0 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001eaa:	a90a      	add	r1, sp, #40	; 0x28
 8001eac:	4640      	mov	r0, r8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eae:	970a      	str	r7, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001eb0:	f003 f9ba 	bl	8005228 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eb4:	a908      	add	r1, sp, #32
 8001eb6:	4640      	mov	r0, r8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb8:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ebc:	f003 fa48 	bl	8005350 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	2210      	movs	r2, #16
 8001ec4:	a80a      	add	r0, sp, #40	; 0x28
 8001ec6:	f004 feb1 	bl	8006c2c <memset>
  htim3.Init.Prescaler = 7200;
 8001eca:	9b01      	ldr	r3, [sp, #4]
  htim3.Instance = TIM3;
 8001ecc:	4a39      	ldr	r2, [pc, #228]	; (8001fb4 <main+0x224>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ece:	e9c6 3401 	strd	r3, r4, [r6, #4]
  htim3.Init.Period = 50;
 8001ed2:	2332      	movs	r3, #50	; 0x32
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ed4:	4630      	mov	r0, r6
  htim3.Instance = TIM3;
 8001ed6:	6032      	str	r2, [r6, #0]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed8:	e9c6 3403 	strd	r3, r4, [r6, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001edc:	e9cd 4408 	strd	r4, r4, [sp, #32]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee0:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ee2:	f003 f97d 	bl	80051e0 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ee6:	a90a      	add	r1, sp, #40	; 0x28
 8001ee8:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eea:	970a      	str	r7, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001eec:	f003 f99c 	bl	8005228 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ef0:	a908      	add	r1, sp, #32
 8001ef2:	4630      	mov	r0, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef4:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ef8:	f003 fa2a 	bl	8005350 <HAL_TIMEx_MasterConfigSynchronization>
  huart1.Init.BaudRate = 115200;
 8001efc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8001f00:	4f2d      	ldr	r7, [pc, #180]	; (8001fb8 <main+0x228>)
  huart1.Init.BaudRate = 115200;
 8001f02:	482e      	ldr	r0, [pc, #184]	; (8001fbc <main+0x22c>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f04:	e9c7 4402 	strd	r4, r4, [r7, #8]
  huart1.Init.BaudRate = 115200;
 8001f08:	e9c7 0300 	strd	r0, r3, [r7]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f0c:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f0e:	4638      	mov	r0, r7
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f10:	e9c7 3405 	strd	r3, r4, [r7, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f14:	613c      	str	r4, [r7, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f16:	61fc      	str	r4, [r7, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f18:	f003 fa82 	bl	8005420 <HAL_UART_Init>
  systickInit();
 8001f1c:	f001 faac 	bl	8003478 <systickInit>
  HAL_TIM_Base_Start_IT(&htim2);
 8001f20:	4640      	mov	r0, r8
 8001f22:	f003 f86d 	bl	8005000 <HAL_TIM_Base_Start_IT>
  led_set(LED_INIT);
 8001f26:	20cc      	movs	r0, #204	; 0xcc
 8001f28:	f001 f850 	bl	8002fcc <led_set>
  HAL_Delay(1000);//blink to show system (stm32, especially the crystal) is ok
 8001f2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f30:	f001 fb1e 	bl	8003570 <HAL_Delay>
  led_set(LED_FAULT);//Will not notice LED blinking unless the following initialization takes longer than expected
 8001f34:	20aa      	movs	r0, #170	; 0xaa
  ximu_state = XIMU_STATE_DMP_INIT;
 8001f36:	f889 b000 	strb.w	fp, [r9]
  led_set(LED_FAULT);//Will not notice LED blinking unless the following initialization takes longer than expected
 8001f3a:	f001 f847 	bl	8002fcc <led_set>
  mpu_set_i2c(&hi2c1);
 8001f3e:	4628      	mov	r0, r5
 8001f40:	f001 f84a 	bl	8002fd8 <mpu_set_i2c>
  ms5611_set_i2c(&hi2c1);
 8001f44:	4628      	mov	r0, r5
 8001f46:	f001 f871 	bl	800302c <ms5611_set_i2c>
  ms5611_init();
 8001f4a:	f001 f911 	bl	8003170 <ms5611_init>
  ms5611_update();
 8001f4e:	f001 f907 	bl	8003160 <ms5611_update>
  GNSS_set_huart(&huart1);
 8001f52:	4638      	mov	r0, r7
 8001f54:	f000 feac 	bl	8002cb0 <GNSS_set_huart>
  GNSS_Init();
 8001f58:	f000 fef0 	bl	8002d3c <GNSS_Init>
  int dmp_state = DMP_Init();
 8001f5c:	f7ff feb2 	bl	8001cc4 <DMP_Init>
  if (dmp_state){
 8001f60:	4604      	mov	r4, r0
 8001f62:	b100      	cbz	r0, 8001f66 <main+0x1d6>
 8001f64:	e7fe      	b.n	8001f64 <main+0x1d4>
  HAL_TIM_Base_Start_IT(&htim3);//start updating sensor data
 8001f66:	4630      	mov	r0, r6
 8001f68:	f003 f84a 	bl	8005000 <HAL_TIM_Base_Start_IT>
  led_set(LED_DISCONNECTED);//Fault cleared
 8001f6c:	4620      	mov	r0, r4
  ximu_state = XIMU_STATE_GPS_INIT;
 8001f6e:	f889 a000 	strb.w	sl, [r9]
  led_set(LED_DISCONNECTED);//Fault cleared
 8001f72:	f001 f82b 	bl	8002fcc <led_set>
  while (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){
 8001f76:	4c12      	ldr	r4, [pc, #72]	; (8001fc0 <main+0x230>)
 8001f78:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d109      	bne.n	8001f94 <main+0x204>
  led_set(LED_IDLE);//connection formed
 8001f80:	20ff      	movs	r0, #255	; 0xff
 8001f82:	f001 f823 	bl	8002fcc <led_set>
	  led_set(LED_MEASURING);
 8001f86:	20fe      	movs	r0, #254	; 0xfe
 8001f88:	f001 f820 	bl	8002fcc <led_set>
	  HAL_Delay(10);
 8001f8c:	200a      	movs	r0, #10
 8001f8e:	f001 faef 	bl	8003570 <HAL_Delay>
 8001f92:	e7f8      	b.n	8001f86 <main+0x1f6>
	  led_set(LED_DISCONNECTED);//wait for connection
 8001f94:	2000      	movs	r0, #0
 8001f96:	f001 f819 	bl	8002fcc <led_set>
 8001f9a:	e7ed      	b.n	8001f78 <main+0x1e8>
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40011000 	.word	0x40011000
 8001fa4:	200006f4 	.word	0x200006f4
 8001fa8:	200006a0 	.word	0x200006a0
 8001fac:	40005400 	.word	0x40005400
 8001fb0:	000186a0 	.word	0x000186a0
 8001fb4:	40000400 	.word	0x40000400
 8001fb8:	20000794 	.word	0x20000794
 8001fbc:	40013800 	.word	0x40013800
 8001fc0:	20000d2c 	.word	0x20000d2c
 8001fc4:	20000790 	.word	0x20000790
 8001fc8:	200007d8 	.word	0x200007d8

08001fcc <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fcc:	4770      	bx	lr
	...

08001fd0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fd0:	4b0e      	ldr	r3, [pc, #56]	; (800200c <HAL_MspInit+0x3c>)
{
 8001fd2:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fd4:	699a      	ldr	r2, [r3, #24]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	619a      	str	r2, [r3, #24]
 8001fdc:	699a      	ldr	r2, [r3, #24]
 8001fde:	f002 0201 	and.w	r2, r2, #1
 8001fe2:	9200      	str	r2, [sp, #0]
 8001fe4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe6:	69da      	ldr	r2, [r3, #28]
 8001fe8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fec:	61da      	str	r2, [r3, #28]
 8001fee:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST 
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8001ff0:	4a07      	ldr	r2, [pc, #28]	; (8002010 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8001ffa:	6853      	ldr	r3, [r2, #4]
 8001ffc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002000:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002004:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002006:	b002      	add	sp, #8
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000
 8002010:	40010000 	.word	0x40010000

08002014 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002014:	b510      	push	{r4, lr}
 8002016:	4604      	mov	r4, r0
 8002018:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201a:	2210      	movs	r2, #16
 800201c:	2100      	movs	r1, #0
 800201e:	a802      	add	r0, sp, #8
 8002020:	f004 fe04 	bl	8006c2c <memset>
  if(hi2c->Instance==I2C1)
 8002024:	6822      	ldr	r2, [r4, #0]
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <HAL_I2C_MspInit+0x58>)
 8002028:	429a      	cmp	r2, r3
 800202a:	d11c      	bne.n	8002066 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202c:	4c10      	ldr	r4, [pc, #64]	; (8002070 <HAL_I2C_MspInit+0x5c>)
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800202e:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002030:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002032:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002034:	f043 0308 	orr.w	r3, r3, #8
 8002038:	61a3      	str	r3, [r4, #24]
 800203a:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203c:	480d      	ldr	r0, [pc, #52]	; (8002074 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002046:	2312      	movs	r3, #18
 8002048:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800204c:	2303      	movs	r3, #3
 800204e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002050:	f001 fc0c 	bl	800386c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002054:	69e3      	ldr	r3, [r4, #28]
 8002056:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800205a:	61e3      	str	r3, [r4, #28]
 800205c:	69e3      	ldr	r3, [r4, #28]
 800205e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002066:	b006      	add	sp, #24
 8002068:	bd10      	pop	{r4, pc}
 800206a:	bf00      	nop
 800206c:	40005400 	.word	0x40005400
 8002070:	40021000 	.word	0x40021000
 8002074:	40010c00 	.word	0x40010c00

08002078 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8002078:	6803      	ldr	r3, [r0, #0]
{
 800207a:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 800207c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002080:	d115      	bne.n	80020ae <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002082:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002086:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002088:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002090:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002092:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002094:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800209e:	f001 fa8b 	bl	80035b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020a2:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80020a4:	b003      	add	sp, #12
 80020a6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020aa:	f001 bab9 	b.w	8003620 <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM3)
 80020ae:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <HAL_TIM_Base_MspInit+0x64>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d110      	bne.n	80020d6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020b4:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_TIM_Base_MspInit+0x68>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020b6:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020b8:	69da      	ldr	r2, [r3, #28]
 80020ba:	f042 0202 	orr.w	r2, r2, #2
 80020be:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020c0:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020c2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020c4:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	9301      	str	r3, [sp, #4]
 80020cc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020ce:	f001 fa73 	bl	80035b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020d2:	201d      	movs	r0, #29
 80020d4:	e7e6      	b.n	80020a4 <HAL_TIM_Base_MspInit+0x2c>
}
 80020d6:	b003      	add	sp, #12
 80020d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80020dc:	40000400 	.word	0x40000400
 80020e0:	40021000 	.word	0x40021000

080020e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e4:	b570      	push	{r4, r5, r6, lr}
 80020e6:	4606      	mov	r6, r0
 80020e8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ea:	2210      	movs	r2, #16
 80020ec:	2100      	movs	r1, #0
 80020ee:	a802      	add	r0, sp, #8
 80020f0:	f004 fd9c 	bl	8006c2c <memset>
  if(huart->Instance==USART1)
 80020f4:	6832      	ldr	r2, [r6, #0]
 80020f6:	4b22      	ldr	r3, [pc, #136]	; (8002180 <HAL_UART_MspInit+0x9c>)
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d13e      	bne.n	800217a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020fc:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002100:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002102:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002104:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002108:	619a      	str	r2, [r3, #24]
 800210a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210c:	481d      	ldr	r0, [pc, #116]	; (8002184 <HAL_UART_MspInit+0xa0>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800210e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002112:	9200      	str	r2, [sp, #0]
 8002114:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002116:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002118:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211a:	f042 0204 	orr.w	r2, r2, #4
 800211e:	619a      	str	r2, [r3, #24]
 8002120:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	9301      	str	r3, [sp, #4]
 800212c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212e:	2302      	movs	r3, #2
 8002130:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002134:	2303      	movs	r3, #3
 8002136:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002138:	f001 fb98 	bl	800386c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002140:	a902      	add	r1, sp, #8
 8002142:	4810      	ldr	r0, [pc, #64]	; (8002184 <HAL_UART_MspInit+0xa0>)

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002144:	4c10      	ldr	r4, [pc, #64]	; (8002188 <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002146:	e9cd 3502 	strd	r3, r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214c:	f001 fb8e 	bl	800386c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002150:	4b0e      	ldr	r3, [pc, #56]	; (800218c <HAL_UART_MspInit+0xa8>)
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002152:	2120      	movs	r1, #32
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002154:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002158:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800215a:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800215e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002162:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002164:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002166:	6165      	str	r5, [r4, #20]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002168:	e9c4 1306 	strd	r1, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800216c:	f001 fa7c 	bl	8003668 <HAL_DMA_Init>
 8002170:	b108      	cbz	r0, 8002176 <HAL_UART_MspInit+0x92>
    {
      Error_Handler();
 8002172:	f7ff ff2b 	bl	8001fcc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002176:	6374      	str	r4, [r6, #52]	; 0x34
 8002178:	6266      	str	r6, [r4, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800217a:	b006      	add	sp, #24
 800217c:	bd70      	pop	{r4, r5, r6, pc}
 800217e:	bf00      	nop
 8002180:	40013800 	.word	0x40013800
 8002184:	40010800 	.word	0x40010800
 8002188:	20000734 	.word	0x20000734
 800218c:	40020058 	.word	0x40020058

08002190 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002190:	4770      	bx	lr

08002192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002192:	e7fe      	b.n	8002192 <HardFault_Handler>

08002194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002194:	e7fe      	b.n	8002194 <MemManage_Handler>

08002196 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002196:	e7fe      	b.n	8002196 <BusFault_Handler>

08002198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002198:	e7fe      	b.n	8002198 <UsageFault_Handler>

0800219a <SVC_Handler>:
 800219a:	4770      	bx	lr

0800219c <DebugMon_Handler>:
 800219c:	4770      	bx	lr

0800219e <PendSV_Handler>:
 800219e:	4770      	bx	lr

080021a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a2:	f001 f9d3 	bl	800354c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systick_Inc();
  /* USER CODE END SysTick_IRQn 1 */
}
 80021a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  systick_Inc();
 80021aa:	f001 b991 	b.w	80034d0 <systick_Inc>
	...

080021b0 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80021b0:	4801      	ldr	r0, [pc, #4]	; (80021b8 <DMA1_Channel5_IRQHandler+0x8>)
 80021b2:	f001 bac7 	b.w	8003744 <HAL_DMA_IRQHandler>
 80021b6:	bf00      	nop
 80021b8:	20000734 	.word	0x20000734

080021bc <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80021bc:	4801      	ldr	r0, [pc, #4]	; (80021c4 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80021be:	f002 b97d 	b.w	80044bc <HAL_PCD_IRQHandler>
 80021c2:	bf00      	nop
 80021c4:	200019c0 	.word	0x200019c0

080021c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021ca:	4803      	ldr	r0, [pc, #12]	; (80021d8 <TIM2_IRQHandler+0x10>)
 80021cc:	f002 ff2d 	bl	800502a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  led_update();
  /* USER CODE END TIM2_IRQn 1 */
}
 80021d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  led_update();
 80021d4:	f000 bede 	b.w	8002f94 <led_update>
 80021d8:	200007d8 	.word	0x200007d8

080021dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021dc:	b530      	push	{r4, r5, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//this timer runs on 200Hz
	if (timer_index % 2 == 0){
 80021de:	4d5b      	ldr	r5, [pc, #364]	; (800234c <TIM3_IRQHandler+0x170>)
{
 80021e0:	b0f1      	sub	sp, #452	; 0x1c4
	if (timer_index % 2 == 0){
 80021e2:	882b      	ldrh	r3, [r5, #0]
 80021e4:	f013 0301 	ands.w	r3, r3, #1
 80021e8:	d15b      	bne.n	80022a2 <TIM3_IRQHandler+0xc6>
		//code here runs on 100Hz
		  short gyro[3] = {0,0,0}, accel[3] = {0,0,0}, sensors;
 80021ea:	9304      	str	r3, [sp, #16]
 80021ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80021f0:	9306      	str	r3, [sp, #24]
 80021f2:	f8ad 301c 	strh.w	r3, [sp, #28]
		  unsigned char more;
		  unsigned long timestamp;
		  long quat[4];

		  //TODO , while more != 0 read.
		  int status = dmp_read_fifo(gyro, accel, quat, &timestamp, &sensors,&more);
 80021f6:	f10d 0309 	add.w	r3, sp, #9
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	f10d 030a 	add.w	r3, sp, #10
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	aa08      	add	r2, sp, #32
 8002204:	ab03      	add	r3, sp, #12
 8002206:	a906      	add	r1, sp, #24
 8002208:	a804      	add	r0, sp, #16
 800220a:	f7ff fccb 	bl	8001ba4 <dmp_read_fifo>
		  if (status == 0){
 800220e:	2800      	cmp	r0, #0
 8002210:	d147      	bne.n	80022a2 <TIM3_IRQHandler+0xc6>
			  XIMU_sens.q0 = quat[0];
 8002212:	9808      	ldr	r0, [sp, #32]
 8002214:	f7fe f8f6 	bl	8000404 <__aeabi_i2d>
 8002218:	4c4d      	ldr	r4, [pc, #308]	; (8002350 <TIM3_IRQHandler+0x174>)
 800221a:	e9c4 0100 	strd	r0, r1, [r4]
			  XIMU_sens.q1 = quat[1];
 800221e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002220:	f7fe f8f0 	bl	8000404 <__aeabi_i2d>
 8002224:	e9c4 0102 	strd	r0, r1, [r4, #8]
			  XIMU_sens.q2 = quat[2];
 8002228:	980a      	ldr	r0, [sp, #40]	; 0x28
 800222a:	f7fe f8eb 	bl	8000404 <__aeabi_i2d>
 800222e:	e9c4 0104 	strd	r0, r1, [r4, #16]
			  XIMU_sens.q3 = quat[3];
 8002232:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002234:	f7fe f8e6 	bl	8000404 <__aeabi_i2d>
 8002238:	e9c4 0106 	strd	r0, r1, [r4, #24]

			  XIMU_sens.ax = accel[0];
 800223c:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8002240:	f7fe f8e0 	bl	8000404 <__aeabi_i2d>
 8002244:	e9c4 0108 	strd	r0, r1, [r4, #32]
			  XIMU_sens.ay = accel[1];
 8002248:	f9bd 001a 	ldrsh.w	r0, [sp, #26]
 800224c:	f7fe f8da 	bl	8000404 <__aeabi_i2d>
 8002250:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
			  XIMU_sens.az = accel[2];
 8002254:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8002258:	f7fe f8d4 	bl	8000404 <__aeabi_i2d>
 800225c:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30

			  XIMU_sens.gx = gyro[0];
 8002260:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8002264:	f7fe f8ce 	bl	8000404 <__aeabi_i2d>
 8002268:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
			  XIMU_sens.gy = gyro[1];
 800226c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8002270:	f7fe f8c8 	bl	8000404 <__aeabi_i2d>
 8002274:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
			  XIMU_sens.gz = gyro[2];
 8002278:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 800227c:	f7fe f8c2 	bl	8000404 <__aeabi_i2d>
 8002280:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48

			  XIMU_sens.qag_ts = millis();
 8002284:	f001 f914 	bl	80034b0 <millis>
 8002288:	6520      	str	r0, [r4, #80]	; 0x50
			  calc_absolute_acceleration();
 800228a:	f000 f997 	bl	80025bc <calc_absolute_acceleration>

			  //TODO EKF_UPDATE
			char str[400];
			build_data_str(str);
 800228e:	a80c      	add	r0, sp, #48	; 0x30
 8002290:	f000 fb7e 	bl	8002990 <build_data_str>
			CDC_Transmit_FS(str,strlen(str));
 8002294:	a80c      	add	r0, sp, #48	; 0x30
 8002296:	f7fd ff5b 	bl	8000150 <strlen>
 800229a:	b281      	uxth	r1, r0
 800229c:	a80c      	add	r0, sp, #48	; 0x30
 800229e:	f004 faa1 	bl	80067e4 <CDC_Transmit_FS>
		  }

	}

	if (timer_index % 10 == 0){
 80022a2:	220a      	movs	r2, #10
 80022a4:	f9b5 1000 	ldrsh.w	r1, [r5]
 80022a8:	fb91 f3f2 	sdiv	r3, r1, r2
 80022ac:	fb02 1313 	mls	r3, r2, r3, r1
 80022b0:	b21b      	sxth	r3, r3
 80022b2:	b90b      	cbnz	r3, 80022b8 <TIM3_IRQHandler+0xdc>
		//code here runs on 20Hz
		ms5611_timer_update();
 80022b4:	f001 f8b4 	bl	8003420 <ms5611_timer_update>
	}

	if (timer_index % 20 == 0){
 80022b8:	2314      	movs	r3, #20
 80022ba:	f9b5 2000 	ldrsh.w	r2, [r5]
 80022be:	fb92 f1f3 	sdiv	r1, r2, r3
 80022c2:	fb03 2111 	mls	r1, r3, r1, r2
 80022c6:	b209      	sxth	r1, r1
 80022c8:	2900      	cmp	r1, #0
 80022ca:	d132      	bne.n	8002332 <TIM3_IRQHandler+0x156>
		//code here runs on 10Hz
		short data[3];

		int status = mpu_get_compass_reg(data,NULL);
 80022cc:	a80c      	add	r0, sp, #48	; 0x30
 80022ce:	f7ff fa6b 	bl	80017a8 <mpu_get_compass_reg>

		if (status == 0){
 80022d2:	b9b8      	cbnz	r0, 8002304 <TIM3_IRQHandler+0x128>
			XIMU_sens.mx = data[0];
 80022d4:	f9bd 0030 	ldrsh.w	r0, [sp, #48]	; 0x30
 80022d8:	f7fe f894 	bl	8000404 <__aeabi_i2d>
 80022dc:	4c1c      	ldr	r4, [pc, #112]	; (8002350 <TIM3_IRQHandler+0x174>)
 80022de:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
			XIMU_sens.my = data[1];
 80022e2:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 80022e6:	f7fe f88d 	bl	8000404 <__aeabi_i2d>
 80022ea:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
			XIMU_sens.mz = data[2];
 80022ee:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 80022f2:	f7fe f887 	bl	8000404 <__aeabi_i2d>
 80022f6:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
			calibrate_mag_reading();
 80022fa:	f000 f895 	bl	8002428 <calibrate_mag_reading>

			XIMU_sens.m_ts = millis();
 80022fe:	f001 f8d7 	bl	80034b0 <millis>
 8002302:	6720      	str	r0, [r4, #112]	; 0x70

			//calc_magnetic_orientation();
		}

		//poll DMA buffer
		GNSS_RX_Update();
 8002304:	f000 fd26 	bl	8002d54 <GNSS_RX_Update>

		//Record GPS data
		if (GNSS.GNGGA.status != 0){//data is valid
 8002308:	4b12      	ldr	r3, [pc, #72]	; (8002354 <TIM3_IRQHandler+0x178>)
 800230a:	f8d3 24a4 	ldr.w	r2, [r3, #1188]	; 0x4a4
 800230e:	b182      	cbz	r2, 8002332 <TIM3_IRQHandler+0x156>
			XIMU_sens.lat = GNSS.GNGGA.lat;
 8002310:	4c0f      	ldr	r4, [pc, #60]	; (8002350 <TIM3_IRQHandler+0x174>)
 8002312:	f503 6290 	add.w	r2, r3, #1152	; 0x480
			XIMU_sens.lon = GNSS.GNGGA.lon;
 8002316:	f503 6393 	add.w	r3, r3, #1176	; 0x498
			XIMU_sens.lat = GNSS.GNGGA.lat;
 800231a:	e9d2 0100 	ldrd	r0, r1, [r2]
			XIMU_sens.lon = GNSS.GNGGA.lon;
 800231e:	e9d3 2300 	ldrd	r2, r3, [r3]
			XIMU_sens.lat = GNSS.GNGGA.lat;
 8002322:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
			XIMU_sens.lon = GNSS.GNGGA.lon;
 8002326:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
			XIMU_sens.gps_ts = millis();
 800232a:	f001 f8c1 	bl	80034b0 <millis>
 800232e:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
		}
	}

	timer_index++;
 8002332:	882b      	ldrh	r3, [r5, #0]
	if (timer_index == 200){
		timer_index = 0;
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002334:	4808      	ldr	r0, [pc, #32]	; (8002358 <TIM3_IRQHandler+0x17c>)
	timer_index++;
 8002336:	3301      	adds	r3, #1
 8002338:	b21b      	sxth	r3, r3
	if (timer_index == 200){
 800233a:	2bc8      	cmp	r3, #200	; 0xc8
		timer_index = 0;
 800233c:	bf08      	it	eq
 800233e:	2300      	moveq	r3, #0
 8002340:	802b      	strh	r3, [r5, #0]
  HAL_TIM_IRQHandler(&htim3);
 8002342:	f002 fe72 	bl	800502a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002346:	b071      	add	sp, #452	; 0x1c4
 8002348:	bd30      	pop	{r4, r5, pc}
 800234a:	bf00      	nop
 800234c:	200003b4 	.word	0x200003b4
 8002350:	200005f8 	.word	0x200005f8
 8002354:	20000850 	.word	0x20000850
 8002358:	200006f4 	.word	0x200006f4

0800235c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800235c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800235e:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <_sbrk+0x2c>)
{
 8002360:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002362:	6819      	ldr	r1, [r3, #0]
 8002364:	b909      	cbnz	r1, 800236a <_sbrk+0xe>
		heap_end = &end;
 8002366:	4909      	ldr	r1, [pc, #36]	; (800238c <_sbrk+0x30>)
 8002368:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800236a:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 800236c:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800236e:	4402      	add	r2, r0
 8002370:	428a      	cmp	r2, r1
 8002372:	d906      	bls.n	8002382 <_sbrk+0x26>
	{
		errno = ENOMEM;
 8002374:	f004 fbfc 	bl	8006b70 <__errno>
 8002378:	230c      	movs	r3, #12
 800237a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800237c:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8002380:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8002382:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8002384:	e7fc      	b.n	8002380 <_sbrk+0x24>
 8002386:	bf00      	nop
 8002388:	200003b8 	.word	0x200003b8
 800238c:	20001c30 	.word	0x20001c30

08002390 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002390:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <SystemInit+0x40>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	f042 0201 	orr.w	r2, r2, #1
 8002398:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800239a:	6859      	ldr	r1, [r3, #4]
 800239c:	4a0d      	ldr	r2, [pc, #52]	; (80023d4 <SystemInit+0x44>)
 800239e:	400a      	ands	r2, r1
 80023a0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80023a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023ac:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023b4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80023bc:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80023be:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80023c2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80023c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <SystemInit+0x48>)
 80023ca:	609a      	str	r2, [r3, #8]
#endif 
}
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40021000 	.word	0x40021000
 80023d4:	f8ff0000 	.word	0xf8ff0000
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80023dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80023de:	e003      	b.n	80023e8 <LoopCopyDataInit>

080023e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80023e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80023e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80023e6:	3104      	adds	r1, #4

080023e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80023e8:	480a      	ldr	r0, [pc, #40]	; (8002414 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80023ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80023ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80023f0:	d3f6      	bcc.n	80023e0 <CopyDataInit>
  ldr r2, =_sbss
 80023f2:	4a0a      	ldr	r2, [pc, #40]	; (800241c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80023f4:	e002      	b.n	80023fc <LoopFillZerobss>

080023f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80023f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80023f8:	f842 3b04 	str.w	r3, [r2], #4

080023fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80023fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002400:	d3f9      	bcc.n	80023f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002402:	f7ff ffc5 	bl	8002390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002406:	f004 fbb9 	bl	8006b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800240a:	f7ff fcc1 	bl	8001d90 <main>
  bx lr
 800240e:	4770      	bx	lr
  ldr r3, =_sidata
 8002410:	0800a720 	.word	0x0800a720
  ldr r0, =_sdata
 8002414:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002418:	20000388 	.word	0x20000388
  ldr r2, =_sbss
 800241c:	20000388 	.word	0x20000388
  ldr r3, = _ebss
 8002420:	20001c30 	.word	0x20001c30

08002424 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002424:	e7fe      	b.n	8002424 <ADC1_2_IRQHandler>
	...

08002428 <calibrate_mag_reading>:
#include "dataProcessing.h"
#include "string.h"
#include "stdlib.h"
#include "math.h"

void calibrate_mag_reading(){
 8002428:	e92d 4fd3 	stmdb	sp!, {r0, r1, r4, r6, r7, r8, r9, sl, fp, lr}

	double m[3]; //magnatic readings minus offset

	m[0] = XIMU_sens.mx - MAG_X_OFFSET;
 800242c:	a34a      	add	r3, pc, #296	; (adr r3, 8002558 <calibrate_mag_reading+0x130>)
 800242e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002432:	4c61      	ldr	r4, [pc, #388]	; (80025b8 <calibrate_mag_reading+0x190>)
 8002434:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
 8002438:	f7fd fe96 	bl	8000168 <__aeabi_dsub>
	m[1] = XIMU_sens.my - MAG_Y_OFFSET;
 800243c:	a348      	add	r3, pc, #288	; (adr r3, 8002560 <calibrate_mag_reading+0x138>)
 800243e:	e9d3 2300 	ldrd	r2, r3, [r3]
	m[0] = XIMU_sens.mx - MAG_X_OFFSET;
 8002442:	4606      	mov	r6, r0
 8002444:	460f      	mov	r7, r1
	m[1] = XIMU_sens.my - MAG_Y_OFFSET;
 8002446:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
 800244a:	f7fd fe8d 	bl	8000168 <__aeabi_dsub>
	m[2] = XIMU_sens.mz - MAG_Z_OFFSET;
 800244e:	a346      	add	r3, pc, #280	; (adr r3, 8002568 <calibrate_mag_reading+0x140>)
 8002450:	e9d3 2300 	ldrd	r2, r3, [r3]
	m[1] = XIMU_sens.my - MAG_Y_OFFSET;
 8002454:	4682      	mov	sl, r0
 8002456:	468b      	mov	fp, r1
	m[2] = XIMU_sens.mz - MAG_Z_OFFSET;
 8002458:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
 800245c:	f7fd fe86 	bl	800016c <__adddf3>

	XIMU_sens.mx = MAG_TRANSF_11*m[0] + MAG_TRANSF_12*m[1] + MAG_TRANSF_13*m[2];
 8002460:	a343      	add	r3, pc, #268	; (adr r3, 8002570 <calibrate_mag_reading+0x148>)
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
	m[2] = XIMU_sens.mz - MAG_Z_OFFSET;
 8002466:	e9cd 0100 	strd	r0, r1, [sp]
	XIMU_sens.mx = MAG_TRANSF_11*m[0] + MAG_TRANSF_12*m[1] + MAG_TRANSF_13*m[2];
 800246a:	4630      	mov	r0, r6
 800246c:	4639      	mov	r1, r7
 800246e:	f7fe f833 	bl	80004d8 <__aeabi_dmul>
 8002472:	a341      	add	r3, pc, #260	; (adr r3, 8002578 <calibrate_mag_reading+0x150>)
 8002474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002478:	4680      	mov	r8, r0
 800247a:	4689      	mov	r9, r1
 800247c:	4650      	mov	r0, sl
 800247e:	4659      	mov	r1, fp
 8002480:	f7fe f82a 	bl	80004d8 <__aeabi_dmul>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4640      	mov	r0, r8
 800248a:	4649      	mov	r1, r9
 800248c:	f7fd fe6e 	bl	800016c <__adddf3>
 8002490:	a33b      	add	r3, pc, #236	; (adr r3, 8002580 <calibrate_mag_reading+0x158>)
 8002492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002496:	4680      	mov	r8, r0
 8002498:	4689      	mov	r9, r1
 800249a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800249e:	f7fe f81b 	bl	80004d8 <__aeabi_dmul>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4640      	mov	r0, r8
 80024a8:	4649      	mov	r1, r9
 80024aa:	f7fd fe5f 	bl	800016c <__adddf3>
	XIMU_sens.my = MAG_TRANSF_21*m[0] + MAG_TRANSF_22*m[1] + MAG_TRANSF_23*m[2];
 80024ae:	a336      	add	r3, pc, #216	; (adr r3, 8002588 <calibrate_mag_reading+0x160>)
 80024b0:	e9d3 2300 	ldrd	r2, r3, [r3]
	XIMU_sens.mx = MAG_TRANSF_11*m[0] + MAG_TRANSF_12*m[1] + MAG_TRANSF_13*m[2];
 80024b4:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
	XIMU_sens.my = MAG_TRANSF_21*m[0] + MAG_TRANSF_22*m[1] + MAG_TRANSF_23*m[2];
 80024b8:	4630      	mov	r0, r6
 80024ba:	4639      	mov	r1, r7
 80024bc:	f7fe f80c 	bl	80004d8 <__aeabi_dmul>
 80024c0:	a333      	add	r3, pc, #204	; (adr r3, 8002590 <calibrate_mag_reading+0x168>)
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	4680      	mov	r8, r0
 80024c8:	4689      	mov	r9, r1
 80024ca:	4650      	mov	r0, sl
 80024cc:	4659      	mov	r1, fp
 80024ce:	f7fe f803 	bl	80004d8 <__aeabi_dmul>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4640      	mov	r0, r8
 80024d8:	4649      	mov	r1, r9
 80024da:	f7fd fe47 	bl	800016c <__adddf3>
 80024de:	a32e      	add	r3, pc, #184	; (adr r3, 8002598 <calibrate_mag_reading+0x170>)
 80024e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e4:	4680      	mov	r8, r0
 80024e6:	4689      	mov	r9, r1
 80024e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80024ec:	f7fd fff4 	bl	80004d8 <__aeabi_dmul>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4640      	mov	r0, r8
 80024f6:	4649      	mov	r1, r9
 80024f8:	f7fd fe38 	bl	800016c <__adddf3>
	XIMU_sens.mz = MAG_TRANSF_31*m[0] + MAG_TRANSF_32*m[1] + MAG_TRANSF_33*m[2];
 80024fc:	a328      	add	r3, pc, #160	; (adr r3, 80025a0 <calibrate_mag_reading+0x178>)
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
	XIMU_sens.my = MAG_TRANSF_21*m[0] + MAG_TRANSF_22*m[1] + MAG_TRANSF_23*m[2];
 8002502:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
	XIMU_sens.mz = MAG_TRANSF_31*m[0] + MAG_TRANSF_32*m[1] + MAG_TRANSF_33*m[2];
 8002506:	4630      	mov	r0, r6
 8002508:	4639      	mov	r1, r7
 800250a:	f7fd ffe5 	bl	80004d8 <__aeabi_dmul>
 800250e:	a326      	add	r3, pc, #152	; (adr r3, 80025a8 <calibrate_mag_reading+0x180>)
 8002510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002514:	4606      	mov	r6, r0
 8002516:	460f      	mov	r7, r1
 8002518:	4650      	mov	r0, sl
 800251a:	4659      	mov	r1, fp
 800251c:	f7fd ffdc 	bl	80004d8 <__aeabi_dmul>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4630      	mov	r0, r6
 8002526:	4639      	mov	r1, r7
 8002528:	f7fd fe20 	bl	800016c <__adddf3>
 800252c:	a320      	add	r3, pc, #128	; (adr r3, 80025b0 <calibrate_mag_reading+0x188>)
 800252e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002532:	4606      	mov	r6, r0
 8002534:	460f      	mov	r7, r1
 8002536:	e9dd 0100 	ldrd	r0, r1, [sp]
 800253a:	f7fd ffcd 	bl	80004d8 <__aeabi_dmul>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4630      	mov	r0, r6
 8002544:	4639      	mov	r1, r7
 8002546:	f7fd fe11 	bl	800016c <__adddf3>
 800254a:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
}
 800254e:	b002      	add	sp, #8
 8002550:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 8002554:	f3af 8000 	nop.w
 8002558:	810624dd 	.word	0x810624dd
 800255c:	40615795 	.word	0x40615795
 8002560:	189374bc 	.word	0x189374bc
 8002564:	40706804 	.word	0x40706804
 8002568:	fdf3b646 	.word	0xfdf3b646
 800256c:	405268d4 	.word	0x405268d4
 8002570:	51eb851f 	.word	0x51eb851f
 8002574:	3ff31eb8 	.word	0x3ff31eb8
 8002578:	e5604189 	.word	0xe5604189
 800257c:	bfab22d0 	.word	0xbfab22d0
 8002580:	53f7ced9 	.word	0x53f7ced9
 8002584:	3faba5e3 	.word	0x3faba5e3
 8002588:	020c49ba 	.word	0x020c49ba
 800258c:	bfa6872b 	.word	0xbfa6872b
 8002590:	78d4fdf4 	.word	0x78d4fdf4
 8002594:	3ff326e9 	.word	0x3ff326e9
 8002598:	47ae147b 	.word	0x47ae147b
 800259c:	3f847ae1 	.word	0x3f847ae1
 80025a0:	76c8b439 	.word	0x76c8b439
 80025a4:	bf9a9fbe 	.word	0xbf9a9fbe
 80025a8:	76c8b439 	.word	0x76c8b439
 80025ac:	bf8a9fbe 	.word	0xbf8a9fbe
 80025b0:	a5e353f8 	.word	0xa5e353f8
 80025b4:	3ff2c49b 	.word	0x3ff2c49b
 80025b8:	200005f8 	.word	0x200005f8

080025bc <calc_absolute_acceleration>:

void calc_absolute_acceleration() {
 80025bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	double ax = XIMU_sens.ax,	ay = XIMU_sens.ay,	az = XIMU_sens.az;
 80025c0:	4bc0      	ldr	r3, [pc, #768]	; (80028c4 <calc_absolute_acceleration+0x308>)
void calc_absolute_acceleration() {
 80025c2:	b09d      	sub	sp, #116	; 0x74
	double q0 = XIMU_sens.q0,	q1 = XIMU_sens.q1,	q2 = XIMU_sens.q2,	q3 = XIMU_sens.q3;
 80025c4:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
 80025c8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80025cc:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 80025d0:	e9d3 8900 	ldrd	r8, r9, [r3]
	double ax = XIMU_sens.ax,	ay = XIMU_sens.ay,	az = XIMU_sens.az;
 80025d4:	e9d3 1208 	ldrd	r1, r2, [r3, #32]
	double q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3, norm_2;
	q0q0 = q0 * q0;
 80025d8:	4640      	mov	r0, r8
	double ax = XIMU_sens.ax,	ay = XIMU_sens.ay,	az = XIMU_sens.az;
 80025da:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80025de:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 80025e2:	e9cd 1200 	strd	r1, r2, [sp]
 80025e6:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
	q0q0 = q0 * q0;
 80025ea:	464b      	mov	r3, r9
	double ax = XIMU_sens.ax,	ay = XIMU_sens.ay,	az = XIMU_sens.az;
 80025ec:	e9cd 1202 	strd	r1, r2, [sp, #8]
	q0q0 = q0 * q0;
 80025f0:	4642      	mov	r2, r8
 80025f2:	4649      	mov	r1, r9
 80025f4:	f7fd ff70 	bl	80004d8 <__aeabi_dmul>
	q0q1 = q0 * q1;
 80025f8:	4632      	mov	r2, r6
	q0q0 = q0 * q0;
 80025fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
	q0q1 = q0 * q1;
 80025fe:	463b      	mov	r3, r7
 8002600:	4640      	mov	r0, r8
 8002602:	4649      	mov	r1, r9
 8002604:	f7fd ff68 	bl	80004d8 <__aeabi_dmul>
	q0q2 = q0 * q2;
 8002608:	4622      	mov	r2, r4
	q0q1 = q0 * q1;
 800260a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	q0q2 = q0 * q2;
 800260e:	462b      	mov	r3, r5
 8002610:	4640      	mov	r0, r8
 8002612:	4649      	mov	r1, r9
 8002614:	f7fd ff60 	bl	80004d8 <__aeabi_dmul>
	q0q3 = q0 * q3;
 8002618:	4652      	mov	r2, sl
	q0q2 = q0 * q2;
 800261a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	q0q3 = q0 * q3;
 800261e:	465b      	mov	r3, fp
 8002620:	4640      	mov	r0, r8
 8002622:	4649      	mov	r1, r9
 8002624:	f7fd ff58 	bl	80004d8 <__aeabi_dmul>
	q1q1 = q1 * q1;
 8002628:	4632      	mov	r2, r6
	q0q3 = q0 * q3;
 800262a:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	q1q1 = q1 * q1;
 800262e:	463b      	mov	r3, r7
 8002630:	4630      	mov	r0, r6
 8002632:	4639      	mov	r1, r7
 8002634:	f7fd ff50 	bl	80004d8 <__aeabi_dmul>
	q1q2 = q1 * q2;
 8002638:	4622      	mov	r2, r4
	q1q1 = q1 * q1;
 800263a:	e9cd 0108 	strd	r0, r1, [sp, #32]
	q1q2 = q1 * q2;
 800263e:	462b      	mov	r3, r5
 8002640:	4630      	mov	r0, r6
 8002642:	4639      	mov	r1, r7
 8002644:	f7fd ff48 	bl	80004d8 <__aeabi_dmul>
	q1q3 = q1 * q3;
 8002648:	4652      	mov	r2, sl
	q1q2 = q1 * q2;
 800264a:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
	q1q3 = q1 * q3;
 800264e:	465b      	mov	r3, fp
 8002650:	4630      	mov	r0, r6
 8002652:	4639      	mov	r1, r7
 8002654:	f7fd ff40 	bl	80004d8 <__aeabi_dmul>
	q2q2 = q2 * q2;
 8002658:	4622      	mov	r2, r4
	q1q3 = q1 * q3;
 800265a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
	q2q2 = q2 * q2;
 800265e:	462b      	mov	r3, r5
 8002660:	4620      	mov	r0, r4
 8002662:	4629      	mov	r1, r5
 8002664:	f7fd ff38 	bl	80004d8 <__aeabi_dmul>
	q2q3 = q2 * q3;
 8002668:	4652      	mov	r2, sl
	q2q2 = q2 * q2;
 800266a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	q2q3 = q2 * q3;
 800266e:	465b      	mov	r3, fp
 8002670:	4620      	mov	r0, r4
 8002672:	4629      	mov	r1, r5
 8002674:	f7fd ff30 	bl	80004d8 <__aeabi_dmul>
	q3q3 = q3 * q3;
 8002678:	4652      	mov	r2, sl
	q2q3 = q2 * q3;
 800267a:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
	q3q3 = q3 * q3;
 800267e:	465b      	mov	r3, fp
 8002680:	4650      	mov	r0, sl
 8002682:	4659      	mov	r1, fp
 8002684:	f7fd ff28 	bl	80004d8 <__aeabi_dmul>
	norm_2 = q0q0 + q1q1 + q2q2 + q3q3;
 8002688:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
	q3q3 = q3 * q3;
 800268c:	4606      	mov	r6, r0
 800268e:	460f      	mov	r7, r1
	norm_2 = q0q0 + q1q1 + q2q2 + q3q3;
 8002690:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002694:	f7fd fd6a 	bl	800016c <__adddf3>
 8002698:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800269c:	f7fd fd66 	bl	800016c <__adddf3>
 80026a0:	4632      	mov	r2, r6
 80026a2:	463b      	mov	r3, r7
 80026a4:	f7fd fd62 	bl	800016c <__adddf3>

	XIMU_u.ax_abs = (ax*q0q0 + 2*az*q0q2 - 2*ay*q0q3 + ax*q1q1 + 2*ay*q1q2 + 2*az*q1q3 - ax*q2q2 - ax*q3q3)/norm_2;
 80026a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
	norm_2 = q0q0 + q1q1 + q2q2 + q3q3;
 80026ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	XIMU_u.ax_abs = (ax*q0q0 + 2*az*q0q2 - 2*ay*q0q3 + ax*q1q1 + 2*ay*q1q2 + 2*az*q1q3 - ax*q2q2 - ax*q3q3)/norm_2;
 80026b0:	4610      	mov	r0, r2
 80026b2:	4619      	mov	r1, r3
 80026b4:	f7fd fd5a 	bl	800016c <__adddf3>
 80026b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80026bc:	4682      	mov	sl, r0
 80026be:	468b      	mov	fp, r1
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	f7fd fd52 	bl	800016c <__adddf3>
 80026c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80026cc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80026d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80026d4:	f7fd ff00 	bl	80004d8 <__aeabi_dmul>
 80026d8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80026dc:	4604      	mov	r4, r0
 80026de:	460d      	mov	r5, r1
 80026e0:	4650      	mov	r0, sl
 80026e2:	4659      	mov	r1, fp
 80026e4:	f7fd fef8 	bl	80004d8 <__aeabi_dmul>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4620      	mov	r0, r4
 80026ee:	4629      	mov	r1, r5
 80026f0:	f7fd fd3c 	bl	800016c <__adddf3>
 80026f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80026f8:	4604      	mov	r4, r0
 80026fa:	460d      	mov	r5, r1
 80026fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002700:	f7fd feea 	bl	80004d8 <__aeabi_dmul>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4620      	mov	r0, r4
 800270a:	4629      	mov	r1, r5
 800270c:	f7fd fd2c 	bl	8000168 <__aeabi_dsub>
 8002710:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002714:	4604      	mov	r4, r0
 8002716:	460d      	mov	r5, r1
 8002718:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800271c:	f7fd fedc 	bl	80004d8 <__aeabi_dmul>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4620      	mov	r0, r4
 8002726:	4629      	mov	r1, r5
 8002728:	f7fd fd20 	bl	800016c <__adddf3>
 800272c:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8002730:	4604      	mov	r4, r0
 8002732:	460d      	mov	r5, r1
 8002734:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002738:	f7fd fece 	bl	80004d8 <__aeabi_dmul>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4620      	mov	r0, r4
 8002742:	4629      	mov	r1, r5
 8002744:	f7fd fd12 	bl	800016c <__adddf3>
 8002748:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800274c:	4604      	mov	r4, r0
 800274e:	460d      	mov	r5, r1
 8002750:	4650      	mov	r0, sl
 8002752:	4659      	mov	r1, fp
 8002754:	f7fd fec0 	bl	80004d8 <__aeabi_dmul>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4620      	mov	r0, r4
 800275e:	4629      	mov	r1, r5
 8002760:	f7fd fd04 	bl	800016c <__adddf3>
 8002764:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002768:	4604      	mov	r4, r0
 800276a:	460d      	mov	r5, r1
 800276c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002770:	f7fd feb2 	bl	80004d8 <__aeabi_dmul>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4620      	mov	r0, r4
 800277a:	4629      	mov	r1, r5
 800277c:	f7fd fcf4 	bl	8000168 <__aeabi_dsub>
 8002780:	4632      	mov	r2, r6
 8002782:	4604      	mov	r4, r0
 8002784:	460d      	mov	r5, r1
 8002786:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800278a:	463b      	mov	r3, r7
 800278c:	f7fd fea4 	bl	80004d8 <__aeabi_dmul>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4620      	mov	r0, r4
 8002796:	4629      	mov	r1, r5
 8002798:	f7fd fce6 	bl	8000168 <__aeabi_dsub>
 800279c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80027a0:	f7fd ffc4 	bl	800072c <__aeabi_ddiv>
 80027a4:	4b48      	ldr	r3, [pc, #288]	; (80028c8 <calc_absolute_acceleration+0x30c>)
 80027a6:	e9c3 0100 	strd	r0, r1, [r3]
	XIMU_u.ay_abs = (ay*q0q0 - 2*az*q0q1 + 2*ax*q0q3 - ay*q1q1 + 2*ax*q1q2 + ay*q2q2 + 2*az*q2q3 - ay*q3q3)/norm_2;
 80027aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80027ae:	4610      	mov	r0, r2
 80027b0:	4619      	mov	r1, r3
 80027b2:	f7fd fcdb 	bl	800016c <__adddf3>
 80027b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80027ba:	4604      	mov	r4, r0
 80027bc:	460d      	mov	r5, r1
 80027be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80027c2:	f7fd fe89 	bl	80004d8 <__aeabi_dmul>
 80027c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80027ca:	4680      	mov	r8, r0
 80027cc:	4689      	mov	r9, r1
 80027ce:	4650      	mov	r0, sl
 80027d0:	4659      	mov	r1, fp
 80027d2:	f7fd fe81 	bl	80004d8 <__aeabi_dmul>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	4640      	mov	r0, r8
 80027dc:	4649      	mov	r1, r9
 80027de:	f7fd fcc3 	bl	8000168 <__aeabi_dsub>
 80027e2:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80027e6:	4680      	mov	r8, r0
 80027e8:	4689      	mov	r9, r1
 80027ea:	4620      	mov	r0, r4
 80027ec:	4629      	mov	r1, r5
 80027ee:	f7fd fe73 	bl	80004d8 <__aeabi_dmul>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4640      	mov	r0, r8
 80027f8:	4649      	mov	r1, r9
 80027fa:	f7fd fcb7 	bl	800016c <__adddf3>
 80027fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002802:	4680      	mov	r8, r0
 8002804:	4689      	mov	r9, r1
 8002806:	e9dd 0100 	ldrd	r0, r1, [sp]
 800280a:	f7fd fe65 	bl	80004d8 <__aeabi_dmul>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4640      	mov	r0, r8
 8002814:	4649      	mov	r1, r9
 8002816:	f7fd fca7 	bl	8000168 <__aeabi_dsub>
 800281a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800281e:	4680      	mov	r8, r0
 8002820:	4689      	mov	r9, r1
 8002822:	4620      	mov	r0, r4
 8002824:	4629      	mov	r1, r5
 8002826:	f7fd fe57 	bl	80004d8 <__aeabi_dmul>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4640      	mov	r0, r8
 8002830:	4649      	mov	r1, r9
 8002832:	f7fd fc9b 	bl	800016c <__adddf3>
 8002836:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800283a:	4680      	mov	r8, r0
 800283c:	4689      	mov	r9, r1
 800283e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002842:	f7fd fe49 	bl	80004d8 <__aeabi_dmul>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4640      	mov	r0, r8
 800284c:	4649      	mov	r1, r9
 800284e:	f7fd fc8d 	bl	800016c <__adddf3>
 8002852:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8002856:	4680      	mov	r8, r0
 8002858:	4689      	mov	r9, r1
 800285a:	4650      	mov	r0, sl
 800285c:	4659      	mov	r1, fp
 800285e:	f7fd fe3b 	bl	80004d8 <__aeabi_dmul>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4640      	mov	r0, r8
 8002868:	4649      	mov	r1, r9
 800286a:	f7fd fc7f 	bl	800016c <__adddf3>
 800286e:	4632      	mov	r2, r6
 8002870:	4680      	mov	r8, r0
 8002872:	4689      	mov	r9, r1
 8002874:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002878:	463b      	mov	r3, r7
 800287a:	f7fd fe2d 	bl	80004d8 <__aeabi_dmul>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4640      	mov	r0, r8
 8002884:	4649      	mov	r1, r9
 8002886:	f7fd fc6f 	bl	8000168 <__aeabi_dsub>
 800288a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800288e:	f7fd ff4d 	bl	800072c <__aeabi_ddiv>
 8002892:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <calc_absolute_acceleration+0x30c>)
 8002894:	e9c3 0102 	strd	r0, r1, [r3, #8]
	XIMU_u.az_abs = (az*q0q0 + 2*ay*q0q1 - 2*ax*q0q2 - az*q1q1 + 2*ax*q1q3 - az*q2q2 + 2*ay*q2q3 + az*q3q3)/norm_2;
 8002898:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800289c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80028a0:	f7fd fe1a 	bl	80004d8 <__aeabi_dmul>
 80028a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80028a8:	4680      	mov	r8, r0
 80028aa:	4689      	mov	r9, r1
 80028ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80028b0:	f7fd fe12 	bl	80004d8 <__aeabi_dmul>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4640      	mov	r0, r8
 80028ba:	4649      	mov	r1, r9
 80028bc:	f7fd fc56 	bl	800016c <__adddf3>
 80028c0:	e004      	b.n	80028cc <calc_absolute_acceleration+0x310>
 80028c2:	bf00      	nop
 80028c4:	200005f8 	.word	0x200005f8
 80028c8:	20000778 	.word	0x20000778
 80028cc:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80028d0:	4680      	mov	r8, r0
 80028d2:	4689      	mov	r9, r1
 80028d4:	4620      	mov	r0, r4
 80028d6:	4629      	mov	r1, r5
 80028d8:	f7fd fdfe 	bl	80004d8 <__aeabi_dmul>
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	4640      	mov	r0, r8
 80028e2:	4649      	mov	r1, r9
 80028e4:	f7fd fc40 	bl	8000168 <__aeabi_dsub>
 80028e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80028ec:	4680      	mov	r8, r0
 80028ee:	4689      	mov	r9, r1
 80028f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80028f4:	f7fd fdf0 	bl	80004d8 <__aeabi_dmul>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4640      	mov	r0, r8
 80028fe:	4649      	mov	r1, r9
 8002900:	f7fd fc32 	bl	8000168 <__aeabi_dsub>
 8002904:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8002908:	4680      	mov	r8, r0
 800290a:	4689      	mov	r9, r1
 800290c:	4620      	mov	r0, r4
 800290e:	4629      	mov	r1, r5
 8002910:	f7fd fde2 	bl	80004d8 <__aeabi_dmul>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4640      	mov	r0, r8
 800291a:	4649      	mov	r1, r9
 800291c:	f7fd fc26 	bl	800016c <__adddf3>
 8002920:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002924:	4604      	mov	r4, r0
 8002926:	460d      	mov	r5, r1
 8002928:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800292c:	f7fd fdd4 	bl	80004d8 <__aeabi_dmul>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4620      	mov	r0, r4
 8002936:	4629      	mov	r1, r5
 8002938:	f7fd fc16 	bl	8000168 <__aeabi_dsub>
 800293c:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8002940:	4604      	mov	r4, r0
 8002942:	460d      	mov	r5, r1
 8002944:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002948:	f7fd fdc6 	bl	80004d8 <__aeabi_dmul>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4620      	mov	r0, r4
 8002952:	4629      	mov	r1, r5
 8002954:	f7fd fc0a 	bl	800016c <__adddf3>
 8002958:	4632      	mov	r2, r6
 800295a:	4604      	mov	r4, r0
 800295c:	460d      	mov	r5, r1
 800295e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002962:	463b      	mov	r3, r7
 8002964:	f7fd fdb8 	bl	80004d8 <__aeabi_dmul>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4620      	mov	r0, r4
 800296e:	4629      	mov	r1, r5
 8002970:	f7fd fbfc 	bl	800016c <__adddf3>
 8002974:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8002978:	f7fd fed8 	bl	800072c <__aeabi_ddiv>
 800297c:	4b02      	ldr	r3, [pc, #8]	; (8002988 <calc_absolute_acceleration+0x3cc>)
 800297e:	e9c3 0104 	strd	r0, r1, [r3, #16]
}
 8002982:	b01d      	add	sp, #116	; 0x74
 8002984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002988:	20000778 	.word	0x20000778
 800298c:	00000000 	.word	0x00000000

08002990 <build_data_str>:
}

void calc_absolute_position();
void calc_absolute_altitude();

void build_data_str(char* str){
 8002990:	b570      	push	{r4, r5, r6, lr}

	char temp[30];
	char delim[2] = {'\t','\0'};
 8002992:	2309      	movs	r3, #9
	char term[2] = {'\n','\0'};
 8002994:	250a      	movs	r5, #10
void build_data_str(char* str){
 8002996:	4604      	mov	r4, r0


	itoa((int)(XIMU_sens.q0),temp,10);
 8002998:	4ec3      	ldr	r6, [pc, #780]	; (8002ca8 <build_data_str+0x318>)
void build_data_str(char* str){
 800299a:	b08a      	sub	sp, #40	; 0x28
	itoa((int)(XIMU_sens.q0),temp,10);
 800299c:	e9d6 0100 	ldrd	r0, r1, [r6]
	char delim[2] = {'\t','\0'};
 80029a0:	f8ad 3000 	strh.w	r3, [sp]
	char term[2] = {'\n','\0'};
 80029a4:	f8ad 5004 	strh.w	r5, [sp, #4]
	itoa((int)(XIMU_sens.q0),temp,10);
 80029a8:	f7fe f846 	bl	8000a38 <__aeabi_d2iz>
 80029ac:	462a      	mov	r2, r5
 80029ae:	a902      	add	r1, sp, #8
 80029b0:	f004 f920 	bl	8006bf4 <itoa>
	strcpy(str,temp);
 80029b4:	a902      	add	r1, sp, #8
 80029b6:	4620      	mov	r0, r4
 80029b8:	f004 f97b 	bl	8006cb2 <strcpy>
	strcat(str,delim);
 80029bc:	4669      	mov	r1, sp
 80029be:	4620      	mov	r0, r4
 80029c0:	f004 f968 	bl	8006c94 <strcat>

	itoa((int)(XIMU_sens.q1),temp,10);
 80029c4:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
 80029c8:	f7fe f836 	bl	8000a38 <__aeabi_d2iz>
 80029cc:	462a      	mov	r2, r5
 80029ce:	a902      	add	r1, sp, #8
 80029d0:	f004 f910 	bl	8006bf4 <itoa>
	strcat(str,temp);
 80029d4:	a902      	add	r1, sp, #8
 80029d6:	4620      	mov	r0, r4
 80029d8:	f004 f95c 	bl	8006c94 <strcat>
	strcat(str,delim);
 80029dc:	4669      	mov	r1, sp
 80029de:	4620      	mov	r0, r4
 80029e0:	f004 f958 	bl	8006c94 <strcat>

	itoa((int)(XIMU_sens.q2),temp,10);
 80029e4:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 80029e8:	f7fe f826 	bl	8000a38 <__aeabi_d2iz>
 80029ec:	462a      	mov	r2, r5
 80029ee:	a902      	add	r1, sp, #8
 80029f0:	f004 f900 	bl	8006bf4 <itoa>
	strcat(str,temp);
 80029f4:	a902      	add	r1, sp, #8
 80029f6:	4620      	mov	r0, r4
 80029f8:	f004 f94c 	bl	8006c94 <strcat>
	strcat(str,delim);
 80029fc:	4669      	mov	r1, sp
 80029fe:	4620      	mov	r0, r4
 8002a00:	f004 f948 	bl	8006c94 <strcat>

	itoa((int)(XIMU_sens.q3),temp,10);
 8002a04:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
 8002a08:	f7fe f816 	bl	8000a38 <__aeabi_d2iz>
 8002a0c:	462a      	mov	r2, r5
 8002a0e:	a902      	add	r1, sp, #8
 8002a10:	f004 f8f0 	bl	8006bf4 <itoa>
	strcat(str,temp);
 8002a14:	a902      	add	r1, sp, #8
 8002a16:	4620      	mov	r0, r4
 8002a18:	f004 f93c 	bl	8006c94 <strcat>
	strcat(str,delim);
 8002a1c:	4669      	mov	r1, sp
 8002a1e:	4620      	mov	r0, r4
 8002a20:	f004 f938 	bl	8006c94 <strcat>

	itoa((int)(XIMU_sens.ax*1000),temp,10);
 8002a24:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
 8002a28:	4ba0      	ldr	r3, [pc, #640]	; (8002cac <build_data_str+0x31c>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f7fd fd54 	bl	80004d8 <__aeabi_dmul>
 8002a30:	f7fe f802 	bl	8000a38 <__aeabi_d2iz>
 8002a34:	462a      	mov	r2, r5
 8002a36:	a902      	add	r1, sp, #8
 8002a38:	f004 f8dc 	bl	8006bf4 <itoa>
	strcat(str,temp);
 8002a3c:	a902      	add	r1, sp, #8
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f004 f928 	bl	8006c94 <strcat>
	strcat(str,delim);
 8002a44:	4669      	mov	r1, sp
 8002a46:	4620      	mov	r0, r4
 8002a48:	f004 f924 	bl	8006c94 <strcat>

	itoa((int)(XIMU_sens.ay*1000),temp,10);
 8002a4c:	e9d6 010a 	ldrd	r0, r1, [r6, #40]	; 0x28
 8002a50:	4b96      	ldr	r3, [pc, #600]	; (8002cac <build_data_str+0x31c>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	f7fd fd40 	bl	80004d8 <__aeabi_dmul>
 8002a58:	f7fd ffee 	bl	8000a38 <__aeabi_d2iz>
 8002a5c:	462a      	mov	r2, r5
 8002a5e:	a902      	add	r1, sp, #8
 8002a60:	f004 f8c8 	bl	8006bf4 <itoa>
	strcat(str,temp);
 8002a64:	a902      	add	r1, sp, #8
 8002a66:	4620      	mov	r0, r4
 8002a68:	f004 f914 	bl	8006c94 <strcat>
	strcat(str,delim);
 8002a6c:	4669      	mov	r1, sp
 8002a6e:	4620      	mov	r0, r4
 8002a70:	f004 f910 	bl	8006c94 <strcat>

	itoa((int)(XIMU_sens.az*1000),temp,10);
 8002a74:	e9d6 010c 	ldrd	r0, r1, [r6, #48]	; 0x30
 8002a78:	4b8c      	ldr	r3, [pc, #560]	; (8002cac <build_data_str+0x31c>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f7fd fd2c 	bl	80004d8 <__aeabi_dmul>
 8002a80:	f7fd ffda 	bl	8000a38 <__aeabi_d2iz>
 8002a84:	462a      	mov	r2, r5
 8002a86:	a902      	add	r1, sp, #8
 8002a88:	f004 f8b4 	bl	8006bf4 <itoa>
	strcat(str,temp);
 8002a8c:	a902      	add	r1, sp, #8
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f004 f900 	bl	8006c94 <strcat>
	strcat(str,delim);
 8002a94:	4669      	mov	r1, sp
 8002a96:	4620      	mov	r0, r4
 8002a98:	f004 f8fc 	bl	8006c94 <strcat>

	itoa((int)(XIMU_sens.gx*1000),temp,10);
 8002a9c:	e9d6 010e 	ldrd	r0, r1, [r6, #56]	; 0x38
 8002aa0:	4b82      	ldr	r3, [pc, #520]	; (8002cac <build_data_str+0x31c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f7fd fd18 	bl	80004d8 <__aeabi_dmul>
 8002aa8:	f7fd ffc6 	bl	8000a38 <__aeabi_d2iz>
 8002aac:	462a      	mov	r2, r5
 8002aae:	a902      	add	r1, sp, #8
 8002ab0:	f004 f8a0 	bl	8006bf4 <itoa>
	strcat(str,temp);
 8002ab4:	a902      	add	r1, sp, #8
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	f004 f8ec 	bl	8006c94 <strcat>
	strcat(str,delim);
 8002abc:	4669      	mov	r1, sp
 8002abe:	4620      	mov	r0, r4
 8002ac0:	f004 f8e8 	bl	8006c94 <strcat>

	itoa((int)(XIMU_sens.gy*1000),temp,10);
 8002ac4:	e9d6 0110 	ldrd	r0, r1, [r6, #64]	; 0x40
 8002ac8:	4b78      	ldr	r3, [pc, #480]	; (8002cac <build_data_str+0x31c>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	f7fd fd04 	bl	80004d8 <__aeabi_dmul>
 8002ad0:	f7fd ffb2 	bl	8000a38 <__aeabi_d2iz>
 8002ad4:	462a      	mov	r2, r5
 8002ad6:	a902      	add	r1, sp, #8
 8002ad8:	f004 f88c 	bl	8006bf4 <itoa>
	strcat(str,temp);
 8002adc:	a902      	add	r1, sp, #8
 8002ade:	4620      	mov	r0, r4
 8002ae0:	f004 f8d8 	bl	8006c94 <strcat>
	strcat(str,delim);
 8002ae4:	4669      	mov	r1, sp
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	f004 f8d4 	bl	8006c94 <strcat>

	itoa((int)(XIMU_sens.gz*1000),temp,10);
 8002aec:	e9d6 0112 	ldrd	r0, r1, [r6, #72]	; 0x48
 8002af0:	4b6e      	ldr	r3, [pc, #440]	; (8002cac <build_data_str+0x31c>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	f7fd fcf0 	bl	80004d8 <__aeabi_dmul>
 8002af8:	f7fd ff9e 	bl	8000a38 <__aeabi_d2iz>
 8002afc:	462a      	mov	r2, r5
 8002afe:	a902      	add	r1, sp, #8
 8002b00:	f004 f878 	bl	8006bf4 <itoa>
	strcat(str,temp);
 8002b04:	a902      	add	r1, sp, #8
 8002b06:	4620      	mov	r0, r4
 8002b08:	f004 f8c4 	bl	8006c94 <strcat>
	strcat(str,delim);
 8002b0c:	4669      	mov	r1, sp
 8002b0e:	4620      	mov	r0, r4
 8002b10:	f004 f8c0 	bl	8006c94 <strcat>

	itoa((int)(XIMU_sens.mx*1000),temp,10);
 8002b14:	e9d6 0116 	ldrd	r0, r1, [r6, #88]	; 0x58
 8002b18:	4b64      	ldr	r3, [pc, #400]	; (8002cac <build_data_str+0x31c>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f7fd fcdc 	bl	80004d8 <__aeabi_dmul>
 8002b20:	f7fd ff8a 	bl	8000a38 <__aeabi_d2iz>
 8002b24:	462a      	mov	r2, r5
 8002b26:	a902      	add	r1, sp, #8
 8002b28:	f004 f864 	bl	8006bf4 <itoa>
	strcat(str,temp);
 8002b2c:	a902      	add	r1, sp, #8
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f004 f8b0 	bl	8006c94 <strcat>
	strcat(str,delim);
 8002b34:	4669      	mov	r1, sp
 8002b36:	4620      	mov	r0, r4
 8002b38:	f004 f8ac 	bl	8006c94 <strcat>

	itoa((int)(XIMU_sens.my*1000),temp,10);
 8002b3c:	e9d6 0118 	ldrd	r0, r1, [r6, #96]	; 0x60
 8002b40:	4b5a      	ldr	r3, [pc, #360]	; (8002cac <build_data_str+0x31c>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	f7fd fcc8 	bl	80004d8 <__aeabi_dmul>
 8002b48:	f7fd ff76 	bl	8000a38 <__aeabi_d2iz>
 8002b4c:	462a      	mov	r2, r5
 8002b4e:	a902      	add	r1, sp, #8
 8002b50:	f004 f850 	bl	8006bf4 <itoa>
	strcat(str,temp);
 8002b54:	a902      	add	r1, sp, #8
 8002b56:	4620      	mov	r0, r4
 8002b58:	f004 f89c 	bl	8006c94 <strcat>
	strcat(str,delim);
 8002b5c:	4669      	mov	r1, sp
 8002b5e:	4620      	mov	r0, r4
 8002b60:	f004 f898 	bl	8006c94 <strcat>

	itoa((int)(XIMU_sens.mz*1000),temp,10);
 8002b64:	e9d6 011a 	ldrd	r0, r1, [r6, #104]	; 0x68
 8002b68:	4b50      	ldr	r3, [pc, #320]	; (8002cac <build_data_str+0x31c>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f7fd fcb4 	bl	80004d8 <__aeabi_dmul>
 8002b70:	f7fd ff62 	bl	8000a38 <__aeabi_d2iz>
 8002b74:	462a      	mov	r2, r5
 8002b76:	a902      	add	r1, sp, #8
 8002b78:	f004 f83c 	bl	8006bf4 <itoa>
	strcat(str,temp);
 8002b7c:	a902      	add	r1, sp, #8
 8002b7e:	4620      	mov	r0, r4
 8002b80:	f004 f888 	bl	8006c94 <strcat>
	strcat(str,delim);
 8002b84:	4669      	mov	r1, sp
 8002b86:	4620      	mov	r0, r4
 8002b88:	f004 f884 	bl	8006c94 <strcat>

	itoa((int)(XIMU_sens.pressure*1000),temp,10);
 8002b8c:	e9d6 011e 	ldrd	r0, r1, [r6, #120]	; 0x78
 8002b90:	4b46      	ldr	r3, [pc, #280]	; (8002cac <build_data_str+0x31c>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	f7fd fca0 	bl	80004d8 <__aeabi_dmul>
 8002b98:	f7fd ff4e 	bl	8000a38 <__aeabi_d2iz>
 8002b9c:	462a      	mov	r2, r5
 8002b9e:	a902      	add	r1, sp, #8
 8002ba0:	f004 f828 	bl	8006bf4 <itoa>
	strcat(str,temp);
 8002ba4:	a902      	add	r1, sp, #8
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	f004 f874 	bl	8006c94 <strcat>
	strcat(str,delim);
 8002bac:	4669      	mov	r1, sp
 8002bae:	4620      	mov	r0, r4
 8002bb0:	f004 f870 	bl	8006c94 <strcat>

	itoa((int)(XIMU_sens.temperature*1000),temp,10);
 8002bb4:	e9d6 0120 	ldrd	r0, r1, [r6, #128]	; 0x80
 8002bb8:	4b3c      	ldr	r3, [pc, #240]	; (8002cac <build_data_str+0x31c>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f7fd fc8c 	bl	80004d8 <__aeabi_dmul>
 8002bc0:	f7fd ff3a 	bl	8000a38 <__aeabi_d2iz>
 8002bc4:	462a      	mov	r2, r5
 8002bc6:	a902      	add	r1, sp, #8
 8002bc8:	f004 f814 	bl	8006bf4 <itoa>
	strcat(str,temp);
 8002bcc:	a902      	add	r1, sp, #8
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f004 f860 	bl	8006c94 <strcat>
	strcat(str,delim);
 8002bd4:	4669      	mov	r1, sp
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	f004 f85c 	bl	8006c94 <strcat>

	itoa((int)(XIMU_sens.lat*1000000),temp,10);
 8002bdc:	a330      	add	r3, pc, #192	; (adr r3, 8002ca0 <build_data_str+0x310>)
 8002bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be2:	e9d6 0124 	ldrd	r0, r1, [r6, #144]	; 0x90
 8002be6:	f7fd fc77 	bl	80004d8 <__aeabi_dmul>
 8002bea:	f7fd ff25 	bl	8000a38 <__aeabi_d2iz>
 8002bee:	462a      	mov	r2, r5
 8002bf0:	a902      	add	r1, sp, #8
 8002bf2:	f003 ffff 	bl	8006bf4 <itoa>
	strcat(str,temp);
 8002bf6:	a902      	add	r1, sp, #8
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	f004 f84b 	bl	8006c94 <strcat>
	strcat(str,delim);
 8002bfe:	4669      	mov	r1, sp
 8002c00:	4620      	mov	r0, r4
 8002c02:	f004 f847 	bl	8006c94 <strcat>

	itoa((int)(XIMU_sens.lon*1000000),temp,10);
 8002c06:	a326      	add	r3, pc, #152	; (adr r3, 8002ca0 <build_data_str+0x310>)
 8002c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0c:	e9d6 0126 	ldrd	r0, r1, [r6, #152]	; 0x98
 8002c10:	f7fd fc62 	bl	80004d8 <__aeabi_dmul>
 8002c14:	f7fd ff10 	bl	8000a38 <__aeabi_d2iz>
 8002c18:	462a      	mov	r2, r5
 8002c1a:	a902      	add	r1, sp, #8
 8002c1c:	f003 ffea 	bl	8006bf4 <itoa>
	strcat(str,temp);
 8002c20:	a902      	add	r1, sp, #8
 8002c22:	4620      	mov	r0, r4
 8002c24:	f004 f836 	bl	8006c94 <strcat>
	strcat(str,delim);
 8002c28:	4669      	mov	r1, sp
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	f004 f832 	bl	8006c94 <strcat>

	itoa((int)(XIMU_sens.qag_ts),temp,10);
 8002c30:	462a      	mov	r2, r5
 8002c32:	a902      	add	r1, sp, #8
 8002c34:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8002c36:	f003 ffdd 	bl	8006bf4 <itoa>
	strcat(str,temp);
 8002c3a:	a902      	add	r1, sp, #8
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	f004 f829 	bl	8006c94 <strcat>
	strcat(str,delim);
 8002c42:	4669      	mov	r1, sp
 8002c44:	4620      	mov	r0, r4
 8002c46:	f004 f825 	bl	8006c94 <strcat>

	itoa((int)(XIMU_sens.m_ts),temp,10);
 8002c4a:	462a      	mov	r2, r5
 8002c4c:	a902      	add	r1, sp, #8
 8002c4e:	6f30      	ldr	r0, [r6, #112]	; 0x70
 8002c50:	f003 ffd0 	bl	8006bf4 <itoa>
	strcat(str,temp);
 8002c54:	a902      	add	r1, sp, #8
 8002c56:	4620      	mov	r0, r4
 8002c58:	f004 f81c 	bl	8006c94 <strcat>
	strcat(str,delim);
 8002c5c:	4669      	mov	r1, sp
 8002c5e:	4620      	mov	r0, r4
 8002c60:	f004 f818 	bl	8006c94 <strcat>

	itoa((int)(XIMU_sens.pt_ts),temp,10);
 8002c64:	462a      	mov	r2, r5
 8002c66:	a902      	add	r1, sp, #8
 8002c68:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
 8002c6c:	f003 ffc2 	bl	8006bf4 <itoa>
	strcat(str,temp);
 8002c70:	a902      	add	r1, sp, #8
 8002c72:	4620      	mov	r0, r4
 8002c74:	f004 f80e 	bl	8006c94 <strcat>
	strcat(str,delim);
 8002c78:	4669      	mov	r1, sp
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	f004 f80a 	bl	8006c94 <strcat>

	itoa((int)(XIMU_sens.gps_ts),temp,10);
 8002c80:	462a      	mov	r2, r5
 8002c82:	a902      	add	r1, sp, #8
 8002c84:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
 8002c88:	f003 ffb4 	bl	8006bf4 <itoa>
	strcat(str,temp);
 8002c8c:	a902      	add	r1, sp, #8
 8002c8e:	4620      	mov	r0, r4
 8002c90:	f004 f800 	bl	8006c94 <strcat>
	strcat(str,term);
 8002c94:	a901      	add	r1, sp, #4
 8002c96:	4620      	mov	r0, r4
 8002c98:	f003 fffc 	bl	8006c94 <strcat>
}
 8002c9c:	b00a      	add	sp, #40	; 0x28
 8002c9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ca0:	00000000 	.word	0x00000000
 8002ca4:	412e8480 	.word	0x412e8480
 8002ca8:	200005f8 	.word	0x200005f8
 8002cac:	408f4000 	.word	0x408f4000

08002cb0 <GNSS_set_huart>:
 */

#include "gnss.h"

void GNSS_set_huart(UART_HandleTypeDef* huart){
	huartx = huart;
 8002cb0:	4b01      	ldr	r3, [pc, #4]	; (8002cb8 <GNSS_set_huart+0x8>)
 8002cb2:	6018      	str	r0, [r3, #0]
}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20000d10 	.word	0x20000d10

08002cbc <parse_GNGGA>:
/**
 * parse GNSS.GNGGA sentence into fields as strings.(char[] s)
 * @param msg GNSS.GNGGA message
 * @param fields GNSS.GNGGA message parser output
 */
void parse_GNGGA(unsigned char* msg, char fields[][MAX_FIELD_SIZE]){
 8002cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
	        fields[current_field][current_pos] = *ch_ptr;
	        current_pos++;
	        ch_ptr++;
	    }
        fields[current_field][current_pos]='\0';
 8002cbe:	2600      	movs	r6, #0
    while (*ch_ptr != '\0'){
 8002cc0:	7803      	ldrb	r3, [r0, #0]
 8002cc2:	b19b      	cbz	r3, 8002cec <parse_GNGGA+0x30>
 8002cc4:	4604      	mov	r4, r0
 8002cc6:	1e4d      	subs	r5, r1, #1
	        fields[current_field][current_pos] = *ch_ptr;
 8002cc8:	4603      	mov	r3, r0
 8002cca:	e001      	b.n	8002cd0 <parse_GNGGA+0x14>
 8002ccc:	f805 2f01 	strb.w	r2, [r5, #1]!
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	1b1f      	subs	r7, r3, r4
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8002cd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cd8:	2a2c      	cmp	r2, #44	; 0x2c
 8002cda:	d001      	beq.n	8002ce0 <parse_GNGGA+0x24>
 8002cdc:	2a00      	cmp	r2, #0
 8002cde:	d1f5      	bne.n	8002ccc <parse_GNGGA+0x10>
        fields[current_field][current_pos]='\0';
 8002ce0:	55ce      	strb	r6, [r1, r7]
	    current_field++;
	    if (*ch_ptr != '\0'){ // skip ',' when not at end of string
 8002ce2:	7803      	ldrb	r3, [r0, #0]
 8002ce4:	b103      	cbz	r3, 8002ce8 <parse_GNGGA+0x2c>
	        ch_ptr++;
 8002ce6:	3001      	adds	r0, #1
 8002ce8:	310c      	adds	r1, #12
 8002cea:	e7e9      	b.n	8002cc0 <parse_GNGGA+0x4>
	    }
    }
}
 8002cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002cf0 <convert_raw_lat_lon>:
 * convert raw latitude and longitude, which have format dddmm.mmmm
 * into decimal.
 * @param raw raw latitude and longitude input
 * @return decimal latitude and longitude
 */
double convert_raw_lat_lon(double raw){
 8002cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((int)raw / 100) + (fmod(raw,100)/60);
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <convert_raw_lat_lon+0x44>)
double convert_raw_lat_lon(double raw){
 8002cf6:	4604      	mov	r4, r0
 8002cf8:	460d      	mov	r5, r1
	return ((int)raw / 100) + (fmod(raw,100)/60);
 8002cfa:	f006 fb79 	bl	80093f0 <fmod>
 8002cfe:	4606      	mov	r6, r0
 8002d00:	460f      	mov	r7, r1
 8002d02:	4620      	mov	r0, r4
 8002d04:	4629      	mov	r1, r5
 8002d06:	f7fd fe97 	bl	8000a38 <__aeabi_d2iz>
 8002d0a:	2364      	movs	r3, #100	; 0x64
 8002d0c:	fb90 f0f3 	sdiv	r0, r0, r3
 8002d10:	f7fd fb78 	bl	8000404 <__aeabi_i2d>
 8002d14:	2200      	movs	r2, #0
 8002d16:	4604      	mov	r4, r0
 8002d18:	460d      	mov	r5, r1
 8002d1a:	4b07      	ldr	r3, [pc, #28]	; (8002d38 <convert_raw_lat_lon+0x48>)
 8002d1c:	4630      	mov	r0, r6
 8002d1e:	4639      	mov	r1, r7
 8002d20:	f7fd fd04 	bl	800072c <__aeabi_ddiv>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4620      	mov	r0, r4
 8002d2a:	4629      	mov	r1, r5
 8002d2c:	f7fd fa1e 	bl	800016c <__adddf3>
}
 8002d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40590000 	.word	0x40590000
 8002d38:	404e0000 	.word	0x404e0000

08002d3c <GNSS_Init>:
 * initializes the GNSS interrupt.
 *
 * call this function before main loop.
 */
void GNSS_Init(){
	HAL_UART_Receive_DMA(huartx, GNSS.dma_buffer, DMA_BUFFER_SIZE);
 8002d3c:	4b03      	ldr	r3, [pc, #12]	; (8002d4c <GNSS_Init+0x10>)
 8002d3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d42:	4903      	ldr	r1, [pc, #12]	; (8002d50 <GNSS_Init+0x14>)
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	f002 bb99 	b.w	800547c <HAL_UART_Receive_DMA>
 8002d4a:	bf00      	nop
 8002d4c:	20000d10 	.word	0x20000d10
 8002d50:	20000850 	.word	0x20000850

08002d54 <GNSS_RX_Update>:
	//https://www.devcoons.com/stm32-uart-receive-unknown-size-data-using-dma-and-freertos/
}

int GNSS_RX_Update(){
 8002d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d58:	b0b3      	sub	sp, #204	; 0xcc
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d5a:	b672      	cpsid	i

	__disable_irq();//I don't understand this
	int i = DMA_BUFFER_SIZE - huartx->hdmarx->Instance->CNDTR; //last byte received
 8002d5c:	4b77      	ldr	r3, [pc, #476]	; (8002f3c <GNSS_RX_Update+0x1e8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685e      	ldr	r6, [r3, #4]
 8002d66:	f5c6 6680 	rsb	r6, r6, #1024	; 0x400
  __ASM volatile ("cpsie i" : : : "memory");
 8002d6a:	b662      	cpsie	i
	__enable_irq();//I don't understand this

	int new_information = 0;
 8002d6c:	f04f 0800 	mov.w	r8, #0

		if (str != NULL){
			char fields[NUM_FIELDS][MAX_FIELD_SIZE];
			parse_GNGGA(GNSS.message_buffer,fields);
			//field 1: UTC time
			sscanf(fields[1],"%2d%2d%2d.%3d",&GNSS.GNGGA.UTC_Hour,&GNSS.GNGGA.UTC_Min,&GNSS.GNGGA.UTC_Second,&GNSS.GNGGA.UTC_Millis);
 8002d70:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8002f58 <GNSS_RX_Update+0x204>
			//field 14: checksum
			GNSS.GNGGA.checksum[0] = fields[14][1];//fields[14][0] is always '*'
			GNSS.GNGGA.checksum[1] = fields[14][2];

			//convert raw latitude and longitude to decimal format
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 8002d74:	f109 070c 	add.w	r7, r9, #12
	while (GNSS.start != i){
 8002d78:	4c71      	ldr	r4, [pc, #452]	; (8002f40 <GNSS_RX_Update+0x1ec>)
 8002d7a:	f04f 0b00 	mov.w	fp, #0
 8002d7e:	4625      	mov	r5, r4
		GNSS.message_buffer[counter] = '\n';
 8002d80:	f04f 0a0a 	mov.w	sl, #10
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8002d84:	f504 6280 	add.w	r2, r4, #1024	; 0x400
	while (GNSS.start != i){
 8002d88:	f8d4 3464 	ldr.w	r3, [r4, #1124]	; 0x464
 8002d8c:	42b3      	cmp	r3, r6
 8002d8e:	d00f      	beq.n	8002db0 <GNSS_RX_Update+0x5c>
		if (GNSS.dma_buffer[GNSS.start] != '$'){
 8002d90:	5ce1      	ldrb	r1, [r4, r3]
 8002d92:	2924      	cmp	r1, #36	; 0x24
 8002d94:	d006      	beq.n	8002da4 <GNSS_RX_Update+0x50>
 8002d96:	2100      	movs	r1, #0
				if (GNSS.dma_buffer[GNSS.start] == '$'){
 8002d98:	5ce8      	ldrb	r0, [r5, r3]
 8002d9a:	2824      	cmp	r0, #36	; 0x24
 8002d9c:	d10c      	bne.n	8002db8 <GNSS_RX_Update+0x64>
 8002d9e:	b109      	cbz	r1, 8002da4 <GNSS_RX_Update+0x50>
 8002da0:	f8c5 3464 	str.w	r3, [r5, #1124]	; 0x464
		if (GNSS.dma_buffer[GNSS.start] != '$'){break;}//if start not found, return.
 8002da4:	f8d5 1464 	ldr.w	r1, [r5, #1124]	; 0x464
 8002da8:	5c6b      	ldrb	r3, [r5, r1]
 8002daa:	2b24      	cmp	r3, #36	; 0x24
 8002dac:	f000 80b2 	beq.w	8002f14 <GNSS_RX_Update+0x1c0>
			new_information = 1;
		}
	}

	return new_information;
}
 8002db0:	4640      	mov	r0, r8
 8002db2:	b033      	add	sp, #204	; 0xcc
 8002db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for(;GNSS.start != i;GNSS.start = (GNSS.start + 1) % DMA_BUFFER_SIZE){
 8002db8:	3301      	adds	r3, #1
 8002dba:	4259      	negs	r1, r3
 8002dbc:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002dc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dc4:	bf58      	it	pl
 8002dc6:	424b      	negpl	r3, r1
 8002dc8:	42b3      	cmp	r3, r6
 8002dca:	f04f 0101 	mov.w	r1, #1
 8002dce:	d1e3      	bne.n	8002d98 <GNSS_RX_Update+0x44>
 8002dd0:	f8c5 6464 	str.w	r6, [r5, #1124]	; 0x464
 8002dd4:	e7e6      	b.n	8002da4 <GNSS_RX_Update+0x50>
			if (GNSS.dma_buffer[end] == '\n'){
 8002dd6:	5ce8      	ldrb	r0, [r5, r3]
 8002dd8:	280a      	cmp	r0, #10
 8002dda:	d009      	beq.n	8002df0 <GNSS_RX_Update+0x9c>
		for(end = GNSS.start; end != i; end = (end + 1) % DMA_BUFFER_SIZE){
 8002ddc:	3301      	adds	r3, #1
 8002dde:	4258      	negs	r0, r3
 8002de0:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8002de4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002de8:	bf58      	it	pl
 8002dea:	4243      	negpl	r3, r0
 8002dec:	42b3      	cmp	r3, r6
 8002dee:	d1f2      	bne.n	8002dd6 <GNSS_RX_Update+0x82>
		if (GNSS.dma_buffer[end] != '\n'){break;}//if end not found, return.
 8002df0:	5ce8      	ldrb	r0, [r5, r3]
 8002df2:	280a      	cmp	r0, #10
 8002df4:	d1dc      	bne.n	8002db0 <GNSS_RX_Update+0x5c>
		int counter = 0;
 8002df6:	f04f 0c00 	mov.w	ip, #0
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 8002dfa:	428b      	cmp	r3, r1
 8002dfc:	f10c 0001 	add.w	r0, ip, #1
 8002e00:	f040 808a 	bne.w	8002f18 <GNSS_RX_Update+0x1c4>
		GNSS.message_buffer[counter] = '\n';
 8002e04:	44ac      	add	ip, r5
		GNSS.message_buffer[counter+1] = '\0';
 8002e06:	4428      	add	r0, r5
		GNSS.message_buffer[counter] = '\n';
 8002e08:	f88c a400 	strb.w	sl, [ip, #1024]	; 0x400
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8002e0c:	494d      	ldr	r1, [pc, #308]	; (8002f44 <GNSS_RX_Update+0x1f0>)
		GNSS.message_buffer[counter+1] = '\0';
 8002e0e:	f880 b400 	strb.w	fp, [r0, #1024]	; 0x400
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8002e12:	4610      	mov	r0, r2
 8002e14:	9203      	str	r2, [sp, #12]
		GNSS.start = end;
 8002e16:	f8c5 3464 	str.w	r3, [r5, #1124]	; 0x464
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8002e1a:	f003 ff52 	bl	8006cc2 <strstr>
		if (str != NULL){
 8002e1e:	9a03      	ldr	r2, [sp, #12]
 8002e20:	2800      	cmp	r0, #0
 8002e22:	d0b1      	beq.n	8002d88 <GNSS_RX_Update+0x34>
			sscanf(fields[1],"%2d%2d%2d.%3d",&GNSS.GNGGA.UTC_Hour,&GNSS.GNGGA.UTC_Min,&GNSS.GNGGA.UTC_Second,&GNSS.GNGGA.UTC_Millis);
 8002e24:	4d48      	ldr	r5, [pc, #288]	; (8002f48 <GNSS_RX_Update+0x1f4>)
			parse_GNGGA(GNSS.message_buffer,fields);
 8002e26:	a905      	add	r1, sp, #20
 8002e28:	4848      	ldr	r0, [pc, #288]	; (8002f4c <GNSS_RX_Update+0x1f8>)
 8002e2a:	f7ff ff47 	bl	8002cbc <parse_GNGGA>
			sscanf(fields[1],"%2d%2d%2d.%3d",&GNSS.GNGGA.UTC_Hour,&GNSS.GNGGA.UTC_Min,&GNSS.GNGGA.UTC_Second,&GNSS.GNGGA.UTC_Millis);
 8002e2e:	f1a5 0208 	sub.w	r2, r5, #8
 8002e32:	1f2b      	subs	r3, r5, #4
 8002e34:	4946      	ldr	r1, [pc, #280]	; (8002f50 <GNSS_RX_Update+0x1fc>)
 8002e36:	f8cd 9004 	str.w	r9, [sp, #4]
 8002e3a:	9500      	str	r5, [sp, #0]
 8002e3c:	a808      	add	r0, sp, #32
 8002e3e:	f003 fefd 	bl	8006c3c <siscanf>
			GNSS.GNGGA.lat_raw = atof(fields[2]);
 8002e42:	a80b      	add	r0, sp, #44	; 0x2c
 8002e44:	f003 fe8c 	bl	8006b60 <atof>
 8002e48:	f7fd fe3e 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.North_South = fields[3][0];
 8002e4c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
			GNSS.GNGGA.lat_raw = atof(fields[2]);
 8002e50:	f8c4 0478 	str.w	r0, [r4, #1144]	; 0x478
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 8002e54:	a811      	add	r0, sp, #68	; 0x44
			GNSS.GNGGA.North_South = fields[3][0];
 8002e56:	f884 3488 	strb.w	r3, [r4, #1160]	; 0x488
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 8002e5a:	f003 fe81 	bl	8006b60 <atof>
			GNSS.GNGGA.East_West = fields[5][0];
 8002e5e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 8002e62:	e9c5 0108 	strd	r0, r1, [r5, #32]
			GNSS.GNGGA.status = atoi(fields[6]);
 8002e66:	a817      	add	r0, sp, #92	; 0x5c
			GNSS.GNGGA.East_West = fields[5][0];
 8002e68:	f884 34a0 	strb.w	r3, [r4, #1184]	; 0x4a0
			GNSS.GNGGA.status = atoi(fields[6]);
 8002e6c:	f003 fe7b 	bl	8006b66 <atoi>
 8002e70:	f8c4 04a4 	str.w	r0, [r4, #1188]	; 0x4a4
			GNSS.GNGGA.num_sat = atoi(fields[7]);
 8002e74:	a81a      	add	r0, sp, #104	; 0x68
 8002e76:	f003 fe76 	bl	8006b66 <atoi>
 8002e7a:	f8c4 04a8 	str.w	r0, [r4, #1192]	; 0x4a8
			GNSS.GNGGA.HDOP = atof(fields[8]);
 8002e7e:	a81d      	add	r0, sp, #116	; 0x74
 8002e80:	f003 fe6e 	bl	8006b60 <atof>
 8002e84:	f7fd fe20 	bl	8000ac8 <__aeabi_d2f>
 8002e88:	f8c4 04ac 	str.w	r0, [r4, #1196]	; 0x4ac
			GNSS.GNGGA.MSL_alt = atof(fields[9]);
 8002e8c:	a820      	add	r0, sp, #128	; 0x80
 8002e8e:	f003 fe67 	bl	8006b60 <atof>
 8002e92:	f7fd fe19 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.MSL_Unit = fields[10][0];
 8002e96:	f89d 308c 	ldrb.w	r3, [sp, #140]	; 0x8c
			GNSS.GNGGA.MSL_alt = atof(fields[9]);
 8002e9a:	f8c4 04b0 	str.w	r0, [r4, #1200]	; 0x4b0
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 8002e9e:	a826      	add	r0, sp, #152	; 0x98
			GNSS.GNGGA.MSL_Unit = fields[10][0];
 8002ea0:	f884 34b4 	strb.w	r3, [r4, #1204]	; 0x4b4
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 8002ea4:	f003 fe5c 	bl	8006b60 <atof>
 8002ea8:	f7fd fe0e 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.Geoid_Unit = fields[12][0];
 8002eac:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 8002eb0:	f8c4 04b8 	str.w	r0, [r4, #1208]	; 0x4b8
			GNSS.GNGGA.Geoid_Unit = fields[12][0];
 8002eb4:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
			GNSS.GNGGA.checksum[0] = fields[14][1];//fields[14][0] is always '*'
 8002eb8:	f89d 30bd 	ldrb.w	r3, [sp, #189]	; 0xbd
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 8002ebc:	f8d4 0478 	ldr.w	r0, [r4, #1144]	; 0x478
			GNSS.GNGGA.checksum[0] = fields[14][1];//fields[14][0] is always '*'
 8002ec0:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd
			GNSS.GNGGA.checksum[1] = fields[14][2];
 8002ec4:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
			new_information = 1;
 8002ec8:	f04f 0801 	mov.w	r8, #1
			GNSS.GNGGA.checksum[1] = fields[14][2];
 8002ecc:	f884 34be 	strb.w	r3, [r4, #1214]	; 0x4be
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 8002ed0:	f7fd faaa 	bl	8000428 <__aeabi_f2d>
 8002ed4:	f7ff ff0c 	bl	8002cf0 <convert_raw_lat_lon>
 8002ed8:	e9c7 0100 	strd	r0, r1, [r7]
			GNSS.GNGGA.lon = convert_raw_lat_lon(GNSS.GNGGA.lon_raw);
 8002edc:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8002ee0:	f7ff ff06 	bl	8002cf0 <convert_raw_lat_lon>
			GNSS.GNGGA.lat = GNSS.GNGGA.North_South == 'N' ? GNSS.GNGGA.lat : -GNSS.GNGGA.lat;
 8002ee4:	f894 3488 	ldrb.w	r3, [r4, #1160]	; 0x488
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	2b4e      	cmp	r3, #78	; 0x4e
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4692      	mov	sl, r2
 8002ef0:	bf18      	it	ne
 8002ef2:	f103 4300 	addne.w	r3, r3, #2147483648	; 0x80000000
 8002ef6:	469b      	mov	fp, r3
			GNSS.GNGGA.lon = GNSS.GNGGA.East_West == 'E' ? GNSS.GNGGA.lon : -GNSS.GNGGA.lon;
 8002ef8:	f894 34a0 	ldrb.w	r3, [r4, #1184]	; 0x4a0
 8002efc:	4602      	mov	r2, r0
 8002efe:	2b45      	cmp	r3, #69	; 0x45
 8002f00:	bf18      	it	ne
 8002f02:	f101 4100 	addne.w	r1, r1, #2147483648	; 0x80000000
 8002f06:	460b      	mov	r3, r1
 8002f08:	4912      	ldr	r1, [pc, #72]	; (8002f54 <GNSS_RX_Update+0x200>)
			GNSS.GNGGA.lat = GNSS.GNGGA.North_South == 'N' ? GNSS.GNGGA.lat : -GNSS.GNGGA.lat;
 8002f0a:	e9c7 ab00 	strd	sl, fp, [r7]
			GNSS.GNGGA.lon = GNSS.GNGGA.East_West == 'E' ? GNSS.GNGGA.lon : -GNSS.GNGGA.lon;
 8002f0e:	e9c1 2300 	strd	r2, r3, [r1]
 8002f12:	e731      	b.n	8002d78 <GNSS_RX_Update+0x24>
		for(end = GNSS.start; end != i; end = (end + 1) % DMA_BUFFER_SIZE){
 8002f14:	460b      	mov	r3, r1
 8002f16:	e769      	b.n	8002dec <GNSS_RX_Update+0x98>
			GNSS.message_buffer[counter] = GNSS.dma_buffer[j];
 8002f18:	f815 e001 	ldrb.w	lr, [r5, r1]
 8002f1c:	eb05 0c00 	add.w	ip, r5, r0
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 8002f20:	3101      	adds	r1, #1
			GNSS.message_buffer[counter] = GNSS.dma_buffer[j];
 8002f22:	f88c e3ff 	strb.w	lr, [ip, #1023]	; 0x3ff
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 8002f26:	f1d1 0c00 	rsbs	ip, r1, #0
 8002f2a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8002f2e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002f32:	bf58      	it	pl
 8002f34:	f1cc 0100 	rsbpl	r1, ip, #0
 8002f38:	4684      	mov	ip, r0
 8002f3a:	e75e      	b.n	8002dfa <GNSS_RX_Update+0xa6>
 8002f3c:	20000d10 	.word	0x20000d10
 8002f40:	20000850 	.word	0x20000850
 8002f44:	0800a39e 	.word	0x0800a39e
 8002f48:	20000cc0 	.word	0x20000cc0
 8002f4c:	20000c50 	.word	0x20000c50
 8002f50:	0800a3a6 	.word	0x0800a3a6
 8002f54:	20000ce8 	.word	0x20000ce8
 8002f58:	20000cc4 	.word	0x20000cc4

08002f5c <I2C_read>:
 *      Author: yuche
 */

#include "i2c.h"

uint8_t I2C_read(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* output){
 8002f5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int state = HAL_I2C_Mem_Read(i2cx,target_address << 1,register_address,sizeof(register_address),output,length,20);//timeout is magic. Do not touch
 8002f5e:	2414      	movs	r4, #20
 8002f60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002f64:	9b06      	ldr	r3, [sp, #24]
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	2301      	movs	r3, #1
 8002f6a:	4099      	lsls	r1, r3
 8002f6c:	f001 f85a 	bl	8004024 <HAL_I2C_Mem_Read>
	if (state != HAL_OK){
 8002f70:	b100      	cbz	r0, 8002f74 <I2C_read+0x18>
		__NOP();
 8002f72:	bf00      	nop
	}
	return state;
}
 8002f74:	b004      	add	sp, #16
 8002f76:	bd10      	pop	{r4, pc}

08002f78 <I2C_write>:

uint8_t I2C_write(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* input){
 8002f78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int state =  HAL_I2C_Mem_Write(i2cx,target_address << 1,register_address,sizeof(register_address),input,length,20);//timeout is magic. Do not touch
 8002f7a:	2414      	movs	r4, #20
 8002f7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002f80:	9b06      	ldr	r3, [sp, #24]
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	2301      	movs	r3, #1
 8002f86:	4099      	lsls	r1, r3
 8002f88:	f000 ffbc 	bl	8003f04 <HAL_I2C_Mem_Write>
	if (state != HAL_OK){
 8002f8c:	b100      	cbz	r0, 8002f90 <I2C_write+0x18>
			__NOP();
 8002f8e:	bf00      	nop
		}
	return state;
}
 8002f90:	b004      	add	sp, #16
 8002f92:	bd10      	pop	{r4, pc}

08002f94 <led_update>:
#include "stm32f1xx_hal.h"

uint8_t led_pattern = LED_DISCONNECTED;
uint8_t led_state = 0;

void led_update(){
 8002f94:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,  1 - (led_pattern>>led_state) & 0x01);
 8002f96:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <led_update+0x2c>)
 8002f98:	4c0a      	ldr	r4, [pc, #40]	; (8002fc4 <led_update+0x30>)
 8002f9a:	781a      	ldrb	r2, [r3, #0]
 8002f9c:	7823      	ldrb	r3, [r4, #0]
 8002f9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fa2:	411a      	asrs	r2, r3
 8002fa4:	f1c2 0201 	rsb	r2, r2, #1
 8002fa8:	f002 0201 	and.w	r2, r2, #1
 8002fac:	4806      	ldr	r0, [pc, #24]	; (8002fc8 <led_update+0x34>)
 8002fae:	f000 fd3d 	bl	8003a2c <HAL_GPIO_WritePin>
	led_state++;
 8002fb2:	7823      	ldrb	r3, [r4, #0]
 8002fb4:	3301      	adds	r3, #1
	led_state = led_state % 8;
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	7023      	strb	r3, [r4, #0]
}
 8002fbc:	bd10      	pop	{r4, pc}
 8002fbe:	bf00      	nop
 8002fc0:	200003bc 	.word	0x200003bc
 8002fc4:	200003bd 	.word	0x200003bd
 8002fc8:	40011000 	.word	0x40011000

08002fcc <led_set>:

void led_set(uint8_t led_pattern_){
	led_pattern = led_pattern_;
 8002fcc:	4b01      	ldr	r3, [pc, #4]	; (8002fd4 <led_set+0x8>)
 8002fce:	7018      	strb	r0, [r3, #0]
}
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	200003bc 	.word	0x200003bc

08002fd8 <mpu_set_i2c>:

enum MPU9250_GYRO_FSR gyro_fsr = MPU9250_NUM_GYRO_FSR;
enum MPU9250_ACCEL_FSR accel_fsr = MPU9250_NUM_ACCEL_FSR;

void mpu_set_i2c(I2C_HandleTypeDef* i2cx){
	mpu_i2cx = i2cx;
 8002fd8:	4b01      	ldr	r3, [pc, #4]	; (8002fe0 <mpu_set_i2c+0x8>)
 8002fda:	6018      	str	r0, [r3, #0]
}
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	200005f0 	.word	0x200005f0

08002fe4 <i2c_write>:
}

// Functions implemented for this platform(STM32F103) for DMP

int i2c_write(unsigned char slave_addr, unsigned char reg_addr,
		unsigned char length, unsigned char const *data){
 8002fe4:	b507      	push	{r0, r1, r2, lr}
	return I2C_write(mpu_i2cx,slave_addr,reg_addr,length,data);
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	460a      	mov	r2, r1
 8002fec:	4601      	mov	r1, r0
 8002fee:	4803      	ldr	r0, [pc, #12]	; (8002ffc <i2c_write+0x18>)
 8002ff0:	6800      	ldr	r0, [r0, #0]
 8002ff2:	f7ff ffc1 	bl	8002f78 <I2C_write>
}
 8002ff6:	b003      	add	sp, #12
 8002ff8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ffc:	200005f0 	.word	0x200005f0

08003000 <i2c_read>:

int i2c_read(unsigned char slave_addr, unsigned char reg_addr,
		unsigned char length, unsigned char *data){
 8003000:	b507      	push	{r0, r1, r2, lr}
	return I2C_read(mpu_i2cx,slave_addr,reg_addr,length,data);
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	4613      	mov	r3, r2
 8003006:	460a      	mov	r2, r1
 8003008:	4601      	mov	r1, r0
 800300a:	4803      	ldr	r0, [pc, #12]	; (8003018 <i2c_read+0x18>)
 800300c:	6800      	ldr	r0, [r0, #0]
 800300e:	f7ff ffa5 	bl	8002f5c <I2C_read>
}
 8003012:	b003      	add	sp, #12
 8003014:	f85d fb04 	ldr.w	pc, [sp], #4
 8003018:	200005f0 	.word	0x200005f0

0800301c <delay_ms>:

void delay_ms(unsigned long num_ms){
	delay(num_ms);
 800301c:	f000 ba4e 	b.w	80034bc <delay>

08003020 <get_ms>:
}

unsigned long get_ms(unsigned long *count){
 8003020:	b510      	push	{r4, lr}
 8003022:	4604      	mov	r4, r0
	*count = millis();
 8003024:	f000 fa44 	bl	80034b0 <millis>
 8003028:	6020      	str	r0, [r4, #0]
}
 800302a:	bd10      	pop	{r4, pc}

0800302c <ms5611_set_i2c>:
/**
 * select a hal I2C to talk to MS5611
 * @param i2cx The i2c port to talk to MS5611
 */
void ms5611_set_i2c(I2C_HandleTypeDef* i2cx){
	ms5611_i2cx = i2cx;
 800302c:	4b01      	ldr	r3, [pc, #4]	; (8003034 <ms5611_set_i2c+0x8>)
 800302e:	6018      	str	r0, [r3, #0]
}
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	200007d4 	.word	0x200007d4

08003038 <ms5611_read_i2c>:
 * @param register_address register/command to request data
 * @param length length of bytes to request from MS5611
 * @param output output data
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_read_i2c(uint8_t register_address,uint8_t length,uint8_t* output){
 8003038:	b507      	push	{r0, r1, r2, lr}
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 800303a:	9200      	str	r2, [sp, #0]
 800303c:	4602      	mov	r2, r0
 800303e:	4804      	ldr	r0, [pc, #16]	; (8003050 <ms5611_read_i2c+0x18>)
 8003040:	460b      	mov	r3, r1
 8003042:	6800      	ldr	r0, [r0, #0]
 8003044:	2177      	movs	r1, #119	; 0x77
 8003046:	f7ff ff89 	bl	8002f5c <I2C_read>
}
 800304a:	b003      	add	sp, #12
 800304c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003050:	200007d4 	.word	0x200007d4

08003054 <ms5611_write_i2c>:
 * @param register_address register/command to send
 * @param length length of bytes to write to MS5611
 * @param output buffer to hold data to be sent
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_write_i2c(uint8_t register_address,uint8_t length,uint8_t* input){
 8003054:	b507      	push	{r0, r1, r2, lr}
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8003056:	9200      	str	r2, [sp, #0]
 8003058:	4602      	mov	r2, r0
 800305a:	4804      	ldr	r0, [pc, #16]	; (800306c <ms5611_write_i2c+0x18>)
 800305c:	460b      	mov	r3, r1
 800305e:	6800      	ldr	r0, [r0, #0]
 8003060:	2177      	movs	r1, #119	; 0x77
 8003062:	f7ff ff89 	bl	8002f78 <I2C_write>
}
 8003066:	b003      	add	sp, #12
 8003068:	f85d fb04 	ldr.w	pc, [sp], #4
 800306c:	200007d4 	.word	0x200007d4

08003070 <ms5611_request_pressure>:

/**
 * Start ADC conversion of raw pressure in MS5611.
 * The ADC data can be read 9.02ms later
 */
void ms5611_request_pressure(){
 8003070:	b507      	push	{r0, r1, r2, lr}
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8003072:	2100      	movs	r1, #0
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8003074:	4b08      	ldr	r3, [pc, #32]	; (8003098 <ms5611_request_pressure+0x28>)
 8003076:	aa01      	add	r2, sp, #4
 8003078:	7818      	ldrb	r0, [r3, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 800307a:	f8ad 1004 	strh.w	r1, [sp, #4]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 800307e:	0040      	lsls	r0, r0, #1
 8003080:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8003084:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8003088:	f88d 1006 	strb.w	r1, [sp, #6]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 800308c:	f7ff ffe2 	bl	8003054 <ms5611_write_i2c>
}
 8003090:	b003      	add	sp, #12
 8003092:	f85d fb04 	ldr.w	pc, [sp], #4
 8003096:	bf00      	nop
 8003098:	2000003c 	.word	0x2000003c

0800309c <ms5611_retrieve_pressure>:

/**
 * Read result of ADC conversion of raw pressure.
 */
void ms5611_retrieve_pressure(){
 800309c:	b507      	push	{r0, r1, r2, lr}
	uint8_t buffer[3] = {0x00,0x00,0x00};
 800309e:	2000      	movs	r0, #0
	ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 80030a0:	aa01      	add	r2, sp, #4
 80030a2:	2103      	movs	r1, #3
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80030a4:	f8ad 0004 	strh.w	r0, [sp, #4]
 80030a8:	f88d 0006 	strb.w	r0, [sp, #6]
	ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 80030ac:	f7ff ffc4 	bl	8003038 <ms5611_read_i2c>

	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 80030b0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80030b4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80030b8:	021b      	lsls	r3, r3, #8
 80030ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80030be:	f89d 2006 	ldrb.w	r2, [sp, #6]

	if (temp != 0){
 80030c2:	4313      	orrs	r3, r2
		raw_pressure = temp;
 80030c4:	bf1c      	itt	ne
 80030c6:	4a02      	ldrne	r2, [pc, #8]	; (80030d0 <ms5611_retrieve_pressure+0x34>)
 80030c8:	6013      	strne	r3, [r2, #0]
	}
}
 80030ca:	b003      	add	sp, #12
 80030cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80030d0:	20000d14 	.word	0x20000d14

080030d4 <ms5611_request_temperature>:

/**
 * Start ADC conversion of raw temperature in MS5611.
 * The ADC data can be read 9.02ms later
 */
void ms5611_request_temperature(){
 80030d4:	b507      	push	{r0, r1, r2, lr}
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80030d6:	2100      	movs	r1, #0
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 80030d8:	4b08      	ldr	r3, [pc, #32]	; (80030fc <ms5611_request_temperature+0x28>)
 80030da:	aa01      	add	r2, sp, #4
 80030dc:	7818      	ldrb	r0, [r3, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80030de:	f8ad 1004 	strh.w	r1, [sp, #4]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 80030e2:	0040      	lsls	r0, r0, #1
 80030e4:	f040 0050 	orr.w	r0, r0, #80	; 0x50
 80030e8:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80030ec:	f88d 1006 	strb.w	r1, [sp, #6]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 80030f0:	f7ff ffb0 	bl	8003054 <ms5611_write_i2c>
}
 80030f4:	b003      	add	sp, #12
 80030f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80030fa:	bf00      	nop
 80030fc:	2000003c 	.word	0x2000003c

08003100 <ms5611_retrieve_temperature>:

/**
 * Read result of ADC conversion of raw temperature.
 */
void ms5611_retrieve_temperature(){
 8003100:	b507      	push	{r0, r1, r2, lr}
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8003102:	2000      	movs	r0, #0
	ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 8003104:	aa01      	add	r2, sp, #4
 8003106:	2103      	movs	r1, #3
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8003108:	f8ad 0004 	strh.w	r0, [sp, #4]
 800310c:	f88d 0006 	strb.w	r0, [sp, #6]
	ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 8003110:	f7ff ff92 	bl	8003038 <ms5611_read_i2c>

	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8003114:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003118:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800311c:	021b      	lsls	r3, r3, #8
 800311e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003122:	f89d 2006 	ldrb.w	r2, [sp, #6]

	if (temp != 0){
 8003126:	4313      	orrs	r3, r2
		raw_temperature = temp;
 8003128:	bf1c      	itt	ne
 800312a:	4a02      	ldrne	r2, [pc, #8]	; (8003134 <ms5611_retrieve_temperature+0x34>)
 800312c:	6013      	strne	r3, [r2, #0]
	}
}
 800312e:	b003      	add	sp, #12
 8003130:	f85d fb04 	ldr.w	pc, [sp], #4
 8003134:	20000d24 	.word	0x20000d24

08003138 <ms5611_update_pressure>:

/**
 * Read raw pressure from MS5611.
 */
void ms5611_update_pressure(){
 8003138:	b508      	push	{r3, lr}

	ms5611_request_pressure();
 800313a:	f7ff ff99 	bl	8003070 <ms5611_request_pressure>
	delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 800313e:	200c      	movs	r0, #12
 8003140:	f000 f9bc 	bl	80034bc <delay>
	ms5611_retrieve_pressure();

}
 8003144:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ms5611_retrieve_pressure();
 8003148:	f7ff bfa8 	b.w	800309c <ms5611_retrieve_pressure>

0800314c <ms5611_update_temperature>:

/**
 * Read raw temperature from MS5611.
 */
void ms5611_update_temperature(){
 800314c:	b508      	push	{r3, lr}

	ms5611_request_temperature();
 800314e:	f7ff ffc1 	bl	80030d4 <ms5611_request_temperature>
	delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8003152:	200c      	movs	r0, #12
 8003154:	f000 f9b2 	bl	80034bc <delay>
	ms5611_retrieve_temperature();

}
 8003158:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ms5611_retrieve_temperature();
 800315c:	f7ff bfd0 	b.w	8003100 <ms5611_retrieve_temperature>

08003160 <ms5611_update>:

/**
 *	Read raw temperature and pressure from MS5611
 */
void ms5611_update(){
 8003160:	b508      	push	{r3, lr}
	ms5611_update_temperature();
 8003162:	f7ff fff3 	bl	800314c <ms5611_update_temperature>
	ms5611_update_pressure();
}
 8003166:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ms5611_update_pressure();
 800316a:	f7ff bfe5 	b.w	8003138 <ms5611_update_pressure>
	...

08003170 <ms5611_init>:
void ms5611_init(){
 8003170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003172:	24a2      	movs	r4, #162	; 0xa2
 8003174:	4d0a      	ldr	r5, [pc, #40]	; (80031a0 <ms5611_init+0x30>)
		ms5611_read_i2c(reg_addr,2,buffer);
 8003176:	aa01      	add	r2, sp, #4
 8003178:	4620      	mov	r0, r4
 800317a:	2102      	movs	r1, #2
 800317c:	f7ff ff5c 	bl	8003038 <ms5611_read_i2c>
 8003180:	3402      	adds	r4, #2
		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 8003182:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003186:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800318a:	b2e4      	uxtb	r4, r4
 800318c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 8003190:	2cae      	cmp	r4, #174	; 0xae
		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 8003192:	f825 3f02 	strh.w	r3, [r5, #2]!
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 8003196:	d1ee      	bne.n	8003176 <ms5611_init+0x6>
	ms5611_update();
 8003198:	f7ff ffe2 	bl	8003160 <ms5611_update>
}
 800319c:	b003      	add	sp, #12
 800319e:	bd30      	pop	{r4, r5, pc}
 80031a0:	20000d16 	.word	0x20000d16

080031a4 <ms5611_get_temperature>:

/**
 * Get calibrated temperature, unit: Celsius degrees
 * @return calibrated temperature
 */
double ms5611_get_temperature(){
 80031a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 80031a6:	4a1c      	ldr	r2, [pc, #112]	; (8003218 <ms5611_get_temperature+0x74>)
 80031a8:	4e1c      	ldr	r6, [pc, #112]	; (800321c <ms5611_get_temperature+0x78>)
 80031aa:	6810      	ldr	r0, [r2, #0]
 80031ac:	8933      	ldrh	r3, [r6, #8]
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 80031ae:	eba0 2003 	sub.w	r0, r0, r3, lsl #8
 80031b2:	f7fd f917 	bl	80003e4 <__aeabi_ui2d>
 80031b6:	4604      	mov	r4, r0
 80031b8:	460d      	mov	r5, r1
 80031ba:	8970      	ldrh	r0, [r6, #10]
 80031bc:	f7fd f922 	bl	8000404 <__aeabi_i2d>
 80031c0:	2200      	movs	r2, #0
 80031c2:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80031c6:	f7fd f987 	bl	80004d8 <__aeabi_dmul>
 80031ca:	4622      	mov	r2, r4
 80031cc:	462b      	mov	r3, r5
 80031ce:	f7fd f983 	bl	80004d8 <__aeabi_dmul>
 80031d2:	2200      	movs	r2, #0
 80031d4:	4b12      	ldr	r3, [pc, #72]	; (8003220 <ms5611_get_temperature+0x7c>)
 80031d6:	f7fc ffc9 	bl	800016c <__adddf3>

	double T2=0;
	if (TEMP < 2000.0){
 80031da:	2200      	movs	r2, #0
 80031dc:	4b10      	ldr	r3, [pc, #64]	; (8003220 <ms5611_get_temperature+0x7c>)
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 80031de:	4606      	mov	r6, r0
 80031e0:	460f      	mov	r7, r1
	if (TEMP < 2000.0){
 80031e2:	f7fd fbeb 	bl	80009bc <__aeabi_dcmplt>
		//temperature < 20 Celsius
		T2 = dT * (dT / (2147483648.0));
 80031e6:	2200      	movs	r2, #0
	if (TEMP < 2000.0){
 80031e8:	b1a0      	cbz	r0, 8003214 <ms5611_get_temperature+0x70>
		T2 = dT * (dT / (2147483648.0));
 80031ea:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 80031ee:	4620      	mov	r0, r4
 80031f0:	4629      	mov	r1, r5
 80031f2:	f7fd f971 	bl	80004d8 <__aeabi_dmul>
 80031f6:	4622      	mov	r2, r4
 80031f8:	462b      	mov	r3, r5
 80031fa:	f7fd f96d 	bl	80004d8 <__aeabi_dmul>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
	}

	TEMP = TEMP - T2;
 8003202:	4630      	mov	r0, r6
 8003204:	4639      	mov	r1, r7
 8003206:	f7fc ffaf 	bl	8000168 <__aeabi_dsub>
	return TEMP / 100.0;
 800320a:	2200      	movs	r2, #0
 800320c:	4b05      	ldr	r3, [pc, #20]	; (8003224 <ms5611_get_temperature+0x80>)
 800320e:	f7fd fa8d 	bl	800072c <__aeabi_ddiv>
}
 8003212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	double T2=0;
 8003214:	2300      	movs	r3, #0
 8003216:	e7f4      	b.n	8003202 <ms5611_get_temperature+0x5e>
 8003218:	20000d24 	.word	0x20000d24
 800321c:	20000d18 	.word	0x20000d18
 8003220:	409f4000 	.word	0x409f4000
 8003224:	40590000 	.word	0x40590000

08003228 <ms5611_get_pressure>:

/**
 * Get calibrated pressure, unit: mBar
 * @return calibrated pressure
 */
double ms5611_get_pressure(){
 8003228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 800322c:	4b70      	ldr	r3, [pc, #448]	; (80033f0 <ms5611_get_pressure+0x1c8>)
 800322e:	4e71      	ldr	r6, [pc, #452]	; (80033f4 <ms5611_get_pressure+0x1cc>)
 8003230:	681f      	ldr	r7, [r3, #0]
 8003232:	8930      	ldrh	r0, [r6, #8]
double ms5611_get_pressure(){
 8003234:	b085      	sub	sp, #20
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 8003236:	eba7 2700 	sub.w	r7, r7, r0, lsl #8
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 800323a:	8970      	ldrh	r0, [r6, #10]
 800323c:	f7fd f8e2 	bl	8000404 <__aeabi_i2d>
 8003240:	2200      	movs	r2, #0
 8003242:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8003246:	f7fd f947 	bl	80004d8 <__aeabi_dmul>
 800324a:	4604      	mov	r4, r0
 800324c:	4638      	mov	r0, r7
 800324e:	460d      	mov	r5, r1
 8003250:	f7fd f8c8 	bl	80003e4 <__aeabi_ui2d>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4620      	mov	r0, r4
 800325a:	4629      	mov	r1, r5
 800325c:	f7fd f93c 	bl	80004d8 <__aeabi_dmul>
 8003260:	2200      	movs	r2, #0
 8003262:	4b65      	ldr	r3, [pc, #404]	; (80033f8 <ms5611_get_pressure+0x1d0>)
 8003264:	f7fc ff82 	bl	800016c <__adddf3>
 8003268:	4680      	mov	r8, r0

	double OFF = fc[1] * (65536.0) + fc[3] * dT / (128);
 800326a:	88f0      	ldrh	r0, [r6, #6]
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 800326c:	4689      	mov	r9, r1
	double OFF = fc[1] * (65536.0) + fc[3] * dT / (128);
 800326e:	4378      	muls	r0, r7
 8003270:	09c0      	lsrs	r0, r0, #7
 8003272:	f7fd f8b7 	bl	80003e4 <__aeabi_ui2d>
 8003276:	4604      	mov	r4, r0
 8003278:	8870      	ldrh	r0, [r6, #2]
 800327a:	460d      	mov	r5, r1
 800327c:	f7fd f8c2 	bl	8000404 <__aeabi_i2d>
 8003280:	2200      	movs	r2, #0
 8003282:	4b5e      	ldr	r3, [pc, #376]	; (80033fc <ms5611_get_pressure+0x1d4>)
 8003284:	f7fd f928 	bl	80004d8 <__aeabi_dmul>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4620      	mov	r0, r4
 800328e:	4629      	mov	r1, r5
 8003290:	f7fc ff6c 	bl	800016c <__adddf3>
 8003294:	e9cd 0102 	strd	r0, r1, [sp, #8]
	double SENS = fc[0] * (32768.0) + fc[2] * dT / (256);
 8003298:	88b0      	ldrh	r0, [r6, #4]
 800329a:	4378      	muls	r0, r7
 800329c:	0a00      	lsrs	r0, r0, #8
 800329e:	f7fd f8a1 	bl	80003e4 <__aeabi_ui2d>
 80032a2:	4604      	mov	r4, r0
 80032a4:	8830      	ldrh	r0, [r6, #0]
 80032a6:	460d      	mov	r5, r1
 80032a8:	f7fd f8ac 	bl	8000404 <__aeabi_i2d>
 80032ac:	2200      	movs	r2, #0
 80032ae:	4b54      	ldr	r3, [pc, #336]	; (8003400 <ms5611_get_pressure+0x1d8>)
 80032b0:	f7fd f912 	bl	80004d8 <__aeabi_dmul>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	4620      	mov	r0, r4
 80032ba:	4629      	mov	r1, r5
 80032bc:	f7fc ff56 	bl	800016c <__adddf3>

	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 80032c0:	4b50      	ldr	r3, [pc, #320]	; (8003404 <ms5611_get_pressure+0x1dc>)
	double SENS = fc[0] * (32768.0) + fc[2] * dT / (256);
 80032c2:	4682      	mov	sl, r0
	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 80032c4:	6818      	ldr	r0, [r3, #0]
	double SENS = fc[0] * (32768.0) + fc[2] * dT / (256);
 80032c6:	468b      	mov	fp, r1
	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 80032c8:	f7fd f88c 	bl	80003e4 <__aeabi_ui2d>

	double T2=0, OFF2=0, SENS2=0;
	if (TEMP < 2000){
 80032cc:	2200      	movs	r2, #0
	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 80032ce:	e9cd 0100 	strd	r0, r1, [sp]
	if (TEMP < 2000){
 80032d2:	4b49      	ldr	r3, [pc, #292]	; (80033f8 <ms5611_get_pressure+0x1d0>)
 80032d4:	4640      	mov	r0, r8
 80032d6:	4649      	mov	r1, r9
 80032d8:	f7fd fb70 	bl	80009bc <__aeabi_dcmplt>
 80032dc:	2800      	cmp	r0, #0
 80032de:	d07a      	beq.n	80033d6 <ms5611_get_pressure+0x1ae>
		//temperature < 20 Celsius
		T2 = dT * dT / (2147483648.0);
		OFF2 = 5 * (TEMP-2000) * (TEMP-2000) / 2;
 80032e0:	2200      	movs	r2, #0
 80032e2:	4b45      	ldr	r3, [pc, #276]	; (80033f8 <ms5611_get_pressure+0x1d0>)
 80032e4:	4640      	mov	r0, r8
 80032e6:	4649      	mov	r1, r9
 80032e8:	f7fc ff3e 	bl	8000168 <__aeabi_dsub>
 80032ec:	4604      	mov	r4, r0
 80032ee:	460d      	mov	r5, r1
 80032f0:	2200      	movs	r2, #0
 80032f2:	4b45      	ldr	r3, [pc, #276]	; (8003408 <ms5611_get_pressure+0x1e0>)
 80032f4:	f7fd f8f0 	bl	80004d8 <__aeabi_dmul>
 80032f8:	4622      	mov	r2, r4
 80032fa:	462b      	mov	r3, r5
 80032fc:	f7fd f8ec 	bl	80004d8 <__aeabi_dmul>
 8003300:	2200      	movs	r2, #0
 8003302:	4b42      	ldr	r3, [pc, #264]	; (800340c <ms5611_get_pressure+0x1e4>)
 8003304:	4604      	mov	r4, r0
 8003306:	460d      	mov	r5, r1
 8003308:	f7fd f8e6 	bl	80004d8 <__aeabi_dmul>
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 800330c:	2200      	movs	r2, #0
 800330e:	4b40      	ldr	r3, [pc, #256]	; (8003410 <ms5611_get_pressure+0x1e8>)
		OFF2 = 5 * (TEMP-2000) * (TEMP-2000) / 2;
 8003310:	4606      	mov	r6, r0
 8003312:	460f      	mov	r7, r1
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 8003314:	4620      	mov	r0, r4
 8003316:	4629      	mov	r1, r5
 8003318:	f7fd f8de 	bl	80004d8 <__aeabi_dmul>

		if (TEMP < -1500){
 800331c:	a330      	add	r3, pc, #192	; (adr r3, 80033e0 <ms5611_get_pressure+0x1b8>)
 800331e:	e9d3 2300 	ldrd	r2, r3, [r3]
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 8003322:	4604      	mov	r4, r0
 8003324:	460d      	mov	r5, r1
		if (TEMP < -1500){
 8003326:	4640      	mov	r0, r8
 8003328:	4649      	mov	r1, r9
 800332a:	f7fd fb47 	bl	80009bc <__aeabi_dcmplt>
 800332e:	b350      	cbz	r0, 8003386 <ms5611_get_pressure+0x15e>
			//temperature < -15 Celsius
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 8003330:	a32d      	add	r3, pc, #180	; (adr r3, 80033e8 <ms5611_get_pressure+0x1c0>)
 8003332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003336:	4640      	mov	r0, r8
 8003338:	4649      	mov	r1, r9
 800333a:	f7fc ff17 	bl	800016c <__adddf3>
 800333e:	4680      	mov	r8, r0
 8003340:	4689      	mov	r9, r1
 8003342:	2200      	movs	r2, #0
 8003344:	4b33      	ldr	r3, [pc, #204]	; (8003414 <ms5611_get_pressure+0x1ec>)
 8003346:	f7fd f8c7 	bl	80004d8 <__aeabi_dmul>
 800334a:	4642      	mov	r2, r8
 800334c:	464b      	mov	r3, r9
 800334e:	f7fd f8c3 	bl	80004d8 <__aeabi_dmul>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	4630      	mov	r0, r6
 8003358:	4639      	mov	r1, r7
 800335a:	f7fc ff07 	bl	800016c <__adddf3>
			SENS2 = SENS2 + 11/2 * (TEMP + 1500) * (TEMP + 1500);
 800335e:	2200      	movs	r2, #0
 8003360:	4b29      	ldr	r3, [pc, #164]	; (8003408 <ms5611_get_pressure+0x1e0>)
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 8003362:	4606      	mov	r6, r0
 8003364:	460f      	mov	r7, r1
			SENS2 = SENS2 + 11/2 * (TEMP + 1500) * (TEMP + 1500);
 8003366:	4640      	mov	r0, r8
 8003368:	4649      	mov	r1, r9
 800336a:	f7fd f8b5 	bl	80004d8 <__aeabi_dmul>
 800336e:	4642      	mov	r2, r8
 8003370:	464b      	mov	r3, r9
 8003372:	f7fd f8b1 	bl	80004d8 <__aeabi_dmul>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4620      	mov	r0, r4
 800337c:	4629      	mov	r1, r5
 800337e:	f7fc fef5 	bl	800016c <__adddf3>
 8003382:	4604      	mov	r4, r0
 8003384:	460d      	mov	r5, r1
		}
	}

	TEMP = TEMP - T2;
	OFF = OFF - OFF2;
	SENS = SENS - SENS2;
 8003386:	4622      	mov	r2, r4
 8003388:	462b      	mov	r3, r5
 800338a:	4650      	mov	r0, sl
 800338c:	4659      	mov	r1, fp
 800338e:	f7fc feeb 	bl	8000168 <__aeabi_dsub>

	P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit mbar
 8003392:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003396:	f7fd f89f 	bl	80004d8 <__aeabi_dmul>
 800339a:	2200      	movs	r2, #0
 800339c:	4b1e      	ldr	r3, [pc, #120]	; (8003418 <ms5611_get_pressure+0x1f0>)
 800339e:	f7fd f89b 	bl	80004d8 <__aeabi_dmul>
	OFF = OFF - OFF2;
 80033a2:	4632      	mov	r2, r6
	P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit mbar
 80033a4:	4604      	mov	r4, r0
 80033a6:	460d      	mov	r5, r1
	OFF = OFF - OFF2;
 80033a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033ac:	463b      	mov	r3, r7
 80033ae:	f7fc fedb 	bl	8000168 <__aeabi_dsub>
	P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit mbar
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4620      	mov	r0, r4
 80033b8:	4629      	mov	r1, r5
 80033ba:	f7fc fed5 	bl	8000168 <__aeabi_dsub>
 80033be:	2200      	movs	r2, #0
 80033c0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80033c4:	f7fd f888 	bl	80004d8 <__aeabi_dmul>
	return P / 100;//unit mbar
 80033c8:	2200      	movs	r2, #0
 80033ca:	4b14      	ldr	r3, [pc, #80]	; (800341c <ms5611_get_pressure+0x1f4>)
 80033cc:	f7fd f9ae 	bl	800072c <__aeabi_ddiv>
}
 80033d0:	b005      	add	sp, #20
 80033d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	double T2=0, OFF2=0, SENS2=0;
 80033d6:	2400      	movs	r4, #0
 80033d8:	2500      	movs	r5, #0
 80033da:	4626      	mov	r6, r4
 80033dc:	462f      	mov	r7, r5
 80033de:	e7d2      	b.n	8003386 <ms5611_get_pressure+0x15e>
 80033e0:	00000000 	.word	0x00000000
 80033e4:	c0977000 	.word	0xc0977000
 80033e8:	00000000 	.word	0x00000000
 80033ec:	40977000 	.word	0x40977000
 80033f0:	20000d24 	.word	0x20000d24
 80033f4:	20000d18 	.word	0x20000d18
 80033f8:	409f4000 	.word	0x409f4000
 80033fc:	40f00000 	.word	0x40f00000
 8003400:	40e00000 	.word	0x40e00000
 8003404:	20000d14 	.word	0x20000d14
 8003408:	40140000 	.word	0x40140000
 800340c:	3fe00000 	.word	0x3fe00000
 8003410:	3fd00000 	.word	0x3fd00000
 8003414:	401c0000 	.word	0x401c0000
 8003418:	3ea00000 	.word	0x3ea00000
 800341c:	40590000 	.word	0x40590000

08003420 <ms5611_timer_update>:
void ms5611_timer_update(){
 8003420:	b538      	push	{r3, r4, r5, lr}
	if (read_index == 0){
 8003422:	4c13      	ldr	r4, [pc, #76]	; (8003470 <ms5611_timer_update+0x50>)
 8003424:	4d13      	ldr	r5, [pc, #76]	; (8003474 <ms5611_timer_update+0x54>)
 8003426:	7823      	ldrb	r3, [r4, #0]
 8003428:	b953      	cbnz	r3, 8003440 <ms5611_timer_update+0x20>
		ms5611_retrieve_temperature();
 800342a:	f7ff fe69 	bl	8003100 <ms5611_retrieve_temperature>
		XIMU_sens.temperature = ms5611_get_temperature();
 800342e:	f7ff feb9 	bl	80031a4 <ms5611_get_temperature>
 8003432:	e9c5 0120 	strd	r0, r1, [r5, #128]	; 0x80
		ms5611_request_pressure();
 8003436:	f7ff fe1b 	bl	8003070 <ms5611_request_pressure>
		read_index++;
 800343a:	7823      	ldrb	r3, [r4, #0]
 800343c:	3301      	adds	r3, #1
 800343e:	e00a      	b.n	8003456 <ms5611_timer_update+0x36>
	}else if (read_index == TEMP_READ_INTERVAL - 1){
 8003440:	2b09      	cmp	r3, #9
 8003442:	d10e      	bne.n	8003462 <ms5611_timer_update+0x42>
		ms5611_retrieve_pressure();
 8003444:	f7ff fe2a 	bl	800309c <ms5611_retrieve_pressure>
		XIMU_sens.pressure = ms5611_get_pressure();
 8003448:	f7ff feee 	bl	8003228 <ms5611_get_pressure>
 800344c:	e9c5 011e 	strd	r0, r1, [r5, #120]	; 0x78
		ms5611_request_temperature();
 8003450:	f7ff fe40 	bl	80030d4 <ms5611_request_temperature>
		read_index = 0;
 8003454:	2300      	movs	r3, #0
		read_index++;
 8003456:	7023      	strb	r3, [r4, #0]
	XIMU_sens.pt_ts = millis();
 8003458:	f000 f82a 	bl	80034b0 <millis>
 800345c:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
}
 8003460:	bd38      	pop	{r3, r4, r5, pc}
		ms5611_retrieve_pressure();
 8003462:	f7ff fe1b 	bl	800309c <ms5611_retrieve_pressure>
		XIMU_sens.pressure = ms5611_get_pressure();
 8003466:	f7ff fedf 	bl	8003228 <ms5611_get_pressure>
 800346a:	e9c5 011e 	strd	r0, r1, [r5, #120]	; 0x78
 800346e:	e7e2      	b.n	8003436 <ms5611_timer_update+0x16>
 8003470:	200003be 	.word	0x200003be
 8003474:	200005f8 	.word	0x200005f8

08003478 <systickInit>:

static volatile uint32_t ticks = 0;

void systickInit(){

	   if (SysTick_Config(SystemCoreClock / SYSTICK_FREQ)){
 8003478:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800347c:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <systickInit+0x2c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003484:	3b01      	subs	r3, #1
 8003486:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800348a:	d20a      	bcs.n	80034a2 <systickInit+0x2a>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800348e:	4a06      	ldr	r2, [pc, #24]	; (80034a8 <systickInit+0x30>)
 8003490:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003492:	4b06      	ldr	r3, [pc, #24]	; (80034ac <systickInit+0x34>)
 8003494:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003498:	2300      	movs	r3, #0
 800349a:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800349c:	2307      	movs	r3, #7
 800349e:	6013      	str	r3, [r2, #0]
		   while (1){ /* Error in initializing Systick */ }
	   }
}
 80034a0:	4770      	bx	lr
 80034a2:	e7fe      	b.n	80034a2 <systickInit+0x2a>
 80034a4:	20000038 	.word	0x20000038
 80034a8:	e000e010 	.word	0xe000e010
 80034ac:	e000ed00 	.word	0xe000ed00

080034b0 <millis>:
/**
 * return milliseconds
 * @return time since systickInit in milliseconds
 */
uint32_t millis(){
	return ticks;
 80034b0:	4b01      	ldr	r3, [pc, #4]	; (80034b8 <millis+0x8>)
 80034b2:	6818      	ldr	r0, [r3, #0]
}
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	200003c0 	.word	0x200003c0

080034bc <delay>:
	return ticks;
 80034bc:	4b03      	ldr	r3, [pc, #12]	; (80034cc <delay+0x10>)
 80034be:	6819      	ldr	r1, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 * delay milliseconds
 * @param ms milliseconds to delay
 */
void delay(uint32_t ms){
	uint32_t start = millis();
	while(millis() - start < ms){
 80034c2:	1a52      	subs	r2, r2, r1
 80034c4:	4282      	cmp	r2, r0
 80034c6:	d3fb      	bcc.n	80034c0 <delay+0x4>
		//do nothing
	}
}
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	200003c0 	.word	0x200003c0

080034d0 <systick_Inc>:
/**
 * add this function in stm32f1xx_it
 * called by the system to update systick accordingly
 */
void systick_Inc(void) {
  ticks++;
 80034d0:	4a02      	ldr	r2, [pc, #8]	; (80034dc <systick_Inc+0xc>)
 80034d2:	6813      	ldr	r3, [r2, #0]
 80034d4:	3301      	adds	r3, #1
 80034d6:	6013      	str	r3, [r2, #0]
}
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	200003c0 	.word	0x200003c0

080034e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034e0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034e2:	4b0e      	ldr	r3, [pc, #56]	; (800351c <HAL_InitTick+0x3c>)
{
 80034e4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034e6:	7818      	ldrb	r0, [r3, #0]
 80034e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034ec:	fbb3 f3f0 	udiv	r3, r3, r0
 80034f0:	4a0b      	ldr	r2, [pc, #44]	; (8003520 <HAL_InitTick+0x40>)
 80034f2:	6810      	ldr	r0, [r2, #0]
 80034f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80034f8:	f000 f8a0 	bl	800363c <HAL_SYSTICK_Config>
 80034fc:	4604      	mov	r4, r0
 80034fe:	b958      	cbnz	r0, 8003518 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003500:	2d0f      	cmp	r5, #15
 8003502:	d809      	bhi.n	8003518 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003504:	4602      	mov	r2, r0
 8003506:	4629      	mov	r1, r5
 8003508:	f04f 30ff 	mov.w	r0, #4294967295
 800350c:	f000 f854 	bl	80035b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003510:	4620      	mov	r0, r4
 8003512:	4b04      	ldr	r3, [pc, #16]	; (8003524 <HAL_InitTick+0x44>)
 8003514:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003516:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003518:	2001      	movs	r0, #1
 800351a:	e7fc      	b.n	8003516 <HAL_InitTick+0x36>
 800351c:	2000003d 	.word	0x2000003d
 8003520:	20000038 	.word	0x20000038
 8003524:	20000040 	.word	0x20000040

08003528 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003528:	4a07      	ldr	r2, [pc, #28]	; (8003548 <HAL_Init+0x20>)
{
 800352a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800352c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800352e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003530:	f043 0310 	orr.w	r3, r3, #16
 8003534:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003536:	f000 f82d 	bl	8003594 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800353a:	2000      	movs	r0, #0
 800353c:	f7ff ffd0 	bl	80034e0 <HAL_InitTick>
  HAL_MspInit();
 8003540:	f7fe fd46 	bl	8001fd0 <HAL_MspInit>
}
 8003544:	2000      	movs	r0, #0
 8003546:	bd08      	pop	{r3, pc}
 8003548:	40022000 	.word	0x40022000

0800354c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800354c:	4a03      	ldr	r2, [pc, #12]	; (800355c <HAL_IncTick+0x10>)
 800354e:	4b04      	ldr	r3, [pc, #16]	; (8003560 <HAL_IncTick+0x14>)
 8003550:	6811      	ldr	r1, [r2, #0]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	440b      	add	r3, r1
 8003556:	6013      	str	r3, [r2, #0]
}
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	20000d28 	.word	0x20000d28
 8003560:	2000003d 	.word	0x2000003d

08003564 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003564:	4b01      	ldr	r3, [pc, #4]	; (800356c <HAL_GetTick+0x8>)
 8003566:	6818      	ldr	r0, [r3, #0]
}
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	20000d28 	.word	0x20000d28

08003570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003570:	b538      	push	{r3, r4, r5, lr}
 8003572:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003574:	f7ff fff6 	bl	8003564 <HAL_GetTick>
 8003578:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800357a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800357c:	bf1e      	ittt	ne
 800357e:	4b04      	ldrne	r3, [pc, #16]	; (8003590 <HAL_Delay+0x20>)
 8003580:	781b      	ldrbne	r3, [r3, #0]
 8003582:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003584:	f7ff ffee 	bl	8003564 <HAL_GetTick>
 8003588:	1b40      	subs	r0, r0, r5
 800358a:	42a0      	cmp	r0, r4
 800358c:	d3fa      	bcc.n	8003584 <HAL_Delay+0x14>
  {
  }
}
 800358e:	bd38      	pop	{r3, r4, r5, pc}
 8003590:	2000003d 	.word	0x2000003d

08003594 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003594:	4a07      	ldr	r2, [pc, #28]	; (80035b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003596:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003598:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800359a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800359e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035a2:	041b      	lsls	r3, r3, #16
 80035a4:	0c1b      	lsrs	r3, r3, #16
 80035a6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80035ae:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80035b0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80035b2:	4770      	bx	lr
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b8:	4b17      	ldr	r3, [pc, #92]	; (8003618 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035ba:	b570      	push	{r4, r5, r6, lr}
 80035bc:	68dc      	ldr	r4, [r3, #12]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035be:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035c2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c6:	f1c4 0507 	rsb	r5, r4, #7
 80035ca:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035cc:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035d0:	bf28      	it	cs
 80035d2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035d4:	2b06      	cmp	r3, #6
 80035d6:	bf98      	it	ls
 80035d8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035da:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035de:	bf88      	it	hi
 80035e0:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e2:	ea21 0303 	bic.w	r3, r1, r3
 80035e6:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035e8:	fa06 f404 	lsl.w	r4, r6, r4
 80035ec:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80035f0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f2:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f6:	bfa8      	it	ge
 80035f8:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80035fc:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003600:	bfb8      	it	lt
 8003602:	4a06      	ldrlt	r2, [pc, #24]	; (800361c <HAL_NVIC_SetPriority+0x64>)
 8003604:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003606:	bfab      	itete	ge
 8003608:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800360c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003610:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003614:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003616:	bd70      	pop	{r4, r5, r6, pc}
 8003618:	e000ed00 	.word	0xe000ed00
 800361c:	e000ed14 	.word	0xe000ed14

08003620 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003620:	2800      	cmp	r0, #0
 8003622:	db08      	blt.n	8003636 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003624:	2301      	movs	r3, #1
 8003626:	0942      	lsrs	r2, r0, #5
 8003628:	f000 001f 	and.w	r0, r0, #31
 800362c:	fa03 f000 	lsl.w	r0, r3, r0
 8003630:	4b01      	ldr	r3, [pc, #4]	; (8003638 <HAL_NVIC_EnableIRQ+0x18>)
 8003632:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003636:	4770      	bx	lr
 8003638:	e000e100 	.word	0xe000e100

0800363c <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800363c:	3801      	subs	r0, #1
 800363e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003642:	d20a      	bcs.n	800365a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003644:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003646:	4b06      	ldr	r3, [pc, #24]	; (8003660 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003648:	4a06      	ldr	r2, [pc, #24]	; (8003664 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800364a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800364c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003650:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003652:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003654:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800365a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	e000e010 	.word	0xe000e010
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003668:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800366a:	b330      	cbz	r0, 80036ba <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800366c:	2214      	movs	r2, #20
 800366e:	6801      	ldr	r1, [r0, #0]
 8003670:	4b13      	ldr	r3, [pc, #76]	; (80036c0 <HAL_DMA_Init+0x58>)
 8003672:	440b      	add	r3, r1
 8003674:	fbb3 f3f2 	udiv	r3, r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800367c:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <HAL_DMA_Init+0x5c>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800367e:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8003680:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003682:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8003686:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003688:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800368a:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800368e:	4323      	orrs	r3, r4
 8003690:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003692:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003696:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003698:	6944      	ldr	r4, [r0, #20]
 800369a:	4323      	orrs	r3, r4
 800369c:	6984      	ldr	r4, [r0, #24]
 800369e:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80036a0:	69c4      	ldr	r4, [r0, #28]
 80036a2:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80036a4:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036a6:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036a8:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036aa:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80036ac:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036b0:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036b2:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 80036b6:	4618      	mov	r0, r3
}
 80036b8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80036ba:	2001      	movs	r0, #1
 80036bc:	e7fc      	b.n	80036b8 <HAL_DMA_Init+0x50>
 80036be:	bf00      	nop
 80036c0:	bffdfff8 	.word	0xbffdfff8
 80036c4:	40020000 	.word	0x40020000

080036c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036c8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036ca:	f890 4020 	ldrb.w	r4, [r0, #32]
 80036ce:	2c01      	cmp	r4, #1
 80036d0:	d035      	beq.n	800373e <HAL_DMA_Start_IT+0x76>
 80036d2:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036d4:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80036d8:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80036dc:	42a5      	cmp	r5, r4
 80036de:	f04f 0600 	mov.w	r6, #0
 80036e2:	f04f 0402 	mov.w	r4, #2
 80036e6:	d128      	bne.n	800373a <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036e8:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036ec:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036ee:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80036f0:	6826      	ldr	r6, [r4, #0]
 80036f2:	f026 0601 	bic.w	r6, r6, #1
 80036f6:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80036f8:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 80036fc:	40bd      	lsls	r5, r7
 80036fe:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003700:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003702:	6843      	ldr	r3, [r0, #4]
 8003704:	6805      	ldr	r5, [r0, #0]
 8003706:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8003708:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800370a:	bf0b      	itete	eq
 800370c:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800370e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003710:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003712:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8003714:	b14b      	cbz	r3, 800372a <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003716:	6823      	ldr	r3, [r4, #0]
 8003718:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 800371c:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800371e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003720:	682b      	ldr	r3, [r5, #0]
 8003722:	f043 0301 	orr.w	r3, r3, #1
 8003726:	602b      	str	r3, [r5, #0]
}
 8003728:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800372a:	6823      	ldr	r3, [r4, #0]
 800372c:	f023 0304 	bic.w	r3, r3, #4
 8003730:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003732:	6823      	ldr	r3, [r4, #0]
 8003734:	f043 030a 	orr.w	r3, r3, #10
 8003738:	e7f0      	b.n	800371c <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 800373a:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 800373e:	2002      	movs	r0, #2
 8003740:	e7f2      	b.n	8003728 <HAL_DMA_Start_IT+0x60>
	...

08003744 <HAL_DMA_IRQHandler>:
{
 8003744:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003746:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003748:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800374a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800374c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800374e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003750:	4095      	lsls	r5, r2
 8003752:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8003754:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003756:	d032      	beq.n	80037be <HAL_DMA_IRQHandler+0x7a>
 8003758:	074d      	lsls	r5, r1, #29
 800375a:	d530      	bpl.n	80037be <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003760:	bf5e      	ittt	pl
 8003762:	681a      	ldrpl	r2, [r3, #0]
 8003764:	f022 0204 	bicpl.w	r2, r2, #4
 8003768:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800376a:	4a3e      	ldr	r2, [pc, #248]	; (8003864 <HAL_DMA_IRQHandler+0x120>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d019      	beq.n	80037a4 <HAL_DMA_IRQHandler+0x60>
 8003770:	3214      	adds	r2, #20
 8003772:	4293      	cmp	r3, r2
 8003774:	d018      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x64>
 8003776:	3214      	adds	r2, #20
 8003778:	4293      	cmp	r3, r2
 800377a:	d017      	beq.n	80037ac <HAL_DMA_IRQHandler+0x68>
 800377c:	3214      	adds	r2, #20
 800377e:	4293      	cmp	r3, r2
 8003780:	d017      	beq.n	80037b2 <HAL_DMA_IRQHandler+0x6e>
 8003782:	3214      	adds	r2, #20
 8003784:	4293      	cmp	r3, r2
 8003786:	d017      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x74>
 8003788:	3214      	adds	r2, #20
 800378a:	4293      	cmp	r3, r2
 800378c:	bf0c      	ite	eq
 800378e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8003792:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8003796:	4a34      	ldr	r2, [pc, #208]	; (8003868 <HAL_DMA_IRQHandler+0x124>)
 8003798:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800379a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 800379c:	2b00      	cmp	r3, #0
 800379e:	d05e      	beq.n	800385e <HAL_DMA_IRQHandler+0x11a>
}
 80037a0:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80037a2:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80037a4:	2304      	movs	r3, #4
 80037a6:	e7f6      	b.n	8003796 <HAL_DMA_IRQHandler+0x52>
 80037a8:	2340      	movs	r3, #64	; 0x40
 80037aa:	e7f4      	b.n	8003796 <HAL_DMA_IRQHandler+0x52>
 80037ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037b0:	e7f1      	b.n	8003796 <HAL_DMA_IRQHandler+0x52>
 80037b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037b6:	e7ee      	b.n	8003796 <HAL_DMA_IRQHandler+0x52>
 80037b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037bc:	e7eb      	b.n	8003796 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80037be:	2502      	movs	r5, #2
 80037c0:	4095      	lsls	r5, r2
 80037c2:	4225      	tst	r5, r4
 80037c4:	d035      	beq.n	8003832 <HAL_DMA_IRQHandler+0xee>
 80037c6:	078d      	lsls	r5, r1, #30
 80037c8:	d533      	bpl.n	8003832 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	0694      	lsls	r4, r2, #26
 80037ce:	d406      	bmi.n	80037de <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	f022 020a 	bic.w	r2, r2, #10
 80037d6:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80037d8:	2201      	movs	r2, #1
 80037da:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80037de:	4a21      	ldr	r2, [pc, #132]	; (8003864 <HAL_DMA_IRQHandler+0x120>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d019      	beq.n	8003818 <HAL_DMA_IRQHandler+0xd4>
 80037e4:	3214      	adds	r2, #20
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d018      	beq.n	800381c <HAL_DMA_IRQHandler+0xd8>
 80037ea:	3214      	adds	r2, #20
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d017      	beq.n	8003820 <HAL_DMA_IRQHandler+0xdc>
 80037f0:	3214      	adds	r2, #20
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d017      	beq.n	8003826 <HAL_DMA_IRQHandler+0xe2>
 80037f6:	3214      	adds	r2, #20
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d017      	beq.n	800382c <HAL_DMA_IRQHandler+0xe8>
 80037fc:	3214      	adds	r2, #20
 80037fe:	4293      	cmp	r3, r2
 8003800:	bf0c      	ite	eq
 8003802:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8003806:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 800380a:	4a17      	ldr	r2, [pc, #92]	; (8003868 <HAL_DMA_IRQHandler+0x124>)
 800380c:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800380e:	2300      	movs	r3, #0
 8003810:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8003814:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003816:	e7c1      	b.n	800379c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003818:	2302      	movs	r3, #2
 800381a:	e7f6      	b.n	800380a <HAL_DMA_IRQHandler+0xc6>
 800381c:	2320      	movs	r3, #32
 800381e:	e7f4      	b.n	800380a <HAL_DMA_IRQHandler+0xc6>
 8003820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003824:	e7f1      	b.n	800380a <HAL_DMA_IRQHandler+0xc6>
 8003826:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800382a:	e7ee      	b.n	800380a <HAL_DMA_IRQHandler+0xc6>
 800382c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003830:	e7eb      	b.n	800380a <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003832:	2508      	movs	r5, #8
 8003834:	4095      	lsls	r5, r2
 8003836:	4225      	tst	r5, r4
 8003838:	d011      	beq.n	800385e <HAL_DMA_IRQHandler+0x11a>
 800383a:	0709      	lsls	r1, r1, #28
 800383c:	d50f      	bpl.n	800385e <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800383e:	6819      	ldr	r1, [r3, #0]
 8003840:	f021 010e 	bic.w	r1, r1, #14
 8003844:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003846:	2301      	movs	r3, #1
 8003848:	fa03 f202 	lsl.w	r2, r3, r2
 800384c:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800384e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8003850:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8003854:	2300      	movs	r3, #0
 8003856:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800385a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800385c:	e79e      	b.n	800379c <HAL_DMA_IRQHandler+0x58>
}
 800385e:	bc70      	pop	{r4, r5, r6}
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40020008 	.word	0x40020008
 8003868:	40020000 	.word	0x40020000

0800386c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800386c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003870:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8003872:	4626      	mov	r6, r4
 8003874:	4b65      	ldr	r3, [pc, #404]	; (8003a0c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003876:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8003a1c <HAL_GPIO_Init+0x1b0>
 800387a:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8003a20 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800387e:	680a      	ldr	r2, [r1, #0]
 8003880:	fa32 f506 	lsrs.w	r5, r2, r6
 8003884:	d102      	bne.n	800388c <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8003886:	b003      	add	sp, #12
 8003888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800388c:	f04f 0801 	mov.w	r8, #1
 8003890:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003894:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8003898:	4590      	cmp	r8, r2
 800389a:	d17e      	bne.n	800399a <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 800389c:	684d      	ldr	r5, [r1, #4]
 800389e:	2d12      	cmp	r5, #18
 80038a0:	f000 80a9 	beq.w	80039f6 <HAL_GPIO_Init+0x18a>
 80038a4:	f200 8082 	bhi.w	80039ac <HAL_GPIO_Init+0x140>
 80038a8:	2d02      	cmp	r5, #2
 80038aa:	f000 80a1 	beq.w	80039f0 <HAL_GPIO_Init+0x184>
 80038ae:	d876      	bhi.n	800399e <HAL_GPIO_Init+0x132>
 80038b0:	2d00      	cmp	r5, #0
 80038b2:	f000 8088 	beq.w	80039c6 <HAL_GPIO_Init+0x15a>
 80038b6:	2d01      	cmp	r5, #1
 80038b8:	f000 8098 	beq.w	80039ec <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80038bc:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80038c0:	2aff      	cmp	r2, #255	; 0xff
 80038c2:	bf93      	iteet	ls
 80038c4:	4682      	movls	sl, r0
 80038c6:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80038ca:	3d08      	subhi	r5, #8
 80038cc:	f8d0 b000 	ldrls.w	fp, [r0]
 80038d0:	bf92      	itee	ls
 80038d2:	00b5      	lslls	r5, r6, #2
 80038d4:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80038d8:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80038da:	fa09 f805 	lsl.w	r8, r9, r5
 80038de:	ea2b 0808 	bic.w	r8, fp, r8
 80038e2:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80038e6:	bf88      	it	hi
 80038e8:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80038ec:	ea48 0505 	orr.w	r5, r8, r5
 80038f0:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038f4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80038f8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80038fc:	d04d      	beq.n	800399a <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038fe:	4f44      	ldr	r7, [pc, #272]	; (8003a10 <HAL_GPIO_Init+0x1a4>)
 8003900:	f026 0803 	bic.w	r8, r6, #3
 8003904:	69bd      	ldr	r5, [r7, #24]
 8003906:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800390a:	f045 0501 	orr.w	r5, r5, #1
 800390e:	61bd      	str	r5, [r7, #24]
 8003910:	69bd      	ldr	r5, [r7, #24]
 8003912:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8003916:	f005 0501 	and.w	r5, r5, #1
 800391a:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800391c:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003920:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003922:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8003926:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800392a:	fa09 f90b 	lsl.w	r9, r9, fp
 800392e:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003932:	4d38      	ldr	r5, [pc, #224]	; (8003a14 <HAL_GPIO_Init+0x1a8>)
 8003934:	42a8      	cmp	r0, r5
 8003936:	d063      	beq.n	8003a00 <HAL_GPIO_Init+0x194>
 8003938:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800393c:	42a8      	cmp	r0, r5
 800393e:	d061      	beq.n	8003a04 <HAL_GPIO_Init+0x198>
 8003940:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003944:	42a8      	cmp	r0, r5
 8003946:	d05f      	beq.n	8003a08 <HAL_GPIO_Init+0x19c>
 8003948:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800394c:	42a8      	cmp	r0, r5
 800394e:	bf0c      	ite	eq
 8003950:	2503      	moveq	r5, #3
 8003952:	2504      	movne	r5, #4
 8003954:	fa05 f50b 	lsl.w	r5, r5, fp
 8003958:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800395c:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8003960:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003962:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8003966:	bf14      	ite	ne
 8003968:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800396a:	4395      	biceq	r5, r2
 800396c:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800396e:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003970:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8003974:	bf14      	ite	ne
 8003976:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003978:	4395      	biceq	r5, r2
 800397a:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800397c:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800397e:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8003982:	bf14      	ite	ne
 8003984:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003986:	4395      	biceq	r5, r2
 8003988:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800398a:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800398c:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8003990:	bf14      	ite	ne
 8003992:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003994:	ea25 0202 	biceq.w	r2, r5, r2
 8003998:	60da      	str	r2, [r3, #12]
	position++;
 800399a:	3601      	adds	r6, #1
 800399c:	e76f      	b.n	800387e <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 800399e:	2d03      	cmp	r5, #3
 80039a0:	d022      	beq.n	80039e8 <HAL_GPIO_Init+0x17c>
 80039a2:	2d11      	cmp	r5, #17
 80039a4:	d18a      	bne.n	80038bc <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80039a6:	68cc      	ldr	r4, [r1, #12]
 80039a8:	3404      	adds	r4, #4
          break;
 80039aa:	e787      	b.n	80038bc <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80039ac:	4f1a      	ldr	r7, [pc, #104]	; (8003a18 <HAL_GPIO_Init+0x1ac>)
 80039ae:	42bd      	cmp	r5, r7
 80039b0:	d009      	beq.n	80039c6 <HAL_GPIO_Init+0x15a>
 80039b2:	d812      	bhi.n	80039da <HAL_GPIO_Init+0x16e>
 80039b4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8003a24 <HAL_GPIO_Init+0x1b8>
 80039b8:	454d      	cmp	r5, r9
 80039ba:	d004      	beq.n	80039c6 <HAL_GPIO_Init+0x15a>
 80039bc:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80039c0:	454d      	cmp	r5, r9
 80039c2:	f47f af7b 	bne.w	80038bc <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80039c6:	688c      	ldr	r4, [r1, #8]
 80039c8:	b1c4      	cbz	r4, 80039fc <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80039ca:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80039cc:	bf0c      	ite	eq
 80039ce:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80039d2:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039d6:	2408      	movs	r4, #8
 80039d8:	e770      	b.n	80038bc <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80039da:	4565      	cmp	r5, ip
 80039dc:	d0f3      	beq.n	80039c6 <HAL_GPIO_Init+0x15a>
 80039de:	4575      	cmp	r5, lr
 80039e0:	d0f1      	beq.n	80039c6 <HAL_GPIO_Init+0x15a>
 80039e2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8003a28 <HAL_GPIO_Init+0x1bc>
 80039e6:	e7eb      	b.n	80039c0 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80039e8:	2400      	movs	r4, #0
 80039ea:	e767      	b.n	80038bc <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80039ec:	68cc      	ldr	r4, [r1, #12]
          break;
 80039ee:	e765      	b.n	80038bc <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80039f0:	68cc      	ldr	r4, [r1, #12]
 80039f2:	3408      	adds	r4, #8
          break;
 80039f4:	e762      	b.n	80038bc <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80039f6:	68cc      	ldr	r4, [r1, #12]
 80039f8:	340c      	adds	r4, #12
          break;
 80039fa:	e75f      	b.n	80038bc <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80039fc:	2404      	movs	r4, #4
 80039fe:	e75d      	b.n	80038bc <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a00:	2500      	movs	r5, #0
 8003a02:	e7a7      	b.n	8003954 <HAL_GPIO_Init+0xe8>
 8003a04:	2501      	movs	r5, #1
 8003a06:	e7a5      	b.n	8003954 <HAL_GPIO_Init+0xe8>
 8003a08:	2502      	movs	r5, #2
 8003a0a:	e7a3      	b.n	8003954 <HAL_GPIO_Init+0xe8>
 8003a0c:	40010400 	.word	0x40010400
 8003a10:	40021000 	.word	0x40021000
 8003a14:	40010800 	.word	0x40010800
 8003a18:	10210000 	.word	0x10210000
 8003a1c:	10310000 	.word	0x10310000
 8003a20:	10320000 	.word	0x10320000
 8003a24:	10110000 	.word	0x10110000
 8003a28:	10220000 	.word	0x10220000

08003a2c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a2c:	b10a      	cbz	r2, 8003a32 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a2e:	6101      	str	r1, [r0, #16]
  }
}
 8003a30:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a32:	0409      	lsls	r1, r1, #16
 8003a34:	e7fb      	b.n	8003a2e <HAL_GPIO_WritePin+0x2>

08003a36 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a36:	6801      	ldr	r1, [r0, #0]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	694b      	ldr	r3, [r1, #20]
 8003a3c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8003a40:	d010      	beq.n	8003a64 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a42:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8003a46:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a48:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a4a:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a4c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a50:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a54:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a56:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a5a:	f043 0304 	orr.w	r3, r3, #4
 8003a5e:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8003a60:	2001      	movs	r0, #1
 8003a62:	4770      	bx	lr
  }
  return HAL_OK;
 8003a64:	4618      	mov	r0, r3
}
 8003a66:	4770      	bx	lr

08003a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a6c:	4604      	mov	r4, r0
 8003a6e:	4616      	mov	r6, r2
 8003a70:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a72:	b28f      	uxth	r7, r1
 8003a74:	6825      	ldr	r5, [r4, #0]
 8003a76:	6968      	ldr	r0, [r5, #20]
 8003a78:	ea37 0000 	bics.w	r0, r7, r0
 8003a7c:	d017      	beq.n	8003aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a7e:	696b      	ldr	r3, [r5, #20]
 8003a80:	055a      	lsls	r2, r3, #21
 8003a82:	d516      	bpl.n	8003ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a84:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a86:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a8c:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a8e:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8003a92:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a94:	2300      	movs	r3, #0
 8003a96:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a98:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a9c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003aa0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003aa2:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 8003aa6:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aa8:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003aaa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003ab2:	1c73      	adds	r3, r6, #1
 8003ab4:	d0df      	beq.n	8003a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab6:	f7ff fd55 	bl	8003564 <HAL_GetTick>
 8003aba:	eba0 0008 	sub.w	r0, r0, r8
 8003abe:	42b0      	cmp	r0, r6
 8003ac0:	d801      	bhi.n	8003ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 8003ac2:	2e00      	cmp	r6, #0
 8003ac4:	d1d6      	bne.n	8003a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ac6:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ac8:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003aca:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003acc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ad0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ad4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003ad6:	f042 0220 	orr.w	r2, r2, #32
 8003ada:	e7e4      	b.n	8003aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

08003adc <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003adc:	b570      	push	{r4, r5, r6, lr}
 8003ade:	4604      	mov	r4, r0
 8003ae0:	460d      	mov	r5, r1
 8003ae2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	075b      	lsls	r3, r3, #29
 8003aea:	d501      	bpl.n	8003af0 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8003aec:	2000      	movs	r0, #0
}
 8003aee:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003af0:	4620      	mov	r0, r4
 8003af2:	f7ff ffa0 	bl	8003a36 <I2C_IsAcknowledgeFailed>
 8003af6:	b9a8      	cbnz	r0, 8003b24 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8003af8:	1c6a      	adds	r2, r5, #1
 8003afa:	d0f3      	beq.n	8003ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afc:	f7ff fd32 	bl	8003564 <HAL_GetTick>
 8003b00:	1b80      	subs	r0, r0, r6
 8003b02:	42a8      	cmp	r0, r5
 8003b04:	d801      	bhi.n	8003b0a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003b06:	2d00      	cmp	r5, #0
 8003b08:	d1ec      	bne.n	8003ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b0a:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b0c:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b0e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b10:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b14:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b18:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003b1a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b1e:	f042 0220 	orr.w	r2, r2, #32
 8003b22:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003b24:	2001      	movs	r0, #1
 8003b26:	e7e2      	b.n	8003aee <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08003b28 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003b28:	b570      	push	{r4, r5, r6, lr}
 8003b2a:	4604      	mov	r4, r0
 8003b2c:	460d      	mov	r5, r1
 8003b2e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b30:	6820      	ldr	r0, [r4, #0]
 8003b32:	6943      	ldr	r3, [r0, #20]
 8003b34:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003b38:	d001      	beq.n	8003b3e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	e010      	b.n	8003b60 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b3e:	6942      	ldr	r2, [r0, #20]
 8003b40:	06d2      	lsls	r2, r2, #27
 8003b42:	d50e      	bpl.n	8003b62 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b44:	f06f 0210 	mvn.w	r2, #16
 8003b48:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b4a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b4c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b4e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b52:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b56:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003b58:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b5a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003b5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003b60:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b62:	f7ff fcff 	bl	8003564 <HAL_GetTick>
 8003b66:	1b80      	subs	r0, r0, r6
 8003b68:	42a8      	cmp	r0, r5
 8003b6a:	d801      	bhi.n	8003b70 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8003b6c:	2d00      	cmp	r5, #0
 8003b6e:	d1df      	bne.n	8003b30 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b70:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b72:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b74:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b76:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b7a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b7e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003b80:	f042 0220 	orr.w	r2, r2, #32
 8003b84:	e7e8      	b.n	8003b58 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08003b86 <I2C_WaitOnFlagUntilTimeout>:
{
 8003b86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	4690      	mov	r8, r2
 8003b8e:	461f      	mov	r7, r3
 8003b90:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b92:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8003b96:	b28d      	uxth	r5, r1
 8003b98:	6821      	ldr	r1, [r4, #0]
 8003b9a:	f1b9 0f01 	cmp.w	r9, #1
 8003b9e:	bf0c      	ite	eq
 8003ba0:	694b      	ldreq	r3, [r1, #20]
 8003ba2:	698b      	ldrne	r3, [r1, #24]
 8003ba4:	ea35 0303 	bics.w	r3, r5, r3
 8003ba8:	bf0c      	ite	eq
 8003baa:	2301      	moveq	r3, #1
 8003bac:	2300      	movne	r3, #0
 8003bae:	4598      	cmp	r8, r3
 8003bb0:	d001      	beq.n	8003bb6 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	e016      	b.n	8003be4 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8003bb6:	1c7b      	adds	r3, r7, #1
 8003bb8:	d0ef      	beq.n	8003b9a <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bba:	f7ff fcd3 	bl	8003564 <HAL_GetTick>
 8003bbe:	1b80      	subs	r0, r0, r6
 8003bc0:	42b8      	cmp	r0, r7
 8003bc2:	d801      	bhi.n	8003bc8 <I2C_WaitOnFlagUntilTimeout+0x42>
 8003bc4:	2f00      	cmp	r7, #0
 8003bc6:	d1e7      	bne.n	8003b98 <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003bc8:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003bca:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 8003bcc:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003bce:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003bd0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bd4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bd8:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003bda:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bde:	f042 0220 	orr.w	r2, r2, #32
 8003be2:	6422      	str	r2, [r4, #64]	; 0x40
}
 8003be4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003be8 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003be8:	b570      	push	{r4, r5, r6, lr}
 8003bea:	4604      	mov	r4, r0
 8003bec:	460d      	mov	r5, r1
 8003bee:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	061b      	lsls	r3, r3, #24
 8003bf6:	d501      	bpl.n	8003bfc <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8003bf8:	2000      	movs	r0, #0
}
 8003bfa:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	f7ff ff1a 	bl	8003a36 <I2C_IsAcknowledgeFailed>
 8003c02:	b9a8      	cbnz	r0, 8003c30 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8003c04:	1c6a      	adds	r2, r5, #1
 8003c06:	d0f3      	beq.n	8003bf0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c08:	f7ff fcac 	bl	8003564 <HAL_GetTick>
 8003c0c:	1b80      	subs	r0, r0, r6
 8003c0e:	42a8      	cmp	r0, r5
 8003c10:	d801      	bhi.n	8003c16 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003c12:	2d00      	cmp	r5, #0
 8003c14:	d1ec      	bne.n	8003bf0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c16:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c18:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c1a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c1c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c20:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c24:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003c26:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c2a:	f042 0220 	orr.w	r2, r2, #32
 8003c2e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003c30:	2001      	movs	r0, #1
 8003c32:	e7e2      	b.n	8003bfa <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08003c34 <I2C_RequestMemoryWrite>:
{
 8003c34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003c38:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c3a:	6802      	ldr	r2, [r0, #0]
{
 8003c3c:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c3e:	6813      	ldr	r3, [r2, #0]
{
 8003c40:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c46:	6013      	str	r3, [r2, #0]
{
 8003c48:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c4a:	9600      	str	r6, [sp, #0]
 8003c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8003c54:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c56:	f7ff ff96 	bl	8003b86 <I2C_WaitOnFlagUntilTimeout>
 8003c5a:	b118      	cbz	r0, 8003c64 <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 8003c5c:	2001      	movs	r0, #1
}
 8003c5e:	b004      	add	sp, #16
 8003c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8003c6a:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c6e:	4633      	mov	r3, r6
 8003c70:	4916      	ldr	r1, [pc, #88]	; (8003ccc <I2C_RequestMemoryWrite+0x98>)
 8003c72:	4620      	mov	r0, r4
 8003c74:	f7ff fef8 	bl	8003a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c78:	2800      	cmp	r0, #0
 8003c7a:	d1ef      	bne.n	8003c5c <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7c:	6823      	ldr	r3, [r4, #0]
 8003c7e:	9003      	str	r0, [sp, #12]
 8003c80:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c82:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c84:	9203      	str	r2, [sp, #12]
 8003c86:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c88:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8a:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c8c:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c90:	f7ff ffaa 	bl	8003be8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c94:	b140      	cbz	r0, 8003ca8 <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c98:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c9a:	bf01      	itttt	eq
 8003c9c:	6822      	ldreq	r2, [r4, #0]
 8003c9e:	6813      	ldreq	r3, [r2, #0]
 8003ca0:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8003ca4:	6013      	streq	r3, [r2, #0]
 8003ca6:	e7d9      	b.n	8003c5c <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ca8:	f1b8 0f01 	cmp.w	r8, #1
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	d102      	bne.n	8003cb6 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cb0:	b2ed      	uxtb	r5, r5
 8003cb2:	611d      	str	r5, [r3, #16]
 8003cb4:	e7d3      	b.n	8003c5e <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cb6:	0a2a      	lsrs	r2, r5, #8
 8003cb8:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cba:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003cbc:	4632      	mov	r2, r6
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	f7ff ff92 	bl	8003be8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	d1e6      	bne.n	8003c96 <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cc8:	6823      	ldr	r3, [r4, #0]
 8003cca:	e7f1      	b.n	8003cb0 <I2C_RequestMemoryWrite+0x7c>
 8003ccc:	00010002 	.word	0x00010002

08003cd0 <I2C_RequestMemoryRead>:
{
 8003cd0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003cd4:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd6:	6803      	ldr	r3, [r0, #0]
{
 8003cd8:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cda:	681a      	ldr	r2, [r3, #0]
{
 8003cdc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ce2:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ce4:	681a      	ldr	r2, [r3, #0]
{
 8003ce6:	460f      	mov	r7, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cec:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cf2:	9500      	str	r5, [sp, #0]
 8003cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cf6:	2200      	movs	r2, #0
{
 8003cf8:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cfa:	f7ff ff44 	bl	8003b86 <I2C_WaitOnFlagUntilTimeout>
 8003cfe:	b118      	cbz	r0, 8003d08 <I2C_RequestMemoryRead+0x38>
    return HAL_ERROR;
 8003d00:	2001      	movs	r0, #1
}
 8003d02:	b004      	add	sp, #16
 8003d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	b2ff      	uxtb	r7, r7
 8003d0c:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8003d10:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d12:	4929      	ldr	r1, [pc, #164]	; (8003db8 <I2C_RequestMemoryRead+0xe8>)
 8003d14:	462b      	mov	r3, r5
 8003d16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d18:	4620      	mov	r0, r4
 8003d1a:	f7ff fea5 	bl	8003a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d1e:	2800      	cmp	r0, #0
 8003d20:	d1ee      	bne.n	8003d00 <I2C_RequestMemoryRead+0x30>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d22:	6823      	ldr	r3, [r4, #0]
 8003d24:	9003      	str	r0, [sp, #12]
 8003d26:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d28:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d2a:	9203      	str	r2, [sp, #12]
 8003d2c:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d2e:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d30:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d32:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d34:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d36:	f7ff ff57 	bl	8003be8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d3a:	b140      	cbz	r0, 8003d4e <I2C_RequestMemoryRead+0x7e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d3e:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d40:	bf01      	itttt	eq
 8003d42:	6822      	ldreq	r2, [r4, #0]
 8003d44:	6813      	ldreq	r3, [r2, #0]
 8003d46:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8003d4a:	6013      	streq	r3, [r2, #0]
 8003d4c:	e7d8      	b.n	8003d00 <I2C_RequestMemoryRead+0x30>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d4e:	f1b8 0f01 	cmp.w	r8, #1
 8003d52:	6823      	ldr	r3, [r4, #0]
 8003d54:	d125      	bne.n	8003da2 <I2C_RequestMemoryRead+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d56:	b2f6      	uxtb	r6, r6
 8003d58:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d5a:	462a      	mov	r2, r5
 8003d5c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003d5e:	4620      	mov	r0, r4
 8003d60:	f7ff ff42 	bl	8003be8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d64:	4602      	mov	r2, r0
 8003d66:	2800      	cmp	r0, #0
 8003d68:	d1e8      	bne.n	8003d3c <I2C_RequestMemoryRead+0x6c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d6a:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d6c:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d6e:	680b      	ldr	r3, [r1, #0]
 8003d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d74:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d76:	9500      	str	r5, [sp, #0]
 8003d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d7e:	f7ff ff02 	bl	8003b86 <I2C_WaitOnFlagUntilTimeout>
 8003d82:	2800      	cmp	r0, #0
 8003d84:	d1bc      	bne.n	8003d00 <I2C_RequestMemoryRead+0x30>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	f047 0701 	orr.w	r7, r7, #1
 8003d8c:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d90:	462b      	mov	r3, r5
 8003d92:	4909      	ldr	r1, [pc, #36]	; (8003db8 <I2C_RequestMemoryRead+0xe8>)
 8003d94:	4620      	mov	r0, r4
 8003d96:	f7ff fe67 	bl	8003a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_ERROR;
 8003d9a:	3000      	adds	r0, #0
 8003d9c:	bf18      	it	ne
 8003d9e:	2001      	movne	r0, #1
 8003da0:	e7af      	b.n	8003d02 <I2C_RequestMemoryRead+0x32>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003da2:	0a32      	lsrs	r2, r6, #8
 8003da4:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003da8:	462a      	mov	r2, r5
 8003daa:	4620      	mov	r0, r4
 8003dac:	f7ff ff1c 	bl	8003be8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	d1c3      	bne.n	8003d3c <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	e7ce      	b.n	8003d56 <I2C_RequestMemoryRead+0x86>
 8003db8:	00010002 	.word	0x00010002

08003dbc <HAL_I2C_Init>:
{
 8003dbc:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	b908      	cbnz	r0, 8003dc6 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8003dc2:	2001      	movs	r0, #1
}
 8003dc4:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dc6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003dca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003dce:	b91b      	cbnz	r3, 8003dd8 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8003dd0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003dd4:	f7fe f91e 	bl	8002014 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dd8:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003dda:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ddc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003de0:	6813      	ldr	r3, [r2, #0]
 8003de2:	f023 0301 	bic.w	r3, r3, #1
 8003de6:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003de8:	f001 f872 	bl	8004ed0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dec:	6863      	ldr	r3, [r4, #4]
 8003dee:	4a41      	ldr	r2, [pc, #260]	; (8003ef4 <HAL_I2C_Init+0x138>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d84d      	bhi.n	8003e90 <HAL_I2C_Init+0xd4>
 8003df4:	4a40      	ldr	r2, [pc, #256]	; (8003ef8 <HAL_I2C_Init+0x13c>)
 8003df6:	4290      	cmp	r0, r2
 8003df8:	d9e3      	bls.n	8003dc2 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8003dfa:	4940      	ldr	r1, [pc, #256]	; (8003efc <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dfc:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8003dfe:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e02:	6855      	ldr	r5, [r2, #4]
 8003e04:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003e08:	430d      	orrs	r5, r1
 8003e0a:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e0c:	6a15      	ldr	r5, [r2, #32]
 8003e0e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003e12:	3101      	adds	r1, #1
 8003e14:	4329      	orrs	r1, r5
 8003e16:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e18:	69d1      	ldr	r1, [r2, #28]
 8003e1a:	4d36      	ldr	r5, [pc, #216]	; (8003ef4 <HAL_I2C_Init+0x138>)
 8003e1c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003e20:	42ab      	cmp	r3, r5
 8003e22:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003e26:	f100 30ff 	add.w	r0, r0, #4294967295
 8003e2a:	d848      	bhi.n	8003ebe <HAL_I2C_Init+0x102>
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e32:	1c43      	adds	r3, r0, #1
 8003e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	bf38      	it	cc
 8003e3c:	2304      	movcc	r3, #4
 8003e3e:	430b      	orrs	r3, r1
 8003e40:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e42:	6811      	ldr	r1, [r2, #0]
 8003e44:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8003e48:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8003e4c:	4303      	orrs	r3, r0
 8003e4e:	430b      	orrs	r3, r1
 8003e50:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e52:	6891      	ldr	r1, [r2, #8]
 8003e54:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8003e58:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8003e5c:	4303      	orrs	r3, r0
 8003e5e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003e62:	430b      	orrs	r3, r1
 8003e64:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e66:	68d1      	ldr	r1, [r2, #12]
 8003e68:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8003e6c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003e70:	4303      	orrs	r3, r0
 8003e72:	430b      	orrs	r3, r1
 8003e74:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003e76:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e78:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8003e7a:	f043 0301 	orr.w	r3, r3, #1
 8003e7e:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003e80:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e82:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e88:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8003e8e:	e799      	b.n	8003dc4 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e90:	4a1b      	ldr	r2, [pc, #108]	; (8003f00 <HAL_I2C_Init+0x144>)
 8003e92:	4290      	cmp	r0, r2
 8003e94:	d995      	bls.n	8003dc2 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8003e96:	4e19      	ldr	r6, [pc, #100]	; (8003efc <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e98:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8003e9c:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ea0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ea2:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ea4:	6855      	ldr	r5, [r2, #4]
 8003ea6:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003eaa:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003eac:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003eb0:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003eb2:	6a15      	ldr	r5, [r2, #32]
 8003eb4:	fbb1 f1f6 	udiv	r1, r1, r6
 8003eb8:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003ebc:	e7a9      	b.n	8003e12 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ebe:	68a5      	ldr	r5, [r4, #8]
 8003ec0:	b955      	cbnz	r5, 8003ed8 <HAL_I2C_Init+0x11c>
 8003ec2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003ec6:	fbb0 f0f3 	udiv	r0, r0, r3
 8003eca:	1c43      	adds	r3, r0, #1
 8003ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed0:	b16b      	cbz	r3, 8003eee <HAL_I2C_Init+0x132>
 8003ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ed6:	e7b2      	b.n	8003e3e <HAL_I2C_Init+0x82>
 8003ed8:	2519      	movs	r5, #25
 8003eda:	436b      	muls	r3, r5
 8003edc:	fbb0 f0f3 	udiv	r0, r0, r3
 8003ee0:	1c43      	adds	r3, r0, #1
 8003ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee6:	b113      	cbz	r3, 8003eee <HAL_I2C_Init+0x132>
 8003ee8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003eec:	e7a7      	b.n	8003e3e <HAL_I2C_Init+0x82>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e7a5      	b.n	8003e3e <HAL_I2C_Init+0x82>
 8003ef2:	bf00      	nop
 8003ef4:	000186a0 	.word	0x000186a0
 8003ef8:	001e847f 	.word	0x001e847f
 8003efc:	000f4240 	.word	0x000f4240
 8003f00:	003d08ff 	.word	0x003d08ff

08003f04 <HAL_I2C_Mem_Write>:
{
 8003f04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003f08:	4604      	mov	r4, r0
 8003f0a:	4699      	mov	r9, r3
 8003f0c:	460f      	mov	r7, r1
 8003f0e:	4690      	mov	r8, r2
 8003f10:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8003f12:	f7ff fb27 	bl	8003564 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f16:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8003f1a:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d003      	beq.n	8003f28 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8003f20:	2002      	movs	r0, #2
}
 8003f22:	b003      	add	sp, #12
 8003f24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f28:	9000      	str	r0, [sp, #0]
 8003f2a:	2319      	movs	r3, #25
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	493b      	ldr	r1, [pc, #236]	; (800401c <HAL_I2C_Mem_Write+0x118>)
 8003f30:	4620      	mov	r0, r4
 8003f32:	f7ff fe28 	bl	8003b86 <I2C_WaitOnFlagUntilTimeout>
 8003f36:	2800      	cmp	r0, #0
 8003f38:	d1f2      	bne.n	8003f20 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8003f3a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d0ee      	beq.n	8003f20 <HAL_I2C_Mem_Write+0x1c>
 8003f42:	2301      	movs	r3, #1
 8003f44:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f48:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f4a:	4620      	mov	r0, r4
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8003f50:	bf58      	it	pl
 8003f52:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f54:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8003f56:	bf5c      	itt	pl
 8003f58:	f042 0201 	orrpl.w	r2, r2, #1
 8003f5c:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f64:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f66:	2321      	movs	r3, #33	; 0x21
 8003f68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f6c:	2340      	movs	r3, #64	; 0x40
 8003f6e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f72:	2300      	movs	r3, #0
 8003f74:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f78:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->pBuffPtr    = pData;
 8003f7c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f7e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f82:	4642      	mov	r2, r8
    hi2c->XferCount   = Size;
 8003f84:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f86:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f88:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f8a:	4b25      	ldr	r3, [pc, #148]	; (8004020 <HAL_I2C_Mem_Write+0x11c>)
 8003f8c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f8e:	464b      	mov	r3, r9
 8003f90:	f7ff fe50 	bl	8003c34 <I2C_RequestMemoryWrite>
 8003f94:	2800      	cmp	r0, #0
 8003f96:	d02a      	beq.n	8003fee <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8003f98:	2001      	movs	r0, #1
 8003f9a:	e7c2      	b.n	8003f22 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f9c:	f7ff fe24 	bl	8003be8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fa0:	b140      	cbz	r0, 8003fb4 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fa4:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa6:	bf01      	itttt	eq
 8003fa8:	6822      	ldreq	r2, [r4, #0]
 8003faa:	6813      	ldreq	r3, [r2, #0]
 8003fac:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8003fb0:	6013      	streq	r3, [r2, #0]
 8003fb2:	e7f1      	b.n	8003f98 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fb6:	6827      	ldr	r7, [r4, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003fbe:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8003fc0:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003fc2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003fc4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003fc6:	3a01      	subs	r2, #1
 8003fc8:	b292      	uxth	r2, r2
 8003fca:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fcc:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8003fce:	1e48      	subs	r0, r1, #1
 8003fd0:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fd2:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8003fd4:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fd6:	d50a      	bpl.n	8003fee <HAL_I2C_Mem_Write+0xea>
 8003fd8:	b148      	cbz	r0, 8003fee <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fda:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8003fdc:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fde:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8003fe0:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003fe2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003fe4:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8003fea:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003fec:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ff0:	462a      	mov	r2, r5
 8003ff2:	4631      	mov	r1, r6
 8003ff4:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1d0      	bne.n	8003f9c <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ffa:	f7ff fd6f 	bl	8003adc <I2C_WaitOnBTFFlagUntilTimeout>
 8003ffe:	2800      	cmp	r0, #0
 8004000:	d1cf      	bne.n	8003fa2 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004002:	6822      	ldr	r2, [r4, #0]
 8004004:	6813      	ldr	r3, [r2, #0]
 8004006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800400a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800400c:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 800400e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8004012:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004016:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 800401a:	e782      	b.n	8003f22 <HAL_I2C_Mem_Write+0x1e>
 800401c:	00100002 	.word	0x00100002
 8004020:	ffff0000 	.word	0xffff0000

08004024 <HAL_I2C_Mem_Read>:
{
 8004024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004028:	4604      	mov	r4, r0
 800402a:	b087      	sub	sp, #28
 800402c:	4699      	mov	r9, r3
 800402e:	460d      	mov	r5, r1
 8004030:	4690      	mov	r8, r2
 8004032:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8004034:	f7ff fa96 	bl	8003564 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004038:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 800403c:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800403e:	2b20      	cmp	r3, #32
 8004040:	d004      	beq.n	800404c <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8004042:	2502      	movs	r5, #2
}
 8004044:	4628      	mov	r0, r5
 8004046:	b007      	add	sp, #28
 8004048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800404c:	9000      	str	r0, [sp, #0]
 800404e:	2319      	movs	r3, #25
 8004050:	2201      	movs	r2, #1
 8004052:	497e      	ldr	r1, [pc, #504]	; (800424c <HAL_I2C_Mem_Read+0x228>)
 8004054:	4620      	mov	r0, r4
 8004056:	f7ff fd96 	bl	8003b86 <I2C_WaitOnFlagUntilTimeout>
 800405a:	2800      	cmp	r0, #0
 800405c:	d1f1      	bne.n	8004042 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 800405e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004062:	2b01      	cmp	r3, #1
 8004064:	d0ed      	beq.n	8004042 <HAL_I2C_Mem_Read+0x1e>
 8004066:	2301      	movs	r3, #1
 8004068:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800406c:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800406e:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8004074:	bf58      	it	pl
 8004076:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004078:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 800407a:	bf5c      	itt	pl
 800407c:	f042 0201 	orrpl.w	r2, r2, #1
 8004080:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004088:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800408a:	2322      	movs	r3, #34	; 0x22
 800408c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004090:	2340      	movs	r3, #64	; 0x40
 8004092:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004096:	2300      	movs	r3, #0
 8004098:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800409a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800409c:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->pBuffPtr    = pData;
 80040a0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040a2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040a6:	4642      	mov	r2, r8
    hi2c->XferCount   = Size;
 80040a8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80040ac:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040ae:	4b68      	ldr	r3, [pc, #416]	; (8004250 <HAL_I2C_Mem_Read+0x22c>)
 80040b0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040b2:	464b      	mov	r3, r9
 80040b4:	f7ff fe0c 	bl	8003cd0 <I2C_RequestMemoryRead>
 80040b8:	4605      	mov	r5, r0
 80040ba:	b108      	cbz	r0, 80040c0 <HAL_I2C_Mem_Read+0x9c>
      return HAL_ERROR;
 80040bc:	2501      	movs	r5, #1
 80040be:	e7c1      	b.n	8004044 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 80040c0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	b992      	cbnz	r2, 80040ec <HAL_I2C_Mem_Read+0xc8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c6:	9002      	str	r0, [sp, #8]
 80040c8:	695a      	ldr	r2, [r3, #20]
 80040ca:	9202      	str	r2, [sp, #8]
 80040cc:	699a      	ldr	r2, [r3, #24]
 80040ce:	9202      	str	r2, [sp, #8]
 80040d0:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d8:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80040da:	2320      	movs	r3, #32
 80040dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e0:	2300      	movs	r3, #0
 80040e2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80040e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80040ea:	e7ab      	b.n	8004044 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 80040ec:	2a01      	cmp	r2, #1
 80040ee:	d12f      	bne.n	8004150 <HAL_I2C_Mem_Read+0x12c>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040f8:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	9003      	str	r0, [sp, #12]
 80040fe:	695a      	ldr	r2, [r3, #20]
 8004100:	9203      	str	r2, [sp, #12]
 8004102:	699a      	ldr	r2, [r3, #24]
 8004104:	9203      	str	r2, [sp, #12]
 8004106:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800410e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004110:	b662      	cpsie	i
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004112:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8004254 <HAL_I2C_Mem_Read+0x230>
    while (hi2c->XferSize > 0U)
 8004116:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0de      	beq.n	80040da <HAL_I2C_Mem_Read+0xb6>
      if (hi2c->XferSize <= 3U)
 800411c:	2b03      	cmp	r3, #3
 800411e:	d877      	bhi.n	8004210 <HAL_I2C_Mem_Read+0x1ec>
        if (hi2c->XferSize == 1U)
 8004120:	2b01      	cmp	r3, #1
 8004122:	d131      	bne.n	8004188 <HAL_I2C_Mem_Read+0x164>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004124:	4632      	mov	r2, r6
 8004126:	4639      	mov	r1, r7
 8004128:	4620      	mov	r0, r4
 800412a:	f7ff fcfd 	bl	8003b28 <I2C_WaitOnRXNEFlagUntilTimeout>
 800412e:	2800      	cmp	r0, #0
 8004130:	d1c4      	bne.n	80040bc <HAL_I2C_Mem_Read+0x98>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004132:	6823      	ldr	r3, [r4, #0]
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004138:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800413a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800413c:	3301      	adds	r3, #1
 800413e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004140:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004142:	3b01      	subs	r3, #1
 8004144:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004146:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004148:	3b01      	subs	r3, #1
 800414a:	b29b      	uxth	r3, r3
 800414c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800414e:	e7e2      	b.n	8004116 <HAL_I2C_Mem_Read+0xf2>
    else if (hi2c->XferSize == 2U)
 8004150:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004152:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8004154:	d10e      	bne.n	8004174 <HAL_I2C_Mem_Read+0x150>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800415a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800415c:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	9004      	str	r0, [sp, #16]
 8004162:	695a      	ldr	r2, [r3, #20]
 8004164:	9204      	str	r2, [sp, #16]
 8004166:	699a      	ldr	r2, [r3, #24]
 8004168:	9204      	str	r2, [sp, #16]
 800416a:	9a04      	ldr	r2, [sp, #16]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004172:	e7cc      	b.n	800410e <HAL_I2C_Mem_Read+0xea>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004174:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004178:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800417a:	9005      	str	r0, [sp, #20]
 800417c:	695a      	ldr	r2, [r3, #20]
 800417e:	9205      	str	r2, [sp, #20]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	9305      	str	r3, [sp, #20]
 8004184:	9b05      	ldr	r3, [sp, #20]
 8004186:	e7c4      	b.n	8004112 <HAL_I2C_Mem_Read+0xee>
        else if (hi2c->XferSize == 2U)
 8004188:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800418a:	9600      	str	r6, [sp, #0]
 800418c:	463b      	mov	r3, r7
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	4641      	mov	r1, r8
 8004194:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8004196:	d118      	bne.n	80041ca <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004198:	f7ff fcf5 	bl	8003b86 <I2C_WaitOnFlagUntilTimeout>
 800419c:	2800      	cmp	r0, #0
 800419e:	d18d      	bne.n	80040bc <HAL_I2C_Mem_Read+0x98>
 80041a0:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041aa:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041b0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80041b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041b4:	3301      	adds	r3, #1
 80041b6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80041b8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80041ba:	3b01      	subs	r3, #1
 80041bc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80041be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80041c6:	b662      	cpsie	i
 80041c8:	e7b3      	b.n	8004132 <HAL_I2C_Mem_Read+0x10e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041ca:	f7ff fcdc 	bl	8003b86 <I2C_WaitOnFlagUntilTimeout>
 80041ce:	4602      	mov	r2, r0
 80041d0:	2800      	cmp	r0, #0
 80041d2:	f47f af73 	bne.w	80040bc <HAL_I2C_Mem_Read+0x98>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d6:	6821      	ldr	r1, [r4, #0]
 80041d8:	680b      	ldr	r3, [r1, #0]
 80041da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041de:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80041e0:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e2:	6823      	ldr	r3, [r4, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041e4:	4620      	mov	r0, r4
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e6:	6919      	ldr	r1, [r3, #16]
 80041e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041ea:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 80041ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041ee:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 80041f0:	3301      	adds	r3, #1
 80041f2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80041f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041f6:	4641      	mov	r1, r8
          hi2c->XferSize--;
 80041f8:	3b01      	subs	r3, #1
 80041fa:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80041fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29b      	uxth	r3, r3
 8004202:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004204:	463b      	mov	r3, r7
 8004206:	f7ff fcbe 	bl	8003b86 <I2C_WaitOnFlagUntilTimeout>
 800420a:	2800      	cmp	r0, #0
 800420c:	d0c9      	beq.n	80041a2 <HAL_I2C_Mem_Read+0x17e>
 800420e:	e755      	b.n	80040bc <HAL_I2C_Mem_Read+0x98>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004210:	4632      	mov	r2, r6
 8004212:	4639      	mov	r1, r7
 8004214:	4620      	mov	r0, r4
 8004216:	f7ff fc87 	bl	8003b28 <I2C_WaitOnRXNEFlagUntilTimeout>
 800421a:	2800      	cmp	r0, #0
 800421c:	f47f af4e 	bne.w	80040bc <HAL_I2C_Mem_Read+0x98>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004220:	6823      	ldr	r3, [r4, #0]
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004226:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004228:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800422a:	1c53      	adds	r3, r2, #1
 800422c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800422e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004230:	3b01      	subs	r3, #1
 8004232:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8004234:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004236:	3b01      	subs	r3, #1
 8004238:	b29b      	uxth	r3, r3
 800423a:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	6959      	ldr	r1, [r3, #20]
 8004240:	0749      	lsls	r1, r1, #29
 8004242:	f57f af68 	bpl.w	8004116 <HAL_I2C_Mem_Read+0xf2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	7053      	strb	r3, [r2, #1]
 800424a:	e776      	b.n	800413a <HAL_I2C_Mem_Read+0x116>
 800424c:	00100002 	.word	0x00100002
 8004250:	ffff0000 	.word	0xffff0000
 8004254:	00010004 	.word	0x00010004

08004258 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004258:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800425a:	4604      	mov	r4, r0
{
 800425c:	b087      	sub	sp, #28
  if (hpcd == NULL)
 800425e:	b310      	cbz	r0, 80042a6 <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004260:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8004264:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004268:	b91b      	cbnz	r3, 8004272 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800426a:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800426e:	f002 fb49 	bl	8006904 <HAL_PCD_MspInit>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004272:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8004274:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004276:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 8004278:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 800427c:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 8004280:	f001 f99e 	bl	80055c0 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004286:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004288:	682b      	ldr	r3, [r5, #0]
 800428a:	4625      	mov	r5, r4
 800428c:	6033      	str	r3, [r6, #0]
 800428e:	1d27      	adds	r7, r4, #4
 8004290:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8004294:	f855 0b10 	ldr.w	r0, [r5], #16
 8004298:	f001 f983 	bl	80055a2 <USB_CoreInit>
 800429c:	4606      	mov	r6, r0
 800429e:	b120      	cbz	r0, 80042aa <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042a0:	2302      	movs	r3, #2
 80042a2:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    return HAL_ERROR;
 80042a6:	2501      	movs	r5, #1
 80042a8:	e048      	b.n	800433c <HAL_PCD_Init+0xe4>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80042aa:	4601      	mov	r1, r0
 80042ac:	6820      	ldr	r0, [r4, #0]
 80042ae:	f001 f991 	bl	80055d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042b2:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042b4:	f04f 0c01 	mov.w	ip, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042b8:	6861      	ldr	r1, [r4, #4]
 80042ba:	b2c3      	uxtb	r3, r0
 80042bc:	4299      	cmp	r1, r3
 80042be:	f100 0001 	add.w	r0, r0, #1
 80042c2:	d817      	bhi.n	80042f4 <HAL_PCD_Init+0x9c>
 80042c4:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042c6:	4610      	mov	r0, r2
 80042c8:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042ca:	4299      	cmp	r1, r3
 80042cc:	f102 0201 	add.w	r2, r2, #1
 80042d0:	d81d      	bhi.n	800430e <HAL_PCD_Init+0xb6>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042d4:	466e      	mov	r6, sp
 80042d6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80042d8:	682b      	ldr	r3, [r5, #0]
 80042da:	6033      	str	r3, [r6, #0]
 80042dc:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80042e0:	6820      	ldr	r0, [r4, #0]
 80042e2:	f001 f979 	bl	80055d8 <USB_DevInit>
 80042e6:	2301      	movs	r3, #1
 80042e8:	4605      	mov	r5, r0
 80042ea:	b300      	cbz	r0, 800432e <HAL_PCD_Init+0xd6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042ec:	2202      	movs	r2, #2
 80042ee:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
 80042f2:	e7d8      	b.n	80042a6 <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 80042f4:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 80042f8:	f882 c029 	strb.w	ip, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 80042fc:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004300:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004302:	f882 602b 	strb.w	r6, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004306:	e9c2 660e 	strd	r6, r6, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 800430a:	6416      	str	r6, [r2, #64]	; 0x40
 800430c:	e7d5      	b.n	80042ba <HAL_PCD_Init+0x62>
    hpcd->OUT_ep[i].is_in = 0U;
 800430e:	eb04 1643 	add.w	r6, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 8004312:	f886 3128 	strb.w	r3, [r6, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004316:	330a      	adds	r3, #10
 8004318:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 800431a:	f886 0129 	strb.w	r0, [r6, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800431e:	f886 012b 	strb.w	r0, [r6, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004322:	f8c6 0138 	str.w	r0, [r6, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004326:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 800432a:	50e0      	str	r0, [r4, r3]
 800432c:	e7cc      	b.n	80042c8 <HAL_PCD_Init+0x70>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 800432e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004332:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8004336:	6820      	ldr	r0, [r4, #0]
 8004338:	f001 fbef 	bl	8005b1a <USB_DevDisconnect>

  return HAL_OK;
}
 800433c:	4628      	mov	r0, r5
 800433e:	b007      	add	sp, #28
 8004340:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004342 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8004342:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
{
 8004346:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8004348:	2b01      	cmp	r3, #1
{
 800434a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800434c:	d00e      	beq.n	800436c <HAL_PCD_Start+0x2a>
 800434e:	2101      	movs	r1, #1
 8004350:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004354:	f002 fc03 	bl	8006b5e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8004358:	6820      	ldr	r0, [r4, #0]
 800435a:	f001 fbdc 	bl	8005b16 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800435e:	6820      	ldr	r0, [r4, #0]
 8004360:	f001 f926 	bl	80055b0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004364:	2000      	movs	r0, #0
 8004366:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 800436a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800436c:	2002      	movs	r0, #2
 800436e:	e7fc      	b.n	800436a <HAL_PCD_Start+0x28>

08004370 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8004370:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
{
 8004374:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8004376:	2a01      	cmp	r2, #1
{
 8004378:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800437a:	d00b      	beq.n	8004394 <HAL_PCD_SetAddress+0x24>
 800437c:	2201      	movs	r2, #1
 800437e:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 8004382:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004386:	6800      	ldr	r0, [r0, #0]
 8004388:	f001 fbbf 	bl	8005b0a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800438c:	2000      	movs	r0, #0
 800438e:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8004392:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8004394:	2002      	movs	r0, #2
 8004396:	e7fc      	b.n	8004392 <HAL_PCD_SetAddress+0x22>

08004398 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004398:	b570      	push	{r4, r5, r6, lr}
 800439a:	4604      	mov	r4, r0
 800439c:	f001 0507 	and.w	r5, r1, #7
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043a0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80043a4:	ea4f 1045 	mov.w	r0, r5, lsl #5
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043a8:	bf14      	ite	ne
 80043aa:	f100 0128 	addne.w	r1, r0, #40	; 0x28
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043ae:	f500 7194 	addeq.w	r1, r0, #296	; 0x128
 80043b2:	eb04 0600 	add.w	r6, r4, r0
    ep->is_in = 1U;
 80043b6:	bf17      	itett	ne
 80043b8:	2001      	movne	r0, #1
    ep->is_in = 0U;
 80043ba:	2000      	moveq	r0, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043bc:	1909      	addne	r1, r1, r4
    ep->is_in = 1U;
 80043be:	f886 0029 	strbne.w	r0, [r6, #41]	; 0x29
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043c2:	bf04      	itt	eq
 80043c4:	1909      	addeq	r1, r1, r4
    ep->is_in = 0U;
 80043c6:	f886 0129 	strbeq.w	r0, [r6, #297]	; 0x129
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 80043ca:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 80043cc:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043ce:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 80043d0:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80043d2:	b102      	cbz	r2, 80043d6 <HAL_PCD_EP_Open+0x3e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80043d4:	81cd      	strh	r5, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80043d6:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 80043d8:	bf04      	itt	eq
 80043da:	2300      	moveq	r3, #0
 80043dc:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 80043de:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d009      	beq.n	80043fa <HAL_PCD_EP_Open+0x62>
 80043e6:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043e8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80043ea:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043ee:	f001 f90d 	bl	800560c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043f2:	2000      	movs	r0, #0
 80043f4:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
}
 80043f8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80043fa:	2002      	movs	r0, #2
 80043fc:	e7fc      	b.n	80043f8 <HAL_PCD_EP_Open+0x60>

080043fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043fe:	f001 0207 	and.w	r2, r1, #7
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004402:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004406:	ea4f 1342 	mov.w	r3, r2, lsl #5
{
 800440a:	b510      	push	{r4, lr}
 800440c:	4604      	mov	r4, r0
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800440e:	bf18      	it	ne
 8004410:	f103 0128 	addne.w	r1, r3, #40	; 0x28
 8004414:	4418      	add	r0, r3
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004416:	bf0b      	itete	eq
 8004418:	f503 7194 	addeq.w	r1, r3, #296	; 0x128
    ep->is_in = 1U;
 800441c:	2301      	movne	r3, #1
    ep->is_in = 0U;
 800441e:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004420:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004422:	bf0a      	itet	eq
 8004424:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8004426:	f880 3029 	strbne.w	r3, [r0, #41]	; 0x29
    ep->is_in = 0U;
 800442a:	f880 3129 	strbeq.w	r3, [r0, #297]	; 0x129
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800442e:	700a      	strb	r2, [r1, #0]

  __HAL_LOCK(hpcd);
 8004430:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8004434:	2b01      	cmp	r3, #1
 8004436:	d009      	beq.n	800444c <HAL_PCD_EP_Close+0x4e>
 8004438:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800443a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800443c:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004440:	f001 fa3e 	bl	80058c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004444:	2000      	movs	r0, #0
 8004446:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 800444a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800444c:	2002      	movs	r0, #2
 800444e:	e7fc      	b.n	800444a <HAL_PCD_EP_Close+0x4c>

08004450 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004450:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8004452:	2600      	movs	r6, #0
 8004454:	f001 0107 	and.w	r1, r1, #7
 8004458:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 800445a:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 800445c:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004460:	f505 7194 	add.w	r1, r5, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004464:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8004466:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  ep->xfer_len = len;
 800446a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
  ep->xfer_count = 0U;
 800446e:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 8004472:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004476:	6800      	ldr	r0, [r0, #0]
 8004478:	f001 fb66 	bl	8005b48 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 800447c:	4630      	mov	r0, r6
 800447e:	bd70      	pop	{r4, r5, r6, pc}

08004480 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004480:	f001 0107 	and.w	r1, r1, #7
 8004484:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8004488:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 800448c:	4770      	bx	lr

0800448e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800448e:	f001 0107 	and.w	r1, r1, #7
 8004492:	b570      	push	{r4, r5, r6, lr}
 8004494:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004496:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8004498:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 800449c:	2600      	movs	r6, #0
  ep->is_in = 1U;
 800449e:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80044a0:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044a4:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044a8:	4401      	add	r1, r0
  ep->xfer_count = 0U;
 80044aa:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80044ac:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044b0:	6800      	ldr	r0, [r0, #0]
 80044b2:	f001 fb49 	bl	8005b48 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80044b6:	4630      	mov	r0, r6
 80044b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080044bc <HAL_PCD_IRQHandler>:
{
 80044bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c0:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80044c2:	6800      	ldr	r0, [r0, #0]
 80044c4:	f001 fb2b 	bl	8005b1e <USB_ReadInterrupts>
 80044c8:	0402      	lsls	r2, r0, #16
 80044ca:	d50b      	bpl.n	80044e4 <HAL_PCD_IRQHandler+0x28>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80044cc:	f8df 940c 	ldr.w	r9, [pc, #1036]	; 80048dc <HAL_PCD_IRQHandler+0x420>
 80044d0:	f8df a40c 	ldr.w	sl, [pc, #1036]	; 80048e0 <HAL_PCD_IRQHandler+0x424>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80044d4:	f8df b40c 	ldr.w	fp, [pc, #1036]	; 80048e4 <HAL_PCD_IRQHandler+0x428>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80044d8:	6820      	ldr	r0, [r4, #0]
 80044da:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80044de:	041b      	lsls	r3, r3, #16
 80044e0:	f100 809e 	bmi.w	8004620 <HAL_PCD_IRQHandler+0x164>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80044e4:	6820      	ldr	r0, [r4, #0]
 80044e6:	f001 fb1a 	bl	8005b1e <USB_ReadInterrupts>
 80044ea:	0543      	lsls	r3, r0, #21
 80044ec:	d50f      	bpl.n	800450e <HAL_PCD_IRQHandler+0x52>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80044ee:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80044f0:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80044f2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80044f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044fa:	041b      	lsls	r3, r3, #16
 80044fc:	0c1b      	lsrs	r3, r3, #16
 80044fe:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8004502:	f002 fa38 	bl	8006976 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004506:	2100      	movs	r1, #0
 8004508:	4620      	mov	r0, r4
 800450a:	f7ff ff31 	bl	8004370 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800450e:	6820      	ldr	r0, [r4, #0]
 8004510:	f001 fb05 	bl	8005b1e <USB_ReadInterrupts>
 8004514:	0447      	lsls	r7, r0, #17
 8004516:	d508      	bpl.n	800452a <HAL_PCD_IRQHandler+0x6e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004518:	6822      	ldr	r2, [r4, #0]
 800451a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800451e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004522:	041b      	lsls	r3, r3, #16
 8004524:	0c1b      	lsrs	r3, r3, #16
 8004526:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800452a:	6820      	ldr	r0, [r4, #0]
 800452c:	f001 faf7 	bl	8005b1e <USB_ReadInterrupts>
 8004530:	0486      	lsls	r6, r0, #18
 8004532:	d508      	bpl.n	8004546 <HAL_PCD_IRQHandler+0x8a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004534:	6822      	ldr	r2, [r4, #0]
 8004536:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800453a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800453e:	041b      	lsls	r3, r3, #16
 8004540:	0c1b      	lsrs	r3, r3, #16
 8004542:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004546:	6820      	ldr	r0, [r4, #0]
 8004548:	f001 fae9 	bl	8005b1e <USB_ReadInterrupts>
 800454c:	04c5      	lsls	r5, r0, #19
 800454e:	d51c      	bpl.n	800458a <HAL_PCD_IRQHandler+0xce>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004550:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8004552:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004554:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004558:	f023 0304 	bic.w	r3, r3, #4
 800455c:	041b      	lsls	r3, r3, #16
 800455e:	0c1b      	lsrs	r3, r3, #16
 8004560:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004564:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004568:	f023 0308 	bic.w	r3, r3, #8
 800456c:	041b      	lsls	r3, r3, #16
 800456e:	0c1b      	lsrs	r3, r3, #16
 8004570:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8004574:	f002 fa22 	bl	80069bc <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004578:	6822      	ldr	r2, [r4, #0]
 800457a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800457e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004582:	041b      	lsls	r3, r3, #16
 8004584:	0c1b      	lsrs	r3, r3, #16
 8004586:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800458a:	6820      	ldr	r0, [r4, #0]
 800458c:	f001 fac7 	bl	8005b1e <USB_ReadInterrupts>
 8004590:	0500      	lsls	r0, r0, #20
 8004592:	d524      	bpl.n	80045de <HAL_PCD_IRQHandler+0x122>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8004594:	6820      	ldr	r0, [r4, #0]
 8004596:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800459a:	f043 0308 	orr.w	r3, r3, #8
 800459e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80045a2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80045a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045aa:	041b      	lsls	r3, r3, #16
 80045ac:	0c1b      	lsrs	r3, r3, #16
 80045ae:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80045b2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80045b6:	f043 0304 	orr.w	r3, r3, #4
 80045ba:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80045be:	f001 faae 	bl	8005b1e <USB_ReadInterrupts>
 80045c2:	04c1      	lsls	r1, r0, #19
 80045c4:	d508      	bpl.n	80045d8 <HAL_PCD_IRQHandler+0x11c>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80045c6:	6822      	ldr	r2, [r4, #0]
 80045c8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80045cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045d0:	041b      	lsls	r3, r3, #16
 80045d2:	0c1b      	lsrs	r3, r3, #16
 80045d4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 80045d8:	4620      	mov	r0, r4
 80045da:	f002 f9df 	bl	800699c <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80045de:	6820      	ldr	r0, [r4, #0]
 80045e0:	f001 fa9d 	bl	8005b1e <USB_ReadInterrupts>
 80045e4:	0582      	lsls	r2, r0, #22
 80045e6:	d50b      	bpl.n	8004600 <HAL_PCD_IRQHandler+0x144>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80045e8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80045ea:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80045ec:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80045f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045f4:	041b      	lsls	r3, r3, #16
 80045f6:	0c1b      	lsrs	r3, r3, #16
 80045f8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80045fc:	f002 f9b7 	bl	800696e <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004600:	6820      	ldr	r0, [r4, #0]
 8004602:	f001 fa8c 	bl	8005b1e <USB_ReadInterrupts>
 8004606:	05c3      	lsls	r3, r0, #23
 8004608:	d508      	bpl.n	800461c <HAL_PCD_IRQHandler+0x160>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800460a:	6822      	ldr	r2, [r4, #0]
 800460c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004614:	041b      	lsls	r3, r3, #16
 8004616:	0c1b      	lsrs	r3, r3, #16
 8004618:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 800461c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8004620:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 8004624:	b289      	uxth	r1, r1
    if (epindex == 0U)
 8004626:	f011 060f 	ands.w	r6, r1, #15
 800462a:	f040 80b1 	bne.w	8004790 <HAL_PCD_IRQHandler+0x2d4>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800462e:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004632:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004634:	d12a      	bne.n	800468c <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004636:	ea09 0303 	and.w	r3, r9, r3
 800463a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800463e:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004640:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004644:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8004648:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800464c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8004650:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8004654:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800465a:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800465c:	4413      	add	r3, r2
 800465e:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004660:	4620      	mov	r0, r4
 8004662:	f002 f97d 	bl	8006960 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004666:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800466a:	2b00      	cmp	r3, #0
 800466c:	f43f af34 	beq.w	80044d8 <HAL_PCD_IRQHandler+0x1c>
 8004670:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004672:	2a00      	cmp	r2, #0
 8004674:	f47f af30 	bne.w	80044d8 <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004678:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800467c:	6821      	ldr	r1, [r4, #0]
 800467e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004682:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004686:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800468a:	e725      	b.n	80044d8 <HAL_PCD_IRQHandler+0x1c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800468c:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800468e:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 8004692:	d020      	beq.n	80046d6 <HAL_PCD_IRQHandler+0x21a>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004694:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004698:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800469c:	f504 710c 	add.w	r1, r4, #560	; 0x230
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80046a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046a4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80046a8:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80046ac:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 80046b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80046b4:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80046b8:	f001 fb1a 	bl	8005cf0 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80046bc:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80046be:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80046c0:	8813      	ldrh	r3, [r2, #0]
 80046c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c6:	051b      	lsls	r3, r3, #20
 80046c8:	0d1b      	lsrs	r3, r3, #20
 80046ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ce:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80046d0:	f002 f938 	bl	8006944 <HAL_PCD_SetupStageCallback>
 80046d4:	e700      	b.n	80044d8 <HAL_PCD_IRQHandler+0x1c>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80046d6:	041f      	lsls	r7, r3, #16
 80046d8:	f57f aefe 	bpl.w	80044d8 <HAL_PCD_IRQHandler+0x1c>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80046dc:	8803      	ldrh	r3, [r0, #0]
 80046de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e2:	051b      	lsls	r3, r3, #20
 80046e4:	0d1b      	lsrs	r3, r3, #20
 80046e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ea:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80046ec:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80046f0:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 80046f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046f8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80046fc:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8004700:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004704:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004708:	b18b      	cbz	r3, 800472e <HAL_PCD_IRQHandler+0x272>
 800470a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800470e:	b171      	cbz	r1, 800472e <HAL_PCD_IRQHandler+0x272>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004710:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8004714:	f001 faec 	bl	8005cf0 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8004718:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800471c:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004720:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8004722:	4413      	add	r3, r2
 8004724:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004728:	4620      	mov	r0, r4
 800472a:	f002 f911 	bl	8006950 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800472e:	6821      	ldr	r1, [r4, #0]
 8004730:	f8d4 5138 	ldr.w	r5, [r4, #312]	; 0x138
 8004734:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8004738:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 800473c:	b29b      	uxth	r3, r3
 800473e:	b9bd      	cbnz	r5, 8004770 <HAL_PCD_IRQHandler+0x2b4>
 8004740:	5ac2      	ldrh	r2, [r0, r3]
 8004742:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004746:	0412      	lsls	r2, r2, #16
 8004748:	0c12      	lsrs	r2, r2, #16
 800474a:	52c2      	strh	r2, [r0, r3]
 800474c:	5ac2      	ldrh	r2, [r0, r3]
 800474e:	ea4a 0202 	orr.w	r2, sl, r2
 8004752:	b292      	uxth	r2, r2
 8004754:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004756:	880b      	ldrh	r3, [r1, #0]
 8004758:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800475c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004760:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004764:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800476c:	800b      	strh	r3, [r1, #0]
 800476e:	e6b3      	b.n	80044d8 <HAL_PCD_IRQHandler+0x1c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004770:	2d3e      	cmp	r5, #62	; 0x3e
 8004772:	d805      	bhi.n	8004780 <HAL_PCD_IRQHandler+0x2c4>
 8004774:	086a      	lsrs	r2, r5, #1
 8004776:	07ee      	lsls	r6, r5, #31
 8004778:	bf48      	it	mi
 800477a:	3201      	addmi	r2, #1
 800477c:	0292      	lsls	r2, r2, #10
 800477e:	e7e8      	b.n	8004752 <HAL_PCD_IRQHandler+0x296>
 8004780:	096a      	lsrs	r2, r5, #5
 8004782:	06ed      	lsls	r5, r5, #27
 8004784:	bf08      	it	eq
 8004786:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800478a:	ea4a 2282 	orr.w	r2, sl, r2, lsl #10
 800478e:	e7e0      	b.n	8004752 <HAL_PCD_IRQHandler+0x296>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004790:	f830 8026 	ldrh.w	r8, [r0, r6, lsl #2]
 8004794:	fa1f f888 	uxth.w	r8, r8
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004798:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 800479c:	d03c      	beq.n	8004818 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800479e:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80047a2:	0177      	lsls	r7, r6, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80047a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a8:	051b      	lsls	r3, r3, #20
 80047aa:	0d1b      	lsrs	r3, r3, #20
 80047ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b0:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80047b4:	19e1      	adds	r1, r4, r7
 80047b6:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 80047ba:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d150      	bne.n	8004864 <HAL_PCD_IRQHandler+0x3a8>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80047c2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80047c6:	f891 5128 	ldrb.w	r5, [r1, #296]	; 0x128
 80047ca:	3306      	adds	r3, #6
 80047cc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80047d0:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 80047d4:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 80047d8:	b135      	cbz	r5, 80047e8 <HAL_PCD_IRQHandler+0x32c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80047da:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 80047de:	462b      	mov	r3, r5
 80047e0:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 80047e4:	f001 fa84 	bl	8005cf0 <USB_ReadPMA>
 80047e8:	19e1      	adds	r1, r4, r7
        ep->xfer_count += count;
 80047ea:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
        ep->xfer_buff += count;
 80047ee:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
        ep->xfer_count += count;
 80047f2:	442b      	add	r3, r5
 80047f4:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80047f8:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
        ep->xfer_buff += count;
 80047fc:	442a      	add	r2, r5
 80047fe:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004802:	b11b      	cbz	r3, 800480c <HAL_PCD_IRQHandler+0x350>
 8004804:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 8004808:	4285      	cmp	r5, r0
 800480a:	d25d      	bcs.n	80048c8 <HAL_PCD_IRQHandler+0x40c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800480c:	4427      	add	r7, r4
 800480e:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 8004812:	4620      	mov	r0, r4
 8004814:	f002 f89c 	bl	8006950 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004818:	f018 0f80 	tst.w	r8, #128	; 0x80
 800481c:	f43f ae5c 	beq.w	80044d8 <HAL_PCD_IRQHandler+0x1c>
 8004820:	6823      	ldr	r3, [r4, #0]
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004822:	4620      	mov	r0, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004824:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8004828:	ea09 0202 	and.w	r2, r9, r2
 800482c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004830:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004834:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8004838:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 800483c:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8004840:	3202      	adds	r2, #2
 8004842:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004846:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800484a:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff += ep->xfer_count;
 800484e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004850:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004854:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8004856:	441a      	add	r2, r3
        if (ep->xfer_len == 0U)
 8004858:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 800485a:	63f2      	str	r2, [r6, #60]	; 0x3c
        if (ep->xfer_len == 0U)
 800485c:	bbd3      	cbnz	r3, 80048d4 <HAL_PCD_IRQHandler+0x418>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800485e:	f002 f87f 	bl	8006960 <HAL_PCD_DataInStageCallback>
 8004862:	e639      	b.n	80044d8 <HAL_PCD_IRQHandler+0x1c>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004864:	f891 3128 	ldrb.w	r3, [r1, #296]	; 0x128
 8004868:	f830 5023 	ldrh.w	r5, [r0, r3, lsl #2]
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	f415 4f80 	tst.w	r5, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004872:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8004876:	442b      	add	r3, r5
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004878:	d01b      	beq.n	80048b2 <HAL_PCD_IRQHandler+0x3f6>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800487a:	3302      	adds	r3, #2
 800487c:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8004880:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8004884:	b135      	cbz	r5, 8004894 <HAL_PCD_IRQHandler+0x3d8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004886:	462b      	mov	r3, r5
 8004888:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800488c:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8004890:	f001 fa2e 	bl	8005cf0 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004894:	19e3      	adds	r3, r4, r7
 8004896:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 800489a:	6822      	ldr	r2, [r4, #0]
 800489c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80048a0:	ea0b 0303 	and.w	r3, fp, r3
 80048a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048ac:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80048b0:	e79a      	b.n	80047e8 <HAL_PCD_IRQHandler+0x32c>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80048b2:	3306      	adds	r3, #6
 80048b4:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 80048b8:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 80048bc:	2d00      	cmp	r5, #0
 80048be:	d0e9      	beq.n	8004894 <HAL_PCD_IRQHandler+0x3d8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80048c0:	462b      	mov	r3, r5
 80048c2:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 80048c6:	e7e1      	b.n	800488c <HAL_PCD_IRQHandler+0x3d0>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80048c8:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 80048cc:	4620      	mov	r0, r4
 80048ce:	f7ff fdbf 	bl	8004450 <HAL_PCD_EP_Receive>
 80048d2:	e7a1      	b.n	8004818 <HAL_PCD_IRQHandler+0x35c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80048d4:	f7ff fddb 	bl	800448e <HAL_PCD_EP_Transmit>
 80048d8:	e5fe      	b.n	80044d8 <HAL_PCD_IRQHandler+0x1c>
 80048da:	bf00      	nop
 80048dc:	ffff8f0f 	.word	0xffff8f0f
 80048e0:	ffff8000 	.word	0xffff8000
 80048e4:	ffff8f8f 	.word	0xffff8f8f

080048e8 <HAL_PCD_EP_SetStall>:
{
 80048e8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80048ea:	6843      	ldr	r3, [r0, #4]
 80048ec:	f001 0507 	and.w	r5, r1, #7
 80048f0:	429d      	cmp	r5, r3
{
 80048f2:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80048f4:	d828      	bhi.n	8004948 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 80048f6:	060b      	lsls	r3, r1, #24
 80048f8:	d51d      	bpl.n	8004936 <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 80048fa:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048fc:	016b      	lsls	r3, r5, #5
 80048fe:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 8004902:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004904:	4401      	add	r1, r0
    ep->is_in = 1U;
 8004906:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 800490a:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800490c:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800490e:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8004910:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8004914:	429a      	cmp	r2, r3
 8004916:	d019      	beq.n	800494c <HAL_PCD_EP_SetStall+0x64>
 8004918:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800491c:	6820      	ldr	r0, [r4, #0]
 800491e:	f001 f895 	bl	8005a4c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004922:	b925      	cbnz	r5, 800492e <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004924:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8004928:	6820      	ldr	r0, [r4, #0]
 800492a:	f001 f8fb 	bl	8005b24 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 800492e:	2000      	movs	r0, #0
 8004930:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 8004934:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8004936:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8004938:	014b      	lsls	r3, r1, #5
 800493a:	f503 7194 	add.w	r1, r3, #296	; 0x128
    ep->is_in = 0U;
 800493e:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8004940:	4401      	add	r1, r0
    ep->is_in = 0U;
 8004942:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8004946:	e7e0      	b.n	800490a <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8004948:	2001      	movs	r0, #1
 800494a:	e7f3      	b.n	8004934 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 800494c:	2002      	movs	r0, #2
 800494e:	e7f1      	b.n	8004934 <HAL_PCD_EP_SetStall+0x4c>

08004950 <HAL_PCD_EP_ClrStall>:
{
 8004950:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004952:	6843      	ldr	r3, [r0, #4]
 8004954:	f001 020f 	and.w	r2, r1, #15
 8004958:	429a      	cmp	r2, r3
{
 800495a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800495c:	d827      	bhi.n	80049ae <HAL_PCD_EP_ClrStall+0x5e>
 800495e:	f001 0207 	and.w	r2, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 8004962:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004966:	ea4f 1342 	mov.w	r3, r2, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800496a:	bf14      	ite	ne
 800496c:	f103 0128 	addne.w	r1, r3, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004970:	f503 7194 	addeq.w	r1, r3, #296	; 0x128
 8004974:	4418      	add	r0, r3
  ep->is_stall = 0U;
 8004976:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 800497a:	bf15      	itete	ne
 800497c:	2301      	movne	r3, #1
    ep->is_in = 0U;
 800497e:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004980:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004982:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8004984:	bf14      	ite	ne
 8004986:	f880 3029 	strbne.w	r3, [r0, #41]	; 0x29
    ep->is_in = 0U;
 800498a:	f880 3129 	strbeq.w	r3, [r0, #297]	; 0x129
  ep->is_stall = 0U;
 800498e:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004990:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8004992:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8004996:	2b01      	cmp	r3, #1
 8004998:	d00b      	beq.n	80049b2 <HAL_PCD_EP_ClrStall+0x62>
 800499a:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800499c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800499e:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049a2:	f001 f86f 	bl	8005a84 <USB_EPClearStall>
  return HAL_OK;
 80049a6:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 80049a8:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
}
 80049ac:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80049ae:	2001      	movs	r0, #1
 80049b0:	e7fc      	b.n	80049ac <HAL_PCD_EP_ClrStall+0x5c>
  __HAL_LOCK(hpcd);
 80049b2:	2002      	movs	r0, #2
 80049b4:	e7fa      	b.n	80049ac <HAL_PCD_EP_ClrStall+0x5c>

080049b6 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80049b6:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049ba:	bf1b      	ittet	ne
 80049bc:	f001 0107 	andne.w	r1, r1, #7
 80049c0:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049c4:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049c8:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 80049ca:	bf08      	it	eq
 80049cc:	f500 7094 	addeq.w	r0, r0, #296	; 0x128
 80049d0:	b299      	uxth	r1, r3
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80049d2:	b91a      	cbnz	r2, 80049dc <HAL_PCDEx_PMAConfig+0x26>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80049d4:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80049d6:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80049d8:	2000      	movs	r0, #0
 80049da:	4770      	bx	lr
    ep->doublebuffer = 1U;
 80049dc:	2201      	movs	r2, #1
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80049de:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 80049e0:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80049e2:	8101      	strh	r1, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80049e4:	8143      	strh	r3, [r0, #10]
 80049e6:	e7f7      	b.n	80049d8 <HAL_PCDEx_PMAConfig+0x22>

080049e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049ec:	4605      	mov	r5, r0
 80049ee:	b908      	cbnz	r0, 80049f4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80049f0:	2001      	movs	r0, #1
 80049f2:	e03c      	b.n	8004a6e <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049f4:	6803      	ldr	r3, [r0, #0]
 80049f6:	07db      	lsls	r3, r3, #31
 80049f8:	d410      	bmi.n	8004a1c <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049fa:	682b      	ldr	r3, [r5, #0]
 80049fc:	079f      	lsls	r7, r3, #30
 80049fe:	d45d      	bmi.n	8004abc <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a00:	682b      	ldr	r3, [r5, #0]
 8004a02:	0719      	lsls	r1, r3, #28
 8004a04:	f100 8094 	bmi.w	8004b30 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a08:	682b      	ldr	r3, [r5, #0]
 8004a0a:	075a      	lsls	r2, r3, #29
 8004a0c:	f100 80be 	bmi.w	8004b8c <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a10:	69e8      	ldr	r0, [r5, #28]
 8004a12:	2800      	cmp	r0, #0
 8004a14:	f040 812c 	bne.w	8004c70 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8004a18:	2000      	movs	r0, #0
 8004a1a:	e028      	b.n	8004a6e <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a1c:	4c8f      	ldr	r4, [pc, #572]	; (8004c5c <HAL_RCC_OscConfig+0x274>)
 8004a1e:	6863      	ldr	r3, [r4, #4]
 8004a20:	f003 030c 	and.w	r3, r3, #12
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d007      	beq.n	8004a38 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a28:	6863      	ldr	r3, [r4, #4]
 8004a2a:	f003 030c 	and.w	r3, r3, #12
 8004a2e:	2b08      	cmp	r3, #8
 8004a30:	d109      	bne.n	8004a46 <HAL_RCC_OscConfig+0x5e>
 8004a32:	6863      	ldr	r3, [r4, #4]
 8004a34:	03de      	lsls	r6, r3, #15
 8004a36:	d506      	bpl.n	8004a46 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	039c      	lsls	r4, r3, #14
 8004a3c:	d5dd      	bpl.n	80049fa <HAL_RCC_OscConfig+0x12>
 8004a3e:	686b      	ldr	r3, [r5, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1da      	bne.n	80049fa <HAL_RCC_OscConfig+0x12>
 8004a44:	e7d4      	b.n	80049f0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a46:	686b      	ldr	r3, [r5, #4]
 8004a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a4c:	d112      	bne.n	8004a74 <HAL_RCC_OscConfig+0x8c>
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a54:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004a56:	f7fe fd85 	bl	8003564 <HAL_GetTick>
 8004a5a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	0398      	lsls	r0, r3, #14
 8004a60:	d4cb      	bmi.n	80049fa <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a62:	f7fe fd7f 	bl	8003564 <HAL_GetTick>
 8004a66:	1b80      	subs	r0, r0, r6
 8004a68:	2864      	cmp	r0, #100	; 0x64
 8004a6a:	d9f7      	bls.n	8004a5c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8004a6c:	2003      	movs	r0, #3
}
 8004a6e:	b002      	add	sp, #8
 8004a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a74:	b99b      	cbnz	r3, 8004a9e <HAL_RCC_OscConfig+0xb6>
 8004a76:	6823      	ldr	r3, [r4, #0]
 8004a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a7c:	6023      	str	r3, [r4, #0]
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a84:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004a86:	f7fe fd6d 	bl	8003564 <HAL_GetTick>
 8004a8a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	0399      	lsls	r1, r3, #14
 8004a90:	d5b3      	bpl.n	80049fa <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a92:	f7fe fd67 	bl	8003564 <HAL_GetTick>
 8004a96:	1b80      	subs	r0, r0, r6
 8004a98:	2864      	cmp	r0, #100	; 0x64
 8004a9a:	d9f7      	bls.n	8004a8c <HAL_RCC_OscConfig+0xa4>
 8004a9c:	e7e6      	b.n	8004a6c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	d103      	bne.n	8004aae <HAL_RCC_OscConfig+0xc6>
 8004aa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004aaa:	6023      	str	r3, [r4, #0]
 8004aac:	e7cf      	b.n	8004a4e <HAL_RCC_OscConfig+0x66>
 8004aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab2:	6023      	str	r3, [r4, #0]
 8004ab4:	6823      	ldr	r3, [r4, #0]
 8004ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aba:	e7cb      	b.n	8004a54 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004abc:	4c67      	ldr	r4, [pc, #412]	; (8004c5c <HAL_RCC_OscConfig+0x274>)
 8004abe:	6863      	ldr	r3, [r4, #4]
 8004ac0:	f013 0f0c 	tst.w	r3, #12
 8004ac4:	d007      	beq.n	8004ad6 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ac6:	6863      	ldr	r3, [r4, #4]
 8004ac8:	f003 030c 	and.w	r3, r3, #12
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d110      	bne.n	8004af2 <HAL_RCC_OscConfig+0x10a>
 8004ad0:	6863      	ldr	r3, [r4, #4]
 8004ad2:	03da      	lsls	r2, r3, #15
 8004ad4:	d40d      	bmi.n	8004af2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	079b      	lsls	r3, r3, #30
 8004ada:	d502      	bpl.n	8004ae2 <HAL_RCC_OscConfig+0xfa>
 8004adc:	692b      	ldr	r3, [r5, #16]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d186      	bne.n	80049f0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	696a      	ldr	r2, [r5, #20]
 8004ae6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004aea:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004aee:	6023      	str	r3, [r4, #0]
 8004af0:	e786      	b.n	8004a00 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004af2:	692a      	ldr	r2, [r5, #16]
 8004af4:	4b5a      	ldr	r3, [pc, #360]	; (8004c60 <HAL_RCC_OscConfig+0x278>)
 8004af6:	b16a      	cbz	r2, 8004b14 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8004af8:	2201      	movs	r2, #1
 8004afa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004afc:	f7fe fd32 	bl	8003564 <HAL_GetTick>
 8004b00:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	079f      	lsls	r7, r3, #30
 8004b06:	d4ec      	bmi.n	8004ae2 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b08:	f7fe fd2c 	bl	8003564 <HAL_GetTick>
 8004b0c:	1b80      	subs	r0, r0, r6
 8004b0e:	2802      	cmp	r0, #2
 8004b10:	d9f7      	bls.n	8004b02 <HAL_RCC_OscConfig+0x11a>
 8004b12:	e7ab      	b.n	8004a6c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8004b14:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004b16:	f7fe fd25 	bl	8003564 <HAL_GetTick>
 8004b1a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	0798      	lsls	r0, r3, #30
 8004b20:	f57f af6e 	bpl.w	8004a00 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b24:	f7fe fd1e 	bl	8003564 <HAL_GetTick>
 8004b28:	1b80      	subs	r0, r0, r6
 8004b2a:	2802      	cmp	r0, #2
 8004b2c:	d9f6      	bls.n	8004b1c <HAL_RCC_OscConfig+0x134>
 8004b2e:	e79d      	b.n	8004a6c <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b30:	69aa      	ldr	r2, [r5, #24]
 8004b32:	4c4a      	ldr	r4, [pc, #296]	; (8004c5c <HAL_RCC_OscConfig+0x274>)
 8004b34:	4b4b      	ldr	r3, [pc, #300]	; (8004c64 <HAL_RCC_OscConfig+0x27c>)
 8004b36:	b1da      	cbz	r2, 8004b70 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8004b38:	2201      	movs	r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004b3c:	f7fe fd12 	bl	8003564 <HAL_GetTick>
 8004b40:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b44:	079b      	lsls	r3, r3, #30
 8004b46:	d50d      	bpl.n	8004b64 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b48:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004b4c:	4b46      	ldr	r3, [pc, #280]	; (8004c68 <HAL_RCC_OscConfig+0x280>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b54:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8004b56:	bf00      	nop
  }
  while (Delay --);
 8004b58:	9b01      	ldr	r3, [sp, #4]
 8004b5a:	1e5a      	subs	r2, r3, #1
 8004b5c:	9201      	str	r2, [sp, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1f9      	bne.n	8004b56 <HAL_RCC_OscConfig+0x16e>
 8004b62:	e751      	b.n	8004a08 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b64:	f7fe fcfe 	bl	8003564 <HAL_GetTick>
 8004b68:	1b80      	subs	r0, r0, r6
 8004b6a:	2802      	cmp	r0, #2
 8004b6c:	d9e9      	bls.n	8004b42 <HAL_RCC_OscConfig+0x15a>
 8004b6e:	e77d      	b.n	8004a6c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8004b70:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004b72:	f7fe fcf7 	bl	8003564 <HAL_GetTick>
 8004b76:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b7a:	079f      	lsls	r7, r3, #30
 8004b7c:	f57f af44 	bpl.w	8004a08 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b80:	f7fe fcf0 	bl	8003564 <HAL_GetTick>
 8004b84:	1b80      	subs	r0, r0, r6
 8004b86:	2802      	cmp	r0, #2
 8004b88:	d9f6      	bls.n	8004b78 <HAL_RCC_OscConfig+0x190>
 8004b8a:	e76f      	b.n	8004a6c <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b8c:	4c33      	ldr	r4, [pc, #204]	; (8004c5c <HAL_RCC_OscConfig+0x274>)
 8004b8e:	69e3      	ldr	r3, [r4, #28]
 8004b90:	00d8      	lsls	r0, r3, #3
 8004b92:	d424      	bmi.n	8004bde <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8004b94:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b96:	69e3      	ldr	r3, [r4, #28]
 8004b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9c:	61e3      	str	r3, [r4, #28]
 8004b9e:	69e3      	ldr	r3, [r4, #28]
 8004ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba8:	4e30      	ldr	r6, [pc, #192]	; (8004c6c <HAL_RCC_OscConfig+0x284>)
 8004baa:	6833      	ldr	r3, [r6, #0]
 8004bac:	05d9      	lsls	r1, r3, #23
 8004bae:	d518      	bpl.n	8004be2 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bb0:	68eb      	ldr	r3, [r5, #12]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d126      	bne.n	8004c04 <HAL_RCC_OscConfig+0x21c>
 8004bb6:	6a23      	ldr	r3, [r4, #32]
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004bbe:	f7fe fcd1 	bl	8003564 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004bc6:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc8:	6a23      	ldr	r3, [r4, #32]
 8004bca:	079b      	lsls	r3, r3, #30
 8004bcc:	d53f      	bpl.n	8004c4e <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8004bce:	2f00      	cmp	r7, #0
 8004bd0:	f43f af1e 	beq.w	8004a10 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bd4:	69e3      	ldr	r3, [r4, #28]
 8004bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bda:	61e3      	str	r3, [r4, #28]
 8004bdc:	e718      	b.n	8004a10 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8004bde:	2700      	movs	r7, #0
 8004be0:	e7e2      	b.n	8004ba8 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004be2:	6833      	ldr	r3, [r6, #0]
 8004be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004bea:	f7fe fcbb 	bl	8003564 <HAL_GetTick>
 8004bee:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf0:	6833      	ldr	r3, [r6, #0]
 8004bf2:	05da      	lsls	r2, r3, #23
 8004bf4:	d4dc      	bmi.n	8004bb0 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf6:	f7fe fcb5 	bl	8003564 <HAL_GetTick>
 8004bfa:	eba0 0008 	sub.w	r0, r0, r8
 8004bfe:	2864      	cmp	r0, #100	; 0x64
 8004c00:	d9f6      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x208>
 8004c02:	e733      	b.n	8004a6c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c04:	b9ab      	cbnz	r3, 8004c32 <HAL_RCC_OscConfig+0x24a>
 8004c06:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c08:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c0c:	f023 0301 	bic.w	r3, r3, #1
 8004c10:	6223      	str	r3, [r4, #32]
 8004c12:	6a23      	ldr	r3, [r4, #32]
 8004c14:	f023 0304 	bic.w	r3, r3, #4
 8004c18:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004c1a:	f7fe fca3 	bl	8003564 <HAL_GetTick>
 8004c1e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c20:	6a23      	ldr	r3, [r4, #32]
 8004c22:	0798      	lsls	r0, r3, #30
 8004c24:	d5d3      	bpl.n	8004bce <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c26:	f7fe fc9d 	bl	8003564 <HAL_GetTick>
 8004c2a:	1b80      	subs	r0, r0, r6
 8004c2c:	4540      	cmp	r0, r8
 8004c2e:	d9f7      	bls.n	8004c20 <HAL_RCC_OscConfig+0x238>
 8004c30:	e71c      	b.n	8004a6c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c32:	2b05      	cmp	r3, #5
 8004c34:	6a23      	ldr	r3, [r4, #32]
 8004c36:	d103      	bne.n	8004c40 <HAL_RCC_OscConfig+0x258>
 8004c38:	f043 0304 	orr.w	r3, r3, #4
 8004c3c:	6223      	str	r3, [r4, #32]
 8004c3e:	e7ba      	b.n	8004bb6 <HAL_RCC_OscConfig+0x1ce>
 8004c40:	f023 0301 	bic.w	r3, r3, #1
 8004c44:	6223      	str	r3, [r4, #32]
 8004c46:	6a23      	ldr	r3, [r4, #32]
 8004c48:	f023 0304 	bic.w	r3, r3, #4
 8004c4c:	e7b6      	b.n	8004bbc <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c4e:	f7fe fc89 	bl	8003564 <HAL_GetTick>
 8004c52:	eba0 0008 	sub.w	r0, r0, r8
 8004c56:	42b0      	cmp	r0, r6
 8004c58:	d9b6      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x1e0>
 8004c5a:	e707      	b.n	8004a6c <HAL_RCC_OscConfig+0x84>
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	42420000 	.word	0x42420000
 8004c64:	42420480 	.word	0x42420480
 8004c68:	20000038 	.word	0x20000038
 8004c6c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c70:	4b2a      	ldr	r3, [pc, #168]	; (8004d1c <HAL_RCC_OscConfig+0x334>)
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	461c      	mov	r4, r3
 8004c76:	f002 020c 	and.w	r2, r2, #12
 8004c7a:	2a08      	cmp	r2, #8
 8004c7c:	d03d      	beq.n	8004cfa <HAL_RCC_OscConfig+0x312>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	4e27      	ldr	r6, [pc, #156]	; (8004d20 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c82:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004c84:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c86:	d12b      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8004c88:	f7fe fc6c 	bl	8003564 <HAL_GetTick>
 8004c8c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	0199      	lsls	r1, r3, #6
 8004c92:	d41f      	bmi.n	8004cd4 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c94:	6a2b      	ldr	r3, [r5, #32]
 8004c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c9a:	d105      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c9c:	6862      	ldr	r2, [r4, #4]
 8004c9e:	68a9      	ldr	r1, [r5, #8]
 8004ca0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ca8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8004caa:	6862      	ldr	r2, [r4, #4]
 8004cac:	430b      	orrs	r3, r1
 8004cae:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004cba:	f7fe fc53 	bl	8003564 <HAL_GetTick>
 8004cbe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	019a      	lsls	r2, r3, #6
 8004cc4:	f53f aea8 	bmi.w	8004a18 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc8:	f7fe fc4c 	bl	8003564 <HAL_GetTick>
 8004ccc:	1b40      	subs	r0, r0, r5
 8004cce:	2802      	cmp	r0, #2
 8004cd0:	d9f6      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x2d8>
 8004cd2:	e6cb      	b.n	8004a6c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd4:	f7fe fc46 	bl	8003564 <HAL_GetTick>
 8004cd8:	1bc0      	subs	r0, r0, r7
 8004cda:	2802      	cmp	r0, #2
 8004cdc:	d9d7      	bls.n	8004c8e <HAL_RCC_OscConfig+0x2a6>
 8004cde:	e6c5      	b.n	8004a6c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8004ce0:	f7fe fc40 	bl	8003564 <HAL_GetTick>
 8004ce4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	019b      	lsls	r3, r3, #6
 8004cea:	f57f ae95 	bpl.w	8004a18 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cee:	f7fe fc39 	bl	8003564 <HAL_GetTick>
 8004cf2:	1b40      	subs	r0, r0, r5
 8004cf4:	2802      	cmp	r0, #2
 8004cf6:	d9f6      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x2fe>
 8004cf8:	e6b8      	b.n	8004a6c <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cfa:	2801      	cmp	r0, #1
 8004cfc:	f43f aeb7 	beq.w	8004a6e <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8004d00:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d02:	6a2b      	ldr	r3, [r5, #32]
 8004d04:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	f47f ae71 	bne.w	80049f0 <HAL_RCC_OscConfig+0x8>
 8004d0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d10:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8004d14:	1ac0      	subs	r0, r0, r3
 8004d16:	bf18      	it	ne
 8004d18:	2001      	movne	r0, #1
 8004d1a:	e6a8      	b.n	8004a6e <HAL_RCC_OscConfig+0x86>
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	42420060 	.word	0x42420060

08004d24 <HAL_RCC_GetSysClockFreq>:
{
 8004d24:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004d26:	4b18      	ldr	r3, [pc, #96]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8004d28:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004d2a:	ac02      	add	r4, sp, #8
 8004d2c:	f103 0510 	add.w	r5, r3, #16
 8004d30:	4622      	mov	r2, r4
 8004d32:	6818      	ldr	r0, [r3, #0]
 8004d34:	6859      	ldr	r1, [r3, #4]
 8004d36:	3308      	adds	r3, #8
 8004d38:	c203      	stmia	r2!, {r0, r1}
 8004d3a:	42ab      	cmp	r3, r5
 8004d3c:	4614      	mov	r4, r2
 8004d3e:	d1f7      	bne.n	8004d30 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004d40:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8004d44:	4911      	ldr	r1, [pc, #68]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004d46:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8004d4a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004d4c:	f003 020c 	and.w	r2, r3, #12
 8004d50:	2a08      	cmp	r2, #8
 8004d52:	d117      	bne.n	8004d84 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d54:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8004d58:	a806      	add	r0, sp, #24
 8004d5a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d5c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d5e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d62:	d50c      	bpl.n	8004d7e <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d64:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d66:	480a      	ldr	r0, [pc, #40]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d68:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d6c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d6e:	aa06      	add	r2, sp, #24
 8004d70:	4413      	add	r3, r2
 8004d72:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d76:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004d7a:	b007      	add	sp, #28
 8004d7c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d7e:	4805      	ldr	r0, [pc, #20]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x70>)
 8004d80:	4350      	muls	r0, r2
 8004d82:	e7fa      	b.n	8004d7a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8004d84:	4802      	ldr	r0, [pc, #8]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8004d86:	e7f8      	b.n	8004d7a <HAL_RCC_GetSysClockFreq+0x56>
 8004d88:	0800970c 	.word	0x0800970c
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	007a1200 	.word	0x007a1200
 8004d94:	003d0900 	.word	0x003d0900

08004d98 <HAL_RCC_ClockConfig>:
{
 8004d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d9c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8004d9e:	4604      	mov	r4, r0
 8004da0:	b910      	cbnz	r0, 8004da8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004da2:	2001      	movs	r0, #1
}
 8004da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004da8:	4a44      	ldr	r2, [pc, #272]	; (8004ebc <HAL_RCC_ClockConfig+0x124>)
 8004daa:	6813      	ldr	r3, [r2, #0]
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	428b      	cmp	r3, r1
 8004db2:	d328      	bcc.n	8004e06 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004db4:	6821      	ldr	r1, [r4, #0]
 8004db6:	078e      	lsls	r6, r1, #30
 8004db8:	d430      	bmi.n	8004e1c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dba:	07ca      	lsls	r2, r1, #31
 8004dbc:	d443      	bmi.n	8004e46 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dbe:	4a3f      	ldr	r2, [pc, #252]	; (8004ebc <HAL_RCC_ClockConfig+0x124>)
 8004dc0:	6813      	ldr	r3, [r2, #0]
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	42ab      	cmp	r3, r5
 8004dc8:	d865      	bhi.n	8004e96 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dca:	6822      	ldr	r2, [r4, #0]
 8004dcc:	4d3c      	ldr	r5, [pc, #240]	; (8004ec0 <HAL_RCC_ClockConfig+0x128>)
 8004dce:	f012 0f04 	tst.w	r2, #4
 8004dd2:	d16c      	bne.n	8004eae <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd4:	0713      	lsls	r3, r2, #28
 8004dd6:	d506      	bpl.n	8004de6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004dd8:	686b      	ldr	r3, [r5, #4]
 8004dda:	6922      	ldr	r2, [r4, #16]
 8004ddc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004de0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004de4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004de6:	f7ff ff9d 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 8004dea:	686b      	ldr	r3, [r5, #4]
 8004dec:	4a35      	ldr	r2, [pc, #212]	; (8004ec4 <HAL_RCC_ClockConfig+0x12c>)
 8004dee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004df2:	5cd3      	ldrb	r3, [r2, r3]
 8004df4:	40d8      	lsrs	r0, r3
 8004df6:	4b34      	ldr	r3, [pc, #208]	; (8004ec8 <HAL_RCC_ClockConfig+0x130>)
 8004df8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004dfa:	4b34      	ldr	r3, [pc, #208]	; (8004ecc <HAL_RCC_ClockConfig+0x134>)
 8004dfc:	6818      	ldr	r0, [r3, #0]
 8004dfe:	f7fe fb6f 	bl	80034e0 <HAL_InitTick>
  return HAL_OK;
 8004e02:	2000      	movs	r0, #0
 8004e04:	e7ce      	b.n	8004da4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e06:	6813      	ldr	r3, [r2, #0]
 8004e08:	f023 0307 	bic.w	r3, r3, #7
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e10:	6813      	ldr	r3, [r2, #0]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	428b      	cmp	r3, r1
 8004e18:	d1c3      	bne.n	8004da2 <HAL_RCC_ClockConfig+0xa>
 8004e1a:	e7cb      	b.n	8004db4 <HAL_RCC_ClockConfig+0x1c>
 8004e1c:	4b28      	ldr	r3, [pc, #160]	; (8004ec0 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e1e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e22:	bf1e      	ittt	ne
 8004e24:	685a      	ldrne	r2, [r3, #4]
 8004e26:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8004e2a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e2c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e2e:	bf42      	ittt	mi
 8004e30:	685a      	ldrmi	r2, [r3, #4]
 8004e32:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8004e36:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	68a0      	ldr	r0, [r4, #8]
 8004e3c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004e40:	4302      	orrs	r2, r0
 8004e42:	605a      	str	r2, [r3, #4]
 8004e44:	e7b9      	b.n	8004dba <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e46:	6862      	ldr	r2, [r4, #4]
 8004e48:	4e1d      	ldr	r6, [pc, #116]	; (8004ec0 <HAL_RCC_ClockConfig+0x128>)
 8004e4a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e4c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e4e:	d11a      	bne.n	8004e86 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e50:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e54:	d0a5      	beq.n	8004da2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e56:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e58:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e5c:	f023 0303 	bic.w	r3, r3, #3
 8004e60:	4313      	orrs	r3, r2
 8004e62:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004e64:	f7fe fb7e 	bl	8003564 <HAL_GetTick>
 8004e68:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e6a:	6873      	ldr	r3, [r6, #4]
 8004e6c:	6862      	ldr	r2, [r4, #4]
 8004e6e:	f003 030c 	and.w	r3, r3, #12
 8004e72:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004e76:	d0a2      	beq.n	8004dbe <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e78:	f7fe fb74 	bl	8003564 <HAL_GetTick>
 8004e7c:	1bc0      	subs	r0, r0, r7
 8004e7e:	4540      	cmp	r0, r8
 8004e80:	d9f3      	bls.n	8004e6a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8004e82:	2003      	movs	r0, #3
 8004e84:	e78e      	b.n	8004da4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e86:	2a02      	cmp	r2, #2
 8004e88:	d102      	bne.n	8004e90 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e8a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004e8e:	e7e1      	b.n	8004e54 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e90:	f013 0f02 	tst.w	r3, #2
 8004e94:	e7de      	b.n	8004e54 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e96:	6813      	ldr	r3, [r2, #0]
 8004e98:	f023 0307 	bic.w	r3, r3, #7
 8004e9c:	432b      	orrs	r3, r5
 8004e9e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea0:	6813      	ldr	r3, [r2, #0]
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	42ab      	cmp	r3, r5
 8004ea8:	f47f af7b 	bne.w	8004da2 <HAL_RCC_ClockConfig+0xa>
 8004eac:	e78d      	b.n	8004dca <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eae:	686b      	ldr	r3, [r5, #4]
 8004eb0:	68e1      	ldr	r1, [r4, #12]
 8004eb2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004eb6:	430b      	orrs	r3, r1
 8004eb8:	606b      	str	r3, [r5, #4]
 8004eba:	e78b      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x3c>
 8004ebc:	40022000 	.word	0x40022000
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	0800a386 	.word	0x0800a386
 8004ec8:	20000038 	.word	0x20000038
 8004ecc:	20000040 	.word	0x20000040

08004ed0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ed0:	4b04      	ldr	r3, [pc, #16]	; (8004ee4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004ed2:	4a05      	ldr	r2, [pc, #20]	; (8004ee8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004eda:	5cd3      	ldrb	r3, [r2, r3]
 8004edc:	4a03      	ldr	r2, [pc, #12]	; (8004eec <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004ede:	6810      	ldr	r0, [r2, #0]
}
 8004ee0:	40d8      	lsrs	r0, r3
 8004ee2:	4770      	bx	lr
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	0800a396 	.word	0x0800a396
 8004eec:	20000038 	.word	0x20000038

08004ef0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ef0:	4b04      	ldr	r3, [pc, #16]	; (8004f04 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004ef2:	4a05      	ldr	r2, [pc, #20]	; (8004f08 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004efa:	5cd3      	ldrb	r3, [r2, r3]
 8004efc:	4a03      	ldr	r2, [pc, #12]	; (8004f0c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004efe:	6810      	ldr	r0, [r2, #0]
}
 8004f00:	40d8      	lsrs	r0, r3
 8004f02:	4770      	bx	lr
 8004f04:	40021000 	.word	0x40021000
 8004f08:	0800a396 	.word	0x0800a396
 8004f0c:	20000038 	.word	0x20000038

08004f10 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f10:	6803      	ldr	r3, [r0, #0]
{
 8004f12:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f16:	07d9      	lsls	r1, r3, #31
{
 8004f18:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f1a:	d520      	bpl.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f1c:	4c35      	ldr	r4, [pc, #212]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004f1e:	69e3      	ldr	r3, [r4, #28]
 8004f20:	00da      	lsls	r2, r3, #3
 8004f22:	d432      	bmi.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8004f24:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f26:	69e3      	ldr	r3, [r4, #28]
 8004f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f2c:	61e3      	str	r3, [r4, #28]
 8004f2e:	69e3      	ldr	r3, [r4, #28]
 8004f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f38:	4e2f      	ldr	r6, [pc, #188]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004f3a:	6833      	ldr	r3, [r6, #0]
 8004f3c:	05db      	lsls	r3, r3, #23
 8004f3e:	d526      	bpl.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f40:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f42:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004f46:	d136      	bne.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f48:	6a23      	ldr	r3, [r4, #32]
 8004f4a:	686a      	ldr	r2, [r5, #4]
 8004f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f50:	4313      	orrs	r3, r2
 8004f52:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f54:	b11f      	cbz	r7, 8004f5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f56:	69e3      	ldr	r3, [r4, #28]
 8004f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f5c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f5e:	6828      	ldr	r0, [r5, #0]
 8004f60:	0783      	lsls	r3, r0, #30
 8004f62:	d506      	bpl.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f64:	4a23      	ldr	r2, [pc, #140]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004f66:	68a9      	ldr	r1, [r5, #8]
 8004f68:	6853      	ldr	r3, [r2, #4]
 8004f6a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f72:	f010 0010 	ands.w	r0, r0, #16
 8004f76:	d01b      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f78:	4a1e      	ldr	r2, [pc, #120]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004f7a:	68e9      	ldr	r1, [r5, #12]
 8004f7c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004f7e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f80:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004f84:	430b      	orrs	r3, r1
 8004f86:	6053      	str	r3, [r2, #4]
 8004f88:	e012      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8004f8a:	2700      	movs	r7, #0
 8004f8c:	e7d4      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f8e:	6833      	ldr	r3, [r6, #0]
 8004f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f94:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004f96:	f7fe fae5 	bl	8003564 <HAL_GetTick>
 8004f9a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f9c:	6833      	ldr	r3, [r6, #0]
 8004f9e:	05d8      	lsls	r0, r3, #23
 8004fa0:	d4ce      	bmi.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fa2:	f7fe fadf 	bl	8003564 <HAL_GetTick>
 8004fa6:	eba0 0008 	sub.w	r0, r0, r8
 8004faa:	2864      	cmp	r0, #100	; 0x64
 8004fac:	d9f6      	bls.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8004fae:	2003      	movs	r0, #3
}
 8004fb0:	b002      	add	sp, #8
 8004fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fb6:	686a      	ldr	r2, [r5, #4]
 8004fb8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d0c3      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fc0:	2001      	movs	r0, #1
 8004fc2:	4a0e      	ldr	r2, [pc, #56]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fc4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fc6:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fc8:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fce:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8004fd0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004fd2:	07d9      	lsls	r1, r3, #31
 8004fd4:	d5b8      	bpl.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8004fd6:	f7fe fac5 	bl	8003564 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fda:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004fde:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe0:	6a23      	ldr	r3, [r4, #32]
 8004fe2:	079a      	lsls	r2, r3, #30
 8004fe4:	d4b0      	bmi.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe6:	f7fe fabd 	bl	8003564 <HAL_GetTick>
 8004fea:	1b80      	subs	r0, r0, r6
 8004fec:	4540      	cmp	r0, r8
 8004fee:	d9f7      	bls.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8004ff0:	e7dd      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004ff2:	bf00      	nop
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	40007000 	.word	0x40007000
 8004ffc:	42420440 	.word	0x42420440

08005000 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005000:	6803      	ldr	r3, [r0, #0]
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
}
 8005002:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	f042 0201 	orr.w	r2, r2, #1
 800500a:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005012:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8005014:	bf1e      	ittt	ne
 8005016:	681a      	ldrne	r2, [r3, #0]
 8005018:	f042 0201 	orrne.w	r2, r2, #1
 800501c:	601a      	strne	r2, [r3, #0]
}
 800501e:	4770      	bx	lr

08005020 <HAL_TIM_PeriodElapsedCallback>:
 8005020:	4770      	bx	lr

08005022 <HAL_TIM_OC_DelayElapsedCallback>:
 8005022:	4770      	bx	lr

08005024 <HAL_TIM_IC_CaptureCallback>:
 8005024:	4770      	bx	lr

08005026 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005026:	4770      	bx	lr

08005028 <HAL_TIM_TriggerCallback>:
 8005028:	4770      	bx	lr

0800502a <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800502a:	6803      	ldr	r3, [r0, #0]
{
 800502c:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800502e:	691a      	ldr	r2, [r3, #16]
{
 8005030:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005032:	0791      	lsls	r1, r2, #30
 8005034:	d50e      	bpl.n	8005054 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005036:	68da      	ldr	r2, [r3, #12]
 8005038:	0792      	lsls	r2, r2, #30
 800503a:	d50b      	bpl.n	8005054 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800503c:	f06f 0202 	mvn.w	r2, #2
 8005040:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005042:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005044:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005046:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005048:	079b      	lsls	r3, r3, #30
 800504a:	d077      	beq.n	800513c <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800504c:	f7ff ffea 	bl	8005024 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005050:	2300      	movs	r3, #0
 8005052:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	691a      	ldr	r2, [r3, #16]
 8005058:	0750      	lsls	r0, r2, #29
 800505a:	d510      	bpl.n	800507e <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	0751      	lsls	r1, r2, #29
 8005060:	d50d      	bpl.n	800507e <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005062:	f06f 0204 	mvn.w	r2, #4
 8005066:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005068:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800506a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800506c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800506e:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005072:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005074:	d068      	beq.n	8005148 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8005076:	f7ff ffd5 	bl	8005024 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507a:	2300      	movs	r3, #0
 800507c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	691a      	ldr	r2, [r3, #16]
 8005082:	0712      	lsls	r2, r2, #28
 8005084:	d50f      	bpl.n	80050a6 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	0710      	lsls	r0, r2, #28
 800508a:	d50c      	bpl.n	80050a6 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800508c:	f06f 0208 	mvn.w	r2, #8
 8005090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005092:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005094:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005096:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005098:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800509a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800509c:	d05a      	beq.n	8005154 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800509e:	f7ff ffc1 	bl	8005024 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a2:	2300      	movs	r3, #0
 80050a4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	691a      	ldr	r2, [r3, #16]
 80050aa:	06d2      	lsls	r2, r2, #27
 80050ac:	d510      	bpl.n	80050d0 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050ae:	68da      	ldr	r2, [r3, #12]
 80050b0:	06d0      	lsls	r0, r2, #27
 80050b2:	d50d      	bpl.n	80050d0 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050b4:	f06f 0210 	mvn.w	r2, #16
 80050b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050ba:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050bc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050be:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050c0:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050c4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050c6:	d04b      	beq.n	8005160 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80050c8:	f7ff ffac 	bl	8005024 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050cc:	2300      	movs	r3, #0
 80050ce:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	691a      	ldr	r2, [r3, #16]
 80050d4:	07d1      	lsls	r1, r2, #31
 80050d6:	d508      	bpl.n	80050ea <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	07d2      	lsls	r2, r2, #31
 80050dc:	d505      	bpl.n	80050ea <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050de:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050e4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80050e6:	f7ff ff9b 	bl	8005020 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	691a      	ldr	r2, [r3, #16]
 80050ee:	0610      	lsls	r0, r2, #24
 80050f0:	d508      	bpl.n	8005104 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050f2:	68da      	ldr	r2, [r3, #12]
 80050f4:	0611      	lsls	r1, r2, #24
 80050f6:	d505      	bpl.n	8005104 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050fc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050fe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005100:	f000 f945 	bl	800538e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	0652      	lsls	r2, r2, #25
 800510a:	d508      	bpl.n	800511e <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	0650      	lsls	r0, r2, #25
 8005110:	d505      	bpl.n	800511e <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005112:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005116:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005118:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800511a:	f7ff ff85 	bl	8005028 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	691a      	ldr	r2, [r3, #16]
 8005122:	0691      	lsls	r1, r2, #26
 8005124:	d522      	bpl.n	800516c <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005126:	68da      	ldr	r2, [r3, #12]
 8005128:	0692      	lsls	r2, r2, #26
 800512a:	d51f      	bpl.n	800516c <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800512c:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005130:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005136:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005138:	f000 b928 	b.w	800538c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800513c:	f7ff ff71 	bl	8005022 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005140:	4620      	mov	r0, r4
 8005142:	f7ff ff70 	bl	8005026 <HAL_TIM_PWM_PulseFinishedCallback>
 8005146:	e783      	b.n	8005050 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005148:	f7ff ff6b 	bl	8005022 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800514c:	4620      	mov	r0, r4
 800514e:	f7ff ff6a 	bl	8005026 <HAL_TIM_PWM_PulseFinishedCallback>
 8005152:	e792      	b.n	800507a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005154:	f7ff ff65 	bl	8005022 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005158:	4620      	mov	r0, r4
 800515a:	f7ff ff64 	bl	8005026 <HAL_TIM_PWM_PulseFinishedCallback>
 800515e:	e7a0      	b.n	80050a2 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005160:	f7ff ff5f 	bl	8005022 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005164:	4620      	mov	r0, r4
 8005166:	f7ff ff5e 	bl	8005026 <HAL_TIM_PWM_PulseFinishedCallback>
 800516a:	e7af      	b.n	80050cc <HAL_TIM_IRQHandler+0xa2>
}
 800516c:	bd10      	pop	{r4, pc}
	...

08005170 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005170:	4a1a      	ldr	r2, [pc, #104]	; (80051dc <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8005172:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005174:	4290      	cmp	r0, r2
 8005176:	d00a      	beq.n	800518e <TIM_Base_SetConfig+0x1e>
 8005178:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800517c:	d007      	beq.n	800518e <TIM_Base_SetConfig+0x1e>
 800517e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005182:	4290      	cmp	r0, r2
 8005184:	d003      	beq.n	800518e <TIM_Base_SetConfig+0x1e>
 8005186:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800518a:	4290      	cmp	r0, r2
 800518c:	d115      	bne.n	80051ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800518e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005194:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005196:	4a11      	ldr	r2, [pc, #68]	; (80051dc <TIM_Base_SetConfig+0x6c>)
 8005198:	4290      	cmp	r0, r2
 800519a:	d00a      	beq.n	80051b2 <TIM_Base_SetConfig+0x42>
 800519c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80051a0:	d007      	beq.n	80051b2 <TIM_Base_SetConfig+0x42>
 80051a2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80051a6:	4290      	cmp	r0, r2
 80051a8:	d003      	beq.n	80051b2 <TIM_Base_SetConfig+0x42>
 80051aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051ae:	4290      	cmp	r0, r2
 80051b0:	d103      	bne.n	80051ba <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051b2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80051b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051b8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051ba:	694a      	ldr	r2, [r1, #20]
 80051bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051c0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80051c2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051c4:	688b      	ldr	r3, [r1, #8]
 80051c6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051c8:	680b      	ldr	r3, [r1, #0]
 80051ca:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051cc:	4b03      	ldr	r3, [pc, #12]	; (80051dc <TIM_Base_SetConfig+0x6c>)
 80051ce:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051d0:	bf04      	itt	eq
 80051d2:	690b      	ldreq	r3, [r1, #16]
 80051d4:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051d6:	2301      	movs	r3, #1
 80051d8:	6143      	str	r3, [r0, #20]
}
 80051da:	4770      	bx	lr
 80051dc:	40012c00 	.word	0x40012c00

080051e0 <HAL_TIM_Base_Init>:
{
 80051e0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80051e2:	4604      	mov	r4, r0
 80051e4:	b1a0      	cbz	r0, 8005210 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80051e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80051ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80051ee:	b91b      	cbnz	r3, 80051f8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80051f0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80051f4:	f7fc ff40 	bl	8002078 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80051f8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051fa:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80051fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005200:	1d21      	adds	r1, r4, #4
 8005202:	f7ff ffb5 	bl	8005170 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005206:	2301      	movs	r3, #1
  return HAL_OK;
 8005208:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800520a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800520e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005210:	2001      	movs	r0, #1
 8005212:	e7fc      	b.n	800520e <HAL_TIM_Base_Init+0x2e>

08005214 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005214:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005216:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005218:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800521a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800521e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005222:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005224:	6083      	str	r3, [r0, #8]
}
 8005226:	bd10      	pop	{r4, pc}

08005228 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005228:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800522c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800522e:	2b01      	cmp	r3, #1
{
 8005230:	4604      	mov	r4, r0
 8005232:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005236:	d019      	beq.n	800526c <HAL_TIM_ConfigClockSource+0x44>
 8005238:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800523a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800523e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8005240:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005244:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800524a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800524e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8005250:	680b      	ldr	r3, [r1, #0]
 8005252:	2b40      	cmp	r3, #64	; 0x40
 8005254:	d065      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0xfa>
 8005256:	d815      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x5c>
 8005258:	2b10      	cmp	r3, #16
 800525a:	d00c      	beq.n	8005276 <HAL_TIM_ConfigClockSource+0x4e>
 800525c:	d807      	bhi.n	800526e <HAL_TIM_ConfigClockSource+0x46>
 800525e:	b153      	cbz	r3, 8005276 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8005260:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005262:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005264:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005268:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800526c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800526e:	2b20      	cmp	r3, #32
 8005270:	d001      	beq.n	8005276 <HAL_TIM_ConfigClockSource+0x4e>
 8005272:	2b30      	cmp	r3, #48	; 0x30
 8005274:	d1f4      	bne.n	8005260 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8005276:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005278:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800527c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005280:	4313      	orrs	r3, r2
 8005282:	e01a      	b.n	80052ba <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8005284:	2b60      	cmp	r3, #96	; 0x60
 8005286:	d034      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0xca>
 8005288:	d819      	bhi.n	80052be <HAL_TIM_ConfigClockSource+0x96>
 800528a:	2b50      	cmp	r3, #80	; 0x50
 800528c:	d1e8      	bne.n	8005260 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800528e:	684a      	ldr	r2, [r1, #4]
 8005290:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8005292:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005294:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005296:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800529a:	f025 0501 	bic.w	r5, r5, #1
 800529e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052a0:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80052a2:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052a8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80052ac:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80052ae:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80052b0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80052b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052b6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80052ba:	6083      	str	r3, [r0, #8]
 80052bc:	e7d0      	b.n	8005260 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80052be:	2b70      	cmp	r3, #112	; 0x70
 80052c0:	d00c      	beq.n	80052dc <HAL_TIM_ConfigClockSource+0xb4>
 80052c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052c6:	d1cb      	bne.n	8005260 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80052c8:	68cb      	ldr	r3, [r1, #12]
 80052ca:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80052ce:	f7ff ffa1 	bl	8005214 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052d2:	6822      	ldr	r2, [r4, #0]
 80052d4:	6893      	ldr	r3, [r2, #8]
 80052d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052da:	e008      	b.n	80052ee <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80052dc:	68cb      	ldr	r3, [r1, #12]
 80052de:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80052e2:	f7ff ff97 	bl	8005214 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80052e6:	6822      	ldr	r2, [r4, #0]
 80052e8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052ee:	6093      	str	r3, [r2, #8]
      break;
 80052f0:	e7b6      	b.n	8005260 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052f2:	684d      	ldr	r5, [r1, #4]
 80052f4:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052f6:	6a01      	ldr	r1, [r0, #32]
 80052f8:	f021 0110 	bic.w	r1, r1, #16
 80052fc:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052fe:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8005300:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005302:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005306:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800530a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800530e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005312:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005314:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005316:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800531c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8005320:	e7cb      	b.n	80052ba <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005322:	684a      	ldr	r2, [r1, #4]
 8005324:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8005326:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005328:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800532a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800532e:	f025 0501 	bic.w	r5, r5, #1
 8005332:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005334:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8005336:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005338:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800533c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005340:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005342:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005344:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800534a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800534e:	e7b4      	b.n	80052ba <HAL_TIM_ConfigClockSource+0x92>

08005350 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005350:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8005354:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8005356:	2b01      	cmp	r3, #1
 8005358:	f04f 0302 	mov.w	r3, #2
 800535c:	d014      	beq.n	8005388 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800535e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005360:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8005364:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005366:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005368:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800536a:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 800536c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005370:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005374:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005376:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005378:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800537a:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800537c:	2301      	movs	r3, #1
 800537e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005382:	2300      	movs	r3, #0
 8005384:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8005388:	4618      	mov	r0, r3

  return HAL_OK;
}
 800538a:	bd30      	pop	{r4, r5, pc}

0800538c <HAL_TIMEx_CommutCallback>:
 800538c:	4770      	bx	lr

0800538e <HAL_TIMEx_BreakCallback>:
 800538e:	4770      	bx	lr

08005390 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005390:	6803      	ldr	r3, [r0, #0]
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005398:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539a:	695a      	ldr	r2, [r3, #20]
 800539c:	f022 0201 	bic.w	r2, r2, #1
 80053a0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053a2:	2320      	movs	r3, #32
 80053a4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 80053a8:	4770      	bx	lr
	...

080053ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053ac:	b538      	push	{r3, r4, r5, lr}
 80053ae:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053b0:	6803      	ldr	r3, [r0, #0]
 80053b2:	68c1      	ldr	r1, [r0, #12]
 80053b4:	691a      	ldr	r2, [r3, #16]
 80053b6:	2419      	movs	r4, #25
 80053b8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80053bc:	430a      	orrs	r2, r1
 80053be:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80053c0:	6882      	ldr	r2, [r0, #8]
 80053c2:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80053c4:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80053c6:	4302      	orrs	r2, r0
 80053c8:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 80053ca:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80053ce:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80053d2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80053d4:	430a      	orrs	r2, r1
 80053d6:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053d8:	695a      	ldr	r2, [r3, #20]
 80053da:	69a9      	ldr	r1, [r5, #24]
 80053dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80053e0:	430a      	orrs	r2, r1
 80053e2:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80053e4:	4a0d      	ldr	r2, [pc, #52]	; (800541c <UART_SetConfig+0x70>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d114      	bne.n	8005414 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80053ea:	f7ff fd81 	bl	8004ef0 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053ee:	4360      	muls	r0, r4
 80053f0:	686c      	ldr	r4, [r5, #4]
 80053f2:	2264      	movs	r2, #100	; 0x64
 80053f4:	00a4      	lsls	r4, r4, #2
 80053f6:	fbb0 f0f4 	udiv	r0, r0, r4
 80053fa:	fbb0 f1f2 	udiv	r1, r0, r2
 80053fe:	fb02 0311 	mls	r3, r2, r1, r0
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	3332      	adds	r3, #50	; 0x32
 8005406:	fbb3 f3f2 	udiv	r3, r3, r2
 800540a:	682c      	ldr	r4, [r5, #0]
 800540c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8005410:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8005412:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8005414:	f7ff fd5c 	bl	8004ed0 <HAL_RCC_GetPCLK1Freq>
 8005418:	e7e9      	b.n	80053ee <UART_SetConfig+0x42>
 800541a:	bf00      	nop
 800541c:	40013800 	.word	0x40013800

08005420 <HAL_UART_Init>:
{
 8005420:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005422:	4604      	mov	r4, r0
 8005424:	b340      	cbz	r0, 8005478 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005426:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800542a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800542e:	b91b      	cbnz	r3, 8005438 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8005430:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8005434:	f7fc fe56 	bl	80020e4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8005438:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800543a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800543c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8005440:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8005442:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8005444:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005448:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800544a:	f7ff ffaf 	bl	80053ac <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800544e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005450:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005452:	691a      	ldr	r2, [r3, #16]
 8005454:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005458:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800545a:	695a      	ldr	r2, [r3, #20]
 800545c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005460:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8005462:	68da      	ldr	r2, [r3, #12]
 8005464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005468:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800546a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800546c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800546e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005472:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8005476:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005478:	2001      	movs	r0, #1
 800547a:	e7fc      	b.n	8005476 <HAL_UART_Init+0x56>

0800547c <HAL_UART_Receive_DMA>:
{
 800547c:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800547e:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 8005482:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005484:	2a20      	cmp	r2, #32
{
 8005486:	4605      	mov	r5, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8005488:	d138      	bne.n	80054fc <HAL_UART_Receive_DMA+0x80>
    if ((pData == NULL) || (Size == 0U))
 800548a:	2900      	cmp	r1, #0
 800548c:	d034      	beq.n	80054f8 <HAL_UART_Receive_DMA+0x7c>
 800548e:	2b00      	cmp	r3, #0
 8005490:	d032      	beq.n	80054f8 <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8005492:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8005496:	2a01      	cmp	r2, #1
 8005498:	d030      	beq.n	80054fc <HAL_UART_Receive_DMA+0x80>
 800549a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800549c:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 800549e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054a2:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 80054a4:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 80054a6:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a8:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054aa:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80054ae:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80054b0:	4a13      	ldr	r2, [pc, #76]	; (8005500 <HAL_UART_Receive_DMA+0x84>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80054b2:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80054b4:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80054b6:	4a13      	ldr	r2, [pc, #76]	; (8005504 <HAL_UART_Receive_DMA+0x88>)
 80054b8:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80054ba:	4a13      	ldr	r2, [pc, #76]	; (8005508 <HAL_UART_Receive_DMA+0x8c>)
    huart->hdmarx->XferAbortCallback = NULL;
 80054bc:	e9c0 240c 	strd	r2, r4, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80054c0:	460a      	mov	r2, r1
 80054c2:	1d31      	adds	r1, r6, #4
 80054c4:	f7fe f900 	bl	80036c8 <HAL_DMA_Start_IT>
    return HAL_OK;
 80054c8:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_OREFLAG(huart);
 80054ca:	682b      	ldr	r3, [r5, #0]
 80054cc:	9401      	str	r4, [sp, #4]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	9201      	str	r2, [sp, #4]
 80054d2:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 80054d4:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 80054d8:	9201      	str	r2, [sp, #4]
 80054da:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054e2:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e4:	695a      	ldr	r2, [r3, #20]
 80054e6:	f042 0201 	orr.w	r2, r2, #1
 80054ea:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ec:	695a      	ldr	r2, [r3, #20]
 80054ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054f2:	615a      	str	r2, [r3, #20]
}
 80054f4:	b002      	add	sp, #8
 80054f6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80054f8:	2001      	movs	r0, #1
 80054fa:	e7fb      	b.n	80054f4 <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 80054fc:	2002      	movs	r0, #2
 80054fe:	e7f9      	b.n	80054f4 <HAL_UART_Receive_DMA+0x78>
 8005500:	0800550f 	.word	0x0800550f
 8005504:	08005549 	.word	0x08005549
 8005508:	08005555 	.word	0x08005555

0800550c <HAL_UART_RxCpltCallback>:
 800550c:	4770      	bx	lr

0800550e <UART_DMAReceiveCplt>:
{
 800550e:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005510:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005512:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f013 0320 	ands.w	r3, r3, #32
 800551a:	d110      	bne.n	800553e <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 800551c:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800551e:	6813      	ldr	r3, [r2, #0]
 8005520:	68d9      	ldr	r1, [r3, #12]
 8005522:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005526:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005528:	6959      	ldr	r1, [r3, #20]
 800552a:	f021 0101 	bic.w	r1, r1, #1
 800552e:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005530:	6959      	ldr	r1, [r3, #20]
 8005532:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8005536:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8005538:	2320      	movs	r3, #32
 800553a:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 800553e:	4610      	mov	r0, r2
 8005540:	f7ff ffe4 	bl	800550c <HAL_UART_RxCpltCallback>
}
 8005544:	bd08      	pop	{r3, pc}

08005546 <HAL_UART_RxHalfCpltCallback>:
 8005546:	4770      	bx	lr

08005548 <UART_DMARxHalfCplt>:
{
 8005548:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800554a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800554c:	f7ff fffb 	bl	8005546 <HAL_UART_RxHalfCpltCallback>
}
 8005550:	bd08      	pop	{r3, pc}

08005552 <HAL_UART_ErrorCallback>:
 8005552:	4770      	bx	lr

08005554 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005554:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8005556:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005558:	680b      	ldr	r3, [r1, #0]
 800555a:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800555c:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8005560:	2821      	cmp	r0, #33	; 0x21
 8005562:	d10a      	bne.n	800557a <UART_DMAError+0x26>
 8005564:	0612      	lsls	r2, r2, #24
 8005566:	d508      	bpl.n	800557a <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 8005568:	2200      	movs	r2, #0
 800556a:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005572:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005574:	2220      	movs	r2, #32
 8005576:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800557a:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800557c:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8005580:	2a22      	cmp	r2, #34	; 0x22
 8005582:	d106      	bne.n	8005592 <UART_DMAError+0x3e>
 8005584:	065b      	lsls	r3, r3, #25
 8005586:	d504      	bpl.n	8005592 <UART_DMAError+0x3e>
    huart->RxXferCount = 0x00U;
 8005588:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 800558a:	4608      	mov	r0, r1
    huart->RxXferCount = 0x00U;
 800558c:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800558e:	f7ff feff 	bl	8005390 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005592:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8005594:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005596:	f043 0310 	orr.w	r3, r3, #16
 800559a:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800559c:	f7ff ffd9 	bl	8005552 <HAL_UART_ErrorCallback>
}
 80055a0:	bd08      	pop	{r3, pc}

080055a2 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80055a2:	b084      	sub	sp, #16
 80055a4:	a801      	add	r0, sp, #4
 80055a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80055aa:	b004      	add	sp, #16
 80055ac:	2000      	movs	r0, #0
 80055ae:	4770      	bx	lr

080055b0 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80055b0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80055b4:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80055b8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80055bc:	2000      	movs	r0, #0
 80055be:	4770      	bx	lr

080055c0 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80055c0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80055c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80055c8:	045b      	lsls	r3, r3, #17
 80055ca:	0c5b      	lsrs	r3, r3, #17
 80055cc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80055d0:	2000      	movs	r0, #0
 80055d2:	4770      	bx	lr

080055d4 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80055d4:	2000      	movs	r0, #0
 80055d6:	4770      	bx	lr

080055d8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80055d8:	b084      	sub	sp, #16
 80055da:	b510      	push	{r4, lr}
 80055dc:	ac03      	add	r4, sp, #12
 80055de:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80055e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = USB_CNTR_FRES;
 80055e6:	2301      	movs	r3, #1
 80055e8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 80055ec:	2300      	movs	r3, #0
 80055ee:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 80055f2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 80055f6:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 80055fa:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
}
 80055fe:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 8005600:	f442 423f 	orr.w	r2, r2, #48896	; 0xbf00
 8005604:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
}
 8005608:	4618      	mov	r0, r3
 800560a:	4770      	bx	lr

0800560c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800560c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800560e:	780c      	ldrb	r4, [r1, #0]
{
 8005610:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005612:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 8005616:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005618:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 800561c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  switch (ep->type)
 8005620:	2803      	cmp	r0, #3
 8005622:	d803      	bhi.n	800562c <USB_ActivateEndpoint+0x20>
 8005624:	e8df f000 	tbb	[pc, r0]
 8005628:	46444942 	.word	0x46444942
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 800562c:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800562e:	f248 0580 	movw	r5, #32896	; 0x8080
 8005632:	432a      	orrs	r2, r5
 8005634:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005638:	780e      	ldrb	r6, [r1, #0]
 800563a:	4a9e      	ldr	r2, [pc, #632]	; (80058b4 <USB_ActivateEndpoint+0x2a8>)
 800563c:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 8005640:	4335      	orrs	r5, r6
 8005642:	4014      	ands	r4, r2
 8005644:	432c      	orrs	r4, r5
 8005646:	f823 4026 	strh.w	r4, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 800564a:	7b0d      	ldrb	r5, [r1, #12]
 800564c:	780c      	ldrb	r4, [r1, #0]
 800564e:	2d00      	cmp	r5, #0
 8005650:	f040 8082 	bne.w	8005758 <USB_ActivateEndpoint+0x14c>
 8005654:	88cd      	ldrh	r5, [r1, #6]
  {
    if (ep->is_in != 0U)
 8005656:	784e      	ldrb	r6, [r1, #1]
 8005658:	086d      	lsrs	r5, r5, #1
 800565a:	006d      	lsls	r5, r5, #1
 800565c:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8005660:	b376      	cbz	r6, 80056c0 <USB_ActivateEndpoint+0xb4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005662:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8005666:	4434      	add	r4, r6
 8005668:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800566c:	780d      	ldrb	r5, [r1, #0]
 800566e:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8005672:	0667      	lsls	r7, r4, #25
 8005674:	d508      	bpl.n	8005688 <USB_ActivateEndpoint+0x7c>
 8005676:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800567a:	4022      	ands	r2, r4
 800567c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005680:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005684:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8005688:	78ca      	ldrb	r2, [r1, #3]
 800568a:	780c      	ldrb	r4, [r1, #0]
 800568c:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800568e:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 8005692:	4a89      	ldr	r2, [pc, #548]	; (80058b8 <USB_ActivateEndpoint+0x2ac>)
 8005694:	ea02 0201 	and.w	r2, r2, r1
 8005698:	bf18      	it	ne
 800569a:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800569e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056a6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 80056aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_CONTROL;
 80056ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 80056b0:	2000      	movs	r0, #0
 80056b2:	e7bc      	b.n	800562e <USB_ActivateEndpoint+0x22>
      wEpRegVal |= USB_EP_INTERRUPT;
 80056b4:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 80056b8:	e7fa      	b.n	80056b0 <USB_ActivateEndpoint+0xa4>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80056ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056be:	e7f7      	b.n	80056b0 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80056c0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80056c4:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80056c6:	4414      	add	r4, r2
 80056c8:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80056cc:	780a      	ldrb	r2, [r1, #0]
 80056ce:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80056d2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80056d6:	b2a4      	uxth	r4, r4
 80056d8:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80056dc:	bb56      	cbnz	r6, 8005734 <USB_ActivateEndpoint+0x128>
 80056de:	5b15      	ldrh	r5, [r2, r4]
 80056e0:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 80056e4:	042d      	lsls	r5, r5, #16
 80056e6:	0c2d      	lsrs	r5, r5, #16
 80056e8:	5315      	strh	r5, [r2, r4]
 80056ea:	5b15      	ldrh	r5, [r2, r4]
 80056ec:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 80056f0:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056f2:	780c      	ldrb	r4, [r1, #0]
 80056f4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80056f8:	0457      	lsls	r7, r2, #17
 80056fa:	d50b      	bpl.n	8005714 <USB_ActivateEndpoint+0x108>
 80056fc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005700:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005704:	0512      	lsls	r2, r2, #20
 8005706:	0d12      	lsrs	r2, r2, #20
 8005708:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800570c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005710:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005714:	7809      	ldrb	r1, [r1, #0]
 8005716:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800571a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800571e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005722:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005726:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800572a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800572e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8005732:	e7ba      	b.n	80056aa <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005734:	2e3e      	cmp	r6, #62	; 0x3e
 8005736:	d806      	bhi.n	8005746 <USB_ActivateEndpoint+0x13a>
 8005738:	0875      	lsrs	r5, r6, #1
 800573a:	07f6      	lsls	r6, r6, #31
 800573c:	bf48      	it	mi
 800573e:	3501      	addmi	r5, #1
 8005740:	02ad      	lsls	r5, r5, #10
 8005742:	b2ad      	uxth	r5, r5
 8005744:	e7d4      	b.n	80056f0 <USB_ActivateEndpoint+0xe4>
 8005746:	0977      	lsrs	r7, r6, #5
 8005748:	06f5      	lsls	r5, r6, #27
 800574a:	4d5c      	ldr	r5, [pc, #368]	; (80058bc <USB_ActivateEndpoint+0x2b0>)
 800574c:	bf08      	it	eq
 800574e:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8005752:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8005756:	e7f4      	b.n	8005742 <USB_ActivateEndpoint+0x136>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005758:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 800575c:	4015      	ands	r5, r2
 800575e:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 8005762:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8005766:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800576a:	780c      	ldrb	r4, [r1, #0]
 800576c:	890d      	ldrh	r5, [r1, #8]
 800576e:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8005772:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8005776:	086d      	lsrs	r5, r5, #1
 8005778:	b2b6      	uxth	r6, r6
 800577a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800577e:	006d      	lsls	r5, r5, #1
 8005780:	53a5      	strh	r5, [r4, r6]
 8005782:	780c      	ldrb	r4, [r1, #0]
 8005784:	894d      	ldrh	r5, [r1, #10]
 8005786:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800578a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 800578e:	086d      	lsrs	r5, r5, #1
 8005790:	f504 6481 	add.w	r4, r4, #1032	; 0x408
 8005794:	006d      	lsls	r5, r5, #1
 8005796:	b2b6      	uxth	r6, r6
 8005798:	53a5      	strh	r5, [r4, r6]
    if (ep->is_in == 0U)
 800579a:	784c      	ldrb	r4, [r1, #1]
 800579c:	780d      	ldrb	r5, [r1, #0]
 800579e:	2c00      	cmp	r4, #0
 80057a0:	d143      	bne.n	800582a <USB_ActivateEndpoint+0x21e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057a2:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 80057a6:	0466      	lsls	r6, r4, #17
 80057a8:	d508      	bpl.n	80057bc <USB_ActivateEndpoint+0x1b0>
 80057aa:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 80057ae:	4022      	ands	r2, r4
 80057b0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80057b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057b8:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057bc:	780c      	ldrb	r4, [r1, #0]
 80057be:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80057c2:	0655      	lsls	r5, r2, #25
 80057c4:	d50b      	bpl.n	80057de <USB_ActivateEndpoint+0x1d2>
 80057c6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80057ca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80057ce:	0512      	lsls	r2, r2, #20
 80057d0:	0d12      	lsrs	r2, r2, #20
 80057d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057d6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80057da:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80057de:	780c      	ldrb	r4, [r1, #0]
 80057e0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80057e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80057e8:	0512      	lsls	r2, r2, #20
 80057ea:	0d12      	lsrs	r2, r2, #20
 80057ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057f0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80057f4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057f8:	f248 0480 	movw	r4, #32896	; 0x8080
 80057fc:	780d      	ldrb	r5, [r1, #0]
 80057fe:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8005802:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005806:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800580a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800580e:	4322      	orrs	r2, r4
 8005810:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005814:	7809      	ldrb	r1, [r1, #0]
 8005816:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800581a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800581e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005822:	4314      	orrs	r4, r2
 8005824:	f823 4021 	strh.w	r4, [r3, r1, lsl #2]
 8005828:	e73f      	b.n	80056aa <USB_ActivateEndpoint+0x9e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800582a:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800582e:	0464      	lsls	r4, r4, #17
 8005830:	d508      	bpl.n	8005844 <USB_ActivateEndpoint+0x238>
 8005832:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8005836:	4022      	ands	r2, r4
 8005838:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800583c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005840:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005844:	780c      	ldrb	r4, [r1, #0]
 8005846:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800584a:	0652      	lsls	r2, r2, #25
 800584c:	d50b      	bpl.n	8005866 <USB_ActivateEndpoint+0x25a>
 800584e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005852:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005856:	0512      	lsls	r2, r2, #20
 8005858:	0d12      	lsrs	r2, r2, #20
 800585a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800585e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005862:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8005866:	780c      	ldrb	r4, [r1, #0]
 8005868:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800586c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005870:	0512      	lsls	r2, r2, #20
 8005872:	0d12      	lsrs	r2, r2, #20
 8005874:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005878:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800587c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8005880:	78ca      	ldrb	r2, [r1, #3]
 8005882:	780c      	ldrb	r4, [r1, #0]
 8005884:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005886:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 800588a:	4a0b      	ldr	r2, [pc, #44]	; (80058b8 <USB_ActivateEndpoint+0x2ac>)
 800588c:	ea02 0205 	and.w	r2, r2, r5
 8005890:	bf18      	it	ne
 8005892:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005896:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800589a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800589e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058a2:	7809      	ldrb	r1, [r1, #0]
 80058a4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80058a8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80058ac:	0492      	lsls	r2, r2, #18
 80058ae:	0c92      	lsrs	r2, r2, #18
 80058b0:	e739      	b.n	8005726 <USB_ActivateEndpoint+0x11a>
 80058b2:	bf00      	nop
 80058b4:	ffff8f8f 	.word	0xffff8f8f
 80058b8:	ffff8fbf 	.word	0xffff8fbf
 80058bc:	ffff8000 	.word	0xffff8000

080058c0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058c0:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 80058c2:	7b0c      	ldrb	r4, [r1, #12]
 80058c4:	784a      	ldrb	r2, [r1, #1]
 80058c6:	780b      	ldrb	r3, [r1, #0]
 80058c8:	bbbc      	cbnz	r4, 800593a <USB_DeactivateEndpoint+0x7a>
  {
    if (ep->is_in != 0U)
 80058ca:	b1f2      	cbz	r2, 800590a <USB_DeactivateEndpoint+0x4a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058cc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80058d0:	0652      	lsls	r2, r2, #25
 80058d2:	d50b      	bpl.n	80058ec <USB_DeactivateEndpoint+0x2c>
 80058d4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80058d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80058dc:	0512      	lsls	r2, r2, #20
 80058de:	0d12      	lsrs	r2, r2, #20
 80058e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058e4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80058e8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058ec:	780a      	ldrb	r2, [r1, #0]
 80058ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80058f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80058f6:	051b      	lsls	r3, r3, #20
 80058f8:	0d1b      	lsrs	r3, r3, #20
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005902:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8005906:	2000      	movs	r0, #0
 8005908:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800590a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800590e:	0454      	lsls	r4, r2, #17
 8005910:	d50b      	bpl.n	800592a <USB_DeactivateEndpoint+0x6a>
 8005912:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005916:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800591a:	0512      	lsls	r2, r2, #20
 800591c:	0d12      	lsrs	r2, r2, #20
 800591e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005922:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005926:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800592a:	780a      	ldrb	r2, [r1, #0]
 800592c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005930:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005934:	049b      	lsls	r3, r3, #18
 8005936:	0c9b      	lsrs	r3, r3, #18
 8005938:	e7df      	b.n	80058fa <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 800593a:	2a00      	cmp	r2, #0
 800593c:	d144      	bne.n	80059c8 <USB_DeactivateEndpoint+0x108>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800593e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005942:	0452      	lsls	r2, r2, #17
 8005944:	d50b      	bpl.n	800595e <USB_DeactivateEndpoint+0x9e>
 8005946:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800594a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800594e:	0512      	lsls	r2, r2, #20
 8005950:	0d12      	lsrs	r2, r2, #20
 8005952:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005956:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800595a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800595e:	780a      	ldrb	r2, [r1, #0]
 8005960:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005964:	065c      	lsls	r4, r3, #25
 8005966:	d50b      	bpl.n	8005980 <USB_DeactivateEndpoint+0xc0>
 8005968:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800596c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005970:	051b      	lsls	r3, r3, #20
 8005972:	0d1b      	lsrs	r3, r3, #20
 8005974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005978:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800597c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8005980:	780a      	ldrb	r2, [r1, #0]
 8005982:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005986:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800598a:	051b      	lsls	r3, r3, #20
 800598c:	0d1b      	lsrs	r3, r3, #20
 800598e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005992:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005996:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800599a:	f248 0280 	movw	r2, #32896	; 0x8080
 800599e:	780c      	ldrb	r4, [r1, #0]
 80059a0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80059a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059b2:	7809      	ldrb	r1, [r1, #0]
 80059b4:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80059b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059c0:	431a      	orrs	r2, r3
 80059c2:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 80059c6:	e79e      	b.n	8005906 <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059c8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80059cc:	0452      	lsls	r2, r2, #17
 80059ce:	d50b      	bpl.n	80059e8 <USB_DeactivateEndpoint+0x128>
 80059d0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80059d4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80059d8:	0512      	lsls	r2, r2, #20
 80059da:	0d12      	lsrs	r2, r2, #20
 80059dc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80059e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059e4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059e8:	780a      	ldrb	r2, [r1, #0]
 80059ea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80059ee:	065b      	lsls	r3, r3, #25
 80059f0:	d50b      	bpl.n	8005a0a <USB_DeactivateEndpoint+0x14a>
 80059f2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80059f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059fa:	051b      	lsls	r3, r3, #20
 80059fc:	0d1b      	lsrs	r3, r3, #20
 80059fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a06:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8005a0a:	780a      	ldrb	r2, [r1, #0]
 8005a0c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005a10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a14:	051b      	lsls	r3, r3, #20
 8005a16:	0d1b      	lsrs	r3, r3, #20
 8005a18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a20:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a24:	f248 0280 	movw	r2, #32896	; 0x8080
 8005a28:	780c      	ldrb	r4, [r1, #0]
 8005a2a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8005a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a3c:	7809      	ldrb	r1, [r1, #0]
 8005a3e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8005a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4a:	e7b9      	b.n	80059c0 <USB_DeactivateEndpoint+0x100>

08005a4c <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8005a4c:	784b      	ldrb	r3, [r1, #1]
 8005a4e:	780a      	ldrb	r2, [r1, #0]
 8005a50:	b17b      	cbz	r3, 8005a72 <USB_EPSetStall+0x26>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005a52:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a5e:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a6a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8005a6e:	2000      	movs	r0, #0
 8005a70:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005a72:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005a76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a82:	e7ee      	b.n	8005a62 <USB_EPSetStall+0x16>

08005a84 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8005a84:	7b0b      	ldrb	r3, [r1, #12]
 8005a86:	bb23      	cbnz	r3, 8005ad2 <USB_EPClearStall+0x4e>
  {
    if (ep->is_in != 0U)
 8005a88:	784b      	ldrb	r3, [r1, #1]
 8005a8a:	780a      	ldrb	r2, [r1, #0]
 8005a8c:	b31b      	cbz	r3, 8005ad6 <USB_EPClearStall+0x52>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a8e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005a92:	065b      	lsls	r3, r3, #25
 8005a94:	d50b      	bpl.n	8005aae <USB_EPClearStall+0x2a>
 8005a96:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a9e:	051b      	lsls	r3, r3, #20
 8005aa0:	0d1b      	lsrs	r3, r3, #20
 8005aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aa6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005aaa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8005aae:	78cb      	ldrb	r3, [r1, #3]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d00e      	beq.n	8005ad2 <USB_EPClearStall+0x4e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ab4:	780a      	ldrb	r2, [r1, #0]
 8005ab6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ac2:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ace:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ad6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ada:	045b      	lsls	r3, r3, #17
 8005adc:	d50b      	bpl.n	8005af6 <USB_EPClearStall+0x72>
 8005ade:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ae2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ae6:	051b      	lsls	r3, r3, #20
 8005ae8:	0d1b      	lsrs	r3, r3, #20
 8005aea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005af6:	780a      	ldrb	r2, [r1, #0]
 8005af8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005afc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b04:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005b08:	e7dd      	b.n	8005ac6 <USB_EPClearStall+0x42>

08005b0a <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8005b0a:	b911      	cbnz	r1, 8005b12 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8005b0c:	2380      	movs	r3, #128	; 0x80
 8005b0e:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8005b12:	2000      	movs	r0, #0
 8005b14:	4770      	bx	lr

08005b16 <USB_DevConnect>:
 8005b16:	2000      	movs	r0, #0
 8005b18:	4770      	bx	lr

08005b1a <USB_DevDisconnect>:
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	4770      	bx	lr

08005b1e <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005b1e:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8005b22:	4770      	bx	lr

08005b24 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8005b24:	2000      	movs	r0, #0
 8005b26:	4770      	bx	lr

08005b28 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005b28:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005b2c:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005b2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005b32:	085b      	lsrs	r3, r3, #1
 8005b34:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d100      	bne.n	8005b3e <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8005b3c:	4770      	bx	lr
 8005b3e:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8005b42:	f822 0b04 	strh.w	r0, [r2], #4
 8005b46:	e7f7      	b.n	8005b38 <USB_WritePMA+0x10>

08005b48 <USB_EPStartXfer>:
{
 8005b48:	b570      	push	{r4, r5, r6, lr}
 8005b4a:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8005b4c:	7849      	ldrb	r1, [r1, #1]
{
 8005b4e:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8005b50:	2901      	cmp	r1, #1
 8005b52:	69aa      	ldr	r2, [r5, #24]
 8005b54:	692b      	ldr	r3, [r5, #16]
 8005b56:	7b28      	ldrb	r0, [r5, #12]
 8005b58:	d15d      	bne.n	8005c16 <USB_EPStartXfer+0xce>
    if (ep->xfer_len > ep->maxpacket)
 8005b5a:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8005b5c:	bf9d      	ittte	ls
 8005b5e:	2300      	movls	r3, #0
 8005b60:	61ab      	strls	r3, [r5, #24]
 8005b62:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 8005b64:	1ad2      	subhi	r2, r2, r3
 8005b66:	bf88      	it	hi
 8005b68:	61aa      	strhi	r2, [r5, #24]
 8005b6a:	6969      	ldr	r1, [r5, #20]
 8005b6c:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 8005b6e:	b9e8      	cbnz	r0, 8005bac <USB_EPStartXfer+0x64>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005b70:	4633      	mov	r3, r6
 8005b72:	88ea      	ldrh	r2, [r5, #6]
 8005b74:	4620      	mov	r0, r4
 8005b76:	f7ff ffd7 	bl	8005b28 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005b7a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8005b7e:	782a      	ldrb	r2, [r5, #0]
 8005b80:	f204 4304 	addw	r3, r4, #1028	; 0x404
 8005b84:	0112      	lsls	r2, r2, #4
 8005b86:	440b      	add	r3, r1
 8005b88:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005b8a:	782a      	ldrb	r2, [r5, #0]
 8005b8c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8005b90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b98:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba4:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8005ba8:	2000      	movs	r0, #0
 8005baa:	bd70      	pop	{r4, r5, r6, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005bac:	782b      	ldrb	r3, [r5, #0]
 8005bae:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005bb2:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005bb6:	0652      	lsls	r2, r2, #25
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005bb8:	bf4b      	itete	mi
 8005bba:	f204 420c 	addwmi	r2, r4, #1036	; 0x40c
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bbe:	f204 4204 	addwpl	r2, r4, #1028	; 0x404
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005bc2:	1812      	addmi	r2, r2, r0
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bc4:	1812      	addpl	r2, r2, r0
 8005bc6:	ea4f 1303 	mov.w	r3, r3, lsl #4
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005bca:	bf4b      	itete	mi
 8005bcc:	52d6      	strhmi	r6, [r2, r3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bce:	52d6      	strhpl	r6, [r2, r3]
        pmabuffer = ep->pmaaddr1;
 8005bd0:	896a      	ldrhmi	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 8005bd2:	892a      	ldrhpl	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bd4:	4633      	mov	r3, r6
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	f7ff ffa6 	bl	8005b28 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005bdc:	786b      	ldrb	r3, [r5, #1]
 8005bde:	782a      	ldrb	r2, [r5, #0]
 8005be0:	b963      	cbnz	r3, 8005bfc <USB_EPStartXfer+0xb4>
 8005be2:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8005be6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bea:	051b      	lsls	r3, r3, #20
 8005bec:	0d1b      	lsrs	r3, r3, #20
 8005bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bf2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bf6:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8005bfa:	e7c6      	b.n	8005b8a <USB_EPStartXfer+0x42>
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d1c4      	bne.n	8005b8a <USB_EPStartXfer+0x42>
 8005c00:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8005c04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c08:	051b      	lsls	r3, r3, #20
 8005c0a:	0d1b      	lsrs	r3, r3, #20
 8005c0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c14:	e7ef      	b.n	8005bf6 <USB_EPStartXfer+0xae>
    if (ep->xfer_len > ep->maxpacket)
 8005c16:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8005c18:	bf93      	iteet	ls
 8005c1a:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8005c1c:	1ad2      	subhi	r2, r2, r3
 8005c1e:	61aa      	strhi	r2, [r5, #24]
      ep->xfer_len = 0U;
 8005c20:	61ab      	strls	r3, [r5, #24]
 8005c22:	bf98      	it	ls
 8005c24:	4613      	movls	r3, r2
 8005c26:	782a      	ldrb	r2, [r5, #0]
    if (ep->doublebuffer == 0U)
 8005c28:	b990      	cbnz	r0, 8005c50 <USB_EPStartXfer+0x108>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005c2a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8005c2e:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 8005c32:	4401      	add	r1, r0
 8005c34:	0112      	lsls	r2, r2, #4
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d13b      	bne.n	8005cb2 <USB_EPStartXfer+0x16a>
 8005c3a:	5a8b      	ldrh	r3, [r1, r2]
 8005c3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c40:	041b      	lsls	r3, r3, #16
 8005c42:	0c1b      	lsrs	r3, r3, #16
 8005c44:	528b      	strh	r3, [r1, r2]
 8005c46:	5a8b      	ldrh	r3, [r1, r2]
 8005c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c4c:	528b      	strh	r3, [r1, r2]
 8005c4e:	e039      	b.n	8005cc4 <USB_EPStartXfer+0x17c>
 8005c50:	b981      	cbnz	r1, 8005c74 <USB_EPStartXfer+0x12c>
 8005c52:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8005c56:	f204 4004 	addw	r0, r4, #1028	; 0x404
 8005c5a:	4401      	add	r1, r0
 8005c5c:	0112      	lsls	r2, r2, #4
 8005c5e:	b9b3      	cbnz	r3, 8005c8e <USB_EPStartXfer+0x146>
 8005c60:	5a88      	ldrh	r0, [r1, r2]
 8005c62:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8005c66:	0400      	lsls	r0, r0, #16
 8005c68:	0c00      	lsrs	r0, r0, #16
 8005c6a:	5288      	strh	r0, [r1, r2]
 8005c6c:	5a88      	ldrh	r0, [r1, r2]
 8005c6e:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8005c72:	5288      	strh	r0, [r1, r2]
 8005c74:	7869      	ldrb	r1, [r5, #1]
 8005c76:	782a      	ldrb	r2, [r5, #0]
 8005c78:	2900      	cmp	r1, #0
 8005c7a:	d0d6      	beq.n	8005c2a <USB_EPStartXfer+0xe2>
 8005c7c:	2901      	cmp	r1, #1
 8005c7e:	d121      	bne.n	8005cc4 <USB_EPStartXfer+0x17c>
 8005c80:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8005c84:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8005c88:	4401      	add	r1, r0
 8005c8a:	0112      	lsls	r2, r2, #4
 8005c8c:	e02c      	b.n	8005ce8 <USB_EPStartXfer+0x1a0>
 8005c8e:	2b3e      	cmp	r3, #62	; 0x3e
 8005c90:	d806      	bhi.n	8005ca0 <USB_EPStartXfer+0x158>
 8005c92:	0858      	lsrs	r0, r3, #1
 8005c94:	07de      	lsls	r6, r3, #31
 8005c96:	bf48      	it	mi
 8005c98:	3001      	addmi	r0, #1
 8005c9a:	0280      	lsls	r0, r0, #10
 8005c9c:	b280      	uxth	r0, r0
 8005c9e:	e7e8      	b.n	8005c72 <USB_EPStartXfer+0x12a>
 8005ca0:	095e      	lsrs	r6, r3, #5
 8005ca2:	06d8      	lsls	r0, r3, #27
 8005ca4:	4811      	ldr	r0, [pc, #68]	; (8005cec <USB_EPStartXfer+0x1a4>)
 8005ca6:	bf08      	it	eq
 8005ca8:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8005cac:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8005cb0:	e7f4      	b.n	8005c9c <USB_EPStartXfer+0x154>
 8005cb2:	2b3e      	cmp	r3, #62	; 0x3e
 8005cb4:	d810      	bhi.n	8005cd8 <USB_EPStartXfer+0x190>
 8005cb6:	0858      	lsrs	r0, r3, #1
 8005cb8:	07de      	lsls	r6, r3, #31
 8005cba:	bf48      	it	mi
 8005cbc:	3001      	addmi	r0, #1
 8005cbe:	0280      	lsls	r0, r0, #10
 8005cc0:	b280      	uxth	r0, r0
 8005cc2:	5288      	strh	r0, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cc4:	782a      	ldrb	r2, [r5, #0]
 8005cc6:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8005cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005cd6:	e761      	b.n	8005b9c <USB_EPStartXfer+0x54>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005cd8:	0958      	lsrs	r0, r3, #5
 8005cda:	06db      	lsls	r3, r3, #27
 8005cdc:	4b03      	ldr	r3, [pc, #12]	; (8005cec <USB_EPStartXfer+0x1a4>)
 8005cde:	bf08      	it	eq
 8005ce0:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8005ce4:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	e7af      	b.n	8005c4c <USB_EPStartXfer+0x104>
 8005cec:	ffff8000 	.word	0xffff8000

08005cf0 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005cf0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8005cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005cf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005cfa:	085d      	lsrs	r5, r3, #1
 8005cfc:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005cfe:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 8005d00:	462e      	mov	r6, r5
 8005d02:	3002      	adds	r0, #2
 8005d04:	b936      	cbnz	r6, 8005d14 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005d06:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8005d08:	bf44      	itt	mi
 8005d0a:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005d0e:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8005d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8005d14:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8005d18:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8005d1a:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005d1c:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005d20:	0a24      	lsrs	r4, r4, #8
 8005d22:	f800 4c01 	strb.w	r4, [r0, #-1]
 8005d26:	e7ec      	b.n	8005d02 <USB_ReadPMA+0x12>

08005d28 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d28:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8005d2c:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d2e:	b16b      	cbz	r3, 8005d4c <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d30:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d34:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8005d38:	28ff      	cmp	r0, #255	; 0xff
 8005d3a:	d007      	beq.n	8005d4c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8005d42:	4621      	mov	r1, r4
 8005d44:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8005d46:	23ff      	movs	r3, #255	; 0xff
 8005d48:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	bd10      	pop	{r4, pc}

08005d50 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005d50:	2343      	movs	r3, #67	; 0x43
 8005d52:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8005d54:	4800      	ldr	r0, [pc, #0]	; (8005d58 <USBD_CDC_GetFSCfgDesc+0x8>)
 8005d56:	4770      	bx	lr
 8005d58:	2000007c 	.word	0x2000007c

08005d5c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005d5c:	2343      	movs	r3, #67	; 0x43
 8005d5e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8005d60:	4800      	ldr	r0, [pc, #0]	; (8005d64 <USBD_CDC_GetHSCfgDesc+0x8>)
 8005d62:	4770      	bx	lr
 8005d64:	200000c0 	.word	0x200000c0

08005d68 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005d68:	2343      	movs	r3, #67	; 0x43
 8005d6a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8005d6c:	4800      	ldr	r0, [pc, #0]	; (8005d70 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8005d6e:	4770      	bx	lr
 8005d70:	20000110 	.word	0x20000110

08005d74 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005d74:	230a      	movs	r3, #10
 8005d76:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8005d78:	4800      	ldr	r0, [pc, #0]	; (8005d7c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8005d7a:	4770      	bx	lr
 8005d7c:	20000104 	.word	0x20000104

08005d80 <USBD_CDC_DataOut>:
{
 8005d80:	b538      	push	{r3, r4, r5, lr}
 8005d82:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d84:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d88:	f000 fee0 	bl	8006b4c <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8005d8c:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d90:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8005d94:	b14b      	cbz	r3, 8005daa <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d96:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8005d9a:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8005da4:	4798      	blx	r3
    return USBD_OK;
 8005da6:	2000      	movs	r0, #0
}
 8005da8:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8005daa:	2002      	movs	r0, #2
 8005dac:	e7fc      	b.n	8005da8 <USBD_CDC_DataOut+0x28>

08005dae <USBD_CDC_DataIn>:
{
 8005dae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005db0:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8005db4:	b1ce      	cbz	r6, 8005dea <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005db6:	2314      	movs	r3, #20
 8005db8:	fb03 0301 	mla	r3, r3, r1, r0
 8005dbc:	69da      	ldr	r2, [r3, #28]
 8005dbe:	b182      	cbz	r2, 8005de2 <USBD_CDC_DataIn+0x34>
 8005dc0:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8005dc4:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 8005dc8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8005dca:	fbb2 f4f5 	udiv	r4, r2, r5
 8005dce:	fb05 2414 	mls	r4, r5, r4, r2
 8005dd2:	b934      	cbnz	r4, 8005de2 <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8005dd4:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005dd6:	4622      	mov	r2, r4
 8005dd8:	4623      	mov	r3, r4
 8005dda:	f000 fe9b 	bl	8006b14 <USBD_LL_Transmit>
    return USBD_OK;
 8005dde:	4620      	mov	r0, r4
}
 8005de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8005de2:	2000      	movs	r0, #0
 8005de4:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8005de8:	e7fa      	b.n	8005de0 <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 8005dea:	2002      	movs	r0, #2
 8005dec:	e7f8      	b.n	8005de0 <USBD_CDC_DataIn+0x32>

08005dee <USBD_CDC_Setup>:
{
 8005dee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8005df2:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005df6:	780a      	ldrb	r2, [r1, #0]
{
 8005df8:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dfa:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8005dfe:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e00:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8005e04:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8005e08:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e0c:	d028      	beq.n	8005e60 <USBD_CDC_Setup+0x72>
 8005e0e:	2c20      	cmp	r4, #32
 8005e10:	d145      	bne.n	8005e9e <USBD_CDC_Setup+0xb0>
      if (req->wLength)
 8005e12:	88cc      	ldrh	r4, [r1, #6]
 8005e14:	784b      	ldrb	r3, [r1, #1]
 8005e16:	b1e4      	cbz	r4, 8005e52 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8005e18:	0612      	lsls	r2, r2, #24
 8005e1a:	d511      	bpl.n	8005e40 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e1c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8005e20:	4639      	mov	r1, r7
 8005e22:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8005e26:	4618      	mov	r0, r3
 8005e28:	4622      	mov	r2, r4
 8005e2a:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005e2c:	88f2      	ldrh	r2, [r6, #6]
 8005e2e:	4639      	mov	r1, r7
 8005e30:	4628      	mov	r0, r5
 8005e32:	f000 fc46 	bl	80066c2 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8005e36:	4644      	mov	r4, r8
}
 8005e38:	4620      	mov	r0, r4
 8005e3a:	b003      	add	sp, #12
 8005e3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8005e40:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005e44:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005e48:	4622      	mov	r2, r4
 8005e4a:	4639      	mov	r1, r7
 8005e4c:	f000 fc4e 	bl	80066ec <USBD_CtlPrepareRx>
 8005e50:	e7f1      	b.n	8005e36 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e52:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8005e56:	4618      	mov	r0, r3
 8005e58:	6895      	ldr	r5, [r2, #8]
 8005e5a:	4622      	mov	r2, r4
 8005e5c:	47a8      	blx	r5
 8005e5e:	e7eb      	b.n	8005e38 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8005e60:	784f      	ldrb	r7, [r1, #1]
 8005e62:	2f0a      	cmp	r7, #10
 8005e64:	d00d      	beq.n	8005e82 <USBD_CDC_Setup+0x94>
 8005e66:	2f0b      	cmp	r7, #11
 8005e68:	d015      	beq.n	8005e96 <USBD_CDC_Setup+0xa8>
 8005e6a:	b9c7      	cbnz	r7, 8005e9e <USBD_CDC_Setup+0xb0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e6c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005e70:	2b03      	cmp	r3, #3
 8005e72:	d114      	bne.n	8005e9e <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005e74:	2202      	movs	r2, #2
 8005e76:	f10d 0106 	add.w	r1, sp, #6
 8005e7a:	f000 fc22 	bl	80066c2 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8005e7e:	463c      	mov	r4, r7
 8005e80:	e7da      	b.n	8005e38 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e82:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005e86:	2b03      	cmp	r3, #3
 8005e88:	d109      	bne.n	8005e9e <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f10d 0105 	add.w	r1, sp, #5
 8005e90:	f000 fc17 	bl	80066c2 <USBD_CtlSendData>
 8005e94:	e7d0      	b.n	8005e38 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005e96:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	d0cc      	beq.n	8005e38 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 8005e9e:	4631      	mov	r1, r6
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	f000 fbe7 	bl	8006674 <USBD_CtlError>
          ret = USBD_FAIL;
 8005ea6:	2402      	movs	r4, #2
          break;
 8005ea8:	e7c6      	b.n	8005e38 <USBD_CDC_Setup+0x4a>

08005eaa <USBD_CDC_DeInit>:
{
 8005eaa:	b538      	push	{r3, r4, r5, lr}
 8005eac:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005eae:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005eb0:	2181      	movs	r1, #129	; 0x81
 8005eb2:	f000 fde7 	bl	8006a84 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005eb6:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005eb8:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f000 fde2 	bl	8006a84 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005ec0:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005ec4:	2182      	movs	r1, #130	; 0x82
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f000 fddc 	bl	8006a84 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8005ecc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005ed0:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8005ed2:	b14b      	cbz	r3, 8005ee8 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005ed4:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005edc:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8005ee0:	f000 fe3c 	bl	8006b5c <USBD_static_free>
    pdev->pClassData = NULL;
 8005ee4:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8005ee8:	2000      	movs	r0, #0
 8005eea:	bd38      	pop	{r3, r4, r5, pc}

08005eec <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eec:	7c03      	ldrb	r3, [r0, #16]
{
 8005eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef2:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ef4:	bbcb      	cbnz	r3, 8005f6a <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005efa:	2202      	movs	r2, #2
 8005efc:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005efe:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f00:	f000 fdb0 	bl	8006a64 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f04:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f08:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	4620      	mov	r0, r4
 8005f10:	f000 fda8 	bl	8006a64 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f14:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005f18:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005f1a:	2308      	movs	r3, #8
 8005f1c:	2203      	movs	r2, #3
 8005f1e:	2182      	movs	r1, #130	; 0x82
 8005f20:	4620      	mov	r0, r4
 8005f22:	f000 fd9f 	bl	8006a64 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005f26:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005f28:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005f2c:	f000 fe12 	bl	8006b54 <USBD_static_malloc>
 8005f30:	4606      	mov	r6, r0
 8005f32:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8005f36:	b350      	cbz	r0, 8005f8e <USBD_CDC_Init+0xa2>
    hcdc->TxState = 0U;
 8005f38:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005f3a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f42:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8005f46:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 8005f4a:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f4e:	f1b8 0f00 	cmp.w	r8, #0
 8005f52:	d113      	bne.n	8005f7c <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f58:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8005f5c:	4629      	mov	r1, r5
 8005f5e:	4620      	mov	r0, r4
 8005f60:	f000 fde6 	bl	8006b30 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8005f64:	4640      	mov	r0, r8
}
 8005f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f6a:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f6c:	2340      	movs	r3, #64	; 0x40
 8005f6e:	2202      	movs	r2, #2
 8005f70:	2181      	movs	r1, #129	; 0x81
 8005f72:	f000 fd77 	bl	8006a64 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f76:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f78:	2340      	movs	r3, #64	; 0x40
 8005f7a:	e7c6      	b.n	8005f0a <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f7c:	2340      	movs	r3, #64	; 0x40
 8005f7e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8005f82:	4629      	mov	r1, r5
 8005f84:	4620      	mov	r0, r4
 8005f86:	f000 fdd3 	bl	8006b30 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8005f8a:	4638      	mov	r0, r7
 8005f8c:	e7eb      	b.n	8005f66 <USBD_CDC_Init+0x7a>
    ret = 1U;
 8005f8e:	4628      	mov	r0, r5
 8005f90:	e7e9      	b.n	8005f66 <USBD_CDC_Init+0x7a>

08005f92 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8005f92:	b119      	cbz	r1, 8005f9c <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8005f94:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8005f98:	2000      	movs	r0, #0
 8005f9a:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8005f9c:	2002      	movs	r0, #2
  }

  return ret;
}
 8005f9e:	4770      	bx	lr

08005fa0 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005fa0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8005fa4:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8005fa6:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005faa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8005fae:	4770      	bx	lr

08005fb0 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8005fb0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8005fb4:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8005fb6:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8005fba:	4770      	bx	lr

08005fbc <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005fbc:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8005fc0:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 8005fc2:	b182      	cbz	r2, 8005fe6 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8005fc4:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8005fc8:	2301      	movs	r3, #1
 8005fca:	b974      	cbnz	r4, 8005fea <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005fcc:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005fd0:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005fd4:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005fd6:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005fd8:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	f000 fd99 	bl	8006b14 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8005fe2:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8005fe4:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8005fe6:	2002      	movs	r0, #2
 8005fe8:	e7fc      	b.n	8005fe4 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 8005fea:	4618      	mov	r0, r3
 8005fec:	e7fa      	b.n	8005fe4 <USBD_CDC_TransmitPacket+0x28>

08005fee <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005fee:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8005ff2:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005ff4:	b162      	cbz	r2, 8006010 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ff6:	7c04      	ldrb	r4, [r0, #16]
 8005ff8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8005ffc:	b934      	cbnz	r4, 800600c <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005ffe:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006002:	2101      	movs	r1, #1
 8006004:	f000 fd94 	bl	8006b30 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006008:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 800600a:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800600c:	2340      	movs	r3, #64	; 0x40
 800600e:	e7f8      	b.n	8006002 <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 8006010:	2002      	movs	r0, #2
 8006012:	e7fa      	b.n	800600a <USBD_CDC_ReceivePacket+0x1c>

08006014 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006014:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006016:	b180      	cbz	r0, 800603a <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006018:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800601c:	b113      	cbz	r3, 8006024 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800601e:	2300      	movs	r3, #0
 8006020:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006024:	b109      	cbz	r1, 800602a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8006026:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800602a:	2301      	movs	r3, #1
  pdev->id = id;
 800602c:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800602e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006032:	f000 fcc7 	bl	80069c4 <USBD_LL_Init>

  return USBD_OK;
 8006036:	2000      	movs	r0, #0
}
 8006038:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800603a:	2002      	movs	r0, #2
 800603c:	e7fc      	b.n	8006038 <USBD_Init+0x24>

0800603e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 800603e:	b119      	cbz	r1, 8006048 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006040:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8006044:	2000      	movs	r0, #0
 8006046:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006048:	2002      	movs	r0, #2
  }

  return status;
}
 800604a:	4770      	bx	lr

0800604c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800604c:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800604e:	f000 fcfb 	bl	8006a48 <USBD_LL_Start>

  return USBD_OK;
}
 8006052:	2000      	movs	r0, #0
 8006054:	bd08      	pop	{r3, pc}

08006056 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006056:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8006058:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800605c:	b90b      	cbnz	r3, 8006062 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 800605e:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8006060:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4798      	blx	r3
 8006066:	2800      	cmp	r0, #0
 8006068:	d0fa      	beq.n	8006060 <USBD_SetClassConfig+0xa>
 800606a:	e7f8      	b.n	800605e <USBD_SetClassConfig+0x8>

0800606c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800606c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800606e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	4798      	blx	r3

  return USBD_OK;
}
 8006076:	2000      	movs	r0, #0
 8006078:	bd08      	pop	{r3, pc}

0800607a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800607a:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800607c:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8006080:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006082:	4628      	mov	r0, r5
 8006084:	f000 fae2 	bl	800664c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006088:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800608a:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 800608e:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8006092:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8006096:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800609a:	f001 031f 	and.w	r3, r1, #31
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d00e      	beq.n	80060c0 <USBD_LL_SetupStage+0x46>
 80060a2:	d307      	bcc.n	80060b4 <USBD_LL_SetupStage+0x3a>
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d010      	beq.n	80060ca <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80060a8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80060ac:	4620      	mov	r0, r4
 80060ae:	f000 fcf7 	bl	8006aa0 <USBD_LL_StallEP>
      break;
 80060b2:	e003      	b.n	80060bc <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 80060b4:	4629      	mov	r1, r5
 80060b6:	4620      	mov	r0, r4
 80060b8:	f000 f8f6 	bl	80062a8 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80060bc:	2000      	movs	r0, #0
 80060be:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80060c0:	4629      	mov	r1, r5
 80060c2:	4620      	mov	r0, r4
 80060c4:	f000 fa14 	bl	80064f0 <USBD_StdItfReq>
      break;
 80060c8:	e7f8      	b.n	80060bc <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 80060ca:	4629      	mov	r1, r5
 80060cc:	4620      	mov	r0, r4
 80060ce:	f000 fa34 	bl	800653a <USBD_StdEPReq>
      break;
 80060d2:	e7f3      	b.n	80060bc <USBD_LL_SetupStage+0x42>

080060d4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80060d4:	b570      	push	{r4, r5, r6, lr}
 80060d6:	4605      	mov	r5, r0
 80060d8:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80060da:	bb49      	cbnz	r1, 8006130 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80060dc:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80060e0:	2b03      	cmp	r3, #3
 80060e2:	d11e      	bne.n	8006122 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 80060e4:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 80060e8:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d90b      	bls.n	8006108 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 80060f0:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 80060f2:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 80060f4:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 80060f8:	bf8c      	ite	hi
 80060fa:	b29a      	uxthhi	r2, r3
 80060fc:	b292      	uxthls	r2, r2
 80060fe:	4631      	mov	r1, r6
 8006100:	f000 fb03 	bl	800670a <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8006104:	2000      	movs	r0, #0
}
 8006106:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006108:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	b123      	cbz	r3, 800611a <USBD_LL_DataOutStage+0x46>
 8006110:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006114:	2a03      	cmp	r2, #3
 8006116:	d100      	bne.n	800611a <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8006118:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800611a:	4628      	mov	r0, r5
 800611c:	f000 fafd 	bl	800671a <USBD_CtlSendStatus>
 8006120:	e7f0      	b.n	8006104 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006122:	2b05      	cmp	r3, #5
 8006124:	d1ee      	bne.n	8006104 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8006126:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800612a:	f000 fcb9 	bl	8006aa0 <USBD_LL_StallEP>
 800612e:	e7e9      	b.n	8006104 <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 8006130:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	b12b      	cbz	r3, 8006144 <USBD_LL_DataOutStage+0x70>
 8006138:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800613c:	2a03      	cmp	r2, #3
 800613e:	d101      	bne.n	8006144 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8006140:	4798      	blx	r3
 8006142:	e7df      	b.n	8006104 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8006144:	2002      	movs	r0, #2
 8006146:	e7de      	b.n	8006106 <USBD_LL_DataOutStage+0x32>

08006148 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006148:	b570      	push	{r4, r5, r6, lr}
 800614a:	4613      	mov	r3, r2
 800614c:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800614e:	460e      	mov	r6, r1
 8006150:	2900      	cmp	r1, #0
 8006152:	d147      	bne.n	80061e4 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006154:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8006158:	2a02      	cmp	r2, #2
 800615a:	d13c      	bne.n	80061d6 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 800615c:	e9d0 5208 	ldrd	r5, r2, [r0, #32]
 8006160:	4295      	cmp	r5, r2
 8006162:	d913      	bls.n	800618c <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8006164:	1aaa      	subs	r2, r5, r2
 8006166:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006168:	4619      	mov	r1, r3
 800616a:	b292      	uxth	r2, r2
 800616c:	f000 fab6 	bl	80066dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006170:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006172:	461a      	mov	r2, r3
 8006174:	4619      	mov	r1, r3
 8006176:	4620      	mov	r0, r4
 8006178:	f000 fcda 	bl	8006b30 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800617c:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8006180:	2000      	movs	r0, #0
 8006182:	2b01      	cmp	r3, #1
 8006184:	d101      	bne.n	800618a <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8006186:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800618a:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800618c:	69c3      	ldr	r3, [r0, #28]
 800618e:	fbb3 f5f2 	udiv	r5, r3, r2
 8006192:	fb02 3515 	mls	r5, r2, r5, r3
 8006196:	b965      	cbnz	r5, 80061b2 <USBD_LL_DataInStage+0x6a>
 8006198:	429a      	cmp	r2, r3
 800619a:	d80a      	bhi.n	80061b2 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 800619c:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d206      	bcs.n	80061b2 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80061a4:	462a      	mov	r2, r5
 80061a6:	f000 fa99 	bl	80066dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80061aa:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061ae:	462b      	mov	r3, r5
 80061b0:	e7df      	b.n	8006172 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80061b2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	b12b      	cbz	r3, 80061c6 <USBD_LL_DataInStage+0x7e>
 80061ba:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80061be:	2a03      	cmp	r2, #3
 80061c0:	d101      	bne.n	80061c6 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 80061c2:	4620      	mov	r0, r4
 80061c4:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80061c6:	2180      	movs	r1, #128	; 0x80
 80061c8:	4620      	mov	r0, r4
 80061ca:	f000 fc69 	bl	8006aa0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80061ce:	4620      	mov	r0, r4
 80061d0:	f000 faae 	bl	8006730 <USBD_CtlReceiveStatus>
 80061d4:	e7d2      	b.n	800617c <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80061d6:	f032 0304 	bics.w	r3, r2, #4
 80061da:	d1cf      	bne.n	800617c <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80061dc:	2180      	movs	r1, #128	; 0x80
 80061de:	f000 fc5f 	bl	8006aa0 <USBD_LL_StallEP>
 80061e2:	e7cb      	b.n	800617c <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 80061e4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	b133      	cbz	r3, 80061fa <USBD_LL_DataInStage+0xb2>
 80061ec:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80061f0:	2a03      	cmp	r2, #3
 80061f2:	d102      	bne.n	80061fa <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 80061f4:	4798      	blx	r3
  return USBD_OK;
 80061f6:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80061f8:	e7c7      	b.n	800618a <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 80061fa:	2002      	movs	r0, #2
 80061fc:	e7c5      	b.n	800618a <USBD_LL_DataInStage+0x42>

080061fe <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061fe:	2200      	movs	r2, #0
{
 8006200:	b570      	push	{r4, r5, r6, lr}
 8006202:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006204:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006206:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006208:	4611      	mov	r1, r2
 800620a:	2340      	movs	r3, #64	; 0x40
 800620c:	f000 fc2a 	bl	8006a64 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006210:	4633      	mov	r3, r6
 8006212:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006214:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006218:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800621c:	2200      	movs	r2, #0
 800621e:	4620      	mov	r0, r4
 8006220:	f000 fc20 	bl	8006a64 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8006224:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8006226:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800622a:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800622c:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800622e:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006232:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8006236:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8006238:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 800623c:	b123      	cbz	r3, 8006248 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800623e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8006242:	4620      	mov	r0, r4
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	4798      	blx	r3
  }

  return USBD_OK;
}
 8006248:	2000      	movs	r0, #0
 800624a:	bd70      	pop	{r4, r5, r6, pc}

0800624c <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800624c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800624e:	2000      	movs	r0, #0
 8006250:	4770      	bx	lr

08006252 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8006252:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006256:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800625a:	2304      	movs	r3, #4
 800625c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8006260:	2000      	movs	r0, #0
 8006262:	4770      	bx	lr

08006264 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006264:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006268:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800626a:	bf04      	itt	eq
 800626c:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8006270:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8006274:	2000      	movs	r0, #0
 8006276:	4770      	bx	lr

08006278 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006278:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800627a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800627e:	2a03      	cmp	r2, #3
 8006280:	d104      	bne.n	800628c <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8006282:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	b103      	cbz	r3, 800628c <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800628a:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 800628c:	2000      	movs	r0, #0
 800628e:	bd08      	pop	{r3, pc}

08006290 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8006290:	b510      	push	{r4, lr}
 8006292:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8006294:	2180      	movs	r1, #128	; 0x80
 8006296:	f000 fc03 	bl	8006aa0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800629a:	4620      	mov	r0, r4
}
 800629c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80062a0:	2100      	movs	r1, #0
 80062a2:	f000 bbfd 	b.w	8006aa0 <USBD_LL_StallEP>
	...

080062a8 <USBD_StdDevReq>:
{
 80062a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062aa:	780b      	ldrb	r3, [r1, #0]
{
 80062ac:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062b2:	2b20      	cmp	r3, #32
{
 80062b4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062b6:	d012      	beq.n	80062de <USBD_StdDevReq+0x36>
 80062b8:	2b40      	cmp	r3, #64	; 0x40
 80062ba:	d010      	beq.n	80062de <USBD_StdDevReq+0x36>
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d15b      	bne.n	8006378 <USBD_StdDevReq+0xd0>
      switch (req->bRequest)
 80062c0:	784b      	ldrb	r3, [r1, #1]
 80062c2:	2b09      	cmp	r3, #9
 80062c4:	d858      	bhi.n	8006378 <USBD_StdDevReq+0xd0>
 80062c6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80062ca:	00e9      	.short	0x00e9
 80062cc:	00570105 	.word	0x00570105
 80062d0:	005700fe 	.word	0x005700fe
 80062d4:	00130084 	.word	0x00130084
 80062d8:	00d20057 	.word	0x00d20057
 80062dc:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 80062de:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80062e2:	4629      	mov	r1, r5
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	4620      	mov	r0, r4
 80062e8:	4798      	blx	r3
}
 80062ea:	2000      	movs	r0, #0
 80062ec:	b003      	add	sp, #12
 80062ee:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 80062f0:	2300      	movs	r3, #0
 80062f2:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80062f6:	884b      	ldrh	r3, [r1, #2]
 80062f8:	0a1a      	lsrs	r2, r3, #8
 80062fa:	3a01      	subs	r2, #1
 80062fc:	2a06      	cmp	r2, #6
 80062fe:	d83b      	bhi.n	8006378 <USBD_StdDevReq+0xd0>
 8006300:	e8df f002 	tbb	[pc, r2]
 8006304:	3a2d2004 	.word	0x3a2d2004
 8006308:	523a      	.short	0x523a
 800630a:	5c          	.byte	0x5c
 800630b:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800630c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006310:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006312:	f10d 0106 	add.w	r1, sp, #6
 8006316:	7c20      	ldrb	r0, [r4, #16]
 8006318:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800631a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800631e:	b152      	cbz	r2, 8006336 <USBD_StdDevReq+0x8e>
 8006320:	88eb      	ldrh	r3, [r5, #6]
 8006322:	b143      	cbz	r3, 8006336 <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 8006324:	429a      	cmp	r2, r3
 8006326:	bf28      	it	cs
 8006328:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800632a:	4601      	mov	r1, r0
 800632c:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800632e:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006332:	f000 f9c6 	bl	80066c2 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8006336:	88eb      	ldrh	r3, [r5, #6]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1d6      	bne.n	80062ea <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 800633c:	4620      	mov	r0, r4
 800633e:	f000 f9ec 	bl	800671a <USBD_CtlSendStatus>
 8006342:	e7d2      	b.n	80062ea <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006344:	7c02      	ldrb	r2, [r0, #16]
 8006346:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800634a:	b932      	cbnz	r2, 800635a <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800634c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800634e:	f10d 0006 	add.w	r0, sp, #6
 8006352:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006354:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006356:	7043      	strb	r3, [r0, #1]
 8006358:	e7df      	b.n	800631a <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800635a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635c:	e7f7      	b.n	800634e <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b05      	cmp	r3, #5
 8006362:	d809      	bhi.n	8006378 <USBD_StdDevReq+0xd0>
 8006364:	e8df f003 	tbb	[pc, r3]
 8006368:	14100c03 	.word	0x14100c03
 800636c:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800636e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006372:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1cc      	bne.n	8006312 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8006378:	4620      	mov	r0, r4
 800637a:	f7ff ff89 	bl	8006290 <USBD_CtlError.constprop.1>
 800637e:	e7b4      	b.n	80062ea <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006380:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	e7f5      	b.n	8006374 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006388:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	e7f1      	b.n	8006374 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006390:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	e7ed      	b.n	8006374 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006398:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	e7e9      	b.n	8006374 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80063a0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	e7e5      	b.n	8006374 <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063a8:	7c03      	ldrb	r3, [r0, #16]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1e4      	bne.n	8006378 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80063ae:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80063b2:	f10d 0006 	add.w	r0, sp, #6
 80063b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b8:	4798      	blx	r3
 80063ba:	e7ae      	b.n	800631a <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063bc:	7c03      	ldrb	r3, [r0, #16]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1da      	bne.n	8006378 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80063c2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80063c6:	f10d 0006 	add.w	r0, sp, #6
 80063ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063cc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80063ce:	2307      	movs	r3, #7
 80063d0:	e7c1      	b.n	8006356 <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80063d2:	888b      	ldrh	r3, [r1, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1cf      	bne.n	8006378 <USBD_StdDevReq+0xd0>
 80063d8:	88cb      	ldrh	r3, [r1, #6]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1cc      	bne.n	8006378 <USBD_StdDevReq+0xd0>
 80063de:	884d      	ldrh	r5, [r1, #2]
 80063e0:	2d7f      	cmp	r5, #127	; 0x7f
 80063e2:	d8c9      	bhi.n	8006378 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063e4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80063e8:	2b03      	cmp	r3, #3
 80063ea:	d0c5      	beq.n	8006378 <USBD_StdDevReq+0xd0>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80063ec:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 80063ee:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80063f2:	f000 fb81 	bl	8006af8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80063f6:	4620      	mov	r0, r4
 80063f8:	f000 f98f 	bl	800671a <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80063fc:	b11d      	cbz	r5, 8006406 <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80063fe:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006400:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8006404:	e771      	b.n	80062ea <USBD_StdDevReq+0x42>
 8006406:	2301      	movs	r3, #1
 8006408:	e7fa      	b.n	8006400 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 800640a:	7889      	ldrb	r1, [r1, #2]
 800640c:	4d37      	ldr	r5, [pc, #220]	; (80064ec <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800640e:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8006410:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006412:	d8b1      	bhi.n	8006378 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8006414:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006418:	2b02      	cmp	r3, #2
 800641a:	d008      	beq.n	800642e <USBD_StdDevReq+0x186>
 800641c:	2b03      	cmp	r3, #3
 800641e:	d014      	beq.n	800644a <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 8006420:	f7ff ff36 	bl	8006290 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006424:	7829      	ldrb	r1, [r5, #0]
 8006426:	4620      	mov	r0, r4
 8006428:	f7ff fe20 	bl	800606c <USBD_ClrClassConfig>
 800642c:	e75d      	b.n	80062ea <USBD_StdDevReq+0x42>
        if (cfgidx)
 800642e:	2900      	cmp	r1, #0
 8006430:	d084      	beq.n	800633c <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 8006432:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006434:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8006436:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006438:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800643c:	4620      	mov	r0, r4
 800643e:	f7ff fe0a 	bl	8006056 <USBD_SetClassConfig>
 8006442:	2802      	cmp	r0, #2
 8006444:	f47f af7a 	bne.w	800633c <USBD_StdDevReq+0x94>
 8006448:	e796      	b.n	8006378 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 800644a:	b931      	cbnz	r1, 800645a <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800644c:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800644e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006450:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8006454:	f7ff fe0a 	bl	800606c <USBD_ClrClassConfig>
 8006458:	e770      	b.n	800633c <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 800645a:	6841      	ldr	r1, [r0, #4]
 800645c:	2901      	cmp	r1, #1
 800645e:	f43f af6d 	beq.w	800633c <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006462:	b2c9      	uxtb	r1, r1
 8006464:	f7ff fe02 	bl	800606c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006468:	7829      	ldrb	r1, [r5, #0]
 800646a:	6061      	str	r1, [r4, #4]
 800646c:	e7e6      	b.n	800643c <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 800646e:	88ca      	ldrh	r2, [r1, #6]
 8006470:	2a01      	cmp	r2, #1
 8006472:	d181      	bne.n	8006378 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8006474:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006478:	2b00      	cmp	r3, #0
 800647a:	f43f af7d 	beq.w	8006378 <USBD_StdDevReq+0xd0>
 800647e:	2b02      	cmp	r3, #2
 8006480:	d904      	bls.n	800648c <USBD_StdDevReq+0x1e4>
 8006482:	2b03      	cmp	r3, #3
 8006484:	f47f af78 	bne.w	8006378 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006488:	1d01      	adds	r1, r0, #4
 800648a:	e003      	b.n	8006494 <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 800648c:	4601      	mov	r1, r0
 800648e:	2300      	movs	r3, #0
 8006490:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006494:	4620      	mov	r0, r4
 8006496:	f000 f914 	bl	80066c2 <USBD_CtlSendData>
 800649a:	e726      	b.n	80062ea <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 800649c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80064a0:	3b01      	subs	r3, #1
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	f63f af68 	bhi.w	8006378 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 80064a8:	88cb      	ldrh	r3, [r1, #6]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	f47f af64 	bne.w	8006378 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80064b0:	2301      	movs	r3, #1
 80064b2:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80064b4:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80064b8:	b10b      	cbz	r3, 80064be <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80064ba:	2303      	movs	r3, #3
 80064bc:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80064be:	2202      	movs	r2, #2
 80064c0:	f104 010c 	add.w	r1, r4, #12
 80064c4:	e7e6      	b.n	8006494 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80064c6:	884b      	ldrh	r3, [r1, #2]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	f47f af0e 	bne.w	80062ea <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80064ce:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 80064d2:	e733      	b.n	800633c <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 80064d4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80064d8:	3b01      	subs	r3, #1
 80064da:	2b02      	cmp	r3, #2
 80064dc:	f63f af4c 	bhi.w	8006378 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80064e0:	884b      	ldrh	r3, [r1, #2]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	f47f af01 	bne.w	80062ea <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80064e8:	2300      	movs	r3, #0
 80064ea:	e7f0      	b.n	80064ce <USBD_StdDevReq+0x226>
 80064ec:	200003c4 	.word	0x200003c4

080064f0 <USBD_StdItfReq>:
{
 80064f0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064f2:	780b      	ldrb	r3, [r1, #0]
{
 80064f4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064fa:	2b20      	cmp	r3, #32
{
 80064fc:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064fe:	d002      	beq.n	8006506 <USBD_StdItfReq+0x16>
 8006500:	2b40      	cmp	r3, #64	; 0x40
 8006502:	d000      	beq.n	8006506 <USBD_StdItfReq+0x16>
 8006504:	b9ab      	cbnz	r3, 8006532 <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 8006506:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800650a:	3b01      	subs	r3, #1
 800650c:	2b02      	cmp	r3, #2
 800650e:	d810      	bhi.n	8006532 <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006510:	792b      	ldrb	r3, [r5, #4]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d80d      	bhi.n	8006532 <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006516:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800651a:	4629      	mov	r1, r5
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	4620      	mov	r0, r4
 8006520:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006522:	88eb      	ldrh	r3, [r5, #6]
 8006524:	b91b      	cbnz	r3, 800652e <USBD_StdItfReq+0x3e>
 8006526:	b910      	cbnz	r0, 800652e <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8006528:	4620      	mov	r0, r4
 800652a:	f000 f8f6 	bl	800671a <USBD_CtlSendStatus>
}
 800652e:	2000      	movs	r0, #0
 8006530:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8006532:	4620      	mov	r0, r4
 8006534:	f7ff feac 	bl	8006290 <USBD_CtlError.constprop.1>
          break;
 8006538:	e7f9      	b.n	800652e <USBD_StdItfReq+0x3e>

0800653a <USBD_StdEPReq>:
{
 800653a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800653c:	780a      	ldrb	r2, [r1, #0]
{
 800653e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006540:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8006544:	2a20      	cmp	r2, #32
{
 8006546:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006548:	d014      	beq.n	8006574 <USBD_StdEPReq+0x3a>
 800654a:	2a40      	cmp	r2, #64	; 0x40
 800654c:	d012      	beq.n	8006574 <USBD_StdEPReq+0x3a>
 800654e:	b96a      	cbnz	r2, 800656c <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 8006550:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8006552:	888d      	ldrh	r5, [r1, #4]
      switch (req->bRequest)
 8006554:	2a01      	cmp	r2, #1
  ep_addr  = LOBYTE(req->wIndex);
 8006556:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8006558:	d020      	beq.n	800659c <USBD_StdEPReq+0x62>
 800655a:	d336      	bcc.n	80065ca <USBD_StdEPReq+0x90>
 800655c:	2a03      	cmp	r2, #3
 800655e:	d105      	bne.n	800656c <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8006560:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006564:	2a02      	cmp	r2, #2
 8006566:	d027      	beq.n	80065b8 <USBD_StdEPReq+0x7e>
 8006568:	2a03      	cmp	r2, #3
 800656a:	d00b      	beq.n	8006584 <USBD_StdEPReq+0x4a>
              USBD_CtlError(pdev, req);
 800656c:	4620      	mov	r0, r4
 800656e:	f7ff fe8f 	bl	8006290 <USBD_CtlError.constprop.1>
              break;
 8006572:	e005      	b.n	8006580 <USBD_StdEPReq+0x46>
      pdev->pClass->Setup(pdev, req);
 8006574:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8006578:	4619      	mov	r1, r3
 800657a:	6892      	ldr	r2, [r2, #8]
 800657c:	4620      	mov	r0, r4
 800657e:	4790      	blx	r2
}
 8006580:	2000      	movs	r0, #0
 8006582:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006584:	885a      	ldrh	r2, [r3, #2]
 8006586:	b92a      	cbnz	r2, 8006594 <USBD_StdEPReq+0x5a>
                if ((ep_addr != 0x00U) &&
 8006588:	064a      	lsls	r2, r1, #25
 800658a:	d003      	beq.n	8006594 <USBD_StdEPReq+0x5a>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800658c:	88db      	ldrh	r3, [r3, #6]
 800658e:	b90b      	cbnz	r3, 8006594 <USBD_StdEPReq+0x5a>
                  USBD_LL_StallEP(pdev, ep_addr);
 8006590:	f000 fa86 	bl	8006aa0 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8006594:	4620      	mov	r0, r4
 8006596:	f000 f8c0 	bl	800671a <USBD_CtlSendStatus>
              break;
 800659a:	e7f1      	b.n	8006580 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 800659c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80065a0:	2a02      	cmp	r2, #2
 80065a2:	d009      	beq.n	80065b8 <USBD_StdEPReq+0x7e>
 80065a4:	2a03      	cmp	r2, #3
 80065a6:	d1e1      	bne.n	800656c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80065a8:	885b      	ldrh	r3, [r3, #2]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1e8      	bne.n	8006580 <USBD_StdEPReq+0x46>
                if ((ep_addr & 0x7FU) != 0x00U)
 80065ae:	064d      	lsls	r5, r1, #25
 80065b0:	d0f0      	beq.n	8006594 <USBD_StdEPReq+0x5a>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80065b2:	f000 fa83 	bl	8006abc <USBD_LL_ClearStallEP>
 80065b6:	e7ed      	b.n	8006594 <USBD_StdEPReq+0x5a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065b8:	064b      	lsls	r3, r1, #25
 80065ba:	d0d7      	beq.n	800656c <USBD_StdEPReq+0x32>
                USBD_LL_StallEP(pdev, ep_addr);
 80065bc:	f000 fa70 	bl	8006aa0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80065c0:	2180      	movs	r1, #128	; 0x80
 80065c2:	4620      	mov	r0, r4
 80065c4:	f000 fa6c 	bl	8006aa0 <USBD_LL_StallEP>
 80065c8:	e7da      	b.n	8006580 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 80065ca:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d018      	beq.n	8006604 <USBD_StdEPReq+0xca>
 80065d2:	2b03      	cmp	r3, #3
 80065d4:	d1ca      	bne.n	800656c <USBD_StdEPReq+0x32>
 80065d6:	2314      	movs	r3, #20
 80065d8:	f001 020f 	and.w	r2, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80065dc:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80065e0:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80065e4:	d01f      	beq.n	8006626 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80065e6:	6992      	ldr	r2, [r2, #24]
 80065e8:	2a00      	cmp	r2, #0
 80065ea:	d0bf      	beq.n	800656c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065ec:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80065f0:	fb05 3503 	mla	r5, r5, r3, r3
 80065f4:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80065f6:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80065fa:	d11f      	bne.n	800663c <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 80065fc:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80065fe:	2202      	movs	r2, #2
 8006600:	4629      	mov	r1, r5
 8006602:	e00c      	b.n	800661e <USBD_StdEPReq+0xe4>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006604:	064a      	lsls	r2, r1, #25
 8006606:	d1b1      	bne.n	800656c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006608:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 800660a:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800660e:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006612:	bf4c      	ite	mi
 8006614:	f100 0114 	addmi.w	r1, r0, #20
 8006618:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 800661c:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800661e:	4620      	mov	r0, r4
 8006620:	f000 f84f 	bl	80066c2 <USBD_CtlSendData>
              break;
 8006624:	e7ac      	b.n	8006580 <USBD_StdEPReq+0x46>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006626:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 800662a:	2a00      	cmp	r2, #0
 800662c:	d09e      	beq.n	800656c <USBD_StdEPReq+0x32>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800662e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006632:	fb03 0505 	mla	r5, r3, r5, r0
 8006636:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 800663a:	e7dc      	b.n	80065f6 <USBD_StdEPReq+0xbc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800663c:	4620      	mov	r0, r4
 800663e:	f000 fa4b 	bl	8006ad8 <USBD_LL_IsStallEP>
 8006642:	b108      	cbz	r0, 8006648 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 8006644:	2301      	movs	r3, #1
 8006646:	e7d9      	b.n	80065fc <USBD_StdEPReq+0xc2>
                pep->status = 0x0000U;
 8006648:	6028      	str	r0, [r5, #0]
 800664a:	e7d8      	b.n	80065fe <USBD_StdEPReq+0xc4>

0800664c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800664c:	780b      	ldrb	r3, [r1, #0]
 800664e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006650:	784b      	ldrb	r3, [r1, #1]
 8006652:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006654:	78ca      	ldrb	r2, [r1, #3]
 8006656:	788b      	ldrb	r3, [r1, #2]
 8006658:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800665c:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800665e:	794a      	ldrb	r2, [r1, #5]
 8006660:	790b      	ldrb	r3, [r1, #4]
 8006662:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006666:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006668:	79ca      	ldrb	r2, [r1, #7]
 800666a:	798b      	ldrb	r3, [r1, #6]
 800666c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006670:	80c3      	strh	r3, [r0, #6]
}
 8006672:	4770      	bx	lr

08006674 <USBD_CtlError>:
{
 8006674:	b510      	push	{r4, lr}
 8006676:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8006678:	2180      	movs	r1, #128	; 0x80
 800667a:	f000 fa11 	bl	8006aa0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800667e:	4620      	mov	r0, r4
}
 8006680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8006684:	2100      	movs	r1, #0
 8006686:	f000 ba0b 	b.w	8006aa0 <USBD_LL_StallEP>

0800668a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800668a:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 800668c:	b188      	cbz	r0, 80066b2 <USBD_GetString+0x28>
 800668e:	4605      	mov	r5, r0
 8006690:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8006692:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2c00      	cmp	r4, #0
 800669a:	d1f9      	bne.n	8006690 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800669c:	3301      	adds	r3, #1
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80066a2:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80066a4:	2303      	movs	r3, #3
 80066a6:	704b      	strb	r3, [r1, #1]
 80066a8:	2302      	movs	r3, #2
 80066aa:	3801      	subs	r0, #1
    while (*desc != '\0')
 80066ac:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80066b0:	b905      	cbnz	r5, 80066b4 <USBD_GetString+0x2a>
}
 80066b2:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80066b4:	1c5a      	adds	r2, r3, #1
 80066b6:	54cd      	strb	r5, [r1, r3]
 80066b8:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80066ba:	3302      	adds	r3, #2
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	548c      	strb	r4, [r1, r2]
 80066c0:	e7f4      	b.n	80066ac <USBD_GetString+0x22>

080066c2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80066c2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80066c4:	2202      	movs	r2, #2
{
 80066c6:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80066c8:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80066cc:	e9c0 3307 	strd	r3, r3, [r0, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80066d0:	460a      	mov	r2, r1
 80066d2:	2100      	movs	r1, #0
 80066d4:	f000 fa1e 	bl	8006b14 <USBD_LL_Transmit>

  return USBD_OK;
}
 80066d8:	2000      	movs	r0, #0
 80066da:	bd10      	pop	{r4, pc}

080066dc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80066dc:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80066de:	4613      	mov	r3, r2
 80066e0:	460a      	mov	r2, r1
 80066e2:	2100      	movs	r1, #0
 80066e4:	f000 fa16 	bl	8006b14 <USBD_LL_Transmit>

  return USBD_OK;
}
 80066e8:	2000      	movs	r0, #0
 80066ea:	bd08      	pop	{r3, pc}

080066ec <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80066ec:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80066ee:	2203      	movs	r2, #3
{
 80066f0:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80066f2:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80066f6:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80066fa:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80066fc:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006700:	2100      	movs	r1, #0
 8006702:	f000 fa15 	bl	8006b30 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006706:	2000      	movs	r0, #0
 8006708:	bd10      	pop	{r4, pc}

0800670a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800670a:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800670c:	4613      	mov	r3, r2
 800670e:	460a      	mov	r2, r1
 8006710:	2100      	movs	r1, #0
 8006712:	f000 fa0d 	bl	8006b30 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006716:	2000      	movs	r0, #0
 8006718:	bd08      	pop	{r3, pc}

0800671a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800671a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800671c:	2304      	movs	r3, #4
 800671e:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006722:	2300      	movs	r3, #0
 8006724:	461a      	mov	r2, r3
 8006726:	4619      	mov	r1, r3
 8006728:	f000 f9f4 	bl	8006b14 <USBD_LL_Transmit>

  return USBD_OK;
}
 800672c:	2000      	movs	r0, #0
 800672e:	bd08      	pop	{r3, pc}

08006730 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006730:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006732:	2305      	movs	r3, #5
 8006734:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006738:	2300      	movs	r3, #0
 800673a:	461a      	mov	r2, r3
 800673c:	4619      	mov	r1, r3
 800673e:	f000 f9f7 	bl	8006b30 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006742:	2000      	movs	r0, #0
 8006744:	bd08      	pop	{r3, pc}
	...

08006748 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006748:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800674a:	2200      	movs	r2, #0
 800674c:	490e      	ldr	r1, [pc, #56]	; (8006788 <MX_USB_DEVICE_Init+0x40>)
 800674e:	480f      	ldr	r0, [pc, #60]	; (800678c <MX_USB_DEVICE_Init+0x44>)
 8006750:	f7ff fc60 	bl	8006014 <USBD_Init>
 8006754:	b108      	cbz	r0, 800675a <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8006756:	f7fb fc39 	bl	8001fcc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800675a:	490d      	ldr	r1, [pc, #52]	; (8006790 <MX_USB_DEVICE_Init+0x48>)
 800675c:	480b      	ldr	r0, [pc, #44]	; (800678c <MX_USB_DEVICE_Init+0x44>)
 800675e:	f7ff fc6e 	bl	800603e <USBD_RegisterClass>
 8006762:	b108      	cbz	r0, 8006768 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8006764:	f7fb fc32 	bl	8001fcc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006768:	490a      	ldr	r1, [pc, #40]	; (8006794 <MX_USB_DEVICE_Init+0x4c>)
 800676a:	4808      	ldr	r0, [pc, #32]	; (800678c <MX_USB_DEVICE_Init+0x44>)
 800676c:	f7ff fc11 	bl	8005f92 <USBD_CDC_RegisterInterface>
 8006770:	b108      	cbz	r0, 8006776 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8006772:	f7fb fc2b 	bl	8001fcc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006776:	4805      	ldr	r0, [pc, #20]	; (800678c <MX_USB_DEVICE_Init+0x44>)
 8006778:	f7ff fc68 	bl	800604c <USBD_Start>
 800677c:	b118      	cbz	r0, 8006786 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800677e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006782:	f7fb bc23 	b.w	8001fcc <Error_Handler>
}
 8006786:	bd08      	pop	{r3, pc}
 8006788:	20000164 	.word	0x20000164
 800678c:	20000d2c 	.word	0x20000d2c
 8006790:	20000044 	.word	0x20000044
 8006794:	20000154 	.word	0x20000154

08006798 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8006798:	2000      	movs	r0, #0
 800679a:	4770      	bx	lr

0800679c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800679c:	2000      	movs	r0, #0
 800679e:	4770      	bx	lr

080067a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80067a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80067a2:	4c05      	ldr	r4, [pc, #20]	; (80067b8 <CDC_Receive_FS+0x18>)
 80067a4:	4601      	mov	r1, r0
 80067a6:	4620      	mov	r0, r4
 80067a8:	f7ff fc02 	bl	8005fb0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80067ac:	4620      	mov	r0, r4
 80067ae:	f7ff fc1e 	bl	8005fee <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80067b2:	2000      	movs	r0, #0
 80067b4:	bd10      	pop	{r4, pc}
 80067b6:	bf00      	nop
 80067b8:	20000d2c 	.word	0x20000d2c

080067bc <CDC_Init_FS>:
{
 80067bc:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80067be:	4c06      	ldr	r4, [pc, #24]	; (80067d8 <CDC_Init_FS+0x1c>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	4906      	ldr	r1, [pc, #24]	; (80067dc <CDC_Init_FS+0x20>)
 80067c4:	4620      	mov	r0, r4
 80067c6:	f7ff fbeb 	bl	8005fa0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80067ca:	4905      	ldr	r1, [pc, #20]	; (80067e0 <CDC_Init_FS+0x24>)
 80067cc:	4620      	mov	r0, r4
 80067ce:	f7ff fbef 	bl	8005fb0 <USBD_CDC_SetRxBuffer>
}
 80067d2:	2000      	movs	r0, #0
 80067d4:	bd10      	pop	{r4, pc}
 80067d6:	bf00      	nop
 80067d8:	20000d2c 	.word	0x20000d2c
 80067dc:	200013d8 	.word	0x200013d8
 80067e0:	20000ff0 	.word	0x20000ff0

080067e4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80067e4:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80067e6:	4c09      	ldr	r4, [pc, #36]	; (800680c <CDC_Transmit_FS+0x28>)
{
 80067e8:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80067ea:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 80067ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067f2:	b943      	cbnz	r3, 8006806 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80067f4:	4601      	mov	r1, r0
 80067f6:	4620      	mov	r0, r4
 80067f8:	f7ff fbd2 	bl	8005fa0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80067fc:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 80067fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006802:	f7ff bbdb 	b.w	8005fbc <USBD_CDC_TransmitPacket>
}
 8006806:	2001      	movs	r0, #1
 8006808:	bd10      	pop	{r4, pc}
 800680a:	bf00      	nop
 800680c:	20000d2c 	.word	0x20000d2c

08006810 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006810:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8006812:	4801      	ldr	r0, [pc, #4]	; (8006818 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8006814:	800b      	strh	r3, [r1, #0]
}
 8006816:	4770      	bx	lr
 8006818:	20000180 	.word	0x20000180

0800681c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800681c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800681e:	4801      	ldr	r0, [pc, #4]	; (8006824 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8006820:	800b      	strh	r3, [r1, #0]
}
 8006822:	4770      	bx	lr
 8006824:	20000194 	.word	0x20000194

08006828 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006828:	2300      	movs	r3, #0
 800682a:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800682c:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 800682e:	0f05      	lsrs	r5, r0, #28
 8006830:	b2ec      	uxtb	r4, r5
 8006832:	2d09      	cmp	r5, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8006834:	bf94      	ite	ls
 8006836:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006838:	3437      	addhi	r4, #55	; 0x37
 800683a:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 800683e:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8006842:	3301      	adds	r3, #1
 8006844:	7066      	strb	r6, [r4, #1]
  for (idx = 0; idx < len; idx++)
 8006846:	b2dc      	uxtb	r4, r3
 8006848:	42a2      	cmp	r2, r4
    value = value << 4;
 800684a:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 800684e:	d8ee      	bhi.n	800682e <IntToUnicode+0x6>
  }
}
 8006850:	bd70      	pop	{r4, r5, r6, pc}
	...

08006854 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8006854:	231a      	movs	r3, #26
{
 8006856:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8006858:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800685a:	4b09      	ldr	r3, [pc, #36]	; (8006880 <USBD_FS_SerialStrDescriptor+0x2c>)
 800685c:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800685e:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8006860:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8006862:	18c0      	adds	r0, r0, r3
 8006864:	d00a      	beq.n	800687c <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006866:	4b07      	ldr	r3, [pc, #28]	; (8006884 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006868:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800686a:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800686c:	4906      	ldr	r1, [pc, #24]	; (8006888 <USBD_FS_SerialStrDescriptor+0x34>)
 800686e:	f7ff ffdb 	bl	8006828 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006872:	2204      	movs	r2, #4
 8006874:	4905      	ldr	r1, [pc, #20]	; (800688c <USBD_FS_SerialStrDescriptor+0x38>)
 8006876:	4620      	mov	r0, r4
 8006878:	f7ff ffd6 	bl	8006828 <IntToUnicode>
}
 800687c:	4804      	ldr	r0, [pc, #16]	; (8006890 <USBD_FS_SerialStrDescriptor+0x3c>)
 800687e:	bd10      	pop	{r4, pc}
 8006880:	1ffff7e8 	.word	0x1ffff7e8
 8006884:	1ffff7ec 	.word	0x1ffff7ec
 8006888:	2000019a 	.word	0x2000019a
 800688c:	200001aa 	.word	0x200001aa
 8006890:	20000198 	.word	0x20000198

08006894 <USBD_FS_ManufacturerStrDescriptor>:
{
 8006894:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006896:	4c04      	ldr	r4, [pc, #16]	; (80068a8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8006898:	460a      	mov	r2, r1
 800689a:	4804      	ldr	r0, [pc, #16]	; (80068ac <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800689c:	4621      	mov	r1, r4
 800689e:	f7ff fef4 	bl	800668a <USBD_GetString>
}
 80068a2:	4620      	mov	r0, r4
 80068a4:	bd10      	pop	{r4, pc}
 80068a6:	bf00      	nop
 80068a8:	200017c0 	.word	0x200017c0
 80068ac:	0800a3cd 	.word	0x0800a3cd

080068b0 <USBD_FS_ProductStrDescriptor>:
{
 80068b0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80068b2:	4c04      	ldr	r4, [pc, #16]	; (80068c4 <USBD_FS_ProductStrDescriptor+0x14>)
 80068b4:	460a      	mov	r2, r1
 80068b6:	4804      	ldr	r0, [pc, #16]	; (80068c8 <USBD_FS_ProductStrDescriptor+0x18>)
 80068b8:	4621      	mov	r1, r4
 80068ba:	f7ff fee6 	bl	800668a <USBD_GetString>
}
 80068be:	4620      	mov	r0, r4
 80068c0:	bd10      	pop	{r4, pc}
 80068c2:	bf00      	nop
 80068c4:	200017c0 	.word	0x200017c0
 80068c8:	0800a3e0 	.word	0x0800a3e0

080068cc <USBD_FS_ConfigStrDescriptor>:
{
 80068cc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80068ce:	4c04      	ldr	r4, [pc, #16]	; (80068e0 <USBD_FS_ConfigStrDescriptor+0x14>)
 80068d0:	460a      	mov	r2, r1
 80068d2:	4804      	ldr	r0, [pc, #16]	; (80068e4 <USBD_FS_ConfigStrDescriptor+0x18>)
 80068d4:	4621      	mov	r1, r4
 80068d6:	f7ff fed8 	bl	800668a <USBD_GetString>
}
 80068da:	4620      	mov	r0, r4
 80068dc:	bd10      	pop	{r4, pc}
 80068de:	bf00      	nop
 80068e0:	200017c0 	.word	0x200017c0
 80068e4:	0800a3b4 	.word	0x0800a3b4

080068e8 <USBD_FS_InterfaceStrDescriptor>:
{
 80068e8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80068ea:	4c04      	ldr	r4, [pc, #16]	; (80068fc <USBD_FS_InterfaceStrDescriptor+0x14>)
 80068ec:	460a      	mov	r2, r1
 80068ee:	4804      	ldr	r0, [pc, #16]	; (8006900 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80068f0:	4621      	mov	r1, r4
 80068f2:	f7ff feca 	bl	800668a <USBD_GetString>
}
 80068f6:	4620      	mov	r0, r4
 80068f8:	bd10      	pop	{r4, pc}
 80068fa:	bf00      	nop
 80068fc:	200017c0 	.word	0x200017c0
 8006900:	0800a3bf 	.word	0x0800a3bf

08006904 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006904:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8006906:	4b0e      	ldr	r3, [pc, #56]	; (8006940 <HAL_PCD_MspInit+0x3c>)
 8006908:	6802      	ldr	r2, [r0, #0]
 800690a:	429a      	cmp	r2, r3
 800690c:	d115      	bne.n	800693a <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800690e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8006912:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006914:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8006916:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800691a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800691c:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800691e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006920:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8006922:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006926:	9301      	str	r3, [sp, #4]
 8006928:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800692a:	f7fc fe45 	bl	80035b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800692e:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006930:	b003      	add	sp, #12
 8006932:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006936:	f7fc be73 	b.w	8003620 <HAL_NVIC_EnableIRQ>
}
 800693a:	b003      	add	sp, #12
 800693c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006940:	40005c00 	.word	0x40005c00

08006944 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006944:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8006948:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 800694c:	f7ff bb95 	b.w	800607a <USBD_LL_SetupStage>

08006950 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006950:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8006954:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8006958:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 800695c:	f7ff bbba 	b.w	80060d4 <USBD_LL_DataOutStage>

08006960 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006960:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8006964:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006966:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 800696a:	f7ff bbed 	b.w	8006148 <USBD_LL_DataInStage>

0800696e <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800696e:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8006972:	f7ff bc81 	b.w	8006278 <USBD_LL_SOF>

08006976 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006976:	6883      	ldr	r3, [r0, #8]
{ 
 8006978:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800697a:	2b02      	cmp	r3, #2
{ 
 800697c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800697e:	d001      	beq.n	8006984 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8006980:	f7fb fb24 	bl	8001fcc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006984:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 8006988:	2101      	movs	r1, #1
 800698a:	f7ff fc5f 	bl	800624c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800698e:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 8006992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006996:	f7ff bc32 	b.w	80061fe <USBD_LL_Reset>
	...

0800699c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800699c:	b510      	push	{r4, lr}
 800699e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80069a0:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80069a4:	f7ff fc55 	bl	8006252 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80069a8:	69a3      	ldr	r3, [r4, #24]
 80069aa:	b123      	cbz	r3, 80069b6 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80069ac:	4a02      	ldr	r2, [pc, #8]	; (80069b8 <HAL_PCD_SuspendCallback+0x1c>)
 80069ae:	6913      	ldr	r3, [r2, #16]
 80069b0:	f043 0306 	orr.w	r3, r3, #6
 80069b4:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80069b6:	bd10      	pop	{r4, pc}
 80069b8:	e000ed00 	.word	0xe000ed00

080069bc <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80069bc:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80069c0:	f7ff bc50 	b.w	8006264 <USBD_LL_Resume>

080069c4 <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80069c4:	2308      	movs	r3, #8
{
 80069c6:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80069c8:	4a1d      	ldr	r2, [pc, #116]	; (8006a40 <USBD_LL_Init+0x7c>)
{
 80069ca:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80069cc:	481d      	ldr	r0, [pc, #116]	; (8006a44 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80069ce:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80069d2:	2302      	movs	r3, #2
 80069d4:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80069d6:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 80069d8:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.pData = pdev;
 80069dc:	f8c0 4268 	str.w	r4, [r0, #616]	; 0x268
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80069e0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80069e4:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80069e6:	f7fd fc37 	bl	8004258 <HAL_PCD_Init>
 80069ea:	b108      	cbz	r0, 80069f0 <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 80069ec:	f7fb faee 	bl	8001fcc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80069f0:	2200      	movs	r2, #0
 80069f2:	2318      	movs	r3, #24
 80069f4:	4611      	mov	r1, r2
 80069f6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80069fa:	f7fd ffdc 	bl	80049b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80069fe:	2358      	movs	r3, #88	; 0x58
 8006a00:	2200      	movs	r2, #0
 8006a02:	2180      	movs	r1, #128	; 0x80
 8006a04:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006a08:	f7fd ffd5 	bl	80049b6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006a0c:	23c0      	movs	r3, #192	; 0xc0
 8006a0e:	2200      	movs	r2, #0
 8006a10:	2181      	movs	r1, #129	; 0x81
 8006a12:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006a16:	f7fd ffce 	bl	80049b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006a1a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006a1e:	2200      	movs	r2, #0
 8006a20:	2101      	movs	r1, #1
 8006a22:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006a26:	f7fd ffc6 	bl	80049b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006a2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a2e:	2200      	movs	r2, #0
 8006a30:	2182      	movs	r1, #130	; 0x82
 8006a32:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006a36:	f7fd ffbe 	bl	80049b6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8006a3a:	2000      	movs	r0, #0
 8006a3c:	bd10      	pop	{r4, pc}
 8006a3e:	bf00      	nop
 8006a40:	40005c00 	.word	0x40005c00
 8006a44:	200019c0 	.word	0x200019c0

08006a48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006a48:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006a4a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006a4e:	f7fd fc78 	bl	8004342 <HAL_PCD_Start>
 8006a52:	2803      	cmp	r0, #3
 8006a54:	bf96      	itet	ls
 8006a56:	4b02      	ldrls	r3, [pc, #8]	; (8006a60 <USBD_LL_Start+0x18>)
 8006a58:	2002      	movhi	r0, #2
 8006a5a:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8006a5c:	bd08      	pop	{r3, pc}
 8006a5e:	bf00      	nop
 8006a60:	0800a3ec 	.word	0x0800a3ec

08006a64 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006a64:	b510      	push	{r4, lr}
 8006a66:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006a68:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	4622      	mov	r2, r4
 8006a70:	f7fd fc92 	bl	8004398 <HAL_PCD_EP_Open>
 8006a74:	2803      	cmp	r0, #3
 8006a76:	bf96      	itet	ls
 8006a78:	4b01      	ldrls	r3, [pc, #4]	; (8006a80 <USBD_LL_OpenEP+0x1c>)
 8006a7a:	2002      	movhi	r0, #2
 8006a7c:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8006a7e:	bd10      	pop	{r4, pc}
 8006a80:	0800a3ec 	.word	0x0800a3ec

08006a84 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a84:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006a86:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006a8a:	f7fd fcb8 	bl	80043fe <HAL_PCD_EP_Close>
 8006a8e:	2803      	cmp	r0, #3
 8006a90:	bf96      	itet	ls
 8006a92:	4b02      	ldrls	r3, [pc, #8]	; (8006a9c <USBD_LL_CloseEP+0x18>)
 8006a94:	2002      	movhi	r0, #2
 8006a96:	5c18      	ldrbls	r0, [r3, r0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 8006a98:	bd08      	pop	{r3, pc}
 8006a9a:	bf00      	nop
 8006a9c:	0800a3ec 	.word	0x0800a3ec

08006aa0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006aa0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006aa2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006aa6:	f7fd ff1f 	bl	80048e8 <HAL_PCD_EP_SetStall>
 8006aaa:	2803      	cmp	r0, #3
 8006aac:	bf96      	itet	ls
 8006aae:	4b02      	ldrls	r3, [pc, #8]	; (8006ab8 <USBD_LL_StallEP+0x18>)
 8006ab0:	2002      	movhi	r0, #2
 8006ab2:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8006ab4:	bd08      	pop	{r3, pc}
 8006ab6:	bf00      	nop
 8006ab8:	0800a3ec 	.word	0x0800a3ec

08006abc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006abc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006abe:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006ac2:	f7fd ff45 	bl	8004950 <HAL_PCD_EP_ClrStall>
 8006ac6:	2803      	cmp	r0, #3
 8006ac8:	bf96      	itet	ls
 8006aca:	4b02      	ldrls	r3, [pc, #8]	; (8006ad4 <USBD_LL_ClearStallEP+0x18>)
 8006acc:	2002      	movhi	r0, #2
 8006ace:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8006ad0:	bd08      	pop	{r3, pc}
 8006ad2:	bf00      	nop
 8006ad4:	0800a3ec 	.word	0x0800a3ec

08006ad8 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8006ad8:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ada:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006ade:	bf45      	ittet	mi
 8006ae0:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8006ae4:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006ae8:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006aec:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006af0:	bf58      	it	pl
 8006af2:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
  }
}
 8006af6:	4770      	bx	lr

08006af8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006af8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006afa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006afe:	f7fd fc37 	bl	8004370 <HAL_PCD_SetAddress>
 8006b02:	2803      	cmp	r0, #3
 8006b04:	bf96      	itet	ls
 8006b06:	4b02      	ldrls	r3, [pc, #8]	; (8006b10 <USBD_LL_SetUSBAddress+0x18>)
 8006b08:	2002      	movhi	r0, #2
 8006b0a:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8006b0c:	bd08      	pop	{r3, pc}
 8006b0e:	bf00      	nop
 8006b10:	0800a3ec 	.word	0x0800a3ec

08006b14 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006b14:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006b16:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006b1a:	f7fd fcb8 	bl	800448e <HAL_PCD_EP_Transmit>
 8006b1e:	2803      	cmp	r0, #3
 8006b20:	bf96      	itet	ls
 8006b22:	4b02      	ldrls	r3, [pc, #8]	; (8006b2c <USBD_LL_Transmit+0x18>)
 8006b24:	2002      	movhi	r0, #2
 8006b26:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8006b28:	bd08      	pop	{r3, pc}
 8006b2a:	bf00      	nop
 8006b2c:	0800a3ec 	.word	0x0800a3ec

08006b30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006b30:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006b32:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006b36:	f7fd fc8b 	bl	8004450 <HAL_PCD_EP_Receive>
 8006b3a:	2803      	cmp	r0, #3
 8006b3c:	bf96      	itet	ls
 8006b3e:	4b02      	ldrls	r3, [pc, #8]	; (8006b48 <USBD_LL_PrepareReceive+0x18>)
 8006b40:	2002      	movhi	r0, #2
 8006b42:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8006b44:	bd08      	pop	{r3, pc}
 8006b46:	bf00      	nop
 8006b48:	0800a3ec 	.word	0x0800a3ec

08006b4c <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006b4c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006b50:	f7fd bc96 	b.w	8004480 <HAL_PCD_EP_GetRxCount>

08006b54 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8006b54:	4800      	ldr	r0, [pc, #0]	; (8006b58 <USBD_static_malloc+0x4>)
 8006b56:	4770      	bx	lr
 8006b58:	200003c8 	.word	0x200003c8

08006b5c <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8006b5c:	4770      	bx	lr

08006b5e <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006b5e:	4770      	bx	lr

08006b60 <atof>:
 8006b60:	2100      	movs	r1, #0
 8006b62:	f000 bee9 	b.w	8007938 <strtod>

08006b66 <atoi>:
 8006b66:	220a      	movs	r2, #10
 8006b68:	2100      	movs	r1, #0
 8006b6a:	f000 bf85 	b.w	8007a78 <strtol>
	...

08006b70 <__errno>:
 8006b70:	4b01      	ldr	r3, [pc, #4]	; (8006b78 <__errno+0x8>)
 8006b72:	6818      	ldr	r0, [r3, #0]
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	200001b4 	.word	0x200001b4

08006b7c <__libc_init_array>:
 8006b7c:	b570      	push	{r4, r5, r6, lr}
 8006b7e:	2500      	movs	r5, #0
 8006b80:	4e0c      	ldr	r6, [pc, #48]	; (8006bb4 <__libc_init_array+0x38>)
 8006b82:	4c0d      	ldr	r4, [pc, #52]	; (8006bb8 <__libc_init_array+0x3c>)
 8006b84:	1ba4      	subs	r4, r4, r6
 8006b86:	10a4      	asrs	r4, r4, #2
 8006b88:	42a5      	cmp	r5, r4
 8006b8a:	d109      	bne.n	8006ba0 <__libc_init_array+0x24>
 8006b8c:	f002 fd98 	bl	80096c0 <_init>
 8006b90:	2500      	movs	r5, #0
 8006b92:	4e0a      	ldr	r6, [pc, #40]	; (8006bbc <__libc_init_array+0x40>)
 8006b94:	4c0a      	ldr	r4, [pc, #40]	; (8006bc0 <__libc_init_array+0x44>)
 8006b96:	1ba4      	subs	r4, r4, r6
 8006b98:	10a4      	asrs	r4, r4, #2
 8006b9a:	42a5      	cmp	r5, r4
 8006b9c:	d105      	bne.n	8006baa <__libc_init_array+0x2e>
 8006b9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ba0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ba4:	4798      	blx	r3
 8006ba6:	3501      	adds	r5, #1
 8006ba8:	e7ee      	b.n	8006b88 <__libc_init_array+0xc>
 8006baa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bae:	4798      	blx	r3
 8006bb0:	3501      	adds	r5, #1
 8006bb2:	e7f2      	b.n	8006b9a <__libc_init_array+0x1e>
 8006bb4:	0800a718 	.word	0x0800a718
 8006bb8:	0800a718 	.word	0x0800a718
 8006bbc:	0800a718 	.word	0x0800a718
 8006bc0:	0800a71c 	.word	0x0800a71c

08006bc4 <__itoa>:
 8006bc4:	1e93      	subs	r3, r2, #2
 8006bc6:	2b22      	cmp	r3, #34	; 0x22
 8006bc8:	b510      	push	{r4, lr}
 8006bca:	460c      	mov	r4, r1
 8006bcc:	d904      	bls.n	8006bd8 <__itoa+0x14>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	461c      	mov	r4, r3
 8006bd2:	700b      	strb	r3, [r1, #0]
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	bd10      	pop	{r4, pc}
 8006bd8:	2a0a      	cmp	r2, #10
 8006bda:	d109      	bne.n	8006bf0 <__itoa+0x2c>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	da07      	bge.n	8006bf0 <__itoa+0x2c>
 8006be0:	232d      	movs	r3, #45	; 0x2d
 8006be2:	700b      	strb	r3, [r1, #0]
 8006be4:	2101      	movs	r1, #1
 8006be6:	4240      	negs	r0, r0
 8006be8:	4421      	add	r1, r4
 8006bea:	f000 ff5b 	bl	8007aa4 <__utoa>
 8006bee:	e7f1      	b.n	8006bd4 <__itoa+0x10>
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	e7f9      	b.n	8006be8 <__itoa+0x24>

08006bf4 <itoa>:
 8006bf4:	f7ff bfe6 	b.w	8006bc4 <__itoa>

08006bf8 <memcmp>:
 8006bf8:	b530      	push	{r4, r5, lr}
 8006bfa:	2400      	movs	r4, #0
 8006bfc:	42a2      	cmp	r2, r4
 8006bfe:	d101      	bne.n	8006c04 <memcmp+0xc>
 8006c00:	2000      	movs	r0, #0
 8006c02:	e007      	b.n	8006c14 <memcmp+0x1c>
 8006c04:	5d03      	ldrb	r3, [r0, r4]
 8006c06:	3401      	adds	r4, #1
 8006c08:	190d      	adds	r5, r1, r4
 8006c0a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8006c0e:	42ab      	cmp	r3, r5
 8006c10:	d0f4      	beq.n	8006bfc <memcmp+0x4>
 8006c12:	1b58      	subs	r0, r3, r5
 8006c14:	bd30      	pop	{r4, r5, pc}

08006c16 <memcpy>:
 8006c16:	b510      	push	{r4, lr}
 8006c18:	1e43      	subs	r3, r0, #1
 8006c1a:	440a      	add	r2, r1
 8006c1c:	4291      	cmp	r1, r2
 8006c1e:	d100      	bne.n	8006c22 <memcpy+0xc>
 8006c20:	bd10      	pop	{r4, pc}
 8006c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c2a:	e7f7      	b.n	8006c1c <memcpy+0x6>

08006c2c <memset>:
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	4402      	add	r2, r0
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d100      	bne.n	8006c36 <memset+0xa>
 8006c34:	4770      	bx	lr
 8006c36:	f803 1b01 	strb.w	r1, [r3], #1
 8006c3a:	e7f9      	b.n	8006c30 <memset+0x4>

08006c3c <siscanf>:
 8006c3c:	b40e      	push	{r1, r2, r3}
 8006c3e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006c42:	b530      	push	{r4, r5, lr}
 8006c44:	b09c      	sub	sp, #112	; 0x70
 8006c46:	ac1f      	add	r4, sp, #124	; 0x7c
 8006c48:	f854 5b04 	ldr.w	r5, [r4], #4
 8006c4c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006c50:	9002      	str	r0, [sp, #8]
 8006c52:	9006      	str	r0, [sp, #24]
 8006c54:	f7f9 fa7c 	bl	8000150 <strlen>
 8006c58:	4b0b      	ldr	r3, [pc, #44]	; (8006c88 <siscanf+0x4c>)
 8006c5a:	9003      	str	r0, [sp, #12]
 8006c5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c5e:	2300      	movs	r3, #0
 8006c60:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c62:	9314      	str	r3, [sp, #80]	; 0x50
 8006c64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c68:	9007      	str	r0, [sp, #28]
 8006c6a:	4808      	ldr	r0, [pc, #32]	; (8006c8c <siscanf+0x50>)
 8006c6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006c70:	462a      	mov	r2, r5
 8006c72:	4623      	mov	r3, r4
 8006c74:	a902      	add	r1, sp, #8
 8006c76:	6800      	ldr	r0, [r0, #0]
 8006c78:	9401      	str	r4, [sp, #4]
 8006c7a:	f001 ff59 	bl	8008b30 <__ssvfiscanf_r>
 8006c7e:	b01c      	add	sp, #112	; 0x70
 8006c80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c84:	b003      	add	sp, #12
 8006c86:	4770      	bx	lr
 8006c88:	08006c91 	.word	0x08006c91
 8006c8c:	200001b4 	.word	0x200001b4

08006c90 <__seofread>:
 8006c90:	2000      	movs	r0, #0
 8006c92:	4770      	bx	lr

08006c94 <strcat>:
 8006c94:	4603      	mov	r3, r0
 8006c96:	b510      	push	{r4, lr}
 8006c98:	781a      	ldrb	r2, [r3, #0]
 8006c9a:	1c5c      	adds	r4, r3, #1
 8006c9c:	b93a      	cbnz	r2, 8006cae <strcat+0x1a>
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ca4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ca8:	2a00      	cmp	r2, #0
 8006caa:	d1f9      	bne.n	8006ca0 <strcat+0xc>
 8006cac:	bd10      	pop	{r4, pc}
 8006cae:	4623      	mov	r3, r4
 8006cb0:	e7f2      	b.n	8006c98 <strcat+0x4>

08006cb2 <strcpy>:
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cb8:	f803 2b01 	strb.w	r2, [r3], #1
 8006cbc:	2a00      	cmp	r2, #0
 8006cbe:	d1f9      	bne.n	8006cb4 <strcpy+0x2>
 8006cc0:	4770      	bx	lr

08006cc2 <strstr>:
 8006cc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cc4:	7803      	ldrb	r3, [r0, #0]
 8006cc6:	b17b      	cbz	r3, 8006ce8 <strstr+0x26>
 8006cc8:	4604      	mov	r4, r0
 8006cca:	7823      	ldrb	r3, [r4, #0]
 8006ccc:	4620      	mov	r0, r4
 8006cce:	1c66      	adds	r6, r4, #1
 8006cd0:	b17b      	cbz	r3, 8006cf2 <strstr+0x30>
 8006cd2:	1e4a      	subs	r2, r1, #1
 8006cd4:	1e63      	subs	r3, r4, #1
 8006cd6:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8006cda:	b14d      	cbz	r5, 8006cf0 <strstr+0x2e>
 8006cdc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8006ce0:	4634      	mov	r4, r6
 8006ce2:	42af      	cmp	r7, r5
 8006ce4:	d0f7      	beq.n	8006cd6 <strstr+0x14>
 8006ce6:	e7f0      	b.n	8006cca <strstr+0x8>
 8006ce8:	780b      	ldrb	r3, [r1, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	bf18      	it	ne
 8006cee:	2000      	movne	r0, #0
 8006cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	e7fc      	b.n	8006cf0 <strstr+0x2e>

08006cf6 <sulp>:
 8006cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cfa:	460f      	mov	r7, r1
 8006cfc:	4690      	mov	r8, r2
 8006cfe:	f001 fd27 	bl	8008750 <__ulp>
 8006d02:	4604      	mov	r4, r0
 8006d04:	460d      	mov	r5, r1
 8006d06:	f1b8 0f00 	cmp.w	r8, #0
 8006d0a:	d011      	beq.n	8006d30 <sulp+0x3a>
 8006d0c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006d10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	dd0b      	ble.n	8006d30 <sulp+0x3a>
 8006d18:	2400      	movs	r4, #0
 8006d1a:	051b      	lsls	r3, r3, #20
 8006d1c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006d20:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006d24:	4622      	mov	r2, r4
 8006d26:	462b      	mov	r3, r5
 8006d28:	f7f9 fbd6 	bl	80004d8 <__aeabi_dmul>
 8006d2c:	4604      	mov	r4, r0
 8006d2e:	460d      	mov	r5, r1
 8006d30:	4620      	mov	r0, r4
 8006d32:	4629      	mov	r1, r5
 8006d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006d38 <_strtod_l>:
 8006d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d3c:	461f      	mov	r7, r3
 8006d3e:	2300      	movs	r3, #0
 8006d40:	b0a1      	sub	sp, #132	; 0x84
 8006d42:	4683      	mov	fp, r0
 8006d44:	4638      	mov	r0, r7
 8006d46:	460e      	mov	r6, r1
 8006d48:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d4a:	931c      	str	r3, [sp, #112]	; 0x70
 8006d4c:	f001 fa22 	bl	8008194 <__localeconv_l>
 8006d50:	4680      	mov	r8, r0
 8006d52:	6800      	ldr	r0, [r0, #0]
 8006d54:	f7f9 f9fc 	bl	8000150 <strlen>
 8006d58:	f04f 0900 	mov.w	r9, #0
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	f04f 0a00 	mov.w	sl, #0
 8006d62:	961b      	str	r6, [sp, #108]	; 0x6c
 8006d64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d66:	781a      	ldrb	r2, [r3, #0]
 8006d68:	2a0d      	cmp	r2, #13
 8006d6a:	d832      	bhi.n	8006dd2 <_strtod_l+0x9a>
 8006d6c:	2a09      	cmp	r2, #9
 8006d6e:	d236      	bcs.n	8006dde <_strtod_l+0xa6>
 8006d70:	2a00      	cmp	r2, #0
 8006d72:	d03e      	beq.n	8006df2 <_strtod_l+0xba>
 8006d74:	2300      	movs	r3, #0
 8006d76:	930d      	str	r3, [sp, #52]	; 0x34
 8006d78:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006d7a:	782b      	ldrb	r3, [r5, #0]
 8006d7c:	2b30      	cmp	r3, #48	; 0x30
 8006d7e:	f040 80ac 	bne.w	8006eda <_strtod_l+0x1a2>
 8006d82:	786b      	ldrb	r3, [r5, #1]
 8006d84:	2b58      	cmp	r3, #88	; 0x58
 8006d86:	d001      	beq.n	8006d8c <_strtod_l+0x54>
 8006d88:	2b78      	cmp	r3, #120	; 0x78
 8006d8a:	d167      	bne.n	8006e5c <_strtod_l+0x124>
 8006d8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d8e:	9702      	str	r7, [sp, #8]
 8006d90:	9301      	str	r3, [sp, #4]
 8006d92:	ab1c      	add	r3, sp, #112	; 0x70
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	4a89      	ldr	r2, [pc, #548]	; (8006fbc <_strtod_l+0x284>)
 8006d98:	ab1d      	add	r3, sp, #116	; 0x74
 8006d9a:	a91b      	add	r1, sp, #108	; 0x6c
 8006d9c:	4658      	mov	r0, fp
 8006d9e:	f000 ff0f 	bl	8007bc0 <__gethex>
 8006da2:	f010 0407 	ands.w	r4, r0, #7
 8006da6:	4606      	mov	r6, r0
 8006da8:	d005      	beq.n	8006db6 <_strtod_l+0x7e>
 8006daa:	2c06      	cmp	r4, #6
 8006dac:	d12b      	bne.n	8006e06 <_strtod_l+0xce>
 8006dae:	2300      	movs	r3, #0
 8006db0:	3501      	adds	r5, #1
 8006db2:	951b      	str	r5, [sp, #108]	; 0x6c
 8006db4:	930d      	str	r3, [sp, #52]	; 0x34
 8006db6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f040 85a6 	bne.w	800790a <_strtod_l+0xbd2>
 8006dbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dc0:	b1e3      	cbz	r3, 8006dfc <_strtod_l+0xc4>
 8006dc2:	464a      	mov	r2, r9
 8006dc4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8006dc8:	4610      	mov	r0, r2
 8006dca:	4619      	mov	r1, r3
 8006dcc:	b021      	add	sp, #132	; 0x84
 8006dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd2:	2a2b      	cmp	r2, #43	; 0x2b
 8006dd4:	d015      	beq.n	8006e02 <_strtod_l+0xca>
 8006dd6:	2a2d      	cmp	r2, #45	; 0x2d
 8006dd8:	d004      	beq.n	8006de4 <_strtod_l+0xac>
 8006dda:	2a20      	cmp	r2, #32
 8006ddc:	d1ca      	bne.n	8006d74 <_strtod_l+0x3c>
 8006dde:	3301      	adds	r3, #1
 8006de0:	931b      	str	r3, [sp, #108]	; 0x6c
 8006de2:	e7bf      	b.n	8006d64 <_strtod_l+0x2c>
 8006de4:	2201      	movs	r2, #1
 8006de6:	920d      	str	r2, [sp, #52]	; 0x34
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	921b      	str	r2, [sp, #108]	; 0x6c
 8006dec:	785b      	ldrb	r3, [r3, #1]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1c2      	bne.n	8006d78 <_strtod_l+0x40>
 8006df2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006df4:	961b      	str	r6, [sp, #108]	; 0x6c
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f040 8585 	bne.w	8007906 <_strtod_l+0xbce>
 8006dfc:	464a      	mov	r2, r9
 8006dfe:	4653      	mov	r3, sl
 8006e00:	e7e2      	b.n	8006dc8 <_strtod_l+0x90>
 8006e02:	2200      	movs	r2, #0
 8006e04:	e7ef      	b.n	8006de6 <_strtod_l+0xae>
 8006e06:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006e08:	b13a      	cbz	r2, 8006e1a <_strtod_l+0xe2>
 8006e0a:	2135      	movs	r1, #53	; 0x35
 8006e0c:	a81e      	add	r0, sp, #120	; 0x78
 8006e0e:	f001 fd92 	bl	8008936 <__copybits>
 8006e12:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006e14:	4658      	mov	r0, fp
 8006e16:	f001 fa05 	bl	8008224 <_Bfree>
 8006e1a:	3c01      	subs	r4, #1
 8006e1c:	2c04      	cmp	r4, #4
 8006e1e:	d806      	bhi.n	8006e2e <_strtod_l+0xf6>
 8006e20:	e8df f004 	tbb	[pc, r4]
 8006e24:	1714030a 	.word	0x1714030a
 8006e28:	0a          	.byte	0x0a
 8006e29:	00          	.byte	0x00
 8006e2a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8006e2e:	0731      	lsls	r1, r6, #28
 8006e30:	d5c1      	bpl.n	8006db6 <_strtod_l+0x7e>
 8006e32:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8006e36:	e7be      	b.n	8006db6 <_strtod_l+0x7e>
 8006e38:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006e3a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8006e3e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006e42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006e46:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8006e4a:	e7f0      	b.n	8006e2e <_strtod_l+0xf6>
 8006e4c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8006fc0 <_strtod_l+0x288>
 8006e50:	e7ed      	b.n	8006e2e <_strtod_l+0xf6>
 8006e52:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8006e56:	f04f 39ff 	mov.w	r9, #4294967295
 8006e5a:	e7e8      	b.n	8006e2e <_strtod_l+0xf6>
 8006e5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e5e:	1c5a      	adds	r2, r3, #1
 8006e60:	921b      	str	r2, [sp, #108]	; 0x6c
 8006e62:	785b      	ldrb	r3, [r3, #1]
 8006e64:	2b30      	cmp	r3, #48	; 0x30
 8006e66:	d0f9      	beq.n	8006e5c <_strtod_l+0x124>
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d0a4      	beq.n	8006db6 <_strtod_l+0x7e>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	2500      	movs	r5, #0
 8006e70:	220a      	movs	r2, #10
 8006e72:	9307      	str	r3, [sp, #28]
 8006e74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e76:	9506      	str	r5, [sp, #24]
 8006e78:	9308      	str	r3, [sp, #32]
 8006e7a:	9504      	str	r5, [sp, #16]
 8006e7c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006e7e:	7807      	ldrb	r7, [r0, #0]
 8006e80:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006e84:	b2d9      	uxtb	r1, r3
 8006e86:	2909      	cmp	r1, #9
 8006e88:	d929      	bls.n	8006ede <_strtod_l+0x1a6>
 8006e8a:	4622      	mov	r2, r4
 8006e8c:	f8d8 1000 	ldr.w	r1, [r8]
 8006e90:	f002 f937 	bl	8009102 <strncmp>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	d031      	beq.n	8006efc <_strtod_l+0x1c4>
 8006e98:	2000      	movs	r0, #0
 8006e9a:	463b      	mov	r3, r7
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	9c04      	ldr	r4, [sp, #16]
 8006ea0:	9005      	str	r0, [sp, #20]
 8006ea2:	2b65      	cmp	r3, #101	; 0x65
 8006ea4:	d001      	beq.n	8006eaa <_strtod_l+0x172>
 8006ea6:	2b45      	cmp	r3, #69	; 0x45
 8006ea8:	d114      	bne.n	8006ed4 <_strtod_l+0x19c>
 8006eaa:	b924      	cbnz	r4, 8006eb6 <_strtod_l+0x17e>
 8006eac:	b910      	cbnz	r0, 8006eb4 <_strtod_l+0x17c>
 8006eae:	9b07      	ldr	r3, [sp, #28]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d09e      	beq.n	8006df2 <_strtod_l+0xba>
 8006eb4:	2400      	movs	r4, #0
 8006eb6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006eb8:	1c73      	adds	r3, r6, #1
 8006eba:	931b      	str	r3, [sp, #108]	; 0x6c
 8006ebc:	7873      	ldrb	r3, [r6, #1]
 8006ebe:	2b2b      	cmp	r3, #43	; 0x2b
 8006ec0:	d078      	beq.n	8006fb4 <_strtod_l+0x27c>
 8006ec2:	2b2d      	cmp	r3, #45	; 0x2d
 8006ec4:	d070      	beq.n	8006fa8 <_strtod_l+0x270>
 8006ec6:	f04f 0c00 	mov.w	ip, #0
 8006eca:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8006ece:	2f09      	cmp	r7, #9
 8006ed0:	d97c      	bls.n	8006fcc <_strtod_l+0x294>
 8006ed2:	961b      	str	r6, [sp, #108]	; 0x6c
 8006ed4:	f04f 0e00 	mov.w	lr, #0
 8006ed8:	e09a      	b.n	8007010 <_strtod_l+0x2d8>
 8006eda:	2300      	movs	r3, #0
 8006edc:	e7c7      	b.n	8006e6e <_strtod_l+0x136>
 8006ede:	9904      	ldr	r1, [sp, #16]
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	2908      	cmp	r1, #8
 8006ee4:	bfd7      	itett	le
 8006ee6:	9906      	ldrle	r1, [sp, #24]
 8006ee8:	fb02 3505 	mlagt	r5, r2, r5, r3
 8006eec:	fb02 3301 	mlale	r3, r2, r1, r3
 8006ef0:	9306      	strle	r3, [sp, #24]
 8006ef2:	9b04      	ldr	r3, [sp, #16]
 8006ef4:	901b      	str	r0, [sp, #108]	; 0x6c
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	9304      	str	r3, [sp, #16]
 8006efa:	e7bf      	b.n	8006e7c <_strtod_l+0x144>
 8006efc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006efe:	191a      	adds	r2, r3, r4
 8006f00:	921b      	str	r2, [sp, #108]	; 0x6c
 8006f02:	9a04      	ldr	r2, [sp, #16]
 8006f04:	5d1b      	ldrb	r3, [r3, r4]
 8006f06:	2a00      	cmp	r2, #0
 8006f08:	d037      	beq.n	8006f7a <_strtod_l+0x242>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	9c04      	ldr	r4, [sp, #16]
 8006f0e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006f12:	2909      	cmp	r1, #9
 8006f14:	d913      	bls.n	8006f3e <_strtod_l+0x206>
 8006f16:	2101      	movs	r1, #1
 8006f18:	9105      	str	r1, [sp, #20]
 8006f1a:	e7c2      	b.n	8006ea2 <_strtod_l+0x16a>
 8006f1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f1e:	3001      	adds	r0, #1
 8006f20:	1c5a      	adds	r2, r3, #1
 8006f22:	921b      	str	r2, [sp, #108]	; 0x6c
 8006f24:	785b      	ldrb	r3, [r3, #1]
 8006f26:	2b30      	cmp	r3, #48	; 0x30
 8006f28:	d0f8      	beq.n	8006f1c <_strtod_l+0x1e4>
 8006f2a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006f2e:	2a08      	cmp	r2, #8
 8006f30:	f200 84f0 	bhi.w	8007914 <_strtod_l+0xbdc>
 8006f34:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006f36:	9208      	str	r2, [sp, #32]
 8006f38:	4602      	mov	r2, r0
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	4604      	mov	r4, r0
 8006f3e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8006f42:	f100 0101 	add.w	r1, r0, #1
 8006f46:	d012      	beq.n	8006f6e <_strtod_l+0x236>
 8006f48:	440a      	add	r2, r1
 8006f4a:	270a      	movs	r7, #10
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	eb00 0c04 	add.w	ip, r0, r4
 8006f52:	458c      	cmp	ip, r1
 8006f54:	d113      	bne.n	8006f7e <_strtod_l+0x246>
 8006f56:	1821      	adds	r1, r4, r0
 8006f58:	2908      	cmp	r1, #8
 8006f5a:	f104 0401 	add.w	r4, r4, #1
 8006f5e:	4404      	add	r4, r0
 8006f60:	dc19      	bgt.n	8006f96 <_strtod_l+0x25e>
 8006f62:	210a      	movs	r1, #10
 8006f64:	9b06      	ldr	r3, [sp, #24]
 8006f66:	fb01 e303 	mla	r3, r1, r3, lr
 8006f6a:	9306      	str	r3, [sp, #24]
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f70:	1c58      	adds	r0, r3, #1
 8006f72:	901b      	str	r0, [sp, #108]	; 0x6c
 8006f74:	785b      	ldrb	r3, [r3, #1]
 8006f76:	4608      	mov	r0, r1
 8006f78:	e7c9      	b.n	8006f0e <_strtod_l+0x1d6>
 8006f7a:	9804      	ldr	r0, [sp, #16]
 8006f7c:	e7d3      	b.n	8006f26 <_strtod_l+0x1ee>
 8006f7e:	2908      	cmp	r1, #8
 8006f80:	f101 0101 	add.w	r1, r1, #1
 8006f84:	dc03      	bgt.n	8006f8e <_strtod_l+0x256>
 8006f86:	9b06      	ldr	r3, [sp, #24]
 8006f88:	437b      	muls	r3, r7
 8006f8a:	9306      	str	r3, [sp, #24]
 8006f8c:	e7e1      	b.n	8006f52 <_strtod_l+0x21a>
 8006f8e:	2910      	cmp	r1, #16
 8006f90:	bfd8      	it	le
 8006f92:	437d      	mulle	r5, r7
 8006f94:	e7dd      	b.n	8006f52 <_strtod_l+0x21a>
 8006f96:	2c10      	cmp	r4, #16
 8006f98:	bfdc      	itt	le
 8006f9a:	210a      	movle	r1, #10
 8006f9c:	fb01 e505 	mlale	r5, r1, r5, lr
 8006fa0:	e7e4      	b.n	8006f6c <_strtod_l+0x234>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	9305      	str	r3, [sp, #20]
 8006fa6:	e781      	b.n	8006eac <_strtod_l+0x174>
 8006fa8:	f04f 0c01 	mov.w	ip, #1
 8006fac:	1cb3      	adds	r3, r6, #2
 8006fae:	931b      	str	r3, [sp, #108]	; 0x6c
 8006fb0:	78b3      	ldrb	r3, [r6, #2]
 8006fb2:	e78a      	b.n	8006eca <_strtod_l+0x192>
 8006fb4:	f04f 0c00 	mov.w	ip, #0
 8006fb8:	e7f8      	b.n	8006fac <_strtod_l+0x274>
 8006fba:	bf00      	nop
 8006fbc:	0800a3fc 	.word	0x0800a3fc
 8006fc0:	7ff00000 	.word	0x7ff00000
 8006fc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006fc6:	1c5f      	adds	r7, r3, #1
 8006fc8:	971b      	str	r7, [sp, #108]	; 0x6c
 8006fca:	785b      	ldrb	r3, [r3, #1]
 8006fcc:	2b30      	cmp	r3, #48	; 0x30
 8006fce:	d0f9      	beq.n	8006fc4 <_strtod_l+0x28c>
 8006fd0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8006fd4:	2f08      	cmp	r7, #8
 8006fd6:	f63f af7d 	bhi.w	8006ed4 <_strtod_l+0x19c>
 8006fda:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006fde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8006fe2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006fe4:	1c5f      	adds	r7, r3, #1
 8006fe6:	971b      	str	r7, [sp, #108]	; 0x6c
 8006fe8:	785b      	ldrb	r3, [r3, #1]
 8006fea:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8006fee:	f1b8 0f09 	cmp.w	r8, #9
 8006ff2:	d937      	bls.n	8007064 <_strtod_l+0x32c>
 8006ff4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ff6:	1a7f      	subs	r7, r7, r1
 8006ff8:	2f08      	cmp	r7, #8
 8006ffa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006ffe:	dc37      	bgt.n	8007070 <_strtod_l+0x338>
 8007000:	45be      	cmp	lr, r7
 8007002:	bfa8      	it	ge
 8007004:	46be      	movge	lr, r7
 8007006:	f1bc 0f00 	cmp.w	ip, #0
 800700a:	d001      	beq.n	8007010 <_strtod_l+0x2d8>
 800700c:	f1ce 0e00 	rsb	lr, lr, #0
 8007010:	2c00      	cmp	r4, #0
 8007012:	d151      	bne.n	80070b8 <_strtod_l+0x380>
 8007014:	2800      	cmp	r0, #0
 8007016:	f47f aece 	bne.w	8006db6 <_strtod_l+0x7e>
 800701a:	9a07      	ldr	r2, [sp, #28]
 800701c:	2a00      	cmp	r2, #0
 800701e:	f47f aeca 	bne.w	8006db6 <_strtod_l+0x7e>
 8007022:	9a05      	ldr	r2, [sp, #20]
 8007024:	2a00      	cmp	r2, #0
 8007026:	f47f aee4 	bne.w	8006df2 <_strtod_l+0xba>
 800702a:	2b4e      	cmp	r3, #78	; 0x4e
 800702c:	d027      	beq.n	800707e <_strtod_l+0x346>
 800702e:	dc21      	bgt.n	8007074 <_strtod_l+0x33c>
 8007030:	2b49      	cmp	r3, #73	; 0x49
 8007032:	f47f aede 	bne.w	8006df2 <_strtod_l+0xba>
 8007036:	49a4      	ldr	r1, [pc, #656]	; (80072c8 <_strtod_l+0x590>)
 8007038:	a81b      	add	r0, sp, #108	; 0x6c
 800703a:	f000 fff5 	bl	8008028 <__match>
 800703e:	2800      	cmp	r0, #0
 8007040:	f43f aed7 	beq.w	8006df2 <_strtod_l+0xba>
 8007044:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007046:	49a1      	ldr	r1, [pc, #644]	; (80072cc <_strtod_l+0x594>)
 8007048:	3b01      	subs	r3, #1
 800704a:	a81b      	add	r0, sp, #108	; 0x6c
 800704c:	931b      	str	r3, [sp, #108]	; 0x6c
 800704e:	f000 ffeb 	bl	8008028 <__match>
 8007052:	b910      	cbnz	r0, 800705a <_strtod_l+0x322>
 8007054:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007056:	3301      	adds	r3, #1
 8007058:	931b      	str	r3, [sp, #108]	; 0x6c
 800705a:	f8df a284 	ldr.w	sl, [pc, #644]	; 80072e0 <_strtod_l+0x5a8>
 800705e:	f04f 0900 	mov.w	r9, #0
 8007062:	e6a8      	b.n	8006db6 <_strtod_l+0x7e>
 8007064:	210a      	movs	r1, #10
 8007066:	fb01 3e0e 	mla	lr, r1, lr, r3
 800706a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800706e:	e7b8      	b.n	8006fe2 <_strtod_l+0x2aa>
 8007070:	46be      	mov	lr, r7
 8007072:	e7c8      	b.n	8007006 <_strtod_l+0x2ce>
 8007074:	2b69      	cmp	r3, #105	; 0x69
 8007076:	d0de      	beq.n	8007036 <_strtod_l+0x2fe>
 8007078:	2b6e      	cmp	r3, #110	; 0x6e
 800707a:	f47f aeba 	bne.w	8006df2 <_strtod_l+0xba>
 800707e:	4994      	ldr	r1, [pc, #592]	; (80072d0 <_strtod_l+0x598>)
 8007080:	a81b      	add	r0, sp, #108	; 0x6c
 8007082:	f000 ffd1 	bl	8008028 <__match>
 8007086:	2800      	cmp	r0, #0
 8007088:	f43f aeb3 	beq.w	8006df2 <_strtod_l+0xba>
 800708c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	2b28      	cmp	r3, #40	; 0x28
 8007092:	d10e      	bne.n	80070b2 <_strtod_l+0x37a>
 8007094:	aa1e      	add	r2, sp, #120	; 0x78
 8007096:	498f      	ldr	r1, [pc, #572]	; (80072d4 <_strtod_l+0x59c>)
 8007098:	a81b      	add	r0, sp, #108	; 0x6c
 800709a:	f000 ffd9 	bl	8008050 <__hexnan>
 800709e:	2805      	cmp	r0, #5
 80070a0:	d107      	bne.n	80070b2 <_strtod_l+0x37a>
 80070a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80070a4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80070a8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80070ac:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80070b0:	e681      	b.n	8006db6 <_strtod_l+0x7e>
 80070b2:	f8df a234 	ldr.w	sl, [pc, #564]	; 80072e8 <_strtod_l+0x5b0>
 80070b6:	e7d2      	b.n	800705e <_strtod_l+0x326>
 80070b8:	ebae 0302 	sub.w	r3, lr, r2
 80070bc:	9307      	str	r3, [sp, #28]
 80070be:	9b04      	ldr	r3, [sp, #16]
 80070c0:	9806      	ldr	r0, [sp, #24]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	bf08      	it	eq
 80070c6:	4623      	moveq	r3, r4
 80070c8:	2c10      	cmp	r4, #16
 80070ca:	9304      	str	r3, [sp, #16]
 80070cc:	46a0      	mov	r8, r4
 80070ce:	bfa8      	it	ge
 80070d0:	f04f 0810 	movge.w	r8, #16
 80070d4:	f7f9 f986 	bl	80003e4 <__aeabi_ui2d>
 80070d8:	2c09      	cmp	r4, #9
 80070da:	4681      	mov	r9, r0
 80070dc:	468a      	mov	sl, r1
 80070de:	dc13      	bgt.n	8007108 <_strtod_l+0x3d0>
 80070e0:	9b07      	ldr	r3, [sp, #28]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f43f ae67 	beq.w	8006db6 <_strtod_l+0x7e>
 80070e8:	9b07      	ldr	r3, [sp, #28]
 80070ea:	dd7e      	ble.n	80071ea <_strtod_l+0x4b2>
 80070ec:	2b16      	cmp	r3, #22
 80070ee:	dc65      	bgt.n	80071bc <_strtod_l+0x484>
 80070f0:	4a79      	ldr	r2, [pc, #484]	; (80072d8 <_strtod_l+0x5a0>)
 80070f2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80070f6:	464a      	mov	r2, r9
 80070f8:	e9de 0100 	ldrd	r0, r1, [lr]
 80070fc:	4653      	mov	r3, sl
 80070fe:	f7f9 f9eb 	bl	80004d8 <__aeabi_dmul>
 8007102:	4681      	mov	r9, r0
 8007104:	468a      	mov	sl, r1
 8007106:	e656      	b.n	8006db6 <_strtod_l+0x7e>
 8007108:	4b73      	ldr	r3, [pc, #460]	; (80072d8 <_strtod_l+0x5a0>)
 800710a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800710e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007112:	f7f9 f9e1 	bl	80004d8 <__aeabi_dmul>
 8007116:	4606      	mov	r6, r0
 8007118:	4628      	mov	r0, r5
 800711a:	460f      	mov	r7, r1
 800711c:	f7f9 f962 	bl	80003e4 <__aeabi_ui2d>
 8007120:	4602      	mov	r2, r0
 8007122:	460b      	mov	r3, r1
 8007124:	4630      	mov	r0, r6
 8007126:	4639      	mov	r1, r7
 8007128:	f7f9 f820 	bl	800016c <__adddf3>
 800712c:	2c0f      	cmp	r4, #15
 800712e:	4681      	mov	r9, r0
 8007130:	468a      	mov	sl, r1
 8007132:	ddd5      	ble.n	80070e0 <_strtod_l+0x3a8>
 8007134:	9b07      	ldr	r3, [sp, #28]
 8007136:	eba4 0808 	sub.w	r8, r4, r8
 800713a:	4498      	add	r8, r3
 800713c:	f1b8 0f00 	cmp.w	r8, #0
 8007140:	f340 809a 	ble.w	8007278 <_strtod_l+0x540>
 8007144:	f018 030f 	ands.w	r3, r8, #15
 8007148:	d00a      	beq.n	8007160 <_strtod_l+0x428>
 800714a:	4963      	ldr	r1, [pc, #396]	; (80072d8 <_strtod_l+0x5a0>)
 800714c:	464a      	mov	r2, r9
 800714e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007152:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007156:	4653      	mov	r3, sl
 8007158:	f7f9 f9be 	bl	80004d8 <__aeabi_dmul>
 800715c:	4681      	mov	r9, r0
 800715e:	468a      	mov	sl, r1
 8007160:	f038 080f 	bics.w	r8, r8, #15
 8007164:	d077      	beq.n	8007256 <_strtod_l+0x51e>
 8007166:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800716a:	dd4b      	ble.n	8007204 <_strtod_l+0x4cc>
 800716c:	f04f 0800 	mov.w	r8, #0
 8007170:	f8cd 8010 	str.w	r8, [sp, #16]
 8007174:	f8cd 8020 	str.w	r8, [sp, #32]
 8007178:	f8cd 8018 	str.w	r8, [sp, #24]
 800717c:	2322      	movs	r3, #34	; 0x22
 800717e:	f04f 0900 	mov.w	r9, #0
 8007182:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80072e0 <_strtod_l+0x5a8>
 8007186:	f8cb 3000 	str.w	r3, [fp]
 800718a:	9b08      	ldr	r3, [sp, #32]
 800718c:	2b00      	cmp	r3, #0
 800718e:	f43f ae12 	beq.w	8006db6 <_strtod_l+0x7e>
 8007192:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007194:	4658      	mov	r0, fp
 8007196:	f001 f845 	bl	8008224 <_Bfree>
 800719a:	9906      	ldr	r1, [sp, #24]
 800719c:	4658      	mov	r0, fp
 800719e:	f001 f841 	bl	8008224 <_Bfree>
 80071a2:	9904      	ldr	r1, [sp, #16]
 80071a4:	4658      	mov	r0, fp
 80071a6:	f001 f83d 	bl	8008224 <_Bfree>
 80071aa:	9908      	ldr	r1, [sp, #32]
 80071ac:	4658      	mov	r0, fp
 80071ae:	f001 f839 	bl	8008224 <_Bfree>
 80071b2:	4641      	mov	r1, r8
 80071b4:	4658      	mov	r0, fp
 80071b6:	f001 f835 	bl	8008224 <_Bfree>
 80071ba:	e5fc      	b.n	8006db6 <_strtod_l+0x7e>
 80071bc:	9a07      	ldr	r2, [sp, #28]
 80071be:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80071c2:	4293      	cmp	r3, r2
 80071c4:	dbb6      	blt.n	8007134 <_strtod_l+0x3fc>
 80071c6:	4d44      	ldr	r5, [pc, #272]	; (80072d8 <_strtod_l+0x5a0>)
 80071c8:	f1c4 040f 	rsb	r4, r4, #15
 80071cc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80071d0:	464a      	mov	r2, r9
 80071d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071d6:	4653      	mov	r3, sl
 80071d8:	f7f9 f97e 	bl	80004d8 <__aeabi_dmul>
 80071dc:	9b07      	ldr	r3, [sp, #28]
 80071de:	1b1c      	subs	r4, r3, r4
 80071e0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80071e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071e8:	e789      	b.n	80070fe <_strtod_l+0x3c6>
 80071ea:	f113 0f16 	cmn.w	r3, #22
 80071ee:	dba1      	blt.n	8007134 <_strtod_l+0x3fc>
 80071f0:	4a39      	ldr	r2, [pc, #228]	; (80072d8 <_strtod_l+0x5a0>)
 80071f2:	4648      	mov	r0, r9
 80071f4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80071f8:	e9d2 2300 	ldrd	r2, r3, [r2]
 80071fc:	4651      	mov	r1, sl
 80071fe:	f7f9 fa95 	bl	800072c <__aeabi_ddiv>
 8007202:	e77e      	b.n	8007102 <_strtod_l+0x3ca>
 8007204:	2300      	movs	r3, #0
 8007206:	4648      	mov	r0, r9
 8007208:	4651      	mov	r1, sl
 800720a:	461d      	mov	r5, r3
 800720c:	4e33      	ldr	r6, [pc, #204]	; (80072dc <_strtod_l+0x5a4>)
 800720e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007212:	f1b8 0f01 	cmp.w	r8, #1
 8007216:	dc21      	bgt.n	800725c <_strtod_l+0x524>
 8007218:	b10b      	cbz	r3, 800721e <_strtod_l+0x4e6>
 800721a:	4681      	mov	r9, r0
 800721c:	468a      	mov	sl, r1
 800721e:	4b2f      	ldr	r3, [pc, #188]	; (80072dc <_strtod_l+0x5a4>)
 8007220:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8007224:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007228:	464a      	mov	r2, r9
 800722a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800722e:	4653      	mov	r3, sl
 8007230:	f7f9 f952 	bl	80004d8 <__aeabi_dmul>
 8007234:	4b2a      	ldr	r3, [pc, #168]	; (80072e0 <_strtod_l+0x5a8>)
 8007236:	460a      	mov	r2, r1
 8007238:	400b      	ands	r3, r1
 800723a:	492a      	ldr	r1, [pc, #168]	; (80072e4 <_strtod_l+0x5ac>)
 800723c:	4681      	mov	r9, r0
 800723e:	428b      	cmp	r3, r1
 8007240:	d894      	bhi.n	800716c <_strtod_l+0x434>
 8007242:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007246:	428b      	cmp	r3, r1
 8007248:	bf86      	itte	hi
 800724a:	f04f 39ff 	movhi.w	r9, #4294967295
 800724e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80072ec <_strtod_l+0x5b4>
 8007252:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8007256:	2300      	movs	r3, #0
 8007258:	9305      	str	r3, [sp, #20]
 800725a:	e07b      	b.n	8007354 <_strtod_l+0x61c>
 800725c:	f018 0f01 	tst.w	r8, #1
 8007260:	d006      	beq.n	8007270 <_strtod_l+0x538>
 8007262:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726a:	f7f9 f935 	bl	80004d8 <__aeabi_dmul>
 800726e:	2301      	movs	r3, #1
 8007270:	3501      	adds	r5, #1
 8007272:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007276:	e7cc      	b.n	8007212 <_strtod_l+0x4da>
 8007278:	d0ed      	beq.n	8007256 <_strtod_l+0x51e>
 800727a:	f1c8 0800 	rsb	r8, r8, #0
 800727e:	f018 020f 	ands.w	r2, r8, #15
 8007282:	d00a      	beq.n	800729a <_strtod_l+0x562>
 8007284:	4b14      	ldr	r3, [pc, #80]	; (80072d8 <_strtod_l+0x5a0>)
 8007286:	4648      	mov	r0, r9
 8007288:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800728c:	4651      	mov	r1, sl
 800728e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007292:	f7f9 fa4b 	bl	800072c <__aeabi_ddiv>
 8007296:	4681      	mov	r9, r0
 8007298:	468a      	mov	sl, r1
 800729a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800729e:	d0da      	beq.n	8007256 <_strtod_l+0x51e>
 80072a0:	f1b8 0f1f 	cmp.w	r8, #31
 80072a4:	dd24      	ble.n	80072f0 <_strtod_l+0x5b8>
 80072a6:	f04f 0800 	mov.w	r8, #0
 80072aa:	f8cd 8010 	str.w	r8, [sp, #16]
 80072ae:	f8cd 8020 	str.w	r8, [sp, #32]
 80072b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80072b6:	2322      	movs	r3, #34	; 0x22
 80072b8:	f04f 0900 	mov.w	r9, #0
 80072bc:	f04f 0a00 	mov.w	sl, #0
 80072c0:	f8cb 3000 	str.w	r3, [fp]
 80072c4:	e761      	b.n	800718a <_strtod_l+0x452>
 80072c6:	bf00      	nop
 80072c8:	0800a3f0 	.word	0x0800a3f0
 80072cc:	0800a3f3 	.word	0x0800a3f3
 80072d0:	0800a3f9 	.word	0x0800a3f9
 80072d4:	0800a410 	.word	0x0800a410
 80072d8:	0800a4a8 	.word	0x0800a4a8
 80072dc:	0800a480 	.word	0x0800a480
 80072e0:	7ff00000 	.word	0x7ff00000
 80072e4:	7ca00000 	.word	0x7ca00000
 80072e8:	fff80000 	.word	0xfff80000
 80072ec:	7fefffff 	.word	0x7fefffff
 80072f0:	f018 0310 	ands.w	r3, r8, #16
 80072f4:	bf18      	it	ne
 80072f6:	236a      	movne	r3, #106	; 0x6a
 80072f8:	4648      	mov	r0, r9
 80072fa:	9305      	str	r3, [sp, #20]
 80072fc:	4651      	mov	r1, sl
 80072fe:	2300      	movs	r3, #0
 8007300:	4da1      	ldr	r5, [pc, #644]	; (8007588 <_strtod_l+0x850>)
 8007302:	f1b8 0f00 	cmp.w	r8, #0
 8007306:	f300 8113 	bgt.w	8007530 <_strtod_l+0x7f8>
 800730a:	b10b      	cbz	r3, 8007310 <_strtod_l+0x5d8>
 800730c:	4681      	mov	r9, r0
 800730e:	468a      	mov	sl, r1
 8007310:	9b05      	ldr	r3, [sp, #20]
 8007312:	b1bb      	cbz	r3, 8007344 <_strtod_l+0x60c>
 8007314:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8007318:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800731c:	2b00      	cmp	r3, #0
 800731e:	4651      	mov	r1, sl
 8007320:	dd10      	ble.n	8007344 <_strtod_l+0x60c>
 8007322:	2b1f      	cmp	r3, #31
 8007324:	f340 8110 	ble.w	8007548 <_strtod_l+0x810>
 8007328:	2b34      	cmp	r3, #52	; 0x34
 800732a:	bfd8      	it	le
 800732c:	f04f 32ff 	movle.w	r2, #4294967295
 8007330:	f04f 0900 	mov.w	r9, #0
 8007334:	bfcf      	iteee	gt
 8007336:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800733a:	3b20      	suble	r3, #32
 800733c:	fa02 f303 	lslle.w	r3, r2, r3
 8007340:	ea03 0a01 	andle.w	sl, r3, r1
 8007344:	2200      	movs	r2, #0
 8007346:	2300      	movs	r3, #0
 8007348:	4648      	mov	r0, r9
 800734a:	4651      	mov	r1, sl
 800734c:	f7f9 fb2c 	bl	80009a8 <__aeabi_dcmpeq>
 8007350:	2800      	cmp	r0, #0
 8007352:	d1a8      	bne.n	80072a6 <_strtod_l+0x56e>
 8007354:	9b06      	ldr	r3, [sp, #24]
 8007356:	9a04      	ldr	r2, [sp, #16]
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	9908      	ldr	r1, [sp, #32]
 800735c:	4623      	mov	r3, r4
 800735e:	4658      	mov	r0, fp
 8007360:	f000 ffb2 	bl	80082c8 <__s2b>
 8007364:	9008      	str	r0, [sp, #32]
 8007366:	2800      	cmp	r0, #0
 8007368:	f43f af00 	beq.w	800716c <_strtod_l+0x434>
 800736c:	9a07      	ldr	r2, [sp, #28]
 800736e:	9b07      	ldr	r3, [sp, #28]
 8007370:	2a00      	cmp	r2, #0
 8007372:	f1c3 0300 	rsb	r3, r3, #0
 8007376:	bfa8      	it	ge
 8007378:	2300      	movge	r3, #0
 800737a:	f04f 0800 	mov.w	r8, #0
 800737e:	930e      	str	r3, [sp, #56]	; 0x38
 8007380:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007384:	9316      	str	r3, [sp, #88]	; 0x58
 8007386:	f8cd 8010 	str.w	r8, [sp, #16]
 800738a:	9b08      	ldr	r3, [sp, #32]
 800738c:	4658      	mov	r0, fp
 800738e:	6859      	ldr	r1, [r3, #4]
 8007390:	f000 ff14 	bl	80081bc <_Balloc>
 8007394:	9006      	str	r0, [sp, #24]
 8007396:	2800      	cmp	r0, #0
 8007398:	f43f aef0 	beq.w	800717c <_strtod_l+0x444>
 800739c:	9b08      	ldr	r3, [sp, #32]
 800739e:	300c      	adds	r0, #12
 80073a0:	691a      	ldr	r2, [r3, #16]
 80073a2:	f103 010c 	add.w	r1, r3, #12
 80073a6:	3202      	adds	r2, #2
 80073a8:	0092      	lsls	r2, r2, #2
 80073aa:	f7ff fc34 	bl	8006c16 <memcpy>
 80073ae:	ab1e      	add	r3, sp, #120	; 0x78
 80073b0:	9301      	str	r3, [sp, #4]
 80073b2:	ab1d      	add	r3, sp, #116	; 0x74
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	464a      	mov	r2, r9
 80073b8:	4653      	mov	r3, sl
 80073ba:	4658      	mov	r0, fp
 80073bc:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80073c0:	f001 fa3c 	bl	800883c <__d2b>
 80073c4:	901c      	str	r0, [sp, #112]	; 0x70
 80073c6:	2800      	cmp	r0, #0
 80073c8:	f43f aed8 	beq.w	800717c <_strtod_l+0x444>
 80073cc:	2101      	movs	r1, #1
 80073ce:	4658      	mov	r0, fp
 80073d0:	f001 f806 	bl	80083e0 <__i2b>
 80073d4:	9004      	str	r0, [sp, #16]
 80073d6:	4603      	mov	r3, r0
 80073d8:	2800      	cmp	r0, #0
 80073da:	f43f aecf 	beq.w	800717c <_strtod_l+0x444>
 80073de:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80073e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80073e2:	2d00      	cmp	r5, #0
 80073e4:	bfab      	itete	ge
 80073e6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80073e8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80073ea:	18ee      	addge	r6, r5, r3
 80073ec:	1b5c      	sublt	r4, r3, r5
 80073ee:	9b05      	ldr	r3, [sp, #20]
 80073f0:	bfa8      	it	ge
 80073f2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80073f4:	eba5 0503 	sub.w	r5, r5, r3
 80073f8:	4415      	add	r5, r2
 80073fa:	4b64      	ldr	r3, [pc, #400]	; (800758c <_strtod_l+0x854>)
 80073fc:	f105 35ff 	add.w	r5, r5, #4294967295
 8007400:	bfb8      	it	lt
 8007402:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007404:	429d      	cmp	r5, r3
 8007406:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800740a:	f280 80af 	bge.w	800756c <_strtod_l+0x834>
 800740e:	1b5b      	subs	r3, r3, r5
 8007410:	2b1f      	cmp	r3, #31
 8007412:	eba2 0203 	sub.w	r2, r2, r3
 8007416:	f04f 0701 	mov.w	r7, #1
 800741a:	f300 809c 	bgt.w	8007556 <_strtod_l+0x81e>
 800741e:	2500      	movs	r5, #0
 8007420:	fa07 f303 	lsl.w	r3, r7, r3
 8007424:	930f      	str	r3, [sp, #60]	; 0x3c
 8007426:	18b7      	adds	r7, r6, r2
 8007428:	9b05      	ldr	r3, [sp, #20]
 800742a:	42be      	cmp	r6, r7
 800742c:	4414      	add	r4, r2
 800742e:	441c      	add	r4, r3
 8007430:	4633      	mov	r3, r6
 8007432:	bfa8      	it	ge
 8007434:	463b      	movge	r3, r7
 8007436:	42a3      	cmp	r3, r4
 8007438:	bfa8      	it	ge
 800743a:	4623      	movge	r3, r4
 800743c:	2b00      	cmp	r3, #0
 800743e:	bfc2      	ittt	gt
 8007440:	1aff      	subgt	r7, r7, r3
 8007442:	1ae4      	subgt	r4, r4, r3
 8007444:	1af6      	subgt	r6, r6, r3
 8007446:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007448:	b1bb      	cbz	r3, 800747a <_strtod_l+0x742>
 800744a:	461a      	mov	r2, r3
 800744c:	9904      	ldr	r1, [sp, #16]
 800744e:	4658      	mov	r0, fp
 8007450:	f001 f864 	bl	800851c <__pow5mult>
 8007454:	9004      	str	r0, [sp, #16]
 8007456:	2800      	cmp	r0, #0
 8007458:	f43f ae90 	beq.w	800717c <_strtod_l+0x444>
 800745c:	4601      	mov	r1, r0
 800745e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007460:	4658      	mov	r0, fp
 8007462:	f000 ffc6 	bl	80083f2 <__multiply>
 8007466:	9009      	str	r0, [sp, #36]	; 0x24
 8007468:	2800      	cmp	r0, #0
 800746a:	f43f ae87 	beq.w	800717c <_strtod_l+0x444>
 800746e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007470:	4658      	mov	r0, fp
 8007472:	f000 fed7 	bl	8008224 <_Bfree>
 8007476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007478:	931c      	str	r3, [sp, #112]	; 0x70
 800747a:	2f00      	cmp	r7, #0
 800747c:	dc7a      	bgt.n	8007574 <_strtod_l+0x83c>
 800747e:	9b07      	ldr	r3, [sp, #28]
 8007480:	2b00      	cmp	r3, #0
 8007482:	dd08      	ble.n	8007496 <_strtod_l+0x75e>
 8007484:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007486:	9906      	ldr	r1, [sp, #24]
 8007488:	4658      	mov	r0, fp
 800748a:	f001 f847 	bl	800851c <__pow5mult>
 800748e:	9006      	str	r0, [sp, #24]
 8007490:	2800      	cmp	r0, #0
 8007492:	f43f ae73 	beq.w	800717c <_strtod_l+0x444>
 8007496:	2c00      	cmp	r4, #0
 8007498:	dd08      	ble.n	80074ac <_strtod_l+0x774>
 800749a:	4622      	mov	r2, r4
 800749c:	9906      	ldr	r1, [sp, #24]
 800749e:	4658      	mov	r0, fp
 80074a0:	f001 f88a 	bl	80085b8 <__lshift>
 80074a4:	9006      	str	r0, [sp, #24]
 80074a6:	2800      	cmp	r0, #0
 80074a8:	f43f ae68 	beq.w	800717c <_strtod_l+0x444>
 80074ac:	2e00      	cmp	r6, #0
 80074ae:	dd08      	ble.n	80074c2 <_strtod_l+0x78a>
 80074b0:	4632      	mov	r2, r6
 80074b2:	9904      	ldr	r1, [sp, #16]
 80074b4:	4658      	mov	r0, fp
 80074b6:	f001 f87f 	bl	80085b8 <__lshift>
 80074ba:	9004      	str	r0, [sp, #16]
 80074bc:	2800      	cmp	r0, #0
 80074be:	f43f ae5d 	beq.w	800717c <_strtod_l+0x444>
 80074c2:	9a06      	ldr	r2, [sp, #24]
 80074c4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80074c6:	4658      	mov	r0, fp
 80074c8:	f001 f8e4 	bl	8008694 <__mdiff>
 80074cc:	4680      	mov	r8, r0
 80074ce:	2800      	cmp	r0, #0
 80074d0:	f43f ae54 	beq.w	800717c <_strtod_l+0x444>
 80074d4:	2400      	movs	r4, #0
 80074d6:	68c3      	ldr	r3, [r0, #12]
 80074d8:	9904      	ldr	r1, [sp, #16]
 80074da:	60c4      	str	r4, [r0, #12]
 80074dc:	930c      	str	r3, [sp, #48]	; 0x30
 80074de:	f001 f8bf 	bl	8008660 <__mcmp>
 80074e2:	42a0      	cmp	r0, r4
 80074e4:	da54      	bge.n	8007590 <_strtod_l+0x858>
 80074e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074e8:	b9f3      	cbnz	r3, 8007528 <_strtod_l+0x7f0>
 80074ea:	f1b9 0f00 	cmp.w	r9, #0
 80074ee:	d11b      	bne.n	8007528 <_strtod_l+0x7f0>
 80074f0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80074f4:	b9c3      	cbnz	r3, 8007528 <_strtod_l+0x7f0>
 80074f6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80074fa:	0d1b      	lsrs	r3, r3, #20
 80074fc:	051b      	lsls	r3, r3, #20
 80074fe:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007502:	d911      	bls.n	8007528 <_strtod_l+0x7f0>
 8007504:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007508:	b91b      	cbnz	r3, 8007512 <_strtod_l+0x7da>
 800750a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800750e:	2b01      	cmp	r3, #1
 8007510:	dd0a      	ble.n	8007528 <_strtod_l+0x7f0>
 8007512:	4641      	mov	r1, r8
 8007514:	2201      	movs	r2, #1
 8007516:	4658      	mov	r0, fp
 8007518:	f001 f84e 	bl	80085b8 <__lshift>
 800751c:	9904      	ldr	r1, [sp, #16]
 800751e:	4680      	mov	r8, r0
 8007520:	f001 f89e 	bl	8008660 <__mcmp>
 8007524:	2800      	cmp	r0, #0
 8007526:	dc68      	bgt.n	80075fa <_strtod_l+0x8c2>
 8007528:	9b05      	ldr	r3, [sp, #20]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d172      	bne.n	8007614 <_strtod_l+0x8dc>
 800752e:	e630      	b.n	8007192 <_strtod_l+0x45a>
 8007530:	f018 0f01 	tst.w	r8, #1
 8007534:	d004      	beq.n	8007540 <_strtod_l+0x808>
 8007536:	e9d5 2300 	ldrd	r2, r3, [r5]
 800753a:	f7f8 ffcd 	bl	80004d8 <__aeabi_dmul>
 800753e:	2301      	movs	r3, #1
 8007540:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007544:	3508      	adds	r5, #8
 8007546:	e6dc      	b.n	8007302 <_strtod_l+0x5ca>
 8007548:	f04f 32ff 	mov.w	r2, #4294967295
 800754c:	fa02 f303 	lsl.w	r3, r2, r3
 8007550:	ea03 0909 	and.w	r9, r3, r9
 8007554:	e6f6      	b.n	8007344 <_strtod_l+0x60c>
 8007556:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800755a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800755e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007562:	35e2      	adds	r5, #226	; 0xe2
 8007564:	fa07 f505 	lsl.w	r5, r7, r5
 8007568:	970f      	str	r7, [sp, #60]	; 0x3c
 800756a:	e75c      	b.n	8007426 <_strtod_l+0x6ee>
 800756c:	2301      	movs	r3, #1
 800756e:	2500      	movs	r5, #0
 8007570:	930f      	str	r3, [sp, #60]	; 0x3c
 8007572:	e758      	b.n	8007426 <_strtod_l+0x6ee>
 8007574:	463a      	mov	r2, r7
 8007576:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007578:	4658      	mov	r0, fp
 800757a:	f001 f81d 	bl	80085b8 <__lshift>
 800757e:	901c      	str	r0, [sp, #112]	; 0x70
 8007580:	2800      	cmp	r0, #0
 8007582:	f47f af7c 	bne.w	800747e <_strtod_l+0x746>
 8007586:	e5f9      	b.n	800717c <_strtod_l+0x444>
 8007588:	0800a428 	.word	0x0800a428
 800758c:	fffffc02 	.word	0xfffffc02
 8007590:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007594:	f040 8089 	bne.w	80076aa <_strtod_l+0x972>
 8007598:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800759a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800759e:	b342      	cbz	r2, 80075f2 <_strtod_l+0x8ba>
 80075a0:	4aaf      	ldr	r2, [pc, #700]	; (8007860 <_strtod_l+0xb28>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d156      	bne.n	8007654 <_strtod_l+0x91c>
 80075a6:	9b05      	ldr	r3, [sp, #20]
 80075a8:	4648      	mov	r0, r9
 80075aa:	b1eb      	cbz	r3, 80075e8 <_strtod_l+0x8b0>
 80075ac:	4653      	mov	r3, sl
 80075ae:	4aad      	ldr	r2, [pc, #692]	; (8007864 <_strtod_l+0xb2c>)
 80075b0:	f04f 31ff 	mov.w	r1, #4294967295
 80075b4:	401a      	ands	r2, r3
 80075b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80075ba:	d818      	bhi.n	80075ee <_strtod_l+0x8b6>
 80075bc:	0d12      	lsrs	r2, r2, #20
 80075be:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80075c2:	fa01 f303 	lsl.w	r3, r1, r3
 80075c6:	4298      	cmp	r0, r3
 80075c8:	d144      	bne.n	8007654 <_strtod_l+0x91c>
 80075ca:	4ba7      	ldr	r3, [pc, #668]	; (8007868 <_strtod_l+0xb30>)
 80075cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d102      	bne.n	80075d8 <_strtod_l+0x8a0>
 80075d2:	3001      	adds	r0, #1
 80075d4:	f43f add2 	beq.w	800717c <_strtod_l+0x444>
 80075d8:	4ba2      	ldr	r3, [pc, #648]	; (8007864 <_strtod_l+0xb2c>)
 80075da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075dc:	f04f 0900 	mov.w	r9, #0
 80075e0:	401a      	ands	r2, r3
 80075e2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80075e6:	e79f      	b.n	8007528 <_strtod_l+0x7f0>
 80075e8:	f04f 33ff 	mov.w	r3, #4294967295
 80075ec:	e7eb      	b.n	80075c6 <_strtod_l+0x88e>
 80075ee:	460b      	mov	r3, r1
 80075f0:	e7e9      	b.n	80075c6 <_strtod_l+0x88e>
 80075f2:	bb7b      	cbnz	r3, 8007654 <_strtod_l+0x91c>
 80075f4:	f1b9 0f00 	cmp.w	r9, #0
 80075f8:	d12c      	bne.n	8007654 <_strtod_l+0x91c>
 80075fa:	9905      	ldr	r1, [sp, #20]
 80075fc:	4653      	mov	r3, sl
 80075fe:	4a99      	ldr	r2, [pc, #612]	; (8007864 <_strtod_l+0xb2c>)
 8007600:	b1f1      	cbz	r1, 8007640 <_strtod_l+0x908>
 8007602:	ea02 010a 	and.w	r1, r2, sl
 8007606:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800760a:	dc19      	bgt.n	8007640 <_strtod_l+0x908>
 800760c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007610:	f77f ae51 	ble.w	80072b6 <_strtod_l+0x57e>
 8007614:	2300      	movs	r3, #0
 8007616:	4a95      	ldr	r2, [pc, #596]	; (800786c <_strtod_l+0xb34>)
 8007618:	4648      	mov	r0, r9
 800761a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800761e:	4651      	mov	r1, sl
 8007620:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007624:	f7f8 ff58 	bl	80004d8 <__aeabi_dmul>
 8007628:	4681      	mov	r9, r0
 800762a:	468a      	mov	sl, r1
 800762c:	2900      	cmp	r1, #0
 800762e:	f47f adb0 	bne.w	8007192 <_strtod_l+0x45a>
 8007632:	2800      	cmp	r0, #0
 8007634:	f47f adad 	bne.w	8007192 <_strtod_l+0x45a>
 8007638:	2322      	movs	r3, #34	; 0x22
 800763a:	f8cb 3000 	str.w	r3, [fp]
 800763e:	e5a8      	b.n	8007192 <_strtod_l+0x45a>
 8007640:	4013      	ands	r3, r2
 8007642:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007646:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800764a:	f04f 39ff 	mov.w	r9, #4294967295
 800764e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8007652:	e769      	b.n	8007528 <_strtod_l+0x7f0>
 8007654:	b19d      	cbz	r5, 800767e <_strtod_l+0x946>
 8007656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007658:	421d      	tst	r5, r3
 800765a:	f43f af65 	beq.w	8007528 <_strtod_l+0x7f0>
 800765e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007660:	9a05      	ldr	r2, [sp, #20]
 8007662:	4648      	mov	r0, r9
 8007664:	4651      	mov	r1, sl
 8007666:	b173      	cbz	r3, 8007686 <_strtod_l+0x94e>
 8007668:	f7ff fb45 	bl	8006cf6 <sulp>
 800766c:	4602      	mov	r2, r0
 800766e:	460b      	mov	r3, r1
 8007670:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007674:	f7f8 fd7a 	bl	800016c <__adddf3>
 8007678:	4681      	mov	r9, r0
 800767a:	468a      	mov	sl, r1
 800767c:	e754      	b.n	8007528 <_strtod_l+0x7f0>
 800767e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007680:	ea13 0f09 	tst.w	r3, r9
 8007684:	e7e9      	b.n	800765a <_strtod_l+0x922>
 8007686:	f7ff fb36 	bl	8006cf6 <sulp>
 800768a:	4602      	mov	r2, r0
 800768c:	460b      	mov	r3, r1
 800768e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007692:	f7f8 fd69 	bl	8000168 <__aeabi_dsub>
 8007696:	2200      	movs	r2, #0
 8007698:	2300      	movs	r3, #0
 800769a:	4681      	mov	r9, r0
 800769c:	468a      	mov	sl, r1
 800769e:	f7f9 f983 	bl	80009a8 <__aeabi_dcmpeq>
 80076a2:	2800      	cmp	r0, #0
 80076a4:	f47f ae07 	bne.w	80072b6 <_strtod_l+0x57e>
 80076a8:	e73e      	b.n	8007528 <_strtod_l+0x7f0>
 80076aa:	9904      	ldr	r1, [sp, #16]
 80076ac:	4640      	mov	r0, r8
 80076ae:	f001 f914 	bl	80088da <__ratio>
 80076b2:	2200      	movs	r2, #0
 80076b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80076b8:	4606      	mov	r6, r0
 80076ba:	460f      	mov	r7, r1
 80076bc:	f7f9 f988 	bl	80009d0 <__aeabi_dcmple>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	d075      	beq.n	80077b0 <_strtod_l+0xa78>
 80076c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d047      	beq.n	800775a <_strtod_l+0xa22>
 80076ca:	2600      	movs	r6, #0
 80076cc:	4f68      	ldr	r7, [pc, #416]	; (8007870 <_strtod_l+0xb38>)
 80076ce:	4d68      	ldr	r5, [pc, #416]	; (8007870 <_strtod_l+0xb38>)
 80076d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076d6:	0d1b      	lsrs	r3, r3, #20
 80076d8:	051b      	lsls	r3, r3, #20
 80076da:	930f      	str	r3, [sp, #60]	; 0x3c
 80076dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80076de:	4b65      	ldr	r3, [pc, #404]	; (8007874 <_strtod_l+0xb3c>)
 80076e0:	429a      	cmp	r2, r3
 80076e2:	f040 80cf 	bne.w	8007884 <_strtod_l+0xb4c>
 80076e6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80076ea:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80076ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076f0:	4648      	mov	r0, r9
 80076f2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80076f6:	4651      	mov	r1, sl
 80076f8:	f001 f82a 	bl	8008750 <__ulp>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4630      	mov	r0, r6
 8007702:	4639      	mov	r1, r7
 8007704:	f7f8 fee8 	bl	80004d8 <__aeabi_dmul>
 8007708:	464a      	mov	r2, r9
 800770a:	4653      	mov	r3, sl
 800770c:	f7f8 fd2e 	bl	800016c <__adddf3>
 8007710:	460b      	mov	r3, r1
 8007712:	4954      	ldr	r1, [pc, #336]	; (8007864 <_strtod_l+0xb2c>)
 8007714:	4a58      	ldr	r2, [pc, #352]	; (8007878 <_strtod_l+0xb40>)
 8007716:	4019      	ands	r1, r3
 8007718:	4291      	cmp	r1, r2
 800771a:	4681      	mov	r9, r0
 800771c:	d95e      	bls.n	80077dc <_strtod_l+0xaa4>
 800771e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007720:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007724:	4293      	cmp	r3, r2
 8007726:	d103      	bne.n	8007730 <_strtod_l+0x9f8>
 8007728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800772a:	3301      	adds	r3, #1
 800772c:	f43f ad26 	beq.w	800717c <_strtod_l+0x444>
 8007730:	f04f 39ff 	mov.w	r9, #4294967295
 8007734:	f8df a130 	ldr.w	sl, [pc, #304]	; 8007868 <_strtod_l+0xb30>
 8007738:	991c      	ldr	r1, [sp, #112]	; 0x70
 800773a:	4658      	mov	r0, fp
 800773c:	f000 fd72 	bl	8008224 <_Bfree>
 8007740:	9906      	ldr	r1, [sp, #24]
 8007742:	4658      	mov	r0, fp
 8007744:	f000 fd6e 	bl	8008224 <_Bfree>
 8007748:	9904      	ldr	r1, [sp, #16]
 800774a:	4658      	mov	r0, fp
 800774c:	f000 fd6a 	bl	8008224 <_Bfree>
 8007750:	4641      	mov	r1, r8
 8007752:	4658      	mov	r0, fp
 8007754:	f000 fd66 	bl	8008224 <_Bfree>
 8007758:	e617      	b.n	800738a <_strtod_l+0x652>
 800775a:	f1b9 0f00 	cmp.w	r9, #0
 800775e:	d119      	bne.n	8007794 <_strtod_l+0xa5c>
 8007760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007762:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007766:	b9e3      	cbnz	r3, 80077a2 <_strtod_l+0xa6a>
 8007768:	2200      	movs	r2, #0
 800776a:	4b41      	ldr	r3, [pc, #260]	; (8007870 <_strtod_l+0xb38>)
 800776c:	4630      	mov	r0, r6
 800776e:	4639      	mov	r1, r7
 8007770:	f7f9 f924 	bl	80009bc <__aeabi_dcmplt>
 8007774:	b9c8      	cbnz	r0, 80077aa <_strtod_l+0xa72>
 8007776:	2200      	movs	r2, #0
 8007778:	4b40      	ldr	r3, [pc, #256]	; (800787c <_strtod_l+0xb44>)
 800777a:	4630      	mov	r0, r6
 800777c:	4639      	mov	r1, r7
 800777e:	f7f8 feab 	bl	80004d8 <__aeabi_dmul>
 8007782:	4604      	mov	r4, r0
 8007784:	460d      	mov	r5, r1
 8007786:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800778a:	9418      	str	r4, [sp, #96]	; 0x60
 800778c:	9319      	str	r3, [sp, #100]	; 0x64
 800778e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8007792:	e79d      	b.n	80076d0 <_strtod_l+0x998>
 8007794:	f1b9 0f01 	cmp.w	r9, #1
 8007798:	d103      	bne.n	80077a2 <_strtod_l+0xa6a>
 800779a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800779c:	2b00      	cmp	r3, #0
 800779e:	f43f ad8a 	beq.w	80072b6 <_strtod_l+0x57e>
 80077a2:	2600      	movs	r6, #0
 80077a4:	4f36      	ldr	r7, [pc, #216]	; (8007880 <_strtod_l+0xb48>)
 80077a6:	2400      	movs	r4, #0
 80077a8:	e791      	b.n	80076ce <_strtod_l+0x996>
 80077aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80077ac:	4d33      	ldr	r5, [pc, #204]	; (800787c <_strtod_l+0xb44>)
 80077ae:	e7ea      	b.n	8007786 <_strtod_l+0xa4e>
 80077b0:	4b32      	ldr	r3, [pc, #200]	; (800787c <_strtod_l+0xb44>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	4630      	mov	r0, r6
 80077b6:	4639      	mov	r1, r7
 80077b8:	f7f8 fe8e 	bl	80004d8 <__aeabi_dmul>
 80077bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077be:	4604      	mov	r4, r0
 80077c0:	460d      	mov	r5, r1
 80077c2:	b933      	cbnz	r3, 80077d2 <_strtod_l+0xa9a>
 80077c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077c8:	9010      	str	r0, [sp, #64]	; 0x40
 80077ca:	9311      	str	r3, [sp, #68]	; 0x44
 80077cc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80077d0:	e77e      	b.n	80076d0 <_strtod_l+0x998>
 80077d2:	4602      	mov	r2, r0
 80077d4:	460b      	mov	r3, r1
 80077d6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80077da:	e7f7      	b.n	80077cc <_strtod_l+0xa94>
 80077dc:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 80077e0:	9b05      	ldr	r3, [sp, #20]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1a8      	bne.n	8007738 <_strtod_l+0xa00>
 80077e6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80077ea:	0d1b      	lsrs	r3, r3, #20
 80077ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077ee:	051b      	lsls	r3, r3, #20
 80077f0:	429a      	cmp	r2, r3
 80077f2:	4656      	mov	r6, sl
 80077f4:	d1a0      	bne.n	8007738 <_strtod_l+0xa00>
 80077f6:	4629      	mov	r1, r5
 80077f8:	4620      	mov	r0, r4
 80077fa:	f7f9 f91d 	bl	8000a38 <__aeabi_d2iz>
 80077fe:	f7f8 fe01 	bl	8000404 <__aeabi_i2d>
 8007802:	460b      	mov	r3, r1
 8007804:	4602      	mov	r2, r0
 8007806:	4629      	mov	r1, r5
 8007808:	4620      	mov	r0, r4
 800780a:	f7f8 fcad 	bl	8000168 <__aeabi_dsub>
 800780e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007810:	4604      	mov	r4, r0
 8007812:	460d      	mov	r5, r1
 8007814:	b933      	cbnz	r3, 8007824 <_strtod_l+0xaec>
 8007816:	f1b9 0f00 	cmp.w	r9, #0
 800781a:	d103      	bne.n	8007824 <_strtod_l+0xaec>
 800781c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8007820:	2e00      	cmp	r6, #0
 8007822:	d06a      	beq.n	80078fa <_strtod_l+0xbc2>
 8007824:	a30a      	add	r3, pc, #40	; (adr r3, 8007850 <_strtod_l+0xb18>)
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	4620      	mov	r0, r4
 800782c:	4629      	mov	r1, r5
 800782e:	f7f9 f8c5 	bl	80009bc <__aeabi_dcmplt>
 8007832:	2800      	cmp	r0, #0
 8007834:	f47f acad 	bne.w	8007192 <_strtod_l+0x45a>
 8007838:	a307      	add	r3, pc, #28	; (adr r3, 8007858 <_strtod_l+0xb20>)
 800783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783e:	4620      	mov	r0, r4
 8007840:	4629      	mov	r1, r5
 8007842:	f7f9 f8d9 	bl	80009f8 <__aeabi_dcmpgt>
 8007846:	2800      	cmp	r0, #0
 8007848:	f43f af76 	beq.w	8007738 <_strtod_l+0xa00>
 800784c:	e4a1      	b.n	8007192 <_strtod_l+0x45a>
 800784e:	bf00      	nop
 8007850:	94a03595 	.word	0x94a03595
 8007854:	3fdfffff 	.word	0x3fdfffff
 8007858:	35afe535 	.word	0x35afe535
 800785c:	3fe00000 	.word	0x3fe00000
 8007860:	000fffff 	.word	0x000fffff
 8007864:	7ff00000 	.word	0x7ff00000
 8007868:	7fefffff 	.word	0x7fefffff
 800786c:	39500000 	.word	0x39500000
 8007870:	3ff00000 	.word	0x3ff00000
 8007874:	7fe00000 	.word	0x7fe00000
 8007878:	7c9fffff 	.word	0x7c9fffff
 800787c:	3fe00000 	.word	0x3fe00000
 8007880:	bff00000 	.word	0xbff00000
 8007884:	9b05      	ldr	r3, [sp, #20]
 8007886:	b313      	cbz	r3, 80078ce <_strtod_l+0xb96>
 8007888:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800788a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800788e:	d81e      	bhi.n	80078ce <_strtod_l+0xb96>
 8007890:	a325      	add	r3, pc, #148	; (adr r3, 8007928 <_strtod_l+0xbf0>)
 8007892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007896:	4620      	mov	r0, r4
 8007898:	4629      	mov	r1, r5
 800789a:	f7f9 f899 	bl	80009d0 <__aeabi_dcmple>
 800789e:	b190      	cbz	r0, 80078c6 <_strtod_l+0xb8e>
 80078a0:	4629      	mov	r1, r5
 80078a2:	4620      	mov	r0, r4
 80078a4:	f7f9 f8f0 	bl	8000a88 <__aeabi_d2uiz>
 80078a8:	2800      	cmp	r0, #0
 80078aa:	bf08      	it	eq
 80078ac:	2001      	moveq	r0, #1
 80078ae:	f7f8 fd99 	bl	80003e4 <__aeabi_ui2d>
 80078b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078b4:	4604      	mov	r4, r0
 80078b6:	460d      	mov	r5, r1
 80078b8:	b9d3      	cbnz	r3, 80078f0 <_strtod_l+0xbb8>
 80078ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078be:	9012      	str	r0, [sp, #72]	; 0x48
 80078c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80078c2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80078c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078c8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80078cc:	1a9f      	subs	r7, r3, r2
 80078ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078d2:	f000 ff3d 	bl	8008750 <__ulp>
 80078d6:	4602      	mov	r2, r0
 80078d8:	460b      	mov	r3, r1
 80078da:	4630      	mov	r0, r6
 80078dc:	4639      	mov	r1, r7
 80078de:	f7f8 fdfb 	bl	80004d8 <__aeabi_dmul>
 80078e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80078e6:	f7f8 fc41 	bl	800016c <__adddf3>
 80078ea:	4681      	mov	r9, r0
 80078ec:	468a      	mov	sl, r1
 80078ee:	e777      	b.n	80077e0 <_strtod_l+0xaa8>
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80078f8:	e7e3      	b.n	80078c2 <_strtod_l+0xb8a>
 80078fa:	a30d      	add	r3, pc, #52	; (adr r3, 8007930 <_strtod_l+0xbf8>)
 80078fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007900:	f7f9 f85c 	bl	80009bc <__aeabi_dcmplt>
 8007904:	e79f      	b.n	8007846 <_strtod_l+0xb0e>
 8007906:	2300      	movs	r3, #0
 8007908:	930d      	str	r3, [sp, #52]	; 0x34
 800790a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800790c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800790e:	6013      	str	r3, [r2, #0]
 8007910:	f7ff ba55 	b.w	8006dbe <_strtod_l+0x86>
 8007914:	2b65      	cmp	r3, #101	; 0x65
 8007916:	f04f 0200 	mov.w	r2, #0
 800791a:	f43f ab42 	beq.w	8006fa2 <_strtod_l+0x26a>
 800791e:	2101      	movs	r1, #1
 8007920:	4614      	mov	r4, r2
 8007922:	9105      	str	r1, [sp, #20]
 8007924:	f7ff babf 	b.w	8006ea6 <_strtod_l+0x16e>
 8007928:	ffc00000 	.word	0xffc00000
 800792c:	41dfffff 	.word	0x41dfffff
 8007930:	94a03595 	.word	0x94a03595
 8007934:	3fcfffff 	.word	0x3fcfffff

08007938 <strtod>:
 8007938:	4b06      	ldr	r3, [pc, #24]	; (8007954 <strtod+0x1c>)
 800793a:	b410      	push	{r4}
 800793c:	681c      	ldr	r4, [r3, #0]
 800793e:	4a06      	ldr	r2, [pc, #24]	; (8007958 <strtod+0x20>)
 8007940:	6a23      	ldr	r3, [r4, #32]
 8007942:	2b00      	cmp	r3, #0
 8007944:	bf08      	it	eq
 8007946:	4613      	moveq	r3, r2
 8007948:	460a      	mov	r2, r1
 800794a:	4601      	mov	r1, r0
 800794c:	4620      	mov	r0, r4
 800794e:	bc10      	pop	{r4}
 8007950:	f7ff b9f2 	b.w	8006d38 <_strtod_l>
 8007954:	200001b4 	.word	0x200001b4
 8007958:	20000218 	.word	0x20000218

0800795c <_strtol_l.isra.0>:
 800795c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007960:	4680      	mov	r8, r0
 8007962:	4689      	mov	r9, r1
 8007964:	4692      	mov	sl, r2
 8007966:	461e      	mov	r6, r3
 8007968:	460f      	mov	r7, r1
 800796a:	463d      	mov	r5, r7
 800796c:	9808      	ldr	r0, [sp, #32]
 800796e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007972:	f000 fbfd 	bl	8008170 <__locale_ctype_ptr_l>
 8007976:	4420      	add	r0, r4
 8007978:	7843      	ldrb	r3, [r0, #1]
 800797a:	f013 0308 	ands.w	r3, r3, #8
 800797e:	d132      	bne.n	80079e6 <_strtol_l.isra.0+0x8a>
 8007980:	2c2d      	cmp	r4, #45	; 0x2d
 8007982:	d132      	bne.n	80079ea <_strtol_l.isra.0+0x8e>
 8007984:	2201      	movs	r2, #1
 8007986:	787c      	ldrb	r4, [r7, #1]
 8007988:	1cbd      	adds	r5, r7, #2
 800798a:	2e00      	cmp	r6, #0
 800798c:	d05d      	beq.n	8007a4a <_strtol_l.isra.0+0xee>
 800798e:	2e10      	cmp	r6, #16
 8007990:	d109      	bne.n	80079a6 <_strtol_l.isra.0+0x4a>
 8007992:	2c30      	cmp	r4, #48	; 0x30
 8007994:	d107      	bne.n	80079a6 <_strtol_l.isra.0+0x4a>
 8007996:	782b      	ldrb	r3, [r5, #0]
 8007998:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800799c:	2b58      	cmp	r3, #88	; 0x58
 800799e:	d14f      	bne.n	8007a40 <_strtol_l.isra.0+0xe4>
 80079a0:	2610      	movs	r6, #16
 80079a2:	786c      	ldrb	r4, [r5, #1]
 80079a4:	3502      	adds	r5, #2
 80079a6:	2a00      	cmp	r2, #0
 80079a8:	bf14      	ite	ne
 80079aa:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80079ae:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80079b2:	2700      	movs	r7, #0
 80079b4:	fbb1 fcf6 	udiv	ip, r1, r6
 80079b8:	4638      	mov	r0, r7
 80079ba:	fb06 1e1c 	mls	lr, r6, ip, r1
 80079be:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80079c2:	2b09      	cmp	r3, #9
 80079c4:	d817      	bhi.n	80079f6 <_strtol_l.isra.0+0x9a>
 80079c6:	461c      	mov	r4, r3
 80079c8:	42a6      	cmp	r6, r4
 80079ca:	dd23      	ble.n	8007a14 <_strtol_l.isra.0+0xb8>
 80079cc:	1c7b      	adds	r3, r7, #1
 80079ce:	d007      	beq.n	80079e0 <_strtol_l.isra.0+0x84>
 80079d0:	4584      	cmp	ip, r0
 80079d2:	d31c      	bcc.n	8007a0e <_strtol_l.isra.0+0xb2>
 80079d4:	d101      	bne.n	80079da <_strtol_l.isra.0+0x7e>
 80079d6:	45a6      	cmp	lr, r4
 80079d8:	db19      	blt.n	8007a0e <_strtol_l.isra.0+0xb2>
 80079da:	2701      	movs	r7, #1
 80079dc:	fb00 4006 	mla	r0, r0, r6, r4
 80079e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079e4:	e7eb      	b.n	80079be <_strtol_l.isra.0+0x62>
 80079e6:	462f      	mov	r7, r5
 80079e8:	e7bf      	b.n	800796a <_strtol_l.isra.0+0xe>
 80079ea:	2c2b      	cmp	r4, #43	; 0x2b
 80079ec:	bf04      	itt	eq
 80079ee:	1cbd      	addeq	r5, r7, #2
 80079f0:	787c      	ldrbeq	r4, [r7, #1]
 80079f2:	461a      	mov	r2, r3
 80079f4:	e7c9      	b.n	800798a <_strtol_l.isra.0+0x2e>
 80079f6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80079fa:	2b19      	cmp	r3, #25
 80079fc:	d801      	bhi.n	8007a02 <_strtol_l.isra.0+0xa6>
 80079fe:	3c37      	subs	r4, #55	; 0x37
 8007a00:	e7e2      	b.n	80079c8 <_strtol_l.isra.0+0x6c>
 8007a02:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007a06:	2b19      	cmp	r3, #25
 8007a08:	d804      	bhi.n	8007a14 <_strtol_l.isra.0+0xb8>
 8007a0a:	3c57      	subs	r4, #87	; 0x57
 8007a0c:	e7dc      	b.n	80079c8 <_strtol_l.isra.0+0x6c>
 8007a0e:	f04f 37ff 	mov.w	r7, #4294967295
 8007a12:	e7e5      	b.n	80079e0 <_strtol_l.isra.0+0x84>
 8007a14:	1c7b      	adds	r3, r7, #1
 8007a16:	d108      	bne.n	8007a2a <_strtol_l.isra.0+0xce>
 8007a18:	2322      	movs	r3, #34	; 0x22
 8007a1a:	4608      	mov	r0, r1
 8007a1c:	f8c8 3000 	str.w	r3, [r8]
 8007a20:	f1ba 0f00 	cmp.w	sl, #0
 8007a24:	d107      	bne.n	8007a36 <_strtol_l.isra.0+0xda>
 8007a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a2a:	b102      	cbz	r2, 8007a2e <_strtol_l.isra.0+0xd2>
 8007a2c:	4240      	negs	r0, r0
 8007a2e:	f1ba 0f00 	cmp.w	sl, #0
 8007a32:	d0f8      	beq.n	8007a26 <_strtol_l.isra.0+0xca>
 8007a34:	b10f      	cbz	r7, 8007a3a <_strtol_l.isra.0+0xde>
 8007a36:	f105 39ff 	add.w	r9, r5, #4294967295
 8007a3a:	f8ca 9000 	str.w	r9, [sl]
 8007a3e:	e7f2      	b.n	8007a26 <_strtol_l.isra.0+0xca>
 8007a40:	2430      	movs	r4, #48	; 0x30
 8007a42:	2e00      	cmp	r6, #0
 8007a44:	d1af      	bne.n	80079a6 <_strtol_l.isra.0+0x4a>
 8007a46:	2608      	movs	r6, #8
 8007a48:	e7ad      	b.n	80079a6 <_strtol_l.isra.0+0x4a>
 8007a4a:	2c30      	cmp	r4, #48	; 0x30
 8007a4c:	d0a3      	beq.n	8007996 <_strtol_l.isra.0+0x3a>
 8007a4e:	260a      	movs	r6, #10
 8007a50:	e7a9      	b.n	80079a6 <_strtol_l.isra.0+0x4a>
	...

08007a54 <_strtol_r>:
 8007a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a56:	4c06      	ldr	r4, [pc, #24]	; (8007a70 <_strtol_r+0x1c>)
 8007a58:	4d06      	ldr	r5, [pc, #24]	; (8007a74 <_strtol_r+0x20>)
 8007a5a:	6824      	ldr	r4, [r4, #0]
 8007a5c:	6a24      	ldr	r4, [r4, #32]
 8007a5e:	2c00      	cmp	r4, #0
 8007a60:	bf08      	it	eq
 8007a62:	462c      	moveq	r4, r5
 8007a64:	9400      	str	r4, [sp, #0]
 8007a66:	f7ff ff79 	bl	800795c <_strtol_l.isra.0>
 8007a6a:	b003      	add	sp, #12
 8007a6c:	bd30      	pop	{r4, r5, pc}
 8007a6e:	bf00      	nop
 8007a70:	200001b4 	.word	0x200001b4
 8007a74:	20000218 	.word	0x20000218

08007a78 <strtol>:
 8007a78:	4b08      	ldr	r3, [pc, #32]	; (8007a9c <strtol+0x24>)
 8007a7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a7c:	681c      	ldr	r4, [r3, #0]
 8007a7e:	4d08      	ldr	r5, [pc, #32]	; (8007aa0 <strtol+0x28>)
 8007a80:	6a23      	ldr	r3, [r4, #32]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	bf08      	it	eq
 8007a86:	462b      	moveq	r3, r5
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	460a      	mov	r2, r1
 8007a8e:	4601      	mov	r1, r0
 8007a90:	4620      	mov	r0, r4
 8007a92:	f7ff ff63 	bl	800795c <_strtol_l.isra.0>
 8007a96:	b003      	add	sp, #12
 8007a98:	bd30      	pop	{r4, r5, pc}
 8007a9a:	bf00      	nop
 8007a9c:	200001b4 	.word	0x200001b4
 8007aa0:	20000218 	.word	0x20000218

08007aa4 <__utoa>:
 8007aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aa6:	b08b      	sub	sp, #44	; 0x2c
 8007aa8:	4605      	mov	r5, r0
 8007aaa:	460c      	mov	r4, r1
 8007aac:	466e      	mov	r6, sp
 8007aae:	4b1b      	ldr	r3, [pc, #108]	; (8007b1c <__utoa+0x78>)
 8007ab0:	f103 0c20 	add.w	ip, r3, #32
 8007ab4:	4637      	mov	r7, r6
 8007ab6:	6818      	ldr	r0, [r3, #0]
 8007ab8:	6859      	ldr	r1, [r3, #4]
 8007aba:	3308      	adds	r3, #8
 8007abc:	c703      	stmia	r7!, {r0, r1}
 8007abe:	4563      	cmp	r3, ip
 8007ac0:	463e      	mov	r6, r7
 8007ac2:	d1f7      	bne.n	8007ab4 <__utoa+0x10>
 8007ac4:	6818      	ldr	r0, [r3, #0]
 8007ac6:	791b      	ldrb	r3, [r3, #4]
 8007ac8:	6038      	str	r0, [r7, #0]
 8007aca:	713b      	strb	r3, [r7, #4]
 8007acc:	1e93      	subs	r3, r2, #2
 8007ace:	2b22      	cmp	r3, #34	; 0x22
 8007ad0:	f04f 0300 	mov.w	r3, #0
 8007ad4:	d904      	bls.n	8007ae0 <__utoa+0x3c>
 8007ad6:	7023      	strb	r3, [r4, #0]
 8007ad8:	461c      	mov	r4, r3
 8007ada:	4620      	mov	r0, r4
 8007adc:	b00b      	add	sp, #44	; 0x2c
 8007ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ae0:	1e66      	subs	r6, r4, #1
 8007ae2:	fbb5 f0f2 	udiv	r0, r5, r2
 8007ae6:	fb02 5510 	mls	r5, r2, r0, r5
 8007aea:	af0a      	add	r7, sp, #40	; 0x28
 8007aec:	443d      	add	r5, r7
 8007aee:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8007af2:	1c59      	adds	r1, r3, #1
 8007af4:	f806 5f01 	strb.w	r5, [r6, #1]!
 8007af8:	4605      	mov	r5, r0
 8007afa:	b968      	cbnz	r0, 8007b18 <__utoa+0x74>
 8007afc:	4622      	mov	r2, r4
 8007afe:	5460      	strb	r0, [r4, r1]
 8007b00:	4423      	add	r3, r4
 8007b02:	1b19      	subs	r1, r3, r4
 8007b04:	1b10      	subs	r0, r2, r4
 8007b06:	4281      	cmp	r1, r0
 8007b08:	dde7      	ble.n	8007ada <__utoa+0x36>
 8007b0a:	7811      	ldrb	r1, [r2, #0]
 8007b0c:	7818      	ldrb	r0, [r3, #0]
 8007b0e:	f802 0b01 	strb.w	r0, [r2], #1
 8007b12:	f803 1901 	strb.w	r1, [r3], #-1
 8007b16:	e7f4      	b.n	8007b02 <__utoa+0x5e>
 8007b18:	460b      	mov	r3, r1
 8007b1a:	e7e2      	b.n	8007ae2 <__utoa+0x3e>
 8007b1c:	0800a450 	.word	0x0800a450

08007b20 <rshift>:
 8007b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b22:	6906      	ldr	r6, [r0, #16]
 8007b24:	114b      	asrs	r3, r1, #5
 8007b26:	429e      	cmp	r6, r3
 8007b28:	f100 0414 	add.w	r4, r0, #20
 8007b2c:	dd31      	ble.n	8007b92 <rshift+0x72>
 8007b2e:	f011 011f 	ands.w	r1, r1, #31
 8007b32:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007b36:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007b3a:	d108      	bne.n	8007b4e <rshift+0x2e>
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	42b2      	cmp	r2, r6
 8007b40:	460b      	mov	r3, r1
 8007b42:	d211      	bcs.n	8007b68 <rshift+0x48>
 8007b44:	f852 3b04 	ldr.w	r3, [r2], #4
 8007b48:	f841 3b04 	str.w	r3, [r1], #4
 8007b4c:	e7f7      	b.n	8007b3e <rshift+0x1e>
 8007b4e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007b52:	4623      	mov	r3, r4
 8007b54:	f1c1 0c20 	rsb	ip, r1, #32
 8007b58:	40cd      	lsrs	r5, r1
 8007b5a:	3204      	adds	r2, #4
 8007b5c:	42b2      	cmp	r2, r6
 8007b5e:	4617      	mov	r7, r2
 8007b60:	d30d      	bcc.n	8007b7e <rshift+0x5e>
 8007b62:	601d      	str	r5, [r3, #0]
 8007b64:	b105      	cbz	r5, 8007b68 <rshift+0x48>
 8007b66:	3304      	adds	r3, #4
 8007b68:	42a3      	cmp	r3, r4
 8007b6a:	eba3 0204 	sub.w	r2, r3, r4
 8007b6e:	bf08      	it	eq
 8007b70:	2300      	moveq	r3, #0
 8007b72:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007b76:	6102      	str	r2, [r0, #16]
 8007b78:	bf08      	it	eq
 8007b7a:	6143      	streq	r3, [r0, #20]
 8007b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b7e:	683f      	ldr	r7, [r7, #0]
 8007b80:	fa07 f70c 	lsl.w	r7, r7, ip
 8007b84:	433d      	orrs	r5, r7
 8007b86:	f843 5b04 	str.w	r5, [r3], #4
 8007b8a:	f852 5b04 	ldr.w	r5, [r2], #4
 8007b8e:	40cd      	lsrs	r5, r1
 8007b90:	e7e4      	b.n	8007b5c <rshift+0x3c>
 8007b92:	4623      	mov	r3, r4
 8007b94:	e7e8      	b.n	8007b68 <rshift+0x48>

08007b96 <__hexdig_fun>:
 8007b96:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007b9a:	2b09      	cmp	r3, #9
 8007b9c:	d802      	bhi.n	8007ba4 <__hexdig_fun+0xe>
 8007b9e:	3820      	subs	r0, #32
 8007ba0:	b2c0      	uxtb	r0, r0
 8007ba2:	4770      	bx	lr
 8007ba4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007ba8:	2b05      	cmp	r3, #5
 8007baa:	d801      	bhi.n	8007bb0 <__hexdig_fun+0x1a>
 8007bac:	3847      	subs	r0, #71	; 0x47
 8007bae:	e7f7      	b.n	8007ba0 <__hexdig_fun+0xa>
 8007bb0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007bb4:	2b05      	cmp	r3, #5
 8007bb6:	d801      	bhi.n	8007bbc <__hexdig_fun+0x26>
 8007bb8:	3827      	subs	r0, #39	; 0x27
 8007bba:	e7f1      	b.n	8007ba0 <__hexdig_fun+0xa>
 8007bbc:	2000      	movs	r0, #0
 8007bbe:	4770      	bx	lr

08007bc0 <__gethex>:
 8007bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc4:	b08b      	sub	sp, #44	; 0x2c
 8007bc6:	9002      	str	r0, [sp, #8]
 8007bc8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007bca:	468a      	mov	sl, r1
 8007bcc:	4690      	mov	r8, r2
 8007bce:	9306      	str	r3, [sp, #24]
 8007bd0:	f000 fae0 	bl	8008194 <__localeconv_l>
 8007bd4:	6803      	ldr	r3, [r0, #0]
 8007bd6:	f04f 0b00 	mov.w	fp, #0
 8007bda:	4618      	mov	r0, r3
 8007bdc:	9303      	str	r3, [sp, #12]
 8007bde:	f7f8 fab7 	bl	8000150 <strlen>
 8007be2:	9b03      	ldr	r3, [sp, #12]
 8007be4:	9001      	str	r0, [sp, #4]
 8007be6:	4403      	add	r3, r0
 8007be8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007bec:	9307      	str	r3, [sp, #28]
 8007bee:	f8da 3000 	ldr.w	r3, [sl]
 8007bf2:	3302      	adds	r3, #2
 8007bf4:	461f      	mov	r7, r3
 8007bf6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007bfa:	2830      	cmp	r0, #48	; 0x30
 8007bfc:	d06c      	beq.n	8007cd8 <__gethex+0x118>
 8007bfe:	f7ff ffca 	bl	8007b96 <__hexdig_fun>
 8007c02:	4604      	mov	r4, r0
 8007c04:	2800      	cmp	r0, #0
 8007c06:	d16a      	bne.n	8007cde <__gethex+0x11e>
 8007c08:	9a01      	ldr	r2, [sp, #4]
 8007c0a:	9903      	ldr	r1, [sp, #12]
 8007c0c:	4638      	mov	r0, r7
 8007c0e:	f001 fa78 	bl	8009102 <strncmp>
 8007c12:	2800      	cmp	r0, #0
 8007c14:	d166      	bne.n	8007ce4 <__gethex+0x124>
 8007c16:	9b01      	ldr	r3, [sp, #4]
 8007c18:	5cf8      	ldrb	r0, [r7, r3]
 8007c1a:	18fe      	adds	r6, r7, r3
 8007c1c:	f7ff ffbb 	bl	8007b96 <__hexdig_fun>
 8007c20:	2800      	cmp	r0, #0
 8007c22:	d062      	beq.n	8007cea <__gethex+0x12a>
 8007c24:	4633      	mov	r3, r6
 8007c26:	7818      	ldrb	r0, [r3, #0]
 8007c28:	461f      	mov	r7, r3
 8007c2a:	2830      	cmp	r0, #48	; 0x30
 8007c2c:	f103 0301 	add.w	r3, r3, #1
 8007c30:	d0f9      	beq.n	8007c26 <__gethex+0x66>
 8007c32:	f7ff ffb0 	bl	8007b96 <__hexdig_fun>
 8007c36:	fab0 f580 	clz	r5, r0
 8007c3a:	4634      	mov	r4, r6
 8007c3c:	f04f 0b01 	mov.w	fp, #1
 8007c40:	096d      	lsrs	r5, r5, #5
 8007c42:	463a      	mov	r2, r7
 8007c44:	4616      	mov	r6, r2
 8007c46:	7830      	ldrb	r0, [r6, #0]
 8007c48:	3201      	adds	r2, #1
 8007c4a:	f7ff ffa4 	bl	8007b96 <__hexdig_fun>
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	d1f8      	bne.n	8007c44 <__gethex+0x84>
 8007c52:	9a01      	ldr	r2, [sp, #4]
 8007c54:	9903      	ldr	r1, [sp, #12]
 8007c56:	4630      	mov	r0, r6
 8007c58:	f001 fa53 	bl	8009102 <strncmp>
 8007c5c:	b950      	cbnz	r0, 8007c74 <__gethex+0xb4>
 8007c5e:	b954      	cbnz	r4, 8007c76 <__gethex+0xb6>
 8007c60:	9b01      	ldr	r3, [sp, #4]
 8007c62:	18f4      	adds	r4, r6, r3
 8007c64:	4622      	mov	r2, r4
 8007c66:	4616      	mov	r6, r2
 8007c68:	7830      	ldrb	r0, [r6, #0]
 8007c6a:	3201      	adds	r2, #1
 8007c6c:	f7ff ff93 	bl	8007b96 <__hexdig_fun>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d1f8      	bne.n	8007c66 <__gethex+0xa6>
 8007c74:	b10c      	cbz	r4, 8007c7a <__gethex+0xba>
 8007c76:	1ba4      	subs	r4, r4, r6
 8007c78:	00a4      	lsls	r4, r4, #2
 8007c7a:	7833      	ldrb	r3, [r6, #0]
 8007c7c:	2b50      	cmp	r3, #80	; 0x50
 8007c7e:	d001      	beq.n	8007c84 <__gethex+0xc4>
 8007c80:	2b70      	cmp	r3, #112	; 0x70
 8007c82:	d140      	bne.n	8007d06 <__gethex+0x146>
 8007c84:	7873      	ldrb	r3, [r6, #1]
 8007c86:	2b2b      	cmp	r3, #43	; 0x2b
 8007c88:	d031      	beq.n	8007cee <__gethex+0x12e>
 8007c8a:	2b2d      	cmp	r3, #45	; 0x2d
 8007c8c:	d033      	beq.n	8007cf6 <__gethex+0x136>
 8007c8e:	f04f 0900 	mov.w	r9, #0
 8007c92:	1c71      	adds	r1, r6, #1
 8007c94:	7808      	ldrb	r0, [r1, #0]
 8007c96:	f7ff ff7e 	bl	8007b96 <__hexdig_fun>
 8007c9a:	1e43      	subs	r3, r0, #1
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b18      	cmp	r3, #24
 8007ca0:	d831      	bhi.n	8007d06 <__gethex+0x146>
 8007ca2:	f1a0 0210 	sub.w	r2, r0, #16
 8007ca6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007caa:	f7ff ff74 	bl	8007b96 <__hexdig_fun>
 8007cae:	1e43      	subs	r3, r0, #1
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b18      	cmp	r3, #24
 8007cb4:	d922      	bls.n	8007cfc <__gethex+0x13c>
 8007cb6:	f1b9 0f00 	cmp.w	r9, #0
 8007cba:	d000      	beq.n	8007cbe <__gethex+0xfe>
 8007cbc:	4252      	negs	r2, r2
 8007cbe:	4414      	add	r4, r2
 8007cc0:	f8ca 1000 	str.w	r1, [sl]
 8007cc4:	b30d      	cbz	r5, 8007d0a <__gethex+0x14a>
 8007cc6:	f1bb 0f00 	cmp.w	fp, #0
 8007cca:	bf0c      	ite	eq
 8007ccc:	2706      	moveq	r7, #6
 8007cce:	2700      	movne	r7, #0
 8007cd0:	4638      	mov	r0, r7
 8007cd2:	b00b      	add	sp, #44	; 0x2c
 8007cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd8:	f10b 0b01 	add.w	fp, fp, #1
 8007cdc:	e78a      	b.n	8007bf4 <__gethex+0x34>
 8007cde:	2500      	movs	r5, #0
 8007ce0:	462c      	mov	r4, r5
 8007ce2:	e7ae      	b.n	8007c42 <__gethex+0x82>
 8007ce4:	463e      	mov	r6, r7
 8007ce6:	2501      	movs	r5, #1
 8007ce8:	e7c7      	b.n	8007c7a <__gethex+0xba>
 8007cea:	4604      	mov	r4, r0
 8007cec:	e7fb      	b.n	8007ce6 <__gethex+0x126>
 8007cee:	f04f 0900 	mov.w	r9, #0
 8007cf2:	1cb1      	adds	r1, r6, #2
 8007cf4:	e7ce      	b.n	8007c94 <__gethex+0xd4>
 8007cf6:	f04f 0901 	mov.w	r9, #1
 8007cfa:	e7fa      	b.n	8007cf2 <__gethex+0x132>
 8007cfc:	230a      	movs	r3, #10
 8007cfe:	fb03 0202 	mla	r2, r3, r2, r0
 8007d02:	3a10      	subs	r2, #16
 8007d04:	e7cf      	b.n	8007ca6 <__gethex+0xe6>
 8007d06:	4631      	mov	r1, r6
 8007d08:	e7da      	b.n	8007cc0 <__gethex+0x100>
 8007d0a:	4629      	mov	r1, r5
 8007d0c:	1bf3      	subs	r3, r6, r7
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	2b07      	cmp	r3, #7
 8007d12:	dc49      	bgt.n	8007da8 <__gethex+0x1e8>
 8007d14:	9802      	ldr	r0, [sp, #8]
 8007d16:	f000 fa51 	bl	80081bc <_Balloc>
 8007d1a:	f04f 0b00 	mov.w	fp, #0
 8007d1e:	4605      	mov	r5, r0
 8007d20:	46da      	mov	sl, fp
 8007d22:	9b01      	ldr	r3, [sp, #4]
 8007d24:	f100 0914 	add.w	r9, r0, #20
 8007d28:	f1c3 0301 	rsb	r3, r3, #1
 8007d2c:	f8cd 9010 	str.w	r9, [sp, #16]
 8007d30:	9308      	str	r3, [sp, #32]
 8007d32:	42b7      	cmp	r7, r6
 8007d34:	d33b      	bcc.n	8007dae <__gethex+0x1ee>
 8007d36:	9804      	ldr	r0, [sp, #16]
 8007d38:	f840 ab04 	str.w	sl, [r0], #4
 8007d3c:	eba0 0009 	sub.w	r0, r0, r9
 8007d40:	1080      	asrs	r0, r0, #2
 8007d42:	6128      	str	r0, [r5, #16]
 8007d44:	0147      	lsls	r7, r0, #5
 8007d46:	4650      	mov	r0, sl
 8007d48:	f000 fafc 	bl	8008344 <__hi0bits>
 8007d4c:	f8d8 6000 	ldr.w	r6, [r8]
 8007d50:	1a3f      	subs	r7, r7, r0
 8007d52:	42b7      	cmp	r7, r6
 8007d54:	dd64      	ble.n	8007e20 <__gethex+0x260>
 8007d56:	1bbf      	subs	r7, r7, r6
 8007d58:	4639      	mov	r1, r7
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	f000 fe05 	bl	800896a <__any_on>
 8007d60:	4682      	mov	sl, r0
 8007d62:	b178      	cbz	r0, 8007d84 <__gethex+0x1c4>
 8007d64:	f04f 0a01 	mov.w	sl, #1
 8007d68:	1e7b      	subs	r3, r7, #1
 8007d6a:	1159      	asrs	r1, r3, #5
 8007d6c:	f003 021f 	and.w	r2, r3, #31
 8007d70:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007d74:	fa0a f202 	lsl.w	r2, sl, r2
 8007d78:	420a      	tst	r2, r1
 8007d7a:	d003      	beq.n	8007d84 <__gethex+0x1c4>
 8007d7c:	4553      	cmp	r3, sl
 8007d7e:	dc46      	bgt.n	8007e0e <__gethex+0x24e>
 8007d80:	f04f 0a02 	mov.w	sl, #2
 8007d84:	4639      	mov	r1, r7
 8007d86:	4628      	mov	r0, r5
 8007d88:	f7ff feca 	bl	8007b20 <rshift>
 8007d8c:	443c      	add	r4, r7
 8007d8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d92:	42a3      	cmp	r3, r4
 8007d94:	da52      	bge.n	8007e3c <__gethex+0x27c>
 8007d96:	4629      	mov	r1, r5
 8007d98:	9802      	ldr	r0, [sp, #8]
 8007d9a:	f000 fa43 	bl	8008224 <_Bfree>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007da2:	27a3      	movs	r7, #163	; 0xa3
 8007da4:	6013      	str	r3, [r2, #0]
 8007da6:	e793      	b.n	8007cd0 <__gethex+0x110>
 8007da8:	3101      	adds	r1, #1
 8007daa:	105b      	asrs	r3, r3, #1
 8007dac:	e7b0      	b.n	8007d10 <__gethex+0x150>
 8007dae:	1e73      	subs	r3, r6, #1
 8007db0:	9305      	str	r3, [sp, #20]
 8007db2:	9a07      	ldr	r2, [sp, #28]
 8007db4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d018      	beq.n	8007dee <__gethex+0x22e>
 8007dbc:	f1bb 0f20 	cmp.w	fp, #32
 8007dc0:	d107      	bne.n	8007dd2 <__gethex+0x212>
 8007dc2:	9b04      	ldr	r3, [sp, #16]
 8007dc4:	f8c3 a000 	str.w	sl, [r3]
 8007dc8:	f04f 0a00 	mov.w	sl, #0
 8007dcc:	46d3      	mov	fp, sl
 8007dce:	3304      	adds	r3, #4
 8007dd0:	9304      	str	r3, [sp, #16]
 8007dd2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007dd6:	f7ff fede 	bl	8007b96 <__hexdig_fun>
 8007dda:	f000 000f 	and.w	r0, r0, #15
 8007dde:	fa00 f00b 	lsl.w	r0, r0, fp
 8007de2:	ea4a 0a00 	orr.w	sl, sl, r0
 8007de6:	f10b 0b04 	add.w	fp, fp, #4
 8007dea:	9b05      	ldr	r3, [sp, #20]
 8007dec:	e00d      	b.n	8007e0a <__gethex+0x24a>
 8007dee:	9b05      	ldr	r3, [sp, #20]
 8007df0:	9a08      	ldr	r2, [sp, #32]
 8007df2:	4413      	add	r3, r2
 8007df4:	42bb      	cmp	r3, r7
 8007df6:	d3e1      	bcc.n	8007dbc <__gethex+0x1fc>
 8007df8:	4618      	mov	r0, r3
 8007dfa:	9a01      	ldr	r2, [sp, #4]
 8007dfc:	9903      	ldr	r1, [sp, #12]
 8007dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8007e00:	f001 f97f 	bl	8009102 <strncmp>
 8007e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e06:	2800      	cmp	r0, #0
 8007e08:	d1d8      	bne.n	8007dbc <__gethex+0x1fc>
 8007e0a:	461e      	mov	r6, r3
 8007e0c:	e791      	b.n	8007d32 <__gethex+0x172>
 8007e0e:	1eb9      	subs	r1, r7, #2
 8007e10:	4628      	mov	r0, r5
 8007e12:	f000 fdaa 	bl	800896a <__any_on>
 8007e16:	2800      	cmp	r0, #0
 8007e18:	d0b2      	beq.n	8007d80 <__gethex+0x1c0>
 8007e1a:	f04f 0a03 	mov.w	sl, #3
 8007e1e:	e7b1      	b.n	8007d84 <__gethex+0x1c4>
 8007e20:	da09      	bge.n	8007e36 <__gethex+0x276>
 8007e22:	1bf7      	subs	r7, r6, r7
 8007e24:	4629      	mov	r1, r5
 8007e26:	463a      	mov	r2, r7
 8007e28:	9802      	ldr	r0, [sp, #8]
 8007e2a:	f000 fbc5 	bl	80085b8 <__lshift>
 8007e2e:	4605      	mov	r5, r0
 8007e30:	1be4      	subs	r4, r4, r7
 8007e32:	f100 0914 	add.w	r9, r0, #20
 8007e36:	f04f 0a00 	mov.w	sl, #0
 8007e3a:	e7a8      	b.n	8007d8e <__gethex+0x1ce>
 8007e3c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007e40:	42a0      	cmp	r0, r4
 8007e42:	dd6b      	ble.n	8007f1c <__gethex+0x35c>
 8007e44:	1b04      	subs	r4, r0, r4
 8007e46:	42a6      	cmp	r6, r4
 8007e48:	dc2e      	bgt.n	8007ea8 <__gethex+0x2e8>
 8007e4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d022      	beq.n	8007e98 <__gethex+0x2d8>
 8007e52:	2b03      	cmp	r3, #3
 8007e54:	d024      	beq.n	8007ea0 <__gethex+0x2e0>
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d115      	bne.n	8007e86 <__gethex+0x2c6>
 8007e5a:	42a6      	cmp	r6, r4
 8007e5c:	d113      	bne.n	8007e86 <__gethex+0x2c6>
 8007e5e:	2e01      	cmp	r6, #1
 8007e60:	dc0b      	bgt.n	8007e7a <__gethex+0x2ba>
 8007e62:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007e66:	9a06      	ldr	r2, [sp, #24]
 8007e68:	2762      	movs	r7, #98	; 0x62
 8007e6a:	6013      	str	r3, [r2, #0]
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	612b      	str	r3, [r5, #16]
 8007e70:	f8c9 3000 	str.w	r3, [r9]
 8007e74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e76:	601d      	str	r5, [r3, #0]
 8007e78:	e72a      	b.n	8007cd0 <__gethex+0x110>
 8007e7a:	1e71      	subs	r1, r6, #1
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	f000 fd74 	bl	800896a <__any_on>
 8007e82:	2800      	cmp	r0, #0
 8007e84:	d1ed      	bne.n	8007e62 <__gethex+0x2a2>
 8007e86:	4629      	mov	r1, r5
 8007e88:	9802      	ldr	r0, [sp, #8]
 8007e8a:	f000 f9cb 	bl	8008224 <_Bfree>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e92:	2750      	movs	r7, #80	; 0x50
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	e71b      	b.n	8007cd0 <__gethex+0x110>
 8007e98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d0e1      	beq.n	8007e62 <__gethex+0x2a2>
 8007e9e:	e7f2      	b.n	8007e86 <__gethex+0x2c6>
 8007ea0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1dd      	bne.n	8007e62 <__gethex+0x2a2>
 8007ea6:	e7ee      	b.n	8007e86 <__gethex+0x2c6>
 8007ea8:	1e67      	subs	r7, r4, #1
 8007eaa:	f1ba 0f00 	cmp.w	sl, #0
 8007eae:	d132      	bne.n	8007f16 <__gethex+0x356>
 8007eb0:	b127      	cbz	r7, 8007ebc <__gethex+0x2fc>
 8007eb2:	4639      	mov	r1, r7
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	f000 fd58 	bl	800896a <__any_on>
 8007eba:	4682      	mov	sl, r0
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	117a      	asrs	r2, r7, #5
 8007ec0:	f007 071f 	and.w	r7, r7, #31
 8007ec4:	fa03 f707 	lsl.w	r7, r3, r7
 8007ec8:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007ecc:	4621      	mov	r1, r4
 8007ece:	421f      	tst	r7, r3
 8007ed0:	f04f 0702 	mov.w	r7, #2
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	bf18      	it	ne
 8007ed8:	f04a 0a02 	orrne.w	sl, sl, #2
 8007edc:	1b36      	subs	r6, r6, r4
 8007ede:	f7ff fe1f 	bl	8007b20 <rshift>
 8007ee2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007ee6:	f1ba 0f00 	cmp.w	sl, #0
 8007eea:	d048      	beq.n	8007f7e <__gethex+0x3be>
 8007eec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d015      	beq.n	8007f20 <__gethex+0x360>
 8007ef4:	2b03      	cmp	r3, #3
 8007ef6:	d017      	beq.n	8007f28 <__gethex+0x368>
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d109      	bne.n	8007f10 <__gethex+0x350>
 8007efc:	f01a 0f02 	tst.w	sl, #2
 8007f00:	d006      	beq.n	8007f10 <__gethex+0x350>
 8007f02:	f8d9 3000 	ldr.w	r3, [r9]
 8007f06:	ea4a 0a03 	orr.w	sl, sl, r3
 8007f0a:	f01a 0f01 	tst.w	sl, #1
 8007f0e:	d10e      	bne.n	8007f2e <__gethex+0x36e>
 8007f10:	f047 0710 	orr.w	r7, r7, #16
 8007f14:	e033      	b.n	8007f7e <__gethex+0x3be>
 8007f16:	f04f 0a01 	mov.w	sl, #1
 8007f1a:	e7cf      	b.n	8007ebc <__gethex+0x2fc>
 8007f1c:	2701      	movs	r7, #1
 8007f1e:	e7e2      	b.n	8007ee6 <__gethex+0x326>
 8007f20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f22:	f1c3 0301 	rsb	r3, r3, #1
 8007f26:	9315      	str	r3, [sp, #84]	; 0x54
 8007f28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d0f0      	beq.n	8007f10 <__gethex+0x350>
 8007f2e:	f04f 0c00 	mov.w	ip, #0
 8007f32:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007f36:	f105 0314 	add.w	r3, r5, #20
 8007f3a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8007f3e:	eb03 010a 	add.w	r1, r3, sl
 8007f42:	4618      	mov	r0, r3
 8007f44:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f48:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007f4c:	d01c      	beq.n	8007f88 <__gethex+0x3c8>
 8007f4e:	3201      	adds	r2, #1
 8007f50:	6002      	str	r2, [r0, #0]
 8007f52:	2f02      	cmp	r7, #2
 8007f54:	f105 0314 	add.w	r3, r5, #20
 8007f58:	d138      	bne.n	8007fcc <__gethex+0x40c>
 8007f5a:	f8d8 2000 	ldr.w	r2, [r8]
 8007f5e:	3a01      	subs	r2, #1
 8007f60:	42b2      	cmp	r2, r6
 8007f62:	d10a      	bne.n	8007f7a <__gethex+0x3ba>
 8007f64:	2201      	movs	r2, #1
 8007f66:	1171      	asrs	r1, r6, #5
 8007f68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007f6c:	f006 061f 	and.w	r6, r6, #31
 8007f70:	fa02 f606 	lsl.w	r6, r2, r6
 8007f74:	421e      	tst	r6, r3
 8007f76:	bf18      	it	ne
 8007f78:	4617      	movne	r7, r2
 8007f7a:	f047 0720 	orr.w	r7, r7, #32
 8007f7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f80:	601d      	str	r5, [r3, #0]
 8007f82:	9b06      	ldr	r3, [sp, #24]
 8007f84:	601c      	str	r4, [r3, #0]
 8007f86:	e6a3      	b.n	8007cd0 <__gethex+0x110>
 8007f88:	4299      	cmp	r1, r3
 8007f8a:	f843 cc04 	str.w	ip, [r3, #-4]
 8007f8e:	d8d8      	bhi.n	8007f42 <__gethex+0x382>
 8007f90:	68ab      	ldr	r3, [r5, #8]
 8007f92:	4599      	cmp	r9, r3
 8007f94:	db12      	blt.n	8007fbc <__gethex+0x3fc>
 8007f96:	6869      	ldr	r1, [r5, #4]
 8007f98:	9802      	ldr	r0, [sp, #8]
 8007f9a:	3101      	adds	r1, #1
 8007f9c:	f000 f90e 	bl	80081bc <_Balloc>
 8007fa0:	4683      	mov	fp, r0
 8007fa2:	692a      	ldr	r2, [r5, #16]
 8007fa4:	f105 010c 	add.w	r1, r5, #12
 8007fa8:	3202      	adds	r2, #2
 8007faa:	0092      	lsls	r2, r2, #2
 8007fac:	300c      	adds	r0, #12
 8007fae:	f7fe fe32 	bl	8006c16 <memcpy>
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	9802      	ldr	r0, [sp, #8]
 8007fb6:	f000 f935 	bl	8008224 <_Bfree>
 8007fba:	465d      	mov	r5, fp
 8007fbc:	692b      	ldr	r3, [r5, #16]
 8007fbe:	1c5a      	adds	r2, r3, #1
 8007fc0:	612a      	str	r2, [r5, #16]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007fc8:	615a      	str	r2, [r3, #20]
 8007fca:	e7c2      	b.n	8007f52 <__gethex+0x392>
 8007fcc:	692a      	ldr	r2, [r5, #16]
 8007fce:	454a      	cmp	r2, r9
 8007fd0:	dd0b      	ble.n	8007fea <__gethex+0x42a>
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	f7ff fda3 	bl	8007b20 <rshift>
 8007fda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007fde:	3401      	adds	r4, #1
 8007fe0:	42a3      	cmp	r3, r4
 8007fe2:	f6ff aed8 	blt.w	8007d96 <__gethex+0x1d6>
 8007fe6:	2701      	movs	r7, #1
 8007fe8:	e7c7      	b.n	8007f7a <__gethex+0x3ba>
 8007fea:	f016 061f 	ands.w	r6, r6, #31
 8007fee:	d0fa      	beq.n	8007fe6 <__gethex+0x426>
 8007ff0:	449a      	add	sl, r3
 8007ff2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007ff6:	f000 f9a5 	bl	8008344 <__hi0bits>
 8007ffa:	f1c6 0620 	rsb	r6, r6, #32
 8007ffe:	42b0      	cmp	r0, r6
 8008000:	dbe7      	blt.n	8007fd2 <__gethex+0x412>
 8008002:	e7f0      	b.n	8007fe6 <__gethex+0x426>

08008004 <L_shift>:
 8008004:	f1c2 0208 	rsb	r2, r2, #8
 8008008:	0092      	lsls	r2, r2, #2
 800800a:	b570      	push	{r4, r5, r6, lr}
 800800c:	f1c2 0620 	rsb	r6, r2, #32
 8008010:	6843      	ldr	r3, [r0, #4]
 8008012:	6804      	ldr	r4, [r0, #0]
 8008014:	fa03 f506 	lsl.w	r5, r3, r6
 8008018:	432c      	orrs	r4, r5
 800801a:	40d3      	lsrs	r3, r2
 800801c:	6004      	str	r4, [r0, #0]
 800801e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008022:	4288      	cmp	r0, r1
 8008024:	d3f4      	bcc.n	8008010 <L_shift+0xc>
 8008026:	bd70      	pop	{r4, r5, r6, pc}

08008028 <__match>:
 8008028:	b530      	push	{r4, r5, lr}
 800802a:	6803      	ldr	r3, [r0, #0]
 800802c:	3301      	adds	r3, #1
 800802e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008032:	b914      	cbnz	r4, 800803a <__match+0x12>
 8008034:	6003      	str	r3, [r0, #0]
 8008036:	2001      	movs	r0, #1
 8008038:	bd30      	pop	{r4, r5, pc}
 800803a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800803e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008042:	2d19      	cmp	r5, #25
 8008044:	bf98      	it	ls
 8008046:	3220      	addls	r2, #32
 8008048:	42a2      	cmp	r2, r4
 800804a:	d0f0      	beq.n	800802e <__match+0x6>
 800804c:	2000      	movs	r0, #0
 800804e:	e7f3      	b.n	8008038 <__match+0x10>

08008050 <__hexnan>:
 8008050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008054:	2500      	movs	r5, #0
 8008056:	680b      	ldr	r3, [r1, #0]
 8008058:	4682      	mov	sl, r0
 800805a:	115f      	asrs	r7, r3, #5
 800805c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008060:	f013 031f 	ands.w	r3, r3, #31
 8008064:	bf18      	it	ne
 8008066:	3704      	addne	r7, #4
 8008068:	1f3e      	subs	r6, r7, #4
 800806a:	4690      	mov	r8, r2
 800806c:	46b1      	mov	r9, r6
 800806e:	4634      	mov	r4, r6
 8008070:	46ab      	mov	fp, r5
 8008072:	b087      	sub	sp, #28
 8008074:	6801      	ldr	r1, [r0, #0]
 8008076:	9301      	str	r3, [sp, #4]
 8008078:	f847 5c04 	str.w	r5, [r7, #-4]
 800807c:	9502      	str	r5, [sp, #8]
 800807e:	784a      	ldrb	r2, [r1, #1]
 8008080:	1c4b      	adds	r3, r1, #1
 8008082:	9303      	str	r3, [sp, #12]
 8008084:	b342      	cbz	r2, 80080d8 <__hexnan+0x88>
 8008086:	4610      	mov	r0, r2
 8008088:	9105      	str	r1, [sp, #20]
 800808a:	9204      	str	r2, [sp, #16]
 800808c:	f7ff fd83 	bl	8007b96 <__hexdig_fun>
 8008090:	2800      	cmp	r0, #0
 8008092:	d143      	bne.n	800811c <__hexnan+0xcc>
 8008094:	9a04      	ldr	r2, [sp, #16]
 8008096:	9905      	ldr	r1, [sp, #20]
 8008098:	2a20      	cmp	r2, #32
 800809a:	d818      	bhi.n	80080ce <__hexnan+0x7e>
 800809c:	9b02      	ldr	r3, [sp, #8]
 800809e:	459b      	cmp	fp, r3
 80080a0:	dd13      	ble.n	80080ca <__hexnan+0x7a>
 80080a2:	454c      	cmp	r4, r9
 80080a4:	d206      	bcs.n	80080b4 <__hexnan+0x64>
 80080a6:	2d07      	cmp	r5, #7
 80080a8:	dc04      	bgt.n	80080b4 <__hexnan+0x64>
 80080aa:	462a      	mov	r2, r5
 80080ac:	4649      	mov	r1, r9
 80080ae:	4620      	mov	r0, r4
 80080b0:	f7ff ffa8 	bl	8008004 <L_shift>
 80080b4:	4544      	cmp	r4, r8
 80080b6:	d944      	bls.n	8008142 <__hexnan+0xf2>
 80080b8:	2300      	movs	r3, #0
 80080ba:	f1a4 0904 	sub.w	r9, r4, #4
 80080be:	f844 3c04 	str.w	r3, [r4, #-4]
 80080c2:	461d      	mov	r5, r3
 80080c4:	464c      	mov	r4, r9
 80080c6:	f8cd b008 	str.w	fp, [sp, #8]
 80080ca:	9903      	ldr	r1, [sp, #12]
 80080cc:	e7d7      	b.n	800807e <__hexnan+0x2e>
 80080ce:	2a29      	cmp	r2, #41	; 0x29
 80080d0:	d14a      	bne.n	8008168 <__hexnan+0x118>
 80080d2:	3102      	adds	r1, #2
 80080d4:	f8ca 1000 	str.w	r1, [sl]
 80080d8:	f1bb 0f00 	cmp.w	fp, #0
 80080dc:	d044      	beq.n	8008168 <__hexnan+0x118>
 80080de:	454c      	cmp	r4, r9
 80080e0:	d206      	bcs.n	80080f0 <__hexnan+0xa0>
 80080e2:	2d07      	cmp	r5, #7
 80080e4:	dc04      	bgt.n	80080f0 <__hexnan+0xa0>
 80080e6:	462a      	mov	r2, r5
 80080e8:	4649      	mov	r1, r9
 80080ea:	4620      	mov	r0, r4
 80080ec:	f7ff ff8a 	bl	8008004 <L_shift>
 80080f0:	4544      	cmp	r4, r8
 80080f2:	d928      	bls.n	8008146 <__hexnan+0xf6>
 80080f4:	4643      	mov	r3, r8
 80080f6:	f854 2b04 	ldr.w	r2, [r4], #4
 80080fa:	42a6      	cmp	r6, r4
 80080fc:	f843 2b04 	str.w	r2, [r3], #4
 8008100:	d2f9      	bcs.n	80080f6 <__hexnan+0xa6>
 8008102:	2200      	movs	r2, #0
 8008104:	f843 2b04 	str.w	r2, [r3], #4
 8008108:	429e      	cmp	r6, r3
 800810a:	d2fb      	bcs.n	8008104 <__hexnan+0xb4>
 800810c:	6833      	ldr	r3, [r6, #0]
 800810e:	b91b      	cbnz	r3, 8008118 <__hexnan+0xc8>
 8008110:	4546      	cmp	r6, r8
 8008112:	d127      	bne.n	8008164 <__hexnan+0x114>
 8008114:	2301      	movs	r3, #1
 8008116:	6033      	str	r3, [r6, #0]
 8008118:	2005      	movs	r0, #5
 800811a:	e026      	b.n	800816a <__hexnan+0x11a>
 800811c:	3501      	adds	r5, #1
 800811e:	2d08      	cmp	r5, #8
 8008120:	f10b 0b01 	add.w	fp, fp, #1
 8008124:	dd06      	ble.n	8008134 <__hexnan+0xe4>
 8008126:	4544      	cmp	r4, r8
 8008128:	d9cf      	bls.n	80080ca <__hexnan+0x7a>
 800812a:	2300      	movs	r3, #0
 800812c:	2501      	movs	r5, #1
 800812e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008132:	3c04      	subs	r4, #4
 8008134:	6822      	ldr	r2, [r4, #0]
 8008136:	f000 000f 	and.w	r0, r0, #15
 800813a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800813e:	6020      	str	r0, [r4, #0]
 8008140:	e7c3      	b.n	80080ca <__hexnan+0x7a>
 8008142:	2508      	movs	r5, #8
 8008144:	e7c1      	b.n	80080ca <__hexnan+0x7a>
 8008146:	9b01      	ldr	r3, [sp, #4]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d0df      	beq.n	800810c <__hexnan+0xbc>
 800814c:	f04f 32ff 	mov.w	r2, #4294967295
 8008150:	f1c3 0320 	rsb	r3, r3, #32
 8008154:	fa22 f303 	lsr.w	r3, r2, r3
 8008158:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800815c:	401a      	ands	r2, r3
 800815e:	f847 2c04 	str.w	r2, [r7, #-4]
 8008162:	e7d3      	b.n	800810c <__hexnan+0xbc>
 8008164:	3e04      	subs	r6, #4
 8008166:	e7d1      	b.n	800810c <__hexnan+0xbc>
 8008168:	2004      	movs	r0, #4
 800816a:	b007      	add	sp, #28
 800816c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008170 <__locale_ctype_ptr_l>:
 8008170:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008174:	4770      	bx	lr
	...

08008178 <__locale_ctype_ptr>:
 8008178:	4b04      	ldr	r3, [pc, #16]	; (800818c <__locale_ctype_ptr+0x14>)
 800817a:	4a05      	ldr	r2, [pc, #20]	; (8008190 <__locale_ctype_ptr+0x18>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6a1b      	ldr	r3, [r3, #32]
 8008180:	2b00      	cmp	r3, #0
 8008182:	bf08      	it	eq
 8008184:	4613      	moveq	r3, r2
 8008186:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800818a:	4770      	bx	lr
 800818c:	200001b4 	.word	0x200001b4
 8008190:	20000218 	.word	0x20000218

08008194 <__localeconv_l>:
 8008194:	30f0      	adds	r0, #240	; 0xf0
 8008196:	4770      	bx	lr

08008198 <__ascii_mbtowc>:
 8008198:	b082      	sub	sp, #8
 800819a:	b901      	cbnz	r1, 800819e <__ascii_mbtowc+0x6>
 800819c:	a901      	add	r1, sp, #4
 800819e:	b142      	cbz	r2, 80081b2 <__ascii_mbtowc+0x1a>
 80081a0:	b14b      	cbz	r3, 80081b6 <__ascii_mbtowc+0x1e>
 80081a2:	7813      	ldrb	r3, [r2, #0]
 80081a4:	600b      	str	r3, [r1, #0]
 80081a6:	7812      	ldrb	r2, [r2, #0]
 80081a8:	1c10      	adds	r0, r2, #0
 80081aa:	bf18      	it	ne
 80081ac:	2001      	movne	r0, #1
 80081ae:	b002      	add	sp, #8
 80081b0:	4770      	bx	lr
 80081b2:	4610      	mov	r0, r2
 80081b4:	e7fb      	b.n	80081ae <__ascii_mbtowc+0x16>
 80081b6:	f06f 0001 	mvn.w	r0, #1
 80081ba:	e7f8      	b.n	80081ae <__ascii_mbtowc+0x16>

080081bc <_Balloc>:
 80081bc:	b570      	push	{r4, r5, r6, lr}
 80081be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80081c0:	4604      	mov	r4, r0
 80081c2:	460e      	mov	r6, r1
 80081c4:	b93d      	cbnz	r5, 80081d6 <_Balloc+0x1a>
 80081c6:	2010      	movs	r0, #16
 80081c8:	f001 f880 	bl	80092cc <malloc>
 80081cc:	6260      	str	r0, [r4, #36]	; 0x24
 80081ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80081d2:	6005      	str	r5, [r0, #0]
 80081d4:	60c5      	str	r5, [r0, #12]
 80081d6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80081d8:	68eb      	ldr	r3, [r5, #12]
 80081da:	b183      	cbz	r3, 80081fe <_Balloc+0x42>
 80081dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80081e4:	b9b8      	cbnz	r0, 8008216 <_Balloc+0x5a>
 80081e6:	2101      	movs	r1, #1
 80081e8:	fa01 f506 	lsl.w	r5, r1, r6
 80081ec:	1d6a      	adds	r2, r5, #5
 80081ee:	0092      	lsls	r2, r2, #2
 80081f0:	4620      	mov	r0, r4
 80081f2:	f000 fbdb 	bl	80089ac <_calloc_r>
 80081f6:	b160      	cbz	r0, 8008212 <_Balloc+0x56>
 80081f8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80081fc:	e00e      	b.n	800821c <_Balloc+0x60>
 80081fe:	2221      	movs	r2, #33	; 0x21
 8008200:	2104      	movs	r1, #4
 8008202:	4620      	mov	r0, r4
 8008204:	f000 fbd2 	bl	80089ac <_calloc_r>
 8008208:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800820a:	60e8      	str	r0, [r5, #12]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1e4      	bne.n	80081dc <_Balloc+0x20>
 8008212:	2000      	movs	r0, #0
 8008214:	bd70      	pop	{r4, r5, r6, pc}
 8008216:	6802      	ldr	r2, [r0, #0]
 8008218:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800821c:	2300      	movs	r3, #0
 800821e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008222:	e7f7      	b.n	8008214 <_Balloc+0x58>

08008224 <_Bfree>:
 8008224:	b570      	push	{r4, r5, r6, lr}
 8008226:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008228:	4606      	mov	r6, r0
 800822a:	460d      	mov	r5, r1
 800822c:	b93c      	cbnz	r4, 800823e <_Bfree+0x1a>
 800822e:	2010      	movs	r0, #16
 8008230:	f001 f84c 	bl	80092cc <malloc>
 8008234:	6270      	str	r0, [r6, #36]	; 0x24
 8008236:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800823a:	6004      	str	r4, [r0, #0]
 800823c:	60c4      	str	r4, [r0, #12]
 800823e:	b13d      	cbz	r5, 8008250 <_Bfree+0x2c>
 8008240:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008242:	686a      	ldr	r2, [r5, #4]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800824a:	6029      	str	r1, [r5, #0]
 800824c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008250:	bd70      	pop	{r4, r5, r6, pc}

08008252 <__multadd>:
 8008252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008256:	461f      	mov	r7, r3
 8008258:	4606      	mov	r6, r0
 800825a:	460c      	mov	r4, r1
 800825c:	2300      	movs	r3, #0
 800825e:	690d      	ldr	r5, [r1, #16]
 8008260:	f101 0c14 	add.w	ip, r1, #20
 8008264:	f8dc 0000 	ldr.w	r0, [ip]
 8008268:	3301      	adds	r3, #1
 800826a:	b281      	uxth	r1, r0
 800826c:	fb02 7101 	mla	r1, r2, r1, r7
 8008270:	0c00      	lsrs	r0, r0, #16
 8008272:	0c0f      	lsrs	r7, r1, #16
 8008274:	fb02 7000 	mla	r0, r2, r0, r7
 8008278:	b289      	uxth	r1, r1
 800827a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800827e:	429d      	cmp	r5, r3
 8008280:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008284:	f84c 1b04 	str.w	r1, [ip], #4
 8008288:	dcec      	bgt.n	8008264 <__multadd+0x12>
 800828a:	b1d7      	cbz	r7, 80082c2 <__multadd+0x70>
 800828c:	68a3      	ldr	r3, [r4, #8]
 800828e:	42ab      	cmp	r3, r5
 8008290:	dc12      	bgt.n	80082b8 <__multadd+0x66>
 8008292:	6861      	ldr	r1, [r4, #4]
 8008294:	4630      	mov	r0, r6
 8008296:	3101      	adds	r1, #1
 8008298:	f7ff ff90 	bl	80081bc <_Balloc>
 800829c:	4680      	mov	r8, r0
 800829e:	6922      	ldr	r2, [r4, #16]
 80082a0:	f104 010c 	add.w	r1, r4, #12
 80082a4:	3202      	adds	r2, #2
 80082a6:	0092      	lsls	r2, r2, #2
 80082a8:	300c      	adds	r0, #12
 80082aa:	f7fe fcb4 	bl	8006c16 <memcpy>
 80082ae:	4621      	mov	r1, r4
 80082b0:	4630      	mov	r0, r6
 80082b2:	f7ff ffb7 	bl	8008224 <_Bfree>
 80082b6:	4644      	mov	r4, r8
 80082b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80082bc:	3501      	adds	r5, #1
 80082be:	615f      	str	r7, [r3, #20]
 80082c0:	6125      	str	r5, [r4, #16]
 80082c2:	4620      	mov	r0, r4
 80082c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080082c8 <__s2b>:
 80082c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082cc:	4615      	mov	r5, r2
 80082ce:	2209      	movs	r2, #9
 80082d0:	461f      	mov	r7, r3
 80082d2:	3308      	adds	r3, #8
 80082d4:	460c      	mov	r4, r1
 80082d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80082da:	4606      	mov	r6, r0
 80082dc:	2201      	movs	r2, #1
 80082de:	2100      	movs	r1, #0
 80082e0:	429a      	cmp	r2, r3
 80082e2:	db20      	blt.n	8008326 <__s2b+0x5e>
 80082e4:	4630      	mov	r0, r6
 80082e6:	f7ff ff69 	bl	80081bc <_Balloc>
 80082ea:	9b08      	ldr	r3, [sp, #32]
 80082ec:	2d09      	cmp	r5, #9
 80082ee:	6143      	str	r3, [r0, #20]
 80082f0:	f04f 0301 	mov.w	r3, #1
 80082f4:	6103      	str	r3, [r0, #16]
 80082f6:	dd19      	ble.n	800832c <__s2b+0x64>
 80082f8:	f104 0809 	add.w	r8, r4, #9
 80082fc:	46c1      	mov	r9, r8
 80082fe:	442c      	add	r4, r5
 8008300:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008304:	4601      	mov	r1, r0
 8008306:	3b30      	subs	r3, #48	; 0x30
 8008308:	220a      	movs	r2, #10
 800830a:	4630      	mov	r0, r6
 800830c:	f7ff ffa1 	bl	8008252 <__multadd>
 8008310:	45a1      	cmp	r9, r4
 8008312:	d1f5      	bne.n	8008300 <__s2b+0x38>
 8008314:	eb08 0405 	add.w	r4, r8, r5
 8008318:	3c08      	subs	r4, #8
 800831a:	1b2d      	subs	r5, r5, r4
 800831c:	1963      	adds	r3, r4, r5
 800831e:	42bb      	cmp	r3, r7
 8008320:	db07      	blt.n	8008332 <__s2b+0x6a>
 8008322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008326:	0052      	lsls	r2, r2, #1
 8008328:	3101      	adds	r1, #1
 800832a:	e7d9      	b.n	80082e0 <__s2b+0x18>
 800832c:	340a      	adds	r4, #10
 800832e:	2509      	movs	r5, #9
 8008330:	e7f3      	b.n	800831a <__s2b+0x52>
 8008332:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008336:	4601      	mov	r1, r0
 8008338:	3b30      	subs	r3, #48	; 0x30
 800833a:	220a      	movs	r2, #10
 800833c:	4630      	mov	r0, r6
 800833e:	f7ff ff88 	bl	8008252 <__multadd>
 8008342:	e7eb      	b.n	800831c <__s2b+0x54>

08008344 <__hi0bits>:
 8008344:	0c02      	lsrs	r2, r0, #16
 8008346:	0412      	lsls	r2, r2, #16
 8008348:	4603      	mov	r3, r0
 800834a:	b9b2      	cbnz	r2, 800837a <__hi0bits+0x36>
 800834c:	0403      	lsls	r3, r0, #16
 800834e:	2010      	movs	r0, #16
 8008350:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008354:	bf04      	itt	eq
 8008356:	021b      	lsleq	r3, r3, #8
 8008358:	3008      	addeq	r0, #8
 800835a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800835e:	bf04      	itt	eq
 8008360:	011b      	lsleq	r3, r3, #4
 8008362:	3004      	addeq	r0, #4
 8008364:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008368:	bf04      	itt	eq
 800836a:	009b      	lsleq	r3, r3, #2
 800836c:	3002      	addeq	r0, #2
 800836e:	2b00      	cmp	r3, #0
 8008370:	db06      	blt.n	8008380 <__hi0bits+0x3c>
 8008372:	005b      	lsls	r3, r3, #1
 8008374:	d503      	bpl.n	800837e <__hi0bits+0x3a>
 8008376:	3001      	adds	r0, #1
 8008378:	4770      	bx	lr
 800837a:	2000      	movs	r0, #0
 800837c:	e7e8      	b.n	8008350 <__hi0bits+0xc>
 800837e:	2020      	movs	r0, #32
 8008380:	4770      	bx	lr

08008382 <__lo0bits>:
 8008382:	6803      	ldr	r3, [r0, #0]
 8008384:	4601      	mov	r1, r0
 8008386:	f013 0207 	ands.w	r2, r3, #7
 800838a:	d00b      	beq.n	80083a4 <__lo0bits+0x22>
 800838c:	07da      	lsls	r2, r3, #31
 800838e:	d423      	bmi.n	80083d8 <__lo0bits+0x56>
 8008390:	0798      	lsls	r0, r3, #30
 8008392:	bf49      	itett	mi
 8008394:	085b      	lsrmi	r3, r3, #1
 8008396:	089b      	lsrpl	r3, r3, #2
 8008398:	2001      	movmi	r0, #1
 800839a:	600b      	strmi	r3, [r1, #0]
 800839c:	bf5c      	itt	pl
 800839e:	600b      	strpl	r3, [r1, #0]
 80083a0:	2002      	movpl	r0, #2
 80083a2:	4770      	bx	lr
 80083a4:	b298      	uxth	r0, r3
 80083a6:	b9a8      	cbnz	r0, 80083d4 <__lo0bits+0x52>
 80083a8:	2010      	movs	r0, #16
 80083aa:	0c1b      	lsrs	r3, r3, #16
 80083ac:	f013 0fff 	tst.w	r3, #255	; 0xff
 80083b0:	bf04      	itt	eq
 80083b2:	0a1b      	lsreq	r3, r3, #8
 80083b4:	3008      	addeq	r0, #8
 80083b6:	071a      	lsls	r2, r3, #28
 80083b8:	bf04      	itt	eq
 80083ba:	091b      	lsreq	r3, r3, #4
 80083bc:	3004      	addeq	r0, #4
 80083be:	079a      	lsls	r2, r3, #30
 80083c0:	bf04      	itt	eq
 80083c2:	089b      	lsreq	r3, r3, #2
 80083c4:	3002      	addeq	r0, #2
 80083c6:	07da      	lsls	r2, r3, #31
 80083c8:	d402      	bmi.n	80083d0 <__lo0bits+0x4e>
 80083ca:	085b      	lsrs	r3, r3, #1
 80083cc:	d006      	beq.n	80083dc <__lo0bits+0x5a>
 80083ce:	3001      	adds	r0, #1
 80083d0:	600b      	str	r3, [r1, #0]
 80083d2:	4770      	bx	lr
 80083d4:	4610      	mov	r0, r2
 80083d6:	e7e9      	b.n	80083ac <__lo0bits+0x2a>
 80083d8:	2000      	movs	r0, #0
 80083da:	4770      	bx	lr
 80083dc:	2020      	movs	r0, #32
 80083de:	4770      	bx	lr

080083e0 <__i2b>:
 80083e0:	b510      	push	{r4, lr}
 80083e2:	460c      	mov	r4, r1
 80083e4:	2101      	movs	r1, #1
 80083e6:	f7ff fee9 	bl	80081bc <_Balloc>
 80083ea:	2201      	movs	r2, #1
 80083ec:	6144      	str	r4, [r0, #20]
 80083ee:	6102      	str	r2, [r0, #16]
 80083f0:	bd10      	pop	{r4, pc}

080083f2 <__multiply>:
 80083f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f6:	4614      	mov	r4, r2
 80083f8:	690a      	ldr	r2, [r1, #16]
 80083fa:	6923      	ldr	r3, [r4, #16]
 80083fc:	4688      	mov	r8, r1
 80083fe:	429a      	cmp	r2, r3
 8008400:	bfbe      	ittt	lt
 8008402:	460b      	movlt	r3, r1
 8008404:	46a0      	movlt	r8, r4
 8008406:	461c      	movlt	r4, r3
 8008408:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800840c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008410:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008414:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008418:	eb07 0609 	add.w	r6, r7, r9
 800841c:	42b3      	cmp	r3, r6
 800841e:	bfb8      	it	lt
 8008420:	3101      	addlt	r1, #1
 8008422:	f7ff fecb 	bl	80081bc <_Balloc>
 8008426:	f100 0514 	add.w	r5, r0, #20
 800842a:	462b      	mov	r3, r5
 800842c:	2200      	movs	r2, #0
 800842e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008432:	4573      	cmp	r3, lr
 8008434:	d316      	bcc.n	8008464 <__multiply+0x72>
 8008436:	f104 0214 	add.w	r2, r4, #20
 800843a:	f108 0114 	add.w	r1, r8, #20
 800843e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008442:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	9b00      	ldr	r3, [sp, #0]
 800844a:	9201      	str	r2, [sp, #4]
 800844c:	4293      	cmp	r3, r2
 800844e:	d80c      	bhi.n	800846a <__multiply+0x78>
 8008450:	2e00      	cmp	r6, #0
 8008452:	dd03      	ble.n	800845c <__multiply+0x6a>
 8008454:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008458:	2b00      	cmp	r3, #0
 800845a:	d05d      	beq.n	8008518 <__multiply+0x126>
 800845c:	6106      	str	r6, [r0, #16]
 800845e:	b003      	add	sp, #12
 8008460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008464:	f843 2b04 	str.w	r2, [r3], #4
 8008468:	e7e3      	b.n	8008432 <__multiply+0x40>
 800846a:	f8b2 b000 	ldrh.w	fp, [r2]
 800846e:	f1bb 0f00 	cmp.w	fp, #0
 8008472:	d023      	beq.n	80084bc <__multiply+0xca>
 8008474:	4689      	mov	r9, r1
 8008476:	46ac      	mov	ip, r5
 8008478:	f04f 0800 	mov.w	r8, #0
 800847c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008480:	f8dc a000 	ldr.w	sl, [ip]
 8008484:	b2a3      	uxth	r3, r4
 8008486:	fa1f fa8a 	uxth.w	sl, sl
 800848a:	fb0b a303 	mla	r3, fp, r3, sl
 800848e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008492:	f8dc 4000 	ldr.w	r4, [ip]
 8008496:	4443      	add	r3, r8
 8008498:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800849c:	fb0b 840a 	mla	r4, fp, sl, r8
 80084a0:	46e2      	mov	sl, ip
 80084a2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80084ac:	454f      	cmp	r7, r9
 80084ae:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80084b2:	f84a 3b04 	str.w	r3, [sl], #4
 80084b6:	d82b      	bhi.n	8008510 <__multiply+0x11e>
 80084b8:	f8cc 8004 	str.w	r8, [ip, #4]
 80084bc:	9b01      	ldr	r3, [sp, #4]
 80084be:	3204      	adds	r2, #4
 80084c0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80084c4:	f1ba 0f00 	cmp.w	sl, #0
 80084c8:	d020      	beq.n	800850c <__multiply+0x11a>
 80084ca:	4689      	mov	r9, r1
 80084cc:	46a8      	mov	r8, r5
 80084ce:	f04f 0b00 	mov.w	fp, #0
 80084d2:	682b      	ldr	r3, [r5, #0]
 80084d4:	f8b9 c000 	ldrh.w	ip, [r9]
 80084d8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80084dc:	b29b      	uxth	r3, r3
 80084de:	fb0a 440c 	mla	r4, sl, ip, r4
 80084e2:	46c4      	mov	ip, r8
 80084e4:	445c      	add	r4, fp
 80084e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80084ea:	f84c 3b04 	str.w	r3, [ip], #4
 80084ee:	f859 3b04 	ldr.w	r3, [r9], #4
 80084f2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80084f6:	0c1b      	lsrs	r3, r3, #16
 80084f8:	fb0a b303 	mla	r3, sl, r3, fp
 80084fc:	454f      	cmp	r7, r9
 80084fe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008502:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008506:	d805      	bhi.n	8008514 <__multiply+0x122>
 8008508:	f8c8 3004 	str.w	r3, [r8, #4]
 800850c:	3504      	adds	r5, #4
 800850e:	e79b      	b.n	8008448 <__multiply+0x56>
 8008510:	46d4      	mov	ip, sl
 8008512:	e7b3      	b.n	800847c <__multiply+0x8a>
 8008514:	46e0      	mov	r8, ip
 8008516:	e7dd      	b.n	80084d4 <__multiply+0xe2>
 8008518:	3e01      	subs	r6, #1
 800851a:	e799      	b.n	8008450 <__multiply+0x5e>

0800851c <__pow5mult>:
 800851c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008520:	4615      	mov	r5, r2
 8008522:	f012 0203 	ands.w	r2, r2, #3
 8008526:	4606      	mov	r6, r0
 8008528:	460f      	mov	r7, r1
 800852a:	d007      	beq.n	800853c <__pow5mult+0x20>
 800852c:	4c21      	ldr	r4, [pc, #132]	; (80085b4 <__pow5mult+0x98>)
 800852e:	3a01      	subs	r2, #1
 8008530:	2300      	movs	r3, #0
 8008532:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008536:	f7ff fe8c 	bl	8008252 <__multadd>
 800853a:	4607      	mov	r7, r0
 800853c:	10ad      	asrs	r5, r5, #2
 800853e:	d035      	beq.n	80085ac <__pow5mult+0x90>
 8008540:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008542:	b93c      	cbnz	r4, 8008554 <__pow5mult+0x38>
 8008544:	2010      	movs	r0, #16
 8008546:	f000 fec1 	bl	80092cc <malloc>
 800854a:	6270      	str	r0, [r6, #36]	; 0x24
 800854c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008550:	6004      	str	r4, [r0, #0]
 8008552:	60c4      	str	r4, [r0, #12]
 8008554:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008558:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800855c:	b94c      	cbnz	r4, 8008572 <__pow5mult+0x56>
 800855e:	f240 2171 	movw	r1, #625	; 0x271
 8008562:	4630      	mov	r0, r6
 8008564:	f7ff ff3c 	bl	80083e0 <__i2b>
 8008568:	2300      	movs	r3, #0
 800856a:	4604      	mov	r4, r0
 800856c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008570:	6003      	str	r3, [r0, #0]
 8008572:	f04f 0800 	mov.w	r8, #0
 8008576:	07eb      	lsls	r3, r5, #31
 8008578:	d50a      	bpl.n	8008590 <__pow5mult+0x74>
 800857a:	4639      	mov	r1, r7
 800857c:	4622      	mov	r2, r4
 800857e:	4630      	mov	r0, r6
 8008580:	f7ff ff37 	bl	80083f2 <__multiply>
 8008584:	4681      	mov	r9, r0
 8008586:	4639      	mov	r1, r7
 8008588:	4630      	mov	r0, r6
 800858a:	f7ff fe4b 	bl	8008224 <_Bfree>
 800858e:	464f      	mov	r7, r9
 8008590:	106d      	asrs	r5, r5, #1
 8008592:	d00b      	beq.n	80085ac <__pow5mult+0x90>
 8008594:	6820      	ldr	r0, [r4, #0]
 8008596:	b938      	cbnz	r0, 80085a8 <__pow5mult+0x8c>
 8008598:	4622      	mov	r2, r4
 800859a:	4621      	mov	r1, r4
 800859c:	4630      	mov	r0, r6
 800859e:	f7ff ff28 	bl	80083f2 <__multiply>
 80085a2:	6020      	str	r0, [r4, #0]
 80085a4:	f8c0 8000 	str.w	r8, [r0]
 80085a8:	4604      	mov	r4, r0
 80085aa:	e7e4      	b.n	8008576 <__pow5mult+0x5a>
 80085ac:	4638      	mov	r0, r7
 80085ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085b2:	bf00      	nop
 80085b4:	0800a570 	.word	0x0800a570

080085b8 <__lshift>:
 80085b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085bc:	460c      	mov	r4, r1
 80085be:	4607      	mov	r7, r0
 80085c0:	4616      	mov	r6, r2
 80085c2:	6923      	ldr	r3, [r4, #16]
 80085c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80085c8:	eb0a 0903 	add.w	r9, sl, r3
 80085cc:	6849      	ldr	r1, [r1, #4]
 80085ce:	68a3      	ldr	r3, [r4, #8]
 80085d0:	f109 0501 	add.w	r5, r9, #1
 80085d4:	42ab      	cmp	r3, r5
 80085d6:	db32      	blt.n	800863e <__lshift+0x86>
 80085d8:	4638      	mov	r0, r7
 80085da:	f7ff fdef 	bl	80081bc <_Balloc>
 80085de:	2300      	movs	r3, #0
 80085e0:	4680      	mov	r8, r0
 80085e2:	461a      	mov	r2, r3
 80085e4:	f100 0114 	add.w	r1, r0, #20
 80085e8:	4553      	cmp	r3, sl
 80085ea:	db2b      	blt.n	8008644 <__lshift+0x8c>
 80085ec:	6920      	ldr	r0, [r4, #16]
 80085ee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085f2:	f104 0314 	add.w	r3, r4, #20
 80085f6:	f016 021f 	ands.w	r2, r6, #31
 80085fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085fe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008602:	d025      	beq.n	8008650 <__lshift+0x98>
 8008604:	2000      	movs	r0, #0
 8008606:	f1c2 0e20 	rsb	lr, r2, #32
 800860a:	468a      	mov	sl, r1
 800860c:	681e      	ldr	r6, [r3, #0]
 800860e:	4096      	lsls	r6, r2
 8008610:	4330      	orrs	r0, r6
 8008612:	f84a 0b04 	str.w	r0, [sl], #4
 8008616:	f853 0b04 	ldr.w	r0, [r3], #4
 800861a:	459c      	cmp	ip, r3
 800861c:	fa20 f00e 	lsr.w	r0, r0, lr
 8008620:	d814      	bhi.n	800864c <__lshift+0x94>
 8008622:	6048      	str	r0, [r1, #4]
 8008624:	b108      	cbz	r0, 800862a <__lshift+0x72>
 8008626:	f109 0502 	add.w	r5, r9, #2
 800862a:	3d01      	subs	r5, #1
 800862c:	4638      	mov	r0, r7
 800862e:	f8c8 5010 	str.w	r5, [r8, #16]
 8008632:	4621      	mov	r1, r4
 8008634:	f7ff fdf6 	bl	8008224 <_Bfree>
 8008638:	4640      	mov	r0, r8
 800863a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800863e:	3101      	adds	r1, #1
 8008640:	005b      	lsls	r3, r3, #1
 8008642:	e7c7      	b.n	80085d4 <__lshift+0x1c>
 8008644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008648:	3301      	adds	r3, #1
 800864a:	e7cd      	b.n	80085e8 <__lshift+0x30>
 800864c:	4651      	mov	r1, sl
 800864e:	e7dc      	b.n	800860a <__lshift+0x52>
 8008650:	3904      	subs	r1, #4
 8008652:	f853 2b04 	ldr.w	r2, [r3], #4
 8008656:	459c      	cmp	ip, r3
 8008658:	f841 2f04 	str.w	r2, [r1, #4]!
 800865c:	d8f9      	bhi.n	8008652 <__lshift+0x9a>
 800865e:	e7e4      	b.n	800862a <__lshift+0x72>

08008660 <__mcmp>:
 8008660:	6903      	ldr	r3, [r0, #16]
 8008662:	690a      	ldr	r2, [r1, #16]
 8008664:	b530      	push	{r4, r5, lr}
 8008666:	1a9b      	subs	r3, r3, r2
 8008668:	d10c      	bne.n	8008684 <__mcmp+0x24>
 800866a:	0092      	lsls	r2, r2, #2
 800866c:	3014      	adds	r0, #20
 800866e:	3114      	adds	r1, #20
 8008670:	1884      	adds	r4, r0, r2
 8008672:	4411      	add	r1, r2
 8008674:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008678:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800867c:	4295      	cmp	r5, r2
 800867e:	d003      	beq.n	8008688 <__mcmp+0x28>
 8008680:	d305      	bcc.n	800868e <__mcmp+0x2e>
 8008682:	2301      	movs	r3, #1
 8008684:	4618      	mov	r0, r3
 8008686:	bd30      	pop	{r4, r5, pc}
 8008688:	42a0      	cmp	r0, r4
 800868a:	d3f3      	bcc.n	8008674 <__mcmp+0x14>
 800868c:	e7fa      	b.n	8008684 <__mcmp+0x24>
 800868e:	f04f 33ff 	mov.w	r3, #4294967295
 8008692:	e7f7      	b.n	8008684 <__mcmp+0x24>

08008694 <__mdiff>:
 8008694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008698:	460d      	mov	r5, r1
 800869a:	4607      	mov	r7, r0
 800869c:	4611      	mov	r1, r2
 800869e:	4628      	mov	r0, r5
 80086a0:	4614      	mov	r4, r2
 80086a2:	f7ff ffdd 	bl	8008660 <__mcmp>
 80086a6:	1e06      	subs	r6, r0, #0
 80086a8:	d108      	bne.n	80086bc <__mdiff+0x28>
 80086aa:	4631      	mov	r1, r6
 80086ac:	4638      	mov	r0, r7
 80086ae:	f7ff fd85 	bl	80081bc <_Balloc>
 80086b2:	2301      	movs	r3, #1
 80086b4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80086b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086bc:	bfa4      	itt	ge
 80086be:	4623      	movge	r3, r4
 80086c0:	462c      	movge	r4, r5
 80086c2:	4638      	mov	r0, r7
 80086c4:	6861      	ldr	r1, [r4, #4]
 80086c6:	bfa6      	itte	ge
 80086c8:	461d      	movge	r5, r3
 80086ca:	2600      	movge	r6, #0
 80086cc:	2601      	movlt	r6, #1
 80086ce:	f7ff fd75 	bl	80081bc <_Balloc>
 80086d2:	f04f 0e00 	mov.w	lr, #0
 80086d6:	60c6      	str	r6, [r0, #12]
 80086d8:	692b      	ldr	r3, [r5, #16]
 80086da:	6926      	ldr	r6, [r4, #16]
 80086dc:	f104 0214 	add.w	r2, r4, #20
 80086e0:	f105 0914 	add.w	r9, r5, #20
 80086e4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80086e8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80086ec:	f100 0114 	add.w	r1, r0, #20
 80086f0:	f852 ab04 	ldr.w	sl, [r2], #4
 80086f4:	f859 5b04 	ldr.w	r5, [r9], #4
 80086f8:	fa1f f38a 	uxth.w	r3, sl
 80086fc:	4473      	add	r3, lr
 80086fe:	b2ac      	uxth	r4, r5
 8008700:	1b1b      	subs	r3, r3, r4
 8008702:	0c2c      	lsrs	r4, r5, #16
 8008704:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008708:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800870c:	b29b      	uxth	r3, r3
 800870e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8008712:	45c8      	cmp	r8, r9
 8008714:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008718:	4694      	mov	ip, r2
 800871a:	f841 4b04 	str.w	r4, [r1], #4
 800871e:	d8e7      	bhi.n	80086f0 <__mdiff+0x5c>
 8008720:	45bc      	cmp	ip, r7
 8008722:	d304      	bcc.n	800872e <__mdiff+0x9a>
 8008724:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008728:	b183      	cbz	r3, 800874c <__mdiff+0xb8>
 800872a:	6106      	str	r6, [r0, #16]
 800872c:	e7c4      	b.n	80086b8 <__mdiff+0x24>
 800872e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8008732:	b2a2      	uxth	r2, r4
 8008734:	4472      	add	r2, lr
 8008736:	1413      	asrs	r3, r2, #16
 8008738:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800873c:	b292      	uxth	r2, r2
 800873e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008742:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008746:	f841 2b04 	str.w	r2, [r1], #4
 800874a:	e7e9      	b.n	8008720 <__mdiff+0x8c>
 800874c:	3e01      	subs	r6, #1
 800874e:	e7e9      	b.n	8008724 <__mdiff+0x90>

08008750 <__ulp>:
 8008750:	4b10      	ldr	r3, [pc, #64]	; (8008794 <__ulp+0x44>)
 8008752:	400b      	ands	r3, r1
 8008754:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008758:	2b00      	cmp	r3, #0
 800875a:	dd02      	ble.n	8008762 <__ulp+0x12>
 800875c:	2000      	movs	r0, #0
 800875e:	4619      	mov	r1, r3
 8008760:	4770      	bx	lr
 8008762:	425b      	negs	r3, r3
 8008764:	151b      	asrs	r3, r3, #20
 8008766:	2b13      	cmp	r3, #19
 8008768:	f04f 0000 	mov.w	r0, #0
 800876c:	f04f 0100 	mov.w	r1, #0
 8008770:	dc04      	bgt.n	800877c <__ulp+0x2c>
 8008772:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008776:	fa42 f103 	asr.w	r1, r2, r3
 800877a:	4770      	bx	lr
 800877c:	2201      	movs	r2, #1
 800877e:	3b14      	subs	r3, #20
 8008780:	2b1e      	cmp	r3, #30
 8008782:	bfce      	itee	gt
 8008784:	4613      	movgt	r3, r2
 8008786:	f1c3 031f 	rsble	r3, r3, #31
 800878a:	fa02 f303 	lslle.w	r3, r2, r3
 800878e:	4618      	mov	r0, r3
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	7ff00000 	.word	0x7ff00000

08008798 <__b2d>:
 8008798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800879c:	6907      	ldr	r7, [r0, #16]
 800879e:	f100 0914 	add.w	r9, r0, #20
 80087a2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80087a6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80087aa:	f1a7 0804 	sub.w	r8, r7, #4
 80087ae:	4630      	mov	r0, r6
 80087b0:	f7ff fdc8 	bl	8008344 <__hi0bits>
 80087b4:	f1c0 0320 	rsb	r3, r0, #32
 80087b8:	280a      	cmp	r0, #10
 80087ba:	600b      	str	r3, [r1, #0]
 80087bc:	491e      	ldr	r1, [pc, #120]	; (8008838 <__b2d+0xa0>)
 80087be:	dc17      	bgt.n	80087f0 <__b2d+0x58>
 80087c0:	45c1      	cmp	r9, r8
 80087c2:	bf28      	it	cs
 80087c4:	2200      	movcs	r2, #0
 80087c6:	f1c0 0c0b 	rsb	ip, r0, #11
 80087ca:	fa26 f30c 	lsr.w	r3, r6, ip
 80087ce:	bf38      	it	cc
 80087d0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80087d4:	ea43 0501 	orr.w	r5, r3, r1
 80087d8:	f100 0315 	add.w	r3, r0, #21
 80087dc:	fa06 f303 	lsl.w	r3, r6, r3
 80087e0:	fa22 f20c 	lsr.w	r2, r2, ip
 80087e4:	ea43 0402 	orr.w	r4, r3, r2
 80087e8:	4620      	mov	r0, r4
 80087ea:	4629      	mov	r1, r5
 80087ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087f0:	45c1      	cmp	r9, r8
 80087f2:	bf3a      	itte	cc
 80087f4:	f1a7 0808 	subcc.w	r8, r7, #8
 80087f8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80087fc:	2200      	movcs	r2, #0
 80087fe:	f1b0 030b 	subs.w	r3, r0, #11
 8008802:	d015      	beq.n	8008830 <__b2d+0x98>
 8008804:	409e      	lsls	r6, r3
 8008806:	f1c3 0720 	rsb	r7, r3, #32
 800880a:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800880e:	fa22 f107 	lsr.w	r1, r2, r7
 8008812:	45c8      	cmp	r8, r9
 8008814:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8008818:	ea46 0501 	orr.w	r5, r6, r1
 800881c:	bf94      	ite	ls
 800881e:	2100      	movls	r1, #0
 8008820:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008824:	fa02 f003 	lsl.w	r0, r2, r3
 8008828:	40f9      	lsrs	r1, r7
 800882a:	ea40 0401 	orr.w	r4, r0, r1
 800882e:	e7db      	b.n	80087e8 <__b2d+0x50>
 8008830:	ea46 0501 	orr.w	r5, r6, r1
 8008834:	4614      	mov	r4, r2
 8008836:	e7d7      	b.n	80087e8 <__b2d+0x50>
 8008838:	3ff00000 	.word	0x3ff00000

0800883c <__d2b>:
 800883c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008840:	461c      	mov	r4, r3
 8008842:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008846:	2101      	movs	r1, #1
 8008848:	4690      	mov	r8, r2
 800884a:	f7ff fcb7 	bl	80081bc <_Balloc>
 800884e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8008852:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008856:	4607      	mov	r7, r0
 8008858:	bb34      	cbnz	r4, 80088a8 <__d2b+0x6c>
 800885a:	9201      	str	r2, [sp, #4]
 800885c:	f1b8 0200 	subs.w	r2, r8, #0
 8008860:	d027      	beq.n	80088b2 <__d2b+0x76>
 8008862:	a802      	add	r0, sp, #8
 8008864:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008868:	f7ff fd8b 	bl	8008382 <__lo0bits>
 800886c:	9900      	ldr	r1, [sp, #0]
 800886e:	b1f0      	cbz	r0, 80088ae <__d2b+0x72>
 8008870:	9a01      	ldr	r2, [sp, #4]
 8008872:	f1c0 0320 	rsb	r3, r0, #32
 8008876:	fa02 f303 	lsl.w	r3, r2, r3
 800887a:	430b      	orrs	r3, r1
 800887c:	40c2      	lsrs	r2, r0
 800887e:	617b      	str	r3, [r7, #20]
 8008880:	9201      	str	r2, [sp, #4]
 8008882:	9b01      	ldr	r3, [sp, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	bf14      	ite	ne
 8008888:	2102      	movne	r1, #2
 800888a:	2101      	moveq	r1, #1
 800888c:	61bb      	str	r3, [r7, #24]
 800888e:	6139      	str	r1, [r7, #16]
 8008890:	b1c4      	cbz	r4, 80088c4 <__d2b+0x88>
 8008892:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008896:	4404      	add	r4, r0
 8008898:	6034      	str	r4, [r6, #0]
 800889a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800889e:	6028      	str	r0, [r5, #0]
 80088a0:	4638      	mov	r0, r7
 80088a2:	b002      	add	sp, #8
 80088a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088a8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80088ac:	e7d5      	b.n	800885a <__d2b+0x1e>
 80088ae:	6179      	str	r1, [r7, #20]
 80088b0:	e7e7      	b.n	8008882 <__d2b+0x46>
 80088b2:	a801      	add	r0, sp, #4
 80088b4:	f7ff fd65 	bl	8008382 <__lo0bits>
 80088b8:	2101      	movs	r1, #1
 80088ba:	9b01      	ldr	r3, [sp, #4]
 80088bc:	6139      	str	r1, [r7, #16]
 80088be:	617b      	str	r3, [r7, #20]
 80088c0:	3020      	adds	r0, #32
 80088c2:	e7e5      	b.n	8008890 <__d2b+0x54>
 80088c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80088c8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80088cc:	6030      	str	r0, [r6, #0]
 80088ce:	6918      	ldr	r0, [r3, #16]
 80088d0:	f7ff fd38 	bl	8008344 <__hi0bits>
 80088d4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80088d8:	e7e1      	b.n	800889e <__d2b+0x62>

080088da <__ratio>:
 80088da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088de:	4688      	mov	r8, r1
 80088e0:	4669      	mov	r1, sp
 80088e2:	4681      	mov	r9, r0
 80088e4:	f7ff ff58 	bl	8008798 <__b2d>
 80088e8:	468b      	mov	fp, r1
 80088ea:	4606      	mov	r6, r0
 80088ec:	460f      	mov	r7, r1
 80088ee:	4640      	mov	r0, r8
 80088f0:	a901      	add	r1, sp, #4
 80088f2:	f7ff ff51 	bl	8008798 <__b2d>
 80088f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80088fa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80088fe:	460d      	mov	r5, r1
 8008900:	eba3 0c02 	sub.w	ip, r3, r2
 8008904:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008908:	1a9b      	subs	r3, r3, r2
 800890a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800890e:	2b00      	cmp	r3, #0
 8008910:	bfd5      	itete	le
 8008912:	460a      	movle	r2, r1
 8008914:	463a      	movgt	r2, r7
 8008916:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800891a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800891e:	bfd8      	it	le
 8008920:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8008924:	462b      	mov	r3, r5
 8008926:	4602      	mov	r2, r0
 8008928:	4659      	mov	r1, fp
 800892a:	4630      	mov	r0, r6
 800892c:	f7f7 fefe 	bl	800072c <__aeabi_ddiv>
 8008930:	b003      	add	sp, #12
 8008932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008936 <__copybits>:
 8008936:	3901      	subs	r1, #1
 8008938:	b510      	push	{r4, lr}
 800893a:	1149      	asrs	r1, r1, #5
 800893c:	6914      	ldr	r4, [r2, #16]
 800893e:	3101      	adds	r1, #1
 8008940:	f102 0314 	add.w	r3, r2, #20
 8008944:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008948:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800894c:	42a3      	cmp	r3, r4
 800894e:	4602      	mov	r2, r0
 8008950:	d303      	bcc.n	800895a <__copybits+0x24>
 8008952:	2300      	movs	r3, #0
 8008954:	428a      	cmp	r2, r1
 8008956:	d305      	bcc.n	8008964 <__copybits+0x2e>
 8008958:	bd10      	pop	{r4, pc}
 800895a:	f853 2b04 	ldr.w	r2, [r3], #4
 800895e:	f840 2b04 	str.w	r2, [r0], #4
 8008962:	e7f3      	b.n	800894c <__copybits+0x16>
 8008964:	f842 3b04 	str.w	r3, [r2], #4
 8008968:	e7f4      	b.n	8008954 <__copybits+0x1e>

0800896a <__any_on>:
 800896a:	f100 0214 	add.w	r2, r0, #20
 800896e:	6900      	ldr	r0, [r0, #16]
 8008970:	114b      	asrs	r3, r1, #5
 8008972:	4298      	cmp	r0, r3
 8008974:	b510      	push	{r4, lr}
 8008976:	db11      	blt.n	800899c <__any_on+0x32>
 8008978:	dd0a      	ble.n	8008990 <__any_on+0x26>
 800897a:	f011 011f 	ands.w	r1, r1, #31
 800897e:	d007      	beq.n	8008990 <__any_on+0x26>
 8008980:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008984:	fa24 f001 	lsr.w	r0, r4, r1
 8008988:	fa00 f101 	lsl.w	r1, r0, r1
 800898c:	428c      	cmp	r4, r1
 800898e:	d10b      	bne.n	80089a8 <__any_on+0x3e>
 8008990:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008994:	4293      	cmp	r3, r2
 8008996:	d803      	bhi.n	80089a0 <__any_on+0x36>
 8008998:	2000      	movs	r0, #0
 800899a:	bd10      	pop	{r4, pc}
 800899c:	4603      	mov	r3, r0
 800899e:	e7f7      	b.n	8008990 <__any_on+0x26>
 80089a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80089a4:	2900      	cmp	r1, #0
 80089a6:	d0f5      	beq.n	8008994 <__any_on+0x2a>
 80089a8:	2001      	movs	r0, #1
 80089aa:	e7f6      	b.n	800899a <__any_on+0x30>

080089ac <_calloc_r>:
 80089ac:	b538      	push	{r3, r4, r5, lr}
 80089ae:	fb02 f401 	mul.w	r4, r2, r1
 80089b2:	4621      	mov	r1, r4
 80089b4:	f000 f808 	bl	80089c8 <_malloc_r>
 80089b8:	4605      	mov	r5, r0
 80089ba:	b118      	cbz	r0, 80089c4 <_calloc_r+0x18>
 80089bc:	4622      	mov	r2, r4
 80089be:	2100      	movs	r1, #0
 80089c0:	f7fe f934 	bl	8006c2c <memset>
 80089c4:	4628      	mov	r0, r5
 80089c6:	bd38      	pop	{r3, r4, r5, pc}

080089c8 <_malloc_r>:
 80089c8:	b570      	push	{r4, r5, r6, lr}
 80089ca:	1ccd      	adds	r5, r1, #3
 80089cc:	f025 0503 	bic.w	r5, r5, #3
 80089d0:	3508      	adds	r5, #8
 80089d2:	2d0c      	cmp	r5, #12
 80089d4:	bf38      	it	cc
 80089d6:	250c      	movcc	r5, #12
 80089d8:	2d00      	cmp	r5, #0
 80089da:	4606      	mov	r6, r0
 80089dc:	db01      	blt.n	80089e2 <_malloc_r+0x1a>
 80089de:	42a9      	cmp	r1, r5
 80089e0:	d903      	bls.n	80089ea <_malloc_r+0x22>
 80089e2:	230c      	movs	r3, #12
 80089e4:	6033      	str	r3, [r6, #0]
 80089e6:	2000      	movs	r0, #0
 80089e8:	bd70      	pop	{r4, r5, r6, pc}
 80089ea:	f000 fc85 	bl	80092f8 <__malloc_lock>
 80089ee:	4a21      	ldr	r2, [pc, #132]	; (8008a74 <_malloc_r+0xac>)
 80089f0:	6814      	ldr	r4, [r2, #0]
 80089f2:	4621      	mov	r1, r4
 80089f4:	b991      	cbnz	r1, 8008a1c <_malloc_r+0x54>
 80089f6:	4c20      	ldr	r4, [pc, #128]	; (8008a78 <_malloc_r+0xb0>)
 80089f8:	6823      	ldr	r3, [r4, #0]
 80089fa:	b91b      	cbnz	r3, 8008a04 <_malloc_r+0x3c>
 80089fc:	4630      	mov	r0, r6
 80089fe:	f000 fb3f 	bl	8009080 <_sbrk_r>
 8008a02:	6020      	str	r0, [r4, #0]
 8008a04:	4629      	mov	r1, r5
 8008a06:	4630      	mov	r0, r6
 8008a08:	f000 fb3a 	bl	8009080 <_sbrk_r>
 8008a0c:	1c43      	adds	r3, r0, #1
 8008a0e:	d124      	bne.n	8008a5a <_malloc_r+0x92>
 8008a10:	230c      	movs	r3, #12
 8008a12:	4630      	mov	r0, r6
 8008a14:	6033      	str	r3, [r6, #0]
 8008a16:	f000 fc70 	bl	80092fa <__malloc_unlock>
 8008a1a:	e7e4      	b.n	80089e6 <_malloc_r+0x1e>
 8008a1c:	680b      	ldr	r3, [r1, #0]
 8008a1e:	1b5b      	subs	r3, r3, r5
 8008a20:	d418      	bmi.n	8008a54 <_malloc_r+0x8c>
 8008a22:	2b0b      	cmp	r3, #11
 8008a24:	d90f      	bls.n	8008a46 <_malloc_r+0x7e>
 8008a26:	600b      	str	r3, [r1, #0]
 8008a28:	18cc      	adds	r4, r1, r3
 8008a2a:	50cd      	str	r5, [r1, r3]
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	f000 fc64 	bl	80092fa <__malloc_unlock>
 8008a32:	f104 000b 	add.w	r0, r4, #11
 8008a36:	1d23      	adds	r3, r4, #4
 8008a38:	f020 0007 	bic.w	r0, r0, #7
 8008a3c:	1ac3      	subs	r3, r0, r3
 8008a3e:	d0d3      	beq.n	80089e8 <_malloc_r+0x20>
 8008a40:	425a      	negs	r2, r3
 8008a42:	50e2      	str	r2, [r4, r3]
 8008a44:	e7d0      	b.n	80089e8 <_malloc_r+0x20>
 8008a46:	684b      	ldr	r3, [r1, #4]
 8008a48:	428c      	cmp	r4, r1
 8008a4a:	bf16      	itet	ne
 8008a4c:	6063      	strne	r3, [r4, #4]
 8008a4e:	6013      	streq	r3, [r2, #0]
 8008a50:	460c      	movne	r4, r1
 8008a52:	e7eb      	b.n	8008a2c <_malloc_r+0x64>
 8008a54:	460c      	mov	r4, r1
 8008a56:	6849      	ldr	r1, [r1, #4]
 8008a58:	e7cc      	b.n	80089f4 <_malloc_r+0x2c>
 8008a5a:	1cc4      	adds	r4, r0, #3
 8008a5c:	f024 0403 	bic.w	r4, r4, #3
 8008a60:	42a0      	cmp	r0, r4
 8008a62:	d005      	beq.n	8008a70 <_malloc_r+0xa8>
 8008a64:	1a21      	subs	r1, r4, r0
 8008a66:	4630      	mov	r0, r6
 8008a68:	f000 fb0a 	bl	8009080 <_sbrk_r>
 8008a6c:	3001      	adds	r0, #1
 8008a6e:	d0cf      	beq.n	8008a10 <_malloc_r+0x48>
 8008a70:	6025      	str	r5, [r4, #0]
 8008a72:	e7db      	b.n	8008a2c <_malloc_r+0x64>
 8008a74:	200005e8 	.word	0x200005e8
 8008a78:	200005ec 	.word	0x200005ec

08008a7c <_sungetc_r>:
 8008a7c:	b538      	push	{r3, r4, r5, lr}
 8008a7e:	1c4b      	adds	r3, r1, #1
 8008a80:	4614      	mov	r4, r2
 8008a82:	d103      	bne.n	8008a8c <_sungetc_r+0x10>
 8008a84:	f04f 35ff 	mov.w	r5, #4294967295
 8008a88:	4628      	mov	r0, r5
 8008a8a:	bd38      	pop	{r3, r4, r5, pc}
 8008a8c:	8993      	ldrh	r3, [r2, #12]
 8008a8e:	b2cd      	uxtb	r5, r1
 8008a90:	f023 0320 	bic.w	r3, r3, #32
 8008a94:	8193      	strh	r3, [r2, #12]
 8008a96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a98:	6852      	ldr	r2, [r2, #4]
 8008a9a:	b18b      	cbz	r3, 8008ac0 <_sungetc_r+0x44>
 8008a9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	dd08      	ble.n	8008ab4 <_sungetc_r+0x38>
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	1e5a      	subs	r2, r3, #1
 8008aa6:	6022      	str	r2, [r4, #0]
 8008aa8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008aac:	6863      	ldr	r3, [r4, #4]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	6063      	str	r3, [r4, #4]
 8008ab2:	e7e9      	b.n	8008a88 <_sungetc_r+0xc>
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	f000 fbc3 	bl	8009240 <__submore>
 8008aba:	2800      	cmp	r0, #0
 8008abc:	d0f1      	beq.n	8008aa2 <_sungetc_r+0x26>
 8008abe:	e7e1      	b.n	8008a84 <_sungetc_r+0x8>
 8008ac0:	6921      	ldr	r1, [r4, #16]
 8008ac2:	6823      	ldr	r3, [r4, #0]
 8008ac4:	b151      	cbz	r1, 8008adc <_sungetc_r+0x60>
 8008ac6:	4299      	cmp	r1, r3
 8008ac8:	d208      	bcs.n	8008adc <_sungetc_r+0x60>
 8008aca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008ace:	42a9      	cmp	r1, r5
 8008ad0:	d104      	bne.n	8008adc <_sungetc_r+0x60>
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	3201      	adds	r2, #1
 8008ad6:	6023      	str	r3, [r4, #0]
 8008ad8:	6062      	str	r2, [r4, #4]
 8008ada:	e7d5      	b.n	8008a88 <_sungetc_r+0xc>
 8008adc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008ae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ae4:	6363      	str	r3, [r4, #52]	; 0x34
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	63a3      	str	r3, [r4, #56]	; 0x38
 8008aea:	4623      	mov	r3, r4
 8008aec:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008af0:	6023      	str	r3, [r4, #0]
 8008af2:	2301      	movs	r3, #1
 8008af4:	e7dc      	b.n	8008ab0 <_sungetc_r+0x34>

08008af6 <__ssrefill_r>:
 8008af6:	b510      	push	{r4, lr}
 8008af8:	460c      	mov	r4, r1
 8008afa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008afc:	b169      	cbz	r1, 8008b1a <__ssrefill_r+0x24>
 8008afe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b02:	4299      	cmp	r1, r3
 8008b04:	d001      	beq.n	8008b0a <__ssrefill_r+0x14>
 8008b06:	f000 fbf9 	bl	80092fc <_free_r>
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b0e:	6360      	str	r0, [r4, #52]	; 0x34
 8008b10:	6063      	str	r3, [r4, #4]
 8008b12:	b113      	cbz	r3, 8008b1a <__ssrefill_r+0x24>
 8008b14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008b16:	6023      	str	r3, [r4, #0]
 8008b18:	bd10      	pop	{r4, pc}
 8008b1a:	6923      	ldr	r3, [r4, #16]
 8008b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b20:	6023      	str	r3, [r4, #0]
 8008b22:	2300      	movs	r3, #0
 8008b24:	6063      	str	r3, [r4, #4]
 8008b26:	89a3      	ldrh	r3, [r4, #12]
 8008b28:	f043 0320 	orr.w	r3, r3, #32
 8008b2c:	81a3      	strh	r3, [r4, #12]
 8008b2e:	e7f3      	b.n	8008b18 <__ssrefill_r+0x22>

08008b30 <__ssvfiscanf_r>:
 8008b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b34:	460c      	mov	r4, r1
 8008b36:	2100      	movs	r1, #0
 8008b38:	4606      	mov	r6, r0
 8008b3a:	4692      	mov	sl, r2
 8008b3c:	270a      	movs	r7, #10
 8008b3e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8008b42:	9144      	str	r1, [sp, #272]	; 0x110
 8008b44:	9145      	str	r1, [sp, #276]	; 0x114
 8008b46:	499e      	ldr	r1, [pc, #632]	; (8008dc0 <__ssvfiscanf_r+0x290>)
 8008b48:	f10d 0804 	add.w	r8, sp, #4
 8008b4c:	91a0      	str	r1, [sp, #640]	; 0x280
 8008b4e:	499d      	ldr	r1, [pc, #628]	; (8008dc4 <__ssvfiscanf_r+0x294>)
 8008b50:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8008dc8 <__ssvfiscanf_r+0x298>
 8008b54:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008b58:	91a1      	str	r1, [sp, #644]	; 0x284
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f000 812a 	beq.w	8008dba <__ssvfiscanf_r+0x28a>
 8008b66:	4655      	mov	r5, sl
 8008b68:	f7ff fb06 	bl	8008178 <__locale_ctype_ptr>
 8008b6c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8008b70:	4458      	add	r0, fp
 8008b72:	7843      	ldrb	r3, [r0, #1]
 8008b74:	f013 0308 	ands.w	r3, r3, #8
 8008b78:	d01c      	beq.n	8008bb4 <__ssvfiscanf_r+0x84>
 8008b7a:	6863      	ldr	r3, [r4, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	dd12      	ble.n	8008ba6 <__ssvfiscanf_r+0x76>
 8008b80:	f7ff fafa 	bl	8008178 <__locale_ctype_ptr>
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	781a      	ldrb	r2, [r3, #0]
 8008b88:	4410      	add	r0, r2
 8008b8a:	7842      	ldrb	r2, [r0, #1]
 8008b8c:	0712      	lsls	r2, r2, #28
 8008b8e:	d401      	bmi.n	8008b94 <__ssvfiscanf_r+0x64>
 8008b90:	46aa      	mov	sl, r5
 8008b92:	e7e3      	b.n	8008b5c <__ssvfiscanf_r+0x2c>
 8008b94:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008b96:	3301      	adds	r3, #1
 8008b98:	3201      	adds	r2, #1
 8008b9a:	9245      	str	r2, [sp, #276]	; 0x114
 8008b9c:	6862      	ldr	r2, [r4, #4]
 8008b9e:	6023      	str	r3, [r4, #0]
 8008ba0:	3a01      	subs	r2, #1
 8008ba2:	6062      	str	r2, [r4, #4]
 8008ba4:	e7e9      	b.n	8008b7a <__ssvfiscanf_r+0x4a>
 8008ba6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008ba8:	4621      	mov	r1, r4
 8008baa:	4630      	mov	r0, r6
 8008bac:	4798      	blx	r3
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	d0e6      	beq.n	8008b80 <__ssvfiscanf_r+0x50>
 8008bb2:	e7ed      	b.n	8008b90 <__ssvfiscanf_r+0x60>
 8008bb4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8008bb8:	f040 8082 	bne.w	8008cc0 <__ssvfiscanf_r+0x190>
 8008bbc:	9343      	str	r3, [sp, #268]	; 0x10c
 8008bbe:	9341      	str	r3, [sp, #260]	; 0x104
 8008bc0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8008bc4:	2b2a      	cmp	r3, #42	; 0x2a
 8008bc6:	d103      	bne.n	8008bd0 <__ssvfiscanf_r+0xa0>
 8008bc8:	2310      	movs	r3, #16
 8008bca:	f10a 0502 	add.w	r5, sl, #2
 8008bce:	9341      	str	r3, [sp, #260]	; 0x104
 8008bd0:	46aa      	mov	sl, r5
 8008bd2:	f815 1b01 	ldrb.w	r1, [r5], #1
 8008bd6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008bda:	2a09      	cmp	r2, #9
 8008bdc:	d922      	bls.n	8008c24 <__ssvfiscanf_r+0xf4>
 8008bde:	2203      	movs	r2, #3
 8008be0:	4879      	ldr	r0, [pc, #484]	; (8008dc8 <__ssvfiscanf_r+0x298>)
 8008be2:	f000 fb7b 	bl	80092dc <memchr>
 8008be6:	b138      	cbz	r0, 8008bf8 <__ssvfiscanf_r+0xc8>
 8008be8:	eba0 0309 	sub.w	r3, r0, r9
 8008bec:	2001      	movs	r0, #1
 8008bee:	46aa      	mov	sl, r5
 8008bf0:	4098      	lsls	r0, r3
 8008bf2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008bf4:	4318      	orrs	r0, r3
 8008bf6:	9041      	str	r0, [sp, #260]	; 0x104
 8008bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8008bfc:	f10a 0501 	add.w	r5, sl, #1
 8008c00:	2b67      	cmp	r3, #103	; 0x67
 8008c02:	d82b      	bhi.n	8008c5c <__ssvfiscanf_r+0x12c>
 8008c04:	2b65      	cmp	r3, #101	; 0x65
 8008c06:	f080 809f 	bcs.w	8008d48 <__ssvfiscanf_r+0x218>
 8008c0a:	2b47      	cmp	r3, #71	; 0x47
 8008c0c:	d810      	bhi.n	8008c30 <__ssvfiscanf_r+0x100>
 8008c0e:	2b45      	cmp	r3, #69	; 0x45
 8008c10:	f080 809a 	bcs.w	8008d48 <__ssvfiscanf_r+0x218>
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d06c      	beq.n	8008cf2 <__ssvfiscanf_r+0x1c2>
 8008c18:	2b25      	cmp	r3, #37	; 0x25
 8008c1a:	d051      	beq.n	8008cc0 <__ssvfiscanf_r+0x190>
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	9742      	str	r7, [sp, #264]	; 0x108
 8008c20:	9347      	str	r3, [sp, #284]	; 0x11c
 8008c22:	e027      	b.n	8008c74 <__ssvfiscanf_r+0x144>
 8008c24:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008c26:	fb07 1303 	mla	r3, r7, r3, r1
 8008c2a:	3b30      	subs	r3, #48	; 0x30
 8008c2c:	9343      	str	r3, [sp, #268]	; 0x10c
 8008c2e:	e7cf      	b.n	8008bd0 <__ssvfiscanf_r+0xa0>
 8008c30:	2b5b      	cmp	r3, #91	; 0x5b
 8008c32:	d06a      	beq.n	8008d0a <__ssvfiscanf_r+0x1da>
 8008c34:	d80c      	bhi.n	8008c50 <__ssvfiscanf_r+0x120>
 8008c36:	2b58      	cmp	r3, #88	; 0x58
 8008c38:	d1f0      	bne.n	8008c1c <__ssvfiscanf_r+0xec>
 8008c3a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c40:	9241      	str	r2, [sp, #260]	; 0x104
 8008c42:	2210      	movs	r2, #16
 8008c44:	9242      	str	r2, [sp, #264]	; 0x108
 8008c46:	2b6e      	cmp	r3, #110	; 0x6e
 8008c48:	bf8c      	ite	hi
 8008c4a:	2304      	movhi	r3, #4
 8008c4c:	2303      	movls	r3, #3
 8008c4e:	e010      	b.n	8008c72 <__ssvfiscanf_r+0x142>
 8008c50:	2b63      	cmp	r3, #99	; 0x63
 8008c52:	d065      	beq.n	8008d20 <__ssvfiscanf_r+0x1f0>
 8008c54:	2b64      	cmp	r3, #100	; 0x64
 8008c56:	d1e1      	bne.n	8008c1c <__ssvfiscanf_r+0xec>
 8008c58:	9742      	str	r7, [sp, #264]	; 0x108
 8008c5a:	e7f4      	b.n	8008c46 <__ssvfiscanf_r+0x116>
 8008c5c:	2b70      	cmp	r3, #112	; 0x70
 8008c5e:	d04b      	beq.n	8008cf8 <__ssvfiscanf_r+0x1c8>
 8008c60:	d826      	bhi.n	8008cb0 <__ssvfiscanf_r+0x180>
 8008c62:	2b6e      	cmp	r3, #110	; 0x6e
 8008c64:	d062      	beq.n	8008d2c <__ssvfiscanf_r+0x1fc>
 8008c66:	d84c      	bhi.n	8008d02 <__ssvfiscanf_r+0x1d2>
 8008c68:	2b69      	cmp	r3, #105	; 0x69
 8008c6a:	d1d7      	bne.n	8008c1c <__ssvfiscanf_r+0xec>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	9342      	str	r3, [sp, #264]	; 0x108
 8008c70:	2303      	movs	r3, #3
 8008c72:	9347      	str	r3, [sp, #284]	; 0x11c
 8008c74:	6863      	ldr	r3, [r4, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	dd68      	ble.n	8008d4c <__ssvfiscanf_r+0x21c>
 8008c7a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008c7c:	0659      	lsls	r1, r3, #25
 8008c7e:	d407      	bmi.n	8008c90 <__ssvfiscanf_r+0x160>
 8008c80:	f7ff fa7a 	bl	8008178 <__locale_ctype_ptr>
 8008c84:	6823      	ldr	r3, [r4, #0]
 8008c86:	781a      	ldrb	r2, [r3, #0]
 8008c88:	4410      	add	r0, r2
 8008c8a:	7842      	ldrb	r2, [r0, #1]
 8008c8c:	0712      	lsls	r2, r2, #28
 8008c8e:	d464      	bmi.n	8008d5a <__ssvfiscanf_r+0x22a>
 8008c90:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	dc73      	bgt.n	8008d7e <__ssvfiscanf_r+0x24e>
 8008c96:	466b      	mov	r3, sp
 8008c98:	4622      	mov	r2, r4
 8008c9a:	a941      	add	r1, sp, #260	; 0x104
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	f000 f897 	bl	8008dd0 <_scanf_chars>
 8008ca2:	2801      	cmp	r0, #1
 8008ca4:	f000 8089 	beq.w	8008dba <__ssvfiscanf_r+0x28a>
 8008ca8:	2802      	cmp	r0, #2
 8008caa:	f47f af71 	bne.w	8008b90 <__ssvfiscanf_r+0x60>
 8008cae:	e01d      	b.n	8008cec <__ssvfiscanf_r+0x1bc>
 8008cb0:	2b75      	cmp	r3, #117	; 0x75
 8008cb2:	d0d1      	beq.n	8008c58 <__ssvfiscanf_r+0x128>
 8008cb4:	2b78      	cmp	r3, #120	; 0x78
 8008cb6:	d0c0      	beq.n	8008c3a <__ssvfiscanf_r+0x10a>
 8008cb8:	2b73      	cmp	r3, #115	; 0x73
 8008cba:	d1af      	bne.n	8008c1c <__ssvfiscanf_r+0xec>
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	e7d8      	b.n	8008c72 <__ssvfiscanf_r+0x142>
 8008cc0:	6863      	ldr	r3, [r4, #4]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	dd0c      	ble.n	8008ce0 <__ssvfiscanf_r+0x1b0>
 8008cc6:	6823      	ldr	r3, [r4, #0]
 8008cc8:	781a      	ldrb	r2, [r3, #0]
 8008cca:	455a      	cmp	r2, fp
 8008ccc:	d175      	bne.n	8008dba <__ssvfiscanf_r+0x28a>
 8008cce:	3301      	adds	r3, #1
 8008cd0:	6862      	ldr	r2, [r4, #4]
 8008cd2:	6023      	str	r3, [r4, #0]
 8008cd4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008cd6:	3a01      	subs	r2, #1
 8008cd8:	3301      	adds	r3, #1
 8008cda:	6062      	str	r2, [r4, #4]
 8008cdc:	9345      	str	r3, [sp, #276]	; 0x114
 8008cde:	e757      	b.n	8008b90 <__ssvfiscanf_r+0x60>
 8008ce0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008ce2:	4621      	mov	r1, r4
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	4798      	blx	r3
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	d0ec      	beq.n	8008cc6 <__ssvfiscanf_r+0x196>
 8008cec:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	d159      	bne.n	8008da6 <__ssvfiscanf_r+0x276>
 8008cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf6:	e05c      	b.n	8008db2 <__ssvfiscanf_r+0x282>
 8008cf8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008cfa:	f042 0220 	orr.w	r2, r2, #32
 8008cfe:	9241      	str	r2, [sp, #260]	; 0x104
 8008d00:	e79b      	b.n	8008c3a <__ssvfiscanf_r+0x10a>
 8008d02:	2308      	movs	r3, #8
 8008d04:	9342      	str	r3, [sp, #264]	; 0x108
 8008d06:	2304      	movs	r3, #4
 8008d08:	e7b3      	b.n	8008c72 <__ssvfiscanf_r+0x142>
 8008d0a:	4629      	mov	r1, r5
 8008d0c:	4640      	mov	r0, r8
 8008d0e:	f000 f9c7 	bl	80090a0 <__sccl>
 8008d12:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008d14:	4605      	mov	r5, r0
 8008d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d1a:	9341      	str	r3, [sp, #260]	; 0x104
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e7a8      	b.n	8008c72 <__ssvfiscanf_r+0x142>
 8008d20:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d26:	9341      	str	r3, [sp, #260]	; 0x104
 8008d28:	2300      	movs	r3, #0
 8008d2a:	e7a2      	b.n	8008c72 <__ssvfiscanf_r+0x142>
 8008d2c:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008d2e:	06c3      	lsls	r3, r0, #27
 8008d30:	f53f af2e 	bmi.w	8008b90 <__ssvfiscanf_r+0x60>
 8008d34:	9b00      	ldr	r3, [sp, #0]
 8008d36:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008d38:	1d19      	adds	r1, r3, #4
 8008d3a:	9100      	str	r1, [sp, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	07c0      	lsls	r0, r0, #31
 8008d40:	bf4c      	ite	mi
 8008d42:	801a      	strhmi	r2, [r3, #0]
 8008d44:	601a      	strpl	r2, [r3, #0]
 8008d46:	e723      	b.n	8008b90 <__ssvfiscanf_r+0x60>
 8008d48:	2305      	movs	r3, #5
 8008d4a:	e792      	b.n	8008c72 <__ssvfiscanf_r+0x142>
 8008d4c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008d4e:	4621      	mov	r1, r4
 8008d50:	4630      	mov	r0, r6
 8008d52:	4798      	blx	r3
 8008d54:	2800      	cmp	r0, #0
 8008d56:	d090      	beq.n	8008c7a <__ssvfiscanf_r+0x14a>
 8008d58:	e7c8      	b.n	8008cec <__ssvfiscanf_r+0x1bc>
 8008d5a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008d5c:	3201      	adds	r2, #1
 8008d5e:	9245      	str	r2, [sp, #276]	; 0x114
 8008d60:	6862      	ldr	r2, [r4, #4]
 8008d62:	3a01      	subs	r2, #1
 8008d64:	2a00      	cmp	r2, #0
 8008d66:	6062      	str	r2, [r4, #4]
 8008d68:	dd02      	ble.n	8008d70 <__ssvfiscanf_r+0x240>
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	6023      	str	r3, [r4, #0]
 8008d6e:	e787      	b.n	8008c80 <__ssvfiscanf_r+0x150>
 8008d70:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008d72:	4621      	mov	r1, r4
 8008d74:	4630      	mov	r0, r6
 8008d76:	4798      	blx	r3
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	d081      	beq.n	8008c80 <__ssvfiscanf_r+0x150>
 8008d7c:	e7b6      	b.n	8008cec <__ssvfiscanf_r+0x1bc>
 8008d7e:	2b04      	cmp	r3, #4
 8008d80:	dc06      	bgt.n	8008d90 <__ssvfiscanf_r+0x260>
 8008d82:	466b      	mov	r3, sp
 8008d84:	4622      	mov	r2, r4
 8008d86:	a941      	add	r1, sp, #260	; 0x104
 8008d88:	4630      	mov	r0, r6
 8008d8a:	f000 f883 	bl	8008e94 <_scanf_i>
 8008d8e:	e788      	b.n	8008ca2 <__ssvfiscanf_r+0x172>
 8008d90:	4b0e      	ldr	r3, [pc, #56]	; (8008dcc <__ssvfiscanf_r+0x29c>)
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	f43f aefc 	beq.w	8008b90 <__ssvfiscanf_r+0x60>
 8008d98:	466b      	mov	r3, sp
 8008d9a:	4622      	mov	r2, r4
 8008d9c:	a941      	add	r1, sp, #260	; 0x104
 8008d9e:	4630      	mov	r0, r6
 8008da0:	f3af 8000 	nop.w
 8008da4:	e77d      	b.n	8008ca2 <__ssvfiscanf_r+0x172>
 8008da6:	89a3      	ldrh	r3, [r4, #12]
 8008da8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008dac:	bf18      	it	ne
 8008dae:	f04f 30ff 	movne.w	r0, #4294967295
 8008db2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8008db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dba:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008dbc:	e7f9      	b.n	8008db2 <__ssvfiscanf_r+0x282>
 8008dbe:	bf00      	nop
 8008dc0:	08008a7d 	.word	0x08008a7d
 8008dc4:	08008af7 	.word	0x08008af7
 8008dc8:	0800a57c 	.word	0x0800a57c
 8008dcc:	00000000 	.word	0x00000000

08008dd0 <_scanf_chars>:
 8008dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd4:	4615      	mov	r5, r2
 8008dd6:	688a      	ldr	r2, [r1, #8]
 8008dd8:	4680      	mov	r8, r0
 8008dda:	460c      	mov	r4, r1
 8008ddc:	b932      	cbnz	r2, 8008dec <_scanf_chars+0x1c>
 8008dde:	698a      	ldr	r2, [r1, #24]
 8008de0:	2a00      	cmp	r2, #0
 8008de2:	bf14      	ite	ne
 8008de4:	f04f 32ff 	movne.w	r2, #4294967295
 8008de8:	2201      	moveq	r2, #1
 8008dea:	608a      	str	r2, [r1, #8]
 8008dec:	2600      	movs	r6, #0
 8008dee:	6822      	ldr	r2, [r4, #0]
 8008df0:	06d1      	lsls	r1, r2, #27
 8008df2:	bf5f      	itttt	pl
 8008df4:	681a      	ldrpl	r2, [r3, #0]
 8008df6:	1d11      	addpl	r1, r2, #4
 8008df8:	6019      	strpl	r1, [r3, #0]
 8008dfa:	6817      	ldrpl	r7, [r2, #0]
 8008dfc:	69a3      	ldr	r3, [r4, #24]
 8008dfe:	b1db      	cbz	r3, 8008e38 <_scanf_chars+0x68>
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d107      	bne.n	8008e14 <_scanf_chars+0x44>
 8008e04:	682b      	ldr	r3, [r5, #0]
 8008e06:	6962      	ldr	r2, [r4, #20]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	5cd3      	ldrb	r3, [r2, r3]
 8008e0c:	b9a3      	cbnz	r3, 8008e38 <_scanf_chars+0x68>
 8008e0e:	2e00      	cmp	r6, #0
 8008e10:	d131      	bne.n	8008e76 <_scanf_chars+0xa6>
 8008e12:	e006      	b.n	8008e22 <_scanf_chars+0x52>
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d007      	beq.n	8008e28 <_scanf_chars+0x58>
 8008e18:	2e00      	cmp	r6, #0
 8008e1a:	d12c      	bne.n	8008e76 <_scanf_chars+0xa6>
 8008e1c:	69a3      	ldr	r3, [r4, #24]
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d129      	bne.n	8008e76 <_scanf_chars+0xa6>
 8008e22:	2001      	movs	r0, #1
 8008e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e28:	f7ff f9a6 	bl	8008178 <__locale_ctype_ptr>
 8008e2c:	682b      	ldr	r3, [r5, #0]
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	4418      	add	r0, r3
 8008e32:	7843      	ldrb	r3, [r0, #1]
 8008e34:	071b      	lsls	r3, r3, #28
 8008e36:	d4ef      	bmi.n	8008e18 <_scanf_chars+0x48>
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	3601      	adds	r6, #1
 8008e3c:	06da      	lsls	r2, r3, #27
 8008e3e:	bf5e      	ittt	pl
 8008e40:	682b      	ldrpl	r3, [r5, #0]
 8008e42:	781b      	ldrbpl	r3, [r3, #0]
 8008e44:	703b      	strbpl	r3, [r7, #0]
 8008e46:	682a      	ldr	r2, [r5, #0]
 8008e48:	686b      	ldr	r3, [r5, #4]
 8008e4a:	f102 0201 	add.w	r2, r2, #1
 8008e4e:	602a      	str	r2, [r5, #0]
 8008e50:	68a2      	ldr	r2, [r4, #8]
 8008e52:	f103 33ff 	add.w	r3, r3, #4294967295
 8008e56:	f102 32ff 	add.w	r2, r2, #4294967295
 8008e5a:	606b      	str	r3, [r5, #4]
 8008e5c:	bf58      	it	pl
 8008e5e:	3701      	addpl	r7, #1
 8008e60:	60a2      	str	r2, [r4, #8]
 8008e62:	b142      	cbz	r2, 8008e76 <_scanf_chars+0xa6>
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	dcc9      	bgt.n	8008dfc <_scanf_chars+0x2c>
 8008e68:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	4640      	mov	r0, r8
 8008e70:	4798      	blx	r3
 8008e72:	2800      	cmp	r0, #0
 8008e74:	d0c2      	beq.n	8008dfc <_scanf_chars+0x2c>
 8008e76:	6823      	ldr	r3, [r4, #0]
 8008e78:	f013 0310 	ands.w	r3, r3, #16
 8008e7c:	d105      	bne.n	8008e8a <_scanf_chars+0xba>
 8008e7e:	68e2      	ldr	r2, [r4, #12]
 8008e80:	3201      	adds	r2, #1
 8008e82:	60e2      	str	r2, [r4, #12]
 8008e84:	69a2      	ldr	r2, [r4, #24]
 8008e86:	b102      	cbz	r2, 8008e8a <_scanf_chars+0xba>
 8008e88:	703b      	strb	r3, [r7, #0]
 8008e8a:	6923      	ldr	r3, [r4, #16]
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	441e      	add	r6, r3
 8008e90:	6126      	str	r6, [r4, #16]
 8008e92:	e7c7      	b.n	8008e24 <_scanf_chars+0x54>

08008e94 <_scanf_i>:
 8008e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e98:	460c      	mov	r4, r1
 8008e9a:	469a      	mov	sl, r3
 8008e9c:	4b74      	ldr	r3, [pc, #464]	; (8009070 <_scanf_i+0x1dc>)
 8008e9e:	b087      	sub	sp, #28
 8008ea0:	4683      	mov	fp, r0
 8008ea2:	4616      	mov	r6, r2
 8008ea4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008ea8:	ab03      	add	r3, sp, #12
 8008eaa:	68a7      	ldr	r7, [r4, #8]
 8008eac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008eb0:	4b70      	ldr	r3, [pc, #448]	; (8009074 <_scanf_i+0x1e0>)
 8008eb2:	69a1      	ldr	r1, [r4, #24]
 8008eb4:	4a70      	ldr	r2, [pc, #448]	; (8009078 <_scanf_i+0x1e4>)
 8008eb6:	f104 091c 	add.w	r9, r4, #28
 8008eba:	2903      	cmp	r1, #3
 8008ebc:	bf08      	it	eq
 8008ebe:	461a      	moveq	r2, r3
 8008ec0:	1e7b      	subs	r3, r7, #1
 8008ec2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8008ec6:	bf84      	itt	hi
 8008ec8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008ecc:	60a3      	strhi	r3, [r4, #8]
 8008ece:	6823      	ldr	r3, [r4, #0]
 8008ed0:	bf88      	it	hi
 8008ed2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008ed6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008eda:	6023      	str	r3, [r4, #0]
 8008edc:	bf98      	it	ls
 8008ede:	2700      	movls	r7, #0
 8008ee0:	464b      	mov	r3, r9
 8008ee2:	f04f 0800 	mov.w	r8, #0
 8008ee6:	9200      	str	r2, [sp, #0]
 8008ee8:	bf88      	it	hi
 8008eea:	197f      	addhi	r7, r7, r5
 8008eec:	6831      	ldr	r1, [r6, #0]
 8008eee:	9301      	str	r3, [sp, #4]
 8008ef0:	ab03      	add	r3, sp, #12
 8008ef2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	7809      	ldrb	r1, [r1, #0]
 8008efa:	f000 f9ef 	bl	80092dc <memchr>
 8008efe:	9b01      	ldr	r3, [sp, #4]
 8008f00:	b330      	cbz	r0, 8008f50 <_scanf_i+0xbc>
 8008f02:	f1b8 0f01 	cmp.w	r8, #1
 8008f06:	d15a      	bne.n	8008fbe <_scanf_i+0x12a>
 8008f08:	6862      	ldr	r2, [r4, #4]
 8008f0a:	b92a      	cbnz	r2, 8008f18 <_scanf_i+0x84>
 8008f0c:	2108      	movs	r1, #8
 8008f0e:	6822      	ldr	r2, [r4, #0]
 8008f10:	6061      	str	r1, [r4, #4]
 8008f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f16:	6022      	str	r2, [r4, #0]
 8008f18:	6822      	ldr	r2, [r4, #0]
 8008f1a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008f1e:	6022      	str	r2, [r4, #0]
 8008f20:	68a2      	ldr	r2, [r4, #8]
 8008f22:	1e51      	subs	r1, r2, #1
 8008f24:	60a1      	str	r1, [r4, #8]
 8008f26:	b19a      	cbz	r2, 8008f50 <_scanf_i+0xbc>
 8008f28:	6832      	ldr	r2, [r6, #0]
 8008f2a:	1c5d      	adds	r5, r3, #1
 8008f2c:	1c51      	adds	r1, r2, #1
 8008f2e:	6031      	str	r1, [r6, #0]
 8008f30:	7812      	ldrb	r2, [r2, #0]
 8008f32:	701a      	strb	r2, [r3, #0]
 8008f34:	6873      	ldr	r3, [r6, #4]
 8008f36:	3b01      	subs	r3, #1
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	6073      	str	r3, [r6, #4]
 8008f3c:	dc07      	bgt.n	8008f4e <_scanf_i+0xba>
 8008f3e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008f42:	4631      	mov	r1, r6
 8008f44:	4658      	mov	r0, fp
 8008f46:	4798      	blx	r3
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	f040 8087 	bne.w	800905c <_scanf_i+0x1c8>
 8008f4e:	462b      	mov	r3, r5
 8008f50:	f108 0801 	add.w	r8, r8, #1
 8008f54:	f1b8 0f03 	cmp.w	r8, #3
 8008f58:	d1c8      	bne.n	8008eec <_scanf_i+0x58>
 8008f5a:	6862      	ldr	r2, [r4, #4]
 8008f5c:	b90a      	cbnz	r2, 8008f62 <_scanf_i+0xce>
 8008f5e:	220a      	movs	r2, #10
 8008f60:	6062      	str	r2, [r4, #4]
 8008f62:	6862      	ldr	r2, [r4, #4]
 8008f64:	4945      	ldr	r1, [pc, #276]	; (800907c <_scanf_i+0x1e8>)
 8008f66:	6960      	ldr	r0, [r4, #20]
 8008f68:	1a89      	subs	r1, r1, r2
 8008f6a:	9301      	str	r3, [sp, #4]
 8008f6c:	f000 f898 	bl	80090a0 <__sccl>
 8008f70:	9b01      	ldr	r3, [sp, #4]
 8008f72:	f04f 0800 	mov.w	r8, #0
 8008f76:	461d      	mov	r5, r3
 8008f78:	68a3      	ldr	r3, [r4, #8]
 8008f7a:	6822      	ldr	r2, [r4, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d03b      	beq.n	8008ff8 <_scanf_i+0x164>
 8008f80:	6831      	ldr	r1, [r6, #0]
 8008f82:	6960      	ldr	r0, [r4, #20]
 8008f84:	f891 c000 	ldrb.w	ip, [r1]
 8008f88:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	d033      	beq.n	8008ff8 <_scanf_i+0x164>
 8008f90:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008f94:	d121      	bne.n	8008fda <_scanf_i+0x146>
 8008f96:	0510      	lsls	r0, r2, #20
 8008f98:	d51f      	bpl.n	8008fda <_scanf_i+0x146>
 8008f9a:	f108 0801 	add.w	r8, r8, #1
 8008f9e:	b117      	cbz	r7, 8008fa6 <_scanf_i+0x112>
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	3f01      	subs	r7, #1
 8008fa4:	60a3      	str	r3, [r4, #8]
 8008fa6:	6873      	ldr	r3, [r6, #4]
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	6073      	str	r3, [r6, #4]
 8008fae:	dd1c      	ble.n	8008fea <_scanf_i+0x156>
 8008fb0:	6833      	ldr	r3, [r6, #0]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	6033      	str	r3, [r6, #0]
 8008fb6:	68a3      	ldr	r3, [r4, #8]
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	60a3      	str	r3, [r4, #8]
 8008fbc:	e7dc      	b.n	8008f78 <_scanf_i+0xe4>
 8008fbe:	f1b8 0f02 	cmp.w	r8, #2
 8008fc2:	d1ad      	bne.n	8008f20 <_scanf_i+0x8c>
 8008fc4:	6822      	ldr	r2, [r4, #0]
 8008fc6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008fca:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008fce:	d1bf      	bne.n	8008f50 <_scanf_i+0xbc>
 8008fd0:	2110      	movs	r1, #16
 8008fd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fd6:	6061      	str	r1, [r4, #4]
 8008fd8:	e7a1      	b.n	8008f1e <_scanf_i+0x8a>
 8008fda:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008fde:	6022      	str	r2, [r4, #0]
 8008fe0:	780b      	ldrb	r3, [r1, #0]
 8008fe2:	3501      	adds	r5, #1
 8008fe4:	f805 3c01 	strb.w	r3, [r5, #-1]
 8008fe8:	e7dd      	b.n	8008fa6 <_scanf_i+0x112>
 8008fea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008fee:	4631      	mov	r1, r6
 8008ff0:	4658      	mov	r0, fp
 8008ff2:	4798      	blx	r3
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	d0de      	beq.n	8008fb6 <_scanf_i+0x122>
 8008ff8:	6823      	ldr	r3, [r4, #0]
 8008ffa:	05d9      	lsls	r1, r3, #23
 8008ffc:	d50c      	bpl.n	8009018 <_scanf_i+0x184>
 8008ffe:	454d      	cmp	r5, r9
 8009000:	d908      	bls.n	8009014 <_scanf_i+0x180>
 8009002:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009006:	1e6f      	subs	r7, r5, #1
 8009008:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800900c:	4632      	mov	r2, r6
 800900e:	4658      	mov	r0, fp
 8009010:	4798      	blx	r3
 8009012:	463d      	mov	r5, r7
 8009014:	454d      	cmp	r5, r9
 8009016:	d029      	beq.n	800906c <_scanf_i+0x1d8>
 8009018:	6822      	ldr	r2, [r4, #0]
 800901a:	f012 0210 	ands.w	r2, r2, #16
 800901e:	d113      	bne.n	8009048 <_scanf_i+0x1b4>
 8009020:	702a      	strb	r2, [r5, #0]
 8009022:	6863      	ldr	r3, [r4, #4]
 8009024:	4649      	mov	r1, r9
 8009026:	4658      	mov	r0, fp
 8009028:	9e00      	ldr	r6, [sp, #0]
 800902a:	47b0      	blx	r6
 800902c:	f8da 3000 	ldr.w	r3, [sl]
 8009030:	6821      	ldr	r1, [r4, #0]
 8009032:	1d1a      	adds	r2, r3, #4
 8009034:	f8ca 2000 	str.w	r2, [sl]
 8009038:	f011 0f20 	tst.w	r1, #32
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	d010      	beq.n	8009062 <_scanf_i+0x1ce>
 8009040:	6018      	str	r0, [r3, #0]
 8009042:	68e3      	ldr	r3, [r4, #12]
 8009044:	3301      	adds	r3, #1
 8009046:	60e3      	str	r3, [r4, #12]
 8009048:	2000      	movs	r0, #0
 800904a:	eba5 0509 	sub.w	r5, r5, r9
 800904e:	44a8      	add	r8, r5
 8009050:	6925      	ldr	r5, [r4, #16]
 8009052:	4445      	add	r5, r8
 8009054:	6125      	str	r5, [r4, #16]
 8009056:	b007      	add	sp, #28
 8009058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800905c:	f04f 0800 	mov.w	r8, #0
 8009060:	e7ca      	b.n	8008ff8 <_scanf_i+0x164>
 8009062:	07ca      	lsls	r2, r1, #31
 8009064:	bf4c      	ite	mi
 8009066:	8018      	strhmi	r0, [r3, #0]
 8009068:	6018      	strpl	r0, [r3, #0]
 800906a:	e7ea      	b.n	8009042 <_scanf_i+0x1ae>
 800906c:	2001      	movs	r0, #1
 800906e:	e7f2      	b.n	8009056 <_scanf_i+0x1c2>
 8009070:	0800971c 	.word	0x0800971c
 8009074:	08007a55 	.word	0x08007a55
 8009078:	0800921d 	.word	0x0800921d
 800907c:	0800a590 	.word	0x0800a590

08009080 <_sbrk_r>:
 8009080:	b538      	push	{r3, r4, r5, lr}
 8009082:	2300      	movs	r3, #0
 8009084:	4c05      	ldr	r4, [pc, #20]	; (800909c <_sbrk_r+0x1c>)
 8009086:	4605      	mov	r5, r0
 8009088:	4608      	mov	r0, r1
 800908a:	6023      	str	r3, [r4, #0]
 800908c:	f7f9 f966 	bl	800235c <_sbrk>
 8009090:	1c43      	adds	r3, r0, #1
 8009092:	d102      	bne.n	800909a <_sbrk_r+0x1a>
 8009094:	6823      	ldr	r3, [r4, #0]
 8009096:	b103      	cbz	r3, 800909a <_sbrk_r+0x1a>
 8009098:	602b      	str	r3, [r5, #0]
 800909a:	bd38      	pop	{r3, r4, r5, pc}
 800909c:	20001c2c 	.word	0x20001c2c

080090a0 <__sccl>:
 80090a0:	b570      	push	{r4, r5, r6, lr}
 80090a2:	780b      	ldrb	r3, [r1, #0]
 80090a4:	1e44      	subs	r4, r0, #1
 80090a6:	2b5e      	cmp	r3, #94	; 0x5e
 80090a8:	bf13      	iteet	ne
 80090aa:	1c4a      	addne	r2, r1, #1
 80090ac:	1c8a      	addeq	r2, r1, #2
 80090ae:	784b      	ldrbeq	r3, [r1, #1]
 80090b0:	2100      	movne	r1, #0
 80090b2:	bf08      	it	eq
 80090b4:	2101      	moveq	r1, #1
 80090b6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80090ba:	f804 1f01 	strb.w	r1, [r4, #1]!
 80090be:	42ac      	cmp	r4, r5
 80090c0:	d1fb      	bne.n	80090ba <__sccl+0x1a>
 80090c2:	b913      	cbnz	r3, 80090ca <__sccl+0x2a>
 80090c4:	3a01      	subs	r2, #1
 80090c6:	4610      	mov	r0, r2
 80090c8:	bd70      	pop	{r4, r5, r6, pc}
 80090ca:	f081 0401 	eor.w	r4, r1, #1
 80090ce:	54c4      	strb	r4, [r0, r3]
 80090d0:	1c51      	adds	r1, r2, #1
 80090d2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80090d6:	1e4e      	subs	r6, r1, #1
 80090d8:	2d2d      	cmp	r5, #45	; 0x2d
 80090da:	460a      	mov	r2, r1
 80090dc:	d006      	beq.n	80090ec <__sccl+0x4c>
 80090de:	2d5d      	cmp	r5, #93	; 0x5d
 80090e0:	d0f1      	beq.n	80090c6 <__sccl+0x26>
 80090e2:	b90d      	cbnz	r5, 80090e8 <__sccl+0x48>
 80090e4:	4632      	mov	r2, r6
 80090e6:	e7ee      	b.n	80090c6 <__sccl+0x26>
 80090e8:	462b      	mov	r3, r5
 80090ea:	e7f0      	b.n	80090ce <__sccl+0x2e>
 80090ec:	780e      	ldrb	r6, [r1, #0]
 80090ee:	2e5d      	cmp	r6, #93	; 0x5d
 80090f0:	d0fa      	beq.n	80090e8 <__sccl+0x48>
 80090f2:	42b3      	cmp	r3, r6
 80090f4:	dcf8      	bgt.n	80090e8 <__sccl+0x48>
 80090f6:	3301      	adds	r3, #1
 80090f8:	429e      	cmp	r6, r3
 80090fa:	54c4      	strb	r4, [r0, r3]
 80090fc:	dcfb      	bgt.n	80090f6 <__sccl+0x56>
 80090fe:	3102      	adds	r1, #2
 8009100:	e7e7      	b.n	80090d2 <__sccl+0x32>

08009102 <strncmp>:
 8009102:	b510      	push	{r4, lr}
 8009104:	b16a      	cbz	r2, 8009122 <strncmp+0x20>
 8009106:	3901      	subs	r1, #1
 8009108:	1884      	adds	r4, r0, r2
 800910a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800910e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009112:	4293      	cmp	r3, r2
 8009114:	d103      	bne.n	800911e <strncmp+0x1c>
 8009116:	42a0      	cmp	r0, r4
 8009118:	d001      	beq.n	800911e <strncmp+0x1c>
 800911a:	2b00      	cmp	r3, #0
 800911c:	d1f5      	bne.n	800910a <strncmp+0x8>
 800911e:	1a98      	subs	r0, r3, r2
 8009120:	bd10      	pop	{r4, pc}
 8009122:	4610      	mov	r0, r2
 8009124:	e7fc      	b.n	8009120 <strncmp+0x1e>

08009126 <_strtoul_l.isra.0>:
 8009126:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800912a:	4680      	mov	r8, r0
 800912c:	4689      	mov	r9, r1
 800912e:	4692      	mov	sl, r2
 8009130:	461e      	mov	r6, r3
 8009132:	460f      	mov	r7, r1
 8009134:	463d      	mov	r5, r7
 8009136:	9808      	ldr	r0, [sp, #32]
 8009138:	f815 4b01 	ldrb.w	r4, [r5], #1
 800913c:	f7ff f818 	bl	8008170 <__locale_ctype_ptr_l>
 8009140:	4420      	add	r0, r4
 8009142:	7843      	ldrb	r3, [r0, #1]
 8009144:	f013 0308 	ands.w	r3, r3, #8
 8009148:	d130      	bne.n	80091ac <_strtoul_l.isra.0+0x86>
 800914a:	2c2d      	cmp	r4, #45	; 0x2d
 800914c:	d130      	bne.n	80091b0 <_strtoul_l.isra.0+0x8a>
 800914e:	2101      	movs	r1, #1
 8009150:	787c      	ldrb	r4, [r7, #1]
 8009152:	1cbd      	adds	r5, r7, #2
 8009154:	2e00      	cmp	r6, #0
 8009156:	d05c      	beq.n	8009212 <_strtoul_l.isra.0+0xec>
 8009158:	2e10      	cmp	r6, #16
 800915a:	d109      	bne.n	8009170 <_strtoul_l.isra.0+0x4a>
 800915c:	2c30      	cmp	r4, #48	; 0x30
 800915e:	d107      	bne.n	8009170 <_strtoul_l.isra.0+0x4a>
 8009160:	782b      	ldrb	r3, [r5, #0]
 8009162:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009166:	2b58      	cmp	r3, #88	; 0x58
 8009168:	d14e      	bne.n	8009208 <_strtoul_l.isra.0+0xe2>
 800916a:	2610      	movs	r6, #16
 800916c:	786c      	ldrb	r4, [r5, #1]
 800916e:	3502      	adds	r5, #2
 8009170:	f04f 32ff 	mov.w	r2, #4294967295
 8009174:	fbb2 f2f6 	udiv	r2, r2, r6
 8009178:	2300      	movs	r3, #0
 800917a:	fb06 fc02 	mul.w	ip, r6, r2
 800917e:	4618      	mov	r0, r3
 8009180:	ea6f 0c0c 	mvn.w	ip, ip
 8009184:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009188:	2f09      	cmp	r7, #9
 800918a:	d817      	bhi.n	80091bc <_strtoul_l.isra.0+0x96>
 800918c:	463c      	mov	r4, r7
 800918e:	42a6      	cmp	r6, r4
 8009190:	dd23      	ble.n	80091da <_strtoul_l.isra.0+0xb4>
 8009192:	2b00      	cmp	r3, #0
 8009194:	db1e      	blt.n	80091d4 <_strtoul_l.isra.0+0xae>
 8009196:	4282      	cmp	r2, r0
 8009198:	d31c      	bcc.n	80091d4 <_strtoul_l.isra.0+0xae>
 800919a:	d101      	bne.n	80091a0 <_strtoul_l.isra.0+0x7a>
 800919c:	45a4      	cmp	ip, r4
 800919e:	db19      	blt.n	80091d4 <_strtoul_l.isra.0+0xae>
 80091a0:	2301      	movs	r3, #1
 80091a2:	fb00 4006 	mla	r0, r0, r6, r4
 80091a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091aa:	e7eb      	b.n	8009184 <_strtoul_l.isra.0+0x5e>
 80091ac:	462f      	mov	r7, r5
 80091ae:	e7c1      	b.n	8009134 <_strtoul_l.isra.0+0xe>
 80091b0:	2c2b      	cmp	r4, #43	; 0x2b
 80091b2:	bf04      	itt	eq
 80091b4:	1cbd      	addeq	r5, r7, #2
 80091b6:	787c      	ldrbeq	r4, [r7, #1]
 80091b8:	4619      	mov	r1, r3
 80091ba:	e7cb      	b.n	8009154 <_strtoul_l.isra.0+0x2e>
 80091bc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80091c0:	2f19      	cmp	r7, #25
 80091c2:	d801      	bhi.n	80091c8 <_strtoul_l.isra.0+0xa2>
 80091c4:	3c37      	subs	r4, #55	; 0x37
 80091c6:	e7e2      	b.n	800918e <_strtoul_l.isra.0+0x68>
 80091c8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80091cc:	2f19      	cmp	r7, #25
 80091ce:	d804      	bhi.n	80091da <_strtoul_l.isra.0+0xb4>
 80091d0:	3c57      	subs	r4, #87	; 0x57
 80091d2:	e7dc      	b.n	800918e <_strtoul_l.isra.0+0x68>
 80091d4:	f04f 33ff 	mov.w	r3, #4294967295
 80091d8:	e7e5      	b.n	80091a6 <_strtoul_l.isra.0+0x80>
 80091da:	2b00      	cmp	r3, #0
 80091dc:	da09      	bge.n	80091f2 <_strtoul_l.isra.0+0xcc>
 80091de:	2322      	movs	r3, #34	; 0x22
 80091e0:	f04f 30ff 	mov.w	r0, #4294967295
 80091e4:	f8c8 3000 	str.w	r3, [r8]
 80091e8:	f1ba 0f00 	cmp.w	sl, #0
 80091ec:	d107      	bne.n	80091fe <_strtoul_l.isra.0+0xd8>
 80091ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091f2:	b101      	cbz	r1, 80091f6 <_strtoul_l.isra.0+0xd0>
 80091f4:	4240      	negs	r0, r0
 80091f6:	f1ba 0f00 	cmp.w	sl, #0
 80091fa:	d0f8      	beq.n	80091ee <_strtoul_l.isra.0+0xc8>
 80091fc:	b10b      	cbz	r3, 8009202 <_strtoul_l.isra.0+0xdc>
 80091fe:	f105 39ff 	add.w	r9, r5, #4294967295
 8009202:	f8ca 9000 	str.w	r9, [sl]
 8009206:	e7f2      	b.n	80091ee <_strtoul_l.isra.0+0xc8>
 8009208:	2430      	movs	r4, #48	; 0x30
 800920a:	2e00      	cmp	r6, #0
 800920c:	d1b0      	bne.n	8009170 <_strtoul_l.isra.0+0x4a>
 800920e:	2608      	movs	r6, #8
 8009210:	e7ae      	b.n	8009170 <_strtoul_l.isra.0+0x4a>
 8009212:	2c30      	cmp	r4, #48	; 0x30
 8009214:	d0a4      	beq.n	8009160 <_strtoul_l.isra.0+0x3a>
 8009216:	260a      	movs	r6, #10
 8009218:	e7aa      	b.n	8009170 <_strtoul_l.isra.0+0x4a>
	...

0800921c <_strtoul_r>:
 800921c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800921e:	4c06      	ldr	r4, [pc, #24]	; (8009238 <_strtoul_r+0x1c>)
 8009220:	4d06      	ldr	r5, [pc, #24]	; (800923c <_strtoul_r+0x20>)
 8009222:	6824      	ldr	r4, [r4, #0]
 8009224:	6a24      	ldr	r4, [r4, #32]
 8009226:	2c00      	cmp	r4, #0
 8009228:	bf08      	it	eq
 800922a:	462c      	moveq	r4, r5
 800922c:	9400      	str	r4, [sp, #0]
 800922e:	f7ff ff7a 	bl	8009126 <_strtoul_l.isra.0>
 8009232:	b003      	add	sp, #12
 8009234:	bd30      	pop	{r4, r5, pc}
 8009236:	bf00      	nop
 8009238:	200001b4 	.word	0x200001b4
 800923c:	20000218 	.word	0x20000218

08009240 <__submore>:
 8009240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009244:	460c      	mov	r4, r1
 8009246:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009248:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800924c:	4299      	cmp	r1, r3
 800924e:	d11b      	bne.n	8009288 <__submore+0x48>
 8009250:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009254:	f7ff fbb8 	bl	80089c8 <_malloc_r>
 8009258:	b918      	cbnz	r0, 8009262 <__submore+0x22>
 800925a:	f04f 30ff 	mov.w	r0, #4294967295
 800925e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009266:	63a3      	str	r3, [r4, #56]	; 0x38
 8009268:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800926c:	6360      	str	r0, [r4, #52]	; 0x34
 800926e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009272:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009276:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800927a:	7043      	strb	r3, [r0, #1]
 800927c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009280:	7003      	strb	r3, [r0, #0]
 8009282:	6020      	str	r0, [r4, #0]
 8009284:	2000      	movs	r0, #0
 8009286:	e7ea      	b.n	800925e <__submore+0x1e>
 8009288:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800928a:	0077      	lsls	r7, r6, #1
 800928c:	463a      	mov	r2, r7
 800928e:	f000 f881 	bl	8009394 <_realloc_r>
 8009292:	4605      	mov	r5, r0
 8009294:	2800      	cmp	r0, #0
 8009296:	d0e0      	beq.n	800925a <__submore+0x1a>
 8009298:	eb00 0806 	add.w	r8, r0, r6
 800929c:	4601      	mov	r1, r0
 800929e:	4632      	mov	r2, r6
 80092a0:	4640      	mov	r0, r8
 80092a2:	f7fd fcb8 	bl	8006c16 <memcpy>
 80092a6:	f8c4 8000 	str.w	r8, [r4]
 80092aa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80092ae:	e7e9      	b.n	8009284 <__submore+0x44>

080092b0 <__ascii_wctomb>:
 80092b0:	b149      	cbz	r1, 80092c6 <__ascii_wctomb+0x16>
 80092b2:	2aff      	cmp	r2, #255	; 0xff
 80092b4:	bf8b      	itete	hi
 80092b6:	238a      	movhi	r3, #138	; 0x8a
 80092b8:	700a      	strbls	r2, [r1, #0]
 80092ba:	6003      	strhi	r3, [r0, #0]
 80092bc:	2001      	movls	r0, #1
 80092be:	bf88      	it	hi
 80092c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80092c4:	4770      	bx	lr
 80092c6:	4608      	mov	r0, r1
 80092c8:	4770      	bx	lr
	...

080092cc <malloc>:
 80092cc:	4b02      	ldr	r3, [pc, #8]	; (80092d8 <malloc+0xc>)
 80092ce:	4601      	mov	r1, r0
 80092d0:	6818      	ldr	r0, [r3, #0]
 80092d2:	f7ff bb79 	b.w	80089c8 <_malloc_r>
 80092d6:	bf00      	nop
 80092d8:	200001b4 	.word	0x200001b4

080092dc <memchr>:
 80092dc:	b510      	push	{r4, lr}
 80092de:	b2c9      	uxtb	r1, r1
 80092e0:	4402      	add	r2, r0
 80092e2:	4290      	cmp	r0, r2
 80092e4:	4603      	mov	r3, r0
 80092e6:	d101      	bne.n	80092ec <memchr+0x10>
 80092e8:	2300      	movs	r3, #0
 80092ea:	e003      	b.n	80092f4 <memchr+0x18>
 80092ec:	781c      	ldrb	r4, [r3, #0]
 80092ee:	3001      	adds	r0, #1
 80092f0:	428c      	cmp	r4, r1
 80092f2:	d1f6      	bne.n	80092e2 <memchr+0x6>
 80092f4:	4618      	mov	r0, r3
 80092f6:	bd10      	pop	{r4, pc}

080092f8 <__malloc_lock>:
 80092f8:	4770      	bx	lr

080092fa <__malloc_unlock>:
 80092fa:	4770      	bx	lr

080092fc <_free_r>:
 80092fc:	b538      	push	{r3, r4, r5, lr}
 80092fe:	4605      	mov	r5, r0
 8009300:	2900      	cmp	r1, #0
 8009302:	d043      	beq.n	800938c <_free_r+0x90>
 8009304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009308:	1f0c      	subs	r4, r1, #4
 800930a:	2b00      	cmp	r3, #0
 800930c:	bfb8      	it	lt
 800930e:	18e4      	addlt	r4, r4, r3
 8009310:	f7ff fff2 	bl	80092f8 <__malloc_lock>
 8009314:	4a1e      	ldr	r2, [pc, #120]	; (8009390 <_free_r+0x94>)
 8009316:	6813      	ldr	r3, [r2, #0]
 8009318:	4610      	mov	r0, r2
 800931a:	b933      	cbnz	r3, 800932a <_free_r+0x2e>
 800931c:	6063      	str	r3, [r4, #4]
 800931e:	6014      	str	r4, [r2, #0]
 8009320:	4628      	mov	r0, r5
 8009322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009326:	f7ff bfe8 	b.w	80092fa <__malloc_unlock>
 800932a:	42a3      	cmp	r3, r4
 800932c:	d90b      	bls.n	8009346 <_free_r+0x4a>
 800932e:	6821      	ldr	r1, [r4, #0]
 8009330:	1862      	adds	r2, r4, r1
 8009332:	4293      	cmp	r3, r2
 8009334:	bf01      	itttt	eq
 8009336:	681a      	ldreq	r2, [r3, #0]
 8009338:	685b      	ldreq	r3, [r3, #4]
 800933a:	1852      	addeq	r2, r2, r1
 800933c:	6022      	streq	r2, [r4, #0]
 800933e:	6063      	str	r3, [r4, #4]
 8009340:	6004      	str	r4, [r0, #0]
 8009342:	e7ed      	b.n	8009320 <_free_r+0x24>
 8009344:	4613      	mov	r3, r2
 8009346:	685a      	ldr	r2, [r3, #4]
 8009348:	b10a      	cbz	r2, 800934e <_free_r+0x52>
 800934a:	42a2      	cmp	r2, r4
 800934c:	d9fa      	bls.n	8009344 <_free_r+0x48>
 800934e:	6819      	ldr	r1, [r3, #0]
 8009350:	1858      	adds	r0, r3, r1
 8009352:	42a0      	cmp	r0, r4
 8009354:	d10b      	bne.n	800936e <_free_r+0x72>
 8009356:	6820      	ldr	r0, [r4, #0]
 8009358:	4401      	add	r1, r0
 800935a:	1858      	adds	r0, r3, r1
 800935c:	4282      	cmp	r2, r0
 800935e:	6019      	str	r1, [r3, #0]
 8009360:	d1de      	bne.n	8009320 <_free_r+0x24>
 8009362:	6810      	ldr	r0, [r2, #0]
 8009364:	6852      	ldr	r2, [r2, #4]
 8009366:	4401      	add	r1, r0
 8009368:	6019      	str	r1, [r3, #0]
 800936a:	605a      	str	r2, [r3, #4]
 800936c:	e7d8      	b.n	8009320 <_free_r+0x24>
 800936e:	d902      	bls.n	8009376 <_free_r+0x7a>
 8009370:	230c      	movs	r3, #12
 8009372:	602b      	str	r3, [r5, #0]
 8009374:	e7d4      	b.n	8009320 <_free_r+0x24>
 8009376:	6820      	ldr	r0, [r4, #0]
 8009378:	1821      	adds	r1, r4, r0
 800937a:	428a      	cmp	r2, r1
 800937c:	bf01      	itttt	eq
 800937e:	6811      	ldreq	r1, [r2, #0]
 8009380:	6852      	ldreq	r2, [r2, #4]
 8009382:	1809      	addeq	r1, r1, r0
 8009384:	6021      	streq	r1, [r4, #0]
 8009386:	6062      	str	r2, [r4, #4]
 8009388:	605c      	str	r4, [r3, #4]
 800938a:	e7c9      	b.n	8009320 <_free_r+0x24>
 800938c:	bd38      	pop	{r3, r4, r5, pc}
 800938e:	bf00      	nop
 8009390:	200005e8 	.word	0x200005e8

08009394 <_realloc_r>:
 8009394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009396:	4607      	mov	r7, r0
 8009398:	4614      	mov	r4, r2
 800939a:	460e      	mov	r6, r1
 800939c:	b921      	cbnz	r1, 80093a8 <_realloc_r+0x14>
 800939e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80093a2:	4611      	mov	r1, r2
 80093a4:	f7ff bb10 	b.w	80089c8 <_malloc_r>
 80093a8:	b922      	cbnz	r2, 80093b4 <_realloc_r+0x20>
 80093aa:	f7ff ffa7 	bl	80092fc <_free_r>
 80093ae:	4625      	mov	r5, r4
 80093b0:	4628      	mov	r0, r5
 80093b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093b4:	f000 f814 	bl	80093e0 <_malloc_usable_size_r>
 80093b8:	42a0      	cmp	r0, r4
 80093ba:	d20f      	bcs.n	80093dc <_realloc_r+0x48>
 80093bc:	4621      	mov	r1, r4
 80093be:	4638      	mov	r0, r7
 80093c0:	f7ff fb02 	bl	80089c8 <_malloc_r>
 80093c4:	4605      	mov	r5, r0
 80093c6:	2800      	cmp	r0, #0
 80093c8:	d0f2      	beq.n	80093b0 <_realloc_r+0x1c>
 80093ca:	4631      	mov	r1, r6
 80093cc:	4622      	mov	r2, r4
 80093ce:	f7fd fc22 	bl	8006c16 <memcpy>
 80093d2:	4631      	mov	r1, r6
 80093d4:	4638      	mov	r0, r7
 80093d6:	f7ff ff91 	bl	80092fc <_free_r>
 80093da:	e7e9      	b.n	80093b0 <_realloc_r+0x1c>
 80093dc:	4635      	mov	r5, r6
 80093de:	e7e7      	b.n	80093b0 <_realloc_r+0x1c>

080093e0 <_malloc_usable_size_r>:
 80093e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093e4:	1f18      	subs	r0, r3, #4
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	bfbc      	itt	lt
 80093ea:	580b      	ldrlt	r3, [r1, r0]
 80093ec:	18c0      	addlt	r0, r0, r3
 80093ee:	4770      	bx	lr

080093f0 <fmod>:
 80093f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f4:	b08b      	sub	sp, #44	; 0x2c
 80093f6:	461f      	mov	r7, r3
 80093f8:	4604      	mov	r4, r0
 80093fa:	460d      	mov	r5, r1
 80093fc:	4616      	mov	r6, r2
 80093fe:	f000 f853 	bl	80094a8 <__ieee754_fmod>
 8009402:	4b27      	ldr	r3, [pc, #156]	; (80094a0 <fmod+0xb0>)
 8009404:	4680      	mov	r8, r0
 8009406:	f993 a000 	ldrsb.w	sl, [r3]
 800940a:	4689      	mov	r9, r1
 800940c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009410:	d030      	beq.n	8009474 <fmod+0x84>
 8009412:	4632      	mov	r2, r6
 8009414:	463b      	mov	r3, r7
 8009416:	4630      	mov	r0, r6
 8009418:	4639      	mov	r1, r7
 800941a:	f7f7 faf7 	bl	8000a0c <__aeabi_dcmpun>
 800941e:	bb48      	cbnz	r0, 8009474 <fmod+0x84>
 8009420:	4622      	mov	r2, r4
 8009422:	462b      	mov	r3, r5
 8009424:	4620      	mov	r0, r4
 8009426:	4629      	mov	r1, r5
 8009428:	f7f7 faf0 	bl	8000a0c <__aeabi_dcmpun>
 800942c:	4683      	mov	fp, r0
 800942e:	bb08      	cbnz	r0, 8009474 <fmod+0x84>
 8009430:	2200      	movs	r2, #0
 8009432:	2300      	movs	r3, #0
 8009434:	4630      	mov	r0, r6
 8009436:	4639      	mov	r1, r7
 8009438:	f7f7 fab6 	bl	80009a8 <__aeabi_dcmpeq>
 800943c:	b1d0      	cbz	r0, 8009474 <fmod+0x84>
 800943e:	2301      	movs	r3, #1
 8009440:	9300      	str	r3, [sp, #0]
 8009442:	4b18      	ldr	r3, [pc, #96]	; (80094a4 <fmod+0xb4>)
 8009444:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009448:	9301      	str	r3, [sp, #4]
 800944a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800944e:	f8cd b020 	str.w	fp, [sp, #32]
 8009452:	f1ba 0f00 	cmp.w	sl, #0
 8009456:	d112      	bne.n	800947e <fmod+0x8e>
 8009458:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800945c:	4668      	mov	r0, sp
 800945e:	f000 f92d 	bl	80096bc <matherr>
 8009462:	b1b8      	cbz	r0, 8009494 <fmod+0xa4>
 8009464:	9b08      	ldr	r3, [sp, #32]
 8009466:	b11b      	cbz	r3, 8009470 <fmod+0x80>
 8009468:	f7fd fb82 	bl	8006b70 <__errno>
 800946c:	9b08      	ldr	r3, [sp, #32]
 800946e:	6003      	str	r3, [r0, #0]
 8009470:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8009474:	4640      	mov	r0, r8
 8009476:	4649      	mov	r1, r9
 8009478:	b00b      	add	sp, #44	; 0x2c
 800947a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800947e:	2200      	movs	r2, #0
 8009480:	2300      	movs	r3, #0
 8009482:	4610      	mov	r0, r2
 8009484:	4619      	mov	r1, r3
 8009486:	f7f7 f951 	bl	800072c <__aeabi_ddiv>
 800948a:	f1ba 0f02 	cmp.w	sl, #2
 800948e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009492:	d1e3      	bne.n	800945c <fmod+0x6c>
 8009494:	f7fd fb6c 	bl	8006b70 <__errno>
 8009498:	2321      	movs	r3, #33	; 0x21
 800949a:	6003      	str	r3, [r0, #0]
 800949c:	e7e2      	b.n	8009464 <fmod+0x74>
 800949e:	bf00      	nop
 80094a0:	20000384 	.word	0x20000384
 80094a4:	0800a6fc 	.word	0x0800a6fc

080094a8 <__ieee754_fmod>:
 80094a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094ac:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80094b0:	4682      	mov	sl, r0
 80094b2:	ea54 0002 	orrs.w	r0, r4, r2
 80094b6:	461e      	mov	r6, r3
 80094b8:	4694      	mov	ip, r2
 80094ba:	4696      	mov	lr, r2
 80094bc:	d00c      	beq.n	80094d8 <__ieee754_fmod+0x30>
 80094be:	4d78      	ldr	r5, [pc, #480]	; (80096a0 <__ieee754_fmod+0x1f8>)
 80094c0:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80094c4:	45a8      	cmp	r8, r5
 80094c6:	4689      	mov	r9, r1
 80094c8:	dc06      	bgt.n	80094d8 <__ieee754_fmod+0x30>
 80094ca:	4255      	negs	r5, r2
 80094cc:	4315      	orrs	r5, r2
 80094ce:	4f75      	ldr	r7, [pc, #468]	; (80096a4 <__ieee754_fmod+0x1fc>)
 80094d0:	ea44 75d5 	orr.w	r5, r4, r5, lsr #31
 80094d4:	42bd      	cmp	r5, r7
 80094d6:	d908      	bls.n	80094ea <__ieee754_fmod+0x42>
 80094d8:	4650      	mov	r0, sl
 80094da:	f7f6 fffd 	bl	80004d8 <__aeabi_dmul>
 80094de:	4602      	mov	r2, r0
 80094e0:	460b      	mov	r3, r1
 80094e2:	f7f7 f923 	bl	800072c <__aeabi_ddiv>
 80094e6:	4682      	mov	sl, r0
 80094e8:	e00f      	b.n	800950a <__ieee754_fmod+0x62>
 80094ea:	45a0      	cmp	r8, r4
 80094ec:	4652      	mov	r2, sl
 80094ee:	4657      	mov	r7, sl
 80094f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80094f4:	dc0c      	bgt.n	8009510 <__ieee754_fmod+0x68>
 80094f6:	db08      	blt.n	800950a <__ieee754_fmod+0x62>
 80094f8:	45e2      	cmp	sl, ip
 80094fa:	d306      	bcc.n	800950a <__ieee754_fmod+0x62>
 80094fc:	d108      	bne.n	8009510 <__ieee754_fmod+0x68>
 80094fe:	496a      	ldr	r1, [pc, #424]	; (80096a8 <__ieee754_fmod+0x200>)
 8009500:	0fed      	lsrs	r5, r5, #31
 8009502:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8009506:	e9d5 a100 	ldrd	sl, r1, [r5]
 800950a:	4650      	mov	r0, sl
 800950c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009510:	4b66      	ldr	r3, [pc, #408]	; (80096ac <__ieee754_fmod+0x204>)
 8009512:	4598      	cmp	r8, r3
 8009514:	dc48      	bgt.n	80095a8 <__ieee754_fmod+0x100>
 8009516:	f1b8 0f00 	cmp.w	r8, #0
 800951a:	d13c      	bne.n	8009596 <__ieee754_fmod+0xee>
 800951c:	4611      	mov	r1, r2
 800951e:	4864      	ldr	r0, [pc, #400]	; (80096b0 <__ieee754_fmod+0x208>)
 8009520:	2900      	cmp	r1, #0
 8009522:	dc35      	bgt.n	8009590 <__ieee754_fmod+0xe8>
 8009524:	429c      	cmp	r4, r3
 8009526:	dc4f      	bgt.n	80095c8 <__ieee754_fmod+0x120>
 8009528:	2c00      	cmp	r4, #0
 800952a:	d145      	bne.n	80095b8 <__ieee754_fmod+0x110>
 800952c:	4661      	mov	r1, ip
 800952e:	4b60      	ldr	r3, [pc, #384]	; (80096b0 <__ieee754_fmod+0x208>)
 8009530:	2900      	cmp	r1, #0
 8009532:	dc3e      	bgt.n	80095b2 <__ieee754_fmod+0x10a>
 8009534:	495f      	ldr	r1, [pc, #380]	; (80096b4 <__ieee754_fmod+0x20c>)
 8009536:	4288      	cmp	r0, r1
 8009538:	db4a      	blt.n	80095d0 <__ieee754_fmod+0x128>
 800953a:	f3c9 0113 	ubfx	r1, r9, #0, #20
 800953e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009542:	4a5c      	ldr	r2, [pc, #368]	; (80096b4 <__ieee754_fmod+0x20c>)
 8009544:	4293      	cmp	r3, r2
 8009546:	db57      	blt.n	80095f8 <__ieee754_fmod+0x150>
 8009548:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800954c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8009550:	1ac0      	subs	r0, r0, r3
 8009552:	1b8a      	subs	r2, r1, r6
 8009554:	eba7 040e 	sub.w	r4, r7, lr
 8009558:	2800      	cmp	r0, #0
 800955a:	d163      	bne.n	8009624 <__ieee754_fmod+0x17c>
 800955c:	4577      	cmp	r7, lr
 800955e:	bf38      	it	cc
 8009560:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8009564:	2a00      	cmp	r2, #0
 8009566:	bfbc      	itt	lt
 8009568:	463c      	movlt	r4, r7
 800956a:	460a      	movlt	r2, r1
 800956c:	ea52 0104 	orrs.w	r1, r2, r4
 8009570:	d0c5      	beq.n	80094fe <__ieee754_fmod+0x56>
 8009572:	494e      	ldr	r1, [pc, #312]	; (80096ac <__ieee754_fmod+0x204>)
 8009574:	428a      	cmp	r2, r1
 8009576:	dd6a      	ble.n	800964e <__ieee754_fmod+0x1a6>
 8009578:	494e      	ldr	r1, [pc, #312]	; (80096b4 <__ieee754_fmod+0x20c>)
 800957a:	428b      	cmp	r3, r1
 800957c:	db6d      	blt.n	800965a <__ieee754_fmod+0x1b2>
 800957e:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8009582:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8009586:	4315      	orrs	r5, r2
 8009588:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
 800958c:	4620      	mov	r0, r4
 800958e:	e7aa      	b.n	80094e6 <__ieee754_fmod+0x3e>
 8009590:	3801      	subs	r0, #1
 8009592:	0049      	lsls	r1, r1, #1
 8009594:	e7c4      	b.n	8009520 <__ieee754_fmod+0x78>
 8009596:	4847      	ldr	r0, [pc, #284]	; (80096b4 <__ieee754_fmod+0x20c>)
 8009598:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800959c:	0049      	lsls	r1, r1, #1
 800959e:	2900      	cmp	r1, #0
 80095a0:	f100 30ff 	add.w	r0, r0, #4294967295
 80095a4:	dcfa      	bgt.n	800959c <__ieee754_fmod+0xf4>
 80095a6:	e7bd      	b.n	8009524 <__ieee754_fmod+0x7c>
 80095a8:	ea4f 5028 	mov.w	r0, r8, asr #20
 80095ac:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80095b0:	e7b8      	b.n	8009524 <__ieee754_fmod+0x7c>
 80095b2:	3b01      	subs	r3, #1
 80095b4:	0049      	lsls	r1, r1, #1
 80095b6:	e7bb      	b.n	8009530 <__ieee754_fmod+0x88>
 80095b8:	4b3e      	ldr	r3, [pc, #248]	; (80096b4 <__ieee754_fmod+0x20c>)
 80095ba:	02e1      	lsls	r1, r4, #11
 80095bc:	0049      	lsls	r1, r1, #1
 80095be:	2900      	cmp	r1, #0
 80095c0:	f103 33ff 	add.w	r3, r3, #4294967295
 80095c4:	dcfa      	bgt.n	80095bc <__ieee754_fmod+0x114>
 80095c6:	e7b5      	b.n	8009534 <__ieee754_fmod+0x8c>
 80095c8:	1523      	asrs	r3, r4, #20
 80095ca:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80095ce:	e7b1      	b.n	8009534 <__ieee754_fmod+0x8c>
 80095d0:	1a0f      	subs	r7, r1, r0
 80095d2:	2f1f      	cmp	r7, #31
 80095d4:	dc0a      	bgt.n	80095ec <__ieee754_fmod+0x144>
 80095d6:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 80095da:	fa08 f807 	lsl.w	r8, r8, r7
 80095de:	fa22 f101 	lsr.w	r1, r2, r1
 80095e2:	ea41 0108 	orr.w	r1, r1, r8
 80095e6:	fa02 f707 	lsl.w	r7, r2, r7
 80095ea:	e7aa      	b.n	8009542 <__ieee754_fmod+0x9a>
 80095ec:	4932      	ldr	r1, [pc, #200]	; (80096b8 <__ieee754_fmod+0x210>)
 80095ee:	2700      	movs	r7, #0
 80095f0:	1a09      	subs	r1, r1, r0
 80095f2:	fa02 f101 	lsl.w	r1, r2, r1
 80095f6:	e7a4      	b.n	8009542 <__ieee754_fmod+0x9a>
 80095f8:	eba2 0e03 	sub.w	lr, r2, r3
 80095fc:	f1be 0f1f 	cmp.w	lr, #31
 8009600:	dc09      	bgt.n	8009616 <__ieee754_fmod+0x16e>
 8009602:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8009606:	fa04 f40e 	lsl.w	r4, r4, lr
 800960a:	fa2c f606 	lsr.w	r6, ip, r6
 800960e:	4326      	orrs	r6, r4
 8009610:	fa0c fe0e 	lsl.w	lr, ip, lr
 8009614:	e79c      	b.n	8009550 <__ieee754_fmod+0xa8>
 8009616:	4e28      	ldr	r6, [pc, #160]	; (80096b8 <__ieee754_fmod+0x210>)
 8009618:	f04f 0e00 	mov.w	lr, #0
 800961c:	1af6      	subs	r6, r6, r3
 800961e:	fa0c f606 	lsl.w	r6, ip, r6
 8009622:	e795      	b.n	8009550 <__ieee754_fmod+0xa8>
 8009624:	4577      	cmp	r7, lr
 8009626:	bf38      	it	cc
 8009628:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800962c:	2a00      	cmp	r2, #0
 800962e:	da05      	bge.n	800963c <__ieee754_fmod+0x194>
 8009630:	0ffa      	lsrs	r2, r7, #31
 8009632:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009636:	007f      	lsls	r7, r7, #1
 8009638:	3801      	subs	r0, #1
 800963a:	e78a      	b.n	8009552 <__ieee754_fmod+0xaa>
 800963c:	ea52 0104 	orrs.w	r1, r2, r4
 8009640:	f43f af5d 	beq.w	80094fe <__ieee754_fmod+0x56>
 8009644:	0fe1      	lsrs	r1, r4, #31
 8009646:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800964a:	0067      	lsls	r7, r4, #1
 800964c:	e7f4      	b.n	8009638 <__ieee754_fmod+0x190>
 800964e:	0fe0      	lsrs	r0, r4, #31
 8009650:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8009654:	0064      	lsls	r4, r4, #1
 8009656:	3b01      	subs	r3, #1
 8009658:	e78c      	b.n	8009574 <__ieee754_fmod+0xcc>
 800965a:	1ac9      	subs	r1, r1, r3
 800965c:	2914      	cmp	r1, #20
 800965e:	dc0a      	bgt.n	8009676 <__ieee754_fmod+0x1ce>
 8009660:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8009664:	fa02 f303 	lsl.w	r3, r2, r3
 8009668:	40cc      	lsrs	r4, r1
 800966a:	4323      	orrs	r3, r4
 800966c:	410a      	asrs	r2, r1
 800966e:	ea42 0105 	orr.w	r1, r2, r5
 8009672:	4618      	mov	r0, r3
 8009674:	e737      	b.n	80094e6 <__ieee754_fmod+0x3e>
 8009676:	291f      	cmp	r1, #31
 8009678:	dc07      	bgt.n	800968a <__ieee754_fmod+0x1e2>
 800967a:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800967e:	40cc      	lsrs	r4, r1
 8009680:	fa02 f303 	lsl.w	r3, r2, r3
 8009684:	4323      	orrs	r3, r4
 8009686:	462a      	mov	r2, r5
 8009688:	e7f1      	b.n	800966e <__ieee754_fmod+0x1c6>
 800968a:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800968e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009692:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8009696:	33e2      	adds	r3, #226	; 0xe2
 8009698:	fa42 f303 	asr.w	r3, r2, r3
 800969c:	e7f3      	b.n	8009686 <__ieee754_fmod+0x1de>
 800969e:	bf00      	nop
 80096a0:	7fefffff 	.word	0x7fefffff
 80096a4:	7ff00000 	.word	0x7ff00000
 80096a8:	0800a708 	.word	0x0800a708
 80096ac:	000fffff 	.word	0x000fffff
 80096b0:	fffffbed 	.word	0xfffffbed
 80096b4:	fffffc02 	.word	0xfffffc02
 80096b8:	fffffbe2 	.word	0xfffffbe2

080096bc <matherr>:
 80096bc:	2000      	movs	r0, #0
 80096be:	4770      	bx	lr

080096c0 <_init>:
 80096c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096c2:	bf00      	nop
 80096c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096c6:	bc08      	pop	{r3}
 80096c8:	469e      	mov	lr, r3
 80096ca:	4770      	bx	lr

080096cc <_fini>:
 80096cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ce:	bf00      	nop
 80096d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096d2:	bc08      	pop	{r3}
 80096d4:	469e      	mov	lr, r3
 80096d6:	4770      	bx	lr
