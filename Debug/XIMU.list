
XIMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c88  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001040  08009d98  08009d98  00019d98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800add8  0800add8  00020388  2**0
                  CONTENTS
  4 .ARM          00000000  0800add8  0800add8  00020388  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800add8  0800add8  00020388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800add8  0800add8  0001add8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800addc  0800addc  0001addc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000388  20000000  0800ade0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004488  20000388  0800b168  00020388  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004810  0800b168  00024810  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030bf2  00000000  00000000  000203b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006767  00000000  00000000  00050fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00011d1b  00000000  00000000  0005770a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000015a8  00000000  00000000  00069428  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002138  00000000  00000000  0006a9d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001c090  00000000  00000000  0006cb08  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00018dfb  00000000  00000000  00088b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000833cc  00000000  00000000  000a1993  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      000000f0  00000000  00000000  00124d5f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050d0  00000000  00000000  00124e50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000388 	.word	0x20000388
 800012c:	00000000 	.word	0x00000000
 8000130:	08009d80 	.word	0x08009d80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000038c 	.word	0x2000038c
 800014c:	08009d80 	.word	0x08009d80

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8000b68:	b513      	push	{r0, r1, r4, lr}
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8000b6a:	4c13      	ldr	r4, [pc, #76]	; (8000bb8 <set_int_enable+0x50>)
 8000b6c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000b70:	b193      	cbz	r3, 8000b98 <set_int_enable+0x30>
        if (enable)
 8000b72:	b1c0      	cbz	r0, 8000ba6 <set_int_enable+0x3e>
            tmp = BIT_DMP_INT_EN;
 8000b74:	2302      	movs	r3, #2
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
 8000b76:	f88d 3007 	strb.w	r3, [sp, #7]
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8000b7a:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000b7e:	f10d 0307 	add.w	r3, sp, #7
 8000b82:	2201      	movs	r2, #1
 8000b84:	7c49      	ldrb	r1, [r1, #17]
 8000b86:	7800      	ldrb	r0, [r0, #0]
 8000b88:	f002 fd30 	bl	80035ec <i2c_write>
 8000b8c:	b970      	cbnz	r0, 8000bac <set_int_enable+0x44>
            return -1;
        st.chip_cfg.int_enable = tmp;
 8000b8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000b92:	7463      	strb	r3, [r4, #17]
    }
    return 0;
}
 8000b94:	b002      	add	sp, #8
 8000b96:	bd10      	pop	{r4, pc}
        if (!st.chip_cfg.sensors)
 8000b98:	7aa2      	ldrb	r2, [r4, #10]
 8000b9a:	b13a      	cbz	r2, 8000bac <set_int_enable+0x44>
        if (enable && st.chip_cfg.int_enable)
 8000b9c:	b118      	cbz	r0, 8000ba6 <set_int_enable+0x3e>
 8000b9e:	7c62      	ldrb	r2, [r4, #17]
 8000ba0:	b93a      	cbnz	r2, 8000bb2 <set_int_enable+0x4a>
            tmp = BIT_DATA_RDY_EN;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e7e7      	b.n	8000b76 <set_int_enable+0xe>
            tmp = 0x00;
 8000ba6:	f88d 0007 	strb.w	r0, [sp, #7]
 8000baa:	e7e6      	b.n	8000b7a <set_int_enable+0x12>
            return -1;
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	e7f0      	b.n	8000b94 <set_int_enable+0x2c>
            return 0;
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	e7ee      	b.n	8000b94 <set_int_enable+0x2c>
 8000bb6:	bf00      	nop
 8000bb8:	20000000 	.word	0x20000000

08000bbc <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 8000bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8000bbe:	4c4e      	ldr	r4, [pc, #312]	; (8000cf8 <mpu_reset_fifo+0x13c>)
 8000bc0:	7aa3      	ldrb	r3, [r4, #10]
 8000bc2:	b91b      	cbnz	r3, 8000bcc <mpu_reset_fifo+0x10>
        return -1;
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
 8000bc8:	b003      	add	sp, #12
 8000bca:	bd30      	pop	{r4, r5, pc}
    data = 0;
 8000bcc:	2300      	movs	r3, #0
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000bce:	e9d4 1000 	ldrd	r1, r0, [r4]
    data = 0;
 8000bd2:	ad02      	add	r5, sp, #8
 8000bd4:	f805 3d01 	strb.w	r3, [r5, #-1]!
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000bd8:	462b      	mov	r3, r5
 8000bda:	2201      	movs	r2, #1
 8000bdc:	7c49      	ldrb	r1, [r1, #17]
 8000bde:	7800      	ldrb	r0, [r0, #0]
 8000be0:	f002 fd04 	bl	80035ec <i2c_write>
 8000be4:	2800      	cmp	r0, #0
 8000be6:	d1ed      	bne.n	8000bc4 <mpu_reset_fifo+0x8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8000be8:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000bec:	462b      	mov	r3, r5
 8000bee:	2201      	movs	r2, #1
 8000bf0:	7949      	ldrb	r1, [r1, #5]
 8000bf2:	7800      	ldrb	r0, [r0, #0]
 8000bf4:	f002 fcfa 	bl	80035ec <i2c_write>
 8000bf8:	2800      	cmp	r0, #0
 8000bfa:	d1e3      	bne.n	8000bc4 <mpu_reset_fifo+0x8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000bfc:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000c00:	462b      	mov	r3, r5
 8000c02:	2201      	movs	r2, #1
 8000c04:	7909      	ldrb	r1, [r1, #4]
 8000c06:	7800      	ldrb	r0, [r0, #0]
 8000c08:	f002 fcf0 	bl	80035ec <i2c_write>
 8000c0c:	2800      	cmp	r0, #0
 8000c0e:	d1d9      	bne.n	8000bc4 <mpu_reset_fifo+0x8>
 8000c10:	6863      	ldr	r3, [r4, #4]
 8000c12:	7818      	ldrb	r0, [r3, #0]
 8000c14:	6823      	ldr	r3, [r4, #0]
 8000c16:	7919      	ldrb	r1, [r3, #4]
    if (st.chip_cfg.dmp_on) {
 8000c18:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d039      	beq.n	8000c94 <mpu_reset_fifo+0xd8>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8000c20:	230c      	movs	r3, #12
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000c22:	2201      	movs	r2, #1
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8000c24:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000c28:	462b      	mov	r3, r5
 8000c2a:	f002 fcdf 	bl	80035ec <i2c_write>
 8000c2e:	2800      	cmp	r0, #0
 8000c30:	d1c8      	bne.n	8000bc4 <mpu_reset_fifo+0x8>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000c32:	e9d4 1000 	ldrd	r1, r0, [r4]
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8000c36:	23c0      	movs	r3, #192	; 0xc0
 8000c38:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8000c3c:	7aa3      	ldrb	r3, [r4, #10]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000c3e:	7909      	ldrb	r1, [r1, #4]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8000c40:	07da      	lsls	r2, r3, #31
            data |= BIT_AUX_IF_EN;
 8000c42:	bf44      	itt	mi
 8000c44:	23e0      	movmi	r3, #224	; 0xe0
 8000c46:	f88d 3007 	strbmi.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	462b      	mov	r3, r5
 8000c4e:	7800      	ldrb	r0, [r0, #0]
 8000c50:	f002 fccc 	bl	80035ec <i2c_write>
 8000c54:	2800      	cmp	r0, #0
 8000c56:	d1b5      	bne.n	8000bc4 <mpu_reset_fifo+0x8>
        if (st.chip_cfg.int_enable)
 8000c58:	7c63      	ldrb	r3, [r4, #17]
 8000c5a:	b103      	cbz	r3, 8000c5e <mpu_reset_fifo+0xa2>
            data = BIT_DMP_INT_EN;
 8000c5c:	2302      	movs	r3, #2
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000c5e:	e9d4 1000 	ldrd	r1, r0, [r4]
            data = 0;
 8000c62:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000c66:	2201      	movs	r2, #1
 8000c68:	462b      	mov	r3, r5
 8000c6a:	7c49      	ldrb	r1, [r1, #17]
 8000c6c:	7800      	ldrb	r0, [r0, #0]
 8000c6e:	f002 fcbd 	bl	80035ec <i2c_write>
 8000c72:	2800      	cmp	r0, #0
 8000c74:	d1a6      	bne.n	8000bc4 <mpu_reset_fifo+0x8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8000c76:	462b      	mov	r3, r5
        data = 0;
 8000c78:	f88d 0007 	strb.w	r0, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8000c7c:	e9d4 1000 	ldrd	r1, r0, [r4]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8000c80:	2201      	movs	r2, #1
 8000c82:	7949      	ldrb	r1, [r1, #5]
 8000c84:	7800      	ldrb	r0, [r0, #0]
 8000c86:	f002 fcb1 	bl	80035ec <i2c_write>
 8000c8a:	3000      	adds	r0, #0
 8000c8c:	bf18      	it	ne
 8000c8e:	2001      	movne	r0, #1
 8000c90:	4240      	negs	r0, r0
 8000c92:	e799      	b.n	8000bc8 <mpu_reset_fifo+0xc>
        data = BIT_FIFO_RST;
 8000c94:	2304      	movs	r3, #4
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000c96:	2201      	movs	r2, #1
        data = BIT_FIFO_RST;
 8000c98:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000c9c:	462b      	mov	r3, r5
 8000c9e:	f002 fca5 	bl	80035ec <i2c_write>
 8000ca2:	2800      	cmp	r0, #0
 8000ca4:	d18e      	bne.n	8000bc4 <mpu_reset_fifo+0x8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8000ca6:	7ca3      	ldrb	r3, [r4, #18]
 8000ca8:	b913      	cbnz	r3, 8000cb0 <mpu_reset_fifo+0xf4>
 8000caa:	7aa3      	ldrb	r3, [r4, #10]
 8000cac:	07db      	lsls	r3, r3, #31
 8000cae:	d421      	bmi.n	8000cf4 <mpu_reset_fifo+0x138>
            data = BIT_FIFO_EN;
 8000cb0:	2340      	movs	r3, #64	; 0x40
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000cb2:	e9d4 1000 	ldrd	r1, r0, [r4]
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8000cb6:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8000cba:	2201      	movs	r2, #1
 8000cbc:	462b      	mov	r3, r5
 8000cbe:	7909      	ldrb	r1, [r1, #4]
 8000cc0:	7800      	ldrb	r0, [r0, #0]
 8000cc2:	f002 fc93 	bl	80035ec <i2c_write>
 8000cc6:	2800      	cmp	r0, #0
 8000cc8:	f47f af7c 	bne.w	8000bc4 <mpu_reset_fifo+0x8>
        if (st.chip_cfg.int_enable)
 8000ccc:	7c63      	ldrb	r3, [r4, #17]
 8000cce:	b103      	cbz	r3, 8000cd2 <mpu_reset_fifo+0x116>
            data = BIT_DATA_RDY_EN;
 8000cd0:	2301      	movs	r3, #1
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000cd2:	e9d4 1000 	ldrd	r1, r0, [r4]
            data = 0;
 8000cd6:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8000cda:	2201      	movs	r2, #1
 8000cdc:	462b      	mov	r3, r5
 8000cde:	7c49      	ldrb	r1, [r1, #17]
 8000ce0:	7800      	ldrb	r0, [r0, #0]
 8000ce2:	f002 fc83 	bl	80035ec <i2c_write>
 8000ce6:	2800      	cmp	r0, #0
 8000ce8:	f47f af6c 	bne.w	8000bc4 <mpu_reset_fifo+0x8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8000cec:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000cf0:	4b02      	ldr	r3, [pc, #8]	; (8000cfc <mpu_reset_fifo+0x140>)
 8000cf2:	e7c5      	b.n	8000c80 <mpu_reset_fifo+0xc4>
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8000cf4:	2360      	movs	r3, #96	; 0x60
 8000cf6:	e7dc      	b.n	8000cb2 <mpu_reset_fifo+0xf6>
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	20000010 	.word	0x20000010

08000d00 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8000d00:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8000d02:	4c1a      	ldr	r4, [pc, #104]	; (8000d6c <mpu_set_gyro_fsr+0x6c>)
 8000d04:	7aa3      	ldrb	r3, [r4, #10]
 8000d06:	b913      	cbnz	r3, 8000d0e <mpu_set_gyro_fsr+0xe>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	e01d      	b.n	8000d4a <mpu_set_gyro_fsr+0x4a>
    switch (fsr) {
 8000d0e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000d12:	d024      	beq.n	8000d5e <mpu_set_gyro_fsr+0x5e>
 8000d14:	d81b      	bhi.n	8000d4e <mpu_set_gyro_fsr+0x4e>
 8000d16:	28fa      	cmp	r0, #250	; 0xfa
 8000d18:	d1f6      	bne.n	8000d08 <mpu_set_gyro_fsr+0x8>
        data = INV_FSR_250DPS << 3;
 8000d1a:	2300      	movs	r3, #0
        data = INV_FSR_2000DPS << 3;
 8000d1c:	f88d 3007 	strb.w	r3, [sp, #7]
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8000d20:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000d24:	7a23      	ldrb	r3, [r4, #8]
 8000d26:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8000d2a:	d01c      	beq.n	8000d66 <mpu_set_gyro_fsr+0x66>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8000d2c:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000d30:	f10d 0307 	add.w	r3, sp, #7
 8000d34:	2201      	movs	r2, #1
 8000d36:	7989      	ldrb	r1, [r1, #6]
 8000d38:	7800      	ldrb	r0, [r0, #0]
 8000d3a:	f002 fc57 	bl	80035ec <i2c_write>
 8000d3e:	2800      	cmp	r0, #0
 8000d40:	d1e2      	bne.n	8000d08 <mpu_set_gyro_fsr+0x8>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
 8000d42:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	7223      	strb	r3, [r4, #8]
    return 0;
}
 8000d4a:	b002      	add	sp, #8
 8000d4c:	bd10      	pop	{r4, pc}
    switch (fsr) {
 8000d4e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000d52:	d006      	beq.n	8000d62 <mpu_set_gyro_fsr+0x62>
 8000d54:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8000d58:	d1d6      	bne.n	8000d08 <mpu_set_gyro_fsr+0x8>
        data = INV_FSR_2000DPS << 3;
 8000d5a:	2318      	movs	r3, #24
 8000d5c:	e7de      	b.n	8000d1c <mpu_set_gyro_fsr+0x1c>
        data = INV_FSR_500DPS << 3;
 8000d5e:	2308      	movs	r3, #8
 8000d60:	e7dc      	b.n	8000d1c <mpu_set_gyro_fsr+0x1c>
        data = INV_FSR_1000DPS << 3;
 8000d62:	2310      	movs	r3, #16
 8000d64:	e7da      	b.n	8000d1c <mpu_set_gyro_fsr+0x1c>
        return 0;
 8000d66:	2000      	movs	r0, #0
 8000d68:	e7ef      	b.n	8000d4a <mpu_set_gyro_fsr+0x4a>
 8000d6a:	bf00      	nop
 8000d6c:	20000000 	.word	0x20000000

08000d70 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8000d70:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8000d72:	4c18      	ldr	r4, [pc, #96]	; (8000dd4 <mpu_set_accel_fsr+0x64>)
 8000d74:	7aa3      	ldrb	r3, [r4, #10]
 8000d76:	b913      	cbnz	r3, 8000d7e <mpu_set_accel_fsr+0xe>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	e01c      	b.n	8000db8 <mpu_set_accel_fsr+0x48>
    switch (fsr) {
 8000d7e:	2804      	cmp	r0, #4
 8000d80:	d022      	beq.n	8000dc8 <mpu_set_accel_fsr+0x58>
 8000d82:	d81b      	bhi.n	8000dbc <mpu_set_accel_fsr+0x4c>
 8000d84:	2802      	cmp	r0, #2
 8000d86:	d1f7      	bne.n	8000d78 <mpu_set_accel_fsr+0x8>
        data = INV_FSR_2G << 3;
 8000d88:	2300      	movs	r3, #0
        data = INV_FSR_16G << 3;
 8000d8a:	f88d 3007 	strb.w	r3, [sp, #7]
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 8000d8e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000d92:	7a63      	ldrb	r3, [r4, #9]
 8000d94:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8000d98:	d01a      	beq.n	8000dd0 <mpu_set_accel_fsr+0x60>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8000d9a:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000d9e:	f10d 0307 	add.w	r3, sp, #7
 8000da2:	2201      	movs	r2, #1
 8000da4:	79c9      	ldrb	r1, [r1, #7]
 8000da6:	7800      	ldrb	r0, [r0, #0]
 8000da8:	f002 fc20 	bl	80035ec <i2c_write>
 8000dac:	2800      	cmp	r0, #0
 8000dae:	d1e3      	bne.n	8000d78 <mpu_set_accel_fsr+0x8>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
 8000db0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000db4:	08db      	lsrs	r3, r3, #3
 8000db6:	7263      	strb	r3, [r4, #9]
    return 0;
}
 8000db8:	b002      	add	sp, #8
 8000dba:	bd10      	pop	{r4, pc}
    switch (fsr) {
 8000dbc:	2808      	cmp	r0, #8
 8000dbe:	d005      	beq.n	8000dcc <mpu_set_accel_fsr+0x5c>
 8000dc0:	2810      	cmp	r0, #16
 8000dc2:	d1d9      	bne.n	8000d78 <mpu_set_accel_fsr+0x8>
        data = INV_FSR_16G << 3;
 8000dc4:	2318      	movs	r3, #24
 8000dc6:	e7e0      	b.n	8000d8a <mpu_set_accel_fsr+0x1a>
        data = INV_FSR_4G << 3;
 8000dc8:	2308      	movs	r3, #8
 8000dca:	e7de      	b.n	8000d8a <mpu_set_accel_fsr+0x1a>
        data = INV_FSR_8G << 3;
 8000dcc:	2310      	movs	r3, #16
 8000dce:	e7dc      	b.n	8000d8a <mpu_set_accel_fsr+0x1a>
        return 0;
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	e7f1      	b.n	8000db8 <mpu_set_accel_fsr+0x48>
 8000dd4:	20000000 	.word	0x20000000

08000dd8 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8000dd8:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8000dda:	4c19      	ldr	r4, [pc, #100]	; (8000e40 <mpu_set_lpf+0x68>)
 8000ddc:	7aa3      	ldrb	r3, [r4, #10]
 8000dde:	b91b      	cbnz	r3, 8000de8 <mpu_set_lpf+0x10>
        return -1;
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
        return -1;
    st.chip_cfg.lpf = data;
    return 0;
}
 8000de4:	b002      	add	sp, #8
 8000de6:	bd10      	pop	{r4, pc}
    if (lpf >= 188)
 8000de8:	28bb      	cmp	r0, #187	; 0xbb
 8000dea:	d916      	bls.n	8000e1a <mpu_set_lpf+0x42>
        data = INV_FILTER_188HZ;
 8000dec:	2301      	movs	r3, #1
        data = INV_FILTER_5HZ;
 8000dee:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.lpf == data)
 8000df2:	7ae2      	ldrb	r2, [r4, #11]
 8000df4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d01f      	beq.n	8000e3c <mpu_set_lpf+0x64>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8000dfc:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000e00:	f10d 0307 	add.w	r3, sp, #7
 8000e04:	2201      	movs	r2, #1
 8000e06:	7889      	ldrb	r1, [r1, #2]
 8000e08:	7800      	ldrb	r0, [r0, #0]
 8000e0a:	f002 fbef 	bl	80035ec <i2c_write>
 8000e0e:	2800      	cmp	r0, #0
 8000e10:	d1e6      	bne.n	8000de0 <mpu_set_lpf+0x8>
    st.chip_cfg.lpf = data;
 8000e12:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000e16:	72e3      	strb	r3, [r4, #11]
    return 0;
 8000e18:	e7e4      	b.n	8000de4 <mpu_set_lpf+0xc>
    else if (lpf >= 98)
 8000e1a:	2861      	cmp	r0, #97	; 0x61
 8000e1c:	d901      	bls.n	8000e22 <mpu_set_lpf+0x4a>
        data = INV_FILTER_98HZ;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	e7e5      	b.n	8000dee <mpu_set_lpf+0x16>
    else if (lpf >= 42)
 8000e22:	2829      	cmp	r0, #41	; 0x29
 8000e24:	d901      	bls.n	8000e2a <mpu_set_lpf+0x52>
        data = INV_FILTER_42HZ;
 8000e26:	2303      	movs	r3, #3
 8000e28:	e7e1      	b.n	8000dee <mpu_set_lpf+0x16>
    else if (lpf >= 20)
 8000e2a:	2813      	cmp	r0, #19
 8000e2c:	d901      	bls.n	8000e32 <mpu_set_lpf+0x5a>
        data = INV_FILTER_20HZ;
 8000e2e:	2304      	movs	r3, #4
 8000e30:	e7dd      	b.n	8000dee <mpu_set_lpf+0x16>
    else if (lpf >= 10)
 8000e32:	2809      	cmp	r0, #9
        data = INV_FILTER_10HZ;
 8000e34:	bf8c      	ite	hi
 8000e36:	2305      	movhi	r3, #5
        data = INV_FILTER_5HZ;
 8000e38:	2306      	movls	r3, #6
 8000e3a:	e7d8      	b.n	8000dee <mpu_set_lpf+0x16>
        return 0;
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	e7d1      	b.n	8000de4 <mpu_set_lpf+0xc>
 8000e40:	20000000 	.word	0x20000000

08000e44 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
 8000e44:	b513      	push	{r0, r1, r4, lr}
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8000e46:	b918      	cbnz	r0, 8000e50 <mpu_set_compass_sample_rate+0xc>
        return -1;
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
#else
    return -1;
#endif
}
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd10      	pop	{r4, pc}
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8000e50:	4c0e      	ldr	r4, [pc, #56]	; (8000e8c <mpu_set_compass_sample_rate+0x48>)
 8000e52:	89e3      	ldrh	r3, [r4, #14]
 8000e54:	4283      	cmp	r3, r0
 8000e56:	d3f7      	bcc.n	8000e48 <mpu_set_compass_sample_rate+0x4>
 8000e58:	2864      	cmp	r0, #100	; 0x64
 8000e5a:	d8f5      	bhi.n	8000e48 <mpu_set_compass_sample_rate+0x4>
    div = st.chip_cfg.sample_rate / rate - 1;
 8000e5c:	fbb3 f0f0 	udiv	r0, r3, r0
 8000e60:	ab02      	add	r3, sp, #8
 8000e62:	3801      	subs	r0, #1
 8000e64:	f803 0d01 	strb.w	r0, [r3, #-1]!
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8000e68:	2201      	movs	r2, #1
 8000e6a:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000e6e:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
 8000e72:	7800      	ldrb	r0, [r0, #0]
 8000e74:	f002 fbba 	bl	80035ec <i2c_write>
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	d1e5      	bne.n	8000e48 <mpu_set_compass_sample_rate+0x4>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 8000e7c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000e80:	89e3      	ldrh	r3, [r4, #14]
 8000e82:	3201      	adds	r2, #1
 8000e84:	fb93 f3f2 	sdiv	r3, r3, r2
 8000e88:	8523      	strh	r3, [r4, #40]	; 0x28
    return 0;
 8000e8a:	e7df      	b.n	8000e4c <mpu_set_compass_sample_rate+0x8>
 8000e8c:	20000000 	.word	0x20000000

08000e90 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8000e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <mpu_configure_fifo+0x4c>)
 8000e94:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8000e98:	461e      	mov	r6, r3
 8000e9a:	b9e2      	cbnz	r2, 8000ed6 <mpu_configure_fifo+0x46>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
 8000e9c:	7a9c      	ldrb	r4, [r3, #10]
 8000e9e:	b19c      	cbz	r4, 8000ec8 <mpu_configure_fifo+0x38>
    sensors &= ~INV_XYZ_COMPASS;
 8000ea0:	f000 05fe 	and.w	r5, r0, #254	; 0xfe
            return -1;
        prev = st.chip_cfg.fifo_enable;
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8000ea4:	402c      	ands	r4, r5
        prev = st.chip_cfg.fifo_enable;
 8000ea6:	7c1f      	ldrb	r7, [r3, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8000ea8:	741c      	strb	r4, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 8000eaa:	1b64      	subs	r4, r4, r5
 8000eac:	bf18      	it	ne
 8000eae:	f04f 34ff 	movne.w	r4, #4294967295
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
 8000eb2:	b90d      	cbnz	r5, 8000eb8 <mpu_configure_fifo+0x28>
 8000eb4:	7d18      	ldrb	r0, [r3, #20]
 8000eb6:	b150      	cbz	r0, 8000ece <mpu_configure_fifo+0x3e>
            set_int_enable(1);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f7ff fe55 	bl	8000b68 <set_int_enable>
        else
            set_int_enable(0);
        if (sensors) {
 8000ebe:	b145      	cbz	r5, 8000ed2 <mpu_configure_fifo+0x42>
            if (mpu_reset_fifo()) {
 8000ec0:	f7ff fe7c 	bl	8000bbc <mpu_reset_fifo>
 8000ec4:	b128      	cbz	r0, 8000ed2 <mpu_configure_fifo+0x42>
                st.chip_cfg.fifo_enable = prev;
 8000ec6:	7437      	strb	r7, [r6, #16]
            return -1;
 8000ec8:	f04f 34ff 	mov.w	r4, #4294967295
 8000ecc:	e001      	b.n	8000ed2 <mpu_configure_fifo+0x42>
            set_int_enable(0);
 8000ece:	f7ff fe4b 	bl	8000b68 <set_int_enable>
            }
        }
    }

    return result;
}
 8000ed2:	4620      	mov	r0, r4
 8000ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8000ed6:	2400      	movs	r4, #0
 8000ed8:	e7fb      	b.n	8000ed2 <mpu_configure_fifo+0x42>
 8000eda:	bf00      	nop
 8000edc:	20000000 	.word	0x20000000

08000ee0 <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 8000ee0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 8000ee4:	4d24      	ldr	r5, [pc, #144]	; (8000f78 <mpu_read_fifo_stream+0x98>)
{
 8000ee6:	4606      	mov	r6, r0
    if (!st.chip_cfg.dmp_on)
 8000ee8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
 8000eec:	4689      	mov	r9, r1
 8000eee:	4617      	mov	r7, r2
 8000ef0:	46a8      	mov	r8, r5
    if (!st.chip_cfg.dmp_on)
 8000ef2:	b923      	cbnz	r3, 8000efe <mpu_read_fifo_stream+0x1e>
    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
        return -1;
    fifo_count = (tmp[0] << 8) | tmp[1];
    if (fifo_count < length) {
        more[0] = 0;
        return -1;
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
        return -1;
    more[0] = fifo_count / length - 1;
    return 0;
}
 8000ef8:	b003      	add	sp, #12
 8000efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!st.chip_cfg.sensors)
 8000efe:	7aab      	ldrb	r3, [r5, #10]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0f7      	beq.n	8000ef4 <mpu_read_fifo_stream+0x14>
    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8000f04:	e9d5 1000 	ldrd	r1, r0, [r5]
 8000f08:	ab01      	add	r3, sp, #4
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	7b09      	ldrb	r1, [r1, #12]
 8000f0e:	7800      	ldrb	r0, [r0, #0]
 8000f10:	f002 fb7a 	bl	8003608 <i2c_read>
 8000f14:	2800      	cmp	r0, #0
 8000f16:	d1ed      	bne.n	8000ef4 <mpu_read_fifo_stream+0x14>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8000f18:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000f1c:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8000f20:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    if (fifo_count < length) {
 8000f24:	42b4      	cmp	r4, r6
 8000f26:	d201      	bcs.n	8000f2c <mpu_read_fifo_stream+0x4c>
        more[0] = 0;
 8000f28:	7038      	strb	r0, [r7, #0]
 8000f2a:	e7e3      	b.n	8000ef4 <mpu_read_fifo_stream+0x14>
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8000f2c:	6868      	ldr	r0, [r5, #4]
 8000f2e:	8843      	ldrh	r3, [r0, #2]
 8000f30:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
 8000f34:	d911      	bls.n	8000f5a <mpu_read_fifo_stream+0x7a>
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8000f36:	6829      	ldr	r1, [r5, #0]
 8000f38:	ab01      	add	r3, sp, #4
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	7cc9      	ldrb	r1, [r1, #19]
 8000f3e:	7800      	ldrb	r0, [r0, #0]
 8000f40:	f002 fb62 	bl	8003608 <i2c_read>
 8000f44:	2800      	cmp	r0, #0
 8000f46:	d1d5      	bne.n	8000ef4 <mpu_read_fifo_stream+0x14>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8000f48:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000f4c:	06db      	lsls	r3, r3, #27
 8000f4e:	d504      	bpl.n	8000f5a <mpu_read_fifo_stream+0x7a>
            mpu_reset_fifo();
 8000f50:	f7ff fe34 	bl	8000bbc <mpu_reset_fifo>
            return -2;
 8000f54:	f06f 0001 	mvn.w	r0, #1
 8000f58:	e7ce      	b.n	8000ef8 <mpu_read_fifo_stream+0x18>
    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 8000f5a:	e9d8 1000 	ldrd	r1, r0, [r8]
 8000f5e:	464b      	mov	r3, r9
 8000f60:	b2f2      	uxtb	r2, r6
 8000f62:	7b49      	ldrb	r1, [r1, #13]
 8000f64:	7800      	ldrb	r0, [r0, #0]
 8000f66:	f002 fb4f 	bl	8003608 <i2c_read>
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	d1c2      	bne.n	8000ef4 <mpu_read_fifo_stream+0x14>
    more[0] = fifo_count / length - 1;
 8000f6e:	fbb4 f4f6 	udiv	r4, r4, r6
 8000f72:	3c01      	subs	r4, #1
 8000f74:	703c      	strb	r4, [r7, #0]
    return 0;
 8000f76:	e7bf      	b.n	8000ef8 <mpu_read_fifo_stream+0x18>
 8000f78:	20000000 	.word	0x20000000

08000f7c <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8000f7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 8000f7e:	4c36      	ldr	r4, [pc, #216]	; (8001058 <mpu_set_bypass+0xdc>)
{
 8000f80:	4605      	mov	r5, r0
    if (st.chip_cfg.bypass_mode == bypass_on)
 8000f82:	7ca3      	ldrb	r3, [r4, #18]
 8000f84:	4283      	cmp	r3, r0
 8000f86:	d041      	beq.n	800100c <mpu_set_bypass+0x90>
 8000f88:	6863      	ldr	r3, [r4, #4]
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	7818      	ldrb	r0, [r3, #0]
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	7919      	ldrb	r1, [r3, #4]
 8000f92:	f10d 0307 	add.w	r3, sp, #7
    if (bypass_on) {
 8000f96:	2d00      	cmp	r5, #0
 8000f98:	d03a      	beq.n	8001010 <mpu_set_bypass+0x94>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8000f9a:	f002 fb35 	bl	8003608 <i2c_read>
 8000f9e:	b118      	cbz	r0, 8000fa8 <mpu_set_bypass+0x2c>
            return -1;
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
 8000fa4:	b003      	add	sp, #12
 8000fa6:	bd30      	pop	{r4, r5, pc}
        tmp &= ~BIT_AUX_IF_EN;
 8000fa8:	f89d 3007 	ldrb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8000fac:	e9d4 1000 	ldrd	r1, r0, [r4]
        tmp &= ~BIT_AUX_IF_EN;
 8000fb0:	f023 0320 	bic.w	r3, r3, #32
 8000fb4:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f10d 0307 	add.w	r3, sp, #7
 8000fbe:	7909      	ldrb	r1, [r1, #4]
 8000fc0:	7800      	ldrb	r0, [r0, #0]
 8000fc2:	f002 fb13 	bl	80035ec <i2c_write>
 8000fc6:	2800      	cmp	r0, #0
 8000fc8:	d1ea      	bne.n	8000fa0 <mpu_set_bypass+0x24>
        delay_ms(3);
 8000fca:	2003      	movs	r0, #3
 8000fcc:	f002 fb2a 	bl	8003624 <delay_ms>
        tmp = BIT_BYPASS_EN;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.active_low_int)
 8000fd6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8000fda:	b113      	cbz	r3, 8000fe2 <mpu_set_bypass+0x66>
            tmp |= BIT_ACTL;
 8000fdc:	2382      	movs	r3, #130	; 0x82
            tmp = 0;
 8000fde:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.latched_int)
 8000fe2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8000fe6:	b12b      	cbz	r3, 8000ff4 <mpu_set_bypass+0x78>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8000fe8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000fec:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000ff0:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8000ff4:	e9d4 1000 	ldrd	r1, r0, [r4]
 8000ff8:	f10d 0307 	add.w	r3, sp, #7
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	7dc9      	ldrb	r1, [r1, #23]
 8001000:	7800      	ldrb	r0, [r0, #0]
 8001002:	f002 faf3 	bl	80035ec <i2c_write>
 8001006:	2800      	cmp	r0, #0
 8001008:	d1ca      	bne.n	8000fa0 <mpu_set_bypass+0x24>
    st.chip_cfg.bypass_mode = bypass_on;
 800100a:	74a5      	strb	r5, [r4, #18]
        return 0;
 800100c:	2000      	movs	r0, #0
 800100e:	e7c9      	b.n	8000fa4 <mpu_set_bypass+0x28>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001010:	f002 fafa 	bl	8003608 <i2c_read>
 8001014:	2800      	cmp	r0, #0
 8001016:	d1c3      	bne.n	8000fa0 <mpu_set_bypass+0x24>
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001018:	e9d4 1000 	ldrd	r1, r0, [r4]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800101c:	7aa2      	ldrb	r2, [r4, #10]
 800101e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001022:	07d2      	lsls	r2, r2, #31
            tmp |= BIT_AUX_IF_EN;
 8001024:	bf4c      	ite	mi
 8001026:	f043 0320 	orrmi.w	r3, r3, #32
            tmp &= ~BIT_AUX_IF_EN;
 800102a:	f023 0320 	bicpl.w	r3, r3, #32
 800102e:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001032:	2201      	movs	r2, #1
 8001034:	f10d 0307 	add.w	r3, sp, #7
 8001038:	7909      	ldrb	r1, [r1, #4]
 800103a:	7800      	ldrb	r0, [r0, #0]
 800103c:	f002 fad6 	bl	80035ec <i2c_write>
 8001040:	2800      	cmp	r0, #0
 8001042:	d1ad      	bne.n	8000fa0 <mpu_set_bypass+0x24>
        delay_ms(3);
 8001044:	2003      	movs	r0, #3
 8001046:	f002 faed 	bl	8003624 <delay_ms>
        if (st.chip_cfg.active_low_int)
 800104a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0c5      	beq.n	8000fde <mpu_set_bypass+0x62>
            tmp = BIT_ACTL;
 8001052:	2380      	movs	r3, #128	; 0x80
 8001054:	e7c3      	b.n	8000fde <mpu_set_bypass+0x62>
 8001056:	bf00      	nop
 8001058:	20000000 	.word	0x20000000

0800105c <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 800105c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 800105e:	4c18      	ldr	r4, [pc, #96]	; (80010c0 <mpu_set_int_latched+0x64>)
{
 8001060:	4605      	mov	r5, r0
    if (st.chip_cfg.latched_int == enable)
 8001062:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8001066:	4283      	cmp	r3, r0
 8001068:	d028      	beq.n	80010bc <mpu_set_int_latched+0x60>
        return 0;

    if (enable)
 800106a:	b308      	cbz	r0, 80010b0 <mpu_set_int_latched+0x54>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800106c:	2330      	movs	r3, #48	; 0x30
 800106e:	f88d 3007 	strb.w	r3, [sp, #7]
    else
        tmp = 0;
    if (st.chip_cfg.bypass_mode)
 8001072:	7ca3      	ldrb	r3, [r4, #18]
 8001074:	b12b      	cbz	r3, 8001082 <mpu_set_int_latched+0x26>
        tmp |= BIT_BYPASS_EN;
 8001076:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800107a:	f043 0302 	orr.w	r3, r3, #2
 800107e:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.active_low_int)
 8001082:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001086:	b12b      	cbz	r3, 8001094 <mpu_set_int_latched+0x38>
        tmp |= BIT_ACTL;
 8001088:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800108c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001090:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001094:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001098:	f10d 0307 	add.w	r3, sp, #7
 800109c:	2201      	movs	r2, #1
 800109e:	7dc9      	ldrb	r1, [r1, #23]
 80010a0:	7800      	ldrb	r0, [r0, #0]
 80010a2:	f002 faa3 	bl	80035ec <i2c_write>
 80010a6:	b930      	cbnz	r0, 80010b6 <mpu_set_int_latched+0x5a>
        return -1;
    st.chip_cfg.latched_int = enable;
 80010a8:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
    return 0;
}
 80010ac:	b003      	add	sp, #12
 80010ae:	bd30      	pop	{r4, r5, pc}
        tmp = 0;
 80010b0:	f88d 0007 	strb.w	r0, [sp, #7]
 80010b4:	e7dd      	b.n	8001072 <mpu_set_int_latched+0x16>
        return -1;
 80010b6:	f04f 30ff 	mov.w	r0, #4294967295
 80010ba:	e7f7      	b.n	80010ac <mpu_set_int_latched+0x50>
        return 0;
 80010bc:	2000      	movs	r0, #0
 80010be:	e7f5      	b.n	80010ac <mpu_set_int_latched+0x50>
 80010c0:	20000000 	.word	0x20000000

080010c4 <mpu_lp_accel_mode>:
    if (rate > 40)
 80010c4:	2828      	cmp	r0, #40	; 0x28
{
 80010c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80010c8:	4605      	mov	r5, r0
    if (rate > 40)
 80010ca:	d902      	bls.n	80010d2 <mpu_lp_accel_mode+0xe>
        return -1;
 80010cc:	f04f 35ff 	mov.w	r5, #4294967295
 80010d0:	e013      	b.n	80010fa <mpu_lp_accel_mode+0x36>
 80010d2:	4c28      	ldr	r4, [pc, #160]	; (8001174 <mpu_lp_accel_mode+0xb0>)
    if (!rate) {
 80010d4:	b9a0      	cbnz	r0, 8001100 <mpu_lp_accel_mode+0x3c>
        mpu_set_int_latched(0);
 80010d6:	f7ff ffc1 	bl	800105c <mpu_set_int_latched>
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80010da:	e9d4 1000 	ldrd	r1, r0, [r4]
        tmp[0] = 0;
 80010de:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80010e2:	f8ad 3004 	strh.w	r3, [sp, #4]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80010e6:	2202      	movs	r2, #2
 80010e8:	ab01      	add	r3, sp, #4
 80010ea:	7d49      	ldrb	r1, [r1, #21]
 80010ec:	7800      	ldrb	r0, [r0, #0]
 80010ee:	f002 fa7d 	bl	80035ec <i2c_write>
 80010f2:	4605      	mov	r5, r0
 80010f4:	2800      	cmp	r0, #0
 80010f6:	d1e9      	bne.n	80010cc <mpu_lp_accel_mode+0x8>
        st.chip_cfg.lp_accel_mode = 0;
 80010f8:	7520      	strb	r0, [r4, #20]
}
 80010fa:	4628      	mov	r0, r5
 80010fc:	b003      	add	sp, #12
 80010fe:	bd30      	pop	{r4, r5, pc}
    mpu_set_int_latched(1);
 8001100:	2001      	movs	r0, #1
 8001102:	f7ff ffab 	bl	800105c <mpu_set_int_latched>
    if (rate == 1)
 8001106:	2d01      	cmp	r5, #1
 8001108:	d122      	bne.n	8001150 <mpu_lp_accel_mode+0x8c>
        tmp[0] = INV_LPA_1_25HZ;
 800110a:	2302      	movs	r3, #2
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 800110c:	e9d4 1000 	ldrd	r1, r0, [r4]
        tmp[0] = INV_LPA_40HZ;
 8001110:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 8001114:	2201      	movs	r2, #1
 8001116:	ab01      	add	r3, sp, #4
 8001118:	7a49      	ldrb	r1, [r1, #9]
 800111a:	7800      	ldrb	r0, [r0, #0]
 800111c:	f002 fa66 	bl	80035ec <i2c_write>
 8001120:	2800      	cmp	r0, #0
 8001122:	d1d3      	bne.n	80010cc <mpu_lp_accel_mode+0x8>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 8001124:	e9d4 1000 	ldrd	r1, r0, [r4]
    tmp[0] = BIT_LPA_CYCLE;
 8001128:	2320      	movs	r3, #32
 800112a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 800112e:	2201      	movs	r2, #1
 8001130:	ab01      	add	r3, sp, #4
 8001132:	7d49      	ldrb	r1, [r1, #21]
 8001134:	7800      	ldrb	r0, [r0, #0]
 8001136:	f002 fa59 	bl	80035ec <i2c_write>
 800113a:	4605      	mov	r5, r0
 800113c:	2800      	cmp	r0, #0
 800113e:	d1c5      	bne.n	80010cc <mpu_lp_accel_mode+0x8>
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8001140:	2308      	movs	r3, #8
 8001142:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.lp_accel_mode = 1;
 8001144:	2301      	movs	r3, #1
    st.chip_cfg.clk_src = 0;
 8001146:	7320      	strb	r0, [r4, #12]
    st.chip_cfg.lp_accel_mode = 1;
 8001148:	7523      	strb	r3, [r4, #20]
    mpu_configure_fifo(0);
 800114a:	f7ff fea1 	bl	8000e90 <mpu_configure_fifo>
 800114e:	e7d4      	b.n	80010fa <mpu_lp_accel_mode+0x36>
    else if (rate == 2)
 8001150:	2d02      	cmp	r5, #2
 8001152:	d101      	bne.n	8001158 <mpu_lp_accel_mode+0x94>
        tmp[0] = INV_LPA_2_5HZ;
 8001154:	2303      	movs	r3, #3
 8001156:	e7d9      	b.n	800110c <mpu_lp_accel_mode+0x48>
    else if (rate <= 5)
 8001158:	2d05      	cmp	r5, #5
 800115a:	d801      	bhi.n	8001160 <mpu_lp_accel_mode+0x9c>
        tmp[0] = INV_LPA_5HZ;
 800115c:	2304      	movs	r3, #4
 800115e:	e7d5      	b.n	800110c <mpu_lp_accel_mode+0x48>
    else if (rate <= 10)
 8001160:	2d0a      	cmp	r5, #10
 8001162:	d801      	bhi.n	8001168 <mpu_lp_accel_mode+0xa4>
        tmp[0] = INV_LPA_10HZ;
 8001164:	2305      	movs	r3, #5
 8001166:	e7d1      	b.n	800110c <mpu_lp_accel_mode+0x48>
    else if (rate <= 20)
 8001168:	2d14      	cmp	r5, #20
        tmp[0] = INV_LPA_20HZ;
 800116a:	bf94      	ite	ls
 800116c:	2306      	movls	r3, #6
        tmp[0] = INV_LPA_40HZ;
 800116e:	2307      	movhi	r3, #7
 8001170:	e7cc      	b.n	800110c <mpu_lp_accel_mode+0x48>
 8001172:	bf00      	nop
 8001174:	20000000 	.word	0x20000000

08001178 <mpu_set_sample_rate>:
{
 8001178:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!(st.chip_cfg.sensors))
 800117a:	4b22      	ldr	r3, [pc, #136]	; (8001204 <mpu_set_sample_rate+0x8c>)
{
 800117c:	4604      	mov	r4, r0
    if (!(st.chip_cfg.sensors))
 800117e:	7a9a      	ldrb	r2, [r3, #10]
 8001180:	461e      	mov	r6, r3
 8001182:	b922      	cbnz	r2, 800118e <mpu_set_sample_rate+0x16>
        return -1;
 8001184:	f04f 34ff 	mov.w	r4, #4294967295
}
 8001188:	4620      	mov	r0, r4
 800118a:	b002      	add	sp, #8
 800118c:	bd70      	pop	{r4, r5, r6, pc}
    if (st.chip_cfg.dmp_on)
 800118e:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
 8001192:	2d00      	cmp	r5, #0
 8001194:	d1f6      	bne.n	8001184 <mpu_set_sample_rate+0xc>
        if (st.chip_cfg.lp_accel_mode) {
 8001196:	7d1b      	ldrb	r3, [r3, #20]
 8001198:	b14b      	cbz	r3, 80011ae <mpu_set_sample_rate+0x36>
            if (rate && (rate <= 40)) {
 800119a:	1e43      	subs	r3, r0, #1
 800119c:	2b27      	cmp	r3, #39	; 0x27
 800119e:	d803      	bhi.n	80011a8 <mpu_set_sample_rate+0x30>
                mpu_lp_accel_mode(rate);
 80011a0:	f7ff ff90 	bl	80010c4 <mpu_lp_accel_mode>
                return 0;
 80011a4:	462c      	mov	r4, r5
 80011a6:	e7ef      	b.n	8001188 <mpu_set_sample_rate+0x10>
            mpu_lp_accel_mode(0);
 80011a8:	4628      	mov	r0, r5
 80011aa:	f7ff ff8b 	bl	80010c4 <mpu_lp_accel_mode>
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 80011ae:	e9d6 1000 	ldrd	r1, r0, [r6]
 80011b2:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80011b6:	bf28      	it	cs
 80011b8:	f44f 747a 	movcs.w	r4, #1000	; 0x3e8
        data = 1000 / rate - 1;
 80011bc:	2c04      	cmp	r4, #4
 80011be:	bf38      	it	cc
 80011c0:	2404      	movcc	r4, #4
 80011c2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80011c6:	fb95 f4f4 	sdiv	r4, r5, r4
 80011ca:	ab02      	add	r3, sp, #8
 80011cc:	3c01      	subs	r4, #1
 80011ce:	f803 4d01 	strb.w	r4, [r3, #-1]!
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 80011d2:	2201      	movs	r2, #1
 80011d4:	7849      	ldrb	r1, [r1, #1]
 80011d6:	7800      	ldrb	r0, [r0, #0]
 80011d8:	f002 fa08 	bl	80035ec <i2c_write>
 80011dc:	4604      	mov	r4, r0
 80011de:	2800      	cmp	r0, #0
 80011e0:	d1d0      	bne.n	8001184 <mpu_set_sample_rate+0xc>
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80011e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 80011e6:	8d30      	ldrh	r0, [r6, #40]	; 0x28
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80011e8:	3301      	adds	r3, #1
 80011ea:	fb95 f5f3 	sdiv	r5, r5, r3
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 80011ee:	2864      	cmp	r0, #100	; 0x64
 80011f0:	bf28      	it	cs
 80011f2:	2064      	movcs	r0, #100	; 0x64
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80011f4:	81f5      	strh	r5, [r6, #14]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 80011f6:	f7ff fe25 	bl	8000e44 <mpu_set_compass_sample_rate>
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 80011fa:	89f0      	ldrh	r0, [r6, #14]
 80011fc:	0840      	lsrs	r0, r0, #1
 80011fe:	f7ff fdeb 	bl	8000dd8 <mpu_set_lpf>
        return 0;
 8001202:	e7c1      	b.n	8001188 <mpu_set_sample_rate+0x10>
 8001204:	20000000 	.word	0x20000000

08001208 <mpu_set_sensors>:
    if (sensors & INV_XYZ_GYRO)
 8001208:	f010 0370 	ands.w	r3, r0, #112	; 0x70
{
 800120c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800120e:	4605      	mov	r5, r0
    if (sensors & INV_XYZ_GYRO)
 8001210:	d014      	beq.n	800123c <mpu_set_sensors+0x34>
        data = INV_CLK_PLL;
 8001212:	2301      	movs	r3, #1
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8001214:	4c49      	ldr	r4, [pc, #292]	; (800133c <mpu_set_sensors+0x134>)
        data = BIT_SLEEP;
 8001216:	f88d 3006 	strb.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 800121a:	e9d4 1000 	ldrd	r1, r0, [r4]
 800121e:	f10d 0306 	add.w	r3, sp, #6
 8001222:	2201      	movs	r2, #1
 8001224:	7d49      	ldrb	r1, [r1, #21]
 8001226:	7800      	ldrb	r0, [r0, #0]
 8001228:	f002 f9e0 	bl	80035ec <i2c_write>
 800122c:	b150      	cbz	r0, 8001244 <mpu_set_sensors+0x3c>
        st.chip_cfg.sensors = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	72a3      	strb	r3, [r4, #10]
        return -1;
 8001232:	f04f 36ff 	mov.w	r6, #4294967295
}
 8001236:	4630      	mov	r0, r6
 8001238:	b002      	add	sp, #8
 800123a:	bd70      	pop	{r4, r5, r6, pc}
    else if (sensors)
 800123c:	2800      	cmp	r0, #0
 800123e:	d1e9      	bne.n	8001214 <mpu_set_sensors+0xc>
        data = BIT_SLEEP;
 8001240:	2340      	movs	r3, #64	; 0x40
 8001242:	e7e7      	b.n	8001214 <mpu_set_sensors+0xc>
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8001244:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8001248:	2201      	movs	r2, #1
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 800124a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800124e:	7323      	strb	r3, [r4, #12]
    if (!(sensors & INV_X_GYRO))
 8001250:	066b      	lsls	r3, r5, #25
        data |= BIT_STBY_XG;
 8001252:	bf56      	itet	pl
 8001254:	2304      	movpl	r3, #4
    data = 0;
 8001256:	f88d 0006 	strbmi.w	r0, [sp, #6]
        data |= BIT_STBY_XG;
 800125a:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (!(sensors & INV_Y_GYRO))
 800125e:	06ae      	lsls	r6, r5, #26
        data |= BIT_STBY_YG;
 8001260:	bf5e      	ittt	pl
 8001262:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
 8001266:	f043 0302 	orrpl.w	r3, r3, #2
 800126a:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (!(sensors & INV_Z_GYRO))
 800126e:	06e8      	lsls	r0, r5, #27
        data |= BIT_STBY_ZG;
 8001270:	bf5e      	ittt	pl
 8001272:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
 8001276:	f043 0301 	orrpl.w	r3, r3, #1
 800127a:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (!(sensors & INV_XYZ_ACCEL))
 800127e:	0729      	lsls	r1, r5, #28
        data |= BIT_STBY_XYZA;
 8001280:	bf58      	it	pl
 8001282:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8001286:	e9d4 1000 	ldrd	r1, r0, [r4]
        data |= BIT_STBY_XYZA;
 800128a:	bf5c      	itt	pl
 800128c:	f043 0338 	orrpl.w	r3, r3, #56	; 0x38
 8001290:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8001294:	7d89      	ldrb	r1, [r1, #22]
 8001296:	f10d 0306 	add.w	r3, sp, #6
 800129a:	7800      	ldrb	r0, [r0, #0]
 800129c:	f002 f9a6 	bl	80035ec <i2c_write>
 80012a0:	2800      	cmp	r0, #0
 80012a2:	d1c4      	bne.n	800122e <mpu_set_sensors+0x26>
    if (sensors && (sensors != INV_XYZ_ACCEL))
 80012a4:	f015 0ff7 	tst.w	r5, #247	; 0xf7
 80012a8:	d001      	beq.n	80012ae <mpu_set_sensors+0xa6>
        mpu_set_int_latched(0);
 80012aa:	f7ff fed7 	bl	800105c <mpu_set_int_latched>
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 80012ae:	e9d4 1000 	ldrd	r1, r0, [r4]
 80012b2:	f10d 0307 	add.w	r3, sp, #7
 80012b6:	2201      	movs	r2, #1
 80012b8:	7909      	ldrb	r1, [r1, #4]
 80012ba:	7800      	ldrb	r0, [r0, #0]
 80012bc:	f002 f9a4 	bl	8003608 <i2c_read>
 80012c0:	2800      	cmp	r0, #0
 80012c2:	d1b6      	bne.n	8001232 <mpu_set_sensors+0x2a>
    if (sensors & INV_XYZ_COMPASS) {
 80012c4:	07ea      	lsls	r2, r5, #31
        data = AKM_SINGLE_MEASUREMENT;
 80012c6:	bf4c      	ite	mi
 80012c8:	2211      	movmi	r2, #17
        data = AKM_POWER_DOWN;
 80012ca:	2210      	movpl	r2, #16
 80012cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
        data = AKM_SINGLE_MEASUREMENT;
 80012d0:	bf47      	ittee	mi
 80012d2:	f88d 2006 	strbmi.w	r2, [sp, #6]
        user_ctrl |= BIT_AUX_IF_EN;
 80012d6:	f043 0320 	orrmi.w	r3, r3, #32
        user_ctrl &= ~BIT_AUX_IF_EN;
 80012da:	f023 0320 	bicpl.w	r3, r3, #32
        data = AKM_POWER_DOWN;
 80012de:	f88d 2006 	strbpl.w	r2, [sp, #6]
    if (st.chip_cfg.dmp_on)
 80012e2:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
        user_ctrl &= ~BIT_AUX_IF_EN;
 80012e6:	f88d 3007 	strb.w	r3, [sp, #7]
 80012ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (st.chip_cfg.dmp_on)
 80012ee:	b30a      	cbz	r2, 8001334 <mpu_set_sensors+0x12c>
        user_ctrl |= BIT_DMP_EN;
 80012f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
        user_ctrl &= ~BIT_DMP_EN;
 80012f4:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 80012f8:	e9d4 1000 	ldrd	r1, r0, [r4]
 80012fc:	f10d 0306 	add.w	r3, sp, #6
 8001300:	2201      	movs	r2, #1
 8001302:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 8001306:	7800      	ldrb	r0, [r0, #0]
 8001308:	f002 f970 	bl	80035ec <i2c_write>
 800130c:	2800      	cmp	r0, #0
 800130e:	d190      	bne.n	8001232 <mpu_set_sensors+0x2a>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8001310:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001314:	f10d 0307 	add.w	r3, sp, #7
 8001318:	2201      	movs	r2, #1
 800131a:	7909      	ldrb	r1, [r1, #4]
 800131c:	7800      	ldrb	r0, [r0, #0]
 800131e:	f002 f965 	bl	80035ec <i2c_write>
 8001322:	4606      	mov	r6, r0
 8001324:	2800      	cmp	r0, #0
 8001326:	d184      	bne.n	8001232 <mpu_set_sensors+0x2a>
    st.chip_cfg.lp_accel_mode = 0;
 8001328:	7520      	strb	r0, [r4, #20]
    delay_ms(50);
 800132a:	2032      	movs	r0, #50	; 0x32
    st.chip_cfg.sensors = sensors;
 800132c:	72a5      	strb	r5, [r4, #10]
    delay_ms(50);
 800132e:	f002 f979 	bl	8003624 <delay_ms>
    return 0;
 8001332:	e780      	b.n	8001236 <mpu_set_sensors+0x2e>
        user_ctrl &= ~BIT_DMP_EN;
 8001334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001338:	e7dc      	b.n	80012f4 <mpu_set_sensors+0xec>
 800133a:	bf00      	nop
 800133c:	20000000 	.word	0x20000000

08001340 <mpu_init>:
{
 8001340:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    data[0] = BIT_RESET;
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	ad04      	add	r5, sp, #16
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001346:	4ca1      	ldr	r4, [pc, #644]	; (80015cc <mpu_init+0x28c>)
    data[0] = BIT_RESET;
 8001348:	f805 3d08 	strb.w	r3, [r5, #-8]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800134c:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001350:	462b      	mov	r3, r5
 8001352:	2201      	movs	r2, #1
 8001354:	7d49      	ldrb	r1, [r1, #21]
 8001356:	7800      	ldrb	r0, [r0, #0]
 8001358:	f002 f948 	bl	80035ec <i2c_write>
 800135c:	4606      	mov	r6, r0
 800135e:	b120      	cbz	r0, 800136a <mpu_init+0x2a>
        return -1;
 8001360:	f04f 34ff 	mov.w	r4, #4294967295
}
 8001364:	4620      	mov	r0, r4
 8001366:	b004      	add	sp, #16
 8001368:	bd70      	pop	{r4, r5, r6, pc}
    delay_ms(100);
 800136a:	2064      	movs	r0, #100	; 0x64
 800136c:	f002 f95a 	bl	8003624 <delay_ms>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001370:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = 0x00;
 8001374:	f88d 6008 	strb.w	r6, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001378:	462b      	mov	r3, r5
 800137a:	2201      	movs	r2, #1
 800137c:	7d49      	ldrb	r1, [r1, #21]
 800137e:	7800      	ldrb	r0, [r0, #0]
 8001380:	f002 f934 	bl	80035ec <i2c_write>
 8001384:	2800      	cmp	r0, #0
 8001386:	d1eb      	bne.n	8001360 <mpu_init+0x20>
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 8001388:	2348      	movs	r3, #72	; 0x48
   st.chip_cfg.accel_half = 0;
 800138a:	74e0      	strb	r0, [r4, #19]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 800138c:	f88d 3008 	strb.w	r3, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 8001390:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001394:	462b      	mov	r3, r5
 8001396:	2201      	movs	r2, #1
 8001398:	7a09      	ldrb	r1, [r1, #8]
 800139a:	7800      	ldrb	r0, [r0, #0]
 800139c:	f002 f926 	bl	80035ec <i2c_write>
 80013a0:	2800      	cmp	r0, #0
 80013a2:	d1dd      	bne.n	8001360 <mpu_init+0x20>
    st.chip_cfg.sample_rate = 0xFFFF;
 80013a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    st.chip_cfg.lpf = 0xFF;
 80013a8:	2501      	movs	r5, #1
    st.chip_cfg.sample_rate = 0xFFFF;
 80013aa:	81e3      	strh	r3, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 80013ac:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 80013ae:	8523      	strh	r3, [r4, #40]	; 0x28
    st.chip_cfg.gyro_fsr = 0xFF;
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
    st.chip_cfg.bypass_mode = 0xFF;
 80013b4:	22ff      	movs	r2, #255	; 0xff
    st.chip_cfg.lp_accel_mode = 0;
 80013b6:	82a0      	strh	r0, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 80013b8:	f8c4 0016 	str.w	r0, [r4, #22]
 80013bc:	f8c4 001a 	str.w	r0, [r4, #26]
 80013c0:	f8c4 001e 	str.w	r0, [r4, #30]
    st.chip_cfg.dmp_on = 0;
 80013c4:	6260      	str	r0, [r4, #36]	; 0x24
    st.chip_cfg.gyro_fsr = 0xFF;
 80013c6:	60a3      	str	r3, [r4, #8]
    st.chip_cfg.lpf = 0xFF;
 80013c8:	7325      	strb	r5, [r4, #12]
    st.chip_cfg.active_low_int = 1;
 80013ca:	8465      	strh	r5, [r4, #34]	; 0x22
    if (mpu_set_gyro_fsr(2000))
 80013cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    st.chip_cfg.bypass_mode = 0xFF;
 80013d0:	74a2      	strb	r2, [r4, #18]
    if (mpu_set_gyro_fsr(2000))
 80013d2:	f7ff fc95 	bl	8000d00 <mpu_set_gyro_fsr>
 80013d6:	2800      	cmp	r0, #0
 80013d8:	d1c2      	bne.n	8001360 <mpu_init+0x20>
    if (mpu_set_accel_fsr(2))
 80013da:	2002      	movs	r0, #2
 80013dc:	f7ff fcc8 	bl	8000d70 <mpu_set_accel_fsr>
 80013e0:	2800      	cmp	r0, #0
 80013e2:	d1bd      	bne.n	8001360 <mpu_init+0x20>
    if (mpu_set_lpf(42))
 80013e4:	202a      	movs	r0, #42	; 0x2a
 80013e6:	f7ff fcf7 	bl	8000dd8 <mpu_set_lpf>
 80013ea:	2800      	cmp	r0, #0
 80013ec:	d1b8      	bne.n	8001360 <mpu_init+0x20>
    if (mpu_set_sample_rate(1000))
 80013ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013f2:	f7ff fec1 	bl	8001178 <mpu_set_sample_rate>
 80013f6:	2800      	cmp	r0, #0
 80013f8:	d1b2      	bne.n	8001360 <mpu_init+0x20>
    if (mpu_configure_fifo(0))
 80013fa:	f7ff fd49 	bl	8000e90 <mpu_configure_fifo>
 80013fe:	2800      	cmp	r0, #0
 8001400:	d1ae      	bne.n	8001360 <mpu_init+0x20>
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
 8001402:	4628      	mov	r0, r5
 8001404:	f7ff fdba 	bl	8000f7c <mpu_set_bypass>

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8001408:	250c      	movs	r5, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 800140a:	ab01      	add	r3, sp, #4
 800140c:	2201      	movs	r2, #1
 800140e:	2100      	movs	r1, #0
 8001410:	4628      	mov	r0, r5
 8001412:	f002 f8f9 	bl	8003608 <i2c_read>
        if (!result && (data[0] == AKM_WHOAMI))
 8001416:	b918      	cbnz	r0, 8001420 <mpu_init+0xe0>
 8001418:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800141c:	2b48      	cmp	r3, #72	; 0x48
 800141e:	d00c      	beq.n	800143a <mpu_init+0xfa>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8001420:	3501      	adds	r5, #1
 8001422:	b2ed      	uxtb	r5, r5
 8001424:	2d10      	cmp	r5, #16
 8001426:	d1f0      	bne.n	800140a <mpu_init+0xca>
    if (mpu_set_compass_sample_rate(10))
 8001428:	200a      	movs	r0, #10
 800142a:	f7ff fd0b 	bl	8000e44 <mpu_set_compass_sample_rate>
 800142e:	4604      	mov	r4, r0
 8001430:	2800      	cmp	r0, #0
 8001432:	d195      	bne.n	8001360 <mpu_init+0x20>
    mpu_set_sensors(0);
 8001434:	f7ff fee8 	bl	8001208 <mpu_set_sensors>
    return 0;
 8001438:	e794      	b.n	8001364 <mpu_init+0x24>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;

    data[0] = AKM_POWER_DOWN;
 800143a:	2610      	movs	r6, #16
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800143c:	ab01      	add	r3, sp, #4
 800143e:	2201      	movs	r2, #1
 8001440:	210a      	movs	r1, #10
 8001442:	4628      	mov	r0, r5
    st.chip_cfg.compass_addr = akm_addr;
 8001444:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
    data[0] = AKM_POWER_DOWN;
 8001448:	f88d 6004 	strb.w	r6, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800144c:	f002 f8ce 	bl	80035ec <i2c_write>
 8001450:	2800      	cmp	r0, #0
 8001452:	d1e9      	bne.n	8001428 <mpu_init+0xe8>
        return -1;
    delay_ms(1);
 8001454:	2001      	movs	r0, #1
 8001456:	f002 f8e5 	bl	8003624 <delay_ms>

    data[0] = AKM_FUSE_ROM_ACCESS;
 800145a:	231f      	movs	r3, #31
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800145c:	2201      	movs	r2, #1
    data[0] = AKM_FUSE_ROM_ACCESS;
 800145e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001462:	210a      	movs	r1, #10
 8001464:	ab01      	add	r3, sp, #4
 8001466:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 800146a:	f002 f8bf 	bl	80035ec <i2c_write>
 800146e:	2800      	cmp	r0, #0
 8001470:	d1da      	bne.n	8001428 <mpu_init+0xe8>
        return -1;
    delay_ms(1);
 8001472:	2001      	movs	r0, #1
 8001474:	f002 f8d6 	bl	8003624 <delay_ms>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 8001478:	ab01      	add	r3, sp, #4
 800147a:	2203      	movs	r2, #3
 800147c:	4631      	mov	r1, r6
 800147e:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8001482:	f002 f8c1 	bl	8003608 <i2c_read>
 8001486:	2800      	cmp	r0, #0
 8001488:	d1ce      	bne.n	8001428 <mpu_init+0xe8>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 800148a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800148e:	2201      	movs	r2, #1
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8001490:	3380      	adds	r3, #128	; 0x80
 8001492:	85a3      	strh	r3, [r4, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8001494:	f89d 3005 	ldrb.w	r3, [sp, #5]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001498:	210a      	movs	r1, #10
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 800149a:	3380      	adds	r3, #128	; 0x80
 800149c:	85e3      	strh	r3, [r4, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 800149e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80014a2:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 80014a6:	3380      	adds	r3, #128	; 0x80
 80014a8:	8623      	strh	r3, [r4, #48]	; 0x30
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80014aa:	ab01      	add	r3, sp, #4
    data[0] = AKM_POWER_DOWN;
 80014ac:	f88d 6004 	strb.w	r6, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80014b0:	f002 f89c 	bl	80035ec <i2c_write>
 80014b4:	4605      	mov	r5, r0
 80014b6:	2800      	cmp	r0, #0
 80014b8:	d1b6      	bne.n	8001428 <mpu_init+0xe8>
        return -1;
    delay_ms(1);
 80014ba:	2001      	movs	r0, #1
 80014bc:	f002 f8b2 	bl	8003624 <delay_ms>

    mpu_set_bypass(0);
 80014c0:	4628      	mov	r0, r5
 80014c2:	f7ff fd5b 	bl	8000f7c <mpu_set_bypass>

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 80014c6:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = 0x40;
 80014ca:	2340      	movs	r3, #64	; 0x40
 80014cc:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 80014d0:	2201      	movs	r2, #1
 80014d2:	ab01      	add	r3, sp, #4
 80014d4:	7e89      	ldrb	r1, [r1, #26]
 80014d6:	7800      	ldrb	r0, [r0, #0]
 80014d8:	f002 f888 	bl	80035ec <i2c_write>
 80014dc:	2800      	cmp	r0, #0
 80014de:	d1a3      	bne.n	8001428 <mpu_init+0xe8>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 80014e0:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 80014e4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 80014e8:	2201      	movs	r2, #1
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 80014ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014ee:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 80014f2:	7f89      	ldrb	r1, [r1, #30]
 80014f4:	ab01      	add	r3, sp, #4
 80014f6:	7800      	ldrb	r0, [r0, #0]
 80014f8:	f002 f878 	bl	80035ec <i2c_write>
 80014fc:	2800      	cmp	r0, #0
 80014fe:	d193      	bne.n	8001428 <mpu_init+0xe8>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 8001500:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = AKM_REG_ST1;
 8001504:	2302      	movs	r3, #2
 8001506:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 800150a:	2201      	movs	r2, #1
 800150c:	ab01      	add	r3, sp, #4
 800150e:	7fc9      	ldrb	r1, [r1, #31]
 8001510:	7800      	ldrb	r0, [r0, #0]
 8001512:	f002 f86b 	bl	80035ec <i2c_write>
 8001516:	2800      	cmp	r0, #0
 8001518:	d186      	bne.n	8001428 <mpu_init+0xe8>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 800151a:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = BIT_SLAVE_EN | 8;
 800151e:	2388      	movs	r3, #136	; 0x88
 8001520:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 8001524:	2201      	movs	r2, #1
 8001526:	ab01      	add	r3, sp, #4
 8001528:	f891 1020 	ldrb.w	r1, [r1, #32]
 800152c:	7800      	ldrb	r0, [r0, #0]
 800152e:	f002 f85d 	bl	80035ec <i2c_write>
 8001532:	2800      	cmp	r0, #0
 8001534:	f47f af78 	bne.w	8001428 <mpu_init+0xe8>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8001538:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = st.chip_cfg.compass_addr;
 800153c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8001540:	2201      	movs	r2, #1
    data[0] = st.chip_cfg.compass_addr;
 8001542:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8001546:	f891 1021 	ldrb.w	r1, [r1, #33]	; 0x21
 800154a:	ab01      	add	r3, sp, #4
 800154c:	7800      	ldrb	r0, [r0, #0]
 800154e:	f002 f84d 	bl	80035ec <i2c_write>
 8001552:	2800      	cmp	r0, #0
 8001554:	f47f af68 	bne.w	8001428 <mpu_init+0xe8>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8001558:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = AKM_REG_CNTL;
 800155c:	230a      	movs	r3, #10
 800155e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8001562:	2201      	movs	r2, #1
 8001564:	ab01      	add	r3, sp, #4
 8001566:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 800156a:	7800      	ldrb	r0, [r0, #0]
 800156c:	f002 f83e 	bl	80035ec <i2c_write>
 8001570:	2800      	cmp	r0, #0
 8001572:	f47f af59 	bne.w	8001428 <mpu_init+0xe8>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8001576:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = BIT_SLAVE_EN | 1;
 800157a:	2381      	movs	r3, #129	; 0x81
 800157c:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8001580:	2201      	movs	r2, #1
 8001582:	ab01      	add	r3, sp, #4
 8001584:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
 8001588:	7800      	ldrb	r0, [r0, #0]
 800158a:	f002 f82f 	bl	80035ec <i2c_write>
 800158e:	2800      	cmp	r0, #0
 8001590:	f47f af4a 	bne.w	8001428 <mpu_init+0xe8>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 8001594:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = AKM_SINGLE_MEASUREMENT;
 8001598:	2311      	movs	r3, #17
 800159a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 800159e:	2201      	movs	r2, #1
 80015a0:	ab01      	add	r3, sp, #4
 80015a2:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 80015a6:	7800      	ldrb	r0, [r0, #0]
 80015a8:	f002 f820 	bl	80035ec <i2c_write>
 80015ac:	2800      	cmp	r0, #0
 80015ae:	f47f af3b 	bne.w	8001428 <mpu_init+0xe8>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 80015b2:	e9d4 1000 	ldrd	r1, r0, [r4]
    data[0] = 0x03;
 80015b6:	2303      	movs	r3, #3
 80015b8:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 80015bc:	2201      	movs	r2, #1
 80015be:	ab01      	add	r3, sp, #4
 80015c0:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 80015c4:	7800      	ldrb	r0, [r0, #0]
 80015c6:	f002 f811 	bl	80035ec <i2c_write>
 80015ca:	e72d      	b.n	8001428 <mpu_init+0xe8>
 80015cc:	20000000 	.word	0x20000000

080015d0 <mpu_write_mem>:
{
 80015d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80015d2:	460d      	mov	r5, r1
    if (!data)
 80015d4:	4616      	mov	r6, r2
 80015d6:	b91a      	cbnz	r2, 80015e0 <mpu_write_mem+0x10>
        return -1;
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80015dc:	b003      	add	sp, #12
 80015de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!st.chip_cfg.sensors)
 80015e0:	4c12      	ldr	r4, [pc, #72]	; (800162c <mpu_write_mem+0x5c>)
 80015e2:	7aa3      	ldrb	r3, [r4, #10]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f7      	beq.n	80015d8 <mpu_write_mem+0x8>
    if (tmp[1] + length > st.hw->bank_size)
 80015e8:	6867      	ldr	r7, [r4, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 80015ea:	0a03      	lsrs	r3, r0, #8
 80015ec:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80015f0:	b2c0      	uxtb	r0, r0
    if (tmp[1] + length > st.hw->bank_size)
 80015f2:	897b      	ldrh	r3, [r7, #10]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80015f4:	f88d 0005 	strb.w	r0, [sp, #5]
    if (tmp[1] + length > st.hw->bank_size)
 80015f8:	4408      	add	r0, r1
 80015fa:	4298      	cmp	r0, r3
 80015fc:	dcec      	bgt.n	80015d8 <mpu_write_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80015fe:	6821      	ldr	r1, [r4, #0]
 8001600:	ab01      	add	r3, sp, #4
 8001602:	2202      	movs	r2, #2
 8001604:	7ec9      	ldrb	r1, [r1, #27]
 8001606:	7838      	ldrb	r0, [r7, #0]
 8001608:	f001 fff0 	bl	80035ec <i2c_write>
 800160c:	2800      	cmp	r0, #0
 800160e:	d1e3      	bne.n	80015d8 <mpu_write_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8001610:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001614:	4633      	mov	r3, r6
 8001616:	b2ea      	uxtb	r2, r5
 8001618:	7e09      	ldrb	r1, [r1, #24]
 800161a:	7800      	ldrb	r0, [r0, #0]
 800161c:	f001 ffe6 	bl	80035ec <i2c_write>
 8001620:	3000      	adds	r0, #0
 8001622:	bf18      	it	ne
 8001624:	2001      	movne	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7d8      	b.n	80015dc <mpu_write_mem+0xc>
 800162a:	bf00      	nop
 800162c:	20000000 	.word	0x20000000

08001630 <mpu_read_mem>:
{
 8001630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001632:	460d      	mov	r5, r1
    if (!data)
 8001634:	4616      	mov	r6, r2
 8001636:	b91a      	cbnz	r2, 8001640 <mpu_read_mem+0x10>
        return -1;
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
}
 800163c:	b003      	add	sp, #12
 800163e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!st.chip_cfg.sensors)
 8001640:	4c12      	ldr	r4, [pc, #72]	; (800168c <mpu_read_mem+0x5c>)
 8001642:	7aa3      	ldrb	r3, [r4, #10]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f7      	beq.n	8001638 <mpu_read_mem+0x8>
    if (tmp[1] + length > st.hw->bank_size)
 8001648:	6867      	ldr	r7, [r4, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 800164a:	0a03      	lsrs	r3, r0, #8
 800164c:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001650:	b2c0      	uxtb	r0, r0
    if (tmp[1] + length > st.hw->bank_size)
 8001652:	897b      	ldrh	r3, [r7, #10]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001654:	f88d 0005 	strb.w	r0, [sp, #5]
    if (tmp[1] + length > st.hw->bank_size)
 8001658:	4408      	add	r0, r1
 800165a:	4298      	cmp	r0, r3
 800165c:	dcec      	bgt.n	8001638 <mpu_read_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800165e:	6821      	ldr	r1, [r4, #0]
 8001660:	ab01      	add	r3, sp, #4
 8001662:	2202      	movs	r2, #2
 8001664:	7ec9      	ldrb	r1, [r1, #27]
 8001666:	7838      	ldrb	r0, [r7, #0]
 8001668:	f001 ffc0 	bl	80035ec <i2c_write>
 800166c:	2800      	cmp	r0, #0
 800166e:	d1e3      	bne.n	8001638 <mpu_read_mem+0x8>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8001670:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001674:	4633      	mov	r3, r6
 8001676:	b2ea      	uxtb	r2, r5
 8001678:	7e09      	ldrb	r1, [r1, #24]
 800167a:	7800      	ldrb	r0, [r0, #0]
 800167c:	f001 ffc4 	bl	8003608 <i2c_read>
 8001680:	3000      	adds	r0, #0
 8001682:	bf18      	it	ne
 8001684:	2001      	movne	r0, #1
 8001686:	4240      	negs	r0, r0
 8001688:	e7d8      	b.n	800163c <mpu_read_mem+0xc>
 800168a:	bf00      	nop
 800168c:	20000000 	.word	0x20000000

08001690 <mpu_load_firmware>:
{
 8001690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (st.chip_cfg.dmp_loaded)
 8001694:	4d25      	ldr	r5, [pc, #148]	; (800172c <mpu_load_firmware+0x9c>)
{
 8001696:	b089      	sub	sp, #36	; 0x24
    if (st.chip_cfg.dmp_loaded)
 8001698:	f895 4025 	ldrb.w	r4, [r5, #37]	; 0x25
{
 800169c:	4607      	mov	r7, r0
 800169e:	4689      	mov	r9, r1
 80016a0:	4616      	mov	r6, r2
 80016a2:	9301      	str	r3, [sp, #4]
    if (st.chip_cfg.dmp_loaded)
 80016a4:	b124      	cbz	r4, 80016b0 <mpu_load_firmware+0x20>
        return -1;
 80016a6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80016aa:	b009      	add	sp, #36	; 0x24
 80016ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!firmware)
 80016b0:	2900      	cmp	r1, #0
 80016b2:	d0f8      	beq.n	80016a6 <mpu_load_firmware+0x16>
    for (ii = 0; ii < length; ii += this_write) {
 80016b4:	42bc      	cmp	r4, r7
 80016b6:	d314      	bcc.n	80016e2 <mpu_load_firmware+0x52>
    tmp[0] = start_addr >> 8;
 80016b8:	0a33      	lsrs	r3, r6, #8
 80016ba:	f88d 300c 	strb.w	r3, [sp, #12]
    tmp[1] = start_addr & 0xFF;
 80016be:	f88d 600d 	strb.w	r6, [sp, #13]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 80016c2:	e9d5 1000 	ldrd	r1, r0, [r5]
 80016c6:	ab03      	add	r3, sp, #12
 80016c8:	2202      	movs	r2, #2
 80016ca:	7f49      	ldrb	r1, [r1, #29]
 80016cc:	7800      	ldrb	r0, [r0, #0]
 80016ce:	f001 ff8d 	bl	80035ec <i2c_write>
 80016d2:	2800      	cmp	r0, #0
 80016d4:	d1e7      	bne.n	80016a6 <mpu_load_firmware+0x16>
    st.chip_cfg.dmp_loaded = 1;
 80016d6:	2301      	movs	r3, #1
 80016d8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 80016dc:	9b01      	ldr	r3, [sp, #4]
 80016de:	84eb      	strh	r3, [r5, #38]	; 0x26
    return 0;
 80016e0:	e7e3      	b.n	80016aa <mpu_load_firmware+0x1a>
        this_write = min(LOAD_CHUNK, length - ii);
 80016e2:	eba7 0804 	sub.w	r8, r7, r4
 80016e6:	f1b8 0f10 	cmp.w	r8, #16
 80016ea:	bfa8      	it	ge
 80016ec:	f04f 0810 	movge.w	r8, #16
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 80016f0:	eb09 0b04 	add.w	fp, r9, r4
        this_write = min(LOAD_CHUNK, length - ii);
 80016f4:	fa1f fa88 	uxth.w	sl, r8
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 80016f8:	465a      	mov	r2, fp
 80016fa:	4651      	mov	r1, sl
 80016fc:	4620      	mov	r0, r4
 80016fe:	f7ff ff67 	bl	80015d0 <mpu_write_mem>
 8001702:	2800      	cmp	r0, #0
 8001704:	d1cf      	bne.n	80016a6 <mpu_load_firmware+0x16>
        if (mpu_read_mem(ii, this_write, cur))
 8001706:	aa04      	add	r2, sp, #16
 8001708:	4651      	mov	r1, sl
 800170a:	4620      	mov	r0, r4
 800170c:	f7ff ff90 	bl	8001630 <mpu_read_mem>
 8001710:	2800      	cmp	r0, #0
 8001712:	d1c8      	bne.n	80016a6 <mpu_load_firmware+0x16>
        if (memcmp(firmware+ii, cur, this_write))
 8001714:	4652      	mov	r2, sl
 8001716:	a904      	add	r1, sp, #16
 8001718:	4658      	mov	r0, fp
 800171a:	f005 fdcd 	bl	80072b8 <memcmp>
 800171e:	b910      	cbnz	r0, 8001726 <mpu_load_firmware+0x96>
    for (ii = 0; ii < length; ii += this_write) {
 8001720:	4454      	add	r4, sl
 8001722:	b2a4      	uxth	r4, r4
 8001724:	e7c6      	b.n	80016b4 <mpu_load_firmware+0x24>
            return -2;
 8001726:	f06f 0001 	mvn.w	r0, #1
 800172a:	e7be      	b.n	80016aa <mpu_load_firmware+0x1a>
 800172c:	20000000 	.word	0x20000000

08001730 <mpu_set_dmp_state>:
{
 8001730:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (st.chip_cfg.dmp_on == enable)
 8001732:	4d1c      	ldr	r5, [pc, #112]	; (80017a4 <mpu_set_dmp_state+0x74>)
{
 8001734:	4604      	mov	r4, r0
    if (st.chip_cfg.dmp_on == enable)
 8001736:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800173a:	4283      	cmp	r3, r0
 800173c:	d01d      	beq.n	800177a <mpu_set_dmp_state+0x4a>
    if (enable) {
 800173e:	b1f8      	cbz	r0, 8001780 <mpu_set_dmp_state+0x50>
        if (!st.chip_cfg.dmp_loaded)
 8001740:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8001744:	b35b      	cbz	r3, 800179e <mpu_set_dmp_state+0x6e>
        tmp = 0;
 8001746:	2400      	movs	r4, #0
        set_int_enable(0);
 8001748:	2000      	movs	r0, #0
 800174a:	f7ff fa0d 	bl	8000b68 <set_int_enable>
        mpu_set_bypass(0);
 800174e:	2000      	movs	r0, #0
 8001750:	f7ff fc14 	bl	8000f7c <mpu_set_bypass>
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8001754:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 8001756:	f7ff fd0f 	bl	8001178 <mpu_set_sample_rate>
        tmp = 0;
 800175a:	ab02      	add	r3, sp, #8
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800175c:	6868      	ldr	r0, [r5, #4]
        tmp = 0;
 800175e:	f803 4d01 	strb.w	r4, [r3, #-1]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001762:	2201      	movs	r2, #1
 8001764:	2123      	movs	r1, #35	; 0x23
 8001766:	7800      	ldrb	r0, [r0, #0]
 8001768:	f001 ff40 	bl	80035ec <i2c_write>
        st.chip_cfg.dmp_on = 1;
 800176c:	2001      	movs	r0, #1
 800176e:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
        set_int_enable(1);
 8001772:	f7ff f9f9 	bl	8000b68 <set_int_enable>
        mpu_reset_fifo();
 8001776:	f7ff fa21 	bl	8000bbc <mpu_reset_fifo>
        return 0;
 800177a:	2000      	movs	r0, #0
}
 800177c:	b003      	add	sp, #12
 800177e:	bd30      	pop	{r4, r5, pc}
        set_int_enable(0);
 8001780:	f7ff f9f2 	bl	8000b68 <set_int_enable>
        tmp = st.chip_cfg.fifo_enable;
 8001784:	7c2a      	ldrb	r2, [r5, #16]
 8001786:	ab02      	add	r3, sp, #8
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001788:	6868      	ldr	r0, [r5, #4]
        tmp = st.chip_cfg.fifo_enable;
 800178a:	f803 2d01 	strb.w	r2, [r3, #-1]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800178e:	2123      	movs	r1, #35	; 0x23
 8001790:	2201      	movs	r2, #1
 8001792:	7800      	ldrb	r0, [r0, #0]
 8001794:	f001 ff2a 	bl	80035ec <i2c_write>
        st.chip_cfg.dmp_on = 0;
 8001798:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
 800179c:	e7eb      	b.n	8001776 <mpu_set_dmp_state+0x46>
            return -1;
 800179e:	f04f 30ff 	mov.w	r0, #4294967295
 80017a2:	e7eb      	b.n	800177c <mpu_set_dmp_state+0x4c>
 80017a4:	20000000 	.word	0x20000000

080017a8 <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
 80017a8:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 80017aa:	4e2a      	ldr	r6, [pc, #168]	; (8001854 <mpu_get_compass_reg+0xac>)
{
 80017ac:	b085      	sub	sp, #20
    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 80017ae:	7ab3      	ldrb	r3, [r6, #10]
{
 80017b0:	4604      	mov	r4, r0
    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 80017b2:	07db      	lsls	r3, r3, #31
{
 80017b4:	460d      	mov	r5, r1
    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 80017b6:	d404      	bmi.n	80017c2 <mpu_get_compass_reg+0x1a>
        return -1;
 80017b8:	f04f 37ff 	mov.w	r7, #4294967295
        get_ms(timestamp);
    return 0;
#else
    return -1;
#endif
}
 80017bc:	4638      	mov	r0, r7
 80017be:	b005      	add	sp, #20
 80017c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
 80017c2:	e9d6 1000 	ldrd	r1, r0, [r6]
 80017c6:	ab01      	add	r3, sp, #4
 80017c8:	2208      	movs	r2, #8
 80017ca:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 80017ce:	7800      	ldrb	r0, [r0, #0]
 80017d0:	f001 ff1a 	bl	8003608 <i2c_read>
 80017d4:	4607      	mov	r7, r0
 80017d6:	2800      	cmp	r0, #0
 80017d8:	d1ee      	bne.n	80017b8 <mpu_get_compass_reg+0x10>
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
 80017da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d130      	bne.n	8001848 <mpu_get_compass_reg+0xa0>
    if (tmp[7] & AKM_OVERFLOW)
 80017e6:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db2f      	blt.n	800184e <mpu_get_compass_reg+0xa6>
    data[0] = (tmp[2] << 8) | tmp[1];
 80017ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80017f2:	f89d 1005 	ldrb.w	r1, [sp, #5]
    data[1] = (tmp[4] << 8) | tmp[3];
 80017f6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    data[0] = (tmp[2] << 8) | tmp[1];
 80017fa:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
    data[1] = (tmp[4] << 8) | tmp[3];
 80017fe:	f89d 3008 	ldrb.w	r3, [sp, #8]
    data[2] = (tmp[6] << 8) | tmp[5];
 8001802:	f89d 000a 	ldrb.w	r0, [sp, #10]
    data[1] = (tmp[4] << 8) | tmp[3];
 8001806:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    data[2] = (tmp[6] << 8) | tmp[5];
 800180a:	f89d 3009 	ldrb.w	r3, [sp, #9]
    data[0] = (tmp[2] << 8) | tmp[1];
 800180e:	b209      	sxth	r1, r1
    data[2] = (tmp[6] << 8) | tmp[5];
 8001810:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    data[1] = (tmp[4] << 8) | tmp[3];
 8001814:	b212      	sxth	r2, r2
    data[2] = (tmp[6] << 8) | tmp[5];
 8001816:	b21b      	sxth	r3, r3
    data[0] = (tmp[2] << 8) | tmp[1];
 8001818:	8021      	strh	r1, [r4, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
 800181a:	8062      	strh	r2, [r4, #2]
    data[2] = (tmp[6] << 8) | tmp[5];
 800181c:	80a3      	strh	r3, [r4, #4]
    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
 800181e:	f9b6 002c 	ldrsh.w	r0, [r6, #44]	; 0x2c
 8001822:	4341      	muls	r1, r0
 8001824:	1209      	asrs	r1, r1, #8
 8001826:	8021      	strh	r1, [r4, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
 8001828:	f9b6 102e 	ldrsh.w	r1, [r6, #46]	; 0x2e
 800182c:	434a      	muls	r2, r1
 800182e:	1212      	asrs	r2, r2, #8
 8001830:	8062      	strh	r2, [r4, #2]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
 8001832:	f9b6 2030 	ldrsh.w	r2, [r6, #48]	; 0x30
 8001836:	4353      	muls	r3, r2
 8001838:	121b      	asrs	r3, r3, #8
 800183a:	80a3      	strh	r3, [r4, #4]
    if (timestamp)
 800183c:	2d00      	cmp	r5, #0
 800183e:	d0bd      	beq.n	80017bc <mpu_get_compass_reg+0x14>
        get_ms(timestamp);
 8001840:	4628      	mov	r0, r5
 8001842:	f001 fef1 	bl	8003628 <get_ms>
 8001846:	e7b9      	b.n	80017bc <mpu_get_compass_reg+0x14>
        return -2;
 8001848:	f06f 0701 	mvn.w	r7, #1
 800184c:	e7b6      	b.n	80017bc <mpu_get_compass_reg+0x14>
        return -3;
 800184e:	f06f 0702 	mvn.w	r7, #2
 8001852:	e7b3      	b.n	80017bc <mpu_get_compass_reg+0x14>
 8001854:	20000000 	.word	0x20000000

08001858 <dmp_enable_gyro_cal.part.0>:
 *  called with @e DMP_FEATURE_SEND_CAL_GYRO, the biases will also be
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
 8001858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
    if (enable) {
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 800185a:	4a08      	ldr	r2, [pc, #32]	; (800187c <dmp_enable_gyro_cal.part.0+0x24>)
 800185c:	ab01      	add	r3, sp, #4
 800185e:	6810      	ldr	r0, [r2, #0]
 8001860:	6851      	ldr	r1, [r2, #4]
 8001862:	7a12      	ldrb	r2, [r2, #8]
 8001864:	c303      	stmia	r3!, {r0, r1}
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8001866:	2109      	movs	r1, #9
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8001868:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800186a:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 800186e:	aa01      	add	r2, sp, #4
 8001870:	f7ff feae 	bl	80015d0 <mpu_write_mem>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    }
}
 8001874:	b005      	add	sp, #20
 8001876:	f85d fb04 	ldr.w	pc, [sp], #4
 800187a:	bf00      	nop
 800187c:	08009d98 	.word	0x08009d98

08001880 <dmp_load_motion_driver_firmware>:
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8001880:	23c8      	movs	r3, #200	; 0xc8
 8001882:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001886:	4902      	ldr	r1, [pc, #8]	; (8001890 <dmp_load_motion_driver_firmware+0x10>)
 8001888:	f640 30f6 	movw	r0, #3062	; 0xbf6
 800188c:	f7ff bf00 	b.w	8001690 <mpu_load_firmware>
 8001890:	08009e50 	.word	0x08009e50

08001894 <dmp_set_orientation>:
{
 8001894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8001896:	f64c 534c 	movw	r3, #52556	; 0xcd4c
 800189a:	f8ad 3008 	strh.w	r3, [sp, #8]
 800189e:	236c      	movs	r3, #108	; 0x6c
 80018a0:	f88d 300a 	strb.w	r3, [sp, #10]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 80018a4:	f64c 130c 	movw	r3, #51468	; 0xc90c
 80018a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80018ac:	232c      	movs	r3, #44	; 0x2c
    gyro_regs[0] = gyro_axes[orient & 3];
 80018ae:	f000 0103 	and.w	r1, r0, #3
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 80018b2:	f88d 300e 	strb.w	r3, [sp, #14]
    gyro_regs[0] = gyro_axes[orient & 3];
 80018b6:	ab04      	add	r3, sp, #16
 80018b8:	4419      	add	r1, r3
 80018ba:	f811 3c08 	ldrb.w	r3, [r1, #-8]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 80018be:	f3c0 02c1 	ubfx	r2, r0, #3, #2
    gyro_regs[0] = gyro_axes[orient & 3];
 80018c2:	f88d 3000 	strb.w	r3, [sp]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 80018c6:	ab04      	add	r3, sp, #16
 80018c8:	441a      	add	r2, r3
 80018ca:	f812 3c08 	ldrb.w	r3, [r2, #-8]
{
 80018ce:	4604      	mov	r4, r0
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 80018d0:	f88d 3001 	strb.w	r3, [sp, #1]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 80018d4:	f3c0 1381 	ubfx	r3, r0, #6, #2
 80018d8:	a804      	add	r0, sp, #16
 80018da:	4403      	add	r3, r0
 80018dc:	f813 0c08 	ldrb.w	r0, [r3, #-8]
    accel_regs[0] = accel_axes[orient & 3];
 80018e0:	f811 1c04 	ldrb.w	r1, [r1, #-4]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 80018e4:	f812 2c04 	ldrb.w	r2, [r2, #-4]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 80018e8:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 80018ec:	f88d 0002 	strb.w	r0, [sp, #2]
    accel_regs[0] = accel_axes[orient & 3];
 80018f0:	f88d 1004 	strb.w	r1, [sp, #4]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 80018f4:	f88d 2005 	strb.w	r2, [sp, #5]
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 80018f8:	2103      	movs	r1, #3
 80018fa:	466a      	mov	r2, sp
 80018fc:	f240 4026 	movw	r0, #1062	; 0x426
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8001900:	f88d 3006 	strb.w	r3, [sp, #6]
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8001904:	f7ff fe64 	bl	80015d0 <mpu_write_mem>
 8001908:	b118      	cbz	r0, 8001912 <dmp_set_orientation+0x7e>
        return -1;
 800190a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800190e:	b004      	add	sp, #16
 8001910:	bd10      	pop	{r4, pc}
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8001912:	aa01      	add	r2, sp, #4
 8001914:	2103      	movs	r1, #3
 8001916:	f240 402a 	movw	r0, #1066	; 0x42a
 800191a:	f7ff fe59 	bl	80015d0 <mpu_write_mem>
 800191e:	2800      	cmp	r0, #0
 8001920:	d1f3      	bne.n	800190a <dmp_set_orientation+0x76>
    memcpy(gyro_regs, gyro_sign, 3);
 8001922:	f245 6336 	movw	r3, #22070	; 0x5636
 8001926:	f8ad 3000 	strh.w	r3, [sp]
 800192a:	2376      	movs	r3, #118	; 0x76
 800192c:	f88d 3002 	strb.w	r3, [sp, #2]
    memcpy(accel_regs, accel_sign, 3);
 8001930:	f244 6326 	movw	r3, #17958	; 0x4626
 8001934:	f8ad 3004 	strh.w	r3, [sp, #4]
 8001938:	2366      	movs	r3, #102	; 0x66
    if (orient & 4) {
 800193a:	0761      	lsls	r1, r4, #29
    memcpy(accel_regs, accel_sign, 3);
 800193c:	f88d 3006 	strb.w	r3, [sp, #6]
        gyro_regs[0] |= 1;
 8001940:	bf41      	itttt	mi
 8001942:	2337      	movmi	r3, #55	; 0x37
 8001944:	f88d 3000 	strbmi.w	r3, [sp]
        accel_regs[0] |= 1;
 8001948:	2327      	movmi	r3, #39	; 0x27
 800194a:	f88d 3004 	strbmi.w	r3, [sp, #4]
    if (orient & 0x20) {
 800194e:	06a2      	lsls	r2, r4, #26
        gyro_regs[1] |= 1;
 8001950:	bf41      	itttt	mi
 8001952:	2357      	movmi	r3, #87	; 0x57
 8001954:	f88d 3001 	strbmi.w	r3, [sp, #1]
        accel_regs[1] |= 1;
 8001958:	2347      	movmi	r3, #71	; 0x47
 800195a:	f88d 3005 	strbmi.w	r3, [sp, #5]
    if (orient & 0x100) {
 800195e:	05e3      	lsls	r3, r4, #23
        gyro_regs[2] |= 1;
 8001960:	bf42      	ittt	mi
 8001962:	2377      	movmi	r3, #119	; 0x77
 8001964:	f88d 3002 	strbmi.w	r3, [sp, #2]
        accel_regs[2] |= 1;
 8001968:	2367      	movmi	r3, #103	; 0x67
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 800196a:	466a      	mov	r2, sp
 800196c:	f04f 0103 	mov.w	r1, #3
 8001970:	f44f 6088 	mov.w	r0, #1088	; 0x440
        accel_regs[2] |= 1;
 8001974:	bf48      	it	mi
 8001976:	f88d 3006 	strbmi.w	r3, [sp, #6]
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 800197a:	f7ff fe29 	bl	80015d0 <mpu_write_mem>
 800197e:	2800      	cmp	r0, #0
 8001980:	d1c3      	bne.n	800190a <dmp_set_orientation+0x76>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8001982:	aa01      	add	r2, sp, #4
 8001984:	2103      	movs	r1, #3
 8001986:	f240 4031 	movw	r0, #1073	; 0x431
 800198a:	f7ff fe21 	bl	80015d0 <mpu_write_mem>
 800198e:	2800      	cmp	r0, #0
 8001990:	d1bb      	bne.n	800190a <dmp_set_orientation+0x76>
    dmp.orient = orient;
 8001992:	4b01      	ldr	r3, [pc, #4]	; (8001998 <dmp_set_orientation+0x104>)
 8001994:	811c      	strh	r4, [r3, #8]
    return 0;
 8001996:	e7ba      	b.n	800190e <dmp_set_orientation+0x7a>
 8001998:	200003a4 	.word	0x200003a4

0800199c <dmp_set_fifo_rate>:
{
 800199c:	b510      	push	{r4, lr}
 800199e:	4604      	mov	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 80019a0:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <dmp_set_fifo_rate+0x58>)
{
 80019a2:	b086      	sub	sp, #24
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 80019a4:	6810      	ldr	r0, [r2, #0]
 80019a6:	6851      	ldr	r1, [r2, #4]
 80019a8:	ab03      	add	r3, sp, #12
 80019aa:	c303      	stmia	r3!, {r0, r1}
 80019ac:	6890      	ldr	r0, [r2, #8]
    if (rate > DMP_SAMPLE_RATE)
 80019ae:	2cc8      	cmp	r4, #200	; 0xc8
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 80019b0:	6018      	str	r0, [r3, #0]
    if (rate > DMP_SAMPLE_RATE)
 80019b2:	d903      	bls.n	80019bc <dmp_set_fifo_rate+0x20>
        return -1;
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80019b8:	b006      	add	sp, #24
 80019ba:	bd10      	pop	{r4, pc}
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 80019bc:	2300      	movs	r3, #0
 80019be:	f88d 3004 	strb.w	r3, [sp, #4]
    div = DMP_SAMPLE_RATE / rate - 1;
 80019c2:	23c8      	movs	r3, #200	; 0xc8
 80019c4:	fb93 f3f4 	sdiv	r3, r3, r4
    if (mpu_write_mem(D_0_22, 2, tmp))
 80019c8:	aa01      	add	r2, sp, #4
    div = DMP_SAMPLE_RATE / rate - 1;
 80019ca:	3b01      	subs	r3, #1
    if (mpu_write_mem(D_0_22, 2, tmp))
 80019cc:	2102      	movs	r1, #2
 80019ce:	f240 2016 	movw	r0, #534	; 0x216
    tmp[1] = (unsigned char)(div & 0xFF);
 80019d2:	f88d 3005 	strb.w	r3, [sp, #5]
    if (mpu_write_mem(D_0_22, 2, tmp))
 80019d6:	f7ff fdfb 	bl	80015d0 <mpu_write_mem>
 80019da:	2800      	cmp	r0, #0
 80019dc:	d1ea      	bne.n	80019b4 <dmp_set_fifo_rate+0x18>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 80019de:	aa03      	add	r2, sp, #12
 80019e0:	210c      	movs	r1, #12
 80019e2:	f640 20c1 	movw	r0, #2753	; 0xac1
 80019e6:	f7ff fdf3 	bl	80015d0 <mpu_write_mem>
 80019ea:	2800      	cmp	r0, #0
 80019ec:	d1e2      	bne.n	80019b4 <dmp_set_fifo_rate+0x18>
    dmp.fifo_rate = rate;
 80019ee:	4b02      	ldr	r3, [pc, #8]	; (80019f8 <dmp_set_fifo_rate+0x5c>)
 80019f0:	819c      	strh	r4, [r3, #12]
    return 0;
 80019f2:	e7e1      	b.n	80019b8 <dmp_set_fifo_rate+0x1c>
 80019f4:	08009da1 	.word	0x08009da1
 80019f8:	200003a4 	.word	0x200003a4

080019fc <dmp_enable_gyro_cal>:
{
 80019fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (enable) {
 80019fe:	b120      	cbz	r0, 8001a0a <dmp_enable_gyro_cal+0xe>
 8001a00:	f7ff ff2a 	bl	8001858 <dmp_enable_gyro_cal.part.0>
}
 8001a04:	b005      	add	sp, #20
 8001a06:	f85d fb04 	ldr.w	pc, [sp], #4
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8001a0a:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <dmp_enable_gyro_cal+0x2c>)
 8001a0c:	ab01      	add	r3, sp, #4
 8001a0e:	6810      	ldr	r0, [r2, #0]
 8001a10:	6851      	ldr	r1, [r2, #4]
 8001a12:	7a12      	ldrb	r2, [r2, #8]
 8001a14:	c303      	stmia	r3!, {r0, r1}
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8001a16:	2109      	movs	r1, #9
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8001a18:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8001a1a:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8001a1e:	aa01      	add	r2, sp, #4
 8001a20:	f7ff fdd6 	bl	80015d0 <mpu_write_mem>
 8001a24:	e7ee      	b.n	8001a04 <dmp_enable_gyro_cal+0x8>
 8001a26:	bf00      	nop
 8001a28:	08009dad 	.word	0x08009dad

08001a2c <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 8001a2c:	b507      	push	{r0, r1, r2, lr}
    unsigned char regs[4];
    if (enable) {
 8001a2e:	b160      	cbz	r0, 8001a4a <dmp_enable_lp_quat+0x1e>
        regs[0] = DINBC0;
 8001a30:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <dmp_enable_lp_quat+0x24>)
        regs[3] = DINBC6;
    }
    else
        memset(regs, 0x8B, 4);

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8001a32:	aa01      	add	r2, sp, #4
 8001a34:	2104      	movs	r1, #4
 8001a36:	f640 2098 	movw	r0, #2712	; 0xa98
        memset(regs, 0x8B, 4);
 8001a3a:	9301      	str	r3, [sp, #4]
    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8001a3c:	f7ff fdc8 	bl	80015d0 <mpu_write_mem>

    return mpu_reset_fifo();
 8001a40:	f7ff f8bc 	bl	8000bbc <mpu_reset_fifo>
}
 8001a44:	b003      	add	sp, #12
 8001a46:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(regs, 0x8B, 4);
 8001a4a:	f04f 338b 	mov.w	r3, #2341178251	; 0x8b8b8b8b
 8001a4e:	e7f0      	b.n	8001a32 <dmp_enable_lp_quat+0x6>
 8001a50:	c6c4c2c0 	.word	0xc6c4c2c0

08001a54 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 8001a54:	b507      	push	{r0, r1, r2, lr}
    unsigned char regs[4];
    if (enable) {
 8001a56:	b160      	cbz	r0, 8001a72 <dmp_enable_6x_lp_quat+0x1e>
        regs[0] = DINA20;
 8001a58:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <dmp_enable_6x_lp_quat+0x24>)
        regs[2] = DINA30;
        regs[3] = DINA38;
    } else
        memset(regs, 0xA3, 4);

    mpu_write_mem(CFG_8, 4, regs);
 8001a5a:	aa01      	add	r2, sp, #4
 8001a5c:	2104      	movs	r1, #4
 8001a5e:	f640 209e 	movw	r0, #2718	; 0xa9e
        memset(regs, 0xA3, 4);
 8001a62:	9301      	str	r3, [sp, #4]
    mpu_write_mem(CFG_8, 4, regs);
 8001a64:	f7ff fdb4 	bl	80015d0 <mpu_write_mem>

    return mpu_reset_fifo();
 8001a68:	f7ff f8a8 	bl	8000bbc <mpu_reset_fifo>
}
 8001a6c:	b003      	add	sp, #12
 8001a6e:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(regs, 0xA3, 4);
 8001a72:	f04f 33a3 	mov.w	r3, #2745410467	; 0xa3a3a3a3
 8001a76:	e7f0      	b.n	8001a5a <dmp_enable_6x_lp_quat+0x6>
 8001a78:	38302820 	.word	0x38302820

08001a7c <dmp_enable_feature>:
{
 8001a7c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8001a80:	4b44      	ldr	r3, [pc, #272]	; (8001b94 <dmp_enable_feature+0x118>)
 8001a82:	ad04      	add	r5, sp, #16
 8001a84:	f845 3d0c 	str.w	r3, [r5, #-12]!
{
 8001a88:	4604      	mov	r4, r0
    mpu_write_mem(D_0_104, 4, tmp);
 8001a8a:	462a      	mov	r2, r5
 8001a8c:	2104      	movs	r1, #4
 8001a8e:	2068      	movs	r0, #104	; 0x68
 8001a90:	f7ff fd9e 	bl	80015d0 <mpu_write_mem>
    tmp[0] = 0xA3;
 8001a94:	23a3      	movs	r3, #163	; 0xa3
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8001a96:	f014 0740 	ands.w	r7, r4, #64	; 0x40
    tmp[0] = 0xA3;
 8001a9a:	f88d 3004 	strb.w	r3, [sp, #4]
        tmp[1] = 0xC0;
 8001a9e:	bf1f      	itttt	ne
 8001aa0:	23c0      	movne	r3, #192	; 0xc0
 8001aa2:	f88d 3005 	strbne.w	r3, [sp, #5]
        tmp[2] = 0xC8;
 8001aa6:	23c8      	movne	r3, #200	; 0xc8
 8001aa8:	f88d 3006 	strbne.w	r3, [sp, #6]
        tmp[3] = 0xC2;
 8001aac:	bf12      	itee	ne
 8001aae:	23c2      	movne	r3, #194	; 0xc2
        tmp[1] = 0xA3;
 8001ab0:	f88d 3005 	strbeq.w	r3, [sp, #5]
        tmp[2] = 0xA3;
 8001ab4:	f88d 3006 	strbeq.w	r3, [sp, #6]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8001ab8:	f414 78c0 	ands.w	r8, r4, #384	; 0x180
        tmp[3] = 0xA3;
 8001abc:	f88d 3007 	strb.w	r3, [sp, #7]
        tmp[4] = 0xC4;
 8001ac0:	bf15      	itete	ne
 8001ac2:	f64c 43c4 	movwne	r3, #52420	; 0xccc4
        tmp[4] = 0xA3;
 8001ac6:	f24a 33a3 	movweq	r3, #41891	; 0xa3a3
        tmp[4] = 0xC4;
 8001aca:	f8ad 3008 	strhne.w	r3, [sp, #8]
        tmp[4] = 0xA3;
 8001ace:	f8ad 3008 	strheq.w	r3, [sp, #8]
        tmp[5] = 0xCC;
 8001ad2:	bf14      	ite	ne
 8001ad4:	23c6      	movne	r3, #198	; 0xc6
        tmp[5] = 0xA3;
 8001ad6:	23a3      	moveq	r3, #163	; 0xa3
 8001ad8:	f88d 300a 	strb.w	r3, [sp, #10]
    tmp[7] = 0xA3;
 8001adc:	23a3      	movs	r3, #163	; 0xa3
    mpu_write_mem(CFG_15,10,tmp);
 8001ade:	462a      	mov	r2, r5
 8001ae0:	210a      	movs	r1, #10
 8001ae2:	f640 20a7 	movw	r0, #2727	; 0xaa7
    tmp[7] = 0xA3;
 8001ae6:	f88d 300b 	strb.w	r3, [sp, #11]
    tmp[8] = 0xA3;
 8001aea:	f88d 300c 	strb.w	r3, [sp, #12]
    tmp[9] = 0xA3;
 8001aee:	f88d 300d 	strb.w	r3, [sp, #13]
    mpu_write_mem(CFG_15,10,tmp);
 8001af2:	f7ff fd6d 	bl	80015d0 <mpu_write_mem>
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8001af6:	f014 0603 	ands.w	r6, r4, #3
        tmp[0] = DINA20;
 8001afa:	bf14      	ite	ne
 8001afc:	2320      	movne	r3, #32
        tmp[0] = 0xD8;
 8001afe:	23d8      	moveq	r3, #216	; 0xd8
    mpu_write_mem(CFG_27,1,tmp);
 8001b00:	462a      	mov	r2, r5
 8001b02:	2101      	movs	r1, #1
 8001b04:	f640 20b6 	movw	r0, #2742	; 0xab6
        tmp[0] = 0xD8;
 8001b08:	f88d 3004 	strb.w	r3, [sp, #4]
    mpu_write_mem(CFG_27,1,tmp);
 8001b0c:	f7ff fd60 	bl	80015d0 <mpu_write_mem>
    if (mask & DMP_FEATURE_GYRO_CAL)
 8001b10:	f014 0020 	ands.w	r0, r4, #32
 8001b14:	d038      	beq.n	8001b88 <dmp_enable_feature+0x10c>
 8001b16:	f7ff fe9f 	bl	8001858 <dmp_enable_gyro_cal.part.0>
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8001b1a:	f1b8 0f00 	cmp.w	r8, #0
 8001b1e:	d00a      	beq.n	8001b36 <dmp_enable_feature+0xba>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 8001b20:	05e3      	lsls	r3, r4, #23
            tmp[0] = 0xB2;
 8001b22:	bf4c      	ite	mi
 8001b24:	4b1c      	ldrmi	r3, [pc, #112]	; (8001b98 <dmp_enable_feature+0x11c>)
            tmp[0] = DINAC0;
 8001b26:	4b1d      	ldrpl	r3, [pc, #116]	; (8001b9c <dmp_enable_feature+0x120>)
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8001b28:	462a      	mov	r2, r5
 8001b2a:	2104      	movs	r1, #4
 8001b2c:	f640 20a2 	movw	r0, #2722	; 0xaa2
            tmp[0] = DINAC0;
 8001b30:	9301      	str	r3, [sp, #4]
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8001b32:	f7ff fd4d 	bl	80015d0 <mpu_write_mem>
    if (mask & DMP_FEATURE_LP_QUAT)
 8001b36:	f014 0004 	ands.w	r0, r4, #4
        dmp_enable_lp_quat(1);
 8001b3a:	bf18      	it	ne
 8001b3c:	2001      	movne	r0, #1
        dmp_enable_lp_quat(0);
 8001b3e:	f7ff ff75 	bl	8001a2c <dmp_enable_lp_quat>
    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8001b42:	f014 0010 	ands.w	r0, r4, #16
        dmp_enable_6x_lp_quat(1);
 8001b46:	bf18      	it	ne
 8001b48:	2001      	movne	r0, #1
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8001b4a:	4d15      	ldr	r5, [pc, #84]	; (8001ba0 <dmp_enable_feature+0x124>)
        dmp_enable_6x_lp_quat(0);
 8001b4c:	f7ff ff82 	bl	8001a54 <dmp_enable_6x_lp_quat>
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8001b50:	f044 0308 	orr.w	r3, r4, #8
 8001b54:	816b      	strh	r3, [r5, #10]
    mpu_reset_fifo();
 8001b56:	f7ff f831 	bl	8000bbc <mpu_reset_fifo>
 8001b5a:	462b      	mov	r3, r5
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8001b5c:	b9bf      	cbnz	r7, 8001b8e <dmp_enable_feature+0x112>
    dmp.packet_length = 0;
 8001b5e:	73af      	strb	r7, [r5, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8001b60:	f1b8 0f00 	cmp.w	r8, #0
 8001b64:	d002      	beq.n	8001b6c <dmp_enable_feature+0xf0>
        dmp.packet_length += 6;
 8001b66:	7b9a      	ldrb	r2, [r3, #14]
 8001b68:	3206      	adds	r2, #6
 8001b6a:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 8001b6c:	f014 0f14 	tst.w	r4, #20
        dmp.packet_length += 16;
 8001b70:	bf1e      	ittt	ne
 8001b72:	7b9a      	ldrbne	r2, [r3, #14]
 8001b74:	3210      	addne	r2, #16
 8001b76:	739a      	strbne	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8001b78:	b116      	cbz	r6, 8001b80 <dmp_enable_feature+0x104>
        dmp.packet_length += 4;
 8001b7a:	7b9a      	ldrb	r2, [r3, #14]
 8001b7c:	3204      	adds	r2, #4
 8001b7e:	739a      	strb	r2, [r3, #14]
}
 8001b80:	2000      	movs	r0, #0
 8001b82:	b004      	add	sp, #16
 8001b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        dmp_enable_gyro_cal(0);
 8001b88:	f7ff ff38 	bl	80019fc <dmp_enable_gyro_cal>
 8001b8c:	e7c5      	b.n	8001b1a <dmp_enable_feature+0x9e>
        dmp.packet_length += 6;
 8001b8e:	2206      	movs	r2, #6
 8001b90:	73aa      	strb	r2, [r5, #14]
 8001b92:	e7e5      	b.n	8001b60 <dmp_enable_feature+0xe4>
 8001b94:	09e3ca02 	.word	0x09e3ca02
 8001b98:	9bb68bb2 	.word	0x9bb68bb2
 8001b9c:	90b480b0 	.word	0x90b480b0
 8001ba0:	200003a4 	.word	0x200003a4

08001ba4 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 8001ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ba8:	461f      	mov	r7, r3
    unsigned char ii = 0;

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 8001baa:	2300      	movs	r3, #0
{
 8001bac:	b088      	sub	sp, #32
 8001bae:	9c10      	ldr	r4, [sp, #64]	; 0x40

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8001bb0:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8001cc0 <dmp_read_fifo+0x11c>
{
 8001bb4:	4605      	mov	r5, r0
 8001bb6:	460e      	mov	r6, r1
 8001bb8:	4691      	mov	r9, r2
    sensors[0] = 0;
 8001bba:	8023      	strh	r3, [r4, #0]
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8001bbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001bbe:	4669      	mov	r1, sp
 8001bc0:	f89a 000e 	ldrb.w	r0, [sl, #14]
 8001bc4:	f7ff f98c 	bl	8000ee0 <mpu_read_fifo_stream>
 8001bc8:	4680      	mov	r8, r0
 8001bca:	bb58      	cbnz	r0, 8001c24 <dmp_read_fifo+0x80>
        return -1;

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8001bcc:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 8001bd0:	f011 0f14 	tst.w	r1, #20
 8001bd4:	d072      	beq.n	8001cbc <dmp_read_fifo+0x118>
 8001bd6:	9b01      	ldr	r3, [sp, #4]
 8001bd8:	9800      	ldr	r0, [sp, #0]
 8001bda:	fa93 fc83 	rev.w	ip, r3
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8001bde:	f8c9 c004 	str.w	ip, [r9, #4]
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
        quat_q14[1] = quat[1] >> 16;
 8001be2:	ea4f 4c2c 	mov.w	ip, ip, asr #16
        quat_q14[2] = quat[2] >> 16;
        quat_q14[3] = quat[3] >> 16;
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8001be6:	fb0c fc0c 	mul.w	ip, ip, ip
 8001bea:	ba00      	rev	r0, r0
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8001bec:	f8c9 0000 	str.w	r0, [r9]
        quat_q14[0] = quat[0] >> 16;
 8001bf0:	1400      	asrs	r0, r0, #16
 8001bf2:	9b02      	ldr	r3, [sp, #8]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8001bf4:	fb00 c000 	mla	r0, r0, r0, ip
 8001bf8:	ba1b      	rev	r3, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8001bfa:	f8c9 3008 	str.w	r3, [r9, #8]
        quat_q14[2] = quat[2] >> 16;
 8001bfe:	141b      	asrs	r3, r3, #16
 8001c00:	9a03      	ldr	r2, [sp, #12]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8001c02:	fb03 0303 	mla	r3, r3, r3, r0
 8001c06:	ba12      	rev	r2, r2
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8001c08:	f8c9 200c 	str.w	r2, [r9, #12]
        quat_q14[3] = quat[3] >> 16;
 8001c0c:	1412      	asrs	r2, r2, #16
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8001c0e:	fb02 3202 	mla	r2, r2, r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 8001c12:	f102 4271 	add.w	r2, r2, #4043309056	; 0xf1000000
 8001c16:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8001c1a:	d906      	bls.n	8001c2a <dmp_read_fifo+0x86>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 8001c1c:	f7fe ffce 	bl	8000bbc <mpu_reset_fifo>
            sensors[0] = 0;
 8001c20:	f8a4 8000 	strh.w	r8, [r4]
        return -1;
 8001c24:	f04f 38ff 	mov.w	r8, #4294967295
 8001c28:	e044      	b.n	8001cb4 <dmp_read_fifo+0x110>
        ii += 16;
 8001c2a:	2210      	movs	r2, #16
            return -1;
        }
        sensors[0] |= INV_WXYZ_QUAT;
 8001c2c:	8823      	ldrh	r3, [r4, #0]
 8001c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c32:	8023      	strh	r3, [r4, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8001c34:	064b      	lsls	r3, r1, #25
 8001c36:	d51c      	bpl.n	8001c72 <dmp_read_fifo+0xce>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001c38:	ab08      	add	r3, sp, #32
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f813 cc20 	ldrb.w	ip, [r3, #-32]
 8001c40:	f813 0c1f 	ldrb.w	r0, [r3, #-31]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
        ii += 6;
 8001c44:	3206      	adds	r2, #6
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001c46:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8001c4a:	8030      	strh	r0, [r6, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001c4c:	f813 cc1e 	ldrb.w	ip, [r3, #-30]
 8001c50:	f813 0c1d 	ldrb.w	r0, [r3, #-29]
        ii += 6;
 8001c54:	b2d2      	uxtb	r2, r2
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001c56:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8001c5a:	8070      	strh	r0, [r6, #2]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8001c5c:	f813 0c1c 	ldrb.w	r0, [r3, #-28]
 8001c60:	f813 3c1b 	ldrb.w	r3, [r3, #-27]
 8001c64:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001c68:	80b3      	strh	r3, [r6, #4]
        sensors[0] |= INV_XYZ_ACCEL;
 8001c6a:	8823      	ldrh	r3, [r4, #0]
 8001c6c:	f043 0308 	orr.w	r3, r3, #8
 8001c70:	8023      	strh	r3, [r4, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8001c72:	f411 7fc0 	tst.w	r1, #384	; 0x180
 8001c76:	d01a      	beq.n	8001cae <dmp_read_fifo+0x10a>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8001c78:	ab08      	add	r3, sp, #32
 8001c7a:	441a      	add	r2, r3
 8001c7c:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 8001c80:	f812 3c1f 	ldrb.w	r3, [r2, #-31]
 8001c84:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001c88:	802b      	strh	r3, [r5, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8001c8a:	f812 1c1e 	ldrb.w	r1, [r2, #-30]
 8001c8e:	f812 3c1d 	ldrb.w	r3, [r2, #-29]
 8001c92:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001c96:	806b      	strh	r3, [r5, #2]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8001c98:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 8001c9c:	f812 3c1b 	ldrb.w	r3, [r2, #-27]
 8001ca0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001ca4:	80ab      	strh	r3, [r5, #4]
        ii += 6;
        sensors[0] |= INV_XYZ_GYRO;
 8001ca6:	8823      	ldrh	r3, [r4, #0]
 8001ca8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001cac:	8023      	strh	r3, [r4, #0]
    }

    get_ms(timestamp);
 8001cae:	4638      	mov	r0, r7
 8001cb0:	f001 fcba 	bl	8003628 <get_ms>
    return 0;
}
 8001cb4:	4640      	mov	r0, r8
 8001cb6:	b008      	add	sp, #32
 8001cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    unsigned char ii = 0;
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	e7b9      	b.n	8001c34 <dmp_read_fifo+0x90>
 8001cc0:	200003a4 	.word	0x200003a4

08001cc4 <DMP_Init>:

int DMP_Init(void){
 8001cc4:	b507      	push	{r0, r1, r2, lr}

	struct int_param_s interrupt_config;//empty

	if (mpu_init(&interrupt_config)){
 8001cc6:	a801      	add	r0, sp, #4
 8001cc8:	f7ff fb3a 	bl	8001340 <mpu_init>
 8001ccc:	b9e8      	cbnz	r0, 8001d0a <DMP_Init+0x46>
		return 1;
	}

	if (mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS)){
 8001cce:	2079      	movs	r0, #121	; 0x79
 8001cd0:	f7ff fa9a 	bl	8001208 <mpu_set_sensors>
 8001cd4:	b9d8      	cbnz	r0, 8001d0e <DMP_Init+0x4a>
		return 2;
	}

	if(dmp_load_motion_driver_firmware()){
 8001cd6:	f7ff fdd3 	bl	8001880 <dmp_load_motion_driver_firmware>
 8001cda:	b9d0      	cbnz	r0, 8001d12 <DMP_Init+0x4e>

		return 4;//ERROR
	}

	if(dmp_set_orientation(0x88)){//set identity matrix
 8001cdc:	2088      	movs	r0, #136	; 0x88
 8001cde:	f7ff fdd9 	bl	8001894 <dmp_set_orientation>
 8001ce2:	b9c0      	cbnz	r0, 8001d16 <DMP_Init+0x52>
	}

	unsigned short dmp_features = DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_SEND_RAW_ACCEL
								| DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL;

	if(dmp_enable_feature(dmp_features)){
 8001ce4:	f44f 70b8 	mov.w	r0, #368	; 0x170
 8001ce8:	f7ff fec8 	bl	8001a7c <dmp_enable_feature>
 8001cec:	b9a8      	cbnz	r0, 8001d1a <DMP_Init+0x56>
		return 6;
	}

	if(dmp_set_fifo_rate(100)){
 8001cee:	2064      	movs	r0, #100	; 0x64
 8001cf0:	f7ff fe54 	bl	800199c <dmp_set_fifo_rate>
 8001cf4:	b998      	cbnz	r0, 8001d1e <DMP_Init+0x5a>
		return 7;
	}

	if (mpu_set_dmp_state(1)){
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f7ff fd1a 	bl	8001730 <mpu_set_dmp_state>
		return 8;
 8001cfc:	2800      	cmp	r0, #0
 8001cfe:	bf14      	ite	ne
 8001d00:	2008      	movne	r0, #8
 8001d02:	2000      	moveq	r0, #0
	}

	return 0;
}
 8001d04:	b003      	add	sp, #12
 8001d06:	f85d fb04 	ldr.w	pc, [sp], #4
		return 1;
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	e7fa      	b.n	8001d04 <DMP_Init+0x40>
		return 2;
 8001d0e:	2002      	movs	r0, #2
 8001d10:	e7f8      	b.n	8001d04 <DMP_Init+0x40>
		return 4;//ERROR
 8001d12:	2004      	movs	r0, #4
 8001d14:	e7f6      	b.n	8001d04 <DMP_Init+0x40>
		return 5;
 8001d16:	2005      	movs	r0, #5
 8001d18:	e7f4      	b.n	8001d04 <DMP_Init+0x40>
		return 6;
 8001d1a:	2006      	movs	r0, #6
 8001d1c:	e7f2      	b.n	8001d04 <DMP_Init+0x40>
		return 7;
 8001d1e:	2007      	movs	r0, #7
 8001d20:	e7f0      	b.n	8001d04 <DMP_Init+0x40>

08001d22 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d22:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d24:	2414      	movs	r4, #20
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d26:	2610      	movs	r6, #16
{
 8001d28:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d2a:	4622      	mov	r2, r4
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	a80c      	add	r0, sp, #48	; 0x30
 8001d30:	f005 fadc 	bl	80072ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d34:	4622      	mov	r2, r4
 8001d36:	eb0d 0004 	add.w	r0, sp, r4
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	f005 fad6 	bl	80072ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d40:	4632      	mov	r2, r6
 8001d42:	2100      	movs	r1, #0
 8001d44:	a801      	add	r0, sp, #4
 8001d46:	f005 fad1 	bl	80072ec <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d4a:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d52:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d56:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d5a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d5e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d60:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d62:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d64:	f003 f944 	bl	8004ff0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d68:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d6a:	2400      	movs	r4, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d6c:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d74:	4629      	mov	r1, r5
 8001d76:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d78:	e9cd 4307 	strd	r4, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d7c:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d7e:	f003 fb0f 	bl	80053a0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d82:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001d84:	9601      	str	r6, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001d86:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d88:	f003 fbc6 	bl	8005518 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001d8c:	b014      	add	sp, #80	; 0x50
 8001d8e:	bd70      	pop	{r4, r5, r6, pc}

08001d90 <main>:
{
 8001d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ximu_state = XIMU_STATE_STM_INIT;
 8001d94:	2400      	movs	r4, #0
 8001d96:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8001fd0 <main+0x240>
{
 8001d9a:	b08f      	sub	sp, #60	; 0x3c
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9c:	4d81      	ldr	r5, [pc, #516]	; (8001fa4 <main+0x214>)
	ximu_state = XIMU_STATE_STM_INIT;
 8001d9e:	f889 4000 	strb.w	r4, [r9]
  HAL_Init();
 8001da2:	f001 fec5 	bl	8003b30 <HAL_Init>
  SystemClock_Config();
 8001da6:	f7ff ffbc 	bl	8001d22 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001daa:	4621      	mov	r1, r4
 8001dac:	2210      	movs	r2, #16
 8001dae:	a80a      	add	r0, sp, #40	; 0x28
 8001db0:	f005 fa9c 	bl	80072ec <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db4:	69ab      	ldr	r3, [r5, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001db6:	4622      	mov	r2, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db8:	f043 0310 	orr.w	r3, r3, #16
 8001dbc:	61ab      	str	r3, [r5, #24]
 8001dbe:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001dc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc4:	f003 0310 	and.w	r3, r3, #16
 8001dc8:	9304      	str	r3, [sp, #16]
 8001dca:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dcc:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001dce:	4876      	ldr	r0, [pc, #472]	; (8001fa8 <main+0x218>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd0:	f043 0320 	orr.w	r3, r3, #32
 8001dd4:	61ab      	str	r3, [r5, #24]
 8001dd6:	69ab      	ldr	r3, [r5, #24]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd8:	f04f 0b01 	mov.w	fp, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ddc:	f003 0320 	and.w	r3, r3, #32
 8001de0:	9305      	str	r3, [sp, #20]
 8001de2:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de4:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	f04f 0a02 	mov.w	sl, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	f043 0304 	orr.w	r3, r3, #4
 8001dee:	61ab      	str	r3, [r5, #24]
 8001df0:	69ab      	ldr	r3, [r5, #24]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df2:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	9306      	str	r3, [sp, #24]
 8001dfc:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	69ab      	ldr	r3, [r5, #24]
  htim2.Instance = TIM2;
 8001e00:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8001fd4 <main+0x244>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e04:	f043 0308 	orr.w	r3, r3, #8
 8001e08:	61ab      	str	r3, [r5, #24]
 8001e0a:	69ab      	ldr	r3, [r5, #24]
  htim3.Instance = TIM3;
 8001e0c:	4e67      	ldr	r6, [pc, #412]	; (8001fac <main+0x21c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	9307      	str	r3, [sp, #28]
 8001e14:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e16:	f002 f90d 	bl	8004034 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1e:	a90a      	add	r1, sp, #40	; 0x28
 8001e20:	4861      	ldr	r0, [pc, #388]	; (8001fa8 <main+0x218>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e22:	e9cd 3b0a 	strd	r3, fp, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2c:	f002 f822 	bl	8003e74 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e30:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001e32:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e34:	ea43 030b 	orr.w	r3, r3, fp
 8001e38:	616b      	str	r3, [r5, #20]
 8001e3a:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001e3c:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e3e:	ea03 030b 	and.w	r3, r3, fp
 8001e42:	9303      	str	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001e44:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e46:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001e48:	f001 feba 	bl	8003bc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001e4c:	200f      	movs	r0, #15
 8001e4e:	f001 feeb 	bl	8003c28 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8001e52:	4d57      	ldr	r5, [pc, #348]	; (8001fb0 <main+0x220>)
  hi2c1.Init.ClockSpeed = 100000;
 8001e54:	4a57      	ldr	r2, [pc, #348]	; (8001fb4 <main+0x224>)
 8001e56:	4b58      	ldr	r3, [pc, #352]	; (8001fb8 <main+0x228>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e58:	4628      	mov	r0, r5
  hi2c1.Init.ClockSpeed = 100000;
 8001e5a:	e9c5 2300 	strd	r2, r3, [r5]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8001e62:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e66:	e9c5 3404 	strd	r3, r4, [r5, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e6a:	e9c5 4406 	strd	r4, r4, [r5, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e6e:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e70:	f002 faa8 	bl	80043c4 <HAL_I2C_Init>
  MX_USB_DEVICE_Init();
 8001e74:	f004 ff6c 	bl	8006d50 <MX_USB_DEVICE_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e78:	4621      	mov	r1, r4
 8001e7a:	2210      	movs	r2, #16
 8001e7c:	a80a      	add	r0, sp, #40	; 0x28
 8001e7e:	f005 fa35 	bl	80072ec <memset>
  htim2.Init.Prescaler = 7200;
 8001e82:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
  htim2.Init.Period = 1250;
 8001e86:	f240 42e2 	movw	r2, #1250	; 0x4e2
  htim2.Init.Prescaler = 7200;
 8001e8a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e8e:	4640      	mov	r0, r8
  htim2.Init.Prescaler = 7200;
 8001e90:	e9c8 1300 	strd	r1, r3, [r8]
 8001e94:	9301      	str	r3, [sp, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e96:	e9c8 2403 	strd	r2, r4, [r8, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9a:	e9cd 4408 	strd	r4, r4, [sp, #32]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9e:	f8c8 4008 	str.w	r4, [r8, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea2:	f8c8 4018 	str.w	r4, [r8, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ea6:	f003 fc9f 	bl	80057e8 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001eaa:	a90a      	add	r1, sp, #40	; 0x28
 8001eac:	4640      	mov	r0, r8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eae:	970a      	str	r7, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001eb0:	f003 fcbe 	bl	8005830 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eb4:	a908      	add	r1, sp, #32
 8001eb6:	4640      	mov	r0, r8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb8:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ebc:	f003 fd4c 	bl	8005958 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	2210      	movs	r2, #16
 8001ec4:	a80a      	add	r0, sp, #40	; 0x28
 8001ec6:	f005 fa11 	bl	80072ec <memset>
  htim3.Init.Prescaler = 7200;
 8001eca:	9b01      	ldr	r3, [sp, #4]
  htim3.Instance = TIM3;
 8001ecc:	4a3b      	ldr	r2, [pc, #236]	; (8001fbc <main+0x22c>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ece:	e9c6 3401 	strd	r3, r4, [r6, #4]
  htim3.Init.Period = 50;
 8001ed2:	2332      	movs	r3, #50	; 0x32
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ed4:	4630      	mov	r0, r6
  htim3.Instance = TIM3;
 8001ed6:	6032      	str	r2, [r6, #0]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed8:	e9c6 3403 	strd	r3, r4, [r6, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001edc:	e9cd 4408 	strd	r4, r4, [sp, #32]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee0:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ee2:	f003 fc81 	bl	80057e8 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ee6:	a90a      	add	r1, sp, #40	; 0x28
 8001ee8:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eea:	970a      	str	r7, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001eec:	f003 fca0 	bl	8005830 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ef0:	a908      	add	r1, sp, #32
 8001ef2:	4630      	mov	r0, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef4:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ef8:	f003 fd2e 	bl	8005958 <HAL_TIMEx_MasterConfigSynchronization>
  huart1.Init.BaudRate = 115200;
 8001efc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8001f00:	4f2f      	ldr	r7, [pc, #188]	; (8001fc0 <main+0x230>)
  huart1.Init.BaudRate = 115200;
 8001f02:	4830      	ldr	r0, [pc, #192]	; (8001fc4 <main+0x234>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f04:	e9c7 4402 	strd	r4, r4, [r7, #8]
  huart1.Init.BaudRate = 115200;
 8001f08:	e9c7 0300 	strd	r0, r3, [r7]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f0c:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f0e:	4638      	mov	r0, r7
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f10:	e9c7 3405 	strd	r3, r4, [r7, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f14:	613c      	str	r4, [r7, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f16:	61fc      	str	r4, [r7, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f18:	f003 fd86 	bl	8005a28 <HAL_UART_Init>
  systickInit();
 8001f1c:	f001 fdb0 	bl	8003a80 <systickInit>
  HAL_TIM_Base_Start_IT(&htim2);
 8001f20:	4640      	mov	r0, r8
 8001f22:	f003 fb71 	bl	8005608 <HAL_TIM_Base_Start_IT>
  led_set(LED_INIT);
 8001f26:	20cc      	movs	r0, #204	; 0xcc
 8001f28:	f001 fb54 	bl	80035d4 <led_set>
  HAL_Delay(1000);//blink to show system (stm32, especially the crystal) is ok
 8001f2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f30:	f001 fe22 	bl	8003b78 <HAL_Delay>
  led_set(LED_FAULT);//Will not notice LED blinking unless the following initialization takes longer than expected
 8001f34:	20aa      	movs	r0, #170	; 0xaa
  ximu_state = XIMU_STATE_DMP_INIT;
 8001f36:	f889 b000 	strb.w	fp, [r9]
  led_set(LED_FAULT);//Will not notice LED blinking unless the following initialization takes longer than expected
 8001f3a:	f001 fb4b 	bl	80035d4 <led_set>
  mpu_set_i2c(&hi2c1);
 8001f3e:	4628      	mov	r0, r5
 8001f40:	f001 fb4e 	bl	80035e0 <mpu_set_i2c>
  ms5611_set_i2c(&hi2c1);
 8001f44:	4628      	mov	r0, r5
 8001f46:	f001 fb75 	bl	8003634 <ms5611_set_i2c>
  ms5611_init();
 8001f4a:	f001 fc15 	bl	8003778 <ms5611_init>
  ms5611_update();
 8001f4e:	f001 fc0b 	bl	8003768 <ms5611_update>
  GNSS_set_huart(&huart1);
 8001f52:	4638      	mov	r0, r7
 8001f54:	f001 f9b0 	bl	80032b8 <GNSS_set_huart>
  GNSS_Init();
 8001f58:	f001 f9f4 	bl	8003344 <GNSS_Init>
  int dmp_state = DMP_Init();
 8001f5c:	f7ff feb2 	bl	8001cc4 <DMP_Init>
  if (dmp_state){
 8001f60:	4604      	mov	r4, r0
 8001f62:	b100      	cbz	r0, 8001f66 <main+0x1d6>
 8001f64:	e7fe      	b.n	8001f64 <main+0x1d4>
  HAL_TIM_Base_Start_IT(&htim3);//start updating sensor data
 8001f66:	4630      	mov	r0, r6
 8001f68:	f003 fb4e 	bl	8005608 <HAL_TIM_Base_Start_IT>
  led_set(LED_DISCONNECTED);//Fault cleared
 8001f6c:	4620      	mov	r0, r4
  ximu_state = XIMU_STATE_GPS_INIT;
 8001f6e:	f889 a000 	strb.w	sl, [r9]
  led_set(LED_DISCONNECTED);//Fault cleared
 8001f72:	f001 fb2f 	bl	80035d4 <led_set>
  while (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){
 8001f76:	4c14      	ldr	r4, [pc, #80]	; (8001fc8 <main+0x238>)
 8001f78:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d10c      	bne.n	8001f9a <main+0x20a>
  led_set(LED_IDLE);//connection formed
 8001f80:	20ff      	movs	r0, #255	; 0xff
 8001f82:	f001 fb27 	bl	80035d4 <led_set>
  ESKF_new(&eskf);
 8001f86:	4811      	ldr	r0, [pc, #68]	; (8001fcc <main+0x23c>)
 8001f88:	f000 fa54 	bl	8002434 <ESKF_new>
	  led_set(LED_MEASURING);
 8001f8c:	20fe      	movs	r0, #254	; 0xfe
 8001f8e:	f001 fb21 	bl	80035d4 <led_set>
	  HAL_Delay(10);
 8001f92:	200a      	movs	r0, #10
 8001f94:	f001 fdf0 	bl	8003b78 <HAL_Delay>
 8001f98:	e7f8      	b.n	8001f8c <main+0x1fc>
	  led_set(LED_DISCONNECTED);//wait for connection
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f001 fb1a 	bl	80035d4 <led_set>
 8001fa0:	e7ea      	b.n	8001f78 <main+0x1e8>
 8001fa2:	bf00      	nop
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40011000 	.word	0x40011000
 8001fac:	200006f4 	.word	0x200006f4
 8001fb0:	200006a0 	.word	0x200006a0
 8001fb4:	40005400 	.word	0x40005400
 8001fb8:	000186a0 	.word	0x000186a0
 8001fbc:	40000400 	.word	0x40000400
 8001fc0:	20000794 	.word	0x20000794
 8001fc4:	40013800 	.word	0x40013800
 8001fc8:	2000390c 	.word	0x2000390c
 8001fcc:	200007d8 	.word	0x200007d8
 8001fd0:	20000790 	.word	0x20000790
 8001fd4:	200033b8 	.word	0x200033b8

08001fd8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <HAL_MspInit+0x3c>)
{
 8001fde:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fe0:	699a      	ldr	r2, [r3, #24]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	619a      	str	r2, [r3, #24]
 8001fe8:	699a      	ldr	r2, [r3, #24]
 8001fea:	f002 0201 	and.w	r2, r2, #1
 8001fee:	9200      	str	r2, [sp, #0]
 8001ff0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff2:	69da      	ldr	r2, [r3, #28]
 8001ff4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ff8:	61da      	str	r2, [r3, #28]
 8001ffa:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST 
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8001ffc:	4a07      	ldr	r2, [pc, #28]	; (800201c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002002:	9301      	str	r3, [sp, #4]
 8002004:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8002006:	6853      	ldr	r3, [r2, #4]
 8002008:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800200c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002010:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002012:	b002      	add	sp, #8
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000
 800201c:	40010000 	.word	0x40010000

08002020 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002020:	b510      	push	{r4, lr}
 8002022:	4604      	mov	r4, r0
 8002024:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002026:	2210      	movs	r2, #16
 8002028:	2100      	movs	r1, #0
 800202a:	a802      	add	r0, sp, #8
 800202c:	f005 f95e 	bl	80072ec <memset>
  if(hi2c->Instance==I2C1)
 8002030:	6822      	ldr	r2, [r4, #0]
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <HAL_I2C_MspInit+0x58>)
 8002034:	429a      	cmp	r2, r3
 8002036:	d11c      	bne.n	8002072 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002038:	4c10      	ldr	r4, [pc, #64]	; (800207c <HAL_I2C_MspInit+0x5c>)
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800203a:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203c:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002040:	f043 0308 	orr.w	r3, r3, #8
 8002044:	61a3      	str	r3, [r4, #24]
 8002046:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002048:	480d      	ldr	r0, [pc, #52]	; (8002080 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002052:	2312      	movs	r3, #18
 8002054:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002058:	2303      	movs	r3, #3
 800205a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205c:	f001 ff0a 	bl	8003e74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002060:	69e3      	ldr	r3, [r4, #28]
 8002062:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002066:	61e3      	str	r3, [r4, #28]
 8002068:	69e3      	ldr	r3, [r4, #28]
 800206a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800206e:	9301      	str	r3, [sp, #4]
 8002070:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002072:	b006      	add	sp, #24
 8002074:	bd10      	pop	{r4, pc}
 8002076:	bf00      	nop
 8002078:	40005400 	.word	0x40005400
 800207c:	40021000 	.word	0x40021000
 8002080:	40010c00 	.word	0x40010c00

08002084 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8002084:	6803      	ldr	r3, [r0, #0]
{
 8002086:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8002088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208c:	d115      	bne.n	80020ba <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800208e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002092:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002094:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800209c:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 800209e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020a0:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020aa:	f001 fd89 	bl	8003bc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020ae:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80020b0:	b003      	add	sp, #12
 80020b2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020b6:	f001 bdb7 	b.w	8003c28 <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM3)
 80020ba:	4a0b      	ldr	r2, [pc, #44]	; (80020e8 <HAL_TIM_Base_MspInit+0x64>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d110      	bne.n	80020e2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020c0:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_TIM_Base_MspInit+0x68>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020c2:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020c4:	69da      	ldr	r2, [r3, #28]
 80020c6:	f042 0202 	orr.w	r2, r2, #2
 80020ca:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020cc:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020ce:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020d0:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020da:	f001 fd71 	bl	8003bc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020de:	201d      	movs	r0, #29
 80020e0:	e7e6      	b.n	80020b0 <HAL_TIM_Base_MspInit+0x2c>
}
 80020e2:	b003      	add	sp, #12
 80020e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80020e8:	40000400 	.word	0x40000400
 80020ec:	40021000 	.word	0x40021000

080020f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020f0:	b570      	push	{r4, r5, r6, lr}
 80020f2:	4606      	mov	r6, r0
 80020f4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f6:	2210      	movs	r2, #16
 80020f8:	2100      	movs	r1, #0
 80020fa:	a802      	add	r0, sp, #8
 80020fc:	f005 f8f6 	bl	80072ec <memset>
  if(huart->Instance==USART1)
 8002100:	6832      	ldr	r2, [r6, #0]
 8002102:	4b22      	ldr	r3, [pc, #136]	; (800218c <HAL_UART_MspInit+0x9c>)
 8002104:	429a      	cmp	r2, r3
 8002106:	d13e      	bne.n	8002186 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002108:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800210c:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210e:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002110:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002114:	619a      	str	r2, [r3, #24]
 8002116:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002118:	481d      	ldr	r0, [pc, #116]	; (8002190 <HAL_UART_MspInit+0xa0>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800211a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800211e:	9200      	str	r2, [sp, #0]
 8002120:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002124:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002126:	f042 0204 	orr.w	r2, r2, #4
 800212a:	619a      	str	r2, [r3, #24]
 800212c:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212e:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	2302      	movs	r3, #2
 800213c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002140:	2303      	movs	r3, #3
 8002142:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002144:	f001 fe96 	bl	8003e74 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002148:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214c:	a902      	add	r1, sp, #8
 800214e:	4810      	ldr	r0, [pc, #64]	; (8002190 <HAL_UART_MspInit+0xa0>)

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002150:	4c10      	ldr	r4, [pc, #64]	; (8002194 <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002152:	e9cd 3502 	strd	r3, r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002158:	f001 fe8c 	bl	8003e74 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800215c:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <HAL_UART_MspInit+0xa8>)
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800215e:	2120      	movs	r1, #32
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002160:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002164:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002166:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800216a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800216e:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002170:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002172:	6165      	str	r5, [r4, #20]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002174:	e9c4 1306 	strd	r1, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002178:	f001 fd7a 	bl	8003c70 <HAL_DMA_Init>
 800217c:	b108      	cbz	r0, 8002182 <HAL_UART_MspInit+0x92>
    {
      Error_Handler();
 800217e:	f7ff ff2b 	bl	8001fd8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002182:	6374      	str	r4, [r6, #52]	; 0x34
 8002184:	6266      	str	r6, [r4, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002186:	b006      	add	sp, #24
 8002188:	bd70      	pop	{r4, r5, r6, pc}
 800218a:	bf00      	nop
 800218c:	40013800 	.word	0x40013800
 8002190:	40010800 	.word	0x40010800
 8002194:	20000734 	.word	0x20000734
 8002198:	40020058 	.word	0x40020058

0800219c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800219c:	4770      	bx	lr

0800219e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800219e:	e7fe      	b.n	800219e <HardFault_Handler>

080021a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a0:	e7fe      	b.n	80021a0 <MemManage_Handler>

080021a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a2:	e7fe      	b.n	80021a2 <BusFault_Handler>

080021a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021a4:	e7fe      	b.n	80021a4 <UsageFault_Handler>

080021a6 <SVC_Handler>:
 80021a6:	4770      	bx	lr

080021a8 <DebugMon_Handler>:
 80021a8:	4770      	bx	lr

080021aa <PendSV_Handler>:
 80021aa:	4770      	bx	lr

080021ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ae:	f001 fcd1 	bl	8003b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systick_Inc();
  /* USER CODE END SysTick_IRQn 1 */
}
 80021b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  systick_Inc();
 80021b6:	f001 bc8f 	b.w	8003ad8 <systick_Inc>
	...

080021bc <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80021bc:	4801      	ldr	r0, [pc, #4]	; (80021c4 <DMA1_Channel5_IRQHandler+0x8>)
 80021be:	f001 bdc5 	b.w	8003d4c <HAL_DMA_IRQHandler>
 80021c2:	bf00      	nop
 80021c4:	20000734 	.word	0x20000734

080021c8 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80021c8:	4801      	ldr	r0, [pc, #4]	; (80021d0 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80021ca:	f002 bc7b 	b.w	8004ac4 <HAL_PCD_IRQHandler>
 80021ce:	bf00      	nop
 80021d0:	200045a0 	.word	0x200045a0

080021d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021d6:	4803      	ldr	r0, [pc, #12]	; (80021e4 <TIM2_IRQHandler+0x10>)
 80021d8:	f003 fa2b 	bl	8005632 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  led_update();
  /* USER CODE END TIM2_IRQn 1 */
}
 80021dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  led_update();
 80021e0:	f001 b9dc 	b.w	800359c <led_update>
 80021e4:	200033b8 	.word	0x200033b8

080021e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021e8:	b530      	push	{r4, r5, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//this timer runs on 200Hz
	if (timer_index % 2 == 0){
 80021ea:	4d5b      	ldr	r5, [pc, #364]	; (8002358 <TIM3_IRQHandler+0x170>)
{
 80021ec:	b0f1      	sub	sp, #452	; 0x1c4
	if (timer_index % 2 == 0){
 80021ee:	882b      	ldrh	r3, [r5, #0]
 80021f0:	f013 0301 	ands.w	r3, r3, #1
 80021f4:	d15b      	bne.n	80022ae <TIM3_IRQHandler+0xc6>
		//code here runs on 100Hz
		  short gyro[3] = {0,0,0}, accel[3] = {0,0,0}, sensors;
 80021f6:	9304      	str	r3, [sp, #16]
 80021f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80021fc:	9306      	str	r3, [sp, #24]
 80021fe:	f8ad 301c 	strh.w	r3, [sp, #28]
		  unsigned char more;
		  unsigned long timestamp;
		  long quat[4];

		  //TODO , while more != 0 read.
		  int status = dmp_read_fifo(gyro, accel, quat, &timestamp, &sensors,&more);
 8002202:	f10d 0309 	add.w	r3, sp, #9
 8002206:	9301      	str	r3, [sp, #4]
 8002208:	f10d 030a 	add.w	r3, sp, #10
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	aa08      	add	r2, sp, #32
 8002210:	ab03      	add	r3, sp, #12
 8002212:	a906      	add	r1, sp, #24
 8002214:	a804      	add	r0, sp, #16
 8002216:	f7ff fcc5 	bl	8001ba4 <dmp_read_fifo>
		  if (status == 0){
 800221a:	2800      	cmp	r0, #0
 800221c:	d147      	bne.n	80022ae <TIM3_IRQHandler+0xc6>
			  XIMU_sens.q0 = quat[0];
 800221e:	9808      	ldr	r0, [sp, #32]
 8002220:	f7fe f8f0 	bl	8000404 <__aeabi_i2d>
 8002224:	4c4d      	ldr	r4, [pc, #308]	; (800235c <TIM3_IRQHandler+0x174>)
 8002226:	e9c4 0100 	strd	r0, r1, [r4]
			  XIMU_sens.q1 = quat[1];
 800222a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800222c:	f7fe f8ea 	bl	8000404 <__aeabi_i2d>
 8002230:	e9c4 0102 	strd	r0, r1, [r4, #8]
			  XIMU_sens.q2 = quat[2];
 8002234:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002236:	f7fe f8e5 	bl	8000404 <__aeabi_i2d>
 800223a:	e9c4 0104 	strd	r0, r1, [r4, #16]
			  XIMU_sens.q3 = quat[3];
 800223e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002240:	f7fe f8e0 	bl	8000404 <__aeabi_i2d>
 8002244:	e9c4 0106 	strd	r0, r1, [r4, #24]

			  XIMU_sens.ax = accel[0];
 8002248:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 800224c:	f7fe f8da 	bl	8000404 <__aeabi_i2d>
 8002250:	e9c4 0108 	strd	r0, r1, [r4, #32]
			  XIMU_sens.ay = accel[1];
 8002254:	f9bd 001a 	ldrsh.w	r0, [sp, #26]
 8002258:	f7fe f8d4 	bl	8000404 <__aeabi_i2d>
 800225c:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
			  XIMU_sens.az = accel[2];
 8002260:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8002264:	f7fe f8ce 	bl	8000404 <__aeabi_i2d>
 8002268:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30

			  XIMU_sens.gx = gyro[0];
 800226c:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8002270:	f7fe f8c8 	bl	8000404 <__aeabi_i2d>
 8002274:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
			  XIMU_sens.gy = gyro[1];
 8002278:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 800227c:	f7fe f8c2 	bl	8000404 <__aeabi_i2d>
 8002280:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
			  XIMU_sens.gz = gyro[2];
 8002284:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8002288:	f7fe f8bc 	bl	8000404 <__aeabi_i2d>
 800228c:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48

			  XIMU_sens.qag_ts = millis();
 8002290:	f001 fc12 	bl	8003ab8 <millis>
 8002294:	6520      	str	r0, [r4, #80]	; 0x50
			  calc_absolute_acceleration();
 8002296:	f000 fc95 	bl	8002bc4 <calc_absolute_acceleration>

			  //TODO EKF_UPDATE
			char str[400];
			build_data_str(str);
 800229a:	a80c      	add	r0, sp, #48	; 0x30
 800229c:	f000 fe7c 	bl	8002f98 <build_data_str>
			CDC_Transmit_FS(str,strlen(str));
 80022a0:	a80c      	add	r0, sp, #48	; 0x30
 80022a2:	f7fd ff55 	bl	8000150 <strlen>
 80022a6:	b281      	uxth	r1, r0
 80022a8:	a80c      	add	r0, sp, #48	; 0x30
 80022aa:	f004 fd9f 	bl	8006dec <CDC_Transmit_FS>
		  }

	}

	if (timer_index % 10 == 0){
 80022ae:	220a      	movs	r2, #10
 80022b0:	f9b5 1000 	ldrsh.w	r1, [r5]
 80022b4:	fb91 f3f2 	sdiv	r3, r1, r2
 80022b8:	fb02 1313 	mls	r3, r2, r3, r1
 80022bc:	b21b      	sxth	r3, r3
 80022be:	b90b      	cbnz	r3, 80022c4 <TIM3_IRQHandler+0xdc>
		//code here runs on 20Hz
		ms5611_timer_update();
 80022c0:	f001 fbb2 	bl	8003a28 <ms5611_timer_update>
	}

	if (timer_index % 20 == 0){
 80022c4:	2314      	movs	r3, #20
 80022c6:	f9b5 2000 	ldrsh.w	r2, [r5]
 80022ca:	fb92 f1f3 	sdiv	r1, r2, r3
 80022ce:	fb03 2111 	mls	r1, r3, r1, r2
 80022d2:	b209      	sxth	r1, r1
 80022d4:	2900      	cmp	r1, #0
 80022d6:	d132      	bne.n	800233e <TIM3_IRQHandler+0x156>
		//code here runs on 10Hz
		short data[3];

		int status = mpu_get_compass_reg(data,NULL);
 80022d8:	a80c      	add	r0, sp, #48	; 0x30
 80022da:	f7ff fa65 	bl	80017a8 <mpu_get_compass_reg>

		if (status == 0){
 80022de:	b9b8      	cbnz	r0, 8002310 <TIM3_IRQHandler+0x128>
			XIMU_sens.mx = data[0];
 80022e0:	f9bd 0030 	ldrsh.w	r0, [sp, #48]	; 0x30
 80022e4:	f7fe f88e 	bl	8000404 <__aeabi_i2d>
 80022e8:	4c1c      	ldr	r4, [pc, #112]	; (800235c <TIM3_IRQHandler+0x174>)
 80022ea:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
			XIMU_sens.my = data[1];
 80022ee:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 80022f2:	f7fe f887 	bl	8000404 <__aeabi_i2d>
 80022f6:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
			XIMU_sens.mz = data[2];
 80022fa:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 80022fe:	f7fe f881 	bl	8000404 <__aeabi_i2d>
 8002302:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
			calibrate_mag_reading();
 8002306:	f000 fb93 	bl	8002a30 <calibrate_mag_reading>

			XIMU_sens.m_ts = millis();
 800230a:	f001 fbd5 	bl	8003ab8 <millis>
 800230e:	6720      	str	r0, [r4, #112]	; 0x70

			//calc_magnetic_orientation();
		}

		//poll DMA buffer
		GNSS_RX_Update();
 8002310:	f001 f824 	bl	800335c <GNSS_RX_Update>

		//Record GPS data
		if (GNSS.GNGGA.status != 0){//data is valid
 8002314:	4b12      	ldr	r3, [pc, #72]	; (8002360 <TIM3_IRQHandler+0x178>)
 8002316:	f8d3 24a4 	ldr.w	r2, [r3, #1188]	; 0x4a4
 800231a:	b182      	cbz	r2, 800233e <TIM3_IRQHandler+0x156>
			XIMU_sens.lat = GNSS.GNGGA.lat;
 800231c:	4c0f      	ldr	r4, [pc, #60]	; (800235c <TIM3_IRQHandler+0x174>)
 800231e:	f503 6290 	add.w	r2, r3, #1152	; 0x480
			XIMU_sens.lon = GNSS.GNGGA.lon;
 8002322:	f503 6393 	add.w	r3, r3, #1176	; 0x498
			XIMU_sens.lat = GNSS.GNGGA.lat;
 8002326:	e9d2 0100 	ldrd	r0, r1, [r2]
			XIMU_sens.lon = GNSS.GNGGA.lon;
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
			XIMU_sens.lat = GNSS.GNGGA.lat;
 800232e:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
			XIMU_sens.lon = GNSS.GNGGA.lon;
 8002332:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
			XIMU_sens.gps_ts = millis();
 8002336:	f001 fbbf 	bl	8003ab8 <millis>
 800233a:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
		}
	}

	timer_index++;
 800233e:	882b      	ldrh	r3, [r5, #0]
	if (timer_index == 200){
		timer_index = 0;
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002340:	4808      	ldr	r0, [pc, #32]	; (8002364 <TIM3_IRQHandler+0x17c>)
	timer_index++;
 8002342:	3301      	adds	r3, #1
 8002344:	b21b      	sxth	r3, r3
	if (timer_index == 200){
 8002346:	2bc8      	cmp	r3, #200	; 0xc8
		timer_index = 0;
 8002348:	bf08      	it	eq
 800234a:	2300      	moveq	r3, #0
 800234c:	802b      	strh	r3, [r5, #0]
  HAL_TIM_IRQHandler(&htim3);
 800234e:	f003 f970 	bl	8005632 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002352:	b071      	add	sp, #452	; 0x1c4
 8002354:	bd30      	pop	{r4, r5, pc}
 8002356:	bf00      	nop
 8002358:	200003b4 	.word	0x200003b4
 800235c:	200005f8 	.word	0x200005f8
 8002360:	20003430 	.word	0x20003430
 8002364:	200006f4 	.word	0x200006f4

08002368 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002368:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <_sbrk+0x2c>)
{
 800236c:	4602      	mov	r2, r0
	if (heap_end == 0)
 800236e:	6819      	ldr	r1, [r3, #0]
 8002370:	b909      	cbnz	r1, 8002376 <_sbrk+0xe>
		heap_end = &end;
 8002372:	4909      	ldr	r1, [pc, #36]	; (8002398 <_sbrk+0x30>)
 8002374:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002376:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002378:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800237a:	4402      	add	r2, r0
 800237c:	428a      	cmp	r2, r1
 800237e:	d906      	bls.n	800238e <_sbrk+0x26>
	{
		errno = ENOMEM;
 8002380:	f004 ff56 	bl	8007230 <__errno>
 8002384:	230c      	movs	r3, #12
 8002386:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002388:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 800238c:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800238e:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8002390:	e7fc      	b.n	800238c <_sbrk+0x24>
 8002392:	bf00      	nop
 8002394:	200003b8 	.word	0x200003b8
 8002398:	20004810 	.word	0x20004810

0800239c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800239c:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <SystemInit+0x40>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	f042 0201 	orr.w	r2, r2, #1
 80023a4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80023a6:	6859      	ldr	r1, [r3, #4]
 80023a8:	4a0d      	ldr	r2, [pc, #52]	; (80023e0 <SystemInit+0x44>)
 80023aa:	400a      	ands	r2, r1
 80023ac:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80023b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023b8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023c0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80023c8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80023ca:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80023ce:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80023d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <SystemInit+0x48>)
 80023d6:	609a      	str	r2, [r3, #8]
#endif 
}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40021000 	.word	0x40021000
 80023e0:	f8ff0000 	.word	0xf8ff0000
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80023e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80023ea:	e003      	b.n	80023f4 <LoopCopyDataInit>

080023ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80023ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80023f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80023f2:	3104      	adds	r1, #4

080023f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80023f4:	480a      	ldr	r0, [pc, #40]	; (8002420 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80023f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80023fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80023fc:	d3f6      	bcc.n	80023ec <CopyDataInit>
  ldr r2, =_sbss
 80023fe:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002400:	e002      	b.n	8002408 <LoopFillZerobss>

08002402 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002402:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002404:	f842 3b04 	str.w	r3, [r2], #4

08002408 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800240a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800240c:	d3f9      	bcc.n	8002402 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800240e:	f7ff ffc5 	bl	800239c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002412:	f004 ff13 	bl	800723c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002416:	f7ff fcbb 	bl	8001d90 <main>
  bx lr
 800241a:	4770      	bx	lr
  ldr r3, =_sidata
 800241c:	0800ade0 	.word	0x0800ade0
  ldr r0, =_sdata
 8002420:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002424:	20000388 	.word	0x20000388
  ldr r2, =_sbss
 8002428:	20000388 	.word	0x20000388
  ldr r3, = _ebss
 800242c:	20004810 	.word	0x20004810

08002430 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002430:	e7fe      	b.n	8002430 <ADC1_2_IRQHandler>
	...

08002434 <ESKF_new>:
#define A_NOISE 5e-2
#define W_NOISE 5e-4
#define AB_NOISE 0.0001
#define WB_NOISE 0.0001

void ESKF_new(ESKF_filter* eskf){
 8002434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	eskf->IMU_initialized = 0;
 8002438:	2500      	movs	r5, #0
	eskf->MAG_initialized = 0;
	eskf->GPS_initialized = 0;

	//Utils
	arm_mat_init_f32(&eskf->I3,3,3,eskf->I3_data);
 800243a:	2203      	movs	r2, #3
 800243c:	f500 5387 	add.w	r3, r0, #4320	; 0x10e0
 8002440:	3308      	adds	r3, #8
void ESKF_new(ESKF_filter* eskf){
 8002442:	4604      	mov	r4, r0
	arm_mat_init_f32(&eskf->I3,3,3,eskf->I3_data);
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	f500 5387 	add.w	r3, r0, #4320	; 0x10e0
	eskf->MAG_initialized = 0;
 800244a:	e9c0 5500 	strd	r5, r5, [r0]
	eskf->GPS_initialized = 0;
 800244e:	6085      	str	r5, [r0, #8]
	arm_mat_init_f32(&eskf->I3,3,3,eskf->I3_data);
 8002450:	4611      	mov	r1, r2
 8002452:	9800      	ldr	r0, [sp, #0]
 8002454:	3310      	adds	r3, #16
 8002456:	f004 fedf 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->I12,12,12,eskf->I12_data);
 800245a:	220c      	movs	r2, #12
 800245c:	f504 5688 	add.w	r6, r4, #4352	; 0x1100
 8002460:	3614      	adds	r6, #20
 8002462:	f504 5388 	add.w	r3, r4, #4352	; 0x1100
 8002466:	4611      	mov	r1, r2
 8002468:	4630      	mov	r0, r6
 800246a:	331c      	adds	r3, #28
 800246c:	f004 fed4 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->I15,15,15,eskf->I15_data);
 8002470:	220f      	movs	r2, #15
 8002472:	f504 589a 	add.w	r8, r4, #4928	; 0x1340
 8002476:	f108 081c 	add.w	r8, r8, #28
 800247a:	f504 539b 	add.w	r3, r4, #4960	; 0x1360
 800247e:	4611      	mov	r1, r2
 8002480:	4640      	mov	r0, r8
 8002482:	3304      	adds	r3, #4
	arm_mat_init_f32(&eskf->g,3,1,eskf->g_data);
 8002484:	f504 57b7 	add.w	r7, r4, #5856	; 0x16e0
	arm_mat_init_f32(&eskf->I15,15,15,eskf->I15_data);
 8002488:	f004 fec6 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->g,3,1,eskf->g_data);
 800248c:	3708      	adds	r7, #8
 800248e:	f504 53b7 	add.w	r3, r4, #5856	; 0x16e0
 8002492:	3310      	adds	r3, #16
 8002494:	2201      	movs	r2, #1
 8002496:	2103      	movs	r1, #3
 8002498:	4638      	mov	r0, r7
 800249a:	f004 febd 	bl	8007218 <arm_mat_init_f32>

	eye(&eskf->I3);
 800249e:	9800      	ldr	r0, [sp, #0]
 80024a0:	f000 fa94 	bl	80029cc <eye>
	eye(&eskf->I12);
 80024a4:	4630      	mov	r0, r6
 80024a6:	f000 fa91 	bl	80029cc <eye>
	eye(&eskf->I15);
 80024aa:	4640      	mov	r0, r8
 80024ac:	f000 fa8e 	bl	80029cc <eye>
	zeros(&eskf->g);	eskf->g_data[2] = -9.81;
 80024b0:	4638      	mov	r0, r7
 80024b2:	f000 fa83 	bl	80029bc <zeros>
 80024b6:	f241 63f8 	movw	r3, #5880	; 0x16f8
 80024ba:	4af1      	ldr	r2, [pc, #964]	; (8002880 <ESKF_new+0x44c>)

	//Nominal states
	arm_mat_init_f32(&eskf->p,3,1,eskf->p_data);
 80024bc:	f104 0a0c 	add.w	sl, r4, #12
	zeros(&eskf->g);	eskf->g_data[2] = -9.81;
 80024c0:	50e2      	str	r2, [r4, r3]
	arm_mat_init_f32(&eskf->v,3,1,eskf->v_data);
 80024c2:	f104 0920 	add.w	r9, r4, #32
	arm_mat_init_f32(&eskf->p,3,1,eskf->p_data);
 80024c6:	f104 0314 	add.w	r3, r4, #20
 80024ca:	4650      	mov	r0, sl
 80024cc:	2201      	movs	r2, #1
 80024ce:	2103      	movs	r1, #3
 80024d0:	f004 fea2 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->q,4,1,eskf->q_data);
 80024d4:	f104 0834 	add.w	r8, r4, #52	; 0x34
	arm_mat_init_f32(&eskf->v,3,1,eskf->v_data);
 80024d8:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80024dc:	4648      	mov	r0, r9
 80024de:	2201      	movs	r2, #1
 80024e0:	2103      	movs	r1, #3
 80024e2:	f004 fe99 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->q,4,1,eskf->q_data);
 80024e6:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80024ea:	4640      	mov	r0, r8
 80024ec:	2201      	movs	r2, #1
 80024ee:	2104      	movs	r1, #4
 80024f0:	f004 fe92 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->R,3,3,eskf->R_data);
 80024f4:	2203      	movs	r2, #3
 80024f6:	f104 0b4c 	add.w	fp, r4, #76	; 0x4c
 80024fa:	f104 0354 	add.w	r3, r4, #84	; 0x54
 80024fe:	4611      	mov	r1, r2
 8002500:	4658      	mov	r0, fp
 8002502:	f004 fe89 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->ab,3,1,eskf->ab_data);
 8002506:	f104 0378 	add.w	r3, r4, #120	; 0x78
 800250a:	9301      	str	r3, [sp, #4]
	arm_mat_init_f32(&eskf->wb,3,1,eskf->wb_data);
 800250c:	f104 078c 	add.w	r7, r4, #140	; 0x8c
	arm_mat_init_f32(&eskf->ab,3,1,eskf->ab_data);
 8002510:	f104 0380 	add.w	r3, r4, #128	; 0x80
 8002514:	9801      	ldr	r0, [sp, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	2103      	movs	r1, #3
 800251a:	f004 fe7d 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->wb,3,1,eskf->wb_data);
 800251e:	2103      	movs	r1, #3
 8002520:	f104 0394 	add.w	r3, r4, #148	; 0x94
 8002524:	2201      	movs	r2, #1
 8002526:	4638      	mov	r0, r7
 8002528:	f004 fe76 	bl	8007218 <arm_mat_init_f32>

	zeros(&eskf->p);
 800252c:	4650      	mov	r0, sl
 800252e:	f000 fa45 	bl	80029bc <zeros>
	zeros(&eskf->v);
 8002532:	4648      	mov	r0, r9
 8002534:	f000 fa42 	bl	80029bc <zeros>
	zeros(&eskf->q);eskf->q.pData[0] = 1.0;//q = [1,0,0,0]'
 8002538:	4640      	mov	r0, r8
 800253a:	f000 fa3f 	bl	80029bc <zeros>
 800253e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002542:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	eye(&eskf->R);
 8002544:	4658      	mov	r0, fp
	zeros(&eskf->q);eskf->q.pData[0] = 1.0;//q = [1,0,0,0]'
 8002546:	601a      	str	r2, [r3, #0]
	eye(&eskf->R);
 8002548:	f000 fa40 	bl	80029cc <eye>
	zeros(&eskf->ab);
 800254c:	9801      	ldr	r0, [sp, #4]
 800254e:	f000 fa35 	bl	80029bc <zeros>
	zeros(&eskf->wb);

	//Error states
	arm_mat_init_f32(&eskf->del_p,3,1,eskf->del_p_data);
 8002552:	f104 0ba0 	add.w	fp, r4, #160	; 0xa0
	zeros(&eskf->wb);
 8002556:	4638      	mov	r0, r7
 8002558:	f000 fa30 	bl	80029bc <zeros>
	arm_mat_init_f32(&eskf->del_v,3,1,eskf->del_v_data);
 800255c:	f104 0ab4 	add.w	sl, r4, #180	; 0xb4
	arm_mat_init_f32(&eskf->del_p,3,1,eskf->del_p_data);
 8002560:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
 8002564:	4658      	mov	r0, fp
 8002566:	2201      	movs	r2, #1
 8002568:	2103      	movs	r1, #3
 800256a:	f004 fe55 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->del_theta,3,1,eskf->del_theta_data);
 800256e:	f104 09c8 	add.w	r9, r4, #200	; 0xc8
	arm_mat_init_f32(&eskf->del_v,3,1,eskf->del_v_data);
 8002572:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 8002576:	4650      	mov	r0, sl
 8002578:	2201      	movs	r2, #1
 800257a:	2103      	movs	r1, #3
 800257c:	f004 fe4c 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->del_ab,3,1,eskf->del_ab_data);
 8002580:	f104 08dc 	add.w	r8, r4, #220	; 0xdc
	arm_mat_init_f32(&eskf->del_theta,3,1,eskf->del_theta_data);
 8002584:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
 8002588:	4648      	mov	r0, r9
 800258a:	2201      	movs	r2, #1
 800258c:	2103      	movs	r1, #3
 800258e:	f004 fe43 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->del_wb,3,1,eskf->del_wb_data);
 8002592:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
	arm_mat_init_f32(&eskf->del_ab,3,1,eskf->del_ab_data);
 8002596:	f104 03e4 	add.w	r3, r4, #228	; 0xe4
 800259a:	4640      	mov	r0, r8
 800259c:	2201      	movs	r2, #1
 800259e:	2103      	movs	r1, #3
 80025a0:	f004 fe3a 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->del_wb,3,1,eskf->del_wb_data);
 80025a4:	f104 03f8 	add.w	r3, r4, #248	; 0xf8
 80025a8:	2201      	movs	r2, #1
 80025aa:	2103      	movs	r1, #3
 80025ac:	4638      	mov	r0, r7
 80025ae:	f004 fe33 	bl	8007218 <arm_mat_init_f32>

	zeros(&eskf->del_p);
 80025b2:	4658      	mov	r0, fp
 80025b4:	f000 fa02 	bl	80029bc <zeros>
	zeros(&eskf->del_v);
 80025b8:	4650      	mov	r0, sl
 80025ba:	f000 f9ff 	bl	80029bc <zeros>
	zeros(&eskf->del_theta);
 80025be:	4648      	mov	r0, r9
 80025c0:	f000 f9fc 	bl	80029bc <zeros>
	zeros(&eskf->del_ab);
 80025c4:	4640      	mov	r0, r8
 80025c6:	f000 f9f9 	bl	80029bc <zeros>
	zeros(&eskf->del_wb);
 80025ca:	4638      	mov	r0, r7
 80025cc:	f000 f9f6 	bl	80029bc <zeros>

	//covariance matrix
	arm_mat_init_f32(&eskf->P,15,15,eskf->P_data);
 80025d0:	220f      	movs	r2, #15
 80025d2:	f504 7982 	add.w	r9, r4, #260	; 0x104
 80025d6:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 80025da:	4611      	mov	r1, r2
 80025dc:	4648      	mov	r0, r9
 80025de:	f004 fe1b 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->Q,12,12,eskf->Q_data);
 80025e2:	220c      	movs	r2, #12
 80025e4:	f504 6892 	add.w	r8, r4, #1168	; 0x490
 80025e8:	4611      	mov	r1, r2
 80025ea:	f504 6393 	add.w	r3, r4, #1176	; 0x498
 80025ee:	4640      	mov	r0, r8
 80025f0:	f004 fe12 	bl	8007218 <arm_mat_init_f32>

	//for simplicity
	float32_t* P = eskf->P.pData;

	zeros(&eskf->P);
 80025f4:	4648      	mov	r0, r9
	float32_t* P = eskf->P.pData;
 80025f6:	f8d4 7108 	ldr.w	r7, [r4, #264]	; 0x108
	zeros(&eskf->P);
 80025fa:	f000 f9df 	bl	80029bc <zeros>

	P[0] = P[16] = P[32] = P_INITIAL_COV;
 80025fe:	4ba1      	ldr	r3, [pc, #644]	; (8002884 <ESKF_new+0x450>)
	P[96] = P[112] = PR_INITIAL_COV;
	P[128] = Y_INITIAL_COV;
	P[144] = P[160] = P[176] = AB_INITIAL_COV;
	P[192] = P[208] = P[224] = WB_INITIAL_COV;

	zeros(&eskf->Q);//Value of Q depends on dt
 8002600:	4640      	mov	r0, r8
	P[0] = P[16] = P[32] = P_INITIAL_COV;
 8002602:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002606:	643b      	str	r3, [r7, #64]	; 0x40
 8002608:	603b      	str	r3, [r7, #0]
	P[48] = P[64] = P[80] = V_INITIAL_COV;
 800260a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800260e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002612:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	P[96] = P[112] = PR_INITIAL_COV;
 8002616:	4b9c      	ldr	r3, [pc, #624]	; (8002888 <ESKF_new+0x454>)

	arm_mat_init_f32(&eskf->V_GPS,3,3,eskf->V_GPS_data);
 8002618:	f504 68db 	add.w	r8, r4, #1752	; 0x6d8
	P[96] = P[112] = PR_INITIAL_COV;
 800261c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002620:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	P[128] = Y_INITIAL_COV;
 8002624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002628:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	P[144] = P[160] = P[176] = AB_INITIAL_COV;
 800262c:	4b97      	ldr	r3, [pc, #604]	; (800288c <ESKF_new+0x458>)
	zeros(&eskf->K_GPS);
	zeros(&eskf->K_MAG);

	//measurements
	arm_mat_init_f32(&eskf->am,3,1,eskf->am_data);
	arm_mat_init_f32(&eskf->wm,3,1,eskf->wm_data);
 800262e:	f504 5986 	add.w	r9, r4, #4288	; 0x10c0
	P[144] = P[160] = P[176] = AB_INITIAL_COV;
 8002632:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8002636:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 800263a:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
	P[192] = P[208] = P[224] = WB_INITIAL_COV;
 800263e:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 8002642:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 8002646:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
	zeros(&eskf->Q);//Value of Q depends on dt
 800264a:	f000 f9b7 	bl	80029bc <zeros>
	arm_mat_init_f32(&eskf->V_GPS,3,3,eskf->V_GPS_data);
 800264e:	2203      	movs	r2, #3
 8002650:	f504 63dc 	add.w	r3, r4, #1760	; 0x6e0
 8002654:	4611      	mov	r1, r2
 8002656:	4640      	mov	r0, r8
 8002658:	f004 fdde 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->V_MAG,3,3,eskf->V_MAG_data);
 800265c:	2203      	movs	r2, #3
 800265e:	f204 7704 	addw	r7, r4, #1796	; 0x704
 8002662:	4611      	mov	r1, r2
 8002664:	f204 730c 	addw	r3, r4, #1804	; 0x70c
 8002668:	4638      	mov	r0, r7
 800266a:	f004 fdd5 	bl	8007218 <arm_mat_init_f32>
	zeros(&eskf->V_GPS);
 800266e:	4640      	mov	r0, r8
 8002670:	f000 f9a4 	bl	80029bc <zeros>
	eskf->V_GPS.pData[0] = eskf->V_GPS.pData[4] = GPS_XY_INITIAL_COV;
 8002674:	f8d4 36dc 	ldr.w	r3, [r4, #1756]	; 0x6dc
 8002678:	4a85      	ldr	r2, [pc, #532]	; (8002890 <ESKF_new+0x45c>)
	zeros(&eskf->V_MAG);
 800267a:	4638      	mov	r0, r7
	eskf->V_GPS.pData[0] = eskf->V_GPS.pData[4] = GPS_XY_INITIAL_COV;
 800267c:	611a      	str	r2, [r3, #16]
 800267e:	601a      	str	r2, [r3, #0]
	eskf->V_GPS.pData[8] = GPS_Z_INITIAL_COV;
 8002680:	4a84      	ldr	r2, [pc, #528]	; (8002894 <ESKF_new+0x460>)
	arm_mat_init_f32(&eskf->Fx,15,15,eskf->Fx_data);
 8002682:	f504 68e6 	add.w	r8, r4, #1840	; 0x730
	eskf->V_GPS.pData[8] = GPS_Z_INITIAL_COV;
 8002686:	621a      	str	r2, [r3, #32]
	zeros(&eskf->V_MAG);
 8002688:	f000 f998 	bl	80029bc <zeros>
	eskf->V_MAG.pData[0] = eskf->V_MAG.pData[4] = eskf->V_MAG.pData[8] = MAG_INITIAL_COV;
 800268c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002690:	f8d4 3708 	ldr.w	r3, [r4, #1800]	; 0x708
	arm_mat_init_f32(&eskf->Fi,15,12,eskf->Fi_data);
 8002694:	f604 27bc 	addw	r7, r4, #2748	; 0xabc
	eskf->V_MAG.pData[0] = eskf->V_MAG.pData[4] = eskf->V_MAG.pData[8] = MAG_INITIAL_COV;
 8002698:	621a      	str	r2, [r3, #32]
 800269a:	611a      	str	r2, [r3, #16]
 800269c:	601a      	str	r2, [r3, #0]
	arm_mat_init_f32(&eskf->Fx,15,15,eskf->Fx_data);
 800269e:	220f      	movs	r2, #15
 80026a0:	f504 63e7 	add.w	r3, r4, #1848	; 0x738
 80026a4:	4611      	mov	r1, r2
 80026a6:	4640      	mov	r0, r8
 80026a8:	f004 fdb6 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->Fi,15,12,eskf->Fi_data);
 80026ac:	f604 23c4 	addw	r3, r4, #2756	; 0xac4
 80026b0:	220c      	movs	r2, #12
 80026b2:	210f      	movs	r1, #15
 80026b4:	4638      	mov	r0, r7
 80026b6:	f004 fdaf 	bl	8007218 <arm_mat_init_f32>
	eye(&eskf->Fx);//other part of Fx depends on dt
 80026ba:	4640      	mov	r0, r8
 80026bc:	f000 f986 	bl	80029cc <eye>
	zeros(&eskf->Fi);
 80026c0:	4638      	mov	r0, r7
 80026c2:	f000 f97b 	bl	80029bc <zeros>
	matcpy2(&eskf->Fi,&eskf->I12,3,0);
 80026c6:	462b      	mov	r3, r5
 80026c8:	4631      	mov	r1, r6
 80026ca:	4638      	mov	r0, r7
 80026cc:	2203      	movs	r2, #3
 80026ce:	f000 f994 	bl	80029fa <matcpy2>
	arm_mat_init_f32(&eskf->z_GPS,3,1,eskf->z_GPS_data);
 80026d2:	f604 539c 	addw	r3, r4, #3484	; 0xd9c
 80026d6:	f604 5094 	addw	r0, r4, #3476	; 0xd94
 80026da:	2201      	movs	r2, #1
 80026dc:	2103      	movs	r1, #3
 80026de:	f004 fd9b 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->H_GPS,3,15,eskf->H_GPS_data);
 80026e2:	f604 56bc 	addw	r6, r4, #3516	; 0xdbc
	arm_mat_init_f32(&eskf->z_MAG,3,1,eskf->z_MAG_data);
 80026e6:	f504 635b 	add.w	r3, r4, #3504	; 0xdb0
 80026ea:	f604 50a8 	addw	r0, r4, #3496	; 0xda8
 80026ee:	2201      	movs	r2, #1
 80026f0:	2103      	movs	r1, #3
 80026f2:	f004 fd91 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->H_MAG,3,15,eskf->H_MAG_data);
 80026f6:	f604 6778 	addw	r7, r4, #3704	; 0xe78
	arm_mat_init_f32(&eskf->H_GPS,3,15,eskf->H_GPS_data);
 80026fa:	f604 53c4 	addw	r3, r4, #3524	; 0xdc4
 80026fe:	4630      	mov	r0, r6
 8002700:	220f      	movs	r2, #15
 8002702:	2103      	movs	r1, #3
 8002704:	f004 fd88 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->H_MAG,3,15,eskf->H_MAG_data);
 8002708:	f504 6368 	add.w	r3, r4, #3712	; 0xe80
 800270c:	220f      	movs	r2, #15
 800270e:	2103      	movs	r1, #3
 8002710:	4638      	mov	r0, r7
 8002712:	f004 fd81 	bl	8007218 <arm_mat_init_f32>
	zeros(&eskf->H_GPS);
 8002716:	4630      	mov	r0, r6
 8002718:	f000 f950 	bl	80029bc <zeros>
	matcpy2(&eskf->H_GPS,&eskf->I3,0,0);
 800271c:	462b      	mov	r3, r5
 800271e:	462a      	mov	r2, r5
 8002720:	9900      	ldr	r1, [sp, #0]
 8002722:	4630      	mov	r0, r6
 8002724:	f000 f969 	bl	80029fa <matcpy2>
	arm_mat_init_f32(&eskf->K_GPS,15,3,eskf->K_GPS_data);
 8002728:	f604 7834 	addw	r8, r4, #3892	; 0xf34
	zeros(&eskf->H_MAG);//H_MAG depends on q
 800272c:	4638      	mov	r0, r7
 800272e:	f000 f945 	bl	80029bc <zeros>
	arm_mat_init_f32(&eskf->K_MAG,15,3,eskf->K_MAG_data);
 8002732:	f504 677f 	add.w	r7, r4, #4080	; 0xff0
	arm_mat_init_f32(&eskf->K_GPS,15,3,eskf->K_GPS_data);
 8002736:	f604 733c 	addw	r3, r4, #3900	; 0xf3c
 800273a:	4640      	mov	r0, r8
 800273c:	2203      	movs	r2, #3
 800273e:	210f      	movs	r1, #15
 8002740:	f004 fd6a 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->K_MAG,15,3,eskf->K_MAG_data);
 8002744:	f604 73f8 	addw	r3, r4, #4088	; 0xff8
 8002748:	2203      	movs	r2, #3
 800274a:	210f      	movs	r1, #15
 800274c:	4638      	mov	r0, r7
 800274e:	f004 fd63 	bl	8007218 <arm_mat_init_f32>
	zeros(&eskf->K_GPS);
 8002752:	4640      	mov	r0, r8
 8002754:	f000 f932 	bl	80029bc <zeros>
	arm_mat_init_f32(&eskf->am,3,1,eskf->am_data);
 8002758:	f504 5885 	add.w	r8, r4, #4256	; 0x10a0
	zeros(&eskf->K_MAG);
 800275c:	4638      	mov	r0, r7
 800275e:	f000 f92d 	bl	80029bc <zeros>
	arm_mat_init_f32(&eskf->am,3,1,eskf->am_data);
 8002762:	f108 080c 	add.w	r8, r8, #12
 8002766:	f504 5385 	add.w	r3, r4, #4256	; 0x10a0
 800276a:	4640      	mov	r0, r8
 800276c:	3314      	adds	r3, #20
 800276e:	2201      	movs	r2, #1
 8002770:	2103      	movs	r1, #3
 8002772:	f004 fd51 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->wm,3,1,eskf->wm_data);
 8002776:	464b      	mov	r3, r9
 8002778:	4648      	mov	r0, r9
 800277a:	3308      	adds	r3, #8
 800277c:	2201      	movs	r2, #1
 800277e:	2103      	movs	r1, #3
 8002780:	f004 fd4a 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->mm,3,1,eskf->mm_data);
 8002784:	464b      	mov	r3, r9
 8002786:	37e4      	adds	r7, #228	; 0xe4
 8002788:	331c      	adds	r3, #28
 800278a:	2201      	movs	r2, #1
 800278c:	2103      	movs	r1, #3
 800278e:	4638      	mov	r0, r7
 8002790:	f004 fd42 	bl	8007218 <arm_mat_init_f32>

	zeros(&eskf->am);
 8002794:	4640      	mov	r0, r8
 8002796:	f000 f911 	bl	80029bc <zeros>
	zeros(&eskf->wm);
 800279a:	4648      	mov	r0, r9
 800279c:	f000 f90e 	bl	80029bc <zeros>
	zeros(&eskf->mm);
 80027a0:	4638      	mov	r0, r7
 80027a2:	f000 f90b 	bl	80029bc <zeros>

	//Initialization variables
	eskf->IMU_init_count = 0;
 80027a6:	f241 63fc 	movw	r3, #5884	; 0x16fc
 80027aa:	50e5      	str	r5, [r4, r3]
	eskf->MAG_init_count = 0;
 80027ac:	f504 53b8 	add.w	r3, r4, #5888	; 0x1700
 80027b0:	601d      	str	r5, [r3, #0]
	eskf->GPS_init_count = 0;
 80027b2:	f241 7304 	movw	r3, #5892	; 0x1704

	arm_mat_init_f32(&eskf->am_init,3,1,eskf->am_init_data);
 80027b6:	f504 58b8 	add.w	r8, r4, #5888	; 0x1700
	eskf->GPS_init_count = 0;
 80027ba:	50e5      	str	r5, [r4, r3]
	arm_mat_init_f32(&eskf->am_init,3,1,eskf->am_init_data);
 80027bc:	f108 0808 	add.w	r8, r8, #8
 80027c0:	f504 53b8 	add.w	r3, r4, #5888	; 0x1700
 80027c4:	4640      	mov	r0, r8
 80027c6:	3310      	adds	r3, #16
 80027c8:	2201      	movs	r2, #1
 80027ca:	2103      	movs	r1, #3
	arm_mat_init_f32(&eskf->mm_init,3,1,eskf->mm_init_data);
 80027cc:	f504 57b8 	add.w	r7, r4, #5888	; 0x1700
	arm_mat_init_f32(&eskf->am_init,3,1,eskf->am_init_data);
 80027d0:	f004 fd22 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->mm_init,3,1,eskf->mm_init_data);
 80027d4:	371c      	adds	r7, #28
 80027d6:	f504 53b9 	add.w	r3, r4, #5920	; 0x1720
 80027da:	4638      	mov	r0, r7
 80027dc:	3304      	adds	r3, #4
 80027de:	2201      	movs	r2, #1
 80027e0:	2103      	movs	r1, #3
	arm_mat_init_f32(&eskf->m_ref,3,1,eskf->m_ref_data);
 80027e2:	f504 55ba 	add.w	r5, r4, #5952	; 0x1740
	arm_mat_init_f32(&eskf->mm_init,3,1,eskf->mm_init_data);
 80027e6:	f004 fd17 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->m_ref,3,1,eskf->m_ref_data);
 80027ea:	3508      	adds	r5, #8
 80027ec:	f504 53ba 	add.w	r3, r4, #5952	; 0x1740
 80027f0:	3310      	adds	r3, #16
 80027f2:	2201      	movs	r2, #1
 80027f4:	2103      	movs	r1, #3
 80027f6:	4628      	mov	r0, r5
 80027f8:	f004 fd0e 	bl	8007218 <arm_mat_init_f32>

	zeros(&eskf->am_init);
 80027fc:	4640      	mov	r0, r8
 80027fe:	f000 f8dd 	bl	80029bc <zeros>
	zeros(&eskf->mm_init);
 8002802:	4638      	mov	r0, r7
 8002804:	f000 f8da 	bl	80029bc <zeros>
	zeros(&eskf->m_ref);
 8002808:	4628      	mov	r0, r5
 800280a:	f000 f8d7 	bl	80029bc <zeros>

	//time
	eskf->last_t = 0;
 800280e:	2000      	movs	r0, #0
 8002810:	2100      	movs	r1, #0
 8002812:	f504 53bb 	add.w	r3, r4, #5984	; 0x1760
 8002816:	e9c3 0100 	strd	r0, r1, [r3]

	//AUX variables necessary during computation
	arm_mat_init_f32(&eskf->am_unbias,3,1,eskf->am_unbias_data);
 800281a:	f504 50bb 	add.w	r0, r4, #5984	; 0x1760
 800281e:	3310      	adds	r3, #16
 8002820:	2201      	movs	r2, #1
 8002822:	2103      	movs	r1, #3
 8002824:	3008      	adds	r0, #8
 8002826:	f004 fcf7 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->wm_unbias,3,1,eskf->wm_unbias_data);
 800282a:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 800282e:	f504 50bb 	add.w	r0, r4, #5984	; 0x1760
 8002832:	3304      	adds	r3, #4
 8002834:	2201      	movs	r2, #1
 8002836:	2103      	movs	r1, #3
 8002838:	301c      	adds	r0, #28
 800283a:	f004 fced 	bl	8007218 <arm_mat_init_f32>

	arm_mat_init_f32(&eskf->del_q,4,1,eskf->del_q_data);
 800283e:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8002842:	f504 50bc 	add.w	r0, r4, #6016	; 0x1780
 8002846:	3318      	adds	r3, #24
 8002848:	2201      	movs	r2, #1
 800284a:	2104      	movs	r1, #4
 800284c:	3010      	adds	r0, #16
 800284e:	f004 fce3 	bl	8007218 <arm_mat_init_f32>

	arm_mat_init_f32(&eskf->R_hat_am_unbias,3,3,eskf->R_hat_am_unbias_data);
 8002852:	2203      	movs	r2, #3
 8002854:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8002858:	f504 50bd 	add.w	r0, r4, #6048	; 0x17a0
 800285c:	4611      	mov	r1, r2
 800285e:	3310      	adds	r3, #16
 8002860:	3008      	adds	r0, #8
 8002862:	f004 fcd9 	bl	8007218 <arm_mat_init_f32>

	arm_mat_init_f32(&eskf->Fx_T,15,15,eskf->Fx_T_data);
 8002866:	220f      	movs	r2, #15
 8002868:	f504 53be 	add.w	r3, r4, #6080	; 0x17c0
 800286c:	f504 50be 	add.w	r0, r4, #6080	; 0x17c0
 8002870:	4611      	mov	r1, r2
 8002872:	331c      	adds	r3, #28
 8002874:	3014      	adds	r0, #20
 8002876:	f004 fccf 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->Fx_P,15,15,eskf->Fx_P_data);
 800287a:	220f      	movs	r2, #15
 800287c:	e00c      	b.n	8002898 <ESKF_new+0x464>
 800287e:	bf00      	nop
 8002880:	c11cf5c3 	.word	0xc11cf5c3
 8002884:	42c80000 	.word	0x42c80000
 8002888:	3d23d70a 	.word	0x3d23d70a
 800288c:	39d1b717 	.word	0x39d1b717
 8002890:	3fe7ae14 	.word	0x3fe7ae14
 8002894:	408a3d71 	.word	0x408a3d71
 8002898:	f504 53db 	add.w	r3, r4, #7008	; 0x1b60
 800289c:	4611      	mov	r1, r2
 800289e:	f504 50db 	add.w	r0, r4, #7008	; 0x1b60
 80028a2:	3308      	adds	r3, #8
 80028a4:	f004 fcb8 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->P_temp,15,15,eskf->P_temp_data);
 80028a8:	220f      	movs	r2, #15
 80028aa:	f504 5312 	add.w	r3, r4, #9344	; 0x2480
 80028ae:	f504 5012 	add.w	r0, r4, #9344	; 0x2480
 80028b2:	4611      	mov	r1, r2
 80028b4:	3324      	adds	r3, #36	; 0x24
 80028b6:	301c      	adds	r0, #28
 80028b8:	f004 fcae 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->Fi_T,12,15,eskf->Fi_T_data);
 80028bc:	210c      	movs	r1, #12
 80028be:	f504 53f7 	add.w	r3, r4, #7904	; 0x1ee0
 80028c2:	f504 50f7 	add.w	r0, r4, #7904	; 0x1ee0
 80028c6:	4408      	add	r0, r1
 80028c8:	3314      	adds	r3, #20
 80028ca:	220f      	movs	r2, #15
 80028cc:	f004 fca4 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->Fi_Q,15,12,eskf->Fi_Q_data);
 80028d0:	f504 5307 	add.w	r3, r4, #8640	; 0x21c0
 80028d4:	f504 5007 	add.w	r0, r4, #8640	; 0x21c0
 80028d8:	330c      	adds	r3, #12
 80028da:	220c      	movs	r2, #12
 80028dc:	210f      	movs	r1, #15
 80028de:	3004      	adds	r0, #4

	//MAG update related variables

	//GPS update related variables
	arm_mat_init_f32(&eskf->H_GPS_T,15,3,eskf->H_GPS_T_data);
 80028e0:	f504 5520 	add.w	r5, r4, #10240	; 0x2800
	arm_mat_init_f32(&eskf->Fi_Q,15,12,eskf->Fi_Q_data);
 80028e4:	f004 fc98 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->H_GPS_T,15,3,eskf->H_GPS_T_data);
 80028e8:	3528      	adds	r5, #40	; 0x28
 80028ea:	f504 5320 	add.w	r3, r4, #10240	; 0x2800
 80028ee:	3330      	adds	r3, #48	; 0x30
 80028f0:	2203      	movs	r2, #3
 80028f2:	4628      	mov	r0, r5
 80028f4:	210f      	movs	r1, #15
 80028f6:	f004 fc8f 	bl	8007218 <arm_mat_init_f32>
	arm_mat_trans_f32(&eskf->H_GPS,&eskf->H_GPS_T);
 80028fa:	4629      	mov	r1, r5
 80028fc:	4630      	mov	r0, r6
 80028fe:	f004 fc33 	bl	8007168 <arm_mat_trans_f32>

	arm_mat_init_f32(&eskf->COV_GPS,3,3,eskf->COV_GPS_data);
 8002902:	2203      	movs	r2, #3
 8002904:	f504 5323 	add.w	r3, r4, #10432	; 0x28c0
 8002908:	f504 5023 	add.w	r0, r4, #10432	; 0x28c0
 800290c:	4611      	mov	r1, r2
 800290e:	332c      	adds	r3, #44	; 0x2c
 8002910:	3024      	adds	r0, #36	; 0x24
 8002912:	f004 fc81 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->inv_COV_GPS,3,3,eskf->inv_COV_GPS_data);
 8002916:	2203      	movs	r2, #3
 8002918:	f504 5324 	add.w	r3, r4, #10496	; 0x2900
 800291c:	f504 5024 	add.w	r0, r4, #10496	; 0x2900
 8002920:	4611      	mov	r1, r2
 8002922:	3318      	adds	r3, #24
 8002924:	3010      	adds	r0, #16
 8002926:	f004 fc77 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->P_H_GPS_T,15,3,eskf->P_H_GPS_T_data);
 800292a:	f504 5325 	add.w	r3, r4, #10560	; 0x2940
 800292e:	f504 5024 	add.w	r0, r4, #10496	; 0x2900
 8002932:	3304      	adds	r3, #4
 8002934:	2203      	movs	r2, #3
 8002936:	210f      	movs	r1, #15
 8002938:	303c      	adds	r0, #60	; 0x3c
 800293a:	f004 fc6d 	bl	8007218 <arm_mat_init_f32>

	arm_mat_init_f32(&eskf->z_hx_GPS,3,1,eskf->z_hx_GPS_data);
 800293e:	f504 5027 	add.w	r0, r4, #10688	; 0x29c0
 8002942:	f504 5328 	add.w	r3, r4, #10752	; 0x2a00
 8002946:	2201      	movs	r2, #1
 8002948:	2103      	movs	r1, #3
 800294a:	3038      	adds	r0, #56	; 0x38
 800294c:	f004 fc64 	bl	8007218 <arm_mat_init_f32>

	arm_mat_init_f32(&eskf->I_KH_GPS,15,15,eskf->I_KH_GPS_data);
 8002950:	220f      	movs	r2, #15
 8002952:	f504 5328 	add.w	r3, r4, #10752	; 0x2a00
 8002956:	f504 5028 	add.w	r0, r4, #10752	; 0x2a00
 800295a:	4611      	mov	r1, r2
 800295c:	3314      	adds	r3, #20
 800295e:	300c      	adds	r0, #12
 8002960:	f004 fc5a 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->I_KH_GPS_T,15,15,eskf->I_KH_GPS_T_data);
 8002964:	220f      	movs	r2, #15
 8002966:	f504 5328 	add.w	r3, r4, #10752	; 0x2a00
 800296a:	f504 5028 	add.w	r0, r4, #10752	; 0x2a00
 800296e:	4611      	mov	r1, r2
 8002970:	3320      	adds	r3, #32
 8002972:	3018      	adds	r0, #24
 8002974:	f004 fc50 	bl	8007218 <arm_mat_init_f32>

	arm_mat_init_f32(&eskf->KV_GPS,15,3,eskf->KV_GPS_data);
 8002978:	f504 5328 	add.w	r3, r4, #10752	; 0x2a00
 800297c:	f504 5028 	add.w	r0, r4, #10752	; 0x2a00
 8002980:	332c      	adds	r3, #44	; 0x2c
 8002982:	2203      	movs	r2, #3
 8002984:	210f      	movs	r1, #15
 8002986:	3024      	adds	r0, #36	; 0x24
 8002988:	f004 fc46 	bl	8007218 <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->K_GPS_T,3,15,eskf->K_GPS_T_data);
 800298c:	f504 532b 	add.w	r3, r4, #10944	; 0x2ac0
 8002990:	f504 502b 	add.w	r0, r4, #10944	; 0x2ac0
 8002994:	3328      	adds	r3, #40	; 0x28
 8002996:	220f      	movs	r2, #15
 8002998:	2103      	movs	r1, #3
 800299a:	3020      	adds	r0, #32
 800299c:	f004 fc3c 	bl	8007218 <arm_mat_init_f32>


	//shared between MAG and GPS update
	arm_mat_init_f32(&eskf->del_x,15,1,eskf->del_x_data);
 80029a0:	2201      	movs	r2, #1
 80029a2:	210f      	movs	r1, #15
 80029a4:	f504 532e 	add.w	r3, r4, #11136	; 0x2b80
 80029a8:	f504 502e 	add.w	r0, r4, #11136	; 0x2b80
 80029ac:	3324      	adds	r3, #36	; 0x24
 80029ae:	301c      	adds	r0, #28
}
 80029b0:	b003      	add	sp, #12
 80029b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	arm_mat_init_f32(&eskf->del_x,15,1,eskf->del_x_data);
 80029b6:	f004 bc2f 	b.w	8007218 <arm_mat_init_f32>
 80029ba:	bf00      	nop

080029bc <zeros>:
#include "math.h"

#define MATH_UTILS_SIZE_CHECK

void zeros(arm_matrix_instance_f32* mat){
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 80029bc:	8843      	ldrh	r3, [r0, #2]
 80029be:	8802      	ldrh	r2, [r0, #0]
 80029c0:	2100      	movs	r1, #0
 80029c2:	435a      	muls	r2, r3
 80029c4:	6840      	ldr	r0, [r0, #4]
 80029c6:	0092      	lsls	r2, r2, #2
 80029c8:	f004 bc90 	b.w	80072ec <memset>

080029cc <eye>:
}

void eye(arm_matrix_instance_f32* mat){
 80029cc:	b538      	push	{r3, r4, r5, lr}

#ifdef MATH_UTILS_SIZE_CHECK
	if (mat->numCols != mat->numRows){
 80029ce:	8842      	ldrh	r2, [r0, #2]
 80029d0:	8803      	ldrh	r3, [r0, #0]
void eye(arm_matrix_instance_f32* mat){
 80029d2:	4604      	mov	r4, r0
	if (mat->numCols != mat->numRows){
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d10a      	bne.n	80029ee <eye+0x22>
		return;
	}
#endif
	zeros(mat);
 80029d8:	f7ff fff0 	bl	80029bc <zeros>
	for(int i = 0; i < (mat->numCols * mat->numRows); i += (mat->numCols+1)){
 80029dc:	8863      	ldrh	r3, [r4, #2]
 80029de:	8821      	ldrh	r1, [r4, #0]
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	4359      	muls	r1, r3
		mat->pData[i] = 1;
 80029e4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
	for(int i = 0; i < (mat->numCols * mat->numRows); i += (mat->numCols+1)){
 80029e8:	2300      	movs	r3, #0
 80029ea:	428b      	cmp	r3, r1
 80029ec:	db00      	blt.n	80029f0 <eye+0x24>
	}
}
 80029ee:	bd38      	pop	{r3, r4, r5, pc}
		mat->pData[i] = 1;
 80029f0:	6865      	ldr	r5, [r4, #4]
 80029f2:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
	for(int i = 0; i < (mat->numCols * mat->numRows); i += (mat->numCols+1)){
 80029f6:	4413      	add	r3, r2
 80029f8:	e7f7      	b.n	80029ea <eye+0x1e>

080029fa <matcpy2>:
	memcpy(mat2->pData,mat1->pData,mat1->numCols * mat1->numRows * sizeof(float32_t));
}


//copy mat2 to mat1 starting at i,j at mat1.
void matcpy2(arm_matrix_instance_f32* mat1,arm_matrix_instance_f32* mat2,int i, int j){
 80029fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fc:	4607      	mov	r7, r0
 80029fe:	460e      	mov	r6, r1

	int i2;//row ind in mat2
	int k = i * mat1->numCols + j;

	for(i2 = 0; i2 < mat2->numRows; i2++){
 8002a00:	2500      	movs	r5, #0
	int k = i * mat1->numCols + j;
 8002a02:	8844      	ldrh	r4, [r0, #2]
 8002a04:	fb02 3404 	mla	r4, r2, r4, r3
	for(i2 = 0; i2 < mat2->numRows; i2++){
 8002a08:	8833      	ldrh	r3, [r6, #0]
 8002a0a:	42ab      	cmp	r3, r5
 8002a0c:	dc00      	bgt.n	8002a10 <matcpy2+0x16>
		memcpy(mat1->pData+k,mat2->pData + (i2 * mat2->numCols),mat2->numCols*sizeof(float32_t));
		k += mat1->numCols;
	}
}
 8002a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(mat1->pData+k,mat2->pData + (i2 * mat2->numCols),mat2->numCols*sizeof(float32_t));
 8002a10:	8872      	ldrh	r2, [r6, #2]
 8002a12:	6873      	ldr	r3, [r6, #4]
 8002a14:	fb05 f102 	mul.w	r1, r5, r2
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8002a1e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8002a22:	0092      	lsls	r2, r2, #2
 8002a24:	f004 fc57 	bl	80072d6 <memcpy>
		k += mat1->numCols;
 8002a28:	887b      	ldrh	r3, [r7, #2]
	for(i2 = 0; i2 < mat2->numRows; i2++){
 8002a2a:	3501      	adds	r5, #1
		k += mat1->numCols;
 8002a2c:	441c      	add	r4, r3
 8002a2e:	e7eb      	b.n	8002a08 <matcpy2+0xe>

08002a30 <calibrate_mag_reading>:
#include "dataProcessing.h"
#include "string.h"
#include "stdlib.h"
#include "math.h"

void calibrate_mag_reading(){
 8002a30:	e92d 4fd3 	stmdb	sp!, {r0, r1, r4, r6, r7, r8, r9, sl, fp, lr}

	double m[3]; //magnatic readings minus offset

	m[0] = XIMU_sens.mx - MAG_X_OFFSET;
 8002a34:	a34a      	add	r3, pc, #296	; (adr r3, 8002b60 <calibrate_mag_reading+0x130>)
 8002a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3a:	4c61      	ldr	r4, [pc, #388]	; (8002bc0 <calibrate_mag_reading+0x190>)
 8002a3c:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
 8002a40:	f7fd fb92 	bl	8000168 <__aeabi_dsub>
	m[1] = XIMU_sens.my - MAG_Y_OFFSET;
 8002a44:	a348      	add	r3, pc, #288	; (adr r3, 8002b68 <calibrate_mag_reading+0x138>)
 8002a46:	e9d3 2300 	ldrd	r2, r3, [r3]
	m[0] = XIMU_sens.mx - MAG_X_OFFSET;
 8002a4a:	4606      	mov	r6, r0
 8002a4c:	460f      	mov	r7, r1
	m[1] = XIMU_sens.my - MAG_Y_OFFSET;
 8002a4e:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
 8002a52:	f7fd fb89 	bl	8000168 <__aeabi_dsub>
	m[2] = XIMU_sens.mz - MAG_Z_OFFSET;
 8002a56:	a346      	add	r3, pc, #280	; (adr r3, 8002b70 <calibrate_mag_reading+0x140>)
 8002a58:	e9d3 2300 	ldrd	r2, r3, [r3]
	m[1] = XIMU_sens.my - MAG_Y_OFFSET;
 8002a5c:	4682      	mov	sl, r0
 8002a5e:	468b      	mov	fp, r1
	m[2] = XIMU_sens.mz - MAG_Z_OFFSET;
 8002a60:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
 8002a64:	f7fd fb82 	bl	800016c <__adddf3>

	XIMU_sens.mx = MAG_TRANSF_11*m[0] + MAG_TRANSF_12*m[1] + MAG_TRANSF_13*m[2];
 8002a68:	a343      	add	r3, pc, #268	; (adr r3, 8002b78 <calibrate_mag_reading+0x148>)
 8002a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
	m[2] = XIMU_sens.mz - MAG_Z_OFFSET;
 8002a6e:	e9cd 0100 	strd	r0, r1, [sp]
	XIMU_sens.mx = MAG_TRANSF_11*m[0] + MAG_TRANSF_12*m[1] + MAG_TRANSF_13*m[2];
 8002a72:	4630      	mov	r0, r6
 8002a74:	4639      	mov	r1, r7
 8002a76:	f7fd fd2f 	bl	80004d8 <__aeabi_dmul>
 8002a7a:	a341      	add	r3, pc, #260	; (adr r3, 8002b80 <calibrate_mag_reading+0x150>)
 8002a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a80:	4680      	mov	r8, r0
 8002a82:	4689      	mov	r9, r1
 8002a84:	4650      	mov	r0, sl
 8002a86:	4659      	mov	r1, fp
 8002a88:	f7fd fd26 	bl	80004d8 <__aeabi_dmul>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4640      	mov	r0, r8
 8002a92:	4649      	mov	r1, r9
 8002a94:	f7fd fb6a 	bl	800016c <__adddf3>
 8002a98:	a33b      	add	r3, pc, #236	; (adr r3, 8002b88 <calibrate_mag_reading+0x158>)
 8002a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9e:	4680      	mov	r8, r0
 8002aa0:	4689      	mov	r9, r1
 8002aa2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002aa6:	f7fd fd17 	bl	80004d8 <__aeabi_dmul>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4640      	mov	r0, r8
 8002ab0:	4649      	mov	r1, r9
 8002ab2:	f7fd fb5b 	bl	800016c <__adddf3>
	XIMU_sens.my = MAG_TRANSF_21*m[0] + MAG_TRANSF_22*m[1] + MAG_TRANSF_23*m[2];
 8002ab6:	a336      	add	r3, pc, #216	; (adr r3, 8002b90 <calibrate_mag_reading+0x160>)
 8002ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
	XIMU_sens.mx = MAG_TRANSF_11*m[0] + MAG_TRANSF_12*m[1] + MAG_TRANSF_13*m[2];
 8002abc:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
	XIMU_sens.my = MAG_TRANSF_21*m[0] + MAG_TRANSF_22*m[1] + MAG_TRANSF_23*m[2];
 8002ac0:	4630      	mov	r0, r6
 8002ac2:	4639      	mov	r1, r7
 8002ac4:	f7fd fd08 	bl	80004d8 <__aeabi_dmul>
 8002ac8:	a333      	add	r3, pc, #204	; (adr r3, 8002b98 <calibrate_mag_reading+0x168>)
 8002aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ace:	4680      	mov	r8, r0
 8002ad0:	4689      	mov	r9, r1
 8002ad2:	4650      	mov	r0, sl
 8002ad4:	4659      	mov	r1, fp
 8002ad6:	f7fd fcff 	bl	80004d8 <__aeabi_dmul>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4640      	mov	r0, r8
 8002ae0:	4649      	mov	r1, r9
 8002ae2:	f7fd fb43 	bl	800016c <__adddf3>
 8002ae6:	a32e      	add	r3, pc, #184	; (adr r3, 8002ba0 <calibrate_mag_reading+0x170>)
 8002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aec:	4680      	mov	r8, r0
 8002aee:	4689      	mov	r9, r1
 8002af0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002af4:	f7fd fcf0 	bl	80004d8 <__aeabi_dmul>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4640      	mov	r0, r8
 8002afe:	4649      	mov	r1, r9
 8002b00:	f7fd fb34 	bl	800016c <__adddf3>
	XIMU_sens.mz = MAG_TRANSF_31*m[0] + MAG_TRANSF_32*m[1] + MAG_TRANSF_33*m[2];
 8002b04:	a328      	add	r3, pc, #160	; (adr r3, 8002ba8 <calibrate_mag_reading+0x178>)
 8002b06:	e9d3 2300 	ldrd	r2, r3, [r3]
	XIMU_sens.my = MAG_TRANSF_21*m[0] + MAG_TRANSF_22*m[1] + MAG_TRANSF_23*m[2];
 8002b0a:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
	XIMU_sens.mz = MAG_TRANSF_31*m[0] + MAG_TRANSF_32*m[1] + MAG_TRANSF_33*m[2];
 8002b0e:	4630      	mov	r0, r6
 8002b10:	4639      	mov	r1, r7
 8002b12:	f7fd fce1 	bl	80004d8 <__aeabi_dmul>
 8002b16:	a326      	add	r3, pc, #152	; (adr r3, 8002bb0 <calibrate_mag_reading+0x180>)
 8002b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1c:	4606      	mov	r6, r0
 8002b1e:	460f      	mov	r7, r1
 8002b20:	4650      	mov	r0, sl
 8002b22:	4659      	mov	r1, fp
 8002b24:	f7fd fcd8 	bl	80004d8 <__aeabi_dmul>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4630      	mov	r0, r6
 8002b2e:	4639      	mov	r1, r7
 8002b30:	f7fd fb1c 	bl	800016c <__adddf3>
 8002b34:	a320      	add	r3, pc, #128	; (adr r3, 8002bb8 <calibrate_mag_reading+0x188>)
 8002b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3a:	4606      	mov	r6, r0
 8002b3c:	460f      	mov	r7, r1
 8002b3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002b42:	f7fd fcc9 	bl	80004d8 <__aeabi_dmul>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4630      	mov	r0, r6
 8002b4c:	4639      	mov	r1, r7
 8002b4e:	f7fd fb0d 	bl	800016c <__adddf3>
 8002b52:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
}
 8002b56:	b002      	add	sp, #8
 8002b58:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 8002b5c:	f3af 8000 	nop.w
 8002b60:	810624dd 	.word	0x810624dd
 8002b64:	40615795 	.word	0x40615795
 8002b68:	189374bc 	.word	0x189374bc
 8002b6c:	40706804 	.word	0x40706804
 8002b70:	fdf3b646 	.word	0xfdf3b646
 8002b74:	405268d4 	.word	0x405268d4
 8002b78:	51eb851f 	.word	0x51eb851f
 8002b7c:	3ff31eb8 	.word	0x3ff31eb8
 8002b80:	e5604189 	.word	0xe5604189
 8002b84:	bfab22d0 	.word	0xbfab22d0
 8002b88:	53f7ced9 	.word	0x53f7ced9
 8002b8c:	3faba5e3 	.word	0x3faba5e3
 8002b90:	020c49ba 	.word	0x020c49ba
 8002b94:	bfa6872b 	.word	0xbfa6872b
 8002b98:	78d4fdf4 	.word	0x78d4fdf4
 8002b9c:	3ff326e9 	.word	0x3ff326e9
 8002ba0:	47ae147b 	.word	0x47ae147b
 8002ba4:	3f847ae1 	.word	0x3f847ae1
 8002ba8:	76c8b439 	.word	0x76c8b439
 8002bac:	bf9a9fbe 	.word	0xbf9a9fbe
 8002bb0:	76c8b439 	.word	0x76c8b439
 8002bb4:	bf8a9fbe 	.word	0xbf8a9fbe
 8002bb8:	a5e353f8 	.word	0xa5e353f8
 8002bbc:	3ff2c49b 	.word	0x3ff2c49b
 8002bc0:	200005f8 	.word	0x200005f8

08002bc4 <calc_absolute_acceleration>:

void calc_absolute_acceleration() {
 8002bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	double ax = XIMU_sens.ax,	ay = XIMU_sens.ay,	az = XIMU_sens.az;
 8002bc8:	4bc0      	ldr	r3, [pc, #768]	; (8002ecc <calc_absolute_acceleration+0x308>)
void calc_absolute_acceleration() {
 8002bca:	b09d      	sub	sp, #116	; 0x74
	double q0 = XIMU_sens.q0,	q1 = XIMU_sens.q1,	q2 = XIMU_sens.q2,	q3 = XIMU_sens.q3;
 8002bcc:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
 8002bd0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002bd4:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 8002bd8:	e9d3 8900 	ldrd	r8, r9, [r3]
	double ax = XIMU_sens.ax,	ay = XIMU_sens.ay,	az = XIMU_sens.az;
 8002bdc:	e9d3 1208 	ldrd	r1, r2, [r3, #32]
	double q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3, norm_2;
	q0q0 = q0 * q0;
 8002be0:	4640      	mov	r0, r8
	double ax = XIMU_sens.ax,	ay = XIMU_sens.ay,	az = XIMU_sens.az;
 8002be2:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8002be6:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 8002bea:	e9cd 1200 	strd	r1, r2, [sp]
 8002bee:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
	q0q0 = q0 * q0;
 8002bf2:	464b      	mov	r3, r9
	double ax = XIMU_sens.ax,	ay = XIMU_sens.ay,	az = XIMU_sens.az;
 8002bf4:	e9cd 1202 	strd	r1, r2, [sp, #8]
	q0q0 = q0 * q0;
 8002bf8:	4642      	mov	r2, r8
 8002bfa:	4649      	mov	r1, r9
 8002bfc:	f7fd fc6c 	bl	80004d8 <__aeabi_dmul>
	q0q1 = q0 * q1;
 8002c00:	4632      	mov	r2, r6
	q0q0 = q0 * q0;
 8002c02:	e9cd 0106 	strd	r0, r1, [sp, #24]
	q0q1 = q0 * q1;
 8002c06:	463b      	mov	r3, r7
 8002c08:	4640      	mov	r0, r8
 8002c0a:	4649      	mov	r1, r9
 8002c0c:	f7fd fc64 	bl	80004d8 <__aeabi_dmul>
	q0q2 = q0 * q2;
 8002c10:	4622      	mov	r2, r4
	q0q1 = q0 * q1;
 8002c12:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	q0q2 = q0 * q2;
 8002c16:	462b      	mov	r3, r5
 8002c18:	4640      	mov	r0, r8
 8002c1a:	4649      	mov	r1, r9
 8002c1c:	f7fd fc5c 	bl	80004d8 <__aeabi_dmul>
	q0q3 = q0 * q3;
 8002c20:	4652      	mov	r2, sl
	q0q2 = q0 * q2;
 8002c22:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	q0q3 = q0 * q3;
 8002c26:	465b      	mov	r3, fp
 8002c28:	4640      	mov	r0, r8
 8002c2a:	4649      	mov	r1, r9
 8002c2c:	f7fd fc54 	bl	80004d8 <__aeabi_dmul>
	q1q1 = q1 * q1;
 8002c30:	4632      	mov	r2, r6
	q0q3 = q0 * q3;
 8002c32:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	q1q1 = q1 * q1;
 8002c36:	463b      	mov	r3, r7
 8002c38:	4630      	mov	r0, r6
 8002c3a:	4639      	mov	r1, r7
 8002c3c:	f7fd fc4c 	bl	80004d8 <__aeabi_dmul>
	q1q2 = q1 * q2;
 8002c40:	4622      	mov	r2, r4
	q1q1 = q1 * q1;
 8002c42:	e9cd 0108 	strd	r0, r1, [sp, #32]
	q1q2 = q1 * q2;
 8002c46:	462b      	mov	r3, r5
 8002c48:	4630      	mov	r0, r6
 8002c4a:	4639      	mov	r1, r7
 8002c4c:	f7fd fc44 	bl	80004d8 <__aeabi_dmul>
	q1q3 = q1 * q3;
 8002c50:	4652      	mov	r2, sl
	q1q2 = q1 * q2;
 8002c52:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
	q1q3 = q1 * q3;
 8002c56:	465b      	mov	r3, fp
 8002c58:	4630      	mov	r0, r6
 8002c5a:	4639      	mov	r1, r7
 8002c5c:	f7fd fc3c 	bl	80004d8 <__aeabi_dmul>
	q2q2 = q2 * q2;
 8002c60:	4622      	mov	r2, r4
	q1q3 = q1 * q3;
 8002c62:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
	q2q2 = q2 * q2;
 8002c66:	462b      	mov	r3, r5
 8002c68:	4620      	mov	r0, r4
 8002c6a:	4629      	mov	r1, r5
 8002c6c:	f7fd fc34 	bl	80004d8 <__aeabi_dmul>
	q2q3 = q2 * q3;
 8002c70:	4652      	mov	r2, sl
	q2q2 = q2 * q2;
 8002c72:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	q2q3 = q2 * q3;
 8002c76:	465b      	mov	r3, fp
 8002c78:	4620      	mov	r0, r4
 8002c7a:	4629      	mov	r1, r5
 8002c7c:	f7fd fc2c 	bl	80004d8 <__aeabi_dmul>
	q3q3 = q3 * q3;
 8002c80:	4652      	mov	r2, sl
	q2q3 = q2 * q3;
 8002c82:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
	q3q3 = q3 * q3;
 8002c86:	465b      	mov	r3, fp
 8002c88:	4650      	mov	r0, sl
 8002c8a:	4659      	mov	r1, fp
 8002c8c:	f7fd fc24 	bl	80004d8 <__aeabi_dmul>
	norm_2 = q0q0 + q1q1 + q2q2 + q3q3;
 8002c90:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
	q3q3 = q3 * q3;
 8002c94:	4606      	mov	r6, r0
 8002c96:	460f      	mov	r7, r1
	norm_2 = q0q0 + q1q1 + q2q2 + q3q3;
 8002c98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002c9c:	f7fd fa66 	bl	800016c <__adddf3>
 8002ca0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002ca4:	f7fd fa62 	bl	800016c <__adddf3>
 8002ca8:	4632      	mov	r2, r6
 8002caa:	463b      	mov	r3, r7
 8002cac:	f7fd fa5e 	bl	800016c <__adddf3>

	XIMU_u.ax_abs = (ax*q0q0 + 2*az*q0q2 - 2*ay*q0q3 + ax*q1q1 + 2*ay*q1q2 + 2*az*q1q3 - ax*q2q2 - ax*q3q3)/norm_2;
 8002cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
	norm_2 = q0q0 + q1q1 + q2q2 + q3q3;
 8002cb4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	XIMU_u.ax_abs = (ax*q0q0 + 2*az*q0q2 - 2*ay*q0q3 + ax*q1q1 + 2*ay*q1q2 + 2*az*q1q3 - ax*q2q2 - ax*q3q3)/norm_2;
 8002cb8:	4610      	mov	r0, r2
 8002cba:	4619      	mov	r1, r3
 8002cbc:	f7fd fa56 	bl	800016c <__adddf3>
 8002cc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002cc4:	4682      	mov	sl, r0
 8002cc6:	468b      	mov	fp, r1
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4619      	mov	r1, r3
 8002ccc:	f7fd fa4e 	bl	800016c <__adddf3>
 8002cd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002cd4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8002cd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002cdc:	f7fd fbfc 	bl	80004d8 <__aeabi_dmul>
 8002ce0:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8002ce4:	4604      	mov	r4, r0
 8002ce6:	460d      	mov	r5, r1
 8002ce8:	4650      	mov	r0, sl
 8002cea:	4659      	mov	r1, fp
 8002cec:	f7fd fbf4 	bl	80004d8 <__aeabi_dmul>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	4629      	mov	r1, r5
 8002cf8:	f7fd fa38 	bl	800016c <__adddf3>
 8002cfc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8002d00:	4604      	mov	r4, r0
 8002d02:	460d      	mov	r5, r1
 8002d04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002d08:	f7fd fbe6 	bl	80004d8 <__aeabi_dmul>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4620      	mov	r0, r4
 8002d12:	4629      	mov	r1, r5
 8002d14:	f7fd fa28 	bl	8000168 <__aeabi_dsub>
 8002d18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002d1c:	4604      	mov	r4, r0
 8002d1e:	460d      	mov	r5, r1
 8002d20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002d24:	f7fd fbd8 	bl	80004d8 <__aeabi_dmul>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	4629      	mov	r1, r5
 8002d30:	f7fd fa1c 	bl	800016c <__adddf3>
 8002d34:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8002d38:	4604      	mov	r4, r0
 8002d3a:	460d      	mov	r5, r1
 8002d3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002d40:	f7fd fbca 	bl	80004d8 <__aeabi_dmul>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4620      	mov	r0, r4
 8002d4a:	4629      	mov	r1, r5
 8002d4c:	f7fd fa0e 	bl	800016c <__adddf3>
 8002d50:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8002d54:	4604      	mov	r4, r0
 8002d56:	460d      	mov	r5, r1
 8002d58:	4650      	mov	r0, sl
 8002d5a:	4659      	mov	r1, fp
 8002d5c:	f7fd fbbc 	bl	80004d8 <__aeabi_dmul>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4620      	mov	r0, r4
 8002d66:	4629      	mov	r1, r5
 8002d68:	f7fd fa00 	bl	800016c <__adddf3>
 8002d6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002d70:	4604      	mov	r4, r0
 8002d72:	460d      	mov	r5, r1
 8002d74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002d78:	f7fd fbae 	bl	80004d8 <__aeabi_dmul>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4620      	mov	r0, r4
 8002d82:	4629      	mov	r1, r5
 8002d84:	f7fd f9f0 	bl	8000168 <__aeabi_dsub>
 8002d88:	4632      	mov	r2, r6
 8002d8a:	4604      	mov	r4, r0
 8002d8c:	460d      	mov	r5, r1
 8002d8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002d92:	463b      	mov	r3, r7
 8002d94:	f7fd fba0 	bl	80004d8 <__aeabi_dmul>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	4629      	mov	r1, r5
 8002da0:	f7fd f9e2 	bl	8000168 <__aeabi_dsub>
 8002da4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8002da8:	f7fd fcc0 	bl	800072c <__aeabi_ddiv>
 8002dac:	4b48      	ldr	r3, [pc, #288]	; (8002ed0 <calc_absolute_acceleration+0x30c>)
 8002dae:	e9c3 0100 	strd	r0, r1, [r3]
	XIMU_u.ay_abs = (ay*q0q0 - 2*az*q0q1 + 2*ax*q0q3 - ay*q1q1 + 2*ax*q1q2 + ay*q2q2 + 2*az*q2q3 - ay*q3q3)/norm_2;
 8002db2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002db6:	4610      	mov	r0, r2
 8002db8:	4619      	mov	r1, r3
 8002dba:	f7fd f9d7 	bl	800016c <__adddf3>
 8002dbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002dc2:	4604      	mov	r4, r0
 8002dc4:	460d      	mov	r5, r1
 8002dc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002dca:	f7fd fb85 	bl	80004d8 <__aeabi_dmul>
 8002dce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002dd2:	4680      	mov	r8, r0
 8002dd4:	4689      	mov	r9, r1
 8002dd6:	4650      	mov	r0, sl
 8002dd8:	4659      	mov	r1, fp
 8002dda:	f7fd fb7d 	bl	80004d8 <__aeabi_dmul>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4640      	mov	r0, r8
 8002de4:	4649      	mov	r1, r9
 8002de6:	f7fd f9bf 	bl	8000168 <__aeabi_dsub>
 8002dea:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8002dee:	4680      	mov	r8, r0
 8002df0:	4689      	mov	r9, r1
 8002df2:	4620      	mov	r0, r4
 8002df4:	4629      	mov	r1, r5
 8002df6:	f7fd fb6f 	bl	80004d8 <__aeabi_dmul>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4640      	mov	r0, r8
 8002e00:	4649      	mov	r1, r9
 8002e02:	f7fd f9b3 	bl	800016c <__adddf3>
 8002e06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002e0a:	4680      	mov	r8, r0
 8002e0c:	4689      	mov	r9, r1
 8002e0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002e12:	f7fd fb61 	bl	80004d8 <__aeabi_dmul>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4640      	mov	r0, r8
 8002e1c:	4649      	mov	r1, r9
 8002e1e:	f7fd f9a3 	bl	8000168 <__aeabi_dsub>
 8002e22:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8002e26:	4680      	mov	r8, r0
 8002e28:	4689      	mov	r9, r1
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	f7fd fb53 	bl	80004d8 <__aeabi_dmul>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4640      	mov	r0, r8
 8002e38:	4649      	mov	r1, r9
 8002e3a:	f7fd f997 	bl	800016c <__adddf3>
 8002e3e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002e42:	4680      	mov	r8, r0
 8002e44:	4689      	mov	r9, r1
 8002e46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002e4a:	f7fd fb45 	bl	80004d8 <__aeabi_dmul>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	4640      	mov	r0, r8
 8002e54:	4649      	mov	r1, r9
 8002e56:	f7fd f989 	bl	800016c <__adddf3>
 8002e5a:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8002e5e:	4680      	mov	r8, r0
 8002e60:	4689      	mov	r9, r1
 8002e62:	4650      	mov	r0, sl
 8002e64:	4659      	mov	r1, fp
 8002e66:	f7fd fb37 	bl	80004d8 <__aeabi_dmul>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4640      	mov	r0, r8
 8002e70:	4649      	mov	r1, r9
 8002e72:	f7fd f97b 	bl	800016c <__adddf3>
 8002e76:	4632      	mov	r2, r6
 8002e78:	4680      	mov	r8, r0
 8002e7a:	4689      	mov	r9, r1
 8002e7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002e80:	463b      	mov	r3, r7
 8002e82:	f7fd fb29 	bl	80004d8 <__aeabi_dmul>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4640      	mov	r0, r8
 8002e8c:	4649      	mov	r1, r9
 8002e8e:	f7fd f96b 	bl	8000168 <__aeabi_dsub>
 8002e92:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8002e96:	f7fd fc49 	bl	800072c <__aeabi_ddiv>
 8002e9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ed0 <calc_absolute_acceleration+0x30c>)
 8002e9c:	e9c3 0102 	strd	r0, r1, [r3, #8]
	XIMU_u.az_abs = (az*q0q0 + 2*ay*q0q1 - 2*ax*q0q2 - az*q1q1 + 2*ax*q1q3 - az*q2q2 + 2*ay*q2q3 + az*q3q3)/norm_2;
 8002ea0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002ea4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002ea8:	f7fd fb16 	bl	80004d8 <__aeabi_dmul>
 8002eac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002eb0:	4680      	mov	r8, r0
 8002eb2:	4689      	mov	r9, r1
 8002eb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002eb8:	f7fd fb0e 	bl	80004d8 <__aeabi_dmul>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4640      	mov	r0, r8
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	f7fd f952 	bl	800016c <__adddf3>
 8002ec8:	e004      	b.n	8002ed4 <calc_absolute_acceleration+0x310>
 8002eca:	bf00      	nop
 8002ecc:	200005f8 	.word	0x200005f8
 8002ed0:	20000778 	.word	0x20000778
 8002ed4:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8002ed8:	4680      	mov	r8, r0
 8002eda:	4689      	mov	r9, r1
 8002edc:	4620      	mov	r0, r4
 8002ede:	4629      	mov	r1, r5
 8002ee0:	f7fd fafa 	bl	80004d8 <__aeabi_dmul>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4640      	mov	r0, r8
 8002eea:	4649      	mov	r1, r9
 8002eec:	f7fd f93c 	bl	8000168 <__aeabi_dsub>
 8002ef0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002ef4:	4680      	mov	r8, r0
 8002ef6:	4689      	mov	r9, r1
 8002ef8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002efc:	f7fd faec 	bl	80004d8 <__aeabi_dmul>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4640      	mov	r0, r8
 8002f06:	4649      	mov	r1, r9
 8002f08:	f7fd f92e 	bl	8000168 <__aeabi_dsub>
 8002f0c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8002f10:	4680      	mov	r8, r0
 8002f12:	4689      	mov	r9, r1
 8002f14:	4620      	mov	r0, r4
 8002f16:	4629      	mov	r1, r5
 8002f18:	f7fd fade 	bl	80004d8 <__aeabi_dmul>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4640      	mov	r0, r8
 8002f22:	4649      	mov	r1, r9
 8002f24:	f7fd f922 	bl	800016c <__adddf3>
 8002f28:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002f2c:	4604      	mov	r4, r0
 8002f2e:	460d      	mov	r5, r1
 8002f30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f34:	f7fd fad0 	bl	80004d8 <__aeabi_dmul>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	4629      	mov	r1, r5
 8002f40:	f7fd f912 	bl	8000168 <__aeabi_dsub>
 8002f44:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8002f48:	4604      	mov	r4, r0
 8002f4a:	460d      	mov	r5, r1
 8002f4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002f50:	f7fd fac2 	bl	80004d8 <__aeabi_dmul>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4620      	mov	r0, r4
 8002f5a:	4629      	mov	r1, r5
 8002f5c:	f7fd f906 	bl	800016c <__adddf3>
 8002f60:	4632      	mov	r2, r6
 8002f62:	4604      	mov	r4, r0
 8002f64:	460d      	mov	r5, r1
 8002f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f6a:	463b      	mov	r3, r7
 8002f6c:	f7fd fab4 	bl	80004d8 <__aeabi_dmul>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4620      	mov	r0, r4
 8002f76:	4629      	mov	r1, r5
 8002f78:	f7fd f8f8 	bl	800016c <__adddf3>
 8002f7c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8002f80:	f7fd fbd4 	bl	800072c <__aeabi_ddiv>
 8002f84:	4b02      	ldr	r3, [pc, #8]	; (8002f90 <calc_absolute_acceleration+0x3cc>)
 8002f86:	e9c3 0104 	strd	r0, r1, [r3, #16]
}
 8002f8a:	b01d      	add	sp, #116	; 0x74
 8002f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f90:	20000778 	.word	0x20000778
 8002f94:	00000000 	.word	0x00000000

08002f98 <build_data_str>:
}

void calc_absolute_position();
void calc_absolute_altitude();

void build_data_str(char* str){
 8002f98:	b570      	push	{r4, r5, r6, lr}

	char temp[30];
	char delim[2] = {'\t','\0'};
 8002f9a:	2309      	movs	r3, #9
	char term[2] = {'\n','\0'};
 8002f9c:	250a      	movs	r5, #10
void build_data_str(char* str){
 8002f9e:	4604      	mov	r4, r0


	itoa((int)(XIMU_sens.q0),temp,10);
 8002fa0:	4ec3      	ldr	r6, [pc, #780]	; (80032b0 <build_data_str+0x318>)
void build_data_str(char* str){
 8002fa2:	b08a      	sub	sp, #40	; 0x28
	itoa((int)(XIMU_sens.q0),temp,10);
 8002fa4:	e9d6 0100 	ldrd	r0, r1, [r6]
	char delim[2] = {'\t','\0'};
 8002fa8:	f8ad 3000 	strh.w	r3, [sp]
	char term[2] = {'\n','\0'};
 8002fac:	f8ad 5004 	strh.w	r5, [sp, #4]
	itoa((int)(XIMU_sens.q0),temp,10);
 8002fb0:	f7fd fd42 	bl	8000a38 <__aeabi_d2iz>
 8002fb4:	462a      	mov	r2, r5
 8002fb6:	a902      	add	r1, sp, #8
 8002fb8:	f004 f97c 	bl	80072b4 <itoa>
	strcpy(str,temp);
 8002fbc:	a902      	add	r1, sp, #8
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f004 f9d7 	bl	8007372 <strcpy>
	strcat(str,delim);
 8002fc4:	4669      	mov	r1, sp
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	f004 f9c4 	bl	8007354 <strcat>

	itoa((int)(XIMU_sens.q1),temp,10);
 8002fcc:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
 8002fd0:	f7fd fd32 	bl	8000a38 <__aeabi_d2iz>
 8002fd4:	462a      	mov	r2, r5
 8002fd6:	a902      	add	r1, sp, #8
 8002fd8:	f004 f96c 	bl	80072b4 <itoa>
	strcat(str,temp);
 8002fdc:	a902      	add	r1, sp, #8
 8002fde:	4620      	mov	r0, r4
 8002fe0:	f004 f9b8 	bl	8007354 <strcat>
	strcat(str,delim);
 8002fe4:	4669      	mov	r1, sp
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	f004 f9b4 	bl	8007354 <strcat>

	itoa((int)(XIMU_sens.q2),temp,10);
 8002fec:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 8002ff0:	f7fd fd22 	bl	8000a38 <__aeabi_d2iz>
 8002ff4:	462a      	mov	r2, r5
 8002ff6:	a902      	add	r1, sp, #8
 8002ff8:	f004 f95c 	bl	80072b4 <itoa>
	strcat(str,temp);
 8002ffc:	a902      	add	r1, sp, #8
 8002ffe:	4620      	mov	r0, r4
 8003000:	f004 f9a8 	bl	8007354 <strcat>
	strcat(str,delim);
 8003004:	4669      	mov	r1, sp
 8003006:	4620      	mov	r0, r4
 8003008:	f004 f9a4 	bl	8007354 <strcat>

	itoa((int)(XIMU_sens.q3),temp,10);
 800300c:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
 8003010:	f7fd fd12 	bl	8000a38 <__aeabi_d2iz>
 8003014:	462a      	mov	r2, r5
 8003016:	a902      	add	r1, sp, #8
 8003018:	f004 f94c 	bl	80072b4 <itoa>
	strcat(str,temp);
 800301c:	a902      	add	r1, sp, #8
 800301e:	4620      	mov	r0, r4
 8003020:	f004 f998 	bl	8007354 <strcat>
	strcat(str,delim);
 8003024:	4669      	mov	r1, sp
 8003026:	4620      	mov	r0, r4
 8003028:	f004 f994 	bl	8007354 <strcat>

	itoa((int)(XIMU_sens.ax*1000),temp,10);
 800302c:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
 8003030:	4ba0      	ldr	r3, [pc, #640]	; (80032b4 <build_data_str+0x31c>)
 8003032:	2200      	movs	r2, #0
 8003034:	f7fd fa50 	bl	80004d8 <__aeabi_dmul>
 8003038:	f7fd fcfe 	bl	8000a38 <__aeabi_d2iz>
 800303c:	462a      	mov	r2, r5
 800303e:	a902      	add	r1, sp, #8
 8003040:	f004 f938 	bl	80072b4 <itoa>
	strcat(str,temp);
 8003044:	a902      	add	r1, sp, #8
 8003046:	4620      	mov	r0, r4
 8003048:	f004 f984 	bl	8007354 <strcat>
	strcat(str,delim);
 800304c:	4669      	mov	r1, sp
 800304e:	4620      	mov	r0, r4
 8003050:	f004 f980 	bl	8007354 <strcat>

	itoa((int)(XIMU_sens.ay*1000),temp,10);
 8003054:	e9d6 010a 	ldrd	r0, r1, [r6, #40]	; 0x28
 8003058:	4b96      	ldr	r3, [pc, #600]	; (80032b4 <build_data_str+0x31c>)
 800305a:	2200      	movs	r2, #0
 800305c:	f7fd fa3c 	bl	80004d8 <__aeabi_dmul>
 8003060:	f7fd fcea 	bl	8000a38 <__aeabi_d2iz>
 8003064:	462a      	mov	r2, r5
 8003066:	a902      	add	r1, sp, #8
 8003068:	f004 f924 	bl	80072b4 <itoa>
	strcat(str,temp);
 800306c:	a902      	add	r1, sp, #8
 800306e:	4620      	mov	r0, r4
 8003070:	f004 f970 	bl	8007354 <strcat>
	strcat(str,delim);
 8003074:	4669      	mov	r1, sp
 8003076:	4620      	mov	r0, r4
 8003078:	f004 f96c 	bl	8007354 <strcat>

	itoa((int)(XIMU_sens.az*1000),temp,10);
 800307c:	e9d6 010c 	ldrd	r0, r1, [r6, #48]	; 0x30
 8003080:	4b8c      	ldr	r3, [pc, #560]	; (80032b4 <build_data_str+0x31c>)
 8003082:	2200      	movs	r2, #0
 8003084:	f7fd fa28 	bl	80004d8 <__aeabi_dmul>
 8003088:	f7fd fcd6 	bl	8000a38 <__aeabi_d2iz>
 800308c:	462a      	mov	r2, r5
 800308e:	a902      	add	r1, sp, #8
 8003090:	f004 f910 	bl	80072b4 <itoa>
	strcat(str,temp);
 8003094:	a902      	add	r1, sp, #8
 8003096:	4620      	mov	r0, r4
 8003098:	f004 f95c 	bl	8007354 <strcat>
	strcat(str,delim);
 800309c:	4669      	mov	r1, sp
 800309e:	4620      	mov	r0, r4
 80030a0:	f004 f958 	bl	8007354 <strcat>

	itoa((int)(XIMU_sens.gx*1000),temp,10);
 80030a4:	e9d6 010e 	ldrd	r0, r1, [r6, #56]	; 0x38
 80030a8:	4b82      	ldr	r3, [pc, #520]	; (80032b4 <build_data_str+0x31c>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	f7fd fa14 	bl	80004d8 <__aeabi_dmul>
 80030b0:	f7fd fcc2 	bl	8000a38 <__aeabi_d2iz>
 80030b4:	462a      	mov	r2, r5
 80030b6:	a902      	add	r1, sp, #8
 80030b8:	f004 f8fc 	bl	80072b4 <itoa>
	strcat(str,temp);
 80030bc:	a902      	add	r1, sp, #8
 80030be:	4620      	mov	r0, r4
 80030c0:	f004 f948 	bl	8007354 <strcat>
	strcat(str,delim);
 80030c4:	4669      	mov	r1, sp
 80030c6:	4620      	mov	r0, r4
 80030c8:	f004 f944 	bl	8007354 <strcat>

	itoa((int)(XIMU_sens.gy*1000),temp,10);
 80030cc:	e9d6 0110 	ldrd	r0, r1, [r6, #64]	; 0x40
 80030d0:	4b78      	ldr	r3, [pc, #480]	; (80032b4 <build_data_str+0x31c>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	f7fd fa00 	bl	80004d8 <__aeabi_dmul>
 80030d8:	f7fd fcae 	bl	8000a38 <__aeabi_d2iz>
 80030dc:	462a      	mov	r2, r5
 80030de:	a902      	add	r1, sp, #8
 80030e0:	f004 f8e8 	bl	80072b4 <itoa>
	strcat(str,temp);
 80030e4:	a902      	add	r1, sp, #8
 80030e6:	4620      	mov	r0, r4
 80030e8:	f004 f934 	bl	8007354 <strcat>
	strcat(str,delim);
 80030ec:	4669      	mov	r1, sp
 80030ee:	4620      	mov	r0, r4
 80030f0:	f004 f930 	bl	8007354 <strcat>

	itoa((int)(XIMU_sens.gz*1000),temp,10);
 80030f4:	e9d6 0112 	ldrd	r0, r1, [r6, #72]	; 0x48
 80030f8:	4b6e      	ldr	r3, [pc, #440]	; (80032b4 <build_data_str+0x31c>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	f7fd f9ec 	bl	80004d8 <__aeabi_dmul>
 8003100:	f7fd fc9a 	bl	8000a38 <__aeabi_d2iz>
 8003104:	462a      	mov	r2, r5
 8003106:	a902      	add	r1, sp, #8
 8003108:	f004 f8d4 	bl	80072b4 <itoa>
	strcat(str,temp);
 800310c:	a902      	add	r1, sp, #8
 800310e:	4620      	mov	r0, r4
 8003110:	f004 f920 	bl	8007354 <strcat>
	strcat(str,delim);
 8003114:	4669      	mov	r1, sp
 8003116:	4620      	mov	r0, r4
 8003118:	f004 f91c 	bl	8007354 <strcat>

	itoa((int)(XIMU_sens.mx*1000),temp,10);
 800311c:	e9d6 0116 	ldrd	r0, r1, [r6, #88]	; 0x58
 8003120:	4b64      	ldr	r3, [pc, #400]	; (80032b4 <build_data_str+0x31c>)
 8003122:	2200      	movs	r2, #0
 8003124:	f7fd f9d8 	bl	80004d8 <__aeabi_dmul>
 8003128:	f7fd fc86 	bl	8000a38 <__aeabi_d2iz>
 800312c:	462a      	mov	r2, r5
 800312e:	a902      	add	r1, sp, #8
 8003130:	f004 f8c0 	bl	80072b4 <itoa>
	strcat(str,temp);
 8003134:	a902      	add	r1, sp, #8
 8003136:	4620      	mov	r0, r4
 8003138:	f004 f90c 	bl	8007354 <strcat>
	strcat(str,delim);
 800313c:	4669      	mov	r1, sp
 800313e:	4620      	mov	r0, r4
 8003140:	f004 f908 	bl	8007354 <strcat>

	itoa((int)(XIMU_sens.my*1000),temp,10);
 8003144:	e9d6 0118 	ldrd	r0, r1, [r6, #96]	; 0x60
 8003148:	4b5a      	ldr	r3, [pc, #360]	; (80032b4 <build_data_str+0x31c>)
 800314a:	2200      	movs	r2, #0
 800314c:	f7fd f9c4 	bl	80004d8 <__aeabi_dmul>
 8003150:	f7fd fc72 	bl	8000a38 <__aeabi_d2iz>
 8003154:	462a      	mov	r2, r5
 8003156:	a902      	add	r1, sp, #8
 8003158:	f004 f8ac 	bl	80072b4 <itoa>
	strcat(str,temp);
 800315c:	a902      	add	r1, sp, #8
 800315e:	4620      	mov	r0, r4
 8003160:	f004 f8f8 	bl	8007354 <strcat>
	strcat(str,delim);
 8003164:	4669      	mov	r1, sp
 8003166:	4620      	mov	r0, r4
 8003168:	f004 f8f4 	bl	8007354 <strcat>

	itoa((int)(XIMU_sens.mz*1000),temp,10);
 800316c:	e9d6 011a 	ldrd	r0, r1, [r6, #104]	; 0x68
 8003170:	4b50      	ldr	r3, [pc, #320]	; (80032b4 <build_data_str+0x31c>)
 8003172:	2200      	movs	r2, #0
 8003174:	f7fd f9b0 	bl	80004d8 <__aeabi_dmul>
 8003178:	f7fd fc5e 	bl	8000a38 <__aeabi_d2iz>
 800317c:	462a      	mov	r2, r5
 800317e:	a902      	add	r1, sp, #8
 8003180:	f004 f898 	bl	80072b4 <itoa>
	strcat(str,temp);
 8003184:	a902      	add	r1, sp, #8
 8003186:	4620      	mov	r0, r4
 8003188:	f004 f8e4 	bl	8007354 <strcat>
	strcat(str,delim);
 800318c:	4669      	mov	r1, sp
 800318e:	4620      	mov	r0, r4
 8003190:	f004 f8e0 	bl	8007354 <strcat>

	itoa((int)(XIMU_sens.pressure*1000),temp,10);
 8003194:	e9d6 011e 	ldrd	r0, r1, [r6, #120]	; 0x78
 8003198:	4b46      	ldr	r3, [pc, #280]	; (80032b4 <build_data_str+0x31c>)
 800319a:	2200      	movs	r2, #0
 800319c:	f7fd f99c 	bl	80004d8 <__aeabi_dmul>
 80031a0:	f7fd fc4a 	bl	8000a38 <__aeabi_d2iz>
 80031a4:	462a      	mov	r2, r5
 80031a6:	a902      	add	r1, sp, #8
 80031a8:	f004 f884 	bl	80072b4 <itoa>
	strcat(str,temp);
 80031ac:	a902      	add	r1, sp, #8
 80031ae:	4620      	mov	r0, r4
 80031b0:	f004 f8d0 	bl	8007354 <strcat>
	strcat(str,delim);
 80031b4:	4669      	mov	r1, sp
 80031b6:	4620      	mov	r0, r4
 80031b8:	f004 f8cc 	bl	8007354 <strcat>

	itoa((int)(XIMU_sens.temperature*1000),temp,10);
 80031bc:	e9d6 0120 	ldrd	r0, r1, [r6, #128]	; 0x80
 80031c0:	4b3c      	ldr	r3, [pc, #240]	; (80032b4 <build_data_str+0x31c>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	f7fd f988 	bl	80004d8 <__aeabi_dmul>
 80031c8:	f7fd fc36 	bl	8000a38 <__aeabi_d2iz>
 80031cc:	462a      	mov	r2, r5
 80031ce:	a902      	add	r1, sp, #8
 80031d0:	f004 f870 	bl	80072b4 <itoa>
	strcat(str,temp);
 80031d4:	a902      	add	r1, sp, #8
 80031d6:	4620      	mov	r0, r4
 80031d8:	f004 f8bc 	bl	8007354 <strcat>
	strcat(str,delim);
 80031dc:	4669      	mov	r1, sp
 80031de:	4620      	mov	r0, r4
 80031e0:	f004 f8b8 	bl	8007354 <strcat>

	itoa((int)(XIMU_sens.lat*1000000),temp,10);
 80031e4:	a330      	add	r3, pc, #192	; (adr r3, 80032a8 <build_data_str+0x310>)
 80031e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ea:	e9d6 0124 	ldrd	r0, r1, [r6, #144]	; 0x90
 80031ee:	f7fd f973 	bl	80004d8 <__aeabi_dmul>
 80031f2:	f7fd fc21 	bl	8000a38 <__aeabi_d2iz>
 80031f6:	462a      	mov	r2, r5
 80031f8:	a902      	add	r1, sp, #8
 80031fa:	f004 f85b 	bl	80072b4 <itoa>
	strcat(str,temp);
 80031fe:	a902      	add	r1, sp, #8
 8003200:	4620      	mov	r0, r4
 8003202:	f004 f8a7 	bl	8007354 <strcat>
	strcat(str,delim);
 8003206:	4669      	mov	r1, sp
 8003208:	4620      	mov	r0, r4
 800320a:	f004 f8a3 	bl	8007354 <strcat>

	itoa((int)(XIMU_sens.lon*1000000),temp,10);
 800320e:	a326      	add	r3, pc, #152	; (adr r3, 80032a8 <build_data_str+0x310>)
 8003210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003214:	e9d6 0126 	ldrd	r0, r1, [r6, #152]	; 0x98
 8003218:	f7fd f95e 	bl	80004d8 <__aeabi_dmul>
 800321c:	f7fd fc0c 	bl	8000a38 <__aeabi_d2iz>
 8003220:	462a      	mov	r2, r5
 8003222:	a902      	add	r1, sp, #8
 8003224:	f004 f846 	bl	80072b4 <itoa>
	strcat(str,temp);
 8003228:	a902      	add	r1, sp, #8
 800322a:	4620      	mov	r0, r4
 800322c:	f004 f892 	bl	8007354 <strcat>
	strcat(str,delim);
 8003230:	4669      	mov	r1, sp
 8003232:	4620      	mov	r0, r4
 8003234:	f004 f88e 	bl	8007354 <strcat>

	itoa((int)(XIMU_sens.qag_ts),temp,10);
 8003238:	462a      	mov	r2, r5
 800323a:	a902      	add	r1, sp, #8
 800323c:	6d30      	ldr	r0, [r6, #80]	; 0x50
 800323e:	f004 f839 	bl	80072b4 <itoa>
	strcat(str,temp);
 8003242:	a902      	add	r1, sp, #8
 8003244:	4620      	mov	r0, r4
 8003246:	f004 f885 	bl	8007354 <strcat>
	strcat(str,delim);
 800324a:	4669      	mov	r1, sp
 800324c:	4620      	mov	r0, r4
 800324e:	f004 f881 	bl	8007354 <strcat>

	itoa((int)(XIMU_sens.m_ts),temp,10);
 8003252:	462a      	mov	r2, r5
 8003254:	a902      	add	r1, sp, #8
 8003256:	6f30      	ldr	r0, [r6, #112]	; 0x70
 8003258:	f004 f82c 	bl	80072b4 <itoa>
	strcat(str,temp);
 800325c:	a902      	add	r1, sp, #8
 800325e:	4620      	mov	r0, r4
 8003260:	f004 f878 	bl	8007354 <strcat>
	strcat(str,delim);
 8003264:	4669      	mov	r1, sp
 8003266:	4620      	mov	r0, r4
 8003268:	f004 f874 	bl	8007354 <strcat>

	itoa((int)(XIMU_sens.pt_ts),temp,10);
 800326c:	462a      	mov	r2, r5
 800326e:	a902      	add	r1, sp, #8
 8003270:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
 8003274:	f004 f81e 	bl	80072b4 <itoa>
	strcat(str,temp);
 8003278:	a902      	add	r1, sp, #8
 800327a:	4620      	mov	r0, r4
 800327c:	f004 f86a 	bl	8007354 <strcat>
	strcat(str,delim);
 8003280:	4669      	mov	r1, sp
 8003282:	4620      	mov	r0, r4
 8003284:	f004 f866 	bl	8007354 <strcat>

	itoa((int)(XIMU_sens.gps_ts),temp,10);
 8003288:	462a      	mov	r2, r5
 800328a:	a902      	add	r1, sp, #8
 800328c:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
 8003290:	f004 f810 	bl	80072b4 <itoa>
	strcat(str,temp);
 8003294:	a902      	add	r1, sp, #8
 8003296:	4620      	mov	r0, r4
 8003298:	f004 f85c 	bl	8007354 <strcat>
	strcat(str,term);
 800329c:	a901      	add	r1, sp, #4
 800329e:	4620      	mov	r0, r4
 80032a0:	f004 f858 	bl	8007354 <strcat>
}
 80032a4:	b00a      	add	sp, #40	; 0x28
 80032a6:	bd70      	pop	{r4, r5, r6, pc}
 80032a8:	00000000 	.word	0x00000000
 80032ac:	412e8480 	.word	0x412e8480
 80032b0:	200005f8 	.word	0x200005f8
 80032b4:	408f4000 	.word	0x408f4000

080032b8 <GNSS_set_huart>:
 */

#include "gnss.h"

void GNSS_set_huart(UART_HandleTypeDef* huart){
	huartx = huart;
 80032b8:	4b01      	ldr	r3, [pc, #4]	; (80032c0 <GNSS_set_huart+0x8>)
 80032ba:	6018      	str	r0, [r3, #0]
}
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	200038f0 	.word	0x200038f0

080032c4 <parse_GNGGA>:
/**
 * parse GNSS.GNGGA sentence into fields as strings.(char[] s)
 * @param msg GNSS.GNGGA message
 * @param fields GNSS.GNGGA message parser output
 */
void parse_GNGGA(unsigned char* msg, char fields[][MAX_FIELD_SIZE]){
 80032c4:	b5f0      	push	{r4, r5, r6, r7, lr}
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
	        fields[current_field][current_pos] = *ch_ptr;
	        current_pos++;
	        ch_ptr++;
	    }
        fields[current_field][current_pos]='\0';
 80032c6:	2600      	movs	r6, #0
    while (*ch_ptr != '\0'){
 80032c8:	7803      	ldrb	r3, [r0, #0]
 80032ca:	b19b      	cbz	r3, 80032f4 <parse_GNGGA+0x30>
 80032cc:	4604      	mov	r4, r0
 80032ce:	1e4d      	subs	r5, r1, #1
	        fields[current_field][current_pos] = *ch_ptr;
 80032d0:	4603      	mov	r3, r0
 80032d2:	e001      	b.n	80032d8 <parse_GNGGA+0x14>
 80032d4:	f805 2f01 	strb.w	r2, [r5, #1]!
 80032d8:	4618      	mov	r0, r3
 80032da:	1b1f      	subs	r7, r3, r4
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 80032dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032e0:	2a2c      	cmp	r2, #44	; 0x2c
 80032e2:	d001      	beq.n	80032e8 <parse_GNGGA+0x24>
 80032e4:	2a00      	cmp	r2, #0
 80032e6:	d1f5      	bne.n	80032d4 <parse_GNGGA+0x10>
        fields[current_field][current_pos]='\0';
 80032e8:	55ce      	strb	r6, [r1, r7]
	    current_field++;
	    if (*ch_ptr != '\0'){ // skip ',' when not at end of string
 80032ea:	7803      	ldrb	r3, [r0, #0]
 80032ec:	b103      	cbz	r3, 80032f0 <parse_GNGGA+0x2c>
	        ch_ptr++;
 80032ee:	3001      	adds	r0, #1
 80032f0:	310c      	adds	r1, #12
 80032f2:	e7e9      	b.n	80032c8 <parse_GNGGA+0x4>
	    }
    }
}
 80032f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080032f8 <convert_raw_lat_lon>:
 * convert raw latitude and longitude, which have format dddmm.mmmm
 * into decimal.
 * @param raw raw latitude and longitude input
 * @return decimal latitude and longitude
 */
double convert_raw_lat_lon(double raw){
 80032f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((int)raw / 100) + (fmod(raw,100)/60);
 80032fa:	2200      	movs	r2, #0
 80032fc:	4b0f      	ldr	r3, [pc, #60]	; (800333c <convert_raw_lat_lon+0x44>)
double convert_raw_lat_lon(double raw){
 80032fe:	4604      	mov	r4, r0
 8003300:	460d      	mov	r5, r1
	return ((int)raw / 100) + (fmod(raw,100)/60);
 8003302:	f006 fbd5 	bl	8009ab0 <fmod>
 8003306:	4606      	mov	r6, r0
 8003308:	460f      	mov	r7, r1
 800330a:	4620      	mov	r0, r4
 800330c:	4629      	mov	r1, r5
 800330e:	f7fd fb93 	bl	8000a38 <__aeabi_d2iz>
 8003312:	2364      	movs	r3, #100	; 0x64
 8003314:	fb90 f0f3 	sdiv	r0, r0, r3
 8003318:	f7fd f874 	bl	8000404 <__aeabi_i2d>
 800331c:	2200      	movs	r2, #0
 800331e:	4604      	mov	r4, r0
 8003320:	460d      	mov	r5, r1
 8003322:	4b07      	ldr	r3, [pc, #28]	; (8003340 <convert_raw_lat_lon+0x48>)
 8003324:	4630      	mov	r0, r6
 8003326:	4639      	mov	r1, r7
 8003328:	f7fd fa00 	bl	800072c <__aeabi_ddiv>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4620      	mov	r0, r4
 8003332:	4629      	mov	r1, r5
 8003334:	f7fc ff1a 	bl	800016c <__adddf3>
}
 8003338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800333a:	bf00      	nop
 800333c:	40590000 	.word	0x40590000
 8003340:	404e0000 	.word	0x404e0000

08003344 <GNSS_Init>:
 * initializes the GNSS interrupt.
 *
 * call this function before main loop.
 */
void GNSS_Init(){
	HAL_UART_Receive_DMA(huartx, GNSS.dma_buffer, DMA_BUFFER_SIZE);
 8003344:	4b03      	ldr	r3, [pc, #12]	; (8003354 <GNSS_Init+0x10>)
 8003346:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800334a:	4903      	ldr	r1, [pc, #12]	; (8003358 <GNSS_Init+0x14>)
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	f002 bb99 	b.w	8005a84 <HAL_UART_Receive_DMA>
 8003352:	bf00      	nop
 8003354:	200038f0 	.word	0x200038f0
 8003358:	20003430 	.word	0x20003430

0800335c <GNSS_RX_Update>:
	//https://www.devcoons.com/stm32-uart-receive-unknown-size-data-using-dma-and-freertos/
}

int GNSS_RX_Update(){
 800335c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003360:	b0b3      	sub	sp, #204	; 0xcc
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003362:	b672      	cpsid	i

	__disable_irq();//I don't understand this
	int i = DMA_BUFFER_SIZE - huartx->hdmarx->Instance->CNDTR; //last byte received
 8003364:	4b77      	ldr	r3, [pc, #476]	; (8003544 <GNSS_RX_Update+0x1e8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685e      	ldr	r6, [r3, #4]
 800336e:	f5c6 6680 	rsb	r6, r6, #1024	; 0x400
  __ASM volatile ("cpsie i" : : : "memory");
 8003372:	b662      	cpsie	i
	__enable_irq();//I don't understand this

	int new_information = 0;
 8003374:	f04f 0800 	mov.w	r8, #0

		if (str != NULL){
			char fields[NUM_FIELDS][MAX_FIELD_SIZE];
			parse_GNGGA(GNSS.message_buffer,fields);
			//field 1: UTC time
			sscanf(fields[1],"%2d%2d%2d.%3d",&GNSS.GNGGA.UTC_Hour,&GNSS.GNGGA.UTC_Min,&GNSS.GNGGA.UTC_Second,&GNSS.GNGGA.UTC_Millis);
 8003378:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8003560 <GNSS_RX_Update+0x204>
			//field 14: checksum
			GNSS.GNGGA.checksum[0] = fields[14][1];//fields[14][0] is always '*'
			GNSS.GNGGA.checksum[1] = fields[14][2];

			//convert raw latitude and longitude to decimal format
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 800337c:	f109 070c 	add.w	r7, r9, #12
	while (GNSS.start != i){
 8003380:	4c71      	ldr	r4, [pc, #452]	; (8003548 <GNSS_RX_Update+0x1ec>)
 8003382:	f04f 0b00 	mov.w	fp, #0
 8003386:	4625      	mov	r5, r4
		GNSS.message_buffer[counter] = '\n';
 8003388:	f04f 0a0a 	mov.w	sl, #10
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 800338c:	f504 6280 	add.w	r2, r4, #1024	; 0x400
	while (GNSS.start != i){
 8003390:	f8d4 3464 	ldr.w	r3, [r4, #1124]	; 0x464
 8003394:	42b3      	cmp	r3, r6
 8003396:	d00f      	beq.n	80033b8 <GNSS_RX_Update+0x5c>
		if (GNSS.dma_buffer[GNSS.start] != '$'){
 8003398:	5ce1      	ldrb	r1, [r4, r3]
 800339a:	2924      	cmp	r1, #36	; 0x24
 800339c:	d006      	beq.n	80033ac <GNSS_RX_Update+0x50>
 800339e:	2100      	movs	r1, #0
				if (GNSS.dma_buffer[GNSS.start] == '$'){
 80033a0:	5ce8      	ldrb	r0, [r5, r3]
 80033a2:	2824      	cmp	r0, #36	; 0x24
 80033a4:	d10c      	bne.n	80033c0 <GNSS_RX_Update+0x64>
 80033a6:	b109      	cbz	r1, 80033ac <GNSS_RX_Update+0x50>
 80033a8:	f8c5 3464 	str.w	r3, [r5, #1124]	; 0x464
		if (GNSS.dma_buffer[GNSS.start] != '$'){break;}//if start not found, return.
 80033ac:	f8d5 1464 	ldr.w	r1, [r5, #1124]	; 0x464
 80033b0:	5c6b      	ldrb	r3, [r5, r1]
 80033b2:	2b24      	cmp	r3, #36	; 0x24
 80033b4:	f000 80b2 	beq.w	800351c <GNSS_RX_Update+0x1c0>
			new_information = 1;
		}
	}

	return new_information;
}
 80033b8:	4640      	mov	r0, r8
 80033ba:	b033      	add	sp, #204	; 0xcc
 80033bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for(;GNSS.start != i;GNSS.start = (GNSS.start + 1) % DMA_BUFFER_SIZE){
 80033c0:	3301      	adds	r3, #1
 80033c2:	4259      	negs	r1, r3
 80033c4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80033c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033cc:	bf58      	it	pl
 80033ce:	424b      	negpl	r3, r1
 80033d0:	42b3      	cmp	r3, r6
 80033d2:	f04f 0101 	mov.w	r1, #1
 80033d6:	d1e3      	bne.n	80033a0 <GNSS_RX_Update+0x44>
 80033d8:	f8c5 6464 	str.w	r6, [r5, #1124]	; 0x464
 80033dc:	e7e6      	b.n	80033ac <GNSS_RX_Update+0x50>
			if (GNSS.dma_buffer[end] == '\n'){
 80033de:	5ce8      	ldrb	r0, [r5, r3]
 80033e0:	280a      	cmp	r0, #10
 80033e2:	d009      	beq.n	80033f8 <GNSS_RX_Update+0x9c>
		for(end = GNSS.start; end != i; end = (end + 1) % DMA_BUFFER_SIZE){
 80033e4:	3301      	adds	r3, #1
 80033e6:	4258      	negs	r0, r3
 80033e8:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80033ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033f0:	bf58      	it	pl
 80033f2:	4243      	negpl	r3, r0
 80033f4:	42b3      	cmp	r3, r6
 80033f6:	d1f2      	bne.n	80033de <GNSS_RX_Update+0x82>
		if (GNSS.dma_buffer[end] != '\n'){break;}//if end not found, return.
 80033f8:	5ce8      	ldrb	r0, [r5, r3]
 80033fa:	280a      	cmp	r0, #10
 80033fc:	d1dc      	bne.n	80033b8 <GNSS_RX_Update+0x5c>
		int counter = 0;
 80033fe:	f04f 0c00 	mov.w	ip, #0
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 8003402:	428b      	cmp	r3, r1
 8003404:	f10c 0001 	add.w	r0, ip, #1
 8003408:	f040 808a 	bne.w	8003520 <GNSS_RX_Update+0x1c4>
		GNSS.message_buffer[counter] = '\n';
 800340c:	44ac      	add	ip, r5
		GNSS.message_buffer[counter+1] = '\0';
 800340e:	4428      	add	r0, r5
		GNSS.message_buffer[counter] = '\n';
 8003410:	f88c a400 	strb.w	sl, [ip, #1024]	; 0x400
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8003414:	494d      	ldr	r1, [pc, #308]	; (800354c <GNSS_RX_Update+0x1f0>)
		GNSS.message_buffer[counter+1] = '\0';
 8003416:	f880 b400 	strb.w	fp, [r0, #1024]	; 0x400
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 800341a:	4610      	mov	r0, r2
 800341c:	9203      	str	r2, [sp, #12]
		GNSS.start = end;
 800341e:	f8c5 3464 	str.w	r3, [r5, #1124]	; 0x464
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8003422:	f003 ffae 	bl	8007382 <strstr>
		if (str != NULL){
 8003426:	9a03      	ldr	r2, [sp, #12]
 8003428:	2800      	cmp	r0, #0
 800342a:	d0b1      	beq.n	8003390 <GNSS_RX_Update+0x34>
			sscanf(fields[1],"%2d%2d%2d.%3d",&GNSS.GNGGA.UTC_Hour,&GNSS.GNGGA.UTC_Min,&GNSS.GNGGA.UTC_Second,&GNSS.GNGGA.UTC_Millis);
 800342c:	4d48      	ldr	r5, [pc, #288]	; (8003550 <GNSS_RX_Update+0x1f4>)
			parse_GNGGA(GNSS.message_buffer,fields);
 800342e:	a905      	add	r1, sp, #20
 8003430:	4848      	ldr	r0, [pc, #288]	; (8003554 <GNSS_RX_Update+0x1f8>)
 8003432:	f7ff ff47 	bl	80032c4 <parse_GNGGA>
			sscanf(fields[1],"%2d%2d%2d.%3d",&GNSS.GNGGA.UTC_Hour,&GNSS.GNGGA.UTC_Min,&GNSS.GNGGA.UTC_Second,&GNSS.GNGGA.UTC_Millis);
 8003436:	f1a5 0208 	sub.w	r2, r5, #8
 800343a:	1f2b      	subs	r3, r5, #4
 800343c:	4946      	ldr	r1, [pc, #280]	; (8003558 <GNSS_RX_Update+0x1fc>)
 800343e:	f8cd 9004 	str.w	r9, [sp, #4]
 8003442:	9500      	str	r5, [sp, #0]
 8003444:	a808      	add	r0, sp, #32
 8003446:	f003 ff59 	bl	80072fc <siscanf>
			GNSS.GNGGA.lat_raw = atof(fields[2]);
 800344a:	a80b      	add	r0, sp, #44	; 0x2c
 800344c:	f003 fee8 	bl	8007220 <atof>
 8003450:	f7fd fb3a 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.North_South = fields[3][0];
 8003454:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
			GNSS.GNGGA.lat_raw = atof(fields[2]);
 8003458:	f8c4 0478 	str.w	r0, [r4, #1144]	; 0x478
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 800345c:	a811      	add	r0, sp, #68	; 0x44
			GNSS.GNGGA.North_South = fields[3][0];
 800345e:	f884 3488 	strb.w	r3, [r4, #1160]	; 0x488
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 8003462:	f003 fedd 	bl	8007220 <atof>
			GNSS.GNGGA.East_West = fields[5][0];
 8003466:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 800346a:	e9c5 0108 	strd	r0, r1, [r5, #32]
			GNSS.GNGGA.status = atoi(fields[6]);
 800346e:	a817      	add	r0, sp, #92	; 0x5c
			GNSS.GNGGA.East_West = fields[5][0];
 8003470:	f884 34a0 	strb.w	r3, [r4, #1184]	; 0x4a0
			GNSS.GNGGA.status = atoi(fields[6]);
 8003474:	f003 fed7 	bl	8007226 <atoi>
 8003478:	f8c4 04a4 	str.w	r0, [r4, #1188]	; 0x4a4
			GNSS.GNGGA.num_sat = atoi(fields[7]);
 800347c:	a81a      	add	r0, sp, #104	; 0x68
 800347e:	f003 fed2 	bl	8007226 <atoi>
 8003482:	f8c4 04a8 	str.w	r0, [r4, #1192]	; 0x4a8
			GNSS.GNGGA.HDOP = atof(fields[8]);
 8003486:	a81d      	add	r0, sp, #116	; 0x74
 8003488:	f003 feca 	bl	8007220 <atof>
 800348c:	f7fd fb1c 	bl	8000ac8 <__aeabi_d2f>
 8003490:	f8c4 04ac 	str.w	r0, [r4, #1196]	; 0x4ac
			GNSS.GNGGA.MSL_alt = atof(fields[9]);
 8003494:	a820      	add	r0, sp, #128	; 0x80
 8003496:	f003 fec3 	bl	8007220 <atof>
 800349a:	f7fd fb15 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.MSL_Unit = fields[10][0];
 800349e:	f89d 308c 	ldrb.w	r3, [sp, #140]	; 0x8c
			GNSS.GNGGA.MSL_alt = atof(fields[9]);
 80034a2:	f8c4 04b0 	str.w	r0, [r4, #1200]	; 0x4b0
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 80034a6:	a826      	add	r0, sp, #152	; 0x98
			GNSS.GNGGA.MSL_Unit = fields[10][0];
 80034a8:	f884 34b4 	strb.w	r3, [r4, #1204]	; 0x4b4
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 80034ac:	f003 feb8 	bl	8007220 <atof>
 80034b0:	f7fd fb0a 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.Geoid_Unit = fields[12][0];
 80034b4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 80034b8:	f8c4 04b8 	str.w	r0, [r4, #1208]	; 0x4b8
			GNSS.GNGGA.Geoid_Unit = fields[12][0];
 80034bc:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
			GNSS.GNGGA.checksum[0] = fields[14][1];//fields[14][0] is always '*'
 80034c0:	f89d 30bd 	ldrb.w	r3, [sp, #189]	; 0xbd
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 80034c4:	f8d4 0478 	ldr.w	r0, [r4, #1144]	; 0x478
			GNSS.GNGGA.checksum[0] = fields[14][1];//fields[14][0] is always '*'
 80034c8:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd
			GNSS.GNGGA.checksum[1] = fields[14][2];
 80034cc:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
			new_information = 1;
 80034d0:	f04f 0801 	mov.w	r8, #1
			GNSS.GNGGA.checksum[1] = fields[14][2];
 80034d4:	f884 34be 	strb.w	r3, [r4, #1214]	; 0x4be
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 80034d8:	f7fc ffa6 	bl	8000428 <__aeabi_f2d>
 80034dc:	f7ff ff0c 	bl	80032f8 <convert_raw_lat_lon>
 80034e0:	e9c7 0100 	strd	r0, r1, [r7]
			GNSS.GNGGA.lon = convert_raw_lat_lon(GNSS.GNGGA.lon_raw);
 80034e4:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80034e8:	f7ff ff06 	bl	80032f8 <convert_raw_lat_lon>
			GNSS.GNGGA.lat = GNSS.GNGGA.North_South == 'N' ? GNSS.GNGGA.lat : -GNSS.GNGGA.lat;
 80034ec:	f894 3488 	ldrb.w	r3, [r4, #1160]	; 0x488
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	2b4e      	cmp	r3, #78	; 0x4e
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4692      	mov	sl, r2
 80034f8:	bf18      	it	ne
 80034fa:	f103 4300 	addne.w	r3, r3, #2147483648	; 0x80000000
 80034fe:	469b      	mov	fp, r3
			GNSS.GNGGA.lon = GNSS.GNGGA.East_West == 'E' ? GNSS.GNGGA.lon : -GNSS.GNGGA.lon;
 8003500:	f894 34a0 	ldrb.w	r3, [r4, #1184]	; 0x4a0
 8003504:	4602      	mov	r2, r0
 8003506:	2b45      	cmp	r3, #69	; 0x45
 8003508:	bf18      	it	ne
 800350a:	f101 4100 	addne.w	r1, r1, #2147483648	; 0x80000000
 800350e:	460b      	mov	r3, r1
 8003510:	4912      	ldr	r1, [pc, #72]	; (800355c <GNSS_RX_Update+0x200>)
			GNSS.GNGGA.lat = GNSS.GNGGA.North_South == 'N' ? GNSS.GNGGA.lat : -GNSS.GNGGA.lat;
 8003512:	e9c7 ab00 	strd	sl, fp, [r7]
			GNSS.GNGGA.lon = GNSS.GNGGA.East_West == 'E' ? GNSS.GNGGA.lon : -GNSS.GNGGA.lon;
 8003516:	e9c1 2300 	strd	r2, r3, [r1]
 800351a:	e731      	b.n	8003380 <GNSS_RX_Update+0x24>
		for(end = GNSS.start; end != i; end = (end + 1) % DMA_BUFFER_SIZE){
 800351c:	460b      	mov	r3, r1
 800351e:	e769      	b.n	80033f4 <GNSS_RX_Update+0x98>
			GNSS.message_buffer[counter] = GNSS.dma_buffer[j];
 8003520:	f815 e001 	ldrb.w	lr, [r5, r1]
 8003524:	eb05 0c00 	add.w	ip, r5, r0
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 8003528:	3101      	adds	r1, #1
			GNSS.message_buffer[counter] = GNSS.dma_buffer[j];
 800352a:	f88c e3ff 	strb.w	lr, [ip, #1023]	; 0x3ff
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 800352e:	f1d1 0c00 	rsbs	ip, r1, #0
 8003532:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8003536:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800353a:	bf58      	it	pl
 800353c:	f1cc 0100 	rsbpl	r1, ip, #0
 8003540:	4684      	mov	ip, r0
 8003542:	e75e      	b.n	8003402 <GNSS_RX_Update+0xa6>
 8003544:	200038f0 	.word	0x200038f0
 8003548:	20003430 	.word	0x20003430
 800354c:	0800aa5e 	.word	0x0800aa5e
 8003550:	200038a0 	.word	0x200038a0
 8003554:	20003830 	.word	0x20003830
 8003558:	0800aa66 	.word	0x0800aa66
 800355c:	200038c8 	.word	0x200038c8
 8003560:	200038a4 	.word	0x200038a4

08003564 <I2C_read>:
 *      Author: yuche
 */

#include "i2c.h"

uint8_t I2C_read(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* output){
 8003564:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int state = HAL_I2C_Mem_Read(i2cx,target_address << 1,register_address,sizeof(register_address),output,length,20);//timeout is magic. Do not touch
 8003566:	2414      	movs	r4, #20
 8003568:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800356c:	9b06      	ldr	r3, [sp, #24]
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	2301      	movs	r3, #1
 8003572:	4099      	lsls	r1, r3
 8003574:	f001 f85a 	bl	800462c <HAL_I2C_Mem_Read>
	if (state != HAL_OK){
 8003578:	b100      	cbz	r0, 800357c <I2C_read+0x18>
		__NOP();
 800357a:	bf00      	nop
	}
	return state;
}
 800357c:	b004      	add	sp, #16
 800357e:	bd10      	pop	{r4, pc}

08003580 <I2C_write>:

uint8_t I2C_write(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* input){
 8003580:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int state =  HAL_I2C_Mem_Write(i2cx,target_address << 1,register_address,sizeof(register_address),input,length,20);//timeout is magic. Do not touch
 8003582:	2414      	movs	r4, #20
 8003584:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003588:	9b06      	ldr	r3, [sp, #24]
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	2301      	movs	r3, #1
 800358e:	4099      	lsls	r1, r3
 8003590:	f000 ffbc 	bl	800450c <HAL_I2C_Mem_Write>
	if (state != HAL_OK){
 8003594:	b100      	cbz	r0, 8003598 <I2C_write+0x18>
			__NOP();
 8003596:	bf00      	nop
		}
	return state;
}
 8003598:	b004      	add	sp, #16
 800359a:	bd10      	pop	{r4, pc}

0800359c <led_update>:
#include "stm32f1xx_hal.h"

uint8_t led_pattern = LED_DISCONNECTED;
uint8_t led_state = 0;

void led_update(){
 800359c:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,  1 - (led_pattern>>led_state) & 0x01);
 800359e:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <led_update+0x2c>)
 80035a0:	4c0a      	ldr	r4, [pc, #40]	; (80035cc <led_update+0x30>)
 80035a2:	781a      	ldrb	r2, [r3, #0]
 80035a4:	7823      	ldrb	r3, [r4, #0]
 80035a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035aa:	411a      	asrs	r2, r3
 80035ac:	f1c2 0201 	rsb	r2, r2, #1
 80035b0:	f002 0201 	and.w	r2, r2, #1
 80035b4:	4806      	ldr	r0, [pc, #24]	; (80035d0 <led_update+0x34>)
 80035b6:	f000 fd3d 	bl	8004034 <HAL_GPIO_WritePin>
	led_state++;
 80035ba:	7823      	ldrb	r3, [r4, #0]
 80035bc:	3301      	adds	r3, #1
	led_state = led_state % 8;
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	7023      	strb	r3, [r4, #0]
}
 80035c4:	bd10      	pop	{r4, pc}
 80035c6:	bf00      	nop
 80035c8:	200003bc 	.word	0x200003bc
 80035cc:	200003bd 	.word	0x200003bd
 80035d0:	40011000 	.word	0x40011000

080035d4 <led_set>:

void led_set(uint8_t led_pattern_){
	led_pattern = led_pattern_;
 80035d4:	4b01      	ldr	r3, [pc, #4]	; (80035dc <led_set+0x8>)
 80035d6:	7018      	strb	r0, [r3, #0]
}
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	200003bc 	.word	0x200003bc

080035e0 <mpu_set_i2c>:

enum MPU9250_GYRO_FSR gyro_fsr = MPU9250_NUM_GYRO_FSR;
enum MPU9250_ACCEL_FSR accel_fsr = MPU9250_NUM_ACCEL_FSR;

void mpu_set_i2c(I2C_HandleTypeDef* i2cx){
	mpu_i2cx = i2cx;
 80035e0:	4b01      	ldr	r3, [pc, #4]	; (80035e8 <mpu_set_i2c+0x8>)
 80035e2:	6018      	str	r0, [r3, #0]
}
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	200005f0 	.word	0x200005f0

080035ec <i2c_write>:
}

// Functions implemented for this platform(STM32F103) for DMP

int i2c_write(unsigned char slave_addr, unsigned char reg_addr,
		unsigned char length, unsigned char const *data){
 80035ec:	b507      	push	{r0, r1, r2, lr}
	return I2C_write(mpu_i2cx,slave_addr,reg_addr,length,data);
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	4613      	mov	r3, r2
 80035f2:	460a      	mov	r2, r1
 80035f4:	4601      	mov	r1, r0
 80035f6:	4803      	ldr	r0, [pc, #12]	; (8003604 <i2c_write+0x18>)
 80035f8:	6800      	ldr	r0, [r0, #0]
 80035fa:	f7ff ffc1 	bl	8003580 <I2C_write>
}
 80035fe:	b003      	add	sp, #12
 8003600:	f85d fb04 	ldr.w	pc, [sp], #4
 8003604:	200005f0 	.word	0x200005f0

08003608 <i2c_read>:

int i2c_read(unsigned char slave_addr, unsigned char reg_addr,
		unsigned char length, unsigned char *data){
 8003608:	b507      	push	{r0, r1, r2, lr}
	return I2C_read(mpu_i2cx,slave_addr,reg_addr,length,data);
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	4613      	mov	r3, r2
 800360e:	460a      	mov	r2, r1
 8003610:	4601      	mov	r1, r0
 8003612:	4803      	ldr	r0, [pc, #12]	; (8003620 <i2c_read+0x18>)
 8003614:	6800      	ldr	r0, [r0, #0]
 8003616:	f7ff ffa5 	bl	8003564 <I2C_read>
}
 800361a:	b003      	add	sp, #12
 800361c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003620:	200005f0 	.word	0x200005f0

08003624 <delay_ms>:

void delay_ms(unsigned long num_ms){
	delay(num_ms);
 8003624:	f000 ba4e 	b.w	8003ac4 <delay>

08003628 <get_ms>:
}

unsigned long get_ms(unsigned long *count){
 8003628:	b510      	push	{r4, lr}
 800362a:	4604      	mov	r4, r0
	*count = millis();
 800362c:	f000 fa44 	bl	8003ab8 <millis>
 8003630:	6020      	str	r0, [r4, #0]
}
 8003632:	bd10      	pop	{r4, pc}

08003634 <ms5611_set_i2c>:
/**
 * select a hal I2C to talk to MS5611
 * @param i2cx The i2c port to talk to MS5611
 */
void ms5611_set_i2c(I2C_HandleTypeDef* i2cx){
	ms5611_i2cx = i2cx;
 8003634:	4b01      	ldr	r3, [pc, #4]	; (800363c <ms5611_set_i2c+0x8>)
 8003636:	6018      	str	r0, [r3, #0]
}
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	200007d4 	.word	0x200007d4

08003640 <ms5611_read_i2c>:
 * @param register_address register/command to request data
 * @param length length of bytes to request from MS5611
 * @param output output data
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_read_i2c(uint8_t register_address,uint8_t length,uint8_t* output){
 8003640:	b507      	push	{r0, r1, r2, lr}
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8003642:	9200      	str	r2, [sp, #0]
 8003644:	4602      	mov	r2, r0
 8003646:	4804      	ldr	r0, [pc, #16]	; (8003658 <ms5611_read_i2c+0x18>)
 8003648:	460b      	mov	r3, r1
 800364a:	6800      	ldr	r0, [r0, #0]
 800364c:	2177      	movs	r1, #119	; 0x77
 800364e:	f7ff ff89 	bl	8003564 <I2C_read>
}
 8003652:	b003      	add	sp, #12
 8003654:	f85d fb04 	ldr.w	pc, [sp], #4
 8003658:	200007d4 	.word	0x200007d4

0800365c <ms5611_write_i2c>:
 * @param register_address register/command to send
 * @param length length of bytes to write to MS5611
 * @param output buffer to hold data to be sent
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_write_i2c(uint8_t register_address,uint8_t length,uint8_t* input){
 800365c:	b507      	push	{r0, r1, r2, lr}
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 800365e:	9200      	str	r2, [sp, #0]
 8003660:	4602      	mov	r2, r0
 8003662:	4804      	ldr	r0, [pc, #16]	; (8003674 <ms5611_write_i2c+0x18>)
 8003664:	460b      	mov	r3, r1
 8003666:	6800      	ldr	r0, [r0, #0]
 8003668:	2177      	movs	r1, #119	; 0x77
 800366a:	f7ff ff89 	bl	8003580 <I2C_write>
}
 800366e:	b003      	add	sp, #12
 8003670:	f85d fb04 	ldr.w	pc, [sp], #4
 8003674:	200007d4 	.word	0x200007d4

08003678 <ms5611_request_pressure>:

/**
 * Start ADC conversion of raw pressure in MS5611.
 * The ADC data can be read 9.02ms later
 */
void ms5611_request_pressure(){
 8003678:	b507      	push	{r0, r1, r2, lr}
	uint8_t buffer[3] = {0x00,0x00,0x00};
 800367a:	2100      	movs	r1, #0
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 800367c:	4b08      	ldr	r3, [pc, #32]	; (80036a0 <ms5611_request_pressure+0x28>)
 800367e:	aa01      	add	r2, sp, #4
 8003680:	7818      	ldrb	r0, [r3, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8003682:	f8ad 1004 	strh.w	r1, [sp, #4]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8003686:	0040      	lsls	r0, r0, #1
 8003688:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800368c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8003690:	f88d 1006 	strb.w	r1, [sp, #6]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8003694:	f7ff ffe2 	bl	800365c <ms5611_write_i2c>
}
 8003698:	b003      	add	sp, #12
 800369a:	f85d fb04 	ldr.w	pc, [sp], #4
 800369e:	bf00      	nop
 80036a0:	2000003c 	.word	0x2000003c

080036a4 <ms5611_retrieve_pressure>:

/**
 * Read result of ADC conversion of raw pressure.
 */
void ms5611_retrieve_pressure(){
 80036a4:	b507      	push	{r0, r1, r2, lr}
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80036a6:	2000      	movs	r0, #0
	ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 80036a8:	aa01      	add	r2, sp, #4
 80036aa:	2103      	movs	r1, #3
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80036ac:	f8ad 0004 	strh.w	r0, [sp, #4]
 80036b0:	f88d 0006 	strb.w	r0, [sp, #6]
	ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 80036b4:	f7ff ffc4 	bl	8003640 <ms5611_read_i2c>

	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 80036b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80036bc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80036c0:	021b      	lsls	r3, r3, #8
 80036c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80036c6:	f89d 2006 	ldrb.w	r2, [sp, #6]

	if (temp != 0){
 80036ca:	4313      	orrs	r3, r2
		raw_pressure = temp;
 80036cc:	bf1c      	itt	ne
 80036ce:	4a02      	ldrne	r2, [pc, #8]	; (80036d8 <ms5611_retrieve_pressure+0x34>)
 80036d0:	6013      	strne	r3, [r2, #0]
	}
}
 80036d2:	b003      	add	sp, #12
 80036d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80036d8:	200038f4 	.word	0x200038f4

080036dc <ms5611_request_temperature>:

/**
 * Start ADC conversion of raw temperature in MS5611.
 * The ADC data can be read 9.02ms later
 */
void ms5611_request_temperature(){
 80036dc:	b507      	push	{r0, r1, r2, lr}
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80036de:	2100      	movs	r1, #0
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 80036e0:	4b08      	ldr	r3, [pc, #32]	; (8003704 <ms5611_request_temperature+0x28>)
 80036e2:	aa01      	add	r2, sp, #4
 80036e4:	7818      	ldrb	r0, [r3, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80036e6:	f8ad 1004 	strh.w	r1, [sp, #4]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 80036ea:	0040      	lsls	r0, r0, #1
 80036ec:	f040 0050 	orr.w	r0, r0, #80	; 0x50
 80036f0:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80036f4:	f88d 1006 	strb.w	r1, [sp, #6]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 80036f8:	f7ff ffb0 	bl	800365c <ms5611_write_i2c>
}
 80036fc:	b003      	add	sp, #12
 80036fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8003702:	bf00      	nop
 8003704:	2000003c 	.word	0x2000003c

08003708 <ms5611_retrieve_temperature>:

/**
 * Read result of ADC conversion of raw temperature.
 */
void ms5611_retrieve_temperature(){
 8003708:	b507      	push	{r0, r1, r2, lr}
	uint8_t buffer[3] = {0x00,0x00,0x00};
 800370a:	2000      	movs	r0, #0
	ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 800370c:	aa01      	add	r2, sp, #4
 800370e:	2103      	movs	r1, #3
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8003710:	f8ad 0004 	strh.w	r0, [sp, #4]
 8003714:	f88d 0006 	strb.w	r0, [sp, #6]
	ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 8003718:	f7ff ff92 	bl	8003640 <ms5611_read_i2c>

	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 800371c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003720:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003724:	021b      	lsls	r3, r3, #8
 8003726:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800372a:	f89d 2006 	ldrb.w	r2, [sp, #6]

	if (temp != 0){
 800372e:	4313      	orrs	r3, r2
		raw_temperature = temp;
 8003730:	bf1c      	itt	ne
 8003732:	4a02      	ldrne	r2, [pc, #8]	; (800373c <ms5611_retrieve_temperature+0x34>)
 8003734:	6013      	strne	r3, [r2, #0]
	}
}
 8003736:	b003      	add	sp, #12
 8003738:	f85d fb04 	ldr.w	pc, [sp], #4
 800373c:	20003904 	.word	0x20003904

08003740 <ms5611_update_pressure>:

/**
 * Read raw pressure from MS5611.
 */
void ms5611_update_pressure(){
 8003740:	b508      	push	{r3, lr}

	ms5611_request_pressure();
 8003742:	f7ff ff99 	bl	8003678 <ms5611_request_pressure>
	delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8003746:	200c      	movs	r0, #12
 8003748:	f000 f9bc 	bl	8003ac4 <delay>
	ms5611_retrieve_pressure();

}
 800374c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ms5611_retrieve_pressure();
 8003750:	f7ff bfa8 	b.w	80036a4 <ms5611_retrieve_pressure>

08003754 <ms5611_update_temperature>:

/**
 * Read raw temperature from MS5611.
 */
void ms5611_update_temperature(){
 8003754:	b508      	push	{r3, lr}

	ms5611_request_temperature();
 8003756:	f7ff ffc1 	bl	80036dc <ms5611_request_temperature>
	delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 800375a:	200c      	movs	r0, #12
 800375c:	f000 f9b2 	bl	8003ac4 <delay>
	ms5611_retrieve_temperature();

}
 8003760:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ms5611_retrieve_temperature();
 8003764:	f7ff bfd0 	b.w	8003708 <ms5611_retrieve_temperature>

08003768 <ms5611_update>:

/**
 *	Read raw temperature and pressure from MS5611
 */
void ms5611_update(){
 8003768:	b508      	push	{r3, lr}
	ms5611_update_temperature();
 800376a:	f7ff fff3 	bl	8003754 <ms5611_update_temperature>
	ms5611_update_pressure();
}
 800376e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ms5611_update_pressure();
 8003772:	f7ff bfe5 	b.w	8003740 <ms5611_update_pressure>
	...

08003778 <ms5611_init>:
void ms5611_init(){
 8003778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800377a:	24a2      	movs	r4, #162	; 0xa2
 800377c:	4d0a      	ldr	r5, [pc, #40]	; (80037a8 <ms5611_init+0x30>)
		ms5611_read_i2c(reg_addr,2,buffer);
 800377e:	aa01      	add	r2, sp, #4
 8003780:	4620      	mov	r0, r4
 8003782:	2102      	movs	r1, #2
 8003784:	f7ff ff5c 	bl	8003640 <ms5611_read_i2c>
 8003788:	3402      	adds	r4, #2
		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 800378a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800378e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003792:	b2e4      	uxtb	r4, r4
 8003794:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 8003798:	2cae      	cmp	r4, #174	; 0xae
		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 800379a:	f825 3f02 	strh.w	r3, [r5, #2]!
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 800379e:	d1ee      	bne.n	800377e <ms5611_init+0x6>
	ms5611_update();
 80037a0:	f7ff ffe2 	bl	8003768 <ms5611_update>
}
 80037a4:	b003      	add	sp, #12
 80037a6:	bd30      	pop	{r4, r5, pc}
 80037a8:	200038f6 	.word	0x200038f6

080037ac <ms5611_get_temperature>:

/**
 * Get calibrated temperature, unit: Celsius degrees
 * @return calibrated temperature
 */
double ms5611_get_temperature(){
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 80037ae:	4a1c      	ldr	r2, [pc, #112]	; (8003820 <ms5611_get_temperature+0x74>)
 80037b0:	4e1c      	ldr	r6, [pc, #112]	; (8003824 <ms5611_get_temperature+0x78>)
 80037b2:	6810      	ldr	r0, [r2, #0]
 80037b4:	8933      	ldrh	r3, [r6, #8]
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 80037b6:	eba0 2003 	sub.w	r0, r0, r3, lsl #8
 80037ba:	f7fc fe13 	bl	80003e4 <__aeabi_ui2d>
 80037be:	4604      	mov	r4, r0
 80037c0:	460d      	mov	r5, r1
 80037c2:	8970      	ldrh	r0, [r6, #10]
 80037c4:	f7fc fe1e 	bl	8000404 <__aeabi_i2d>
 80037c8:	2200      	movs	r2, #0
 80037ca:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80037ce:	f7fc fe83 	bl	80004d8 <__aeabi_dmul>
 80037d2:	4622      	mov	r2, r4
 80037d4:	462b      	mov	r3, r5
 80037d6:	f7fc fe7f 	bl	80004d8 <__aeabi_dmul>
 80037da:	2200      	movs	r2, #0
 80037dc:	4b12      	ldr	r3, [pc, #72]	; (8003828 <ms5611_get_temperature+0x7c>)
 80037de:	f7fc fcc5 	bl	800016c <__adddf3>

	double T2=0;
	if (TEMP < 2000.0){
 80037e2:	2200      	movs	r2, #0
 80037e4:	4b10      	ldr	r3, [pc, #64]	; (8003828 <ms5611_get_temperature+0x7c>)
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 80037e6:	4606      	mov	r6, r0
 80037e8:	460f      	mov	r7, r1
	if (TEMP < 2000.0){
 80037ea:	f7fd f8e7 	bl	80009bc <__aeabi_dcmplt>
		//temperature < 20 Celsius
		T2 = dT * (dT / (2147483648.0));
 80037ee:	2200      	movs	r2, #0
	if (TEMP < 2000.0){
 80037f0:	b1a0      	cbz	r0, 800381c <ms5611_get_temperature+0x70>
		T2 = dT * (dT / (2147483648.0));
 80037f2:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 80037f6:	4620      	mov	r0, r4
 80037f8:	4629      	mov	r1, r5
 80037fa:	f7fc fe6d 	bl	80004d8 <__aeabi_dmul>
 80037fe:	4622      	mov	r2, r4
 8003800:	462b      	mov	r3, r5
 8003802:	f7fc fe69 	bl	80004d8 <__aeabi_dmul>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
	}

	TEMP = TEMP - T2;
 800380a:	4630      	mov	r0, r6
 800380c:	4639      	mov	r1, r7
 800380e:	f7fc fcab 	bl	8000168 <__aeabi_dsub>
	return TEMP / 100.0;
 8003812:	2200      	movs	r2, #0
 8003814:	4b05      	ldr	r3, [pc, #20]	; (800382c <ms5611_get_temperature+0x80>)
 8003816:	f7fc ff89 	bl	800072c <__aeabi_ddiv>
}
 800381a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	double T2=0;
 800381c:	2300      	movs	r3, #0
 800381e:	e7f4      	b.n	800380a <ms5611_get_temperature+0x5e>
 8003820:	20003904 	.word	0x20003904
 8003824:	200038f8 	.word	0x200038f8
 8003828:	409f4000 	.word	0x409f4000
 800382c:	40590000 	.word	0x40590000

08003830 <ms5611_get_pressure>:

/**
 * Get calibrated pressure, unit: mBar
 * @return calibrated pressure
 */
double ms5611_get_pressure(){
 8003830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 8003834:	4b70      	ldr	r3, [pc, #448]	; (80039f8 <ms5611_get_pressure+0x1c8>)
 8003836:	4e71      	ldr	r6, [pc, #452]	; (80039fc <ms5611_get_pressure+0x1cc>)
 8003838:	681f      	ldr	r7, [r3, #0]
 800383a:	8930      	ldrh	r0, [r6, #8]
double ms5611_get_pressure(){
 800383c:	b085      	sub	sp, #20
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 800383e:	eba7 2700 	sub.w	r7, r7, r0, lsl #8
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8003842:	8970      	ldrh	r0, [r6, #10]
 8003844:	f7fc fdde 	bl	8000404 <__aeabi_i2d>
 8003848:	2200      	movs	r2, #0
 800384a:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800384e:	f7fc fe43 	bl	80004d8 <__aeabi_dmul>
 8003852:	4604      	mov	r4, r0
 8003854:	4638      	mov	r0, r7
 8003856:	460d      	mov	r5, r1
 8003858:	f7fc fdc4 	bl	80003e4 <__aeabi_ui2d>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4620      	mov	r0, r4
 8003862:	4629      	mov	r1, r5
 8003864:	f7fc fe38 	bl	80004d8 <__aeabi_dmul>
 8003868:	2200      	movs	r2, #0
 800386a:	4b65      	ldr	r3, [pc, #404]	; (8003a00 <ms5611_get_pressure+0x1d0>)
 800386c:	f7fc fc7e 	bl	800016c <__adddf3>
 8003870:	4680      	mov	r8, r0

	double OFF = fc[1] * (65536.0) + fc[3] * dT / (128);
 8003872:	88f0      	ldrh	r0, [r6, #6]
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8003874:	4689      	mov	r9, r1
	double OFF = fc[1] * (65536.0) + fc[3] * dT / (128);
 8003876:	4378      	muls	r0, r7
 8003878:	09c0      	lsrs	r0, r0, #7
 800387a:	f7fc fdb3 	bl	80003e4 <__aeabi_ui2d>
 800387e:	4604      	mov	r4, r0
 8003880:	8870      	ldrh	r0, [r6, #2]
 8003882:	460d      	mov	r5, r1
 8003884:	f7fc fdbe 	bl	8000404 <__aeabi_i2d>
 8003888:	2200      	movs	r2, #0
 800388a:	4b5e      	ldr	r3, [pc, #376]	; (8003a04 <ms5611_get_pressure+0x1d4>)
 800388c:	f7fc fe24 	bl	80004d8 <__aeabi_dmul>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4620      	mov	r0, r4
 8003896:	4629      	mov	r1, r5
 8003898:	f7fc fc68 	bl	800016c <__adddf3>
 800389c:	e9cd 0102 	strd	r0, r1, [sp, #8]
	double SENS = fc[0] * (32768.0) + fc[2] * dT / (256);
 80038a0:	88b0      	ldrh	r0, [r6, #4]
 80038a2:	4378      	muls	r0, r7
 80038a4:	0a00      	lsrs	r0, r0, #8
 80038a6:	f7fc fd9d 	bl	80003e4 <__aeabi_ui2d>
 80038aa:	4604      	mov	r4, r0
 80038ac:	8830      	ldrh	r0, [r6, #0]
 80038ae:	460d      	mov	r5, r1
 80038b0:	f7fc fda8 	bl	8000404 <__aeabi_i2d>
 80038b4:	2200      	movs	r2, #0
 80038b6:	4b54      	ldr	r3, [pc, #336]	; (8003a08 <ms5611_get_pressure+0x1d8>)
 80038b8:	f7fc fe0e 	bl	80004d8 <__aeabi_dmul>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4620      	mov	r0, r4
 80038c2:	4629      	mov	r1, r5
 80038c4:	f7fc fc52 	bl	800016c <__adddf3>

	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 80038c8:	4b50      	ldr	r3, [pc, #320]	; (8003a0c <ms5611_get_pressure+0x1dc>)
	double SENS = fc[0] * (32768.0) + fc[2] * dT / (256);
 80038ca:	4682      	mov	sl, r0
	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 80038cc:	6818      	ldr	r0, [r3, #0]
	double SENS = fc[0] * (32768.0) + fc[2] * dT / (256);
 80038ce:	468b      	mov	fp, r1
	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 80038d0:	f7fc fd88 	bl	80003e4 <__aeabi_ui2d>

	double T2=0, OFF2=0, SENS2=0;
	if (TEMP < 2000){
 80038d4:	2200      	movs	r2, #0
	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 80038d6:	e9cd 0100 	strd	r0, r1, [sp]
	if (TEMP < 2000){
 80038da:	4b49      	ldr	r3, [pc, #292]	; (8003a00 <ms5611_get_pressure+0x1d0>)
 80038dc:	4640      	mov	r0, r8
 80038de:	4649      	mov	r1, r9
 80038e0:	f7fd f86c 	bl	80009bc <__aeabi_dcmplt>
 80038e4:	2800      	cmp	r0, #0
 80038e6:	d07a      	beq.n	80039de <ms5611_get_pressure+0x1ae>
		//temperature < 20 Celsius
		T2 = dT * dT / (2147483648.0);
		OFF2 = 5 * (TEMP-2000) * (TEMP-2000) / 2;
 80038e8:	2200      	movs	r2, #0
 80038ea:	4b45      	ldr	r3, [pc, #276]	; (8003a00 <ms5611_get_pressure+0x1d0>)
 80038ec:	4640      	mov	r0, r8
 80038ee:	4649      	mov	r1, r9
 80038f0:	f7fc fc3a 	bl	8000168 <__aeabi_dsub>
 80038f4:	4604      	mov	r4, r0
 80038f6:	460d      	mov	r5, r1
 80038f8:	2200      	movs	r2, #0
 80038fa:	4b45      	ldr	r3, [pc, #276]	; (8003a10 <ms5611_get_pressure+0x1e0>)
 80038fc:	f7fc fdec 	bl	80004d8 <__aeabi_dmul>
 8003900:	4622      	mov	r2, r4
 8003902:	462b      	mov	r3, r5
 8003904:	f7fc fde8 	bl	80004d8 <__aeabi_dmul>
 8003908:	2200      	movs	r2, #0
 800390a:	4b42      	ldr	r3, [pc, #264]	; (8003a14 <ms5611_get_pressure+0x1e4>)
 800390c:	4604      	mov	r4, r0
 800390e:	460d      	mov	r5, r1
 8003910:	f7fc fde2 	bl	80004d8 <__aeabi_dmul>
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 8003914:	2200      	movs	r2, #0
 8003916:	4b40      	ldr	r3, [pc, #256]	; (8003a18 <ms5611_get_pressure+0x1e8>)
		OFF2 = 5 * (TEMP-2000) * (TEMP-2000) / 2;
 8003918:	4606      	mov	r6, r0
 800391a:	460f      	mov	r7, r1
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 800391c:	4620      	mov	r0, r4
 800391e:	4629      	mov	r1, r5
 8003920:	f7fc fdda 	bl	80004d8 <__aeabi_dmul>

		if (TEMP < -1500){
 8003924:	a330      	add	r3, pc, #192	; (adr r3, 80039e8 <ms5611_get_pressure+0x1b8>)
 8003926:	e9d3 2300 	ldrd	r2, r3, [r3]
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 800392a:	4604      	mov	r4, r0
 800392c:	460d      	mov	r5, r1
		if (TEMP < -1500){
 800392e:	4640      	mov	r0, r8
 8003930:	4649      	mov	r1, r9
 8003932:	f7fd f843 	bl	80009bc <__aeabi_dcmplt>
 8003936:	b350      	cbz	r0, 800398e <ms5611_get_pressure+0x15e>
			//temperature < -15 Celsius
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 8003938:	a32d      	add	r3, pc, #180	; (adr r3, 80039f0 <ms5611_get_pressure+0x1c0>)
 800393a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393e:	4640      	mov	r0, r8
 8003940:	4649      	mov	r1, r9
 8003942:	f7fc fc13 	bl	800016c <__adddf3>
 8003946:	4680      	mov	r8, r0
 8003948:	4689      	mov	r9, r1
 800394a:	2200      	movs	r2, #0
 800394c:	4b33      	ldr	r3, [pc, #204]	; (8003a1c <ms5611_get_pressure+0x1ec>)
 800394e:	f7fc fdc3 	bl	80004d8 <__aeabi_dmul>
 8003952:	4642      	mov	r2, r8
 8003954:	464b      	mov	r3, r9
 8003956:	f7fc fdbf 	bl	80004d8 <__aeabi_dmul>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4630      	mov	r0, r6
 8003960:	4639      	mov	r1, r7
 8003962:	f7fc fc03 	bl	800016c <__adddf3>
			SENS2 = SENS2 + 11/2 * (TEMP + 1500) * (TEMP + 1500);
 8003966:	2200      	movs	r2, #0
 8003968:	4b29      	ldr	r3, [pc, #164]	; (8003a10 <ms5611_get_pressure+0x1e0>)
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 800396a:	4606      	mov	r6, r0
 800396c:	460f      	mov	r7, r1
			SENS2 = SENS2 + 11/2 * (TEMP + 1500) * (TEMP + 1500);
 800396e:	4640      	mov	r0, r8
 8003970:	4649      	mov	r1, r9
 8003972:	f7fc fdb1 	bl	80004d8 <__aeabi_dmul>
 8003976:	4642      	mov	r2, r8
 8003978:	464b      	mov	r3, r9
 800397a:	f7fc fdad 	bl	80004d8 <__aeabi_dmul>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	4620      	mov	r0, r4
 8003984:	4629      	mov	r1, r5
 8003986:	f7fc fbf1 	bl	800016c <__adddf3>
 800398a:	4604      	mov	r4, r0
 800398c:	460d      	mov	r5, r1
		}
	}

	TEMP = TEMP - T2;
	OFF = OFF - OFF2;
	SENS = SENS - SENS2;
 800398e:	4622      	mov	r2, r4
 8003990:	462b      	mov	r3, r5
 8003992:	4650      	mov	r0, sl
 8003994:	4659      	mov	r1, fp
 8003996:	f7fc fbe7 	bl	8000168 <__aeabi_dsub>

	P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit mbar
 800399a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800399e:	f7fc fd9b 	bl	80004d8 <__aeabi_dmul>
 80039a2:	2200      	movs	r2, #0
 80039a4:	4b1e      	ldr	r3, [pc, #120]	; (8003a20 <ms5611_get_pressure+0x1f0>)
 80039a6:	f7fc fd97 	bl	80004d8 <__aeabi_dmul>
	OFF = OFF - OFF2;
 80039aa:	4632      	mov	r2, r6
	P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit mbar
 80039ac:	4604      	mov	r4, r0
 80039ae:	460d      	mov	r5, r1
	OFF = OFF - OFF2;
 80039b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039b4:	463b      	mov	r3, r7
 80039b6:	f7fc fbd7 	bl	8000168 <__aeabi_dsub>
	P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit mbar
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4620      	mov	r0, r4
 80039c0:	4629      	mov	r1, r5
 80039c2:	f7fc fbd1 	bl	8000168 <__aeabi_dsub>
 80039c6:	2200      	movs	r2, #0
 80039c8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80039cc:	f7fc fd84 	bl	80004d8 <__aeabi_dmul>
	return P / 100;//unit mbar
 80039d0:	2200      	movs	r2, #0
 80039d2:	4b14      	ldr	r3, [pc, #80]	; (8003a24 <ms5611_get_pressure+0x1f4>)
 80039d4:	f7fc feaa 	bl	800072c <__aeabi_ddiv>
}
 80039d8:	b005      	add	sp, #20
 80039da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	double T2=0, OFF2=0, SENS2=0;
 80039de:	2400      	movs	r4, #0
 80039e0:	2500      	movs	r5, #0
 80039e2:	4626      	mov	r6, r4
 80039e4:	462f      	mov	r7, r5
 80039e6:	e7d2      	b.n	800398e <ms5611_get_pressure+0x15e>
 80039e8:	00000000 	.word	0x00000000
 80039ec:	c0977000 	.word	0xc0977000
 80039f0:	00000000 	.word	0x00000000
 80039f4:	40977000 	.word	0x40977000
 80039f8:	20003904 	.word	0x20003904
 80039fc:	200038f8 	.word	0x200038f8
 8003a00:	409f4000 	.word	0x409f4000
 8003a04:	40f00000 	.word	0x40f00000
 8003a08:	40e00000 	.word	0x40e00000
 8003a0c:	200038f4 	.word	0x200038f4
 8003a10:	40140000 	.word	0x40140000
 8003a14:	3fe00000 	.word	0x3fe00000
 8003a18:	3fd00000 	.word	0x3fd00000
 8003a1c:	401c0000 	.word	0x401c0000
 8003a20:	3ea00000 	.word	0x3ea00000
 8003a24:	40590000 	.word	0x40590000

08003a28 <ms5611_timer_update>:
void ms5611_timer_update(){
 8003a28:	b538      	push	{r3, r4, r5, lr}
	if (read_index == 0){
 8003a2a:	4c13      	ldr	r4, [pc, #76]	; (8003a78 <ms5611_timer_update+0x50>)
 8003a2c:	4d13      	ldr	r5, [pc, #76]	; (8003a7c <ms5611_timer_update+0x54>)
 8003a2e:	7823      	ldrb	r3, [r4, #0]
 8003a30:	b953      	cbnz	r3, 8003a48 <ms5611_timer_update+0x20>
		ms5611_retrieve_temperature();
 8003a32:	f7ff fe69 	bl	8003708 <ms5611_retrieve_temperature>
		XIMU_sens.temperature = ms5611_get_temperature();
 8003a36:	f7ff feb9 	bl	80037ac <ms5611_get_temperature>
 8003a3a:	e9c5 0120 	strd	r0, r1, [r5, #128]	; 0x80
		ms5611_request_pressure();
 8003a3e:	f7ff fe1b 	bl	8003678 <ms5611_request_pressure>
		read_index++;
 8003a42:	7823      	ldrb	r3, [r4, #0]
 8003a44:	3301      	adds	r3, #1
 8003a46:	e00a      	b.n	8003a5e <ms5611_timer_update+0x36>
	}else if (read_index == TEMP_READ_INTERVAL - 1){
 8003a48:	2b09      	cmp	r3, #9
 8003a4a:	d10e      	bne.n	8003a6a <ms5611_timer_update+0x42>
		ms5611_retrieve_pressure();
 8003a4c:	f7ff fe2a 	bl	80036a4 <ms5611_retrieve_pressure>
		XIMU_sens.pressure = ms5611_get_pressure();
 8003a50:	f7ff feee 	bl	8003830 <ms5611_get_pressure>
 8003a54:	e9c5 011e 	strd	r0, r1, [r5, #120]	; 0x78
		ms5611_request_temperature();
 8003a58:	f7ff fe40 	bl	80036dc <ms5611_request_temperature>
		read_index = 0;
 8003a5c:	2300      	movs	r3, #0
		read_index++;
 8003a5e:	7023      	strb	r3, [r4, #0]
	XIMU_sens.pt_ts = millis();
 8003a60:	f000 f82a 	bl	8003ab8 <millis>
 8003a64:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
}
 8003a68:	bd38      	pop	{r3, r4, r5, pc}
		ms5611_retrieve_pressure();
 8003a6a:	f7ff fe1b 	bl	80036a4 <ms5611_retrieve_pressure>
		XIMU_sens.pressure = ms5611_get_pressure();
 8003a6e:	f7ff fedf 	bl	8003830 <ms5611_get_pressure>
 8003a72:	e9c5 011e 	strd	r0, r1, [r5, #120]	; 0x78
 8003a76:	e7e2      	b.n	8003a3e <ms5611_timer_update+0x16>
 8003a78:	200003be 	.word	0x200003be
 8003a7c:	200005f8 	.word	0x200005f8

08003a80 <systickInit>:

static volatile uint32_t ticks = 0;

void systickInit(){

	   if (SysTick_Config(SystemCoreClock / SYSTICK_FREQ)){
 8003a80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a84:	4b09      	ldr	r3, [pc, #36]	; (8003aac <systickInit+0x2c>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a92:	d20a      	bcs.n	8003aaa <systickInit+0x2a>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a94:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a96:	4a06      	ldr	r2, [pc, #24]	; (8003ab0 <systickInit+0x30>)
 8003a98:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9a:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <systickInit+0x34>)
 8003a9c:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aa4:	2307      	movs	r3, #7
 8003aa6:	6013      	str	r3, [r2, #0]
		   while (1){ /* Error in initializing Systick */ }
	   }
}
 8003aa8:	4770      	bx	lr
 8003aaa:	e7fe      	b.n	8003aaa <systickInit+0x2a>
 8003aac:	20000038 	.word	0x20000038
 8003ab0:	e000e010 	.word	0xe000e010
 8003ab4:	e000ed00 	.word	0xe000ed00

08003ab8 <millis>:
/**
 * return milliseconds
 * @return time since systickInit in milliseconds
 */
uint32_t millis(){
	return ticks;
 8003ab8:	4b01      	ldr	r3, [pc, #4]	; (8003ac0 <millis+0x8>)
 8003aba:	6818      	ldr	r0, [r3, #0]
}
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	200003c0 	.word	0x200003c0

08003ac4 <delay>:
	return ticks;
 8003ac4:	4b03      	ldr	r3, [pc, #12]	; (8003ad4 <delay+0x10>)
 8003ac6:	6819      	ldr	r1, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 * delay milliseconds
 * @param ms milliseconds to delay
 */
void delay(uint32_t ms){
	uint32_t start = millis();
	while(millis() - start < ms){
 8003aca:	1a52      	subs	r2, r2, r1
 8003acc:	4282      	cmp	r2, r0
 8003ace:	d3fb      	bcc.n	8003ac8 <delay+0x4>
		//do nothing
	}
}
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	200003c0 	.word	0x200003c0

08003ad8 <systick_Inc>:
/**
 * add this function in stm32f1xx_it
 * called by the system to update systick accordingly
 */
void systick_Inc(void) {
  ticks++;
 8003ad8:	4a02      	ldr	r2, [pc, #8]	; (8003ae4 <systick_Inc+0xc>)
 8003ada:	6813      	ldr	r3, [r2, #0]
 8003adc:	3301      	adds	r3, #1
 8003ade:	6013      	str	r3, [r2, #0]
}
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	200003c0 	.word	0x200003c0

08003ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ae8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003aea:	4b0e      	ldr	r3, [pc, #56]	; (8003b24 <HAL_InitTick+0x3c>)
{
 8003aec:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003aee:	7818      	ldrb	r0, [r3, #0]
 8003af0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003af4:	fbb3 f3f0 	udiv	r3, r3, r0
 8003af8:	4a0b      	ldr	r2, [pc, #44]	; (8003b28 <HAL_InitTick+0x40>)
 8003afa:	6810      	ldr	r0, [r2, #0]
 8003afc:	fbb0 f0f3 	udiv	r0, r0, r3
 8003b00:	f000 f8a0 	bl	8003c44 <HAL_SYSTICK_Config>
 8003b04:	4604      	mov	r4, r0
 8003b06:	b958      	cbnz	r0, 8003b20 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b08:	2d0f      	cmp	r5, #15
 8003b0a:	d809      	bhi.n	8003b20 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	4629      	mov	r1, r5
 8003b10:	f04f 30ff 	mov.w	r0, #4294967295
 8003b14:	f000 f854 	bl	8003bc0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b18:	4620      	mov	r0, r4
 8003b1a:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <HAL_InitTick+0x44>)
 8003b1c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003b1e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003b20:	2001      	movs	r0, #1
 8003b22:	e7fc      	b.n	8003b1e <HAL_InitTick+0x36>
 8003b24:	2000003d 	.word	0x2000003d
 8003b28:	20000038 	.word	0x20000038
 8003b2c:	20000040 	.word	0x20000040

08003b30 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b30:	4a07      	ldr	r2, [pc, #28]	; (8003b50 <HAL_Init+0x20>)
{
 8003b32:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b34:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b36:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b38:	f043 0310 	orr.w	r3, r3, #16
 8003b3c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b3e:	f000 f82d 	bl	8003b9c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b42:	2000      	movs	r0, #0
 8003b44:	f7ff ffd0 	bl	8003ae8 <HAL_InitTick>
  HAL_MspInit();
 8003b48:	f7fe fa48 	bl	8001fdc <HAL_MspInit>
}
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	bd08      	pop	{r3, pc}
 8003b50:	40022000 	.word	0x40022000

08003b54 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003b54:	4a03      	ldr	r2, [pc, #12]	; (8003b64 <HAL_IncTick+0x10>)
 8003b56:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <HAL_IncTick+0x14>)
 8003b58:	6811      	ldr	r1, [r2, #0]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	440b      	add	r3, r1
 8003b5e:	6013      	str	r3, [r2, #0]
}
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	20003908 	.word	0x20003908
 8003b68:	2000003d 	.word	0x2000003d

08003b6c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003b6c:	4b01      	ldr	r3, [pc, #4]	; (8003b74 <HAL_GetTick+0x8>)
 8003b6e:	6818      	ldr	r0, [r3, #0]
}
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	20003908 	.word	0x20003908

08003b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b78:	b538      	push	{r3, r4, r5, lr}
 8003b7a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003b7c:	f7ff fff6 	bl	8003b6c <HAL_GetTick>
 8003b80:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b82:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8003b84:	bf1e      	ittt	ne
 8003b86:	4b04      	ldrne	r3, [pc, #16]	; (8003b98 <HAL_Delay+0x20>)
 8003b88:	781b      	ldrbne	r3, [r3, #0]
 8003b8a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b8c:	f7ff ffee 	bl	8003b6c <HAL_GetTick>
 8003b90:	1b40      	subs	r0, r0, r5
 8003b92:	42a0      	cmp	r0, r4
 8003b94:	d3fa      	bcc.n	8003b8c <HAL_Delay+0x14>
  {
  }
}
 8003b96:	bd38      	pop	{r3, r4, r5, pc}
 8003b98:	2000003d 	.word	0x2000003d

08003b9c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b9c:	4a07      	ldr	r2, [pc, #28]	; (8003bbc <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b9e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ba0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003ba2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ba6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003baa:	041b      	lsls	r3, r3, #16
 8003bac:	0c1b      	lsrs	r3, r3, #16
 8003bae:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8003bb6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003bb8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003bba:	4770      	bx	lr
 8003bbc:	e000ed00 	.word	0xe000ed00

08003bc0 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bc0:	4b17      	ldr	r3, [pc, #92]	; (8003c20 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bc2:	b570      	push	{r4, r5, r6, lr}
 8003bc4:	68dc      	ldr	r4, [r3, #12]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc6:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bca:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bce:	f1c4 0507 	rsb	r5, r4, #7
 8003bd2:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bd4:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bd8:	bf28      	it	cs
 8003bda:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bdc:	2b06      	cmp	r3, #6
 8003bde:	bf98      	it	ls
 8003be0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be2:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003be6:	bf88      	it	hi
 8003be8:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bea:	ea21 0303 	bic.w	r3, r1, r3
 8003bee:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bf0:	fa06 f404 	lsl.w	r4, r6, r4
 8003bf4:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8003bf8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bfa:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bfe:	bfa8      	it	ge
 8003c00:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8003c04:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c08:	bfb8      	it	lt
 8003c0a:	4a06      	ldrlt	r2, [pc, #24]	; (8003c24 <HAL_NVIC_SetPriority+0x64>)
 8003c0c:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c0e:	bfab      	itete	ge
 8003c10:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c14:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c18:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c1c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003c1e:	bd70      	pop	{r4, r5, r6, pc}
 8003c20:	e000ed00 	.word	0xe000ed00
 8003c24:	e000ed14 	.word	0xe000ed14

08003c28 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	db08      	blt.n	8003c3e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	0942      	lsrs	r2, r0, #5
 8003c30:	f000 001f 	and.w	r0, r0, #31
 8003c34:	fa03 f000 	lsl.w	r0, r3, r0
 8003c38:	4b01      	ldr	r3, [pc, #4]	; (8003c40 <HAL_NVIC_EnableIRQ+0x18>)
 8003c3a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003c3e:	4770      	bx	lr
 8003c40:	e000e100 	.word	0xe000e100

08003c44 <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c44:	3801      	subs	r0, #1
 8003c46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003c4a:	d20a      	bcs.n	8003c62 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c4c:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c4e:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c50:	4a06      	ldr	r2, [pc, #24]	; (8003c6c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c52:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c54:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c58:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c5a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c5c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003c62:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	e000e010 	.word	0xe000e010
 8003c6c:	e000ed00 	.word	0xe000ed00

08003c70 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c70:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003c72:	b330      	cbz	r0, 8003cc2 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c74:	2214      	movs	r2, #20
 8003c76:	6801      	ldr	r1, [r0, #0]
 8003c78:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <HAL_DMA_Init+0x58>)
 8003c7a:	440b      	add	r3, r1
 8003c7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003c84:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <HAL_DMA_Init+0x5c>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c86:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8003c88:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c8a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8003c8e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c90:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c92:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c96:	4323      	orrs	r3, r4
 8003c98:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c9a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c9e:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ca0:	6944      	ldr	r4, [r0, #20]
 8003ca2:	4323      	orrs	r3, r4
 8003ca4:	6984      	ldr	r4, [r0, #24]
 8003ca6:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ca8:	69c4      	ldr	r4, [r0, #28]
 8003caa:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8003cac:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003cae:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003cb0:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cb2:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003cb4:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cb8:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003cba:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8003cbe:	4618      	mov	r0, r3
}
 8003cc0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003cc2:	2001      	movs	r0, #1
 8003cc4:	e7fc      	b.n	8003cc0 <HAL_DMA_Init+0x50>
 8003cc6:	bf00      	nop
 8003cc8:	bffdfff8 	.word	0xbffdfff8
 8003ccc:	40020000 	.word	0x40020000

08003cd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cd0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003cd2:	f890 4020 	ldrb.w	r4, [r0, #32]
 8003cd6:	2c01      	cmp	r4, #1
 8003cd8:	d035      	beq.n	8003d46 <HAL_DMA_Start_IT+0x76>
 8003cda:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003cdc:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8003ce0:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ce4:	42a5      	cmp	r5, r4
 8003ce6:	f04f 0600 	mov.w	r6, #0
 8003cea:	f04f 0402 	mov.w	r4, #2
 8003cee:	d128      	bne.n	8003d42 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cf0:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003cf4:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cf6:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8003cf8:	6826      	ldr	r6, [r4, #0]
 8003cfa:	f026 0601 	bic.w	r6, r6, #1
 8003cfe:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003d00:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8003d04:	40bd      	lsls	r5, r7
 8003d06:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d08:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d0a:	6843      	ldr	r3, [r0, #4]
 8003d0c:	6805      	ldr	r5, [r0, #0]
 8003d0e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8003d10:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d12:	bf0b      	itete	eq
 8003d14:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003d16:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003d18:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003d1a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8003d1c:	b14b      	cbz	r3, 8003d32 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d1e:	6823      	ldr	r3, [r4, #0]
 8003d20:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8003d24:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d26:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003d28:	682b      	ldr	r3, [r5, #0]
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	602b      	str	r3, [r5, #0]
}
 8003d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	f023 0304 	bic.w	r3, r3, #4
 8003d38:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	f043 030a 	orr.w	r3, r3, #10
 8003d40:	e7f0      	b.n	8003d24 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8003d42:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8003d46:	2002      	movs	r0, #2
 8003d48:	e7f2      	b.n	8003d30 <HAL_DMA_Start_IT+0x60>
	...

08003d4c <HAL_DMA_IRQHandler>:
{
 8003d4c:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003d4e:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d50:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003d52:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d54:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003d56:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003d58:	4095      	lsls	r5, r2
 8003d5a:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8003d5c:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003d5e:	d032      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x7a>
 8003d60:	074d      	lsls	r5, r1, #29
 8003d62:	d530      	bpl.n	8003dc6 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d68:	bf5e      	ittt	pl
 8003d6a:	681a      	ldrpl	r2, [r3, #0]
 8003d6c:	f022 0204 	bicpl.w	r2, r2, #4
 8003d70:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003d72:	4a3e      	ldr	r2, [pc, #248]	; (8003e6c <HAL_DMA_IRQHandler+0x120>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d019      	beq.n	8003dac <HAL_DMA_IRQHandler+0x60>
 8003d78:	3214      	adds	r2, #20
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d018      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x64>
 8003d7e:	3214      	adds	r2, #20
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d017      	beq.n	8003db4 <HAL_DMA_IRQHandler+0x68>
 8003d84:	3214      	adds	r2, #20
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d017      	beq.n	8003dba <HAL_DMA_IRQHandler+0x6e>
 8003d8a:	3214      	adds	r2, #20
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d017      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x74>
 8003d90:	3214      	adds	r2, #20
 8003d92:	4293      	cmp	r3, r2
 8003d94:	bf0c      	ite	eq
 8003d96:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8003d9a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8003d9e:	4a34      	ldr	r2, [pc, #208]	; (8003e70 <HAL_DMA_IRQHandler+0x124>)
 8003da0:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8003da2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d05e      	beq.n	8003e66 <HAL_DMA_IRQHandler+0x11a>
}
 8003da8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8003daa:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003dac:	2304      	movs	r3, #4
 8003dae:	e7f6      	b.n	8003d9e <HAL_DMA_IRQHandler+0x52>
 8003db0:	2340      	movs	r3, #64	; 0x40
 8003db2:	e7f4      	b.n	8003d9e <HAL_DMA_IRQHandler+0x52>
 8003db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003db8:	e7f1      	b.n	8003d9e <HAL_DMA_IRQHandler+0x52>
 8003dba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003dbe:	e7ee      	b.n	8003d9e <HAL_DMA_IRQHandler+0x52>
 8003dc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003dc4:	e7eb      	b.n	8003d9e <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003dc6:	2502      	movs	r5, #2
 8003dc8:	4095      	lsls	r5, r2
 8003dca:	4225      	tst	r5, r4
 8003dcc:	d035      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xee>
 8003dce:	078d      	lsls	r5, r1, #30
 8003dd0:	d533      	bpl.n	8003e3a <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	0694      	lsls	r4, r2, #26
 8003dd6:	d406      	bmi.n	8003de6 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	f022 020a 	bic.w	r2, r2, #10
 8003dde:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003de0:	2201      	movs	r2, #1
 8003de2:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003de6:	4a21      	ldr	r2, [pc, #132]	; (8003e6c <HAL_DMA_IRQHandler+0x120>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d019      	beq.n	8003e20 <HAL_DMA_IRQHandler+0xd4>
 8003dec:	3214      	adds	r2, #20
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d018      	beq.n	8003e24 <HAL_DMA_IRQHandler+0xd8>
 8003df2:	3214      	adds	r2, #20
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d017      	beq.n	8003e28 <HAL_DMA_IRQHandler+0xdc>
 8003df8:	3214      	adds	r2, #20
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d017      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xe2>
 8003dfe:	3214      	adds	r2, #20
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d017      	beq.n	8003e34 <HAL_DMA_IRQHandler+0xe8>
 8003e04:	3214      	adds	r2, #20
 8003e06:	4293      	cmp	r3, r2
 8003e08:	bf0c      	ite	eq
 8003e0a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8003e0e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8003e12:	4a17      	ldr	r2, [pc, #92]	; (8003e70 <HAL_DMA_IRQHandler+0x124>)
 8003e14:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8003e16:	2300      	movs	r3, #0
 8003e18:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8003e1c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003e1e:	e7c1      	b.n	8003da4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003e20:	2302      	movs	r3, #2
 8003e22:	e7f6      	b.n	8003e12 <HAL_DMA_IRQHandler+0xc6>
 8003e24:	2320      	movs	r3, #32
 8003e26:	e7f4      	b.n	8003e12 <HAL_DMA_IRQHandler+0xc6>
 8003e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e2c:	e7f1      	b.n	8003e12 <HAL_DMA_IRQHandler+0xc6>
 8003e2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e32:	e7ee      	b.n	8003e12 <HAL_DMA_IRQHandler+0xc6>
 8003e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e38:	e7eb      	b.n	8003e12 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003e3a:	2508      	movs	r5, #8
 8003e3c:	4095      	lsls	r5, r2
 8003e3e:	4225      	tst	r5, r4
 8003e40:	d011      	beq.n	8003e66 <HAL_DMA_IRQHandler+0x11a>
 8003e42:	0709      	lsls	r1, r1, #28
 8003e44:	d50f      	bpl.n	8003e66 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e46:	6819      	ldr	r1, [r3, #0]
 8003e48:	f021 010e 	bic.w	r1, r1, #14
 8003e4c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e4e:	2301      	movs	r3, #1
 8003e50:	fa03 f202 	lsl.w	r2, r3, r2
 8003e54:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e56:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8003e58:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8003e62:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003e64:	e79e      	b.n	8003da4 <HAL_DMA_IRQHandler+0x58>
}
 8003e66:	bc70      	pop	{r4, r5, r6}
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	40020008 	.word	0x40020008
 8003e70:	40020000 	.word	0x40020000

08003e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003e78:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8003e7a:	4626      	mov	r6, r4
 8003e7c:	4b65      	ldr	r3, [pc, #404]	; (8004014 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e7e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8004024 <HAL_GPIO_Init+0x1b0>
 8003e82:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8004028 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e86:	680a      	ldr	r2, [r1, #0]
 8003e88:	fa32 f506 	lsrs.w	r5, r2, r6
 8003e8c:	d102      	bne.n	8003e94 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8003e8e:	b003      	add	sp, #12
 8003e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8003e94:	f04f 0801 	mov.w	r8, #1
 8003e98:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e9c:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8003ea0:	4590      	cmp	r8, r2
 8003ea2:	d17e      	bne.n	8003fa2 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8003ea4:	684d      	ldr	r5, [r1, #4]
 8003ea6:	2d12      	cmp	r5, #18
 8003ea8:	f000 80a9 	beq.w	8003ffe <HAL_GPIO_Init+0x18a>
 8003eac:	f200 8082 	bhi.w	8003fb4 <HAL_GPIO_Init+0x140>
 8003eb0:	2d02      	cmp	r5, #2
 8003eb2:	f000 80a1 	beq.w	8003ff8 <HAL_GPIO_Init+0x184>
 8003eb6:	d876      	bhi.n	8003fa6 <HAL_GPIO_Init+0x132>
 8003eb8:	2d00      	cmp	r5, #0
 8003eba:	f000 8088 	beq.w	8003fce <HAL_GPIO_Init+0x15a>
 8003ebe:	2d01      	cmp	r5, #1
 8003ec0:	f000 8098 	beq.w	8003ff4 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ec4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ec8:	2aff      	cmp	r2, #255	; 0xff
 8003eca:	bf93      	iteet	ls
 8003ecc:	4682      	movls	sl, r0
 8003ece:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8003ed2:	3d08      	subhi	r5, #8
 8003ed4:	f8d0 b000 	ldrls.w	fp, [r0]
 8003ed8:	bf92      	itee	ls
 8003eda:	00b5      	lslls	r5, r6, #2
 8003edc:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8003ee0:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ee2:	fa09 f805 	lsl.w	r8, r9, r5
 8003ee6:	ea2b 0808 	bic.w	r8, fp, r8
 8003eea:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003eee:	bf88      	it	hi
 8003ef0:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ef4:	ea48 0505 	orr.w	r5, r8, r5
 8003ef8:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003efc:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8003f00:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8003f04:	d04d      	beq.n	8003fa2 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f06:	4f44      	ldr	r7, [pc, #272]	; (8004018 <HAL_GPIO_Init+0x1a4>)
 8003f08:	f026 0803 	bic.w	r8, r6, #3
 8003f0c:	69bd      	ldr	r5, [r7, #24]
 8003f0e:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8003f12:	f045 0501 	orr.w	r5, r5, #1
 8003f16:	61bd      	str	r5, [r7, #24]
 8003f18:	69bd      	ldr	r5, [r7, #24]
 8003f1a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8003f1e:	f005 0501 	and.w	r5, r5, #1
 8003f22:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f24:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f28:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f2a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8003f2e:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f32:	fa09 f90b 	lsl.w	r9, r9, fp
 8003f36:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003f3a:	4d38      	ldr	r5, [pc, #224]	; (800401c <HAL_GPIO_Init+0x1a8>)
 8003f3c:	42a8      	cmp	r0, r5
 8003f3e:	d063      	beq.n	8004008 <HAL_GPIO_Init+0x194>
 8003f40:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f44:	42a8      	cmp	r0, r5
 8003f46:	d061      	beq.n	800400c <HAL_GPIO_Init+0x198>
 8003f48:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f4c:	42a8      	cmp	r0, r5
 8003f4e:	d05f      	beq.n	8004010 <HAL_GPIO_Init+0x19c>
 8003f50:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f54:	42a8      	cmp	r0, r5
 8003f56:	bf0c      	ite	eq
 8003f58:	2503      	moveq	r5, #3
 8003f5a:	2504      	movne	r5, #4
 8003f5c:	fa05 f50b 	lsl.w	r5, r5, fp
 8003f60:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8003f64:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8003f68:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f6a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8003f6e:	bf14      	ite	ne
 8003f70:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f72:	4395      	biceq	r5, r2
 8003f74:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8003f76:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f78:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8003f7c:	bf14      	ite	ne
 8003f7e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f80:	4395      	biceq	r5, r2
 8003f82:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f84:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f86:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f8a:	bf14      	ite	ne
 8003f8c:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f8e:	4395      	biceq	r5, r2
 8003f90:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f92:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f94:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f98:	bf14      	ite	ne
 8003f9a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f9c:	ea25 0202 	biceq.w	r2, r5, r2
 8003fa0:	60da      	str	r2, [r3, #12]
	position++;
 8003fa2:	3601      	adds	r6, #1
 8003fa4:	e76f      	b.n	8003e86 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8003fa6:	2d03      	cmp	r5, #3
 8003fa8:	d022      	beq.n	8003ff0 <HAL_GPIO_Init+0x17c>
 8003faa:	2d11      	cmp	r5, #17
 8003fac:	d18a      	bne.n	8003ec4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003fae:	68cc      	ldr	r4, [r1, #12]
 8003fb0:	3404      	adds	r4, #4
          break;
 8003fb2:	e787      	b.n	8003ec4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8003fb4:	4f1a      	ldr	r7, [pc, #104]	; (8004020 <HAL_GPIO_Init+0x1ac>)
 8003fb6:	42bd      	cmp	r5, r7
 8003fb8:	d009      	beq.n	8003fce <HAL_GPIO_Init+0x15a>
 8003fba:	d812      	bhi.n	8003fe2 <HAL_GPIO_Init+0x16e>
 8003fbc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800402c <HAL_GPIO_Init+0x1b8>
 8003fc0:	454d      	cmp	r5, r9
 8003fc2:	d004      	beq.n	8003fce <HAL_GPIO_Init+0x15a>
 8003fc4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8003fc8:	454d      	cmp	r5, r9
 8003fca:	f47f af7b 	bne.w	8003ec4 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003fce:	688c      	ldr	r4, [r1, #8]
 8003fd0:	b1c4      	cbz	r4, 8004004 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003fd2:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8003fd4:	bf0c      	ite	eq
 8003fd6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8003fda:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fde:	2408      	movs	r4, #8
 8003fe0:	e770      	b.n	8003ec4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8003fe2:	4565      	cmp	r5, ip
 8003fe4:	d0f3      	beq.n	8003fce <HAL_GPIO_Init+0x15a>
 8003fe6:	4575      	cmp	r5, lr
 8003fe8:	d0f1      	beq.n	8003fce <HAL_GPIO_Init+0x15a>
 8003fea:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8004030 <HAL_GPIO_Init+0x1bc>
 8003fee:	e7eb      	b.n	8003fc8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ff0:	2400      	movs	r4, #0
 8003ff2:	e767      	b.n	8003ec4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ff4:	68cc      	ldr	r4, [r1, #12]
          break;
 8003ff6:	e765      	b.n	8003ec4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ff8:	68cc      	ldr	r4, [r1, #12]
 8003ffa:	3408      	adds	r4, #8
          break;
 8003ffc:	e762      	b.n	8003ec4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ffe:	68cc      	ldr	r4, [r1, #12]
 8004000:	340c      	adds	r4, #12
          break;
 8004002:	e75f      	b.n	8003ec4 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004004:	2404      	movs	r4, #4
 8004006:	e75d      	b.n	8003ec4 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004008:	2500      	movs	r5, #0
 800400a:	e7a7      	b.n	8003f5c <HAL_GPIO_Init+0xe8>
 800400c:	2501      	movs	r5, #1
 800400e:	e7a5      	b.n	8003f5c <HAL_GPIO_Init+0xe8>
 8004010:	2502      	movs	r5, #2
 8004012:	e7a3      	b.n	8003f5c <HAL_GPIO_Init+0xe8>
 8004014:	40010400 	.word	0x40010400
 8004018:	40021000 	.word	0x40021000
 800401c:	40010800 	.word	0x40010800
 8004020:	10210000 	.word	0x10210000
 8004024:	10310000 	.word	0x10310000
 8004028:	10320000 	.word	0x10320000
 800402c:	10110000 	.word	0x10110000
 8004030:	10220000 	.word	0x10220000

08004034 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004034:	b10a      	cbz	r2, 800403a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004036:	6101      	str	r1, [r0, #16]
  }
}
 8004038:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800403a:	0409      	lsls	r1, r1, #16
 800403c:	e7fb      	b.n	8004036 <HAL_GPIO_WritePin+0x2>

0800403e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800403e:	6801      	ldr	r1, [r0, #0]
 8004040:	2200      	movs	r2, #0
 8004042:	694b      	ldr	r3, [r1, #20]
 8004044:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8004048:	d010      	beq.n	800406c <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800404a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800404e:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8004050:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004052:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004054:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004058:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800405c:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800405e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004062:	f043 0304 	orr.w	r3, r3, #4
 8004066:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8004068:	2001      	movs	r0, #1
 800406a:	4770      	bx	lr
  }
  return HAL_OK;
 800406c:	4618      	mov	r0, r3
}
 800406e:	4770      	bx	lr

08004070 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8004070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004074:	4604      	mov	r4, r0
 8004076:	4616      	mov	r6, r2
 8004078:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800407a:	b28f      	uxth	r7, r1
 800407c:	6825      	ldr	r5, [r4, #0]
 800407e:	6968      	ldr	r0, [r5, #20]
 8004080:	ea37 0000 	bics.w	r0, r7, r0
 8004084:	d017      	beq.n	80040b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004086:	696b      	ldr	r3, [r5, #20]
 8004088:	055a      	lsls	r2, r3, #21
 800408a:	d516      	bpl.n	80040ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408c:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 800408e:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004090:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004094:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004096:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800409a:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800409c:	2300      	movs	r3, #0
 800409e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040a0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040a4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80040aa:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 80040ae:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040b0:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80040b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80040b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80040ba:	1c73      	adds	r3, r6, #1
 80040bc:	d0df      	beq.n	800407e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040be:	f7ff fd55 	bl	8003b6c <HAL_GetTick>
 80040c2:	eba0 0008 	sub.w	r0, r0, r8
 80040c6:	42b0      	cmp	r0, r6
 80040c8:	d801      	bhi.n	80040ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 80040ca:	2e00      	cmp	r6, #0
 80040cc:	d1d6      	bne.n	800407c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040ce:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80040d0:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040d2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040d4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80040de:	f042 0220 	orr.w	r2, r2, #32
 80040e2:	e7e4      	b.n	80040ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

080040e4 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80040e4:	b570      	push	{r4, r5, r6, lr}
 80040e6:	4604      	mov	r4, r0
 80040e8:	460d      	mov	r5, r1
 80040ea:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040ec:	6823      	ldr	r3, [r4, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	075b      	lsls	r3, r3, #29
 80040f2:	d501      	bpl.n	80040f8 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80040f4:	2000      	movs	r0, #0
}
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040f8:	4620      	mov	r0, r4
 80040fa:	f7ff ffa0 	bl	800403e <I2C_IsAcknowledgeFailed>
 80040fe:	b9a8      	cbnz	r0, 800412c <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8004100:	1c6a      	adds	r2, r5, #1
 8004102:	d0f3      	beq.n	80040ec <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004104:	f7ff fd32 	bl	8003b6c <HAL_GetTick>
 8004108:	1b80      	subs	r0, r0, r6
 800410a:	42a8      	cmp	r0, r5
 800410c:	d801      	bhi.n	8004112 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800410e:	2d00      	cmp	r5, #0
 8004110:	d1ec      	bne.n	80040ec <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004112:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004114:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004116:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004118:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800411c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004120:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004122:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004126:	f042 0220 	orr.w	r2, r2, #32
 800412a:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800412c:	2001      	movs	r0, #1
 800412e:	e7e2      	b.n	80040f6 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08004130 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004130:	b570      	push	{r4, r5, r6, lr}
 8004132:	4604      	mov	r4, r0
 8004134:	460d      	mov	r5, r1
 8004136:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004138:	6820      	ldr	r0, [r4, #0]
 800413a:	6943      	ldr	r3, [r0, #20]
 800413c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8004140:	d001      	beq.n	8004146 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8004142:	2000      	movs	r0, #0
 8004144:	e010      	b.n	8004168 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004146:	6942      	ldr	r2, [r0, #20]
 8004148:	06d2      	lsls	r2, r2, #27
 800414a:	d50e      	bpl.n	800416a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800414c:	f06f 0210 	mvn.w	r2, #16
 8004150:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8004152:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004154:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004156:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800415a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800415e:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004160:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004162:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004164:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004168:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416a:	f7ff fcff 	bl	8003b6c <HAL_GetTick>
 800416e:	1b80      	subs	r0, r0, r6
 8004170:	42a8      	cmp	r0, r5
 8004172:	d801      	bhi.n	8004178 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8004174:	2d00      	cmp	r5, #0
 8004176:	d1df      	bne.n	8004138 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004178:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800417a:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800417c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800417e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004182:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004186:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004188:	f042 0220 	orr.w	r2, r2, #32
 800418c:	e7e8      	b.n	8004160 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

0800418e <I2C_WaitOnFlagUntilTimeout>:
{
 800418e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004192:	4604      	mov	r4, r0
 8004194:	4690      	mov	r8, r2
 8004196:	461f      	mov	r7, r3
 8004198:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800419a:	ea4f 4911 	mov.w	r9, r1, lsr #16
 800419e:	b28d      	uxth	r5, r1
 80041a0:	6821      	ldr	r1, [r4, #0]
 80041a2:	f1b9 0f01 	cmp.w	r9, #1
 80041a6:	bf0c      	ite	eq
 80041a8:	694b      	ldreq	r3, [r1, #20]
 80041aa:	698b      	ldrne	r3, [r1, #24]
 80041ac:	ea35 0303 	bics.w	r3, r5, r3
 80041b0:	bf0c      	ite	eq
 80041b2:	2301      	moveq	r3, #1
 80041b4:	2300      	movne	r3, #0
 80041b6:	4598      	cmp	r8, r3
 80041b8:	d001      	beq.n	80041be <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80041ba:	2000      	movs	r0, #0
 80041bc:	e016      	b.n	80041ec <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 80041be:	1c7b      	adds	r3, r7, #1
 80041c0:	d0ef      	beq.n	80041a2 <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c2:	f7ff fcd3 	bl	8003b6c <HAL_GetTick>
 80041c6:	1b80      	subs	r0, r0, r6
 80041c8:	42b8      	cmp	r0, r7
 80041ca:	d801      	bhi.n	80041d0 <I2C_WaitOnFlagUntilTimeout+0x42>
 80041cc:	2f00      	cmp	r7, #0
 80041ce:	d1e7      	bne.n	80041a0 <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80041d0:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80041d2:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 80041d4:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 80041d6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80041d8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80041e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041e6:	f042 0220 	orr.w	r2, r2, #32
 80041ea:	6422      	str	r2, [r4, #64]	; 0x40
}
 80041ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080041f0 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80041f0:	b570      	push	{r4, r5, r6, lr}
 80041f2:	4604      	mov	r4, r0
 80041f4:	460d      	mov	r5, r1
 80041f6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	061b      	lsls	r3, r3, #24
 80041fe:	d501      	bpl.n	8004204 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8004200:	2000      	movs	r0, #0
}
 8004202:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004204:	4620      	mov	r0, r4
 8004206:	f7ff ff1a 	bl	800403e <I2C_IsAcknowledgeFailed>
 800420a:	b9a8      	cbnz	r0, 8004238 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800420c:	1c6a      	adds	r2, r5, #1
 800420e:	d0f3      	beq.n	80041f8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004210:	f7ff fcac 	bl	8003b6c <HAL_GetTick>
 8004214:	1b80      	subs	r0, r0, r6
 8004216:	42a8      	cmp	r0, r5
 8004218:	d801      	bhi.n	800421e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800421a:	2d00      	cmp	r5, #0
 800421c:	d1ec      	bne.n	80041f8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800421e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004220:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004222:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004224:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004228:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800422c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800422e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004232:	f042 0220 	orr.w	r2, r2, #32
 8004236:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004238:	2001      	movs	r0, #1
 800423a:	e7e2      	b.n	8004202 <I2C_WaitOnTXEFlagUntilTimeout+0x12>

0800423c <I2C_RequestMemoryWrite>:
{
 800423c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004240:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004242:	6802      	ldr	r2, [r0, #0]
{
 8004244:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004246:	6813      	ldr	r3, [r2, #0]
{
 8004248:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800424a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800424e:	6013      	str	r3, [r2, #0]
{
 8004250:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004252:	9600      	str	r6, [sp, #0]
 8004254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004256:	2200      	movs	r2, #0
 8004258:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 800425c:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800425e:	f7ff ff96 	bl	800418e <I2C_WaitOnFlagUntilTimeout>
 8004262:	b118      	cbz	r0, 800426c <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 8004264:	2001      	movs	r0, #1
}
 8004266:	b004      	add	sp, #16
 8004268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8004272:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004276:	4633      	mov	r3, r6
 8004278:	4916      	ldr	r1, [pc, #88]	; (80042d4 <I2C_RequestMemoryWrite+0x98>)
 800427a:	4620      	mov	r0, r4
 800427c:	f7ff fef8 	bl	8004070 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004280:	2800      	cmp	r0, #0
 8004282:	d1ef      	bne.n	8004264 <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004284:	6823      	ldr	r3, [r4, #0]
 8004286:	9003      	str	r0, [sp, #12]
 8004288:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800428a:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800428c:	9203      	str	r2, [sp, #12]
 800428e:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004290:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004292:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004294:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004296:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004298:	f7ff ffaa 	bl	80041f0 <I2C_WaitOnTXEFlagUntilTimeout>
 800429c:	b140      	cbz	r0, 80042b0 <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800429e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042a0:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a2:	bf01      	itttt	eq
 80042a4:	6822      	ldreq	r2, [r4, #0]
 80042a6:	6813      	ldreq	r3, [r2, #0]
 80042a8:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80042ac:	6013      	streq	r3, [r2, #0]
 80042ae:	e7d9      	b.n	8004264 <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042b0:	f1b8 0f01 	cmp.w	r8, #1
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	d102      	bne.n	80042be <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042b8:	b2ed      	uxtb	r5, r5
 80042ba:	611d      	str	r5, [r3, #16]
 80042bc:	e7d3      	b.n	8004266 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042be:	0a2a      	lsrs	r2, r5, #8
 80042c0:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042c2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80042c4:	4632      	mov	r2, r6
 80042c6:	4620      	mov	r0, r4
 80042c8:	f7ff ff92 	bl	80041f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	d1e6      	bne.n	800429e <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	e7f1      	b.n	80042b8 <I2C_RequestMemoryWrite+0x7c>
 80042d4:	00010002 	.word	0x00010002

080042d8 <I2C_RequestMemoryRead>:
{
 80042d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80042dc:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042de:	6803      	ldr	r3, [r0, #0]
{
 80042e0:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e2:	681a      	ldr	r2, [r3, #0]
{
 80042e4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042ea:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ec:	681a      	ldr	r2, [r3, #0]
{
 80042ee:	460f      	mov	r7, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042f4:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042fa:	9500      	str	r5, [sp, #0]
 80042fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042fe:	2200      	movs	r2, #0
{
 8004300:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004302:	f7ff ff44 	bl	800418e <I2C_WaitOnFlagUntilTimeout>
 8004306:	b118      	cbz	r0, 8004310 <I2C_RequestMemoryRead+0x38>
    return HAL_ERROR;
 8004308:	2001      	movs	r0, #1
}
 800430a:	b004      	add	sp, #16
 800430c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	b2ff      	uxtb	r7, r7
 8004314:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8004318:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800431a:	4929      	ldr	r1, [pc, #164]	; (80043c0 <I2C_RequestMemoryRead+0xe8>)
 800431c:	462b      	mov	r3, r5
 800431e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004320:	4620      	mov	r0, r4
 8004322:	f7ff fea5 	bl	8004070 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004326:	2800      	cmp	r0, #0
 8004328:	d1ee      	bne.n	8004308 <I2C_RequestMemoryRead+0x30>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	9003      	str	r0, [sp, #12]
 800432e:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004330:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004332:	9203      	str	r2, [sp, #12]
 8004334:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004336:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004338:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800433a:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800433c:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800433e:	f7ff ff57 	bl	80041f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004342:	b140      	cbz	r0, 8004356 <I2C_RequestMemoryRead+0x7e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004344:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004346:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004348:	bf01      	itttt	eq
 800434a:	6822      	ldreq	r2, [r4, #0]
 800434c:	6813      	ldreq	r3, [r2, #0]
 800434e:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8004352:	6013      	streq	r3, [r2, #0]
 8004354:	e7d8      	b.n	8004308 <I2C_RequestMemoryRead+0x30>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004356:	f1b8 0f01 	cmp.w	r8, #1
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	d125      	bne.n	80043aa <I2C_RequestMemoryRead+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800435e:	b2f6      	uxtb	r6, r6
 8004360:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004362:	462a      	mov	r2, r5
 8004364:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004366:	4620      	mov	r0, r4
 8004368:	f7ff ff42 	bl	80041f0 <I2C_WaitOnTXEFlagUntilTimeout>
 800436c:	4602      	mov	r2, r0
 800436e:	2800      	cmp	r0, #0
 8004370:	d1e8      	bne.n	8004344 <I2C_RequestMemoryRead+0x6c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004372:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004374:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004376:	680b      	ldr	r3, [r1, #0]
 8004378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800437c:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800437e:	9500      	str	r5, [sp, #0]
 8004380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004382:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004386:	f7ff ff02 	bl	800418e <I2C_WaitOnFlagUntilTimeout>
 800438a:	2800      	cmp	r0, #0
 800438c:	d1bc      	bne.n	8004308 <I2C_RequestMemoryRead+0x30>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	f047 0701 	orr.w	r7, r7, #1
 8004394:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004396:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004398:	462b      	mov	r3, r5
 800439a:	4909      	ldr	r1, [pc, #36]	; (80043c0 <I2C_RequestMemoryRead+0xe8>)
 800439c:	4620      	mov	r0, r4
 800439e:	f7ff fe67 	bl	8004070 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_ERROR;
 80043a2:	3000      	adds	r0, #0
 80043a4:	bf18      	it	ne
 80043a6:	2001      	movne	r0, #1
 80043a8:	e7af      	b.n	800430a <I2C_RequestMemoryRead+0x32>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043aa:	0a32      	lsrs	r2, r6, #8
 80043ac:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80043b0:	462a      	mov	r2, r5
 80043b2:	4620      	mov	r0, r4
 80043b4:	f7ff ff1c 	bl	80041f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80043b8:	2800      	cmp	r0, #0
 80043ba:	d1c3      	bne.n	8004344 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	e7ce      	b.n	800435e <I2C_RequestMemoryRead+0x86>
 80043c0:	00010002 	.word	0x00010002

080043c4 <HAL_I2C_Init>:
{
 80043c4:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80043c6:	4604      	mov	r4, r0
 80043c8:	b908      	cbnz	r0, 80043ce <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80043ca:	2001      	movs	r0, #1
}
 80043cc:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80043d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80043d6:	b91b      	cbnz	r3, 80043e0 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80043d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80043dc:	f7fd fe20 	bl	8002020 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80043e0:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80043e2:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80043e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80043e8:	6813      	ldr	r3, [r2, #0]
 80043ea:	f023 0301 	bic.w	r3, r3, #1
 80043ee:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043f0:	f001 f872 	bl	80054d8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043f4:	6863      	ldr	r3, [r4, #4]
 80043f6:	4a41      	ldr	r2, [pc, #260]	; (80044fc <HAL_I2C_Init+0x138>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d84d      	bhi.n	8004498 <HAL_I2C_Init+0xd4>
 80043fc:	4a40      	ldr	r2, [pc, #256]	; (8004500 <HAL_I2C_Init+0x13c>)
 80043fe:	4290      	cmp	r0, r2
 8004400:	d9e3      	bls.n	80043ca <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8004402:	4940      	ldr	r1, [pc, #256]	; (8004504 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004404:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8004406:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800440a:	6855      	ldr	r5, [r2, #4]
 800440c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8004410:	430d      	orrs	r5, r1
 8004412:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004414:	6a15      	ldr	r5, [r2, #32]
 8004416:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800441a:	3101      	adds	r1, #1
 800441c:	4329      	orrs	r1, r5
 800441e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004420:	69d1      	ldr	r1, [r2, #28]
 8004422:	4d36      	ldr	r5, [pc, #216]	; (80044fc <HAL_I2C_Init+0x138>)
 8004424:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004428:	42ab      	cmp	r3, r5
 800442a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800442e:	f100 30ff 	add.w	r0, r0, #4294967295
 8004432:	d848      	bhi.n	80044c6 <HAL_I2C_Init+0x102>
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	fbb0 f0f3 	udiv	r0, r0, r3
 800443a:	1c43      	adds	r3, r0, #1
 800443c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004440:	2b04      	cmp	r3, #4
 8004442:	bf38      	it	cc
 8004444:	2304      	movcc	r3, #4
 8004446:	430b      	orrs	r3, r1
 8004448:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800444a:	6811      	ldr	r1, [r2, #0]
 800444c:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8004450:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8004454:	4303      	orrs	r3, r0
 8004456:	430b      	orrs	r3, r1
 8004458:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800445a:	6891      	ldr	r1, [r2, #8]
 800445c:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8004460:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8004464:	4303      	orrs	r3, r0
 8004466:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800446a:	430b      	orrs	r3, r1
 800446c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800446e:	68d1      	ldr	r1, [r2, #12]
 8004470:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8004474:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004478:	4303      	orrs	r3, r0
 800447a:	430b      	orrs	r3, r1
 800447c:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800447e:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004480:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8004488:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800448a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800448c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004490:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004492:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8004496:	e799      	b.n	80043cc <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004498:	4a1b      	ldr	r2, [pc, #108]	; (8004508 <HAL_I2C_Init+0x144>)
 800449a:	4290      	cmp	r0, r2
 800449c:	d995      	bls.n	80043ca <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800449e:	4e19      	ldr	r6, [pc, #100]	; (8004504 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044a0:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80044a4:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044a8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044aa:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044ac:	6855      	ldr	r5, [r2, #4]
 80044ae:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80044b2:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044b4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044b8:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044ba:	6a15      	ldr	r5, [r2, #32]
 80044bc:	fbb1 f1f6 	udiv	r1, r1, r6
 80044c0:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80044c4:	e7a9      	b.n	800441a <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044c6:	68a5      	ldr	r5, [r4, #8]
 80044c8:	b955      	cbnz	r5, 80044e0 <HAL_I2C_Init+0x11c>
 80044ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80044ce:	fbb0 f0f3 	udiv	r0, r0, r3
 80044d2:	1c43      	adds	r3, r0, #1
 80044d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d8:	b16b      	cbz	r3, 80044f6 <HAL_I2C_Init+0x132>
 80044da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044de:	e7b2      	b.n	8004446 <HAL_I2C_Init+0x82>
 80044e0:	2519      	movs	r5, #25
 80044e2:	436b      	muls	r3, r5
 80044e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80044e8:	1c43      	adds	r3, r0, #1
 80044ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ee:	b113      	cbz	r3, 80044f6 <HAL_I2C_Init+0x132>
 80044f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044f4:	e7a7      	b.n	8004446 <HAL_I2C_Init+0x82>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e7a5      	b.n	8004446 <HAL_I2C_Init+0x82>
 80044fa:	bf00      	nop
 80044fc:	000186a0 	.word	0x000186a0
 8004500:	001e847f 	.word	0x001e847f
 8004504:	000f4240 	.word	0x000f4240
 8004508:	003d08ff 	.word	0x003d08ff

0800450c <HAL_I2C_Mem_Write>:
{
 800450c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004510:	4604      	mov	r4, r0
 8004512:	4699      	mov	r9, r3
 8004514:	460f      	mov	r7, r1
 8004516:	4690      	mov	r8, r2
 8004518:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800451a:	f7ff fb27 	bl	8003b6c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800451e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8004522:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004524:	2b20      	cmp	r3, #32
 8004526:	d003      	beq.n	8004530 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8004528:	2002      	movs	r0, #2
}
 800452a:	b003      	add	sp, #12
 800452c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004530:	9000      	str	r0, [sp, #0]
 8004532:	2319      	movs	r3, #25
 8004534:	2201      	movs	r2, #1
 8004536:	493b      	ldr	r1, [pc, #236]	; (8004624 <HAL_I2C_Mem_Write+0x118>)
 8004538:	4620      	mov	r0, r4
 800453a:	f7ff fe28 	bl	800418e <I2C_WaitOnFlagUntilTimeout>
 800453e:	2800      	cmp	r0, #0
 8004540:	d1f2      	bne.n	8004528 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8004542:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004546:	2b01      	cmp	r3, #1
 8004548:	d0ee      	beq.n	8004528 <HAL_I2C_Mem_Write+0x1c>
 800454a:	2301      	movs	r3, #1
 800454c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004550:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004552:	4620      	mov	r0, r4
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8004558:	bf58      	it	pl
 800455a:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800455c:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 800455e:	bf5c      	itt	pl
 8004560:	f042 0201 	orrpl.w	r2, r2, #1
 8004564:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800456c:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800456e:	2321      	movs	r3, #33	; 0x21
 8004570:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004574:	2340      	movs	r3, #64	; 0x40
 8004576:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800457a:	2300      	movs	r3, #0
 800457c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800457e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004580:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->pBuffPtr    = pData;
 8004584:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004586:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800458a:	4642      	mov	r2, r8
    hi2c->XferCount   = Size;
 800458c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800458e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004590:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004592:	4b25      	ldr	r3, [pc, #148]	; (8004628 <HAL_I2C_Mem_Write+0x11c>)
 8004594:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004596:	464b      	mov	r3, r9
 8004598:	f7ff fe50 	bl	800423c <I2C_RequestMemoryWrite>
 800459c:	2800      	cmp	r0, #0
 800459e:	d02a      	beq.n	80045f6 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 80045a0:	2001      	movs	r0, #1
 80045a2:	e7c2      	b.n	800452a <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045a4:	f7ff fe24 	bl	80041f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80045a8:	b140      	cbz	r0, 80045bc <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045ac:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ae:	bf01      	itttt	eq
 80045b0:	6822      	ldreq	r2, [r4, #0]
 80045b2:	6813      	ldreq	r3, [r2, #0]
 80045b4:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80045b8:	6013      	streq	r3, [r2, #0]
 80045ba:	e7f1      	b.n	80045a0 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045be:	6827      	ldr	r7, [r4, #0]
 80045c0:	461a      	mov	r2, r3
 80045c2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80045c6:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 80045c8:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80045ca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80045cc:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80045ce:	3a01      	subs	r2, #1
 80045d0:	b292      	uxth	r2, r2
 80045d2:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045d4:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 80045d6:	1e48      	subs	r0, r1, #1
 80045d8:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045da:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 80045dc:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045de:	d50a      	bpl.n	80045f6 <HAL_I2C_Mem_Write+0xea>
 80045e0:	b148      	cbz	r0, 80045f6 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045e2:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 80045e4:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045e6:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 80045e8:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80045ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80045ec:	3902      	subs	r1, #2
        hi2c->XferCount--;
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80045f2:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80045f4:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045f6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f8:	462a      	mov	r2, r5
 80045fa:	4631      	mov	r1, r6
 80045fc:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1d0      	bne.n	80045a4 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004602:	f7ff fd6f 	bl	80040e4 <I2C_WaitOnBTFFlagUntilTimeout>
 8004606:	2800      	cmp	r0, #0
 8004608:	d1cf      	bne.n	80045aa <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800460a:	6822      	ldr	r2, [r4, #0]
 800460c:	6813      	ldr	r3, [r2, #0]
 800460e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004612:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004614:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8004616:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800461a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800461e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8004622:	e782      	b.n	800452a <HAL_I2C_Mem_Write+0x1e>
 8004624:	00100002 	.word	0x00100002
 8004628:	ffff0000 	.word	0xffff0000

0800462c <HAL_I2C_Mem_Read>:
{
 800462c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004630:	4604      	mov	r4, r0
 8004632:	b087      	sub	sp, #28
 8004634:	4699      	mov	r9, r3
 8004636:	460d      	mov	r5, r1
 8004638:	4690      	mov	r8, r2
 800463a:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800463c:	f7ff fa96 	bl	8003b6c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004640:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8004644:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004646:	2b20      	cmp	r3, #32
 8004648:	d004      	beq.n	8004654 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 800464a:	2502      	movs	r5, #2
}
 800464c:	4628      	mov	r0, r5
 800464e:	b007      	add	sp, #28
 8004650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004654:	9000      	str	r0, [sp, #0]
 8004656:	2319      	movs	r3, #25
 8004658:	2201      	movs	r2, #1
 800465a:	497e      	ldr	r1, [pc, #504]	; (8004854 <HAL_I2C_Mem_Read+0x228>)
 800465c:	4620      	mov	r0, r4
 800465e:	f7ff fd96 	bl	800418e <I2C_WaitOnFlagUntilTimeout>
 8004662:	2800      	cmp	r0, #0
 8004664:	d1f1      	bne.n	800464a <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8004666:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800466a:	2b01      	cmp	r3, #1
 800466c:	d0ed      	beq.n	800464a <HAL_I2C_Mem_Read+0x1e>
 800466e:	2301      	movs	r3, #1
 8004670:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004674:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004676:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800467c:	bf58      	it	pl
 800467e:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004680:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8004682:	bf5c      	itt	pl
 8004684:	f042 0201 	orrpl.w	r2, r2, #1
 8004688:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004690:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004692:	2322      	movs	r3, #34	; 0x22
 8004694:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004698:	2340      	movs	r3, #64	; 0x40
 800469a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800469e:	2300      	movs	r3, #0
 80046a0:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80046a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046a4:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->pBuffPtr    = pData;
 80046a8:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046aa:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046ae:	4642      	mov	r2, r8
    hi2c->XferCount   = Size;
 80046b0:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80046b4:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046b6:	4b68      	ldr	r3, [pc, #416]	; (8004858 <HAL_I2C_Mem_Read+0x22c>)
 80046b8:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046ba:	464b      	mov	r3, r9
 80046bc:	f7ff fe0c 	bl	80042d8 <I2C_RequestMemoryRead>
 80046c0:	4605      	mov	r5, r0
 80046c2:	b108      	cbz	r0, 80046c8 <HAL_I2C_Mem_Read+0x9c>
      return HAL_ERROR;
 80046c4:	2501      	movs	r5, #1
 80046c6:	e7c1      	b.n	800464c <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 80046c8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	b992      	cbnz	r2, 80046f4 <HAL_I2C_Mem_Read+0xc8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ce:	9002      	str	r0, [sp, #8]
 80046d0:	695a      	ldr	r2, [r3, #20]
 80046d2:	9202      	str	r2, [sp, #8]
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	9202      	str	r2, [sp, #8]
 80046d8:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046e0:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80046e2:	2320      	movs	r3, #32
 80046e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e8:	2300      	movs	r3, #0
 80046ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80046ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80046f2:	e7ab      	b.n	800464c <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 80046f4:	2a01      	cmp	r2, #1
 80046f6:	d12f      	bne.n	8004758 <HAL_I2C_Mem_Read+0x12c>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004700:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	9003      	str	r0, [sp, #12]
 8004706:	695a      	ldr	r2, [r3, #20]
 8004708:	9203      	str	r2, [sp, #12]
 800470a:	699a      	ldr	r2, [r3, #24]
 800470c:	9203      	str	r2, [sp, #12]
 800470e:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004716:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004718:	b662      	cpsie	i
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800471a:	f8df 8140 	ldr.w	r8, [pc, #320]	; 800485c <HAL_I2C_Mem_Read+0x230>
    while (hi2c->XferSize > 0U)
 800471e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0de      	beq.n	80046e2 <HAL_I2C_Mem_Read+0xb6>
      if (hi2c->XferSize <= 3U)
 8004724:	2b03      	cmp	r3, #3
 8004726:	d877      	bhi.n	8004818 <HAL_I2C_Mem_Read+0x1ec>
        if (hi2c->XferSize == 1U)
 8004728:	2b01      	cmp	r3, #1
 800472a:	d131      	bne.n	8004790 <HAL_I2C_Mem_Read+0x164>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800472c:	4632      	mov	r2, r6
 800472e:	4639      	mov	r1, r7
 8004730:	4620      	mov	r0, r4
 8004732:	f7ff fcfd 	bl	8004130 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004736:	2800      	cmp	r0, #0
 8004738:	d1c4      	bne.n	80046c4 <HAL_I2C_Mem_Read+0x98>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800473a:	6823      	ldr	r3, [r4, #0]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004740:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004744:	3301      	adds	r3, #1
 8004746:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004748:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800474a:	3b01      	subs	r3, #1
 800474c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800474e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004750:	3b01      	subs	r3, #1
 8004752:	b29b      	uxth	r3, r3
 8004754:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004756:	e7e2      	b.n	800471e <HAL_I2C_Mem_Read+0xf2>
    else if (hi2c->XferSize == 2U)
 8004758:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800475a:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 800475c:	d10e      	bne.n	800477c <HAL_I2C_Mem_Read+0x150>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800475e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004762:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004764:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	9004      	str	r0, [sp, #16]
 800476a:	695a      	ldr	r2, [r3, #20]
 800476c:	9204      	str	r2, [sp, #16]
 800476e:	699a      	ldr	r2, [r3, #24]
 8004770:	9204      	str	r2, [sp, #16]
 8004772:	9a04      	ldr	r2, [sp, #16]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800477a:	e7cc      	b.n	8004716 <HAL_I2C_Mem_Read+0xea>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800477c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004780:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004782:	9005      	str	r0, [sp, #20]
 8004784:	695a      	ldr	r2, [r3, #20]
 8004786:	9205      	str	r2, [sp, #20]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	9305      	str	r3, [sp, #20]
 800478c:	9b05      	ldr	r3, [sp, #20]
 800478e:	e7c4      	b.n	800471a <HAL_I2C_Mem_Read+0xee>
        else if (hi2c->XferSize == 2U)
 8004790:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004792:	9600      	str	r6, [sp, #0]
 8004794:	463b      	mov	r3, r7
 8004796:	f04f 0200 	mov.w	r2, #0
 800479a:	4641      	mov	r1, r8
 800479c:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 800479e:	d118      	bne.n	80047d2 <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047a0:	f7ff fcf5 	bl	800418e <I2C_WaitOnFlagUntilTimeout>
 80047a4:	2800      	cmp	r0, #0
 80047a6:	d18d      	bne.n	80046c4 <HAL_I2C_Mem_Read+0x98>
 80047a8:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b2:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b4:	691a      	ldr	r2, [r3, #16]
 80047b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047b8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80047ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047bc:	3301      	adds	r3, #1
 80047be:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80047c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80047c2:	3b01      	subs	r3, #1
 80047c4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80047c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80047ce:	b662      	cpsie	i
 80047d0:	e7b3      	b.n	800473a <HAL_I2C_Mem_Read+0x10e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047d2:	f7ff fcdc 	bl	800418e <I2C_WaitOnFlagUntilTimeout>
 80047d6:	4602      	mov	r2, r0
 80047d8:	2800      	cmp	r0, #0
 80047da:	f47f af73 	bne.w	80046c4 <HAL_I2C_Mem_Read+0x98>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047de:	6821      	ldr	r1, [r4, #0]
 80047e0:	680b      	ldr	r3, [r1, #0]
 80047e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047e6:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80047e8:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ea:	6823      	ldr	r3, [r4, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047ec:	4620      	mov	r0, r4
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ee:	6919      	ldr	r1, [r3, #16]
 80047f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047f2:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 80047f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047f6:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 80047f8:	3301      	adds	r3, #1
 80047fa:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80047fc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047fe:	4641      	mov	r1, r8
          hi2c->XferSize--;
 8004800:	3b01      	subs	r3, #1
 8004802:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004804:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004806:	3b01      	subs	r3, #1
 8004808:	b29b      	uxth	r3, r3
 800480a:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800480c:	463b      	mov	r3, r7
 800480e:	f7ff fcbe 	bl	800418e <I2C_WaitOnFlagUntilTimeout>
 8004812:	2800      	cmp	r0, #0
 8004814:	d0c9      	beq.n	80047aa <HAL_I2C_Mem_Read+0x17e>
 8004816:	e755      	b.n	80046c4 <HAL_I2C_Mem_Read+0x98>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004818:	4632      	mov	r2, r6
 800481a:	4639      	mov	r1, r7
 800481c:	4620      	mov	r0, r4
 800481e:	f7ff fc87 	bl	8004130 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004822:	2800      	cmp	r0, #0
 8004824:	f47f af4e 	bne.w	80046c4 <HAL_I2C_Mem_Read+0x98>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800482e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004830:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004832:	1c53      	adds	r3, r2, #1
 8004834:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8004836:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004838:	3b01      	subs	r3, #1
 800483a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800483c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800483e:	3b01      	subs	r3, #1
 8004840:	b29b      	uxth	r3, r3
 8004842:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	6959      	ldr	r1, [r3, #20]
 8004848:	0749      	lsls	r1, r1, #29
 800484a:	f57f af68 	bpl.w	800471e <HAL_I2C_Mem_Read+0xf2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	7053      	strb	r3, [r2, #1]
 8004852:	e776      	b.n	8004742 <HAL_I2C_Mem_Read+0x116>
 8004854:	00100002 	.word	0x00100002
 8004858:	ffff0000 	.word	0xffff0000
 800485c:	00010004 	.word	0x00010004

08004860 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004860:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004862:	4604      	mov	r4, r0
{
 8004864:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8004866:	b310      	cbz	r0, 80048ae <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004868:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 800486c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004870:	b91b      	cbnz	r3, 800487a <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004872:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004876:	f002 fb49 	bl	8006f0c <HAL_PCD_MspInit>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800487a:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800487c:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800487e:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 8004880:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8004884:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 8004888:	f001 f99e 	bl	8005bc8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800488c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800488e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004890:	682b      	ldr	r3, [r5, #0]
 8004892:	4625      	mov	r5, r4
 8004894:	6033      	str	r3, [r6, #0]
 8004896:	1d27      	adds	r7, r4, #4
 8004898:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800489c:	f855 0b10 	ldr.w	r0, [r5], #16
 80048a0:	f001 f983 	bl	8005baa <USB_CoreInit>
 80048a4:	4606      	mov	r6, r0
 80048a6:	b120      	cbz	r0, 80048b2 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048a8:	2302      	movs	r3, #2
 80048aa:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    return HAL_ERROR;
 80048ae:	2501      	movs	r5, #1
 80048b0:	e048      	b.n	8004944 <HAL_PCD_Init+0xe4>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80048b2:	4601      	mov	r1, r0
 80048b4:	6820      	ldr	r0, [r4, #0]
 80048b6:	f001 f991 	bl	8005bdc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048ba:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80048bc:	f04f 0c01 	mov.w	ip, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048c0:	6861      	ldr	r1, [r4, #4]
 80048c2:	b2c3      	uxtb	r3, r0
 80048c4:	4299      	cmp	r1, r3
 80048c6:	f100 0001 	add.w	r0, r0, #1
 80048ca:	d817      	bhi.n	80048fc <HAL_PCD_Init+0x9c>
 80048cc:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80048ce:	4610      	mov	r0, r2
 80048d0:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048d2:	4299      	cmp	r1, r3
 80048d4:	f102 0201 	add.w	r2, r2, #1
 80048d8:	d81d      	bhi.n	8004916 <HAL_PCD_Init+0xb6>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048dc:	466e      	mov	r6, sp
 80048de:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80048e0:	682b      	ldr	r3, [r5, #0]
 80048e2:	6033      	str	r3, [r6, #0]
 80048e4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80048e8:	6820      	ldr	r0, [r4, #0]
 80048ea:	f001 f979 	bl	8005be0 <USB_DevInit>
 80048ee:	2301      	movs	r3, #1
 80048f0:	4605      	mov	r5, r0
 80048f2:	b300      	cbz	r0, 8004936 <HAL_PCD_Init+0xd6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048f4:	2202      	movs	r2, #2
 80048f6:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
 80048fa:	e7d8      	b.n	80048ae <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 80048fc:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8004900:	f882 c029 	strb.w	ip, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8004904:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004908:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800490a:	f882 602b 	strb.w	r6, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 800490e:	e9c2 660e 	strd	r6, r6, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 8004912:	6416      	str	r6, [r2, #64]	; 0x40
 8004914:	e7d5      	b.n	80048c2 <HAL_PCD_Init+0x62>
    hpcd->OUT_ep[i].is_in = 0U;
 8004916:	eb04 1643 	add.w	r6, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 800491a:	f886 3128 	strb.w	r3, [r6, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 800491e:	330a      	adds	r3, #10
 8004920:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 8004922:	f886 0129 	strb.w	r0, [r6, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004926:	f886 012b 	strb.w	r0, [r6, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 800492a:	f8c6 0138 	str.w	r0, [r6, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800492e:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004932:	50e0      	str	r0, [r4, r3]
 8004934:	e7cc      	b.n	80048d0 <HAL_PCD_Init+0x70>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8004936:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800493a:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 800493e:	6820      	ldr	r0, [r4, #0]
 8004940:	f001 fbef 	bl	8006122 <USB_DevDisconnect>

  return HAL_OK;
}
 8004944:	4628      	mov	r0, r5
 8004946:	b007      	add	sp, #28
 8004948:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800494a <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800494a:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
{
 800494e:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8004950:	2b01      	cmp	r3, #1
{
 8004952:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004954:	d00e      	beq.n	8004974 <HAL_PCD_Start+0x2a>
 8004956:	2101      	movs	r1, #1
 8004958:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800495c:	f002 fc03 	bl	8007166 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8004960:	6820      	ldr	r0, [r4, #0]
 8004962:	f001 fbdc 	bl	800611e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004966:	6820      	ldr	r0, [r4, #0]
 8004968:	f001 f926 	bl	8005bb8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800496c:	2000      	movs	r0, #0
 800496e:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8004972:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8004974:	2002      	movs	r0, #2
 8004976:	e7fc      	b.n	8004972 <HAL_PCD_Start+0x28>

08004978 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8004978:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
{
 800497c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800497e:	2a01      	cmp	r2, #1
{
 8004980:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004982:	d00b      	beq.n	800499c <HAL_PCD_SetAddress+0x24>
 8004984:	2201      	movs	r2, #1
 8004986:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 800498a:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800498e:	6800      	ldr	r0, [r0, #0]
 8004990:	f001 fbbf 	bl	8006112 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004994:	2000      	movs	r0, #0
 8004996:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 800499a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800499c:	2002      	movs	r0, #2
 800499e:	e7fc      	b.n	800499a <HAL_PCD_SetAddress+0x22>

080049a0 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80049a0:	b570      	push	{r4, r5, r6, lr}
 80049a2:	4604      	mov	r4, r0
 80049a4:	f001 0507 	and.w	r5, r1, #7
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049a8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80049ac:	ea4f 1045 	mov.w	r0, r5, lsl #5
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049b0:	bf14      	ite	ne
 80049b2:	f100 0128 	addne.w	r1, r0, #40	; 0x28
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049b6:	f500 7194 	addeq.w	r1, r0, #296	; 0x128
 80049ba:	eb04 0600 	add.w	r6, r4, r0
    ep->is_in = 1U;
 80049be:	bf17      	itett	ne
 80049c0:	2001      	movne	r0, #1
    ep->is_in = 0U;
 80049c2:	2000      	moveq	r0, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049c4:	1909      	addne	r1, r1, r4
    ep->is_in = 1U;
 80049c6:	f886 0029 	strbne.w	r0, [r6, #41]	; 0x29
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049ca:	bf04      	itt	eq
 80049cc:	1909      	addeq	r1, r1, r4
    ep->is_in = 0U;
 80049ce:	f886 0129 	strbeq.w	r0, [r6, #297]	; 0x129
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 80049d2:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 80049d4:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049d6:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 80049d8:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80049da:	b102      	cbz	r2, 80049de <HAL_PCD_EP_Open+0x3e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80049dc:	81cd      	strh	r5, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80049de:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 80049e0:	bf04      	itt	eq
 80049e2:	2300      	moveq	r3, #0
 80049e4:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 80049e6:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d009      	beq.n	8004a02 <HAL_PCD_EP_Open+0x62>
 80049ee:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80049f0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80049f2:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80049f6:	f001 f90d 	bl	8005c14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049fa:	2000      	movs	r0, #0
 80049fc:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
}
 8004a00:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8004a02:	2002      	movs	r0, #2
 8004a04:	e7fc      	b.n	8004a00 <HAL_PCD_EP_Open+0x60>

08004a06 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a06:	f001 0207 	and.w	r2, r1, #7
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a0a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004a0e:	ea4f 1342 	mov.w	r3, r2, lsl #5
{
 8004a12:	b510      	push	{r4, lr}
 8004a14:	4604      	mov	r4, r0
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a16:	bf18      	it	ne
 8004a18:	f103 0128 	addne.w	r1, r3, #40	; 0x28
 8004a1c:	4418      	add	r0, r3
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a1e:	bf0b      	itete	eq
 8004a20:	f503 7194 	addeq.w	r1, r3, #296	; 0x128
    ep->is_in = 1U;
 8004a24:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8004a26:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a28:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a2a:	bf0a      	itet	eq
 8004a2c:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8004a2e:	f880 3029 	strbne.w	r3, [r0, #41]	; 0x29
    ep->is_in = 0U;
 8004a32:	f880 3129 	strbeq.w	r3, [r0, #297]	; 0x129
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004a36:	700a      	strb	r2, [r1, #0]

  __HAL_LOCK(hpcd);
 8004a38:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d009      	beq.n	8004a54 <HAL_PCD_EP_Close+0x4e>
 8004a40:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a42:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004a44:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a48:	f001 fa3e 	bl	8005ec8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8004a52:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8004a54:	2002      	movs	r0, #2
 8004a56:	e7fc      	b.n	8004a52 <HAL_PCD_EP_Close+0x4c>

08004a58 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a58:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8004a5a:	2600      	movs	r6, #0
 8004a5c:	f001 0107 	and.w	r1, r1, #7
 8004a60:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 8004a62:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a64:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a68:	f505 7194 	add.w	r1, r5, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a6c:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8004a6e:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  ep->xfer_len = len;
 8004a72:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
  ep->xfer_count = 0U;
 8004a76:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 8004a7a:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a7e:	6800      	ldr	r0, [r0, #0]
 8004a80:	f001 fb66 	bl	8006150 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8004a84:	4630      	mov	r0, r6
 8004a86:	bd70      	pop	{r4, r5, r6, pc}

08004a88 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004a88:	f001 0107 	and.w	r1, r1, #7
 8004a8c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8004a90:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 8004a94:	4770      	bx	lr

08004a96 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a96:	f001 0107 	and.w	r1, r1, #7
 8004a9a:	b570      	push	{r4, r5, r6, lr}
 8004a9c:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a9e:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8004aa0:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8004aa4:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8004aa6:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8004aa8:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004aac:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ab0:	4401      	add	r1, r0
  ep->xfer_count = 0U;
 8004ab2:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8004ab4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ab8:	6800      	ldr	r0, [r0, #0]
 8004aba:	f001 fb49 	bl	8006150 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8004abe:	4630      	mov	r0, r6
 8004ac0:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ac4 <HAL_PCD_IRQHandler>:
{
 8004ac4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac8:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004aca:	6800      	ldr	r0, [r0, #0]
 8004acc:	f001 fb2b 	bl	8006126 <USB_ReadInterrupts>
 8004ad0:	0402      	lsls	r2, r0, #16
 8004ad2:	d50b      	bpl.n	8004aec <HAL_PCD_IRQHandler+0x28>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004ad4:	f8df 940c 	ldr.w	r9, [pc, #1036]	; 8004ee4 <HAL_PCD_IRQHandler+0x420>
 8004ad8:	f8df a40c 	ldr.w	sl, [pc, #1036]	; 8004ee8 <HAL_PCD_IRQHandler+0x424>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004adc:	f8df b40c 	ldr.w	fp, [pc, #1036]	; 8004eec <HAL_PCD_IRQHandler+0x428>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004ae0:	6820      	ldr	r0, [r4, #0]
 8004ae2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8004ae6:	041b      	lsls	r3, r3, #16
 8004ae8:	f100 809e 	bmi.w	8004c28 <HAL_PCD_IRQHandler+0x164>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004aec:	6820      	ldr	r0, [r4, #0]
 8004aee:	f001 fb1a 	bl	8006126 <USB_ReadInterrupts>
 8004af2:	0543      	lsls	r3, r0, #21
 8004af4:	d50f      	bpl.n	8004b16 <HAL_PCD_IRQHandler+0x52>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004af6:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8004af8:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004afa:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004afe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b02:	041b      	lsls	r3, r3, #16
 8004b04:	0c1b      	lsrs	r3, r3, #16
 8004b06:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8004b0a:	f002 fa38 	bl	8006f7e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004b0e:	2100      	movs	r1, #0
 8004b10:	4620      	mov	r0, r4
 8004b12:	f7ff ff31 	bl	8004978 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004b16:	6820      	ldr	r0, [r4, #0]
 8004b18:	f001 fb05 	bl	8006126 <USB_ReadInterrupts>
 8004b1c:	0447      	lsls	r7, r0, #17
 8004b1e:	d508      	bpl.n	8004b32 <HAL_PCD_IRQHandler+0x6e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004b20:	6822      	ldr	r2, [r4, #0]
 8004b22:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004b26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b2a:	041b      	lsls	r3, r3, #16
 8004b2c:	0c1b      	lsrs	r3, r3, #16
 8004b2e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004b32:	6820      	ldr	r0, [r4, #0]
 8004b34:	f001 faf7 	bl	8006126 <USB_ReadInterrupts>
 8004b38:	0486      	lsls	r6, r0, #18
 8004b3a:	d508      	bpl.n	8004b4e <HAL_PCD_IRQHandler+0x8a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004b3c:	6822      	ldr	r2, [r4, #0]
 8004b3e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004b42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b46:	041b      	lsls	r3, r3, #16
 8004b48:	0c1b      	lsrs	r3, r3, #16
 8004b4a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004b4e:	6820      	ldr	r0, [r4, #0]
 8004b50:	f001 fae9 	bl	8006126 <USB_ReadInterrupts>
 8004b54:	04c5      	lsls	r5, r0, #19
 8004b56:	d51c      	bpl.n	8004b92 <HAL_PCD_IRQHandler+0xce>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004b58:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8004b5a:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004b5c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004b60:	f023 0304 	bic.w	r3, r3, #4
 8004b64:	041b      	lsls	r3, r3, #16
 8004b66:	0c1b      	lsrs	r3, r3, #16
 8004b68:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004b6c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004b70:	f023 0308 	bic.w	r3, r3, #8
 8004b74:	041b      	lsls	r3, r3, #16
 8004b76:	0c1b      	lsrs	r3, r3, #16
 8004b78:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8004b7c:	f002 fa22 	bl	8006fc4 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004b80:	6822      	ldr	r2, [r4, #0]
 8004b82:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004b86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b8a:	041b      	lsls	r3, r3, #16
 8004b8c:	0c1b      	lsrs	r3, r3, #16
 8004b8e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004b92:	6820      	ldr	r0, [r4, #0]
 8004b94:	f001 fac7 	bl	8006126 <USB_ReadInterrupts>
 8004b98:	0500      	lsls	r0, r0, #20
 8004b9a:	d524      	bpl.n	8004be6 <HAL_PCD_IRQHandler+0x122>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8004b9c:	6820      	ldr	r0, [r4, #0]
 8004b9e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8004ba2:	f043 0308 	orr.w	r3, r3, #8
 8004ba6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004baa:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8004bae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bb2:	041b      	lsls	r3, r3, #16
 8004bb4:	0c1b      	lsrs	r3, r3, #16
 8004bb6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8004bba:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8004bbe:	f043 0304 	orr.w	r3, r3, #4
 8004bc2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004bc6:	f001 faae 	bl	8006126 <USB_ReadInterrupts>
 8004bca:	04c1      	lsls	r1, r0, #19
 8004bcc:	d508      	bpl.n	8004be0 <HAL_PCD_IRQHandler+0x11c>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004bce:	6822      	ldr	r2, [r4, #0]
 8004bd0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004bd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bd8:	041b      	lsls	r3, r3, #16
 8004bda:	0c1b      	lsrs	r3, r3, #16
 8004bdc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 8004be0:	4620      	mov	r0, r4
 8004be2:	f002 f9df 	bl	8006fa4 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004be6:	6820      	ldr	r0, [r4, #0]
 8004be8:	f001 fa9d 	bl	8006126 <USB_ReadInterrupts>
 8004bec:	0582      	lsls	r2, r0, #22
 8004bee:	d50b      	bpl.n	8004c08 <HAL_PCD_IRQHandler+0x144>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004bf0:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8004bf2:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004bf4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004bf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bfc:	041b      	lsls	r3, r3, #16
 8004bfe:	0c1b      	lsrs	r3, r3, #16
 8004c00:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8004c04:	f002 f9b7 	bl	8006f76 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004c08:	6820      	ldr	r0, [r4, #0]
 8004c0a:	f001 fa8c 	bl	8006126 <USB_ReadInterrupts>
 8004c0e:	05c3      	lsls	r3, r0, #23
 8004c10:	d508      	bpl.n	8004c24 <HAL_PCD_IRQHandler+0x160>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004c12:	6822      	ldr	r2, [r4, #0]
 8004c14:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c1c:	041b      	lsls	r3, r3, #16
 8004c1e:	0c1b      	lsrs	r3, r3, #16
 8004c20:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8004c24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8004c28:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 8004c2c:	b289      	uxth	r1, r1
    if (epindex == 0U)
 8004c2e:	f011 060f 	ands.w	r6, r1, #15
 8004c32:	f040 80b1 	bne.w	8004d98 <HAL_PCD_IRQHandler+0x2d4>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004c36:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004c3a:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004c3c:	d12a      	bne.n	8004c94 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004c3e:	ea09 0303 	and.w	r3, r9, r3
 8004c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c46:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004c48:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004c4c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8004c50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c54:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8004c58:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8004c5c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c62:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8004c64:	4413      	add	r3, r2
 8004c66:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004c68:	4620      	mov	r0, r4
 8004c6a:	f002 f97d 	bl	8006f68 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004c6e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f43f af34 	beq.w	8004ae0 <HAL_PCD_IRQHandler+0x1c>
 8004c78:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004c7a:	2a00      	cmp	r2, #0
 8004c7c:	f47f af30 	bne.w	8004ae0 <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004c80:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004c84:	6821      	ldr	r1, [r4, #0]
 8004c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c8a:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004c8e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8004c92:	e725      	b.n	8004ae0 <HAL_PCD_IRQHandler+0x1c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004c94:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004c96:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 8004c9a:	d020      	beq.n	8004cde <HAL_PCD_IRQHandler+0x21a>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004c9c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004ca0:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ca4:	f504 710c 	add.w	r1, r4, #560	; 0x230
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ca8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cac:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004cb0:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004cb4:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8004cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004cbc:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004cc0:	f001 fb1a 	bl	80062f8 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004cc4:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8004cc6:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004cc8:	8813      	ldrh	r3, [r2, #0]
 8004cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cce:	051b      	lsls	r3, r3, #20
 8004cd0:	0d1b      	lsrs	r3, r3, #20
 8004cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd6:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8004cd8:	f002 f938 	bl	8006f4c <HAL_PCD_SetupStageCallback>
 8004cdc:	e700      	b.n	8004ae0 <HAL_PCD_IRQHandler+0x1c>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004cde:	041f      	lsls	r7, r3, #16
 8004ce0:	f57f aefe 	bpl.w	8004ae0 <HAL_PCD_IRQHandler+0x1c>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004ce4:	8803      	ldrh	r3, [r0, #0]
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cea:	051b      	lsls	r3, r3, #20
 8004cec:	0d1b      	lsrs	r3, r3, #20
 8004cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf2:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004cf4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004cf8:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8004cfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d00:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004d04:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8004d08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d0c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004d10:	b18b      	cbz	r3, 8004d36 <HAL_PCD_IRQHandler+0x272>
 8004d12:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8004d16:	b171      	cbz	r1, 8004d36 <HAL_PCD_IRQHandler+0x272>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004d18:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8004d1c:	f001 faec 	bl	80062f8 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8004d20:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8004d24:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004d28:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004d30:	4620      	mov	r0, r4
 8004d32:	f002 f911 	bl	8006f58 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004d36:	6821      	ldr	r1, [r4, #0]
 8004d38:	f8d4 5138 	ldr.w	r5, [r4, #312]	; 0x138
 8004d3c:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8004d40:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	b9bd      	cbnz	r5, 8004d78 <HAL_PCD_IRQHandler+0x2b4>
 8004d48:	5ac2      	ldrh	r2, [r0, r3]
 8004d4a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004d4e:	0412      	lsls	r2, r2, #16
 8004d50:	0c12      	lsrs	r2, r2, #16
 8004d52:	52c2      	strh	r2, [r0, r3]
 8004d54:	5ac2      	ldrh	r2, [r0, r3]
 8004d56:	ea4a 0202 	orr.w	r2, sl, r2
 8004d5a:	b292      	uxth	r2, r2
 8004d5c:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004d5e:	880b      	ldrh	r3, [r1, #0]
 8004d60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d68:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004d6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d74:	800b      	strh	r3, [r1, #0]
 8004d76:	e6b3      	b.n	8004ae0 <HAL_PCD_IRQHandler+0x1c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004d78:	2d3e      	cmp	r5, #62	; 0x3e
 8004d7a:	d805      	bhi.n	8004d88 <HAL_PCD_IRQHandler+0x2c4>
 8004d7c:	086a      	lsrs	r2, r5, #1
 8004d7e:	07ee      	lsls	r6, r5, #31
 8004d80:	bf48      	it	mi
 8004d82:	3201      	addmi	r2, #1
 8004d84:	0292      	lsls	r2, r2, #10
 8004d86:	e7e8      	b.n	8004d5a <HAL_PCD_IRQHandler+0x296>
 8004d88:	096a      	lsrs	r2, r5, #5
 8004d8a:	06ed      	lsls	r5, r5, #27
 8004d8c:	bf08      	it	eq
 8004d8e:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8004d92:	ea4a 2282 	orr.w	r2, sl, r2, lsl #10
 8004d96:	e7e0      	b.n	8004d5a <HAL_PCD_IRQHandler+0x296>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004d98:	f830 8026 	ldrh.w	r8, [r0, r6, lsl #2]
 8004d9c:	fa1f f888 	uxth.w	r8, r8
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004da0:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 8004da4:	d03c      	beq.n	8004e20 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004da6:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8004daa:	0177      	lsls	r7, r6, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db0:	051b      	lsls	r3, r3, #20
 8004db2:	0d1b      	lsrs	r3, r3, #20
 8004db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db8:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8004dbc:	19e1      	adds	r1, r4, r7
 8004dbe:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 8004dc2:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d150      	bne.n	8004e6c <HAL_PCD_IRQHandler+0x3a8>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004dca:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004dce:	f891 5128 	ldrb.w	r5, [r1, #296]	; 0x128
 8004dd2:	3306      	adds	r3, #6
 8004dd4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004dd8:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8004ddc:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8004de0:	b135      	cbz	r5, 8004df0 <HAL_PCD_IRQHandler+0x32c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004de2:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 8004de6:	462b      	mov	r3, r5
 8004de8:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8004dec:	f001 fa84 	bl	80062f8 <USB_ReadPMA>
 8004df0:	19e1      	adds	r1, r4, r7
        ep->xfer_count += count;
 8004df2:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
        ep->xfer_buff += count;
 8004df6:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
        ep->xfer_count += count;
 8004dfa:	442b      	add	r3, r5
 8004dfc:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004e00:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
        ep->xfer_buff += count;
 8004e04:	442a      	add	r2, r5
 8004e06:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004e0a:	b11b      	cbz	r3, 8004e14 <HAL_PCD_IRQHandler+0x350>
 8004e0c:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 8004e10:	4285      	cmp	r5, r0
 8004e12:	d25d      	bcs.n	8004ed0 <HAL_PCD_IRQHandler+0x40c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004e14:	4427      	add	r7, r4
 8004e16:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f002 f89c 	bl	8006f58 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004e20:	f018 0f80 	tst.w	r8, #128	; 0x80
 8004e24:	f43f ae5c 	beq.w	8004ae0 <HAL_PCD_IRQHandler+0x1c>
 8004e28:	6823      	ldr	r3, [r4, #0]
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e2a:	4620      	mov	r0, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004e2c:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8004e30:	ea09 0202 	and.w	r2, r9, r2
 8004e34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e38:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004e3c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8004e40:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 8004e44:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8004e48:	3202      	adds	r2, #2
 8004e4a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004e4e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8004e52:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff += ep->xfer_count;
 8004e56:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004e58:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004e5c:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8004e5e:	441a      	add	r2, r3
        if (ep->xfer_len == 0U)
 8004e60:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8004e62:	63f2      	str	r2, [r6, #60]	; 0x3c
        if (ep->xfer_len == 0U)
 8004e64:	bbd3      	cbnz	r3, 8004edc <HAL_PCD_IRQHandler+0x418>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e66:	f002 f87f 	bl	8006f68 <HAL_PCD_DataInStageCallback>
 8004e6a:	e639      	b.n	8004ae0 <HAL_PCD_IRQHandler+0x1c>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004e6c:	f891 3128 	ldrb.w	r3, [r1, #296]	; 0x128
 8004e70:	f830 5023 	ldrh.w	r5, [r0, r3, lsl #2]
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	f415 4f80 	tst.w	r5, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e7a:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8004e7e:	442b      	add	r3, r5
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004e80:	d01b      	beq.n	8004eba <HAL_PCD_IRQHandler+0x3f6>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e82:	3302      	adds	r3, #2
 8004e84:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8004e88:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8004e8c:	b135      	cbz	r5, 8004e9c <HAL_PCD_IRQHandler+0x3d8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004e8e:	462b      	mov	r3, r5
 8004e90:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e94:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8004e98:	f001 fa2e 	bl	80062f8 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004e9c:	19e3      	adds	r3, r4, r7
 8004e9e:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 8004ea2:	6822      	ldr	r2, [r4, #0]
 8004ea4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004ea8:	ea0b 0303 	and.w	r3, fp, r3
 8004eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004eb4:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8004eb8:	e79a      	b.n	8004df0 <HAL_PCD_IRQHandler+0x32c>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004eba:	3306      	adds	r3, #6
 8004ebc:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8004ec0:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8004ec4:	2d00      	cmp	r5, #0
 8004ec6:	d0e9      	beq.n	8004e9c <HAL_PCD_IRQHandler+0x3d8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004ec8:	462b      	mov	r3, r5
 8004eca:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 8004ece:	e7e1      	b.n	8004e94 <HAL_PCD_IRQHandler+0x3d0>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004ed0:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	f7ff fdbf 	bl	8004a58 <HAL_PCD_EP_Receive>
 8004eda:	e7a1      	b.n	8004e20 <HAL_PCD_IRQHandler+0x35c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004edc:	f7ff fddb 	bl	8004a96 <HAL_PCD_EP_Transmit>
 8004ee0:	e5fe      	b.n	8004ae0 <HAL_PCD_IRQHandler+0x1c>
 8004ee2:	bf00      	nop
 8004ee4:	ffff8f0f 	.word	0xffff8f0f
 8004ee8:	ffff8000 	.word	0xffff8000
 8004eec:	ffff8f8f 	.word	0xffff8f8f

08004ef0 <HAL_PCD_EP_SetStall>:
{
 8004ef0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ef2:	6843      	ldr	r3, [r0, #4]
 8004ef4:	f001 0507 	and.w	r5, r1, #7
 8004ef8:	429d      	cmp	r5, r3
{
 8004efa:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004efc:	d828      	bhi.n	8004f50 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8004efe:	060b      	lsls	r3, r1, #24
 8004f00:	d51d      	bpl.n	8004f3e <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 8004f02:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f04:	016b      	lsls	r3, r5, #5
 8004f06:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 8004f0a:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f0c:	4401      	add	r1, r0
    ep->is_in = 1U;
 8004f0e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 8004f12:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f14:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8004f16:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8004f18:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d019      	beq.n	8004f54 <HAL_PCD_EP_SetStall+0x64>
 8004f20:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004f24:	6820      	ldr	r0, [r4, #0]
 8004f26:	f001 f895 	bl	8006054 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f2a:	b925      	cbnz	r5, 8004f36 <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004f2c:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8004f30:	6820      	ldr	r0, [r4, #0]
 8004f32:	f001 f8fb 	bl	800612c <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8004f36:	2000      	movs	r0, #0
 8004f38:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 8004f3c:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8004f3e:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8004f40:	014b      	lsls	r3, r1, #5
 8004f42:	f503 7194 	add.w	r1, r3, #296	; 0x128
    ep->is_in = 0U;
 8004f46:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8004f48:	4401      	add	r1, r0
    ep->is_in = 0U;
 8004f4a:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8004f4e:	e7e0      	b.n	8004f12 <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8004f50:	2001      	movs	r0, #1
 8004f52:	e7f3      	b.n	8004f3c <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 8004f54:	2002      	movs	r0, #2
 8004f56:	e7f1      	b.n	8004f3c <HAL_PCD_EP_SetStall+0x4c>

08004f58 <HAL_PCD_EP_ClrStall>:
{
 8004f58:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004f5a:	6843      	ldr	r3, [r0, #4]
 8004f5c:	f001 020f 	and.w	r2, r1, #15
 8004f60:	429a      	cmp	r2, r3
{
 8004f62:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004f64:	d827      	bhi.n	8004fb6 <HAL_PCD_EP_ClrStall+0x5e>
 8004f66:	f001 0207 	and.w	r2, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 8004f6a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004f6e:	ea4f 1342 	mov.w	r3, r2, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f72:	bf14      	ite	ne
 8004f74:	f103 0128 	addne.w	r1, r3, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f78:	f503 7194 	addeq.w	r1, r3, #296	; 0x128
 8004f7c:	4418      	add	r0, r3
  ep->is_stall = 0U;
 8004f7e:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8004f82:	bf15      	itete	ne
 8004f84:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8004f86:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f88:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f8a:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8004f8c:	bf14      	ite	ne
 8004f8e:	f880 3029 	strbne.w	r3, [r0, #41]	; 0x29
    ep->is_in = 0U;
 8004f92:	f880 3129 	strbeq.w	r3, [r0, #297]	; 0x129
  ep->is_stall = 0U;
 8004f96:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f98:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8004f9a:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d00b      	beq.n	8004fba <HAL_PCD_EP_ClrStall+0x62>
 8004fa2:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004fa4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004fa6:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004faa:	f001 f86f 	bl	800608c <USB_EPClearStall>
  return HAL_OK;
 8004fae:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8004fb0:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
}
 8004fb4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004fb6:	2001      	movs	r0, #1
 8004fb8:	e7fc      	b.n	8004fb4 <HAL_PCD_EP_ClrStall+0x5c>
  __HAL_LOCK(hpcd);
 8004fba:	2002      	movs	r0, #2
 8004fbc:	e7fa      	b.n	8004fb4 <HAL_PCD_EP_ClrStall+0x5c>

08004fbe <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004fbe:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fc2:	bf1b      	ittet	ne
 8004fc4:	f001 0107 	andne.w	r1, r1, #7
 8004fc8:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004fcc:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fd0:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8004fd2:	bf08      	it	eq
 8004fd4:	f500 7094 	addeq.w	r0, r0, #296	; 0x128
 8004fd8:	b299      	uxth	r1, r3
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004fda:	b91a      	cbnz	r2, 8004fe4 <HAL_PCDEx_PMAConfig+0x26>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004fdc:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004fde:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8004fe4:	2201      	movs	r2, #1
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004fe6:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8004fe8:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004fea:	8101      	strh	r1, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004fec:	8143      	strh	r3, [r0, #10]
 8004fee:	e7f7      	b.n	8004fe0 <HAL_PCDEx_PMAConfig+0x22>

08004ff0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ff0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ff4:	4605      	mov	r5, r0
 8004ff6:	b908      	cbnz	r0, 8004ffc <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8004ff8:	2001      	movs	r0, #1
 8004ffa:	e03c      	b.n	8005076 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ffc:	6803      	ldr	r3, [r0, #0]
 8004ffe:	07db      	lsls	r3, r3, #31
 8005000:	d410      	bmi.n	8005024 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005002:	682b      	ldr	r3, [r5, #0]
 8005004:	079f      	lsls	r7, r3, #30
 8005006:	d45d      	bmi.n	80050c4 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005008:	682b      	ldr	r3, [r5, #0]
 800500a:	0719      	lsls	r1, r3, #28
 800500c:	f100 8094 	bmi.w	8005138 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	075a      	lsls	r2, r3, #29
 8005014:	f100 80be 	bmi.w	8005194 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005018:	69e8      	ldr	r0, [r5, #28]
 800501a:	2800      	cmp	r0, #0
 800501c:	f040 812c 	bne.w	8005278 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8005020:	2000      	movs	r0, #0
 8005022:	e028      	b.n	8005076 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005024:	4c8f      	ldr	r4, [pc, #572]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 8005026:	6863      	ldr	r3, [r4, #4]
 8005028:	f003 030c 	and.w	r3, r3, #12
 800502c:	2b04      	cmp	r3, #4
 800502e:	d007      	beq.n	8005040 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005030:	6863      	ldr	r3, [r4, #4]
 8005032:	f003 030c 	and.w	r3, r3, #12
 8005036:	2b08      	cmp	r3, #8
 8005038:	d109      	bne.n	800504e <HAL_RCC_OscConfig+0x5e>
 800503a:	6863      	ldr	r3, [r4, #4]
 800503c:	03de      	lsls	r6, r3, #15
 800503e:	d506      	bpl.n	800504e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005040:	6823      	ldr	r3, [r4, #0]
 8005042:	039c      	lsls	r4, r3, #14
 8005044:	d5dd      	bpl.n	8005002 <HAL_RCC_OscConfig+0x12>
 8005046:	686b      	ldr	r3, [r5, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1da      	bne.n	8005002 <HAL_RCC_OscConfig+0x12>
 800504c:	e7d4      	b.n	8004ff8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800504e:	686b      	ldr	r3, [r5, #4]
 8005050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005054:	d112      	bne.n	800507c <HAL_RCC_OscConfig+0x8c>
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800505c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800505e:	f7fe fd85 	bl	8003b6c <HAL_GetTick>
 8005062:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	0398      	lsls	r0, r3, #14
 8005068:	d4cb      	bmi.n	8005002 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800506a:	f7fe fd7f 	bl	8003b6c <HAL_GetTick>
 800506e:	1b80      	subs	r0, r0, r6
 8005070:	2864      	cmp	r0, #100	; 0x64
 8005072:	d9f7      	bls.n	8005064 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8005074:	2003      	movs	r0, #3
}
 8005076:	b002      	add	sp, #8
 8005078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800507c:	b99b      	cbnz	r3, 80050a6 <HAL_RCC_OscConfig+0xb6>
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005084:	6023      	str	r3, [r4, #0]
 8005086:	6823      	ldr	r3, [r4, #0]
 8005088:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800508c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800508e:	f7fe fd6d 	bl	8003b6c <HAL_GetTick>
 8005092:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	0399      	lsls	r1, r3, #14
 8005098:	d5b3      	bpl.n	8005002 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800509a:	f7fe fd67 	bl	8003b6c <HAL_GetTick>
 800509e:	1b80      	subs	r0, r0, r6
 80050a0:	2864      	cmp	r0, #100	; 0x64
 80050a2:	d9f7      	bls.n	8005094 <HAL_RCC_OscConfig+0xa4>
 80050a4:	e7e6      	b.n	8005074 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	d103      	bne.n	80050b6 <HAL_RCC_OscConfig+0xc6>
 80050ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050b2:	6023      	str	r3, [r4, #0]
 80050b4:	e7cf      	b.n	8005056 <HAL_RCC_OscConfig+0x66>
 80050b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ba:	6023      	str	r3, [r4, #0]
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050c2:	e7cb      	b.n	800505c <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050c4:	4c67      	ldr	r4, [pc, #412]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 80050c6:	6863      	ldr	r3, [r4, #4]
 80050c8:	f013 0f0c 	tst.w	r3, #12
 80050cc:	d007      	beq.n	80050de <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80050ce:	6863      	ldr	r3, [r4, #4]
 80050d0:	f003 030c 	and.w	r3, r3, #12
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d110      	bne.n	80050fa <HAL_RCC_OscConfig+0x10a>
 80050d8:	6863      	ldr	r3, [r4, #4]
 80050da:	03da      	lsls	r2, r3, #15
 80050dc:	d40d      	bmi.n	80050fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	079b      	lsls	r3, r3, #30
 80050e2:	d502      	bpl.n	80050ea <HAL_RCC_OscConfig+0xfa>
 80050e4:	692b      	ldr	r3, [r5, #16]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d186      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	696a      	ldr	r2, [r5, #20]
 80050ee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80050f2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80050f6:	6023      	str	r3, [r4, #0]
 80050f8:	e786      	b.n	8005008 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050fa:	692a      	ldr	r2, [r5, #16]
 80050fc:	4b5a      	ldr	r3, [pc, #360]	; (8005268 <HAL_RCC_OscConfig+0x278>)
 80050fe:	b16a      	cbz	r2, 800511c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8005100:	2201      	movs	r2, #1
 8005102:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005104:	f7fe fd32 	bl	8003b6c <HAL_GetTick>
 8005108:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	079f      	lsls	r7, r3, #30
 800510e:	d4ec      	bmi.n	80050ea <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005110:	f7fe fd2c 	bl	8003b6c <HAL_GetTick>
 8005114:	1b80      	subs	r0, r0, r6
 8005116:	2802      	cmp	r0, #2
 8005118:	d9f7      	bls.n	800510a <HAL_RCC_OscConfig+0x11a>
 800511a:	e7ab      	b.n	8005074 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 800511c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800511e:	f7fe fd25 	bl	8003b6c <HAL_GetTick>
 8005122:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	0798      	lsls	r0, r3, #30
 8005128:	f57f af6e 	bpl.w	8005008 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800512c:	f7fe fd1e 	bl	8003b6c <HAL_GetTick>
 8005130:	1b80      	subs	r0, r0, r6
 8005132:	2802      	cmp	r0, #2
 8005134:	d9f6      	bls.n	8005124 <HAL_RCC_OscConfig+0x134>
 8005136:	e79d      	b.n	8005074 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005138:	69aa      	ldr	r2, [r5, #24]
 800513a:	4c4a      	ldr	r4, [pc, #296]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 800513c:	4b4b      	ldr	r3, [pc, #300]	; (800526c <HAL_RCC_OscConfig+0x27c>)
 800513e:	b1da      	cbz	r2, 8005178 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8005140:	2201      	movs	r2, #1
 8005142:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005144:	f7fe fd12 	bl	8003b6c <HAL_GetTick>
 8005148:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800514a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800514c:	079b      	lsls	r3, r3, #30
 800514e:	d50d      	bpl.n	800516c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005150:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005154:	4b46      	ldr	r3, [pc, #280]	; (8005270 <HAL_RCC_OscConfig+0x280>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	fbb3 f3f2 	udiv	r3, r3, r2
 800515c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800515e:	bf00      	nop
  }
  while (Delay --);
 8005160:	9b01      	ldr	r3, [sp, #4]
 8005162:	1e5a      	subs	r2, r3, #1
 8005164:	9201      	str	r2, [sp, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1f9      	bne.n	800515e <HAL_RCC_OscConfig+0x16e>
 800516a:	e751      	b.n	8005010 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800516c:	f7fe fcfe 	bl	8003b6c <HAL_GetTick>
 8005170:	1b80      	subs	r0, r0, r6
 8005172:	2802      	cmp	r0, #2
 8005174:	d9e9      	bls.n	800514a <HAL_RCC_OscConfig+0x15a>
 8005176:	e77d      	b.n	8005074 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8005178:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800517a:	f7fe fcf7 	bl	8003b6c <HAL_GetTick>
 800517e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005182:	079f      	lsls	r7, r3, #30
 8005184:	f57f af44 	bpl.w	8005010 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005188:	f7fe fcf0 	bl	8003b6c <HAL_GetTick>
 800518c:	1b80      	subs	r0, r0, r6
 800518e:	2802      	cmp	r0, #2
 8005190:	d9f6      	bls.n	8005180 <HAL_RCC_OscConfig+0x190>
 8005192:	e76f      	b.n	8005074 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005194:	4c33      	ldr	r4, [pc, #204]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 8005196:	69e3      	ldr	r3, [r4, #28]
 8005198:	00d8      	lsls	r0, r3, #3
 800519a:	d424      	bmi.n	80051e6 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 800519c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800519e:	69e3      	ldr	r3, [r4, #28]
 80051a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a4:	61e3      	str	r3, [r4, #28]
 80051a6:	69e3      	ldr	r3, [r4, #28]
 80051a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051b0:	4e30      	ldr	r6, [pc, #192]	; (8005274 <HAL_RCC_OscConfig+0x284>)
 80051b2:	6833      	ldr	r3, [r6, #0]
 80051b4:	05d9      	lsls	r1, r3, #23
 80051b6:	d518      	bpl.n	80051ea <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051b8:	68eb      	ldr	r3, [r5, #12]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d126      	bne.n	800520c <HAL_RCC_OscConfig+0x21c>
 80051be:	6a23      	ldr	r3, [r4, #32]
 80051c0:	f043 0301 	orr.w	r3, r3, #1
 80051c4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80051c6:	f7fe fcd1 	bl	8003b6c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ca:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80051ce:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d0:	6a23      	ldr	r3, [r4, #32]
 80051d2:	079b      	lsls	r3, r3, #30
 80051d4:	d53f      	bpl.n	8005256 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80051d6:	2f00      	cmp	r7, #0
 80051d8:	f43f af1e 	beq.w	8005018 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80051dc:	69e3      	ldr	r3, [r4, #28]
 80051de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051e2:	61e3      	str	r3, [r4, #28]
 80051e4:	e718      	b.n	8005018 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80051e6:	2700      	movs	r7, #0
 80051e8:	e7e2      	b.n	80051b0 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ea:	6833      	ldr	r3, [r6, #0]
 80051ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80051f2:	f7fe fcbb 	bl	8003b6c <HAL_GetTick>
 80051f6:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f8:	6833      	ldr	r3, [r6, #0]
 80051fa:	05da      	lsls	r2, r3, #23
 80051fc:	d4dc      	bmi.n	80051b8 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051fe:	f7fe fcb5 	bl	8003b6c <HAL_GetTick>
 8005202:	eba0 0008 	sub.w	r0, r0, r8
 8005206:	2864      	cmp	r0, #100	; 0x64
 8005208:	d9f6      	bls.n	80051f8 <HAL_RCC_OscConfig+0x208>
 800520a:	e733      	b.n	8005074 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800520c:	b9ab      	cbnz	r3, 800523a <HAL_RCC_OscConfig+0x24a>
 800520e:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005210:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005214:	f023 0301 	bic.w	r3, r3, #1
 8005218:	6223      	str	r3, [r4, #32]
 800521a:	6a23      	ldr	r3, [r4, #32]
 800521c:	f023 0304 	bic.w	r3, r3, #4
 8005220:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8005222:	f7fe fca3 	bl	8003b6c <HAL_GetTick>
 8005226:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005228:	6a23      	ldr	r3, [r4, #32]
 800522a:	0798      	lsls	r0, r3, #30
 800522c:	d5d3      	bpl.n	80051d6 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800522e:	f7fe fc9d 	bl	8003b6c <HAL_GetTick>
 8005232:	1b80      	subs	r0, r0, r6
 8005234:	4540      	cmp	r0, r8
 8005236:	d9f7      	bls.n	8005228 <HAL_RCC_OscConfig+0x238>
 8005238:	e71c      	b.n	8005074 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800523a:	2b05      	cmp	r3, #5
 800523c:	6a23      	ldr	r3, [r4, #32]
 800523e:	d103      	bne.n	8005248 <HAL_RCC_OscConfig+0x258>
 8005240:	f043 0304 	orr.w	r3, r3, #4
 8005244:	6223      	str	r3, [r4, #32]
 8005246:	e7ba      	b.n	80051be <HAL_RCC_OscConfig+0x1ce>
 8005248:	f023 0301 	bic.w	r3, r3, #1
 800524c:	6223      	str	r3, [r4, #32]
 800524e:	6a23      	ldr	r3, [r4, #32]
 8005250:	f023 0304 	bic.w	r3, r3, #4
 8005254:	e7b6      	b.n	80051c4 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005256:	f7fe fc89 	bl	8003b6c <HAL_GetTick>
 800525a:	eba0 0008 	sub.w	r0, r0, r8
 800525e:	42b0      	cmp	r0, r6
 8005260:	d9b6      	bls.n	80051d0 <HAL_RCC_OscConfig+0x1e0>
 8005262:	e707      	b.n	8005074 <HAL_RCC_OscConfig+0x84>
 8005264:	40021000 	.word	0x40021000
 8005268:	42420000 	.word	0x42420000
 800526c:	42420480 	.word	0x42420480
 8005270:	20000038 	.word	0x20000038
 8005274:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005278:	4b2a      	ldr	r3, [pc, #168]	; (8005324 <HAL_RCC_OscConfig+0x334>)
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	461c      	mov	r4, r3
 800527e:	f002 020c 	and.w	r2, r2, #12
 8005282:	2a08      	cmp	r2, #8
 8005284:	d03d      	beq.n	8005302 <HAL_RCC_OscConfig+0x312>
 8005286:	2300      	movs	r3, #0
 8005288:	4e27      	ldr	r6, [pc, #156]	; (8005328 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800528a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800528c:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800528e:	d12b      	bne.n	80052e8 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8005290:	f7fe fc6c 	bl	8003b6c <HAL_GetTick>
 8005294:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	0199      	lsls	r1, r3, #6
 800529a:	d41f      	bmi.n	80052dc <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800529c:	6a2b      	ldr	r3, [r5, #32]
 800529e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052a2:	d105      	bne.n	80052b0 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80052a4:	6862      	ldr	r2, [r4, #4]
 80052a6:	68a9      	ldr	r1, [r5, #8]
 80052a8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80052ac:	430a      	orrs	r2, r1
 80052ae:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052b0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80052b2:	6862      	ldr	r2, [r4, #4]
 80052b4:	430b      	orrs	r3, r1
 80052b6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80052ba:	4313      	orrs	r3, r2
 80052bc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80052be:	2301      	movs	r3, #1
 80052c0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80052c2:	f7fe fc53 	bl	8003b6c <HAL_GetTick>
 80052c6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	019a      	lsls	r2, r3, #6
 80052cc:	f53f aea8 	bmi.w	8005020 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052d0:	f7fe fc4c 	bl	8003b6c <HAL_GetTick>
 80052d4:	1b40      	subs	r0, r0, r5
 80052d6:	2802      	cmp	r0, #2
 80052d8:	d9f6      	bls.n	80052c8 <HAL_RCC_OscConfig+0x2d8>
 80052da:	e6cb      	b.n	8005074 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052dc:	f7fe fc46 	bl	8003b6c <HAL_GetTick>
 80052e0:	1bc0      	subs	r0, r0, r7
 80052e2:	2802      	cmp	r0, #2
 80052e4:	d9d7      	bls.n	8005296 <HAL_RCC_OscConfig+0x2a6>
 80052e6:	e6c5      	b.n	8005074 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80052e8:	f7fe fc40 	bl	8003b6c <HAL_GetTick>
 80052ec:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	019b      	lsls	r3, r3, #6
 80052f2:	f57f ae95 	bpl.w	8005020 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f6:	f7fe fc39 	bl	8003b6c <HAL_GetTick>
 80052fa:	1b40      	subs	r0, r0, r5
 80052fc:	2802      	cmp	r0, #2
 80052fe:	d9f6      	bls.n	80052ee <HAL_RCC_OscConfig+0x2fe>
 8005300:	e6b8      	b.n	8005074 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005302:	2801      	cmp	r0, #1
 8005304:	f43f aeb7 	beq.w	8005076 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8005308:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800530a:	6a2b      	ldr	r3, [r5, #32]
 800530c:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8005310:	429a      	cmp	r2, r3
 8005312:	f47f ae71 	bne.w	8004ff8 <HAL_RCC_OscConfig+0x8>
 8005316:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005318:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 800531c:	1ac0      	subs	r0, r0, r3
 800531e:	bf18      	it	ne
 8005320:	2001      	movne	r0, #1
 8005322:	e6a8      	b.n	8005076 <HAL_RCC_OscConfig+0x86>
 8005324:	40021000 	.word	0x40021000
 8005328:	42420060 	.word	0x42420060

0800532c <HAL_RCC_GetSysClockFreq>:
{
 800532c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800532e:	4b18      	ldr	r3, [pc, #96]	; (8005390 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8005330:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005332:	ac02      	add	r4, sp, #8
 8005334:	f103 0510 	add.w	r5, r3, #16
 8005338:	4622      	mov	r2, r4
 800533a:	6818      	ldr	r0, [r3, #0]
 800533c:	6859      	ldr	r1, [r3, #4]
 800533e:	3308      	adds	r3, #8
 8005340:	c203      	stmia	r2!, {r0, r1}
 8005342:	42ab      	cmp	r3, r5
 8005344:	4614      	mov	r4, r2
 8005346:	d1f7      	bne.n	8005338 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005348:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 800534c:	4911      	ldr	r1, [pc, #68]	; (8005394 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800534e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8005352:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8005354:	f003 020c 	and.w	r2, r3, #12
 8005358:	2a08      	cmp	r2, #8
 800535a:	d117      	bne.n	800538c <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800535c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8005360:	a806      	add	r0, sp, #24
 8005362:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005364:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005366:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800536a:	d50c      	bpl.n	8005386 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800536c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800536e:	480a      	ldr	r0, [pc, #40]	; (8005398 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005370:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005374:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005376:	aa06      	add	r2, sp, #24
 8005378:	4413      	add	r3, r2
 800537a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800537e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8005382:	b007      	add	sp, #28
 8005384:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005386:	4805      	ldr	r0, [pc, #20]	; (800539c <HAL_RCC_GetSysClockFreq+0x70>)
 8005388:	4350      	muls	r0, r2
 800538a:	e7fa      	b.n	8005382 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 800538c:	4802      	ldr	r0, [pc, #8]	; (8005398 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800538e:	e7f8      	b.n	8005382 <HAL_RCC_GetSysClockFreq+0x56>
 8005390:	08009dcc 	.word	0x08009dcc
 8005394:	40021000 	.word	0x40021000
 8005398:	007a1200 	.word	0x007a1200
 800539c:	003d0900 	.word	0x003d0900

080053a0 <HAL_RCC_ClockConfig>:
{
 80053a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053a4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80053a6:	4604      	mov	r4, r0
 80053a8:	b910      	cbnz	r0, 80053b0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80053aa:	2001      	movs	r0, #1
}
 80053ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053b0:	4a44      	ldr	r2, [pc, #272]	; (80054c4 <HAL_RCC_ClockConfig+0x124>)
 80053b2:	6813      	ldr	r3, [r2, #0]
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	428b      	cmp	r3, r1
 80053ba:	d328      	bcc.n	800540e <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053bc:	6821      	ldr	r1, [r4, #0]
 80053be:	078e      	lsls	r6, r1, #30
 80053c0:	d430      	bmi.n	8005424 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053c2:	07ca      	lsls	r2, r1, #31
 80053c4:	d443      	bmi.n	800544e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053c6:	4a3f      	ldr	r2, [pc, #252]	; (80054c4 <HAL_RCC_ClockConfig+0x124>)
 80053c8:	6813      	ldr	r3, [r2, #0]
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	42ab      	cmp	r3, r5
 80053d0:	d865      	bhi.n	800549e <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d2:	6822      	ldr	r2, [r4, #0]
 80053d4:	4d3c      	ldr	r5, [pc, #240]	; (80054c8 <HAL_RCC_ClockConfig+0x128>)
 80053d6:	f012 0f04 	tst.w	r2, #4
 80053da:	d16c      	bne.n	80054b6 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053dc:	0713      	lsls	r3, r2, #28
 80053de:	d506      	bpl.n	80053ee <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053e0:	686b      	ldr	r3, [r5, #4]
 80053e2:	6922      	ldr	r2, [r4, #16]
 80053e4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80053e8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80053ec:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053ee:	f7ff ff9d 	bl	800532c <HAL_RCC_GetSysClockFreq>
 80053f2:	686b      	ldr	r3, [r5, #4]
 80053f4:	4a35      	ldr	r2, [pc, #212]	; (80054cc <HAL_RCC_ClockConfig+0x12c>)
 80053f6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80053fa:	5cd3      	ldrb	r3, [r2, r3]
 80053fc:	40d8      	lsrs	r0, r3
 80053fe:	4b34      	ldr	r3, [pc, #208]	; (80054d0 <HAL_RCC_ClockConfig+0x130>)
 8005400:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8005402:	4b34      	ldr	r3, [pc, #208]	; (80054d4 <HAL_RCC_ClockConfig+0x134>)
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	f7fe fb6f 	bl	8003ae8 <HAL_InitTick>
  return HAL_OK;
 800540a:	2000      	movs	r0, #0
 800540c:	e7ce      	b.n	80053ac <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800540e:	6813      	ldr	r3, [r2, #0]
 8005410:	f023 0307 	bic.w	r3, r3, #7
 8005414:	430b      	orrs	r3, r1
 8005416:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005418:	6813      	ldr	r3, [r2, #0]
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	428b      	cmp	r3, r1
 8005420:	d1c3      	bne.n	80053aa <HAL_RCC_ClockConfig+0xa>
 8005422:	e7cb      	b.n	80053bc <HAL_RCC_ClockConfig+0x1c>
 8005424:	4b28      	ldr	r3, [pc, #160]	; (80054c8 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005426:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800542a:	bf1e      	ittt	ne
 800542c:	685a      	ldrne	r2, [r3, #4]
 800542e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8005432:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005434:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005436:	bf42      	ittt	mi
 8005438:	685a      	ldrmi	r2, [r3, #4]
 800543a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800543e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	68a0      	ldr	r0, [r4, #8]
 8005444:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005448:	4302      	orrs	r2, r0
 800544a:	605a      	str	r2, [r3, #4]
 800544c:	e7b9      	b.n	80053c2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800544e:	6862      	ldr	r2, [r4, #4]
 8005450:	4e1d      	ldr	r6, [pc, #116]	; (80054c8 <HAL_RCC_ClockConfig+0x128>)
 8005452:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005454:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005456:	d11a      	bne.n	800548e <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005458:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800545c:	d0a5      	beq.n	80053aa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800545e:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005460:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005464:	f023 0303 	bic.w	r3, r3, #3
 8005468:	4313      	orrs	r3, r2
 800546a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800546c:	f7fe fb7e 	bl	8003b6c <HAL_GetTick>
 8005470:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005472:	6873      	ldr	r3, [r6, #4]
 8005474:	6862      	ldr	r2, [r4, #4]
 8005476:	f003 030c 	and.w	r3, r3, #12
 800547a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800547e:	d0a2      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005480:	f7fe fb74 	bl	8003b6c <HAL_GetTick>
 8005484:	1bc0      	subs	r0, r0, r7
 8005486:	4540      	cmp	r0, r8
 8005488:	d9f3      	bls.n	8005472 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800548a:	2003      	movs	r0, #3
 800548c:	e78e      	b.n	80053ac <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800548e:	2a02      	cmp	r2, #2
 8005490:	d102      	bne.n	8005498 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005492:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005496:	e7e1      	b.n	800545c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005498:	f013 0f02 	tst.w	r3, #2
 800549c:	e7de      	b.n	800545c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800549e:	6813      	ldr	r3, [r2, #0]
 80054a0:	f023 0307 	bic.w	r3, r3, #7
 80054a4:	432b      	orrs	r3, r5
 80054a6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054a8:	6813      	ldr	r3, [r2, #0]
 80054aa:	f003 0307 	and.w	r3, r3, #7
 80054ae:	42ab      	cmp	r3, r5
 80054b0:	f47f af7b 	bne.w	80053aa <HAL_RCC_ClockConfig+0xa>
 80054b4:	e78d      	b.n	80053d2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054b6:	686b      	ldr	r3, [r5, #4]
 80054b8:	68e1      	ldr	r1, [r4, #12]
 80054ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80054be:	430b      	orrs	r3, r1
 80054c0:	606b      	str	r3, [r5, #4]
 80054c2:	e78b      	b.n	80053dc <HAL_RCC_ClockConfig+0x3c>
 80054c4:	40022000 	.word	0x40022000
 80054c8:	40021000 	.word	0x40021000
 80054cc:	0800aa46 	.word	0x0800aa46
 80054d0:	20000038 	.word	0x20000038
 80054d4:	20000040 	.word	0x20000040

080054d8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054d8:	4b04      	ldr	r3, [pc, #16]	; (80054ec <HAL_RCC_GetPCLK1Freq+0x14>)
 80054da:	4a05      	ldr	r2, [pc, #20]	; (80054f0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80054e2:	5cd3      	ldrb	r3, [r2, r3]
 80054e4:	4a03      	ldr	r2, [pc, #12]	; (80054f4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80054e6:	6810      	ldr	r0, [r2, #0]
}
 80054e8:	40d8      	lsrs	r0, r3
 80054ea:	4770      	bx	lr
 80054ec:	40021000 	.word	0x40021000
 80054f0:	0800aa56 	.word	0x0800aa56
 80054f4:	20000038 	.word	0x20000038

080054f8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054f8:	4b04      	ldr	r3, [pc, #16]	; (800550c <HAL_RCC_GetPCLK2Freq+0x14>)
 80054fa:	4a05      	ldr	r2, [pc, #20]	; (8005510 <HAL_RCC_GetPCLK2Freq+0x18>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005502:	5cd3      	ldrb	r3, [r2, r3]
 8005504:	4a03      	ldr	r2, [pc, #12]	; (8005514 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005506:	6810      	ldr	r0, [r2, #0]
}
 8005508:	40d8      	lsrs	r0, r3
 800550a:	4770      	bx	lr
 800550c:	40021000 	.word	0x40021000
 8005510:	0800aa56 	.word	0x0800aa56
 8005514:	20000038 	.word	0x20000038

08005518 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005518:	6803      	ldr	r3, [r0, #0]
{
 800551a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800551e:	07d9      	lsls	r1, r3, #31
{
 8005520:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005522:	d520      	bpl.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005524:	4c35      	ldr	r4, [pc, #212]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8005526:	69e3      	ldr	r3, [r4, #28]
 8005528:	00da      	lsls	r2, r3, #3
 800552a:	d432      	bmi.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 800552c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800552e:	69e3      	ldr	r3, [r4, #28]
 8005530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005534:	61e3      	str	r3, [r4, #28]
 8005536:	69e3      	ldr	r3, [r4, #28]
 8005538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800553c:	9301      	str	r3, [sp, #4]
 800553e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005540:	4e2f      	ldr	r6, [pc, #188]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005542:	6833      	ldr	r3, [r6, #0]
 8005544:	05db      	lsls	r3, r3, #23
 8005546:	d526      	bpl.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005548:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800554a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800554e:	d136      	bne.n	80055be <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005550:	6a23      	ldr	r3, [r4, #32]
 8005552:	686a      	ldr	r2, [r5, #4]
 8005554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005558:	4313      	orrs	r3, r2
 800555a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800555c:	b11f      	cbz	r7, 8005566 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800555e:	69e3      	ldr	r3, [r4, #28]
 8005560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005564:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005566:	6828      	ldr	r0, [r5, #0]
 8005568:	0783      	lsls	r3, r0, #30
 800556a:	d506      	bpl.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800556c:	4a23      	ldr	r2, [pc, #140]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800556e:	68a9      	ldr	r1, [r5, #8]
 8005570:	6853      	ldr	r3, [r2, #4]
 8005572:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005576:	430b      	orrs	r3, r1
 8005578:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800557a:	f010 0010 	ands.w	r0, r0, #16
 800557e:	d01b      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005580:	4a1e      	ldr	r2, [pc, #120]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8005582:	68e9      	ldr	r1, [r5, #12]
 8005584:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005586:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005588:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800558c:	430b      	orrs	r3, r1
 800558e:	6053      	str	r3, [r2, #4]
 8005590:	e012      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8005592:	2700      	movs	r7, #0
 8005594:	e7d4      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005596:	6833      	ldr	r3, [r6, #0]
 8005598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800559c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800559e:	f7fe fae5 	bl	8003b6c <HAL_GetTick>
 80055a2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a4:	6833      	ldr	r3, [r6, #0]
 80055a6:	05d8      	lsls	r0, r3, #23
 80055a8:	d4ce      	bmi.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055aa:	f7fe fadf 	bl	8003b6c <HAL_GetTick>
 80055ae:	eba0 0008 	sub.w	r0, r0, r8
 80055b2:	2864      	cmp	r0, #100	; 0x64
 80055b4:	d9f6      	bls.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80055b6:	2003      	movs	r0, #3
}
 80055b8:	b002      	add	sp, #8
 80055ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055be:	686a      	ldr	r2, [r5, #4]
 80055c0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d0c3      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80055c8:	2001      	movs	r0, #1
 80055ca:	4a0e      	ldr	r2, [pc, #56]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055cc:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80055ce:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055d0:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055d6:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80055d8:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80055da:	07d9      	lsls	r1, r3, #31
 80055dc:	d5b8      	bpl.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80055de:	f7fe fac5 	bl	8003b6c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055e2:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80055e6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e8:	6a23      	ldr	r3, [r4, #32]
 80055ea:	079a      	lsls	r2, r3, #30
 80055ec:	d4b0      	bmi.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ee:	f7fe fabd 	bl	8003b6c <HAL_GetTick>
 80055f2:	1b80      	subs	r0, r0, r6
 80055f4:	4540      	cmp	r0, r8
 80055f6:	d9f7      	bls.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80055f8:	e7dd      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80055fa:	bf00      	nop
 80055fc:	40021000 	.word	0x40021000
 8005600:	40007000 	.word	0x40007000
 8005604:	42420440 	.word	0x42420440

08005608 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005608:	6803      	ldr	r3, [r0, #0]
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
}
 800560a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005614:	689a      	ldr	r2, [r3, #8]
 8005616:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800561a:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 800561c:	bf1e      	ittt	ne
 800561e:	681a      	ldrne	r2, [r3, #0]
 8005620:	f042 0201 	orrne.w	r2, r2, #1
 8005624:	601a      	strne	r2, [r3, #0]
}
 8005626:	4770      	bx	lr

08005628 <HAL_TIM_PeriodElapsedCallback>:
 8005628:	4770      	bx	lr

0800562a <HAL_TIM_OC_DelayElapsedCallback>:
 800562a:	4770      	bx	lr

0800562c <HAL_TIM_IC_CaptureCallback>:
 800562c:	4770      	bx	lr

0800562e <HAL_TIM_PWM_PulseFinishedCallback>:
 800562e:	4770      	bx	lr

08005630 <HAL_TIM_TriggerCallback>:
 8005630:	4770      	bx	lr

08005632 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005632:	6803      	ldr	r3, [r0, #0]
{
 8005634:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005636:	691a      	ldr	r2, [r3, #16]
{
 8005638:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800563a:	0791      	lsls	r1, r2, #30
 800563c:	d50e      	bpl.n	800565c <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	0792      	lsls	r2, r2, #30
 8005642:	d50b      	bpl.n	800565c <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005644:	f06f 0202 	mvn.w	r2, #2
 8005648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800564a:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800564c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800564e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005650:	079b      	lsls	r3, r3, #30
 8005652:	d077      	beq.n	8005744 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005654:	f7ff ffea 	bl	800562c <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005658:	2300      	movs	r3, #0
 800565a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	0750      	lsls	r0, r2, #29
 8005662:	d510      	bpl.n	8005686 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	0751      	lsls	r1, r2, #29
 8005668:	d50d      	bpl.n	8005686 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800566a:	f06f 0204 	mvn.w	r2, #4
 800566e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005670:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005672:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005674:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005676:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800567a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800567c:	d068      	beq.n	8005750 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800567e:	f7ff ffd5 	bl	800562c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005682:	2300      	movs	r3, #0
 8005684:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	691a      	ldr	r2, [r3, #16]
 800568a:	0712      	lsls	r2, r2, #28
 800568c:	d50f      	bpl.n	80056ae <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	0710      	lsls	r0, r2, #28
 8005692:	d50c      	bpl.n	80056ae <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005694:	f06f 0208 	mvn.w	r2, #8
 8005698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800569a:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800569c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800569e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056a0:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056a2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056a4:	d05a      	beq.n	800575c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80056a6:	f7ff ffc1 	bl	800562c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056aa:	2300      	movs	r3, #0
 80056ac:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	691a      	ldr	r2, [r3, #16]
 80056b2:	06d2      	lsls	r2, r2, #27
 80056b4:	d510      	bpl.n	80056d8 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	06d0      	lsls	r0, r2, #27
 80056ba:	d50d      	bpl.n	80056d8 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056bc:	f06f 0210 	mvn.w	r2, #16
 80056c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056c2:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056c4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056c6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056c8:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056cc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056ce:	d04b      	beq.n	8005768 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80056d0:	f7ff ffac 	bl	800562c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d4:	2300      	movs	r3, #0
 80056d6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	691a      	ldr	r2, [r3, #16]
 80056dc:	07d1      	lsls	r1, r2, #31
 80056de:	d508      	bpl.n	80056f2 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	07d2      	lsls	r2, r2, #31
 80056e4:	d505      	bpl.n	80056f2 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056e6:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056ec:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80056ee:	f7ff ff9b 	bl	8005628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	691a      	ldr	r2, [r3, #16]
 80056f6:	0610      	lsls	r0, r2, #24
 80056f8:	d508      	bpl.n	800570c <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056fa:	68da      	ldr	r2, [r3, #12]
 80056fc:	0611      	lsls	r1, r2, #24
 80056fe:	d505      	bpl.n	800570c <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005700:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005704:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005706:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005708:	f000 f945 	bl	8005996 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	691a      	ldr	r2, [r3, #16]
 8005710:	0652      	lsls	r2, r2, #25
 8005712:	d508      	bpl.n	8005726 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	0650      	lsls	r0, r2, #25
 8005718:	d505      	bpl.n	8005726 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800571a:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800571e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005720:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005722:	f7ff ff85 	bl	8005630 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	691a      	ldr	r2, [r3, #16]
 800572a:	0691      	lsls	r1, r2, #26
 800572c:	d522      	bpl.n	8005774 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	0692      	lsls	r2, r2, #26
 8005732:	d51f      	bpl.n	8005774 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005734:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005738:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800573a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800573e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005740:	f000 b928 	b.w	8005994 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005744:	f7ff ff71 	bl	800562a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005748:	4620      	mov	r0, r4
 800574a:	f7ff ff70 	bl	800562e <HAL_TIM_PWM_PulseFinishedCallback>
 800574e:	e783      	b.n	8005658 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005750:	f7ff ff6b 	bl	800562a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005754:	4620      	mov	r0, r4
 8005756:	f7ff ff6a 	bl	800562e <HAL_TIM_PWM_PulseFinishedCallback>
 800575a:	e792      	b.n	8005682 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800575c:	f7ff ff65 	bl	800562a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005760:	4620      	mov	r0, r4
 8005762:	f7ff ff64 	bl	800562e <HAL_TIM_PWM_PulseFinishedCallback>
 8005766:	e7a0      	b.n	80056aa <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005768:	f7ff ff5f 	bl	800562a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800576c:	4620      	mov	r0, r4
 800576e:	f7ff ff5e 	bl	800562e <HAL_TIM_PWM_PulseFinishedCallback>
 8005772:	e7af      	b.n	80056d4 <HAL_TIM_IRQHandler+0xa2>
}
 8005774:	bd10      	pop	{r4, pc}
	...

08005778 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005778:	4a1a      	ldr	r2, [pc, #104]	; (80057e4 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800577a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800577c:	4290      	cmp	r0, r2
 800577e:	d00a      	beq.n	8005796 <TIM_Base_SetConfig+0x1e>
 8005780:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005784:	d007      	beq.n	8005796 <TIM_Base_SetConfig+0x1e>
 8005786:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800578a:	4290      	cmp	r0, r2
 800578c:	d003      	beq.n	8005796 <TIM_Base_SetConfig+0x1e>
 800578e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005792:	4290      	cmp	r0, r2
 8005794:	d115      	bne.n	80057c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8005796:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800579c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800579e:	4a11      	ldr	r2, [pc, #68]	; (80057e4 <TIM_Base_SetConfig+0x6c>)
 80057a0:	4290      	cmp	r0, r2
 80057a2:	d00a      	beq.n	80057ba <TIM_Base_SetConfig+0x42>
 80057a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80057a8:	d007      	beq.n	80057ba <TIM_Base_SetConfig+0x42>
 80057aa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80057ae:	4290      	cmp	r0, r2
 80057b0:	d003      	beq.n	80057ba <TIM_Base_SetConfig+0x42>
 80057b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057b6:	4290      	cmp	r0, r2
 80057b8:	d103      	bne.n	80057c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057ba:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80057bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057c0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057c2:	694a      	ldr	r2, [r1, #20]
 80057c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057c8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80057ca:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057cc:	688b      	ldr	r3, [r1, #8]
 80057ce:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057d0:	680b      	ldr	r3, [r1, #0]
 80057d2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057d4:	4b03      	ldr	r3, [pc, #12]	; (80057e4 <TIM_Base_SetConfig+0x6c>)
 80057d6:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057d8:	bf04      	itt	eq
 80057da:	690b      	ldreq	r3, [r1, #16]
 80057dc:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057de:	2301      	movs	r3, #1
 80057e0:	6143      	str	r3, [r0, #20]
}
 80057e2:	4770      	bx	lr
 80057e4:	40012c00 	.word	0x40012c00

080057e8 <HAL_TIM_Base_Init>:
{
 80057e8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80057ea:	4604      	mov	r4, r0
 80057ec:	b1a0      	cbz	r0, 8005818 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80057ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80057f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80057f6:	b91b      	cbnz	r3, 8005800 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80057f8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80057fc:	f7fc fc42 	bl	8002084 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005800:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005802:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005804:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005808:	1d21      	adds	r1, r4, #4
 800580a:	f7ff ffb5 	bl	8005778 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800580e:	2301      	movs	r3, #1
  return HAL_OK;
 8005810:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005812:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005816:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005818:	2001      	movs	r0, #1
 800581a:	e7fc      	b.n	8005816 <HAL_TIM_Base_Init+0x2e>

0800581c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800581c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800581e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005820:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005822:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005826:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800582a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800582c:	6083      	str	r3, [r0, #8]
}
 800582e:	bd10      	pop	{r4, pc}

08005830 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005830:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8005834:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8005836:	2b01      	cmp	r3, #1
{
 8005838:	4604      	mov	r4, r0
 800583a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800583e:	d019      	beq.n	8005874 <HAL_TIM_ConfigClockSource+0x44>
 8005840:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005842:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005846:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8005848:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800584c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800584e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005852:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005856:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8005858:	680b      	ldr	r3, [r1, #0]
 800585a:	2b40      	cmp	r3, #64	; 0x40
 800585c:	d065      	beq.n	800592a <HAL_TIM_ConfigClockSource+0xfa>
 800585e:	d815      	bhi.n	800588c <HAL_TIM_ConfigClockSource+0x5c>
 8005860:	2b10      	cmp	r3, #16
 8005862:	d00c      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x4e>
 8005864:	d807      	bhi.n	8005876 <HAL_TIM_ConfigClockSource+0x46>
 8005866:	b153      	cbz	r3, 800587e <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8005868:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800586a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800586c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005870:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005874:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8005876:	2b20      	cmp	r3, #32
 8005878:	d001      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x4e>
 800587a:	2b30      	cmp	r3, #48	; 0x30
 800587c:	d1f4      	bne.n	8005868 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 800587e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005880:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8005884:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005888:	4313      	orrs	r3, r2
 800588a:	e01a      	b.n	80058c2 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 800588c:	2b60      	cmp	r3, #96	; 0x60
 800588e:	d034      	beq.n	80058fa <HAL_TIM_ConfigClockSource+0xca>
 8005890:	d819      	bhi.n	80058c6 <HAL_TIM_ConfigClockSource+0x96>
 8005892:	2b50      	cmp	r3, #80	; 0x50
 8005894:	d1e8      	bne.n	8005868 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005896:	684a      	ldr	r2, [r1, #4]
 8005898:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800589a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800589c:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800589e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058a2:	f025 0501 	bic.w	r5, r5, #1
 80058a6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058a8:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80058aa:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058b0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80058b4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80058b6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80058b8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058be:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80058c2:	6083      	str	r3, [r0, #8]
 80058c4:	e7d0      	b.n	8005868 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80058c6:	2b70      	cmp	r3, #112	; 0x70
 80058c8:	d00c      	beq.n	80058e4 <HAL_TIM_ConfigClockSource+0xb4>
 80058ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ce:	d1cb      	bne.n	8005868 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80058d0:	68cb      	ldr	r3, [r1, #12]
 80058d2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80058d6:	f7ff ffa1 	bl	800581c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058da:	6822      	ldr	r2, [r4, #0]
 80058dc:	6893      	ldr	r3, [r2, #8]
 80058de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058e2:	e008      	b.n	80058f6 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80058e4:	68cb      	ldr	r3, [r1, #12]
 80058e6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80058ea:	f7ff ff97 	bl	800581c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058ee:	6822      	ldr	r2, [r4, #0]
 80058f0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058f6:	6093      	str	r3, [r2, #8]
      break;
 80058f8:	e7b6      	b.n	8005868 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058fa:	684d      	ldr	r5, [r1, #4]
 80058fc:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058fe:	6a01      	ldr	r1, [r0, #32]
 8005900:	f021 0110 	bic.w	r1, r1, #16
 8005904:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005906:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8005908:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800590a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800590e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005912:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005916:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800591a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800591c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800591e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005924:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8005928:	e7cb      	b.n	80058c2 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800592a:	684a      	ldr	r2, [r1, #4]
 800592c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800592e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005930:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005932:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005936:	f025 0501 	bic.w	r5, r5, #1
 800593a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800593c:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800593e:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005940:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005944:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005948:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800594a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800594c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800594e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005952:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8005956:	e7b4      	b.n	80058c2 <HAL_TIM_ConfigClockSource+0x92>

08005958 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005958:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800595c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800595e:	2b01      	cmp	r3, #1
 8005960:	f04f 0302 	mov.w	r3, #2
 8005964:	d014      	beq.n	8005990 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005966:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005968:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800596c:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800596e:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005970:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005972:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005974:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800597c:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800597e:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005980:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005982:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005984:	2301      	movs	r3, #1
 8005986:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800598a:	2300      	movs	r3, #0
 800598c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8005990:	4618      	mov	r0, r3

  return HAL_OK;
}
 8005992:	bd30      	pop	{r4, r5, pc}

08005994 <HAL_TIMEx_CommutCallback>:
 8005994:	4770      	bx	lr

08005996 <HAL_TIMEx_BreakCallback>:
 8005996:	4770      	bx	lr

08005998 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005998:	6803      	ldr	r3, [r0, #0]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059a0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a2:	695a      	ldr	r2, [r3, #20]
 80059a4:	f022 0201 	bic.w	r2, r2, #1
 80059a8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059aa:	2320      	movs	r3, #32
 80059ac:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 80059b0:	4770      	bx	lr
	...

080059b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059b4:	b538      	push	{r3, r4, r5, lr}
 80059b6:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059b8:	6803      	ldr	r3, [r0, #0]
 80059ba:	68c1      	ldr	r1, [r0, #12]
 80059bc:	691a      	ldr	r2, [r3, #16]
 80059be:	2419      	movs	r4, #25
 80059c0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80059c4:	430a      	orrs	r2, r1
 80059c6:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80059c8:	6882      	ldr	r2, [r0, #8]
 80059ca:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80059cc:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80059ce:	4302      	orrs	r2, r0
 80059d0:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 80059d2:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80059d6:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80059da:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80059dc:	430a      	orrs	r2, r1
 80059de:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059e0:	695a      	ldr	r2, [r3, #20]
 80059e2:	69a9      	ldr	r1, [r5, #24]
 80059e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80059e8:	430a      	orrs	r2, r1
 80059ea:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80059ec:	4a0d      	ldr	r2, [pc, #52]	; (8005a24 <UART_SetConfig+0x70>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d114      	bne.n	8005a1c <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80059f2:	f7ff fd81 	bl	80054f8 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059f6:	4360      	muls	r0, r4
 80059f8:	686c      	ldr	r4, [r5, #4]
 80059fa:	2264      	movs	r2, #100	; 0x64
 80059fc:	00a4      	lsls	r4, r4, #2
 80059fe:	fbb0 f0f4 	udiv	r0, r0, r4
 8005a02:	fbb0 f1f2 	udiv	r1, r0, r2
 8005a06:	fb02 0311 	mls	r3, r2, r1, r0
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	3332      	adds	r3, #50	; 0x32
 8005a0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a12:	682c      	ldr	r4, [r5, #0]
 8005a14:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8005a18:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8005a1a:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8005a1c:	f7ff fd5c 	bl	80054d8 <HAL_RCC_GetPCLK1Freq>
 8005a20:	e7e9      	b.n	80059f6 <UART_SetConfig+0x42>
 8005a22:	bf00      	nop
 8005a24:	40013800 	.word	0x40013800

08005a28 <HAL_UART_Init>:
{
 8005a28:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005a2a:	4604      	mov	r4, r0
 8005a2c:	b340      	cbz	r0, 8005a80 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005a2e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005a32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005a36:	b91b      	cbnz	r3, 8005a40 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8005a38:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8005a3c:	f7fc fb58 	bl	80020f0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8005a40:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005a42:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005a44:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8005a48:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8005a4a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8005a4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a50:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005a52:	f7ff ffaf 	bl	80059b4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a56:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a58:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a5a:	691a      	ldr	r2, [r3, #16]
 8005a5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a62:	695a      	ldr	r2, [r3, #20]
 8005a64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a68:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8005a6a:	68da      	ldr	r2, [r3, #12]
 8005a6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a70:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005a72:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a74:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005a76:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005a7a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8005a7e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005a80:	2001      	movs	r0, #1
 8005a82:	e7fc      	b.n	8005a7e <HAL_UART_Init+0x56>

08005a84 <HAL_UART_Receive_DMA>:
{
 8005a84:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a86:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 8005a8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a8c:	2a20      	cmp	r2, #32
{
 8005a8e:	4605      	mov	r5, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a90:	d138      	bne.n	8005b04 <HAL_UART_Receive_DMA+0x80>
    if ((pData == NULL) || (Size == 0U))
 8005a92:	2900      	cmp	r1, #0
 8005a94:	d034      	beq.n	8005b00 <HAL_UART_Receive_DMA+0x7c>
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d032      	beq.n	8005b00 <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8005a9a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8005a9e:	2a01      	cmp	r2, #1
 8005aa0:	d030      	beq.n	8005b04 <HAL_UART_Receive_DMA+0x80>
 8005aa2:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa4:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8005aa6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005aaa:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 8005aac:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8005aae:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab0:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ab2:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005ab6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8005ab8:	4a13      	ldr	r2, [pc, #76]	; (8005b08 <HAL_UART_Receive_DMA+0x84>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005aba:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005abc:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005abe:	4a13      	ldr	r2, [pc, #76]	; (8005b0c <HAL_UART_Receive_DMA+0x88>)
 8005ac0:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005ac2:	4a13      	ldr	r2, [pc, #76]	; (8005b10 <HAL_UART_Receive_DMA+0x8c>)
    huart->hdmarx->XferAbortCallback = NULL;
 8005ac4:	e9c0 240c 	strd	r2, r4, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005ac8:	460a      	mov	r2, r1
 8005aca:	1d31      	adds	r1, r6, #4
 8005acc:	f7fe f900 	bl	8003cd0 <HAL_DMA_Start_IT>
    return HAL_OK;
 8005ad0:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005ad2:	682b      	ldr	r3, [r5, #0]
 8005ad4:	9401      	str	r4, [sp, #4]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	9201      	str	r2, [sp, #4]
 8005ada:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 8005adc:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005ae0:	9201      	str	r2, [sp, #4]
 8005ae2:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aea:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aec:	695a      	ldr	r2, [r3, #20]
 8005aee:	f042 0201 	orr.w	r2, r2, #1
 8005af2:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005af4:	695a      	ldr	r2, [r3, #20]
 8005af6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005afa:	615a      	str	r2, [r3, #20]
}
 8005afc:	b002      	add	sp, #8
 8005afe:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005b00:	2001      	movs	r0, #1
 8005b02:	e7fb      	b.n	8005afc <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 8005b04:	2002      	movs	r0, #2
 8005b06:	e7f9      	b.n	8005afc <HAL_UART_Receive_DMA+0x78>
 8005b08:	08005b17 	.word	0x08005b17
 8005b0c:	08005b51 	.word	0x08005b51
 8005b10:	08005b5d 	.word	0x08005b5d

08005b14 <HAL_UART_RxCpltCallback>:
 8005b14:	4770      	bx	lr

08005b16 <UART_DMAReceiveCplt>:
{
 8005b16:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b18:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b1a:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f013 0320 	ands.w	r3, r3, #32
 8005b22:	d110      	bne.n	8005b46 <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 8005b24:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b26:	6813      	ldr	r3, [r2, #0]
 8005b28:	68d9      	ldr	r1, [r3, #12]
 8005b2a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005b2e:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b30:	6959      	ldr	r1, [r3, #20]
 8005b32:	f021 0101 	bic.w	r1, r1, #1
 8005b36:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b38:	6959      	ldr	r1, [r3, #20]
 8005b3a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8005b3e:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8005b40:	2320      	movs	r3, #32
 8005b42:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8005b46:	4610      	mov	r0, r2
 8005b48:	f7ff ffe4 	bl	8005b14 <HAL_UART_RxCpltCallback>
}
 8005b4c:	bd08      	pop	{r3, pc}

08005b4e <HAL_UART_RxHalfCpltCallback>:
 8005b4e:	4770      	bx	lr

08005b50 <UART_DMARxHalfCplt>:
{
 8005b50:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8005b52:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005b54:	f7ff fffb 	bl	8005b4e <HAL_UART_RxHalfCpltCallback>
}
 8005b58:	bd08      	pop	{r3, pc}

08005b5a <HAL_UART_ErrorCallback>:
 8005b5a:	4770      	bx	lr

08005b5c <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b5c:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8005b5e:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005b60:	680b      	ldr	r3, [r1, #0]
 8005b62:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005b64:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8005b68:	2821      	cmp	r0, #33	; 0x21
 8005b6a:	d10a      	bne.n	8005b82 <UART_DMAError+0x26>
 8005b6c:	0612      	lsls	r2, r2, #24
 8005b6e:	d508      	bpl.n	8005b82 <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 8005b70:	2200      	movs	r2, #0
 8005b72:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005b7a:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b82:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005b84:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8005b88:	2a22      	cmp	r2, #34	; 0x22
 8005b8a:	d106      	bne.n	8005b9a <UART_DMAError+0x3e>
 8005b8c:	065b      	lsls	r3, r3, #25
 8005b8e:	d504      	bpl.n	8005b9a <UART_DMAError+0x3e>
    huart->RxXferCount = 0x00U;
 8005b90:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 8005b92:	4608      	mov	r0, r1
    huart->RxXferCount = 0x00U;
 8005b94:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005b96:	f7ff feff 	bl	8005998 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005b9a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8005b9c:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005b9e:	f043 0310 	orr.w	r3, r3, #16
 8005ba2:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8005ba4:	f7ff ffd9 	bl	8005b5a <HAL_UART_ErrorCallback>
}
 8005ba8:	bd08      	pop	{r3, pc}

08005baa <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005baa:	b084      	sub	sp, #16
 8005bac:	a801      	add	r0, sp, #4
 8005bae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8005bb2:	b004      	add	sp, #16
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	4770      	bx	lr

08005bb8 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8005bb8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8005bbc:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8005bc0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	4770      	bx	lr

08005bc8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005bc8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8005bcc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005bd0:	045b      	lsls	r3, r3, #17
 8005bd2:	0c5b      	lsrs	r3, r3, #17
 8005bd4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8005bd8:	2000      	movs	r0, #0
 8005bda:	4770      	bx	lr

08005bdc <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8005bdc:	2000      	movs	r0, #0
 8005bde:	4770      	bx	lr

08005be0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005be0:	b084      	sub	sp, #16
 8005be2:	b510      	push	{r4, lr}
 8005be4:	ac03      	add	r4, sp, #12
 8005be6:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8005bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = USB_CNTR_FRES;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 8005bfa:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8005bfe:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8005c02:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
}
 8005c06:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 8005c08:	f442 423f 	orr.w	r2, r2, #48896	; 0xbf00
 8005c0c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	4770      	bx	lr

08005c14 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c14:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005c16:	780c      	ldrb	r4, [r1, #0]
{
 8005c18:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005c1a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 8005c1e:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005c20:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8005c24:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  switch (ep->type)
 8005c28:	2803      	cmp	r0, #3
 8005c2a:	d803      	bhi.n	8005c34 <USB_ActivateEndpoint+0x20>
 8005c2c:	e8df f000 	tbb	[pc, r0]
 8005c30:	46444942 	.word	0x46444942
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8005c34:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8005c36:	f248 0580 	movw	r5, #32896	; 0x8080
 8005c3a:	432a      	orrs	r2, r5
 8005c3c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005c40:	780e      	ldrb	r6, [r1, #0]
 8005c42:	4a9e      	ldr	r2, [pc, #632]	; (8005ebc <USB_ActivateEndpoint+0x2a8>)
 8005c44:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 8005c48:	4335      	orrs	r5, r6
 8005c4a:	4014      	ands	r4, r2
 8005c4c:	432c      	orrs	r4, r5
 8005c4e:	f823 4026 	strh.w	r4, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8005c52:	7b0d      	ldrb	r5, [r1, #12]
 8005c54:	780c      	ldrb	r4, [r1, #0]
 8005c56:	2d00      	cmp	r5, #0
 8005c58:	f040 8082 	bne.w	8005d60 <USB_ActivateEndpoint+0x14c>
 8005c5c:	88cd      	ldrh	r5, [r1, #6]
  {
    if (ep->is_in != 0U)
 8005c5e:	784e      	ldrb	r6, [r1, #1]
 8005c60:	086d      	lsrs	r5, r5, #1
 8005c62:	006d      	lsls	r5, r5, #1
 8005c64:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8005c68:	b376      	cbz	r6, 8005cc8 <USB_ActivateEndpoint+0xb4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c6a:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8005c6e:	4434      	add	r4, r6
 8005c70:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c74:	780d      	ldrb	r5, [r1, #0]
 8005c76:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8005c7a:	0667      	lsls	r7, r4, #25
 8005c7c:	d508      	bpl.n	8005c90 <USB_ActivateEndpoint+0x7c>
 8005c7e:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8005c82:	4022      	ands	r2, r4
 8005c84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c88:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005c8c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8005c90:	78ca      	ldrb	r2, [r1, #3]
 8005c92:	780c      	ldrb	r4, [r1, #0]
 8005c94:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c96:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 8005c9a:	4a89      	ldr	r2, [pc, #548]	; (8005ec0 <USB_ActivateEndpoint+0x2ac>)
 8005c9c:	ea02 0201 	and.w	r2, r2, r1
 8005ca0:	bf18      	it	ne
 8005ca2:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ca6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005caa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005cae:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8005cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_CONTROL;
 8005cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8005cb8:	2000      	movs	r0, #0
 8005cba:	e7bc      	b.n	8005c36 <USB_ActivateEndpoint+0x22>
      wEpRegVal |= USB_EP_INTERRUPT;
 8005cbc:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8005cc0:	e7fa      	b.n	8005cb8 <USB_ActivateEndpoint+0xa4>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005cc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cc6:	e7f7      	b.n	8005cb8 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005cc8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005ccc:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005cce:	4414      	add	r4, r2
 8005cd0:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005cd4:	780a      	ldrb	r2, [r1, #0]
 8005cd6:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8005cda:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8005cde:	b2a4      	uxth	r4, r4
 8005ce0:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8005ce4:	bb56      	cbnz	r6, 8005d3c <USB_ActivateEndpoint+0x128>
 8005ce6:	5b15      	ldrh	r5, [r2, r4]
 8005ce8:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8005cec:	042d      	lsls	r5, r5, #16
 8005cee:	0c2d      	lsrs	r5, r5, #16
 8005cf0:	5315      	strh	r5, [r2, r4]
 8005cf2:	5b15      	ldrh	r5, [r2, r4]
 8005cf4:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8005cf8:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cfa:	780c      	ldrb	r4, [r1, #0]
 8005cfc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005d00:	0457      	lsls	r7, r2, #17
 8005d02:	d50b      	bpl.n	8005d1c <USB_ActivateEndpoint+0x108>
 8005d04:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005d08:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005d0c:	0512      	lsls	r2, r2, #20
 8005d0e:	0d12      	lsrs	r2, r2, #20
 8005d10:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005d14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d18:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d1c:	7809      	ldrb	r1, [r1, #0]
 8005d1e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8005d22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d26:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005d2a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d36:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8005d3a:	e7ba      	b.n	8005cb2 <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005d3c:	2e3e      	cmp	r6, #62	; 0x3e
 8005d3e:	d806      	bhi.n	8005d4e <USB_ActivateEndpoint+0x13a>
 8005d40:	0875      	lsrs	r5, r6, #1
 8005d42:	07f6      	lsls	r6, r6, #31
 8005d44:	bf48      	it	mi
 8005d46:	3501      	addmi	r5, #1
 8005d48:	02ad      	lsls	r5, r5, #10
 8005d4a:	b2ad      	uxth	r5, r5
 8005d4c:	e7d4      	b.n	8005cf8 <USB_ActivateEndpoint+0xe4>
 8005d4e:	0977      	lsrs	r7, r6, #5
 8005d50:	06f5      	lsls	r5, r6, #27
 8005d52:	4d5c      	ldr	r5, [pc, #368]	; (8005ec4 <USB_ActivateEndpoint+0x2b0>)
 8005d54:	bf08      	it	eq
 8005d56:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8005d5a:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8005d5e:	e7f4      	b.n	8005d4a <USB_ActivateEndpoint+0x136>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005d60:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8005d64:	4015      	ands	r5, r2
 8005d66:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 8005d6a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8005d6e:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005d72:	780c      	ldrb	r4, [r1, #0]
 8005d74:	890d      	ldrh	r5, [r1, #8]
 8005d76:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8005d7a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8005d7e:	086d      	lsrs	r5, r5, #1
 8005d80:	b2b6      	uxth	r6, r6
 8005d82:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005d86:	006d      	lsls	r5, r5, #1
 8005d88:	53a5      	strh	r5, [r4, r6]
 8005d8a:	780c      	ldrb	r4, [r1, #0]
 8005d8c:	894d      	ldrh	r5, [r1, #10]
 8005d8e:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8005d92:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8005d96:	086d      	lsrs	r5, r5, #1
 8005d98:	f504 6481 	add.w	r4, r4, #1032	; 0x408
 8005d9c:	006d      	lsls	r5, r5, #1
 8005d9e:	b2b6      	uxth	r6, r6
 8005da0:	53a5      	strh	r5, [r4, r6]
    if (ep->is_in == 0U)
 8005da2:	784c      	ldrb	r4, [r1, #1]
 8005da4:	780d      	ldrb	r5, [r1, #0]
 8005da6:	2c00      	cmp	r4, #0
 8005da8:	d143      	bne.n	8005e32 <USB_ActivateEndpoint+0x21e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005daa:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8005dae:	0466      	lsls	r6, r4, #17
 8005db0:	d508      	bpl.n	8005dc4 <USB_ActivateEndpoint+0x1b0>
 8005db2:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8005db6:	4022      	ands	r2, r4
 8005db8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005dbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005dc0:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dc4:	780c      	ldrb	r4, [r1, #0]
 8005dc6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005dca:	0655      	lsls	r5, r2, #25
 8005dcc:	d50b      	bpl.n	8005de6 <USB_ActivateEndpoint+0x1d2>
 8005dce:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005dd2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005dd6:	0512      	lsls	r2, r2, #20
 8005dd8:	0d12      	lsrs	r2, r2, #20
 8005dda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dde:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005de2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8005de6:	780c      	ldrb	r4, [r1, #0]
 8005de8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005dec:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005df0:	0512      	lsls	r2, r2, #20
 8005df2:	0d12      	lsrs	r2, r2, #20
 8005df4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005df8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005dfc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e00:	f248 0480 	movw	r4, #32896	; 0x8080
 8005e04:	780d      	ldrb	r5, [r1, #0]
 8005e06:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8005e0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005e12:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8005e16:	4322      	orrs	r2, r4
 8005e18:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e1c:	7809      	ldrb	r1, [r1, #0]
 8005e1e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8005e22:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e2a:	4314      	orrs	r4, r2
 8005e2c:	f823 4021 	strh.w	r4, [r3, r1, lsl #2]
 8005e30:	e73f      	b.n	8005cb2 <USB_ActivateEndpoint+0x9e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e32:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8005e36:	0464      	lsls	r4, r4, #17
 8005e38:	d508      	bpl.n	8005e4c <USB_ActivateEndpoint+0x238>
 8005e3a:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8005e3e:	4022      	ands	r2, r4
 8005e40:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005e44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e48:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e4c:	780c      	ldrb	r4, [r1, #0]
 8005e4e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005e52:	0652      	lsls	r2, r2, #25
 8005e54:	d50b      	bpl.n	8005e6e <USB_ActivateEndpoint+0x25a>
 8005e56:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005e5a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005e5e:	0512      	lsls	r2, r2, #20
 8005e60:	0d12      	lsrs	r2, r2, #20
 8005e62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e66:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005e6a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8005e6e:	780c      	ldrb	r4, [r1, #0]
 8005e70:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8005e74:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005e78:	0512      	lsls	r2, r2, #20
 8005e7a:	0d12      	lsrs	r2, r2, #20
 8005e7c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005e80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e84:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8005e88:	78ca      	ldrb	r2, [r1, #3]
 8005e8a:	780c      	ldrb	r4, [r1, #0]
 8005e8c:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e8e:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8005e92:	4a0b      	ldr	r2, [pc, #44]	; (8005ec0 <USB_ActivateEndpoint+0x2ac>)
 8005e94:	ea02 0205 	and.w	r2, r2, r5
 8005e98:	bf18      	it	ne
 8005e9a:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ea2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ea6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005eaa:	7809      	ldrb	r1, [r1, #0]
 8005eac:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8005eb0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005eb4:	0492      	lsls	r2, r2, #18
 8005eb6:	0c92      	lsrs	r2, r2, #18
 8005eb8:	e739      	b.n	8005d2e <USB_ActivateEndpoint+0x11a>
 8005eba:	bf00      	nop
 8005ebc:	ffff8f8f 	.word	0xffff8f8f
 8005ec0:	ffff8fbf 	.word	0xffff8fbf
 8005ec4:	ffff8000 	.word	0xffff8000

08005ec8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ec8:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 8005eca:	7b0c      	ldrb	r4, [r1, #12]
 8005ecc:	784a      	ldrb	r2, [r1, #1]
 8005ece:	780b      	ldrb	r3, [r1, #0]
 8005ed0:	bbbc      	cbnz	r4, 8005f42 <USB_DeactivateEndpoint+0x7a>
  {
    if (ep->is_in != 0U)
 8005ed2:	b1f2      	cbz	r2, 8005f12 <USB_DeactivateEndpoint+0x4a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ed4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005ed8:	0652      	lsls	r2, r2, #25
 8005eda:	d50b      	bpl.n	8005ef4 <USB_DeactivateEndpoint+0x2c>
 8005edc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005ee0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005ee4:	0512      	lsls	r2, r2, #20
 8005ee6:	0d12      	lsrs	r2, r2, #20
 8005ee8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005eec:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005ef0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ef4:	780a      	ldrb	r2, [r1, #0]
 8005ef6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005efa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005efe:	051b      	lsls	r3, r3, #20
 8005f00:	0d1b      	lsrs	r3, r3, #20
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f0a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8005f0e:	2000      	movs	r0, #0
 8005f10:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f12:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005f16:	0454      	lsls	r4, r2, #17
 8005f18:	d50b      	bpl.n	8005f32 <USB_DeactivateEndpoint+0x6a>
 8005f1a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005f1e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005f22:	0512      	lsls	r2, r2, #20
 8005f24:	0d12      	lsrs	r2, r2, #20
 8005f26:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005f2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f2e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f32:	780a      	ldrb	r2, [r1, #0]
 8005f34:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f3c:	049b      	lsls	r3, r3, #18
 8005f3e:	0c9b      	lsrs	r3, r3, #18
 8005f40:	e7df      	b.n	8005f02 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8005f42:	2a00      	cmp	r2, #0
 8005f44:	d144      	bne.n	8005fd0 <USB_DeactivateEndpoint+0x108>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f46:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005f4a:	0452      	lsls	r2, r2, #17
 8005f4c:	d50b      	bpl.n	8005f66 <USB_DeactivateEndpoint+0x9e>
 8005f4e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005f52:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005f56:	0512      	lsls	r2, r2, #20
 8005f58:	0d12      	lsrs	r2, r2, #20
 8005f5a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005f5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f62:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f66:	780a      	ldrb	r2, [r1, #0]
 8005f68:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f6c:	065c      	lsls	r4, r3, #25
 8005f6e:	d50b      	bpl.n	8005f88 <USB_DeactivateEndpoint+0xc0>
 8005f70:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f78:	051b      	lsls	r3, r3, #20
 8005f7a:	0d1b      	lsrs	r3, r3, #20
 8005f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f84:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8005f88:	780a      	ldrb	r2, [r1, #0]
 8005f8a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f92:	051b      	lsls	r3, r3, #20
 8005f94:	0d1b      	lsrs	r3, r3, #20
 8005f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f9e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005fa2:	f248 0280 	movw	r2, #32896	; 0x8080
 8005fa6:	780c      	ldrb	r4, [r1, #0]
 8005fa8:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8005fac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fba:	7809      	ldrb	r1, [r1, #0]
 8005fbc:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8005fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8005fce:	e79e      	b.n	8005f0e <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fd0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005fd4:	0452      	lsls	r2, r2, #17
 8005fd6:	d50b      	bpl.n	8005ff0 <USB_DeactivateEndpoint+0x128>
 8005fd8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005fdc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005fe0:	0512      	lsls	r2, r2, #20
 8005fe2:	0d12      	lsrs	r2, r2, #20
 8005fe4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005fe8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005fec:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ff0:	780a      	ldrb	r2, [r1, #0]
 8005ff2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ff6:	065b      	lsls	r3, r3, #25
 8005ff8:	d50b      	bpl.n	8006012 <USB_DeactivateEndpoint+0x14a>
 8005ffa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ffe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006002:	051b      	lsls	r3, r3, #20
 8006004:	0d1b      	lsrs	r3, r3, #20
 8006006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800600a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800600e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8006012:	780a      	ldrb	r2, [r1, #0]
 8006014:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006018:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800601c:	051b      	lsls	r3, r3, #20
 800601e:	0d1b      	lsrs	r3, r3, #20
 8006020:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006028:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800602c:	f248 0280 	movw	r2, #32896	; 0x8080
 8006030:	780c      	ldrb	r4, [r1, #0]
 8006032:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8006036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800603a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800603e:	4313      	orrs	r3, r2
 8006040:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006044:	7809      	ldrb	r1, [r1, #0]
 8006046:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800604a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800604e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006052:	e7b9      	b.n	8005fc8 <USB_DeactivateEndpoint+0x100>

08006054 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8006054:	784b      	ldrb	r3, [r1, #1]
 8006056:	780a      	ldrb	r2, [r1, #0]
 8006058:	b17b      	cbz	r3, 800607a <USB_EPSetStall+0x26>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800605a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800605e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006066:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800606a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800606e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006072:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8006076:	2000      	movs	r0, #0
 8006078:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800607a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800607e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006086:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800608a:	e7ee      	b.n	800606a <USB_EPSetStall+0x16>

0800608c <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800608c:	7b0b      	ldrb	r3, [r1, #12]
 800608e:	bb23      	cbnz	r3, 80060da <USB_EPClearStall+0x4e>
  {
    if (ep->is_in != 0U)
 8006090:	784b      	ldrb	r3, [r1, #1]
 8006092:	780a      	ldrb	r2, [r1, #0]
 8006094:	b31b      	cbz	r3, 80060de <USB_EPClearStall+0x52>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006096:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800609a:	065b      	lsls	r3, r3, #25
 800609c:	d50b      	bpl.n	80060b6 <USB_EPClearStall+0x2a>
 800609e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80060a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060a6:	051b      	lsls	r3, r3, #20
 80060a8:	0d1b      	lsrs	r3, r3, #20
 80060aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060b2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80060b6:	78cb      	ldrb	r3, [r1, #3]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d00e      	beq.n	80060da <USB_EPClearStall+0x4e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80060bc:	780a      	ldrb	r2, [r1, #0]
 80060be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80060c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ca:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80060da:	2000      	movs	r0, #0
 80060dc:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80060e2:	045b      	lsls	r3, r3, #17
 80060e4:	d50b      	bpl.n	80060fe <USB_EPClearStall+0x72>
 80060e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80060ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060ee:	051b      	lsls	r3, r3, #20
 80060f0:	0d1b      	lsrs	r3, r3, #20
 80060f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060fa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060fe:	780a      	ldrb	r2, [r1, #0]
 8006100:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006104:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006110:	e7dd      	b.n	80060ce <USB_EPClearStall+0x42>

08006112 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8006112:	b911      	cbnz	r1, 800611a <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8006114:	2380      	movs	r3, #128	; 0x80
 8006116:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 800611a:	2000      	movs	r0, #0
 800611c:	4770      	bx	lr

0800611e <USB_DevConnect>:
 800611e:	2000      	movs	r0, #0
 8006120:	4770      	bx	lr

08006122 <USB_DevDisconnect>:
 8006122:	2000      	movs	r0, #0
 8006124:	4770      	bx	lr

08006126 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006126:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800612a:	4770      	bx	lr

0800612c <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800612c:	2000      	movs	r0, #0
 800612e:	4770      	bx	lr

08006130 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006130:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006134:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006136:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800613a:	085b      	lsrs	r3, r3, #1
 800613c:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8006140:	429a      	cmp	r2, r3
 8006142:	d100      	bne.n	8006146 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8006144:	4770      	bx	lr
 8006146:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 800614a:	f822 0b04 	strh.w	r0, [r2], #4
 800614e:	e7f7      	b.n	8006140 <USB_WritePMA+0x10>

08006150 <USB_EPStartXfer>:
{
 8006150:	b570      	push	{r4, r5, r6, lr}
 8006152:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8006154:	7849      	ldrb	r1, [r1, #1]
{
 8006156:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8006158:	2901      	cmp	r1, #1
 800615a:	69aa      	ldr	r2, [r5, #24]
 800615c:	692b      	ldr	r3, [r5, #16]
 800615e:	7b28      	ldrb	r0, [r5, #12]
 8006160:	d15d      	bne.n	800621e <USB_EPStartXfer+0xce>
    if (ep->xfer_len > ep->maxpacket)
 8006162:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8006164:	bf9d      	ittte	ls
 8006166:	2300      	movls	r3, #0
 8006168:	61ab      	strls	r3, [r5, #24]
 800616a:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 800616c:	1ad2      	subhi	r2, r2, r3
 800616e:	bf88      	it	hi
 8006170:	61aa      	strhi	r2, [r5, #24]
 8006172:	6969      	ldr	r1, [r5, #20]
 8006174:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 8006176:	b9e8      	cbnz	r0, 80061b4 <USB_EPStartXfer+0x64>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006178:	4633      	mov	r3, r6
 800617a:	88ea      	ldrh	r2, [r5, #6]
 800617c:	4620      	mov	r0, r4
 800617e:	f7ff ffd7 	bl	8006130 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006182:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8006186:	782a      	ldrb	r2, [r5, #0]
 8006188:	f204 4304 	addw	r3, r4, #1028	; 0x404
 800618c:	0112      	lsls	r2, r2, #4
 800618e:	440b      	add	r3, r1
 8006190:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006192:	782a      	ldrb	r2, [r5, #0]
 8006194:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8006198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800619c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061a0:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ac:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 80061b0:	2000      	movs	r0, #0
 80061b2:	bd70      	pop	{r4, r5, r6, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80061b4:	782b      	ldrb	r3, [r5, #0]
 80061b6:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061ba:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80061be:	0652      	lsls	r2, r2, #25
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061c0:	bf4b      	itete	mi
 80061c2:	f204 420c 	addwmi	r2, r4, #1036	; 0x40c
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061c6:	f204 4204 	addwpl	r2, r4, #1028	; 0x404
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061ca:	1812      	addmi	r2, r2, r0
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061cc:	1812      	addpl	r2, r2, r0
 80061ce:	ea4f 1303 	mov.w	r3, r3, lsl #4
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061d2:	bf4b      	itete	mi
 80061d4:	52d6      	strhmi	r6, [r2, r3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061d6:	52d6      	strhpl	r6, [r2, r3]
        pmabuffer = ep->pmaaddr1;
 80061d8:	896a      	ldrhmi	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 80061da:	892a      	ldrhpl	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061dc:	4633      	mov	r3, r6
 80061de:	4620      	mov	r0, r4
 80061e0:	f7ff ffa6 	bl	8006130 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80061e4:	786b      	ldrb	r3, [r5, #1]
 80061e6:	782a      	ldrb	r2, [r5, #0]
 80061e8:	b963      	cbnz	r3, 8006204 <USB_EPStartXfer+0xb4>
 80061ea:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80061ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061f2:	051b      	lsls	r3, r3, #20
 80061f4:	0d1b      	lsrs	r3, r3, #20
 80061f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061fe:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8006202:	e7c6      	b.n	8006192 <USB_EPStartXfer+0x42>
 8006204:	2b01      	cmp	r3, #1
 8006206:	d1c4      	bne.n	8006192 <USB_EPStartXfer+0x42>
 8006208:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800620c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006210:	051b      	lsls	r3, r3, #20
 8006212:	0d1b      	lsrs	r3, r3, #20
 8006214:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800621c:	e7ef      	b.n	80061fe <USB_EPStartXfer+0xae>
    if (ep->xfer_len > ep->maxpacket)
 800621e:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8006220:	bf93      	iteet	ls
 8006222:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8006224:	1ad2      	subhi	r2, r2, r3
 8006226:	61aa      	strhi	r2, [r5, #24]
      ep->xfer_len = 0U;
 8006228:	61ab      	strls	r3, [r5, #24]
 800622a:	bf98      	it	ls
 800622c:	4613      	movls	r3, r2
 800622e:	782a      	ldrb	r2, [r5, #0]
    if (ep->doublebuffer == 0U)
 8006230:	b990      	cbnz	r0, 8006258 <USB_EPStartXfer+0x108>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006232:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8006236:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 800623a:	4401      	add	r1, r0
 800623c:	0112      	lsls	r2, r2, #4
 800623e:	2b00      	cmp	r3, #0
 8006240:	d13b      	bne.n	80062ba <USB_EPStartXfer+0x16a>
 8006242:	5a8b      	ldrh	r3, [r1, r2]
 8006244:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006248:	041b      	lsls	r3, r3, #16
 800624a:	0c1b      	lsrs	r3, r3, #16
 800624c:	528b      	strh	r3, [r1, r2]
 800624e:	5a8b      	ldrh	r3, [r1, r2]
 8006250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006254:	528b      	strh	r3, [r1, r2]
 8006256:	e039      	b.n	80062cc <USB_EPStartXfer+0x17c>
 8006258:	b981      	cbnz	r1, 800627c <USB_EPStartXfer+0x12c>
 800625a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800625e:	f204 4004 	addw	r0, r4, #1028	; 0x404
 8006262:	4401      	add	r1, r0
 8006264:	0112      	lsls	r2, r2, #4
 8006266:	b9b3      	cbnz	r3, 8006296 <USB_EPStartXfer+0x146>
 8006268:	5a88      	ldrh	r0, [r1, r2]
 800626a:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800626e:	0400      	lsls	r0, r0, #16
 8006270:	0c00      	lsrs	r0, r0, #16
 8006272:	5288      	strh	r0, [r1, r2]
 8006274:	5a88      	ldrh	r0, [r1, r2]
 8006276:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800627a:	5288      	strh	r0, [r1, r2]
 800627c:	7869      	ldrb	r1, [r5, #1]
 800627e:	782a      	ldrb	r2, [r5, #0]
 8006280:	2900      	cmp	r1, #0
 8006282:	d0d6      	beq.n	8006232 <USB_EPStartXfer+0xe2>
 8006284:	2901      	cmp	r1, #1
 8006286:	d121      	bne.n	80062cc <USB_EPStartXfer+0x17c>
 8006288:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 800628c:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8006290:	4401      	add	r1, r0
 8006292:	0112      	lsls	r2, r2, #4
 8006294:	e02c      	b.n	80062f0 <USB_EPStartXfer+0x1a0>
 8006296:	2b3e      	cmp	r3, #62	; 0x3e
 8006298:	d806      	bhi.n	80062a8 <USB_EPStartXfer+0x158>
 800629a:	0858      	lsrs	r0, r3, #1
 800629c:	07de      	lsls	r6, r3, #31
 800629e:	bf48      	it	mi
 80062a0:	3001      	addmi	r0, #1
 80062a2:	0280      	lsls	r0, r0, #10
 80062a4:	b280      	uxth	r0, r0
 80062a6:	e7e8      	b.n	800627a <USB_EPStartXfer+0x12a>
 80062a8:	095e      	lsrs	r6, r3, #5
 80062aa:	06d8      	lsls	r0, r3, #27
 80062ac:	4811      	ldr	r0, [pc, #68]	; (80062f4 <USB_EPStartXfer+0x1a4>)
 80062ae:	bf08      	it	eq
 80062b0:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80062b4:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 80062b8:	e7f4      	b.n	80062a4 <USB_EPStartXfer+0x154>
 80062ba:	2b3e      	cmp	r3, #62	; 0x3e
 80062bc:	d810      	bhi.n	80062e0 <USB_EPStartXfer+0x190>
 80062be:	0858      	lsrs	r0, r3, #1
 80062c0:	07de      	lsls	r6, r3, #31
 80062c2:	bf48      	it	mi
 80062c4:	3001      	addmi	r0, #1
 80062c6:	0280      	lsls	r0, r0, #10
 80062c8:	b280      	uxth	r0, r0
 80062ca:	5288      	strh	r0, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062cc:	782a      	ldrb	r2, [r5, #0]
 80062ce:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80062d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062da:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80062de:	e761      	b.n	80061a4 <USB_EPStartXfer+0x54>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80062e0:	0958      	lsrs	r0, r3, #5
 80062e2:	06db      	lsls	r3, r3, #27
 80062e4:	4b03      	ldr	r3, [pc, #12]	; (80062f4 <USB_EPStartXfer+0x1a4>)
 80062e6:	bf08      	it	eq
 80062e8:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80062ec:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	e7af      	b.n	8006254 <USB_EPStartXfer+0x104>
 80062f4:	ffff8000 	.word	0xffff8000

080062f8 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80062f8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 80062fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80062fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006302:	085d      	lsrs	r5, r3, #1
 8006304:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006306:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 8006308:	462e      	mov	r6, r5
 800630a:	3002      	adds	r0, #2
 800630c:	b936      	cbnz	r6, 800631c <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800630e:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8006310:	bf44      	itt	mi
 8006312:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006316:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 800631a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 800631c:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8006320:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8006322:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006324:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006328:	0a24      	lsrs	r4, r4, #8
 800632a:	f800 4c01 	strb.w	r4, [r0, #-1]
 800632e:	e7ec      	b.n	800630a <USB_ReadPMA+0x12>

08006330 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006330:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8006334:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006336:	b16b      	cbz	r3, 8006354 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006338:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800633c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8006340:	28ff      	cmp	r0, #255	; 0xff
 8006342:	d007      	beq.n	8006354 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800634a:	4621      	mov	r1, r4
 800634c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800634e:	23ff      	movs	r3, #255	; 0xff
 8006350:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8006354:	2000      	movs	r0, #0
 8006356:	bd10      	pop	{r4, pc}

08006358 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006358:	2343      	movs	r3, #67	; 0x43
 800635a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800635c:	4800      	ldr	r0, [pc, #0]	; (8006360 <USBD_CDC_GetFSCfgDesc+0x8>)
 800635e:	4770      	bx	lr
 8006360:	2000007c 	.word	0x2000007c

08006364 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006364:	2343      	movs	r3, #67	; 0x43
 8006366:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8006368:	4800      	ldr	r0, [pc, #0]	; (800636c <USBD_CDC_GetHSCfgDesc+0x8>)
 800636a:	4770      	bx	lr
 800636c:	200000c0 	.word	0x200000c0

08006370 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006370:	2343      	movs	r3, #67	; 0x43
 8006372:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8006374:	4800      	ldr	r0, [pc, #0]	; (8006378 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8006376:	4770      	bx	lr
 8006378:	20000110 	.word	0x20000110

0800637c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800637c:	230a      	movs	r3, #10
 800637e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8006380:	4800      	ldr	r0, [pc, #0]	; (8006384 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8006382:	4770      	bx	lr
 8006384:	20000104 	.word	0x20000104

08006388 <USBD_CDC_DataOut>:
{
 8006388:	b538      	push	{r3, r4, r5, lr}
 800638a:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800638c:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006390:	f000 fee0 	bl	8007154 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8006394:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006398:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 800639c:	b14b      	cbz	r3, 80063b2 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800639e:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 80063a2:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 80063ac:	4798      	blx	r3
    return USBD_OK;
 80063ae:	2000      	movs	r0, #0
}
 80063b0:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80063b2:	2002      	movs	r0, #2
 80063b4:	e7fc      	b.n	80063b0 <USBD_CDC_DataOut+0x28>

080063b6 <USBD_CDC_DataIn>:
{
 80063b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063b8:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 80063bc:	b1ce      	cbz	r6, 80063f2 <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80063be:	2314      	movs	r3, #20
 80063c0:	fb03 0301 	mla	r3, r3, r1, r0
 80063c4:	69da      	ldr	r2, [r3, #28]
 80063c6:	b182      	cbz	r2, 80063ea <USBD_CDC_DataIn+0x34>
 80063c8:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 80063cc:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 80063d0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80063d2:	fbb2 f4f5 	udiv	r4, r2, r5
 80063d6:	fb05 2414 	mls	r4, r5, r4, r2
 80063da:	b934      	cbnz	r4, 80063ea <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 80063dc:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80063de:	4622      	mov	r2, r4
 80063e0:	4623      	mov	r3, r4
 80063e2:	f000 fe9b 	bl	800711c <USBD_LL_Transmit>
    return USBD_OK;
 80063e6:	4620      	mov	r0, r4
}
 80063e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 80063ea:	2000      	movs	r0, #0
 80063ec:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 80063f0:	e7fa      	b.n	80063e8 <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 80063f2:	2002      	movs	r0, #2
 80063f4:	e7f8      	b.n	80063e8 <USBD_CDC_DataIn+0x32>

080063f6 <USBD_CDC_Setup>:
{
 80063f6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 80063fa:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063fe:	780a      	ldrb	r2, [r1, #0]
{
 8006400:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006402:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8006406:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006408:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 800640c:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8006410:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006414:	d028      	beq.n	8006468 <USBD_CDC_Setup+0x72>
 8006416:	2c20      	cmp	r4, #32
 8006418:	d145      	bne.n	80064a6 <USBD_CDC_Setup+0xb0>
      if (req->wLength)
 800641a:	88cc      	ldrh	r4, [r1, #6]
 800641c:	784b      	ldrb	r3, [r1, #1]
 800641e:	b1e4      	cbz	r4, 800645a <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8006420:	0612      	lsls	r2, r2, #24
 8006422:	d511      	bpl.n	8006448 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006424:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8006428:	4639      	mov	r1, r7
 800642a:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800642e:	4618      	mov	r0, r3
 8006430:	4622      	mov	r2, r4
 8006432:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006434:	88f2      	ldrh	r2, [r6, #6]
 8006436:	4639      	mov	r1, r7
 8006438:	4628      	mov	r0, r5
 800643a:	f000 fc46 	bl	8006cca <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800643e:	4644      	mov	r4, r8
}
 8006440:	4620      	mov	r0, r4
 8006442:	b003      	add	sp, #12
 8006444:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8006448:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800644c:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006450:	4622      	mov	r2, r4
 8006452:	4639      	mov	r1, r7
 8006454:	f000 fc4e 	bl	8006cf4 <USBD_CtlPrepareRx>
 8006458:	e7f1      	b.n	800643e <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800645a:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800645e:	4618      	mov	r0, r3
 8006460:	6895      	ldr	r5, [r2, #8]
 8006462:	4622      	mov	r2, r4
 8006464:	47a8      	blx	r5
 8006466:	e7eb      	b.n	8006440 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8006468:	784f      	ldrb	r7, [r1, #1]
 800646a:	2f0a      	cmp	r7, #10
 800646c:	d00d      	beq.n	800648a <USBD_CDC_Setup+0x94>
 800646e:	2f0b      	cmp	r7, #11
 8006470:	d015      	beq.n	800649e <USBD_CDC_Setup+0xa8>
 8006472:	b9c7      	cbnz	r7, 80064a6 <USBD_CDC_Setup+0xb0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006474:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006478:	2b03      	cmp	r3, #3
 800647a:	d114      	bne.n	80064a6 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800647c:	2202      	movs	r2, #2
 800647e:	f10d 0106 	add.w	r1, sp, #6
 8006482:	f000 fc22 	bl	8006cca <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8006486:	463c      	mov	r4, r7
 8006488:	e7da      	b.n	8006440 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800648a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800648e:	2b03      	cmp	r3, #3
 8006490:	d109      	bne.n	80064a6 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006492:	2201      	movs	r2, #1
 8006494:	f10d 0105 	add.w	r1, sp, #5
 8006498:	f000 fc17 	bl	8006cca <USBD_CtlSendData>
 800649c:	e7d0      	b.n	8006440 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800649e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d0cc      	beq.n	8006440 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 80064a6:	4631      	mov	r1, r6
 80064a8:	4628      	mov	r0, r5
 80064aa:	f000 fbe7 	bl	8006c7c <USBD_CtlError>
          ret = USBD_FAIL;
 80064ae:	2402      	movs	r4, #2
          break;
 80064b0:	e7c6      	b.n	8006440 <USBD_CDC_Setup+0x4a>

080064b2 <USBD_CDC_DeInit>:
{
 80064b2:	b538      	push	{r3, r4, r5, lr}
 80064b4:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80064b6:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80064b8:	2181      	movs	r1, #129	; 0x81
 80064ba:	f000 fde7 	bl	800708c <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80064be:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80064c0:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80064c2:	4620      	mov	r0, r4
 80064c4:	f000 fde2 	bl	800708c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80064c8:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80064cc:	2182      	movs	r1, #130	; 0x82
 80064ce:	4620      	mov	r0, r4
 80064d0:	f000 fddc 	bl	800708c <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80064d4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80064d8:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 80064da:	b14b      	cbz	r3, 80064f0 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80064dc:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80064e4:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 80064e8:	f000 fe3c 	bl	8007164 <USBD_static_free>
    pdev->pClassData = NULL;
 80064ec:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 80064f0:	2000      	movs	r0, #0
 80064f2:	bd38      	pop	{r3, r4, r5, pc}

080064f4 <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064f4:	7c03      	ldrb	r3, [r0, #16]
{
 80064f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064fa:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064fc:	bbcb      	cbnz	r3, 8006572 <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80064fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006502:	2202      	movs	r2, #2
 8006504:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006506:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006508:	f000 fdb0 	bl	800706c <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800650c:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006510:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006512:	4629      	mov	r1, r5
 8006514:	2202      	movs	r2, #2
 8006516:	4620      	mov	r0, r4
 8006518:	f000 fda8 	bl	800706c <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800651c:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006520:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006522:	2308      	movs	r3, #8
 8006524:	2203      	movs	r2, #3
 8006526:	2182      	movs	r1, #130	; 0x82
 8006528:	4620      	mov	r0, r4
 800652a:	f000 fd9f 	bl	800706c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800652e:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006530:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006534:	f000 fe12 	bl	800715c <USBD_static_malloc>
 8006538:	4606      	mov	r6, r0
 800653a:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 800653e:	b350      	cbz	r0, 8006596 <USBD_CDC_Init+0xa2>
    hcdc->TxState = 0U;
 8006540:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006542:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800654a:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 800654e:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 8006552:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006556:	f1b8 0f00 	cmp.w	r8, #0
 800655a:	d113      	bne.n	8006584 <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800655c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006560:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8006564:	4629      	mov	r1, r5
 8006566:	4620      	mov	r0, r4
 8006568:	f000 fde6 	bl	8007138 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800656c:	4640      	mov	r0, r8
}
 800656e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006572:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006574:	2340      	movs	r3, #64	; 0x40
 8006576:	2202      	movs	r2, #2
 8006578:	2181      	movs	r1, #129	; 0x81
 800657a:	f000 fd77 	bl	800706c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800657e:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006580:	2340      	movs	r3, #64	; 0x40
 8006582:	e7c6      	b.n	8006512 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006584:	2340      	movs	r3, #64	; 0x40
 8006586:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800658a:	4629      	mov	r1, r5
 800658c:	4620      	mov	r0, r4
 800658e:	f000 fdd3 	bl	8007138 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8006592:	4638      	mov	r0, r7
 8006594:	e7eb      	b.n	800656e <USBD_CDC_Init+0x7a>
    ret = 1U;
 8006596:	4628      	mov	r0, r5
 8006598:	e7e9      	b.n	800656e <USBD_CDC_Init+0x7a>

0800659a <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 800659a:	b119      	cbz	r1, 80065a4 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 800659c:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 80065a0:	2000      	movs	r0, #0
 80065a2:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80065a4:	2002      	movs	r0, #2
  }

  return ret;
}
 80065a6:	4770      	bx	lr

080065a8 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065a8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 80065ac:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80065ae:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80065b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80065b6:	4770      	bx	lr

080065b8 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80065b8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 80065bc:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80065be:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 80065c2:	4770      	bx	lr

080065c4 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065c4:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 80065c8:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 80065ca:	b182      	cbz	r2, 80065ee <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 80065cc:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 80065d0:	2301      	movs	r3, #1
 80065d2:	b974      	cbnz	r4, 80065f2 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80065d4:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80065d8:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80065dc:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80065de:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80065e0:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	f000 fd99 	bl	800711c <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 80065ea:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 80065ec:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80065ee:	2002      	movs	r0, #2
 80065f0:	e7fc      	b.n	80065ec <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 80065f2:	4618      	mov	r0, r3
 80065f4:	e7fa      	b.n	80065ec <USBD_CDC_TransmitPacket+0x28>

080065f6 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065f6:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 80065fa:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80065fc:	b162      	cbz	r2, 8006618 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065fe:	7c04      	ldrb	r4, [r0, #16]
 8006600:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8006604:	b934      	cbnz	r4, 8006614 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006606:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800660a:	2101      	movs	r1, #1
 800660c:	f000 fd94 	bl	8007138 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006610:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8006612:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8006614:	2340      	movs	r3, #64	; 0x40
 8006616:	e7f8      	b.n	800660a <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 8006618:	2002      	movs	r0, #2
 800661a:	e7fa      	b.n	8006612 <USBD_CDC_ReceivePacket+0x1c>

0800661c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800661c:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800661e:	b180      	cbz	r0, 8006642 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006620:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006624:	b113      	cbz	r3, 800662c <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8006626:	2300      	movs	r3, #0
 8006628:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800662c:	b109      	cbz	r1, 8006632 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800662e:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006632:	2301      	movs	r3, #1
  pdev->id = id;
 8006634:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006636:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800663a:	f000 fcc7 	bl	8006fcc <USBD_LL_Init>

  return USBD_OK;
 800663e:	2000      	movs	r0, #0
}
 8006640:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8006642:	2002      	movs	r0, #2
 8006644:	e7fc      	b.n	8006640 <USBD_Init+0x24>

08006646 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8006646:	b119      	cbz	r1, 8006650 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006648:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 800664c:	2000      	movs	r0, #0
 800664e:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006650:	2002      	movs	r0, #2
  }

  return status;
}
 8006652:	4770      	bx	lr

08006654 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006654:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006656:	f000 fcfb 	bl	8007050 <USBD_LL_Start>

  return USBD_OK;
}
 800665a:	2000      	movs	r0, #0
 800665c:	bd08      	pop	{r3, pc}

0800665e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800665e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8006660:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006664:	b90b      	cbnz	r3, 800666a <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006666:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8006668:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4798      	blx	r3
 800666e:	2800      	cmp	r0, #0
 8006670:	d0fa      	beq.n	8006668 <USBD_SetClassConfig+0xa>
 8006672:	e7f8      	b.n	8006666 <USBD_SetClassConfig+0x8>

08006674 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006674:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006676:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	4798      	blx	r3

  return USBD_OK;
}
 800667e:	2000      	movs	r0, #0
 8006680:	bd08      	pop	{r3, pc}

08006682 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006682:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006684:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8006688:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800668a:	4628      	mov	r0, r5
 800668c:	f000 fae2 	bl	8006c54 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006690:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8006692:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8006696:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800669a:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 800669e:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 80066a2:	f001 031f 	and.w	r3, r1, #31
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d00e      	beq.n	80066c8 <USBD_LL_SetupStage+0x46>
 80066aa:	d307      	bcc.n	80066bc <USBD_LL_SetupStage+0x3a>
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d010      	beq.n	80066d2 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80066b0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80066b4:	4620      	mov	r0, r4
 80066b6:	f000 fcf7 	bl	80070a8 <USBD_LL_StallEP>
      break;
 80066ba:	e003      	b.n	80066c4 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 80066bc:	4629      	mov	r1, r5
 80066be:	4620      	mov	r0, r4
 80066c0:	f000 f8f6 	bl	80068b0 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80066c4:	2000      	movs	r0, #0
 80066c6:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80066c8:	4629      	mov	r1, r5
 80066ca:	4620      	mov	r0, r4
 80066cc:	f000 fa14 	bl	8006af8 <USBD_StdItfReq>
      break;
 80066d0:	e7f8      	b.n	80066c4 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 80066d2:	4629      	mov	r1, r5
 80066d4:	4620      	mov	r0, r4
 80066d6:	f000 fa34 	bl	8006b42 <USBD_StdEPReq>
      break;
 80066da:	e7f3      	b.n	80066c4 <USBD_LL_SetupStage+0x42>

080066dc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80066dc:	b570      	push	{r4, r5, r6, lr}
 80066de:	4605      	mov	r5, r0
 80066e0:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80066e2:	bb49      	cbnz	r1, 8006738 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80066e4:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d11e      	bne.n	800672a <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 80066ec:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 80066f0:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d90b      	bls.n	8006710 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 80066f8:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 80066fa:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 80066fc:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8006700:	bf8c      	ite	hi
 8006702:	b29a      	uxthhi	r2, r3
 8006704:	b292      	uxthls	r2, r2
 8006706:	4631      	mov	r1, r6
 8006708:	f000 fb03 	bl	8006d12 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800670c:	2000      	movs	r0, #0
}
 800670e:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006710:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	b123      	cbz	r3, 8006722 <USBD_LL_DataOutStage+0x46>
 8006718:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800671c:	2a03      	cmp	r2, #3
 800671e:	d100      	bne.n	8006722 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8006720:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8006722:	4628      	mov	r0, r5
 8006724:	f000 fafd 	bl	8006d22 <USBD_CtlSendStatus>
 8006728:	e7f0      	b.n	800670c <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800672a:	2b05      	cmp	r3, #5
 800672c:	d1ee      	bne.n	800670c <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 800672e:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006732:	f000 fcb9 	bl	80070a8 <USBD_LL_StallEP>
 8006736:	e7e9      	b.n	800670c <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 8006738:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	b12b      	cbz	r3, 800674c <USBD_LL_DataOutStage+0x70>
 8006740:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006744:	2a03      	cmp	r2, #3
 8006746:	d101      	bne.n	800674c <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8006748:	4798      	blx	r3
 800674a:	e7df      	b.n	800670c <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 800674c:	2002      	movs	r0, #2
 800674e:	e7de      	b.n	800670e <USBD_LL_DataOutStage+0x32>

08006750 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006750:	b570      	push	{r4, r5, r6, lr}
 8006752:	4613      	mov	r3, r2
 8006754:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006756:	460e      	mov	r6, r1
 8006758:	2900      	cmp	r1, #0
 800675a:	d147      	bne.n	80067ec <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800675c:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8006760:	2a02      	cmp	r2, #2
 8006762:	d13c      	bne.n	80067de <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8006764:	e9d0 5208 	ldrd	r5, r2, [r0, #32]
 8006768:	4295      	cmp	r5, r2
 800676a:	d913      	bls.n	8006794 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 800676c:	1aaa      	subs	r2, r5, r2
 800676e:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006770:	4619      	mov	r1, r3
 8006772:	b292      	uxth	r2, r2
 8006774:	f000 fab6 	bl	8006ce4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006778:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800677a:	461a      	mov	r2, r3
 800677c:	4619      	mov	r1, r3
 800677e:	4620      	mov	r0, r4
 8006780:	f000 fcda 	bl	8007138 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006784:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8006788:	2000      	movs	r0, #0
 800678a:	2b01      	cmp	r3, #1
 800678c:	d101      	bne.n	8006792 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800678e:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8006792:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006794:	69c3      	ldr	r3, [r0, #28]
 8006796:	fbb3 f5f2 	udiv	r5, r3, r2
 800679a:	fb02 3515 	mls	r5, r2, r5, r3
 800679e:	b965      	cbnz	r5, 80067ba <USBD_LL_DataInStage+0x6a>
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d80a      	bhi.n	80067ba <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 80067a4:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d206      	bcs.n	80067ba <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80067ac:	462a      	mov	r2, r5
 80067ae:	f000 fa99 	bl	8006ce4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80067b2:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067b6:	462b      	mov	r3, r5
 80067b8:	e7df      	b.n	800677a <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80067ba:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	b12b      	cbz	r3, 80067ce <USBD_LL_DataInStage+0x7e>
 80067c2:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80067c6:	2a03      	cmp	r2, #3
 80067c8:	d101      	bne.n	80067ce <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 80067ca:	4620      	mov	r0, r4
 80067cc:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80067ce:	2180      	movs	r1, #128	; 0x80
 80067d0:	4620      	mov	r0, r4
 80067d2:	f000 fc69 	bl	80070a8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80067d6:	4620      	mov	r0, r4
 80067d8:	f000 faae 	bl	8006d38 <USBD_CtlReceiveStatus>
 80067dc:	e7d2      	b.n	8006784 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80067de:	f032 0304 	bics.w	r3, r2, #4
 80067e2:	d1cf      	bne.n	8006784 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80067e4:	2180      	movs	r1, #128	; 0x80
 80067e6:	f000 fc5f 	bl	80070a8 <USBD_LL_StallEP>
 80067ea:	e7cb      	b.n	8006784 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 80067ec:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	b133      	cbz	r3, 8006802 <USBD_LL_DataInStage+0xb2>
 80067f4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80067f8:	2a03      	cmp	r2, #3
 80067fa:	d102      	bne.n	8006802 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 80067fc:	4798      	blx	r3
  return USBD_OK;
 80067fe:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8006800:	e7c7      	b.n	8006792 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8006802:	2002      	movs	r0, #2
 8006804:	e7c5      	b.n	8006792 <USBD_LL_DataInStage+0x42>

08006806 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006806:	2200      	movs	r2, #0
{
 8006808:	b570      	push	{r4, r5, r6, lr}
 800680a:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800680c:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800680e:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006810:	4611      	mov	r1, r2
 8006812:	2340      	movs	r3, #64	; 0x40
 8006814:	f000 fc2a 	bl	800706c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006818:	4633      	mov	r3, r6
 800681a:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800681c:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006820:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006824:	2200      	movs	r2, #0
 8006826:	4620      	mov	r0, r4
 8006828:	f000 fc20 	bl	800706c <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800682c:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800682e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006832:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006834:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006836:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800683a:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 800683e:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8006840:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8006844:	b123      	cbz	r3, 8006850 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006846:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800684a:	4620      	mov	r0, r4
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	4798      	blx	r3
  }

  return USBD_OK;
}
 8006850:	2000      	movs	r0, #0
 8006852:	bd70      	pop	{r4, r5, r6, pc}

08006854 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8006854:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8006856:	2000      	movs	r0, #0
 8006858:	4770      	bx	lr

0800685a <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800685a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800685e:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006862:	2304      	movs	r3, #4
 8006864:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8006868:	2000      	movs	r0, #0
 800686a:	4770      	bx	lr

0800686c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800686c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006870:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8006872:	bf04      	itt	eq
 8006874:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8006878:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800687c:	2000      	movs	r0, #0
 800687e:	4770      	bx	lr

08006880 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006880:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006882:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006886:	2a03      	cmp	r2, #3
 8006888:	d104      	bne.n	8006894 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 800688a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	b103      	cbz	r3, 8006894 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8006892:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8006894:	2000      	movs	r0, #0
 8006896:	bd08      	pop	{r3, pc}

08006898 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8006898:	b510      	push	{r4, lr}
 800689a:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 800689c:	2180      	movs	r1, #128	; 0x80
 800689e:	f000 fc03 	bl	80070a8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80068a2:	4620      	mov	r0, r4
}
 80068a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80068a8:	2100      	movs	r1, #0
 80068aa:	f000 bbfd 	b.w	80070a8 <USBD_LL_StallEP>
	...

080068b0 <USBD_StdDevReq>:
{
 80068b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068b2:	780b      	ldrb	r3, [r1, #0]
{
 80068b4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068ba:	2b20      	cmp	r3, #32
{
 80068bc:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068be:	d012      	beq.n	80068e6 <USBD_StdDevReq+0x36>
 80068c0:	2b40      	cmp	r3, #64	; 0x40
 80068c2:	d010      	beq.n	80068e6 <USBD_StdDevReq+0x36>
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d15b      	bne.n	8006980 <USBD_StdDevReq+0xd0>
      switch (req->bRequest)
 80068c8:	784b      	ldrb	r3, [r1, #1]
 80068ca:	2b09      	cmp	r3, #9
 80068cc:	d858      	bhi.n	8006980 <USBD_StdDevReq+0xd0>
 80068ce:	e8df f013 	tbh	[pc, r3, lsl #1]
 80068d2:	00e9      	.short	0x00e9
 80068d4:	00570105 	.word	0x00570105
 80068d8:	005700fe 	.word	0x005700fe
 80068dc:	00130084 	.word	0x00130084
 80068e0:	00d20057 	.word	0x00d20057
 80068e4:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 80068e6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80068ea:	4629      	mov	r1, r5
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	4620      	mov	r0, r4
 80068f0:	4798      	blx	r3
}
 80068f2:	2000      	movs	r0, #0
 80068f4:	b003      	add	sp, #12
 80068f6:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80068fe:	884b      	ldrh	r3, [r1, #2]
 8006900:	0a1a      	lsrs	r2, r3, #8
 8006902:	3a01      	subs	r2, #1
 8006904:	2a06      	cmp	r2, #6
 8006906:	d83b      	bhi.n	8006980 <USBD_StdDevReq+0xd0>
 8006908:	e8df f002 	tbb	[pc, r2]
 800690c:	3a2d2004 	.word	0x3a2d2004
 8006910:	523a      	.short	0x523a
 8006912:	5c          	.byte	0x5c
 8006913:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006914:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006918:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800691a:	f10d 0106 	add.w	r1, sp, #6
 800691e:	7c20      	ldrb	r0, [r4, #16]
 8006920:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8006922:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8006926:	b152      	cbz	r2, 800693e <USBD_StdDevReq+0x8e>
 8006928:	88eb      	ldrh	r3, [r5, #6]
 800692a:	b143      	cbz	r3, 800693e <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 800692c:	429a      	cmp	r2, r3
 800692e:	bf28      	it	cs
 8006930:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006932:	4601      	mov	r1, r0
 8006934:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8006936:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800693a:	f000 f9c6 	bl	8006cca <USBD_CtlSendData>
    if (req->wLength == 0U)
 800693e:	88eb      	ldrh	r3, [r5, #6]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1d6      	bne.n	80068f2 <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 8006944:	4620      	mov	r0, r4
 8006946:	f000 f9ec 	bl	8006d22 <USBD_CtlSendStatus>
 800694a:	e7d2      	b.n	80068f2 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800694c:	7c02      	ldrb	r2, [r0, #16]
 800694e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006952:	b932      	cbnz	r2, 8006962 <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006956:	f10d 0006 	add.w	r0, sp, #6
 800695a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800695c:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800695e:	7043      	strb	r3, [r0, #1]
 8006960:	e7df      	b.n	8006922 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	e7f7      	b.n	8006956 <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b05      	cmp	r3, #5
 800696a:	d809      	bhi.n	8006980 <USBD_StdDevReq+0xd0>
 800696c:	e8df f003 	tbb	[pc, r3]
 8006970:	14100c03 	.word	0x14100c03
 8006974:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006976:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800697a:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1cc      	bne.n	800691a <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8006980:	4620      	mov	r0, r4
 8006982:	f7ff ff89 	bl	8006898 <USBD_CtlError.constprop.1>
 8006986:	e7b4      	b.n	80068f2 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006988:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	e7f5      	b.n	800697c <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006990:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	e7f1      	b.n	800697c <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006998:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	e7ed      	b.n	800697c <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80069a0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	e7e9      	b.n	800697c <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80069a8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	e7e5      	b.n	800697c <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069b0:	7c03      	ldrb	r3, [r0, #16]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1e4      	bne.n	8006980 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80069b6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80069ba:	f10d 0006 	add.w	r0, sp, #6
 80069be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c0:	4798      	blx	r3
 80069c2:	e7ae      	b.n	8006922 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069c4:	7c03      	ldrb	r3, [r0, #16]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1da      	bne.n	8006980 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80069ca:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80069ce:	f10d 0006 	add.w	r0, sp, #6
 80069d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80069d6:	2307      	movs	r3, #7
 80069d8:	e7c1      	b.n	800695e <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80069da:	888b      	ldrh	r3, [r1, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1cf      	bne.n	8006980 <USBD_StdDevReq+0xd0>
 80069e0:	88cb      	ldrh	r3, [r1, #6]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1cc      	bne.n	8006980 <USBD_StdDevReq+0xd0>
 80069e6:	884d      	ldrh	r5, [r1, #2]
 80069e8:	2d7f      	cmp	r5, #127	; 0x7f
 80069ea:	d8c9      	bhi.n	8006980 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80069f0:	2b03      	cmp	r3, #3
 80069f2:	d0c5      	beq.n	8006980 <USBD_StdDevReq+0xd0>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80069f4:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 80069f6:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80069fa:	f000 fb81 	bl	8007100 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80069fe:	4620      	mov	r0, r4
 8006a00:	f000 f98f 	bl	8006d22 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8006a04:	b11d      	cbz	r5, 8006a0e <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a06:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006a08:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8006a0c:	e771      	b.n	80068f2 <USBD_StdDevReq+0x42>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e7fa      	b.n	8006a08 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 8006a12:	7889      	ldrb	r1, [r1, #2]
 8006a14:	4d37      	ldr	r5, [pc, #220]	; (8006af4 <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a16:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8006a18:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a1a:	d8b1      	bhi.n	8006980 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8006a1c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d008      	beq.n	8006a36 <USBD_StdDevReq+0x186>
 8006a24:	2b03      	cmp	r3, #3
 8006a26:	d014      	beq.n	8006a52 <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 8006a28:	f7ff ff36 	bl	8006898 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006a2c:	7829      	ldrb	r1, [r5, #0]
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f7ff fe20 	bl	8006674 <USBD_ClrClassConfig>
 8006a34:	e75d      	b.n	80068f2 <USBD_StdDevReq+0x42>
        if (cfgidx)
 8006a36:	2900      	cmp	r1, #0
 8006a38:	d084      	beq.n	8006944 <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 8006a3a:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a3c:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8006a3e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a40:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006a44:	4620      	mov	r0, r4
 8006a46:	f7ff fe0a 	bl	800665e <USBD_SetClassConfig>
 8006a4a:	2802      	cmp	r0, #2
 8006a4c:	f47f af7a 	bne.w	8006944 <USBD_StdDevReq+0x94>
 8006a50:	e796      	b.n	8006980 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 8006a52:	b931      	cbnz	r1, 8006a62 <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a54:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8006a56:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a58:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8006a5c:	f7ff fe0a 	bl	8006674 <USBD_ClrClassConfig>
 8006a60:	e770      	b.n	8006944 <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 8006a62:	6841      	ldr	r1, [r0, #4]
 8006a64:	2901      	cmp	r1, #1
 8006a66:	f43f af6d 	beq.w	8006944 <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a6a:	b2c9      	uxtb	r1, r1
 8006a6c:	f7ff fe02 	bl	8006674 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006a70:	7829      	ldrb	r1, [r5, #0]
 8006a72:	6061      	str	r1, [r4, #4]
 8006a74:	e7e6      	b.n	8006a44 <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 8006a76:	88ca      	ldrh	r2, [r1, #6]
 8006a78:	2a01      	cmp	r2, #1
 8006a7a:	d181      	bne.n	8006980 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8006a7c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f43f af7d 	beq.w	8006980 <USBD_StdDevReq+0xd0>
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d904      	bls.n	8006a94 <USBD_StdDevReq+0x1e4>
 8006a8a:	2b03      	cmp	r3, #3
 8006a8c:	f47f af78 	bne.w	8006980 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006a90:	1d01      	adds	r1, r0, #4
 8006a92:	e003      	b.n	8006a9c <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 8006a94:	4601      	mov	r1, r0
 8006a96:	2300      	movs	r3, #0
 8006a98:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	f000 f914 	bl	8006cca <USBD_CtlSendData>
 8006aa2:	e726      	b.n	80068f2 <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 8006aa4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	f63f af68 	bhi.w	8006980 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 8006ab0:	88cb      	ldrh	r3, [r1, #6]
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	f47f af64 	bne.w	8006980 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8006abc:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8006ac0:	b10b      	cbz	r3, 8006ac6 <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	f104 010c 	add.w	r1, r4, #12
 8006acc:	e7e6      	b.n	8006a9c <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ace:	884b      	ldrh	r3, [r1, #2]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	f47f af0e 	bne.w	80068f2 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8006ad6:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8006ada:	e733      	b.n	8006944 <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 8006adc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	f63f af4c 	bhi.w	8006980 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ae8:	884b      	ldrh	r3, [r1, #2]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	f47f af01 	bne.w	80068f2 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	e7f0      	b.n	8006ad6 <USBD_StdDevReq+0x226>
 8006af4:	200003c4 	.word	0x200003c4

08006af8 <USBD_StdItfReq>:
{
 8006af8:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006afa:	780b      	ldrb	r3, [r1, #0]
{
 8006afc:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006afe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b02:	2b20      	cmp	r3, #32
{
 8006b04:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b06:	d002      	beq.n	8006b0e <USBD_StdItfReq+0x16>
 8006b08:	2b40      	cmp	r3, #64	; 0x40
 8006b0a:	d000      	beq.n	8006b0e <USBD_StdItfReq+0x16>
 8006b0c:	b9ab      	cbnz	r3, 8006b3a <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 8006b0e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8006b12:	3b01      	subs	r3, #1
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d810      	bhi.n	8006b3a <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b18:	792b      	ldrb	r3, [r5, #4]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d80d      	bhi.n	8006b3a <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b1e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8006b22:	4629      	mov	r1, r5
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	4620      	mov	r0, r4
 8006b28:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b2a:	88eb      	ldrh	r3, [r5, #6]
 8006b2c:	b91b      	cbnz	r3, 8006b36 <USBD_StdItfReq+0x3e>
 8006b2e:	b910      	cbnz	r0, 8006b36 <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8006b30:	4620      	mov	r0, r4
 8006b32:	f000 f8f6 	bl	8006d22 <USBD_CtlSendStatus>
}
 8006b36:	2000      	movs	r0, #0
 8006b38:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	f7ff feac 	bl	8006898 <USBD_CtlError.constprop.1>
          break;
 8006b40:	e7f9      	b.n	8006b36 <USBD_StdItfReq+0x3e>

08006b42 <USBD_StdEPReq>:
{
 8006b42:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b44:	780a      	ldrb	r2, [r1, #0]
{
 8006b46:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b48:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8006b4c:	2a20      	cmp	r2, #32
{
 8006b4e:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b50:	d014      	beq.n	8006b7c <USBD_StdEPReq+0x3a>
 8006b52:	2a40      	cmp	r2, #64	; 0x40
 8006b54:	d012      	beq.n	8006b7c <USBD_StdEPReq+0x3a>
 8006b56:	b96a      	cbnz	r2, 8006b74 <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 8006b58:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8006b5a:	888d      	ldrh	r5, [r1, #4]
      switch (req->bRequest)
 8006b5c:	2a01      	cmp	r2, #1
  ep_addr  = LOBYTE(req->wIndex);
 8006b5e:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8006b60:	d020      	beq.n	8006ba4 <USBD_StdEPReq+0x62>
 8006b62:	d336      	bcc.n	8006bd2 <USBD_StdEPReq+0x90>
 8006b64:	2a03      	cmp	r2, #3
 8006b66:	d105      	bne.n	8006b74 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8006b68:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006b6c:	2a02      	cmp	r2, #2
 8006b6e:	d027      	beq.n	8006bc0 <USBD_StdEPReq+0x7e>
 8006b70:	2a03      	cmp	r2, #3
 8006b72:	d00b      	beq.n	8006b8c <USBD_StdEPReq+0x4a>
              USBD_CtlError(pdev, req);
 8006b74:	4620      	mov	r0, r4
 8006b76:	f7ff fe8f 	bl	8006898 <USBD_CtlError.constprop.1>
              break;
 8006b7a:	e005      	b.n	8006b88 <USBD_StdEPReq+0x46>
      pdev->pClass->Setup(pdev, req);
 8006b7c:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8006b80:	4619      	mov	r1, r3
 8006b82:	6892      	ldr	r2, [r2, #8]
 8006b84:	4620      	mov	r0, r4
 8006b86:	4790      	blx	r2
}
 8006b88:	2000      	movs	r0, #0
 8006b8a:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b8c:	885a      	ldrh	r2, [r3, #2]
 8006b8e:	b92a      	cbnz	r2, 8006b9c <USBD_StdEPReq+0x5a>
                if ((ep_addr != 0x00U) &&
 8006b90:	064a      	lsls	r2, r1, #25
 8006b92:	d003      	beq.n	8006b9c <USBD_StdEPReq+0x5a>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b94:	88db      	ldrh	r3, [r3, #6]
 8006b96:	b90b      	cbnz	r3, 8006b9c <USBD_StdEPReq+0x5a>
                  USBD_LL_StallEP(pdev, ep_addr);
 8006b98:	f000 fa86 	bl	80070a8 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f000 f8c0 	bl	8006d22 <USBD_CtlSendStatus>
              break;
 8006ba2:	e7f1      	b.n	8006b88 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 8006ba4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006ba8:	2a02      	cmp	r2, #2
 8006baa:	d009      	beq.n	8006bc0 <USBD_StdEPReq+0x7e>
 8006bac:	2a03      	cmp	r2, #3
 8006bae:	d1e1      	bne.n	8006b74 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006bb0:	885b      	ldrh	r3, [r3, #2]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e8      	bne.n	8006b88 <USBD_StdEPReq+0x46>
                if ((ep_addr & 0x7FU) != 0x00U)
 8006bb6:	064d      	lsls	r5, r1, #25
 8006bb8:	d0f0      	beq.n	8006b9c <USBD_StdEPReq+0x5a>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006bba:	f000 fa83 	bl	80070c4 <USBD_LL_ClearStallEP>
 8006bbe:	e7ed      	b.n	8006b9c <USBD_StdEPReq+0x5a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bc0:	064b      	lsls	r3, r1, #25
 8006bc2:	d0d7      	beq.n	8006b74 <USBD_StdEPReq+0x32>
                USBD_LL_StallEP(pdev, ep_addr);
 8006bc4:	f000 fa70 	bl	80070a8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006bc8:	2180      	movs	r1, #128	; 0x80
 8006bca:	4620      	mov	r0, r4
 8006bcc:	f000 fa6c 	bl	80070a8 <USBD_LL_StallEP>
 8006bd0:	e7da      	b.n	8006b88 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 8006bd2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d018      	beq.n	8006c0c <USBD_StdEPReq+0xca>
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d1ca      	bne.n	8006b74 <USBD_StdEPReq+0x32>
 8006bde:	2314      	movs	r3, #20
 8006be0:	f001 020f 	and.w	r2, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8006be4:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006be8:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8006bec:	d01f      	beq.n	8006c2e <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006bee:	6992      	ldr	r2, [r2, #24]
 8006bf0:	2a00      	cmp	r2, #0
 8006bf2:	d0bf      	beq.n	8006b74 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bf4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8006bf8:	fb05 3503 	mla	r5, r5, r3, r3
 8006bfc:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006bfe:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8006c02:	d11f      	bne.n	8006c44 <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 8006c04:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c06:	2202      	movs	r2, #2
 8006c08:	4629      	mov	r1, r5
 8006c0a:	e00c      	b.n	8006c26 <USBD_StdEPReq+0xe4>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c0c:	064a      	lsls	r2, r1, #25
 8006c0e:	d1b1      	bne.n	8006b74 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c10:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8006c12:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c16:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c1a:	bf4c      	ite	mi
 8006c1c:	f100 0114 	addmi.w	r1, r0, #20
 8006c20:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8006c24:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c26:	4620      	mov	r0, r4
 8006c28:	f000 f84f 	bl	8006cca <USBD_CtlSendData>
              break;
 8006c2c:	e7ac      	b.n	8006b88 <USBD_StdEPReq+0x46>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c2e:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 8006c32:	2a00      	cmp	r2, #0
 8006c34:	d09e      	beq.n	8006b74 <USBD_StdEPReq+0x32>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c36:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c3a:	fb03 0505 	mla	r5, r3, r5, r0
 8006c3e:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8006c42:	e7dc      	b.n	8006bfe <USBD_StdEPReq+0xbc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006c44:	4620      	mov	r0, r4
 8006c46:	f000 fa4b 	bl	80070e0 <USBD_LL_IsStallEP>
 8006c4a:	b108      	cbz	r0, 8006c50 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e7d9      	b.n	8006c04 <USBD_StdEPReq+0xc2>
                pep->status = 0x0000U;
 8006c50:	6028      	str	r0, [r5, #0]
 8006c52:	e7d8      	b.n	8006c06 <USBD_StdEPReq+0xc4>

08006c54 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8006c54:	780b      	ldrb	r3, [r1, #0]
 8006c56:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006c58:	784b      	ldrb	r3, [r1, #1]
 8006c5a:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006c5c:	78ca      	ldrb	r2, [r1, #3]
 8006c5e:	788b      	ldrb	r3, [r1, #2]
 8006c60:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006c64:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006c66:	794a      	ldrb	r2, [r1, #5]
 8006c68:	790b      	ldrb	r3, [r1, #4]
 8006c6a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006c6e:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006c70:	79ca      	ldrb	r2, [r1, #7]
 8006c72:	798b      	ldrb	r3, [r1, #6]
 8006c74:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006c78:	80c3      	strh	r3, [r0, #6]
}
 8006c7a:	4770      	bx	lr

08006c7c <USBD_CtlError>:
{
 8006c7c:	b510      	push	{r4, lr}
 8006c7e:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8006c80:	2180      	movs	r1, #128	; 0x80
 8006c82:	f000 fa11 	bl	80070a8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006c86:	4620      	mov	r0, r4
}
 8006c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	f000 ba0b 	b.w	80070a8 <USBD_LL_StallEP>

08006c92 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c92:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8006c94:	b188      	cbz	r0, 8006cba <USBD_GetString+0x28>
 8006c96:	4605      	mov	r5, r0
 8006c98:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8006c9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2c00      	cmp	r4, #0
 8006ca2:	d1f9      	bne.n	8006c98 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	005b      	lsls	r3, r3, #1
 8006ca8:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006caa:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006cac:	2303      	movs	r3, #3
 8006cae:	704b      	strb	r3, [r1, #1]
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	3801      	subs	r0, #1
    while (*desc != '\0')
 8006cb4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006cb8:	b905      	cbnz	r5, 8006cbc <USBD_GetString+0x2a>
}
 8006cba:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8006cbc:	1c5a      	adds	r2, r3, #1
 8006cbe:	54cd      	strb	r5, [r1, r3]
 8006cc0:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8006cc2:	3302      	adds	r3, #2
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	548c      	strb	r4, [r1, r2]
 8006cc8:	e7f4      	b.n	8006cb4 <USBD_GetString+0x22>

08006cca <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006cca:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006ccc:	2202      	movs	r2, #2
{
 8006cce:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006cd0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8006cd4:	e9c0 3307 	strd	r3, r3, [r0, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cd8:	460a      	mov	r2, r1
 8006cda:	2100      	movs	r1, #0
 8006cdc:	f000 fa1e 	bl	800711c <USBD_LL_Transmit>

  return USBD_OK;
}
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	bd10      	pop	{r4, pc}

08006ce4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006ce4:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	460a      	mov	r2, r1
 8006cea:	2100      	movs	r1, #0
 8006cec:	f000 fa16 	bl	800711c <USBD_LL_Transmit>

  return USBD_OK;
}
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	bd08      	pop	{r3, pc}

08006cf4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006cf4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006cf6:	2203      	movs	r2, #3
{
 8006cf8:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006cfa:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006cfe:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d02:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8006d04:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d08:	2100      	movs	r1, #0
 8006d0a:	f000 fa15 	bl	8007138 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006d0e:	2000      	movs	r0, #0
 8006d10:	bd10      	pop	{r4, pc}

08006d12 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006d12:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d14:	4613      	mov	r3, r2
 8006d16:	460a      	mov	r2, r1
 8006d18:	2100      	movs	r1, #0
 8006d1a:	f000 fa0d 	bl	8007138 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006d1e:	2000      	movs	r0, #0
 8006d20:	bd08      	pop	{r3, pc}

08006d22 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d22:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d24:	2304      	movs	r3, #4
 8006d26:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	4619      	mov	r1, r3
 8006d30:	f000 f9f4 	bl	800711c <USBD_LL_Transmit>

  return USBD_OK;
}
 8006d34:	2000      	movs	r0, #0
 8006d36:	bd08      	pop	{r3, pc}

08006d38 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d38:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d3a:	2305      	movs	r3, #5
 8006d3c:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d40:	2300      	movs	r3, #0
 8006d42:	461a      	mov	r2, r3
 8006d44:	4619      	mov	r1, r3
 8006d46:	f000 f9f7 	bl	8007138 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	bd08      	pop	{r3, pc}
	...

08006d50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d52:	2200      	movs	r2, #0
 8006d54:	490e      	ldr	r1, [pc, #56]	; (8006d90 <MX_USB_DEVICE_Init+0x40>)
 8006d56:	480f      	ldr	r0, [pc, #60]	; (8006d94 <MX_USB_DEVICE_Init+0x44>)
 8006d58:	f7ff fc60 	bl	800661c <USBD_Init>
 8006d5c:	b108      	cbz	r0, 8006d62 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8006d5e:	f7fb f93b 	bl	8001fd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006d62:	490d      	ldr	r1, [pc, #52]	; (8006d98 <MX_USB_DEVICE_Init+0x48>)
 8006d64:	480b      	ldr	r0, [pc, #44]	; (8006d94 <MX_USB_DEVICE_Init+0x44>)
 8006d66:	f7ff fc6e 	bl	8006646 <USBD_RegisterClass>
 8006d6a:	b108      	cbz	r0, 8006d70 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8006d6c:	f7fb f934 	bl	8001fd8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006d70:	490a      	ldr	r1, [pc, #40]	; (8006d9c <MX_USB_DEVICE_Init+0x4c>)
 8006d72:	4808      	ldr	r0, [pc, #32]	; (8006d94 <MX_USB_DEVICE_Init+0x44>)
 8006d74:	f7ff fc11 	bl	800659a <USBD_CDC_RegisterInterface>
 8006d78:	b108      	cbz	r0, 8006d7e <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8006d7a:	f7fb f92d 	bl	8001fd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006d7e:	4805      	ldr	r0, [pc, #20]	; (8006d94 <MX_USB_DEVICE_Init+0x44>)
 8006d80:	f7ff fc68 	bl	8006654 <USBD_Start>
 8006d84:	b118      	cbz	r0, 8006d8e <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006d86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006d8a:	f7fb b925 	b.w	8001fd8 <Error_Handler>
}
 8006d8e:	bd08      	pop	{r3, pc}
 8006d90:	20000164 	.word	0x20000164
 8006d94:	2000390c 	.word	0x2000390c
 8006d98:	20000044 	.word	0x20000044
 8006d9c:	20000154 	.word	0x20000154

08006da0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8006da0:	2000      	movs	r0, #0
 8006da2:	4770      	bx	lr

08006da4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8006da4:	2000      	movs	r0, #0
 8006da6:	4770      	bx	lr

08006da8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006da8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006daa:	4c05      	ldr	r4, [pc, #20]	; (8006dc0 <CDC_Receive_FS+0x18>)
 8006dac:	4601      	mov	r1, r0
 8006dae:	4620      	mov	r0, r4
 8006db0:	f7ff fc02 	bl	80065b8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006db4:	4620      	mov	r0, r4
 8006db6:	f7ff fc1e 	bl	80065f6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8006dba:	2000      	movs	r0, #0
 8006dbc:	bd10      	pop	{r4, pc}
 8006dbe:	bf00      	nop
 8006dc0:	2000390c 	.word	0x2000390c

08006dc4 <CDC_Init_FS>:
{
 8006dc4:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006dc6:	4c06      	ldr	r4, [pc, #24]	; (8006de0 <CDC_Init_FS+0x1c>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	4906      	ldr	r1, [pc, #24]	; (8006de4 <CDC_Init_FS+0x20>)
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f7ff fbeb 	bl	80065a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006dd2:	4905      	ldr	r1, [pc, #20]	; (8006de8 <CDC_Init_FS+0x24>)
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f7ff fbef 	bl	80065b8 <USBD_CDC_SetRxBuffer>
}
 8006dda:	2000      	movs	r0, #0
 8006ddc:	bd10      	pop	{r4, pc}
 8006dde:	bf00      	nop
 8006de0:	2000390c 	.word	0x2000390c
 8006de4:	20003fb8 	.word	0x20003fb8
 8006de8:	20003bd0 	.word	0x20003bd0

08006dec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006dec:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006dee:	4c09      	ldr	r4, [pc, #36]	; (8006e14 <CDC_Transmit_FS+0x28>)
{
 8006df0:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006df2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 8006df6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006dfa:	b943      	cbnz	r3, 8006e0e <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006dfc:	4601      	mov	r1, r0
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f7ff fbd2 	bl	80065a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006e04:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8006e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006e0a:	f7ff bbdb 	b.w	80065c4 <USBD_CDC_TransmitPacket>
}
 8006e0e:	2001      	movs	r0, #1
 8006e10:	bd10      	pop	{r4, pc}
 8006e12:	bf00      	nop
 8006e14:	2000390c 	.word	0x2000390c

08006e18 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006e18:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8006e1a:	4801      	ldr	r0, [pc, #4]	; (8006e20 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8006e1c:	800b      	strh	r3, [r1, #0]
}
 8006e1e:	4770      	bx	lr
 8006e20:	20000180 	.word	0x20000180

08006e24 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006e24:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8006e26:	4801      	ldr	r0, [pc, #4]	; (8006e2c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8006e28:	800b      	strh	r3, [r1, #0]
}
 8006e2a:	4770      	bx	lr
 8006e2c:	20000194 	.word	0x20000194

08006e30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006e30:	2300      	movs	r3, #0
 8006e32:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8006e34:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 8006e36:	0f05      	lsrs	r5, r0, #28
 8006e38:	b2ec      	uxtb	r4, r5
 8006e3a:	2d09      	cmp	r5, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8006e3c:	bf94      	ite	ls
 8006e3e:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006e40:	3437      	addhi	r4, #55	; 0x37
 8006e42:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8006e46:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	7066      	strb	r6, [r4, #1]
  for (idx = 0; idx < len; idx++)
 8006e4e:	b2dc      	uxtb	r4, r3
 8006e50:	42a2      	cmp	r2, r4
    value = value << 4;
 8006e52:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8006e56:	d8ee      	bhi.n	8006e36 <IntToUnicode+0x6>
  }
}
 8006e58:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e5c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8006e5c:	231a      	movs	r3, #26
{
 8006e5e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8006e60:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e62:	4b09      	ldr	r3, [pc, #36]	; (8006e88 <USBD_FS_SerialStrDescriptor+0x2c>)
 8006e64:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e66:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8006e68:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8006e6a:	18c0      	adds	r0, r0, r3
 8006e6c:	d00a      	beq.n	8006e84 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e6e:	4b07      	ldr	r3, [pc, #28]	; (8006e8c <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006e70:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e72:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006e74:	4906      	ldr	r1, [pc, #24]	; (8006e90 <USBD_FS_SerialStrDescriptor+0x34>)
 8006e76:	f7ff ffdb 	bl	8006e30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006e7a:	2204      	movs	r2, #4
 8006e7c:	4905      	ldr	r1, [pc, #20]	; (8006e94 <USBD_FS_SerialStrDescriptor+0x38>)
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f7ff ffd6 	bl	8006e30 <IntToUnicode>
}
 8006e84:	4804      	ldr	r0, [pc, #16]	; (8006e98 <USBD_FS_SerialStrDescriptor+0x3c>)
 8006e86:	bd10      	pop	{r4, pc}
 8006e88:	1ffff7e8 	.word	0x1ffff7e8
 8006e8c:	1ffff7ec 	.word	0x1ffff7ec
 8006e90:	2000019a 	.word	0x2000019a
 8006e94:	200001aa 	.word	0x200001aa
 8006e98:	20000198 	.word	0x20000198

08006e9c <USBD_FS_ManufacturerStrDescriptor>:
{
 8006e9c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e9e:	4c04      	ldr	r4, [pc, #16]	; (8006eb0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8006ea0:	460a      	mov	r2, r1
 8006ea2:	4804      	ldr	r0, [pc, #16]	; (8006eb4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8006ea4:	4621      	mov	r1, r4
 8006ea6:	f7ff fef4 	bl	8006c92 <USBD_GetString>
}
 8006eaa:	4620      	mov	r0, r4
 8006eac:	bd10      	pop	{r4, pc}
 8006eae:	bf00      	nop
 8006eb0:	200043a0 	.word	0x200043a0
 8006eb4:	0800aa8d 	.word	0x0800aa8d

08006eb8 <USBD_FS_ProductStrDescriptor>:
{
 8006eb8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006eba:	4c04      	ldr	r4, [pc, #16]	; (8006ecc <USBD_FS_ProductStrDescriptor+0x14>)
 8006ebc:	460a      	mov	r2, r1
 8006ebe:	4804      	ldr	r0, [pc, #16]	; (8006ed0 <USBD_FS_ProductStrDescriptor+0x18>)
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	f7ff fee6 	bl	8006c92 <USBD_GetString>
}
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	bd10      	pop	{r4, pc}
 8006eca:	bf00      	nop
 8006ecc:	200043a0 	.word	0x200043a0
 8006ed0:	0800aaa0 	.word	0x0800aaa0

08006ed4 <USBD_FS_ConfigStrDescriptor>:
{
 8006ed4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006ed6:	4c04      	ldr	r4, [pc, #16]	; (8006ee8 <USBD_FS_ConfigStrDescriptor+0x14>)
 8006ed8:	460a      	mov	r2, r1
 8006eda:	4804      	ldr	r0, [pc, #16]	; (8006eec <USBD_FS_ConfigStrDescriptor+0x18>)
 8006edc:	4621      	mov	r1, r4
 8006ede:	f7ff fed8 	bl	8006c92 <USBD_GetString>
}
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	bd10      	pop	{r4, pc}
 8006ee6:	bf00      	nop
 8006ee8:	200043a0 	.word	0x200043a0
 8006eec:	0800aa74 	.word	0x0800aa74

08006ef0 <USBD_FS_InterfaceStrDescriptor>:
{
 8006ef0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ef2:	4c04      	ldr	r4, [pc, #16]	; (8006f04 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8006ef4:	460a      	mov	r2, r1
 8006ef6:	4804      	ldr	r0, [pc, #16]	; (8006f08 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8006ef8:	4621      	mov	r1, r4
 8006efa:	f7ff feca 	bl	8006c92 <USBD_GetString>
}
 8006efe:	4620      	mov	r0, r4
 8006f00:	bd10      	pop	{r4, pc}
 8006f02:	bf00      	nop
 8006f04:	200043a0 	.word	0x200043a0
 8006f08:	0800aa7f 	.word	0x0800aa7f

08006f0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006f0c:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8006f0e:	4b0e      	ldr	r3, [pc, #56]	; (8006f48 <HAL_PCD_MspInit+0x3c>)
 8006f10:	6802      	ldr	r2, [r0, #0]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d115      	bne.n	8006f42 <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006f16:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8006f1a:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006f1c:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8006f1e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006f22:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006f24:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8006f26:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006f28:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8006f2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f2e:	9301      	str	r3, [sp, #4]
 8006f30:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006f32:	f7fc fe45 	bl	8003bc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006f36:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006f38:	b003      	add	sp, #12
 8006f3a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006f3e:	f7fc be73 	b.w	8003c28 <HAL_NVIC_EnableIRQ>
}
 8006f42:	b003      	add	sp, #12
 8006f44:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f48:	40005c00 	.word	0x40005c00

08006f4c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006f4c:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8006f50:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8006f54:	f7ff bb95 	b.w	8006682 <USBD_LL_SetupStage>

08006f58 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006f58:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8006f5c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8006f60:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8006f64:	f7ff bbba 	b.w	80066dc <USBD_LL_DataOutStage>

08006f68 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006f68:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8006f6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f6e:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8006f72:	f7ff bbed 	b.w	8006750 <USBD_LL_DataInStage>

08006f76 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006f76:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8006f7a:	f7ff bc81 	b.w	8006880 <USBD_LL_SOF>

08006f7e <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006f7e:	6883      	ldr	r3, [r0, #8]
{ 
 8006f80:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006f82:	2b02      	cmp	r3, #2
{ 
 8006f84:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006f86:	d001      	beq.n	8006f8c <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8006f88:	f7fb f826 	bl	8001fd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006f8c:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 8006f90:	2101      	movs	r1, #1
 8006f92:	f7ff fc5f 	bl	8006854 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006f96:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 8006f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006f9e:	f7ff bc32 	b.w	8006806 <USBD_LL_Reset>
	...

08006fa4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fa4:	b510      	push	{r4, lr}
 8006fa6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006fa8:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8006fac:	f7ff fc55 	bl	800685a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006fb0:	69a3      	ldr	r3, [r4, #24]
 8006fb2:	b123      	cbz	r3, 8006fbe <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006fb4:	4a02      	ldr	r2, [pc, #8]	; (8006fc0 <HAL_PCD_SuspendCallback+0x1c>)
 8006fb6:	6913      	ldr	r3, [r2, #16]
 8006fb8:	f043 0306 	orr.w	r3, r3, #6
 8006fbc:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006fbe:	bd10      	pop	{r4, pc}
 8006fc0:	e000ed00 	.word	0xe000ed00

08006fc4 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006fc4:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8006fc8:	f7ff bc50 	b.w	800686c <USBD_LL_Resume>

08006fcc <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006fcc:	2308      	movs	r3, #8
{
 8006fce:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006fd0:	4a1d      	ldr	r2, [pc, #116]	; (8007048 <USBD_LL_Init+0x7c>)
{
 8006fd2:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8006fd4:	481d      	ldr	r0, [pc, #116]	; (800704c <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006fd6:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006fda:	2302      	movs	r3, #2
 8006fdc:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006fde:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 8006fe0:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.pData = pdev;
 8006fe4:	f8c0 4268 	str.w	r4, [r0, #616]	; 0x268
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006fe8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006fec:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006fee:	f7fd fc37 	bl	8004860 <HAL_PCD_Init>
 8006ff2:	b108      	cbz	r0, 8006ff8 <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 8006ff4:	f7fa fff0 	bl	8001fd8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	2318      	movs	r3, #24
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8007002:	f7fd ffdc 	bl	8004fbe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007006:	2358      	movs	r3, #88	; 0x58
 8007008:	2200      	movs	r2, #0
 800700a:	2180      	movs	r1, #128	; 0x80
 800700c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8007010:	f7fd ffd5 	bl	8004fbe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007014:	23c0      	movs	r3, #192	; 0xc0
 8007016:	2200      	movs	r2, #0
 8007018:	2181      	movs	r1, #129	; 0x81
 800701a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800701e:	f7fd ffce 	bl	8004fbe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007022:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007026:	2200      	movs	r2, #0
 8007028:	2101      	movs	r1, #1
 800702a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800702e:	f7fd ffc6 	bl	8004fbe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007032:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007036:	2200      	movs	r2, #0
 8007038:	2182      	movs	r1, #130	; 0x82
 800703a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800703e:	f7fd ffbe 	bl	8004fbe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8007042:	2000      	movs	r0, #0
 8007044:	bd10      	pop	{r4, pc}
 8007046:	bf00      	nop
 8007048:	40005c00 	.word	0x40005c00
 800704c:	200045a0 	.word	0x200045a0

08007050 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007050:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007052:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007056:	f7fd fc78 	bl	800494a <HAL_PCD_Start>
 800705a:	2803      	cmp	r0, #3
 800705c:	bf96      	itet	ls
 800705e:	4b02      	ldrls	r3, [pc, #8]	; (8007068 <USBD_LL_Start+0x18>)
 8007060:	2002      	movhi	r0, #2
 8007062:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8007064:	bd08      	pop	{r3, pc}
 8007066:	bf00      	nop
 8007068:	0800aaac 	.word	0x0800aaac

0800706c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800706c:	b510      	push	{r4, lr}
 800706e:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007070:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007074:	4613      	mov	r3, r2
 8007076:	4622      	mov	r2, r4
 8007078:	f7fd fc92 	bl	80049a0 <HAL_PCD_EP_Open>
 800707c:	2803      	cmp	r0, #3
 800707e:	bf96      	itet	ls
 8007080:	4b01      	ldrls	r3, [pc, #4]	; (8007088 <USBD_LL_OpenEP+0x1c>)
 8007082:	2002      	movhi	r0, #2
 8007084:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8007086:	bd10      	pop	{r4, pc}
 8007088:	0800aaac 	.word	0x0800aaac

0800708c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800708c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800708e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007092:	f7fd fcb8 	bl	8004a06 <HAL_PCD_EP_Close>
 8007096:	2803      	cmp	r0, #3
 8007098:	bf96      	itet	ls
 800709a:	4b02      	ldrls	r3, [pc, #8]	; (80070a4 <USBD_LL_CloseEP+0x18>)
 800709c:	2002      	movhi	r0, #2
 800709e:	5c18      	ldrbls	r0, [r3, r0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 80070a0:	bd08      	pop	{r3, pc}
 80070a2:	bf00      	nop
 80070a4:	0800aaac 	.word	0x0800aaac

080070a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070a8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80070aa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80070ae:	f7fd ff1f 	bl	8004ef0 <HAL_PCD_EP_SetStall>
 80070b2:	2803      	cmp	r0, #3
 80070b4:	bf96      	itet	ls
 80070b6:	4b02      	ldrls	r3, [pc, #8]	; (80070c0 <USBD_LL_StallEP+0x18>)
 80070b8:	2002      	movhi	r0, #2
 80070ba:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 80070bc:	bd08      	pop	{r3, pc}
 80070be:	bf00      	nop
 80070c0:	0800aaac 	.word	0x0800aaac

080070c4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070c4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80070c6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80070ca:	f7fd ff45 	bl	8004f58 <HAL_PCD_EP_ClrStall>
 80070ce:	2803      	cmp	r0, #3
 80070d0:	bf96      	itet	ls
 80070d2:	4b02      	ldrls	r3, [pc, #8]	; (80070dc <USBD_LL_ClearStallEP+0x18>)
 80070d4:	2002      	movhi	r0, #2
 80070d6:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 80070d8:	bd08      	pop	{r3, pc}
 80070da:	bf00      	nop
 80070dc:	0800aaac 	.word	0x0800aaac

080070e0 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 80070e0:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80070e2:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80070e6:	bf45      	ittet	mi
 80070e8:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 80070ec:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80070f0:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80070f4:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80070f8:	bf58      	it	pl
 80070fa:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
  }
}
 80070fe:	4770      	bx	lr

08007100 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007100:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007102:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007106:	f7fd fc37 	bl	8004978 <HAL_PCD_SetAddress>
 800710a:	2803      	cmp	r0, #3
 800710c:	bf96      	itet	ls
 800710e:	4b02      	ldrls	r3, [pc, #8]	; (8007118 <USBD_LL_SetUSBAddress+0x18>)
 8007110:	2002      	movhi	r0, #2
 8007112:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8007114:	bd08      	pop	{r3, pc}
 8007116:	bf00      	nop
 8007118:	0800aaac 	.word	0x0800aaac

0800711c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800711c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800711e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007122:	f7fd fcb8 	bl	8004a96 <HAL_PCD_EP_Transmit>
 8007126:	2803      	cmp	r0, #3
 8007128:	bf96      	itet	ls
 800712a:	4b02      	ldrls	r3, [pc, #8]	; (8007134 <USBD_LL_Transmit+0x18>)
 800712c:	2002      	movhi	r0, #2
 800712e:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8007130:	bd08      	pop	{r3, pc}
 8007132:	bf00      	nop
 8007134:	0800aaac 	.word	0x0800aaac

08007138 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007138:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800713a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800713e:	f7fd fc8b 	bl	8004a58 <HAL_PCD_EP_Receive>
 8007142:	2803      	cmp	r0, #3
 8007144:	bf96      	itet	ls
 8007146:	4b02      	ldrls	r3, [pc, #8]	; (8007150 <USBD_LL_PrepareReceive+0x18>)
 8007148:	2002      	movhi	r0, #2
 800714a:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 800714c:	bd08      	pop	{r3, pc}
 800714e:	bf00      	nop
 8007150:	0800aaac 	.word	0x0800aaac

08007154 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007154:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007158:	f7fd bc96 	b.w	8004a88 <HAL_PCD_EP_GetRxCount>

0800715c <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 800715c:	4800      	ldr	r0, [pc, #0]	; (8007160 <USBD_static_malloc+0x4>)
 800715e:	4770      	bx	lr
 8007160:	200003c8 	.word	0x200003c8

08007164 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8007164:	4770      	bx	lr

08007166 <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007166:	4770      	bx	lr

08007168 <arm_mat_trans_f32>:
 8007168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716c:	8803      	ldrh	r3, [r0, #0]
 800716e:	884d      	ldrh	r5, [r1, #2]
 8007170:	6847      	ldr	r7, [r0, #4]
 8007172:	429d      	cmp	r5, r3
 8007174:	b083      	sub	sp, #12
 8007176:	8840      	ldrh	r0, [r0, #2]
 8007178:	684a      	ldr	r2, [r1, #4]
 800717a:	d149      	bne.n	8007210 <arm_mat_trans_f32+0xa8>
 800717c:	f8b1 e000 	ldrh.w	lr, [r1]
 8007180:	4586      	cmp	lr, r0
 8007182:	d145      	bne.n	8007210 <arm_mat_trans_f32+0xa8>
 8007184:	4694      	mov	ip, r2
 8007186:	ea4f 089e 	mov.w	r8, lr, lsr #2
 800718a:	00a9      	lsls	r1, r5, #2
 800718c:	fb08 f901 	mul.w	r9, r8, r1
 8007190:	f00e 0e03 	and.w	lr, lr, #3
 8007194:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 8007198:	ea4f 038e 	mov.w	r3, lr, lsl #2
 800719c:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80071a0:	eb02 0a01 	add.w	sl, r2, r1
 80071a4:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 80071a8:	9301      	str	r3, [sp, #4]
 80071aa:	00b6      	lsls	r6, r6, #2
 80071ac:	012d      	lsls	r5, r5, #4
 80071ae:	4663      	mov	r3, ip
 80071b0:	f1b8 0f00 	cmp.w	r8, #0
 80071b4:	d017      	beq.n	80071e6 <arm_mat_trans_f32+0x7e>
 80071b6:	4640      	mov	r0, r8
 80071b8:	f107 0210 	add.w	r2, r7, #16
 80071bc:	f852 4c10 	ldr.w	r4, [r2, #-16]
 80071c0:	3801      	subs	r0, #1
 80071c2:	601c      	str	r4, [r3, #0]
 80071c4:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 80071c8:	f102 0210 	add.w	r2, r2, #16
 80071cc:	505c      	str	r4, [r3, r1]
 80071ce:	f852 4c18 	ldr.w	r4, [r2, #-24]
 80071d2:	f843 4011 	str.w	r4, [r3, r1, lsl #1]
 80071d6:	f852 4c14 	ldr.w	r4, [r2, #-20]
 80071da:	519c      	str	r4, [r3, r6]
 80071dc:	442b      	add	r3, r5
 80071de:	d1ed      	bne.n	80071bc <arm_mat_trans_f32+0x54>
 80071e0:	445f      	add	r7, fp
 80071e2:	eb09 030c 	add.w	r3, r9, ip
 80071e6:	f1be 0f00 	cmp.w	lr, #0
 80071ea:	d009      	beq.n	8007200 <arm_mat_trans_f32+0x98>
 80071ec:	4672      	mov	r2, lr
 80071ee:	4638      	mov	r0, r7
 80071f0:	f850 4b04 	ldr.w	r4, [r0], #4
 80071f4:	3a01      	subs	r2, #1
 80071f6:	601c      	str	r4, [r3, #0]
 80071f8:	440b      	add	r3, r1
 80071fa:	d1f9      	bne.n	80071f0 <arm_mat_trans_f32+0x88>
 80071fc:	9b01      	ldr	r3, [sp, #4]
 80071fe:	441f      	add	r7, r3
 8007200:	f10c 0c04 	add.w	ip, ip, #4
 8007204:	45d4      	cmp	ip, sl
 8007206:	d1d2      	bne.n	80071ae <arm_mat_trans_f32+0x46>
 8007208:	2000      	movs	r0, #0
 800720a:	b003      	add	sp, #12
 800720c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007210:	f06f 0002 	mvn.w	r0, #2
 8007214:	e7f9      	b.n	800720a <arm_mat_trans_f32+0xa2>
 8007216:	bf00      	nop

08007218 <arm_mat_init_f32>:
 8007218:	8001      	strh	r1, [r0, #0]
 800721a:	8042      	strh	r2, [r0, #2]
 800721c:	6043      	str	r3, [r0, #4]
 800721e:	4770      	bx	lr

08007220 <atof>:
 8007220:	2100      	movs	r1, #0
 8007222:	f000 bee9 	b.w	8007ff8 <strtod>

08007226 <atoi>:
 8007226:	220a      	movs	r2, #10
 8007228:	2100      	movs	r1, #0
 800722a:	f000 bf85 	b.w	8008138 <strtol>
	...

08007230 <__errno>:
 8007230:	4b01      	ldr	r3, [pc, #4]	; (8007238 <__errno+0x8>)
 8007232:	6818      	ldr	r0, [r3, #0]
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	200001b4 	.word	0x200001b4

0800723c <__libc_init_array>:
 800723c:	b570      	push	{r4, r5, r6, lr}
 800723e:	2500      	movs	r5, #0
 8007240:	4e0c      	ldr	r6, [pc, #48]	; (8007274 <__libc_init_array+0x38>)
 8007242:	4c0d      	ldr	r4, [pc, #52]	; (8007278 <__libc_init_array+0x3c>)
 8007244:	1ba4      	subs	r4, r4, r6
 8007246:	10a4      	asrs	r4, r4, #2
 8007248:	42a5      	cmp	r5, r4
 800724a:	d109      	bne.n	8007260 <__libc_init_array+0x24>
 800724c:	f002 fd98 	bl	8009d80 <_init>
 8007250:	2500      	movs	r5, #0
 8007252:	4e0a      	ldr	r6, [pc, #40]	; (800727c <__libc_init_array+0x40>)
 8007254:	4c0a      	ldr	r4, [pc, #40]	; (8007280 <__libc_init_array+0x44>)
 8007256:	1ba4      	subs	r4, r4, r6
 8007258:	10a4      	asrs	r4, r4, #2
 800725a:	42a5      	cmp	r5, r4
 800725c:	d105      	bne.n	800726a <__libc_init_array+0x2e>
 800725e:	bd70      	pop	{r4, r5, r6, pc}
 8007260:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007264:	4798      	blx	r3
 8007266:	3501      	adds	r5, #1
 8007268:	e7ee      	b.n	8007248 <__libc_init_array+0xc>
 800726a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800726e:	4798      	blx	r3
 8007270:	3501      	adds	r5, #1
 8007272:	e7f2      	b.n	800725a <__libc_init_array+0x1e>
 8007274:	0800add8 	.word	0x0800add8
 8007278:	0800add8 	.word	0x0800add8
 800727c:	0800add8 	.word	0x0800add8
 8007280:	0800addc 	.word	0x0800addc

08007284 <__itoa>:
 8007284:	1e93      	subs	r3, r2, #2
 8007286:	2b22      	cmp	r3, #34	; 0x22
 8007288:	b510      	push	{r4, lr}
 800728a:	460c      	mov	r4, r1
 800728c:	d904      	bls.n	8007298 <__itoa+0x14>
 800728e:	2300      	movs	r3, #0
 8007290:	461c      	mov	r4, r3
 8007292:	700b      	strb	r3, [r1, #0]
 8007294:	4620      	mov	r0, r4
 8007296:	bd10      	pop	{r4, pc}
 8007298:	2a0a      	cmp	r2, #10
 800729a:	d109      	bne.n	80072b0 <__itoa+0x2c>
 800729c:	2800      	cmp	r0, #0
 800729e:	da07      	bge.n	80072b0 <__itoa+0x2c>
 80072a0:	232d      	movs	r3, #45	; 0x2d
 80072a2:	700b      	strb	r3, [r1, #0]
 80072a4:	2101      	movs	r1, #1
 80072a6:	4240      	negs	r0, r0
 80072a8:	4421      	add	r1, r4
 80072aa:	f000 ff5b 	bl	8008164 <__utoa>
 80072ae:	e7f1      	b.n	8007294 <__itoa+0x10>
 80072b0:	2100      	movs	r1, #0
 80072b2:	e7f9      	b.n	80072a8 <__itoa+0x24>

080072b4 <itoa>:
 80072b4:	f7ff bfe6 	b.w	8007284 <__itoa>

080072b8 <memcmp>:
 80072b8:	b530      	push	{r4, r5, lr}
 80072ba:	2400      	movs	r4, #0
 80072bc:	42a2      	cmp	r2, r4
 80072be:	d101      	bne.n	80072c4 <memcmp+0xc>
 80072c0:	2000      	movs	r0, #0
 80072c2:	e007      	b.n	80072d4 <memcmp+0x1c>
 80072c4:	5d03      	ldrb	r3, [r0, r4]
 80072c6:	3401      	adds	r4, #1
 80072c8:	190d      	adds	r5, r1, r4
 80072ca:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80072ce:	42ab      	cmp	r3, r5
 80072d0:	d0f4      	beq.n	80072bc <memcmp+0x4>
 80072d2:	1b58      	subs	r0, r3, r5
 80072d4:	bd30      	pop	{r4, r5, pc}

080072d6 <memcpy>:
 80072d6:	b510      	push	{r4, lr}
 80072d8:	1e43      	subs	r3, r0, #1
 80072da:	440a      	add	r2, r1
 80072dc:	4291      	cmp	r1, r2
 80072de:	d100      	bne.n	80072e2 <memcpy+0xc>
 80072e0:	bd10      	pop	{r4, pc}
 80072e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072ea:	e7f7      	b.n	80072dc <memcpy+0x6>

080072ec <memset>:
 80072ec:	4603      	mov	r3, r0
 80072ee:	4402      	add	r2, r0
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d100      	bne.n	80072f6 <memset+0xa>
 80072f4:	4770      	bx	lr
 80072f6:	f803 1b01 	strb.w	r1, [r3], #1
 80072fa:	e7f9      	b.n	80072f0 <memset+0x4>

080072fc <siscanf>:
 80072fc:	b40e      	push	{r1, r2, r3}
 80072fe:	f44f 7201 	mov.w	r2, #516	; 0x204
 8007302:	b530      	push	{r4, r5, lr}
 8007304:	b09c      	sub	sp, #112	; 0x70
 8007306:	ac1f      	add	r4, sp, #124	; 0x7c
 8007308:	f854 5b04 	ldr.w	r5, [r4], #4
 800730c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007310:	9002      	str	r0, [sp, #8]
 8007312:	9006      	str	r0, [sp, #24]
 8007314:	f7f8 ff1c 	bl	8000150 <strlen>
 8007318:	4b0b      	ldr	r3, [pc, #44]	; (8007348 <siscanf+0x4c>)
 800731a:	9003      	str	r0, [sp, #12]
 800731c:	930b      	str	r3, [sp, #44]	; 0x2c
 800731e:	2300      	movs	r3, #0
 8007320:	930f      	str	r3, [sp, #60]	; 0x3c
 8007322:	9314      	str	r3, [sp, #80]	; 0x50
 8007324:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007328:	9007      	str	r0, [sp, #28]
 800732a:	4808      	ldr	r0, [pc, #32]	; (800734c <siscanf+0x50>)
 800732c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007330:	462a      	mov	r2, r5
 8007332:	4623      	mov	r3, r4
 8007334:	a902      	add	r1, sp, #8
 8007336:	6800      	ldr	r0, [r0, #0]
 8007338:	9401      	str	r4, [sp, #4]
 800733a:	f001 ff59 	bl	80091f0 <__ssvfiscanf_r>
 800733e:	b01c      	add	sp, #112	; 0x70
 8007340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007344:	b003      	add	sp, #12
 8007346:	4770      	bx	lr
 8007348:	08007351 	.word	0x08007351
 800734c:	200001b4 	.word	0x200001b4

08007350 <__seofread>:
 8007350:	2000      	movs	r0, #0
 8007352:	4770      	bx	lr

08007354 <strcat>:
 8007354:	4603      	mov	r3, r0
 8007356:	b510      	push	{r4, lr}
 8007358:	781a      	ldrb	r2, [r3, #0]
 800735a:	1c5c      	adds	r4, r3, #1
 800735c:	b93a      	cbnz	r2, 800736e <strcat+0x1a>
 800735e:	3b01      	subs	r3, #1
 8007360:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007364:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007368:	2a00      	cmp	r2, #0
 800736a:	d1f9      	bne.n	8007360 <strcat+0xc>
 800736c:	bd10      	pop	{r4, pc}
 800736e:	4623      	mov	r3, r4
 8007370:	e7f2      	b.n	8007358 <strcat+0x4>

08007372 <strcpy>:
 8007372:	4603      	mov	r3, r0
 8007374:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007378:	f803 2b01 	strb.w	r2, [r3], #1
 800737c:	2a00      	cmp	r2, #0
 800737e:	d1f9      	bne.n	8007374 <strcpy+0x2>
 8007380:	4770      	bx	lr

08007382 <strstr>:
 8007382:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007384:	7803      	ldrb	r3, [r0, #0]
 8007386:	b17b      	cbz	r3, 80073a8 <strstr+0x26>
 8007388:	4604      	mov	r4, r0
 800738a:	7823      	ldrb	r3, [r4, #0]
 800738c:	4620      	mov	r0, r4
 800738e:	1c66      	adds	r6, r4, #1
 8007390:	b17b      	cbz	r3, 80073b2 <strstr+0x30>
 8007392:	1e4a      	subs	r2, r1, #1
 8007394:	1e63      	subs	r3, r4, #1
 8007396:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800739a:	b14d      	cbz	r5, 80073b0 <strstr+0x2e>
 800739c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80073a0:	4634      	mov	r4, r6
 80073a2:	42af      	cmp	r7, r5
 80073a4:	d0f7      	beq.n	8007396 <strstr+0x14>
 80073a6:	e7f0      	b.n	800738a <strstr+0x8>
 80073a8:	780b      	ldrb	r3, [r1, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	bf18      	it	ne
 80073ae:	2000      	movne	r0, #0
 80073b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073b2:	4618      	mov	r0, r3
 80073b4:	e7fc      	b.n	80073b0 <strstr+0x2e>

080073b6 <sulp>:
 80073b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ba:	460f      	mov	r7, r1
 80073bc:	4690      	mov	r8, r2
 80073be:	f001 fd27 	bl	8008e10 <__ulp>
 80073c2:	4604      	mov	r4, r0
 80073c4:	460d      	mov	r5, r1
 80073c6:	f1b8 0f00 	cmp.w	r8, #0
 80073ca:	d011      	beq.n	80073f0 <sulp+0x3a>
 80073cc:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80073d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	dd0b      	ble.n	80073f0 <sulp+0x3a>
 80073d8:	2400      	movs	r4, #0
 80073da:	051b      	lsls	r3, r3, #20
 80073dc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80073e0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80073e4:	4622      	mov	r2, r4
 80073e6:	462b      	mov	r3, r5
 80073e8:	f7f9 f876 	bl	80004d8 <__aeabi_dmul>
 80073ec:	4604      	mov	r4, r0
 80073ee:	460d      	mov	r5, r1
 80073f0:	4620      	mov	r0, r4
 80073f2:	4629      	mov	r1, r5
 80073f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080073f8 <_strtod_l>:
 80073f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073fc:	461f      	mov	r7, r3
 80073fe:	2300      	movs	r3, #0
 8007400:	b0a1      	sub	sp, #132	; 0x84
 8007402:	4683      	mov	fp, r0
 8007404:	4638      	mov	r0, r7
 8007406:	460e      	mov	r6, r1
 8007408:	9217      	str	r2, [sp, #92]	; 0x5c
 800740a:	931c      	str	r3, [sp, #112]	; 0x70
 800740c:	f001 fa22 	bl	8008854 <__localeconv_l>
 8007410:	4680      	mov	r8, r0
 8007412:	6800      	ldr	r0, [r0, #0]
 8007414:	f7f8 fe9c 	bl	8000150 <strlen>
 8007418:	f04f 0900 	mov.w	r9, #0
 800741c:	4604      	mov	r4, r0
 800741e:	f04f 0a00 	mov.w	sl, #0
 8007422:	961b      	str	r6, [sp, #108]	; 0x6c
 8007424:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007426:	781a      	ldrb	r2, [r3, #0]
 8007428:	2a0d      	cmp	r2, #13
 800742a:	d832      	bhi.n	8007492 <_strtod_l+0x9a>
 800742c:	2a09      	cmp	r2, #9
 800742e:	d236      	bcs.n	800749e <_strtod_l+0xa6>
 8007430:	2a00      	cmp	r2, #0
 8007432:	d03e      	beq.n	80074b2 <_strtod_l+0xba>
 8007434:	2300      	movs	r3, #0
 8007436:	930d      	str	r3, [sp, #52]	; 0x34
 8007438:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800743a:	782b      	ldrb	r3, [r5, #0]
 800743c:	2b30      	cmp	r3, #48	; 0x30
 800743e:	f040 80ac 	bne.w	800759a <_strtod_l+0x1a2>
 8007442:	786b      	ldrb	r3, [r5, #1]
 8007444:	2b58      	cmp	r3, #88	; 0x58
 8007446:	d001      	beq.n	800744c <_strtod_l+0x54>
 8007448:	2b78      	cmp	r3, #120	; 0x78
 800744a:	d167      	bne.n	800751c <_strtod_l+0x124>
 800744c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800744e:	9702      	str	r7, [sp, #8]
 8007450:	9301      	str	r3, [sp, #4]
 8007452:	ab1c      	add	r3, sp, #112	; 0x70
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	4a89      	ldr	r2, [pc, #548]	; (800767c <_strtod_l+0x284>)
 8007458:	ab1d      	add	r3, sp, #116	; 0x74
 800745a:	a91b      	add	r1, sp, #108	; 0x6c
 800745c:	4658      	mov	r0, fp
 800745e:	f000 ff0f 	bl	8008280 <__gethex>
 8007462:	f010 0407 	ands.w	r4, r0, #7
 8007466:	4606      	mov	r6, r0
 8007468:	d005      	beq.n	8007476 <_strtod_l+0x7e>
 800746a:	2c06      	cmp	r4, #6
 800746c:	d12b      	bne.n	80074c6 <_strtod_l+0xce>
 800746e:	2300      	movs	r3, #0
 8007470:	3501      	adds	r5, #1
 8007472:	951b      	str	r5, [sp, #108]	; 0x6c
 8007474:	930d      	str	r3, [sp, #52]	; 0x34
 8007476:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007478:	2b00      	cmp	r3, #0
 800747a:	f040 85a6 	bne.w	8007fca <_strtod_l+0xbd2>
 800747e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007480:	b1e3      	cbz	r3, 80074bc <_strtod_l+0xc4>
 8007482:	464a      	mov	r2, r9
 8007484:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8007488:	4610      	mov	r0, r2
 800748a:	4619      	mov	r1, r3
 800748c:	b021      	add	sp, #132	; 0x84
 800748e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007492:	2a2b      	cmp	r2, #43	; 0x2b
 8007494:	d015      	beq.n	80074c2 <_strtod_l+0xca>
 8007496:	2a2d      	cmp	r2, #45	; 0x2d
 8007498:	d004      	beq.n	80074a4 <_strtod_l+0xac>
 800749a:	2a20      	cmp	r2, #32
 800749c:	d1ca      	bne.n	8007434 <_strtod_l+0x3c>
 800749e:	3301      	adds	r3, #1
 80074a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80074a2:	e7bf      	b.n	8007424 <_strtod_l+0x2c>
 80074a4:	2201      	movs	r2, #1
 80074a6:	920d      	str	r2, [sp, #52]	; 0x34
 80074a8:	1c5a      	adds	r2, r3, #1
 80074aa:	921b      	str	r2, [sp, #108]	; 0x6c
 80074ac:	785b      	ldrb	r3, [r3, #1]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1c2      	bne.n	8007438 <_strtod_l+0x40>
 80074b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074b4:	961b      	str	r6, [sp, #108]	; 0x6c
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f040 8585 	bne.w	8007fc6 <_strtod_l+0xbce>
 80074bc:	464a      	mov	r2, r9
 80074be:	4653      	mov	r3, sl
 80074c0:	e7e2      	b.n	8007488 <_strtod_l+0x90>
 80074c2:	2200      	movs	r2, #0
 80074c4:	e7ef      	b.n	80074a6 <_strtod_l+0xae>
 80074c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80074c8:	b13a      	cbz	r2, 80074da <_strtod_l+0xe2>
 80074ca:	2135      	movs	r1, #53	; 0x35
 80074cc:	a81e      	add	r0, sp, #120	; 0x78
 80074ce:	f001 fd92 	bl	8008ff6 <__copybits>
 80074d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80074d4:	4658      	mov	r0, fp
 80074d6:	f001 fa05 	bl	80088e4 <_Bfree>
 80074da:	3c01      	subs	r4, #1
 80074dc:	2c04      	cmp	r4, #4
 80074de:	d806      	bhi.n	80074ee <_strtod_l+0xf6>
 80074e0:	e8df f004 	tbb	[pc, r4]
 80074e4:	1714030a 	.word	0x1714030a
 80074e8:	0a          	.byte	0x0a
 80074e9:	00          	.byte	0x00
 80074ea:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 80074ee:	0731      	lsls	r1, r6, #28
 80074f0:	d5c1      	bpl.n	8007476 <_strtod_l+0x7e>
 80074f2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 80074f6:	e7be      	b.n	8007476 <_strtod_l+0x7e>
 80074f8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80074fa:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 80074fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007502:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007506:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800750a:	e7f0      	b.n	80074ee <_strtod_l+0xf6>
 800750c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8007680 <_strtod_l+0x288>
 8007510:	e7ed      	b.n	80074ee <_strtod_l+0xf6>
 8007512:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8007516:	f04f 39ff 	mov.w	r9, #4294967295
 800751a:	e7e8      	b.n	80074ee <_strtod_l+0xf6>
 800751c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800751e:	1c5a      	adds	r2, r3, #1
 8007520:	921b      	str	r2, [sp, #108]	; 0x6c
 8007522:	785b      	ldrb	r3, [r3, #1]
 8007524:	2b30      	cmp	r3, #48	; 0x30
 8007526:	d0f9      	beq.n	800751c <_strtod_l+0x124>
 8007528:	2b00      	cmp	r3, #0
 800752a:	d0a4      	beq.n	8007476 <_strtod_l+0x7e>
 800752c:	2301      	movs	r3, #1
 800752e:	2500      	movs	r5, #0
 8007530:	220a      	movs	r2, #10
 8007532:	9307      	str	r3, [sp, #28]
 8007534:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007536:	9506      	str	r5, [sp, #24]
 8007538:	9308      	str	r3, [sp, #32]
 800753a:	9504      	str	r5, [sp, #16]
 800753c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800753e:	7807      	ldrb	r7, [r0, #0]
 8007540:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007544:	b2d9      	uxtb	r1, r3
 8007546:	2909      	cmp	r1, #9
 8007548:	d929      	bls.n	800759e <_strtod_l+0x1a6>
 800754a:	4622      	mov	r2, r4
 800754c:	f8d8 1000 	ldr.w	r1, [r8]
 8007550:	f002 f937 	bl	80097c2 <strncmp>
 8007554:	2800      	cmp	r0, #0
 8007556:	d031      	beq.n	80075bc <_strtod_l+0x1c4>
 8007558:	2000      	movs	r0, #0
 800755a:	463b      	mov	r3, r7
 800755c:	4602      	mov	r2, r0
 800755e:	9c04      	ldr	r4, [sp, #16]
 8007560:	9005      	str	r0, [sp, #20]
 8007562:	2b65      	cmp	r3, #101	; 0x65
 8007564:	d001      	beq.n	800756a <_strtod_l+0x172>
 8007566:	2b45      	cmp	r3, #69	; 0x45
 8007568:	d114      	bne.n	8007594 <_strtod_l+0x19c>
 800756a:	b924      	cbnz	r4, 8007576 <_strtod_l+0x17e>
 800756c:	b910      	cbnz	r0, 8007574 <_strtod_l+0x17c>
 800756e:	9b07      	ldr	r3, [sp, #28]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d09e      	beq.n	80074b2 <_strtod_l+0xba>
 8007574:	2400      	movs	r4, #0
 8007576:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007578:	1c73      	adds	r3, r6, #1
 800757a:	931b      	str	r3, [sp, #108]	; 0x6c
 800757c:	7873      	ldrb	r3, [r6, #1]
 800757e:	2b2b      	cmp	r3, #43	; 0x2b
 8007580:	d078      	beq.n	8007674 <_strtod_l+0x27c>
 8007582:	2b2d      	cmp	r3, #45	; 0x2d
 8007584:	d070      	beq.n	8007668 <_strtod_l+0x270>
 8007586:	f04f 0c00 	mov.w	ip, #0
 800758a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800758e:	2f09      	cmp	r7, #9
 8007590:	d97c      	bls.n	800768c <_strtod_l+0x294>
 8007592:	961b      	str	r6, [sp, #108]	; 0x6c
 8007594:	f04f 0e00 	mov.w	lr, #0
 8007598:	e09a      	b.n	80076d0 <_strtod_l+0x2d8>
 800759a:	2300      	movs	r3, #0
 800759c:	e7c7      	b.n	800752e <_strtod_l+0x136>
 800759e:	9904      	ldr	r1, [sp, #16]
 80075a0:	3001      	adds	r0, #1
 80075a2:	2908      	cmp	r1, #8
 80075a4:	bfd7      	itett	le
 80075a6:	9906      	ldrle	r1, [sp, #24]
 80075a8:	fb02 3505 	mlagt	r5, r2, r5, r3
 80075ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80075b0:	9306      	strle	r3, [sp, #24]
 80075b2:	9b04      	ldr	r3, [sp, #16]
 80075b4:	901b      	str	r0, [sp, #108]	; 0x6c
 80075b6:	3301      	adds	r3, #1
 80075b8:	9304      	str	r3, [sp, #16]
 80075ba:	e7bf      	b.n	800753c <_strtod_l+0x144>
 80075bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80075be:	191a      	adds	r2, r3, r4
 80075c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80075c2:	9a04      	ldr	r2, [sp, #16]
 80075c4:	5d1b      	ldrb	r3, [r3, r4]
 80075c6:	2a00      	cmp	r2, #0
 80075c8:	d037      	beq.n	800763a <_strtod_l+0x242>
 80075ca:	4602      	mov	r2, r0
 80075cc:	9c04      	ldr	r4, [sp, #16]
 80075ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80075d2:	2909      	cmp	r1, #9
 80075d4:	d913      	bls.n	80075fe <_strtod_l+0x206>
 80075d6:	2101      	movs	r1, #1
 80075d8:	9105      	str	r1, [sp, #20]
 80075da:	e7c2      	b.n	8007562 <_strtod_l+0x16a>
 80075dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80075de:	3001      	adds	r0, #1
 80075e0:	1c5a      	adds	r2, r3, #1
 80075e2:	921b      	str	r2, [sp, #108]	; 0x6c
 80075e4:	785b      	ldrb	r3, [r3, #1]
 80075e6:	2b30      	cmp	r3, #48	; 0x30
 80075e8:	d0f8      	beq.n	80075dc <_strtod_l+0x1e4>
 80075ea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80075ee:	2a08      	cmp	r2, #8
 80075f0:	f200 84f0 	bhi.w	8007fd4 <_strtod_l+0xbdc>
 80075f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80075f6:	9208      	str	r2, [sp, #32]
 80075f8:	4602      	mov	r2, r0
 80075fa:	2000      	movs	r0, #0
 80075fc:	4604      	mov	r4, r0
 80075fe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007602:	f100 0101 	add.w	r1, r0, #1
 8007606:	d012      	beq.n	800762e <_strtod_l+0x236>
 8007608:	440a      	add	r2, r1
 800760a:	270a      	movs	r7, #10
 800760c:	4621      	mov	r1, r4
 800760e:	eb00 0c04 	add.w	ip, r0, r4
 8007612:	458c      	cmp	ip, r1
 8007614:	d113      	bne.n	800763e <_strtod_l+0x246>
 8007616:	1821      	adds	r1, r4, r0
 8007618:	2908      	cmp	r1, #8
 800761a:	f104 0401 	add.w	r4, r4, #1
 800761e:	4404      	add	r4, r0
 8007620:	dc19      	bgt.n	8007656 <_strtod_l+0x25e>
 8007622:	210a      	movs	r1, #10
 8007624:	9b06      	ldr	r3, [sp, #24]
 8007626:	fb01 e303 	mla	r3, r1, r3, lr
 800762a:	9306      	str	r3, [sp, #24]
 800762c:	2100      	movs	r1, #0
 800762e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007630:	1c58      	adds	r0, r3, #1
 8007632:	901b      	str	r0, [sp, #108]	; 0x6c
 8007634:	785b      	ldrb	r3, [r3, #1]
 8007636:	4608      	mov	r0, r1
 8007638:	e7c9      	b.n	80075ce <_strtod_l+0x1d6>
 800763a:	9804      	ldr	r0, [sp, #16]
 800763c:	e7d3      	b.n	80075e6 <_strtod_l+0x1ee>
 800763e:	2908      	cmp	r1, #8
 8007640:	f101 0101 	add.w	r1, r1, #1
 8007644:	dc03      	bgt.n	800764e <_strtod_l+0x256>
 8007646:	9b06      	ldr	r3, [sp, #24]
 8007648:	437b      	muls	r3, r7
 800764a:	9306      	str	r3, [sp, #24]
 800764c:	e7e1      	b.n	8007612 <_strtod_l+0x21a>
 800764e:	2910      	cmp	r1, #16
 8007650:	bfd8      	it	le
 8007652:	437d      	mulle	r5, r7
 8007654:	e7dd      	b.n	8007612 <_strtod_l+0x21a>
 8007656:	2c10      	cmp	r4, #16
 8007658:	bfdc      	itt	le
 800765a:	210a      	movle	r1, #10
 800765c:	fb01 e505 	mlale	r5, r1, r5, lr
 8007660:	e7e4      	b.n	800762c <_strtod_l+0x234>
 8007662:	2301      	movs	r3, #1
 8007664:	9305      	str	r3, [sp, #20]
 8007666:	e781      	b.n	800756c <_strtod_l+0x174>
 8007668:	f04f 0c01 	mov.w	ip, #1
 800766c:	1cb3      	adds	r3, r6, #2
 800766e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007670:	78b3      	ldrb	r3, [r6, #2]
 8007672:	e78a      	b.n	800758a <_strtod_l+0x192>
 8007674:	f04f 0c00 	mov.w	ip, #0
 8007678:	e7f8      	b.n	800766c <_strtod_l+0x274>
 800767a:	bf00      	nop
 800767c:	0800aabc 	.word	0x0800aabc
 8007680:	7ff00000 	.word	0x7ff00000
 8007684:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007686:	1c5f      	adds	r7, r3, #1
 8007688:	971b      	str	r7, [sp, #108]	; 0x6c
 800768a:	785b      	ldrb	r3, [r3, #1]
 800768c:	2b30      	cmp	r3, #48	; 0x30
 800768e:	d0f9      	beq.n	8007684 <_strtod_l+0x28c>
 8007690:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007694:	2f08      	cmp	r7, #8
 8007696:	f63f af7d 	bhi.w	8007594 <_strtod_l+0x19c>
 800769a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800769e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076a0:	9309      	str	r3, [sp, #36]	; 0x24
 80076a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076a4:	1c5f      	adds	r7, r3, #1
 80076a6:	971b      	str	r7, [sp, #108]	; 0x6c
 80076a8:	785b      	ldrb	r3, [r3, #1]
 80076aa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80076ae:	f1b8 0f09 	cmp.w	r8, #9
 80076b2:	d937      	bls.n	8007724 <_strtod_l+0x32c>
 80076b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076b6:	1a7f      	subs	r7, r7, r1
 80076b8:	2f08      	cmp	r7, #8
 80076ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80076be:	dc37      	bgt.n	8007730 <_strtod_l+0x338>
 80076c0:	45be      	cmp	lr, r7
 80076c2:	bfa8      	it	ge
 80076c4:	46be      	movge	lr, r7
 80076c6:	f1bc 0f00 	cmp.w	ip, #0
 80076ca:	d001      	beq.n	80076d0 <_strtod_l+0x2d8>
 80076cc:	f1ce 0e00 	rsb	lr, lr, #0
 80076d0:	2c00      	cmp	r4, #0
 80076d2:	d151      	bne.n	8007778 <_strtod_l+0x380>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	f47f aece 	bne.w	8007476 <_strtod_l+0x7e>
 80076da:	9a07      	ldr	r2, [sp, #28]
 80076dc:	2a00      	cmp	r2, #0
 80076de:	f47f aeca 	bne.w	8007476 <_strtod_l+0x7e>
 80076e2:	9a05      	ldr	r2, [sp, #20]
 80076e4:	2a00      	cmp	r2, #0
 80076e6:	f47f aee4 	bne.w	80074b2 <_strtod_l+0xba>
 80076ea:	2b4e      	cmp	r3, #78	; 0x4e
 80076ec:	d027      	beq.n	800773e <_strtod_l+0x346>
 80076ee:	dc21      	bgt.n	8007734 <_strtod_l+0x33c>
 80076f0:	2b49      	cmp	r3, #73	; 0x49
 80076f2:	f47f aede 	bne.w	80074b2 <_strtod_l+0xba>
 80076f6:	49a4      	ldr	r1, [pc, #656]	; (8007988 <_strtod_l+0x590>)
 80076f8:	a81b      	add	r0, sp, #108	; 0x6c
 80076fa:	f000 fff5 	bl	80086e8 <__match>
 80076fe:	2800      	cmp	r0, #0
 8007700:	f43f aed7 	beq.w	80074b2 <_strtod_l+0xba>
 8007704:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007706:	49a1      	ldr	r1, [pc, #644]	; (800798c <_strtod_l+0x594>)
 8007708:	3b01      	subs	r3, #1
 800770a:	a81b      	add	r0, sp, #108	; 0x6c
 800770c:	931b      	str	r3, [sp, #108]	; 0x6c
 800770e:	f000 ffeb 	bl	80086e8 <__match>
 8007712:	b910      	cbnz	r0, 800771a <_strtod_l+0x322>
 8007714:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007716:	3301      	adds	r3, #1
 8007718:	931b      	str	r3, [sp, #108]	; 0x6c
 800771a:	f8df a284 	ldr.w	sl, [pc, #644]	; 80079a0 <_strtod_l+0x5a8>
 800771e:	f04f 0900 	mov.w	r9, #0
 8007722:	e6a8      	b.n	8007476 <_strtod_l+0x7e>
 8007724:	210a      	movs	r1, #10
 8007726:	fb01 3e0e 	mla	lr, r1, lr, r3
 800772a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800772e:	e7b8      	b.n	80076a2 <_strtod_l+0x2aa>
 8007730:	46be      	mov	lr, r7
 8007732:	e7c8      	b.n	80076c6 <_strtod_l+0x2ce>
 8007734:	2b69      	cmp	r3, #105	; 0x69
 8007736:	d0de      	beq.n	80076f6 <_strtod_l+0x2fe>
 8007738:	2b6e      	cmp	r3, #110	; 0x6e
 800773a:	f47f aeba 	bne.w	80074b2 <_strtod_l+0xba>
 800773e:	4994      	ldr	r1, [pc, #592]	; (8007990 <_strtod_l+0x598>)
 8007740:	a81b      	add	r0, sp, #108	; 0x6c
 8007742:	f000 ffd1 	bl	80086e8 <__match>
 8007746:	2800      	cmp	r0, #0
 8007748:	f43f aeb3 	beq.w	80074b2 <_strtod_l+0xba>
 800774c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2b28      	cmp	r3, #40	; 0x28
 8007752:	d10e      	bne.n	8007772 <_strtod_l+0x37a>
 8007754:	aa1e      	add	r2, sp, #120	; 0x78
 8007756:	498f      	ldr	r1, [pc, #572]	; (8007994 <_strtod_l+0x59c>)
 8007758:	a81b      	add	r0, sp, #108	; 0x6c
 800775a:	f000 ffd9 	bl	8008710 <__hexnan>
 800775e:	2805      	cmp	r0, #5
 8007760:	d107      	bne.n	8007772 <_strtod_l+0x37a>
 8007762:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007764:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8007768:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800776c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8007770:	e681      	b.n	8007476 <_strtod_l+0x7e>
 8007772:	f8df a234 	ldr.w	sl, [pc, #564]	; 80079a8 <_strtod_l+0x5b0>
 8007776:	e7d2      	b.n	800771e <_strtod_l+0x326>
 8007778:	ebae 0302 	sub.w	r3, lr, r2
 800777c:	9307      	str	r3, [sp, #28]
 800777e:	9b04      	ldr	r3, [sp, #16]
 8007780:	9806      	ldr	r0, [sp, #24]
 8007782:	2b00      	cmp	r3, #0
 8007784:	bf08      	it	eq
 8007786:	4623      	moveq	r3, r4
 8007788:	2c10      	cmp	r4, #16
 800778a:	9304      	str	r3, [sp, #16]
 800778c:	46a0      	mov	r8, r4
 800778e:	bfa8      	it	ge
 8007790:	f04f 0810 	movge.w	r8, #16
 8007794:	f7f8 fe26 	bl	80003e4 <__aeabi_ui2d>
 8007798:	2c09      	cmp	r4, #9
 800779a:	4681      	mov	r9, r0
 800779c:	468a      	mov	sl, r1
 800779e:	dc13      	bgt.n	80077c8 <_strtod_l+0x3d0>
 80077a0:	9b07      	ldr	r3, [sp, #28]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f43f ae67 	beq.w	8007476 <_strtod_l+0x7e>
 80077a8:	9b07      	ldr	r3, [sp, #28]
 80077aa:	dd7e      	ble.n	80078aa <_strtod_l+0x4b2>
 80077ac:	2b16      	cmp	r3, #22
 80077ae:	dc65      	bgt.n	800787c <_strtod_l+0x484>
 80077b0:	4a79      	ldr	r2, [pc, #484]	; (8007998 <_strtod_l+0x5a0>)
 80077b2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80077b6:	464a      	mov	r2, r9
 80077b8:	e9de 0100 	ldrd	r0, r1, [lr]
 80077bc:	4653      	mov	r3, sl
 80077be:	f7f8 fe8b 	bl	80004d8 <__aeabi_dmul>
 80077c2:	4681      	mov	r9, r0
 80077c4:	468a      	mov	sl, r1
 80077c6:	e656      	b.n	8007476 <_strtod_l+0x7e>
 80077c8:	4b73      	ldr	r3, [pc, #460]	; (8007998 <_strtod_l+0x5a0>)
 80077ca:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80077ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80077d2:	f7f8 fe81 	bl	80004d8 <__aeabi_dmul>
 80077d6:	4606      	mov	r6, r0
 80077d8:	4628      	mov	r0, r5
 80077da:	460f      	mov	r7, r1
 80077dc:	f7f8 fe02 	bl	80003e4 <__aeabi_ui2d>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	4630      	mov	r0, r6
 80077e6:	4639      	mov	r1, r7
 80077e8:	f7f8 fcc0 	bl	800016c <__adddf3>
 80077ec:	2c0f      	cmp	r4, #15
 80077ee:	4681      	mov	r9, r0
 80077f0:	468a      	mov	sl, r1
 80077f2:	ddd5      	ble.n	80077a0 <_strtod_l+0x3a8>
 80077f4:	9b07      	ldr	r3, [sp, #28]
 80077f6:	eba4 0808 	sub.w	r8, r4, r8
 80077fa:	4498      	add	r8, r3
 80077fc:	f1b8 0f00 	cmp.w	r8, #0
 8007800:	f340 809a 	ble.w	8007938 <_strtod_l+0x540>
 8007804:	f018 030f 	ands.w	r3, r8, #15
 8007808:	d00a      	beq.n	8007820 <_strtod_l+0x428>
 800780a:	4963      	ldr	r1, [pc, #396]	; (8007998 <_strtod_l+0x5a0>)
 800780c:	464a      	mov	r2, r9
 800780e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007812:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007816:	4653      	mov	r3, sl
 8007818:	f7f8 fe5e 	bl	80004d8 <__aeabi_dmul>
 800781c:	4681      	mov	r9, r0
 800781e:	468a      	mov	sl, r1
 8007820:	f038 080f 	bics.w	r8, r8, #15
 8007824:	d077      	beq.n	8007916 <_strtod_l+0x51e>
 8007826:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800782a:	dd4b      	ble.n	80078c4 <_strtod_l+0x4cc>
 800782c:	f04f 0800 	mov.w	r8, #0
 8007830:	f8cd 8010 	str.w	r8, [sp, #16]
 8007834:	f8cd 8020 	str.w	r8, [sp, #32]
 8007838:	f8cd 8018 	str.w	r8, [sp, #24]
 800783c:	2322      	movs	r3, #34	; 0x22
 800783e:	f04f 0900 	mov.w	r9, #0
 8007842:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80079a0 <_strtod_l+0x5a8>
 8007846:	f8cb 3000 	str.w	r3, [fp]
 800784a:	9b08      	ldr	r3, [sp, #32]
 800784c:	2b00      	cmp	r3, #0
 800784e:	f43f ae12 	beq.w	8007476 <_strtod_l+0x7e>
 8007852:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007854:	4658      	mov	r0, fp
 8007856:	f001 f845 	bl	80088e4 <_Bfree>
 800785a:	9906      	ldr	r1, [sp, #24]
 800785c:	4658      	mov	r0, fp
 800785e:	f001 f841 	bl	80088e4 <_Bfree>
 8007862:	9904      	ldr	r1, [sp, #16]
 8007864:	4658      	mov	r0, fp
 8007866:	f001 f83d 	bl	80088e4 <_Bfree>
 800786a:	9908      	ldr	r1, [sp, #32]
 800786c:	4658      	mov	r0, fp
 800786e:	f001 f839 	bl	80088e4 <_Bfree>
 8007872:	4641      	mov	r1, r8
 8007874:	4658      	mov	r0, fp
 8007876:	f001 f835 	bl	80088e4 <_Bfree>
 800787a:	e5fc      	b.n	8007476 <_strtod_l+0x7e>
 800787c:	9a07      	ldr	r2, [sp, #28]
 800787e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007882:	4293      	cmp	r3, r2
 8007884:	dbb6      	blt.n	80077f4 <_strtod_l+0x3fc>
 8007886:	4d44      	ldr	r5, [pc, #272]	; (8007998 <_strtod_l+0x5a0>)
 8007888:	f1c4 040f 	rsb	r4, r4, #15
 800788c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007890:	464a      	mov	r2, r9
 8007892:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007896:	4653      	mov	r3, sl
 8007898:	f7f8 fe1e 	bl	80004d8 <__aeabi_dmul>
 800789c:	9b07      	ldr	r3, [sp, #28]
 800789e:	1b1c      	subs	r4, r3, r4
 80078a0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80078a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80078a8:	e789      	b.n	80077be <_strtod_l+0x3c6>
 80078aa:	f113 0f16 	cmn.w	r3, #22
 80078ae:	dba1      	blt.n	80077f4 <_strtod_l+0x3fc>
 80078b0:	4a39      	ldr	r2, [pc, #228]	; (8007998 <_strtod_l+0x5a0>)
 80078b2:	4648      	mov	r0, r9
 80078b4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80078b8:	e9d2 2300 	ldrd	r2, r3, [r2]
 80078bc:	4651      	mov	r1, sl
 80078be:	f7f8 ff35 	bl	800072c <__aeabi_ddiv>
 80078c2:	e77e      	b.n	80077c2 <_strtod_l+0x3ca>
 80078c4:	2300      	movs	r3, #0
 80078c6:	4648      	mov	r0, r9
 80078c8:	4651      	mov	r1, sl
 80078ca:	461d      	mov	r5, r3
 80078cc:	4e33      	ldr	r6, [pc, #204]	; (800799c <_strtod_l+0x5a4>)
 80078ce:	ea4f 1828 	mov.w	r8, r8, asr #4
 80078d2:	f1b8 0f01 	cmp.w	r8, #1
 80078d6:	dc21      	bgt.n	800791c <_strtod_l+0x524>
 80078d8:	b10b      	cbz	r3, 80078de <_strtod_l+0x4e6>
 80078da:	4681      	mov	r9, r0
 80078dc:	468a      	mov	sl, r1
 80078de:	4b2f      	ldr	r3, [pc, #188]	; (800799c <_strtod_l+0x5a4>)
 80078e0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 80078e4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80078e8:	464a      	mov	r2, r9
 80078ea:	e9d5 0100 	ldrd	r0, r1, [r5]
 80078ee:	4653      	mov	r3, sl
 80078f0:	f7f8 fdf2 	bl	80004d8 <__aeabi_dmul>
 80078f4:	4b2a      	ldr	r3, [pc, #168]	; (80079a0 <_strtod_l+0x5a8>)
 80078f6:	460a      	mov	r2, r1
 80078f8:	400b      	ands	r3, r1
 80078fa:	492a      	ldr	r1, [pc, #168]	; (80079a4 <_strtod_l+0x5ac>)
 80078fc:	4681      	mov	r9, r0
 80078fe:	428b      	cmp	r3, r1
 8007900:	d894      	bhi.n	800782c <_strtod_l+0x434>
 8007902:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007906:	428b      	cmp	r3, r1
 8007908:	bf86      	itte	hi
 800790a:	f04f 39ff 	movhi.w	r9, #4294967295
 800790e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80079ac <_strtod_l+0x5b4>
 8007912:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8007916:	2300      	movs	r3, #0
 8007918:	9305      	str	r3, [sp, #20]
 800791a:	e07b      	b.n	8007a14 <_strtod_l+0x61c>
 800791c:	f018 0f01 	tst.w	r8, #1
 8007920:	d006      	beq.n	8007930 <_strtod_l+0x538>
 8007922:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792a:	f7f8 fdd5 	bl	80004d8 <__aeabi_dmul>
 800792e:	2301      	movs	r3, #1
 8007930:	3501      	adds	r5, #1
 8007932:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007936:	e7cc      	b.n	80078d2 <_strtod_l+0x4da>
 8007938:	d0ed      	beq.n	8007916 <_strtod_l+0x51e>
 800793a:	f1c8 0800 	rsb	r8, r8, #0
 800793e:	f018 020f 	ands.w	r2, r8, #15
 8007942:	d00a      	beq.n	800795a <_strtod_l+0x562>
 8007944:	4b14      	ldr	r3, [pc, #80]	; (8007998 <_strtod_l+0x5a0>)
 8007946:	4648      	mov	r0, r9
 8007948:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800794c:	4651      	mov	r1, sl
 800794e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007952:	f7f8 feeb 	bl	800072c <__aeabi_ddiv>
 8007956:	4681      	mov	r9, r0
 8007958:	468a      	mov	sl, r1
 800795a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800795e:	d0da      	beq.n	8007916 <_strtod_l+0x51e>
 8007960:	f1b8 0f1f 	cmp.w	r8, #31
 8007964:	dd24      	ble.n	80079b0 <_strtod_l+0x5b8>
 8007966:	f04f 0800 	mov.w	r8, #0
 800796a:	f8cd 8010 	str.w	r8, [sp, #16]
 800796e:	f8cd 8020 	str.w	r8, [sp, #32]
 8007972:	f8cd 8018 	str.w	r8, [sp, #24]
 8007976:	2322      	movs	r3, #34	; 0x22
 8007978:	f04f 0900 	mov.w	r9, #0
 800797c:	f04f 0a00 	mov.w	sl, #0
 8007980:	f8cb 3000 	str.w	r3, [fp]
 8007984:	e761      	b.n	800784a <_strtod_l+0x452>
 8007986:	bf00      	nop
 8007988:	0800aab0 	.word	0x0800aab0
 800798c:	0800aab3 	.word	0x0800aab3
 8007990:	0800aab9 	.word	0x0800aab9
 8007994:	0800aad0 	.word	0x0800aad0
 8007998:	0800ab68 	.word	0x0800ab68
 800799c:	0800ab40 	.word	0x0800ab40
 80079a0:	7ff00000 	.word	0x7ff00000
 80079a4:	7ca00000 	.word	0x7ca00000
 80079a8:	fff80000 	.word	0xfff80000
 80079ac:	7fefffff 	.word	0x7fefffff
 80079b0:	f018 0310 	ands.w	r3, r8, #16
 80079b4:	bf18      	it	ne
 80079b6:	236a      	movne	r3, #106	; 0x6a
 80079b8:	4648      	mov	r0, r9
 80079ba:	9305      	str	r3, [sp, #20]
 80079bc:	4651      	mov	r1, sl
 80079be:	2300      	movs	r3, #0
 80079c0:	4da1      	ldr	r5, [pc, #644]	; (8007c48 <_strtod_l+0x850>)
 80079c2:	f1b8 0f00 	cmp.w	r8, #0
 80079c6:	f300 8113 	bgt.w	8007bf0 <_strtod_l+0x7f8>
 80079ca:	b10b      	cbz	r3, 80079d0 <_strtod_l+0x5d8>
 80079cc:	4681      	mov	r9, r0
 80079ce:	468a      	mov	sl, r1
 80079d0:	9b05      	ldr	r3, [sp, #20]
 80079d2:	b1bb      	cbz	r3, 8007a04 <_strtod_l+0x60c>
 80079d4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80079d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079dc:	2b00      	cmp	r3, #0
 80079de:	4651      	mov	r1, sl
 80079e0:	dd10      	ble.n	8007a04 <_strtod_l+0x60c>
 80079e2:	2b1f      	cmp	r3, #31
 80079e4:	f340 8110 	ble.w	8007c08 <_strtod_l+0x810>
 80079e8:	2b34      	cmp	r3, #52	; 0x34
 80079ea:	bfd8      	it	le
 80079ec:	f04f 32ff 	movle.w	r2, #4294967295
 80079f0:	f04f 0900 	mov.w	r9, #0
 80079f4:	bfcf      	iteee	gt
 80079f6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 80079fa:	3b20      	suble	r3, #32
 80079fc:	fa02 f303 	lslle.w	r3, r2, r3
 8007a00:	ea03 0a01 	andle.w	sl, r3, r1
 8007a04:	2200      	movs	r2, #0
 8007a06:	2300      	movs	r3, #0
 8007a08:	4648      	mov	r0, r9
 8007a0a:	4651      	mov	r1, sl
 8007a0c:	f7f8 ffcc 	bl	80009a8 <__aeabi_dcmpeq>
 8007a10:	2800      	cmp	r0, #0
 8007a12:	d1a8      	bne.n	8007966 <_strtod_l+0x56e>
 8007a14:	9b06      	ldr	r3, [sp, #24]
 8007a16:	9a04      	ldr	r2, [sp, #16]
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	9908      	ldr	r1, [sp, #32]
 8007a1c:	4623      	mov	r3, r4
 8007a1e:	4658      	mov	r0, fp
 8007a20:	f000 ffb2 	bl	8008988 <__s2b>
 8007a24:	9008      	str	r0, [sp, #32]
 8007a26:	2800      	cmp	r0, #0
 8007a28:	f43f af00 	beq.w	800782c <_strtod_l+0x434>
 8007a2c:	9a07      	ldr	r2, [sp, #28]
 8007a2e:	9b07      	ldr	r3, [sp, #28]
 8007a30:	2a00      	cmp	r2, #0
 8007a32:	f1c3 0300 	rsb	r3, r3, #0
 8007a36:	bfa8      	it	ge
 8007a38:	2300      	movge	r3, #0
 8007a3a:	f04f 0800 	mov.w	r8, #0
 8007a3e:	930e      	str	r3, [sp, #56]	; 0x38
 8007a40:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007a44:	9316      	str	r3, [sp, #88]	; 0x58
 8007a46:	f8cd 8010 	str.w	r8, [sp, #16]
 8007a4a:	9b08      	ldr	r3, [sp, #32]
 8007a4c:	4658      	mov	r0, fp
 8007a4e:	6859      	ldr	r1, [r3, #4]
 8007a50:	f000 ff14 	bl	800887c <_Balloc>
 8007a54:	9006      	str	r0, [sp, #24]
 8007a56:	2800      	cmp	r0, #0
 8007a58:	f43f aef0 	beq.w	800783c <_strtod_l+0x444>
 8007a5c:	9b08      	ldr	r3, [sp, #32]
 8007a5e:	300c      	adds	r0, #12
 8007a60:	691a      	ldr	r2, [r3, #16]
 8007a62:	f103 010c 	add.w	r1, r3, #12
 8007a66:	3202      	adds	r2, #2
 8007a68:	0092      	lsls	r2, r2, #2
 8007a6a:	f7ff fc34 	bl	80072d6 <memcpy>
 8007a6e:	ab1e      	add	r3, sp, #120	; 0x78
 8007a70:	9301      	str	r3, [sp, #4]
 8007a72:	ab1d      	add	r3, sp, #116	; 0x74
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	464a      	mov	r2, r9
 8007a78:	4653      	mov	r3, sl
 8007a7a:	4658      	mov	r0, fp
 8007a7c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8007a80:	f001 fa3c 	bl	8008efc <__d2b>
 8007a84:	901c      	str	r0, [sp, #112]	; 0x70
 8007a86:	2800      	cmp	r0, #0
 8007a88:	f43f aed8 	beq.w	800783c <_strtod_l+0x444>
 8007a8c:	2101      	movs	r1, #1
 8007a8e:	4658      	mov	r0, fp
 8007a90:	f001 f806 	bl	8008aa0 <__i2b>
 8007a94:	9004      	str	r0, [sp, #16]
 8007a96:	4603      	mov	r3, r0
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	f43f aecf 	beq.w	800783c <_strtod_l+0x444>
 8007a9e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8007aa0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007aa2:	2d00      	cmp	r5, #0
 8007aa4:	bfab      	itete	ge
 8007aa6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007aa8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007aaa:	18ee      	addge	r6, r5, r3
 8007aac:	1b5c      	sublt	r4, r3, r5
 8007aae:	9b05      	ldr	r3, [sp, #20]
 8007ab0:	bfa8      	it	ge
 8007ab2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8007ab4:	eba5 0503 	sub.w	r5, r5, r3
 8007ab8:	4415      	add	r5, r2
 8007aba:	4b64      	ldr	r3, [pc, #400]	; (8007c4c <_strtod_l+0x854>)
 8007abc:	f105 35ff 	add.w	r5, r5, #4294967295
 8007ac0:	bfb8      	it	lt
 8007ac2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007ac4:	429d      	cmp	r5, r3
 8007ac6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007aca:	f280 80af 	bge.w	8007c2c <_strtod_l+0x834>
 8007ace:	1b5b      	subs	r3, r3, r5
 8007ad0:	2b1f      	cmp	r3, #31
 8007ad2:	eba2 0203 	sub.w	r2, r2, r3
 8007ad6:	f04f 0701 	mov.w	r7, #1
 8007ada:	f300 809c 	bgt.w	8007c16 <_strtod_l+0x81e>
 8007ade:	2500      	movs	r5, #0
 8007ae0:	fa07 f303 	lsl.w	r3, r7, r3
 8007ae4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ae6:	18b7      	adds	r7, r6, r2
 8007ae8:	9b05      	ldr	r3, [sp, #20]
 8007aea:	42be      	cmp	r6, r7
 8007aec:	4414      	add	r4, r2
 8007aee:	441c      	add	r4, r3
 8007af0:	4633      	mov	r3, r6
 8007af2:	bfa8      	it	ge
 8007af4:	463b      	movge	r3, r7
 8007af6:	42a3      	cmp	r3, r4
 8007af8:	bfa8      	it	ge
 8007afa:	4623      	movge	r3, r4
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	bfc2      	ittt	gt
 8007b00:	1aff      	subgt	r7, r7, r3
 8007b02:	1ae4      	subgt	r4, r4, r3
 8007b04:	1af6      	subgt	r6, r6, r3
 8007b06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b08:	b1bb      	cbz	r3, 8007b3a <_strtod_l+0x742>
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	9904      	ldr	r1, [sp, #16]
 8007b0e:	4658      	mov	r0, fp
 8007b10:	f001 f864 	bl	8008bdc <__pow5mult>
 8007b14:	9004      	str	r0, [sp, #16]
 8007b16:	2800      	cmp	r0, #0
 8007b18:	f43f ae90 	beq.w	800783c <_strtod_l+0x444>
 8007b1c:	4601      	mov	r1, r0
 8007b1e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007b20:	4658      	mov	r0, fp
 8007b22:	f000 ffc6 	bl	8008ab2 <__multiply>
 8007b26:	9009      	str	r0, [sp, #36]	; 0x24
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	f43f ae87 	beq.w	800783c <_strtod_l+0x444>
 8007b2e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007b30:	4658      	mov	r0, fp
 8007b32:	f000 fed7 	bl	80088e4 <_Bfree>
 8007b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b38:	931c      	str	r3, [sp, #112]	; 0x70
 8007b3a:	2f00      	cmp	r7, #0
 8007b3c:	dc7a      	bgt.n	8007c34 <_strtod_l+0x83c>
 8007b3e:	9b07      	ldr	r3, [sp, #28]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	dd08      	ble.n	8007b56 <_strtod_l+0x75e>
 8007b44:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007b46:	9906      	ldr	r1, [sp, #24]
 8007b48:	4658      	mov	r0, fp
 8007b4a:	f001 f847 	bl	8008bdc <__pow5mult>
 8007b4e:	9006      	str	r0, [sp, #24]
 8007b50:	2800      	cmp	r0, #0
 8007b52:	f43f ae73 	beq.w	800783c <_strtod_l+0x444>
 8007b56:	2c00      	cmp	r4, #0
 8007b58:	dd08      	ble.n	8007b6c <_strtod_l+0x774>
 8007b5a:	4622      	mov	r2, r4
 8007b5c:	9906      	ldr	r1, [sp, #24]
 8007b5e:	4658      	mov	r0, fp
 8007b60:	f001 f88a 	bl	8008c78 <__lshift>
 8007b64:	9006      	str	r0, [sp, #24]
 8007b66:	2800      	cmp	r0, #0
 8007b68:	f43f ae68 	beq.w	800783c <_strtod_l+0x444>
 8007b6c:	2e00      	cmp	r6, #0
 8007b6e:	dd08      	ble.n	8007b82 <_strtod_l+0x78a>
 8007b70:	4632      	mov	r2, r6
 8007b72:	9904      	ldr	r1, [sp, #16]
 8007b74:	4658      	mov	r0, fp
 8007b76:	f001 f87f 	bl	8008c78 <__lshift>
 8007b7a:	9004      	str	r0, [sp, #16]
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	f43f ae5d 	beq.w	800783c <_strtod_l+0x444>
 8007b82:	9a06      	ldr	r2, [sp, #24]
 8007b84:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007b86:	4658      	mov	r0, fp
 8007b88:	f001 f8e4 	bl	8008d54 <__mdiff>
 8007b8c:	4680      	mov	r8, r0
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	f43f ae54 	beq.w	800783c <_strtod_l+0x444>
 8007b94:	2400      	movs	r4, #0
 8007b96:	68c3      	ldr	r3, [r0, #12]
 8007b98:	9904      	ldr	r1, [sp, #16]
 8007b9a:	60c4      	str	r4, [r0, #12]
 8007b9c:	930c      	str	r3, [sp, #48]	; 0x30
 8007b9e:	f001 f8bf 	bl	8008d20 <__mcmp>
 8007ba2:	42a0      	cmp	r0, r4
 8007ba4:	da54      	bge.n	8007c50 <_strtod_l+0x858>
 8007ba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ba8:	b9f3      	cbnz	r3, 8007be8 <_strtod_l+0x7f0>
 8007baa:	f1b9 0f00 	cmp.w	r9, #0
 8007bae:	d11b      	bne.n	8007be8 <_strtod_l+0x7f0>
 8007bb0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8007bb4:	b9c3      	cbnz	r3, 8007be8 <_strtod_l+0x7f0>
 8007bb6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007bba:	0d1b      	lsrs	r3, r3, #20
 8007bbc:	051b      	lsls	r3, r3, #20
 8007bbe:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007bc2:	d911      	bls.n	8007be8 <_strtod_l+0x7f0>
 8007bc4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007bc8:	b91b      	cbnz	r3, 8007bd2 <_strtod_l+0x7da>
 8007bca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	dd0a      	ble.n	8007be8 <_strtod_l+0x7f0>
 8007bd2:	4641      	mov	r1, r8
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	4658      	mov	r0, fp
 8007bd8:	f001 f84e 	bl	8008c78 <__lshift>
 8007bdc:	9904      	ldr	r1, [sp, #16]
 8007bde:	4680      	mov	r8, r0
 8007be0:	f001 f89e 	bl	8008d20 <__mcmp>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	dc68      	bgt.n	8007cba <_strtod_l+0x8c2>
 8007be8:	9b05      	ldr	r3, [sp, #20]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d172      	bne.n	8007cd4 <_strtod_l+0x8dc>
 8007bee:	e630      	b.n	8007852 <_strtod_l+0x45a>
 8007bf0:	f018 0f01 	tst.w	r8, #1
 8007bf4:	d004      	beq.n	8007c00 <_strtod_l+0x808>
 8007bf6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007bfa:	f7f8 fc6d 	bl	80004d8 <__aeabi_dmul>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007c04:	3508      	adds	r5, #8
 8007c06:	e6dc      	b.n	80079c2 <_strtod_l+0x5ca>
 8007c08:	f04f 32ff 	mov.w	r2, #4294967295
 8007c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c10:	ea03 0909 	and.w	r9, r3, r9
 8007c14:	e6f6      	b.n	8007a04 <_strtod_l+0x60c>
 8007c16:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8007c1a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007c1e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007c22:	35e2      	adds	r5, #226	; 0xe2
 8007c24:	fa07 f505 	lsl.w	r5, r7, r5
 8007c28:	970f      	str	r7, [sp, #60]	; 0x3c
 8007c2a:	e75c      	b.n	8007ae6 <_strtod_l+0x6ee>
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	2500      	movs	r5, #0
 8007c30:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c32:	e758      	b.n	8007ae6 <_strtod_l+0x6ee>
 8007c34:	463a      	mov	r2, r7
 8007c36:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007c38:	4658      	mov	r0, fp
 8007c3a:	f001 f81d 	bl	8008c78 <__lshift>
 8007c3e:	901c      	str	r0, [sp, #112]	; 0x70
 8007c40:	2800      	cmp	r0, #0
 8007c42:	f47f af7c 	bne.w	8007b3e <_strtod_l+0x746>
 8007c46:	e5f9      	b.n	800783c <_strtod_l+0x444>
 8007c48:	0800aae8 	.word	0x0800aae8
 8007c4c:	fffffc02 	.word	0xfffffc02
 8007c50:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007c54:	f040 8089 	bne.w	8007d6a <_strtod_l+0x972>
 8007c58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c5a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8007c5e:	b342      	cbz	r2, 8007cb2 <_strtod_l+0x8ba>
 8007c60:	4aaf      	ldr	r2, [pc, #700]	; (8007f20 <_strtod_l+0xb28>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d156      	bne.n	8007d14 <_strtod_l+0x91c>
 8007c66:	9b05      	ldr	r3, [sp, #20]
 8007c68:	4648      	mov	r0, r9
 8007c6a:	b1eb      	cbz	r3, 8007ca8 <_strtod_l+0x8b0>
 8007c6c:	4653      	mov	r3, sl
 8007c6e:	4aad      	ldr	r2, [pc, #692]	; (8007f24 <_strtod_l+0xb2c>)
 8007c70:	f04f 31ff 	mov.w	r1, #4294967295
 8007c74:	401a      	ands	r2, r3
 8007c76:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007c7a:	d818      	bhi.n	8007cae <_strtod_l+0x8b6>
 8007c7c:	0d12      	lsrs	r2, r2, #20
 8007c7e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007c82:	fa01 f303 	lsl.w	r3, r1, r3
 8007c86:	4298      	cmp	r0, r3
 8007c88:	d144      	bne.n	8007d14 <_strtod_l+0x91c>
 8007c8a:	4ba7      	ldr	r3, [pc, #668]	; (8007f28 <_strtod_l+0xb30>)
 8007c8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d102      	bne.n	8007c98 <_strtod_l+0x8a0>
 8007c92:	3001      	adds	r0, #1
 8007c94:	f43f add2 	beq.w	800783c <_strtod_l+0x444>
 8007c98:	4ba2      	ldr	r3, [pc, #648]	; (8007f24 <_strtod_l+0xb2c>)
 8007c9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c9c:	f04f 0900 	mov.w	r9, #0
 8007ca0:	401a      	ands	r2, r3
 8007ca2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8007ca6:	e79f      	b.n	8007be8 <_strtod_l+0x7f0>
 8007ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cac:	e7eb      	b.n	8007c86 <_strtod_l+0x88e>
 8007cae:	460b      	mov	r3, r1
 8007cb0:	e7e9      	b.n	8007c86 <_strtod_l+0x88e>
 8007cb2:	bb7b      	cbnz	r3, 8007d14 <_strtod_l+0x91c>
 8007cb4:	f1b9 0f00 	cmp.w	r9, #0
 8007cb8:	d12c      	bne.n	8007d14 <_strtod_l+0x91c>
 8007cba:	9905      	ldr	r1, [sp, #20]
 8007cbc:	4653      	mov	r3, sl
 8007cbe:	4a99      	ldr	r2, [pc, #612]	; (8007f24 <_strtod_l+0xb2c>)
 8007cc0:	b1f1      	cbz	r1, 8007d00 <_strtod_l+0x908>
 8007cc2:	ea02 010a 	and.w	r1, r2, sl
 8007cc6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007cca:	dc19      	bgt.n	8007d00 <_strtod_l+0x908>
 8007ccc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007cd0:	f77f ae51 	ble.w	8007976 <_strtod_l+0x57e>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	4a95      	ldr	r2, [pc, #596]	; (8007f2c <_strtod_l+0xb34>)
 8007cd8:	4648      	mov	r0, r9
 8007cda:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007cde:	4651      	mov	r1, sl
 8007ce0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007ce4:	f7f8 fbf8 	bl	80004d8 <__aeabi_dmul>
 8007ce8:	4681      	mov	r9, r0
 8007cea:	468a      	mov	sl, r1
 8007cec:	2900      	cmp	r1, #0
 8007cee:	f47f adb0 	bne.w	8007852 <_strtod_l+0x45a>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	f47f adad 	bne.w	8007852 <_strtod_l+0x45a>
 8007cf8:	2322      	movs	r3, #34	; 0x22
 8007cfa:	f8cb 3000 	str.w	r3, [fp]
 8007cfe:	e5a8      	b.n	8007852 <_strtod_l+0x45a>
 8007d00:	4013      	ands	r3, r2
 8007d02:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007d06:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8007d0a:	f04f 39ff 	mov.w	r9, #4294967295
 8007d0e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8007d12:	e769      	b.n	8007be8 <_strtod_l+0x7f0>
 8007d14:	b19d      	cbz	r5, 8007d3e <_strtod_l+0x946>
 8007d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d18:	421d      	tst	r5, r3
 8007d1a:	f43f af65 	beq.w	8007be8 <_strtod_l+0x7f0>
 8007d1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d20:	9a05      	ldr	r2, [sp, #20]
 8007d22:	4648      	mov	r0, r9
 8007d24:	4651      	mov	r1, sl
 8007d26:	b173      	cbz	r3, 8007d46 <_strtod_l+0x94e>
 8007d28:	f7ff fb45 	bl	80073b6 <sulp>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d34:	f7f8 fa1a 	bl	800016c <__adddf3>
 8007d38:	4681      	mov	r9, r0
 8007d3a:	468a      	mov	sl, r1
 8007d3c:	e754      	b.n	8007be8 <_strtod_l+0x7f0>
 8007d3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d40:	ea13 0f09 	tst.w	r3, r9
 8007d44:	e7e9      	b.n	8007d1a <_strtod_l+0x922>
 8007d46:	f7ff fb36 	bl	80073b6 <sulp>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d52:	f7f8 fa09 	bl	8000168 <__aeabi_dsub>
 8007d56:	2200      	movs	r2, #0
 8007d58:	2300      	movs	r3, #0
 8007d5a:	4681      	mov	r9, r0
 8007d5c:	468a      	mov	sl, r1
 8007d5e:	f7f8 fe23 	bl	80009a8 <__aeabi_dcmpeq>
 8007d62:	2800      	cmp	r0, #0
 8007d64:	f47f ae07 	bne.w	8007976 <_strtod_l+0x57e>
 8007d68:	e73e      	b.n	8007be8 <_strtod_l+0x7f0>
 8007d6a:	9904      	ldr	r1, [sp, #16]
 8007d6c:	4640      	mov	r0, r8
 8007d6e:	f001 f914 	bl	8008f9a <__ratio>
 8007d72:	2200      	movs	r2, #0
 8007d74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d78:	4606      	mov	r6, r0
 8007d7a:	460f      	mov	r7, r1
 8007d7c:	f7f8 fe28 	bl	80009d0 <__aeabi_dcmple>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d075      	beq.n	8007e70 <_strtod_l+0xa78>
 8007d84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d047      	beq.n	8007e1a <_strtod_l+0xa22>
 8007d8a:	2600      	movs	r6, #0
 8007d8c:	4f68      	ldr	r7, [pc, #416]	; (8007f30 <_strtod_l+0xb38>)
 8007d8e:	4d68      	ldr	r5, [pc, #416]	; (8007f30 <_strtod_l+0xb38>)
 8007d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d96:	0d1b      	lsrs	r3, r3, #20
 8007d98:	051b      	lsls	r3, r3, #20
 8007d9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d9e:	4b65      	ldr	r3, [pc, #404]	; (8007f34 <_strtod_l+0xb3c>)
 8007da0:	429a      	cmp	r2, r3
 8007da2:	f040 80cf 	bne.w	8007f44 <_strtod_l+0xb4c>
 8007da6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007daa:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db0:	4648      	mov	r0, r9
 8007db2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8007db6:	4651      	mov	r1, sl
 8007db8:	f001 f82a 	bl	8008e10 <__ulp>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	4639      	mov	r1, r7
 8007dc4:	f7f8 fb88 	bl	80004d8 <__aeabi_dmul>
 8007dc8:	464a      	mov	r2, r9
 8007dca:	4653      	mov	r3, sl
 8007dcc:	f7f8 f9ce 	bl	800016c <__adddf3>
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	4954      	ldr	r1, [pc, #336]	; (8007f24 <_strtod_l+0xb2c>)
 8007dd4:	4a58      	ldr	r2, [pc, #352]	; (8007f38 <_strtod_l+0xb40>)
 8007dd6:	4019      	ands	r1, r3
 8007dd8:	4291      	cmp	r1, r2
 8007dda:	4681      	mov	r9, r0
 8007ddc:	d95e      	bls.n	8007e9c <_strtod_l+0xaa4>
 8007dde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007de0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d103      	bne.n	8007df0 <_strtod_l+0x9f8>
 8007de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dea:	3301      	adds	r3, #1
 8007dec:	f43f ad26 	beq.w	800783c <_strtod_l+0x444>
 8007df0:	f04f 39ff 	mov.w	r9, #4294967295
 8007df4:	f8df a130 	ldr.w	sl, [pc, #304]	; 8007f28 <_strtod_l+0xb30>
 8007df8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007dfa:	4658      	mov	r0, fp
 8007dfc:	f000 fd72 	bl	80088e4 <_Bfree>
 8007e00:	9906      	ldr	r1, [sp, #24]
 8007e02:	4658      	mov	r0, fp
 8007e04:	f000 fd6e 	bl	80088e4 <_Bfree>
 8007e08:	9904      	ldr	r1, [sp, #16]
 8007e0a:	4658      	mov	r0, fp
 8007e0c:	f000 fd6a 	bl	80088e4 <_Bfree>
 8007e10:	4641      	mov	r1, r8
 8007e12:	4658      	mov	r0, fp
 8007e14:	f000 fd66 	bl	80088e4 <_Bfree>
 8007e18:	e617      	b.n	8007a4a <_strtod_l+0x652>
 8007e1a:	f1b9 0f00 	cmp.w	r9, #0
 8007e1e:	d119      	bne.n	8007e54 <_strtod_l+0xa5c>
 8007e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e26:	b9e3      	cbnz	r3, 8007e62 <_strtod_l+0xa6a>
 8007e28:	2200      	movs	r2, #0
 8007e2a:	4b41      	ldr	r3, [pc, #260]	; (8007f30 <_strtod_l+0xb38>)
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	4639      	mov	r1, r7
 8007e30:	f7f8 fdc4 	bl	80009bc <__aeabi_dcmplt>
 8007e34:	b9c8      	cbnz	r0, 8007e6a <_strtod_l+0xa72>
 8007e36:	2200      	movs	r2, #0
 8007e38:	4b40      	ldr	r3, [pc, #256]	; (8007f3c <_strtod_l+0xb44>)
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	4639      	mov	r1, r7
 8007e3e:	f7f8 fb4b 	bl	80004d8 <__aeabi_dmul>
 8007e42:	4604      	mov	r4, r0
 8007e44:	460d      	mov	r5, r1
 8007e46:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007e4a:	9418      	str	r4, [sp, #96]	; 0x60
 8007e4c:	9319      	str	r3, [sp, #100]	; 0x64
 8007e4e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8007e52:	e79d      	b.n	8007d90 <_strtod_l+0x998>
 8007e54:	f1b9 0f01 	cmp.w	r9, #1
 8007e58:	d103      	bne.n	8007e62 <_strtod_l+0xa6a>
 8007e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f43f ad8a 	beq.w	8007976 <_strtod_l+0x57e>
 8007e62:	2600      	movs	r6, #0
 8007e64:	4f36      	ldr	r7, [pc, #216]	; (8007f40 <_strtod_l+0xb48>)
 8007e66:	2400      	movs	r4, #0
 8007e68:	e791      	b.n	8007d8e <_strtod_l+0x996>
 8007e6a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007e6c:	4d33      	ldr	r5, [pc, #204]	; (8007f3c <_strtod_l+0xb44>)
 8007e6e:	e7ea      	b.n	8007e46 <_strtod_l+0xa4e>
 8007e70:	4b32      	ldr	r3, [pc, #200]	; (8007f3c <_strtod_l+0xb44>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	4630      	mov	r0, r6
 8007e76:	4639      	mov	r1, r7
 8007e78:	f7f8 fb2e 	bl	80004d8 <__aeabi_dmul>
 8007e7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e7e:	4604      	mov	r4, r0
 8007e80:	460d      	mov	r5, r1
 8007e82:	b933      	cbnz	r3, 8007e92 <_strtod_l+0xa9a>
 8007e84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e88:	9010      	str	r0, [sp, #64]	; 0x40
 8007e8a:	9311      	str	r3, [sp, #68]	; 0x44
 8007e8c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007e90:	e77e      	b.n	8007d90 <_strtod_l+0x998>
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007e9a:	e7f7      	b.n	8007e8c <_strtod_l+0xa94>
 8007e9c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8007ea0:	9b05      	ldr	r3, [sp, #20]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1a8      	bne.n	8007df8 <_strtod_l+0xa00>
 8007ea6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007eaa:	0d1b      	lsrs	r3, r3, #20
 8007eac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007eae:	051b      	lsls	r3, r3, #20
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	4656      	mov	r6, sl
 8007eb4:	d1a0      	bne.n	8007df8 <_strtod_l+0xa00>
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f7f8 fdbd 	bl	8000a38 <__aeabi_d2iz>
 8007ebe:	f7f8 faa1 	bl	8000404 <__aeabi_i2d>
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f7f8 f94d 	bl	8000168 <__aeabi_dsub>
 8007ece:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	460d      	mov	r5, r1
 8007ed4:	b933      	cbnz	r3, 8007ee4 <_strtod_l+0xaec>
 8007ed6:	f1b9 0f00 	cmp.w	r9, #0
 8007eda:	d103      	bne.n	8007ee4 <_strtod_l+0xaec>
 8007edc:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8007ee0:	2e00      	cmp	r6, #0
 8007ee2:	d06a      	beq.n	8007fba <_strtod_l+0xbc2>
 8007ee4:	a30a      	add	r3, pc, #40	; (adr r3, 8007f10 <_strtod_l+0xb18>)
 8007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eea:	4620      	mov	r0, r4
 8007eec:	4629      	mov	r1, r5
 8007eee:	f7f8 fd65 	bl	80009bc <__aeabi_dcmplt>
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	f47f acad 	bne.w	8007852 <_strtod_l+0x45a>
 8007ef8:	a307      	add	r3, pc, #28	; (adr r3, 8007f18 <_strtod_l+0xb20>)
 8007efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efe:	4620      	mov	r0, r4
 8007f00:	4629      	mov	r1, r5
 8007f02:	f7f8 fd79 	bl	80009f8 <__aeabi_dcmpgt>
 8007f06:	2800      	cmp	r0, #0
 8007f08:	f43f af76 	beq.w	8007df8 <_strtod_l+0xa00>
 8007f0c:	e4a1      	b.n	8007852 <_strtod_l+0x45a>
 8007f0e:	bf00      	nop
 8007f10:	94a03595 	.word	0x94a03595
 8007f14:	3fdfffff 	.word	0x3fdfffff
 8007f18:	35afe535 	.word	0x35afe535
 8007f1c:	3fe00000 	.word	0x3fe00000
 8007f20:	000fffff 	.word	0x000fffff
 8007f24:	7ff00000 	.word	0x7ff00000
 8007f28:	7fefffff 	.word	0x7fefffff
 8007f2c:	39500000 	.word	0x39500000
 8007f30:	3ff00000 	.word	0x3ff00000
 8007f34:	7fe00000 	.word	0x7fe00000
 8007f38:	7c9fffff 	.word	0x7c9fffff
 8007f3c:	3fe00000 	.word	0x3fe00000
 8007f40:	bff00000 	.word	0xbff00000
 8007f44:	9b05      	ldr	r3, [sp, #20]
 8007f46:	b313      	cbz	r3, 8007f8e <_strtod_l+0xb96>
 8007f48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f4a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007f4e:	d81e      	bhi.n	8007f8e <_strtod_l+0xb96>
 8007f50:	a325      	add	r3, pc, #148	; (adr r3, 8007fe8 <_strtod_l+0xbf0>)
 8007f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f56:	4620      	mov	r0, r4
 8007f58:	4629      	mov	r1, r5
 8007f5a:	f7f8 fd39 	bl	80009d0 <__aeabi_dcmple>
 8007f5e:	b190      	cbz	r0, 8007f86 <_strtod_l+0xb8e>
 8007f60:	4629      	mov	r1, r5
 8007f62:	4620      	mov	r0, r4
 8007f64:	f7f8 fd90 	bl	8000a88 <__aeabi_d2uiz>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	bf08      	it	eq
 8007f6c:	2001      	moveq	r0, #1
 8007f6e:	f7f8 fa39 	bl	80003e4 <__aeabi_ui2d>
 8007f72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f74:	4604      	mov	r4, r0
 8007f76:	460d      	mov	r5, r1
 8007f78:	b9d3      	cbnz	r3, 8007fb0 <_strtod_l+0xbb8>
 8007f7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f7e:	9012      	str	r0, [sp, #72]	; 0x48
 8007f80:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f82:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007f86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f88:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007f8c:	1a9f      	subs	r7, r3, r2
 8007f8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f92:	f000 ff3d 	bl	8008e10 <__ulp>
 8007f96:	4602      	mov	r2, r0
 8007f98:	460b      	mov	r3, r1
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	4639      	mov	r1, r7
 8007f9e:	f7f8 fa9b 	bl	80004d8 <__aeabi_dmul>
 8007fa2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007fa6:	f7f8 f8e1 	bl	800016c <__adddf3>
 8007faa:	4681      	mov	r9, r0
 8007fac:	468a      	mov	sl, r1
 8007fae:	e777      	b.n	8007ea0 <_strtod_l+0xaa8>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007fb8:	e7e3      	b.n	8007f82 <_strtod_l+0xb8a>
 8007fba:	a30d      	add	r3, pc, #52	; (adr r3, 8007ff0 <_strtod_l+0xbf8>)
 8007fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc0:	f7f8 fcfc 	bl	80009bc <__aeabi_dcmplt>
 8007fc4:	e79f      	b.n	8007f06 <_strtod_l+0xb0e>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	930d      	str	r3, [sp, #52]	; 0x34
 8007fca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007fcc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007fce:	6013      	str	r3, [r2, #0]
 8007fd0:	f7ff ba55 	b.w	800747e <_strtod_l+0x86>
 8007fd4:	2b65      	cmp	r3, #101	; 0x65
 8007fd6:	f04f 0200 	mov.w	r2, #0
 8007fda:	f43f ab42 	beq.w	8007662 <_strtod_l+0x26a>
 8007fde:	2101      	movs	r1, #1
 8007fe0:	4614      	mov	r4, r2
 8007fe2:	9105      	str	r1, [sp, #20]
 8007fe4:	f7ff babf 	b.w	8007566 <_strtod_l+0x16e>
 8007fe8:	ffc00000 	.word	0xffc00000
 8007fec:	41dfffff 	.word	0x41dfffff
 8007ff0:	94a03595 	.word	0x94a03595
 8007ff4:	3fcfffff 	.word	0x3fcfffff

08007ff8 <strtod>:
 8007ff8:	4b06      	ldr	r3, [pc, #24]	; (8008014 <strtod+0x1c>)
 8007ffa:	b410      	push	{r4}
 8007ffc:	681c      	ldr	r4, [r3, #0]
 8007ffe:	4a06      	ldr	r2, [pc, #24]	; (8008018 <strtod+0x20>)
 8008000:	6a23      	ldr	r3, [r4, #32]
 8008002:	2b00      	cmp	r3, #0
 8008004:	bf08      	it	eq
 8008006:	4613      	moveq	r3, r2
 8008008:	460a      	mov	r2, r1
 800800a:	4601      	mov	r1, r0
 800800c:	4620      	mov	r0, r4
 800800e:	bc10      	pop	{r4}
 8008010:	f7ff b9f2 	b.w	80073f8 <_strtod_l>
 8008014:	200001b4 	.word	0x200001b4
 8008018:	20000218 	.word	0x20000218

0800801c <_strtol_l.isra.0>:
 800801c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008020:	4680      	mov	r8, r0
 8008022:	4689      	mov	r9, r1
 8008024:	4692      	mov	sl, r2
 8008026:	461e      	mov	r6, r3
 8008028:	460f      	mov	r7, r1
 800802a:	463d      	mov	r5, r7
 800802c:	9808      	ldr	r0, [sp, #32]
 800802e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008032:	f000 fbfd 	bl	8008830 <__locale_ctype_ptr_l>
 8008036:	4420      	add	r0, r4
 8008038:	7843      	ldrb	r3, [r0, #1]
 800803a:	f013 0308 	ands.w	r3, r3, #8
 800803e:	d132      	bne.n	80080a6 <_strtol_l.isra.0+0x8a>
 8008040:	2c2d      	cmp	r4, #45	; 0x2d
 8008042:	d132      	bne.n	80080aa <_strtol_l.isra.0+0x8e>
 8008044:	2201      	movs	r2, #1
 8008046:	787c      	ldrb	r4, [r7, #1]
 8008048:	1cbd      	adds	r5, r7, #2
 800804a:	2e00      	cmp	r6, #0
 800804c:	d05d      	beq.n	800810a <_strtol_l.isra.0+0xee>
 800804e:	2e10      	cmp	r6, #16
 8008050:	d109      	bne.n	8008066 <_strtol_l.isra.0+0x4a>
 8008052:	2c30      	cmp	r4, #48	; 0x30
 8008054:	d107      	bne.n	8008066 <_strtol_l.isra.0+0x4a>
 8008056:	782b      	ldrb	r3, [r5, #0]
 8008058:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800805c:	2b58      	cmp	r3, #88	; 0x58
 800805e:	d14f      	bne.n	8008100 <_strtol_l.isra.0+0xe4>
 8008060:	2610      	movs	r6, #16
 8008062:	786c      	ldrb	r4, [r5, #1]
 8008064:	3502      	adds	r5, #2
 8008066:	2a00      	cmp	r2, #0
 8008068:	bf14      	ite	ne
 800806a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800806e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008072:	2700      	movs	r7, #0
 8008074:	fbb1 fcf6 	udiv	ip, r1, r6
 8008078:	4638      	mov	r0, r7
 800807a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800807e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008082:	2b09      	cmp	r3, #9
 8008084:	d817      	bhi.n	80080b6 <_strtol_l.isra.0+0x9a>
 8008086:	461c      	mov	r4, r3
 8008088:	42a6      	cmp	r6, r4
 800808a:	dd23      	ble.n	80080d4 <_strtol_l.isra.0+0xb8>
 800808c:	1c7b      	adds	r3, r7, #1
 800808e:	d007      	beq.n	80080a0 <_strtol_l.isra.0+0x84>
 8008090:	4584      	cmp	ip, r0
 8008092:	d31c      	bcc.n	80080ce <_strtol_l.isra.0+0xb2>
 8008094:	d101      	bne.n	800809a <_strtol_l.isra.0+0x7e>
 8008096:	45a6      	cmp	lr, r4
 8008098:	db19      	blt.n	80080ce <_strtol_l.isra.0+0xb2>
 800809a:	2701      	movs	r7, #1
 800809c:	fb00 4006 	mla	r0, r0, r6, r4
 80080a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080a4:	e7eb      	b.n	800807e <_strtol_l.isra.0+0x62>
 80080a6:	462f      	mov	r7, r5
 80080a8:	e7bf      	b.n	800802a <_strtol_l.isra.0+0xe>
 80080aa:	2c2b      	cmp	r4, #43	; 0x2b
 80080ac:	bf04      	itt	eq
 80080ae:	1cbd      	addeq	r5, r7, #2
 80080b0:	787c      	ldrbeq	r4, [r7, #1]
 80080b2:	461a      	mov	r2, r3
 80080b4:	e7c9      	b.n	800804a <_strtol_l.isra.0+0x2e>
 80080b6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80080ba:	2b19      	cmp	r3, #25
 80080bc:	d801      	bhi.n	80080c2 <_strtol_l.isra.0+0xa6>
 80080be:	3c37      	subs	r4, #55	; 0x37
 80080c0:	e7e2      	b.n	8008088 <_strtol_l.isra.0+0x6c>
 80080c2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80080c6:	2b19      	cmp	r3, #25
 80080c8:	d804      	bhi.n	80080d4 <_strtol_l.isra.0+0xb8>
 80080ca:	3c57      	subs	r4, #87	; 0x57
 80080cc:	e7dc      	b.n	8008088 <_strtol_l.isra.0+0x6c>
 80080ce:	f04f 37ff 	mov.w	r7, #4294967295
 80080d2:	e7e5      	b.n	80080a0 <_strtol_l.isra.0+0x84>
 80080d4:	1c7b      	adds	r3, r7, #1
 80080d6:	d108      	bne.n	80080ea <_strtol_l.isra.0+0xce>
 80080d8:	2322      	movs	r3, #34	; 0x22
 80080da:	4608      	mov	r0, r1
 80080dc:	f8c8 3000 	str.w	r3, [r8]
 80080e0:	f1ba 0f00 	cmp.w	sl, #0
 80080e4:	d107      	bne.n	80080f6 <_strtol_l.isra.0+0xda>
 80080e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ea:	b102      	cbz	r2, 80080ee <_strtol_l.isra.0+0xd2>
 80080ec:	4240      	negs	r0, r0
 80080ee:	f1ba 0f00 	cmp.w	sl, #0
 80080f2:	d0f8      	beq.n	80080e6 <_strtol_l.isra.0+0xca>
 80080f4:	b10f      	cbz	r7, 80080fa <_strtol_l.isra.0+0xde>
 80080f6:	f105 39ff 	add.w	r9, r5, #4294967295
 80080fa:	f8ca 9000 	str.w	r9, [sl]
 80080fe:	e7f2      	b.n	80080e6 <_strtol_l.isra.0+0xca>
 8008100:	2430      	movs	r4, #48	; 0x30
 8008102:	2e00      	cmp	r6, #0
 8008104:	d1af      	bne.n	8008066 <_strtol_l.isra.0+0x4a>
 8008106:	2608      	movs	r6, #8
 8008108:	e7ad      	b.n	8008066 <_strtol_l.isra.0+0x4a>
 800810a:	2c30      	cmp	r4, #48	; 0x30
 800810c:	d0a3      	beq.n	8008056 <_strtol_l.isra.0+0x3a>
 800810e:	260a      	movs	r6, #10
 8008110:	e7a9      	b.n	8008066 <_strtol_l.isra.0+0x4a>
	...

08008114 <_strtol_r>:
 8008114:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008116:	4c06      	ldr	r4, [pc, #24]	; (8008130 <_strtol_r+0x1c>)
 8008118:	4d06      	ldr	r5, [pc, #24]	; (8008134 <_strtol_r+0x20>)
 800811a:	6824      	ldr	r4, [r4, #0]
 800811c:	6a24      	ldr	r4, [r4, #32]
 800811e:	2c00      	cmp	r4, #0
 8008120:	bf08      	it	eq
 8008122:	462c      	moveq	r4, r5
 8008124:	9400      	str	r4, [sp, #0]
 8008126:	f7ff ff79 	bl	800801c <_strtol_l.isra.0>
 800812a:	b003      	add	sp, #12
 800812c:	bd30      	pop	{r4, r5, pc}
 800812e:	bf00      	nop
 8008130:	200001b4 	.word	0x200001b4
 8008134:	20000218 	.word	0x20000218

08008138 <strtol>:
 8008138:	4b08      	ldr	r3, [pc, #32]	; (800815c <strtol+0x24>)
 800813a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800813c:	681c      	ldr	r4, [r3, #0]
 800813e:	4d08      	ldr	r5, [pc, #32]	; (8008160 <strtol+0x28>)
 8008140:	6a23      	ldr	r3, [r4, #32]
 8008142:	2b00      	cmp	r3, #0
 8008144:	bf08      	it	eq
 8008146:	462b      	moveq	r3, r5
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	4613      	mov	r3, r2
 800814c:	460a      	mov	r2, r1
 800814e:	4601      	mov	r1, r0
 8008150:	4620      	mov	r0, r4
 8008152:	f7ff ff63 	bl	800801c <_strtol_l.isra.0>
 8008156:	b003      	add	sp, #12
 8008158:	bd30      	pop	{r4, r5, pc}
 800815a:	bf00      	nop
 800815c:	200001b4 	.word	0x200001b4
 8008160:	20000218 	.word	0x20000218

08008164 <__utoa>:
 8008164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008166:	b08b      	sub	sp, #44	; 0x2c
 8008168:	4605      	mov	r5, r0
 800816a:	460c      	mov	r4, r1
 800816c:	466e      	mov	r6, sp
 800816e:	4b1b      	ldr	r3, [pc, #108]	; (80081dc <__utoa+0x78>)
 8008170:	f103 0c20 	add.w	ip, r3, #32
 8008174:	4637      	mov	r7, r6
 8008176:	6818      	ldr	r0, [r3, #0]
 8008178:	6859      	ldr	r1, [r3, #4]
 800817a:	3308      	adds	r3, #8
 800817c:	c703      	stmia	r7!, {r0, r1}
 800817e:	4563      	cmp	r3, ip
 8008180:	463e      	mov	r6, r7
 8008182:	d1f7      	bne.n	8008174 <__utoa+0x10>
 8008184:	6818      	ldr	r0, [r3, #0]
 8008186:	791b      	ldrb	r3, [r3, #4]
 8008188:	6038      	str	r0, [r7, #0]
 800818a:	713b      	strb	r3, [r7, #4]
 800818c:	1e93      	subs	r3, r2, #2
 800818e:	2b22      	cmp	r3, #34	; 0x22
 8008190:	f04f 0300 	mov.w	r3, #0
 8008194:	d904      	bls.n	80081a0 <__utoa+0x3c>
 8008196:	7023      	strb	r3, [r4, #0]
 8008198:	461c      	mov	r4, r3
 800819a:	4620      	mov	r0, r4
 800819c:	b00b      	add	sp, #44	; 0x2c
 800819e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081a0:	1e66      	subs	r6, r4, #1
 80081a2:	fbb5 f0f2 	udiv	r0, r5, r2
 80081a6:	fb02 5510 	mls	r5, r2, r0, r5
 80081aa:	af0a      	add	r7, sp, #40	; 0x28
 80081ac:	443d      	add	r5, r7
 80081ae:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80081b2:	1c59      	adds	r1, r3, #1
 80081b4:	f806 5f01 	strb.w	r5, [r6, #1]!
 80081b8:	4605      	mov	r5, r0
 80081ba:	b968      	cbnz	r0, 80081d8 <__utoa+0x74>
 80081bc:	4622      	mov	r2, r4
 80081be:	5460      	strb	r0, [r4, r1]
 80081c0:	4423      	add	r3, r4
 80081c2:	1b19      	subs	r1, r3, r4
 80081c4:	1b10      	subs	r0, r2, r4
 80081c6:	4281      	cmp	r1, r0
 80081c8:	dde7      	ble.n	800819a <__utoa+0x36>
 80081ca:	7811      	ldrb	r1, [r2, #0]
 80081cc:	7818      	ldrb	r0, [r3, #0]
 80081ce:	f802 0b01 	strb.w	r0, [r2], #1
 80081d2:	f803 1901 	strb.w	r1, [r3], #-1
 80081d6:	e7f4      	b.n	80081c2 <__utoa+0x5e>
 80081d8:	460b      	mov	r3, r1
 80081da:	e7e2      	b.n	80081a2 <__utoa+0x3e>
 80081dc:	0800ab10 	.word	0x0800ab10

080081e0 <rshift>:
 80081e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081e2:	6906      	ldr	r6, [r0, #16]
 80081e4:	114b      	asrs	r3, r1, #5
 80081e6:	429e      	cmp	r6, r3
 80081e8:	f100 0414 	add.w	r4, r0, #20
 80081ec:	dd31      	ble.n	8008252 <rshift+0x72>
 80081ee:	f011 011f 	ands.w	r1, r1, #31
 80081f2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80081f6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80081fa:	d108      	bne.n	800820e <rshift+0x2e>
 80081fc:	4621      	mov	r1, r4
 80081fe:	42b2      	cmp	r2, r6
 8008200:	460b      	mov	r3, r1
 8008202:	d211      	bcs.n	8008228 <rshift+0x48>
 8008204:	f852 3b04 	ldr.w	r3, [r2], #4
 8008208:	f841 3b04 	str.w	r3, [r1], #4
 800820c:	e7f7      	b.n	80081fe <rshift+0x1e>
 800820e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008212:	4623      	mov	r3, r4
 8008214:	f1c1 0c20 	rsb	ip, r1, #32
 8008218:	40cd      	lsrs	r5, r1
 800821a:	3204      	adds	r2, #4
 800821c:	42b2      	cmp	r2, r6
 800821e:	4617      	mov	r7, r2
 8008220:	d30d      	bcc.n	800823e <rshift+0x5e>
 8008222:	601d      	str	r5, [r3, #0]
 8008224:	b105      	cbz	r5, 8008228 <rshift+0x48>
 8008226:	3304      	adds	r3, #4
 8008228:	42a3      	cmp	r3, r4
 800822a:	eba3 0204 	sub.w	r2, r3, r4
 800822e:	bf08      	it	eq
 8008230:	2300      	moveq	r3, #0
 8008232:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008236:	6102      	str	r2, [r0, #16]
 8008238:	bf08      	it	eq
 800823a:	6143      	streq	r3, [r0, #20]
 800823c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800823e:	683f      	ldr	r7, [r7, #0]
 8008240:	fa07 f70c 	lsl.w	r7, r7, ip
 8008244:	433d      	orrs	r5, r7
 8008246:	f843 5b04 	str.w	r5, [r3], #4
 800824a:	f852 5b04 	ldr.w	r5, [r2], #4
 800824e:	40cd      	lsrs	r5, r1
 8008250:	e7e4      	b.n	800821c <rshift+0x3c>
 8008252:	4623      	mov	r3, r4
 8008254:	e7e8      	b.n	8008228 <rshift+0x48>

08008256 <__hexdig_fun>:
 8008256:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800825a:	2b09      	cmp	r3, #9
 800825c:	d802      	bhi.n	8008264 <__hexdig_fun+0xe>
 800825e:	3820      	subs	r0, #32
 8008260:	b2c0      	uxtb	r0, r0
 8008262:	4770      	bx	lr
 8008264:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008268:	2b05      	cmp	r3, #5
 800826a:	d801      	bhi.n	8008270 <__hexdig_fun+0x1a>
 800826c:	3847      	subs	r0, #71	; 0x47
 800826e:	e7f7      	b.n	8008260 <__hexdig_fun+0xa>
 8008270:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008274:	2b05      	cmp	r3, #5
 8008276:	d801      	bhi.n	800827c <__hexdig_fun+0x26>
 8008278:	3827      	subs	r0, #39	; 0x27
 800827a:	e7f1      	b.n	8008260 <__hexdig_fun+0xa>
 800827c:	2000      	movs	r0, #0
 800827e:	4770      	bx	lr

08008280 <__gethex>:
 8008280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008284:	b08b      	sub	sp, #44	; 0x2c
 8008286:	9002      	str	r0, [sp, #8]
 8008288:	9816      	ldr	r0, [sp, #88]	; 0x58
 800828a:	468a      	mov	sl, r1
 800828c:	4690      	mov	r8, r2
 800828e:	9306      	str	r3, [sp, #24]
 8008290:	f000 fae0 	bl	8008854 <__localeconv_l>
 8008294:	6803      	ldr	r3, [r0, #0]
 8008296:	f04f 0b00 	mov.w	fp, #0
 800829a:	4618      	mov	r0, r3
 800829c:	9303      	str	r3, [sp, #12]
 800829e:	f7f7 ff57 	bl	8000150 <strlen>
 80082a2:	9b03      	ldr	r3, [sp, #12]
 80082a4:	9001      	str	r0, [sp, #4]
 80082a6:	4403      	add	r3, r0
 80082a8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80082ac:	9307      	str	r3, [sp, #28]
 80082ae:	f8da 3000 	ldr.w	r3, [sl]
 80082b2:	3302      	adds	r3, #2
 80082b4:	461f      	mov	r7, r3
 80082b6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80082ba:	2830      	cmp	r0, #48	; 0x30
 80082bc:	d06c      	beq.n	8008398 <__gethex+0x118>
 80082be:	f7ff ffca 	bl	8008256 <__hexdig_fun>
 80082c2:	4604      	mov	r4, r0
 80082c4:	2800      	cmp	r0, #0
 80082c6:	d16a      	bne.n	800839e <__gethex+0x11e>
 80082c8:	9a01      	ldr	r2, [sp, #4]
 80082ca:	9903      	ldr	r1, [sp, #12]
 80082cc:	4638      	mov	r0, r7
 80082ce:	f001 fa78 	bl	80097c2 <strncmp>
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d166      	bne.n	80083a4 <__gethex+0x124>
 80082d6:	9b01      	ldr	r3, [sp, #4]
 80082d8:	5cf8      	ldrb	r0, [r7, r3]
 80082da:	18fe      	adds	r6, r7, r3
 80082dc:	f7ff ffbb 	bl	8008256 <__hexdig_fun>
 80082e0:	2800      	cmp	r0, #0
 80082e2:	d062      	beq.n	80083aa <__gethex+0x12a>
 80082e4:	4633      	mov	r3, r6
 80082e6:	7818      	ldrb	r0, [r3, #0]
 80082e8:	461f      	mov	r7, r3
 80082ea:	2830      	cmp	r0, #48	; 0x30
 80082ec:	f103 0301 	add.w	r3, r3, #1
 80082f0:	d0f9      	beq.n	80082e6 <__gethex+0x66>
 80082f2:	f7ff ffb0 	bl	8008256 <__hexdig_fun>
 80082f6:	fab0 f580 	clz	r5, r0
 80082fa:	4634      	mov	r4, r6
 80082fc:	f04f 0b01 	mov.w	fp, #1
 8008300:	096d      	lsrs	r5, r5, #5
 8008302:	463a      	mov	r2, r7
 8008304:	4616      	mov	r6, r2
 8008306:	7830      	ldrb	r0, [r6, #0]
 8008308:	3201      	adds	r2, #1
 800830a:	f7ff ffa4 	bl	8008256 <__hexdig_fun>
 800830e:	2800      	cmp	r0, #0
 8008310:	d1f8      	bne.n	8008304 <__gethex+0x84>
 8008312:	9a01      	ldr	r2, [sp, #4]
 8008314:	9903      	ldr	r1, [sp, #12]
 8008316:	4630      	mov	r0, r6
 8008318:	f001 fa53 	bl	80097c2 <strncmp>
 800831c:	b950      	cbnz	r0, 8008334 <__gethex+0xb4>
 800831e:	b954      	cbnz	r4, 8008336 <__gethex+0xb6>
 8008320:	9b01      	ldr	r3, [sp, #4]
 8008322:	18f4      	adds	r4, r6, r3
 8008324:	4622      	mov	r2, r4
 8008326:	4616      	mov	r6, r2
 8008328:	7830      	ldrb	r0, [r6, #0]
 800832a:	3201      	adds	r2, #1
 800832c:	f7ff ff93 	bl	8008256 <__hexdig_fun>
 8008330:	2800      	cmp	r0, #0
 8008332:	d1f8      	bne.n	8008326 <__gethex+0xa6>
 8008334:	b10c      	cbz	r4, 800833a <__gethex+0xba>
 8008336:	1ba4      	subs	r4, r4, r6
 8008338:	00a4      	lsls	r4, r4, #2
 800833a:	7833      	ldrb	r3, [r6, #0]
 800833c:	2b50      	cmp	r3, #80	; 0x50
 800833e:	d001      	beq.n	8008344 <__gethex+0xc4>
 8008340:	2b70      	cmp	r3, #112	; 0x70
 8008342:	d140      	bne.n	80083c6 <__gethex+0x146>
 8008344:	7873      	ldrb	r3, [r6, #1]
 8008346:	2b2b      	cmp	r3, #43	; 0x2b
 8008348:	d031      	beq.n	80083ae <__gethex+0x12e>
 800834a:	2b2d      	cmp	r3, #45	; 0x2d
 800834c:	d033      	beq.n	80083b6 <__gethex+0x136>
 800834e:	f04f 0900 	mov.w	r9, #0
 8008352:	1c71      	adds	r1, r6, #1
 8008354:	7808      	ldrb	r0, [r1, #0]
 8008356:	f7ff ff7e 	bl	8008256 <__hexdig_fun>
 800835a:	1e43      	subs	r3, r0, #1
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b18      	cmp	r3, #24
 8008360:	d831      	bhi.n	80083c6 <__gethex+0x146>
 8008362:	f1a0 0210 	sub.w	r2, r0, #16
 8008366:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800836a:	f7ff ff74 	bl	8008256 <__hexdig_fun>
 800836e:	1e43      	subs	r3, r0, #1
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b18      	cmp	r3, #24
 8008374:	d922      	bls.n	80083bc <__gethex+0x13c>
 8008376:	f1b9 0f00 	cmp.w	r9, #0
 800837a:	d000      	beq.n	800837e <__gethex+0xfe>
 800837c:	4252      	negs	r2, r2
 800837e:	4414      	add	r4, r2
 8008380:	f8ca 1000 	str.w	r1, [sl]
 8008384:	b30d      	cbz	r5, 80083ca <__gethex+0x14a>
 8008386:	f1bb 0f00 	cmp.w	fp, #0
 800838a:	bf0c      	ite	eq
 800838c:	2706      	moveq	r7, #6
 800838e:	2700      	movne	r7, #0
 8008390:	4638      	mov	r0, r7
 8008392:	b00b      	add	sp, #44	; 0x2c
 8008394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008398:	f10b 0b01 	add.w	fp, fp, #1
 800839c:	e78a      	b.n	80082b4 <__gethex+0x34>
 800839e:	2500      	movs	r5, #0
 80083a0:	462c      	mov	r4, r5
 80083a2:	e7ae      	b.n	8008302 <__gethex+0x82>
 80083a4:	463e      	mov	r6, r7
 80083a6:	2501      	movs	r5, #1
 80083a8:	e7c7      	b.n	800833a <__gethex+0xba>
 80083aa:	4604      	mov	r4, r0
 80083ac:	e7fb      	b.n	80083a6 <__gethex+0x126>
 80083ae:	f04f 0900 	mov.w	r9, #0
 80083b2:	1cb1      	adds	r1, r6, #2
 80083b4:	e7ce      	b.n	8008354 <__gethex+0xd4>
 80083b6:	f04f 0901 	mov.w	r9, #1
 80083ba:	e7fa      	b.n	80083b2 <__gethex+0x132>
 80083bc:	230a      	movs	r3, #10
 80083be:	fb03 0202 	mla	r2, r3, r2, r0
 80083c2:	3a10      	subs	r2, #16
 80083c4:	e7cf      	b.n	8008366 <__gethex+0xe6>
 80083c6:	4631      	mov	r1, r6
 80083c8:	e7da      	b.n	8008380 <__gethex+0x100>
 80083ca:	4629      	mov	r1, r5
 80083cc:	1bf3      	subs	r3, r6, r7
 80083ce:	3b01      	subs	r3, #1
 80083d0:	2b07      	cmp	r3, #7
 80083d2:	dc49      	bgt.n	8008468 <__gethex+0x1e8>
 80083d4:	9802      	ldr	r0, [sp, #8]
 80083d6:	f000 fa51 	bl	800887c <_Balloc>
 80083da:	f04f 0b00 	mov.w	fp, #0
 80083de:	4605      	mov	r5, r0
 80083e0:	46da      	mov	sl, fp
 80083e2:	9b01      	ldr	r3, [sp, #4]
 80083e4:	f100 0914 	add.w	r9, r0, #20
 80083e8:	f1c3 0301 	rsb	r3, r3, #1
 80083ec:	f8cd 9010 	str.w	r9, [sp, #16]
 80083f0:	9308      	str	r3, [sp, #32]
 80083f2:	42b7      	cmp	r7, r6
 80083f4:	d33b      	bcc.n	800846e <__gethex+0x1ee>
 80083f6:	9804      	ldr	r0, [sp, #16]
 80083f8:	f840 ab04 	str.w	sl, [r0], #4
 80083fc:	eba0 0009 	sub.w	r0, r0, r9
 8008400:	1080      	asrs	r0, r0, #2
 8008402:	6128      	str	r0, [r5, #16]
 8008404:	0147      	lsls	r7, r0, #5
 8008406:	4650      	mov	r0, sl
 8008408:	f000 fafc 	bl	8008a04 <__hi0bits>
 800840c:	f8d8 6000 	ldr.w	r6, [r8]
 8008410:	1a3f      	subs	r7, r7, r0
 8008412:	42b7      	cmp	r7, r6
 8008414:	dd64      	ble.n	80084e0 <__gethex+0x260>
 8008416:	1bbf      	subs	r7, r7, r6
 8008418:	4639      	mov	r1, r7
 800841a:	4628      	mov	r0, r5
 800841c:	f000 fe05 	bl	800902a <__any_on>
 8008420:	4682      	mov	sl, r0
 8008422:	b178      	cbz	r0, 8008444 <__gethex+0x1c4>
 8008424:	f04f 0a01 	mov.w	sl, #1
 8008428:	1e7b      	subs	r3, r7, #1
 800842a:	1159      	asrs	r1, r3, #5
 800842c:	f003 021f 	and.w	r2, r3, #31
 8008430:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008434:	fa0a f202 	lsl.w	r2, sl, r2
 8008438:	420a      	tst	r2, r1
 800843a:	d003      	beq.n	8008444 <__gethex+0x1c4>
 800843c:	4553      	cmp	r3, sl
 800843e:	dc46      	bgt.n	80084ce <__gethex+0x24e>
 8008440:	f04f 0a02 	mov.w	sl, #2
 8008444:	4639      	mov	r1, r7
 8008446:	4628      	mov	r0, r5
 8008448:	f7ff feca 	bl	80081e0 <rshift>
 800844c:	443c      	add	r4, r7
 800844e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008452:	42a3      	cmp	r3, r4
 8008454:	da52      	bge.n	80084fc <__gethex+0x27c>
 8008456:	4629      	mov	r1, r5
 8008458:	9802      	ldr	r0, [sp, #8]
 800845a:	f000 fa43 	bl	80088e4 <_Bfree>
 800845e:	2300      	movs	r3, #0
 8008460:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008462:	27a3      	movs	r7, #163	; 0xa3
 8008464:	6013      	str	r3, [r2, #0]
 8008466:	e793      	b.n	8008390 <__gethex+0x110>
 8008468:	3101      	adds	r1, #1
 800846a:	105b      	asrs	r3, r3, #1
 800846c:	e7b0      	b.n	80083d0 <__gethex+0x150>
 800846e:	1e73      	subs	r3, r6, #1
 8008470:	9305      	str	r3, [sp, #20]
 8008472:	9a07      	ldr	r2, [sp, #28]
 8008474:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008478:	4293      	cmp	r3, r2
 800847a:	d018      	beq.n	80084ae <__gethex+0x22e>
 800847c:	f1bb 0f20 	cmp.w	fp, #32
 8008480:	d107      	bne.n	8008492 <__gethex+0x212>
 8008482:	9b04      	ldr	r3, [sp, #16]
 8008484:	f8c3 a000 	str.w	sl, [r3]
 8008488:	f04f 0a00 	mov.w	sl, #0
 800848c:	46d3      	mov	fp, sl
 800848e:	3304      	adds	r3, #4
 8008490:	9304      	str	r3, [sp, #16]
 8008492:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008496:	f7ff fede 	bl	8008256 <__hexdig_fun>
 800849a:	f000 000f 	and.w	r0, r0, #15
 800849e:	fa00 f00b 	lsl.w	r0, r0, fp
 80084a2:	ea4a 0a00 	orr.w	sl, sl, r0
 80084a6:	f10b 0b04 	add.w	fp, fp, #4
 80084aa:	9b05      	ldr	r3, [sp, #20]
 80084ac:	e00d      	b.n	80084ca <__gethex+0x24a>
 80084ae:	9b05      	ldr	r3, [sp, #20]
 80084b0:	9a08      	ldr	r2, [sp, #32]
 80084b2:	4413      	add	r3, r2
 80084b4:	42bb      	cmp	r3, r7
 80084b6:	d3e1      	bcc.n	800847c <__gethex+0x1fc>
 80084b8:	4618      	mov	r0, r3
 80084ba:	9a01      	ldr	r2, [sp, #4]
 80084bc:	9903      	ldr	r1, [sp, #12]
 80084be:	9309      	str	r3, [sp, #36]	; 0x24
 80084c0:	f001 f97f 	bl	80097c2 <strncmp>
 80084c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c6:	2800      	cmp	r0, #0
 80084c8:	d1d8      	bne.n	800847c <__gethex+0x1fc>
 80084ca:	461e      	mov	r6, r3
 80084cc:	e791      	b.n	80083f2 <__gethex+0x172>
 80084ce:	1eb9      	subs	r1, r7, #2
 80084d0:	4628      	mov	r0, r5
 80084d2:	f000 fdaa 	bl	800902a <__any_on>
 80084d6:	2800      	cmp	r0, #0
 80084d8:	d0b2      	beq.n	8008440 <__gethex+0x1c0>
 80084da:	f04f 0a03 	mov.w	sl, #3
 80084de:	e7b1      	b.n	8008444 <__gethex+0x1c4>
 80084e0:	da09      	bge.n	80084f6 <__gethex+0x276>
 80084e2:	1bf7      	subs	r7, r6, r7
 80084e4:	4629      	mov	r1, r5
 80084e6:	463a      	mov	r2, r7
 80084e8:	9802      	ldr	r0, [sp, #8]
 80084ea:	f000 fbc5 	bl	8008c78 <__lshift>
 80084ee:	4605      	mov	r5, r0
 80084f0:	1be4      	subs	r4, r4, r7
 80084f2:	f100 0914 	add.w	r9, r0, #20
 80084f6:	f04f 0a00 	mov.w	sl, #0
 80084fa:	e7a8      	b.n	800844e <__gethex+0x1ce>
 80084fc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008500:	42a0      	cmp	r0, r4
 8008502:	dd6b      	ble.n	80085dc <__gethex+0x35c>
 8008504:	1b04      	subs	r4, r0, r4
 8008506:	42a6      	cmp	r6, r4
 8008508:	dc2e      	bgt.n	8008568 <__gethex+0x2e8>
 800850a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800850e:	2b02      	cmp	r3, #2
 8008510:	d022      	beq.n	8008558 <__gethex+0x2d8>
 8008512:	2b03      	cmp	r3, #3
 8008514:	d024      	beq.n	8008560 <__gethex+0x2e0>
 8008516:	2b01      	cmp	r3, #1
 8008518:	d115      	bne.n	8008546 <__gethex+0x2c6>
 800851a:	42a6      	cmp	r6, r4
 800851c:	d113      	bne.n	8008546 <__gethex+0x2c6>
 800851e:	2e01      	cmp	r6, #1
 8008520:	dc0b      	bgt.n	800853a <__gethex+0x2ba>
 8008522:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008526:	9a06      	ldr	r2, [sp, #24]
 8008528:	2762      	movs	r7, #98	; 0x62
 800852a:	6013      	str	r3, [r2, #0]
 800852c:	2301      	movs	r3, #1
 800852e:	612b      	str	r3, [r5, #16]
 8008530:	f8c9 3000 	str.w	r3, [r9]
 8008534:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008536:	601d      	str	r5, [r3, #0]
 8008538:	e72a      	b.n	8008390 <__gethex+0x110>
 800853a:	1e71      	subs	r1, r6, #1
 800853c:	4628      	mov	r0, r5
 800853e:	f000 fd74 	bl	800902a <__any_on>
 8008542:	2800      	cmp	r0, #0
 8008544:	d1ed      	bne.n	8008522 <__gethex+0x2a2>
 8008546:	4629      	mov	r1, r5
 8008548:	9802      	ldr	r0, [sp, #8]
 800854a:	f000 f9cb 	bl	80088e4 <_Bfree>
 800854e:	2300      	movs	r3, #0
 8008550:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008552:	2750      	movs	r7, #80	; 0x50
 8008554:	6013      	str	r3, [r2, #0]
 8008556:	e71b      	b.n	8008390 <__gethex+0x110>
 8008558:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800855a:	2b00      	cmp	r3, #0
 800855c:	d0e1      	beq.n	8008522 <__gethex+0x2a2>
 800855e:	e7f2      	b.n	8008546 <__gethex+0x2c6>
 8008560:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1dd      	bne.n	8008522 <__gethex+0x2a2>
 8008566:	e7ee      	b.n	8008546 <__gethex+0x2c6>
 8008568:	1e67      	subs	r7, r4, #1
 800856a:	f1ba 0f00 	cmp.w	sl, #0
 800856e:	d132      	bne.n	80085d6 <__gethex+0x356>
 8008570:	b127      	cbz	r7, 800857c <__gethex+0x2fc>
 8008572:	4639      	mov	r1, r7
 8008574:	4628      	mov	r0, r5
 8008576:	f000 fd58 	bl	800902a <__any_on>
 800857a:	4682      	mov	sl, r0
 800857c:	2301      	movs	r3, #1
 800857e:	117a      	asrs	r2, r7, #5
 8008580:	f007 071f 	and.w	r7, r7, #31
 8008584:	fa03 f707 	lsl.w	r7, r3, r7
 8008588:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800858c:	4621      	mov	r1, r4
 800858e:	421f      	tst	r7, r3
 8008590:	f04f 0702 	mov.w	r7, #2
 8008594:	4628      	mov	r0, r5
 8008596:	bf18      	it	ne
 8008598:	f04a 0a02 	orrne.w	sl, sl, #2
 800859c:	1b36      	subs	r6, r6, r4
 800859e:	f7ff fe1f 	bl	80081e0 <rshift>
 80085a2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80085a6:	f1ba 0f00 	cmp.w	sl, #0
 80085aa:	d048      	beq.n	800863e <__gethex+0x3be>
 80085ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d015      	beq.n	80085e0 <__gethex+0x360>
 80085b4:	2b03      	cmp	r3, #3
 80085b6:	d017      	beq.n	80085e8 <__gethex+0x368>
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d109      	bne.n	80085d0 <__gethex+0x350>
 80085bc:	f01a 0f02 	tst.w	sl, #2
 80085c0:	d006      	beq.n	80085d0 <__gethex+0x350>
 80085c2:	f8d9 3000 	ldr.w	r3, [r9]
 80085c6:	ea4a 0a03 	orr.w	sl, sl, r3
 80085ca:	f01a 0f01 	tst.w	sl, #1
 80085ce:	d10e      	bne.n	80085ee <__gethex+0x36e>
 80085d0:	f047 0710 	orr.w	r7, r7, #16
 80085d4:	e033      	b.n	800863e <__gethex+0x3be>
 80085d6:	f04f 0a01 	mov.w	sl, #1
 80085da:	e7cf      	b.n	800857c <__gethex+0x2fc>
 80085dc:	2701      	movs	r7, #1
 80085de:	e7e2      	b.n	80085a6 <__gethex+0x326>
 80085e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085e2:	f1c3 0301 	rsb	r3, r3, #1
 80085e6:	9315      	str	r3, [sp, #84]	; 0x54
 80085e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d0f0      	beq.n	80085d0 <__gethex+0x350>
 80085ee:	f04f 0c00 	mov.w	ip, #0
 80085f2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80085f6:	f105 0314 	add.w	r3, r5, #20
 80085fa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80085fe:	eb03 010a 	add.w	r1, r3, sl
 8008602:	4618      	mov	r0, r3
 8008604:	f853 2b04 	ldr.w	r2, [r3], #4
 8008608:	f1b2 3fff 	cmp.w	r2, #4294967295
 800860c:	d01c      	beq.n	8008648 <__gethex+0x3c8>
 800860e:	3201      	adds	r2, #1
 8008610:	6002      	str	r2, [r0, #0]
 8008612:	2f02      	cmp	r7, #2
 8008614:	f105 0314 	add.w	r3, r5, #20
 8008618:	d138      	bne.n	800868c <__gethex+0x40c>
 800861a:	f8d8 2000 	ldr.w	r2, [r8]
 800861e:	3a01      	subs	r2, #1
 8008620:	42b2      	cmp	r2, r6
 8008622:	d10a      	bne.n	800863a <__gethex+0x3ba>
 8008624:	2201      	movs	r2, #1
 8008626:	1171      	asrs	r1, r6, #5
 8008628:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800862c:	f006 061f 	and.w	r6, r6, #31
 8008630:	fa02 f606 	lsl.w	r6, r2, r6
 8008634:	421e      	tst	r6, r3
 8008636:	bf18      	it	ne
 8008638:	4617      	movne	r7, r2
 800863a:	f047 0720 	orr.w	r7, r7, #32
 800863e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008640:	601d      	str	r5, [r3, #0]
 8008642:	9b06      	ldr	r3, [sp, #24]
 8008644:	601c      	str	r4, [r3, #0]
 8008646:	e6a3      	b.n	8008390 <__gethex+0x110>
 8008648:	4299      	cmp	r1, r3
 800864a:	f843 cc04 	str.w	ip, [r3, #-4]
 800864e:	d8d8      	bhi.n	8008602 <__gethex+0x382>
 8008650:	68ab      	ldr	r3, [r5, #8]
 8008652:	4599      	cmp	r9, r3
 8008654:	db12      	blt.n	800867c <__gethex+0x3fc>
 8008656:	6869      	ldr	r1, [r5, #4]
 8008658:	9802      	ldr	r0, [sp, #8]
 800865a:	3101      	adds	r1, #1
 800865c:	f000 f90e 	bl	800887c <_Balloc>
 8008660:	4683      	mov	fp, r0
 8008662:	692a      	ldr	r2, [r5, #16]
 8008664:	f105 010c 	add.w	r1, r5, #12
 8008668:	3202      	adds	r2, #2
 800866a:	0092      	lsls	r2, r2, #2
 800866c:	300c      	adds	r0, #12
 800866e:	f7fe fe32 	bl	80072d6 <memcpy>
 8008672:	4629      	mov	r1, r5
 8008674:	9802      	ldr	r0, [sp, #8]
 8008676:	f000 f935 	bl	80088e4 <_Bfree>
 800867a:	465d      	mov	r5, fp
 800867c:	692b      	ldr	r3, [r5, #16]
 800867e:	1c5a      	adds	r2, r3, #1
 8008680:	612a      	str	r2, [r5, #16]
 8008682:	2201      	movs	r2, #1
 8008684:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008688:	615a      	str	r2, [r3, #20]
 800868a:	e7c2      	b.n	8008612 <__gethex+0x392>
 800868c:	692a      	ldr	r2, [r5, #16]
 800868e:	454a      	cmp	r2, r9
 8008690:	dd0b      	ble.n	80086aa <__gethex+0x42a>
 8008692:	2101      	movs	r1, #1
 8008694:	4628      	mov	r0, r5
 8008696:	f7ff fda3 	bl	80081e0 <rshift>
 800869a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800869e:	3401      	adds	r4, #1
 80086a0:	42a3      	cmp	r3, r4
 80086a2:	f6ff aed8 	blt.w	8008456 <__gethex+0x1d6>
 80086a6:	2701      	movs	r7, #1
 80086a8:	e7c7      	b.n	800863a <__gethex+0x3ba>
 80086aa:	f016 061f 	ands.w	r6, r6, #31
 80086ae:	d0fa      	beq.n	80086a6 <__gethex+0x426>
 80086b0:	449a      	add	sl, r3
 80086b2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80086b6:	f000 f9a5 	bl	8008a04 <__hi0bits>
 80086ba:	f1c6 0620 	rsb	r6, r6, #32
 80086be:	42b0      	cmp	r0, r6
 80086c0:	dbe7      	blt.n	8008692 <__gethex+0x412>
 80086c2:	e7f0      	b.n	80086a6 <__gethex+0x426>

080086c4 <L_shift>:
 80086c4:	f1c2 0208 	rsb	r2, r2, #8
 80086c8:	0092      	lsls	r2, r2, #2
 80086ca:	b570      	push	{r4, r5, r6, lr}
 80086cc:	f1c2 0620 	rsb	r6, r2, #32
 80086d0:	6843      	ldr	r3, [r0, #4]
 80086d2:	6804      	ldr	r4, [r0, #0]
 80086d4:	fa03 f506 	lsl.w	r5, r3, r6
 80086d8:	432c      	orrs	r4, r5
 80086da:	40d3      	lsrs	r3, r2
 80086dc:	6004      	str	r4, [r0, #0]
 80086de:	f840 3f04 	str.w	r3, [r0, #4]!
 80086e2:	4288      	cmp	r0, r1
 80086e4:	d3f4      	bcc.n	80086d0 <L_shift+0xc>
 80086e6:	bd70      	pop	{r4, r5, r6, pc}

080086e8 <__match>:
 80086e8:	b530      	push	{r4, r5, lr}
 80086ea:	6803      	ldr	r3, [r0, #0]
 80086ec:	3301      	adds	r3, #1
 80086ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086f2:	b914      	cbnz	r4, 80086fa <__match+0x12>
 80086f4:	6003      	str	r3, [r0, #0]
 80086f6:	2001      	movs	r0, #1
 80086f8:	bd30      	pop	{r4, r5, pc}
 80086fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008702:	2d19      	cmp	r5, #25
 8008704:	bf98      	it	ls
 8008706:	3220      	addls	r2, #32
 8008708:	42a2      	cmp	r2, r4
 800870a:	d0f0      	beq.n	80086ee <__match+0x6>
 800870c:	2000      	movs	r0, #0
 800870e:	e7f3      	b.n	80086f8 <__match+0x10>

08008710 <__hexnan>:
 8008710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008714:	2500      	movs	r5, #0
 8008716:	680b      	ldr	r3, [r1, #0]
 8008718:	4682      	mov	sl, r0
 800871a:	115f      	asrs	r7, r3, #5
 800871c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008720:	f013 031f 	ands.w	r3, r3, #31
 8008724:	bf18      	it	ne
 8008726:	3704      	addne	r7, #4
 8008728:	1f3e      	subs	r6, r7, #4
 800872a:	4690      	mov	r8, r2
 800872c:	46b1      	mov	r9, r6
 800872e:	4634      	mov	r4, r6
 8008730:	46ab      	mov	fp, r5
 8008732:	b087      	sub	sp, #28
 8008734:	6801      	ldr	r1, [r0, #0]
 8008736:	9301      	str	r3, [sp, #4]
 8008738:	f847 5c04 	str.w	r5, [r7, #-4]
 800873c:	9502      	str	r5, [sp, #8]
 800873e:	784a      	ldrb	r2, [r1, #1]
 8008740:	1c4b      	adds	r3, r1, #1
 8008742:	9303      	str	r3, [sp, #12]
 8008744:	b342      	cbz	r2, 8008798 <__hexnan+0x88>
 8008746:	4610      	mov	r0, r2
 8008748:	9105      	str	r1, [sp, #20]
 800874a:	9204      	str	r2, [sp, #16]
 800874c:	f7ff fd83 	bl	8008256 <__hexdig_fun>
 8008750:	2800      	cmp	r0, #0
 8008752:	d143      	bne.n	80087dc <__hexnan+0xcc>
 8008754:	9a04      	ldr	r2, [sp, #16]
 8008756:	9905      	ldr	r1, [sp, #20]
 8008758:	2a20      	cmp	r2, #32
 800875a:	d818      	bhi.n	800878e <__hexnan+0x7e>
 800875c:	9b02      	ldr	r3, [sp, #8]
 800875e:	459b      	cmp	fp, r3
 8008760:	dd13      	ble.n	800878a <__hexnan+0x7a>
 8008762:	454c      	cmp	r4, r9
 8008764:	d206      	bcs.n	8008774 <__hexnan+0x64>
 8008766:	2d07      	cmp	r5, #7
 8008768:	dc04      	bgt.n	8008774 <__hexnan+0x64>
 800876a:	462a      	mov	r2, r5
 800876c:	4649      	mov	r1, r9
 800876e:	4620      	mov	r0, r4
 8008770:	f7ff ffa8 	bl	80086c4 <L_shift>
 8008774:	4544      	cmp	r4, r8
 8008776:	d944      	bls.n	8008802 <__hexnan+0xf2>
 8008778:	2300      	movs	r3, #0
 800877a:	f1a4 0904 	sub.w	r9, r4, #4
 800877e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008782:	461d      	mov	r5, r3
 8008784:	464c      	mov	r4, r9
 8008786:	f8cd b008 	str.w	fp, [sp, #8]
 800878a:	9903      	ldr	r1, [sp, #12]
 800878c:	e7d7      	b.n	800873e <__hexnan+0x2e>
 800878e:	2a29      	cmp	r2, #41	; 0x29
 8008790:	d14a      	bne.n	8008828 <__hexnan+0x118>
 8008792:	3102      	adds	r1, #2
 8008794:	f8ca 1000 	str.w	r1, [sl]
 8008798:	f1bb 0f00 	cmp.w	fp, #0
 800879c:	d044      	beq.n	8008828 <__hexnan+0x118>
 800879e:	454c      	cmp	r4, r9
 80087a0:	d206      	bcs.n	80087b0 <__hexnan+0xa0>
 80087a2:	2d07      	cmp	r5, #7
 80087a4:	dc04      	bgt.n	80087b0 <__hexnan+0xa0>
 80087a6:	462a      	mov	r2, r5
 80087a8:	4649      	mov	r1, r9
 80087aa:	4620      	mov	r0, r4
 80087ac:	f7ff ff8a 	bl	80086c4 <L_shift>
 80087b0:	4544      	cmp	r4, r8
 80087b2:	d928      	bls.n	8008806 <__hexnan+0xf6>
 80087b4:	4643      	mov	r3, r8
 80087b6:	f854 2b04 	ldr.w	r2, [r4], #4
 80087ba:	42a6      	cmp	r6, r4
 80087bc:	f843 2b04 	str.w	r2, [r3], #4
 80087c0:	d2f9      	bcs.n	80087b6 <__hexnan+0xa6>
 80087c2:	2200      	movs	r2, #0
 80087c4:	f843 2b04 	str.w	r2, [r3], #4
 80087c8:	429e      	cmp	r6, r3
 80087ca:	d2fb      	bcs.n	80087c4 <__hexnan+0xb4>
 80087cc:	6833      	ldr	r3, [r6, #0]
 80087ce:	b91b      	cbnz	r3, 80087d8 <__hexnan+0xc8>
 80087d0:	4546      	cmp	r6, r8
 80087d2:	d127      	bne.n	8008824 <__hexnan+0x114>
 80087d4:	2301      	movs	r3, #1
 80087d6:	6033      	str	r3, [r6, #0]
 80087d8:	2005      	movs	r0, #5
 80087da:	e026      	b.n	800882a <__hexnan+0x11a>
 80087dc:	3501      	adds	r5, #1
 80087de:	2d08      	cmp	r5, #8
 80087e0:	f10b 0b01 	add.w	fp, fp, #1
 80087e4:	dd06      	ble.n	80087f4 <__hexnan+0xe4>
 80087e6:	4544      	cmp	r4, r8
 80087e8:	d9cf      	bls.n	800878a <__hexnan+0x7a>
 80087ea:	2300      	movs	r3, #0
 80087ec:	2501      	movs	r5, #1
 80087ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80087f2:	3c04      	subs	r4, #4
 80087f4:	6822      	ldr	r2, [r4, #0]
 80087f6:	f000 000f 	and.w	r0, r0, #15
 80087fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80087fe:	6020      	str	r0, [r4, #0]
 8008800:	e7c3      	b.n	800878a <__hexnan+0x7a>
 8008802:	2508      	movs	r5, #8
 8008804:	e7c1      	b.n	800878a <__hexnan+0x7a>
 8008806:	9b01      	ldr	r3, [sp, #4]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d0df      	beq.n	80087cc <__hexnan+0xbc>
 800880c:	f04f 32ff 	mov.w	r2, #4294967295
 8008810:	f1c3 0320 	rsb	r3, r3, #32
 8008814:	fa22 f303 	lsr.w	r3, r2, r3
 8008818:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800881c:	401a      	ands	r2, r3
 800881e:	f847 2c04 	str.w	r2, [r7, #-4]
 8008822:	e7d3      	b.n	80087cc <__hexnan+0xbc>
 8008824:	3e04      	subs	r6, #4
 8008826:	e7d1      	b.n	80087cc <__hexnan+0xbc>
 8008828:	2004      	movs	r0, #4
 800882a:	b007      	add	sp, #28
 800882c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008830 <__locale_ctype_ptr_l>:
 8008830:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008834:	4770      	bx	lr
	...

08008838 <__locale_ctype_ptr>:
 8008838:	4b04      	ldr	r3, [pc, #16]	; (800884c <__locale_ctype_ptr+0x14>)
 800883a:	4a05      	ldr	r2, [pc, #20]	; (8008850 <__locale_ctype_ptr+0x18>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	6a1b      	ldr	r3, [r3, #32]
 8008840:	2b00      	cmp	r3, #0
 8008842:	bf08      	it	eq
 8008844:	4613      	moveq	r3, r2
 8008846:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800884a:	4770      	bx	lr
 800884c:	200001b4 	.word	0x200001b4
 8008850:	20000218 	.word	0x20000218

08008854 <__localeconv_l>:
 8008854:	30f0      	adds	r0, #240	; 0xf0
 8008856:	4770      	bx	lr

08008858 <__ascii_mbtowc>:
 8008858:	b082      	sub	sp, #8
 800885a:	b901      	cbnz	r1, 800885e <__ascii_mbtowc+0x6>
 800885c:	a901      	add	r1, sp, #4
 800885e:	b142      	cbz	r2, 8008872 <__ascii_mbtowc+0x1a>
 8008860:	b14b      	cbz	r3, 8008876 <__ascii_mbtowc+0x1e>
 8008862:	7813      	ldrb	r3, [r2, #0]
 8008864:	600b      	str	r3, [r1, #0]
 8008866:	7812      	ldrb	r2, [r2, #0]
 8008868:	1c10      	adds	r0, r2, #0
 800886a:	bf18      	it	ne
 800886c:	2001      	movne	r0, #1
 800886e:	b002      	add	sp, #8
 8008870:	4770      	bx	lr
 8008872:	4610      	mov	r0, r2
 8008874:	e7fb      	b.n	800886e <__ascii_mbtowc+0x16>
 8008876:	f06f 0001 	mvn.w	r0, #1
 800887a:	e7f8      	b.n	800886e <__ascii_mbtowc+0x16>

0800887c <_Balloc>:
 800887c:	b570      	push	{r4, r5, r6, lr}
 800887e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008880:	4604      	mov	r4, r0
 8008882:	460e      	mov	r6, r1
 8008884:	b93d      	cbnz	r5, 8008896 <_Balloc+0x1a>
 8008886:	2010      	movs	r0, #16
 8008888:	f001 f880 	bl	800998c <malloc>
 800888c:	6260      	str	r0, [r4, #36]	; 0x24
 800888e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008892:	6005      	str	r5, [r0, #0]
 8008894:	60c5      	str	r5, [r0, #12]
 8008896:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008898:	68eb      	ldr	r3, [r5, #12]
 800889a:	b183      	cbz	r3, 80088be <_Balloc+0x42>
 800889c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80088a4:	b9b8      	cbnz	r0, 80088d6 <_Balloc+0x5a>
 80088a6:	2101      	movs	r1, #1
 80088a8:	fa01 f506 	lsl.w	r5, r1, r6
 80088ac:	1d6a      	adds	r2, r5, #5
 80088ae:	0092      	lsls	r2, r2, #2
 80088b0:	4620      	mov	r0, r4
 80088b2:	f000 fbdb 	bl	800906c <_calloc_r>
 80088b6:	b160      	cbz	r0, 80088d2 <_Balloc+0x56>
 80088b8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80088bc:	e00e      	b.n	80088dc <_Balloc+0x60>
 80088be:	2221      	movs	r2, #33	; 0x21
 80088c0:	2104      	movs	r1, #4
 80088c2:	4620      	mov	r0, r4
 80088c4:	f000 fbd2 	bl	800906c <_calloc_r>
 80088c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088ca:	60e8      	str	r0, [r5, #12]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1e4      	bne.n	800889c <_Balloc+0x20>
 80088d2:	2000      	movs	r0, #0
 80088d4:	bd70      	pop	{r4, r5, r6, pc}
 80088d6:	6802      	ldr	r2, [r0, #0]
 80088d8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80088dc:	2300      	movs	r3, #0
 80088de:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088e2:	e7f7      	b.n	80088d4 <_Balloc+0x58>

080088e4 <_Bfree>:
 80088e4:	b570      	push	{r4, r5, r6, lr}
 80088e6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80088e8:	4606      	mov	r6, r0
 80088ea:	460d      	mov	r5, r1
 80088ec:	b93c      	cbnz	r4, 80088fe <_Bfree+0x1a>
 80088ee:	2010      	movs	r0, #16
 80088f0:	f001 f84c 	bl	800998c <malloc>
 80088f4:	6270      	str	r0, [r6, #36]	; 0x24
 80088f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088fa:	6004      	str	r4, [r0, #0]
 80088fc:	60c4      	str	r4, [r0, #12]
 80088fe:	b13d      	cbz	r5, 8008910 <_Bfree+0x2c>
 8008900:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008902:	686a      	ldr	r2, [r5, #4]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800890a:	6029      	str	r1, [r5, #0]
 800890c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008910:	bd70      	pop	{r4, r5, r6, pc}

08008912 <__multadd>:
 8008912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008916:	461f      	mov	r7, r3
 8008918:	4606      	mov	r6, r0
 800891a:	460c      	mov	r4, r1
 800891c:	2300      	movs	r3, #0
 800891e:	690d      	ldr	r5, [r1, #16]
 8008920:	f101 0c14 	add.w	ip, r1, #20
 8008924:	f8dc 0000 	ldr.w	r0, [ip]
 8008928:	3301      	adds	r3, #1
 800892a:	b281      	uxth	r1, r0
 800892c:	fb02 7101 	mla	r1, r2, r1, r7
 8008930:	0c00      	lsrs	r0, r0, #16
 8008932:	0c0f      	lsrs	r7, r1, #16
 8008934:	fb02 7000 	mla	r0, r2, r0, r7
 8008938:	b289      	uxth	r1, r1
 800893a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800893e:	429d      	cmp	r5, r3
 8008940:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008944:	f84c 1b04 	str.w	r1, [ip], #4
 8008948:	dcec      	bgt.n	8008924 <__multadd+0x12>
 800894a:	b1d7      	cbz	r7, 8008982 <__multadd+0x70>
 800894c:	68a3      	ldr	r3, [r4, #8]
 800894e:	42ab      	cmp	r3, r5
 8008950:	dc12      	bgt.n	8008978 <__multadd+0x66>
 8008952:	6861      	ldr	r1, [r4, #4]
 8008954:	4630      	mov	r0, r6
 8008956:	3101      	adds	r1, #1
 8008958:	f7ff ff90 	bl	800887c <_Balloc>
 800895c:	4680      	mov	r8, r0
 800895e:	6922      	ldr	r2, [r4, #16]
 8008960:	f104 010c 	add.w	r1, r4, #12
 8008964:	3202      	adds	r2, #2
 8008966:	0092      	lsls	r2, r2, #2
 8008968:	300c      	adds	r0, #12
 800896a:	f7fe fcb4 	bl	80072d6 <memcpy>
 800896e:	4621      	mov	r1, r4
 8008970:	4630      	mov	r0, r6
 8008972:	f7ff ffb7 	bl	80088e4 <_Bfree>
 8008976:	4644      	mov	r4, r8
 8008978:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800897c:	3501      	adds	r5, #1
 800897e:	615f      	str	r7, [r3, #20]
 8008980:	6125      	str	r5, [r4, #16]
 8008982:	4620      	mov	r0, r4
 8008984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008988 <__s2b>:
 8008988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800898c:	4615      	mov	r5, r2
 800898e:	2209      	movs	r2, #9
 8008990:	461f      	mov	r7, r3
 8008992:	3308      	adds	r3, #8
 8008994:	460c      	mov	r4, r1
 8008996:	fb93 f3f2 	sdiv	r3, r3, r2
 800899a:	4606      	mov	r6, r0
 800899c:	2201      	movs	r2, #1
 800899e:	2100      	movs	r1, #0
 80089a0:	429a      	cmp	r2, r3
 80089a2:	db20      	blt.n	80089e6 <__s2b+0x5e>
 80089a4:	4630      	mov	r0, r6
 80089a6:	f7ff ff69 	bl	800887c <_Balloc>
 80089aa:	9b08      	ldr	r3, [sp, #32]
 80089ac:	2d09      	cmp	r5, #9
 80089ae:	6143      	str	r3, [r0, #20]
 80089b0:	f04f 0301 	mov.w	r3, #1
 80089b4:	6103      	str	r3, [r0, #16]
 80089b6:	dd19      	ble.n	80089ec <__s2b+0x64>
 80089b8:	f104 0809 	add.w	r8, r4, #9
 80089bc:	46c1      	mov	r9, r8
 80089be:	442c      	add	r4, r5
 80089c0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80089c4:	4601      	mov	r1, r0
 80089c6:	3b30      	subs	r3, #48	; 0x30
 80089c8:	220a      	movs	r2, #10
 80089ca:	4630      	mov	r0, r6
 80089cc:	f7ff ffa1 	bl	8008912 <__multadd>
 80089d0:	45a1      	cmp	r9, r4
 80089d2:	d1f5      	bne.n	80089c0 <__s2b+0x38>
 80089d4:	eb08 0405 	add.w	r4, r8, r5
 80089d8:	3c08      	subs	r4, #8
 80089da:	1b2d      	subs	r5, r5, r4
 80089dc:	1963      	adds	r3, r4, r5
 80089de:	42bb      	cmp	r3, r7
 80089e0:	db07      	blt.n	80089f2 <__s2b+0x6a>
 80089e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089e6:	0052      	lsls	r2, r2, #1
 80089e8:	3101      	adds	r1, #1
 80089ea:	e7d9      	b.n	80089a0 <__s2b+0x18>
 80089ec:	340a      	adds	r4, #10
 80089ee:	2509      	movs	r5, #9
 80089f0:	e7f3      	b.n	80089da <__s2b+0x52>
 80089f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80089f6:	4601      	mov	r1, r0
 80089f8:	3b30      	subs	r3, #48	; 0x30
 80089fa:	220a      	movs	r2, #10
 80089fc:	4630      	mov	r0, r6
 80089fe:	f7ff ff88 	bl	8008912 <__multadd>
 8008a02:	e7eb      	b.n	80089dc <__s2b+0x54>

08008a04 <__hi0bits>:
 8008a04:	0c02      	lsrs	r2, r0, #16
 8008a06:	0412      	lsls	r2, r2, #16
 8008a08:	4603      	mov	r3, r0
 8008a0a:	b9b2      	cbnz	r2, 8008a3a <__hi0bits+0x36>
 8008a0c:	0403      	lsls	r3, r0, #16
 8008a0e:	2010      	movs	r0, #16
 8008a10:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008a14:	bf04      	itt	eq
 8008a16:	021b      	lsleq	r3, r3, #8
 8008a18:	3008      	addeq	r0, #8
 8008a1a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008a1e:	bf04      	itt	eq
 8008a20:	011b      	lsleq	r3, r3, #4
 8008a22:	3004      	addeq	r0, #4
 8008a24:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008a28:	bf04      	itt	eq
 8008a2a:	009b      	lsleq	r3, r3, #2
 8008a2c:	3002      	addeq	r0, #2
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	db06      	blt.n	8008a40 <__hi0bits+0x3c>
 8008a32:	005b      	lsls	r3, r3, #1
 8008a34:	d503      	bpl.n	8008a3e <__hi0bits+0x3a>
 8008a36:	3001      	adds	r0, #1
 8008a38:	4770      	bx	lr
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	e7e8      	b.n	8008a10 <__hi0bits+0xc>
 8008a3e:	2020      	movs	r0, #32
 8008a40:	4770      	bx	lr

08008a42 <__lo0bits>:
 8008a42:	6803      	ldr	r3, [r0, #0]
 8008a44:	4601      	mov	r1, r0
 8008a46:	f013 0207 	ands.w	r2, r3, #7
 8008a4a:	d00b      	beq.n	8008a64 <__lo0bits+0x22>
 8008a4c:	07da      	lsls	r2, r3, #31
 8008a4e:	d423      	bmi.n	8008a98 <__lo0bits+0x56>
 8008a50:	0798      	lsls	r0, r3, #30
 8008a52:	bf49      	itett	mi
 8008a54:	085b      	lsrmi	r3, r3, #1
 8008a56:	089b      	lsrpl	r3, r3, #2
 8008a58:	2001      	movmi	r0, #1
 8008a5a:	600b      	strmi	r3, [r1, #0]
 8008a5c:	bf5c      	itt	pl
 8008a5e:	600b      	strpl	r3, [r1, #0]
 8008a60:	2002      	movpl	r0, #2
 8008a62:	4770      	bx	lr
 8008a64:	b298      	uxth	r0, r3
 8008a66:	b9a8      	cbnz	r0, 8008a94 <__lo0bits+0x52>
 8008a68:	2010      	movs	r0, #16
 8008a6a:	0c1b      	lsrs	r3, r3, #16
 8008a6c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008a70:	bf04      	itt	eq
 8008a72:	0a1b      	lsreq	r3, r3, #8
 8008a74:	3008      	addeq	r0, #8
 8008a76:	071a      	lsls	r2, r3, #28
 8008a78:	bf04      	itt	eq
 8008a7a:	091b      	lsreq	r3, r3, #4
 8008a7c:	3004      	addeq	r0, #4
 8008a7e:	079a      	lsls	r2, r3, #30
 8008a80:	bf04      	itt	eq
 8008a82:	089b      	lsreq	r3, r3, #2
 8008a84:	3002      	addeq	r0, #2
 8008a86:	07da      	lsls	r2, r3, #31
 8008a88:	d402      	bmi.n	8008a90 <__lo0bits+0x4e>
 8008a8a:	085b      	lsrs	r3, r3, #1
 8008a8c:	d006      	beq.n	8008a9c <__lo0bits+0x5a>
 8008a8e:	3001      	adds	r0, #1
 8008a90:	600b      	str	r3, [r1, #0]
 8008a92:	4770      	bx	lr
 8008a94:	4610      	mov	r0, r2
 8008a96:	e7e9      	b.n	8008a6c <__lo0bits+0x2a>
 8008a98:	2000      	movs	r0, #0
 8008a9a:	4770      	bx	lr
 8008a9c:	2020      	movs	r0, #32
 8008a9e:	4770      	bx	lr

08008aa0 <__i2b>:
 8008aa0:	b510      	push	{r4, lr}
 8008aa2:	460c      	mov	r4, r1
 8008aa4:	2101      	movs	r1, #1
 8008aa6:	f7ff fee9 	bl	800887c <_Balloc>
 8008aaa:	2201      	movs	r2, #1
 8008aac:	6144      	str	r4, [r0, #20]
 8008aae:	6102      	str	r2, [r0, #16]
 8008ab0:	bd10      	pop	{r4, pc}

08008ab2 <__multiply>:
 8008ab2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab6:	4614      	mov	r4, r2
 8008ab8:	690a      	ldr	r2, [r1, #16]
 8008aba:	6923      	ldr	r3, [r4, #16]
 8008abc:	4688      	mov	r8, r1
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	bfbe      	ittt	lt
 8008ac2:	460b      	movlt	r3, r1
 8008ac4:	46a0      	movlt	r8, r4
 8008ac6:	461c      	movlt	r4, r3
 8008ac8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008acc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008ad0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ad4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008ad8:	eb07 0609 	add.w	r6, r7, r9
 8008adc:	42b3      	cmp	r3, r6
 8008ade:	bfb8      	it	lt
 8008ae0:	3101      	addlt	r1, #1
 8008ae2:	f7ff fecb 	bl	800887c <_Balloc>
 8008ae6:	f100 0514 	add.w	r5, r0, #20
 8008aea:	462b      	mov	r3, r5
 8008aec:	2200      	movs	r2, #0
 8008aee:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008af2:	4573      	cmp	r3, lr
 8008af4:	d316      	bcc.n	8008b24 <__multiply+0x72>
 8008af6:	f104 0214 	add.w	r2, r4, #20
 8008afa:	f108 0114 	add.w	r1, r8, #20
 8008afe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008b02:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008b06:	9300      	str	r3, [sp, #0]
 8008b08:	9b00      	ldr	r3, [sp, #0]
 8008b0a:	9201      	str	r2, [sp, #4]
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d80c      	bhi.n	8008b2a <__multiply+0x78>
 8008b10:	2e00      	cmp	r6, #0
 8008b12:	dd03      	ble.n	8008b1c <__multiply+0x6a>
 8008b14:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d05d      	beq.n	8008bd8 <__multiply+0x126>
 8008b1c:	6106      	str	r6, [r0, #16]
 8008b1e:	b003      	add	sp, #12
 8008b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b24:	f843 2b04 	str.w	r2, [r3], #4
 8008b28:	e7e3      	b.n	8008af2 <__multiply+0x40>
 8008b2a:	f8b2 b000 	ldrh.w	fp, [r2]
 8008b2e:	f1bb 0f00 	cmp.w	fp, #0
 8008b32:	d023      	beq.n	8008b7c <__multiply+0xca>
 8008b34:	4689      	mov	r9, r1
 8008b36:	46ac      	mov	ip, r5
 8008b38:	f04f 0800 	mov.w	r8, #0
 8008b3c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008b40:	f8dc a000 	ldr.w	sl, [ip]
 8008b44:	b2a3      	uxth	r3, r4
 8008b46:	fa1f fa8a 	uxth.w	sl, sl
 8008b4a:	fb0b a303 	mla	r3, fp, r3, sl
 8008b4e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008b52:	f8dc 4000 	ldr.w	r4, [ip]
 8008b56:	4443      	add	r3, r8
 8008b58:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008b5c:	fb0b 840a 	mla	r4, fp, sl, r8
 8008b60:	46e2      	mov	sl, ip
 8008b62:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008b6c:	454f      	cmp	r7, r9
 8008b6e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008b72:	f84a 3b04 	str.w	r3, [sl], #4
 8008b76:	d82b      	bhi.n	8008bd0 <__multiply+0x11e>
 8008b78:	f8cc 8004 	str.w	r8, [ip, #4]
 8008b7c:	9b01      	ldr	r3, [sp, #4]
 8008b7e:	3204      	adds	r2, #4
 8008b80:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008b84:	f1ba 0f00 	cmp.w	sl, #0
 8008b88:	d020      	beq.n	8008bcc <__multiply+0x11a>
 8008b8a:	4689      	mov	r9, r1
 8008b8c:	46a8      	mov	r8, r5
 8008b8e:	f04f 0b00 	mov.w	fp, #0
 8008b92:	682b      	ldr	r3, [r5, #0]
 8008b94:	f8b9 c000 	ldrh.w	ip, [r9]
 8008b98:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	fb0a 440c 	mla	r4, sl, ip, r4
 8008ba2:	46c4      	mov	ip, r8
 8008ba4:	445c      	add	r4, fp
 8008ba6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008baa:	f84c 3b04 	str.w	r3, [ip], #4
 8008bae:	f859 3b04 	ldr.w	r3, [r9], #4
 8008bb2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008bb6:	0c1b      	lsrs	r3, r3, #16
 8008bb8:	fb0a b303 	mla	r3, sl, r3, fp
 8008bbc:	454f      	cmp	r7, r9
 8008bbe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008bc2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008bc6:	d805      	bhi.n	8008bd4 <__multiply+0x122>
 8008bc8:	f8c8 3004 	str.w	r3, [r8, #4]
 8008bcc:	3504      	adds	r5, #4
 8008bce:	e79b      	b.n	8008b08 <__multiply+0x56>
 8008bd0:	46d4      	mov	ip, sl
 8008bd2:	e7b3      	b.n	8008b3c <__multiply+0x8a>
 8008bd4:	46e0      	mov	r8, ip
 8008bd6:	e7dd      	b.n	8008b94 <__multiply+0xe2>
 8008bd8:	3e01      	subs	r6, #1
 8008bda:	e799      	b.n	8008b10 <__multiply+0x5e>

08008bdc <__pow5mult>:
 8008bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008be0:	4615      	mov	r5, r2
 8008be2:	f012 0203 	ands.w	r2, r2, #3
 8008be6:	4606      	mov	r6, r0
 8008be8:	460f      	mov	r7, r1
 8008bea:	d007      	beq.n	8008bfc <__pow5mult+0x20>
 8008bec:	4c21      	ldr	r4, [pc, #132]	; (8008c74 <__pow5mult+0x98>)
 8008bee:	3a01      	subs	r2, #1
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bf6:	f7ff fe8c 	bl	8008912 <__multadd>
 8008bfa:	4607      	mov	r7, r0
 8008bfc:	10ad      	asrs	r5, r5, #2
 8008bfe:	d035      	beq.n	8008c6c <__pow5mult+0x90>
 8008c00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008c02:	b93c      	cbnz	r4, 8008c14 <__pow5mult+0x38>
 8008c04:	2010      	movs	r0, #16
 8008c06:	f000 fec1 	bl	800998c <malloc>
 8008c0a:	6270      	str	r0, [r6, #36]	; 0x24
 8008c0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c10:	6004      	str	r4, [r0, #0]
 8008c12:	60c4      	str	r4, [r0, #12]
 8008c14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008c18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c1c:	b94c      	cbnz	r4, 8008c32 <__pow5mult+0x56>
 8008c1e:	f240 2171 	movw	r1, #625	; 0x271
 8008c22:	4630      	mov	r0, r6
 8008c24:	f7ff ff3c 	bl	8008aa0 <__i2b>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c30:	6003      	str	r3, [r0, #0]
 8008c32:	f04f 0800 	mov.w	r8, #0
 8008c36:	07eb      	lsls	r3, r5, #31
 8008c38:	d50a      	bpl.n	8008c50 <__pow5mult+0x74>
 8008c3a:	4639      	mov	r1, r7
 8008c3c:	4622      	mov	r2, r4
 8008c3e:	4630      	mov	r0, r6
 8008c40:	f7ff ff37 	bl	8008ab2 <__multiply>
 8008c44:	4681      	mov	r9, r0
 8008c46:	4639      	mov	r1, r7
 8008c48:	4630      	mov	r0, r6
 8008c4a:	f7ff fe4b 	bl	80088e4 <_Bfree>
 8008c4e:	464f      	mov	r7, r9
 8008c50:	106d      	asrs	r5, r5, #1
 8008c52:	d00b      	beq.n	8008c6c <__pow5mult+0x90>
 8008c54:	6820      	ldr	r0, [r4, #0]
 8008c56:	b938      	cbnz	r0, 8008c68 <__pow5mult+0x8c>
 8008c58:	4622      	mov	r2, r4
 8008c5a:	4621      	mov	r1, r4
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	f7ff ff28 	bl	8008ab2 <__multiply>
 8008c62:	6020      	str	r0, [r4, #0]
 8008c64:	f8c0 8000 	str.w	r8, [r0]
 8008c68:	4604      	mov	r4, r0
 8008c6a:	e7e4      	b.n	8008c36 <__pow5mult+0x5a>
 8008c6c:	4638      	mov	r0, r7
 8008c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c72:	bf00      	nop
 8008c74:	0800ac30 	.word	0x0800ac30

08008c78 <__lshift>:
 8008c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c7c:	460c      	mov	r4, r1
 8008c7e:	4607      	mov	r7, r0
 8008c80:	4616      	mov	r6, r2
 8008c82:	6923      	ldr	r3, [r4, #16]
 8008c84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c88:	eb0a 0903 	add.w	r9, sl, r3
 8008c8c:	6849      	ldr	r1, [r1, #4]
 8008c8e:	68a3      	ldr	r3, [r4, #8]
 8008c90:	f109 0501 	add.w	r5, r9, #1
 8008c94:	42ab      	cmp	r3, r5
 8008c96:	db32      	blt.n	8008cfe <__lshift+0x86>
 8008c98:	4638      	mov	r0, r7
 8008c9a:	f7ff fdef 	bl	800887c <_Balloc>
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	4680      	mov	r8, r0
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	f100 0114 	add.w	r1, r0, #20
 8008ca8:	4553      	cmp	r3, sl
 8008caa:	db2b      	blt.n	8008d04 <__lshift+0x8c>
 8008cac:	6920      	ldr	r0, [r4, #16]
 8008cae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cb2:	f104 0314 	add.w	r3, r4, #20
 8008cb6:	f016 021f 	ands.w	r2, r6, #31
 8008cba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cbe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008cc2:	d025      	beq.n	8008d10 <__lshift+0x98>
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	f1c2 0e20 	rsb	lr, r2, #32
 8008cca:	468a      	mov	sl, r1
 8008ccc:	681e      	ldr	r6, [r3, #0]
 8008cce:	4096      	lsls	r6, r2
 8008cd0:	4330      	orrs	r0, r6
 8008cd2:	f84a 0b04 	str.w	r0, [sl], #4
 8008cd6:	f853 0b04 	ldr.w	r0, [r3], #4
 8008cda:	459c      	cmp	ip, r3
 8008cdc:	fa20 f00e 	lsr.w	r0, r0, lr
 8008ce0:	d814      	bhi.n	8008d0c <__lshift+0x94>
 8008ce2:	6048      	str	r0, [r1, #4]
 8008ce4:	b108      	cbz	r0, 8008cea <__lshift+0x72>
 8008ce6:	f109 0502 	add.w	r5, r9, #2
 8008cea:	3d01      	subs	r5, #1
 8008cec:	4638      	mov	r0, r7
 8008cee:	f8c8 5010 	str.w	r5, [r8, #16]
 8008cf2:	4621      	mov	r1, r4
 8008cf4:	f7ff fdf6 	bl	80088e4 <_Bfree>
 8008cf8:	4640      	mov	r0, r8
 8008cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cfe:	3101      	adds	r1, #1
 8008d00:	005b      	lsls	r3, r3, #1
 8008d02:	e7c7      	b.n	8008c94 <__lshift+0x1c>
 8008d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	e7cd      	b.n	8008ca8 <__lshift+0x30>
 8008d0c:	4651      	mov	r1, sl
 8008d0e:	e7dc      	b.n	8008cca <__lshift+0x52>
 8008d10:	3904      	subs	r1, #4
 8008d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d16:	459c      	cmp	ip, r3
 8008d18:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d1c:	d8f9      	bhi.n	8008d12 <__lshift+0x9a>
 8008d1e:	e7e4      	b.n	8008cea <__lshift+0x72>

08008d20 <__mcmp>:
 8008d20:	6903      	ldr	r3, [r0, #16]
 8008d22:	690a      	ldr	r2, [r1, #16]
 8008d24:	b530      	push	{r4, r5, lr}
 8008d26:	1a9b      	subs	r3, r3, r2
 8008d28:	d10c      	bne.n	8008d44 <__mcmp+0x24>
 8008d2a:	0092      	lsls	r2, r2, #2
 8008d2c:	3014      	adds	r0, #20
 8008d2e:	3114      	adds	r1, #20
 8008d30:	1884      	adds	r4, r0, r2
 8008d32:	4411      	add	r1, r2
 8008d34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d3c:	4295      	cmp	r5, r2
 8008d3e:	d003      	beq.n	8008d48 <__mcmp+0x28>
 8008d40:	d305      	bcc.n	8008d4e <__mcmp+0x2e>
 8008d42:	2301      	movs	r3, #1
 8008d44:	4618      	mov	r0, r3
 8008d46:	bd30      	pop	{r4, r5, pc}
 8008d48:	42a0      	cmp	r0, r4
 8008d4a:	d3f3      	bcc.n	8008d34 <__mcmp+0x14>
 8008d4c:	e7fa      	b.n	8008d44 <__mcmp+0x24>
 8008d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d52:	e7f7      	b.n	8008d44 <__mcmp+0x24>

08008d54 <__mdiff>:
 8008d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d58:	460d      	mov	r5, r1
 8008d5a:	4607      	mov	r7, r0
 8008d5c:	4611      	mov	r1, r2
 8008d5e:	4628      	mov	r0, r5
 8008d60:	4614      	mov	r4, r2
 8008d62:	f7ff ffdd 	bl	8008d20 <__mcmp>
 8008d66:	1e06      	subs	r6, r0, #0
 8008d68:	d108      	bne.n	8008d7c <__mdiff+0x28>
 8008d6a:	4631      	mov	r1, r6
 8008d6c:	4638      	mov	r0, r7
 8008d6e:	f7ff fd85 	bl	800887c <_Balloc>
 8008d72:	2301      	movs	r3, #1
 8008d74:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d7c:	bfa4      	itt	ge
 8008d7e:	4623      	movge	r3, r4
 8008d80:	462c      	movge	r4, r5
 8008d82:	4638      	mov	r0, r7
 8008d84:	6861      	ldr	r1, [r4, #4]
 8008d86:	bfa6      	itte	ge
 8008d88:	461d      	movge	r5, r3
 8008d8a:	2600      	movge	r6, #0
 8008d8c:	2601      	movlt	r6, #1
 8008d8e:	f7ff fd75 	bl	800887c <_Balloc>
 8008d92:	f04f 0e00 	mov.w	lr, #0
 8008d96:	60c6      	str	r6, [r0, #12]
 8008d98:	692b      	ldr	r3, [r5, #16]
 8008d9a:	6926      	ldr	r6, [r4, #16]
 8008d9c:	f104 0214 	add.w	r2, r4, #20
 8008da0:	f105 0914 	add.w	r9, r5, #20
 8008da4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008da8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008dac:	f100 0114 	add.w	r1, r0, #20
 8008db0:	f852 ab04 	ldr.w	sl, [r2], #4
 8008db4:	f859 5b04 	ldr.w	r5, [r9], #4
 8008db8:	fa1f f38a 	uxth.w	r3, sl
 8008dbc:	4473      	add	r3, lr
 8008dbe:	b2ac      	uxth	r4, r5
 8008dc0:	1b1b      	subs	r3, r3, r4
 8008dc2:	0c2c      	lsrs	r4, r5, #16
 8008dc4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008dc8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8008dd2:	45c8      	cmp	r8, r9
 8008dd4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008dd8:	4694      	mov	ip, r2
 8008dda:	f841 4b04 	str.w	r4, [r1], #4
 8008dde:	d8e7      	bhi.n	8008db0 <__mdiff+0x5c>
 8008de0:	45bc      	cmp	ip, r7
 8008de2:	d304      	bcc.n	8008dee <__mdiff+0x9a>
 8008de4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008de8:	b183      	cbz	r3, 8008e0c <__mdiff+0xb8>
 8008dea:	6106      	str	r6, [r0, #16]
 8008dec:	e7c4      	b.n	8008d78 <__mdiff+0x24>
 8008dee:	f85c 4b04 	ldr.w	r4, [ip], #4
 8008df2:	b2a2      	uxth	r2, r4
 8008df4:	4472      	add	r2, lr
 8008df6:	1413      	asrs	r3, r2, #16
 8008df8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008dfc:	b292      	uxth	r2, r2
 8008dfe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008e02:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008e06:	f841 2b04 	str.w	r2, [r1], #4
 8008e0a:	e7e9      	b.n	8008de0 <__mdiff+0x8c>
 8008e0c:	3e01      	subs	r6, #1
 8008e0e:	e7e9      	b.n	8008de4 <__mdiff+0x90>

08008e10 <__ulp>:
 8008e10:	4b10      	ldr	r3, [pc, #64]	; (8008e54 <__ulp+0x44>)
 8008e12:	400b      	ands	r3, r1
 8008e14:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	dd02      	ble.n	8008e22 <__ulp+0x12>
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	4619      	mov	r1, r3
 8008e20:	4770      	bx	lr
 8008e22:	425b      	negs	r3, r3
 8008e24:	151b      	asrs	r3, r3, #20
 8008e26:	2b13      	cmp	r3, #19
 8008e28:	f04f 0000 	mov.w	r0, #0
 8008e2c:	f04f 0100 	mov.w	r1, #0
 8008e30:	dc04      	bgt.n	8008e3c <__ulp+0x2c>
 8008e32:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008e36:	fa42 f103 	asr.w	r1, r2, r3
 8008e3a:	4770      	bx	lr
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	3b14      	subs	r3, #20
 8008e40:	2b1e      	cmp	r3, #30
 8008e42:	bfce      	itee	gt
 8008e44:	4613      	movgt	r3, r2
 8008e46:	f1c3 031f 	rsble	r3, r3, #31
 8008e4a:	fa02 f303 	lslle.w	r3, r2, r3
 8008e4e:	4618      	mov	r0, r3
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	7ff00000 	.word	0x7ff00000

08008e58 <__b2d>:
 8008e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e5c:	6907      	ldr	r7, [r0, #16]
 8008e5e:	f100 0914 	add.w	r9, r0, #20
 8008e62:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008e66:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008e6a:	f1a7 0804 	sub.w	r8, r7, #4
 8008e6e:	4630      	mov	r0, r6
 8008e70:	f7ff fdc8 	bl	8008a04 <__hi0bits>
 8008e74:	f1c0 0320 	rsb	r3, r0, #32
 8008e78:	280a      	cmp	r0, #10
 8008e7a:	600b      	str	r3, [r1, #0]
 8008e7c:	491e      	ldr	r1, [pc, #120]	; (8008ef8 <__b2d+0xa0>)
 8008e7e:	dc17      	bgt.n	8008eb0 <__b2d+0x58>
 8008e80:	45c1      	cmp	r9, r8
 8008e82:	bf28      	it	cs
 8008e84:	2200      	movcs	r2, #0
 8008e86:	f1c0 0c0b 	rsb	ip, r0, #11
 8008e8a:	fa26 f30c 	lsr.w	r3, r6, ip
 8008e8e:	bf38      	it	cc
 8008e90:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008e94:	ea43 0501 	orr.w	r5, r3, r1
 8008e98:	f100 0315 	add.w	r3, r0, #21
 8008e9c:	fa06 f303 	lsl.w	r3, r6, r3
 8008ea0:	fa22 f20c 	lsr.w	r2, r2, ip
 8008ea4:	ea43 0402 	orr.w	r4, r3, r2
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	4629      	mov	r1, r5
 8008eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eb0:	45c1      	cmp	r9, r8
 8008eb2:	bf3a      	itte	cc
 8008eb4:	f1a7 0808 	subcc.w	r8, r7, #8
 8008eb8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008ebc:	2200      	movcs	r2, #0
 8008ebe:	f1b0 030b 	subs.w	r3, r0, #11
 8008ec2:	d015      	beq.n	8008ef0 <__b2d+0x98>
 8008ec4:	409e      	lsls	r6, r3
 8008ec6:	f1c3 0720 	rsb	r7, r3, #32
 8008eca:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8008ece:	fa22 f107 	lsr.w	r1, r2, r7
 8008ed2:	45c8      	cmp	r8, r9
 8008ed4:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8008ed8:	ea46 0501 	orr.w	r5, r6, r1
 8008edc:	bf94      	ite	ls
 8008ede:	2100      	movls	r1, #0
 8008ee0:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008ee4:	fa02 f003 	lsl.w	r0, r2, r3
 8008ee8:	40f9      	lsrs	r1, r7
 8008eea:	ea40 0401 	orr.w	r4, r0, r1
 8008eee:	e7db      	b.n	8008ea8 <__b2d+0x50>
 8008ef0:	ea46 0501 	orr.w	r5, r6, r1
 8008ef4:	4614      	mov	r4, r2
 8008ef6:	e7d7      	b.n	8008ea8 <__b2d+0x50>
 8008ef8:	3ff00000 	.word	0x3ff00000

08008efc <__d2b>:
 8008efc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008f00:	461c      	mov	r4, r3
 8008f02:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008f06:	2101      	movs	r1, #1
 8008f08:	4690      	mov	r8, r2
 8008f0a:	f7ff fcb7 	bl	800887c <_Balloc>
 8008f0e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8008f12:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008f16:	4607      	mov	r7, r0
 8008f18:	bb34      	cbnz	r4, 8008f68 <__d2b+0x6c>
 8008f1a:	9201      	str	r2, [sp, #4]
 8008f1c:	f1b8 0200 	subs.w	r2, r8, #0
 8008f20:	d027      	beq.n	8008f72 <__d2b+0x76>
 8008f22:	a802      	add	r0, sp, #8
 8008f24:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008f28:	f7ff fd8b 	bl	8008a42 <__lo0bits>
 8008f2c:	9900      	ldr	r1, [sp, #0]
 8008f2e:	b1f0      	cbz	r0, 8008f6e <__d2b+0x72>
 8008f30:	9a01      	ldr	r2, [sp, #4]
 8008f32:	f1c0 0320 	rsb	r3, r0, #32
 8008f36:	fa02 f303 	lsl.w	r3, r2, r3
 8008f3a:	430b      	orrs	r3, r1
 8008f3c:	40c2      	lsrs	r2, r0
 8008f3e:	617b      	str	r3, [r7, #20]
 8008f40:	9201      	str	r2, [sp, #4]
 8008f42:	9b01      	ldr	r3, [sp, #4]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	bf14      	ite	ne
 8008f48:	2102      	movne	r1, #2
 8008f4a:	2101      	moveq	r1, #1
 8008f4c:	61bb      	str	r3, [r7, #24]
 8008f4e:	6139      	str	r1, [r7, #16]
 8008f50:	b1c4      	cbz	r4, 8008f84 <__d2b+0x88>
 8008f52:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008f56:	4404      	add	r4, r0
 8008f58:	6034      	str	r4, [r6, #0]
 8008f5a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f5e:	6028      	str	r0, [r5, #0]
 8008f60:	4638      	mov	r0, r7
 8008f62:	b002      	add	sp, #8
 8008f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f68:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008f6c:	e7d5      	b.n	8008f1a <__d2b+0x1e>
 8008f6e:	6179      	str	r1, [r7, #20]
 8008f70:	e7e7      	b.n	8008f42 <__d2b+0x46>
 8008f72:	a801      	add	r0, sp, #4
 8008f74:	f7ff fd65 	bl	8008a42 <__lo0bits>
 8008f78:	2101      	movs	r1, #1
 8008f7a:	9b01      	ldr	r3, [sp, #4]
 8008f7c:	6139      	str	r1, [r7, #16]
 8008f7e:	617b      	str	r3, [r7, #20]
 8008f80:	3020      	adds	r0, #32
 8008f82:	e7e5      	b.n	8008f50 <__d2b+0x54>
 8008f84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f88:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008f8c:	6030      	str	r0, [r6, #0]
 8008f8e:	6918      	ldr	r0, [r3, #16]
 8008f90:	f7ff fd38 	bl	8008a04 <__hi0bits>
 8008f94:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008f98:	e7e1      	b.n	8008f5e <__d2b+0x62>

08008f9a <__ratio>:
 8008f9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f9e:	4688      	mov	r8, r1
 8008fa0:	4669      	mov	r1, sp
 8008fa2:	4681      	mov	r9, r0
 8008fa4:	f7ff ff58 	bl	8008e58 <__b2d>
 8008fa8:	468b      	mov	fp, r1
 8008faa:	4606      	mov	r6, r0
 8008fac:	460f      	mov	r7, r1
 8008fae:	4640      	mov	r0, r8
 8008fb0:	a901      	add	r1, sp, #4
 8008fb2:	f7ff ff51 	bl	8008e58 <__b2d>
 8008fb6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008fba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008fbe:	460d      	mov	r5, r1
 8008fc0:	eba3 0c02 	sub.w	ip, r3, r2
 8008fc4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008fc8:	1a9b      	subs	r3, r3, r2
 8008fca:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	bfd5      	itete	le
 8008fd2:	460a      	movle	r2, r1
 8008fd4:	463a      	movgt	r2, r7
 8008fd6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008fda:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008fde:	bfd8      	it	le
 8008fe0:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8008fe4:	462b      	mov	r3, r5
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	4659      	mov	r1, fp
 8008fea:	4630      	mov	r0, r6
 8008fec:	f7f7 fb9e 	bl	800072c <__aeabi_ddiv>
 8008ff0:	b003      	add	sp, #12
 8008ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ff6 <__copybits>:
 8008ff6:	3901      	subs	r1, #1
 8008ff8:	b510      	push	{r4, lr}
 8008ffa:	1149      	asrs	r1, r1, #5
 8008ffc:	6914      	ldr	r4, [r2, #16]
 8008ffe:	3101      	adds	r1, #1
 8009000:	f102 0314 	add.w	r3, r2, #20
 8009004:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009008:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800900c:	42a3      	cmp	r3, r4
 800900e:	4602      	mov	r2, r0
 8009010:	d303      	bcc.n	800901a <__copybits+0x24>
 8009012:	2300      	movs	r3, #0
 8009014:	428a      	cmp	r2, r1
 8009016:	d305      	bcc.n	8009024 <__copybits+0x2e>
 8009018:	bd10      	pop	{r4, pc}
 800901a:	f853 2b04 	ldr.w	r2, [r3], #4
 800901e:	f840 2b04 	str.w	r2, [r0], #4
 8009022:	e7f3      	b.n	800900c <__copybits+0x16>
 8009024:	f842 3b04 	str.w	r3, [r2], #4
 8009028:	e7f4      	b.n	8009014 <__copybits+0x1e>

0800902a <__any_on>:
 800902a:	f100 0214 	add.w	r2, r0, #20
 800902e:	6900      	ldr	r0, [r0, #16]
 8009030:	114b      	asrs	r3, r1, #5
 8009032:	4298      	cmp	r0, r3
 8009034:	b510      	push	{r4, lr}
 8009036:	db11      	blt.n	800905c <__any_on+0x32>
 8009038:	dd0a      	ble.n	8009050 <__any_on+0x26>
 800903a:	f011 011f 	ands.w	r1, r1, #31
 800903e:	d007      	beq.n	8009050 <__any_on+0x26>
 8009040:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009044:	fa24 f001 	lsr.w	r0, r4, r1
 8009048:	fa00 f101 	lsl.w	r1, r0, r1
 800904c:	428c      	cmp	r4, r1
 800904e:	d10b      	bne.n	8009068 <__any_on+0x3e>
 8009050:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009054:	4293      	cmp	r3, r2
 8009056:	d803      	bhi.n	8009060 <__any_on+0x36>
 8009058:	2000      	movs	r0, #0
 800905a:	bd10      	pop	{r4, pc}
 800905c:	4603      	mov	r3, r0
 800905e:	e7f7      	b.n	8009050 <__any_on+0x26>
 8009060:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009064:	2900      	cmp	r1, #0
 8009066:	d0f5      	beq.n	8009054 <__any_on+0x2a>
 8009068:	2001      	movs	r0, #1
 800906a:	e7f6      	b.n	800905a <__any_on+0x30>

0800906c <_calloc_r>:
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	fb02 f401 	mul.w	r4, r2, r1
 8009072:	4621      	mov	r1, r4
 8009074:	f000 f808 	bl	8009088 <_malloc_r>
 8009078:	4605      	mov	r5, r0
 800907a:	b118      	cbz	r0, 8009084 <_calloc_r+0x18>
 800907c:	4622      	mov	r2, r4
 800907e:	2100      	movs	r1, #0
 8009080:	f7fe f934 	bl	80072ec <memset>
 8009084:	4628      	mov	r0, r5
 8009086:	bd38      	pop	{r3, r4, r5, pc}

08009088 <_malloc_r>:
 8009088:	b570      	push	{r4, r5, r6, lr}
 800908a:	1ccd      	adds	r5, r1, #3
 800908c:	f025 0503 	bic.w	r5, r5, #3
 8009090:	3508      	adds	r5, #8
 8009092:	2d0c      	cmp	r5, #12
 8009094:	bf38      	it	cc
 8009096:	250c      	movcc	r5, #12
 8009098:	2d00      	cmp	r5, #0
 800909a:	4606      	mov	r6, r0
 800909c:	db01      	blt.n	80090a2 <_malloc_r+0x1a>
 800909e:	42a9      	cmp	r1, r5
 80090a0:	d903      	bls.n	80090aa <_malloc_r+0x22>
 80090a2:	230c      	movs	r3, #12
 80090a4:	6033      	str	r3, [r6, #0]
 80090a6:	2000      	movs	r0, #0
 80090a8:	bd70      	pop	{r4, r5, r6, pc}
 80090aa:	f000 fc85 	bl	80099b8 <__malloc_lock>
 80090ae:	4a21      	ldr	r2, [pc, #132]	; (8009134 <_malloc_r+0xac>)
 80090b0:	6814      	ldr	r4, [r2, #0]
 80090b2:	4621      	mov	r1, r4
 80090b4:	b991      	cbnz	r1, 80090dc <_malloc_r+0x54>
 80090b6:	4c20      	ldr	r4, [pc, #128]	; (8009138 <_malloc_r+0xb0>)
 80090b8:	6823      	ldr	r3, [r4, #0]
 80090ba:	b91b      	cbnz	r3, 80090c4 <_malloc_r+0x3c>
 80090bc:	4630      	mov	r0, r6
 80090be:	f000 fb3f 	bl	8009740 <_sbrk_r>
 80090c2:	6020      	str	r0, [r4, #0]
 80090c4:	4629      	mov	r1, r5
 80090c6:	4630      	mov	r0, r6
 80090c8:	f000 fb3a 	bl	8009740 <_sbrk_r>
 80090cc:	1c43      	adds	r3, r0, #1
 80090ce:	d124      	bne.n	800911a <_malloc_r+0x92>
 80090d0:	230c      	movs	r3, #12
 80090d2:	4630      	mov	r0, r6
 80090d4:	6033      	str	r3, [r6, #0]
 80090d6:	f000 fc70 	bl	80099ba <__malloc_unlock>
 80090da:	e7e4      	b.n	80090a6 <_malloc_r+0x1e>
 80090dc:	680b      	ldr	r3, [r1, #0]
 80090de:	1b5b      	subs	r3, r3, r5
 80090e0:	d418      	bmi.n	8009114 <_malloc_r+0x8c>
 80090e2:	2b0b      	cmp	r3, #11
 80090e4:	d90f      	bls.n	8009106 <_malloc_r+0x7e>
 80090e6:	600b      	str	r3, [r1, #0]
 80090e8:	18cc      	adds	r4, r1, r3
 80090ea:	50cd      	str	r5, [r1, r3]
 80090ec:	4630      	mov	r0, r6
 80090ee:	f000 fc64 	bl	80099ba <__malloc_unlock>
 80090f2:	f104 000b 	add.w	r0, r4, #11
 80090f6:	1d23      	adds	r3, r4, #4
 80090f8:	f020 0007 	bic.w	r0, r0, #7
 80090fc:	1ac3      	subs	r3, r0, r3
 80090fe:	d0d3      	beq.n	80090a8 <_malloc_r+0x20>
 8009100:	425a      	negs	r2, r3
 8009102:	50e2      	str	r2, [r4, r3]
 8009104:	e7d0      	b.n	80090a8 <_malloc_r+0x20>
 8009106:	684b      	ldr	r3, [r1, #4]
 8009108:	428c      	cmp	r4, r1
 800910a:	bf16      	itet	ne
 800910c:	6063      	strne	r3, [r4, #4]
 800910e:	6013      	streq	r3, [r2, #0]
 8009110:	460c      	movne	r4, r1
 8009112:	e7eb      	b.n	80090ec <_malloc_r+0x64>
 8009114:	460c      	mov	r4, r1
 8009116:	6849      	ldr	r1, [r1, #4]
 8009118:	e7cc      	b.n	80090b4 <_malloc_r+0x2c>
 800911a:	1cc4      	adds	r4, r0, #3
 800911c:	f024 0403 	bic.w	r4, r4, #3
 8009120:	42a0      	cmp	r0, r4
 8009122:	d005      	beq.n	8009130 <_malloc_r+0xa8>
 8009124:	1a21      	subs	r1, r4, r0
 8009126:	4630      	mov	r0, r6
 8009128:	f000 fb0a 	bl	8009740 <_sbrk_r>
 800912c:	3001      	adds	r0, #1
 800912e:	d0cf      	beq.n	80090d0 <_malloc_r+0x48>
 8009130:	6025      	str	r5, [r4, #0]
 8009132:	e7db      	b.n	80090ec <_malloc_r+0x64>
 8009134:	200005e8 	.word	0x200005e8
 8009138:	200005ec 	.word	0x200005ec

0800913c <_sungetc_r>:
 800913c:	b538      	push	{r3, r4, r5, lr}
 800913e:	1c4b      	adds	r3, r1, #1
 8009140:	4614      	mov	r4, r2
 8009142:	d103      	bne.n	800914c <_sungetc_r+0x10>
 8009144:	f04f 35ff 	mov.w	r5, #4294967295
 8009148:	4628      	mov	r0, r5
 800914a:	bd38      	pop	{r3, r4, r5, pc}
 800914c:	8993      	ldrh	r3, [r2, #12]
 800914e:	b2cd      	uxtb	r5, r1
 8009150:	f023 0320 	bic.w	r3, r3, #32
 8009154:	8193      	strh	r3, [r2, #12]
 8009156:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009158:	6852      	ldr	r2, [r2, #4]
 800915a:	b18b      	cbz	r3, 8009180 <_sungetc_r+0x44>
 800915c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800915e:	4293      	cmp	r3, r2
 8009160:	dd08      	ble.n	8009174 <_sungetc_r+0x38>
 8009162:	6823      	ldr	r3, [r4, #0]
 8009164:	1e5a      	subs	r2, r3, #1
 8009166:	6022      	str	r2, [r4, #0]
 8009168:	f803 5c01 	strb.w	r5, [r3, #-1]
 800916c:	6863      	ldr	r3, [r4, #4]
 800916e:	3301      	adds	r3, #1
 8009170:	6063      	str	r3, [r4, #4]
 8009172:	e7e9      	b.n	8009148 <_sungetc_r+0xc>
 8009174:	4621      	mov	r1, r4
 8009176:	f000 fbc3 	bl	8009900 <__submore>
 800917a:	2800      	cmp	r0, #0
 800917c:	d0f1      	beq.n	8009162 <_sungetc_r+0x26>
 800917e:	e7e1      	b.n	8009144 <_sungetc_r+0x8>
 8009180:	6921      	ldr	r1, [r4, #16]
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	b151      	cbz	r1, 800919c <_sungetc_r+0x60>
 8009186:	4299      	cmp	r1, r3
 8009188:	d208      	bcs.n	800919c <_sungetc_r+0x60>
 800918a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800918e:	42a9      	cmp	r1, r5
 8009190:	d104      	bne.n	800919c <_sungetc_r+0x60>
 8009192:	3b01      	subs	r3, #1
 8009194:	3201      	adds	r2, #1
 8009196:	6023      	str	r3, [r4, #0]
 8009198:	6062      	str	r2, [r4, #4]
 800919a:	e7d5      	b.n	8009148 <_sungetc_r+0xc>
 800919c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80091a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091a4:	6363      	str	r3, [r4, #52]	; 0x34
 80091a6:	2303      	movs	r3, #3
 80091a8:	63a3      	str	r3, [r4, #56]	; 0x38
 80091aa:	4623      	mov	r3, r4
 80091ac:	f803 5f46 	strb.w	r5, [r3, #70]!
 80091b0:	6023      	str	r3, [r4, #0]
 80091b2:	2301      	movs	r3, #1
 80091b4:	e7dc      	b.n	8009170 <_sungetc_r+0x34>

080091b6 <__ssrefill_r>:
 80091b6:	b510      	push	{r4, lr}
 80091b8:	460c      	mov	r4, r1
 80091ba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80091bc:	b169      	cbz	r1, 80091da <__ssrefill_r+0x24>
 80091be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091c2:	4299      	cmp	r1, r3
 80091c4:	d001      	beq.n	80091ca <__ssrefill_r+0x14>
 80091c6:	f000 fbf9 	bl	80099bc <_free_r>
 80091ca:	2000      	movs	r0, #0
 80091cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091ce:	6360      	str	r0, [r4, #52]	; 0x34
 80091d0:	6063      	str	r3, [r4, #4]
 80091d2:	b113      	cbz	r3, 80091da <__ssrefill_r+0x24>
 80091d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80091d6:	6023      	str	r3, [r4, #0]
 80091d8:	bd10      	pop	{r4, pc}
 80091da:	6923      	ldr	r3, [r4, #16]
 80091dc:	f04f 30ff 	mov.w	r0, #4294967295
 80091e0:	6023      	str	r3, [r4, #0]
 80091e2:	2300      	movs	r3, #0
 80091e4:	6063      	str	r3, [r4, #4]
 80091e6:	89a3      	ldrh	r3, [r4, #12]
 80091e8:	f043 0320 	orr.w	r3, r3, #32
 80091ec:	81a3      	strh	r3, [r4, #12]
 80091ee:	e7f3      	b.n	80091d8 <__ssrefill_r+0x22>

080091f0 <__ssvfiscanf_r>:
 80091f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f4:	460c      	mov	r4, r1
 80091f6:	2100      	movs	r1, #0
 80091f8:	4606      	mov	r6, r0
 80091fa:	4692      	mov	sl, r2
 80091fc:	270a      	movs	r7, #10
 80091fe:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8009202:	9144      	str	r1, [sp, #272]	; 0x110
 8009204:	9145      	str	r1, [sp, #276]	; 0x114
 8009206:	499e      	ldr	r1, [pc, #632]	; (8009480 <__ssvfiscanf_r+0x290>)
 8009208:	f10d 0804 	add.w	r8, sp, #4
 800920c:	91a0      	str	r1, [sp, #640]	; 0x280
 800920e:	499d      	ldr	r1, [pc, #628]	; (8009484 <__ssvfiscanf_r+0x294>)
 8009210:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8009488 <__ssvfiscanf_r+0x298>
 8009214:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009218:	91a1      	str	r1, [sp, #644]	; 0x284
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	f89a 3000 	ldrb.w	r3, [sl]
 8009220:	2b00      	cmp	r3, #0
 8009222:	f000 812a 	beq.w	800947a <__ssvfiscanf_r+0x28a>
 8009226:	4655      	mov	r5, sl
 8009228:	f7ff fb06 	bl	8008838 <__locale_ctype_ptr>
 800922c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8009230:	4458      	add	r0, fp
 8009232:	7843      	ldrb	r3, [r0, #1]
 8009234:	f013 0308 	ands.w	r3, r3, #8
 8009238:	d01c      	beq.n	8009274 <__ssvfiscanf_r+0x84>
 800923a:	6863      	ldr	r3, [r4, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	dd12      	ble.n	8009266 <__ssvfiscanf_r+0x76>
 8009240:	f7ff fafa 	bl	8008838 <__locale_ctype_ptr>
 8009244:	6823      	ldr	r3, [r4, #0]
 8009246:	781a      	ldrb	r2, [r3, #0]
 8009248:	4410      	add	r0, r2
 800924a:	7842      	ldrb	r2, [r0, #1]
 800924c:	0712      	lsls	r2, r2, #28
 800924e:	d401      	bmi.n	8009254 <__ssvfiscanf_r+0x64>
 8009250:	46aa      	mov	sl, r5
 8009252:	e7e3      	b.n	800921c <__ssvfiscanf_r+0x2c>
 8009254:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009256:	3301      	adds	r3, #1
 8009258:	3201      	adds	r2, #1
 800925a:	9245      	str	r2, [sp, #276]	; 0x114
 800925c:	6862      	ldr	r2, [r4, #4]
 800925e:	6023      	str	r3, [r4, #0]
 8009260:	3a01      	subs	r2, #1
 8009262:	6062      	str	r2, [r4, #4]
 8009264:	e7e9      	b.n	800923a <__ssvfiscanf_r+0x4a>
 8009266:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009268:	4621      	mov	r1, r4
 800926a:	4630      	mov	r0, r6
 800926c:	4798      	blx	r3
 800926e:	2800      	cmp	r0, #0
 8009270:	d0e6      	beq.n	8009240 <__ssvfiscanf_r+0x50>
 8009272:	e7ed      	b.n	8009250 <__ssvfiscanf_r+0x60>
 8009274:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8009278:	f040 8082 	bne.w	8009380 <__ssvfiscanf_r+0x190>
 800927c:	9343      	str	r3, [sp, #268]	; 0x10c
 800927e:	9341      	str	r3, [sp, #260]	; 0x104
 8009280:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8009284:	2b2a      	cmp	r3, #42	; 0x2a
 8009286:	d103      	bne.n	8009290 <__ssvfiscanf_r+0xa0>
 8009288:	2310      	movs	r3, #16
 800928a:	f10a 0502 	add.w	r5, sl, #2
 800928e:	9341      	str	r3, [sp, #260]	; 0x104
 8009290:	46aa      	mov	sl, r5
 8009292:	f815 1b01 	ldrb.w	r1, [r5], #1
 8009296:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800929a:	2a09      	cmp	r2, #9
 800929c:	d922      	bls.n	80092e4 <__ssvfiscanf_r+0xf4>
 800929e:	2203      	movs	r2, #3
 80092a0:	4879      	ldr	r0, [pc, #484]	; (8009488 <__ssvfiscanf_r+0x298>)
 80092a2:	f000 fb7b 	bl	800999c <memchr>
 80092a6:	b138      	cbz	r0, 80092b8 <__ssvfiscanf_r+0xc8>
 80092a8:	eba0 0309 	sub.w	r3, r0, r9
 80092ac:	2001      	movs	r0, #1
 80092ae:	46aa      	mov	sl, r5
 80092b0:	4098      	lsls	r0, r3
 80092b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80092b4:	4318      	orrs	r0, r3
 80092b6:	9041      	str	r0, [sp, #260]	; 0x104
 80092b8:	f89a 3000 	ldrb.w	r3, [sl]
 80092bc:	f10a 0501 	add.w	r5, sl, #1
 80092c0:	2b67      	cmp	r3, #103	; 0x67
 80092c2:	d82b      	bhi.n	800931c <__ssvfiscanf_r+0x12c>
 80092c4:	2b65      	cmp	r3, #101	; 0x65
 80092c6:	f080 809f 	bcs.w	8009408 <__ssvfiscanf_r+0x218>
 80092ca:	2b47      	cmp	r3, #71	; 0x47
 80092cc:	d810      	bhi.n	80092f0 <__ssvfiscanf_r+0x100>
 80092ce:	2b45      	cmp	r3, #69	; 0x45
 80092d0:	f080 809a 	bcs.w	8009408 <__ssvfiscanf_r+0x218>
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d06c      	beq.n	80093b2 <__ssvfiscanf_r+0x1c2>
 80092d8:	2b25      	cmp	r3, #37	; 0x25
 80092da:	d051      	beq.n	8009380 <__ssvfiscanf_r+0x190>
 80092dc:	2303      	movs	r3, #3
 80092de:	9742      	str	r7, [sp, #264]	; 0x108
 80092e0:	9347      	str	r3, [sp, #284]	; 0x11c
 80092e2:	e027      	b.n	8009334 <__ssvfiscanf_r+0x144>
 80092e4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80092e6:	fb07 1303 	mla	r3, r7, r3, r1
 80092ea:	3b30      	subs	r3, #48	; 0x30
 80092ec:	9343      	str	r3, [sp, #268]	; 0x10c
 80092ee:	e7cf      	b.n	8009290 <__ssvfiscanf_r+0xa0>
 80092f0:	2b5b      	cmp	r3, #91	; 0x5b
 80092f2:	d06a      	beq.n	80093ca <__ssvfiscanf_r+0x1da>
 80092f4:	d80c      	bhi.n	8009310 <__ssvfiscanf_r+0x120>
 80092f6:	2b58      	cmp	r3, #88	; 0x58
 80092f8:	d1f0      	bne.n	80092dc <__ssvfiscanf_r+0xec>
 80092fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80092fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009300:	9241      	str	r2, [sp, #260]	; 0x104
 8009302:	2210      	movs	r2, #16
 8009304:	9242      	str	r2, [sp, #264]	; 0x108
 8009306:	2b6e      	cmp	r3, #110	; 0x6e
 8009308:	bf8c      	ite	hi
 800930a:	2304      	movhi	r3, #4
 800930c:	2303      	movls	r3, #3
 800930e:	e010      	b.n	8009332 <__ssvfiscanf_r+0x142>
 8009310:	2b63      	cmp	r3, #99	; 0x63
 8009312:	d065      	beq.n	80093e0 <__ssvfiscanf_r+0x1f0>
 8009314:	2b64      	cmp	r3, #100	; 0x64
 8009316:	d1e1      	bne.n	80092dc <__ssvfiscanf_r+0xec>
 8009318:	9742      	str	r7, [sp, #264]	; 0x108
 800931a:	e7f4      	b.n	8009306 <__ssvfiscanf_r+0x116>
 800931c:	2b70      	cmp	r3, #112	; 0x70
 800931e:	d04b      	beq.n	80093b8 <__ssvfiscanf_r+0x1c8>
 8009320:	d826      	bhi.n	8009370 <__ssvfiscanf_r+0x180>
 8009322:	2b6e      	cmp	r3, #110	; 0x6e
 8009324:	d062      	beq.n	80093ec <__ssvfiscanf_r+0x1fc>
 8009326:	d84c      	bhi.n	80093c2 <__ssvfiscanf_r+0x1d2>
 8009328:	2b69      	cmp	r3, #105	; 0x69
 800932a:	d1d7      	bne.n	80092dc <__ssvfiscanf_r+0xec>
 800932c:	2300      	movs	r3, #0
 800932e:	9342      	str	r3, [sp, #264]	; 0x108
 8009330:	2303      	movs	r3, #3
 8009332:	9347      	str	r3, [sp, #284]	; 0x11c
 8009334:	6863      	ldr	r3, [r4, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	dd68      	ble.n	800940c <__ssvfiscanf_r+0x21c>
 800933a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800933c:	0659      	lsls	r1, r3, #25
 800933e:	d407      	bmi.n	8009350 <__ssvfiscanf_r+0x160>
 8009340:	f7ff fa7a 	bl	8008838 <__locale_ctype_ptr>
 8009344:	6823      	ldr	r3, [r4, #0]
 8009346:	781a      	ldrb	r2, [r3, #0]
 8009348:	4410      	add	r0, r2
 800934a:	7842      	ldrb	r2, [r0, #1]
 800934c:	0712      	lsls	r2, r2, #28
 800934e:	d464      	bmi.n	800941a <__ssvfiscanf_r+0x22a>
 8009350:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009352:	2b02      	cmp	r3, #2
 8009354:	dc73      	bgt.n	800943e <__ssvfiscanf_r+0x24e>
 8009356:	466b      	mov	r3, sp
 8009358:	4622      	mov	r2, r4
 800935a:	a941      	add	r1, sp, #260	; 0x104
 800935c:	4630      	mov	r0, r6
 800935e:	f000 f897 	bl	8009490 <_scanf_chars>
 8009362:	2801      	cmp	r0, #1
 8009364:	f000 8089 	beq.w	800947a <__ssvfiscanf_r+0x28a>
 8009368:	2802      	cmp	r0, #2
 800936a:	f47f af71 	bne.w	8009250 <__ssvfiscanf_r+0x60>
 800936e:	e01d      	b.n	80093ac <__ssvfiscanf_r+0x1bc>
 8009370:	2b75      	cmp	r3, #117	; 0x75
 8009372:	d0d1      	beq.n	8009318 <__ssvfiscanf_r+0x128>
 8009374:	2b78      	cmp	r3, #120	; 0x78
 8009376:	d0c0      	beq.n	80092fa <__ssvfiscanf_r+0x10a>
 8009378:	2b73      	cmp	r3, #115	; 0x73
 800937a:	d1af      	bne.n	80092dc <__ssvfiscanf_r+0xec>
 800937c:	2302      	movs	r3, #2
 800937e:	e7d8      	b.n	8009332 <__ssvfiscanf_r+0x142>
 8009380:	6863      	ldr	r3, [r4, #4]
 8009382:	2b00      	cmp	r3, #0
 8009384:	dd0c      	ble.n	80093a0 <__ssvfiscanf_r+0x1b0>
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	781a      	ldrb	r2, [r3, #0]
 800938a:	455a      	cmp	r2, fp
 800938c:	d175      	bne.n	800947a <__ssvfiscanf_r+0x28a>
 800938e:	3301      	adds	r3, #1
 8009390:	6862      	ldr	r2, [r4, #4]
 8009392:	6023      	str	r3, [r4, #0]
 8009394:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009396:	3a01      	subs	r2, #1
 8009398:	3301      	adds	r3, #1
 800939a:	6062      	str	r2, [r4, #4]
 800939c:	9345      	str	r3, [sp, #276]	; 0x114
 800939e:	e757      	b.n	8009250 <__ssvfiscanf_r+0x60>
 80093a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80093a2:	4621      	mov	r1, r4
 80093a4:	4630      	mov	r0, r6
 80093a6:	4798      	blx	r3
 80093a8:	2800      	cmp	r0, #0
 80093aa:	d0ec      	beq.n	8009386 <__ssvfiscanf_r+0x196>
 80093ac:	9844      	ldr	r0, [sp, #272]	; 0x110
 80093ae:	2800      	cmp	r0, #0
 80093b0:	d159      	bne.n	8009466 <__ssvfiscanf_r+0x276>
 80093b2:	f04f 30ff 	mov.w	r0, #4294967295
 80093b6:	e05c      	b.n	8009472 <__ssvfiscanf_r+0x282>
 80093b8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80093ba:	f042 0220 	orr.w	r2, r2, #32
 80093be:	9241      	str	r2, [sp, #260]	; 0x104
 80093c0:	e79b      	b.n	80092fa <__ssvfiscanf_r+0x10a>
 80093c2:	2308      	movs	r3, #8
 80093c4:	9342      	str	r3, [sp, #264]	; 0x108
 80093c6:	2304      	movs	r3, #4
 80093c8:	e7b3      	b.n	8009332 <__ssvfiscanf_r+0x142>
 80093ca:	4629      	mov	r1, r5
 80093cc:	4640      	mov	r0, r8
 80093ce:	f000 f9c7 	bl	8009760 <__sccl>
 80093d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80093d4:	4605      	mov	r5, r0
 80093d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093da:	9341      	str	r3, [sp, #260]	; 0x104
 80093dc:	2301      	movs	r3, #1
 80093de:	e7a8      	b.n	8009332 <__ssvfiscanf_r+0x142>
 80093e0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80093e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093e6:	9341      	str	r3, [sp, #260]	; 0x104
 80093e8:	2300      	movs	r3, #0
 80093ea:	e7a2      	b.n	8009332 <__ssvfiscanf_r+0x142>
 80093ec:	9841      	ldr	r0, [sp, #260]	; 0x104
 80093ee:	06c3      	lsls	r3, r0, #27
 80093f0:	f53f af2e 	bmi.w	8009250 <__ssvfiscanf_r+0x60>
 80093f4:	9b00      	ldr	r3, [sp, #0]
 80093f6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80093f8:	1d19      	adds	r1, r3, #4
 80093fa:	9100      	str	r1, [sp, #0]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	07c0      	lsls	r0, r0, #31
 8009400:	bf4c      	ite	mi
 8009402:	801a      	strhmi	r2, [r3, #0]
 8009404:	601a      	strpl	r2, [r3, #0]
 8009406:	e723      	b.n	8009250 <__ssvfiscanf_r+0x60>
 8009408:	2305      	movs	r3, #5
 800940a:	e792      	b.n	8009332 <__ssvfiscanf_r+0x142>
 800940c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800940e:	4621      	mov	r1, r4
 8009410:	4630      	mov	r0, r6
 8009412:	4798      	blx	r3
 8009414:	2800      	cmp	r0, #0
 8009416:	d090      	beq.n	800933a <__ssvfiscanf_r+0x14a>
 8009418:	e7c8      	b.n	80093ac <__ssvfiscanf_r+0x1bc>
 800941a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800941c:	3201      	adds	r2, #1
 800941e:	9245      	str	r2, [sp, #276]	; 0x114
 8009420:	6862      	ldr	r2, [r4, #4]
 8009422:	3a01      	subs	r2, #1
 8009424:	2a00      	cmp	r2, #0
 8009426:	6062      	str	r2, [r4, #4]
 8009428:	dd02      	ble.n	8009430 <__ssvfiscanf_r+0x240>
 800942a:	3301      	adds	r3, #1
 800942c:	6023      	str	r3, [r4, #0]
 800942e:	e787      	b.n	8009340 <__ssvfiscanf_r+0x150>
 8009430:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009432:	4621      	mov	r1, r4
 8009434:	4630      	mov	r0, r6
 8009436:	4798      	blx	r3
 8009438:	2800      	cmp	r0, #0
 800943a:	d081      	beq.n	8009340 <__ssvfiscanf_r+0x150>
 800943c:	e7b6      	b.n	80093ac <__ssvfiscanf_r+0x1bc>
 800943e:	2b04      	cmp	r3, #4
 8009440:	dc06      	bgt.n	8009450 <__ssvfiscanf_r+0x260>
 8009442:	466b      	mov	r3, sp
 8009444:	4622      	mov	r2, r4
 8009446:	a941      	add	r1, sp, #260	; 0x104
 8009448:	4630      	mov	r0, r6
 800944a:	f000 f883 	bl	8009554 <_scanf_i>
 800944e:	e788      	b.n	8009362 <__ssvfiscanf_r+0x172>
 8009450:	4b0e      	ldr	r3, [pc, #56]	; (800948c <__ssvfiscanf_r+0x29c>)
 8009452:	2b00      	cmp	r3, #0
 8009454:	f43f aefc 	beq.w	8009250 <__ssvfiscanf_r+0x60>
 8009458:	466b      	mov	r3, sp
 800945a:	4622      	mov	r2, r4
 800945c:	a941      	add	r1, sp, #260	; 0x104
 800945e:	4630      	mov	r0, r6
 8009460:	f3af 8000 	nop.w
 8009464:	e77d      	b.n	8009362 <__ssvfiscanf_r+0x172>
 8009466:	89a3      	ldrh	r3, [r4, #12]
 8009468:	f013 0f40 	tst.w	r3, #64	; 0x40
 800946c:	bf18      	it	ne
 800946e:	f04f 30ff 	movne.w	r0, #4294967295
 8009472:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8009476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800947a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800947c:	e7f9      	b.n	8009472 <__ssvfiscanf_r+0x282>
 800947e:	bf00      	nop
 8009480:	0800913d 	.word	0x0800913d
 8009484:	080091b7 	.word	0x080091b7
 8009488:	0800ac3c 	.word	0x0800ac3c
 800948c:	00000000 	.word	0x00000000

08009490 <_scanf_chars>:
 8009490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009494:	4615      	mov	r5, r2
 8009496:	688a      	ldr	r2, [r1, #8]
 8009498:	4680      	mov	r8, r0
 800949a:	460c      	mov	r4, r1
 800949c:	b932      	cbnz	r2, 80094ac <_scanf_chars+0x1c>
 800949e:	698a      	ldr	r2, [r1, #24]
 80094a0:	2a00      	cmp	r2, #0
 80094a2:	bf14      	ite	ne
 80094a4:	f04f 32ff 	movne.w	r2, #4294967295
 80094a8:	2201      	moveq	r2, #1
 80094aa:	608a      	str	r2, [r1, #8]
 80094ac:	2600      	movs	r6, #0
 80094ae:	6822      	ldr	r2, [r4, #0]
 80094b0:	06d1      	lsls	r1, r2, #27
 80094b2:	bf5f      	itttt	pl
 80094b4:	681a      	ldrpl	r2, [r3, #0]
 80094b6:	1d11      	addpl	r1, r2, #4
 80094b8:	6019      	strpl	r1, [r3, #0]
 80094ba:	6817      	ldrpl	r7, [r2, #0]
 80094bc:	69a3      	ldr	r3, [r4, #24]
 80094be:	b1db      	cbz	r3, 80094f8 <_scanf_chars+0x68>
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d107      	bne.n	80094d4 <_scanf_chars+0x44>
 80094c4:	682b      	ldr	r3, [r5, #0]
 80094c6:	6962      	ldr	r2, [r4, #20]
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	5cd3      	ldrb	r3, [r2, r3]
 80094cc:	b9a3      	cbnz	r3, 80094f8 <_scanf_chars+0x68>
 80094ce:	2e00      	cmp	r6, #0
 80094d0:	d131      	bne.n	8009536 <_scanf_chars+0xa6>
 80094d2:	e006      	b.n	80094e2 <_scanf_chars+0x52>
 80094d4:	2b02      	cmp	r3, #2
 80094d6:	d007      	beq.n	80094e8 <_scanf_chars+0x58>
 80094d8:	2e00      	cmp	r6, #0
 80094da:	d12c      	bne.n	8009536 <_scanf_chars+0xa6>
 80094dc:	69a3      	ldr	r3, [r4, #24]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d129      	bne.n	8009536 <_scanf_chars+0xa6>
 80094e2:	2001      	movs	r0, #1
 80094e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094e8:	f7ff f9a6 	bl	8008838 <__locale_ctype_ptr>
 80094ec:	682b      	ldr	r3, [r5, #0]
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	4418      	add	r0, r3
 80094f2:	7843      	ldrb	r3, [r0, #1]
 80094f4:	071b      	lsls	r3, r3, #28
 80094f6:	d4ef      	bmi.n	80094d8 <_scanf_chars+0x48>
 80094f8:	6823      	ldr	r3, [r4, #0]
 80094fa:	3601      	adds	r6, #1
 80094fc:	06da      	lsls	r2, r3, #27
 80094fe:	bf5e      	ittt	pl
 8009500:	682b      	ldrpl	r3, [r5, #0]
 8009502:	781b      	ldrbpl	r3, [r3, #0]
 8009504:	703b      	strbpl	r3, [r7, #0]
 8009506:	682a      	ldr	r2, [r5, #0]
 8009508:	686b      	ldr	r3, [r5, #4]
 800950a:	f102 0201 	add.w	r2, r2, #1
 800950e:	602a      	str	r2, [r5, #0]
 8009510:	68a2      	ldr	r2, [r4, #8]
 8009512:	f103 33ff 	add.w	r3, r3, #4294967295
 8009516:	f102 32ff 	add.w	r2, r2, #4294967295
 800951a:	606b      	str	r3, [r5, #4]
 800951c:	bf58      	it	pl
 800951e:	3701      	addpl	r7, #1
 8009520:	60a2      	str	r2, [r4, #8]
 8009522:	b142      	cbz	r2, 8009536 <_scanf_chars+0xa6>
 8009524:	2b00      	cmp	r3, #0
 8009526:	dcc9      	bgt.n	80094bc <_scanf_chars+0x2c>
 8009528:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800952c:	4629      	mov	r1, r5
 800952e:	4640      	mov	r0, r8
 8009530:	4798      	blx	r3
 8009532:	2800      	cmp	r0, #0
 8009534:	d0c2      	beq.n	80094bc <_scanf_chars+0x2c>
 8009536:	6823      	ldr	r3, [r4, #0]
 8009538:	f013 0310 	ands.w	r3, r3, #16
 800953c:	d105      	bne.n	800954a <_scanf_chars+0xba>
 800953e:	68e2      	ldr	r2, [r4, #12]
 8009540:	3201      	adds	r2, #1
 8009542:	60e2      	str	r2, [r4, #12]
 8009544:	69a2      	ldr	r2, [r4, #24]
 8009546:	b102      	cbz	r2, 800954a <_scanf_chars+0xba>
 8009548:	703b      	strb	r3, [r7, #0]
 800954a:	6923      	ldr	r3, [r4, #16]
 800954c:	2000      	movs	r0, #0
 800954e:	441e      	add	r6, r3
 8009550:	6126      	str	r6, [r4, #16]
 8009552:	e7c7      	b.n	80094e4 <_scanf_chars+0x54>

08009554 <_scanf_i>:
 8009554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009558:	460c      	mov	r4, r1
 800955a:	469a      	mov	sl, r3
 800955c:	4b74      	ldr	r3, [pc, #464]	; (8009730 <_scanf_i+0x1dc>)
 800955e:	b087      	sub	sp, #28
 8009560:	4683      	mov	fp, r0
 8009562:	4616      	mov	r6, r2
 8009564:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009568:	ab03      	add	r3, sp, #12
 800956a:	68a7      	ldr	r7, [r4, #8]
 800956c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009570:	4b70      	ldr	r3, [pc, #448]	; (8009734 <_scanf_i+0x1e0>)
 8009572:	69a1      	ldr	r1, [r4, #24]
 8009574:	4a70      	ldr	r2, [pc, #448]	; (8009738 <_scanf_i+0x1e4>)
 8009576:	f104 091c 	add.w	r9, r4, #28
 800957a:	2903      	cmp	r1, #3
 800957c:	bf08      	it	eq
 800957e:	461a      	moveq	r2, r3
 8009580:	1e7b      	subs	r3, r7, #1
 8009582:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8009586:	bf84      	itt	hi
 8009588:	f240 135d 	movwhi	r3, #349	; 0x15d
 800958c:	60a3      	strhi	r3, [r4, #8]
 800958e:	6823      	ldr	r3, [r4, #0]
 8009590:	bf88      	it	hi
 8009592:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009596:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800959a:	6023      	str	r3, [r4, #0]
 800959c:	bf98      	it	ls
 800959e:	2700      	movls	r7, #0
 80095a0:	464b      	mov	r3, r9
 80095a2:	f04f 0800 	mov.w	r8, #0
 80095a6:	9200      	str	r2, [sp, #0]
 80095a8:	bf88      	it	hi
 80095aa:	197f      	addhi	r7, r7, r5
 80095ac:	6831      	ldr	r1, [r6, #0]
 80095ae:	9301      	str	r3, [sp, #4]
 80095b0:	ab03      	add	r3, sp, #12
 80095b2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80095b6:	2202      	movs	r2, #2
 80095b8:	7809      	ldrb	r1, [r1, #0]
 80095ba:	f000 f9ef 	bl	800999c <memchr>
 80095be:	9b01      	ldr	r3, [sp, #4]
 80095c0:	b330      	cbz	r0, 8009610 <_scanf_i+0xbc>
 80095c2:	f1b8 0f01 	cmp.w	r8, #1
 80095c6:	d15a      	bne.n	800967e <_scanf_i+0x12a>
 80095c8:	6862      	ldr	r2, [r4, #4]
 80095ca:	b92a      	cbnz	r2, 80095d8 <_scanf_i+0x84>
 80095cc:	2108      	movs	r1, #8
 80095ce:	6822      	ldr	r2, [r4, #0]
 80095d0:	6061      	str	r1, [r4, #4]
 80095d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095d6:	6022      	str	r2, [r4, #0]
 80095d8:	6822      	ldr	r2, [r4, #0]
 80095da:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80095de:	6022      	str	r2, [r4, #0]
 80095e0:	68a2      	ldr	r2, [r4, #8]
 80095e2:	1e51      	subs	r1, r2, #1
 80095e4:	60a1      	str	r1, [r4, #8]
 80095e6:	b19a      	cbz	r2, 8009610 <_scanf_i+0xbc>
 80095e8:	6832      	ldr	r2, [r6, #0]
 80095ea:	1c5d      	adds	r5, r3, #1
 80095ec:	1c51      	adds	r1, r2, #1
 80095ee:	6031      	str	r1, [r6, #0]
 80095f0:	7812      	ldrb	r2, [r2, #0]
 80095f2:	701a      	strb	r2, [r3, #0]
 80095f4:	6873      	ldr	r3, [r6, #4]
 80095f6:	3b01      	subs	r3, #1
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	6073      	str	r3, [r6, #4]
 80095fc:	dc07      	bgt.n	800960e <_scanf_i+0xba>
 80095fe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009602:	4631      	mov	r1, r6
 8009604:	4658      	mov	r0, fp
 8009606:	4798      	blx	r3
 8009608:	2800      	cmp	r0, #0
 800960a:	f040 8087 	bne.w	800971c <_scanf_i+0x1c8>
 800960e:	462b      	mov	r3, r5
 8009610:	f108 0801 	add.w	r8, r8, #1
 8009614:	f1b8 0f03 	cmp.w	r8, #3
 8009618:	d1c8      	bne.n	80095ac <_scanf_i+0x58>
 800961a:	6862      	ldr	r2, [r4, #4]
 800961c:	b90a      	cbnz	r2, 8009622 <_scanf_i+0xce>
 800961e:	220a      	movs	r2, #10
 8009620:	6062      	str	r2, [r4, #4]
 8009622:	6862      	ldr	r2, [r4, #4]
 8009624:	4945      	ldr	r1, [pc, #276]	; (800973c <_scanf_i+0x1e8>)
 8009626:	6960      	ldr	r0, [r4, #20]
 8009628:	1a89      	subs	r1, r1, r2
 800962a:	9301      	str	r3, [sp, #4]
 800962c:	f000 f898 	bl	8009760 <__sccl>
 8009630:	9b01      	ldr	r3, [sp, #4]
 8009632:	f04f 0800 	mov.w	r8, #0
 8009636:	461d      	mov	r5, r3
 8009638:	68a3      	ldr	r3, [r4, #8]
 800963a:	6822      	ldr	r2, [r4, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d03b      	beq.n	80096b8 <_scanf_i+0x164>
 8009640:	6831      	ldr	r1, [r6, #0]
 8009642:	6960      	ldr	r0, [r4, #20]
 8009644:	f891 c000 	ldrb.w	ip, [r1]
 8009648:	f810 000c 	ldrb.w	r0, [r0, ip]
 800964c:	2800      	cmp	r0, #0
 800964e:	d033      	beq.n	80096b8 <_scanf_i+0x164>
 8009650:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009654:	d121      	bne.n	800969a <_scanf_i+0x146>
 8009656:	0510      	lsls	r0, r2, #20
 8009658:	d51f      	bpl.n	800969a <_scanf_i+0x146>
 800965a:	f108 0801 	add.w	r8, r8, #1
 800965e:	b117      	cbz	r7, 8009666 <_scanf_i+0x112>
 8009660:	3301      	adds	r3, #1
 8009662:	3f01      	subs	r7, #1
 8009664:	60a3      	str	r3, [r4, #8]
 8009666:	6873      	ldr	r3, [r6, #4]
 8009668:	3b01      	subs	r3, #1
 800966a:	2b00      	cmp	r3, #0
 800966c:	6073      	str	r3, [r6, #4]
 800966e:	dd1c      	ble.n	80096aa <_scanf_i+0x156>
 8009670:	6833      	ldr	r3, [r6, #0]
 8009672:	3301      	adds	r3, #1
 8009674:	6033      	str	r3, [r6, #0]
 8009676:	68a3      	ldr	r3, [r4, #8]
 8009678:	3b01      	subs	r3, #1
 800967a:	60a3      	str	r3, [r4, #8]
 800967c:	e7dc      	b.n	8009638 <_scanf_i+0xe4>
 800967e:	f1b8 0f02 	cmp.w	r8, #2
 8009682:	d1ad      	bne.n	80095e0 <_scanf_i+0x8c>
 8009684:	6822      	ldr	r2, [r4, #0]
 8009686:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800968a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800968e:	d1bf      	bne.n	8009610 <_scanf_i+0xbc>
 8009690:	2110      	movs	r1, #16
 8009692:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009696:	6061      	str	r1, [r4, #4]
 8009698:	e7a1      	b.n	80095de <_scanf_i+0x8a>
 800969a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800969e:	6022      	str	r2, [r4, #0]
 80096a0:	780b      	ldrb	r3, [r1, #0]
 80096a2:	3501      	adds	r5, #1
 80096a4:	f805 3c01 	strb.w	r3, [r5, #-1]
 80096a8:	e7dd      	b.n	8009666 <_scanf_i+0x112>
 80096aa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80096ae:	4631      	mov	r1, r6
 80096b0:	4658      	mov	r0, fp
 80096b2:	4798      	blx	r3
 80096b4:	2800      	cmp	r0, #0
 80096b6:	d0de      	beq.n	8009676 <_scanf_i+0x122>
 80096b8:	6823      	ldr	r3, [r4, #0]
 80096ba:	05d9      	lsls	r1, r3, #23
 80096bc:	d50c      	bpl.n	80096d8 <_scanf_i+0x184>
 80096be:	454d      	cmp	r5, r9
 80096c0:	d908      	bls.n	80096d4 <_scanf_i+0x180>
 80096c2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80096c6:	1e6f      	subs	r7, r5, #1
 80096c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80096cc:	4632      	mov	r2, r6
 80096ce:	4658      	mov	r0, fp
 80096d0:	4798      	blx	r3
 80096d2:	463d      	mov	r5, r7
 80096d4:	454d      	cmp	r5, r9
 80096d6:	d029      	beq.n	800972c <_scanf_i+0x1d8>
 80096d8:	6822      	ldr	r2, [r4, #0]
 80096da:	f012 0210 	ands.w	r2, r2, #16
 80096de:	d113      	bne.n	8009708 <_scanf_i+0x1b4>
 80096e0:	702a      	strb	r2, [r5, #0]
 80096e2:	6863      	ldr	r3, [r4, #4]
 80096e4:	4649      	mov	r1, r9
 80096e6:	4658      	mov	r0, fp
 80096e8:	9e00      	ldr	r6, [sp, #0]
 80096ea:	47b0      	blx	r6
 80096ec:	f8da 3000 	ldr.w	r3, [sl]
 80096f0:	6821      	ldr	r1, [r4, #0]
 80096f2:	1d1a      	adds	r2, r3, #4
 80096f4:	f8ca 2000 	str.w	r2, [sl]
 80096f8:	f011 0f20 	tst.w	r1, #32
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	d010      	beq.n	8009722 <_scanf_i+0x1ce>
 8009700:	6018      	str	r0, [r3, #0]
 8009702:	68e3      	ldr	r3, [r4, #12]
 8009704:	3301      	adds	r3, #1
 8009706:	60e3      	str	r3, [r4, #12]
 8009708:	2000      	movs	r0, #0
 800970a:	eba5 0509 	sub.w	r5, r5, r9
 800970e:	44a8      	add	r8, r5
 8009710:	6925      	ldr	r5, [r4, #16]
 8009712:	4445      	add	r5, r8
 8009714:	6125      	str	r5, [r4, #16]
 8009716:	b007      	add	sp, #28
 8009718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800971c:	f04f 0800 	mov.w	r8, #0
 8009720:	e7ca      	b.n	80096b8 <_scanf_i+0x164>
 8009722:	07ca      	lsls	r2, r1, #31
 8009724:	bf4c      	ite	mi
 8009726:	8018      	strhmi	r0, [r3, #0]
 8009728:	6018      	strpl	r0, [r3, #0]
 800972a:	e7ea      	b.n	8009702 <_scanf_i+0x1ae>
 800972c:	2001      	movs	r0, #1
 800972e:	e7f2      	b.n	8009716 <_scanf_i+0x1c2>
 8009730:	08009ddc 	.word	0x08009ddc
 8009734:	08008115 	.word	0x08008115
 8009738:	080098dd 	.word	0x080098dd
 800973c:	0800ac50 	.word	0x0800ac50

08009740 <_sbrk_r>:
 8009740:	b538      	push	{r3, r4, r5, lr}
 8009742:	2300      	movs	r3, #0
 8009744:	4c05      	ldr	r4, [pc, #20]	; (800975c <_sbrk_r+0x1c>)
 8009746:	4605      	mov	r5, r0
 8009748:	4608      	mov	r0, r1
 800974a:	6023      	str	r3, [r4, #0]
 800974c:	f7f8 fe0c 	bl	8002368 <_sbrk>
 8009750:	1c43      	adds	r3, r0, #1
 8009752:	d102      	bne.n	800975a <_sbrk_r+0x1a>
 8009754:	6823      	ldr	r3, [r4, #0]
 8009756:	b103      	cbz	r3, 800975a <_sbrk_r+0x1a>
 8009758:	602b      	str	r3, [r5, #0]
 800975a:	bd38      	pop	{r3, r4, r5, pc}
 800975c:	2000480c 	.word	0x2000480c

08009760 <__sccl>:
 8009760:	b570      	push	{r4, r5, r6, lr}
 8009762:	780b      	ldrb	r3, [r1, #0]
 8009764:	1e44      	subs	r4, r0, #1
 8009766:	2b5e      	cmp	r3, #94	; 0x5e
 8009768:	bf13      	iteet	ne
 800976a:	1c4a      	addne	r2, r1, #1
 800976c:	1c8a      	addeq	r2, r1, #2
 800976e:	784b      	ldrbeq	r3, [r1, #1]
 8009770:	2100      	movne	r1, #0
 8009772:	bf08      	it	eq
 8009774:	2101      	moveq	r1, #1
 8009776:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800977a:	f804 1f01 	strb.w	r1, [r4, #1]!
 800977e:	42ac      	cmp	r4, r5
 8009780:	d1fb      	bne.n	800977a <__sccl+0x1a>
 8009782:	b913      	cbnz	r3, 800978a <__sccl+0x2a>
 8009784:	3a01      	subs	r2, #1
 8009786:	4610      	mov	r0, r2
 8009788:	bd70      	pop	{r4, r5, r6, pc}
 800978a:	f081 0401 	eor.w	r4, r1, #1
 800978e:	54c4      	strb	r4, [r0, r3]
 8009790:	1c51      	adds	r1, r2, #1
 8009792:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8009796:	1e4e      	subs	r6, r1, #1
 8009798:	2d2d      	cmp	r5, #45	; 0x2d
 800979a:	460a      	mov	r2, r1
 800979c:	d006      	beq.n	80097ac <__sccl+0x4c>
 800979e:	2d5d      	cmp	r5, #93	; 0x5d
 80097a0:	d0f1      	beq.n	8009786 <__sccl+0x26>
 80097a2:	b90d      	cbnz	r5, 80097a8 <__sccl+0x48>
 80097a4:	4632      	mov	r2, r6
 80097a6:	e7ee      	b.n	8009786 <__sccl+0x26>
 80097a8:	462b      	mov	r3, r5
 80097aa:	e7f0      	b.n	800978e <__sccl+0x2e>
 80097ac:	780e      	ldrb	r6, [r1, #0]
 80097ae:	2e5d      	cmp	r6, #93	; 0x5d
 80097b0:	d0fa      	beq.n	80097a8 <__sccl+0x48>
 80097b2:	42b3      	cmp	r3, r6
 80097b4:	dcf8      	bgt.n	80097a8 <__sccl+0x48>
 80097b6:	3301      	adds	r3, #1
 80097b8:	429e      	cmp	r6, r3
 80097ba:	54c4      	strb	r4, [r0, r3]
 80097bc:	dcfb      	bgt.n	80097b6 <__sccl+0x56>
 80097be:	3102      	adds	r1, #2
 80097c0:	e7e7      	b.n	8009792 <__sccl+0x32>

080097c2 <strncmp>:
 80097c2:	b510      	push	{r4, lr}
 80097c4:	b16a      	cbz	r2, 80097e2 <strncmp+0x20>
 80097c6:	3901      	subs	r1, #1
 80097c8:	1884      	adds	r4, r0, r2
 80097ca:	f810 3b01 	ldrb.w	r3, [r0], #1
 80097ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d103      	bne.n	80097de <strncmp+0x1c>
 80097d6:	42a0      	cmp	r0, r4
 80097d8:	d001      	beq.n	80097de <strncmp+0x1c>
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d1f5      	bne.n	80097ca <strncmp+0x8>
 80097de:	1a98      	subs	r0, r3, r2
 80097e0:	bd10      	pop	{r4, pc}
 80097e2:	4610      	mov	r0, r2
 80097e4:	e7fc      	b.n	80097e0 <strncmp+0x1e>

080097e6 <_strtoul_l.isra.0>:
 80097e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097ea:	4680      	mov	r8, r0
 80097ec:	4689      	mov	r9, r1
 80097ee:	4692      	mov	sl, r2
 80097f0:	461e      	mov	r6, r3
 80097f2:	460f      	mov	r7, r1
 80097f4:	463d      	mov	r5, r7
 80097f6:	9808      	ldr	r0, [sp, #32]
 80097f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097fc:	f7ff f818 	bl	8008830 <__locale_ctype_ptr_l>
 8009800:	4420      	add	r0, r4
 8009802:	7843      	ldrb	r3, [r0, #1]
 8009804:	f013 0308 	ands.w	r3, r3, #8
 8009808:	d130      	bne.n	800986c <_strtoul_l.isra.0+0x86>
 800980a:	2c2d      	cmp	r4, #45	; 0x2d
 800980c:	d130      	bne.n	8009870 <_strtoul_l.isra.0+0x8a>
 800980e:	2101      	movs	r1, #1
 8009810:	787c      	ldrb	r4, [r7, #1]
 8009812:	1cbd      	adds	r5, r7, #2
 8009814:	2e00      	cmp	r6, #0
 8009816:	d05c      	beq.n	80098d2 <_strtoul_l.isra.0+0xec>
 8009818:	2e10      	cmp	r6, #16
 800981a:	d109      	bne.n	8009830 <_strtoul_l.isra.0+0x4a>
 800981c:	2c30      	cmp	r4, #48	; 0x30
 800981e:	d107      	bne.n	8009830 <_strtoul_l.isra.0+0x4a>
 8009820:	782b      	ldrb	r3, [r5, #0]
 8009822:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009826:	2b58      	cmp	r3, #88	; 0x58
 8009828:	d14e      	bne.n	80098c8 <_strtoul_l.isra.0+0xe2>
 800982a:	2610      	movs	r6, #16
 800982c:	786c      	ldrb	r4, [r5, #1]
 800982e:	3502      	adds	r5, #2
 8009830:	f04f 32ff 	mov.w	r2, #4294967295
 8009834:	fbb2 f2f6 	udiv	r2, r2, r6
 8009838:	2300      	movs	r3, #0
 800983a:	fb06 fc02 	mul.w	ip, r6, r2
 800983e:	4618      	mov	r0, r3
 8009840:	ea6f 0c0c 	mvn.w	ip, ip
 8009844:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009848:	2f09      	cmp	r7, #9
 800984a:	d817      	bhi.n	800987c <_strtoul_l.isra.0+0x96>
 800984c:	463c      	mov	r4, r7
 800984e:	42a6      	cmp	r6, r4
 8009850:	dd23      	ble.n	800989a <_strtoul_l.isra.0+0xb4>
 8009852:	2b00      	cmp	r3, #0
 8009854:	db1e      	blt.n	8009894 <_strtoul_l.isra.0+0xae>
 8009856:	4282      	cmp	r2, r0
 8009858:	d31c      	bcc.n	8009894 <_strtoul_l.isra.0+0xae>
 800985a:	d101      	bne.n	8009860 <_strtoul_l.isra.0+0x7a>
 800985c:	45a4      	cmp	ip, r4
 800985e:	db19      	blt.n	8009894 <_strtoul_l.isra.0+0xae>
 8009860:	2301      	movs	r3, #1
 8009862:	fb00 4006 	mla	r0, r0, r6, r4
 8009866:	f815 4b01 	ldrb.w	r4, [r5], #1
 800986a:	e7eb      	b.n	8009844 <_strtoul_l.isra.0+0x5e>
 800986c:	462f      	mov	r7, r5
 800986e:	e7c1      	b.n	80097f4 <_strtoul_l.isra.0+0xe>
 8009870:	2c2b      	cmp	r4, #43	; 0x2b
 8009872:	bf04      	itt	eq
 8009874:	1cbd      	addeq	r5, r7, #2
 8009876:	787c      	ldrbeq	r4, [r7, #1]
 8009878:	4619      	mov	r1, r3
 800987a:	e7cb      	b.n	8009814 <_strtoul_l.isra.0+0x2e>
 800987c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009880:	2f19      	cmp	r7, #25
 8009882:	d801      	bhi.n	8009888 <_strtoul_l.isra.0+0xa2>
 8009884:	3c37      	subs	r4, #55	; 0x37
 8009886:	e7e2      	b.n	800984e <_strtoul_l.isra.0+0x68>
 8009888:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800988c:	2f19      	cmp	r7, #25
 800988e:	d804      	bhi.n	800989a <_strtoul_l.isra.0+0xb4>
 8009890:	3c57      	subs	r4, #87	; 0x57
 8009892:	e7dc      	b.n	800984e <_strtoul_l.isra.0+0x68>
 8009894:	f04f 33ff 	mov.w	r3, #4294967295
 8009898:	e7e5      	b.n	8009866 <_strtoul_l.isra.0+0x80>
 800989a:	2b00      	cmp	r3, #0
 800989c:	da09      	bge.n	80098b2 <_strtoul_l.isra.0+0xcc>
 800989e:	2322      	movs	r3, #34	; 0x22
 80098a0:	f04f 30ff 	mov.w	r0, #4294967295
 80098a4:	f8c8 3000 	str.w	r3, [r8]
 80098a8:	f1ba 0f00 	cmp.w	sl, #0
 80098ac:	d107      	bne.n	80098be <_strtoul_l.isra.0+0xd8>
 80098ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098b2:	b101      	cbz	r1, 80098b6 <_strtoul_l.isra.0+0xd0>
 80098b4:	4240      	negs	r0, r0
 80098b6:	f1ba 0f00 	cmp.w	sl, #0
 80098ba:	d0f8      	beq.n	80098ae <_strtoul_l.isra.0+0xc8>
 80098bc:	b10b      	cbz	r3, 80098c2 <_strtoul_l.isra.0+0xdc>
 80098be:	f105 39ff 	add.w	r9, r5, #4294967295
 80098c2:	f8ca 9000 	str.w	r9, [sl]
 80098c6:	e7f2      	b.n	80098ae <_strtoul_l.isra.0+0xc8>
 80098c8:	2430      	movs	r4, #48	; 0x30
 80098ca:	2e00      	cmp	r6, #0
 80098cc:	d1b0      	bne.n	8009830 <_strtoul_l.isra.0+0x4a>
 80098ce:	2608      	movs	r6, #8
 80098d0:	e7ae      	b.n	8009830 <_strtoul_l.isra.0+0x4a>
 80098d2:	2c30      	cmp	r4, #48	; 0x30
 80098d4:	d0a4      	beq.n	8009820 <_strtoul_l.isra.0+0x3a>
 80098d6:	260a      	movs	r6, #10
 80098d8:	e7aa      	b.n	8009830 <_strtoul_l.isra.0+0x4a>
	...

080098dc <_strtoul_r>:
 80098dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098de:	4c06      	ldr	r4, [pc, #24]	; (80098f8 <_strtoul_r+0x1c>)
 80098e0:	4d06      	ldr	r5, [pc, #24]	; (80098fc <_strtoul_r+0x20>)
 80098e2:	6824      	ldr	r4, [r4, #0]
 80098e4:	6a24      	ldr	r4, [r4, #32]
 80098e6:	2c00      	cmp	r4, #0
 80098e8:	bf08      	it	eq
 80098ea:	462c      	moveq	r4, r5
 80098ec:	9400      	str	r4, [sp, #0]
 80098ee:	f7ff ff7a 	bl	80097e6 <_strtoul_l.isra.0>
 80098f2:	b003      	add	sp, #12
 80098f4:	bd30      	pop	{r4, r5, pc}
 80098f6:	bf00      	nop
 80098f8:	200001b4 	.word	0x200001b4
 80098fc:	20000218 	.word	0x20000218

08009900 <__submore>:
 8009900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009904:	460c      	mov	r4, r1
 8009906:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800990c:	4299      	cmp	r1, r3
 800990e:	d11b      	bne.n	8009948 <__submore+0x48>
 8009910:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009914:	f7ff fbb8 	bl	8009088 <_malloc_r>
 8009918:	b918      	cbnz	r0, 8009922 <__submore+0x22>
 800991a:	f04f 30ff 	mov.w	r0, #4294967295
 800991e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009926:	63a3      	str	r3, [r4, #56]	; 0x38
 8009928:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800992c:	6360      	str	r0, [r4, #52]	; 0x34
 800992e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009932:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009936:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800993a:	7043      	strb	r3, [r0, #1]
 800993c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009940:	7003      	strb	r3, [r0, #0]
 8009942:	6020      	str	r0, [r4, #0]
 8009944:	2000      	movs	r0, #0
 8009946:	e7ea      	b.n	800991e <__submore+0x1e>
 8009948:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800994a:	0077      	lsls	r7, r6, #1
 800994c:	463a      	mov	r2, r7
 800994e:	f000 f881 	bl	8009a54 <_realloc_r>
 8009952:	4605      	mov	r5, r0
 8009954:	2800      	cmp	r0, #0
 8009956:	d0e0      	beq.n	800991a <__submore+0x1a>
 8009958:	eb00 0806 	add.w	r8, r0, r6
 800995c:	4601      	mov	r1, r0
 800995e:	4632      	mov	r2, r6
 8009960:	4640      	mov	r0, r8
 8009962:	f7fd fcb8 	bl	80072d6 <memcpy>
 8009966:	f8c4 8000 	str.w	r8, [r4]
 800996a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800996e:	e7e9      	b.n	8009944 <__submore+0x44>

08009970 <__ascii_wctomb>:
 8009970:	b149      	cbz	r1, 8009986 <__ascii_wctomb+0x16>
 8009972:	2aff      	cmp	r2, #255	; 0xff
 8009974:	bf8b      	itete	hi
 8009976:	238a      	movhi	r3, #138	; 0x8a
 8009978:	700a      	strbls	r2, [r1, #0]
 800997a:	6003      	strhi	r3, [r0, #0]
 800997c:	2001      	movls	r0, #1
 800997e:	bf88      	it	hi
 8009980:	f04f 30ff 	movhi.w	r0, #4294967295
 8009984:	4770      	bx	lr
 8009986:	4608      	mov	r0, r1
 8009988:	4770      	bx	lr
	...

0800998c <malloc>:
 800998c:	4b02      	ldr	r3, [pc, #8]	; (8009998 <malloc+0xc>)
 800998e:	4601      	mov	r1, r0
 8009990:	6818      	ldr	r0, [r3, #0]
 8009992:	f7ff bb79 	b.w	8009088 <_malloc_r>
 8009996:	bf00      	nop
 8009998:	200001b4 	.word	0x200001b4

0800999c <memchr>:
 800999c:	b510      	push	{r4, lr}
 800999e:	b2c9      	uxtb	r1, r1
 80099a0:	4402      	add	r2, r0
 80099a2:	4290      	cmp	r0, r2
 80099a4:	4603      	mov	r3, r0
 80099a6:	d101      	bne.n	80099ac <memchr+0x10>
 80099a8:	2300      	movs	r3, #0
 80099aa:	e003      	b.n	80099b4 <memchr+0x18>
 80099ac:	781c      	ldrb	r4, [r3, #0]
 80099ae:	3001      	adds	r0, #1
 80099b0:	428c      	cmp	r4, r1
 80099b2:	d1f6      	bne.n	80099a2 <memchr+0x6>
 80099b4:	4618      	mov	r0, r3
 80099b6:	bd10      	pop	{r4, pc}

080099b8 <__malloc_lock>:
 80099b8:	4770      	bx	lr

080099ba <__malloc_unlock>:
 80099ba:	4770      	bx	lr

080099bc <_free_r>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	4605      	mov	r5, r0
 80099c0:	2900      	cmp	r1, #0
 80099c2:	d043      	beq.n	8009a4c <_free_r+0x90>
 80099c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099c8:	1f0c      	subs	r4, r1, #4
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	bfb8      	it	lt
 80099ce:	18e4      	addlt	r4, r4, r3
 80099d0:	f7ff fff2 	bl	80099b8 <__malloc_lock>
 80099d4:	4a1e      	ldr	r2, [pc, #120]	; (8009a50 <_free_r+0x94>)
 80099d6:	6813      	ldr	r3, [r2, #0]
 80099d8:	4610      	mov	r0, r2
 80099da:	b933      	cbnz	r3, 80099ea <_free_r+0x2e>
 80099dc:	6063      	str	r3, [r4, #4]
 80099de:	6014      	str	r4, [r2, #0]
 80099e0:	4628      	mov	r0, r5
 80099e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099e6:	f7ff bfe8 	b.w	80099ba <__malloc_unlock>
 80099ea:	42a3      	cmp	r3, r4
 80099ec:	d90b      	bls.n	8009a06 <_free_r+0x4a>
 80099ee:	6821      	ldr	r1, [r4, #0]
 80099f0:	1862      	adds	r2, r4, r1
 80099f2:	4293      	cmp	r3, r2
 80099f4:	bf01      	itttt	eq
 80099f6:	681a      	ldreq	r2, [r3, #0]
 80099f8:	685b      	ldreq	r3, [r3, #4]
 80099fa:	1852      	addeq	r2, r2, r1
 80099fc:	6022      	streq	r2, [r4, #0]
 80099fe:	6063      	str	r3, [r4, #4]
 8009a00:	6004      	str	r4, [r0, #0]
 8009a02:	e7ed      	b.n	80099e0 <_free_r+0x24>
 8009a04:	4613      	mov	r3, r2
 8009a06:	685a      	ldr	r2, [r3, #4]
 8009a08:	b10a      	cbz	r2, 8009a0e <_free_r+0x52>
 8009a0a:	42a2      	cmp	r2, r4
 8009a0c:	d9fa      	bls.n	8009a04 <_free_r+0x48>
 8009a0e:	6819      	ldr	r1, [r3, #0]
 8009a10:	1858      	adds	r0, r3, r1
 8009a12:	42a0      	cmp	r0, r4
 8009a14:	d10b      	bne.n	8009a2e <_free_r+0x72>
 8009a16:	6820      	ldr	r0, [r4, #0]
 8009a18:	4401      	add	r1, r0
 8009a1a:	1858      	adds	r0, r3, r1
 8009a1c:	4282      	cmp	r2, r0
 8009a1e:	6019      	str	r1, [r3, #0]
 8009a20:	d1de      	bne.n	80099e0 <_free_r+0x24>
 8009a22:	6810      	ldr	r0, [r2, #0]
 8009a24:	6852      	ldr	r2, [r2, #4]
 8009a26:	4401      	add	r1, r0
 8009a28:	6019      	str	r1, [r3, #0]
 8009a2a:	605a      	str	r2, [r3, #4]
 8009a2c:	e7d8      	b.n	80099e0 <_free_r+0x24>
 8009a2e:	d902      	bls.n	8009a36 <_free_r+0x7a>
 8009a30:	230c      	movs	r3, #12
 8009a32:	602b      	str	r3, [r5, #0]
 8009a34:	e7d4      	b.n	80099e0 <_free_r+0x24>
 8009a36:	6820      	ldr	r0, [r4, #0]
 8009a38:	1821      	adds	r1, r4, r0
 8009a3a:	428a      	cmp	r2, r1
 8009a3c:	bf01      	itttt	eq
 8009a3e:	6811      	ldreq	r1, [r2, #0]
 8009a40:	6852      	ldreq	r2, [r2, #4]
 8009a42:	1809      	addeq	r1, r1, r0
 8009a44:	6021      	streq	r1, [r4, #0]
 8009a46:	6062      	str	r2, [r4, #4]
 8009a48:	605c      	str	r4, [r3, #4]
 8009a4a:	e7c9      	b.n	80099e0 <_free_r+0x24>
 8009a4c:	bd38      	pop	{r3, r4, r5, pc}
 8009a4e:	bf00      	nop
 8009a50:	200005e8 	.word	0x200005e8

08009a54 <_realloc_r>:
 8009a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a56:	4607      	mov	r7, r0
 8009a58:	4614      	mov	r4, r2
 8009a5a:	460e      	mov	r6, r1
 8009a5c:	b921      	cbnz	r1, 8009a68 <_realloc_r+0x14>
 8009a5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009a62:	4611      	mov	r1, r2
 8009a64:	f7ff bb10 	b.w	8009088 <_malloc_r>
 8009a68:	b922      	cbnz	r2, 8009a74 <_realloc_r+0x20>
 8009a6a:	f7ff ffa7 	bl	80099bc <_free_r>
 8009a6e:	4625      	mov	r5, r4
 8009a70:	4628      	mov	r0, r5
 8009a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a74:	f000 f814 	bl	8009aa0 <_malloc_usable_size_r>
 8009a78:	42a0      	cmp	r0, r4
 8009a7a:	d20f      	bcs.n	8009a9c <_realloc_r+0x48>
 8009a7c:	4621      	mov	r1, r4
 8009a7e:	4638      	mov	r0, r7
 8009a80:	f7ff fb02 	bl	8009088 <_malloc_r>
 8009a84:	4605      	mov	r5, r0
 8009a86:	2800      	cmp	r0, #0
 8009a88:	d0f2      	beq.n	8009a70 <_realloc_r+0x1c>
 8009a8a:	4631      	mov	r1, r6
 8009a8c:	4622      	mov	r2, r4
 8009a8e:	f7fd fc22 	bl	80072d6 <memcpy>
 8009a92:	4631      	mov	r1, r6
 8009a94:	4638      	mov	r0, r7
 8009a96:	f7ff ff91 	bl	80099bc <_free_r>
 8009a9a:	e7e9      	b.n	8009a70 <_realloc_r+0x1c>
 8009a9c:	4635      	mov	r5, r6
 8009a9e:	e7e7      	b.n	8009a70 <_realloc_r+0x1c>

08009aa0 <_malloc_usable_size_r>:
 8009aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aa4:	1f18      	subs	r0, r3, #4
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	bfbc      	itt	lt
 8009aaa:	580b      	ldrlt	r3, [r1, r0]
 8009aac:	18c0      	addlt	r0, r0, r3
 8009aae:	4770      	bx	lr

08009ab0 <fmod>:
 8009ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab4:	b08b      	sub	sp, #44	; 0x2c
 8009ab6:	461f      	mov	r7, r3
 8009ab8:	4604      	mov	r4, r0
 8009aba:	460d      	mov	r5, r1
 8009abc:	4616      	mov	r6, r2
 8009abe:	f000 f853 	bl	8009b68 <__ieee754_fmod>
 8009ac2:	4b27      	ldr	r3, [pc, #156]	; (8009b60 <fmod+0xb0>)
 8009ac4:	4680      	mov	r8, r0
 8009ac6:	f993 a000 	ldrsb.w	sl, [r3]
 8009aca:	4689      	mov	r9, r1
 8009acc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009ad0:	d030      	beq.n	8009b34 <fmod+0x84>
 8009ad2:	4632      	mov	r2, r6
 8009ad4:	463b      	mov	r3, r7
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	4639      	mov	r1, r7
 8009ada:	f7f6 ff97 	bl	8000a0c <__aeabi_dcmpun>
 8009ade:	bb48      	cbnz	r0, 8009b34 <fmod+0x84>
 8009ae0:	4622      	mov	r2, r4
 8009ae2:	462b      	mov	r3, r5
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	f7f6 ff90 	bl	8000a0c <__aeabi_dcmpun>
 8009aec:	4683      	mov	fp, r0
 8009aee:	bb08      	cbnz	r0, 8009b34 <fmod+0x84>
 8009af0:	2200      	movs	r2, #0
 8009af2:	2300      	movs	r3, #0
 8009af4:	4630      	mov	r0, r6
 8009af6:	4639      	mov	r1, r7
 8009af8:	f7f6 ff56 	bl	80009a8 <__aeabi_dcmpeq>
 8009afc:	b1d0      	cbz	r0, 8009b34 <fmod+0x84>
 8009afe:	2301      	movs	r3, #1
 8009b00:	9300      	str	r3, [sp, #0]
 8009b02:	4b18      	ldr	r3, [pc, #96]	; (8009b64 <fmod+0xb4>)
 8009b04:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009b08:	9301      	str	r3, [sp, #4]
 8009b0a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009b0e:	f8cd b020 	str.w	fp, [sp, #32]
 8009b12:	f1ba 0f00 	cmp.w	sl, #0
 8009b16:	d112      	bne.n	8009b3e <fmod+0x8e>
 8009b18:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009b1c:	4668      	mov	r0, sp
 8009b1e:	f000 f92d 	bl	8009d7c <matherr>
 8009b22:	b1b8      	cbz	r0, 8009b54 <fmod+0xa4>
 8009b24:	9b08      	ldr	r3, [sp, #32]
 8009b26:	b11b      	cbz	r3, 8009b30 <fmod+0x80>
 8009b28:	f7fd fb82 	bl	8007230 <__errno>
 8009b2c:	9b08      	ldr	r3, [sp, #32]
 8009b2e:	6003      	str	r3, [r0, #0]
 8009b30:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8009b34:	4640      	mov	r0, r8
 8009b36:	4649      	mov	r1, r9
 8009b38:	b00b      	add	sp, #44	; 0x2c
 8009b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b3e:	2200      	movs	r2, #0
 8009b40:	2300      	movs	r3, #0
 8009b42:	4610      	mov	r0, r2
 8009b44:	4619      	mov	r1, r3
 8009b46:	f7f6 fdf1 	bl	800072c <__aeabi_ddiv>
 8009b4a:	f1ba 0f02 	cmp.w	sl, #2
 8009b4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009b52:	d1e3      	bne.n	8009b1c <fmod+0x6c>
 8009b54:	f7fd fb6c 	bl	8007230 <__errno>
 8009b58:	2321      	movs	r3, #33	; 0x21
 8009b5a:	6003      	str	r3, [r0, #0]
 8009b5c:	e7e2      	b.n	8009b24 <fmod+0x74>
 8009b5e:	bf00      	nop
 8009b60:	20000384 	.word	0x20000384
 8009b64:	0800adbc 	.word	0x0800adbc

08009b68 <__ieee754_fmod>:
 8009b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b6c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8009b70:	4682      	mov	sl, r0
 8009b72:	ea54 0002 	orrs.w	r0, r4, r2
 8009b76:	461e      	mov	r6, r3
 8009b78:	4694      	mov	ip, r2
 8009b7a:	4696      	mov	lr, r2
 8009b7c:	d00c      	beq.n	8009b98 <__ieee754_fmod+0x30>
 8009b7e:	4d78      	ldr	r5, [pc, #480]	; (8009d60 <__ieee754_fmod+0x1f8>)
 8009b80:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8009b84:	45a8      	cmp	r8, r5
 8009b86:	4689      	mov	r9, r1
 8009b88:	dc06      	bgt.n	8009b98 <__ieee754_fmod+0x30>
 8009b8a:	4255      	negs	r5, r2
 8009b8c:	4315      	orrs	r5, r2
 8009b8e:	4f75      	ldr	r7, [pc, #468]	; (8009d64 <__ieee754_fmod+0x1fc>)
 8009b90:	ea44 75d5 	orr.w	r5, r4, r5, lsr #31
 8009b94:	42bd      	cmp	r5, r7
 8009b96:	d908      	bls.n	8009baa <__ieee754_fmod+0x42>
 8009b98:	4650      	mov	r0, sl
 8009b9a:	f7f6 fc9d 	bl	80004d8 <__aeabi_dmul>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	f7f6 fdc3 	bl	800072c <__aeabi_ddiv>
 8009ba6:	4682      	mov	sl, r0
 8009ba8:	e00f      	b.n	8009bca <__ieee754_fmod+0x62>
 8009baa:	45a0      	cmp	r8, r4
 8009bac:	4652      	mov	r2, sl
 8009bae:	4657      	mov	r7, sl
 8009bb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8009bb4:	dc0c      	bgt.n	8009bd0 <__ieee754_fmod+0x68>
 8009bb6:	db08      	blt.n	8009bca <__ieee754_fmod+0x62>
 8009bb8:	45e2      	cmp	sl, ip
 8009bba:	d306      	bcc.n	8009bca <__ieee754_fmod+0x62>
 8009bbc:	d108      	bne.n	8009bd0 <__ieee754_fmod+0x68>
 8009bbe:	496a      	ldr	r1, [pc, #424]	; (8009d68 <__ieee754_fmod+0x200>)
 8009bc0:	0fed      	lsrs	r5, r5, #31
 8009bc2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8009bc6:	e9d5 a100 	ldrd	sl, r1, [r5]
 8009bca:	4650      	mov	r0, sl
 8009bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bd0:	4b66      	ldr	r3, [pc, #408]	; (8009d6c <__ieee754_fmod+0x204>)
 8009bd2:	4598      	cmp	r8, r3
 8009bd4:	dc48      	bgt.n	8009c68 <__ieee754_fmod+0x100>
 8009bd6:	f1b8 0f00 	cmp.w	r8, #0
 8009bda:	d13c      	bne.n	8009c56 <__ieee754_fmod+0xee>
 8009bdc:	4611      	mov	r1, r2
 8009bde:	4864      	ldr	r0, [pc, #400]	; (8009d70 <__ieee754_fmod+0x208>)
 8009be0:	2900      	cmp	r1, #0
 8009be2:	dc35      	bgt.n	8009c50 <__ieee754_fmod+0xe8>
 8009be4:	429c      	cmp	r4, r3
 8009be6:	dc4f      	bgt.n	8009c88 <__ieee754_fmod+0x120>
 8009be8:	2c00      	cmp	r4, #0
 8009bea:	d145      	bne.n	8009c78 <__ieee754_fmod+0x110>
 8009bec:	4661      	mov	r1, ip
 8009bee:	4b60      	ldr	r3, [pc, #384]	; (8009d70 <__ieee754_fmod+0x208>)
 8009bf0:	2900      	cmp	r1, #0
 8009bf2:	dc3e      	bgt.n	8009c72 <__ieee754_fmod+0x10a>
 8009bf4:	495f      	ldr	r1, [pc, #380]	; (8009d74 <__ieee754_fmod+0x20c>)
 8009bf6:	4288      	cmp	r0, r1
 8009bf8:	db4a      	blt.n	8009c90 <__ieee754_fmod+0x128>
 8009bfa:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8009bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009c02:	4a5c      	ldr	r2, [pc, #368]	; (8009d74 <__ieee754_fmod+0x20c>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	db57      	blt.n	8009cb8 <__ieee754_fmod+0x150>
 8009c08:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8009c0c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8009c10:	1ac0      	subs	r0, r0, r3
 8009c12:	1b8a      	subs	r2, r1, r6
 8009c14:	eba7 040e 	sub.w	r4, r7, lr
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	d163      	bne.n	8009ce4 <__ieee754_fmod+0x17c>
 8009c1c:	4577      	cmp	r7, lr
 8009c1e:	bf38      	it	cc
 8009c20:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8009c24:	2a00      	cmp	r2, #0
 8009c26:	bfbc      	itt	lt
 8009c28:	463c      	movlt	r4, r7
 8009c2a:	460a      	movlt	r2, r1
 8009c2c:	ea52 0104 	orrs.w	r1, r2, r4
 8009c30:	d0c5      	beq.n	8009bbe <__ieee754_fmod+0x56>
 8009c32:	494e      	ldr	r1, [pc, #312]	; (8009d6c <__ieee754_fmod+0x204>)
 8009c34:	428a      	cmp	r2, r1
 8009c36:	dd6a      	ble.n	8009d0e <__ieee754_fmod+0x1a6>
 8009c38:	494e      	ldr	r1, [pc, #312]	; (8009d74 <__ieee754_fmod+0x20c>)
 8009c3a:	428b      	cmp	r3, r1
 8009c3c:	db6d      	blt.n	8009d1a <__ieee754_fmod+0x1b2>
 8009c3e:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8009c42:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8009c46:	4315      	orrs	r5, r2
 8009c48:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
 8009c4c:	4620      	mov	r0, r4
 8009c4e:	e7aa      	b.n	8009ba6 <__ieee754_fmod+0x3e>
 8009c50:	3801      	subs	r0, #1
 8009c52:	0049      	lsls	r1, r1, #1
 8009c54:	e7c4      	b.n	8009be0 <__ieee754_fmod+0x78>
 8009c56:	4847      	ldr	r0, [pc, #284]	; (8009d74 <__ieee754_fmod+0x20c>)
 8009c58:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8009c5c:	0049      	lsls	r1, r1, #1
 8009c5e:	2900      	cmp	r1, #0
 8009c60:	f100 30ff 	add.w	r0, r0, #4294967295
 8009c64:	dcfa      	bgt.n	8009c5c <__ieee754_fmod+0xf4>
 8009c66:	e7bd      	b.n	8009be4 <__ieee754_fmod+0x7c>
 8009c68:	ea4f 5028 	mov.w	r0, r8, asr #20
 8009c6c:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8009c70:	e7b8      	b.n	8009be4 <__ieee754_fmod+0x7c>
 8009c72:	3b01      	subs	r3, #1
 8009c74:	0049      	lsls	r1, r1, #1
 8009c76:	e7bb      	b.n	8009bf0 <__ieee754_fmod+0x88>
 8009c78:	4b3e      	ldr	r3, [pc, #248]	; (8009d74 <__ieee754_fmod+0x20c>)
 8009c7a:	02e1      	lsls	r1, r4, #11
 8009c7c:	0049      	lsls	r1, r1, #1
 8009c7e:	2900      	cmp	r1, #0
 8009c80:	f103 33ff 	add.w	r3, r3, #4294967295
 8009c84:	dcfa      	bgt.n	8009c7c <__ieee754_fmod+0x114>
 8009c86:	e7b5      	b.n	8009bf4 <__ieee754_fmod+0x8c>
 8009c88:	1523      	asrs	r3, r4, #20
 8009c8a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009c8e:	e7b1      	b.n	8009bf4 <__ieee754_fmod+0x8c>
 8009c90:	1a0f      	subs	r7, r1, r0
 8009c92:	2f1f      	cmp	r7, #31
 8009c94:	dc0a      	bgt.n	8009cac <__ieee754_fmod+0x144>
 8009c96:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8009c9a:	fa08 f807 	lsl.w	r8, r8, r7
 8009c9e:	fa22 f101 	lsr.w	r1, r2, r1
 8009ca2:	ea41 0108 	orr.w	r1, r1, r8
 8009ca6:	fa02 f707 	lsl.w	r7, r2, r7
 8009caa:	e7aa      	b.n	8009c02 <__ieee754_fmod+0x9a>
 8009cac:	4932      	ldr	r1, [pc, #200]	; (8009d78 <__ieee754_fmod+0x210>)
 8009cae:	2700      	movs	r7, #0
 8009cb0:	1a09      	subs	r1, r1, r0
 8009cb2:	fa02 f101 	lsl.w	r1, r2, r1
 8009cb6:	e7a4      	b.n	8009c02 <__ieee754_fmod+0x9a>
 8009cb8:	eba2 0e03 	sub.w	lr, r2, r3
 8009cbc:	f1be 0f1f 	cmp.w	lr, #31
 8009cc0:	dc09      	bgt.n	8009cd6 <__ieee754_fmod+0x16e>
 8009cc2:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8009cc6:	fa04 f40e 	lsl.w	r4, r4, lr
 8009cca:	fa2c f606 	lsr.w	r6, ip, r6
 8009cce:	4326      	orrs	r6, r4
 8009cd0:	fa0c fe0e 	lsl.w	lr, ip, lr
 8009cd4:	e79c      	b.n	8009c10 <__ieee754_fmod+0xa8>
 8009cd6:	4e28      	ldr	r6, [pc, #160]	; (8009d78 <__ieee754_fmod+0x210>)
 8009cd8:	f04f 0e00 	mov.w	lr, #0
 8009cdc:	1af6      	subs	r6, r6, r3
 8009cde:	fa0c f606 	lsl.w	r6, ip, r6
 8009ce2:	e795      	b.n	8009c10 <__ieee754_fmod+0xa8>
 8009ce4:	4577      	cmp	r7, lr
 8009ce6:	bf38      	it	cc
 8009ce8:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8009cec:	2a00      	cmp	r2, #0
 8009cee:	da05      	bge.n	8009cfc <__ieee754_fmod+0x194>
 8009cf0:	0ffa      	lsrs	r2, r7, #31
 8009cf2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009cf6:	007f      	lsls	r7, r7, #1
 8009cf8:	3801      	subs	r0, #1
 8009cfa:	e78a      	b.n	8009c12 <__ieee754_fmod+0xaa>
 8009cfc:	ea52 0104 	orrs.w	r1, r2, r4
 8009d00:	f43f af5d 	beq.w	8009bbe <__ieee754_fmod+0x56>
 8009d04:	0fe1      	lsrs	r1, r4, #31
 8009d06:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8009d0a:	0067      	lsls	r7, r4, #1
 8009d0c:	e7f4      	b.n	8009cf8 <__ieee754_fmod+0x190>
 8009d0e:	0fe0      	lsrs	r0, r4, #31
 8009d10:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8009d14:	0064      	lsls	r4, r4, #1
 8009d16:	3b01      	subs	r3, #1
 8009d18:	e78c      	b.n	8009c34 <__ieee754_fmod+0xcc>
 8009d1a:	1ac9      	subs	r1, r1, r3
 8009d1c:	2914      	cmp	r1, #20
 8009d1e:	dc0a      	bgt.n	8009d36 <__ieee754_fmod+0x1ce>
 8009d20:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8009d24:	fa02 f303 	lsl.w	r3, r2, r3
 8009d28:	40cc      	lsrs	r4, r1
 8009d2a:	4323      	orrs	r3, r4
 8009d2c:	410a      	asrs	r2, r1
 8009d2e:	ea42 0105 	orr.w	r1, r2, r5
 8009d32:	4618      	mov	r0, r3
 8009d34:	e737      	b.n	8009ba6 <__ieee754_fmod+0x3e>
 8009d36:	291f      	cmp	r1, #31
 8009d38:	dc07      	bgt.n	8009d4a <__ieee754_fmod+0x1e2>
 8009d3a:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8009d3e:	40cc      	lsrs	r4, r1
 8009d40:	fa02 f303 	lsl.w	r3, r2, r3
 8009d44:	4323      	orrs	r3, r4
 8009d46:	462a      	mov	r2, r5
 8009d48:	e7f1      	b.n	8009d2e <__ieee754_fmod+0x1c6>
 8009d4a:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8009d4e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009d52:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8009d56:	33e2      	adds	r3, #226	; 0xe2
 8009d58:	fa42 f303 	asr.w	r3, r2, r3
 8009d5c:	e7f3      	b.n	8009d46 <__ieee754_fmod+0x1de>
 8009d5e:	bf00      	nop
 8009d60:	7fefffff 	.word	0x7fefffff
 8009d64:	7ff00000 	.word	0x7ff00000
 8009d68:	0800adc8 	.word	0x0800adc8
 8009d6c:	000fffff 	.word	0x000fffff
 8009d70:	fffffbed 	.word	0xfffffbed
 8009d74:	fffffc02 	.word	0xfffffc02
 8009d78:	fffffbe2 	.word	0xfffffbe2

08009d7c <matherr>:
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	4770      	bx	lr

08009d80 <_init>:
 8009d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d82:	bf00      	nop
 8009d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d86:	bc08      	pop	{r3}
 8009d88:	469e      	mov	lr, r3
 8009d8a:	4770      	bx	lr

08009d8c <_fini>:
 8009d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8e:	bf00      	nop
 8009d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d92:	bc08      	pop	{r3}
 8009d94:	469e      	mov	lr, r3
 8009d96:	4770      	bx	lr
