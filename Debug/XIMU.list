
XIMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5e0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001258  0800d6f0  0800d6f0  0001d6f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e948  0800e948  00020388  2**0
                  CONTENTS
  4 .ARM          00000000  0800e948  0800e948  00020388  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e948  0800e948  00020388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e948  0800e948  0001e948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e94c  0800e94c  0001e94c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000388  20000000  0800e950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018a8  20000388  0800ecd8  00020388  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001c30  0800ecd8  00021c30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038239  00000000  00000000  000203b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007632  00000000  00000000  000585ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001b026  00000000  00000000  0005fc1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000015c8  00000000  00000000  0007ac48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000041d8  00000000  00000000  0007c210  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001c23e  00000000  00000000  000803e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001c07f  00000000  00000000  0009c626  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00083409  00000000  00000000  000b86a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      000000f0  00000000  00000000  0013baae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d0c  00000000  00000000  0013bba0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000388 	.word	0x20000388
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d6d8 	.word	0x0800d6d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000038c 	.word	0x2000038c
 800014c:	0800d6d8 	.word	0x0800d6d8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <mpu_set_bypass.part.1>:
/**
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
 8001070:	b570      	push	{r4, r5, r6, lr}
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
        return 0;

    if (bypass_on) {
 8001072:	4606      	mov	r6, r0
int mpu_set_bypass(unsigned char bypass_on)
 8001074:	b082      	sub	sp, #8
 8001076:	4c36      	ldr	r4, [pc, #216]	; (8001150 <mpu_set_bypass.part.1+0xe0>)
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001078:	f10d 0507 	add.w	r5, sp, #7
 800107c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8001080:	7810      	ldrb	r0, [r2, #0]
 8001082:	7919      	ldrb	r1, [r3, #4]
 8001084:	2201      	movs	r2, #1
 8001086:	462b      	mov	r3, r5
    if (bypass_on) {
 8001088:	b33e      	cbz	r6, 80010da <mpu_set_bypass.part.1+0x6a>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800108a:	f003 fdd1 	bl	8004c30 <i2c_read>
 800108e:	2800      	cmp	r0, #0
 8001090:	d15a      	bne.n	8001148 <mpu_set_bypass.part.1+0xd8>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
 8001092:	f89d 3007 	ldrb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001096:	6861      	ldr	r1, [r4, #4]
        tmp &= ~BIT_AUX_IF_EN;
 8001098:	f023 0320 	bic.w	r3, r3, #32
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800109c:	6822      	ldr	r2, [r4, #0]
        tmp &= ~BIT_AUX_IF_EN;
 800109e:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80010a2:	7808      	ldrb	r0, [r1, #0]
 80010a4:	462b      	mov	r3, r5
 80010a6:	7911      	ldrb	r1, [r2, #4]
 80010a8:	2201      	movs	r2, #1
 80010aa:	f003 fdb1 	bl	8004c10 <i2c_write>
 80010ae:	2800      	cmp	r0, #0
 80010b0:	d14a      	bne.n	8001148 <mpu_set_bypass.part.1+0xd8>
            return -1;
        delay_ms(3);
 80010b2:	2003      	movs	r0, #3
 80010b4:	f003 fdcc 	bl	8004c50 <delay_ms>
        tmp = BIT_BYPASS_EN;
 80010b8:	2202      	movs	r2, #2
        if (st.chip_cfg.active_low_int)
 80010ba:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
        tmp = BIT_BYPASS_EN;
 80010be:	f88d 2007 	strb.w	r2, [sp, #7]
        if (st.chip_cfg.active_low_int)
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d03e      	beq.n	8001144 <mpu_set_bypass.part.1+0xd4>
            tmp |= BIT_ACTL;
 80010c6:	2382      	movs	r3, #130	; 0x82
 80010c8:	22b2      	movs	r2, #178	; 0xb2
 80010ca:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.latched_int)
 80010ce:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80010d2:	b343      	cbz	r3, 8001126 <mpu_set_bypass.part.1+0xb6>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80010d4:	f88d 2007 	strb.w	r2, [sp, #7]
 80010d8:	e025      	b.n	8001126 <mpu_set_bypass.part.1+0xb6>
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80010da:	f003 fda9 	bl	8004c30 <i2c_read>
 80010de:	bb98      	cbnz	r0, 8001148 <mpu_set_bypass.part.1+0xd8>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80010e0:	7aa2      	ldrb	r2, [r4, #10]
 80010e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80010e6:	07d2      	lsls	r2, r2, #31
            tmp |= BIT_AUX_IF_EN;
 80010e8:	bf4c      	ite	mi
 80010ea:	f043 0320 	orrmi.w	r3, r3, #32
        else
            tmp &= ~BIT_AUX_IF_EN;
 80010ee:	f003 03df 	andpl.w	r3, r3, #223	; 0xdf
 80010f2:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80010f6:	e9d4 2100 	ldrd	r2, r1, [r4]
 80010fa:	462b      	mov	r3, r5
 80010fc:	7808      	ldrb	r0, [r1, #0]
 80010fe:	7911      	ldrb	r1, [r2, #4]
 8001100:	2201      	movs	r2, #1
 8001102:	f003 fd85 	bl	8004c10 <i2c_write>
 8001106:	b9f8      	cbnz	r0, 8001148 <mpu_set_bypass.part.1+0xd8>
            return -1;
        delay_ms(3);
 8001108:	2003      	movs	r0, #3
 800110a:	f003 fda1 	bl	8004c50 <delay_ms>
        if (st.chip_cfg.active_low_int)
 800110e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001112:	b1ab      	cbz	r3, 8001140 <mpu_set_bypass.part.1+0xd0>
 8001114:	21b0      	movs	r1, #176	; 0xb0
            tmp = BIT_ACTL;
 8001116:	2380      	movs	r3, #128	; 0x80
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
 8001118:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 800111c:	f88d 3007 	strb.w	r3, [sp, #7]
 8001120:	b10a      	cbz	r2, 8001126 <mpu_set_bypass.part.1+0xb6>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8001122:	f88d 1007 	strb.w	r1, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001126:	e9d4 1200 	ldrd	r1, r2, [r4]
 800112a:	462b      	mov	r3, r5
 800112c:	7810      	ldrb	r0, [r2, #0]
 800112e:	7dc9      	ldrb	r1, [r1, #23]
 8001130:	2201      	movs	r2, #1
 8001132:	f003 fd6d 	bl	8004c10 <i2c_write>
 8001136:	b938      	cbnz	r0, 8001148 <mpu_set_bypass.part.1+0xd8>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
 8001138:	2000      	movs	r0, #0
    st.chip_cfg.bypass_mode = bypass_on;
 800113a:	74a6      	strb	r6, [r4, #18]
}
 800113c:	b002      	add	sp, #8
 800113e:	bd70      	pop	{r4, r5, r6, pc}
        if (st.chip_cfg.active_low_int)
 8001140:	2130      	movs	r1, #48	; 0x30
 8001142:	e7e9      	b.n	8001118 <mpu_set_bypass.part.1+0xa8>
        if (st.chip_cfg.active_low_int)
 8001144:	2232      	movs	r2, #50	; 0x32
 8001146:	e7c2      	b.n	80010ce <mpu_set_bypass.part.1+0x5e>
            return -1;
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	e7f6      	b.n	800113c <mpu_set_bypass.part.1+0xcc>
 800114e:	bf00      	nop
 8001150:	20000000 	.word	0x20000000

08001154 <mpu_set_bypass.part.1.constprop.7>:
int mpu_set_bypass(unsigned char bypass_on)
 8001154:	b510      	push	{r4, lr}
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001156:	4c20      	ldr	r4, [pc, #128]	; (80011d8 <mpu_set_bypass.part.1.constprop.7+0x84>)
int mpu_set_bypass(unsigned char bypass_on)
 8001158:	b082      	sub	sp, #8
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800115a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800115e:	7911      	ldrb	r1, [r2, #4]
 8001160:	7818      	ldrb	r0, [r3, #0]
 8001162:	2201      	movs	r2, #1
 8001164:	f10d 0307 	add.w	r3, sp, #7
 8001168:	f003 fd62 	bl	8004c30 <i2c_read>
 800116c:	bb88      	cbnz	r0, 80011d2 <mpu_set_bypass.part.1.constprop.7+0x7e>
        tmp &= ~BIT_AUX_IF_EN;
 800116e:	f89d 3007 	ldrb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001172:	6861      	ldr	r1, [r4, #4]
        tmp &= ~BIT_AUX_IF_EN;
 8001174:	f023 0320 	bic.w	r3, r3, #32
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001178:	6822      	ldr	r2, [r4, #0]
        tmp &= ~BIT_AUX_IF_EN;
 800117a:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800117e:	7808      	ldrb	r0, [r1, #0]
 8001180:	f10d 0307 	add.w	r3, sp, #7
 8001184:	7911      	ldrb	r1, [r2, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	f003 fd42 	bl	8004c10 <i2c_write>
 800118c:	bb08      	cbnz	r0, 80011d2 <mpu_set_bypass.part.1.constprop.7+0x7e>
        delay_ms(3);
 800118e:	2003      	movs	r0, #3
 8001190:	f003 fd5e 	bl	8004c50 <delay_ms>
        tmp = BIT_BYPASS_EN;
 8001194:	2202      	movs	r2, #2
        if (st.chip_cfg.active_low_int)
 8001196:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
        tmp = BIT_BYPASS_EN;
 800119a:	f88d 2007 	strb.w	r2, [sp, #7]
        if (st.chip_cfg.active_low_int)
 800119e:	b1b3      	cbz	r3, 80011ce <mpu_set_bypass.part.1.constprop.7+0x7a>
            tmp |= BIT_ACTL;
 80011a0:	2382      	movs	r3, #130	; 0x82
 80011a2:	22b2      	movs	r2, #178	; 0xb2
 80011a4:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.latched_int)
 80011a8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80011ac:	b10b      	cbz	r3, 80011b2 <mpu_set_bypass.part.1.constprop.7+0x5e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80011ae:	f88d 2007 	strb.w	r2, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80011b2:	e9d4 1200 	ldrd	r1, r2, [r4]
 80011b6:	f10d 0307 	add.w	r3, sp, #7
 80011ba:	7810      	ldrb	r0, [r2, #0]
 80011bc:	7dc9      	ldrb	r1, [r1, #23]
 80011be:	2201      	movs	r2, #1
 80011c0:	f003 fd26 	bl	8004c10 <i2c_write>
 80011c4:	b928      	cbnz	r0, 80011d2 <mpu_set_bypass.part.1.constprop.7+0x7e>
    st.chip_cfg.bypass_mode = bypass_on;
 80011c6:	2301      	movs	r3, #1
 80011c8:	74a3      	strb	r3, [r4, #18]
}
 80011ca:	b002      	add	sp, #8
 80011cc:	bd10      	pop	{r4, pc}
        if (st.chip_cfg.active_low_int)
 80011ce:	2232      	movs	r2, #50	; 0x32
 80011d0:	e7ea      	b.n	80011a8 <mpu_set_bypass.part.1.constprop.7+0x54>
            return -1;
 80011d2:	f04f 30ff 	mov.w	r0, #4294967295
 80011d6:	e7f8      	b.n	80011ca <mpu_set_bypass.part.1.constprop.7+0x76>
 80011d8:	20000000 	.word	0x20000000

080011dc <mpu_reset_fifo>:
{
 80011dc:	b570      	push	{r4, r5, r6, lr}
    if (!(st.chip_cfg.sensors))
 80011de:	4c53      	ldr	r4, [pc, #332]	; (800132c <mpu_reset_fifo+0x150>)
{
 80011e0:	b082      	sub	sp, #8
    if (!(st.chip_cfg.sensors))
 80011e2:	7aa3      	ldrb	r3, [r4, #10]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 809c 	beq.w	8001322 <mpu_reset_fifo+0x146>
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80011ea:	e9d4 2100 	ldrd	r2, r1, [r4]
    data = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	ad02      	add	r5, sp, #8
 80011f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80011f6:	7808      	ldrb	r0, [r1, #0]
 80011f8:	462b      	mov	r3, r5
 80011fa:	7c51      	ldrb	r1, [r2, #17]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f003 fd07 	bl	8004c10 <i2c_write>
 8001202:	2800      	cmp	r0, #0
 8001204:	f040 808d 	bne.w	8001322 <mpu_reset_fifo+0x146>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8001208:	e9d4 2300 	ldrd	r2, r3, [r4]
 800120c:	7951      	ldrb	r1, [r2, #5]
 800120e:	7818      	ldrb	r0, [r3, #0]
 8001210:	2201      	movs	r2, #1
 8001212:	462b      	mov	r3, r5
 8001214:	f003 fcfc 	bl	8004c10 <i2c_write>
 8001218:	2800      	cmp	r0, #0
 800121a:	f040 8082 	bne.w	8001322 <mpu_reset_fifo+0x146>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800121e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001222:	7911      	ldrb	r1, [r2, #4]
 8001224:	7818      	ldrb	r0, [r3, #0]
 8001226:	2201      	movs	r2, #1
 8001228:	462b      	mov	r3, r5
 800122a:	f003 fcf1 	bl	8004c10 <i2c_write>
 800122e:	2800      	cmp	r0, #0
 8001230:	d177      	bne.n	8001322 <mpu_reset_fifo+0x146>
 8001232:	e9d4 2100 	ldrd	r2, r1, [r4]
    if (st.chip_cfg.dmp_on) {
 8001236:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800123a:	7808      	ldrb	r0, [r1, #0]
 800123c:	7911      	ldrb	r1, [r2, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d13b      	bne.n	80012ba <mpu_reset_fifo+0xde>
        data = BIT_FIFO_RST;
 8001242:	2604      	movs	r6, #4
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001244:	462b      	mov	r3, r5
 8001246:	2201      	movs	r2, #1
        data = BIT_FIFO_RST;
 8001248:	f88d 6007 	strb.w	r6, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800124c:	f003 fce0 	bl	8004c10 <i2c_write>
 8001250:	2800      	cmp	r0, #0
 8001252:	d166      	bne.n	8001322 <mpu_reset_fifo+0x146>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8001254:	7ca3      	ldrb	r3, [r4, #18]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d161      	bne.n	800131e <mpu_reset_fifo+0x142>
 800125a:	7aa3      	ldrb	r3, [r4, #10]
            data = BIT_FIFO_EN;
 800125c:	f013 0f01 	tst.w	r3, #1
 8001260:	bf14      	ite	ne
 8001262:	2160      	movne	r1, #96	; 0x60
 8001264:	2140      	moveq	r1, #64	; 0x40
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001266:	e9d4 3200 	ldrd	r3, r2, [r4]
 800126a:	f88d 1007 	strb.w	r1, [sp, #7]
 800126e:	7810      	ldrb	r0, [r2, #0]
 8001270:	7919      	ldrb	r1, [r3, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	462b      	mov	r3, r5
 8001276:	f003 fccb 	bl	8004c10 <i2c_write>
 800127a:	2800      	cmp	r0, #0
 800127c:	d151      	bne.n	8001322 <mpu_reset_fifo+0x146>
        if (st.chip_cfg.int_enable)
 800127e:	7c63      	ldrb	r3, [r4, #17]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001280:	6861      	ldr	r1, [r4, #4]
        if (st.chip_cfg.int_enable)
 8001282:	3300      	adds	r3, #0
 8001284:	bf18      	it	ne
 8001286:	2301      	movne	r3, #1
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001288:	6822      	ldr	r2, [r4, #0]
        if (st.chip_cfg.int_enable)
 800128a:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800128e:	7808      	ldrb	r0, [r1, #0]
 8001290:	462b      	mov	r3, r5
 8001292:	7c51      	ldrb	r1, [r2, #17]
 8001294:	2201      	movs	r2, #1
 8001296:	f003 fcbb 	bl	8004c10 <i2c_write>
 800129a:	2800      	cmp	r0, #0
 800129c:	d141      	bne.n	8001322 <mpu_reset_fifo+0x146>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 800129e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80012a2:	7818      	ldrb	r0, [r3, #0]
 80012a4:	7951      	ldrb	r1, [r2, #5]
 80012a6:	4b22      	ldr	r3, [pc, #136]	; (8001330 <mpu_reset_fifo+0x154>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	f003 fcb1 	bl	8004c10 <i2c_write>
 80012ae:	3000      	adds	r0, #0
 80012b0:	bf18      	it	ne
 80012b2:	2001      	movne	r0, #1
 80012b4:	4240      	negs	r0, r0
}
 80012b6:	b002      	add	sp, #8
 80012b8:	bd70      	pop	{r4, r5, r6, pc}
        data = BIT_FIFO_RST | BIT_DMP_RST;
 80012ba:	260c      	movs	r6, #12
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80012bc:	462b      	mov	r3, r5
 80012be:	2201      	movs	r2, #1
        data = BIT_FIFO_RST | BIT_DMP_RST;
 80012c0:	f88d 6007 	strb.w	r6, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80012c4:	f003 fca4 	bl	8004c10 <i2c_write>
 80012c8:	bb58      	cbnz	r0, 8001322 <mpu_reset_fifo+0x146>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80012ca:	7aa3      	ldrb	r3, [r4, #10]
        data = BIT_DMP_EN | BIT_FIFO_EN;
 80012cc:	22c0      	movs	r2, #192	; 0xc0
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80012ce:	07db      	lsls	r3, r3, #31
            data |= BIT_AUX_IF_EN;
 80012d0:	bf48      	it	mi
 80012d2:	23e0      	movmi	r3, #224	; 0xe0
        data = BIT_DMP_EN | BIT_FIFO_EN;
 80012d4:	f88d 2007 	strb.w	r2, [sp, #7]
            data |= BIT_AUX_IF_EN;
 80012d8:	bf48      	it	mi
 80012da:	f88d 3007 	strbmi.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80012de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80012e2:	7911      	ldrb	r1, [r2, #4]
 80012e4:	7818      	ldrb	r0, [r3, #0]
 80012e6:	2201      	movs	r2, #1
 80012e8:	462b      	mov	r3, r5
 80012ea:	f003 fc91 	bl	8004c10 <i2c_write>
 80012ee:	b9c0      	cbnz	r0, 8001322 <mpu_reset_fifo+0x146>
        if (st.chip_cfg.int_enable)
 80012f0:	7c63      	ldrb	r3, [r4, #17]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80012f2:	6861      	ldr	r1, [r4, #4]
            data = BIT_DMP_INT_EN;
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	bf18      	it	ne
 80012f8:	2302      	movne	r3, #2
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80012fa:	6822      	ldr	r2, [r4, #0]
 80012fc:	f88d 3007 	strb.w	r3, [sp, #7]
 8001300:	7808      	ldrb	r0, [r1, #0]
 8001302:	462b      	mov	r3, r5
 8001304:	7c51      	ldrb	r1, [r2, #17]
 8001306:	2201      	movs	r2, #1
 8001308:	f003 fc82 	bl	8004c10 <i2c_write>
 800130c:	b948      	cbnz	r0, 8001322 <mpu_reset_fifo+0x146>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800130e:	e9d4 2100 	ldrd	r2, r1, [r4]
        data = 0;
 8001312:	f88d 0007 	strb.w	r0, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8001316:	7808      	ldrb	r0, [r1, #0]
 8001318:	462b      	mov	r3, r5
 800131a:	7951      	ldrb	r1, [r2, #5]
 800131c:	e7c4      	b.n	80012a8 <mpu_reset_fifo+0xcc>
            data = BIT_FIFO_EN;
 800131e:	2140      	movs	r1, #64	; 0x40
 8001320:	e7a1      	b.n	8001266 <mpu_reset_fifo+0x8a>
        return -1;
 8001322:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001326:	b002      	add	sp, #8
 8001328:	bd70      	pop	{r4, r5, r6, pc}
 800132a:	bf00      	nop
 800132c:	20000000 	.word	0x20000000
 8001330:	20000010 	.word	0x20000010

08001334 <mpu_lp_accel_mode>:
{
 8001334:	b570      	push	{r4, r5, r6, lr}
    if (rate > 40)
 8001336:	2828      	cmp	r0, #40	; 0x28
{
 8001338:	b082      	sub	sp, #8
    if (rate > 40)
 800133a:	f200 80ac 	bhi.w	8001496 <mpu_lp_accel_mode+0x162>
 800133e:	4c5b      	ldr	r4, [pc, #364]	; (80014ac <mpu_lp_accel_mode+0x178>)
 8001340:	4605      	mov	r5, r0
 8001342:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    if (!rate) {
 8001346:	b9b8      	cbnz	r0, 8001378 <mpu_lp_accel_mode+0x44>
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 8001348:	2b00      	cmp	r3, #0
 800134a:	f040 8082 	bne.w	8001452 <mpu_lp_accel_mode+0x11e>
 800134e:	ae01      	add	r6, sp, #4
        tmp[0] = 0;
 8001350:	f44f 63e0 	mov.w	r3, #1792	; 0x700
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001354:	e9d4 1200 	ldrd	r1, r2, [r4]
        tmp[0] = 0;
 8001358:	f8ad 3004 	strh.w	r3, [sp, #4]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 800135c:	7810      	ldrb	r0, [r2, #0]
 800135e:	4633      	mov	r3, r6
 8001360:	7d49      	ldrb	r1, [r1, #21]
 8001362:	2202      	movs	r2, #2
 8001364:	f003 fc54 	bl	8004c10 <i2c_write>
 8001368:	4605      	mov	r5, r0
 800136a:	2800      	cmp	r0, #0
 800136c:	f040 8093 	bne.w	8001496 <mpu_lp_accel_mode+0x162>
        st.chip_cfg.lp_accel_mode = 0;
 8001370:	7520      	strb	r0, [r4, #20]
}
 8001372:	4628      	mov	r0, r5
 8001374:	b002      	add	sp, #8
 8001376:	bd70      	pop	{r4, r5, r6, pc}
    if (st.chip_cfg.latched_int == enable)
 8001378:	2b01      	cmp	r3, #1
 800137a:	d142      	bne.n	8001402 <mpu_lp_accel_mode+0xce>
 800137c:	ae01      	add	r6, sp, #4
    if (rate == 1)
 800137e:	2d01      	cmp	r5, #1
 8001380:	d05a      	beq.n	8001438 <mpu_lp_accel_mode+0x104>
    else if (rate == 2)
 8001382:	2d02      	cmp	r5, #2
 8001384:	f000 8081 	beq.w	800148a <mpu_lp_accel_mode+0x156>
    else if (rate <= 5)
 8001388:	2d05      	cmp	r5, #5
 800138a:	d95e      	bls.n	800144a <mpu_lp_accel_mode+0x116>
    else if (rate <= 10)
 800138c:	2d0a      	cmp	r5, #10
 800138e:	f200 8085 	bhi.w	800149c <mpu_lp_accel_mode+0x168>
        tmp[0] = INV_LPA_10HZ;
 8001392:	2305      	movs	r3, #5
 8001394:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 8001398:	e9d4 2300 	ldrd	r2, r3, [r4]
 800139c:	7a51      	ldrb	r1, [r2, #9]
 800139e:	7818      	ldrb	r0, [r3, #0]
 80013a0:	2201      	movs	r2, #1
 80013a2:	4633      	mov	r3, r6
 80013a4:	f003 fc34 	bl	8004c10 <i2c_write>
 80013a8:	2800      	cmp	r0, #0
 80013aa:	d174      	bne.n	8001496 <mpu_lp_accel_mode+0x162>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 80013ac:	e9d4 1200 	ldrd	r1, r2, [r4]
    tmp[0] = BIT_LPA_CYCLE;
 80013b0:	2320      	movs	r3, #32
 80013b2:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 80013b6:	7810      	ldrb	r0, [r2, #0]
 80013b8:	4633      	mov	r3, r6
 80013ba:	7d49      	ldrb	r1, [r1, #21]
 80013bc:	2201      	movs	r2, #1
 80013be:	f003 fc27 	bl	8004c10 <i2c_write>
 80013c2:	4605      	mov	r5, r0
 80013c4:	2800      	cmp	r0, #0
 80013c6:	d166      	bne.n	8001496 <mpu_lp_accel_mode+0x162>
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 80013c8:	2108      	movs	r1, #8
    st.chip_cfg.lp_accel_mode = 1;
 80013ca:	2201      	movs	r2, #1
    if (st.chip_cfg.dmp_on)
 80013cc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    st.chip_cfg.clk_src = 0;
 80013d0:	7320      	strb	r0, [r4, #12]
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 80013d2:	72a1      	strb	r1, [r4, #10]
    st.chip_cfg.lp_accel_mode = 1;
 80013d4:	7522      	strb	r2, [r4, #20]
    if (st.chip_cfg.dmp_on)
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1cb      	bne.n	8001372 <mpu_lp_accel_mode+0x3e>
        if (enable && st.chip_cfg.int_enable)
 80013da:	7c63      	ldrb	r3, [r4, #17]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 80013dc:	7420      	strb	r0, [r4, #16]
        if (enable && st.chip_cfg.int_enable)
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1c7      	bne.n	8001372 <mpu_lp_accel_mode+0x3e>
            tmp = BIT_DATA_RDY_EN;
 80013e2:	eb0d 0301 	add.w	r3, sp, r1
 80013e6:	f803 2d05 	strb.w	r2, [r3, #-5]!
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 80013ea:	e9d4 1000 	ldrd	r1, r0, [r4]
 80013ee:	7800      	ldrb	r0, [r0, #0]
 80013f0:	7c49      	ldrb	r1, [r1, #17]
 80013f2:	f003 fc0d 	bl	8004c10 <i2c_write>
 80013f6:	2800      	cmp	r0, #0
 80013f8:	d1bb      	bne.n	8001372 <mpu_lp_accel_mode+0x3e>
        st.chip_cfg.int_enable = tmp;
 80013fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80013fe:	7463      	strb	r3, [r4, #17]
 8001400:	e7b7      	b.n	8001372 <mpu_lp_accel_mode+0x3e>
        return 0;

    if (enable)
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8001402:	2230      	movs	r2, #48	; 0x30
    else
        tmp = 0;
    if (st.chip_cfg.bypass_mode)
 8001404:	7ca3      	ldrb	r3, [r4, #18]
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8001406:	f88d 2004 	strb.w	r2, [sp, #4]
    if (st.chip_cfg.bypass_mode)
 800140a:	b9cb      	cbnz	r3, 8001440 <mpu_lp_accel_mode+0x10c>
 800140c:	22b0      	movs	r2, #176	; 0xb0
        tmp |= BIT_BYPASS_EN;
    if (st.chip_cfg.active_low_int)
 800140e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001412:	b10b      	cbz	r3, 8001418 <mpu_lp_accel_mode+0xe4>
        tmp |= BIT_ACTL;
 8001414:	f88d 2004 	strb.w	r2, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001418:	ae01      	add	r6, sp, #4
 800141a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800141e:	7dd1      	ldrb	r1, [r2, #23]
 8001420:	7818      	ldrb	r0, [r3, #0]
 8001422:	2201      	movs	r2, #1
 8001424:	4633      	mov	r3, r6
 8001426:	f003 fbf3 	bl	8004c10 <i2c_write>
 800142a:	2800      	cmp	r0, #0
 800142c:	d1a7      	bne.n	800137e <mpu_lp_accel_mode+0x4a>
        return -1;
    st.chip_cfg.latched_int = enable;
 800142e:	2301      	movs	r3, #1
    if (rate == 1)
 8001430:	2d01      	cmp	r5, #1
    st.chip_cfg.latched_int = enable;
 8001432:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    if (rate == 1)
 8001436:	d1a4      	bne.n	8001382 <mpu_lp_accel_mode+0x4e>
        tmp[0] = INV_LPA_1_25HZ;
 8001438:	2302      	movs	r3, #2
 800143a:	f88d 3004 	strb.w	r3, [sp, #4]
 800143e:	e7ab      	b.n	8001398 <mpu_lp_accel_mode+0x64>
        tmp |= BIT_BYPASS_EN;
 8001440:	2332      	movs	r3, #50	; 0x32
 8001442:	22b2      	movs	r2, #178	; 0xb2
 8001444:	f88d 3004 	strb.w	r3, [sp, #4]
 8001448:	e7e1      	b.n	800140e <mpu_lp_accel_mode+0xda>
        tmp[0] = INV_LPA_5HZ;
 800144a:	2304      	movs	r3, #4
 800144c:	f88d 3004 	strb.w	r3, [sp, #4]
 8001450:	e7a2      	b.n	8001398 <mpu_lp_accel_mode+0x64>
    if (st.chip_cfg.bypass_mode)
 8001452:	7ca3      	ldrb	r3, [r4, #18]
        tmp = 0;
 8001454:	f88d 0004 	strb.w	r0, [sp, #4]
    if (st.chip_cfg.bypass_mode)
 8001458:	b1db      	cbz	r3, 8001492 <mpu_lp_accel_mode+0x15e>
        tmp |= BIT_BYPASS_EN;
 800145a:	2302      	movs	r3, #2
 800145c:	2282      	movs	r2, #130	; 0x82
 800145e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (st.chip_cfg.active_low_int)
 8001462:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001466:	b10b      	cbz	r3, 800146c <mpu_lp_accel_mode+0x138>
        tmp |= BIT_ACTL;
 8001468:	f88d 2004 	strb.w	r2, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800146c:	ae01      	add	r6, sp, #4
 800146e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001472:	7dd1      	ldrb	r1, [r2, #23]
 8001474:	7818      	ldrb	r0, [r3, #0]
 8001476:	2201      	movs	r2, #1
 8001478:	4633      	mov	r3, r6
 800147a:	f003 fbc9 	bl	8004c10 <i2c_write>
 800147e:	2800      	cmp	r0, #0
 8001480:	f47f af66 	bne.w	8001350 <mpu_lp_accel_mode+0x1c>
    st.chip_cfg.latched_int = enable;
 8001484:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
 8001488:	e762      	b.n	8001350 <mpu_lp_accel_mode+0x1c>
        tmp[0] = INV_LPA_2_5HZ;
 800148a:	2303      	movs	r3, #3
 800148c:	f88d 3004 	strb.w	r3, [sp, #4]
 8001490:	e782      	b.n	8001398 <mpu_lp_accel_mode+0x64>
    if (st.chip_cfg.bypass_mode)
 8001492:	2280      	movs	r2, #128	; 0x80
 8001494:	e7e5      	b.n	8001462 <mpu_lp_accel_mode+0x12e>
        return -1;
 8001496:	f04f 35ff 	mov.w	r5, #4294967295
 800149a:	e76a      	b.n	8001372 <mpu_lp_accel_mode+0x3e>
    else if (rate <= 20)
 800149c:	2d14      	cmp	r5, #20
        tmp[0] = INV_LPA_20HZ;
 800149e:	bf94      	ite	ls
 80014a0:	2306      	movls	r3, #6
        tmp[0] = INV_LPA_40HZ;
 80014a2:	2307      	movhi	r3, #7
 80014a4:	f88d 3004 	strb.w	r3, [sp, #4]
 80014a8:	e776      	b.n	8001398 <mpu_lp_accel_mode+0x64>
 80014aa:	bf00      	nop
 80014ac:	20000000 	.word	0x20000000

080014b0 <mpu_set_sample_rate>:
{
 80014b0:	b570      	push	{r4, r5, r6, lr}
    if (!(st.chip_cfg.sensors))
 80014b2:	4c62      	ldr	r4, [pc, #392]	; (800163c <mpu_set_sample_rate+0x18c>)
{
 80014b4:	b082      	sub	sp, #8
    if (!(st.chip_cfg.sensors))
 80014b6:	7aa3      	ldrb	r3, [r4, #10]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 80af 	beq.w	800161c <mpu_set_sample_rate+0x16c>
    if (st.chip_cfg.dmp_on)
 80014be:	f894 6024 	ldrb.w	r6, [r4, #36]	; 0x24
 80014c2:	2e00      	cmp	r6, #0
 80014c4:	f040 80aa 	bne.w	800161c <mpu_set_sample_rate+0x16c>
        if (st.chip_cfg.lp_accel_mode) {
 80014c8:	7d23      	ldrb	r3, [r4, #20]
 80014ca:	4605      	mov	r5, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d15a      	bne.n	8001586 <mpu_set_sample_rate+0xd6>
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 80014d0:	e9d4 1000 	ldrd	r1, r0, [r4]
 80014d4:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 80014d8:	462a      	mov	r2, r5
 80014da:	bf28      	it	cs
 80014dc:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
        data = 1000 / rate - 1;
 80014e0:	2a04      	cmp	r2, #4
 80014e2:	bf38      	it	cc
 80014e4:	2204      	movcc	r2, #4
 80014e6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80014ea:	fb95 f2f2 	sdiv	r2, r5, r2
 80014ee:	ab02      	add	r3, sp, #8
 80014f0:	3a01      	subs	r2, #1
 80014f2:	f803 2d05 	strb.w	r2, [r3, #-5]!
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 80014f6:	7800      	ldrb	r0, [r0, #0]
 80014f8:	7849      	ldrb	r1, [r1, #1]
 80014fa:	2201      	movs	r2, #1
 80014fc:	f003 fb88 	bl	8004c10 <i2c_write>
 8001500:	4606      	mov	r6, r0
 8001502:	2800      	cmp	r0, #0
 8001504:	f040 808a 	bne.w	800161c <mpu_set_sample_rate+0x16c>
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8001508:	f89d 3003 	ldrb.w	r3, [sp, #3]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 800150c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 800150e:	3301      	adds	r3, #1
 8001510:	fb95 f3f3 	sdiv	r3, r5, r3
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 8001514:	2964      	cmp	r1, #100	; 0x64
 8001516:	460a      	mov	r2, r1
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8001518:	81e3      	strh	r3, [r4, #14]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 800151a:	bf28      	it	cs
 800151c:	2264      	movcs	r2, #100	; 0x64
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 800151e:	b1c1      	cbz	r1, 8001552 <mpu_set_sample_rate+0xa2>
 8001520:	4293      	cmp	r3, r2
 8001522:	d316      	bcc.n	8001552 <mpu_set_sample_rate+0xa2>
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8001524:	e9d4 1000 	ldrd	r1, r0, [r4]
    div = st.chip_cfg.sample_rate / rate - 1;
 8001528:	fbb3 f2f2 	udiv	r2, r3, r2
 800152c:	ab02      	add	r3, sp, #8
 800152e:	3a01      	subs	r2, #1
 8001530:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8001534:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
 8001538:	7800      	ldrb	r0, [r0, #0]
 800153a:	2201      	movs	r2, #1
 800153c:	f003 fb68 	bl	8004c10 <i2c_write>
 8001540:	2800      	cmp	r0, #0
 8001542:	d179      	bne.n	8001638 <mpu_set_sample_rate+0x188>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 8001544:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001548:	89e3      	ldrh	r3, [r4, #14]
 800154a:	3201      	adds	r2, #1
 800154c:	fb93 f2f2 	sdiv	r2, r3, r2
 8001550:	8522      	strh	r2, [r4, #40]	; 0x28
    if (!(st.chip_cfg.sensors))
 8001552:	7aa2      	ldrb	r2, [r4, #10]
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8001554:	085b      	lsrs	r3, r3, #1
    if (!(st.chip_cfg.sensors))
 8001556:	b19a      	cbz	r2, 8001580 <mpu_set_sample_rate+0xd0>
    if (lpf >= 188)
 8001558:	2bbb      	cmp	r3, #187	; 0xbb
 800155a:	d92b      	bls.n	80015b4 <mpu_set_sample_rate+0x104>
        data = INV_FILTER_188HZ;
 800155c:	2301      	movs	r3, #1
 800155e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (st.chip_cfg.lpf == data)
 8001562:	7ae2      	ldrb	r2, [r4, #11]
 8001564:	429a      	cmp	r2, r3
 8001566:	d00b      	beq.n	8001580 <mpu_set_sample_rate+0xd0>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8001568:	e9d4 2300 	ldrd	r2, r3, [r4]
 800156c:	7891      	ldrb	r1, [r2, #2]
 800156e:	7818      	ldrb	r0, [r3, #0]
 8001570:	2201      	movs	r2, #1
 8001572:	ab01      	add	r3, sp, #4
 8001574:	f003 fb4c 	bl	8004c10 <i2c_write>
 8001578:	b910      	cbnz	r0, 8001580 <mpu_set_sample_rate+0xd0>
    st.chip_cfg.lpf = data;
 800157a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800157e:	72e3      	strb	r3, [r4, #11]
}
 8001580:	4630      	mov	r0, r6
 8001582:	b002      	add	sp, #8
 8001584:	bd70      	pop	{r4, r5, r6, pc}
            if (rate && (rate <= 40)) {
 8001586:	1e43      	subs	r3, r0, #1
 8001588:	2b27      	cmp	r3, #39	; 0x27
 800158a:	d91b      	bls.n	80015c4 <mpu_set_sample_rate+0x114>
    if (st.chip_cfg.latched_int == enable)
 800158c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8001590:	bb0b      	cbnz	r3, 80015d6 <mpu_set_sample_rate+0x126>
 8001592:	ae01      	add	r6, sp, #4
        tmp[0] = 0;
 8001594:	f44f 63e0 	mov.w	r3, #1792	; 0x700
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001598:	e9d4 1200 	ldrd	r1, r2, [r4]
        tmp[0] = 0;
 800159c:	f8ad 3004 	strh.w	r3, [sp, #4]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80015a0:	7810      	ldrb	r0, [r2, #0]
 80015a2:	4633      	mov	r3, r6
 80015a4:	7d49      	ldrb	r1, [r1, #21]
 80015a6:	2202      	movs	r2, #2
 80015a8:	f003 fb32 	bl	8004c10 <i2c_write>
 80015ac:	2800      	cmp	r0, #0
 80015ae:	d18f      	bne.n	80014d0 <mpu_set_sample_rate+0x20>
        st.chip_cfg.lp_accel_mode = 0;
 80015b0:	7520      	strb	r0, [r4, #20]
 80015b2:	e78d      	b.n	80014d0 <mpu_set_sample_rate+0x20>
    else if (lpf >= 98)
 80015b4:	2b61      	cmp	r3, #97	; 0x61
 80015b6:	d80a      	bhi.n	80015ce <mpu_set_sample_rate+0x11e>
    else if (lpf >= 42)
 80015b8:	2b29      	cmp	r3, #41	; 0x29
 80015ba:	d927      	bls.n	800160c <mpu_set_sample_rate+0x15c>
        data = INV_FILTER_42HZ;
 80015bc:	2303      	movs	r3, #3
 80015be:	f88d 3004 	strb.w	r3, [sp, #4]
 80015c2:	e7ce      	b.n	8001562 <mpu_set_sample_rate+0xb2>
                mpu_lp_accel_mode(rate);
 80015c4:	f7ff feb6 	bl	8001334 <mpu_lp_accel_mode>
}
 80015c8:	4630      	mov	r0, r6
 80015ca:	b002      	add	sp, #8
 80015cc:	bd70      	pop	{r4, r5, r6, pc}
        data = INV_FILTER_98HZ;
 80015ce:	2302      	movs	r3, #2
 80015d0:	f88d 3004 	strb.w	r3, [sp, #4]
 80015d4:	e7c5      	b.n	8001562 <mpu_set_sample_rate+0xb2>
    if (st.chip_cfg.bypass_mode)
 80015d6:	7ca3      	ldrb	r3, [r4, #18]
        tmp = 0;
 80015d8:	f88d 6004 	strb.w	r6, [sp, #4]
    if (st.chip_cfg.bypass_mode)
 80015dc:	b32b      	cbz	r3, 800162a <mpu_set_sample_rate+0x17a>
        tmp |= BIT_BYPASS_EN;
 80015de:	2302      	movs	r3, #2
 80015e0:	2282      	movs	r2, #130	; 0x82
 80015e2:	f88d 3004 	strb.w	r3, [sp, #4]
    if (st.chip_cfg.active_low_int)
 80015e6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80015ea:	b10b      	cbz	r3, 80015f0 <mpu_set_sample_rate+0x140>
        tmp |= BIT_ACTL;
 80015ec:	f88d 2004 	strb.w	r2, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80015f0:	ae01      	add	r6, sp, #4
 80015f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80015f6:	7dd1      	ldrb	r1, [r2, #23]
 80015f8:	7818      	ldrb	r0, [r3, #0]
 80015fa:	2201      	movs	r2, #1
 80015fc:	4633      	mov	r3, r6
 80015fe:	f003 fb07 	bl	8004c10 <i2c_write>
 8001602:	2800      	cmp	r0, #0
 8001604:	d1c6      	bne.n	8001594 <mpu_set_sample_rate+0xe4>
    st.chip_cfg.latched_int = enable;
 8001606:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
 800160a:	e7c3      	b.n	8001594 <mpu_set_sample_rate+0xe4>
    else if (lpf >= 20)
 800160c:	2b13      	cmp	r3, #19
 800160e:	d808      	bhi.n	8001622 <mpu_set_sample_rate+0x172>
    else if (lpf >= 10)
 8001610:	2b09      	cmp	r3, #9
 8001612:	d90c      	bls.n	800162e <mpu_set_sample_rate+0x17e>
        data = INV_FILTER_10HZ;
 8001614:	2305      	movs	r3, #5
 8001616:	f88d 3004 	strb.w	r3, [sp, #4]
 800161a:	e7a2      	b.n	8001562 <mpu_set_sample_rate+0xb2>
        return -1;
 800161c:	f04f 36ff 	mov.w	r6, #4294967295
 8001620:	e7ae      	b.n	8001580 <mpu_set_sample_rate+0xd0>
        data = INV_FILTER_20HZ;
 8001622:	2304      	movs	r3, #4
 8001624:	f88d 3004 	strb.w	r3, [sp, #4]
 8001628:	e79b      	b.n	8001562 <mpu_set_sample_rate+0xb2>
    if (st.chip_cfg.bypass_mode)
 800162a:	2280      	movs	r2, #128	; 0x80
 800162c:	e7db      	b.n	80015e6 <mpu_set_sample_rate+0x136>
        data = INV_FILTER_5HZ;
 800162e:	2206      	movs	r2, #6
 8001630:	4613      	mov	r3, r2
 8001632:	f88d 2004 	strb.w	r2, [sp, #4]
 8001636:	e794      	b.n	8001562 <mpu_set_sample_rate+0xb2>
 8001638:	89e3      	ldrh	r3, [r4, #14]
 800163a:	e78a      	b.n	8001552 <mpu_set_sample_rate+0xa2>
 800163c:	20000000 	.word	0x20000000

08001640 <mpu_set_sensors>:
{
 8001640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001642:	4605      	mov	r5, r0
 8001644:	4c76      	ldr	r4, [pc, #472]	; (8001820 <mpu_set_sensors+0x1e0>)
 8001646:	b083      	sub	sp, #12
 8001648:	e9d4 3200 	ldrd	r3, r2, [r4]
 800164c:	7d59      	ldrb	r1, [r3, #21]
    if (sensors & INV_XYZ_GYRO)
 800164e:	f015 0370 	ands.w	r3, r5, #112	; 0x70
 8001652:	7810      	ldrb	r0, [r2, #0]
 8001654:	d07d      	beq.n	8001752 <mpu_set_sensors+0x112>
        data = INV_CLK_PLL;
 8001656:	2301      	movs	r3, #1
 8001658:	f88d 3006 	strb.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 800165c:	f10d 0606 	add.w	r6, sp, #6
 8001660:	4633      	mov	r3, r6
 8001662:	2201      	movs	r2, #1
 8001664:	f003 fad4 	bl	8004c10 <i2c_write>
 8001668:	2800      	cmp	r0, #0
 800166a:	f040 80d3 	bne.w	8001814 <mpu_set_sensors+0x1d4>
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 800166e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    data = 0;
 8001672:	f88d 0006 	strb.w	r0, [sp, #6]
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8001676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800167a:	7323      	strb	r3, [r4, #12]
    if (!(sensors & INV_X_GYRO))
 800167c:	066b      	lsls	r3, r5, #25
 800167e:	d578      	bpl.n	8001772 <mpu_set_sensors+0x132>
 8001680:	2338      	movs	r3, #56	; 0x38
 8001682:	2139      	movs	r1, #57	; 0x39
 8001684:	2201      	movs	r2, #1
 8001686:	f04f 0e3a 	mov.w	lr, #58	; 0x3a
 800168a:	f04f 0c3b 	mov.w	ip, #59	; 0x3b
 800168e:	2703      	movs	r7, #3
 8001690:	2002      	movs	r0, #2
    if (!(sensors & INV_Y_GYRO))
 8001692:	f015 0f20 	tst.w	r5, #32
 8001696:	d104      	bne.n	80016a2 <mpu_set_sensors+0x62>
        data |= BIT_STBY_YG;
 8001698:	4673      	mov	r3, lr
 800169a:	4661      	mov	r1, ip
 800169c:	463a      	mov	r2, r7
 800169e:	f88d 0006 	strb.w	r0, [sp, #6]
    if (!(sensors & INV_Z_GYRO))
 80016a2:	06e8      	lsls	r0, r5, #27
        data |= BIT_STBY_ZG;
 80016a4:	bf5c      	itt	pl
 80016a6:	460b      	movpl	r3, r1
 80016a8:	f88d 2006 	strbpl.w	r2, [sp, #6]
    if (!(sensors & INV_XYZ_ACCEL))
 80016ac:	0729      	lsls	r1, r5, #28
        data |= BIT_STBY_XYZA;
 80016ae:	bf58      	it	pl
 80016b0:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 80016b4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80016b8:	7d91      	ldrb	r1, [r2, #22]
 80016ba:	7818      	ldrb	r0, [r3, #0]
 80016bc:	2201      	movs	r2, #1
 80016be:	4633      	mov	r3, r6
 80016c0:	f003 faa6 	bl	8004c10 <i2c_write>
 80016c4:	4602      	mov	r2, r0
 80016c6:	2800      	cmp	r0, #0
 80016c8:	f040 80a4 	bne.w	8001814 <mpu_set_sensors+0x1d4>
 80016cc:	e9d4 3100 	ldrd	r3, r1, [r4]
 80016d0:	7808      	ldrb	r0, [r1, #0]
    if (sensors && (sensors != INV_XYZ_ACCEL))
 80016d2:	2d00      	cmp	r5, #0
 80016d4:	d05d      	beq.n	8001792 <mpu_set_sensors+0x152>
 80016d6:	2d08      	cmp	r5, #8
 80016d8:	d071      	beq.n	80017be <mpu_set_sensors+0x17e>
    if (st.chip_cfg.latched_int == enable)
 80016da:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 80016de:	2900      	cmp	r1, #0
 80016e0:	d17b      	bne.n	80017da <mpu_set_sensors+0x19a>
 80016e2:	f10d 0707 	add.w	r7, sp, #7
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 80016e6:	7919      	ldrb	r1, [r3, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	463b      	mov	r3, r7
 80016ec:	f003 faa0 	bl	8004c30 <i2c_read>
 80016f0:	2800      	cmp	r0, #0
 80016f2:	d16d      	bne.n	80017d0 <mpu_set_sensors+0x190>
    if (sensors & INV_XYZ_COMPASS) {
 80016f4:	07ea      	lsls	r2, r5, #31
 80016f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80016fa:	d554      	bpl.n	80017a6 <mpu_set_sensors+0x166>
        data = AKM_SINGLE_MEASUREMENT;
 80016fc:	2111      	movs	r1, #17
    if (st.chip_cfg.dmp_on)
 80016fe:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
        user_ctrl |= BIT_AUX_IF_EN;
 8001702:	f043 0320 	orr.w	r3, r3, #32
 8001706:	f88d 1006 	strb.w	r1, [sp, #6]
    if (st.chip_cfg.dmp_on)
 800170a:	2a00      	cmp	r2, #0
 800170c:	d054      	beq.n	80017b8 <mpu_set_sensors+0x178>
        user_ctrl |= BIT_DMP_EN;
 800170e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001712:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 8001716:	e9d4 1200 	ldrd	r1, r2, [r4]
 800171a:	4633      	mov	r3, r6
 800171c:	7810      	ldrb	r0, [r2, #0]
 800171e:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 8001722:	2201      	movs	r2, #1
 8001724:	f003 fa74 	bl	8004c10 <i2c_write>
 8001728:	2800      	cmp	r0, #0
 800172a:	d151      	bne.n	80017d0 <mpu_set_sensors+0x190>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 800172c:	e9d4 1200 	ldrd	r1, r2, [r4]
 8001730:	463b      	mov	r3, r7
 8001732:	7810      	ldrb	r0, [r2, #0]
 8001734:	7909      	ldrb	r1, [r1, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f003 fa6a 	bl	8004c10 <i2c_write>
 800173c:	4606      	mov	r6, r0
 800173e:	2800      	cmp	r0, #0
 8001740:	d146      	bne.n	80017d0 <mpu_set_sensors+0x190>
    delay_ms(50);
 8001742:	2032      	movs	r0, #50	; 0x32
    st.chip_cfg.sensors = sensors;
 8001744:	72a5      	strb	r5, [r4, #10]
    st.chip_cfg.lp_accel_mode = 0;
 8001746:	7526      	strb	r6, [r4, #20]
    delay_ms(50);
 8001748:	f003 fa82 	bl	8004c50 <delay_ms>
}
 800174c:	4630      	mov	r0, r6
 800174e:	b003      	add	sp, #12
 8001750:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (sensors)
 8001752:	b9dd      	cbnz	r5, 800178c <mpu_set_sensors+0x14c>
        data = BIT_SLEEP;
 8001754:	2340      	movs	r3, #64	; 0x40
 8001756:	ae02      	add	r6, sp, #8
 8001758:	f806 3d02 	strb.w	r3, [r6, #-2]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 800175c:	4633      	mov	r3, r6
 800175e:	2201      	movs	r2, #1
 8001760:	f003 fa56 	bl	8004c10 <i2c_write>
 8001764:	2800      	cmp	r0, #0
 8001766:	d155      	bne.n	8001814 <mpu_set_sensors+0x1d4>
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8001768:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800176c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001770:	7323      	strb	r3, [r4, #12]
        data |= BIT_STBY_XG;
 8001772:	2204      	movs	r2, #4
 8001774:	233c      	movs	r3, #60	; 0x3c
 8001776:	f88d 2006 	strb.w	r2, [sp, #6]
 800177a:	213d      	movs	r1, #61	; 0x3d
 800177c:	2205      	movs	r2, #5
 800177e:	f04f 0e3e 	mov.w	lr, #62	; 0x3e
 8001782:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 8001786:	2707      	movs	r7, #7
 8001788:	2006      	movs	r0, #6
 800178a:	e782      	b.n	8001692 <mpu_set_sensors+0x52>
        data = 0;
 800178c:	f88d 3006 	strb.w	r3, [sp, #6]
 8001790:	e764      	b.n	800165c <mpu_set_sensors+0x1c>
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8001792:	f10d 0707 	add.w	r7, sp, #7
 8001796:	7919      	ldrb	r1, [r3, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	463b      	mov	r3, r7
 800179c:	f003 fa48 	bl	8004c30 <i2c_read>
 80017a0:	b9b0      	cbnz	r0, 80017d0 <mpu_set_sensors+0x190>
 80017a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
        data = AKM_POWER_DOWN;
 80017a6:	2110      	movs	r1, #16
    if (st.chip_cfg.dmp_on)
 80017a8:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
        user_ctrl &= ~BIT_AUX_IF_EN;
 80017ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80017b0:	f88d 1006 	strb.w	r1, [sp, #6]
    if (st.chip_cfg.dmp_on)
 80017b4:	2a00      	cmp	r2, #0
 80017b6:	d1aa      	bne.n	800170e <mpu_set_sensors+0xce>
        user_ctrl &= ~BIT_DMP_EN;
 80017b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017bc:	e7a9      	b.n	8001712 <mpu_set_sensors+0xd2>
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 80017be:	f10d 0707 	add.w	r7, sp, #7
 80017c2:	7919      	ldrb	r1, [r3, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	463b      	mov	r3, r7
 80017c8:	f003 fa32 	bl	8004c30 <i2c_read>
 80017cc:	2800      	cmp	r0, #0
 80017ce:	d0e8      	beq.n	80017a2 <mpu_set_sensors+0x162>
        return -1;
 80017d0:	f04f 36ff 	mov.w	r6, #4294967295
}
 80017d4:	4630      	mov	r0, r6
 80017d6:	b003      	add	sp, #12
 80017d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (st.chip_cfg.bypass_mode)
 80017da:	7ca1      	ldrb	r1, [r4, #18]
        tmp = 0;
 80017dc:	f88d 2007 	strb.w	r2, [sp, #7]
    if (st.chip_cfg.bypass_mode)
 80017e0:	b1b1      	cbz	r1, 8001810 <mpu_set_sensors+0x1d0>
        tmp |= BIT_BYPASS_EN;
 80017e2:	2202      	movs	r2, #2
 80017e4:	2182      	movs	r1, #130	; 0x82
 80017e6:	f88d 2007 	strb.w	r2, [sp, #7]
    if (st.chip_cfg.active_low_int)
 80017ea:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 80017ee:	b10a      	cbz	r2, 80017f4 <mpu_set_sensors+0x1b4>
        tmp |= BIT_ACTL;
 80017f0:	f88d 1007 	strb.w	r1, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80017f4:	f10d 0707 	add.w	r7, sp, #7
 80017f8:	7dd9      	ldrb	r1, [r3, #23]
 80017fa:	2201      	movs	r2, #1
 80017fc:	463b      	mov	r3, r7
 80017fe:	f003 fa07 	bl	8004c10 <i2c_write>
 8001802:	b908      	cbnz	r0, 8001808 <mpu_set_sensors+0x1c8>
    st.chip_cfg.latched_int = enable;
 8001804:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
 8001808:	e9d4 3200 	ldrd	r3, r2, [r4]
 800180c:	7810      	ldrb	r0, [r2, #0]
 800180e:	e76a      	b.n	80016e6 <mpu_set_sensors+0xa6>
    if (st.chip_cfg.bypass_mode)
 8001810:	2180      	movs	r1, #128	; 0x80
 8001812:	e7ea      	b.n	80017ea <mpu_set_sensors+0x1aa>
        st.chip_cfg.sensors = 0;
 8001814:	2300      	movs	r3, #0
        return -1;
 8001816:	f04f 36ff 	mov.w	r6, #4294967295
        st.chip_cfg.sensors = 0;
 800181a:	72a3      	strb	r3, [r4, #10]
        return -1;
 800181c:	e796      	b.n	800174c <mpu_set_sensors+0x10c>
 800181e:	bf00      	nop
 8001820:	20000000 	.word	0x20000000

08001824 <mpu_init>:
    data[0] = BIT_RESET;
 8001824:	2380      	movs	r3, #128	; 0x80
{
 8001826:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001828:	b085      	sub	sp, #20
    data[0] = BIT_RESET;
 800182a:	ad04      	add	r5, sp, #16
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800182c:	4c71      	ldr	r4, [pc, #452]	; (80019f4 <mpu_init+0x1d0>)
    data[0] = BIT_RESET;
 800182e:	f805 3d08 	strb.w	r3, [r5, #-8]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001832:	e9d4 2100 	ldrd	r2, r1, [r4]
 8001836:	462b      	mov	r3, r5
 8001838:	7808      	ldrb	r0, [r1, #0]
 800183a:	7d51      	ldrb	r1, [r2, #21]
 800183c:	2201      	movs	r2, #1
 800183e:	f003 f9e7 	bl	8004c10 <i2c_write>
 8001842:	2800      	cmp	r0, #0
 8001844:	f040 81a9 	bne.w	8001b9a <mpu_init+0x376>
 8001848:	4606      	mov	r6, r0
    delay_ms(100);
 800184a:	2064      	movs	r0, #100	; 0x64
 800184c:	f003 fa00 	bl	8004c50 <delay_ms>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001850:	e9d4 3200 	ldrd	r3, r2, [r4]
    data[0] = 0x00;
 8001854:	f88d 6008 	strb.w	r6, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001858:	7810      	ldrb	r0, [r2, #0]
 800185a:	7d59      	ldrb	r1, [r3, #21]
 800185c:	2201      	movs	r2, #1
 800185e:	462b      	mov	r3, r5
 8001860:	f003 f9d6 	bl	8004c10 <i2c_write>
 8001864:	2800      	cmp	r0, #0
 8001866:	f040 8198 	bne.w	8001b9a <mpu_init+0x376>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 800186a:	e9d4 2100 	ldrd	r2, r1, [r4]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 800186e:	2348      	movs	r3, #72	; 0x48
   st.chip_cfg.accel_half = 0;
 8001870:	74e0      	strb	r0, [r4, #19]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 8001872:	f88d 3008 	strb.w	r3, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 8001876:	7808      	ldrb	r0, [r1, #0]
 8001878:	462b      	mov	r3, r5
 800187a:	7a11      	ldrb	r1, [r2, #8]
 800187c:	2201      	movs	r2, #1
 800187e:	f003 f9c7 	bl	8004c10 <i2c_write>
 8001882:	2800      	cmp	r0, #0
 8001884:	f040 8189 	bne.w	8001b9a <mpu_init+0x376>
    st.chip_cfg.sample_rate = 0xFFFF;
 8001888:	f64f 72ff 	movw	r2, #65535	; 0xffff
    st.chip_cfg.clk_src = INV_CLK_PLL;
 800188c:	2701      	movs	r7, #1
    st.chip_cfg.gyro_fsr = 0xFF;
 800188e:	f04f 36ff 	mov.w	r6, #4294967295
    st.chip_cfg.fifo_enable = 0xFF;
 8001892:	f04f 0eff 	mov.w	lr, #255	; 0xff
        data = INV_FSR_2000DPS << 3;
 8001896:	f04f 0c18 	mov.w	ip, #24
    st.chip_cfg.fifo_enable = 0xFF;
 800189a:	7422      	strb	r2, [r4, #16]
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 800189c:	8522      	strh	r2, [r4, #40]	; 0x28
        data = INV_FSR_2000DPS << 3;
 800189e:	ad04      	add	r5, sp, #16
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 80018a0:	6862      	ldr	r2, [r4, #4]
 80018a2:	6821      	ldr	r1, [r4, #0]
        data = INV_FSR_2000DPS << 3;
 80018a4:	f805 cd0c 	strb.w	ip, [r5, #-12]!
    st.chip_cfg.lp_accel_mode = 0;
 80018a8:	82a0      	strh	r0, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 80018aa:	f8c4 0016 	str.w	r0, [r4, #22]
    st.chip_cfg.dmp_on = 0;
 80018ae:	6260      	str	r0, [r4, #36]	; 0x24
    st.chip_cfg.gyro_fsr = 0xFF;
 80018b0:	60a6      	str	r6, [r4, #8]
    st.chip_cfg.sample_rate = 0xFFFF;
 80018b2:	81e6      	strh	r6, [r4, #14]
    st.chip_cfg.bypass_mode = 0xFF;
 80018b4:	f884 e012 	strb.w	lr, [r4, #18]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 80018b8:	7327      	strb	r7, [r4, #12]
    st.chip_cfg.active_low_int = 1;
 80018ba:	8467      	strh	r7, [r4, #34]	; 0x22
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 80018bc:	f8c4 001a 	str.w	r0, [r4, #26]
 80018c0:	f8c4 001e 	str.w	r0, [r4, #30]
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 80018c4:	7810      	ldrb	r0, [r2, #0]
 80018c6:	7989      	ldrb	r1, [r1, #6]
 80018c8:	462b      	mov	r3, r5
 80018ca:	463a      	mov	r2, r7
 80018cc:	f003 f9a0 	bl	8004c10 <i2c_write>
 80018d0:	2800      	cmp	r0, #0
 80018d2:	f040 808b 	bne.w	80019ec <mpu_init+0x1c8>
    st.chip_cfg.gyro_fsr = data >> 3;
 80018d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if (!(st.chip_cfg.sensors))
 80018da:	7aa2      	ldrb	r2, [r4, #10]
    st.chip_cfg.gyro_fsr = data >> 3;
 80018dc:	08db      	lsrs	r3, r3, #3
 80018de:	7223      	strb	r3, [r4, #8]
    if (!(st.chip_cfg.sensors))
 80018e0:	2a00      	cmp	r2, #0
 80018e2:	f000 815a 	beq.w	8001b9a <mpu_init+0x376>
    if (st.chip_cfg.accel_fsr == (data >> 3))
 80018e6:	7a63      	ldrb	r3, [r4, #9]
        data = INV_FSR_2G << 3;
 80018e8:	f88d 0004 	strb.w	r0, [sp, #4]
    if (st.chip_cfg.accel_fsr == (data >> 3))
 80018ec:	b193      	cbz	r3, 8001914 <mpu_init+0xf0>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 80018ee:	e9d4 1300 	ldrd	r1, r3, [r4]
 80018f2:	463a      	mov	r2, r7
 80018f4:	7818      	ldrb	r0, [r3, #0]
 80018f6:	79c9      	ldrb	r1, [r1, #7]
 80018f8:	462b      	mov	r3, r5
 80018fa:	f003 f989 	bl	8004c10 <i2c_write>
 80018fe:	2800      	cmp	r0, #0
 8001900:	f040 814b 	bne.w	8001b9a <mpu_init+0x376>
    st.chip_cfg.accel_fsr = data >> 3;
 8001904:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if (!(st.chip_cfg.sensors))
 8001908:	7aa2      	ldrb	r2, [r4, #10]
    st.chip_cfg.accel_fsr = data >> 3;
 800190a:	08db      	lsrs	r3, r3, #3
 800190c:	7263      	strb	r3, [r4, #9]
    if (!(st.chip_cfg.sensors))
 800190e:	2a00      	cmp	r2, #0
 8001910:	f000 8143 	beq.w	8001b9a <mpu_init+0x376>
        data = INV_FILTER_42HZ;
 8001914:	2203      	movs	r2, #3
    if (st.chip_cfg.lpf == data)
 8001916:	7ae3      	ldrb	r3, [r4, #11]
        data = INV_FILTER_42HZ;
 8001918:	f88d 2004 	strb.w	r2, [sp, #4]
    if (st.chip_cfg.lpf == data)
 800191c:	4293      	cmp	r3, r2
 800191e:	d00d      	beq.n	800193c <mpu_init+0x118>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8001920:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001924:	7891      	ldrb	r1, [r2, #2]
 8001926:	7818      	ldrb	r0, [r3, #0]
 8001928:	2201      	movs	r2, #1
 800192a:	462b      	mov	r3, r5
 800192c:	f003 f970 	bl	8004c10 <i2c_write>
 8001930:	2800      	cmp	r0, #0
 8001932:	f040 8132 	bne.w	8001b9a <mpu_init+0x376>
    st.chip_cfg.lpf = data;
 8001936:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800193a:	72e3      	strb	r3, [r4, #11]
    if (mpu_set_sample_rate(1000))
 800193c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001940:	f7ff fdb6 	bl	80014b0 <mpu_set_sample_rate>
 8001944:	2800      	cmp	r0, #0
 8001946:	f040 8128 	bne.w	8001b9a <mpu_init+0x376>
    if (st.chip_cfg.dmp_on)
 800194a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800194e:	b9c3      	cbnz	r3, 8001982 <mpu_init+0x15e>
        if (!(st.chip_cfg.sensors))
 8001950:	7aa2      	ldrb	r2, [r4, #10]
 8001952:	2a00      	cmp	r2, #0
 8001954:	f000 8121 	beq.w	8001b9a <mpu_init+0x376>
        if (sensors || st.chip_cfg.lp_accel_mode)
 8001958:	7d22      	ldrb	r2, [r4, #20]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 800195a:	7423      	strb	r3, [r4, #16]
        if (sensors || st.chip_cfg.lp_accel_mode)
 800195c:	2a00      	cmp	r2, #0
 800195e:	f000 8125 	beq.w	8001bac <mpu_init+0x388>
        if (enable && st.chip_cfg.int_enable)
 8001962:	7c63      	ldrb	r3, [r4, #17]
 8001964:	b96b      	cbnz	r3, 8001982 <mpu_init+0x15e>
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001966:	e9d4 1300 	ldrd	r1, r3, [r4]
            tmp = BIT_DATA_RDY_EN;
 800196a:	2201      	movs	r2, #1
 800196c:	f88d 2004 	strb.w	r2, [sp, #4]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001970:	7818      	ldrb	r0, [r3, #0]
 8001972:	7c49      	ldrb	r1, [r1, #17]
 8001974:	462b      	mov	r3, r5
 8001976:	f003 f94b 	bl	8004c10 <i2c_write>
 800197a:	b910      	cbnz	r0, 8001982 <mpu_init+0x15e>
        st.chip_cfg.int_enable = tmp;
 800197c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001980:	7463      	strb	r3, [r4, #17]
    if (st.chip_cfg.bypass_mode == bypass_on)
 8001982:	7ca3      	ldrb	r3, [r4, #18]
 8001984:	2b01      	cmp	r3, #1
 8001986:	f040 8105 	bne.w	8001b94 <mpu_init+0x370>
{
 800198a:	260c      	movs	r6, #12
    mpu_set_bypass(1);

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 800198c:	462b      	mov	r3, r5
 800198e:	2201      	movs	r2, #1
 8001990:	2100      	movs	r1, #0
 8001992:	4630      	mov	r0, r6
 8001994:	f003 f94c 	bl	8004c30 <i2c_read>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8001998:	1c73      	adds	r3, r6, #1
        if (!result && (data[0] == AKM_WHOAMI))
 800199a:	b918      	cbnz	r0, 80019a4 <mpu_init+0x180>
 800199c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80019a0:	2a48      	cmp	r2, #72	; 0x48
 80019a2:	d02b      	beq.n	80019fc <mpu_init+0x1d8>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 80019a4:	b2de      	uxtb	r6, r3
 80019a6:	2e10      	cmp	r6, #16
 80019a8:	d1f0      	bne.n	800198c <mpu_init+0x168>
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 80019aa:	89e3      	ldrh	r3, [r4, #14]
 80019ac:	2b09      	cmp	r3, #9
 80019ae:	f240 80f4 	bls.w	8001b9a <mpu_init+0x376>
    div = st.chip_cfg.sample_rate / rate - 1;
 80019b2:	4911      	ldr	r1, [pc, #68]	; (80019f8 <mpu_init+0x1d4>)
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 80019b4:	6822      	ldr	r2, [r4, #0]
    div = st.chip_cfg.sample_rate / rate - 1;
 80019b6:	fba1 1303 	umull	r1, r3, r1, r3
 80019ba:	08db      	lsrs	r3, r3, #3
 80019bc:	3b01      	subs	r3, #1
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 80019be:	6860      	ldr	r0, [r4, #4]
    div = st.chip_cfg.sample_rate / rate - 1;
 80019c0:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 80019c4:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
 80019c8:	462b      	mov	r3, r5
 80019ca:	7800      	ldrb	r0, [r0, #0]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f003 f91f 	bl	8004c10 <i2c_write>
 80019d2:	4606      	mov	r6, r0
 80019d4:	2800      	cmp	r0, #0
 80019d6:	f040 80e0 	bne.w	8001b9a <mpu_init+0x376>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 80019da:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80019de:	89e3      	ldrh	r3, [r4, #14]
 80019e0:	3201      	adds	r2, #1
 80019e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80019e6:	8523      	strh	r3, [r4, #40]	; 0x28
    mpu_set_sensors(0);
 80019e8:	f7ff fe2a 	bl	8001640 <mpu_set_sensors>
}
 80019ec:	4630      	mov	r0, r6
 80019ee:	b005      	add	sp, #20
 80019f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000000 	.word	0x20000000
 80019f8:	cccccccd 	.word	0xcccccccd
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;

    data[0] = AKM_POWER_DOWN;
 80019fc:	2710      	movs	r7, #16
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80019fe:	4630      	mov	r0, r6
 8001a00:	462b      	mov	r3, r5
 8001a02:	2201      	movs	r2, #1
 8001a04:	210a      	movs	r1, #10
    st.chip_cfg.compass_addr = akm_addr;
 8001a06:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    data[0] = AKM_POWER_DOWN;
 8001a0a:	f88d 7004 	strb.w	r7, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001a0e:	f003 f8ff 	bl	8004c10 <i2c_write>
 8001a12:	2800      	cmp	r0, #0
 8001a14:	d1c9      	bne.n	80019aa <mpu_init+0x186>
        return -1;
    delay_ms(1);

    data[0] = AKM_FUSE_ROM_ACCESS;
 8001a16:	261f      	movs	r6, #31
    delay_ms(1);
 8001a18:	2001      	movs	r0, #1
 8001a1a:	f003 f919 	bl	8004c50 <delay_ms>
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001a1e:	462b      	mov	r3, r5
 8001a20:	2201      	movs	r2, #1
 8001a22:	210a      	movs	r1, #10
 8001a24:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    data[0] = AKM_FUSE_ROM_ACCESS;
 8001a28:	f88d 6004 	strb.w	r6, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001a2c:	f003 f8f0 	bl	8004c10 <i2c_write>
 8001a30:	2800      	cmp	r0, #0
 8001a32:	d1ba      	bne.n	80019aa <mpu_init+0x186>
        return -1;
    delay_ms(1);
 8001a34:	2001      	movs	r0, #1
 8001a36:	f003 f90b 	bl	8004c50 <delay_ms>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 8001a3a:	462b      	mov	r3, r5
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	4639      	mov	r1, r7
 8001a40:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8001a44:	f003 f8f4 	bl	8004c30 <i2c_read>
 8001a48:	2800      	cmp	r0, #0
 8001a4a:	d1ae      	bne.n	80019aa <mpu_init+0x186>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8001a4c:	f89d 2004 	ldrb.w	r2, [sp, #4]
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8001a50:	f89d 0005 	ldrb.w	r0, [sp, #5]
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 8001a54:	f89d 6006 	ldrb.w	r6, [sp, #6]
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8001a58:	3280      	adds	r2, #128	; 0x80
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8001a5a:	3080      	adds	r0, #128	; 0x80
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 8001a5c:	3680      	adds	r6, #128	; 0x80
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8001a5e:	85a2      	strh	r2, [r4, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8001a60:	85e0      	strh	r0, [r4, #46]	; 0x2e

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001a62:	462b      	mov	r3, r5
 8001a64:	2201      	movs	r2, #1
 8001a66:	210a      	movs	r1, #10
 8001a68:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 8001a6c:	8626      	strh	r6, [r4, #48]	; 0x30
    data[0] = AKM_POWER_DOWN;
 8001a6e:	f88d 7004 	strb.w	r7, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8001a72:	f003 f8cd 	bl	8004c10 <i2c_write>
 8001a76:	4606      	mov	r6, r0
 8001a78:	2800      	cmp	r0, #0
 8001a7a:	d196      	bne.n	80019aa <mpu_init+0x186>
        return -1;
    delay_ms(1);
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	f003 f8e7 	bl	8004c50 <delay_ms>
    if (st.chip_cfg.bypass_mode == bypass_on)
 8001a82:	7ca3      	ldrb	r3, [r4, #18]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f040 808d 	bne.w	8001ba4 <mpu_init+0x380>

    mpu_set_bypass(0);

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8001a8a:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = 0x40;
 8001a8e:	2140      	movs	r1, #64	; 0x40
 8001a90:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8001a94:	7e91      	ldrb	r1, [r2, #26]
 8001a96:	7818      	ldrb	r0, [r3, #0]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	462b      	mov	r3, r5
 8001a9c:	f003 f8b8 	bl	8004c10 <i2c_write>
 8001aa0:	2800      	cmp	r0, #0
 8001aa2:	d182      	bne.n	80019aa <mpu_init+0x186>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8001aa4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 8001aa8:	6862      	ldr	r2, [r4, #4]
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8001aaa:	f063 037f 	orn	r3, r3, #127	; 0x7f
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 8001aae:	6821      	ldr	r1, [r4, #0]
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8001ab0:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 8001ab4:	7810      	ldrb	r0, [r2, #0]
 8001ab6:	7f89      	ldrb	r1, [r1, #30]
 8001ab8:	462b      	mov	r3, r5
 8001aba:	2201      	movs	r2, #1
 8001abc:	f003 f8a8 	bl	8004c10 <i2c_write>
 8001ac0:	2800      	cmp	r0, #0
 8001ac2:	f47f af72 	bne.w	80019aa <mpu_init+0x186>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 8001ac6:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = AKM_REG_ST1;
 8001aca:	2102      	movs	r1, #2
 8001acc:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 8001ad0:	7fd1      	ldrb	r1, [r2, #31]
 8001ad2:	7818      	ldrb	r0, [r3, #0]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	462b      	mov	r3, r5
 8001ad8:	f003 f89a 	bl	8004c10 <i2c_write>
 8001adc:	2800      	cmp	r0, #0
 8001ade:	f47f af64 	bne.w	80019aa <mpu_init+0x186>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 8001ae2:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = BIT_SLAVE_EN | 8;
 8001ae6:	2188      	movs	r1, #136	; 0x88
 8001ae8:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 8001aec:	f892 1020 	ldrb.w	r1, [r2, #32]
 8001af0:	7818      	ldrb	r0, [r3, #0]
 8001af2:	2201      	movs	r2, #1
 8001af4:	462b      	mov	r3, r5
 8001af6:	f003 f88b 	bl	8004c10 <i2c_write>
 8001afa:	2800      	cmp	r0, #0
 8001afc:	f47f af55 	bne.w	80019aa <mpu_init+0x186>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8001b00:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = st.chip_cfg.compass_addr;
 8001b04:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 8001b08:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8001b0c:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 8001b10:	7818      	ldrb	r0, [r3, #0]
 8001b12:	2201      	movs	r2, #1
 8001b14:	462b      	mov	r3, r5
 8001b16:	f003 f87b 	bl	8004c10 <i2c_write>
 8001b1a:	2800      	cmp	r0, #0
 8001b1c:	f47f af45 	bne.w	80019aa <mpu_init+0x186>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8001b20:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = AKM_REG_CNTL;
 8001b24:	210a      	movs	r1, #10
 8001b26:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8001b2a:	f892 1022 	ldrb.w	r1, [r2, #34]	; 0x22
 8001b2e:	7818      	ldrb	r0, [r3, #0]
 8001b30:	2201      	movs	r2, #1
 8001b32:	462b      	mov	r3, r5
 8001b34:	f003 f86c 	bl	8004c10 <i2c_write>
 8001b38:	2800      	cmp	r0, #0
 8001b3a:	f47f af36 	bne.w	80019aa <mpu_init+0x186>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8001b3e:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = BIT_SLAVE_EN | 1;
 8001b42:	2181      	movs	r1, #129	; 0x81
 8001b44:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8001b48:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 8001b4c:	7818      	ldrb	r0, [r3, #0]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	462b      	mov	r3, r5
 8001b52:	f003 f85d 	bl	8004c10 <i2c_write>
 8001b56:	2800      	cmp	r0, #0
 8001b58:	f47f af27 	bne.w	80019aa <mpu_init+0x186>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 8001b5c:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = AKM_SINGLE_MEASUREMENT;
 8001b60:	2111      	movs	r1, #17
 8001b62:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 8001b66:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
 8001b6a:	7818      	ldrb	r0, [r3, #0]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	462b      	mov	r3, r5
 8001b70:	f003 f84e 	bl	8004c10 <i2c_write>
 8001b74:	2800      	cmp	r0, #0
 8001b76:	f47f af18 	bne.w	80019aa <mpu_init+0x186>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 8001b7a:	e9d4 2300 	ldrd	r2, r3, [r4]
    data[0] = 0x03;
 8001b7e:	2103      	movs	r1, #3
 8001b80:	f88d 1004 	strb.w	r1, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 8001b84:	f892 1027 	ldrb.w	r1, [r2, #39]	; 0x27
 8001b88:	7818      	ldrb	r0, [r3, #0]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	462b      	mov	r3, r5
 8001b8e:	f003 f83f 	bl	8004c10 <i2c_write>
 8001b92:	e70a      	b.n	80019aa <mpu_init+0x186>
 8001b94:	f7ff fade 	bl	8001154 <mpu_set_bypass.part.1.constprop.7>
 8001b98:	e6f7      	b.n	800198a <mpu_init+0x166>
        return -1;
 8001b9a:	f04f 36ff 	mov.w	r6, #4294967295
}
 8001b9e:	4630      	mov	r0, r6
 8001ba0:	b005      	add	sp, #20
 8001ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba4:	4630      	mov	r0, r6
 8001ba6:	f7ff fa63 	bl	8001070 <mpu_set_bypass.part.1>
 8001baa:	e76e      	b.n	8001a8a <mpu_init+0x266>
            tmp = 0x00;
 8001bac:	f88d 2004 	strb.w	r2, [sp, #4]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001bb0:	e9d4 1300 	ldrd	r1, r3, [r4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	7818      	ldrb	r0, [r3, #0]
 8001bb8:	7c49      	ldrb	r1, [r1, #17]
 8001bba:	462b      	mov	r3, r5
 8001bbc:	f003 f828 	bl	8004c10 <i2c_write>
 8001bc0:	2800      	cmp	r0, #0
 8001bc2:	f43f aedb 	beq.w	800197c <mpu_init+0x158>
 8001bc6:	e6dc      	b.n	8001982 <mpu_init+0x15e>

08001bc8 <mpu_read_fifo_stream>:
{
 8001bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!st.chip_cfg.dmp_on)
 8001bcc:	4d24      	ldr	r5, [pc, #144]	; (8001c60 <mpu_read_fifo_stream+0x98>)
{
 8001bce:	b082      	sub	sp, #8
    if (!st.chip_cfg.dmp_on)
 8001bd0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d038      	beq.n	8001c4a <mpu_read_fifo_stream+0x82>
    if (!st.chip_cfg.sensors)
 8001bd8:	7aab      	ldrb	r3, [r5, #10]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d035      	beq.n	8001c4a <mpu_read_fifo_stream+0x82>
 8001bde:	4617      	mov	r7, r2
    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8001be0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001be4:	4688      	mov	r8, r1
 8001be6:	4606      	mov	r6, r0
 8001be8:	7b11      	ldrb	r1, [r2, #12]
 8001bea:	7818      	ldrb	r0, [r3, #0]
 8001bec:	2202      	movs	r2, #2
 8001bee:	ab01      	add	r3, sp, #4
 8001bf0:	f003 f81e 	bl	8004c30 <i2c_read>
 8001bf4:	bb48      	cbnz	r0, 8001c4a <mpu_read_fifo_stream+0x82>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8001bf6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001bfa:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8001bfe:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    if (fifo_count < length) {
 8001c02:	42b4      	cmp	r4, r6
 8001c04:	d320      	bcc.n	8001c48 <mpu_read_fifo_stream+0x80>
 8001c06:	e9d5 2300 	ldrd	r2, r3, [r5]
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8001c0a:	8859      	ldrh	r1, [r3, #2]
 8001c0c:	7818      	ldrb	r0, [r3, #0]
 8001c0e:	ebb4 0f51 	cmp.w	r4, r1, lsr #1
 8001c12:	d90c      	bls.n	8001c2e <mpu_read_fifo_stream+0x66>
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8001c14:	7cd1      	ldrb	r1, [r2, #19]
 8001c16:	ab01      	add	r3, sp, #4
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f003 f809 	bl	8004c30 <i2c_read>
 8001c1e:	b9a0      	cbnz	r0, 8001c4a <mpu_read_fifo_stream+0x82>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8001c20:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001c24:	06db      	lsls	r3, r3, #27
 8001c26:	d415      	bmi.n	8001c54 <mpu_read_fifo_stream+0x8c>
 8001c28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001c2c:	7818      	ldrb	r0, [r3, #0]
    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 8001c2e:	7b51      	ldrb	r1, [r2, #13]
 8001c30:	4643      	mov	r3, r8
 8001c32:	b2f2      	uxtb	r2, r6
 8001c34:	f002 fffc 	bl	8004c30 <i2c_read>
 8001c38:	b938      	cbnz	r0, 8001c4a <mpu_read_fifo_stream+0x82>
    more[0] = fifo_count / length - 1;
 8001c3a:	fbb4 f4f6 	udiv	r4, r4, r6
 8001c3e:	3c01      	subs	r4, #1
 8001c40:	703c      	strb	r4, [r7, #0]
}
 8001c42:	b002      	add	sp, #8
 8001c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        more[0] = 0;
 8001c48:	7038      	strb	r0, [r7, #0]
        return -1;
 8001c4a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001c4e:	b002      	add	sp, #8
 8001c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            mpu_reset_fifo();
 8001c54:	f7ff fac2 	bl	80011dc <mpu_reset_fifo>
            return -2;
 8001c58:	f06f 0001 	mvn.w	r0, #1
 8001c5c:	e7f1      	b.n	8001c42 <mpu_read_fifo_stream+0x7a>
 8001c5e:	bf00      	nop
 8001c60:	20000000 	.word	0x20000000

08001c64 <mpu_write_mem>:
    if (!data)
 8001c64:	b35a      	cbz	r2, 8001cbe <mpu_write_mem+0x5a>
{
 8001c66:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!st.chip_cfg.sensors)
 8001c68:	4c16      	ldr	r4, [pc, #88]	; (8001cc4 <mpu_write_mem+0x60>)
{
 8001c6a:	b083      	sub	sp, #12
    if (!st.chip_cfg.sensors)
 8001c6c:	7aa3      	ldrb	r3, [r4, #10]
 8001c6e:	b313      	cbz	r3, 8001cb6 <mpu_write_mem+0x52>
    if (tmp[1] + length > st.hw->bank_size)
 8001c70:	6867      	ldr	r7, [r4, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001c72:	b2c3      	uxtb	r3, r0
    if (tmp[1] + length > st.hw->bank_size)
 8001c74:	897d      	ldrh	r5, [r7, #10]
 8001c76:	185e      	adds	r6, r3, r1
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8001c78:	0a00      	lsrs	r0, r0, #8
    if (tmp[1] + length > st.hw->bank_size)
 8001c7a:	42ae      	cmp	r6, r5
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001c7c:	f88d 3005 	strb.w	r3, [sp, #5]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8001c80:	f88d 0004 	strb.w	r0, [sp, #4]
    if (tmp[1] + length > st.hw->bank_size)
 8001c84:	dc17      	bgt.n	8001cb6 <mpu_write_mem+0x52>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8001c86:	6823      	ldr	r3, [r4, #0]
 8001c88:	4615      	mov	r5, r2
 8001c8a:	460e      	mov	r6, r1
 8001c8c:	7838      	ldrb	r0, [r7, #0]
 8001c8e:	7ed9      	ldrb	r1, [r3, #27]
 8001c90:	2202      	movs	r2, #2
 8001c92:	ab01      	add	r3, sp, #4
 8001c94:	f002 ffbc 	bl	8004c10 <i2c_write>
 8001c98:	b968      	cbnz	r0, 8001cb6 <mpu_write_mem+0x52>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8001c9a:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001c9e:	462b      	mov	r3, r5
 8001ca0:	b2f2      	uxtb	r2, r6
 8001ca2:	7e09      	ldrb	r1, [r1, #24]
 8001ca4:	7800      	ldrb	r0, [r0, #0]
 8001ca6:	f002 ffb3 	bl	8004c10 <i2c_write>
 8001caa:	3000      	adds	r0, #0
 8001cac:	bf18      	it	ne
 8001cae:	2001      	movne	r0, #1
 8001cb0:	4240      	negs	r0, r0
}
 8001cb2:	b003      	add	sp, #12
 8001cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
 8001cb6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001cba:	b003      	add	sp, #12
 8001cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
 8001cbe:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001cc2:	4770      	bx	lr
 8001cc4:	20000000 	.word	0x20000000

08001cc8 <mpu_load_firmware>:
{
 8001cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (st.chip_cfg.dmp_loaded)
 8001ccc:	4d4f      	ldr	r5, [pc, #316]	; (8001e0c <mpu_load_firmware+0x144>)
{
 8001cce:	b08b      	sub	sp, #44	; 0x2c
    if (st.chip_cfg.dmp_loaded)
 8001cd0:	f895 4025 	ldrb.w	r4, [r5, #37]	; 0x25
 8001cd4:	2c00      	cmp	r4, #0
 8001cd6:	d172      	bne.n	8001dbe <mpu_load_firmware+0xf6>
    if (!firmware)
 8001cd8:	2900      	cmp	r1, #0
 8001cda:	d070      	beq.n	8001dbe <mpu_load_firmware+0xf6>
 8001cdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ce0:	9101      	str	r1, [sp, #4]
 8001ce2:	4681      	mov	r9, r0
    for (ii = 0; ii < length; ii += this_write) {
 8001ce4:	2800      	cmp	r0, #0
 8001ce6:	f000 808c 	beq.w	8001e02 <mpu_load_firmware+0x13a>
        this_write = min(LOAD_CHUNK, length - ii);
 8001cea:	2810      	cmp	r0, #16
 8001cec:	4606      	mov	r6, r0
 8001cee:	bfa8      	it	ge
 8001cf0:	2610      	movge	r6, #16
    if (!st.chip_cfg.sensors)
 8001cf2:	7aab      	ldrb	r3, [r5, #10]
        this_write = min(LOAD_CHUNK, length - ii);
 8001cf4:	fa1f fb86 	uxth.w	fp, r6
    if (!st.chip_cfg.sensors)
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d060      	beq.n	8001dbe <mpu_load_firmware+0xf6>
    if (tmp[1] + length > st.hw->bank_size)
 8001cfc:	6869      	ldr	r1, [r5, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8001cfe:	f8ad 4014 	strh.w	r4, [sp, #20]
    if (tmp[1] + length > st.hw->bank_size)
 8001d02:	894b      	ldrh	r3, [r1, #10]
 8001d04:	42b3      	cmp	r3, r6
 8001d06:	db5a      	blt.n	8001dbe <mpu_load_firmware+0xf6>
 8001d08:	9f01      	ldr	r7, [sp, #4]
 8001d0a:	f10d 0a14 	add.w	sl, sp, #20
 8001d0e:	e035      	b.n	8001d7c <mpu_load_firmware+0xb4>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8001d10:	682b      	ldr	r3, [r5, #0]
 8001d12:	7808      	ldrb	r0, [r1, #0]
 8001d14:	2202      	movs	r2, #2
 8001d16:	7ed9      	ldrb	r1, [r3, #27]
 8001d18:	4653      	mov	r3, sl
 8001d1a:	f002 ff79 	bl	8004c10 <i2c_write>
 8001d1e:	2800      	cmp	r0, #0
 8001d20:	d14d      	bne.n	8001dbe <mpu_load_firmware+0xf6>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8001d22:	e9d5 1300 	ldrd	r1, r3, [r5]
 8001d26:	4642      	mov	r2, r8
 8001d28:	7818      	ldrb	r0, [r3, #0]
 8001d2a:	7e09      	ldrb	r1, [r1, #24]
 8001d2c:	ab06      	add	r3, sp, #24
 8001d2e:	f002 ff7f 	bl	8004c30 <i2c_read>
 8001d32:	2800      	cmp	r0, #0
 8001d34:	d143      	bne.n	8001dbe <mpu_load_firmware+0xf6>
        if (memcmp(firmware+ii, cur, this_write))
 8001d36:	4632      	mov	r2, r6
 8001d38:	4638      	mov	r0, r7
 8001d3a:	a906      	add	r1, sp, #24
 8001d3c:	f007 fe48 	bl	80099d0 <memcmp>
 8001d40:	2800      	cmp	r0, #0
 8001d42:	d141      	bne.n	8001dc8 <mpu_load_firmware+0x100>
    for (ii = 0; ii < length; ii += this_write) {
 8001d44:	445c      	add	r4, fp
 8001d46:	b2a4      	uxth	r4, r4
 8001d48:	45a1      	cmp	r9, r4
 8001d4a:	d942      	bls.n	8001dd2 <mpu_load_firmware+0x10a>
        this_write = min(LOAD_CHUNK, length - ii);
 8001d4c:	eba9 0604 	sub.w	r6, r9, r4
 8001d50:	2e10      	cmp	r6, #16
 8001d52:	bfa8      	it	ge
 8001d54:	2610      	movge	r6, #16
    if (!data)
 8001d56:	9b01      	ldr	r3, [sp, #4]
        this_write = min(LOAD_CHUNK, length - ii);
 8001d58:	fa1f fb86 	uxth.w	fp, r6
    if (!data)
 8001d5c:	191f      	adds	r7, r3, r4
 8001d5e:	d02e      	beq.n	8001dbe <mpu_load_firmware+0xf6>
    if (!st.chip_cfg.sensors)
 8001d60:	7aab      	ldrb	r3, [r5, #10]
 8001d62:	b363      	cbz	r3, 8001dbe <mpu_load_firmware+0xf6>
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8001d64:	0a22      	lsrs	r2, r4, #8
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001d66:	b2e3      	uxtb	r3, r4
    if (tmp[1] + length > st.hw->bank_size)
 8001d68:	6869      	ldr	r1, [r5, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8001d6a:	f88d 2014 	strb.w	r2, [sp, #20]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001d6e:	f88d 3015 	strb.w	r3, [sp, #21]
    if (tmp[1] + length > st.hw->bank_size)
 8001d72:	8948      	ldrh	r0, [r1, #10]
 8001d74:	b2b2      	uxth	r2, r6
 8001d76:	4413      	add	r3, r2
 8001d78:	4283      	cmp	r3, r0
 8001d7a:	dc20      	bgt.n	8001dbe <mpu_load_firmware+0xf6>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8001d7c:	682b      	ldr	r3, [r5, #0]
 8001d7e:	7808      	ldrb	r0, [r1, #0]
 8001d80:	2202      	movs	r2, #2
 8001d82:	7ed9      	ldrb	r1, [r3, #27]
 8001d84:	4653      	mov	r3, sl
 8001d86:	f002 ff43 	bl	8004c10 <i2c_write>
 8001d8a:	b9c0      	cbnz	r0, 8001dbe <mpu_load_firmware+0xf6>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8001d8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001d90:	fa5f f886 	uxtb.w	r8, r6
 8001d94:	7e11      	ldrb	r1, [r2, #24]
 8001d96:	7818      	ldrb	r0, [r3, #0]
 8001d98:	4642      	mov	r2, r8
 8001d9a:	463b      	mov	r3, r7
 8001d9c:	f002 ff38 	bl	8004c10 <i2c_write>
 8001da0:	b968      	cbnz	r0, 8001dbe <mpu_load_firmware+0xf6>
    if (!st.chip_cfg.sensors)
 8001da2:	7aab      	ldrb	r3, [r5, #10]
 8001da4:	b15b      	cbz	r3, 8001dbe <mpu_load_firmware+0xf6>
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8001da6:	0a22      	lsrs	r2, r4, #8
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001da8:	b2e3      	uxtb	r3, r4
    if (tmp[1] + length > st.hw->bank_size)
 8001daa:	6869      	ldr	r1, [r5, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8001dac:	f88d 3015 	strb.w	r3, [sp, #21]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8001db0:	f88d 2014 	strb.w	r2, [sp, #20]
 8001db4:	b2b6      	uxth	r6, r6
    if (tmp[1] + length > st.hw->bank_size)
 8001db6:	894a      	ldrh	r2, [r1, #10]
 8001db8:	4433      	add	r3, r6
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	dda8      	ble.n	8001d10 <mpu_load_firmware+0x48>
            return -1;
 8001dbe:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001dc2:	b00b      	add	sp, #44	; 0x2c
 8001dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return -2;
 8001dc8:	f06f 0001 	mvn.w	r0, #1
}
 8001dcc:	b00b      	add	sp, #44	; 0x2c
 8001dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dd2:	9802      	ldr	r0, [sp, #8]
    tmp[0] = start_addr >> 8;
 8001dd4:	0a03      	lsrs	r3, r0, #8
 8001dd6:	f88d 3014 	strb.w	r3, [sp, #20]
    tmp[1] = start_addr & 0xFF;
 8001dda:	f88d 0015 	strb.w	r0, [sp, #21]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8001dde:	e9d5 1200 	ldrd	r1, r2, [r5]
 8001de2:	4653      	mov	r3, sl
 8001de4:	7810      	ldrb	r0, [r2, #0]
 8001de6:	7f49      	ldrb	r1, [r1, #29]
 8001de8:	2202      	movs	r2, #2
 8001dea:	f002 ff11 	bl	8004c10 <i2c_write>
 8001dee:	2800      	cmp	r0, #0
 8001df0:	d1e5      	bne.n	8001dbe <mpu_load_firmware+0xf6>
    st.chip_cfg.dmp_loaded = 1;
 8001df2:	2301      	movs	r3, #1
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8001df4:	9a03      	ldr	r2, [sp, #12]
    st.chip_cfg.dmp_loaded = 1;
 8001df6:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8001dfa:	84ea      	strh	r2, [r5, #38]	; 0x26
}
 8001dfc:	b00b      	add	sp, #44	; 0x2c
 8001dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e02:	f10d 0a14 	add.w	sl, sp, #20
 8001e06:	4610      	mov	r0, r2
 8001e08:	e7e4      	b.n	8001dd4 <mpu_load_firmware+0x10c>
 8001e0a:	bf00      	nop
 8001e0c:	20000000 	.word	0x20000000

08001e10 <mpu_set_dmp_state>:
{
 8001e10:	b570      	push	{r4, r5, r6, lr}
    if (st.chip_cfg.dmp_on == enable)
 8001e12:	4c6a      	ldr	r4, [pc, #424]	; (8001fbc <mpu_set_dmp_state+0x1ac>)
{
 8001e14:	b082      	sub	sp, #8
    if (st.chip_cfg.dmp_on == enable)
 8001e16:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8001e1a:	4282      	cmp	r2, r0
 8001e1c:	d066      	beq.n	8001eec <mpu_set_dmp_state+0xdc>
 8001e1e:	4603      	mov	r3, r0
    if (enable) {
 8001e20:	2800      	cmp	r0, #0
 8001e22:	d03c      	beq.n	8001e9e <mpu_set_dmp_state+0x8e>
        if (!st.chip_cfg.dmp_loaded)
 8001e24:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80c4 	beq.w	8001fb6 <mpu_set_dmp_state+0x1a6>
    if (st.chip_cfg.dmp_on) {
 8001e2e:	2a00      	cmp	r2, #0
 8001e30:	d05f      	beq.n	8001ef2 <mpu_set_dmp_state+0xe2>
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001e32:	e9d4 1200 	ldrd	r1, r2, [r4]
            tmp = 0x00;
 8001e36:	2300      	movs	r3, #0
 8001e38:	ad02      	add	r5, sp, #8
 8001e3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001e3e:	7810      	ldrb	r0, [r2, #0]
 8001e40:	462b      	mov	r3, r5
 8001e42:	7c49      	ldrb	r1, [r1, #17]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f002 fee3 	bl	8004c10 <i2c_write>
 8001e4a:	b910      	cbnz	r0, 8001e52 <mpu_set_dmp_state+0x42>
        st.chip_cfg.int_enable = tmp;
 8001e4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e50:	7463      	strb	r3, [r4, #17]
    if (st.chip_cfg.bypass_mode == bypass_on)
 8001e52:	7ca3      	ldrb	r3, [r4, #18]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d170      	bne.n	8001f3a <mpu_set_dmp_state+0x12a>
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8001e58:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8001e5a:	f7ff fb29 	bl	80014b0 <mpu_set_sample_rate>
        tmp = 0;
 8001e5e:	2100      	movs	r1, #0
 8001e60:	ab02      	add	r3, sp, #8
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001e62:	6862      	ldr	r2, [r4, #4]
        tmp = 0;
 8001e64:	f803 1d02 	strb.w	r1, [r3, #-2]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001e68:	7810      	ldrb	r0, [r2, #0]
 8001e6a:	2123      	movs	r1, #35	; 0x23
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f002 fecf 	bl	8004c10 <i2c_write>
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001e72:	e9d4 1000 	ldrd	r1, r0, [r4]
            tmp = BIT_DMP_INT_EN;
 8001e76:	2302      	movs	r3, #2
        st.chip_cfg.dmp_on = 1;
 8001e78:	2201      	movs	r2, #1
            tmp = BIT_DMP_INT_EN;
 8001e7a:	f88d 3007 	strb.w	r3, [sp, #7]
        st.chip_cfg.dmp_on = 1;
 8001e7e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001e82:	462b      	mov	r3, r5
 8001e84:	7c49      	ldrb	r1, [r1, #17]
 8001e86:	7800      	ldrb	r0, [r0, #0]
 8001e88:	f002 fec2 	bl	8004c10 <i2c_write>
 8001e8c:	b910      	cbnz	r0, 8001e94 <mpu_set_dmp_state+0x84>
        st.chip_cfg.int_enable = tmp;
 8001e8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e92:	7463      	strb	r3, [r4, #17]
        mpu_reset_fifo();
 8001e94:	f7ff f9a2 	bl	80011dc <mpu_reset_fifo>
    return 0;
 8001e98:	2000      	movs	r0, #0
}
 8001e9a:	b002      	add	sp, #8
 8001e9c:	bd70      	pop	{r4, r5, r6, pc}
 8001e9e:	6861      	ldr	r1, [r4, #4]
 8001ea0:	7808      	ldrb	r0, [r1, #0]
    if (st.chip_cfg.dmp_on) {
 8001ea2:	2a00      	cmp	r2, #0
 8001ea4:	d138      	bne.n	8001f18 <mpu_set_dmp_state+0x108>
        if (!st.chip_cfg.sensors)
 8001ea6:	7aa3      	ldrb	r3, [r4, #10]
 8001ea8:	f10d 0507 	add.w	r5, sp, #7
 8001eac:	b173      	cbz	r3, 8001ecc <mpu_set_dmp_state+0xbc>
            tmp = 0x00;
 8001eae:	ad02      	add	r5, sp, #8
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001eb0:	6821      	ldr	r1, [r4, #0]
            tmp = 0x00;
 8001eb2:	f805 2d01 	strb.w	r2, [r5, #-1]!
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001eb6:	462b      	mov	r3, r5
 8001eb8:	7c49      	ldrb	r1, [r1, #17]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f002 fea8 	bl	8004c10 <i2c_write>
 8001ec0:	b910      	cbnz	r0, 8001ec8 <mpu_set_dmp_state+0xb8>
        st.chip_cfg.int_enable = tmp;
 8001ec2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ec6:	7463      	strb	r3, [r4, #17]
 8001ec8:	6863      	ldr	r3, [r4, #4]
 8001eca:	7818      	ldrb	r0, [r3, #0]
        st.chip_cfg.dmp_on = 0;
 8001ecc:	2600      	movs	r6, #0
        tmp = st.chip_cfg.fifo_enable;
 8001ece:	7c21      	ldrb	r1, [r4, #16]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001ed0:	462b      	mov	r3, r5
 8001ed2:	2201      	movs	r2, #1
        tmp = st.chip_cfg.fifo_enable;
 8001ed4:	f88d 1007 	strb.w	r1, [sp, #7]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8001ed8:	2123      	movs	r1, #35	; 0x23
 8001eda:	f002 fe99 	bl	8004c10 <i2c_write>
        st.chip_cfg.dmp_on = 0;
 8001ede:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
        mpu_reset_fifo();
 8001ee2:	f7ff f97b 	bl	80011dc <mpu_reset_fifo>
 8001ee6:	4630      	mov	r0, r6
}
 8001ee8:	b002      	add	sp, #8
 8001eea:	bd70      	pop	{r4, r5, r6, pc}
        return 0;
 8001eec:	2000      	movs	r0, #0
}
 8001eee:	b002      	add	sp, #8
 8001ef0:	bd70      	pop	{r4, r5, r6, pc}
        if (!st.chip_cfg.sensors)
 8001ef2:	7aa3      	ldrb	r3, [r4, #10]
 8001ef4:	f10d 0507 	add.w	r5, sp, #7
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0aa      	beq.n	8001e52 <mpu_set_dmp_state+0x42>
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001efc:	e9d4 1000 	ldrd	r1, r0, [r4]
            tmp = 0x00;
 8001f00:	ad02      	add	r5, sp, #8
 8001f02:	f805 2d01 	strb.w	r2, [r5, #-1]!
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001f06:	462b      	mov	r3, r5
 8001f08:	7c49      	ldrb	r1, [r1, #17]
 8001f0a:	7800      	ldrb	r0, [r0, #0]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f002 fe7f 	bl	8004c10 <i2c_write>
 8001f12:	2800      	cmp	r0, #0
 8001f14:	d09a      	beq.n	8001e4c <mpu_set_dmp_state+0x3c>
 8001f16:	e79c      	b.n	8001e52 <mpu_set_dmp_state+0x42>
            tmp = 0x00;
 8001f18:	ad02      	add	r5, sp, #8
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001f1a:	6822      	ldr	r2, [r4, #0]
            tmp = 0x00;
 8001f1c:	f805 3d01 	strb.w	r3, [r5, #-1]!
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001f20:	7c51      	ldrb	r1, [r2, #17]
 8001f22:	462b      	mov	r3, r5
 8001f24:	2201      	movs	r2, #1
 8001f26:	f002 fe73 	bl	8004c10 <i2c_write>
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	d1cc      	bne.n	8001ec8 <mpu_set_dmp_state+0xb8>
        st.chip_cfg.int_enable = tmp;
 8001f2e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001f32:	6863      	ldr	r3, [r4, #4]
 8001f34:	7462      	strb	r2, [r4, #17]
 8001f36:	7818      	ldrb	r0, [r3, #0]
 8001f38:	e7c8      	b.n	8001ecc <mpu_set_dmp_state+0xbc>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001f3a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001f3e:	7911      	ldrb	r1, [r2, #4]
 8001f40:	7818      	ldrb	r0, [r3, #0]
 8001f42:	2201      	movs	r2, #1
 8001f44:	462b      	mov	r3, r5
 8001f46:	f002 fe73 	bl	8004c30 <i2c_read>
 8001f4a:	2800      	cmp	r0, #0
 8001f4c:	d184      	bne.n	8001e58 <mpu_set_dmp_state+0x48>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8001f4e:	7aa2      	ldrb	r2, [r4, #10]
 8001f50:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001f54:	07d2      	lsls	r2, r2, #31
            tmp |= BIT_AUX_IF_EN;
 8001f56:	bf4c      	ite	mi
 8001f58:	f043 0320 	orrmi.w	r3, r3, #32
            tmp &= ~BIT_AUX_IF_EN;
 8001f5c:	f003 03df 	andpl.w	r3, r3, #223	; 0xdf
 8001f60:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8001f64:	e9d4 1200 	ldrd	r1, r2, [r4]
 8001f68:	462b      	mov	r3, r5
 8001f6a:	7810      	ldrb	r0, [r2, #0]
 8001f6c:	7909      	ldrb	r1, [r1, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f002 fe4e 	bl	8004c10 <i2c_write>
 8001f74:	2800      	cmp	r0, #0
 8001f76:	f47f af6f 	bne.w	8001e58 <mpu_set_dmp_state+0x48>
        delay_ms(3);
 8001f7a:	2003      	movs	r0, #3
 8001f7c:	f002 fe68 	bl	8004c50 <delay_ms>
        if (st.chip_cfg.active_low_int)
 8001f80:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001f84:	b1ab      	cbz	r3, 8001fb2 <mpu_set_dmp_state+0x1a2>
 8001f86:	21b0      	movs	r1, #176	; 0xb0
            tmp = BIT_ACTL;
 8001f88:	2380      	movs	r3, #128	; 0x80
        if (st.chip_cfg.latched_int)
 8001f8a:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8001f8e:	f88d 3007 	strb.w	r3, [sp, #7]
 8001f92:	b10a      	cbz	r2, 8001f98 <mpu_set_dmp_state+0x188>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8001f94:	f88d 1007 	strb.w	r1, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8001f98:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001f9c:	7dd1      	ldrb	r1, [r2, #23]
 8001f9e:	7818      	ldrb	r0, [r3, #0]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	462b      	mov	r3, r5
 8001fa4:	f002 fe34 	bl	8004c10 <i2c_write>
 8001fa8:	2800      	cmp	r0, #0
 8001faa:	f47f af55 	bne.w	8001e58 <mpu_set_dmp_state+0x48>
    st.chip_cfg.bypass_mode = bypass_on;
 8001fae:	74a0      	strb	r0, [r4, #18]
 8001fb0:	e752      	b.n	8001e58 <mpu_set_dmp_state+0x48>
        if (st.chip_cfg.active_low_int)
 8001fb2:	2130      	movs	r1, #48	; 0x30
 8001fb4:	e7e9      	b.n	8001f8a <mpu_set_dmp_state+0x17a>
            return -1;
 8001fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8001fba:	e76e      	b.n	8001e9a <mpu_set_dmp_state+0x8a>
 8001fbc:	20000000 	.word	0x20000000

08001fc0 <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
 8001fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8001fc2:	4e2b      	ldr	r6, [pc, #172]	; (8002070 <mpu_get_compass_reg+0xb0>)
{
 8001fc4:	b085      	sub	sp, #20
    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8001fc6:	7ab3      	ldrb	r3, [r6, #10]
 8001fc8:	07db      	lsls	r3, r3, #31
 8001fca:	d548      	bpl.n	800205e <mpu_get_compass_reg+0x9e>
        return -1;
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
 8001fcc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8001fd0:	460d      	mov	r5, r1
 8001fd2:	4604      	mov	r4, r0
 8001fd4:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
 8001fd8:	7818      	ldrb	r0, [r3, #0]
 8001fda:	2208      	movs	r2, #8
 8001fdc:	ab01      	add	r3, sp, #4
 8001fde:	f002 fe27 	bl	8004c30 <i2c_read>
 8001fe2:	4607      	mov	r7, r0
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	d13a      	bne.n	800205e <mpu_get_compass_reg+0x9e>
        return -2;
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
 8001fe8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d137      	bne.n	8002064 <mpu_get_compass_reg+0xa4>
        return -2;
    if (tmp[7] & AKM_OVERFLOW)
 8001ff4:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	db36      	blt.n	800206a <mpu_get_compass_reg+0xaa>
        return -3;
#endif
    data[0] = (tmp[2] << 8) | tmp[1];
 8001ffc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002000:	f89d 1005 	ldrb.w	r1, [sp, #5]
    data[1] = (tmp[4] << 8) | tmp[3];
    data[2] = (tmp[6] << 8) | tmp[5];
 8002004:	f89d 000a 	ldrb.w	r0, [sp, #10]
    data[0] = (tmp[2] << 8) | tmp[1];
 8002008:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
    data[1] = (tmp[4] << 8) | tmp[3];
 800200c:	f89d c008 	ldrb.w	ip, [sp, #8]
 8002010:	f89d 2007 	ldrb.w	r2, [sp, #7]
    data[2] = (tmp[6] << 8) | tmp[5];
 8002014:	f89d 3009 	ldrb.w	r3, [sp, #9]
    data[1] = (tmp[4] << 8) | tmp[3];
 8002018:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    data[2] = (tmp[6] << 8) | tmp[5];
 800201c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    data[0] = (tmp[2] << 8) | tmp[1];
 8002020:	b209      	sxth	r1, r1
    data[1] = (tmp[4] << 8) | tmp[3];
 8002022:	b212      	sxth	r2, r2
    data[2] = (tmp[6] << 8) | tmp[5];
 8002024:	b21b      	sxth	r3, r3
    data[0] = (tmp[2] << 8) | tmp[1];
 8002026:	8021      	strh	r1, [r4, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
 8002028:	8062      	strh	r2, [r4, #2]
    data[2] = (tmp[6] << 8) | tmp[5];
 800202a:	80a3      	strh	r3, [r4, #4]

    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
 800202c:	f9b6 002c 	ldrsh.w	r0, [r6, #44]	; 0x2c
 8002030:	fb01 f100 	mul.w	r1, r1, r0
 8002034:	1209      	asrs	r1, r1, #8
 8002036:	8021      	strh	r1, [r4, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
 8002038:	f9b6 102e 	ldrsh.w	r1, [r6, #46]	; 0x2e
 800203c:	fb02 f201 	mul.w	r2, r2, r1
 8002040:	1212      	asrs	r2, r2, #8
 8002042:	8062      	strh	r2, [r4, #2]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
 8002044:	f9b6 2030 	ldrsh.w	r2, [r6, #48]	; 0x30
 8002048:	fb03 f302 	mul.w	r3, r3, r2
 800204c:	121b      	asrs	r3, r3, #8
 800204e:	80a3      	strh	r3, [r4, #4]

    if (timestamp)
 8002050:	b115      	cbz	r5, 8002058 <mpu_get_compass_reg+0x98>
        get_ms(timestamp);
 8002052:	4628      	mov	r0, r5
 8002054:	f002 fdfe 	bl	8004c54 <get_ms>
    return 0;
#else
    return -1;
#endif
}
 8002058:	4638      	mov	r0, r7
 800205a:	b005      	add	sp, #20
 800205c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
 800205e:	f04f 37ff 	mov.w	r7, #4294967295
 8002062:	e7f9      	b.n	8002058 <mpu_get_compass_reg+0x98>
        return -2;
 8002064:	f06f 0701 	mvn.w	r7, #1
 8002068:	e7f6      	b.n	8002058 <mpu_get_compass_reg+0x98>
        return -3;
 800206a:	f06f 0702 	mvn.w	r7, #2
 800206e:	e7f3      	b.n	8002058 <mpu_get_compass_reg+0x98>
 8002070:	20000000 	.word	0x20000000

08002074 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 8002074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8002078:	4b59      	ldr	r3, [pc, #356]	; (80021e0 <dmp_enable_feature+0x16c>)
{
 800207a:	b087      	sub	sp, #28
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 800207c:	ad06      	add	r5, sp, #24
 800207e:	f845 3d0c 	str.w	r3, [r5, #-12]!
{
 8002082:	4604      	mov	r4, r0
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
    mpu_write_mem(D_0_104, 4, tmp);
 8002084:	462a      	mov	r2, r5
 8002086:	2104      	movs	r1, #4
 8002088:	2068      	movs	r0, #104	; 0x68
 800208a:	f7ff fdeb 	bl	8001c64 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 800208e:	23a3      	movs	r3, #163	; 0xa3
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8002090:	f014 0840 	ands.w	r8, r4, #64	; 0x40
    tmp[0] = 0xA3;
 8002094:	f88d 300c 	strb.w	r3, [sp, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8002098:	f000 809b 	beq.w	80021d2 <dmp_enable_feature+0x15e>
        tmp[1] = 0xC0;
 800209c:	21c0      	movs	r1, #192	; 0xc0
        tmp[2] = 0xC8;
 800209e:	22c8      	movs	r2, #200	; 0xc8
        tmp[3] = 0xC2;
 80020a0:	23c2      	movs	r3, #194	; 0xc2
        tmp[1] = 0xC0;
 80020a2:	f88d 100d 	strb.w	r1, [sp, #13]
        tmp[2] = 0xC8;
 80020a6:	f88d 200e 	strb.w	r2, [sp, #14]
        tmp[3] = 0xC2;
 80020aa:	f88d 300f 	strb.w	r3, [sp, #15]
    } else {
        tmp[1] = 0xA3;
        tmp[2] = 0xA3;
        tmp[3] = 0xA3;
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80020ae:	f414 77c0 	ands.w	r7, r4, #384	; 0x180
        tmp[4] = 0xC4;
        tmp[5] = 0xCC;
 80020b2:	bf15      	itete	ne
 80020b4:	23c6      	movne	r3, #198	; 0xc6
        tmp[6] = 0xC6;
    } else {
        tmp[4] = 0xA3;
        tmp[5] = 0xA3;
 80020b6:	23a3      	moveq	r3, #163	; 0xa3
        tmp[4] = 0xC4;
 80020b8:	f64c 42c4 	movwne	r2, #52420	; 0xccc4
        tmp[4] = 0xA3;
 80020bc:	f24a 32a3 	movweq	r2, #41891	; 0xa3a3
        tmp[5] = 0xA3;
 80020c0:	f88d 3012 	strb.w	r3, [sp, #18]
        tmp[6] = 0xA3;
    }
    tmp[7] = 0xA3;
 80020c4:	23a3      	movs	r3, #163	; 0xa3
        tmp[4] = 0xA3;
 80020c6:	f8ad 2010 	strh.w	r2, [sp, #16]
    tmp[8] = 0xA3;
    tmp[9] = 0xA3;
    mpu_write_mem(CFG_15,10,tmp);
 80020ca:	210a      	movs	r1, #10
 80020cc:	462a      	mov	r2, r5
 80020ce:	f640 20a7 	movw	r0, #2727	; 0xaa7
    tmp[7] = 0xA3;
 80020d2:	f88d 3013 	strb.w	r3, [sp, #19]
    tmp[8] = 0xA3;
 80020d6:	f88d 3014 	strb.w	r3, [sp, #20]
    tmp[9] = 0xA3;
 80020da:	f88d 3015 	strb.w	r3, [sp, #21]
    mpu_write_mem(CFG_15,10,tmp);
 80020de:	f7ff fdc1 	bl	8001c64 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
        tmp[0] = DINA20;
    else
        tmp[0] = 0xD8;
 80020e2:	f014 0903 	ands.w	r9, r4, #3
 80020e6:	bf14      	ite	ne
 80020e8:	2320      	movne	r3, #32
 80020ea:	23d8      	moveq	r3, #216	; 0xd8
    mpu_write_mem(CFG_27,1,tmp);
 80020ec:	462a      	mov	r2, r5
 80020ee:	2101      	movs	r1, #1
 80020f0:	f640 20b6 	movw	r0, #2742	; 0xab6
 80020f4:	f88d 300c 	strb.w	r3, [sp, #12]
 80020f8:	f7ff fdb4 	bl	8001c64 <mpu_write_mem>
{
    if (enable) {
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 80020fc:	466b      	mov	r3, sp
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80020fe:	466e      	mov	r6, sp
    if (mask & DMP_FEATURE_GYRO_CAL)
 8002100:	06a0      	lsls	r0, r4, #26
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8002102:	bf4c      	ite	mi
 8002104:	4a37      	ldrmi	r2, [pc, #220]	; (80021e4 <dmp_enable_feature+0x170>)
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8002106:	4a38      	ldrpl	r2, [pc, #224]	; (80021e8 <dmp_enable_feature+0x174>)
 8002108:	ca07      	ldmia	r2, {r0, r1, r2}
 800210a:	c303      	stmia	r3!, {r0, r1}
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800210c:	2109      	movs	r1, #9
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 800210e:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8002110:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8002114:	4632      	mov	r2, r6
 8002116:	f7ff fda5 	bl	8001c64 <mpu_write_mem>
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800211a:	b157      	cbz	r7, 8002132 <dmp_enable_feature+0xbe>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 800211c:	05e1      	lsls	r1, r4, #23
            tmp[0] = 0xB2;
 800211e:	bf4c      	ite	mi
 8002120:	4b32      	ldrmi	r3, [pc, #200]	; (80021ec <dmp_enable_feature+0x178>)
            tmp[0] = DINAC0;
 8002122:	4b33      	ldrpl	r3, [pc, #204]	; (80021f0 <dmp_enable_feature+0x17c>)
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8002124:	462a      	mov	r2, r5
 8002126:	2104      	movs	r1, #4
 8002128:	f640 20a2 	movw	r0, #2722	; 0xaa2
            tmp[0] = DINAC0;
 800212c:	9303      	str	r3, [sp, #12]
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 800212e:	f7ff fd99 	bl	8001c64 <mpu_write_mem>
    if (mask & DMP_FEATURE_LP_QUAT)
 8002132:	0762      	lsls	r2, r4, #29
        regs[1] = DINBC2;
        regs[2] = DINBC4;
        regs[3] = DINBC6;
    }
    else
        memset(regs, 0x8B, 4);
 8002134:	bf54      	ite	pl
 8002136:	f04f 338b 	movpl.w	r3, #2341178251	; 0x8b8b8b8b
        regs[0] = DINBC0;
 800213a:	4b2e      	ldrmi	r3, [pc, #184]	; (80021f4 <dmp_enable_feature+0x180>)

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 800213c:	4632      	mov	r2, r6
 800213e:	2104      	movs	r1, #4
 8002140:	f640 2098 	movw	r0, #2712	; 0xa98
        memset(regs, 0x8B, 4);
 8002144:	9300      	str	r3, [sp, #0]
    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8002146:	f7ff fd8d 	bl	8001c64 <mpu_write_mem>

    return mpu_reset_fifo();
 800214a:	f7ff f847 	bl	80011dc <mpu_reset_fifo>
    if (mask & DMP_FEATURE_6X_LP_QUAT)
 800214e:	06e3      	lsls	r3, r4, #27
        regs[0] = DINA20;
        regs[1] = DINA28;
        regs[2] = DINA30;
        regs[3] = DINA38;
    } else
        memset(regs, 0xA3, 4);
 8002150:	bf54      	ite	pl
 8002152:	f04f 33a3 	movpl.w	r3, #2745410467	; 0xa3a3a3a3
        regs[0] = DINA20;
 8002156:	4b28      	ldrmi	r3, [pc, #160]	; (80021f8 <dmp_enable_feature+0x184>)

    mpu_write_mem(CFG_8, 4, regs);
 8002158:	4632      	mov	r2, r6
 800215a:	2104      	movs	r1, #4
 800215c:	f640 209e 	movw	r0, #2718	; 0xa9e
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8002160:	4d26      	ldr	r5, [pc, #152]	; (80021fc <dmp_enable_feature+0x188>)
        memset(regs, 0xA3, 4);
 8002162:	9300      	str	r3, [sp, #0]
    mpu_write_mem(CFG_8, 4, regs);
 8002164:	f7ff fd7e 	bl	8001c64 <mpu_write_mem>

    return mpu_reset_fifo();
 8002168:	f7ff f838 	bl	80011dc <mpu_reset_fifo>
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 800216c:	f044 0308 	orr.w	r3, r4, #8
 8002170:	816b      	strh	r3, [r5, #10]
    mpu_reset_fifo();
 8002172:	f7ff f833 	bl	80011dc <mpu_reset_fifo>
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8002176:	f1b8 0f00 	cmp.w	r8, #0
 800217a:	d11c      	bne.n	80021b6 <dmp_enable_feature+0x142>
    dmp.packet_length = 0;
 800217c:	2304      	movs	r3, #4
 800217e:	2114      	movs	r1, #20
 8002180:	2210      	movs	r2, #16
 8002182:	f04f 0e0a 	mov.w	lr, #10
 8002186:	f04f 0c1a 	mov.w	ip, #26
 800218a:	2616      	movs	r6, #22
 800218c:	2006      	movs	r0, #6
 800218e:	f885 800e 	strb.w	r8, [r5, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8002192:	b11f      	cbz	r7, 800219c <dmp_enable_feature+0x128>
        dmp.packet_length += 6;
 8002194:	4673      	mov	r3, lr
 8002196:	4661      	mov	r1, ip
 8002198:	4632      	mov	r2, r6
 800219a:	73a8      	strb	r0, [r5, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 800219c:	f014 0f14 	tst.w	r4, #20
        dmp.packet_length += 16;
 80021a0:	bf1c      	itt	ne
 80021a2:	460b      	movne	r3, r1
 80021a4:	73aa      	strbne	r2, [r5, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80021a6:	f1b9 0f00 	cmp.w	r9, #0
 80021aa:	d000      	beq.n	80021ae <dmp_enable_feature+0x13a>
        dmp.packet_length += 4;
 80021ac:	73ab      	strb	r3, [r5, #14]
}
 80021ae:	2000      	movs	r0, #0
 80021b0:	b007      	add	sp, #28
 80021b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        dmp.packet_length += 6;
 80021b6:	f04f 0806 	mov.w	r8, #6
 80021ba:	230a      	movs	r3, #10
 80021bc:	211a      	movs	r1, #26
 80021be:	2216      	movs	r2, #22
 80021c0:	f04f 0e10 	mov.w	lr, #16
 80021c4:	f04f 0c20 	mov.w	ip, #32
 80021c8:	261c      	movs	r6, #28
 80021ca:	200c      	movs	r0, #12
 80021cc:	f885 800e 	strb.w	r8, [r5, #14]
 80021d0:	e7df      	b.n	8002192 <dmp_enable_feature+0x11e>
        tmp[1] = 0xA3;
 80021d2:	f88d 300d 	strb.w	r3, [sp, #13]
        tmp[2] = 0xA3;
 80021d6:	f88d 300e 	strb.w	r3, [sp, #14]
        tmp[3] = 0xA3;
 80021da:	f88d 300f 	strb.w	r3, [sp, #15]
 80021de:	e766      	b.n	80020ae <dmp_enable_feature+0x3a>
 80021e0:	09e3ca02 	.word	0x09e3ca02
 80021e4:	0800d6fc 	.word	0x0800d6fc
 80021e8:	0800d708 	.word	0x0800d708
 80021ec:	9bb68bb2 	.word	0x9bb68bb2
 80021f0:	90b480b0 	.word	0x90b480b0
 80021f4:	c6c4c2c0 	.word	0xc6c4c2c0
 80021f8:	38302820 	.word	0x38302820
 80021fc:	200003a4 	.word	0x200003a4

08002200 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 8002200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned char ii = 0;

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 8002204:	2500      	movs	r5, #0
{
 8002206:	b095      	sub	sp, #84	; 0x54
 8002208:	9c1e      	ldr	r4, [sp, #120]	; 0x78

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 800220a:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80023d0 <dmp_read_fifo+0x1d0>
{
 800220e:	4681      	mov	r9, r0
 8002210:	460f      	mov	r7, r1
 8002212:	4616      	mov	r6, r2
    sensors[0] = 0;
 8002214:	8025      	strh	r5, [r4, #0]
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8002216:	f898 000e 	ldrb.w	r0, [r8, #14]
 800221a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800221c:	a90c      	add	r1, sp, #48	; 0x30
{
 800221e:	9305      	str	r3, [sp, #20]
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8002220:	f7ff fcd2 	bl	8001bc8 <mpu_read_fifo_stream>
 8002224:	2800      	cmp	r0, #0
 8002226:	f040 80c9 	bne.w	80023bc <dmp_read_fifo+0x1bc>
        return -1;

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 800222a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800222e:	4605      	mov	r5, r0
 8002230:	f013 0f14 	tst.w	r3, #20
 8002234:	f040 8086 	bne.w	8002344 <dmp_read_fifo+0x144>
 8002238:	2208      	movs	r2, #8
 800223a:	2105      	movs	r1, #5
 800223c:	9206      	str	r2, [sp, #24]
 800223e:	2204      	movs	r2, #4
 8002240:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8002244:	2203      	movs	r2, #3
 8002246:	9001      	str	r0, [sp, #4]
 8002248:	f04f 0a0b 	mov.w	sl, #11
 800224c:	f04f 0c0a 	mov.w	ip, #10
 8002250:	f04f 0b09 	mov.w	fp, #9
 8002254:	f04f 0807 	mov.w	r8, #7
 8002258:	f04f 0e06 	mov.w	lr, #6
 800225c:	2102      	movs	r1, #2
 800225e:	2001      	movs	r0, #1
 8002260:	9202      	str	r2, [sp, #8]
        }
        sensors[0] |= INV_WXYZ_QUAT;
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8002262:	065a      	lsls	r2, r3, #25
 8002264:	d53a      	bpl.n	80022dc <dmp_read_fifo+0xdc>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8002266:	9a01      	ldr	r2, [sp, #4]
 8002268:	ae14      	add	r6, sp, #80	; 0x50
 800226a:	4416      	add	r6, r2
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800226c:	9a02      	ldr	r2, [sp, #8]
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 800226e:	9607      	str	r6, [sp, #28]
 8002270:	ae14      	add	r6, sp, #80	; 0x50
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8002272:	1871      	adds	r1, r6, r1
 8002274:	4432      	add	r2, r6
 8002276:	9109      	str	r1, [sp, #36]	; 0x24
 8002278:	920a      	str	r2, [sp, #40]	; 0x28
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 800227a:	9904      	ldr	r1, [sp, #16]
 800227c:	9a03      	ldr	r2, [sp, #12]
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 800227e:	1830      	adds	r0, r6, r0
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8002280:	4432      	add	r2, r6
 8002282:	4431      	add	r1, r6
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8002284:	9e07      	ldr	r6, [sp, #28]
 8002286:	9008      	str	r0, [sp, #32]
        ii += 6;
        sensors[0] |= INV_XYZ_ACCEL;
 8002288:	f8cd b008 	str.w	fp, [sp, #8]
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 800228c:	f816 bc20 	ldrb.w	fp, [r6, #-32]
 8002290:	9e08      	ldr	r6, [sp, #32]
        sensors[0] |= INV_XYZ_ACCEL;
 8002292:	4640      	mov	r0, r8
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8002294:	f816 8c20 	ldrb.w	r8, [r6, #-32]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8002298:	9e09      	ldr	r6, [sp, #36]	; 0x24
        sensors[0] |= INV_XYZ_ACCEL;
 800229a:	e9cd ca03 	strd	ip, sl, [sp, #12]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800229e:	f816 ac20 	ldrb.w	sl, [r6, #-32]
 80022a2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
        sensors[0] |= INV_XYZ_ACCEL;
 80022a4:	f8cd e004 	str.w	lr, [sp, #4]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80022a8:	f816 ec20 	ldrb.w	lr, [r6, #-32]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80022ac:	f812 6c20 	ldrb.w	r6, [r2, #-32]
 80022b0:	910b      	str	r1, [sp, #44]	; 0x2c
 80022b2:	4632      	mov	r2, r6
 80022b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80022b6:	ea48 280b 	orr.w	r8, r8, fp, lsl #8
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80022ba:	f816 cc20 	ldrb.w	ip, [r6, #-32]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80022be:	ea4e 2e0a 	orr.w	lr, lr, sl, lsl #8
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80022c2:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80022c6:	f8a7 8000 	strh.w	r8, [r7]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80022ca:	f8a7 e002 	strh.w	lr, [r7, #2]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80022ce:	f8a7 c004 	strh.w	ip, [r7, #4]
        sensors[0] |= INV_XYZ_ACCEL;
 80022d2:	8827      	ldrh	r7, [r4, #0]
 80022d4:	9906      	ldr	r1, [sp, #24]
 80022d6:	f047 0708 	orr.w	r7, r7, #8
 80022da:	8027      	strh	r7, [r4, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80022dc:	f413 7fc0 	tst.w	r3, #384	; 0x180
 80022e0:	d029      	beq.n	8002336 <dmp_read_fifo+0x136>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80022e2:	9e01      	ldr	r6, [sp, #4]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80022e4:	9a02      	ldr	r2, [sp, #8]
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80022e6:	ab14      	add	r3, sp, #80	; 0x50
 80022e8:	441e      	add	r6, r3
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80022ea:	eb03 0c01 	add.w	ip, r3, r1
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80022ee:	4418      	add	r0, r3
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80022f0:	441a      	add	r2, r3
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80022f2:	9b03      	ldr	r3, [sp, #12]
 80022f4:	a914      	add	r1, sp, #80	; 0x50
 80022f6:	440b      	add	r3, r1
 80022f8:	461f      	mov	r7, r3
 80022fa:	9b04      	ldr	r3, [sp, #16]
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80022fc:	f810 0c20 	ldrb.w	r0, [r0, #-32]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8002300:	440b      	add	r3, r1
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8002302:	f81c cc20 	ldrb.w	ip, [ip, #-32]
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8002306:	f816 1c20 	ldrb.w	r1, [r6, #-32]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800230a:	f812 2c20 	ldrb.w	r2, [r2, #-32]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 800230e:	f817 6c20 	ldrb.w	r6, [r7, #-32]
 8002312:	f813 3c20 	ldrb.w	r3, [r3, #-32]
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8002316:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 800231a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800231e:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8002322:	f8a9 1000 	strh.w	r1, [r9]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8002326:	f8a9 2002 	strh.w	r2, [r9, #2]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 800232a:	f8a9 3004 	strh.w	r3, [r9, #4]
        ii += 6;
        sensors[0] |= INV_XYZ_GYRO;
 800232e:	8823      	ldrh	r3, [r4, #0]
 8002330:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002334:	8023      	strh	r3, [r4, #0]
    }

    get_ms(timestamp);
 8002336:	9805      	ldr	r0, [sp, #20]
 8002338:	f002 fc8c 	bl	8004c54 <get_ms>
    return 0;
}
 800233c:	4628      	mov	r0, r5
 800233e:	b015      	add	sp, #84	; 0x54
 8002340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002344:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
 8002348:	ba09      	rev	r1, r1
        quat_q14[1] = quat[1] >> 16;
 800234a:	ea4f 4c21 	mov.w	ip, r1, asr #16
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800234e:	fb0c f00c 	mul.w	r0, ip, ip
 8002352:	fa92 fe82 	rev.w	lr, r2
        quat_q14[0] = quat[0] >> 16;
 8002356:	ea4f 4c2e 	mov.w	ip, lr, asr #16
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800235a:	fb0c 0c0c 	mla	ip, ip, ip, r0
 800235e:	980e      	ldr	r0, [sp, #56]	; 0x38
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8002360:	6071      	str	r1, [r6, #4]
 8002362:	ba00      	rev	r0, r0
        quat_q14[2] = quat[2] >> 16;
 8002364:	1402      	asrs	r2, r0, #16
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8002366:	fb02 cc02 	mla	ip, r2, r2, ip
 800236a:	990f      	ldr	r1, [sp, #60]	; 0x3c
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800236c:	f8c6 e000 	str.w	lr, [r6]
 8002370:	ba09      	rev	r1, r1
        quat_q14[3] = quat[3] >> 16;
 8002372:	140a      	asrs	r2, r1, #16
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8002374:	fb02 c202 	mla	r2, r2, r2, ip
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 8002378:	f102 4271 	add.w	r2, r2, #4043309056	; 0xf1000000
 800237c:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8002380:	e9c6 0102 	strd	r0, r1, [r6, #8]
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 8002384:	d81d      	bhi.n	80023c2 <dmp_read_fifo+0x1c2>
        sensors[0] |= INV_WXYZ_QUAT;
 8002386:	8822      	ldrh	r2, [r4, #0]
 8002388:	2015      	movs	r0, #21
 800238a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800238e:	8022      	strh	r2, [r4, #0]
 8002390:	2218      	movs	r2, #24
 8002392:	9206      	str	r2, [sp, #24]
 8002394:	2214      	movs	r2, #20
 8002396:	e9cd 2003 	strd	r2, r0, [sp, #12]
 800239a:	2213      	movs	r2, #19
 800239c:	9202      	str	r2, [sp, #8]
 800239e:	2210      	movs	r2, #16
 80023a0:	f04f 0a1b 	mov.w	sl, #27
 80023a4:	f04f 0c1a 	mov.w	ip, #26
 80023a8:	f04f 0b19 	mov.w	fp, #25
 80023ac:	f04f 0817 	mov.w	r8, #23
 80023b0:	f04f 0e16 	mov.w	lr, #22
 80023b4:	2112      	movs	r1, #18
 80023b6:	2011      	movs	r0, #17
 80023b8:	9201      	str	r2, [sp, #4]
 80023ba:	e752      	b.n	8002262 <dmp_read_fifo+0x62>
        return -1;
 80023bc:	f04f 35ff 	mov.w	r5, #4294967295
 80023c0:	e7bc      	b.n	800233c <dmp_read_fifo+0x13c>
            mpu_reset_fifo();
 80023c2:	f7fe ff0b 	bl	80011dc <mpu_reset_fifo>
            sensors[0] = 0;
 80023c6:	8025      	strh	r5, [r4, #0]
            return -1;
 80023c8:	f04f 35ff 	mov.w	r5, #4294967295
 80023cc:	e7b6      	b.n	800233c <dmp_read_fifo+0x13c>
 80023ce:	bf00      	nop
 80023d0:	200003a4 	.word	0x200003a4

080023d4 <DMP_Init>:

int DMP_Init(void){
 80023d4:	b530      	push	{r4, r5, lr}
 80023d6:	b087      	sub	sp, #28

	struct int_param_s interrupt_config;//empty

	if (mpu_init(&interrupt_config)){
 80023d8:	4668      	mov	r0, sp
 80023da:	f7ff fa23 	bl	8001824 <mpu_init>
 80023de:	b110      	cbz	r0, 80023e6 <DMP_Init+0x12>
		return 1;
 80023e0:	2001      	movs	r0, #1
	if (mpu_set_dmp_state(1)){
		return 8;
	}

	return 0;
}
 80023e2:	b007      	add	sp, #28
 80023e4:	bd30      	pop	{r4, r5, pc}
	if (mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS)){
 80023e6:	2079      	movs	r0, #121	; 0x79
 80023e8:	f7ff f92a 	bl	8001640 <mpu_set_sensors>
 80023ec:	2800      	cmp	r0, #0
 80023ee:	d16d      	bne.n	80024cc <DMP_Init+0xf8>
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 80023f0:	23c8      	movs	r3, #200	; 0xc8
 80023f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023f6:	493b      	ldr	r1, [pc, #236]	; (80024e4 <DMP_Init+0x110>)
 80023f8:	f640 30f6 	movw	r0, #3062	; 0xbf6
 80023fc:	f7ff fc64 	bl	8001cc8 <mpu_load_firmware>
	if(dmp_load_motion_driver_firmware()){
 8002400:	2800      	cmp	r0, #0
 8002402:	d166      	bne.n	80024d2 <DMP_Init+0xfe>
    gyro_regs[0] = gyro_axes[orient & 3];
 8002404:	f64c 514c 	movw	r1, #52556	; 0xcd4c
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8002408:	206c      	movs	r0, #108	; 0x6c
    accel_regs[0] = accel_axes[orient & 3];
 800240a:	f64c 140c 	movw	r4, #51468	; 0xc90c
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 800240e:	232c      	movs	r3, #44	; 0x2c
    gyro_regs[0] = gyro_axes[orient & 3];
 8002410:	f8ad 1004 	strh.w	r1, [sp, #4]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8002414:	f88d 0006 	strb.w	r0, [sp, #6]
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8002418:	aa01      	add	r2, sp, #4
 800241a:	2103      	movs	r1, #3
 800241c:	f240 4026 	movw	r0, #1062	; 0x426
    accel_regs[0] = accel_axes[orient & 3];
 8002420:	f8ad 400c 	strh.w	r4, [sp, #12]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8002424:	f88d 300e 	strb.w	r3, [sp, #14]
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8002428:	f7ff fc1c 	bl	8001c64 <mpu_write_mem>
 800242c:	2800      	cmp	r0, #0
 800242e:	d154      	bne.n	80024da <DMP_Init+0x106>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8002430:	ac03      	add	r4, sp, #12
 8002432:	4622      	mov	r2, r4
 8002434:	2103      	movs	r1, #3
 8002436:	f240 402a 	movw	r0, #1066	; 0x42a
 800243a:	f7ff fc13 	bl	8001c64 <mpu_write_mem>
 800243e:	2800      	cmp	r0, #0
 8002440:	d14b      	bne.n	80024da <DMP_Init+0x106>
    memcpy(gyro_regs, gyro_sign, 3);
 8002442:	f245 6236 	movw	r2, #22070	; 0x5636
 8002446:	2176      	movs	r1, #118	; 0x76
    memcpy(accel_regs, accel_sign, 3);
 8002448:	f244 6026 	movw	r0, #17958	; 0x4626
 800244c:	2366      	movs	r3, #102	; 0x66
    memcpy(gyro_regs, gyro_sign, 3);
 800244e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8002452:	f88d 1006 	strb.w	r1, [sp, #6]
    memcpy(accel_regs, accel_sign, 3);
 8002456:	f8ad 000c 	strh.w	r0, [sp, #12]
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 800245a:	aa01      	add	r2, sp, #4
 800245c:	2103      	movs	r1, #3
 800245e:	f44f 6088 	mov.w	r0, #1088	; 0x440
    memcpy(accel_regs, accel_sign, 3);
 8002462:	f88d 300e 	strb.w	r3, [sp, #14]
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8002466:	f7ff fbfd 	bl	8001c64 <mpu_write_mem>
 800246a:	bbb0      	cbnz	r0, 80024da <DMP_Init+0x106>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 800246c:	4622      	mov	r2, r4
 800246e:	2103      	movs	r1, #3
 8002470:	f240 4031 	movw	r0, #1073	; 0x431
 8002474:	f7ff fbf6 	bl	8001c64 <mpu_write_mem>
 8002478:	bb78      	cbnz	r0, 80024da <DMP_Init+0x106>
    dmp.orient = orient;
 800247a:	2388      	movs	r3, #136	; 0x88
 800247c:	4d1a      	ldr	r5, [pc, #104]	; (80024e8 <DMP_Init+0x114>)
	if(dmp_enable_feature(dmp_features)){
 800247e:	f44f 70b8 	mov.w	r0, #368	; 0x170
    dmp.orient = orient;
 8002482:	812b      	strh	r3, [r5, #8]
	if(dmp_enable_feature(dmp_features)){
 8002484:	f7ff fdf6 	bl	8002074 <dmp_enable_feature>
 8002488:	bb28      	cbnz	r0, 80024d6 <DMP_Init+0x102>
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 800248a:	f44f 7280 	mov.w	r2, #256	; 0x100
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 800248e:	4b17      	ldr	r3, [pc, #92]	; (80024ec <DMP_Init+0x118>)
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8002490:	f8ad 2004 	strh.w	r2, [sp, #4]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8002494:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002498:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if (mpu_write_mem(D_0_22, 2, tmp))
 800249c:	aa01      	add	r2, sp, #4
 800249e:	2102      	movs	r1, #2
 80024a0:	f240 2016 	movw	r0, #534	; 0x216
 80024a4:	f7ff fbde 	bl	8001c64 <mpu_write_mem>
 80024a8:	b9c8      	cbnz	r0, 80024de <DMP_Init+0x10a>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 80024aa:	4622      	mov	r2, r4
 80024ac:	210c      	movs	r1, #12
 80024ae:	f640 20c1 	movw	r0, #2753	; 0xac1
 80024b2:	f7ff fbd7 	bl	8001c64 <mpu_write_mem>
 80024b6:	b990      	cbnz	r0, 80024de <DMP_Init+0x10a>
    dmp.fifo_rate = rate;
 80024b8:	2364      	movs	r3, #100	; 0x64
	if (mpu_set_dmp_state(1)){
 80024ba:	2001      	movs	r0, #1
    dmp.fifo_rate = rate;
 80024bc:	81ab      	strh	r3, [r5, #12]
	if (mpu_set_dmp_state(1)){
 80024be:	f7ff fca7 	bl	8001e10 <mpu_set_dmp_state>
		return 8;
 80024c2:	2800      	cmp	r0, #0
 80024c4:	bf14      	ite	ne
 80024c6:	2008      	movne	r0, #8
 80024c8:	2000      	moveq	r0, #0
 80024ca:	e78a      	b.n	80023e2 <DMP_Init+0xe>
		return 2;
 80024cc:	2002      	movs	r0, #2
}
 80024ce:	b007      	add	sp, #28
 80024d0:	bd30      	pop	{r4, r5, pc}
		return 4;//ERROR
 80024d2:	2004      	movs	r0, #4
 80024d4:	e785      	b.n	80023e2 <DMP_Init+0xe>
		return 6;
 80024d6:	2006      	movs	r0, #6
 80024d8:	e783      	b.n	80023e2 <DMP_Init+0xe>
		return 5;
 80024da:	2005      	movs	r0, #5
 80024dc:	e781      	b.n	80023e2 <DMP_Init+0xe>
		return 7;
 80024de:	2007      	movs	r0, #7
 80024e0:	e77f      	b.n	80023e2 <DMP_Init+0xe>
 80024e2:	bf00      	nop
 80024e4:	0800d7e4 	.word	0x0800d7e4
 80024e8:	200003a4 	.word	0x200003a4
 80024ec:	0800d6f0 	.word	0x0800d6f0

080024f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024f0:	b530      	push	{r4, r5, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024f2:	2201      	movs	r2, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024f4:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024fa:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80024fc:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
{
 8002500:	b095      	sub	sp, #84	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002502:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002504:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002506:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002508:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800250a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800250c:	9113      	str	r1, [sp, #76]	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800250e:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002510:	9405      	str	r4, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002512:	9401      	str	r4, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002514:	940d      	str	r4, [sp, #52]	; 0x34
 8002516:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800251a:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800251e:	e9cd 4408 	strd	r4, r4, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002522:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002526:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002528:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800252a:	f004 fcd7 	bl	8006edc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800252e:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002530:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002534:	4629      	mov	r1, r5
 8002536:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002538:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800253a:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800253c:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800253e:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002540:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002542:	f004 fec3 	bl	80072cc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002546:	2310      	movs	r3, #16
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002548:	a801      	add	r0, sp, #4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800254a:	9404      	str	r4, [sp, #16]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800254c:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800254e:	f004 ffa9 	bl	80074a4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002552:	b015      	add	sp, #84	; 0x54
 8002554:	bd30      	pop	{r4, r5, pc}
 8002556:	bf00      	nop

08002558 <main>:
{
 8002558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ximu_state = XIMU_STATE_STM_INIT;
 800255c:	2400      	movs	r4, #0
{
 800255e:	f1ad 7d18 	sub.w	sp, sp, #39845888	; 0x2600000
 8002562:	f5ad 3d20 	sub.w	sp, sp, #163840	; 0x28000
	ximu_state = XIMU_STATE_STM_INIT;
 8002566:	f8df 8268 	ldr.w	r8, [pc, #616]	; 80027d0 <main+0x278>
{
 800256a:	f5ad 7d33 	sub.w	sp, sp, #716	; 0x2cc
	ximu_state = XIMU_STATE_STM_INIT;
 800256e:	f888 4000 	strb.w	r4, [r8]
  HAL_Init();
 8002572:	f003 f825 	bl	80055c0 <HAL_Init>
  SystemClock_Config();
 8002576:	f7ff ffbb 	bl	80024f0 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257a:	4b86      	ldr	r3, [pc, #536]	; (8002794 <main+0x23c>)
 800257c:	e9cd 443b 	strd	r4, r4, [sp, #236]	; 0xec
 8002580:	4f85      	ldr	r7, [pc, #532]	; (8002798 <main+0x240>)

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002582:	4d86      	ldr	r5, [pc, #536]	; (800279c <main+0x244>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002584:	446b      	add	r3, sp
 8002586:	51dc      	str	r4, [r3, r7]
 8002588:	943d      	str	r4, [sp, #244]	; 0xf4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800258a:	69ab      	ldr	r3, [r5, #24]
 800258c:	4881      	ldr	r0, [pc, #516]	; (8002794 <main+0x23c>)
 800258e:	f043 0310 	orr.w	r3, r3, #16
 8002592:	61ab      	str	r3, [r5, #24]
 8002594:	69ab      	ldr	r3, [r5, #24]
 8002596:	4982      	ldr	r1, [pc, #520]	; (80027a0 <main+0x248>)
 8002598:	4468      	add	r0, sp
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	5043      	str	r3, [r0, r1]
 80025a0:	5843      	ldr	r3, [r0, r1]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025a2:	69ab      	ldr	r3, [r5, #24]
 80025a4:	497b      	ldr	r1, [pc, #492]	; (8002794 <main+0x23c>)
 80025a6:	f043 0320 	orr.w	r3, r3, #32
 80025aa:	61ab      	str	r3, [r5, #24]
 80025ac:	69ab      	ldr	r3, [r5, #24]
 80025ae:	4a7d      	ldr	r2, [pc, #500]	; (80027a4 <main+0x24c>)
 80025b0:	4469      	add	r1, sp
 80025b2:	f003 0320 	and.w	r3, r3, #32
 80025b6:	508b      	str	r3, [r1, r2]
 80025b8:	588b      	ldr	r3, [r1, r2]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ba:	69ab      	ldr	r3, [r5, #24]
 80025bc:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 8002794 <main+0x23c>
 80025c0:	f043 0304 	orr.w	r3, r3, #4
 80025c4:	61ab      	str	r3, [r5, #24]
 80025c6:	69ab      	ldr	r3, [r5, #24]
 80025c8:	4877      	ldr	r0, [pc, #476]	; (80027a8 <main+0x250>)
 80025ca:	44ec      	add	ip, sp
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	f84c 3000 	str.w	r3, [ip, r0]
 80025d4:	f85c 3000 	ldr.w	r3, [ip, r0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d8:	69ab      	ldr	r3, [r5, #24]
 80025da:	4e74      	ldr	r6, [pc, #464]	; (80027ac <main+0x254>)
 80025dc:	f043 0308 	orr.w	r3, r3, #8
 80025e0:	61ab      	str	r3, [r5, #24]
 80025e2:	69ab      	ldr	r3, [r5, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80025e4:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	f84c 3006 	str.w	r3, [ip, r6]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80025ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025f2:	486f      	ldr	r0, [pc, #444]	; (80027b0 <main+0x258>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f4:	f85c 3006 	ldr.w	r3, [ip, r6]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80025f8:	f003 fa8e 	bl	8005b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80025fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002600:	4a64      	ldr	r2, [pc, #400]	; (8002794 <main+0x23c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002602:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002606:	446a      	add	r2, sp
 8002608:	51d3      	str	r3, [r2, r7]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260a:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800260c:	a93a      	add	r1, sp, #232	; 0xe8
 800260e:	4868      	ldr	r0, [pc, #416]	; (80027b0 <main+0x258>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002610:	933b      	str	r3, [sp, #236]	; 0xec
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	943c      	str	r4, [sp, #240]	; 0xf0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002614:	f8cd a0f4 	str.w	sl, [sp, #244]	; 0xf4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002618:	f003 f984 	bl	8005924 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800261c:	696b      	ldr	r3, [r5, #20]
 800261e:	495d      	ldr	r1, [pc, #372]	; (8002794 <main+0x23c>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	616b      	str	r3, [r5, #20]
 8002626:	696b      	ldr	r3, [r5, #20]
 8002628:	3e10      	subs	r6, #16
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	4469      	add	r1, sp
 8002630:	518b      	str	r3, [r1, r6]
 8002632:	4b58      	ldr	r3, [pc, #352]	; (8002794 <main+0x23c>)
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002634:	4622      	mov	r2, r4
 8002636:	4621      	mov	r1, r4
 8002638:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 800263a:	446b      	add	r3, sp
 800263c:	599b      	ldr	r3, [r3, r6]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800263e:	f003 f807 	bl	8005650 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002642:	200f      	movs	r0, #15
 8002644:	f003 f83a 	bl	80056bc <HAL_NVIC_EnableIRQ>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002648:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Instance = I2C1;
 800264c:	4d59      	ldr	r5, [pc, #356]	; (80027b4 <main+0x25c>)
  hi2c1.Init.ClockSpeed = 100000;
 800264e:	4a5a      	ldr	r2, [pc, #360]	; (80027b8 <main+0x260>)
  hi2c1.Instance = I2C1;
 8002650:	495a      	ldr	r1, [pc, #360]	; (80027bc <main+0x264>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002652:	4628      	mov	r0, r5
  hi2c1.Init.ClockSpeed = 100000;
 8002654:	e9c5 1200 	strd	r1, r2, [r5]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002658:	612b      	str	r3, [r5, #16]
  hi2c1.Init.OwnAddress1 = 0;
 800265a:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hi2c1.Init.OwnAddress2 = 0;
 800265e:	e9c5 4405 	strd	r4, r4, [r5, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002662:	e9c5 4407 	strd	r4, r4, [r5, #28]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002666:	f003 fc7b 	bl	8005f60 <HAL_I2C_Init>
  MX_USB_DEVICE_Init();
 800266a:	f006 fca1 	bl	8008fb0 <MX_USB_DEVICE_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800266e:	4b49      	ldr	r3, [pc, #292]	; (8002794 <main+0x23c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002670:	f8df 9160 	ldr.w	r9, [pc, #352]	; 80027d4 <main+0x27c>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002674:	446b      	add	r3, sp
  htim2.Init.Period = 1250;
 8002676:	f240 41e2 	movw	r1, #1250	; 0x4e2
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800267a:	51dc      	str	r4, [r3, r7]
  htim2.Instance = TIM2;
 800267c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002680:	f843 4009 	str.w	r4, [r3, r9]
  htim2.Init.Prescaler = 7200;
 8002684:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
  htim2.Instance = TIM2;
 8002688:	f8df b14c 	ldr.w	fp, [pc, #332]	; 80027d8 <main+0x280>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800268c:	e9cd 443b 	strd	r4, r4, [sp, #236]	; 0xec
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002690:	4658      	mov	r0, fp
  htim2.Instance = TIM2;
 8002692:	f8cb 6000 	str.w	r6, [fp]
  htim2.Init.Period = 1250;
 8002696:	f8cb 100c 	str.w	r1, [fp, #12]
  htim2.Init.Prescaler = 7200;
 800269a:	f8cb 3004 	str.w	r3, [fp, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800269e:	943d      	str	r4, [sp, #244]	; 0xf4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a0:	942f      	str	r4, [sp, #188]	; 0xbc
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a2:	f8cb 4008 	str.w	r4, [fp, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a6:	f8cb 4010 	str.w	r4, [fp, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026aa:	f8cb 4018 	str.w	r4, [fp, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026ae:	f004 ff7b 	bl	80075a8 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b6:	4a37      	ldr	r2, [pc, #220]	; (8002794 <main+0x23c>)
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026b8:	a93a      	add	r1, sp, #232	; 0xe8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ba:	446a      	add	r2, sp
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026bc:	4658      	mov	r0, fp
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026be:	51d3      	str	r3, [r2, r7]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026c0:	f004 ffd0 	bl	8007664 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c4:	4b33      	ldr	r3, [pc, #204]	; (8002794 <main+0x23c>)
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026c6:	a92e      	add	r1, sp, #184	; 0xb8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c8:	446b      	add	r3, sp
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026ca:	4658      	mov	r0, fp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026cc:	f843 4009 	str.w	r4, [r3, r9]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d0:	942f      	str	r4, [sp, #188]	; 0xbc
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026d2:	f005 f921 	bl	8007918 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026d6:	4a2f      	ldr	r2, [pc, #188]	; (8002794 <main+0x23c>)
  htim3.Init.Period = 50;
 80026d8:	2132      	movs	r1, #50	; 0x32
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026da:	446a      	add	r2, sp
 80026dc:	51d4      	str	r4, [r2, r7]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026de:	f842 4009 	str.w	r4, [r2, r9]
  htim3.Init.Prescaler = 7200;
 80026e2:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
  htim3.Instance = TIM3;
 80026e6:	4e36      	ldr	r6, [pc, #216]	; (80027c0 <main+0x268>)
 80026e8:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <main+0x26c>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026ea:	4630      	mov	r0, r6
  htim3.Init.Prescaler = 7200;
 80026ec:	6072      	str	r2, [r6, #4]
  htim3.Instance = TIM3;
 80026ee:	6033      	str	r3, [r6, #0]
  htim3.Init.Period = 50;
 80026f0:	60f1      	str	r1, [r6, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026f2:	e9cd 443b 	strd	r4, r4, [sp, #236]	; 0xec
 80026f6:	943d      	str	r4, [sp, #244]	; 0xf4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f8:	942f      	str	r4, [sp, #188]	; 0xbc
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fa:	60b4      	str	r4, [r6, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026fc:	6134      	str	r4, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026fe:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002700:	f004 ff52 	bl	80075a8 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002708:	4a22      	ldr	r2, [pc, #136]	; (8002794 <main+0x23c>)
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800270a:	a93a      	add	r1, sp, #232	; 0xe8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800270c:	446a      	add	r2, sp
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800270e:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002710:	51d3      	str	r3, [r2, r7]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002712:	f004 ffa7 	bl	8007664 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002716:	4b1f      	ldr	r3, [pc, #124]	; (8002794 <main+0x23c>)
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002718:	a92e      	add	r1, sp, #184	; 0xb8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800271a:	446b      	add	r3, sp
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800271c:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800271e:	f843 4009 	str.w	r4, [r3, r9]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002722:	942f      	str	r4, [sp, #188]	; 0xbc
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002724:	f005 f8f8 	bl	8007918 <HAL_TIMEx_MasterConfigSynchronization>
  huart1.Init.BaudRate = 115200;
 8002728:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 800272c:	220c      	movs	r2, #12
  huart1.Instance = USART1;
 800272e:	4f26      	ldr	r7, [pc, #152]	; (80027c8 <main+0x270>)
 8002730:	4b26      	ldr	r3, [pc, #152]	; (80027cc <main+0x274>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002732:	4638      	mov	r0, r7
  huart1.Init.BaudRate = 115200;
 8002734:	e9c7 3100 	strd	r3, r1, [r7]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002738:	617a      	str	r2, [r7, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800273a:	e9c7 4402 	strd	r4, r4, [r7, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 800273e:	613c      	str	r4, [r7, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002740:	e9c7 4406 	strd	r4, r4, [r7, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002744:	f005 f90e 	bl	8007964 <HAL_UART_Init>
  systickInit();
 8002748:	f002 fede 	bl	8005508 <systickInit>
  HAL_TIM_Base_Start_IT(&htim2);
 800274c:	4658      	mov	r0, fp
 800274e:	f004 ff79 	bl	8007644 <HAL_TIM_Base_Start_IT>
  led_set(LED_INIT);
 8002752:	20cc      	movs	r0, #204	; 0xcc
 8002754:	f002 fa50 	bl	8004bf8 <led_set>
  HAL_Delay(1000);//blink to show system (stm32, especially the crystal) is ok
 8002758:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800275c:	f002 ff54 	bl	8005608 <HAL_Delay>
  ximu_state = XIMU_STATE_DMP_INIT;
 8002760:	f04f 0301 	mov.w	r3, #1
  led_set(LED_FAULT);//Will not notice LED blinking unless the following initialization takes longer than expected
 8002764:	20aa      	movs	r0, #170	; 0xaa
  ximu_state = XIMU_STATE_DMP_INIT;
 8002766:	f888 3000 	strb.w	r3, [r8]
  led_set(LED_FAULT);//Will not notice LED blinking unless the following initialization takes longer than expected
 800276a:	f002 fa45 	bl	8004bf8 <led_set>
  mpu_set_i2c(&hi2c1);
 800276e:	4628      	mov	r0, r5
 8002770:	f002 fa48 	bl	8004c04 <mpu_set_i2c>
  ms5611_set_i2c(&hi2c1);
 8002774:	4628      	mov	r0, r5
 8002776:	f002 fa75 	bl	8004c64 <ms5611_set_i2c>
  ms5611_init();
 800277a:	f002 fa79 	bl	8004c70 <ms5611_init>
  ms5611_update();
 800277e:	f002 faf7 	bl	8004d70 <ms5611_update>
  GNSS_set_huart(&huart1);
 8002782:	4638      	mov	r0, r7
 8002784:	f001 ffca 	bl	800471c <GNSS_set_huart>
  GNSS_Init();
 8002788:	f001 ffce 	bl	8004728 <GNSS_Init>
  int dmp_state = DMP_Init();
 800278c:	f7ff fe22 	bl	80023d4 <DMP_Init>
  if (dmp_state){
 8002790:	b320      	cbz	r0, 80027dc <main+0x284>
 8002792:	e7fe      	b.n	8002792 <main+0x23a>
 8002794:	026282c8 	.word	0x026282c8
 8002798:	fd9d7e20 	.word	0xfd9d7e20
 800279c:	40021000 	.word	0x40021000
 80027a0:	fd9d7d50 	.word	0xfd9d7d50
 80027a4:	fd9d7d54 	.word	0xfd9d7d54
 80027a8:	fd9d7d58 	.word	0xfd9d7d58
 80027ac:	fd9d7d5c 	.word	0xfd9d7d5c
 80027b0:	40011000 	.word	0x40011000
 80027b4:	200006a0 	.word	0x200006a0
 80027b8:	000186a0 	.word	0x000186a0
 80027bc:	40005400 	.word	0x40005400
 80027c0:	200006f4 	.word	0x200006f4
 80027c4:	40000400 	.word	0x40000400
 80027c8:	20000794 	.word	0x20000794
 80027cc:	40013800 	.word	0x40013800
 80027d0:	20000790 	.word	0x20000790
 80027d4:	fd9d7df0 	.word	0xfd9d7df0
 80027d8:	200007d8 	.word	0x200007d8
 80027dc:	4605      	mov	r5, r0
  while (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){
 80027de:	4c47      	ldr	r4, [pc, #284]	; (80028fc <main+0x3a4>)
  HAL_TIM_Base_Start_IT(&htim3);//start updating sensor data
 80027e0:	4630      	mov	r0, r6
 80027e2:	f004 ff2f 	bl	8007644 <HAL_TIM_Base_Start_IT>
  led_set(LED_DISCONNECTED);//Fault cleared
 80027e6:	4628      	mov	r0, r5
  ximu_state = XIMU_STATE_GPS_INIT;
 80027e8:	f888 a000 	strb.w	sl, [r8]
  led_set(LED_DISCONNECTED);//Fault cleared
 80027ec:	f002 fa04 	bl	8004bf8 <led_set>
  while (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){
 80027f0:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d006      	beq.n	8002806 <main+0x2ae>
	  led_set(LED_DISCONNECTED);//wait for connection
 80027f8:	2000      	movs	r0, #0
 80027fa:	f002 f9fd 	bl	8004bf8 <led_set>
  while (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED){
 80027fe:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8002802:	2b03      	cmp	r3, #3
 8002804:	d1f8      	bne.n	80027f8 <main+0x2a0>
  led_set(LED_IDLE);//connection formed
 8002806:	20ff      	movs	r0, #255	; 0xff
 8002808:	f002 f9f6 	bl	8004bf8 <led_set>
  ESKF_new(&eskf);
 800280c:	a83a      	add	r0, sp, #232	; 0xe8
 800280e:	f000 fae3 	bl	8002dd8 <ESKF_new>
  ESKF_update(&eskf,0,(double*)0,(double*)0,(double*)0,(double*)0,1);
 8002812:	2300      	movs	r3, #0
 8002814:	2201      	movs	r2, #1
 8002816:	a83a      	add	r0, sp, #232	; 0xe8
 8002818:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	461a      	mov	r2, r3
 8002820:	4619      	mov	r1, r3
 8002822:	f000 fd11 	bl	8003248 <ESKF_update>
 8002826:	4e36      	ldr	r6, [pc, #216]	; (8002900 <main+0x3a8>)
	  q1.pData[0] = 1.2;
 8002828:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 8002918 <main+0x3c0>
	  q1.pData[1] = 2.1;
 800282c:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 800291c <main+0x3c4>
	  q1.pData[2] = 3.23;
 8002830:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8002920 <main+0x3c8>
	  q1.pData[3] = 5.04;
 8002834:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8002924 <main+0x3cc>
 8002838:	ad16      	add	r5, sp, #88	; 0x58
	  led_set(LED_MEASURING);
 800283a:	20fe      	movs	r0, #254	; 0xfe
 800283c:	f002 f9dc 	bl	8004bf8 <led_set>
	  float32_t v_data[3*1] = {0.1,0.2,0.3};
 8002840:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
	  float32_t q1_data[4*1] = {0};
 8002844:	2300      	movs	r3, #0
	  float32_t R_data[3*3] = {1,2,3,4,5,6,7,8,9};
 8002846:	4f2f      	ldr	r7, [pc, #188]	; (8002904 <main+0x3ac>)
	  float32_t v_data[3*1] = {0.1,0.2,0.3};
 8002848:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	  float32_t R_data[3*3] = {1,2,3,4,5,6,7,8,9};
 800284c:	ac25      	add	r4, sp, #148	; 0x94
	  float32_t jacob_data[3*4] = {0};
 800284e:	4619      	mov	r1, r3
 8002850:	2230      	movs	r2, #48	; 0x30
 8002852:	a82e      	add	r0, sp, #184	; 0xb8
	  float32_t q1_data[4*1] = {0};
 8002854:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 8002858:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
	  float32_t q2_data[4*1] = {0};
 800285c:	e9cd 331d 	strd	r3, r3, [sp, #116]	; 0x74
 8002860:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
	  float32_t q_res_data[4*1] = {0};
 8002864:	e9cd 3321 	strd	r3, r3, [sp, #132]	; 0x84
 8002868:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
	  float32_t jacob_data[3*4] = {0};
 800286c:	f007 f8ca 	bl	8009a04 <memset>
	  float32_t R_data[3*3] = {1,2,3,4,5,6,7,8,9};
 8002870:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002874:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002878:	683f      	ldr	r7, [r7, #0]
	  arm_mat_init_f32(&q1,4,1,q1_data);
 800287a:	ab19      	add	r3, sp, #100	; 0x64
 800287c:	a80a      	add	r0, sp, #40	; 0x28
 800287e:	2201      	movs	r2, #1
 8002880:	2104      	movs	r1, #4
	  float32_t R_data[3*3] = {1,2,3,4,5,6,7,8,9};
 8002882:	6027      	str	r7, [r4, #0]
	  arm_mat_init_f32(&q1,4,1,q1_data);
 8002884:	f006 ffe2 	bl	800984c <arm_mat_init_f32>
	  arm_mat_init_f32(&q2,4,1,q2_data);
 8002888:	ab1d      	add	r3, sp, #116	; 0x74
 800288a:	a80c      	add	r0, sp, #48	; 0x30
 800288c:	2201      	movs	r2, #1
 800288e:	2104      	movs	r1, #4
 8002890:	f006 ffdc 	bl	800984c <arm_mat_init_f32>
	  arm_mat_init_f32(&q_res,4,1,q_res_data);
 8002894:	ab21      	add	r3, sp, #132	; 0x84
 8002896:	a80e      	add	r0, sp, #56	; 0x38
 8002898:	2201      	movs	r2, #1
 800289a:	2104      	movs	r1, #4
 800289c:	f006 ffd6 	bl	800984c <arm_mat_init_f32>
	  arm_mat_init_f32(&v,3,1,v_data);
 80028a0:	462b      	mov	r3, r5
 80028a2:	a810      	add	r0, sp, #64	; 0x40
 80028a4:	2201      	movs	r2, #1
 80028a6:	2103      	movs	r1, #3
 80028a8:	f006 ffd0 	bl	800984c <arm_mat_init_f32>
	  arm_mat_init_f32(&jacob,4,3,jacob_data);
 80028ac:	ab2e      	add	r3, sp, #184	; 0xb8
 80028ae:	a812      	add	r0, sp, #72	; 0x48
 80028b0:	2203      	movs	r2, #3
 80028b2:	2104      	movs	r1, #4
 80028b4:	f006 ffca 	bl	800984c <arm_mat_init_f32>
	  arm_mat_init_f32(&R,3,3,R_data);
 80028b8:	2203      	movs	r2, #3
 80028ba:	ab25      	add	r3, sp, #148	; 0x94
 80028bc:	a814      	add	r0, sp, #80	; 0x50
 80028be:	4611      	mov	r1, r2
 80028c0:	f006 ffc4 	bl	800984c <arm_mat_init_f32>
	  q2.pData[0] = -0.3;
 80028c4:	4f10      	ldr	r7, [pc, #64]	; (8002908 <main+0x3b0>)
	  q1.pData[0] = 1.2;
 80028c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	  q2.pData[0] = -0.3;
 80028c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	  q2.pData[1] = 0.978;
 80028ca:	4c10      	ldr	r4, [pc, #64]	; (800290c <main+0x3b4>)
	  q2.pData[2] = 0.12;
 80028cc:	4810      	ldr	r0, [pc, #64]	; (8002910 <main+0x3b8>)
	  q2.pData[3] = 3.22;
 80028ce:	4911      	ldr	r1, [pc, #68]	; (8002914 <main+0x3bc>)
	  q1.pData[0] = 1.2;
 80028d0:	f8c2 b000 	str.w	fp, [r2]
	  q1.pData[1] = 2.1;
 80028d4:	f8c2 a004 	str.w	sl, [r2, #4]
	  q1.pData[2] = 3.23;
 80028d8:	f8c2 9008 	str.w	r9, [r2, #8]
	  q1.pData[3] = 5.04;
 80028dc:	f8c2 800c 	str.w	r8, [r2, #12]
	  q2.pData[0] = -0.3;
 80028e0:	601f      	str	r7, [r3, #0]
	  q2.pData[1] = 0.978;
 80028e2:	605c      	str	r4, [r3, #4]
	  q2.pData[2] = 0.12;
 80028e4:	6098      	str	r0, [r3, #8]
	  q2.pData[3] = 3.22;
 80028e6:	60d9      	str	r1, [r3, #12]
	  __NOP();
 80028e8:	bf00      	nop
	  quatexp2(&v,&q1);
 80028ea:	a90a      	add	r1, sp, #40	; 0x28
 80028ec:	a810      	add	r0, sp, #64	; 0x40
 80028ee:	f002 fd7b 	bl	80053e8 <quatexp2>
	  __NOP();
 80028f2:	bf00      	nop
	  HAL_Delay(10);
 80028f4:	200a      	movs	r0, #10
 80028f6:	f002 fe87 	bl	8005608 <HAL_Delay>
 80028fa:	e79e      	b.n	800283a <main+0x2e2>
 80028fc:	20000d2c 	.word	0x20000d2c
 8002900:	0800d72c 	.word	0x0800d72c
 8002904:	0800d738 	.word	0x0800d738
 8002908:	be99999a 	.word	0xbe99999a
 800290c:	3f7a5e35 	.word	0x3f7a5e35
 8002910:	3df5c28f 	.word	0x3df5c28f
 8002914:	404e147b 	.word	0x404e147b
 8002918:	3f99999a 	.word	0x3f99999a
 800291c:	40066666 	.word	0x40066666
 8002920:	404eb852 	.word	0x404eb852
 8002924:	40a147ae 	.word	0x40a147ae

08002928 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop

0800292c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800292c:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <HAL_MspInit+0x3c>)
{
 800292e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002930:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST 
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8002932:	490e      	ldr	r1, [pc, #56]	; (800296c <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002934:	f042 0201 	orr.w	r2, r2, #1
 8002938:	619a      	str	r2, [r3, #24]
 800293a:	699a      	ldr	r2, [r3, #24]
 800293c:	f002 0201 	and.w	r2, r2, #1
 8002940:	9200      	str	r2, [sp, #0]
 8002942:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002944:	69da      	ldr	r2, [r3, #28]
 8002946:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800294a:	61da      	str	r2, [r3, #28]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8002956:	684b      	ldr	r3, [r1, #4]
 8002958:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800295c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002960:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002962:	b002      	add	sp, #8
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000
 800296c:	40010000 	.word	0x40010000

08002970 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002970:	2300      	movs	r3, #0
{
 8002972:	b530      	push	{r4, r5, lr}
  if(hi2c->Instance==I2C1)
 8002974:	6801      	ldr	r1, [r0, #0]
 8002976:	4a14      	ldr	r2, [pc, #80]	; (80029c8 <HAL_I2C_MspInit+0x58>)
{
 8002978:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C1)
 800297a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002980:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hi2c->Instance==I2C1)
 8002984:	d001      	beq.n	800298a <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002986:	b007      	add	sp, #28
 8002988:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800298a:	20c0      	movs	r0, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800298c:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800298e:	2512      	movs	r5, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002990:	4c0e      	ldr	r4, [pc, #56]	; (80029cc <HAL_I2C_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002992:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002994:	69a3      	ldr	r3, [r4, #24]
 8002996:	f043 0308 	orr.w	r3, r3, #8
 800299a:	61a3      	str	r3, [r4, #24]
 800299c:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800299e:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a6:	480a      	ldr	r0, [pc, #40]	; (80029d0 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029aa:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ac:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ae:	f002 ffb9 	bl	8005924 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029b2:	69e3      	ldr	r3, [r4, #28]
 80029b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029b8:	61e3      	str	r3, [r4, #28]
 80029ba:	69e3      	ldr	r3, [r4, #28]
 80029bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	9b01      	ldr	r3, [sp, #4]
}
 80029c4:	b007      	add	sp, #28
 80029c6:	bd30      	pop	{r4, r5, pc}
 80029c8:	40005400 	.word	0x40005400
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40010c00 	.word	0x40010c00

080029d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029d4:	b510      	push	{r4, lr}
  if(htim_base->Instance==TIM2)
 80029d6:	6803      	ldr	r3, [r0, #0]
{
 80029d8:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 80029da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029de:	d019      	beq.n	8002a14 <HAL_TIM_Base_MspInit+0x40>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80029e0:	4a17      	ldr	r2, [pc, #92]	; (8002a40 <HAL_TIM_Base_MspInit+0x6c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d001      	beq.n	80029ea <HAL_TIM_Base_MspInit+0x16>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80029e6:	b002      	add	sp, #8
 80029e8:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029ea:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029ec:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <HAL_TIM_Base_MspInit+0x70>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029ee:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029f0:	69dc      	ldr	r4, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029f2:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029f4:	f044 0402 	orr.w	r4, r4, #2
 80029f8:	61dc      	str	r4, [r3, #28]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	9301      	str	r3, [sp, #4]
 8002a02:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a04:	f002 fe24 	bl	8005650 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a08:	201d      	movs	r0, #29
}
 8002a0a:	b002      	add	sp, #8
 8002a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a10:	f002 be54 	b.w	80056bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a14:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a16:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002a1a:	69dc      	ldr	r4, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a1c:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a1e:	f044 0401 	orr.w	r4, r4, #1
 8002a22:	61dc      	str	r4, [r3, #28]
 8002a24:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a26:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a30:	f002 fe0e 	bl	8005650 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a34:	201c      	movs	r0, #28
}
 8002a36:	b002      	add	sp, #8
 8002a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a3c:	f002 be3e 	b.w	80056bc <HAL_NVIC_EnableIRQ>
 8002a40:	40000400 	.word	0x40000400
 8002a44:	40021000 	.word	0x40021000

08002a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a48:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4a:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8002a4c:	6802      	ldr	r2, [r0, #0]
 8002a4e:	4b26      	ldr	r3, [pc, #152]	; (8002ae8 <HAL_UART_MspInit+0xa0>)
{
 8002a50:	b086      	sub	sp, #24
  if(huart->Instance==USART1)
 8002a52:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a54:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002a58:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART1)
 8002a5c:	d001      	beq.n	8002a62 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a5e:	b006      	add	sp, #24
 8002a60:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a66:	4606      	mov	r6, r0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a68:	2002      	movs	r0, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a6a:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a6c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a76:	619a      	str	r2, [r3, #24]
 8002a78:	699a      	ldr	r2, [r3, #24]
 8002a7a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002a7e:	9200      	str	r2, [sp, #0]
 8002a80:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a82:	699a      	ldr	r2, [r3, #24]
 8002a84:	f042 0204 	orr.w	r2, r2, #4
 8002a88:	619a      	str	r2, [r3, #24]
 8002a8a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a8c:	9102      	str	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a94:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a96:	9003      	str	r0, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a98:	4814      	ldr	r0, [pc, #80]	; (8002aec <HAL_UART_MspInit+0xa4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a9c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9e:	f002 ff41 	bl	8005924 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa6:	a902      	add	r1, sp, #8
 8002aa8:	4810      	ldr	r0, [pc, #64]	; (8002aec <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002aaa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	e9cd 4403 	strd	r4, r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab0:	f002 ff38 	bl	8005924 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ab4:	2080      	movs	r0, #128	; 0x80
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002ab6:	2220      	movs	r2, #32
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002abc:	4d0c      	ldr	r5, [pc, #48]	; (8002af0 <HAL_UART_MspInit+0xa8>)
 8002abe:	490d      	ldr	r1, [pc, #52]	; (8002af4 <HAL_UART_MspInit+0xac>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ac0:	60e8      	str	r0, [r5, #12]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002ac2:	4628      	mov	r0, r5
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ac4:	e9c5 4401 	strd	r4, r4, [r5, #4]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ac8:	e9c5 4404 	strd	r4, r4, [r5, #16]
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002acc:	6029      	str	r1, [r5, #0]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002ace:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002ad2:	f002 fe19 	bl	8005708 <HAL_DMA_Init>
 8002ad6:	b918      	cbnz	r0, 8002ae0 <HAL_UART_MspInit+0x98>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002ad8:	6375      	str	r5, [r6, #52]	; 0x34
 8002ada:	626e      	str	r6, [r5, #36]	; 0x24
}
 8002adc:	b006      	add	sp, #24
 8002ade:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8002ae0:	f7ff ff22 	bl	8002928 <Error_Handler>
 8002ae4:	e7f8      	b.n	8002ad8 <HAL_UART_MspInit+0x90>
 8002ae6:	bf00      	nop
 8002ae8:	40013800 	.word	0x40013800
 8002aec:	40010800 	.word	0x40010800
 8002af0:	20000734 	.word	0x20000734
 8002af4:	40020058 	.word	0x40020058

08002af8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop

08002afc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002afc:	e7fe      	b.n	8002afc <HardFault_Handler>
 8002afe:	bf00      	nop

08002b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b00:	e7fe      	b.n	8002b00 <MemManage_Handler>
 8002b02:	bf00      	nop

08002b04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b04:	e7fe      	b.n	8002b04 <BusFault_Handler>
 8002b06:	bf00      	nop

08002b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b08:	e7fe      	b.n	8002b08 <UsageFault_Handler>
 8002b0a:	bf00      	nop

08002b0c <SVC_Handler>:
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop

08002b10 <DebugMon_Handler>:
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop

08002b14 <PendSV_Handler>:
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop

08002b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b1a:	f002 fd63 	bl	80055e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systick_Inc();
  /* USER CODE END SysTick_IRQn 1 */
}
 8002b1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  systick_Inc();
 8002b22:	f002 bd21 	b.w	8005568 <systick_Inc>
 8002b26:	bf00      	nop

08002b28 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002b28:	4801      	ldr	r0, [pc, #4]	; (8002b30 <DMA1_Channel5_IRQHandler+0x8>)
 8002b2a:	f002 be65 	b.w	80057f8 <HAL_DMA_IRQHandler>
 8002b2e:	bf00      	nop
 8002b30:	20000734 	.word	0x20000734

08002b34 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002b34:	4801      	ldr	r0, [pc, #4]	; (8002b3c <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8002b36:	f003 be2b 	b.w	8006790 <HAL_PCD_IRQHandler>
 8002b3a:	bf00      	nop
 8002b3c:	200019c0 	.word	0x200019c0

08002b40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b42:	4803      	ldr	r0, [pc, #12]	; (8002b50 <TIM2_IRQHandler+0x10>)
 8002b44:	f004 fe3e 	bl	80077c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  led_update();
  /* USER CODE END TIM2_IRQn 1 */
}
 8002b48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  led_update();
 8002b4c:	f002 b838 	b.w	8004bc0 <led_update>
 8002b50:	200007d8 	.word	0x200007d8

08002b54 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b54:	b530      	push	{r4, r5, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//this timer runs on 200Hz
	if (timer_index % 2 == 0){
 8002b56:	4c65      	ldr	r4, [pc, #404]	; (8002cec <TIM3_IRQHandler+0x198>)
{
 8002b58:	b0f1      	sub	sp, #452	; 0x1c4
	if (timer_index % 2 == 0){
 8002b5a:	f9b4 3000 	ldrsh.w	r3, [r4]
 8002b5e:	f013 0501 	ands.w	r5, r3, #1
 8002b62:	d022      	beq.n	8002baa <TIM3_IRQHandler+0x56>
			CDC_Transmit_FS(str,strlen(str));
		  }

	}

	if (timer_index % 10 == 0){
 8002b64:	4a62      	ldr	r2, [pc, #392]	; (8002cf0 <TIM3_IRQHandler+0x19c>)
 8002b66:	17d9      	asrs	r1, r3, #31
 8002b68:	fb82 0203 	smull	r0, r2, r2, r3
 8002b6c:	ebc1 02a2 	rsb	r2, r1, r2, asr #2
 8002b70:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002b74:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 8002b78:	b212      	sxth	r2, r2
 8002b7a:	2a00      	cmp	r2, #0
 8002b7c:	d03a      	beq.n	8002bf4 <TIM3_IRQHandler+0xa0>
		//code here runs on 20Hz
		ms5611_timer_update();
	}

	if (timer_index % 20 == 0){
 8002b7e:	4a5c      	ldr	r2, [pc, #368]	; (8002cf0 <TIM3_IRQHandler+0x19c>)
 8002b80:	fb82 0203 	smull	r0, r2, r2, r3
 8002b84:	ebc1 01e2 	rsb	r1, r1, r2, asr #3
 8002b88:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002b8c:	eba3 0181 	sub.w	r1, r3, r1, lsl #2
 8002b90:	b209      	sxth	r1, r1
 8002b92:	b301      	cbz	r1, 8002bd6 <TIM3_IRQHandler+0x82>
			XIMU_sens.lon = GNSS.GNGGA.lon;
			XIMU_sens.gps_ts = millis();
		}
	}

	timer_index++;
 8002b94:	3301      	adds	r3, #1
 8002b96:	b21b      	sxth	r3, r3
	if (timer_index == 200){
 8002b98:	2bc8      	cmp	r3, #200	; 0xc8
		timer_index = 0;
 8002b9a:	bf08      	it	eq
 8002b9c:	2300      	moveq	r3, #0
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b9e:	4855      	ldr	r0, [pc, #340]	; (8002cf4 <TIM3_IRQHandler+0x1a0>)
		timer_index = 0;
 8002ba0:	8023      	strh	r3, [r4, #0]
  HAL_TIM_IRQHandler(&htim3);
 8002ba2:	f004 fe0f 	bl	80077c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ba6:	b071      	add	sp, #452	; 0x1c4
 8002ba8:	bd30      	pop	{r4, r5, pc}
		  int status = dmp_read_fifo(gyro, accel, quat, &timestamp, &sensors,&more);
 8002baa:	f10d 0209 	add.w	r2, sp, #9
 8002bae:	f10d 030a 	add.w	r3, sp, #10
 8002bb2:	e9cd 3200 	strd	r3, r2, [sp]
 8002bb6:	a804      	add	r0, sp, #16
 8002bb8:	a906      	add	r1, sp, #24
 8002bba:	aa08      	add	r2, sp, #32
 8002bbc:	ab03      	add	r3, sp, #12
		  short gyro[3] = {0,0,0}, accel[3] = {0,0,0}, sensors;
 8002bbe:	9504      	str	r5, [sp, #16]
 8002bc0:	f8ad 5014 	strh.w	r5, [sp, #20]
 8002bc4:	9506      	str	r5, [sp, #24]
 8002bc6:	f8ad 501c 	strh.w	r5, [sp, #28]
		  int status = dmp_read_fifo(gyro, accel, quat, &timestamp, &sensors,&more);
 8002bca:	f7ff fb19 	bl	8002200 <dmp_read_fifo>
		  if (status == 0){
 8002bce:	b1b8      	cbz	r0, 8002c00 <TIM3_IRQHandler+0xac>
 8002bd0:	f9b4 3000 	ldrsh.w	r3, [r4]
 8002bd4:	e7c6      	b.n	8002b64 <TIM3_IRQHandler+0x10>
		int status = mpu_get_compass_reg(data,NULL);
 8002bd6:	a80c      	add	r0, sp, #48	; 0x30
 8002bd8:	f7ff f9f2 	bl	8001fc0 <mpu_get_compass_reg>
		if (status == 0){
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	d06a      	beq.n	8002cb6 <TIM3_IRQHandler+0x162>
		GNSS_RX_Update();
 8002be0:	f001 fdae 	bl	8004740 <GNSS_RX_Update>
		if (GNSS.GNGGA.status != 0){//data is valid
 8002be4:	4b44      	ldr	r3, [pc, #272]	; (8002cf8 <TIM3_IRQHandler+0x1a4>)
 8002be6:	f8d3 24a4 	ldr.w	r2, [r3, #1188]	; 0x4a4
 8002bea:	2a00      	cmp	r2, #0
 8002bec:	d151      	bne.n	8002c92 <TIM3_IRQHandler+0x13e>
 8002bee:	f9b4 3000 	ldrsh.w	r3, [r4]
 8002bf2:	e7cf      	b.n	8002b94 <TIM3_IRQHandler+0x40>
		ms5611_timer_update();
 8002bf4:	f002 fa28 	bl	8005048 <ms5611_timer_update>
 8002bf8:	f9b4 3000 	ldrsh.w	r3, [r4]
 8002bfc:	17d9      	asrs	r1, r3, #31
 8002bfe:	e7be      	b.n	8002b7e <TIM3_IRQHandler+0x2a>
			  XIMU_sens.q0 = quat[0];
 8002c00:	9808      	ldr	r0, [sp, #32]
 8002c02:	f7fd fbff 	bl	8000404 <__aeabi_i2d>
 8002c06:	4d3d      	ldr	r5, [pc, #244]	; (8002cfc <TIM3_IRQHandler+0x1a8>)
 8002c08:	e9c5 0100 	strd	r0, r1, [r5]
			  XIMU_sens.q1 = quat[1];
 8002c0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c0e:	f7fd fbf9 	bl	8000404 <__aeabi_i2d>
 8002c12:	e9c5 0102 	strd	r0, r1, [r5, #8]
			  XIMU_sens.q2 = quat[2];
 8002c16:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002c18:	f7fd fbf4 	bl	8000404 <__aeabi_i2d>
 8002c1c:	e9c5 0104 	strd	r0, r1, [r5, #16]
			  XIMU_sens.q3 = quat[3];
 8002c20:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002c22:	f7fd fbef 	bl	8000404 <__aeabi_i2d>
 8002c26:	e9c5 0106 	strd	r0, r1, [r5, #24]
			  XIMU_sens.ax = accel[0];
 8002c2a:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8002c2e:	f7fd fbe9 	bl	8000404 <__aeabi_i2d>
 8002c32:	e9c5 0108 	strd	r0, r1, [r5, #32]
			  XIMU_sens.ay = accel[1];
 8002c36:	f9bd 001a 	ldrsh.w	r0, [sp, #26]
 8002c3a:	f7fd fbe3 	bl	8000404 <__aeabi_i2d>
 8002c3e:	e9c5 010a 	strd	r0, r1, [r5, #40]	; 0x28
			  XIMU_sens.az = accel[2];
 8002c42:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8002c46:	f7fd fbdd 	bl	8000404 <__aeabi_i2d>
 8002c4a:	e9c5 010c 	strd	r0, r1, [r5, #48]	; 0x30
			  XIMU_sens.gx = gyro[0];
 8002c4e:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8002c52:	f7fd fbd7 	bl	8000404 <__aeabi_i2d>
 8002c56:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
			  XIMU_sens.gy = gyro[1];
 8002c5a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8002c5e:	f7fd fbd1 	bl	8000404 <__aeabi_i2d>
 8002c62:	e9c5 0110 	strd	r0, r1, [r5, #64]	; 0x40
			  XIMU_sens.gz = gyro[2];
 8002c66:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8002c6a:	f7fd fbcb 	bl	8000404 <__aeabi_i2d>
 8002c6e:	e9c5 0112 	strd	r0, r1, [r5, #72]	; 0x48
			  XIMU_sens.qag_ts = millis();
 8002c72:	f002 fc69 	bl	8005548 <millis>
 8002c76:	6528      	str	r0, [r5, #80]	; 0x50
			  calc_absolute_acceleration();
 8002c78:	f000 fee8 	bl	8003a4c <calc_absolute_acceleration>
			build_data_str(str);
 8002c7c:	a80c      	add	r0, sp, #48	; 0x30
 8002c7e:	f001 fb93 	bl	80043a8 <build_data_str>
			CDC_Transmit_FS(str,strlen(str));
 8002c82:	a80c      	add	r0, sp, #48	; 0x30
 8002c84:	f7fd fa64 	bl	8000150 <strlen>
 8002c88:	b281      	uxth	r1, r0
 8002c8a:	a80c      	add	r0, sp, #48	; 0x30
 8002c8c:	f006 f9e2 	bl	8009054 <CDC_Transmit_FS>
 8002c90:	e79e      	b.n	8002bd0 <TIM3_IRQHandler+0x7c>
			XIMU_sens.lat = GNSS.GNGGA.lat;
 8002c92:	4d1a      	ldr	r5, [pc, #104]	; (8002cfc <TIM3_IRQHandler+0x1a8>)
 8002c94:	f503 6290 	add.w	r2, r3, #1152	; 0x480
			XIMU_sens.lon = GNSS.GNGGA.lon;
 8002c98:	f503 6393 	add.w	r3, r3, #1176	; 0x498
			XIMU_sens.lat = GNSS.GNGGA.lat;
 8002c9c:	e9d2 0100 	ldrd	r0, r1, [r2]
			XIMU_sens.lon = GNSS.GNGGA.lon;
 8002ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
			XIMU_sens.lat = GNSS.GNGGA.lat;
 8002ca4:	e9c5 0124 	strd	r0, r1, [r5, #144]	; 0x90
			XIMU_sens.lon = GNSS.GNGGA.lon;
 8002ca8:	e9c5 2326 	strd	r2, r3, [r5, #152]	; 0x98
			XIMU_sens.gps_ts = millis();
 8002cac:	f002 fc4c 	bl	8005548 <millis>
 8002cb0:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
 8002cb4:	e79b      	b.n	8002bee <TIM3_IRQHandler+0x9a>
			XIMU_sens.mx = data[0];
 8002cb6:	f9bd 0030 	ldrsh.w	r0, [sp, #48]	; 0x30
 8002cba:	f7fd fba3 	bl	8000404 <__aeabi_i2d>
 8002cbe:	4d0f      	ldr	r5, [pc, #60]	; (8002cfc <TIM3_IRQHandler+0x1a8>)
 8002cc0:	e9c5 0116 	strd	r0, r1, [r5, #88]	; 0x58
			XIMU_sens.my = data[1];
 8002cc4:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 8002cc8:	f7fd fb9c 	bl	8000404 <__aeabi_i2d>
 8002ccc:	e9c5 0118 	strd	r0, r1, [r5, #96]	; 0x60
			XIMU_sens.mz = data[2];
 8002cd0:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 8002cd4:	f7fd fb96 	bl	8000404 <__aeabi_i2d>
 8002cd8:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
			calibrate_mag_reading();
 8002cdc:	f000 fdec 	bl	80038b8 <calibrate_mag_reading>
			XIMU_sens.m_ts = millis();
 8002ce0:	f002 fc32 	bl	8005548 <millis>
 8002ce4:	6728      	str	r0, [r5, #112]	; 0x70
			calc_magnetic_orientation();
 8002ce6:	f001 f89d 	bl	8003e24 <calc_magnetic_orientation>
 8002cea:	e779      	b.n	8002be0 <TIM3_IRQHandler+0x8c>
 8002cec:	200003b4 	.word	0x200003b4
 8002cf0:	66666667 	.word	0x66666667
 8002cf4:	200006f4 	.word	0x200006f4
 8002cf8:	20000850 	.word	0x20000850
 8002cfc:	200005f8 	.word	0x200005f8

08002d00 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002d00:	4a0c      	ldr	r2, [pc, #48]	; (8002d34 <_sbrk+0x34>)
{
 8002d02:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8002d04:	6813      	ldr	r3, [r2, #0]
 8002d06:	b133      	cbz	r3, 8002d16 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002d08:	4669      	mov	r1, sp
 8002d0a:	4418      	add	r0, r3
 8002d0c:	4288      	cmp	r0, r1
 8002d0e:	d809      	bhi.n	8002d24 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8002d10:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8002d16:	4908      	ldr	r1, [pc, #32]	; (8002d38 <_sbrk+0x38>)
 8002d18:	460b      	mov	r3, r1
 8002d1a:	6011      	str	r1, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002d1c:	4669      	mov	r1, sp
 8002d1e:	4418      	add	r0, r3
 8002d20:	4288      	cmp	r0, r1
 8002d22:	d9f5      	bls.n	8002d10 <_sbrk+0x10>
		errno = ENOMEM;
 8002d24:	f006 fe10 	bl	8009948 <__errno>
 8002d28:	220c      	movs	r2, #12
		return (caddr_t) -1;
 8002d2a:	f04f 33ff 	mov.w	r3, #4294967295
		errno = ENOMEM;
 8002d2e:	6002      	str	r2, [r0, #0]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	bd08      	pop	{r3, pc}
 8002d34:	200003b8 	.word	0x200003b8
 8002d38:	20001c30 	.word	0x20001c30

08002d3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d3c:	b430      	push	{r4, r5}

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002d3e:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002d42:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR |= 0x00000001U;
 8002d46:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <SystemInit+0x44>)
  RCC->CFGR &= 0xF8FF0000U;
 8002d48:	4a0e      	ldr	r2, [pc, #56]	; (8002d84 <SystemInit+0x48>)
  RCC->CR |= 0x00000001U;
 8002d4a:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002d4c:	480e      	ldr	r0, [pc, #56]	; (8002d88 <SystemInit+0x4c>)
  RCC->CR |= 0x00000001U;
 8002d4e:	f041 0101 	orr.w	r1, r1, #1
 8002d52:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= 0xF8FF0000U;
 8002d54:	6859      	ldr	r1, [r3, #4]
 8002d56:	400a      	ands	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002d60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d64:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d6c:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002d74:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000U;
 8002d76:	609d      	str	r5, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002d78:	6084      	str	r4, [r0, #8]
#endif 
}
 8002d7a:	bc30      	pop	{r4, r5}
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000
 8002d84:	f8ff0000 	.word	0xf8ff0000
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002d8c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002d8e:	e003      	b.n	8002d98 <LoopCopyDataInit>

08002d90 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002d92:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d94:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d96:	3104      	adds	r1, #4

08002d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d98:	480a      	ldr	r0, [pc, #40]	; (8002dc4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002d9c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002d9e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002da0:	d3f6      	bcc.n	8002d90 <CopyDataInit>
  ldr r2, =_sbss
 8002da2:	4a0a      	ldr	r2, [pc, #40]	; (8002dcc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002da4:	e002      	b.n	8002dac <LoopFillZerobss>

08002da6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002da6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002da8:	f842 3b04 	str.w	r3, [r2], #4

08002dac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002dac:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002dae:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002db0:	d3f9      	bcc.n	8002da6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002db2:	f7ff ffc3 	bl	8002d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002db6:	f006 fdcd 	bl	8009954 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dba:	f7ff fbcd 	bl	8002558 <main>
  bx lr
 8002dbe:	4770      	bx	lr
  ldr r3, =_sidata
 8002dc0:	0800e950 	.word	0x0800e950
  ldr r0, =_sdata
 8002dc4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002dc8:	20000388 	.word	0x20000388
  ldr r2, =_sbss
 8002dcc:	20000388 	.word	0x20000388
  ldr r3, = _ebss
 8002dd0:	20001c30 	.word	0x20001c30

08002dd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dd4:	e7fe      	b.n	8002dd4 <ADC1_2_IRQHandler>
	...

08002dd8 <ESKF_new>:
#define A_NOISE 1e-2
#define W_NOISE 1e-4
#define AB_NOISE 1e-6
#define WB_NOISE 1e-8

void ESKF_new(ESKF_filter* eskf){
 8002dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	//for simplicity
	float32_t* P = eskf->P.pData;

	//Utils
	arm_mat_init_f32(&eskf->I3,3,3,eskf->I3_data);
 8002ddc:	2203      	movs	r2, #3
void ESKF_new(ESKF_filter* eskf){
 8002dde:	4604      	mov	r4, r0
	eskf->IMU_initialized = 0;
 8002de0:	2600      	movs	r6, #0
	arm_mat_init_f32(&eskf->I3,3,3,eskf->I3_data);
 8002de2:	f500 5386 	add.w	r3, r0, #4288	; 0x10c0
void ESKF_new(ESKF_filter* eskf){
 8002de6:	b085      	sub	sp, #20
	arm_mat_init_f32(&eskf->I3,3,3,eskf->I3_data);
 8002de8:	469a      	mov	sl, r3
 8002dea:	4618      	mov	r0, r3
 8002dec:	4611      	mov	r1, r2
 8002dee:	3308      	adds	r3, #8
	eskf->MAG_initialized = 0;
 8002df0:	e9c4 6600 	strd	r6, r6, [r4]
	eskf->GPS_initialized = 0;
 8002df4:	60a6      	str	r6, [r4, #8]
	float32_t* P = eskf->P.pData;
 8002df6:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
	arm_mat_init_f32(&eskf->I3,3,3,eskf->I3_data);
 8002dfa:	f006 fd27 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->I12,12,12,eskf->I12_data);
 8002dfe:	220c      	movs	r2, #12
 8002e00:	f504 5087 	add.w	r0, r4, #4320	; 0x10e0
 8002e04:	f504 5387 	add.w	r3, r4, #4320	; 0x10e0
 8002e08:	4410      	add	r0, r2
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	3314      	adds	r3, #20
 8002e0e:	4681      	mov	r9, r0
 8002e10:	f006 fd1c 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->I15,15,15,eskf->I15_data);
 8002e14:	220f      	movs	r2, #15
 8002e16:	f504 5799 	add.w	r7, r4, #4896	; 0x1320
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	f504 5399 	add.w	r3, r4, #4896	; 0x1320
	arm_mat_init_f32(&eskf->g,3,1,eskf->g_data);
 8002e20:	f504 58b6 	add.w	r8, r4, #5824	; 0x16c0
	arm_mat_init_f32(&eskf->I15,15,15,eskf->I15_data);
 8002e24:	4638      	mov	r0, r7
 8002e26:	4611      	mov	r1, r2
 8002e28:	331c      	adds	r3, #28
 8002e2a:	f006 fd0f 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->g,3,1,eskf->g_data);
 8002e2e:	4643      	mov	r3, r8
 8002e30:	2201      	movs	r2, #1
 8002e32:	3308      	adds	r3, #8
 8002e34:	2103      	movs	r1, #3
 8002e36:	4640      	mov	r0, r8
 8002e38:	f006 fd08 	bl	800984c <arm_mat_init_f32>

	eye(&eskf->I3);
 8002e3c:	4650      	mov	r0, sl
 8002e3e:	f8cd a004 	str.w	sl, [sp, #4]
 8002e42:	f000 fc21 	bl	8003688 <eye>
	eye(&eskf->I12);
 8002e46:	4648      	mov	r0, r9
 8002e48:	f8cd 9008 	str.w	r9, [sp, #8]
 8002e4c:	f000 fc1c 	bl	8003688 <eye>
	eye(&eskf->I15);
 8002e50:	4638      	mov	r0, r7
 8002e52:	f000 fc19 	bl	8003688 <eye>
	zeros(&eskf->g);	eskf->g_data[2] = -9.81;
 8002e56:	4640      	mov	r0, r8
 8002e58:	f000 fc0c 	bl	8003674 <zeros>
 8002e5c:	f241 63d0 	movw	r3, #5840	; 0x16d0
 8002e60:	4aef      	ldr	r2, [pc, #956]	; (8003220 <ESKF_new+0x448>)

	//Nominal states
	arm_mat_init_f32(&eskf->p,3,1,eskf->p_data);
 8002e62:	f104 0b0c 	add.w	fp, r4, #12
	zeros(&eskf->g);	eskf->g_data[2] = -9.81;
 8002e66:	50e2      	str	r2, [r4, r3]
	arm_mat_init_f32(&eskf->v,3,1,eskf->v_data);
 8002e68:	f104 0a20 	add.w	sl, r4, #32
	arm_mat_init_f32(&eskf->p,3,1,eskf->p_data);
 8002e6c:	4658      	mov	r0, fp
 8002e6e:	f104 0314 	add.w	r3, r4, #20
 8002e72:	2201      	movs	r2, #1
 8002e74:	2103      	movs	r1, #3
 8002e76:	f006 fce9 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->v,3,1,eskf->v_data);
 8002e7a:	4650      	mov	r0, sl
 8002e7c:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8002e80:	2201      	movs	r2, #1
 8002e82:	2103      	movs	r1, #3
 8002e84:	f006 fce2 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->q,4,1,eskf->q_data);
	arm_mat_init_f32(&eskf->R,4,1,eskf->R_data);
 8002e88:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8002e8c:	4617      	mov	r7, r2
	arm_mat_init_f32(&eskf->q,4,1,eskf->q_data);
 8002e8e:	f104 0934 	add.w	r9, r4, #52	; 0x34
 8002e92:	4648      	mov	r0, r9
 8002e94:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8002e98:	2201      	movs	r2, #1
 8002e9a:	2104      	movs	r1, #4
 8002e9c:	f006 fcd6 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->ab,3,1,eskf->ab_data);
 8002ea0:	f104 0878 	add.w	r8, r4, #120	; 0x78
	arm_mat_init_f32(&eskf->R,4,1,eskf->R_data);
 8002ea4:	4638      	mov	r0, r7
 8002ea6:	f104 0354 	add.w	r3, r4, #84	; 0x54
 8002eaa:	2201      	movs	r2, #1
 8002eac:	2104      	movs	r1, #4
 8002eae:	9703      	str	r7, [sp, #12]
 8002eb0:	f006 fccc 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->wb,3,1,eskf->wb_data);
 8002eb4:	f104 078c 	add.w	r7, r4, #140	; 0x8c
	arm_mat_init_f32(&eskf->ab,3,1,eskf->ab_data);
 8002eb8:	4640      	mov	r0, r8
 8002eba:	f104 0380 	add.w	r3, r4, #128	; 0x80
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	2103      	movs	r1, #3
 8002ec2:	f006 fcc3 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->wb,3,1,eskf->wb_data);
 8002ec6:	2103      	movs	r1, #3
 8002ec8:	f104 0394 	add.w	r3, r4, #148	; 0x94
 8002ecc:	2201      	movs	r2, #1
 8002ece:	4638      	mov	r0, r7
 8002ed0:	f006 fcbc 	bl	800984c <arm_mat_init_f32>

	zeros(&eskf->p);
 8002ed4:	4658      	mov	r0, fp
 8002ed6:	f000 fbcd 	bl	8003674 <zeros>
	zeros(&eskf->v);
 8002eda:	4650      	mov	r0, sl
 8002edc:	f000 fbca 	bl	8003674 <zeros>
	zeros(&eskf->q);eskf->q.pData[0] = 1.0;//q = [1,0,0,0]'
 8002ee0:	4648      	mov	r0, r9
 8002ee2:	f000 fbc7 	bl	8003674 <zeros>
 8002ee6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002eea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	eye(&eskf->R);
 8002eec:	9803      	ldr	r0, [sp, #12]
	zeros(&eskf->q);eskf->q.pData[0] = 1.0;//q = [1,0,0,0]'
 8002eee:	601a      	str	r2, [r3, #0]
	eye(&eskf->R);
 8002ef0:	f000 fbca 	bl	8003688 <eye>
	zeros(&eskf->ab);
 8002ef4:	4640      	mov	r0, r8
 8002ef6:	f000 fbbd 	bl	8003674 <zeros>
	zeros(&eskf->wb);

	//Error states
	arm_mat_init_f32(&eskf->del_p,3,1,eskf->del_p_data);
 8002efa:	f104 0ba0 	add.w	fp, r4, #160	; 0xa0
	zeros(&eskf->wb);
 8002efe:	4638      	mov	r0, r7
 8002f00:	f000 fbb8 	bl	8003674 <zeros>
	arm_mat_init_f32(&eskf->del_v,3,1,eskf->del_v_data);
 8002f04:	f104 0ab4 	add.w	sl, r4, #180	; 0xb4
	arm_mat_init_f32(&eskf->del_p,3,1,eskf->del_p_data);
 8002f08:	4658      	mov	r0, fp
 8002f0a:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
 8002f0e:	2201      	movs	r2, #1
 8002f10:	2103      	movs	r1, #3
 8002f12:	f006 fc9b 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->del_theta,3,1,eskf->del_theta_data);
 8002f16:	f104 09c8 	add.w	r9, r4, #200	; 0xc8
	arm_mat_init_f32(&eskf->del_v,3,1,eskf->del_v_data);
 8002f1a:	4650      	mov	r0, sl
 8002f1c:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 8002f20:	2201      	movs	r2, #1
 8002f22:	2103      	movs	r1, #3
 8002f24:	f006 fc92 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->del_ab,3,1,eskf->del_ab_data);
 8002f28:	f104 08dc 	add.w	r8, r4, #220	; 0xdc
	arm_mat_init_f32(&eskf->del_theta,3,1,eskf->del_theta_data);
 8002f2c:	4648      	mov	r0, r9
 8002f2e:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
 8002f32:	2201      	movs	r2, #1
 8002f34:	2103      	movs	r1, #3
 8002f36:	f006 fc89 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->del_wb,3,1,eskf->del_wb_data);
 8002f3a:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
	arm_mat_init_f32(&eskf->del_ab,3,1,eskf->del_ab_data);
 8002f3e:	4640      	mov	r0, r8
 8002f40:	f104 03e4 	add.w	r3, r4, #228	; 0xe4
 8002f44:	2201      	movs	r2, #1
 8002f46:	2103      	movs	r1, #3
 8002f48:	f006 fc80 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->del_wb,3,1,eskf->del_wb_data);
 8002f4c:	f104 03f8 	add.w	r3, r4, #248	; 0xf8
 8002f50:	2201      	movs	r2, #1
 8002f52:	2103      	movs	r1, #3
 8002f54:	4638      	mov	r0, r7
 8002f56:	f006 fc79 	bl	800984c <arm_mat_init_f32>

	zeros(&eskf->del_p);
 8002f5a:	4658      	mov	r0, fp
 8002f5c:	f000 fb8a 	bl	8003674 <zeros>
	zeros(&eskf->del_v);
 8002f60:	4650      	mov	r0, sl
 8002f62:	f000 fb87 	bl	8003674 <zeros>
	zeros(&eskf->del_theta);
 8002f66:	4648      	mov	r0, r9
 8002f68:	f000 fb84 	bl	8003674 <zeros>
	zeros(&eskf->del_ab);
 8002f6c:	4640      	mov	r0, r8
 8002f6e:	f000 fb81 	bl	8003674 <zeros>
	zeros(&eskf->del_wb);
 8002f72:	4638      	mov	r0, r7
 8002f74:	f000 fb7e 	bl	8003674 <zeros>

	//covariance matrix
	arm_mat_init_f32(&eskf->P,15,15,eskf->P_data);
 8002f78:	220f      	movs	r2, #15
 8002f7a:	f504 7882 	add.w	r8, r4, #260	; 0x104
 8002f7e:	4640      	mov	r0, r8
 8002f80:	f504 7386 	add.w	r3, r4, #268	; 0x10c
 8002f84:	4611      	mov	r1, r2
 8002f86:	f006 fc61 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->Q,12,12,eskf->Q_data);
 8002f8a:	220c      	movs	r2, #12
 8002f8c:	f504 6792 	add.w	r7, r4, #1168	; 0x490
 8002f90:	f504 6393 	add.w	r3, r4, #1176	; 0x498
 8002f94:	4611      	mov	r1, r2
 8002f96:	4638      	mov	r0, r7
 8002f98:	f006 fc58 	bl	800984c <arm_mat_init_f32>

	zeros(&eskf->P);
 8002f9c:	4640      	mov	r0, r8
 8002f9e:	f000 fb69 	bl	8003674 <zeros>

	P[0] = P[16] = P[32] = P_INITIAL_COV;
	P[48] = P[64] = P[80] = V_INITIAL_COV;
	P[96] = P[112] = PR_INITIAL_COV;
	P[128] = Y_INITIAL_COV;
 8002fa2:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
	P[0] = P[16] = P[32] = P_INITIAL_COV;
 8002fa6:	4a9f      	ldr	r2, [pc, #636]	; (8003224 <ESKF_new+0x44c>)
	P[144] = P[160] = P[176] = AB_INITIAL_COV;
 8002fa8:	4b9f      	ldr	r3, [pc, #636]	; (8003228 <ESKF_new+0x450>)
	P[96] = P[112] = PR_INITIAL_COV;
 8002faa:	49a0      	ldr	r1, [pc, #640]	; (800322c <ESKF_new+0x454>)
	P[128] = Y_INITIAL_COV;
 8002fac:	f8c5 c200 	str.w	ip, [r5, #512]	; 0x200
	P[192] = P[208] = P[224] = WB_INITIAL_COV;

	zeros(&eskf->Q);//Value of Q depends on dt
 8002fb0:	4638      	mov	r0, r7
	P[0] = P[16] = P[32] = P_INITIAL_COV;
 8002fb2:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
 8002fb6:	642a      	str	r2, [r5, #64]	; 0x40
 8002fb8:	602a      	str	r2, [r5, #0]
	P[48] = P[64] = P[80] = V_INITIAL_COV;
 8002fba:	f8c5 2140 	str.w	r2, [r5, #320]	; 0x140
 8002fbe:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
 8002fc2:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0
	P[96] = P[112] = PR_INITIAL_COV;
 8002fc6:	f8c5 11c0 	str.w	r1, [r5, #448]	; 0x1c0
 8002fca:	f8c5 1180 	str.w	r1, [r5, #384]	; 0x180
	P[144] = P[160] = P[176] = AB_INITIAL_COV;
 8002fce:	f8c5 32c0 	str.w	r3, [r5, #704]	; 0x2c0
 8002fd2:	f8c5 3280 	str.w	r3, [r5, #640]	; 0x280
 8002fd6:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240
	P[192] = P[208] = P[224] = WB_INITIAL_COV;
 8002fda:	f8c5 3380 	str.w	r3, [r5, #896]	; 0x380
 8002fde:	f8c5 3340 	str.w	r3, [r5, #832]	; 0x340
 8002fe2:	f8c5 3300 	str.w	r3, [r5, #768]	; 0x300
	zeros(&eskf->Q);//Value of Q depends on dt
 8002fe6:	f000 fb45 	bl	8003674 <zeros>

	arm_mat_init_f32(&eskf->V_GPS,3,3,eskf->V_GPS_data);
 8002fea:	2203      	movs	r2, #3
 8002fec:	f504 67db 	add.w	r7, r4, #1752	; 0x6d8
 8002ff0:	4638      	mov	r0, r7
 8002ff2:	f504 63dc 	add.w	r3, r4, #1760	; 0x6e0
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	f006 fc28 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->V_MAG,3,3,eskf->V_MAG_data);
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	f204 7504 	addw	r5, r4, #1796	; 0x704
 8003002:	f204 730c 	addw	r3, r4, #1804	; 0x70c
 8003006:	4611      	mov	r1, r2
 8003008:	4628      	mov	r0, r5
 800300a:	f006 fc1f 	bl	800984c <arm_mat_init_f32>

	zeros(&eskf->V_GPS);
 800300e:	4638      	mov	r0, r7
 8003010:	f000 fb30 	bl	8003674 <zeros>
	eskf->V_GPS.pData[0] = eskf->V_GPS.pData[4] = GPS_XY_INITIAL_COV;
 8003014:	f8d4 36dc 	ldr.w	r3, [r4, #1756]	; 0x6dc
 8003018:	4a85      	ldr	r2, [pc, #532]	; (8003230 <ESKF_new+0x458>)
	eskf->V_GPS.pData[8] = GPS_Z_INITIAL_COV;
 800301a:	4986      	ldr	r1, [pc, #536]	; (8003234 <ESKF_new+0x45c>)

	zeros(&eskf->V_MAG);
 800301c:	4628      	mov	r0, r5
	eskf->V_GPS.pData[8] = GPS_Z_INITIAL_COV;
 800301e:	6219      	str	r1, [r3, #32]
	eskf->V_GPS.pData[0] = eskf->V_GPS.pData[4] = GPS_XY_INITIAL_COV;
 8003020:	611a      	str	r2, [r3, #16]
 8003022:	601a      	str	r2, [r3, #0]
	zeros(&eskf->V_MAG);
 8003024:	f000 fb26 	bl	8003674 <zeros>
	eskf->V_MAG.pData[0] = eskf->V_MAG.pData[4] = eskf->V_MAG.pData[8] = MAG_INITIAL_COV;
 8003028:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000

	//state transfer matrix
	arm_mat_init_f32(&eskf->Fx,15,15,eskf->Fx_data);
 800302c:	220f      	movs	r2, #15
	eskf->V_MAG.pData[0] = eskf->V_MAG.pData[4] = eskf->V_MAG.pData[8] = MAG_INITIAL_COV;
 800302e:	f8d4 3708 	ldr.w	r3, [r4, #1800]	; 0x708
	arm_mat_init_f32(&eskf->Fx,15,15,eskf->Fx_data);
 8003032:	f504 67e6 	add.w	r7, r4, #1840	; 0x730
	arm_mat_init_f32(&eskf->Fi,15,12,eskf->Fi_data);
 8003036:	f604 25bc 	addw	r5, r4, #2748	; 0xabc
	eskf->V_MAG.pData[0] = eskf->V_MAG.pData[4] = eskf->V_MAG.pData[8] = MAG_INITIAL_COV;
 800303a:	6219      	str	r1, [r3, #32]
 800303c:	6119      	str	r1, [r3, #16]
 800303e:	6019      	str	r1, [r3, #0]
	arm_mat_init_f32(&eskf->Fx,15,15,eskf->Fx_data);
 8003040:	4638      	mov	r0, r7
 8003042:	f504 63e7 	add.w	r3, r4, #1848	; 0x738
 8003046:	4611      	mov	r1, r2
 8003048:	f006 fc00 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->Fi,15,12,eskf->Fi_data);
 800304c:	f604 23c4 	addw	r3, r4, #2756	; 0xac4
 8003050:	220c      	movs	r2, #12
 8003052:	210f      	movs	r1, #15
 8003054:	4628      	mov	r0, r5
 8003056:	f006 fbf9 	bl	800984c <arm_mat_init_f32>

	eye(&eskf->Fx);//other part of Fx depends on dt
 800305a:	4638      	mov	r0, r7
 800305c:	f000 fb14 	bl	8003688 <eye>

	zeros(&eskf->Fi);
 8003060:	4628      	mov	r0, r5
 8003062:	f000 fb07 	bl	8003674 <zeros>
	matcpy2(&eskf->Fi,&eskf->I12,3,0);
 8003066:	4633      	mov	r3, r6
 8003068:	9902      	ldr	r1, [sp, #8]
 800306a:	4628      	mov	r0, r5
 800306c:	2203      	movs	r2, #3

	//observation matrix
	arm_mat_init_f32(&eskf->H_GPS,3,15,eskf->H_GPS_data);
 800306e:	f604 5594 	addw	r5, r4, #3476	; 0xd94
	matcpy2(&eskf->Fi,&eskf->I12,3,0);
 8003072:	f000 fb39 	bl	80036e8 <matcpy2>
	arm_mat_init_f32(&eskf->H_MAG,3,15,eskf->H_MAG_data);
 8003076:	f504 6765 	add.w	r7, r4, #3664	; 0xe50
	arm_mat_init_f32(&eskf->H_GPS,3,15,eskf->H_GPS_data);
 800307a:	4628      	mov	r0, r5
 800307c:	f604 539c 	addw	r3, r4, #3484	; 0xd9c
 8003080:	220f      	movs	r2, #15
 8003082:	2103      	movs	r1, #3
 8003084:	f006 fbe2 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->H_MAG,3,15,eskf->H_MAG_data);
 8003088:	f604 6358 	addw	r3, r4, #3672	; 0xe58
 800308c:	4638      	mov	r0, r7
 800308e:	220f      	movs	r2, #15
 8003090:	2103      	movs	r1, #3
 8003092:	f006 fbdb 	bl	800984c <arm_mat_init_f32>

	zeros(&eskf->H_GPS);
 8003096:	4628      	mov	r0, r5
 8003098:	f000 faec 	bl	8003674 <zeros>
	matcpy2(&eskf->H_GPS,&eskf->I3,0,0);
 800309c:	4633      	mov	r3, r6
 800309e:	4632      	mov	r2, r6
 80030a0:	9901      	ldr	r1, [sp, #4]
 80030a2:	4628      	mov	r0, r5
 80030a4:	f000 fb20 	bl	80036e8 <matcpy2>

	zeros(&eskf->H_MAG);//H_MAG depends on q
 80030a8:	4638      	mov	r0, r7

	//Kalman gain matrix
	arm_mat_init_f32(&eskf->K_GPS,15,3,eskf->K_GPS_data);
 80030aa:	f604 770c 	addw	r7, r4, #3852	; 0xf0c
	zeros(&eskf->H_MAG);//H_MAG depends on q
 80030ae:	f000 fae1 	bl	8003674 <zeros>
	arm_mat_init_f32(&eskf->K_MAG,15,3,eskf->K_MAG_data);
 80030b2:	f604 75c8 	addw	r5, r4, #4040	; 0xfc8
	arm_mat_init_f32(&eskf->K_GPS,15,3,eskf->K_GPS_data);
 80030b6:	4638      	mov	r0, r7
 80030b8:	f604 7314 	addw	r3, r4, #3860	; 0xf14
 80030bc:	2203      	movs	r2, #3
 80030be:	210f      	movs	r1, #15
 80030c0:	f006 fbc4 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->K_MAG,15,3,eskf->K_MAG_data);
 80030c4:	f504 637d 	add.w	r3, r4, #4048	; 0xfd0
 80030c8:	2203      	movs	r2, #3
 80030ca:	210f      	movs	r1, #15
 80030cc:	4628      	mov	r0, r5
 80030ce:	f006 fbbd 	bl	800984c <arm_mat_init_f32>

	zeros(&eskf->K_GPS);
 80030d2:	4638      	mov	r0, r7
 80030d4:	f000 face 	bl	8003674 <zeros>
	zeros(&eskf->K_MAG);
 80030d8:	4628      	mov	r0, r5
 80030da:	f000 facb 	bl	8003674 <zeros>

	//measurements
	arm_mat_init_f32(&eskf->am,3,1,eskf->am_data);
 80030de:	f504 5384 	add.w	r3, r4, #4224	; 0x1080
	arm_mat_init_f32(&eskf->wm,3,1,eskf->wm_data);
 80030e2:	461f      	mov	r7, r3
	arm_mat_init_f32(&eskf->am,3,1,eskf->am_data);
 80030e4:	f504 5884 	add.w	r8, r4, #4224	; 0x1080
 80030e8:	f108 0804 	add.w	r8, r8, #4
 80030ec:	4640      	mov	r0, r8
	arm_mat_init_f32(&eskf->wm,3,1,eskf->wm_data);
 80030ee:	3718      	adds	r7, #24
	arm_mat_init_f32(&eskf->mm,3,1,eskf->mm_data);
 80030f0:	f504 5585 	add.w	r5, r4, #4256	; 0x10a0
	arm_mat_init_f32(&eskf->am,3,1,eskf->am_data);
 80030f4:	330c      	adds	r3, #12
 80030f6:	2201      	movs	r2, #1
 80030f8:	2103      	movs	r1, #3
 80030fa:	f006 fba7 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->wm,3,1,eskf->wm_data);
 80030fe:	4638      	mov	r0, r7
 8003100:	462b      	mov	r3, r5
 8003102:	2201      	movs	r2, #1
 8003104:	2103      	movs	r1, #3
 8003106:	f006 fba1 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->mm,3,1,eskf->mm_data);
 800310a:	350c      	adds	r5, #12
 800310c:	f504 5385 	add.w	r3, r4, #4256	; 0x10a0
 8003110:	3314      	adds	r3, #20
 8003112:	2201      	movs	r2, #1
 8003114:	2103      	movs	r1, #3
 8003116:	4628      	mov	r0, r5
 8003118:	f006 fb98 	bl	800984c <arm_mat_init_f32>

	zeros(&eskf->am);
 800311c:	4640      	mov	r0, r8
 800311e:	f000 faa9 	bl	8003674 <zeros>
	zeros(&eskf->wm);
 8003122:	4638      	mov	r0, r7
 8003124:	f000 faa6 	bl	8003674 <zeros>
	//Initialization variables
	eskf->IMU_init_count = 0;
	eskf->MAG_init_count = 0;
	eskf->GPS_init_count = 0;

	arm_mat_init_f32(&eskf->am_init,3,1,eskf->am_init_data);
 8003128:	f504 57b7 	add.w	r7, r4, #5856	; 0x16e0
	zeros(&eskf->mm);
 800312c:	4628      	mov	r0, r5
 800312e:	f000 faa1 	bl	8003674 <zeros>
	eskf->IMU_init_count = 0;
 8003132:	f241 60d4 	movw	r0, #5844	; 0x16d4
	eskf->MAG_init_count = 0;
 8003136:	f241 61d8 	movw	r1, #5848	; 0x16d8
	eskf->GPS_init_count = 0;
 800313a:	f241 62dc 	movw	r2, #5852	; 0x16dc
	arm_mat_init_f32(&eskf->am_init,3,1,eskf->am_init_data);
 800313e:	463b      	mov	r3, r7
	eskf->IMU_init_count = 0;
 8003140:	5026      	str	r6, [r4, r0]
	arm_mat_init_f32(&eskf->am_init,3,1,eskf->am_init_data);
 8003142:	3308      	adds	r3, #8
	eskf->MAG_init_count = 0;
 8003144:	5066      	str	r6, [r4, r1]
	arm_mat_init_f32(&eskf->am_init,3,1,eskf->am_init_data);
 8003146:	4638      	mov	r0, r7
	eskf->GPS_init_count = 0;
 8003148:	50a6      	str	r6, [r4, r2]
	arm_mat_init_f32(&eskf->am_init,3,1,eskf->am_init_data);
 800314a:	2103      	movs	r1, #3
 800314c:	2201      	movs	r2, #1
	arm_mat_init_f32(&eskf->mm_init,3,1,eskf->mm_init_data);
 800314e:	463d      	mov	r5, r7
	arm_mat_init_f32(&eskf->am_init,3,1,eskf->am_init_data);
 8003150:	f006 fb7c 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->mm_init,3,1,eskf->mm_init_data);
 8003154:	463b      	mov	r3, r7
 8003156:	3514      	adds	r5, #20
 8003158:	331c      	adds	r3, #28
 800315a:	2201      	movs	r2, #1
 800315c:	2103      	movs	r1, #3
 800315e:	4628      	mov	r0, r5
 8003160:	f006 fb74 	bl	800984c <arm_mat_init_f32>

	zeros(&eskf->am_init);
 8003164:	4638      	mov	r0, r7
 8003166:	f000 fa85 	bl	8003674 <zeros>
	zeros(&eskf->mm_init);
 800316a:	4628      	mov	r0, r5
 800316c:	f000 fa82 	bl	8003674 <zeros>

	//time
	eskf->last_t = -1;
 8003170:	2000      	movs	r0, #0
 8003172:	4931      	ldr	r1, [pc, #196]	; (8003238 <ESKF_new+0x460>)
 8003174:	f504 52b8 	add.w	r2, r4, #5888	; 0x1700

	//AUX variables necessary during computation
	arm_mat_init_f32(&eskf->am_unbias,3,1,eskf->am_unbias_data);
 8003178:	f504 53b9 	add.w	r3, r4, #5920	; 0x1720
	eskf->last_t = -1;
 800317c:	e9c2 0106 	strd	r0, r1, [r2, #24]
	arm_mat_init_f32(&eskf->am_unbias,3,1,eskf->am_unbias_data);
 8003180:	3308      	adds	r3, #8
 8003182:	f504 50b9 	add.w	r0, r4, #5920	; 0x1720
 8003186:	2201      	movs	r2, #1
 8003188:	2103      	movs	r1, #3
 800318a:	f006 fb5f 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->wm_unbias,3,1,eskf->wm_unbias_data);
 800318e:	f504 53b9 	add.w	r3, r4, #5920	; 0x1720
 8003192:	4618      	mov	r0, r3
 8003194:	2201      	movs	r2, #1
 8003196:	331c      	adds	r3, #28
 8003198:	3014      	adds	r0, #20
 800319a:	2103      	movs	r1, #3
 800319c:	f006 fb56 	bl	800984c <arm_mat_init_f32>

	arm_mat_init_f32(&eskf->del_q,4,1,eskf->del_q_data);
 80031a0:	f504 53ba 	add.w	r3, r4, #5952	; 0x1740
 80031a4:	4618      	mov	r0, r3
 80031a6:	2201      	movs	r2, #1
 80031a8:	3310      	adds	r3, #16
 80031aa:	3008      	adds	r0, #8
 80031ac:	2104      	movs	r1, #4
 80031ae:	f006 fb4d 	bl	800984c <arm_mat_init_f32>

	arm_mat_init_f32(&eskf->R_hat_am_unbias,3,3,eskf->R_hat_am_unbias_data);
 80031b2:	2203      	movs	r2, #3
 80031b4:	f504 53bb 	add.w	r3, r4, #5984	; 0x1760
 80031b8:	f504 50bb 	add.w	r0, r4, #5984	; 0x1760
 80031bc:	4611      	mov	r1, r2
 80031be:	3308      	adds	r3, #8
 80031c0:	f006 fb44 	bl	800984c <arm_mat_init_f32>

	arm_mat_init_f32(&eskf->Fx_T,15,15,eskf->Fx_T_data);
 80031c4:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 80031c8:	220f      	movs	r2, #15
 80031ca:	4618      	mov	r0, r3
 80031cc:	4611      	mov	r1, r2
 80031ce:	3314      	adds	r3, #20
 80031d0:	300c      	adds	r0, #12
 80031d2:	f006 fb3b 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->Fx_P,15,15,eskf->Fx_P_data);
 80031d6:	220f      	movs	r2, #15
 80031d8:	f504 50d8 	add.w	r0, r4, #6912	; 0x1b00
 80031dc:	f504 53d9 	add.w	r3, r4, #6944	; 0x1b20
 80031e0:	4611      	mov	r1, r2
 80031e2:	3018      	adds	r0, #24
 80031e4:	f006 fb32 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->P_temp,15,15,eskf->P_temp_data);
 80031e8:	f504 5311 	add.w	r3, r4, #9280	; 0x2440
 80031ec:	220f      	movs	r2, #15
 80031ee:	4618      	mov	r0, r3
 80031f0:	4611      	mov	r1, r2
 80031f2:	331c      	adds	r3, #28
 80031f4:	3014      	adds	r0, #20
 80031f6:	f006 fb29 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->Fi_T,12,15,eskf->Fi_T_data);
 80031fa:	f504 53f5 	add.w	r3, r4, #7840	; 0x1ea0
 80031fe:	4618      	mov	r0, r3
 8003200:	220f      	movs	r2, #15
 8003202:	330c      	adds	r3, #12
 8003204:	3004      	adds	r0, #4
 8003206:	210c      	movs	r1, #12
 8003208:	f006 fb20 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&eskf->Fi_Q,15,12,eskf->Fi_Q_data);
 800320c:	220c      	movs	r2, #12
 800320e:	210f      	movs	r1, #15
 8003210:	f504 5306 	add.w	r3, r4, #8576	; 0x2180
 8003214:	f504 5005 	add.w	r0, r4, #8512	; 0x2140
 8003218:	3304      	adds	r3, #4
 800321a:	303c      	adds	r0, #60	; 0x3c

}
 800321c:	b005      	add	sp, #20
 800321e:	e00d      	b.n	800323c <ESKF_new+0x464>
 8003220:	c11cf5c3 	.word	0xc11cf5c3
 8003224:	42c80000 	.word	0x42c80000
 8003228:	39d1b717 	.word	0x39d1b717
 800322c:	3d23d70a 	.word	0x3d23d70a
 8003230:	3fe7ae14 	.word	0x3fe7ae14
 8003234:	408a3d71 	.word	0x408a3d71
 8003238:	bff00000 	.word	0xbff00000
 800323c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	arm_mat_init_f32(&eskf->Fi_Q,15,12,eskf->Fi_Q_data);
 8003240:	f006 bb04 	b.w	800984c <arm_mat_init_f32>
 8003244:	0000      	movs	r0, r0
	...

08003248 <ESKF_update>:
 * m - magnetic field measurement in XYZ, internally normalized
 * lla - latitude, longitude, altitude provided by GPS
 * info - indicates which type of information is passed to this function.
 * 		- 1 = IMU, 2 = MAG, 3 = GPS
 */
void ESKF_update(ESKF_filter* eskf, double t, double am[3], double wm[3], double mm[3], double lla[3], int info){
 8003248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800324c:	4604      	mov	r4, r0
	eskf->test[99999] = 1;
 800324e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
void ESKF_update(ESKF_filter* eskf, double t, double am[3], double wm[3], double mm[3], double lla[3], int info){
 8003252:	b09f      	sub	sp, #124	; 0x7c
 8003254:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
	eskf->test[99999] = 1;
 8003256:	f504 21c8 	add.w	r1, r4, #409600	; 0x64000
	//for simplicity
	float32_t* Q = eskf->Q.pData;

	double mm_norm = sqrt(mm[0]*mm[0] + mm[1]*mm[1] + mm[2]*mm[2]);
 800325a:	e9d5 8902 	ldrd	r8, r9, [r5, #8]
 800325e:	e9d5 ab04 	ldrd	sl, fp, [r5, #16]
void ESKF_update(ESKF_filter* eskf, double t, double am[3], double wm[3], double mm[3], double lla[3], int info){
 8003262:	e9cd 2300 	strd	r2, r3, [sp]
	double mm_norm = sqrt(mm[0]*mm[0] + mm[1]*mm[1] + mm[2]*mm[2]);
 8003266:	e9d5 2300 	ldrd	r2, r3, [r5]
	eskf->test[99999] = 1;
 800326a:	f8c1 025c 	str.w	r0, [r1, #604]	; 0x25c
	double mm_norm = sqrt(mm[0]*mm[0] + mm[1]*mm[1] + mm[2]*mm[2]);
 800326e:	4610      	mov	r0, r2
 8003270:	4619      	mov	r1, r3
 8003272:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003276:	f7fd f92f 	bl	80004d8 <__aeabi_dmul>
 800327a:	4642      	mov	r2, r8
 800327c:	4606      	mov	r6, r0
 800327e:	460f      	mov	r7, r1
 8003280:	464b      	mov	r3, r9
 8003282:	4640      	mov	r0, r8
 8003284:	4649      	mov	r1, r9
 8003286:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800328a:	f7fd f925 	bl	80004d8 <__aeabi_dmul>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4630      	mov	r0, r6
 8003294:	4639      	mov	r1, r7
 8003296:	f7fc ff69 	bl	800016c <__adddf3>
 800329a:	4652      	mov	r2, sl
 800329c:	4606      	mov	r6, r0
 800329e:	460f      	mov	r7, r1
 80032a0:	465b      	mov	r3, fp
 80032a2:	4650      	mov	r0, sl
 80032a4:	4659      	mov	r1, fp
 80032a6:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80032aa:	f7fd f915 	bl	80004d8 <__aeabi_dmul>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4630      	mov	r0, r6
 80032b4:	4639      	mov	r1, r7
 80032b6:	f7fc ff59 	bl	800016c <__adddf3>
 80032ba:	4606      	mov	r6, r0
 80032bc:	460f      	mov	r7, r1
 80032be:	f009 f84b 	bl	800c358 <sqrt>
	if (mm_norm != 0){
 80032c2:	2200      	movs	r2, #0
	double mm_norm = sqrt(mm[0]*mm[0] + mm[1]*mm[1] + mm[2]*mm[2]);
 80032c4:	4680      	mov	r8, r0
 80032c6:	4689      	mov	r9, r1
	if (mm_norm != 0){
 80032c8:	4630      	mov	r0, r6
 80032ca:	4639      	mov	r1, r7
void ESKF_update(ESKF_filter* eskf, double t, double am[3], double wm[3], double mm[3], double lla[3], int info){
 80032cc:	e9dd 7628 	ldrd	r7, r6, [sp, #160]	; 0xa0
	if (mm_norm != 0){
 80032d0:	2300      	movs	r3, #0
	float32_t* Q = eskf->Q.pData;
 80032d2:	f8d4 a494 	ldr.w	sl, [r4, #1172]	; 0x494
void ESKF_update(ESKF_filter* eskf, double t, double am[3], double wm[3], double mm[3], double lla[3], int info){
 80032d6:	f8dd b0b0 	ldr.w	fp, [sp, #176]	; 0xb0
	if (mm_norm != 0){
 80032da:	f7fd fb65 	bl	80009a8 <__aeabi_dcmpeq>
 80032de:	b9f8      	cbnz	r0, 8003320 <ESKF_update+0xd8>
 80032e0:	4642      	mov	r2, r8
 80032e2:	464b      	mov	r3, r9
 80032e4:	2000      	movs	r0, #0
 80032e6:	4930      	ldr	r1, [pc, #192]	; (80033a8 <ESKF_update+0x160>)
 80032e8:	f7fd fa20 	bl	800072c <__aeabi_ddiv>
 80032ec:	4680      	mov	r8, r0
 80032ee:	4689      	mov	r9, r1
		mm[0] = mm[0] / mm_norm;
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80032f8:	f7fd f8ee 	bl	80004d8 <__aeabi_dmul>
		mm[1] = mm[1] / mm_norm;
 80032fc:	4642      	mov	r2, r8
 80032fe:	464b      	mov	r3, r9
		mm[0] = mm[0] / mm_norm;
 8003300:	e9c5 0100 	strd	r0, r1, [r5]
		mm[1] = mm[1] / mm_norm;
 8003304:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003308:	f7fd f8e6 	bl	80004d8 <__aeabi_dmul>
		mm[2] = mm[2] / mm_norm;
 800330c:	4642      	mov	r2, r8
		mm[1] = mm[1] / mm_norm;
 800330e:	e9c5 0102 	strd	r0, r1, [r5, #8]
		mm[2] = mm[2] / mm_norm;
 8003312:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003316:	464b      	mov	r3, r9
 8003318:	f7fd f8de 	bl	80004d8 <__aeabi_dmul>
 800331c:	e9c5 0104 	strd	r0, r1, [r5, #16]
	}

	//store values into measurement vectors
	memcpy(eskf->am.pData,am,3*sizeof(float32_t));
 8003320:	f241 0388 	movw	r3, #4232	; 0x1088
	memcpy(eskf->wm.pData,wm,3*sizeof(float32_t));
 8003324:	f241 019c 	movw	r1, #4252	; 0x109c
	memcpy(eskf->mm.pData,mm,3*sizeof(float32_t));
 8003328:	f241 02b0 	movw	r2, #4272	; 0x10b0
	memcpy(eskf->am.pData,am,3*sizeof(float32_t));
 800332c:	68b8      	ldr	r0, [r7, #8]
 800332e:	58e3      	ldr	r3, [r4, r3]
 8003330:	f8d7 e000 	ldr.w	lr, [r7]
 8003334:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8003338:	f8c3 e000 	str.w	lr, [r3]
 800333c:	f8c3 c004 	str.w	ip, [r3, #4]
 8003340:	6098      	str	r0, [r3, #8]
	memcpy(eskf->wm.pData,wm,3*sizeof(float32_t));
 8003342:	5863      	ldr	r3, [r4, r1]
 8003344:	6870      	ldr	r0, [r6, #4]
 8003346:	68b1      	ldr	r1, [r6, #8]
 8003348:	6837      	ldr	r7, [r6, #0]
 800334a:	6058      	str	r0, [r3, #4]
 800334c:	601f      	str	r7, [r3, #0]
 800334e:	6099      	str	r1, [r3, #8]
	memcpy(eskf->mm.pData,mm,3*sizeof(float32_t));
 8003350:	58a3      	ldr	r3, [r4, r2]
 8003352:	6828      	ldr	r0, [r5, #0]
 8003354:	6869      	ldr	r1, [r5, #4]
 8003356:	68aa      	ldr	r2, [r5, #8]
 8003358:	6018      	str	r0, [r3, #0]
 800335a:	6059      	str	r1, [r3, #4]
 800335c:	609a      	str	r2, [r3, #8]

	//initialization
	if (eskf->IMU_initialized == 0 || eskf->MAG_initialized == 0 || eskf->GPS_initialized == 0){
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	b16b      	cbz	r3, 800337e <ESKF_update+0x136>
 8003362:	6863      	ldr	r3, [r4, #4]
 8003364:	bb13      	cbnz	r3, 80033ac <ESKF_update+0x164>



		}

		eskf->last_t = t;
 8003366:	e9dd 1200 	ldrd	r1, r2, [sp]
 800336a:	f504 53b8 	add.w	r3, r4, #5888	; 0x1700
	}

	//[IMU Information arrived]
	if (info == 1){
 800336e:	f1bb 0f01 	cmp.w	fp, #1
		eskf->last_t = t;
 8003372:	e9c3 1206 	strd	r1, r2, [r3, #24]
	if (info == 1){
 8003376:	d01f      	beq.n	80033b8 <ESKF_update+0x170>
	}




}
 8003378:	b01f      	add	sp, #124	; 0x7c
 800337a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (info == 1 && eskf->IMU_initialized == 0){
 800337e:	f1bb 0f01 	cmp.w	fp, #1
 8003382:	d1f0      	bne.n	8003366 <ESKF_update+0x11e>
			if (eskf->IMU_init_count < IMU_INITIALIZE_COUNT){
 8003384:	f241 65d4 	movw	r5, #5844	; 0x16d4
 8003388:	5963      	ldr	r3, [r4, r5]
 800338a:	2b09      	cmp	r3, #9
 800338c:	f340 8154 	ble.w	8003638 <ESKF_update+0x3f0>
			if (eskf->IMU_init_count == IMU_INITIALIZE_COUNT){
 8003390:	2b0a      	cmp	r3, #10
 8003392:	d1e8      	bne.n	8003366 <ESKF_update+0x11e>
				arm_mat_scale_f32(&eskf->am_init,1/IMU_INITIALIZE_COUNT,&eskf->am_init);
 8003394:	f504 52b7 	add.w	r2, r4, #5856	; 0x16e0
 8003398:	4610      	mov	r0, r2
 800339a:	2100      	movs	r1, #0
 800339c:	f006 f940 	bl	8009620 <arm_mat_scale_f32>
				eskf->IMU_initialized = 1;
 80033a0:	2301      	movs	r3, #1
 80033a2:	6023      	str	r3, [r4, #0]
 80033a4:	e7df      	b.n	8003366 <ESKF_update+0x11e>
 80033a6:	bf00      	nop
 80033a8:	3ff00000 	.word	0x3ff00000
	if (eskf->IMU_initialized == 0 || eskf->MAG_initialized == 0 || eskf->GPS_initialized == 0){
 80033ac:	68a3      	ldr	r3, [r4, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0d9      	beq.n	8003366 <ESKF_update+0x11e>
	if (info == 1){
 80033b2:	f1bb 0f01 	cmp.w	fp, #1
 80033b6:	d1df      	bne.n	8003378 <ESKF_update+0x130>
		double dt = t - eskf->last_t;
 80033b8:	e9dd 7800 	ldrd	r7, r8, [sp]
 80033bc:	f504 55b8 	add.w	r5, r4, #5888	; 0x1700
 80033c0:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
 80033c4:	4638      	mov	r0, r7
 80033c6:	4641      	mov	r1, r8
 80033c8:	f7fc fece 	bl	8000168 <__aeabi_dsub>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
		double dt_2 = dt * dt;
 80033d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80033d4:	f7fd f880 	bl	80004d8 <__aeabi_dmul>
		eskf->last_t = t;
 80033d8:	e9c5 7806 	strd	r7, r8, [r5, #24]
		double dt_2 = dt * dt;
 80033dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
		arm_mat_init_f32(&tempvec,3,1,tempvec_data);
 80033e0:	ab0e      	add	r3, sp, #56	; 0x38
 80033e2:	a808      	add	r0, sp, #32
 80033e4:	465a      	mov	r2, fp
 80033e6:	2103      	movs	r1, #3
 80033e8:	f006 fa30 	bl	800984c <arm_mat_init_f32>
		arm_mat_init_f32(&tempquat,4,1,tempquat_data);
 80033ec:	ab0a      	add	r3, sp, #40	; 0x28
 80033ee:	465a      	mov	r2, fp
 80033f0:	4618      	mov	r0, r3
 80033f2:	2104      	movs	r1, #4
 80033f4:	ab11      	add	r3, sp, #68	; 0x44
 80033f6:	f006 fa29 	bl	800984c <arm_mat_init_f32>
		arm_mat_init_f32(&tempmat,3,3,tempmat_data);
 80033fa:	2203      	movs	r2, #3
 80033fc:	ab0c      	add	r3, sp, #48	; 0x30
		quat2mat(&eskf->q,&eskf->R);//Get equivlent representation of orientation
 80033fe:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8003402:	f104 0834 	add.w	r8, r4, #52	; 0x34
		arm_mat_init_f32(&tempmat,3,3,tempmat_data);
 8003406:	4611      	mov	r1, r2
 8003408:	4618      	mov	r0, r3
 800340a:	ab15      	add	r3, sp, #84	; 0x54
 800340c:	f006 fa1e 	bl	800984c <arm_mat_init_f32>
		quat2mat(&eskf->q,&eskf->R);//Get equivlent representation of orientation
 8003410:	4640      	mov	r0, r8
 8003412:	4631      	mov	r1, r6
 8003414:	f001 ff14 	bl	8005240 <quat2mat>
		arm_mat_sub_f32(&eskf->am,&eskf->ab,&eskf->am_unbias);//subtract bias
 8003418:	f504 57b9 	add.w	r7, r4, #5920	; 0x1720
 800341c:	f504 5084 	add.w	r0, r4, #4224	; 0x1080
 8003420:	463a      	mov	r2, r7
 8003422:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8003426:	3004      	adds	r0, #4
 8003428:	f006 f888 	bl	800953c <arm_mat_sub_f32>
		arm_mat_scale_f32(&eskf->v,dt,&tempvec);
 800342c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003430:	f104 0320 	add.w	r3, r4, #32
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	f7fd fb47 	bl	8000ac8 <__aeabi_d2f>
		arm_mat_add_f32(&eskf->p,&tempvec,&eskf->p);
 800343a:	f104 090c 	add.w	r9, r4, #12
		arm_mat_scale_f32(&eskf->v,dt,&tempvec);
 800343e:	4605      	mov	r5, r0
 8003440:	aa08      	add	r2, sp, #32
 8003442:	4601      	mov	r1, r0
 8003444:	9800      	ldr	r0, [sp, #0]
 8003446:	f006 f8eb 	bl	8009620 <arm_mat_scale_f32>
		arm_mat_add_f32(&eskf->p,&tempvec,&eskf->p);
 800344a:	a908      	add	r1, sp, #32
 800344c:	464a      	mov	r2, r9
 800344e:	4648      	mov	r0, r9
 8003450:	f006 fa00 	bl	8009854 <arm_mat_add_f32>
		arm_mat_mult_f32(&eskf->R,&eskf->am_unbias,&tempvec);
 8003454:	aa08      	add	r2, sp, #32
 8003456:	4639      	mov	r1, r7
 8003458:	4630      	mov	r0, r6
 800345a:	f006 f943 	bl	80096e4 <arm_mat_mult_f32>
		arm_mat_add_f32(&tempvec,&eskf->g,&tempvec);
 800345e:	f504 5bb6 	add.w	fp, r4, #5824	; 0x16c0
 8003462:	aa08      	add	r2, sp, #32
 8003464:	4659      	mov	r1, fp
 8003466:	4610      	mov	r0, r2
 8003468:	f006 f9f4 	bl	8009854 <arm_mat_add_f32>
		arm_mat_scale_f32(&tempvec,0.5*dt_2,&tempvec);
 800346c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003470:	4b7f      	ldr	r3, [pc, #508]	; (8003670 <ESKF_update+0x428>)
 8003472:	2200      	movs	r2, #0
 8003474:	f7fd f830 	bl	80004d8 <__aeabi_dmul>
 8003478:	f7fd fb26 	bl	8000ac8 <__aeabi_d2f>
 800347c:	aa08      	add	r2, sp, #32
 800347e:	4601      	mov	r1, r0
 8003480:	4610      	mov	r0, r2
 8003482:	f006 f8cd 	bl	8009620 <arm_mat_scale_f32>
		arm_mat_add_f32(&eskf->p,&tempvec,&eskf->p);
 8003486:	464a      	mov	r2, r9
 8003488:	a908      	add	r1, sp, #32
 800348a:	4648      	mov	r0, r9
 800348c:	f006 f9e2 	bl	8009854 <arm_mat_add_f32>
		arm_mat_mult_f32(&eskf->R,&eskf->am_unbias,&tempvec);
 8003490:	aa08      	add	r2, sp, #32
 8003492:	4639      	mov	r1, r7
 8003494:	4630      	mov	r0, r6
 8003496:	f006 f925 	bl	80096e4 <arm_mat_mult_f32>
		arm_mat_add_f32(&tempvec,&eskf->g,&tempvec);
 800349a:	aa08      	add	r2, sp, #32
 800349c:	4659      	mov	r1, fp
 800349e:	4610      	mov	r0, r2
 80034a0:	f006 f9d8 	bl	8009854 <arm_mat_add_f32>
		arm_mat_scale_f32(&tempvec,dt,&tempvec);
 80034a4:	aa08      	add	r2, sp, #32
 80034a6:	4629      	mov	r1, r5
 80034a8:	4610      	mov	r0, r2
 80034aa:	f006 f8b9 	bl	8009620 <arm_mat_scale_f32>
		arm_mat_add_f32(&eskf->v,&tempvec,&eskf->v);
 80034ae:	9a00      	ldr	r2, [sp, #0]
		arm_mat_scale_f32(&eskf->wm_unbias,dt,&tempvec);
 80034b0:	f107 0914 	add.w	r9, r7, #20
		arm_mat_add_f32(&eskf->v,&tempvec,&eskf->v);
 80034b4:	a908      	add	r1, sp, #32
 80034b6:	4610      	mov	r0, r2
		quatexp2(&tempvec,&eskf->del_q);
 80034b8:	f504 5bba 	add.w	fp, r4, #5952	; 0x1740
		arm_mat_add_f32(&eskf->v,&tempvec,&eskf->v);
 80034bc:	f006 f9ca 	bl	8009854 <arm_mat_add_f32>
		quatexp2(&tempvec,&eskf->del_q);
 80034c0:	f10b 0b08 	add.w	fp, fp, #8
		arm_mat_scale_f32(&eskf->wm_unbias,dt,&tempvec);
 80034c4:	aa08      	add	r2, sp, #32
 80034c6:	4629      	mov	r1, r5
 80034c8:	4648      	mov	r0, r9
 80034ca:	f006 f8a9 	bl	8009620 <arm_mat_scale_f32>
		quatexp2(&tempvec,&eskf->del_q);
 80034ce:	4659      	mov	r1, fp
 80034d0:	a808      	add	r0, sp, #32
 80034d2:	f001 ff89 	bl	80053e8 <quatexp2>
		otimes(&eskf->q,&eskf->del_q,&tempquat);
 80034d6:	aa0a      	add	r2, sp, #40	; 0x28
 80034d8:	4659      	mov	r1, fp
 80034da:	4640      	mov	r0, r8
 80034dc:	f001 ff44 	bl	8005368 <otimes>
		matcpy(&tempquat,&eskf->q);
 80034e0:	4641      	mov	r1, r8
 80034e2:	a80a      	add	r0, sp, #40	; 0x28
 80034e4:	f000 f8ee 	bl	80036c4 <matcpy>
		quat2mat(&eskf->q,&eskf->R);//Update R to our best estimation
 80034e8:	4631      	mov	r1, r6
 80034ea:	4640      	mov	r0, r8
		eye(&eskf->Fx);
 80034ec:	f504 68e6 	add.w	r8, r4, #1840	; 0x730
		quat2mat(&eskf->q,&eskf->R);//Update R to our best estimation
 80034f0:	f001 fea6 	bl	8005240 <quat2mat>
		matcpy2(&eskf->Fx,&eskf->I3,0,3);
 80034f4:	f504 5b86 	add.w	fp, r4, #4288	; 0x10c0
		eye(&eskf->Fx);
 80034f8:	4640      	mov	r0, r8
 80034fa:	f000 f8c5 	bl	8003688 <eye>
		matcpy2(&eskf->Fx,&eskf->I3,0,3);
 80034fe:	2303      	movs	r3, #3
 8003500:	4640      	mov	r0, r8
 8003502:	4659      	mov	r1, fp
 8003504:	2200      	movs	r2, #0
 8003506:	f000 f8ef 	bl	80036e8 <matcpy2>
		hat(&eskf->am_unbias,&tempmat);
 800350a:	a90c      	add	r1, sp, #48	; 0x30
 800350c:	4638      	mov	r0, r7
		arm_mat_mult_f32(&eskf->R,&tempmat,&eskf->R_hat_am_unbias);
 800350e:	f504 57bb 	add.w	r7, r4, #5984	; 0x1760
		hat(&eskf->am_unbias,&tempmat);
 8003512:	f000 f905 	bl	8003720 <hat>
		arm_mat_scale_f32(&eskf->R_hat_am_unbias,-dt,&eskf->R_hat_am_unbias);
 8003516:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
		arm_mat_mult_f32(&eskf->R,&tempmat,&eskf->R_hat_am_unbias);
 800351a:	a90c      	add	r1, sp, #48	; 0x30
 800351c:	463a      	mov	r2, r7
 800351e:	4630      	mov	r0, r6
 8003520:	f006 f8e0 	bl	80096e4 <arm_mat_mult_f32>
		arm_mat_scale_f32(&eskf->R_hat_am_unbias,-dt,&eskf->R_hat_am_unbias);
 8003524:	4629      	mov	r1, r5
 8003526:	463a      	mov	r2, r7
 8003528:	4638      	mov	r0, r7
 800352a:	f006 f879 	bl	8009620 <arm_mat_scale_f32>
		matcpy2(&eskf->Fx,&eskf->R_hat_am_unbias,3,6);
 800352e:	4639      	mov	r1, r7
 8003530:	4640      	mov	r0, r8
 8003532:	2306      	movs	r3, #6
 8003534:	2203      	movs	r2, #3
 8003536:	f000 f8d7 	bl	80036e8 <matcpy2>
		arm_mat_scale_f32(&eskf->R,-dt,&tempmat);
 800353a:	aa0c      	add	r2, sp, #48	; 0x30
 800353c:	4629      	mov	r1, r5
 800353e:	4630      	mov	r0, r6
 8003540:	f006 f86e 	bl	8009620 <arm_mat_scale_f32>
		matcpy2(&eskf->Fx,&tempmat,3,9);
 8003544:	2309      	movs	r3, #9
 8003546:	a90c      	add	r1, sp, #48	; 0x30
 8003548:	4640      	mov	r0, r8
 800354a:	2203      	movs	r2, #3
 800354c:	f000 f8cc 	bl	80036e8 <matcpy2>
		arm_mat_scale_f32(&eskf->wm_unbias,-dt,&tempvec);//changed dt to -dt is equivalent to transpose
 8003550:	aa08      	add	r2, sp, #32
 8003552:	4629      	mov	r1, r5
 8003554:	4648      	mov	r0, r9
 8003556:	f006 f863 	bl	8009620 <arm_mat_scale_f32>
		matexp2(&tempvec,&tempmat);
 800355a:	a90c      	add	r1, sp, #48	; 0x30
 800355c:	a808      	add	r0, sp, #32
 800355e:	f000 f8ff 	bl	8003760 <matexp2>
		matcpy2(&eskf->Fx,&tempmat,6,6);
 8003562:	2306      	movs	r3, #6
 8003564:	a90c      	add	r1, sp, #48	; 0x30
 8003566:	461a      	mov	r2, r3
 8003568:	4640      	mov	r0, r8
 800356a:	f000 f8bd 	bl	80036e8 <matcpy2>
		arm_mat_scale_f32(&eskf->I3,-dt,&tempmat);
 800356e:	aa0c      	add	r2, sp, #48	; 0x30
 8003570:	4629      	mov	r1, r5
 8003572:	4658      	mov	r0, fp
 8003574:	f006 f854 	bl	8009620 <arm_mat_scale_f32>
		matcpy2(&eskf->Fx,&tempmat,6,12);
 8003578:	a90c      	add	r1, sp, #48	; 0x30
 800357a:	4640      	mov	r0, r8
 800357c:	230c      	movs	r3, #12
 800357e:	2206      	movs	r2, #6
 8003580:	f000 f8b2 	bl	80036e8 <matcpy2>
		Q[0] = Q[13] = Q[26] = A_NOISE * dt_2;
 8003584:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8003588:	a331      	add	r3, pc, #196	; (adr r3, 8003650 <ESKF_update+0x408>)
 800358a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358e:	4630      	mov	r0, r6
 8003590:	4639      	mov	r1, r7
 8003592:	f7fc ffa1 	bl	80004d8 <__aeabi_dmul>
 8003596:	f7fd fa97 	bl	8000ac8 <__aeabi_d2f>
		Q[39] = Q[52] = Q[65] = W_NOISE * dt_2;
 800359a:	a32f      	add	r3, pc, #188	; (adr r3, 8003658 <ESKF_update+0x410>)
 800359c:	e9d3 2300 	ldrd	r2, r3, [r3]
		Q[0] = Q[13] = Q[26] = A_NOISE * dt_2;
 80035a0:	f8ca 0068 	str.w	r0, [sl, #104]	; 0x68
 80035a4:	f8ca 0034 	str.w	r0, [sl, #52]	; 0x34
 80035a8:	f8ca 0000 	str.w	r0, [sl]
		Q[39] = Q[52] = Q[65] = W_NOISE * dt_2;
 80035ac:	4639      	mov	r1, r7
 80035ae:	4630      	mov	r0, r6
 80035b0:	f7fc ff92 	bl	80004d8 <__aeabi_dmul>
 80035b4:	f7fd fa88 	bl	8000ac8 <__aeabi_d2f>
		Q[78] = Q[91] = Q[104] = AB_NOISE * dt;
 80035b8:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
 80035bc:	a328      	add	r3, pc, #160	; (adr r3, 8003660 <ESKF_update+0x418>)
 80035be:	e9d3 2300 	ldrd	r2, r3, [r3]
		Q[39] = Q[52] = Q[65] = W_NOISE * dt_2;
 80035c2:	f8ca 0104 	str.w	r0, [sl, #260]	; 0x104
 80035c6:	f8ca 00d0 	str.w	r0, [sl, #208]	; 0xd0
 80035ca:	f8ca 009c 	str.w	r0, [sl, #156]	; 0x9c
		Q[78] = Q[91] = Q[104] = AB_NOISE * dt;
 80035ce:	4631      	mov	r1, r6
 80035d0:	4628      	mov	r0, r5
 80035d2:	f7fc ff81 	bl	80004d8 <__aeabi_dmul>
 80035d6:	f7fd fa77 	bl	8000ac8 <__aeabi_d2f>
		Q[117] = Q[130] = Q[143] = WB_NOISE * dt;
 80035da:	a323      	add	r3, pc, #140	; (adr r3, 8003668 <ESKF_update+0x420>)
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
		Q[78] = Q[91] = Q[104] = AB_NOISE * dt;
 80035e0:	f8ca 01a0 	str.w	r0, [sl, #416]	; 0x1a0
 80035e4:	f8ca 016c 	str.w	r0, [sl, #364]	; 0x16c
 80035e8:	f8ca 0138 	str.w	r0, [sl, #312]	; 0x138
		Q[117] = Q[130] = Q[143] = WB_NOISE * dt;
 80035ec:	4631      	mov	r1, r6
 80035ee:	4628      	mov	r0, r5
 80035f0:	f7fc ff72 	bl	80004d8 <__aeabi_dmul>
 80035f4:	f7fd fa68 	bl	8000ac8 <__aeabi_d2f>
		arm_mat_trans_f32(&eskf->Fx,&eskf->Fx_T);
 80035f8:	f504 56bc 	add.w	r6, r4, #6016	; 0x1780
 80035fc:	360c      	adds	r6, #12
		arm_mat_mult_f32(&eskf->Fx,&eskf->P,&eskf->Fx_P);
 80035fe:	f504 55d8 	add.w	r5, r4, #6912	; 0x1b00
		Q[117] = Q[130] = Q[143] = WB_NOISE * dt;
 8003602:	f8ca 023c 	str.w	r0, [sl, #572]	; 0x23c
 8003606:	f8ca 0208 	str.w	r0, [sl, #520]	; 0x208
 800360a:	f8ca 01d4 	str.w	r0, [sl, #468]	; 0x1d4
		arm_mat_trans_f32(&eskf->Fx,&eskf->Fx_T);
 800360e:	4631      	mov	r1, r6
		arm_mat_mult_f32(&eskf->Fx,&eskf->P,&eskf->Fx_P);
 8003610:	3518      	adds	r5, #24
		arm_mat_trans_f32(&eskf->Fx,&eskf->Fx_T);
 8003612:	4640      	mov	r0, r8
 8003614:	f005 ff3a 	bl	800948c <arm_mat_trans_f32>
		arm_mat_mult_f32(&eskf->Fx,&eskf->P,&eskf->Fx_P);
 8003618:	462a      	mov	r2, r5
 800361a:	f504 7182 	add.w	r1, r4, #260	; 0x104
 800361e:	4640      	mov	r0, r8
 8003620:	f006 f860 	bl	80096e4 <arm_mat_mult_f32>
		arm_mat_mult_f32(&eskf->Fx_P,&eskf->Fx_T,&eskf->P_temp);
 8003624:	f504 5211 	add.w	r2, r4, #9280	; 0x2440
 8003628:	4631      	mov	r1, r6
 800362a:	4628      	mov	r0, r5
 800362c:	3214      	adds	r2, #20
 800362e:	f006 f859 	bl	80096e4 <arm_mat_mult_f32>
}
 8003632:	b01f      	add	sp, #124	; 0x7c
 8003634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				arm_mat_add_f32(&eskf->am,&eskf->am_init,&eskf->am_init);
 8003638:	f504 52b7 	add.w	r2, r4, #5856	; 0x16e0
 800363c:	f504 5084 	add.w	r0, r4, #4224	; 0x1080
 8003640:	4611      	mov	r1, r2
 8003642:	3004      	adds	r0, #4
 8003644:	f006 f906 	bl	8009854 <arm_mat_add_f32>
				eskf->IMU_init_count++;
 8003648:	5963      	ldr	r3, [r4, r5]
 800364a:	3301      	adds	r3, #1
 800364c:	5163      	str	r3, [r4, r5]
 800364e:	e69f      	b.n	8003390 <ESKF_update+0x148>
 8003650:	47ae147b 	.word	0x47ae147b
 8003654:	3f847ae1 	.word	0x3f847ae1
 8003658:	eb1c432d 	.word	0xeb1c432d
 800365c:	3f1a36e2 	.word	0x3f1a36e2
 8003660:	a0b5ed8d 	.word	0xa0b5ed8d
 8003664:	3eb0c6f7 	.word	0x3eb0c6f7
 8003668:	e2308c3a 	.word	0xe2308c3a
 800366c:	3e45798e 	.word	0x3e45798e
 8003670:	3fe00000 	.word	0x3fe00000

08003674 <zeros>:
#include "math.h"

#define MATH_UTILS_SIZE_CHECK

void zeros(arm_matrix_instance_f32* mat){
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003674:	8843      	ldrh	r3, [r0, #2]
 8003676:	8802      	ldrh	r2, [r0, #0]
 8003678:	2100      	movs	r1, #0
 800367a:	fb02 f203 	mul.w	r2, r2, r3
 800367e:	6840      	ldr	r0, [r0, #4]
 8003680:	0092      	lsls	r2, r2, #2
 8003682:	f006 b9bf 	b.w	8009a04 <memset>
 8003686:	bf00      	nop

08003688 <eye>:
}

void eye(arm_matrix_instance_f32* mat){

#ifdef MATH_UTILS_SIZE_CHECK
	if (mat->numCols != mat->numRows){
 8003688:	8842      	ldrh	r2, [r0, #2]
 800368a:	8803      	ldrh	r3, [r0, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d000      	beq.n	8003692 <eye+0xa>
 8003690:	4770      	bx	lr
void eye(arm_matrix_instance_f32* mat){
 8003692:	b510      	push	{r4, lr}
 8003694:	4604      	mov	r4, r0
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003696:	fb02 f202 	mul.w	r2, r2, r2
 800369a:	2100      	movs	r1, #0
 800369c:	0092      	lsls	r2, r2, #2
 800369e:	6840      	ldr	r0, [r0, #4]
 80036a0:	f006 f9b0 	bl	8009a04 <memset>
		return;
	}
#endif
	zeros(mat);
	for(int i = 0; i < (mat->numCols * mat->numRows); i += (mat->numCols+1)){
 80036a4:	8861      	ldrh	r1, [r4, #2]
 80036a6:	8822      	ldrh	r2, [r4, #0]
 80036a8:	fb01 f202 	mul.w	r2, r1, r2
 80036ac:	b14a      	cbz	r2, 80036c2 <eye+0x3a>
 80036ae:	2300      	movs	r3, #0
		mat->pData[i] = 1;
 80036b0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80036b4:	6864      	ldr	r4, [r4, #4]
 80036b6:	3101      	adds	r1, #1
 80036b8:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	for(int i = 0; i < (mat->numCols * mat->numRows); i += (mat->numCols+1)){
 80036bc:	440b      	add	r3, r1
 80036be:	4293      	cmp	r3, r2
 80036c0:	dbfa      	blt.n	80036b8 <eye+0x30>
	}
}
 80036c2:	bd10      	pop	{r4, pc}

080036c4 <matcpy>:

void matcpy(arm_matrix_instance_f32* mat1,arm_matrix_instance_f32* mat2){
 80036c4:	4603      	mov	r3, r0

#ifdef MATH_UTILS_SIZE_CHECK
	if (mat1->numCols != mat2->numCols || mat1->numRows != mat2->numRows){
 80036c6:	680a      	ldr	r2, [r1, #0]
 80036c8:	6800      	ldr	r0, [r0, #0]
 80036ca:	4290      	cmp	r0, r2
 80036cc:	d000      	beq.n	80036d0 <matcpy+0xc>
 80036ce:	4770      	bx	lr
void matcpy(arm_matrix_instance_f32* mat1,arm_matrix_instance_f32* mat2){
 80036d0:	b410      	push	{r4}
		return;
	}
#endif

	memcpy(mat2->pData,mat1->pData,mat1->numCols * mat1->numRows * sizeof(float32_t));
 80036d2:	881a      	ldrh	r2, [r3, #0]
 80036d4:	885c      	ldrh	r4, [r3, #2]
 80036d6:	6848      	ldr	r0, [r1, #4]
 80036d8:	fb02 f204 	mul.w	r2, r2, r4
 80036dc:	6859      	ldr	r1, [r3, #4]
 80036de:	0092      	lsls	r2, r2, #2
}
 80036e0:	bc10      	pop	{r4}
	memcpy(mat2->pData,mat1->pData,mat1->numCols * mat1->numRows * sizeof(float32_t));
 80036e2:	f006 b984 	b.w	80099ee <memcpy>
 80036e6:	bf00      	nop

080036e8 <matcpy2>:


//copy mat2 to mat1 starting at i,j at mat1.
void matcpy2(arm_matrix_instance_f32* mat1,arm_matrix_instance_f32* mat2,int i, int j){
 80036e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	int i2;//row ind in mat2
	int k = i * mat1->numCols + j;
 80036ea:	8846      	ldrh	r6, [r0, #2]

	for(i2 = 0; i2 < mat2->numRows; i2++){
 80036ec:	880c      	ldrh	r4, [r1, #0]
	int k = i * mat1->numCols + j;
 80036ee:	fb02 3606 	mla	r6, r2, r6, r3
	for(i2 = 0; i2 < mat2->numRows; i2++){
 80036f2:	b1a4      	cbz	r4, 800371e <matcpy2+0x36>
 80036f4:	460d      	mov	r5, r1
 80036f6:	4607      	mov	r7, r0
 80036f8:	2400      	movs	r4, #0
		memcpy(mat1->pData+k,mat2->pData + (i2 * mat2->numCols),mat2->numCols*sizeof(float32_t));
 80036fa:	886a      	ldrh	r2, [r5, #2]
 80036fc:	686b      	ldr	r3, [r5, #4]
 80036fe:	fb04 f102 	mul.w	r1, r4, r2
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	0092      	lsls	r2, r2, #2
 8003706:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800370a:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 800370e:	f006 f96e 	bl	80099ee <memcpy>
	for(i2 = 0; i2 < mat2->numRows; i2++){
 8003712:	882b      	ldrh	r3, [r5, #0]
		k += mat1->numCols;
 8003714:	887a      	ldrh	r2, [r7, #2]
	for(i2 = 0; i2 < mat2->numRows; i2++){
 8003716:	3401      	adds	r4, #1
 8003718:	42a3      	cmp	r3, r4
		k += mat1->numCols;
 800371a:	4416      	add	r6, r2
	for(i2 = 0; i2 < mat2->numRows; i2++){
 800371c:	dced      	bgt.n	80036fa <matcpy2+0x12>
	}
}
 800371e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003720 <hat>:
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003720:	880a      	ldrh	r2, [r1, #0]

void hat(arm_matrix_instance_f32* v_, arm_matrix_instance_f32* v_hat_){
 8003722:	b510      	push	{r4, lr}
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003724:	884c      	ldrh	r4, [r1, #2]

	float32_t* v = v_->pData;
	float32_t* v_hat = v_hat_->pData;
 8003726:	684b      	ldr	r3, [r1, #4]
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003728:	fb02 f204 	mul.w	r2, r2, r4
 800372c:	2100      	movs	r1, #0
	float32_t* v = v_->pData;
 800372e:	6844      	ldr	r4, [r0, #4]
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003730:	0092      	lsls	r2, r2, #2
 8003732:	4618      	mov	r0, r3
 8003734:	f006 f966 	bl	8009a04 <memset>

	zeros(v_hat_);

	v_hat[1] = -v[2];
 8003738:	68a2      	ldr	r2, [r4, #8]
 800373a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800373e:	6042      	str	r2, [r0, #4]
	v_hat[2] = v[1];
 8003740:	6862      	ldr	r2, [r4, #4]
 8003742:	6082      	str	r2, [r0, #8]
	v_hat[3] = v[2];
 8003744:	68a2      	ldr	r2, [r4, #8]
 8003746:	60c2      	str	r2, [r0, #12]
	v_hat[5] = -v[0];
 8003748:	6822      	ldr	r2, [r4, #0]
 800374a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800374e:	6142      	str	r2, [r0, #20]
	v_hat[6] = -v[1];
 8003750:	6862      	ldr	r2, [r4, #4]
 8003752:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8003756:	6182      	str	r2, [r0, #24]
	v_hat[7] = v[0];
 8003758:	6822      	ldr	r2, [r4, #0]
 800375a:	61c2      	str	r2, [r0, #28]
}
 800375c:	bd10      	pop	{r4, pc}
 800375e:	bf00      	nop

08003760 <matexp2>:
	v[2] = v_hat[3] - v_hat[1];

	arm_mat_scale_f32(v_,0.5,v_);
}

void matexp2(arm_matrix_instance_f32* phi_, arm_matrix_instance_f32* R_){
 8003760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	float32_t* phi = phi_->pData;
 8003764:	6843      	ldr	r3, [r0, #4]
void matexp2(arm_matrix_instance_f32* phi_, arm_matrix_instance_f32* R_){
 8003766:	460d      	mov	r5, r1
	float32_t phi_norm = sqrt(phi[0]*phi[0] + phi[1]*phi[1] + phi[2]*phi[2]);
 8003768:	6819      	ldr	r1, [r3, #0]
void matexp2(arm_matrix_instance_f32* phi_, arm_matrix_instance_f32* R_){
 800376a:	b096      	sub	sp, #88	; 0x58
 800376c:	4604      	mov	r4, r0
	float32_t phi_norm = sqrt(phi[0]*phi[0] + phi[1]*phi[1] + phi[2]*phi[2]);
 800376e:	4608      	mov	r0, r1
 8003770:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8003774:	689f      	ldr	r7, [r3, #8]
 8003776:	f7fd fb05 	bl	8000d84 <__aeabi_fmul>
 800377a:	4641      	mov	r1, r8
 800377c:	4606      	mov	r6, r0
 800377e:	4640      	mov	r0, r8
 8003780:	f7fd fb00 	bl	8000d84 <__aeabi_fmul>
 8003784:	4601      	mov	r1, r0
 8003786:	4630      	mov	r0, r6
 8003788:	f7fd f9f4 	bl	8000b74 <__addsf3>
 800378c:	4639      	mov	r1, r7
 800378e:	4606      	mov	r6, r0
 8003790:	4638      	mov	r0, r7
 8003792:	f7fd faf7 	bl	8000d84 <__aeabi_fmul>
 8003796:	4601      	mov	r1, r0
 8003798:	4630      	mov	r0, r6
 800379a:	f7fd f9eb 	bl	8000b74 <__addsf3>
 800379e:	f7fc fe43 	bl	8000428 <__aeabi_f2d>
 80037a2:	f008 fdd9 	bl	800c358 <sqrt>
 80037a6:	f7fd f98f 	bl	8000ac8 <__aeabi_d2f>
	float32_t tempmat_data[3*3];
	arm_matrix_instance_f32 u_hat;
	float32_t u_hat_data[3*3];


	arm_mat_init_f32(&tempmat,3,3,tempmat_data);
 80037aa:	2203      	movs	r2, #3
 80037ac:	ab04      	add	r3, sp, #16
 80037ae:	4611      	mov	r1, r2
	float32_t phi_norm = sqrt(phi[0]*phi[0] + phi[1]*phi[1] + phi[2]*phi[2]);
 80037b0:	4606      	mov	r6, r0
	arm_mat_init_f32(&tempmat,3,3,tempmat_data);
 80037b2:	4668      	mov	r0, sp
 80037b4:	f006 f84a 	bl	800984c <arm_mat_init_f32>
	arm_mat_init_f32(&u_hat,3,3,u_hat_data);
 80037b8:	2203      	movs	r2, #3
 80037ba:	ab0d      	add	r3, sp, #52	; 0x34
 80037bc:	4611      	mov	r1, r2
 80037be:	a802      	add	r0, sp, #8
 80037c0:	f006 f844 	bl	800984c <arm_mat_init_f32>
	if (mat->numCols != mat->numRows){
 80037c4:	886a      	ldrh	r2, [r5, #2]
 80037c6:	882b      	ldrh	r3, [r5, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d05a      	beq.n	8003882 <matexp2+0x122>
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 80037cc:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80037d0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
	float32_t* v_hat = v_hat_->pData;
 80037d4:	9b03      	ldr	r3, [sp, #12]
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 80037d6:	fb02 f201 	mul.w	r2, r2, r1
 80037da:	4618      	mov	r0, r3
 80037dc:	0092      	lsls	r2, r2, #2
 80037de:	2100      	movs	r1, #0
	float32_t* v = v_->pData;
 80037e0:	6864      	ldr	r4, [r4, #4]
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 80037e2:	f006 f90f 	bl	8009a04 <memset>
 80037e6:	4603      	mov	r3, r0
	v_hat[1] = -v[2];
 80037e8:	68a2      	ldr	r2, [r4, #8]
	//mat = eye(3) + sin(phi) * phi_hat + (1 - cos(phi)) * (phi_hat^2);

	eye(R_);

	hat(phi_,&u_hat);
	arm_mat_scale_f32(&u_hat, 1/phi_norm, &u_hat);
 80037ea:	4631      	mov	r1, r6
	v_hat[1] = -v[2];
 80037ec:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80037f0:	6042      	str	r2, [r0, #4]
	v_hat[2] = v[1];
 80037f2:	6862      	ldr	r2, [r4, #4]
	arm_mat_scale_f32(&u_hat, 1/phi_norm, &u_hat);
 80037f4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
	v_hat[2] = v[1];
 80037f8:	609a      	str	r2, [r3, #8]
	v_hat[3] = v[2];
 80037fa:	68a2      	ldr	r2, [r4, #8]
 80037fc:	60da      	str	r2, [r3, #12]
	v_hat[5] = -v[0];
 80037fe:	6822      	ldr	r2, [r4, #0]
 8003800:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8003804:	615a      	str	r2, [r3, #20]
	v_hat[6] = -v[1];
 8003806:	6862      	ldr	r2, [r4, #4]
 8003808:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800380c:	619a      	str	r2, [r3, #24]
	v_hat[7] = v[0];
 800380e:	6822      	ldr	r2, [r4, #0]
 8003810:	61da      	str	r2, [r3, #28]
	arm_mat_scale_f32(&u_hat, 1/phi_norm, &u_hat);
 8003812:	f7fd fb6b 	bl	8000eec <__aeabi_fdiv>
 8003816:	aa02      	add	r2, sp, #8
 8003818:	4601      	mov	r1, r0
 800381a:	4610      	mov	r0, r2
 800381c:	f005 ff00 	bl	8009620 <arm_mat_scale_f32>
	arm_mat_scale_f32(&u_hat,sin(phi_norm),&tempmat);
 8003820:	4630      	mov	r0, r6
 8003822:	f7fc fe01 	bl	8000428 <__aeabi_f2d>
 8003826:	4606      	mov	r6, r0
 8003828:	460f      	mov	r7, r1
 800382a:	f008 fcff 	bl	800c22c <sin>
 800382e:	f7fd f94b 	bl	8000ac8 <__aeabi_d2f>
 8003832:	466a      	mov	r2, sp
 8003834:	4601      	mov	r1, r0
 8003836:	a802      	add	r0, sp, #8
 8003838:	f005 fef2 	bl	8009620 <arm_mat_scale_f32>
	arm_mat_add_f32(R_,&tempmat,R_);
 800383c:	462a      	mov	r2, r5
 800383e:	4669      	mov	r1, sp
 8003840:	4628      	mov	r0, r5
 8003842:	f006 f807 	bl	8009854 <arm_mat_add_f32>

	arm_mat_mult_f32(&u_hat,&u_hat,&tempmat);
 8003846:	a902      	add	r1, sp, #8
 8003848:	466a      	mov	r2, sp
 800384a:	4608      	mov	r0, r1
 800384c:	f005 ff4a 	bl	80096e4 <arm_mat_mult_f32>
	arm_mat_scale_f32(&tempmat,1-cos(phi_norm),&tempmat);
 8003850:	4630      	mov	r0, r6
 8003852:	4639      	mov	r1, r7
 8003854:	f008 fcb4 	bl	800c1c0 <cos>
 8003858:	460b      	mov	r3, r1
 800385a:	4602      	mov	r2, r0
 800385c:	4915      	ldr	r1, [pc, #84]	; (80038b4 <matexp2+0x154>)
 800385e:	2000      	movs	r0, #0
 8003860:	f7fc fc82 	bl	8000168 <__aeabi_dsub>
 8003864:	f7fd f930 	bl	8000ac8 <__aeabi_d2f>
 8003868:	466a      	mov	r2, sp
 800386a:	4601      	mov	r1, r0
 800386c:	4668      	mov	r0, sp
 800386e:	f005 fed7 	bl	8009620 <arm_mat_scale_f32>
	arm_mat_add_f32(R_,&tempmat,R_);
 8003872:	462a      	mov	r2, r5
 8003874:	4669      	mov	r1, sp
 8003876:	4628      	mov	r0, r5
 8003878:	f005 ffec 	bl	8009854 <arm_mat_add_f32>
}
 800387c:	b016      	add	sp, #88	; 0x58
 800387e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memset(mat->pData,0,mat->numCols * mat->numRows * sizeof(float32_t));
 8003882:	fb02 f202 	mul.w	r2, r2, r2
 8003886:	2100      	movs	r1, #0
 8003888:	0092      	lsls	r2, r2, #2
 800388a:	6868      	ldr	r0, [r5, #4]
 800388c:	f006 f8ba 	bl	8009a04 <memset>
	for(int i = 0; i < (mat->numCols * mat->numRows); i += (mat->numCols+1)){
 8003890:	8869      	ldrh	r1, [r5, #2]
 8003892:	882a      	ldrh	r2, [r5, #0]
 8003894:	fb01 f202 	mul.w	r2, r1, r2
 8003898:	2a00      	cmp	r2, #0
 800389a:	d097      	beq.n	80037cc <matexp2+0x6c>
 800389c:	2300      	movs	r3, #0
		mat->pData[i] = 1;
 800389e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80038a2:	686f      	ldr	r7, [r5, #4]
 80038a4:	3101      	adds	r1, #1
 80038a6:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
	for(int i = 0; i < (mat->numCols * mat->numRows); i += (mat->numCols+1)){
 80038aa:	440b      	add	r3, r1
 80038ac:	429a      	cmp	r2, r3
 80038ae:	dcfa      	bgt.n	80038a6 <matexp2+0x146>
 80038b0:	e78c      	b.n	80037cc <matexp2+0x6c>
 80038b2:	bf00      	nop
 80038b4:	3ff00000 	.word	0x3ff00000

080038b8 <calibrate_mag_reading>:
#include "dataProcessing.h"
#include "string.h"
#include "stdlib.h"
#include "math.h"

void calibrate_mag_reading(){
 80038b8:	e92d 4fd0 	stmdb	sp!, {r4, r6, r7, r8, r9, sl, fp, lr}

	double m[3]; //magnatic readings minus offset

	m[0] = XIMU_sens.mx - MAG_X_OFFSET;
 80038bc:	a34a      	add	r3, pc, #296	; (adr r3, 80039e8 <calibrate_mag_reading+0x130>)
 80038be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c2:	4c61      	ldr	r4, [pc, #388]	; (8003a48 <calibrate_mag_reading+0x190>)
void calibrate_mag_reading(){
 80038c4:	b082      	sub	sp, #8
	m[0] = XIMU_sens.mx - MAG_X_OFFSET;
 80038c6:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
 80038ca:	f7fc fc4d 	bl	8000168 <__aeabi_dsub>
	m[1] = XIMU_sens.my - MAG_Y_OFFSET;
 80038ce:	a348      	add	r3, pc, #288	; (adr r3, 80039f0 <calibrate_mag_reading+0x138>)
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
	m[0] = XIMU_sens.mx - MAG_X_OFFSET;
 80038d4:	4606      	mov	r6, r0
 80038d6:	460f      	mov	r7, r1
	m[1] = XIMU_sens.my - MAG_Y_OFFSET;
 80038d8:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
 80038dc:	f7fc fc44 	bl	8000168 <__aeabi_dsub>
	m[2] = XIMU_sens.mz - MAG_Z_OFFSET;
 80038e0:	a345      	add	r3, pc, #276	; (adr r3, 80039f8 <calibrate_mag_reading+0x140>)
 80038e2:	e9d3 2300 	ldrd	r2, r3, [r3]
	m[1] = XIMU_sens.my - MAG_Y_OFFSET;
 80038e6:	4682      	mov	sl, r0
 80038e8:	468b      	mov	fp, r1
	m[2] = XIMU_sens.mz - MAG_Z_OFFSET;
 80038ea:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
 80038ee:	f7fc fc3d 	bl	800016c <__adddf3>

	XIMU_sens.mx = MAG_TRANSF_11*m[0] + MAG_TRANSF_12*m[1] + MAG_TRANSF_13*m[2];
 80038f2:	a343      	add	r3, pc, #268	; (adr r3, 8003a00 <calibrate_mag_reading+0x148>)
 80038f4:	e9d3 2300 	ldrd	r2, r3, [r3]
	m[2] = XIMU_sens.mz - MAG_Z_OFFSET;
 80038f8:	e9cd 0100 	strd	r0, r1, [sp]
	XIMU_sens.mx = MAG_TRANSF_11*m[0] + MAG_TRANSF_12*m[1] + MAG_TRANSF_13*m[2];
 80038fc:	4630      	mov	r0, r6
 80038fe:	4639      	mov	r1, r7
 8003900:	f7fc fdea 	bl	80004d8 <__aeabi_dmul>
 8003904:	a340      	add	r3, pc, #256	; (adr r3, 8003a08 <calibrate_mag_reading+0x150>)
 8003906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390a:	4680      	mov	r8, r0
 800390c:	4689      	mov	r9, r1
 800390e:	4650      	mov	r0, sl
 8003910:	4659      	mov	r1, fp
 8003912:	f7fc fde1 	bl	80004d8 <__aeabi_dmul>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4640      	mov	r0, r8
 800391c:	4649      	mov	r1, r9
 800391e:	f7fc fc25 	bl	800016c <__adddf3>
 8003922:	a33b      	add	r3, pc, #236	; (adr r3, 8003a10 <calibrate_mag_reading+0x158>)
 8003924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003928:	4680      	mov	r8, r0
 800392a:	4689      	mov	r9, r1
 800392c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003930:	f7fc fdd2 	bl	80004d8 <__aeabi_dmul>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4640      	mov	r0, r8
 800393a:	4649      	mov	r1, r9
 800393c:	f7fc fc16 	bl	800016c <__adddf3>
	XIMU_sens.my = MAG_TRANSF_21*m[0] + MAG_TRANSF_22*m[1] + MAG_TRANSF_23*m[2];
 8003940:	a335      	add	r3, pc, #212	; (adr r3, 8003a18 <calibrate_mag_reading+0x160>)
 8003942:	e9d3 2300 	ldrd	r2, r3, [r3]
	XIMU_sens.mx = MAG_TRANSF_11*m[0] + MAG_TRANSF_12*m[1] + MAG_TRANSF_13*m[2];
 8003946:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
	XIMU_sens.my = MAG_TRANSF_21*m[0] + MAG_TRANSF_22*m[1] + MAG_TRANSF_23*m[2];
 800394a:	4630      	mov	r0, r6
 800394c:	4639      	mov	r1, r7
 800394e:	f7fc fdc3 	bl	80004d8 <__aeabi_dmul>
 8003952:	a333      	add	r3, pc, #204	; (adr r3, 8003a20 <calibrate_mag_reading+0x168>)
 8003954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003958:	4680      	mov	r8, r0
 800395a:	4689      	mov	r9, r1
 800395c:	4650      	mov	r0, sl
 800395e:	4659      	mov	r1, fp
 8003960:	f7fc fdba 	bl	80004d8 <__aeabi_dmul>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4640      	mov	r0, r8
 800396a:	4649      	mov	r1, r9
 800396c:	f7fc fbfe 	bl	800016c <__adddf3>
 8003970:	a32d      	add	r3, pc, #180	; (adr r3, 8003a28 <calibrate_mag_reading+0x170>)
 8003972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003976:	4680      	mov	r8, r0
 8003978:	4689      	mov	r9, r1
 800397a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800397e:	f7fc fdab 	bl	80004d8 <__aeabi_dmul>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4640      	mov	r0, r8
 8003988:	4649      	mov	r1, r9
 800398a:	f7fc fbef 	bl	800016c <__adddf3>
	XIMU_sens.mz = MAG_TRANSF_31*m[0] + MAG_TRANSF_32*m[1] + MAG_TRANSF_33*m[2];
 800398e:	a328      	add	r3, pc, #160	; (adr r3, 8003a30 <calibrate_mag_reading+0x178>)
 8003990:	e9d3 2300 	ldrd	r2, r3, [r3]
	XIMU_sens.my = MAG_TRANSF_21*m[0] + MAG_TRANSF_22*m[1] + MAG_TRANSF_23*m[2];
 8003994:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
	XIMU_sens.mz = MAG_TRANSF_31*m[0] + MAG_TRANSF_32*m[1] + MAG_TRANSF_33*m[2];
 8003998:	4630      	mov	r0, r6
 800399a:	4639      	mov	r1, r7
 800399c:	f7fc fd9c 	bl	80004d8 <__aeabi_dmul>
 80039a0:	a325      	add	r3, pc, #148	; (adr r3, 8003a38 <calibrate_mag_reading+0x180>)
 80039a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a6:	4606      	mov	r6, r0
 80039a8:	460f      	mov	r7, r1
 80039aa:	4650      	mov	r0, sl
 80039ac:	4659      	mov	r1, fp
 80039ae:	f7fc fd93 	bl	80004d8 <__aeabi_dmul>
 80039b2:	4602      	mov	r2, r0
 80039b4:	460b      	mov	r3, r1
 80039b6:	4630      	mov	r0, r6
 80039b8:	4639      	mov	r1, r7
 80039ba:	f7fc fbd7 	bl	800016c <__adddf3>
 80039be:	a320      	add	r3, pc, #128	; (adr r3, 8003a40 <calibrate_mag_reading+0x188>)
 80039c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c4:	4606      	mov	r6, r0
 80039c6:	460f      	mov	r7, r1
 80039c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039cc:	f7fc fd84 	bl	80004d8 <__aeabi_dmul>
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4630      	mov	r0, r6
 80039d6:	4639      	mov	r1, r7
 80039d8:	f7fc fbc8 	bl	800016c <__adddf3>
 80039dc:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
}
 80039e0:	b002      	add	sp, #8
 80039e2:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 80039e6:	bf00      	nop
 80039e8:	810624dd 	.word	0x810624dd
 80039ec:	40615795 	.word	0x40615795
 80039f0:	189374bc 	.word	0x189374bc
 80039f4:	40706804 	.word	0x40706804
 80039f8:	fdf3b646 	.word	0xfdf3b646
 80039fc:	405268d4 	.word	0x405268d4
 8003a00:	51eb851f 	.word	0x51eb851f
 8003a04:	3ff31eb8 	.word	0x3ff31eb8
 8003a08:	e5604189 	.word	0xe5604189
 8003a0c:	bfab22d0 	.word	0xbfab22d0
 8003a10:	53f7ced9 	.word	0x53f7ced9
 8003a14:	3faba5e3 	.word	0x3faba5e3
 8003a18:	020c49ba 	.word	0x020c49ba
 8003a1c:	bfa6872b 	.word	0xbfa6872b
 8003a20:	78d4fdf4 	.word	0x78d4fdf4
 8003a24:	3ff326e9 	.word	0x3ff326e9
 8003a28:	47ae147b 	.word	0x47ae147b
 8003a2c:	3f847ae1 	.word	0x3f847ae1
 8003a30:	76c8b439 	.word	0x76c8b439
 8003a34:	bf9a9fbe 	.word	0xbf9a9fbe
 8003a38:	76c8b439 	.word	0x76c8b439
 8003a3c:	bf8a9fbe 	.word	0xbf8a9fbe
 8003a40:	a5e353f8 	.word	0xa5e353f8
 8003a44:	3ff2c49b 	.word	0x3ff2c49b
 8003a48:	200005f8 	.word	0x200005f8

08003a4c <calc_absolute_acceleration>:

void calc_absolute_acceleration() {
 8003a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	double ax = XIMU_sens.ax,	ay = XIMU_sens.ay,	az = XIMU_sens.az;
 8003a50:	49c9      	ldr	r1, [pc, #804]	; (8003d78 <calc_absolute_acceleration+0x32c>)
void calc_absolute_acceleration() {
 8003a52:	b099      	sub	sp, #100	; 0x64
	double q0 = XIMU_sens.q0,	q1 = XIMU_sens.q1,	q2 = XIMU_sens.q2,	q3 = XIMU_sens.q3;
 8003a54:	e9d1 8900 	ldrd	r8, r9, [r1]
 8003a58:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
	double ax = XIMU_sens.ax,	ay = XIMU_sens.ay,	az = XIMU_sens.az;
 8003a5c:	e9d1 4508 	ldrd	r4, r5, [r1, #32]
 8003a60:	e9d1 ab0c 	ldrd	sl, fp, [r1, #48]	; 0x30
	double q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3, norm_2;
	q0q0 = q0 * q0;
 8003a64:	4642      	mov	r2, r8
 8003a66:	464b      	mov	r3, r9
	double ax = XIMU_sens.ax,	ay = XIMU_sens.ay,	az = XIMU_sens.az;
 8003a68:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003a6c:	e9d1 450a 	ldrd	r4, r5, [r1, #40]	; 0x28
 8003a70:	e9cd ab04 	strd	sl, fp, [sp, #16]
	double q0 = XIMU_sens.q0,	q1 = XIMU_sens.q1,	q2 = XIMU_sens.q2,	q3 = XIMU_sens.q3;
 8003a74:	e9d1 ab06 	ldrd	sl, fp, [r1, #24]
	double ax = XIMU_sens.ax,	ay = XIMU_sens.ay,	az = XIMU_sens.az;
 8003a78:	e9cd 4500 	strd	r4, r5, [sp]
	double q0 = XIMU_sens.q0,	q1 = XIMU_sens.q1,	q2 = XIMU_sens.q2,	q3 = XIMU_sens.q3;
 8003a7c:	e9d1 4504 	ldrd	r4, r5, [r1, #16]
	q0q0 = q0 * q0;
 8003a80:	4640      	mov	r0, r8
 8003a82:	4649      	mov	r1, r9
 8003a84:	f7fc fd28 	bl	80004d8 <__aeabi_dmul>
	q0q1 = q0 * q1;
 8003a88:	4632      	mov	r2, r6
	q0q0 = q0 * q0;
 8003a8a:	e9cd 0106 	strd	r0, r1, [sp, #24]
	q0q1 = q0 * q1;
 8003a8e:	463b      	mov	r3, r7
 8003a90:	4640      	mov	r0, r8
 8003a92:	4649      	mov	r1, r9
 8003a94:	f7fc fd20 	bl	80004d8 <__aeabi_dmul>
	q0q2 = q0 * q2;
 8003a98:	4622      	mov	r2, r4
	q0q1 = q0 * q1;
 8003a9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	q0q2 = q0 * q2;
 8003a9e:	462b      	mov	r3, r5
 8003aa0:	4640      	mov	r0, r8
 8003aa2:	4649      	mov	r1, r9
 8003aa4:	f7fc fd18 	bl	80004d8 <__aeabi_dmul>
	q0q3 = q0 * q3;
 8003aa8:	4652      	mov	r2, sl
	q0q2 = q0 * q2;
 8003aaa:	e9cd 0108 	strd	r0, r1, [sp, #32]
	q0q3 = q0 * q3;
 8003aae:	465b      	mov	r3, fp
 8003ab0:	4640      	mov	r0, r8
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	f7fc fd10 	bl	80004d8 <__aeabi_dmul>
	q1q1 = q1 * q1;
 8003ab8:	4632      	mov	r2, r6
	q0q3 = q0 * q3;
 8003aba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	q1q1 = q1 * q1;
 8003abe:	463b      	mov	r3, r7
 8003ac0:	4630      	mov	r0, r6
 8003ac2:	4639      	mov	r1, r7
 8003ac4:	f7fc fd08 	bl	80004d8 <__aeabi_dmul>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ad0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8003ad4:	f7fc fb4a 	bl	800016c <__adddf3>
	q1q2 = q1 * q2;
 8003ad8:	4622      	mov	r2, r4
 8003ada:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003ade:	462b      	mov	r3, r5
 8003ae0:	4630      	mov	r0, r6
 8003ae2:	4639      	mov	r1, r7
 8003ae4:	f7fc fcf8 	bl	80004d8 <__aeabi_dmul>
	q1q3 = q1 * q3;
 8003ae8:	4652      	mov	r2, sl
	q1q2 = q1 * q2;
 8003aea:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	q1q3 = q1 * q3;
 8003aee:	465b      	mov	r3, fp
 8003af0:	4630      	mov	r0, r6
 8003af2:	4639      	mov	r1, r7
 8003af4:	f7fc fcf0 	bl	80004d8 <__aeabi_dmul>
	q2q2 = q2 * q2;
 8003af8:	4622      	mov	r2, r4
	q1q3 = q1 * q3;
 8003afa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	q2q2 = q2 * q2;
 8003afe:	462b      	mov	r3, r5
 8003b00:	4620      	mov	r0, r4
 8003b02:	4629      	mov	r1, r5
 8003b04:	f7fc fce8 	bl	80004d8 <__aeabi_dmul>
	q2q3 = q2 * q3;
 8003b08:	4652      	mov	r2, sl
	q2q2 = q2 * q2;
 8003b0a:	4680      	mov	r8, r0
 8003b0c:	4689      	mov	r9, r1
	q2q3 = q2 * q3;
 8003b0e:	465b      	mov	r3, fp
 8003b10:	4620      	mov	r0, r4
 8003b12:	4629      	mov	r1, r5
 8003b14:	f7fc fce0 	bl	80004d8 <__aeabi_dmul>
	q3q3 = q3 * q3;
 8003b18:	4652      	mov	r2, sl
	q2q3 = q2 * q3;
 8003b1a:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
	q3q3 = q3 * q3;
 8003b1e:	465b      	mov	r3, fp
 8003b20:	4650      	mov	r0, sl
 8003b22:	4659      	mov	r1, fp
 8003b24:	f7fc fcd8 	bl	80004d8 <__aeabi_dmul>
 8003b28:	e9dd 4500 	ldrd	r4, r5, [sp]
 8003b2c:	4682      	mov	sl, r0
 8003b2e:	468b      	mov	fp, r1
 8003b30:	4622      	mov	r2, r4
 8003b32:	462b      	mov	r3, r5
 8003b34:	4620      	mov	r0, r4
 8003b36:	4629      	mov	r1, r5
 8003b38:	f7fc fb18 	bl	800016c <__adddf3>
	norm_2 = q0q0 + q1q1 + q2q2 + q3q3;
 8003b3c:	4652      	mov	r2, sl
 8003b3e:	4604      	mov	r4, r0
 8003b40:	460d      	mov	r5, r1
 8003b42:	465b      	mov	r3, fp
 8003b44:	4640      	mov	r0, r8
 8003b46:	4649      	mov	r1, r9
 8003b48:	f7fc fb10 	bl	800016c <__adddf3>
 8003b4c:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 8003b50:	4632      	mov	r2, r6
 8003b52:	463b      	mov	r3, r7
 8003b54:	f7fc fb0a 	bl	800016c <__adddf3>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	4987      	ldr	r1, [pc, #540]	; (8003d7c <calc_absolute_acceleration+0x330>)
 8003b60:	f7fc fde4 	bl	800072c <__aeabi_ddiv>

	XIMU_u.ax_abs = (ax*q0q0 + 2*az*q0q2 - 2*ay*q0q3 + ax*q1q1 + 2*ay*q1q2 + 2*az*q1q3 - ax*q2q2 - ax*q3q3)/norm_2;
 8003b64:	4632      	mov	r2, r6
 8003b66:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003b6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b6e:	463b      	mov	r3, r7
 8003b70:	f7fc fcb2 	bl	80004d8 <__aeabi_dmul>
 8003b74:	4642      	mov	r2, r8
 8003b76:	4606      	mov	r6, r0
 8003b78:	460f      	mov	r7, r1
 8003b7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b7e:	464b      	mov	r3, r9
 8003b80:	f7fc fcaa 	bl	80004d8 <__aeabi_dmul>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4630      	mov	r0, r6
 8003b8a:	4639      	mov	r1, r7
 8003b8c:	f7fc faec 	bl	8000168 <__aeabi_dsub>
 8003b90:	4622      	mov	r2, r4
 8003b92:	4606      	mov	r6, r0
 8003b94:	460f      	mov	r7, r1
 8003b96:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8003b9a:	462b      	mov	r3, r5
 8003b9c:	f7fc fc9c 	bl	80004d8 <__aeabi_dmul>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4630      	mov	r0, r6
 8003ba6:	4639      	mov	r1, r7
 8003ba8:	f7fc fae0 	bl	800016c <__adddf3>
 8003bac:	4652      	mov	r2, sl
 8003bae:	4606      	mov	r6, r0
 8003bb0:	460f      	mov	r7, r1
 8003bb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003bb6:	465b      	mov	r3, fp
 8003bb8:	f7fc fc8e 	bl	80004d8 <__aeabi_dmul>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4630      	mov	r0, r6
 8003bc2:	4639      	mov	r1, r7
 8003bc4:	f7fc fad0 	bl	8000168 <__aeabi_dsub>
 8003bc8:	4622      	mov	r2, r4
 8003bca:	4606      	mov	r6, r0
 8003bcc:	460f      	mov	r7, r1
 8003bce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003bd2:	462b      	mov	r3, r5
 8003bd4:	f7fc fc80 	bl	80004d8 <__aeabi_dmul>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4630      	mov	r0, r6
 8003bde:	4639      	mov	r1, r7
 8003be0:	f7fc fac2 	bl	8000168 <__aeabi_dsub>
 8003be4:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8003be8:	4604      	mov	r4, r0
 8003bea:	460d      	mov	r5, r1
 8003bec:	4632      	mov	r2, r6
 8003bee:	463b      	mov	r3, r7
 8003bf0:	4630      	mov	r0, r6
 8003bf2:	4639      	mov	r1, r7
 8003bf4:	f7fc faba 	bl	800016c <__adddf3>
 8003bf8:	4606      	mov	r6, r0
 8003bfa:	460f      	mov	r7, r1
 8003bfc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	f7fc fab2 	bl	800016c <__adddf3>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4630      	mov	r0, r6
 8003c0e:	4639      	mov	r1, r7
 8003c10:	f7fc faac 	bl	800016c <__adddf3>
 8003c14:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8003c18:	4632      	mov	r2, r6
 8003c1a:	463b      	mov	r3, r7
 8003c1c:	f7fc fc5c 	bl	80004d8 <__aeabi_dmul>
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	4620      	mov	r0, r4
 8003c26:	4629      	mov	r1, r5
 8003c28:	f7fc faa0 	bl	800016c <__adddf3>
 8003c2c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003c30:	f7fc fc52 	bl	80004d8 <__aeabi_dmul>
 8003c34:	4c52      	ldr	r4, [pc, #328]	; (8003d80 <calc_absolute_acceleration+0x334>)
 8003c36:	4632      	mov	r2, r6
 8003c38:	e9c4 0100 	strd	r0, r1, [r4]
 8003c3c:	463b      	mov	r3, r7
 8003c3e:	4630      	mov	r0, r6
 8003c40:	4639      	mov	r1, r7
 8003c42:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003c46:	f7fc fa91 	bl	800016c <__adddf3>
	XIMU_u.ay_abs = (ay*q0q0 - 2*az*q0q1 + 2*ax*q0q3 - ay*q1q1 + 2*ax*q1q2 + ay*q2q2 + 2*az*q2q3 - ay*q3q3)/norm_2;
 8003c4a:	4642      	mov	r2, r8
 8003c4c:	4604      	mov	r4, r0
 8003c4e:	460d      	mov	r5, r1
 8003c50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c54:	464b      	mov	r3, r9
 8003c56:	f7fc fa89 	bl	800016c <__adddf3>
 8003c5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c5e:	f7fc fc3b 	bl	80004d8 <__aeabi_dmul>
 8003c62:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8003c66:	4606      	mov	r6, r0
 8003c68:	460f      	mov	r7, r1
 8003c6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003c6e:	f7fc fc33 	bl	80004d8 <__aeabi_dmul>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4630      	mov	r0, r6
 8003c78:	4639      	mov	r1, r7
 8003c7a:	f7fc fa75 	bl	8000168 <__aeabi_dsub>
 8003c7e:	4622      	mov	r2, r4
 8003c80:	4606      	mov	r6, r0
 8003c82:	460f      	mov	r7, r1
 8003c84:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8003c88:	462b      	mov	r3, r5
 8003c8a:	f7fc fc25 	bl	80004d8 <__aeabi_dmul>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4630      	mov	r0, r6
 8003c94:	4639      	mov	r1, r7
 8003c96:	f7fc fa69 	bl	800016c <__adddf3>
 8003c9a:	4652      	mov	r2, sl
 8003c9c:	4606      	mov	r6, r0
 8003c9e:	460f      	mov	r7, r1
 8003ca0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ca4:	465b      	mov	r3, fp
 8003ca6:	f7fc fc17 	bl	80004d8 <__aeabi_dmul>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4630      	mov	r0, r6
 8003cb0:	4639      	mov	r1, r7
 8003cb2:	f7fc fa59 	bl	8000168 <__aeabi_dsub>
 8003cb6:	4622      	mov	r2, r4
 8003cb8:	4606      	mov	r6, r0
 8003cba:	460f      	mov	r7, r1
 8003cbc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003cc0:	462b      	mov	r3, r5
 8003cc2:	f7fc fc09 	bl	80004d8 <__aeabi_dmul>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4630      	mov	r0, r6
 8003ccc:	4639      	mov	r1, r7
 8003cce:	f7fc fa4b 	bl	8000168 <__aeabi_dsub>
 8003cd2:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8003cd6:	4604      	mov	r4, r0
 8003cd8:	460d      	mov	r5, r1
 8003cda:	4610      	mov	r0, r2
 8003cdc:	4619      	mov	r1, r3
 8003cde:	f7fc fa45 	bl	800016c <__adddf3>
 8003ce2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003ce6:	4606      	mov	r6, r0
 8003ce8:	460f      	mov	r7, r1
 8003cea:	4610      	mov	r0, r2
 8003cec:	4619      	mov	r1, r3
 8003cee:	f7fc fa3d 	bl	800016c <__adddf3>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4630      	mov	r0, r6
 8003cf8:	4639      	mov	r1, r7
 8003cfa:	f7fc fa37 	bl	800016c <__adddf3>
 8003cfe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003d02:	4632      	mov	r2, r6
 8003d04:	463b      	mov	r3, r7
 8003d06:	f7fc fbe7 	bl	80004d8 <__aeabi_dmul>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4620      	mov	r0, r4
 8003d10:	4629      	mov	r1, r5
 8003d12:	f7fc fa2b 	bl	800016c <__adddf3>
 8003d16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003d1a:	f7fc fbdd 	bl	80004d8 <__aeabi_dmul>
 8003d1e:	4c18      	ldr	r4, [pc, #96]	; (8003d80 <calc_absolute_acceleration+0x334>)
 8003d20:	4632      	mov	r2, r6
 8003d22:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003d26:	463b      	mov	r3, r7
 8003d28:	4630      	mov	r0, r6
 8003d2a:	4639      	mov	r1, r7
 8003d2c:	f7fc fa1e 	bl	800016c <__adddf3>
	XIMU_u.az_abs = (az*q0q0 + 2*ay*q0q1 - 2*ax*q0q2 - az*q1q1 + 2*ax*q1q3 - az*q2q2 + 2*ay*q2q3 + az*q3q3)/norm_2;
 8003d30:	4652      	mov	r2, sl
 8003d32:	4604      	mov	r4, r0
 8003d34:	460d      	mov	r5, r1
 8003d36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d3a:	465b      	mov	r3, fp
 8003d3c:	f7fc fa16 	bl	800016c <__adddf3>
 8003d40:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8003d44:	4652      	mov	r2, sl
 8003d46:	465b      	mov	r3, fp
 8003d48:	f7fc fbc6 	bl	80004d8 <__aeabi_dmul>
 8003d4c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8003d50:	4606      	mov	r6, r0
 8003d52:	460f      	mov	r7, r1
 8003d54:	4650      	mov	r0, sl
 8003d56:	4659      	mov	r1, fp
 8003d58:	f7fc fbbe 	bl	80004d8 <__aeabi_dmul>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4630      	mov	r0, r6
 8003d62:	4639      	mov	r1, r7
 8003d64:	f7fc fa00 	bl	8000168 <__aeabi_dsub>
 8003d68:	4622      	mov	r2, r4
 8003d6a:	4606      	mov	r6, r0
 8003d6c:	460f      	mov	r7, r1
 8003d6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003d72:	462b      	mov	r3, r5
 8003d74:	e006      	b.n	8003d84 <calc_absolute_acceleration+0x338>
 8003d76:	bf00      	nop
 8003d78:	200005f8 	.word	0x200005f8
 8003d7c:	3ff00000 	.word	0x3ff00000
 8003d80:	20000778 	.word	0x20000778
 8003d84:	f7fc fba8 	bl	80004d8 <__aeabi_dmul>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4630      	mov	r0, r6
 8003d8e:	4639      	mov	r1, r7
 8003d90:	f7fc f9ec 	bl	800016c <__adddf3>
 8003d94:	4642      	mov	r2, r8
 8003d96:	4606      	mov	r6, r0
 8003d98:	460f      	mov	r7, r1
 8003d9a:	464b      	mov	r3, r9
 8003d9c:	4650      	mov	r0, sl
 8003d9e:	4659      	mov	r1, fp
 8003da0:	f7fc fb9a 	bl	80004d8 <__aeabi_dmul>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	4630      	mov	r0, r6
 8003daa:	4639      	mov	r1, r7
 8003dac:	f7fc f9dc 	bl	8000168 <__aeabi_dsub>
 8003db0:	4622      	mov	r2, r4
 8003db2:	4606      	mov	r6, r0
 8003db4:	460f      	mov	r7, r1
 8003db6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003dba:	462b      	mov	r3, r5
 8003dbc:	f7fc fb8c 	bl	80004d8 <__aeabi_dmul>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	4630      	mov	r0, r6
 8003dc6:	4639      	mov	r1, r7
 8003dc8:	f7fc f9ce 	bl	8000168 <__aeabi_dsub>
 8003dcc:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8003dd0:	4604      	mov	r4, r0
 8003dd2:	460d      	mov	r5, r1
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	f7fc f9c8 	bl	800016c <__adddf3>
 8003ddc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003de0:	4606      	mov	r6, r0
 8003de2:	460f      	mov	r7, r1
 8003de4:	4610      	mov	r0, r2
 8003de6:	4619      	mov	r1, r3
 8003de8:	f7fc f9c0 	bl	800016c <__adddf3>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4630      	mov	r0, r6
 8003df2:	4639      	mov	r1, r7
 8003df4:	f7fc f9ba 	bl	800016c <__adddf3>
 8003df8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003dfc:	f7fc fb6c 	bl	80004d8 <__aeabi_dmul>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4620      	mov	r0, r4
 8003e06:	4629      	mov	r1, r5
 8003e08:	f7fc f9b0 	bl	800016c <__adddf3>
 8003e0c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003e10:	f7fc fb62 	bl	80004d8 <__aeabi_dmul>
 8003e14:	4c02      	ldr	r4, [pc, #8]	; (8003e20 <calc_absolute_acceleration+0x3d4>)
 8003e16:	e9c4 0104 	strd	r0, r1, [r4, #16]
}
 8003e1a:	b019      	add	sp, #100	; 0x64
 8003e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e20:	20000778 	.word	0x20000778

08003e24 <calc_magnetic_orientation>:
	v[0] /= norm;
	v[1] /= norm;
	v[2] /= norm;
}

void calc_magnetic_orientation(){
 8003e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	double g[3];
	g[0] = -XIMU_sens.ax;
 8003e28:	4cd8      	ldr	r4, [pc, #864]	; (800418c <calc_magnetic_orientation+0x368>)
void calc_magnetic_orientation(){
 8003e2a:	b091      	sub	sp, #68	; 0x44
	g[0] = -XIMU_sens.ax;
 8003e2c:	e9d4 8908 	ldrd	r8, r9, [r4, #32]
	g[1] = -XIMU_sens.ay;
	g[2] = -XIMU_sens.az;
 8003e30:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 8003e34:	4642      	mov	r2, r8
	g[1] = -XIMU_sens.ay;
 8003e36:	e9d4 ab0a 	ldrd	sl, fp, [r4, #40]	; 0x28
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 8003e3a:	464b      	mov	r3, r9
	g[2] = -XIMU_sens.az;
 8003e3c:	e9cd 0100 	strd	r0, r1, [sp]
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 8003e40:	4640      	mov	r0, r8
 8003e42:	4649      	mov	r1, r9
 8003e44:	f7fc fb48 	bl	80004d8 <__aeabi_dmul>
 8003e48:	4652      	mov	r2, sl
 8003e4a:	4606      	mov	r6, r0
 8003e4c:	460f      	mov	r7, r1
 8003e4e:	465b      	mov	r3, fp
 8003e50:	4650      	mov	r0, sl
 8003e52:	4659      	mov	r1, fp
 8003e54:	f7fc fb40 	bl	80004d8 <__aeabi_dmul>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4630      	mov	r0, r6
 8003e5e:	4639      	mov	r1, r7
 8003e60:	f7fc f984 	bl	800016c <__adddf3>
 8003e64:	4606      	mov	r6, r0
 8003e66:	460f      	mov	r7, r1
 8003e68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	f7fc fb32 	bl	80004d8 <__aeabi_dmul>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4630      	mov	r0, r6
 8003e7a:	4639      	mov	r1, r7
 8003e7c:	f7fc f976 	bl	800016c <__adddf3>
 8003e80:	f008 fa6a 	bl	800c358 <sqrt>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	2000      	movs	r0, #0
 8003e8a:	49c1      	ldr	r1, [pc, #772]	; (8004190 <calc_magnetic_orientation+0x36c>)
 8003e8c:	f7fc fc4e 	bl	800072c <__aeabi_ddiv>
 8003e90:	4606      	mov	r6, r0
 8003e92:	460f      	mov	r7, r1
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	4640      	mov	r0, r8
 8003e9a:	4649      	mov	r1, r9
 8003e9c:	f7fc fb1c 	bl	80004d8 <__aeabi_dmul>
 8003ea0:	4684      	mov	ip, r0
 8003ea2:	460d      	mov	r5, r1
 8003ea4:	4632      	mov	r2, r6
 8003ea6:	463b      	mov	r3, r7
 8003ea8:	4650      	mov	r0, sl
 8003eaa:	4659      	mov	r1, fp
 8003eac:	f8cd c00c 	str.w	ip, [sp, #12]
 8003eb0:	9509      	str	r5, [sp, #36]	; 0x24
 8003eb2:	f7fc fb11 	bl	80004d8 <__aeabi_dmul>
 8003eb6:	4684      	mov	ip, r0
 8003eb8:	460d      	mov	r5, r1
 8003eba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ebe:	4632      	mov	r2, r6
 8003ec0:	463b      	mov	r3, r7
 8003ec2:	f8cd c020 	str.w	ip, [sp, #32]
 8003ec6:	950a      	str	r5, [sp, #40]	; 0x28
 8003ec8:	f7fc fb06 	bl	80004d8 <__aeabi_dmul>
	 * 		+Z	-------------------------	-Z
	 *
	 */

	double m[3];
	m[0] = XIMU_sens.my;
 8003ecc:	e9d4 8918 	ldrd	r8, r9, [r4, #96]	; 0x60
	m[1] = XIMU_sens.mx;
 8003ed0:	e9d4 6716 	ldrd	r6, r7, [r4, #88]	; 0x58
	m[2] = -XIMU_sens.mz;
 8003ed4:	e9d4 ab1a 	ldrd	sl, fp, [r4, #104]	; 0x68
 8003ed8:	4684      	mov	ip, r0
 8003eda:	460d      	mov	r5, r1
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 8003edc:	4642      	mov	r2, r8
 8003ede:	464b      	mov	r3, r9
 8003ee0:	4640      	mov	r0, r8
 8003ee2:	4649      	mov	r1, r9
 8003ee4:	f8cd c000 	str.w	ip, [sp]
 8003ee8:	950b      	str	r5, [sp, #44]	; 0x2c
 8003eea:	f7fc faf5 	bl	80004d8 <__aeabi_dmul>
 8003eee:	4632      	mov	r2, r6
 8003ef0:	4604      	mov	r4, r0
 8003ef2:	460d      	mov	r5, r1
 8003ef4:	463b      	mov	r3, r7
 8003ef6:	4630      	mov	r0, r6
 8003ef8:	4639      	mov	r1, r7
 8003efa:	f7fc faed 	bl	80004d8 <__aeabi_dmul>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4620      	mov	r0, r4
 8003f04:	4629      	mov	r1, r5
 8003f06:	f7fc f931 	bl	800016c <__adddf3>
 8003f0a:	4652      	mov	r2, sl
 8003f0c:	4604      	mov	r4, r0
 8003f0e:	460d      	mov	r5, r1
 8003f10:	465b      	mov	r3, fp
 8003f12:	4650      	mov	r0, sl
 8003f14:	4659      	mov	r1, fp
 8003f16:	f7fc fadf 	bl	80004d8 <__aeabi_dmul>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4620      	mov	r0, r4
 8003f20:	4629      	mov	r1, r5
 8003f22:	f7fc f923 	bl	800016c <__adddf3>
 8003f26:	f008 fa17 	bl	800c358 <sqrt>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	2000      	movs	r0, #0
 8003f30:	4997      	ldr	r1, [pc, #604]	; (8004190 <calc_magnetic_orientation+0x36c>)
 8003f32:	f7fc fbfb 	bl	800072c <__aeabi_ddiv>
 8003f36:	4604      	mov	r4, r0
 8003f38:	460d      	mov	r5, r1
	v[0] /= norm;
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4640      	mov	r0, r8
 8003f40:	4649      	mov	r1, r9
 8003f42:	f7fc fac9 	bl	80004d8 <__aeabi_dmul>
	v[1] /= norm;
 8003f46:	4622      	mov	r2, r4
	v[0] /= norm;
 8003f48:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
	v[1] /= norm;
 8003f4c:	462b      	mov	r3, r5
 8003f4e:	4630      	mov	r0, r6
 8003f50:	4639      	mov	r1, r7
 8003f52:	f7fc fac1 	bl	80004d8 <__aeabi_dmul>
 8003f56:	4622      	mov	r2, r4
 8003f58:	4680      	mov	r8, r0
 8003f5a:	4689      	mov	r9, r1
 8003f5c:	462b      	mov	r3, r5
 8003f5e:	4650      	mov	r0, sl
 8003f60:	4659      	mov	r1, fp
 8003f62:	f7fc fab9 	bl	80004d8 <__aeabi_dmul>
	normalize(m);

	//step1: cross gravity(negative acceleration) and magnetic field to get reference direction of East
	double East_ref[3] = {0};

	East_ref[0] = g[1]*m[2] - g[2]*m[1];
 8003f66:	9a08      	ldr	r2, [sp, #32]
 8003f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f6a:	4682      	mov	sl, r0
 8003f6c:	468b      	mov	fp, r1
 8003f6e:	f7fc fab3 	bl	80004d8 <__aeabi_dmul>
 8003f72:	9d00      	ldr	r5, [sp, #0]
 8003f74:	460f      	mov	r7, r1
 8003f76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f78:	4606      	mov	r6, r0
 8003f7a:	f101 4400 	add.w	r4, r1, #2147483648	; 0x80000000
 8003f7e:	462a      	mov	r2, r5
 8003f80:	4623      	mov	r3, r4
 8003f82:	4640      	mov	r0, r8
 8003f84:	4649      	mov	r1, r9
 8003f86:	f7fc faa7 	bl	80004d8 <__aeabi_dmul>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4630      	mov	r0, r6
 8003f90:	4639      	mov	r1, r7
 8003f92:	f7fc f8e9 	bl	8000168 <__aeabi_dsub>
	East_ref[1] = g[2]*m[0] - g[0]*m[2];
 8003f96:	462a      	mov	r2, r5
 8003f98:	4623      	mov	r3, r4
	East_ref[0] = g[1]*m[2] - g[2]*m[1];
 8003f9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
	East_ref[1] = g[2]*m[0] - g[0]*m[2];
 8003f9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003fa2:	9500      	str	r5, [sp, #0]
 8003fa4:	f7fc fa98 	bl	80004d8 <__aeabi_dmul>
 8003fa8:	4652      	mov	r2, sl
 8003faa:	465b      	mov	r3, fp
 8003fac:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8003fb0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8003fb4:	4606      	mov	r6, r0
 8003fb6:	460f      	mov	r7, r1
 8003fb8:	4650      	mov	r0, sl
 8003fba:	4659      	mov	r1, fp
 8003fbc:	f7fc fa8c 	bl	80004d8 <__aeabi_dmul>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	4639      	mov	r1, r7
 8003fc8:	f7fc f8ce 	bl	8000168 <__aeabi_dsub>
 8003fcc:	f10b 4500 	add.w	r5, fp, #2147483648	; 0x80000000
 8003fd0:	e9cd 0106 	strd	r0, r1, [sp, #24]
	East_ref[2] = g[0]*m[1] - g[1]*m[0];
 8003fd4:	4652      	mov	r2, sl
 8003fd6:	462b      	mov	r3, r5
 8003fd8:	4640      	mov	r0, r8
 8003fda:	4649      	mov	r1, r9
 8003fdc:	f8cd a00c 	str.w	sl, [sp, #12]
 8003fe0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8003fe4:	f7fc fa78 	bl	80004d8 <__aeabi_dmul>
 8003fe8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003fea:	4680      	mov	r8, r0
 8003fec:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8003ff0:	4689      	mov	r9, r1
 8003ff2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003ff6:	9a08      	ldr	r2, [sp, #32]
 8003ff8:	4633      	mov	r3, r6
 8003ffa:	f7fc fa6d 	bl	80004d8 <__aeabi_dmul>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4640      	mov	r0, r8
 8004004:	4649      	mov	r1, r9
 8004006:	f7fc f8af 	bl	8000168 <__aeabi_dsub>
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 800400a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
	East_ref[2] = g[0]*m[1] - g[1]*m[0];
 800400e:	4682      	mov	sl, r0
 8004010:	468b      	mov	fp, r1
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 8004012:	4642      	mov	r2, r8
 8004014:	464b      	mov	r3, r9
 8004016:	4640      	mov	r0, r8
 8004018:	4649      	mov	r1, r9
 800401a:	f7fc fa5d 	bl	80004d8 <__aeabi_dmul>
 800401e:	4680      	mov	r8, r0
 8004020:	4689      	mov	r9, r1
 8004022:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	f7fc fa55 	bl	80004d8 <__aeabi_dmul>
 800402e:	4602      	mov	r2, r0
 8004030:	460b      	mov	r3, r1
 8004032:	4640      	mov	r0, r8
 8004034:	4649      	mov	r1, r9
 8004036:	f7fc f899 	bl	800016c <__adddf3>
 800403a:	4652      	mov	r2, sl
 800403c:	4680      	mov	r8, r0
 800403e:	4689      	mov	r9, r1
 8004040:	465b      	mov	r3, fp
 8004042:	4650      	mov	r0, sl
 8004044:	4659      	mov	r1, fp
 8004046:	f7fc fa47 	bl	80004d8 <__aeabi_dmul>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4640      	mov	r0, r8
 8004050:	4649      	mov	r1, r9
 8004052:	f7fc f88b 	bl	800016c <__adddf3>
 8004056:	f008 f97f 	bl	800c358 <sqrt>
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	2000      	movs	r0, #0
 8004060:	494b      	ldr	r1, [pc, #300]	; (8004190 <calc_magnetic_orientation+0x36c>)
 8004062:	f7fc fb63 	bl	800072c <__aeabi_ddiv>
 8004066:	4680      	mov	r8, r0
 8004068:	4689      	mov	r9, r1
	v[0] /= norm;
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004072:	f7fc fa31 	bl	80004d8 <__aeabi_dmul>
	v[1] /= norm;
 8004076:	4642      	mov	r2, r8
 8004078:	464b      	mov	r3, r9
	v[0] /= norm;
 800407a:	e9cd 0104 	strd	r0, r1, [sp, #16]
	v[1] /= norm;
 800407e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004082:	f7fc fa29 	bl	80004d8 <__aeabi_dmul>
	v[2] /= norm;
 8004086:	4642      	mov	r2, r8
	v[1] /= norm;
 8004088:	e9cd 0106 	strd	r0, r1, [sp, #24]
	v[2] /= norm;
 800408c:	464b      	mov	r3, r9
 800408e:	4650      	mov	r0, sl
 8004090:	4659      	mov	r1, fp
 8004092:	f7fc fa21 	bl	80004d8 <__aeabi_dmul>
	normalize(East_ref);

	//step2: cross East and gravity(negative acceleration) to get reference direction of North
	double North_ref[3] = {0};

	North_ref[0] = East_ref[1]*g[2] - East_ref[2]*g[1];
 8004096:	9f00      	ldr	r7, [sp, #0]
	v[2] /= norm;
 8004098:	4682      	mov	sl, r0
 800409a:	468b      	mov	fp, r1
	North_ref[0] = East_ref[1]*g[2] - East_ref[2]*g[1];
 800409c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040a0:	463a      	mov	r2, r7
 80040a2:	4623      	mov	r3, r4
 80040a4:	f7fc fa18 	bl	80004d8 <__aeabi_dmul>
 80040a8:	9a08      	ldr	r2, [sp, #32]
 80040aa:	4680      	mov	r8, r0
 80040ac:	4689      	mov	r9, r1
 80040ae:	4633      	mov	r3, r6
 80040b0:	4650      	mov	r0, sl
 80040b2:	4659      	mov	r1, fp
 80040b4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 80040b8:	f7fc fa0e 	bl	80004d8 <__aeabi_dmul>
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	4640      	mov	r0, r8
 80040c2:	4649      	mov	r1, r9
 80040c4:	f7fc f850 	bl	8000168 <__aeabi_dsub>
	North_ref[1] = East_ref[2]*g[0] - East_ref[0]*g[2];
 80040c8:	462b      	mov	r3, r5
	North_ref[0] = East_ref[1]*g[2] - East_ref[2]*g[1];
 80040ca:	4682      	mov	sl, r0
 80040cc:	468b      	mov	fp, r1
	North_ref[1] = East_ref[2]*g[0] - East_ref[0]*g[2];
 80040ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80040d2:	9a03      	ldr	r2, [sp, #12]
 80040d4:	f7fc fa00 	bl	80004d8 <__aeabi_dmul>
 80040d8:	463a      	mov	r2, r7
 80040da:	4680      	mov	r8, r0
 80040dc:	4689      	mov	r9, r1
 80040de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040e2:	4623      	mov	r3, r4
 80040e4:	9700      	str	r7, [sp, #0]
 80040e6:	f7fc f9f7 	bl	80004d8 <__aeabi_dmul>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4640      	mov	r0, r8
 80040f0:	4649      	mov	r1, r9
 80040f2:	f7fc f839 	bl	8000168 <__aeabi_dsub>
	North_ref[2] = East_ref[0]*g[1] - East_ref[1]*g[0];
 80040f6:	4633      	mov	r3, r6
	North_ref[1] = East_ref[2]*g[0] - East_ref[0]*g[2];
 80040f8:	4680      	mov	r8, r0
 80040fa:	4689      	mov	r9, r1
	North_ref[2] = East_ref[0]*g[1] - East_ref[1]*g[0];
 80040fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004100:	9a08      	ldr	r2, [sp, #32]
 8004102:	f7fc f9e9 	bl	80004d8 <__aeabi_dmul>
 8004106:	462b      	mov	r3, r5
 8004108:	4606      	mov	r6, r0
 800410a:	460f      	mov	r7, r1
 800410c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004110:	9a03      	ldr	r2, [sp, #12]
 8004112:	f7fc f9e1 	bl	80004d8 <__aeabi_dmul>
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	4630      	mov	r0, r6
 800411c:	4639      	mov	r1, r7
 800411e:	f7fc f823 	bl	8000168 <__aeabi_dsub>
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 8004122:	4652      	mov	r2, sl
	North_ref[2] = East_ref[0]*g[1] - East_ref[1]*g[0];
 8004124:	460f      	mov	r7, r1
 8004126:	4606      	mov	r6, r0
	double norm = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
 8004128:	465b      	mov	r3, fp
 800412a:	4650      	mov	r0, sl
 800412c:	4659      	mov	r1, fp
 800412e:	f7fc f9d3 	bl	80004d8 <__aeabi_dmul>
 8004132:	4642      	mov	r2, r8
 8004134:	4604      	mov	r4, r0
 8004136:	460d      	mov	r5, r1
 8004138:	464b      	mov	r3, r9
 800413a:	4640      	mov	r0, r8
 800413c:	4649      	mov	r1, r9
 800413e:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8004142:	f7fc f9c9 	bl	80004d8 <__aeabi_dmul>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4620      	mov	r0, r4
 800414c:	4629      	mov	r1, r5
 800414e:	f7fc f80d 	bl	800016c <__adddf3>
 8004152:	463b      	mov	r3, r7
 8004154:	4604      	mov	r4, r0
 8004156:	460d      	mov	r5, r1
 8004158:	4632      	mov	r2, r6
 800415a:	4639      	mov	r1, r7
 800415c:	4630      	mov	r0, r6
 800415e:	f7fc f9bb 	bl	80004d8 <__aeabi_dmul>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	4620      	mov	r0, r4
 8004168:	4629      	mov	r1, r5
 800416a:	f7fb ffff 	bl	800016c <__adddf3>
 800416e:	f008 f8f3 	bl	800c358 <sqrt>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	2000      	movs	r0, #0
 8004178:	4905      	ldr	r1, [pc, #20]	; (8004190 <calc_magnetic_orientation+0x36c>)
 800417a:	f7fc fad7 	bl	800072c <__aeabi_ddiv>
 800417e:	4689      	mov	r9, r1
 8004180:	4680      	mov	r8, r0
	v[0] /= norm;
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4650      	mov	r0, sl
 8004188:	e004      	b.n	8004194 <calc_magnetic_orientation+0x370>
 800418a:	bf00      	nop
 800418c:	200005f8 	.word	0x200005f8
 8004190:	3ff00000 	.word	0x3ff00000
 8004194:	4659      	mov	r1, fp
 8004196:	f7fc f99f 	bl	80004d8 <__aeabi_dmul>
	v[1] /= norm;
 800419a:	464b      	mov	r3, r9
 800419c:	4642      	mov	r2, r8
	v[0] /= norm;
 800419e:	4682      	mov	sl, r0
 80041a0:	468b      	mov	fp, r1
	v[1] /= norm;
 80041a2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80041a6:	f7fc f997 	bl	80004d8 <__aeabi_dmul>
	v[2] /= norm;
 80041aa:	464b      	mov	r3, r9
 80041ac:	4642      	mov	r2, r8
	v[1] /= norm;
 80041ae:	4605      	mov	r5, r0
 80041b0:	460c      	mov	r4, r1
	v[2] /= norm;
 80041b2:	4630      	mov	r0, r6
 80041b4:	4639      	mov	r1, r7
 80041b6:	f7fc f98f 	bl	80004d8 <__aeabi_dmul>
	m10 = North_ref[0];	m11 = North_ref[1];	m12 = North_ref[2];
	m20 = -g[0];		m21 = -g[1];		m22 = -g[2];

	//conversion from transposed rotation matrix to quaternion
	double t;
	if (m22 < 0){
 80041ba:	9f00      	ldr	r7, [sp, #0]
 80041bc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
	v[2] /= norm;
 80041c0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	if (m22 < 0){
 80041c4:	2200      	movs	r2, #0
 80041c6:	4638      	mov	r0, r7
 80041c8:	4649      	mov	r1, r9
 80041ca:	2300      	movs	r3, #0
 80041cc:	f7fc fbf6 	bl	80009bc <__aeabi_dcmplt>
 80041d0:	2800      	cmp	r0, #0
 80041d2:	f000 8088 	beq.w	80042e6 <calc_magnetic_orientation+0x4c2>
 80041d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80041da:	4650      	mov	r0, sl
 80041dc:	4659      	mov	r1, fp
 80041de:	f7fb ffc5 	bl	800016c <__adddf3>
 80041e2:	463a      	mov	r2, r7
 80041e4:	464b      	mov	r3, r9
 80041e6:	4682      	mov	sl, r0
 80041e8:	468b      	mov	fp, r1
 80041ea:	2000      	movs	r0, #0
 80041ec:	496b      	ldr	r1, [pc, #428]	; (800439c <calc_magnetic_orientation+0x578>)
 80041ee:	f7fb ffbb 	bl	8000168 <__aeabi_dsub>
		if (m00 > m11){
 80041f2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80041f6:	4606      	mov	r6, r0
 80041f8:	4642      	mov	r2, r8
 80041fa:	464b      	mov	r3, r9
 80041fc:	460f      	mov	r7, r1
 80041fe:	4628      	mov	r0, r5
 8004200:	4621      	mov	r1, r4
 8004202:	f7fc fbdb 	bl	80009bc <__aeabi_dcmplt>
			t = 1 + m00 - m11 - m22;
 8004206:	4642      	mov	r2, r8
 8004208:	464b      	mov	r3, r9
		if (m00 > m11){
 800420a:	2800      	cmp	r0, #0
 800420c:	d14c      	bne.n	80042a8 <calc_magnetic_orientation+0x484>
			XIMU_observ.mag_ref_q0 = m12-m21;
			XIMU_observ.mag_ref_q1 = t;
			XIMU_observ.mag_ref_q2 = m01+m10;
			XIMU_observ.mag_ref_q3 = m20+m02;
		}else{
			t = 1 - m00 + m11 - m22;
 800420e:	4630      	mov	r0, r6
 8004210:	4639      	mov	r1, r7
 8004212:	f7fb ffa9 	bl	8000168 <__aeabi_dsub>
 8004216:	462a      	mov	r2, r5
 8004218:	4623      	mov	r3, r4
 800421a:	f7fb ffa7 	bl	800016c <__adddf3>

			XIMU_observ.mag_ref_q0 = m20-m02;
 800421e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			t = 1 - m00 + m11 - m22;
 8004222:	4604      	mov	r4, r0
 8004224:	460d      	mov	r5, r1
			XIMU_observ.mag_ref_q0 = m20-m02;
 8004226:	9803      	ldr	r0, [sp, #12]
 8004228:	9909      	ldr	r1, [sp, #36]	; 0x24
 800422a:	f7fb ff9d 	bl	8000168 <__aeabi_dsub>
 800422e:	9a08      	ldr	r2, [sp, #32]
 8004230:	4680      	mov	r8, r0
 8004232:	4689      	mov	r9, r1
 8004234:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800423a:	f7fb ff97 	bl	800016c <__adddf3>
 800423e:	4626      	mov	r6, r4
 8004240:	462f      	mov	r7, r5
 8004242:	e9cd 0106 	strd	r0, r1, [sp, #24]
			 XIMU_observ.mag_ref_q3 = m01-m10;
		 }
	 }

	//normalize
	XIMU_observ.mag_ref_q0 *= 0.5f / sqrt(t);
 8004246:	4620      	mov	r0, r4
 8004248:	4629      	mov	r1, r5
 800424a:	f008 f885 	bl	800c358 <sqrt>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	2000      	movs	r0, #0
 8004254:	4952      	ldr	r1, [pc, #328]	; (80043a0 <calc_magnetic_orientation+0x57c>)
 8004256:	f7fc fa69 	bl	800072c <__aeabi_ddiv>
 800425a:	4604      	mov	r4, r0
 800425c:	460d      	mov	r5, r1
 800425e:	4622      	mov	r2, r4
 8004260:	462b      	mov	r3, r5
 8004262:	4640      	mov	r0, r8
 8004264:	4649      	mov	r1, r9
 8004266:	f7fc f937 	bl	80004d8 <__aeabi_dmul>
 800426a:	f8df 8138 	ldr.w	r8, [pc, #312]	; 80043a4 <calc_magnetic_orientation+0x580>
	XIMU_observ.mag_ref_q1 *= 0.5f / sqrt(t);
 800426e:	4622      	mov	r2, r4
	XIMU_observ.mag_ref_q0 *= 0.5f / sqrt(t);
 8004270:	e9c8 0100 	strd	r0, r1, [r8]
	XIMU_observ.mag_ref_q1 *= 0.5f / sqrt(t);
 8004274:	462b      	mov	r3, r5
 8004276:	4650      	mov	r0, sl
 8004278:	4659      	mov	r1, fp
 800427a:	f7fc f92d 	bl	80004d8 <__aeabi_dmul>
	XIMU_observ.mag_ref_q2 *= 0.5f / sqrt(t);
 800427e:	4632      	mov	r2, r6
	XIMU_observ.mag_ref_q1 *= 0.5f / sqrt(t);
 8004280:	e9c8 0102 	strd	r0, r1, [r8, #8]
	XIMU_observ.mag_ref_q2 *= 0.5f / sqrt(t);
 8004284:	463b      	mov	r3, r7
 8004286:	4620      	mov	r0, r4
 8004288:	4629      	mov	r1, r5
 800428a:	f7fc f925 	bl	80004d8 <__aeabi_dmul>
	XIMU_observ.mag_ref_q3 *= 0.5f / sqrt(t);
 800428e:	4622      	mov	r2, r4
	XIMU_observ.mag_ref_q2 *= 0.5f / sqrt(t);
 8004290:	e9c8 0104 	strd	r0, r1, [r8, #16]
	XIMU_observ.mag_ref_q3 *= 0.5f / sqrt(t);
 8004294:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004298:	462b      	mov	r3, r5
 800429a:	f7fc f91d 	bl	80004d8 <__aeabi_dmul>
 800429e:	e9c8 0106 	strd	r0, r1, [r8, #24]
}
 80042a2:	b011      	add	sp, #68	; 0x44
 80042a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			t = 1 + m00 - m11 - m22;
 80042a8:	4630      	mov	r0, r6
 80042aa:	4639      	mov	r1, r7
 80042ac:	f7fb ff5e 	bl	800016c <__adddf3>
 80042b0:	462a      	mov	r2, r5
 80042b2:	4623      	mov	r3, r4
 80042b4:	f7fb ff58 	bl	8000168 <__aeabi_dsub>
 80042b8:	9a08      	ldr	r2, [sp, #32]
 80042ba:	4604      	mov	r4, r0
 80042bc:	460d      	mov	r5, r1
 80042be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80042c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042c4:	f7fb ff50 	bl	8000168 <__aeabi_dsub>
 80042c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80042cc:	4680      	mov	r8, r0
 80042ce:	4689      	mov	r9, r1
 80042d0:	9803      	ldr	r0, [sp, #12]
 80042d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80042d4:	f7fb ff4a 	bl	800016c <__adddf3>
 80042d8:	4656      	mov	r6, sl
 80042da:	465f      	mov	r7, fp
 80042dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80042e0:	46a2      	mov	sl, r4
 80042e2:	46ab      	mov	fp, r5
 80042e4:	e7af      	b.n	8004246 <calc_magnetic_orientation+0x422>
 80042e6:	4652      	mov	r2, sl
 80042e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042ec:	465b      	mov	r3, fp
 80042ee:	f7fb ff3b 	bl	8000168 <__aeabi_dsub>
 80042f2:	2200      	movs	r2, #0
 80042f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80042f8:	4b28      	ldr	r3, [pc, #160]	; (800439c <calc_magnetic_orientation+0x578>)
 80042fa:	9800      	ldr	r0, [sp, #0]
 80042fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042fe:	f7fb ff35 	bl	800016c <__adddf3>
		 if (m00 < -m11){
 8004302:	e9dd 9a04 	ldrd	r9, sl, [sp, #16]
 8004306:	4606      	mov	r6, r0
 8004308:	460f      	mov	r7, r1
 800430a:	464a      	mov	r2, r9
 800430c:	4653      	mov	r3, sl
 800430e:	4628      	mov	r0, r5
 8004310:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8004314:	f7fc fb70 	bl	80009f8 <__aeabi_dcmpgt>
 8004318:	b9f0      	cbnz	r0, 8004358 <calc_magnetic_orientation+0x534>
			 t = 1 + m00 + m11 + m22;
 800431a:	4632      	mov	r2, r6
 800431c:	463b      	mov	r3, r7
 800431e:	4648      	mov	r0, r9
 8004320:	4651      	mov	r1, sl
 8004322:	f7fb ff23 	bl	800016c <__adddf3>
 8004326:	462a      	mov	r2, r5
 8004328:	4623      	mov	r3, r4
 800432a:	f7fb ff1f 	bl	800016c <__adddf3>
 800432e:	9a08      	ldr	r2, [sp, #32]
 8004330:	4604      	mov	r4, r0
 8004332:	460d      	mov	r5, r1
 8004334:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800433a:	f7fb ff15 	bl	8000168 <__aeabi_dsub>
			 XIMU_observ.mag_ref_q2 = m20-m02;
 800433e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004342:	4682      	mov	sl, r0
 8004344:	468b      	mov	fp, r1
 8004346:	9803      	ldr	r0, [sp, #12]
 8004348:	9909      	ldr	r1, [sp, #36]	; 0x24
 800434a:	f7fb ff0d 	bl	8000168 <__aeabi_dsub>
 800434e:	46a0      	mov	r8, r4
 8004350:	4606      	mov	r6, r0
 8004352:	460f      	mov	r7, r1
 8004354:	46a9      	mov	r9, r5
 8004356:	e776      	b.n	8004246 <calc_magnetic_orientation+0x422>
			 t = 1 - m00 - m11 + m22;
 8004358:	464a      	mov	r2, r9
 800435a:	4653      	mov	r3, sl
 800435c:	4630      	mov	r0, r6
 800435e:	4639      	mov	r1, r7
 8004360:	f7fb ff02 	bl	8000168 <__aeabi_dsub>
 8004364:	462a      	mov	r2, r5
 8004366:	4623      	mov	r3, r4
 8004368:	f7fb fefe 	bl	8000168 <__aeabi_dsub>
 800436c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004370:	4604      	mov	r4, r0
 8004372:	460d      	mov	r5, r1
 8004374:	9803      	ldr	r0, [sp, #12]
 8004376:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004378:	f7fb fef8 	bl	800016c <__adddf3>
 800437c:	9a08      	ldr	r2, [sp, #32]
 800437e:	4682      	mov	sl, r0
 8004380:	468b      	mov	fp, r1
 8004382:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004388:	f7fb fef0 	bl	800016c <__adddf3>
 800438c:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8004390:	4606      	mov	r6, r0
 8004392:	460f      	mov	r7, r1
 8004394:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004398:	e755      	b.n	8004246 <calc_magnetic_orientation+0x422>
 800439a:	bf00      	nop
 800439c:	3ff00000 	.word	0x3ff00000
 80043a0:	3fe00000 	.word	0x3fe00000
 80043a4:	20000818 	.word	0x20000818

080043a8 <build_data_str>:

void calc_absolute_position();
void calc_absolute_altitude();

void build_data_str(char* str){
 80043a8:	b570      	push	{r4, r5, r6, lr}

	char temp[30];
	char delim[2] = {'\t','\0'};
 80043aa:	2309      	movs	r3, #9
	char term[2] = {'\n','\0'};
 80043ac:	250a      	movs	r5, #10
void build_data_str(char* str){
 80043ae:	4604      	mov	r4, r0


	itoa((int)(XIMU_sens.q0),temp,10);
 80043b0:	4ecf      	ldr	r6, [pc, #828]	; (80046f0 <build_data_str+0x348>)
void build_data_str(char* str){
 80043b2:	b08a      	sub	sp, #40	; 0x28
	itoa((int)(XIMU_sens.q0),temp,10);
 80043b4:	e9d6 0100 	ldrd	r0, r1, [r6]
	char delim[2] = {'\t','\0'};
 80043b8:	f8ad 3000 	strh.w	r3, [sp]
	char term[2] = {'\n','\0'};
 80043bc:	f8ad 5004 	strh.w	r5, [sp, #4]
	itoa((int)(XIMU_sens.q0),temp,10);
 80043c0:	f7fc fb3a 	bl	8000a38 <__aeabi_d2iz>
 80043c4:	462a      	mov	r2, r5
 80043c6:	a902      	add	r1, sp, #8
 80043c8:	f005 fb00 	bl	80099cc <itoa>
	strcpy(str,temp);
 80043cc:	a902      	add	r1, sp, #8
 80043ce:	4620      	mov	r0, r4
 80043d0:	f005 fb4c 	bl	8009a6c <stpcpy>
	strcat(str,delim);
 80043d4:	4669      	mov	r1, sp
 80043d6:	f005 fb52 	bl	8009a7e <strcpy>

	itoa((int)(XIMU_sens.q1),temp,10);
 80043da:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
 80043de:	f7fc fb2b 	bl	8000a38 <__aeabi_d2iz>
 80043e2:	462a      	mov	r2, r5
 80043e4:	a902      	add	r1, sp, #8
 80043e6:	f005 faf1 	bl	80099cc <itoa>
 80043ea:	4620      	mov	r0, r4
 80043ec:	f7fb feb0 	bl	8000150 <strlen>
	strcat(str,temp);
 80043f0:	a902      	add	r1, sp, #8
 80043f2:	4420      	add	r0, r4
 80043f4:	f005 fb3a 	bl	8009a6c <stpcpy>
	strcat(str,delim);
 80043f8:	4669      	mov	r1, sp
 80043fa:	f005 fb40 	bl	8009a7e <strcpy>

	itoa((int)(XIMU_sens.q2),temp,10);
 80043fe:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 8004402:	f7fc fb19 	bl	8000a38 <__aeabi_d2iz>
 8004406:	462a      	mov	r2, r5
 8004408:	a902      	add	r1, sp, #8
 800440a:	f005 fadf 	bl	80099cc <itoa>
 800440e:	4620      	mov	r0, r4
 8004410:	f7fb fe9e 	bl	8000150 <strlen>
	strcat(str,temp);
 8004414:	a902      	add	r1, sp, #8
 8004416:	4420      	add	r0, r4
 8004418:	f005 fb28 	bl	8009a6c <stpcpy>
	strcat(str,delim);
 800441c:	4669      	mov	r1, sp
 800441e:	f005 fb2e 	bl	8009a7e <strcpy>

	itoa((int)(XIMU_sens.q3),temp,10);
 8004422:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
 8004426:	f7fc fb07 	bl	8000a38 <__aeabi_d2iz>
 800442a:	462a      	mov	r2, r5
 800442c:	a902      	add	r1, sp, #8
 800442e:	f005 facd 	bl	80099cc <itoa>
 8004432:	4620      	mov	r0, r4
 8004434:	f7fb fe8c 	bl	8000150 <strlen>
	strcat(str,temp);
 8004438:	a902      	add	r1, sp, #8
 800443a:	4420      	add	r0, r4
 800443c:	f005 fb16 	bl	8009a6c <stpcpy>
	strcat(str,delim);
 8004440:	4669      	mov	r1, sp
 8004442:	f005 fb1c 	bl	8009a7e <strcpy>

	itoa((int)(XIMU_sens.ax*1000),temp,10);
 8004446:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
 800444a:	4baa      	ldr	r3, [pc, #680]	; (80046f4 <build_data_str+0x34c>)
 800444c:	2200      	movs	r2, #0
 800444e:	f7fc f843 	bl	80004d8 <__aeabi_dmul>
 8004452:	f7fc faf1 	bl	8000a38 <__aeabi_d2iz>
 8004456:	462a      	mov	r2, r5
 8004458:	a902      	add	r1, sp, #8
 800445a:	f005 fab7 	bl	80099cc <itoa>
 800445e:	4620      	mov	r0, r4
 8004460:	f7fb fe76 	bl	8000150 <strlen>
	strcat(str,temp);
 8004464:	a902      	add	r1, sp, #8
 8004466:	4420      	add	r0, r4
 8004468:	f005 fb00 	bl	8009a6c <stpcpy>
	strcat(str,delim);
 800446c:	4669      	mov	r1, sp
 800446e:	f005 fb06 	bl	8009a7e <strcpy>

	itoa((int)(XIMU_sens.ay*1000),temp,10);
 8004472:	e9d6 010a 	ldrd	r0, r1, [r6, #40]	; 0x28
 8004476:	4b9f      	ldr	r3, [pc, #636]	; (80046f4 <build_data_str+0x34c>)
 8004478:	2200      	movs	r2, #0
 800447a:	f7fc f82d 	bl	80004d8 <__aeabi_dmul>
 800447e:	f7fc fadb 	bl	8000a38 <__aeabi_d2iz>
 8004482:	462a      	mov	r2, r5
 8004484:	a902      	add	r1, sp, #8
 8004486:	f005 faa1 	bl	80099cc <itoa>
 800448a:	4620      	mov	r0, r4
 800448c:	f7fb fe60 	bl	8000150 <strlen>
	strcat(str,temp);
 8004490:	a902      	add	r1, sp, #8
 8004492:	4420      	add	r0, r4
 8004494:	f005 faea 	bl	8009a6c <stpcpy>
	strcat(str,delim);
 8004498:	4669      	mov	r1, sp
 800449a:	f005 faf0 	bl	8009a7e <strcpy>

	itoa((int)(XIMU_sens.az*1000),temp,10);
 800449e:	e9d6 010c 	ldrd	r0, r1, [r6, #48]	; 0x30
 80044a2:	4b94      	ldr	r3, [pc, #592]	; (80046f4 <build_data_str+0x34c>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	f7fc f817 	bl	80004d8 <__aeabi_dmul>
 80044aa:	f7fc fac5 	bl	8000a38 <__aeabi_d2iz>
 80044ae:	462a      	mov	r2, r5
 80044b0:	a902      	add	r1, sp, #8
 80044b2:	f005 fa8b 	bl	80099cc <itoa>
 80044b6:	4620      	mov	r0, r4
 80044b8:	f7fb fe4a 	bl	8000150 <strlen>
	strcat(str,temp);
 80044bc:	a902      	add	r1, sp, #8
 80044be:	4420      	add	r0, r4
 80044c0:	f005 fad4 	bl	8009a6c <stpcpy>
	strcat(str,delim);
 80044c4:	4669      	mov	r1, sp
 80044c6:	f005 fada 	bl	8009a7e <strcpy>

	itoa((int)(XIMU_sens.gx*1000),temp,10);
 80044ca:	e9d6 010e 	ldrd	r0, r1, [r6, #56]	; 0x38
 80044ce:	4b89      	ldr	r3, [pc, #548]	; (80046f4 <build_data_str+0x34c>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	f7fc f801 	bl	80004d8 <__aeabi_dmul>
 80044d6:	f7fc faaf 	bl	8000a38 <__aeabi_d2iz>
 80044da:	462a      	mov	r2, r5
 80044dc:	a902      	add	r1, sp, #8
 80044de:	f005 fa75 	bl	80099cc <itoa>
 80044e2:	4620      	mov	r0, r4
 80044e4:	f7fb fe34 	bl	8000150 <strlen>
	strcat(str,temp);
 80044e8:	a902      	add	r1, sp, #8
 80044ea:	4420      	add	r0, r4
 80044ec:	f005 fabe 	bl	8009a6c <stpcpy>
	strcat(str,delim);
 80044f0:	4669      	mov	r1, sp
 80044f2:	f005 fac4 	bl	8009a7e <strcpy>

	itoa((int)(XIMU_sens.gy*1000),temp,10);
 80044f6:	e9d6 0110 	ldrd	r0, r1, [r6, #64]	; 0x40
 80044fa:	4b7e      	ldr	r3, [pc, #504]	; (80046f4 <build_data_str+0x34c>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	f7fb ffeb 	bl	80004d8 <__aeabi_dmul>
 8004502:	f7fc fa99 	bl	8000a38 <__aeabi_d2iz>
 8004506:	462a      	mov	r2, r5
 8004508:	a902      	add	r1, sp, #8
 800450a:	f005 fa5f 	bl	80099cc <itoa>
 800450e:	4620      	mov	r0, r4
 8004510:	f7fb fe1e 	bl	8000150 <strlen>
	strcat(str,temp);
 8004514:	a902      	add	r1, sp, #8
 8004516:	4420      	add	r0, r4
 8004518:	f005 faa8 	bl	8009a6c <stpcpy>
	strcat(str,delim);
 800451c:	4669      	mov	r1, sp
 800451e:	f005 faae 	bl	8009a7e <strcpy>

	itoa((int)(XIMU_sens.gz*1000),temp,10);
 8004522:	e9d6 0112 	ldrd	r0, r1, [r6, #72]	; 0x48
 8004526:	4b73      	ldr	r3, [pc, #460]	; (80046f4 <build_data_str+0x34c>)
 8004528:	2200      	movs	r2, #0
 800452a:	f7fb ffd5 	bl	80004d8 <__aeabi_dmul>
 800452e:	f7fc fa83 	bl	8000a38 <__aeabi_d2iz>
 8004532:	462a      	mov	r2, r5
 8004534:	a902      	add	r1, sp, #8
 8004536:	f005 fa49 	bl	80099cc <itoa>
 800453a:	4620      	mov	r0, r4
 800453c:	f7fb fe08 	bl	8000150 <strlen>
	strcat(str,temp);
 8004540:	a902      	add	r1, sp, #8
 8004542:	4420      	add	r0, r4
 8004544:	f005 fa92 	bl	8009a6c <stpcpy>
	strcat(str,delim);
 8004548:	4669      	mov	r1, sp
 800454a:	f005 fa98 	bl	8009a7e <strcpy>

	itoa((int)(XIMU_sens.mx*1000),temp,10);
 800454e:	e9d6 0116 	ldrd	r0, r1, [r6, #88]	; 0x58
 8004552:	4b68      	ldr	r3, [pc, #416]	; (80046f4 <build_data_str+0x34c>)
 8004554:	2200      	movs	r2, #0
 8004556:	f7fb ffbf 	bl	80004d8 <__aeabi_dmul>
 800455a:	f7fc fa6d 	bl	8000a38 <__aeabi_d2iz>
 800455e:	462a      	mov	r2, r5
 8004560:	a902      	add	r1, sp, #8
 8004562:	f005 fa33 	bl	80099cc <itoa>
 8004566:	4620      	mov	r0, r4
 8004568:	f7fb fdf2 	bl	8000150 <strlen>
	strcat(str,temp);
 800456c:	a902      	add	r1, sp, #8
 800456e:	4420      	add	r0, r4
 8004570:	f005 fa7c 	bl	8009a6c <stpcpy>
	strcat(str,delim);
 8004574:	4669      	mov	r1, sp
 8004576:	f005 fa82 	bl	8009a7e <strcpy>

	itoa((int)(XIMU_sens.my*1000),temp,10);
 800457a:	e9d6 0118 	ldrd	r0, r1, [r6, #96]	; 0x60
 800457e:	4b5d      	ldr	r3, [pc, #372]	; (80046f4 <build_data_str+0x34c>)
 8004580:	2200      	movs	r2, #0
 8004582:	f7fb ffa9 	bl	80004d8 <__aeabi_dmul>
 8004586:	f7fc fa57 	bl	8000a38 <__aeabi_d2iz>
 800458a:	462a      	mov	r2, r5
 800458c:	a902      	add	r1, sp, #8
 800458e:	f005 fa1d 	bl	80099cc <itoa>
 8004592:	4620      	mov	r0, r4
 8004594:	f7fb fddc 	bl	8000150 <strlen>
	strcat(str,temp);
 8004598:	a902      	add	r1, sp, #8
 800459a:	4420      	add	r0, r4
 800459c:	f005 fa66 	bl	8009a6c <stpcpy>
	strcat(str,delim);
 80045a0:	4669      	mov	r1, sp
 80045a2:	f005 fa6c 	bl	8009a7e <strcpy>

	itoa((int)(XIMU_sens.mz*1000),temp,10);
 80045a6:	e9d6 011a 	ldrd	r0, r1, [r6, #104]	; 0x68
 80045aa:	4b52      	ldr	r3, [pc, #328]	; (80046f4 <build_data_str+0x34c>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	f7fb ff93 	bl	80004d8 <__aeabi_dmul>
 80045b2:	f7fc fa41 	bl	8000a38 <__aeabi_d2iz>
 80045b6:	462a      	mov	r2, r5
 80045b8:	a902      	add	r1, sp, #8
 80045ba:	f005 fa07 	bl	80099cc <itoa>
 80045be:	4620      	mov	r0, r4
 80045c0:	f7fb fdc6 	bl	8000150 <strlen>
	strcat(str,temp);
 80045c4:	a902      	add	r1, sp, #8
 80045c6:	4420      	add	r0, r4
 80045c8:	f005 fa50 	bl	8009a6c <stpcpy>
	strcat(str,delim);
 80045cc:	4669      	mov	r1, sp
 80045ce:	f005 fa56 	bl	8009a7e <strcpy>

	itoa((int)(XIMU_sens.pressure*1000),temp,10);
 80045d2:	e9d6 011e 	ldrd	r0, r1, [r6, #120]	; 0x78
 80045d6:	4b47      	ldr	r3, [pc, #284]	; (80046f4 <build_data_str+0x34c>)
 80045d8:	2200      	movs	r2, #0
 80045da:	f7fb ff7d 	bl	80004d8 <__aeabi_dmul>
 80045de:	f7fc fa2b 	bl	8000a38 <__aeabi_d2iz>
 80045e2:	462a      	mov	r2, r5
 80045e4:	a902      	add	r1, sp, #8
 80045e6:	f005 f9f1 	bl	80099cc <itoa>
 80045ea:	4620      	mov	r0, r4
 80045ec:	f7fb fdb0 	bl	8000150 <strlen>
	strcat(str,temp);
 80045f0:	a902      	add	r1, sp, #8
 80045f2:	4420      	add	r0, r4
 80045f4:	f005 fa3a 	bl	8009a6c <stpcpy>
	strcat(str,delim);
 80045f8:	4669      	mov	r1, sp
 80045fa:	f005 fa40 	bl	8009a7e <strcpy>

	itoa((int)(XIMU_sens.temperature*1000),temp,10);
 80045fe:	e9d6 0120 	ldrd	r0, r1, [r6, #128]	; 0x80
 8004602:	4b3c      	ldr	r3, [pc, #240]	; (80046f4 <build_data_str+0x34c>)
 8004604:	2200      	movs	r2, #0
 8004606:	f7fb ff67 	bl	80004d8 <__aeabi_dmul>
 800460a:	f7fc fa15 	bl	8000a38 <__aeabi_d2iz>
 800460e:	462a      	mov	r2, r5
 8004610:	a902      	add	r1, sp, #8
 8004612:	f005 f9db 	bl	80099cc <itoa>
 8004616:	4620      	mov	r0, r4
 8004618:	f7fb fd9a 	bl	8000150 <strlen>
	strcat(str,temp);
 800461c:	a902      	add	r1, sp, #8
 800461e:	4420      	add	r0, r4
 8004620:	f005 fa24 	bl	8009a6c <stpcpy>
	strcat(str,delim);
 8004624:	4669      	mov	r1, sp
 8004626:	f005 fa2a 	bl	8009a7e <strcpy>

	itoa((int)(XIMU_sens.lat*1000000),temp,10);
 800462a:	a32f      	add	r3, pc, #188	; (adr r3, 80046e8 <build_data_str+0x340>)
 800462c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004630:	e9d6 0124 	ldrd	r0, r1, [r6, #144]	; 0x90
 8004634:	f7fb ff50 	bl	80004d8 <__aeabi_dmul>
 8004638:	f7fc f9fe 	bl	8000a38 <__aeabi_d2iz>
 800463c:	462a      	mov	r2, r5
 800463e:	a902      	add	r1, sp, #8
 8004640:	f005 f9c4 	bl	80099cc <itoa>
 8004644:	4620      	mov	r0, r4
 8004646:	f7fb fd83 	bl	8000150 <strlen>
	strcat(str,temp);
 800464a:	a902      	add	r1, sp, #8
 800464c:	4420      	add	r0, r4
 800464e:	f005 fa0d 	bl	8009a6c <stpcpy>
	strcat(str,delim);
 8004652:	4669      	mov	r1, sp
 8004654:	f005 fa13 	bl	8009a7e <strcpy>

	itoa((int)(XIMU_sens.lon*1000000),temp,10);
 8004658:	a323      	add	r3, pc, #140	; (adr r3, 80046e8 <build_data_str+0x340>)
 800465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465e:	e9d6 0126 	ldrd	r0, r1, [r6, #152]	; 0x98
 8004662:	f7fb ff39 	bl	80004d8 <__aeabi_dmul>
 8004666:	f7fc f9e7 	bl	8000a38 <__aeabi_d2iz>
 800466a:	462a      	mov	r2, r5
 800466c:	a902      	add	r1, sp, #8
 800466e:	f005 f9ad 	bl	80099cc <itoa>
 8004672:	4620      	mov	r0, r4
 8004674:	f7fb fd6c 	bl	8000150 <strlen>
	strcat(str,temp);
 8004678:	a902      	add	r1, sp, #8
 800467a:	4420      	add	r0, r4
 800467c:	f005 f9f6 	bl	8009a6c <stpcpy>
	strcat(str,delim);
 8004680:	4669      	mov	r1, sp
 8004682:	f005 f9fc 	bl	8009a7e <strcpy>

	itoa((int)(XIMU_sens.qag_ts),temp,10);
 8004686:	462a      	mov	r2, r5
 8004688:	a902      	add	r1, sp, #8
 800468a:	6d30      	ldr	r0, [r6, #80]	; 0x50
 800468c:	f005 f99e 	bl	80099cc <itoa>
 8004690:	4620      	mov	r0, r4
 8004692:	f7fb fd5d 	bl	8000150 <strlen>
	strcat(str,temp);
 8004696:	a902      	add	r1, sp, #8
 8004698:	4420      	add	r0, r4
 800469a:	f005 f9e7 	bl	8009a6c <stpcpy>
	strcat(str,delim);
 800469e:	4669      	mov	r1, sp
 80046a0:	f005 f9ed 	bl	8009a7e <strcpy>

	itoa((int)(XIMU_sens.m_ts),temp,10);
 80046a4:	462a      	mov	r2, r5
 80046a6:	a902      	add	r1, sp, #8
 80046a8:	6f30      	ldr	r0, [r6, #112]	; 0x70
 80046aa:	f005 f98f 	bl	80099cc <itoa>
 80046ae:	4620      	mov	r0, r4
 80046b0:	f7fb fd4e 	bl	8000150 <strlen>
	strcat(str,temp);
 80046b4:	a902      	add	r1, sp, #8
 80046b6:	4420      	add	r0, r4
 80046b8:	f005 f9d8 	bl	8009a6c <stpcpy>
	strcat(str,delim);
 80046bc:	4669      	mov	r1, sp
 80046be:	f005 f9de 	bl	8009a7e <strcpy>

	itoa((int)(XIMU_sens.pt_ts),temp,10);
 80046c2:	462a      	mov	r2, r5
 80046c4:	a902      	add	r1, sp, #8
 80046c6:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
 80046ca:	f005 f97f 	bl	80099cc <itoa>
 80046ce:	4620      	mov	r0, r4
 80046d0:	f7fb fd3e 	bl	8000150 <strlen>
	strcat(str,temp);
 80046d4:	a902      	add	r1, sp, #8
 80046d6:	4420      	add	r0, r4
 80046d8:	f005 f9c8 	bl	8009a6c <stpcpy>
	strcat(str,delim);
 80046dc:	4669      	mov	r1, sp
 80046de:	f005 f9ce 	bl	8009a7e <strcpy>

	itoa((int)(XIMU_sens.gps_ts),temp,10);
 80046e2:	462a      	mov	r2, r5
 80046e4:	e008      	b.n	80046f8 <build_data_str+0x350>
 80046e6:	bf00      	nop
 80046e8:	00000000 	.word	0x00000000
 80046ec:	412e8480 	.word	0x412e8480
 80046f0:	200005f8 	.word	0x200005f8
 80046f4:	408f4000 	.word	0x408f4000
 80046f8:	a902      	add	r1, sp, #8
 80046fa:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
 80046fe:	f005 f965 	bl	80099cc <itoa>
 8004702:	4620      	mov	r0, r4
 8004704:	f7fb fd24 	bl	8000150 <strlen>
	strcat(str,temp);
 8004708:	a902      	add	r1, sp, #8
 800470a:	4420      	add	r0, r4
 800470c:	f005 f9ae 	bl	8009a6c <stpcpy>
	strcat(str,term);
 8004710:	a901      	add	r1, sp, #4
 8004712:	f005 f9b4 	bl	8009a7e <strcpy>
}
 8004716:	b00a      	add	sp, #40	; 0x28
 8004718:	bd70      	pop	{r4, r5, r6, pc}
 800471a:	bf00      	nop

0800471c <GNSS_set_huart>:
 */

#include "gnss.h"

void GNSS_set_huart(UART_HandleTypeDef* huart){
	huartx = huart;
 800471c:	4b01      	ldr	r3, [pc, #4]	; (8004724 <GNSS_set_huart+0x8>)
 800471e:	6018      	str	r0, [r3, #0]
}
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	20000d10 	.word	0x20000d10

08004728 <GNSS_Init>:
 * initializes the GNSS interrupt.
 *
 * call this function before main loop.
 */
void GNSS_Init(){
	HAL_UART_Receive_DMA(huartx, GNSS.dma_buffer, DMA_BUFFER_SIZE);
 8004728:	4b03      	ldr	r3, [pc, #12]	; (8004738 <GNSS_Init+0x10>)
 800472a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800472e:	6818      	ldr	r0, [r3, #0]
 8004730:	4902      	ldr	r1, [pc, #8]	; (800473c <GNSS_Init+0x14>)
 8004732:	f003 b981 	b.w	8007a38 <HAL_UART_Receive_DMA>
 8004736:	bf00      	nop
 8004738:	20000d10 	.word	0x20000d10
 800473c:	20000850 	.word	0x20000850

08004740 <GNSS_RX_Update>:
	//https://www.devcoons.com/stm32-uart-receive-unknown-size-data-using-dma-and-freertos/
}

int GNSS_RX_Update(){
 8004740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004744:	b0b5      	sub	sp, #212	; 0xd4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004746:	b672      	cpsid	i

	__disable_irq();//I don't understand this
	int i = DMA_BUFFER_SIZE - huartx->hdmarx->Instance->CNDTR; //last byte received
 8004748:	4b85      	ldr	r3, [pc, #532]	; (8004960 <GNSS_RX_Update+0x220>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f5c3 6b80 	rsb	fp, r3, #1024	; 0x400
  __ASM volatile ("cpsie i" : : : "memory");
 8004756:	b662      	cpsie	i
	__enable_irq();//I don't understand this

	int new_information = 0;
 8004758:	f04f 0800 	mov.w	r8, #0
 800475c:	f8df a208 	ldr.w	sl, [pc, #520]	; 8004968 <GNSS_RX_Update+0x228>
		GNSS.message_buffer[counter] = '\n';
		GNSS.message_buffer[counter+1] = '\0';
		GNSS.start = end;

		//parse message if it is GNGGA
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8004760:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800496c <GNSS_RX_Update+0x22c>

		if (str != NULL){
			char fields[NUM_FIELDS][MAX_FIELD_SIZE];
			parse_GNGGA(GNSS.message_buffer,fields);
			//field 1: UTC time
			sscanf(fields[1],"%2d%2d%2d.%3d",&GNSS.GNGGA.UTC_Hour,&GNSS.GNGGA.UTC_Min,&GNSS.GNGGA.UTC_Second,&GNSS.GNGGA.UTC_Millis);
 8004764:	f50a 638e 	add.w	r3, sl, #1136	; 0x470
 8004768:	9303      	str	r3, [sp, #12]
		int counter = 0;
 800476a:	2700      	movs	r7, #0
		GNSS.message_buffer[counter] = '\n';
 800476c:	260a      	movs	r6, #10
 800476e:	f8da 4464 	ldr.w	r4, [sl, #1124]	; 0x464
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 8004772:	4d7c      	ldr	r5, [pc, #496]	; (8004964 <GNSS_RX_Update+0x224>)
	while (GNSS.start != i){
 8004774:	455c      	cmp	r4, fp
 8004776:	f000 80e5 	beq.w	8004944 <GNSS_RX_Update+0x204>
		if (GNSS.dma_buffer[GNSS.start] != '$'){
 800477a:	f81a 3004 	ldrb.w	r3, [sl, r4]
 800477e:	2b24      	cmp	r3, #36	; 0x24
 8004780:	f040 80d4 	bne.w	800492c <GNSS_RX_Update+0x1ec>
int GNSS_RX_Update(){
 8004784:	4623      	mov	r3, r4
 8004786:	e002      	b.n	800478e <GNSS_RX_Update+0x4e>
			if (GNSS.dma_buffer[end] == '\n'){
 8004788:	2a0a      	cmp	r2, #10
 800478a:	f000 80df 	beq.w	800494c <GNSS_RX_Update+0x20c>
		for(end = GNSS.start; end != i; end = (end + 1) % DMA_BUFFER_SIZE){
 800478e:	3301      	adds	r3, #1
 8004790:	425a      	negs	r2, r3
 8004792:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004796:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800479a:	bf58      	it	pl
 800479c:	4253      	negpl	r3, r2
 800479e:	459b      	cmp	fp, r3
 80047a0:	f81a 2003 	ldrb.w	r2, [sl, r3]
 80047a4:	d1f0      	bne.n	8004788 <GNSS_RX_Update+0x48>
		if (GNSS.dma_buffer[end] != '\n'){break;}//if end not found, return.
 80047a6:	2a0a      	cmp	r2, #10
 80047a8:	f040 80cc 	bne.w	8004944 <GNSS_RX_Update+0x204>
		for(end = GNSS.start; end != i; end = (end + 1) % DMA_BUFFER_SIZE){
 80047ac:	465b      	mov	r3, fp
 80047ae:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8004970 <GNSS_RX_Update+0x230>
		int counter = 0;
 80047b2:	2000      	movs	r0, #0
 80047b4:	e000      	b.n	80047b8 <GNSS_RX_Update+0x78>
			counter++;
 80047b6:	4610      	mov	r0, r2
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 80047b8:	1c61      	adds	r1, r4, #1
 80047ba:	424a      	negs	r2, r1
 80047bc:	f3c2 0209 	ubfx	r2, r2, #0, #10
			GNSS.message_buffer[counter] = GNSS.dma_buffer[j];
 80047c0:	f81a e004 	ldrb.w	lr, [sl, r4]
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 80047c4:	f3c1 0409 	ubfx	r4, r1, #0, #10
 80047c8:	bf58      	it	pl
 80047ca:	4254      	negpl	r4, r2
 80047cc:	429c      	cmp	r4, r3
			GNSS.message_buffer[counter] = GNSS.dma_buffer[j];
 80047ce:	f80c ef01 	strb.w	lr, [ip, #1]!
			counter++;
 80047d2:	f100 0201 	add.w	r2, r0, #1
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 80047d6:	d1ee      	bne.n	80047b6 <GNSS_RX_Update+0x76>
 80047d8:	3002      	adds	r0, #2
		GNSS.message_buffer[counter+1] = '\0';
 80047da:	eb0a 0300 	add.w	r3, sl, r0
		GNSS.message_buffer[counter] = '\n';
 80047de:	4452      	add	r2, sl
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 80047e0:	4649      	mov	r1, r9
 80047e2:	4628      	mov	r0, r5
		GNSS.message_buffer[counter] = '\n';
 80047e4:	f882 6400 	strb.w	r6, [r2, #1024]	; 0x400
		GNSS.start = end;
 80047e8:	f8ca 4464 	str.w	r4, [sl, #1124]	; 0x464
		GNSS.message_buffer[counter+1] = '\0';
 80047ec:	f883 7400 	strb.w	r7, [r3, #1024]	; 0x400
		char* str = strstr((char*)(GNSS.message_buffer),"$GNGGA,");
 80047f0:	f005 f94d 	bl	8009a8e <strstr>
		if (str != NULL){
 80047f4:	2800      	cmp	r0, #0
 80047f6:	d0bd      	beq.n	8004774 <GNSS_RX_Update+0x34>
        fields[current_field][current_pos]='\0';
 80047f8:	2500      	movs	r5, #0
 80047fa:	f89a 1400 	ldrb.w	r1, [sl, #1024]	; 0x400
    unsigned char* ch_ptr = msg;
 80047fe:	4b59      	ldr	r3, [pc, #356]	; (8004964 <GNSS_RX_Update+0x224>)
 8004800:	aa07      	add	r2, sp, #28
    while (*ch_ptr != '\0'){
 8004802:	2900      	cmp	r1, #0
 8004804:	f000 80b9 	beq.w	800497a <GNSS_RX_Update+0x23a>
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004808:	292c      	cmp	r1, #44	; 0x2c
 800480a:	f000 816c 	beq.w	8004ae6 <GNSS_RX_Update+0x3a6>
 800480e:	7858      	ldrb	r0, [r3, #1]
	        fields[current_field][current_pos] = *ch_ptr;
 8004810:	7011      	strb	r1, [r2, #0]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004812:	282c      	cmp	r0, #44	; 0x2c
	        ch_ptr++;
 8004814:	f103 0101 	add.w	r1, r3, #1
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004818:	f000 816c 	beq.w	8004af4 <GNSS_RX_Update+0x3b4>
 800481c:	2800      	cmp	r0, #0
 800481e:	f000 816f 	beq.w	8004b00 <GNSS_RX_Update+0x3c0>
 8004822:	789c      	ldrb	r4, [r3, #2]
	        fields[current_field][current_pos] = *ch_ptr;
 8004824:	7050      	strb	r0, [r2, #1]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004826:	2c2c      	cmp	r4, #44	; 0x2c
	        ch_ptr++;
 8004828:	f103 0102 	add.w	r1, r3, #2
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 800482c:	f000 816a 	beq.w	8004b04 <GNSS_RX_Update+0x3c4>
 8004830:	2c00      	cmp	r4, #0
 8004832:	f000 816d 	beq.w	8004b10 <GNSS_RX_Update+0x3d0>
 8004836:	78d8      	ldrb	r0, [r3, #3]
	        fields[current_field][current_pos] = *ch_ptr;
 8004838:	7094      	strb	r4, [r2, #2]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 800483a:	282c      	cmp	r0, #44	; 0x2c
	        ch_ptr++;
 800483c:	f103 0103 	add.w	r1, r3, #3
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004840:	f000 8168 	beq.w	8004b14 <GNSS_RX_Update+0x3d4>
 8004844:	2800      	cmp	r0, #0
 8004846:	f000 8167 	beq.w	8004b18 <GNSS_RX_Update+0x3d8>
 800484a:	791c      	ldrb	r4, [r3, #4]
	        fields[current_field][current_pos] = *ch_ptr;
 800484c:	70d0      	strb	r0, [r2, #3]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 800484e:	2c2c      	cmp	r4, #44	; 0x2c
	        ch_ptr++;
 8004850:	f103 0104 	add.w	r1, r3, #4
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004854:	f000 8162 	beq.w	8004b1c <GNSS_RX_Update+0x3dc>
 8004858:	2c00      	cmp	r4, #0
 800485a:	f000 8161 	beq.w	8004b20 <GNSS_RX_Update+0x3e0>
 800485e:	7958      	ldrb	r0, [r3, #5]
	        fields[current_field][current_pos] = *ch_ptr;
 8004860:	7114      	strb	r4, [r2, #4]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004862:	282c      	cmp	r0, #44	; 0x2c
	        ch_ptr++;
 8004864:	f103 0105 	add.w	r1, r3, #5
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004868:	f000 815c 	beq.w	8004b24 <GNSS_RX_Update+0x3e4>
 800486c:	2800      	cmp	r0, #0
 800486e:	f000 815b 	beq.w	8004b28 <GNSS_RX_Update+0x3e8>
 8004872:	799c      	ldrb	r4, [r3, #6]
	        fields[current_field][current_pos] = *ch_ptr;
 8004874:	7150      	strb	r0, [r2, #5]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004876:	2c2c      	cmp	r4, #44	; 0x2c
	        ch_ptr++;
 8004878:	f103 0106 	add.w	r1, r3, #6
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 800487c:	f000 8158 	beq.w	8004b30 <GNSS_RX_Update+0x3f0>
 8004880:	2c00      	cmp	r4, #0
 8004882:	f000 8153 	beq.w	8004b2c <GNSS_RX_Update+0x3ec>
 8004886:	79d8      	ldrb	r0, [r3, #7]
	        fields[current_field][current_pos] = *ch_ptr;
 8004888:	7194      	strb	r4, [r2, #6]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 800488a:	282c      	cmp	r0, #44	; 0x2c
	        ch_ptr++;
 800488c:	f103 0107 	add.w	r1, r3, #7
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004890:	f000 8150 	beq.w	8004b34 <GNSS_RX_Update+0x3f4>
 8004894:	2800      	cmp	r0, #0
 8004896:	f000 814f 	beq.w	8004b38 <GNSS_RX_Update+0x3f8>
 800489a:	7a1c      	ldrb	r4, [r3, #8]
	        fields[current_field][current_pos] = *ch_ptr;
 800489c:	71d0      	strb	r0, [r2, #7]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 800489e:	2c2c      	cmp	r4, #44	; 0x2c
	        ch_ptr++;
 80048a0:	f103 0108 	add.w	r1, r3, #8
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 80048a4:	f000 814a 	beq.w	8004b3c <GNSS_RX_Update+0x3fc>
 80048a8:	2c00      	cmp	r4, #0
 80048aa:	f000 8149 	beq.w	8004b40 <GNSS_RX_Update+0x400>
 80048ae:	7a58      	ldrb	r0, [r3, #9]
	        fields[current_field][current_pos] = *ch_ptr;
 80048b0:	7214      	strb	r4, [r2, #8]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 80048b2:	282c      	cmp	r0, #44	; 0x2c
	        ch_ptr++;
 80048b4:	f103 0109 	add.w	r1, r3, #9
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 80048b8:	f000 8144 	beq.w	8004b44 <GNSS_RX_Update+0x404>
 80048bc:	2800      	cmp	r0, #0
 80048be:	f000 8143 	beq.w	8004b48 <GNSS_RX_Update+0x408>
 80048c2:	7a9c      	ldrb	r4, [r3, #10]
	        fields[current_field][current_pos] = *ch_ptr;
 80048c4:	7250      	strb	r0, [r2, #9]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 80048c6:	2c2c      	cmp	r4, #44	; 0x2c
	        ch_ptr++;
 80048c8:	f103 010a 	add.w	r1, r3, #10
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 80048cc:	f000 813e 	beq.w	8004b4c <GNSS_RX_Update+0x40c>
 80048d0:	2c00      	cmp	r4, #0
 80048d2:	f000 813d 	beq.w	8004b50 <GNSS_RX_Update+0x410>
 80048d6:	7ad8      	ldrb	r0, [r3, #11]
	        fields[current_field][current_pos] = *ch_ptr;
 80048d8:	7294      	strb	r4, [r2, #10]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 80048da:	282c      	cmp	r0, #44	; 0x2c
	        ch_ptr++;
 80048dc:	f103 010b 	add.w	r1, r3, #11
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 80048e0:	f000 8138 	beq.w	8004b54 <GNSS_RX_Update+0x414>
 80048e4:	2800      	cmp	r0, #0
 80048e6:	f000 8137 	beq.w	8004b58 <GNSS_RX_Update+0x418>
 80048ea:	7b1c      	ldrb	r4, [r3, #12]
	        fields[current_field][current_pos] = *ch_ptr;
 80048ec:	72d0      	strb	r0, [r2, #11]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 80048ee:	2c2c      	cmp	r4, #44	; 0x2c
	        ch_ptr++;
 80048f0:	f103 010c 	add.w	r1, r3, #12
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 80048f4:	f000 8132 	beq.w	8004b5c <GNSS_RX_Update+0x41c>
 80048f8:	2c00      	cmp	r4, #0
 80048fa:	d03b      	beq.n	8004974 <GNSS_RX_Update+0x234>
 80048fc:	7b58      	ldrb	r0, [r3, #13]
	        ch_ptr++;
 80048fe:	f103 010d 	add.w	r1, r3, #13
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004902:	282c      	cmp	r0, #44	; 0x2c
	        fields[current_field][current_pos] = *ch_ptr;
 8004904:	7314      	strb	r4, [r2, #12]
	        current_pos++;
 8004906:	f04f 030d 	mov.w	r3, #13
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 800490a:	d006      	beq.n	800491a <GNSS_RX_Update+0x1da>
 800490c:	b398      	cbz	r0, 8004976 <GNSS_RX_Update+0x236>
	        fields[current_field][current_pos] = *ch_ptr;
 800490e:	54d0      	strb	r0, [r2, r3]
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004910:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	        current_pos++;
 8004914:	3301      	adds	r3, #1
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004916:	282c      	cmp	r0, #44	; 0x2c
 8004918:	d1f8      	bne.n	800490c <GNSS_RX_Update+0x1cc>
        fields[current_field][current_pos]='\0';
 800491a:	54d5      	strb	r5, [r2, r3]
	        ch_ptr++;
 800491c:	1c4b      	adds	r3, r1, #1
 800491e:	320c      	adds	r2, #12
 8004920:	7849      	ldrb	r1, [r1, #1]
 8004922:	e76e      	b.n	8004802 <GNSS_RX_Update+0xc2>
				if (GNSS.dma_buffer[GNSS.start] == '$'){
 8004924:	f81a 3004 	ldrb.w	r3, [sl, r4]
 8004928:	2b24      	cmp	r3, #36	; 0x24
 800492a:	d015      	beq.n	8004958 <GNSS_RX_Update+0x218>
			for(;GNSS.start != i;GNSS.start = (GNSS.start + 1) % DMA_BUFFER_SIZE){
 800492c:	3401      	adds	r4, #1
 800492e:	4263      	negs	r3, r4
 8004930:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004934:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004938:	bf58      	it	pl
 800493a:	425c      	negpl	r4, r3
 800493c:	455c      	cmp	r4, fp
 800493e:	d1f1      	bne.n	8004924 <GNSS_RX_Update+0x1e4>
 8004940:	f8ca 4464 	str.w	r4, [sl, #1124]	; 0x464
			new_information = 1;
		}
	}

	return new_information;
}
 8004944:	4640      	mov	r0, r8
 8004946:	b035      	add	sp, #212	; 0xd4
 8004948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(int j = GNSS.start; j != end; j = (j+1)%DMA_BUFFER_SIZE){
 800494c:	42a3      	cmp	r3, r4
 800494e:	f47f af2e 	bne.w	80047ae <GNSS_RX_Update+0x6e>
 8004952:	2001      	movs	r0, #1
		int counter = 0;
 8004954:	2200      	movs	r2, #0
 8004956:	e740      	b.n	80047da <GNSS_RX_Update+0x9a>
 8004958:	f8ca 4464 	str.w	r4, [sl, #1124]	; 0x464
 800495c:	e712      	b.n	8004784 <GNSS_RX_Update+0x44>
 800495e:	bf00      	nop
 8004960:	20000d10 	.word	0x20000d10
 8004964:	20000c50 	.word	0x20000c50
 8004968:	20000850 	.word	0x20000850
 800496c:	0800e3f4 	.word	0x0800e3f4
 8004970:	20000c4f 	.word	0x20000c4f
	        current_pos++;
 8004974:	230c      	movs	r3, #12
        fields[current_field][current_pos]='\0';
 8004976:	2100      	movs	r1, #0
 8004978:	54d1      	strb	r1, [r2, r3]
			sscanf(fields[1],"%2d%2d%2d.%3d",&GNSS.GNGGA.UTC_Hour,&GNSS.GNGGA.UTC_Min,&GNSS.GNGGA.UTC_Second,&GNSS.GNGGA.UTC_Millis);
 800497a:	4b79      	ldr	r3, [pc, #484]	; (8004b60 <GNSS_RX_Update+0x420>)
 800497c:	4979      	ldr	r1, [pc, #484]	; (8004b64 <GNSS_RX_Update+0x424>)
 800497e:	f103 0208 	add.w	r2, r3, #8
 8004982:	9201      	str	r2, [sp, #4]
 8004984:	9a03      	ldr	r2, [sp, #12]
 8004986:	a80a      	add	r0, sp, #40	; 0x28
 8004988:	9200      	str	r2, [sp, #0]
 800498a:	1f1a      	subs	r2, r3, #4
 800498c:	f005 f842 	bl	8009a14 <siscanf>
			GNSS.GNGGA.lat_raw = atof(fields[2]);
 8004990:	a80d      	add	r0, sp, #52	; 0x34
 8004992:	f004 ffd1 	bl	8009938 <atof>
 8004996:	f7fc f897 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.North_South = fields[3][0];
 800499a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
			GNSS.GNGGA.lat_raw = atof(fields[2]);
 800499e:	f8ca 0478 	str.w	r0, [sl, #1144]	; 0x478
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 80049a2:	a813      	add	r0, sp, #76	; 0x4c
			GNSS.GNGGA.North_South = fields[3][0];
 80049a4:	f88a 3488 	strb.w	r3, [sl, #1160]	; 0x488
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 80049a8:	f004 ffc6 	bl	8009938 <atof>
 80049ac:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8004b7c <GNSS_RX_Update+0x43c>
			GNSS.GNGGA.East_West = fields[5][0];
 80049b0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
			GNSS.GNGGA.lon_raw = atof(fields[4]);
 80049b4:	e9c8 0100 	strd	r0, r1, [r8]
			GNSS.GNGGA.status = atoi(fields[6]);
 80049b8:	a819      	add	r0, sp, #100	; 0x64
			GNSS.GNGGA.East_West = fields[5][0];
 80049ba:	f88a 34a0 	strb.w	r3, [sl, #1184]	; 0x4a0
			GNSS.GNGGA.status = atoi(fields[6]);
 80049be:	f004 ffbe 	bl	800993e <atoi>
 80049c2:	f8ca 04a4 	str.w	r0, [sl, #1188]	; 0x4a4
			GNSS.GNGGA.num_sat = atoi(fields[7]);
 80049c6:	a81c      	add	r0, sp, #112	; 0x70
 80049c8:	f004 ffb9 	bl	800993e <atoi>
 80049cc:	f8ca 04a8 	str.w	r0, [sl, #1192]	; 0x4a8
			GNSS.GNGGA.HDOP = atof(fields[8]);
 80049d0:	a81f      	add	r0, sp, #124	; 0x7c
 80049d2:	f004 ffb1 	bl	8009938 <atof>
 80049d6:	f7fc f877 	bl	8000ac8 <__aeabi_d2f>
 80049da:	f8ca 04ac 	str.w	r0, [sl, #1196]	; 0x4ac
			GNSS.GNGGA.MSL_alt = atof(fields[9]);
 80049de:	a822      	add	r0, sp, #136	; 0x88
 80049e0:	f004 ffaa 	bl	8009938 <atof>
 80049e4:	f7fc f870 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.MSL_Unit = fields[10][0];
 80049e8:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
			GNSS.GNGGA.MSL_alt = atof(fields[9]);
 80049ec:	f8ca 04b0 	str.w	r0, [sl, #1200]	; 0x4b0
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 80049f0:	a828      	add	r0, sp, #160	; 0xa0
			GNSS.GNGGA.MSL_Unit = fields[10][0];
 80049f2:	f88a 34b4 	strb.w	r3, [sl, #1204]	; 0x4b4
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 80049f6:	f004 ff9f 	bl	8009938 <atof>
 80049fa:	f7fc f865 	bl	8000ac8 <__aeabi_d2f>
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 80049fe:	f8da 4478 	ldr.w	r4, [sl, #1144]	; 0x478
			GNSS.GNGGA.checksum[0] = fields[14][1];//fields[14][0] is always '*'
 8004a02:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
			GNSS.GNGGA.checksum[1] = fields[14][2];
 8004a06:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
			GNSS.GNGGA.Geoid_Unit = fields[12][0];
 8004a0a:	f89d 10ac 	ldrb.w	r1, [sp, #172]	; 0xac
			GNSS.GNGGA.Geoid_Separation = atof(fields[11]);
 8004a0e:	f8ca 04b8 	str.w	r0, [sl, #1208]	; 0x4b8
			GNSS.GNGGA.checksum[0] = fields[14][1];//fields[14][0] is always '*'
 8004a12:	f88a 24bd 	strb.w	r2, [sl, #1213]	; 0x4bd
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 8004a16:	4620      	mov	r0, r4
			GNSS.GNGGA.checksum[1] = fields[14][2];
 8004a18:	f88a 34be 	strb.w	r3, [sl, #1214]	; 0x4be
			GNSS.GNGGA.Geoid_Unit = fields[12][0];
 8004a1c:	f88a 14bc 	strb.w	r1, [sl, #1212]	; 0x4bc
			GNSS.GNGGA.lat = convert_raw_lat_lon(GNSS.GNGGA.lat_raw);
 8004a20:	f7fb fd02 	bl	8000428 <__aeabi_f2d>
	return ((int)raw / 100) + (fmod(raw,100)/60);
 8004a24:	2200      	movs	r2, #0
 8004a26:	4b50      	ldr	r3, [pc, #320]	; (8004b68 <GNSS_RX_Update+0x428>)
 8004a28:	f007 fc3a 	bl	800c2a0 <fmod>
 8004a2c:	4606      	mov	r6, r0
 8004a2e:	4620      	mov	r0, r4
 8004a30:	460f      	mov	r7, r1
 8004a32:	f7fc faf7 	bl	8001024 <__aeabi_f2iz>
 8004a36:	4b4d      	ldr	r3, [pc, #308]	; (8004b6c <GNSS_RX_Update+0x42c>)
 8004a38:	fb83 2300 	smull	r2, r3, r3, r0
 8004a3c:	17c0      	asrs	r0, r0, #31
 8004a3e:	ebc0 1063 	rsb	r0, r0, r3, asr #5
 8004a42:	f7fb fcdf 	bl	8000404 <__aeabi_i2d>
 8004a46:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8004a4a:	4604      	mov	r4, r0
 8004a4c:	460d      	mov	r5, r1
 8004a4e:	4b48      	ldr	r3, [pc, #288]	; (8004b70 <GNSS_RX_Update+0x430>)
 8004a50:	4630      	mov	r0, r6
 8004a52:	4639      	mov	r1, r7
 8004a54:	f7fb fd40 	bl	80004d8 <__aeabi_dmul>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	4629      	mov	r1, r5
 8004a60:	f7fb fb84 	bl	800016c <__adddf3>
			GNSS.GNGGA.lon = convert_raw_lat_lon(GNSS.GNGGA.lon_raw);
 8004a64:	e9d8 6700 	ldrd	r6, r7, [r8]
	return ((int)raw / 100) + (fmod(raw,100)/60);
 8004a68:	2200      	movs	r2, #0
 8004a6a:	460c      	mov	r4, r1
 8004a6c:	4605      	mov	r5, r0
 8004a6e:	4b3e      	ldr	r3, [pc, #248]	; (8004b68 <GNSS_RX_Update+0x428>)
 8004a70:	4630      	mov	r0, r6
 8004a72:	4639      	mov	r1, r7
 8004a74:	f007 fc14 	bl	800c2a0 <fmod>
 8004a78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a7c:	4639      	mov	r1, r7
 8004a7e:	4630      	mov	r0, r6
 8004a80:	f7fb ffda 	bl	8000a38 <__aeabi_d2iz>
 8004a84:	4b39      	ldr	r3, [pc, #228]	; (8004b6c <GNSS_RX_Update+0x42c>)
			new_information = 1;
 8004a86:	f04f 0801 	mov.w	r8, #1
	return ((int)raw / 100) + (fmod(raw,100)/60);
 8004a8a:	fb83 2300 	smull	r2, r3, r3, r0
 8004a8e:	17c0      	asrs	r0, r0, #31
 8004a90:	ebc0 1063 	rsb	r0, r0, r3, asr #5
 8004a94:	f7fb fcb6 	bl	8000404 <__aeabi_i2d>
 8004a98:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8004a9c:	4606      	mov	r6, r0
 8004a9e:	460f      	mov	r7, r1
 8004aa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004aa4:	4b32      	ldr	r3, [pc, #200]	; (8004b70 <GNSS_RX_Update+0x430>)
 8004aa6:	f7fb fd17 	bl	80004d8 <__aeabi_dmul>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4630      	mov	r0, r6
 8004ab0:	4639      	mov	r1, r7
 8004ab2:	f7fb fb5b 	bl	800016c <__adddf3>
			GNSS.GNGGA.lat = GNSS.GNGGA.North_South == 'N' ? GNSS.GNGGA.lat : -GNSS.GNGGA.lat;
 8004ab6:	f89a 3488 	ldrb.w	r3, [sl, #1160]	; 0x488
 8004aba:	4a2e      	ldr	r2, [pc, #184]	; (8004b74 <GNSS_RX_Update+0x434>)
 8004abc:	2b4e      	cmp	r3, #78	; 0x4e
 8004abe:	bf18      	it	ne
 8004ac0:	f104 4400 	addne.w	r4, r4, #2147483648	; 0x80000000
 8004ac4:	4623      	mov	r3, r4
 8004ac6:	462c      	mov	r4, r5
 8004ac8:	461d      	mov	r5, r3
			GNSS.GNGGA.lon = GNSS.GNGGA.East_West == 'E' ? GNSS.GNGGA.lon : -GNSS.GNGGA.lon;
 8004aca:	f89a 34a0 	ldrb.w	r3, [sl, #1184]	; 0x4a0
			GNSS.GNGGA.lat = GNSS.GNGGA.North_South == 'N' ? GNSS.GNGGA.lat : -GNSS.GNGGA.lat;
 8004ace:	e9c2 4500 	strd	r4, r5, [r2]
			GNSS.GNGGA.lon = GNSS.GNGGA.East_West == 'E' ? GNSS.GNGGA.lon : -GNSS.GNGGA.lon;
 8004ad2:	2b45      	cmp	r3, #69	; 0x45
 8004ad4:	bf18      	it	ne
 8004ad6:	f101 4100 	addne.w	r1, r1, #2147483648	; 0x80000000
 8004ada:	460b      	mov	r3, r1
 8004adc:	4602      	mov	r2, r0
 8004ade:	4926      	ldr	r1, [pc, #152]	; (8004b78 <GNSS_RX_Update+0x438>)
 8004ae0:	e9c1 2300 	strd	r2, r3, [r1]
 8004ae4:	e641      	b.n	800476a <GNSS_RX_Update+0x2a>
        while (*ch_ptr != ',' && *ch_ptr != '\0'){
 8004ae6:	4619      	mov	r1, r3
        current_pos = 0;
 8004ae8:	2300      	movs	r3, #0
        fields[current_field][current_pos]='\0';
 8004aea:	54d5      	strb	r5, [r2, r3]
	        ch_ptr++;
 8004aec:	1c4b      	adds	r3, r1, #1
 8004aee:	320c      	adds	r2, #12
 8004af0:	7849      	ldrb	r1, [r1, #1]
 8004af2:	e686      	b.n	8004802 <GNSS_RX_Update+0xc2>
	        current_pos++;
 8004af4:	2301      	movs	r3, #1
        fields[current_field][current_pos]='\0';
 8004af6:	54d5      	strb	r5, [r2, r3]
	        ch_ptr++;
 8004af8:	1c4b      	adds	r3, r1, #1
 8004afa:	320c      	adds	r2, #12
 8004afc:	7849      	ldrb	r1, [r1, #1]
 8004afe:	e680      	b.n	8004802 <GNSS_RX_Update+0xc2>
	        current_pos++;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e738      	b.n	8004976 <GNSS_RX_Update+0x236>
 8004b04:	2302      	movs	r3, #2
        fields[current_field][current_pos]='\0';
 8004b06:	54d5      	strb	r5, [r2, r3]
	        ch_ptr++;
 8004b08:	1c4b      	adds	r3, r1, #1
 8004b0a:	320c      	adds	r2, #12
 8004b0c:	7849      	ldrb	r1, [r1, #1]
 8004b0e:	e678      	b.n	8004802 <GNSS_RX_Update+0xc2>
	        current_pos++;
 8004b10:	2302      	movs	r3, #2
 8004b12:	e730      	b.n	8004976 <GNSS_RX_Update+0x236>
 8004b14:	2303      	movs	r3, #3
 8004b16:	e700      	b.n	800491a <GNSS_RX_Update+0x1da>
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e72c      	b.n	8004976 <GNSS_RX_Update+0x236>
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	e6fc      	b.n	800491a <GNSS_RX_Update+0x1da>
 8004b20:	2304      	movs	r3, #4
 8004b22:	e728      	b.n	8004976 <GNSS_RX_Update+0x236>
 8004b24:	2305      	movs	r3, #5
 8004b26:	e6f8      	b.n	800491a <GNSS_RX_Update+0x1da>
 8004b28:	2305      	movs	r3, #5
 8004b2a:	e724      	b.n	8004976 <GNSS_RX_Update+0x236>
 8004b2c:	2306      	movs	r3, #6
 8004b2e:	e722      	b.n	8004976 <GNSS_RX_Update+0x236>
 8004b30:	2306      	movs	r3, #6
 8004b32:	e6f2      	b.n	800491a <GNSS_RX_Update+0x1da>
 8004b34:	2307      	movs	r3, #7
 8004b36:	e6f0      	b.n	800491a <GNSS_RX_Update+0x1da>
 8004b38:	2307      	movs	r3, #7
 8004b3a:	e71c      	b.n	8004976 <GNSS_RX_Update+0x236>
 8004b3c:	2308      	movs	r3, #8
 8004b3e:	e6ec      	b.n	800491a <GNSS_RX_Update+0x1da>
 8004b40:	2308      	movs	r3, #8
 8004b42:	e718      	b.n	8004976 <GNSS_RX_Update+0x236>
 8004b44:	2309      	movs	r3, #9
 8004b46:	e6e8      	b.n	800491a <GNSS_RX_Update+0x1da>
 8004b48:	2309      	movs	r3, #9
 8004b4a:	e714      	b.n	8004976 <GNSS_RX_Update+0x236>
 8004b4c:	230a      	movs	r3, #10
 8004b4e:	e6e4      	b.n	800491a <GNSS_RX_Update+0x1da>
 8004b50:	230a      	movs	r3, #10
 8004b52:	e710      	b.n	8004976 <GNSS_RX_Update+0x236>
 8004b54:	230b      	movs	r3, #11
 8004b56:	e6e0      	b.n	800491a <GNSS_RX_Update+0x1da>
 8004b58:	230b      	movs	r3, #11
 8004b5a:	e70c      	b.n	8004976 <GNSS_RX_Update+0x236>
 8004b5c:	230c      	movs	r3, #12
 8004b5e:	e6dc      	b.n	800491a <GNSS_RX_Update+0x1da>
 8004b60:	20000cbc 	.word	0x20000cbc
 8004b64:	0800e3fc 	.word	0x0800e3fc
 8004b68:	40590000 	.word	0x40590000
 8004b6c:	51eb851f 	.word	0x51eb851f
 8004b70:	3f911111 	.word	0x3f911111
 8004b74:	20000cd0 	.word	0x20000cd0
 8004b78:	20000ce8 	.word	0x20000ce8
 8004b7c:	20000ce0 	.word	0x20000ce0

08004b80 <I2C_read>:
 *      Author: yuche
 */

#include "i2c.h"

uint8_t I2C_read(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* output){
 8004b80:	b530      	push	{r4, r5, lr}
	int state = HAL_I2C_Mem_Read(i2cx,target_address << 1,register_address,sizeof(register_address),output,length,20);//timeout is magic. Do not touch
 8004b82:	2514      	movs	r5, #20
uint8_t I2C_read(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* output){
 8004b84:	b085      	sub	sp, #20
 8004b86:	9c08      	ldr	r4, [sp, #32]
	int state = HAL_I2C_Mem_Read(i2cx,target_address << 1,register_address,sizeof(register_address),output,length,20);//timeout is magic. Do not touch
 8004b88:	9301      	str	r3, [sp, #4]
 8004b8a:	0049      	lsls	r1, r1, #1
 8004b8c:	9502      	str	r5, [sp, #8]
 8004b8e:	9400      	str	r4, [sp, #0]
 8004b90:	2301      	movs	r3, #1
 8004b92:	f001 fbb9 	bl	8006308 <HAL_I2C_Mem_Read>
	if (state != HAL_OK){
 8004b96:	b100      	cbz	r0, 8004b9a <I2C_read+0x1a>
		__NOP();
 8004b98:	bf00      	nop
	}
	return state;
}
 8004b9a:	b005      	add	sp, #20
 8004b9c:	bd30      	pop	{r4, r5, pc}
 8004b9e:	bf00      	nop

08004ba0 <I2C_write>:

uint8_t I2C_write(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* input){
 8004ba0:	b530      	push	{r4, r5, lr}
	int state =  HAL_I2C_Mem_Write(i2cx,target_address << 1,register_address,sizeof(register_address),input,length,20);//timeout is magic. Do not touch
 8004ba2:	2514      	movs	r5, #20
uint8_t I2C_write(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* input){
 8004ba4:	b085      	sub	sp, #20
 8004ba6:	9c08      	ldr	r4, [sp, #32]
	int state =  HAL_I2C_Mem_Write(i2cx,target_address << 1,register_address,sizeof(register_address),input,length,20);//timeout is magic. Do not touch
 8004ba8:	9301      	str	r3, [sp, #4]
 8004baa:	0049      	lsls	r1, r1, #1
 8004bac:	9502      	str	r5, [sp, #8]
 8004bae:	9400      	str	r4, [sp, #0]
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	f001 fa8d 	bl	80060d0 <HAL_I2C_Mem_Write>
	if (state != HAL_OK){
 8004bb6:	b100      	cbz	r0, 8004bba <I2C_write+0x1a>
			__NOP();
 8004bb8:	bf00      	nop
		}
	return state;
}
 8004bba:	b005      	add	sp, #20
 8004bbc:	bd30      	pop	{r4, r5, pc}
 8004bbe:	bf00      	nop

08004bc0 <led_update>:
#include "stm32f1xx_hal.h"

uint8_t led_pattern = LED_DISCONNECTED;
uint8_t led_state = 0;

void led_update(){
 8004bc0:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,  1 - (led_pattern>>led_state) & 0x01);
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <led_update+0x2c>)
 8004bc4:	4c0a      	ldr	r4, [pc, #40]	; (8004bf0 <led_update+0x30>)
 8004bc6:	781a      	ldrb	r2, [r3, #0]
 8004bc8:	7823      	ldrb	r3, [r4, #0]
 8004bca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004bce:	411a      	asrs	r2, r3
 8004bd0:	f1c2 0201 	rsb	r2, r2, #1
 8004bd4:	f002 0201 	and.w	r2, r2, #1
 8004bd8:	4806      	ldr	r0, [pc, #24]	; (8004bf4 <led_update+0x34>)
 8004bda:	f000 ff9d 	bl	8005b18 <HAL_GPIO_WritePin>
	led_state++;
 8004bde:	7823      	ldrb	r3, [r4, #0]
 8004be0:	3301      	adds	r3, #1
	led_state = led_state % 8;
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	7023      	strb	r3, [r4, #0]
}
 8004be8:	bd10      	pop	{r4, pc}
 8004bea:	bf00      	nop
 8004bec:	200003bc 	.word	0x200003bc
 8004bf0:	200003bd 	.word	0x200003bd
 8004bf4:	40011000 	.word	0x40011000

08004bf8 <led_set>:

void led_set(uint8_t led_pattern_){
	led_pattern = led_pattern_;
 8004bf8:	4b01      	ldr	r3, [pc, #4]	; (8004c00 <led_set+0x8>)
 8004bfa:	7018      	strb	r0, [r3, #0]
}
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	200003bc 	.word	0x200003bc

08004c04 <mpu_set_i2c>:

enum MPU9250_GYRO_FSR gyro_fsr = MPU9250_NUM_GYRO_FSR;
enum MPU9250_ACCEL_FSR accel_fsr = MPU9250_NUM_ACCEL_FSR;

void mpu_set_i2c(I2C_HandleTypeDef* i2cx){
	mpu_i2cx = i2cx;
 8004c04:	4b01      	ldr	r3, [pc, #4]	; (8004c0c <mpu_set_i2c+0x8>)
 8004c06:	6018      	str	r0, [r3, #0]
}
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	200005f0 	.word	0x200005f0

08004c10 <i2c_write>:
}

// Functions implemented for this platform(STM32F103) for DMP

int i2c_write(unsigned char slave_addr, unsigned char reg_addr,
		unsigned char length, unsigned char const *data){
 8004c10:	b510      	push	{r4, lr}
	return I2C_write(mpu_i2cx,slave_addr,reg_addr,length,data);
 8004c12:	4c06      	ldr	r4, [pc, #24]	; (8004c2c <i2c_write+0x1c>)
		unsigned char length, unsigned char const *data){
 8004c14:	b082      	sub	sp, #8
	return I2C_write(mpu_i2cx,slave_addr,reg_addr,length,data);
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	6824      	ldr	r4, [r4, #0]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	460a      	mov	r2, r1
 8004c1e:	4601      	mov	r1, r0
 8004c20:	4620      	mov	r0, r4
 8004c22:	f7ff ffbd 	bl	8004ba0 <I2C_write>
}
 8004c26:	b002      	add	sp, #8
 8004c28:	bd10      	pop	{r4, pc}
 8004c2a:	bf00      	nop
 8004c2c:	200005f0 	.word	0x200005f0

08004c30 <i2c_read>:

int i2c_read(unsigned char slave_addr, unsigned char reg_addr,
		unsigned char length, unsigned char *data){
 8004c30:	b510      	push	{r4, lr}
	return I2C_read(mpu_i2cx,slave_addr,reg_addr,length,data);
 8004c32:	4c06      	ldr	r4, [pc, #24]	; (8004c4c <i2c_read+0x1c>)
		unsigned char length, unsigned char *data){
 8004c34:	b082      	sub	sp, #8
	return I2C_read(mpu_i2cx,slave_addr,reg_addr,length,data);
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	6824      	ldr	r4, [r4, #0]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	460a      	mov	r2, r1
 8004c3e:	4601      	mov	r1, r0
 8004c40:	4620      	mov	r0, r4
 8004c42:	f7ff ff9d 	bl	8004b80 <I2C_read>
}
 8004c46:	b002      	add	sp, #8
 8004c48:	bd10      	pop	{r4, pc}
 8004c4a:	bf00      	nop
 8004c4c:	200005f0 	.word	0x200005f0

08004c50 <delay_ms>:

void delay_ms(unsigned long num_ms){
	delay(num_ms);
 8004c50:	f000 bc80 	b.w	8005554 <delay>

08004c54 <get_ms>:
}

unsigned long get_ms(unsigned long *count){
 8004c54:	b510      	push	{r4, lr}
 8004c56:	4604      	mov	r4, r0
	*count = millis();
 8004c58:	f000 fc76 	bl	8005548 <millis>
 8004c5c:	6020      	str	r0, [r4, #0]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	bd10      	pop	{r4, pc}
 8004c62:	bf00      	nop

08004c64 <ms5611_set_i2c>:
/**
 * select a hal I2C to talk to MS5611
 * @param i2cx The i2c port to talk to MS5611
 */
void ms5611_set_i2c(I2C_HandleTypeDef* i2cx){
	ms5611_i2cx = i2cx;
 8004c64:	4b01      	ldr	r3, [pc, #4]	; (8004c6c <ms5611_set_i2c+0x8>)
 8004c66:	6018      	str	r0, [r3, #0]
}
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	200007d4 	.word	0x200007d4

08004c70 <ms5611_init>:
/**
 * Initialize MS5611: read and store factory calibration data.
 *
 * request ADC to start convert temperature data
 */
void ms5611_init(){
 8004c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c72:	24a2      	movs	r4, #162	; 0xa2
 8004c74:	b085      	sub	sp, #20
 8004c76:	4d39      	ldr	r5, [pc, #228]	; (8004d5c <ms5611_init+0xec>)
 8004c78:	4f39      	ldr	r7, [pc, #228]	; (8004d60 <ms5611_init+0xf0>)
 8004c7a:	ae03      	add	r6, sp, #12
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8004c7c:	4622      	mov	r2, r4
 8004c7e:	6838      	ldr	r0, [r7, #0]
 8004c80:	2302      	movs	r3, #2
 8004c82:	9600      	str	r6, [sp, #0]
 8004c84:	2177      	movs	r1, #119	; 0x77
 8004c86:	f7ff ff7b 	bl	8004b80 <I2C_read>
 8004c8a:	3402      	adds	r4, #2
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
		uint8_t reg_addr = MS5611_CMD_READ_PROM + (i << 1);//interval 2
		uint8_t buffer[2];
		ms5611_read_i2c(reg_addr,2,buffer);

		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 8004c8c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8004c90:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8004c94:	b2e4      	uxtb	r4, r4
 8004c96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 8004c9a:	2cae      	cmp	r4, #174	; 0xae
		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 8004c9c:	f825 3b02 	strh.w	r3, [r5], #2
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 8004ca0:	d1ec      	bne.n	8004c7c <ms5611_init+0xc>
/**
 * Start ADC conversion of raw temperature in MS5611.
 * The ADC data can be read 9.02ms later
 */
void ms5611_request_temperature(){
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8004ca2:	2400      	movs	r4, #0
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8004ca4:	4d2f      	ldr	r5, [pc, #188]	; (8004d64 <ms5611_init+0xf4>)
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8004ca6:	4623      	mov	r3, r4
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8004ca8:	782a      	ldrb	r2, [r5, #0]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8004caa:	6838      	ldr	r0, [r7, #0]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8004cac:	0052      	lsls	r2, r2, #1
 8004cae:	f042 0250 	orr.w	r2, r2, #80	; 0x50
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8004cb2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004cb6:	2177      	movs	r1, #119	; 0x77
 8004cb8:	9600      	str	r6, [sp, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8004cba:	f8ad 400c 	strh.w	r4, [sp, #12]
 8004cbe:	f88d 400e 	strb.w	r4, [sp, #14]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8004cc2:	f7ff ff6d 	bl	8004ba0 <I2C_write>
 * Read raw temperature from MS5611.
 */
void ms5611_update_temperature(){

	ms5611_request_temperature();
	delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8004cc6:	200c      	movs	r0, #12
 8004cc8:	f000 fc44 	bl	8005554 <delay>
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8004ccc:	4622      	mov	r2, r4
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8004cce:	f8ad 400c 	strh.w	r4, [sp, #12]
 8004cd2:	f88d 400e 	strb.w	r4, [sp, #14]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8004cd6:	2400      	movs	r4, #0
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8004cd8:	6838      	ldr	r0, [r7, #0]
 8004cda:	2303      	movs	r3, #3
 8004cdc:	9600      	str	r6, [sp, #0]
 8004cde:	2177      	movs	r1, #119	; 0x77
 8004ce0:	f7ff ff4e 	bl	8004b80 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8004ce4:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8004ce8:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004cec:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (temp != 0){
 8004cf6:	4313      	orrs	r3, r2
		raw_temperature = temp;
 8004cf8:	bf18      	it	ne
 8004cfa:	4a1b      	ldrne	r2, [pc, #108]	; (8004d68 <ms5611_init+0xf8>)
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8004cfc:	6838      	ldr	r0, [r7, #0]
		raw_temperature = temp;
 8004cfe:	bf18      	it	ne
 8004d00:	6013      	strne	r3, [r2, #0]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8004d02:	782a      	ldrb	r2, [r5, #0]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8004d04:	4623      	mov	r3, r4
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8004d06:	0052      	lsls	r2, r2, #1
 8004d08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8004d0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d10:	2177      	movs	r1, #119	; 0x77
 8004d12:	9600      	str	r6, [sp, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8004d14:	f8ad 400c 	strh.w	r4, [sp, #12]
 8004d18:	f88d 400e 	strb.w	r4, [sp, #14]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8004d1c:	f7ff ff40 	bl	8004ba0 <I2C_write>
	delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8004d20:	200c      	movs	r0, #12
 8004d22:	f000 fc17 	bl	8005554 <delay>
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8004d26:	6838      	ldr	r0, [r7, #0]
 8004d28:	4622      	mov	r2, r4
 8004d2a:	9600      	str	r6, [sp, #0]
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	2177      	movs	r1, #119	; 0x77
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8004d30:	f8ad 400c 	strh.w	r4, [sp, #12]
 8004d34:	f88d 400e 	strb.w	r4, [sp, #14]
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8004d38:	f7ff ff22 	bl	8004b80 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8004d3c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8004d40:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004d44:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8004d48:	021b      	lsls	r3, r3, #8
 8004d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (temp != 0){
 8004d4e:	4313      	orrs	r3, r2
		raw_pressure = temp;
 8004d50:	bf1c      	itt	ne
 8004d52:	4a06      	ldrne	r2, [pc, #24]	; (8004d6c <ms5611_init+0xfc>)
 8004d54:	6013      	strne	r3, [r2, #0]
}
 8004d56:	b005      	add	sp, #20
 8004d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000d18 	.word	0x20000d18
 8004d60:	200007d4 	.word	0x200007d4
 8004d64:	2000003c 	.word	0x2000003c
 8004d68:	20000d24 	.word	0x20000d24
 8004d6c:	20000d14 	.word	0x20000d14

08004d70 <ms5611_update>:
}

/**
 *	Read raw temperature and pressure from MS5611
 */
void ms5611_update(){
 8004d70:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8004d72:	2400      	movs	r4, #0
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8004d74:	4f2f      	ldr	r7, [pc, #188]	; (8004e34 <ms5611_update+0xc4>)
void ms5611_update(){
 8004d76:	b085      	sub	sp, #20
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8004d78:	783a      	ldrb	r2, [r7, #0]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8004d7a:	4e2f      	ldr	r6, [pc, #188]	; (8004e38 <ms5611_update+0xc8>)
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8004d7c:	0052      	lsls	r2, r2, #1
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8004d7e:	ad03      	add	r5, sp, #12
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8004d80:	f042 0250 	orr.w	r2, r2, #80	; 0x50
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8004d84:	4623      	mov	r3, r4
 8004d86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d8a:	2177      	movs	r1, #119	; 0x77
 8004d8c:	6830      	ldr	r0, [r6, #0]
 8004d8e:	9500      	str	r5, [sp, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8004d90:	f8ad 400c 	strh.w	r4, [sp, #12]
 8004d94:	f88d 400e 	strb.w	r4, [sp, #14]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8004d98:	f7ff ff02 	bl	8004ba0 <I2C_write>
	delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8004d9c:	200c      	movs	r0, #12
 8004d9e:	f000 fbd9 	bl	8005554 <delay>
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8004da2:	4622      	mov	r2, r4
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8004da4:	f8ad 400c 	strh.w	r4, [sp, #12]
 8004da8:	f88d 400e 	strb.w	r4, [sp, #14]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8004dac:	2400      	movs	r4, #0
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8004dae:	6830      	ldr	r0, [r6, #0]
 8004db0:	9500      	str	r5, [sp, #0]
 8004db2:	2303      	movs	r3, #3
 8004db4:	2177      	movs	r1, #119	; 0x77
 8004db6:	f7ff fee3 	bl	8004b80 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8004dba:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8004dbe:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004dc2:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8004dc6:	021b      	lsls	r3, r3, #8
 8004dc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (temp != 0){
 8004dcc:	4313      	orrs	r3, r2
		raw_temperature = temp;
 8004dce:	bf18      	it	ne
 8004dd0:	4a1a      	ldrne	r2, [pc, #104]	; (8004e3c <ms5611_update+0xcc>)
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8004dd2:	f04f 0177 	mov.w	r1, #119	; 0x77
		raw_temperature = temp;
 8004dd6:	bf18      	it	ne
 8004dd8:	6013      	strne	r3, [r2, #0]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8004dda:	783a      	ldrb	r2, [r7, #0]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8004ddc:	4623      	mov	r3, r4
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 8004dde:	0052      	lsls	r2, r2, #1
 8004de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8004de4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004de8:	6830      	ldr	r0, [r6, #0]
 8004dea:	9500      	str	r5, [sp, #0]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8004dec:	f8ad 400c 	strh.w	r4, [sp, #12]
 8004df0:	f88d 400e 	strb.w	r4, [sp, #14]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8004df4:	f7ff fed4 	bl	8004ba0 <I2C_write>
	delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8004df8:	200c      	movs	r0, #12
 8004dfa:	f000 fbab 	bl	8005554 <delay>
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8004dfe:	4622      	mov	r2, r4
 8004e00:	6830      	ldr	r0, [r6, #0]
 8004e02:	9500      	str	r5, [sp, #0]
 8004e04:	2303      	movs	r3, #3
 8004e06:	2177      	movs	r1, #119	; 0x77
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8004e08:	f8ad 400c 	strh.w	r4, [sp, #12]
 8004e0c:	f88d 400e 	strb.w	r4, [sp, #14]
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8004e10:	f7ff feb6 	bl	8004b80 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8004e14:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8004e18:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004e1c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8004e20:	021b      	lsls	r3, r3, #8
 8004e22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (temp != 0){
 8004e26:	4313      	orrs	r3, r2
		raw_pressure = temp;
 8004e28:	bf1c      	itt	ne
 8004e2a:	4a05      	ldrne	r2, [pc, #20]	; (8004e40 <ms5611_update+0xd0>)
 8004e2c:	6013      	strne	r3, [r2, #0]
	ms5611_update_temperature();
	ms5611_update_pressure();
}
 8004e2e:	b005      	add	sp, #20
 8004e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e32:	bf00      	nop
 8004e34:	2000003c 	.word	0x2000003c
 8004e38:	200007d4 	.word	0x200007d4
 8004e3c:	20000d24 	.word	0x20000d24
 8004e40:	20000d14 	.word	0x20000d14
 8004e44:	00000000 	.word	0x00000000

08004e48 <ms5611_get_pressure>:

/**
 * Get calibrated pressure, unit: mBar
 * @return calibrated pressure
 */
double ms5611_get_pressure(){
 8004e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 8004e4c:	4b74      	ldr	r3, [pc, #464]	; (8005020 <ms5611_get_pressure+0x1d8>)
 8004e4e:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8005044 <ms5611_get_pressure+0x1fc>
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	f8b8 3008 	ldrh.w	r3, [r8, #8]
double ms5611_get_pressure(){
 8004e58:	b085      	sub	sp, #20
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8004e5a:	f8b8 000a 	ldrh.w	r0, [r8, #10]
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 8004e5e:	eba2 2903 	sub.w	r9, r2, r3, lsl #8
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8004e62:	f7fb facf 	bl	8000404 <__aeabi_i2d>
 8004e66:	2200      	movs	r2, #0
 8004e68:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8004e6c:	f7fb fb34 	bl	80004d8 <__aeabi_dmul>
 8004e70:	4604      	mov	r4, r0
 8004e72:	4648      	mov	r0, r9
 8004e74:	460d      	mov	r5, r1
 8004e76:	f7fb fab5 	bl	80003e4 <__aeabi_ui2d>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4620      	mov	r0, r4
 8004e80:	4629      	mov	r1, r5
 8004e82:	f7fb fb29 	bl	80004d8 <__aeabi_dmul>
 8004e86:	4604      	mov	r4, r0

	double OFF = fc[1] * (65536.0) + fc[3] * dT / (128);
 8004e88:	f8b8 0006 	ldrh.w	r0, [r8, #6]
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8004e8c:	460d      	mov	r5, r1
	double OFF = fc[1] * (65536.0) + fc[3] * dT / (128);
 8004e8e:	fb09 f000 	mul.w	r0, r9, r0
 8004e92:	09c0      	lsrs	r0, r0, #7
 8004e94:	f7fb faa6 	bl	80003e4 <__aeabi_ui2d>
 8004e98:	4606      	mov	r6, r0
 8004e9a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8004e9e:	460f      	mov	r7, r1
 8004ea0:	f7fb fab0 	bl	8000404 <__aeabi_i2d>
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	4b5f      	ldr	r3, [pc, #380]	; (8005024 <ms5611_get_pressure+0x1dc>)
 8004ea8:	f7fb fb16 	bl	80004d8 <__aeabi_dmul>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	4639      	mov	r1, r7
 8004eb4:	f7fb f95a 	bl	800016c <__adddf3>
 8004eb8:	4682      	mov	sl, r0
	double SENS = fc[0] * (32768.0) + fc[2] * dT / (256);
 8004eba:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8004ebe:	468b      	mov	fp, r1
 8004ec0:	fb09 f000 	mul.w	r0, r9, r0
 8004ec4:	0a00      	lsrs	r0, r0, #8
 8004ec6:	f7fb fa8d 	bl	80003e4 <__aeabi_ui2d>
 8004eca:	4606      	mov	r6, r0
 8004ecc:	f8b8 0000 	ldrh.w	r0, [r8]
 8004ed0:	460f      	mov	r7, r1
 8004ed2:	f7fb fa97 	bl	8000404 <__aeabi_i2d>
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	4b53      	ldr	r3, [pc, #332]	; (8005028 <ms5611_get_pressure+0x1e0>)
 8004eda:	f7fb fafd 	bl	80004d8 <__aeabi_dmul>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	4639      	mov	r1, r7
 8004ee6:	f7fb f941 	bl	800016c <__adddf3>

	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 8004eea:	4b50      	ldr	r3, [pc, #320]	; (800502c <ms5611_get_pressure+0x1e4>)
	double SENS = fc[0] * (32768.0) + fc[2] * dT / (256);
 8004eec:	4606      	mov	r6, r0
	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 8004eee:	6818      	ldr	r0, [r3, #0]
	double SENS = fc[0] * (32768.0) + fc[2] * dT / (256);
 8004ef0:	460f      	mov	r7, r1
	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 8004ef2:	f7fb fa77 	bl	80003e4 <__aeabi_ui2d>

	double T2=0, OFF2=0, SENS2=0;
	if (TEMP < 2000){
 8004ef6:	2200      	movs	r2, #0
	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit 0.01mbar
 8004ef8:	e9cd 0100 	strd	r0, r1, [sp]
	if (TEMP < 2000){
 8004efc:	2300      	movs	r3, #0
 8004efe:	4620      	mov	r0, r4
 8004f00:	4629      	mov	r1, r5
 8004f02:	f7fb fd5b 	bl	80009bc <__aeabi_dcmplt>
 8004f06:	b9a8      	cbnz	r0, 8004f34 <ms5611_get_pressure+0xec>

	TEMP = TEMP - T2;
	OFF = OFF - OFF2;
	SENS = SENS - SENS2;

	P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768.0);//unit mbar
 8004f08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	4b48      	ldr	r3, [pc, #288]	; (8005030 <ms5611_get_pressure+0x1e8>)
 8004f10:	f7fb fae2 	bl	80004d8 <__aeabi_dmul>
 8004f14:	4632      	mov	r2, r6
 8004f16:	463b      	mov	r3, r7
 8004f18:	f7fb fade 	bl	80004d8 <__aeabi_dmul>
 8004f1c:	4652      	mov	r2, sl
 8004f1e:	465b      	mov	r3, fp
 8004f20:	f7fb f922 	bl	8000168 <__aeabi_dsub>
	return P / 100;//unit mbar
 8004f24:	a338      	add	r3, pc, #224	; (adr r3, 8005008 <ms5611_get_pressure+0x1c0>)
 8004f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2a:	f7fb fad5 	bl	80004d8 <__aeabi_dmul>
}
 8004f2e:	b005      	add	sp, #20
 8004f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		OFF2 = 5 * (TEMP-2000) * (TEMP-2000) / 2;
 8004f34:	4622      	mov	r2, r4
 8004f36:	462b      	mov	r3, r5
 8004f38:	4620      	mov	r0, r4
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	f7fb facc 	bl	80004d8 <__aeabi_dmul>
 8004f40:	2200      	movs	r2, #0
 8004f42:	4b3c      	ldr	r3, [pc, #240]	; (8005034 <ms5611_get_pressure+0x1ec>)
 8004f44:	4680      	mov	r8, r0
 8004f46:	4689      	mov	r9, r1
 8004f48:	f7fb fac6 	bl	80004d8 <__aeabi_dmul>
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 8004f4c:	2200      	movs	r2, #0
		OFF2 = 5 * (TEMP-2000) * (TEMP-2000) / 2;
 8004f4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 8004f52:	4b39      	ldr	r3, [pc, #228]	; (8005038 <ms5611_get_pressure+0x1f0>)
 8004f54:	4640      	mov	r0, r8
 8004f56:	4649      	mov	r1, r9
 8004f58:	f7fb fabe 	bl	80004d8 <__aeabi_dmul>
		if (TEMP < -1500){
 8004f5c:	a32c      	add	r3, pc, #176	; (adr r3, 8005010 <ms5611_get_pressure+0x1c8>)
 8004f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 8004f62:	4680      	mov	r8, r0
 8004f64:	4689      	mov	r9, r1
		if (TEMP < -1500){
 8004f66:	4620      	mov	r0, r4
 8004f68:	4629      	mov	r1, r5
 8004f6a:	f7fb fd27 	bl	80009bc <__aeabi_dcmplt>
 8004f6e:	b3c8      	cbz	r0, 8004fe4 <ms5611_get_pressure+0x19c>
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 8004f70:	a329      	add	r3, pc, #164	; (adr r3, 8005018 <ms5611_get_pressure+0x1d0>)
 8004f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f76:	4620      	mov	r0, r4
 8004f78:	4629      	mov	r1, r5
 8004f7a:	f7fb f8f7 	bl	800016c <__adddf3>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	f7fb faa9 	bl	80004d8 <__aeabi_dmul>
 8004f86:	4642      	mov	r2, r8
 8004f88:	4604      	mov	r4, r0
 8004f8a:	460d      	mov	r5, r1
 8004f8c:	464b      	mov	r3, r9
 8004f8e:	4630      	mov	r0, r6
 8004f90:	4639      	mov	r1, r7
 8004f92:	f7fb f8e9 	bl	8000168 <__aeabi_dsub>
			SENS2 = SENS2 + 11/2 * (TEMP + 1500) * (TEMP + 1500);
 8004f96:	2200      	movs	r2, #0
 8004f98:	4606      	mov	r6, r0
 8004f9a:	460f      	mov	r7, r1
 8004f9c:	4b27      	ldr	r3, [pc, #156]	; (800503c <ms5611_get_pressure+0x1f4>)
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	4629      	mov	r1, r5
 8004fa2:	f7fb fa99 	bl	80004d8 <__aeabi_dmul>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4630      	mov	r0, r6
 8004fac:	4639      	mov	r1, r7
 8004fae:	f7fb f8db 	bl	8000168 <__aeabi_dsub>
 8004fb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fb6:	4606      	mov	r6, r0
 8004fb8:	460f      	mov	r7, r1
 8004fba:	4650      	mov	r0, sl
 8004fbc:	4659      	mov	r1, fp
 8004fbe:	f7fb f8d3 	bl	8000168 <__aeabi_dsub>
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	4680      	mov	r8, r0
 8004fc6:	4689      	mov	r9, r1
 8004fc8:	4b1d      	ldr	r3, [pc, #116]	; (8005040 <ms5611_get_pressure+0x1f8>)
 8004fca:	4620      	mov	r0, r4
 8004fcc:	4629      	mov	r1, r5
 8004fce:	f7fb fa83 	bl	80004d8 <__aeabi_dmul>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4640      	mov	r0, r8
 8004fd8:	4649      	mov	r1, r9
 8004fda:	f7fb f8c5 	bl	8000168 <__aeabi_dsub>
 8004fde:	4682      	mov	sl, r0
 8004fe0:	468b      	mov	fp, r1
 8004fe2:	e791      	b.n	8004f08 <ms5611_get_pressure+0xc0>
 8004fe4:	4642      	mov	r2, r8
 8004fe6:	464b      	mov	r3, r9
 8004fe8:	4630      	mov	r0, r6
 8004fea:	4639      	mov	r1, r7
 8004fec:	f7fb f8bc 	bl	8000168 <__aeabi_dsub>
 8004ff0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ff4:	4606      	mov	r6, r0
 8004ff6:	460f      	mov	r7, r1
 8004ff8:	4650      	mov	r0, sl
 8004ffa:	4659      	mov	r1, fp
 8004ffc:	f7fb f8b4 	bl	8000168 <__aeabi_dsub>
 8005000:	4682      	mov	sl, r0
 8005002:	468b      	mov	fp, r1
 8005004:	e780      	b.n	8004f08 <ms5611_get_pressure+0xc0>
 8005006:	bf00      	nop
 8005008:	47ae147b 	.word	0x47ae147b
 800500c:	3e947ae1 	.word	0x3e947ae1
 8005010:	00000000 	.word	0x00000000
 8005014:	c0ab5800 	.word	0xc0ab5800
 8005018:	00000000 	.word	0x00000000
 800501c:	40ab5800 	.word	0x40ab5800
 8005020:	20000d24 	.word	0x20000d24
 8005024:	40f00000 	.word	0x40f00000
 8005028:	40e00000 	.word	0x40e00000
 800502c:	20000d14 	.word	0x20000d14
 8005030:	3ea00000 	.word	0x3ea00000
 8005034:	40040000 	.word	0x40040000
 8005038:	3ff40000 	.word	0x3ff40000
 800503c:	40140000 	.word	0x40140000
 8005040:	401c0000 	.word	0x401c0000
 8005044:	20000d18 	.word	0x20000d18

08005048 <ms5611_timer_update>:
void ms5611_timer_update(){
 8005048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (read_index == 0){
 800504c:	4c74      	ldr	r4, [pc, #464]	; (8005220 <ms5611_timer_update+0x1d8>)
 800504e:	4d75      	ldr	r5, [pc, #468]	; (8005224 <ms5611_timer_update+0x1dc>)
 8005050:	7826      	ldrb	r6, [r4, #0]
void ms5611_timer_update(){
 8005052:	b086      	sub	sp, #24
 8005054:	6828      	ldr	r0, [r5, #0]
	if (read_index == 0){
 8005056:	2e00      	cmp	r6, #0
 8005058:	d076      	beq.n	8005148 <ms5611_timer_update+0x100>
	}else if (read_index == TEMP_READ_INTERVAL - 1){
 800505a:	2e09      	cmp	r6, #9
	uint8_t buffer[3] = {0x00,0x00,0x00};
 800505c:	f04f 0600 	mov.w	r6, #0
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8005060:	f10d 0a14 	add.w	sl, sp, #20
 8005064:	4632      	mov	r2, r6
 8005066:	f8cd a000 	str.w	sl, [sp]
 800506a:	f04f 0303 	mov.w	r3, #3
 800506e:	f04f 0177 	mov.w	r1, #119	; 0x77
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8005072:	f8ad 6014 	strh.w	r6, [sp, #20]
 8005076:	f88d 6016 	strb.w	r6, [sp, #22]
	}else if (read_index == TEMP_READ_INTERVAL - 1){
 800507a:	d033      	beq.n	80050e4 <ms5611_timer_update+0x9c>
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 800507c:	f7ff fd80 	bl	8004b80 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8005080:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8005084:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8005088:	f89d 2016 	ldrb.w	r2, [sp, #22]
 800508c:	021b      	lsls	r3, r3, #8
 800508e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (temp != 0){
 8005092:	4313      	orrs	r3, r2
		raw_pressure = temp;
 8005094:	bf18      	it	ne
 8005096:	4a64      	ldrne	r2, [pc, #400]	; (8005228 <ms5611_timer_update+0x1e0>)
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8005098:	f04f 0600 	mov.w	r6, #0
		raw_pressure = temp;
 800509c:	bf18      	it	ne
 800509e:	6013      	strne	r3, [r2, #0]
		XIMU_sens.pressure = ms5611_get_pressure();
 80050a0:	f7ff fed2 	bl	8004e48 <ms5611_get_pressure>
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80050a4:	4a61      	ldr	r2, [pc, #388]	; (800522c <ms5611_timer_update+0x1e4>)
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80050a6:	682b      	ldr	r3, [r5, #0]
		XIMU_sens.pressure = ms5611_get_pressure();
 80050a8:	4d61      	ldr	r5, [pc, #388]	; (8005230 <ms5611_timer_update+0x1e8>)
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80050aa:	7812      	ldrb	r2, [r2, #0]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80050ac:	f8cd a000 	str.w	sl, [sp]
		XIMU_sens.pressure = ms5611_get_pressure();
 80050b0:	e9c5 011e 	strd	r0, r1, [r5, #120]	; 0x78
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80050b4:	0052      	lsls	r2, r2, #1
 80050b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80050ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050be:	2177      	movs	r1, #119	; 0x77
 80050c0:	4618      	mov	r0, r3
 80050c2:	4633      	mov	r3, r6
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80050c4:	f8ad 6014 	strh.w	r6, [sp, #20]
 80050c8:	f88d 6016 	strb.w	r6, [sp, #22]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80050cc:	f7ff fd68 	bl	8004ba0 <I2C_write>
		read_index++;
 80050d0:	7823      	ldrb	r3, [r4, #0]
 80050d2:	3301      	adds	r3, #1
 80050d4:	7023      	strb	r3, [r4, #0]
	XIMU_sens.pt_ts = millis();
 80050d6:	f000 fa37 	bl	8005548 <millis>
 80050da:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
}
 80050de:	b006      	add	sp, #24
 80050e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 80050e4:	f7ff fd4c 	bl	8004b80 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 80050e8:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80050ec:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80050f0:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80050f4:	021b      	lsls	r3, r3, #8
 80050f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (temp != 0){
 80050fa:	4313      	orrs	r3, r2
		raw_pressure = temp;
 80050fc:	bf18      	it	ne
 80050fe:	4a4a      	ldrne	r2, [pc, #296]	; (8005228 <ms5611_timer_update+0x1e0>)
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8005100:	f04f 0600 	mov.w	r6, #0
		raw_pressure = temp;
 8005104:	bf18      	it	ne
 8005106:	6013      	strne	r3, [r2, #0]
		XIMU_sens.pressure = ms5611_get_pressure();
 8005108:	f7ff fe9e 	bl	8004e48 <ms5611_get_pressure>
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 800510c:	4a47      	ldr	r2, [pc, #284]	; (800522c <ms5611_timer_update+0x1e4>)
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 800510e:	682b      	ldr	r3, [r5, #0]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8005110:	7812      	ldrb	r2, [r2, #0]
		XIMU_sens.pressure = ms5611_get_pressure();
 8005112:	4d47      	ldr	r5, [pc, #284]	; (8005230 <ms5611_timer_update+0x1e8>)
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8005114:	0052      	lsls	r2, r2, #1
 8005116:	f042 0250 	orr.w	r2, r2, #80	; 0x50
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 800511a:	f8cd a000 	str.w	sl, [sp]
 800511e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
		XIMU_sens.pressure = ms5611_get_pressure();
 8005122:	e9c5 011e 	strd	r0, r1, [r5, #120]	; 0x78
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8005126:	2177      	movs	r1, #119	; 0x77
 8005128:	4618      	mov	r0, r3
 800512a:	4633      	mov	r3, r6
	uint8_t buffer[3] = {0x00,0x00,0x00};
 800512c:	f8ad 6014 	strh.w	r6, [sp, #20]
 8005130:	f88d 6016 	strb.w	r6, [sp, #22]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 8005134:	f7ff fd34 	bl	8004ba0 <I2C_write>
		read_index = 0;
 8005138:	7026      	strb	r6, [r4, #0]
	XIMU_sens.pt_ts = millis();
 800513a:	f000 fa05 	bl	8005548 <millis>
 800513e:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
}
 8005142:	b006      	add	sp, #24
 8005144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8005148:	f10d 0a14 	add.w	sl, sp, #20
 800514c:	4632      	mov	r2, r6
 800514e:	2303      	movs	r3, #3
 8005150:	2177      	movs	r1, #119	; 0x77
 8005152:	f8cd a000 	str.w	sl, [sp]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8005156:	f8ad 6014 	strh.w	r6, [sp, #20]
 800515a:	f88d 6016 	strb.w	r6, [sp, #22]
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 800515e:	f7ff fd0f 	bl	8004b80 <I2C_read>
	uint32_t temp = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8005162:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8005166:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800516a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800516e:	0200      	lsls	r0, r0, #8
 8005170:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
	if (temp != 0){
 8005174:	4318      	orrs	r0, r3
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 8005176:	4e2f      	ldr	r6, [pc, #188]	; (8005234 <ms5611_timer_update+0x1ec>)
		raw_temperature = temp;
 8005178:	4b2f      	ldr	r3, [pc, #188]	; (8005238 <ms5611_timer_update+0x1f0>)
 800517a:	bf0c      	ite	eq
 800517c:	6818      	ldreq	r0, [r3, #0]
 800517e:	6018      	strne	r0, [r3, #0]
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 8005180:	8933      	ldrh	r3, [r6, #8]
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8005182:	eba0 2003 	sub.w	r0, r0, r3, lsl #8
 8005186:	f7fb f92d 	bl	80003e4 <__aeabi_ui2d>
 800518a:	4680      	mov	r8, r0
 800518c:	4689      	mov	r9, r1
 800518e:	8970      	ldrh	r0, [r6, #10]
 8005190:	f7fb f938 	bl	8000404 <__aeabi_i2d>
 8005194:	2200      	movs	r2, #0
 8005196:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800519a:	f7fb f99d 	bl	80004d8 <__aeabi_dmul>
 800519e:	4642      	mov	r2, r8
 80051a0:	464b      	mov	r3, r9
 80051a2:	f7fb f999 	bl	80004d8 <__aeabi_dmul>
 80051a6:	2200      	movs	r2, #0
 80051a8:	4b24      	ldr	r3, [pc, #144]	; (800523c <ms5611_timer_update+0x1f4>)
 80051aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051ae:	f7fa ffdd 	bl	800016c <__adddf3>
	if (TEMP < 2000.0){
 80051b2:	2200      	movs	r2, #0
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 80051b4:	4606      	mov	r6, r0
 80051b6:	460f      	mov	r7, r1
	if (TEMP < 2000.0){
 80051b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051bc:	2300      	movs	r3, #0
 80051be:	f7fb fbfd 	bl	80009bc <__aeabi_dcmplt>
 80051c2:	b998      	cbnz	r0, 80051ec <ms5611_timer_update+0x1a4>
	return TEMP / 100.0;
 80051c4:	a314      	add	r3, pc, #80	; (adr r3, 8005218 <ms5611_timer_update+0x1d0>)
 80051c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ca:	4630      	mov	r0, r6
 80051cc:	4639      	mov	r1, r7
 80051ce:	f7fb f983 	bl	80004d8 <__aeabi_dmul>
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80051d2:	4a16      	ldr	r2, [pc, #88]	; (800522c <ms5611_timer_update+0x1e4>)
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80051d4:	682b      	ldr	r3, [r5, #0]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80051d6:	7812      	ldrb	r2, [r2, #0]
		XIMU_sens.temperature = ms5611_get_temperature();
 80051d8:	4d15      	ldr	r5, [pc, #84]	; (8005230 <ms5611_timer_update+0x1e8>)
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80051da:	0052      	lsls	r2, r2, #1
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 80051dc:	f8cd a000 	str.w	sl, [sp]
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80051e0:	2600      	movs	r6, #0
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80051e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		XIMU_sens.temperature = ms5611_get_temperature();
 80051e6:	e9c5 0120 	strd	r0, r1, [r5, #128]	; 0x80
 80051ea:	e766      	b.n	80050ba <ms5611_timer_update+0x72>
		T2 = dT * (dT / (2147483648.0));
 80051ec:	4642      	mov	r2, r8
 80051ee:	464b      	mov	r3, r9
 80051f0:	4640      	mov	r0, r8
 80051f2:	4649      	mov	r1, r9
 80051f4:	f7fb f970 	bl	80004d8 <__aeabi_dmul>
 80051f8:	2200      	movs	r2, #0
 80051fa:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 80051fe:	f7fb f96b 	bl	80004d8 <__aeabi_dmul>
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	4630      	mov	r0, r6
 8005208:	4639      	mov	r1, r7
 800520a:	f7fa ffad 	bl	8000168 <__aeabi_dsub>
 800520e:	4606      	mov	r6, r0
 8005210:	460f      	mov	r7, r1
 8005212:	e7d7      	b.n	80051c4 <ms5611_timer_update+0x17c>
 8005214:	f3af 8000 	nop.w
 8005218:	47ae147b 	.word	0x47ae147b
 800521c:	3f847ae1 	.word	0x3f847ae1
 8005220:	200003be 	.word	0x200003be
 8005224:	200007d4 	.word	0x200007d4
 8005228:	20000d14 	.word	0x20000d14
 800522c:	2000003c 	.word	0x2000003c
 8005230:	200005f8 	.word	0x200005f8
 8005234:	20000d18 	.word	0x20000d18
 8005238:	20000d24 	.word	0x20000d24
 800523c:	409f4000 	.word	0x409f4000

08005240 <quat2mat>:
#include "quaternion.h"
#include "arm_math.h"



void quat2mat(arm_matrix_instance_f32* q_,arm_matrix_instance_f32* R_){
 8005240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifdef QUATERNION_SIZE_CHECK
	if (q_->numCols != 1 || q_->numRows != 4 || R_->numCols != 3 || R_->numRows != 3){
		return;
	}
#endif
	float32_t* q = q_->pData;
 8005244:	6845      	ldr	r5, [r0, #4]
void quat2mat(arm_matrix_instance_f32* q_,arm_matrix_instance_f32* R_){
 8005246:	b085      	sub	sp, #20
	float32_t* R = R_->pData;

	float32_t q0_2 = q[0]*q[0];
 8005248:	f8d5 a000 	ldr.w	sl, [r5]
	float32_t* R = R_->pData;
 800524c:	684c      	ldr	r4, [r1, #4]
	float32_t q0_2 = q[0]*q[0];
 800524e:	4650      	mov	r0, sl
 8005250:	4651      	mov	r1, sl
 8005252:	f7fb fd97 	bl	8000d84 <__aeabi_fmul>
	float32_t q1_2 = q[1]*q[1];
 8005256:	f8d5 8004 	ldr.w	r8, [r5, #4]
	float32_t q0_2 = q[0]*q[0];
 800525a:	9002      	str	r0, [sp, #8]
	float32_t q1_2 = q[1]*q[1];
 800525c:	4641      	mov	r1, r8
 800525e:	4640      	mov	r0, r8
 8005260:	f7fb fd90 	bl	8000d84 <__aeabi_fmul>
	float32_t q2_2 = q[2]*q[2];
 8005264:	68af      	ldr	r7, [r5, #8]
	float32_t q1_2 = q[1]*q[1];
 8005266:	9000      	str	r0, [sp, #0]
	float32_t q2_2 = q[2]*q[2];
 8005268:	4639      	mov	r1, r7
 800526a:	4638      	mov	r0, r7
 800526c:	f7fb fd8a 	bl	8000d84 <__aeabi_fmul>
	float32_t q3_2 = q[3]*q[3];
 8005270:	f8d5 900c 	ldr.w	r9, [r5, #12]
	float32_t q2_2 = q[2]*q[2];
 8005274:	4606      	mov	r6, r0
	float32_t q3_2 = q[3]*q[3];
 8005276:	4649      	mov	r1, r9
 8005278:	4648      	mov	r0, r9
 800527a:	f7fb fd83 	bl	8000d84 <__aeabi_fmul>
	float32_t q0q1_ = 2 * q[0]*q[1];
 800527e:	4641      	mov	r1, r8
	float32_t q3_2 = q[3]*q[3];
 8005280:	4605      	mov	r5, r0
	float32_t q0q1_ = 2 * q[0]*q[1];
 8005282:	4650      	mov	r0, sl
 8005284:	f7fb fd7e 	bl	8000d84 <__aeabi_fmul>
 8005288:	4601      	mov	r1, r0
 800528a:	f7fb fc73 	bl	8000b74 <__addsf3>
	float32_t q0q2_ = 2 * q[0]*q[2];
 800528e:	4639      	mov	r1, r7
	float32_t q0q1_ = 2 * q[0]*q[1];
 8005290:	9003      	str	r0, [sp, #12]
	float32_t q0q2_ = 2 * q[0]*q[2];
 8005292:	4650      	mov	r0, sl
 8005294:	f7fb fd76 	bl	8000d84 <__aeabi_fmul>
 8005298:	4601      	mov	r1, r0
 800529a:	f7fb fc6b 	bl	8000b74 <__addsf3>
	float32_t q0q3_ = 2 * q[0]*q[3];
 800529e:	4649      	mov	r1, r9
	float32_t q0q2_ = 2 * q[0]*q[2];
 80052a0:	9001      	str	r0, [sp, #4]
	float32_t q0q3_ = 2 * q[0]*q[3];
 80052a2:	4650      	mov	r0, sl
 80052a4:	f7fb fd6e 	bl	8000d84 <__aeabi_fmul>
 80052a8:	4601      	mov	r1, r0
 80052aa:	f7fb fc63 	bl	8000b74 <__addsf3>
	float32_t q1q2_ = 2 * q[1]*q[2];
 80052ae:	4639      	mov	r1, r7
	float32_t q0q3_ = 2 * q[0]*q[3];
 80052b0:	4682      	mov	sl, r0
	float32_t q1q2_ = 2 * q[1]*q[2];
 80052b2:	4640      	mov	r0, r8
 80052b4:	f7fb fd66 	bl	8000d84 <__aeabi_fmul>
 80052b8:	4601      	mov	r1, r0
 80052ba:	f7fb fc5b 	bl	8000b74 <__addsf3>
	float32_t q1q3_ = 2 * q[1]*q[3];
 80052be:	4649      	mov	r1, r9
	float32_t q1q2_ = 2 * q[1]*q[2];
 80052c0:	4683      	mov	fp, r0
	float32_t q1q3_ = 2 * q[1]*q[3];
 80052c2:	4640      	mov	r0, r8
 80052c4:	f7fb fd5e 	bl	8000d84 <__aeabi_fmul>
 80052c8:	4601      	mov	r1, r0
 80052ca:	f7fb fc53 	bl	8000b74 <__addsf3>
	float32_t q2q3_ = 2 * q[2]*q[3];
 80052ce:	4649      	mov	r1, r9
	float32_t q1q3_ = 2 * q[1]*q[3];
 80052d0:	4680      	mov	r8, r0
	float32_t q2q3_ = 2 * q[2]*q[3];
 80052d2:	4638      	mov	r0, r7
 80052d4:	f7fb fd56 	bl	8000d84 <__aeabi_fmul>
 80052d8:	4601      	mov	r1, r0
 80052da:	f7fb fc4b 	bl	8000b74 <__addsf3>

	R[0] = q0_2 + q1_2 - q2_2 - q3_2;
 80052de:	f8dd 9008 	ldr.w	r9, [sp, #8]
	float32_t q2q3_ = 2 * q[2]*q[3];
 80052e2:	4607      	mov	r7, r0
	R[0] = q0_2 + q1_2 - q2_2 - q3_2;
 80052e4:	9900      	ldr	r1, [sp, #0]
 80052e6:	4648      	mov	r0, r9
 80052e8:	f7fb fc44 	bl	8000b74 <__addsf3>
 80052ec:	4631      	mov	r1, r6
 80052ee:	f7fb fc3f 	bl	8000b70 <__aeabi_fsub>
 80052f2:	4629      	mov	r1, r5
 80052f4:	f7fb fc3c 	bl	8000b70 <__aeabi_fsub>
	R[1] = q1q2_ - q0q3_;
 80052f8:	4651      	mov	r1, sl
	R[0] = q0_2 + q1_2 - q2_2 - q3_2;
 80052fa:	6020      	str	r0, [r4, #0]
	R[1] = q1q2_ - q0q3_;
 80052fc:	4658      	mov	r0, fp
 80052fe:	f7fb fc37 	bl	8000b70 <__aeabi_fsub>
	R[2] = q1q3_ + q0q2_;
 8005302:	4641      	mov	r1, r8
	R[1] = q1q2_ - q0q3_;
 8005304:	6060      	str	r0, [r4, #4]
	R[2] = q1q3_ + q0q2_;
 8005306:	9801      	ldr	r0, [sp, #4]
 8005308:	f7fb fc34 	bl	8000b74 <__addsf3>
	R[3] = q1q2_ + q0q3_;
 800530c:	4659      	mov	r1, fp
	R[2] = q1q3_ + q0q2_;
 800530e:	60a0      	str	r0, [r4, #8]
	R[3] = q1q2_ + q0q3_;
 8005310:	4650      	mov	r0, sl
 8005312:	f7fb fc2f 	bl	8000b74 <__addsf3>
	R[4] = q0_2 - q1_2 + q2_2 - q3_2;
 8005316:	9900      	ldr	r1, [sp, #0]
	R[3] = q1q2_ + q0q3_;
 8005318:	60e0      	str	r0, [r4, #12]
	R[4] = q0_2 - q1_2 + q2_2 - q3_2;
 800531a:	4648      	mov	r0, r9
 800531c:	f7fb fc28 	bl	8000b70 <__aeabi_fsub>
 8005320:	4629      	mov	r1, r5
 8005322:	4681      	mov	r9, r0
 8005324:	f7fb fc24 	bl	8000b70 <__aeabi_fsub>
 8005328:	4631      	mov	r1, r6
 800532a:	f7fb fc23 	bl	8000b74 <__addsf3>
	R[5] = q2q3_ - q0q1_;
 800532e:	f8dd a00c 	ldr.w	sl, [sp, #12]
	R[4] = q0_2 - q1_2 + q2_2 - q3_2;
 8005332:	6120      	str	r0, [r4, #16]
	R[5] = q2q3_ - q0q1_;
 8005334:	4651      	mov	r1, sl
 8005336:	4638      	mov	r0, r7
 8005338:	f7fb fc1a 	bl	8000b70 <__aeabi_fsub>
	R[6] = q1q3_ - q0q2_;
 800533c:	9901      	ldr	r1, [sp, #4]
	R[5] = q2q3_ - q0q1_;
 800533e:	6160      	str	r0, [r4, #20]
	R[6] = q1q3_ - q0q2_;
 8005340:	4640      	mov	r0, r8
 8005342:	f7fb fc15 	bl	8000b70 <__aeabi_fsub>
	R[7] = q2q3_ + q0q1_;
 8005346:	4639      	mov	r1, r7
	R[6] = q1q3_ - q0q2_;
 8005348:	61a0      	str	r0, [r4, #24]
	R[7] = q2q3_ + q0q1_;
 800534a:	4650      	mov	r0, sl
 800534c:	f7fb fc12 	bl	8000b74 <__addsf3>
	R[8] = q0_2 - q1_2 - q2_2 + q3_2;
 8005350:	4631      	mov	r1, r6
	R[7] = q2q3_ + q0q1_;
 8005352:	61e0      	str	r0, [r4, #28]
	R[8] = q0_2 - q1_2 - q2_2 + q3_2;
 8005354:	4648      	mov	r0, r9
 8005356:	f7fb fc0b 	bl	8000b70 <__aeabi_fsub>
 800535a:	4629      	mov	r1, r5
 800535c:	f7fb fc0a 	bl	8000b74 <__addsf3>
 8005360:	6220      	str	r0, [r4, #32]
}
 8005362:	b005      	add	sp, #20
 8005364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005368 <otimes>:
}

/**
 * quaternion multiplication
 */
void otimes(arm_matrix_instance_f32* q1,arm_matrix_instance_f32* q2,arm_matrix_instance_f32* q_res){
 8005368:	b570      	push	{r4, r5, r6, lr}
 800536a:	4616      	mov	r6, r2
	arm_matrix_instance_f32 qL;
	float32_t qL_data[4*4];
	arm_mat_init_f32(&qL,4,4,qL_data);
 800536c:	2204      	movs	r2, #4
void otimes(arm_matrix_instance_f32* q1,arm_matrix_instance_f32* q2,arm_matrix_instance_f32* q_res){
 800536e:	4604      	mov	r4, r0
 8005370:	460d      	mov	r5, r1
 8005372:	b092      	sub	sp, #72	; 0x48
	arm_mat_init_f32(&qL,4,4,qL_data);
 8005374:	4668      	mov	r0, sp
 8005376:	4611      	mov	r1, r2
 8005378:	ab02      	add	r3, sp, #8
 800537a:	f004 fa67 	bl	800984c <arm_mat_init_f32>
	float32_t* q = q_->pData;
 800537e:	6864      	ldr	r4, [r4, #4]
	float32_t* qL = qL_->pData;
 8005380:	9b01      	ldr	r3, [sp, #4]
	qL[0] = q[0];		qL[1] = -q[1];		qL[2] = -q[2];		qL[3] = -q[3];
 8005382:	6821      	ldr	r1, [r4, #0]

	quat_L(q1,&qL);
	arm_mat_mult_f32(&qL,q2,q_res);
 8005384:	4632      	mov	r2, r6
	qL[0] = q[0];		qL[1] = -q[1];		qL[2] = -q[2];		qL[3] = -q[3];
 8005386:	6019      	str	r1, [r3, #0]
 8005388:	6860      	ldr	r0, [r4, #4]
	arm_mat_mult_f32(&qL,q2,q_res);
 800538a:	4629      	mov	r1, r5
	qL[0] = q[0];		qL[1] = -q[1];		qL[2] = -q[2];		qL[3] = -q[3];
 800538c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005390:	6058      	str	r0, [r3, #4]
 8005392:	68a5      	ldr	r5, [r4, #8]
	arm_mat_mult_f32(&qL,q2,q_res);
 8005394:	4668      	mov	r0, sp
	qL[0] = q[0];		qL[1] = -q[1];		qL[2] = -q[2];		qL[3] = -q[3];
 8005396:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800539a:	609d      	str	r5, [r3, #8]
 800539c:	68e5      	ldr	r5, [r4, #12]
 800539e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80053a2:	60dd      	str	r5, [r3, #12]
	qL[4] = q[1];		qL[5] = q[0];		qL[6] = -q[3];		qL[7] = q[2];
 80053a4:	6865      	ldr	r5, [r4, #4]
 80053a6:	611d      	str	r5, [r3, #16]
 80053a8:	6825      	ldr	r5, [r4, #0]
 80053aa:	615d      	str	r5, [r3, #20]
 80053ac:	68e5      	ldr	r5, [r4, #12]
 80053ae:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80053b2:	619d      	str	r5, [r3, #24]
 80053b4:	68a5      	ldr	r5, [r4, #8]
 80053b6:	61dd      	str	r5, [r3, #28]
	qL[8] = q[2];		qL[9] = q[3];		qL[10] = q[0];		qL[11] = -q[1];
 80053b8:	68a5      	ldr	r5, [r4, #8]
 80053ba:	621d      	str	r5, [r3, #32]
 80053bc:	68e5      	ldr	r5, [r4, #12]
 80053be:	625d      	str	r5, [r3, #36]	; 0x24
 80053c0:	6825      	ldr	r5, [r4, #0]
 80053c2:	629d      	str	r5, [r3, #40]	; 0x28
 80053c4:	6865      	ldr	r5, [r4, #4]
 80053c6:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80053ca:	62dd      	str	r5, [r3, #44]	; 0x2c
	qL[12] = q[3];		qL[13] = -q[2];		qL[14] = q[1];		qL[15] = q[0];
 80053cc:	68e5      	ldr	r5, [r4, #12]
 80053ce:	631d      	str	r5, [r3, #48]	; 0x30
 80053d0:	68a5      	ldr	r5, [r4, #8]
 80053d2:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80053d6:	635d      	str	r5, [r3, #52]	; 0x34
 80053d8:	6865      	ldr	r5, [r4, #4]
 80053da:	639d      	str	r5, [r3, #56]	; 0x38
 80053dc:	6824      	ldr	r4, [r4, #0]
 80053de:	63dc      	str	r4, [r3, #60]	; 0x3c
	arm_mat_mult_f32(&qL,q2,q_res);
 80053e0:	f004 f980 	bl	80096e4 <arm_mat_mult_f32>
}
 80053e4:	b012      	add	sp, #72	; 0x48
 80053e6:	bd70      	pop	{r4, r5, r6, pc}

080053e8 <quatexp2>:

/**
 * quaternion exponential
 */
void quatexp2(arm_matrix_instance_f32* phi_, arm_matrix_instance_f32* q_){
 80053e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	float32_t* q = q_->pData;
	float32_t* phi = phi_->pData;
 80053ec:	6844      	ldr	r4, [r0, #4]
	float32_t* q = q_->pData;
 80053ee:	684d      	ldr	r5, [r1, #4]

	float32_t theta = 0.5 * sqrt(phi[0]*phi[0] + phi[1]*phi[1] + phi[2]*phi[2]);
 80053f0:	6821      	ldr	r1, [r4, #0]
 80053f2:	6867      	ldr	r7, [r4, #4]
 80053f4:	4608      	mov	r0, r1
 80053f6:	f7fb fcc5 	bl	8000d84 <__aeabi_fmul>
 80053fa:	4639      	mov	r1, r7
 80053fc:	4606      	mov	r6, r0
 80053fe:	4638      	mov	r0, r7
 8005400:	f7fb fcc0 	bl	8000d84 <__aeabi_fmul>
 8005404:	4601      	mov	r1, r0
 8005406:	4630      	mov	r0, r6
 8005408:	f7fb fbb4 	bl	8000b74 <__addsf3>
 800540c:	68a7      	ldr	r7, [r4, #8]
 800540e:	4606      	mov	r6, r0
 8005410:	4639      	mov	r1, r7
 8005412:	4638      	mov	r0, r7
 8005414:	f7fb fcb6 	bl	8000d84 <__aeabi_fmul>
 8005418:	4601      	mov	r1, r0
 800541a:	4630      	mov	r0, r6
 800541c:	f7fb fbaa 	bl	8000b74 <__addsf3>
 8005420:	f7fb f802 	bl	8000428 <__aeabi_f2d>
 8005424:	f006 ff98 	bl	800c358 <sqrt>
 8005428:	2200      	movs	r2, #0
 800542a:	4b35      	ldr	r3, [pc, #212]	; (8005500 <quatexp2+0x118>)
 800542c:	f7fb f854 	bl	80004d8 <__aeabi_dmul>
 8005430:	f7fb fb4a 	bl	8000ac8 <__aeabi_d2f>

	if (fabs(theta) <= 1e-6){
 8005434:	f7fa fff8 	bl	8000428 <__aeabi_f2d>
 8005438:	a32f      	add	r3, pc, #188	; (adr r3, 80054f8 <quatexp2+0x110>)
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	4606      	mov	r6, r0
 8005440:	460f      	mov	r7, r1
 8005442:	f7fb fac5 	bl	80009d0 <__aeabi_dcmple>
 8005446:	2800      	cmp	r0, #0
 8005448:	d14c      	bne.n	80054e4 <quatexp2+0xfc>
		q[0] = 1;	q[1] = 0;	q[2] = 0;	q[3] = 0;
		return;
	}

	q[0] = cos(theta);
 800544a:	4630      	mov	r0, r6
 800544c:	4639      	mov	r1, r7
 800544e:	f006 feb7 	bl	800c1c0 <cos>
 8005452:	f7fb fb39 	bl	8000ac8 <__aeabi_d2f>
	q[1] = sin(theta) * 0.5 * phi[0] / theta;
 8005456:	4639      	mov	r1, r7
	q[0] = cos(theta);
 8005458:	6028      	str	r0, [r5, #0]
	q[1] = sin(theta) * 0.5 * phi[0] / theta;
 800545a:	4630      	mov	r0, r6
 800545c:	f006 fee6 	bl	800c22c <sin>
 8005460:	4632      	mov	r2, r6
 8005462:	4680      	mov	r8, r0
 8005464:	4689      	mov	r9, r1
 8005466:	463b      	mov	r3, r7
 8005468:	2000      	movs	r0, #0
 800546a:	4926      	ldr	r1, [pc, #152]	; (8005504 <quatexp2+0x11c>)
 800546c:	f7fb f95e 	bl	800072c <__aeabi_ddiv>
 8005470:	4606      	mov	r6, r0
 8005472:	460f      	mov	r7, r1
 8005474:	6820      	ldr	r0, [r4, #0]
 8005476:	f7fa ffd7 	bl	8000428 <__aeabi_f2d>
 800547a:	2200      	movs	r2, #0
 800547c:	4b20      	ldr	r3, [pc, #128]	; (8005500 <quatexp2+0x118>)
 800547e:	f7fb f82b 	bl	80004d8 <__aeabi_dmul>
 8005482:	4632      	mov	r2, r6
 8005484:	463b      	mov	r3, r7
 8005486:	f7fb f827 	bl	80004d8 <__aeabi_dmul>
 800548a:	4642      	mov	r2, r8
 800548c:	464b      	mov	r3, r9
 800548e:	f7fb f823 	bl	80004d8 <__aeabi_dmul>
 8005492:	f7fb fb19 	bl	8000ac8 <__aeabi_d2f>
 8005496:	6068      	str	r0, [r5, #4]
	q[2] = sin(theta) * 0.5 * phi[1] / theta;
 8005498:	6860      	ldr	r0, [r4, #4]
 800549a:	f7fa ffc5 	bl	8000428 <__aeabi_f2d>
 800549e:	2200      	movs	r2, #0
 80054a0:	4b17      	ldr	r3, [pc, #92]	; (8005500 <quatexp2+0x118>)
 80054a2:	f7fb f819 	bl	80004d8 <__aeabi_dmul>
 80054a6:	4632      	mov	r2, r6
 80054a8:	463b      	mov	r3, r7
 80054aa:	f7fb f815 	bl	80004d8 <__aeabi_dmul>
 80054ae:	4642      	mov	r2, r8
 80054b0:	464b      	mov	r3, r9
 80054b2:	f7fb f811 	bl	80004d8 <__aeabi_dmul>
 80054b6:	f7fb fb07 	bl	8000ac8 <__aeabi_d2f>
 80054ba:	60a8      	str	r0, [r5, #8]
	q[3] = sin(theta) * 0.5 * phi[2] / theta;
 80054bc:	68a0      	ldr	r0, [r4, #8]
 80054be:	f7fa ffb3 	bl	8000428 <__aeabi_f2d>
 80054c2:	2200      	movs	r2, #0
 80054c4:	4b0e      	ldr	r3, [pc, #56]	; (8005500 <quatexp2+0x118>)
 80054c6:	f7fb f807 	bl	80004d8 <__aeabi_dmul>
 80054ca:	4632      	mov	r2, r6
 80054cc:	463b      	mov	r3, r7
 80054ce:	f7fb f803 	bl	80004d8 <__aeabi_dmul>
 80054d2:	4642      	mov	r2, r8
 80054d4:	464b      	mov	r3, r9
 80054d6:	f7fa ffff 	bl	80004d8 <__aeabi_dmul>
 80054da:	f7fb faf5 	bl	8000ac8 <__aeabi_d2f>
 80054de:	60e8      	str	r0, [r5, #12]
}
 80054e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		q[0] = 1;	q[1] = 0;	q[2] = 0;	q[3] = 0;
 80054e4:	2300      	movs	r3, #0
 80054e6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80054ea:	606b      	str	r3, [r5, #4]
 80054ec:	602a      	str	r2, [r5, #0]
 80054ee:	60ab      	str	r3, [r5, #8]
 80054f0:	60eb      	str	r3, [r5, #12]
}
 80054f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054f6:	bf00      	nop
 80054f8:	a0b5ed8d 	.word	0xa0b5ed8d
 80054fc:	3eb0c6f7 	.word	0x3eb0c6f7
 8005500:	3fe00000 	.word	0x3fe00000
 8005504:	3ff00000 	.word	0x3ff00000

08005508 <systickInit>:

static volatile uint32_t ticks = 0;

void systickInit(){

	   if (SysTick_Config(SystemCoreClock / SYSTICK_FREQ)){
 8005508:	4b0b      	ldr	r3, [pc, #44]	; (8005538 <systickInit+0x30>)
 800550a:	4a0c      	ldr	r2, [pc, #48]	; (800553c <systickInit+0x34>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	fba2 2303 	umull	r2, r3, r2, r3
 8005512:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005514:	3b01      	subs	r3, #1
 8005516:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800551a:	d300      	bcc.n	800551e <systickInit+0x16>
 800551c:	e7fe      	b.n	800551c <systickInit+0x14>
void systickInit(){
 800551e:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005520:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005522:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005524:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005526:	4a06      	ldr	r2, [pc, #24]	; (8005540 <systickInit+0x38>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005528:	4c06      	ldr	r4, [pc, #24]	; (8005544 <systickInit+0x3c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800552a:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800552c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
		   while (1){ /* Error in initializing Systick */ }
	   }
}
 8005530:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005532:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005534:	6011      	str	r1, [r2, #0]
 8005536:	4770      	bx	lr
 8005538:	20000038 	.word	0x20000038
 800553c:	10624dd3 	.word	0x10624dd3
 8005540:	e000e010 	.word	0xe000e010
 8005544:	e000ed00 	.word	0xe000ed00

08005548 <millis>:
/**
 * return milliseconds
 * @return time since systickInit in milliseconds
 */
uint32_t millis(){
	return ticks;
 8005548:	4b01      	ldr	r3, [pc, #4]	; (8005550 <millis+0x8>)
 800554a:	6818      	ldr	r0, [r3, #0]
}
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	200003c0 	.word	0x200003c0

08005554 <delay>:
	return ticks;
 8005554:	4a03      	ldr	r2, [pc, #12]	; (8005564 <delay+0x10>)
 8005556:	6811      	ldr	r1, [r2, #0]
 8005558:	6813      	ldr	r3, [r2, #0]
 * delay milliseconds
 * @param ms milliseconds to delay
 */
void delay(uint32_t ms){
	uint32_t start = millis();
	while(millis() - start < ms){
 800555a:	1a5b      	subs	r3, r3, r1
 800555c:	4283      	cmp	r3, r0
 800555e:	d3fb      	bcc.n	8005558 <delay+0x4>
		//do nothing
	}
}
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	200003c0 	.word	0x200003c0

08005568 <systick_Inc>:
/**
 * add this function in stm32f1xx_it
 * called by the system to update systick accordingly
 */
void systick_Inc(void) {
  ticks++;
 8005568:	4a02      	ldr	r2, [pc, #8]	; (8005574 <systick_Inc+0xc>)
 800556a:	6813      	ldr	r3, [r2, #0]
 800556c:	3301      	adds	r3, #1
 800556e:	6013      	str	r3, [r2, #0]
}
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	200003c0 	.word	0x200003c0

08005578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005578:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800557a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800557e:	490d      	ldr	r1, [pc, #52]	; (80055b4 <HAL_InitTick+0x3c>)
 8005580:	4a0d      	ldr	r2, [pc, #52]	; (80055b8 <HAL_InitTick+0x40>)
 8005582:	7809      	ldrb	r1, [r1, #0]
 8005584:	6812      	ldr	r2, [r2, #0]
 8005586:	fbb3 f3f1 	udiv	r3, r3, r1
{
 800558a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800558c:	fbb2 f0f3 	udiv	r0, r2, r3
 8005590:	f000 f8a2 	bl	80056d8 <HAL_SYSTICK_Config>
 8005594:	b908      	cbnz	r0, 800559a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005596:	2d0f      	cmp	r5, #15
 8005598:	d901      	bls.n	800559e <HAL_InitTick+0x26>
    return HAL_ERROR;
 800559a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800559c:	bd38      	pop	{r3, r4, r5, pc}
 800559e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055a0:	4602      	mov	r2, r0
 80055a2:	4629      	mov	r1, r5
 80055a4:	f04f 30ff 	mov.w	r0, #4294967295
 80055a8:	f000 f852 	bl	8005650 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80055ac:	4b03      	ldr	r3, [pc, #12]	; (80055bc <HAL_InitTick+0x44>)
 80055ae:	4620      	mov	r0, r4
 80055b0:	601d      	str	r5, [r3, #0]
}
 80055b2:	bd38      	pop	{r3, r4, r5, pc}
 80055b4:	2000003d 	.word	0x2000003d
 80055b8:	20000038 	.word	0x20000038
 80055bc:	20000040 	.word	0x20000040

080055c0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80055c0:	4a07      	ldr	r2, [pc, #28]	; (80055e0 <HAL_Init+0x20>)
{
 80055c2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80055c4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055c6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80055c8:	f043 0310 	orr.w	r3, r3, #16
 80055cc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055ce:	f000 f82d 	bl	800562c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80055d2:	2000      	movs	r0, #0
 80055d4:	f7ff ffd0 	bl	8005578 <HAL_InitTick>
  HAL_MspInit();
 80055d8:	f7fd f9a8 	bl	800292c <HAL_MspInit>
}
 80055dc:	2000      	movs	r0, #0
 80055de:	bd08      	pop	{r3, pc}
 80055e0:	40022000 	.word	0x40022000

080055e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80055e4:	4a03      	ldr	r2, [pc, #12]	; (80055f4 <HAL_IncTick+0x10>)
 80055e6:	4b04      	ldr	r3, [pc, #16]	; (80055f8 <HAL_IncTick+0x14>)
 80055e8:	6811      	ldr	r1, [r2, #0]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	440b      	add	r3, r1
 80055ee:	6013      	str	r3, [r2, #0]
}
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	20000d28 	.word	0x20000d28
 80055f8:	2000003d 	.word	0x2000003d

080055fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80055fc:	4b01      	ldr	r3, [pc, #4]	; (8005604 <HAL_GetTick+0x8>)
 80055fe:	6818      	ldr	r0, [r3, #0]
}
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	20000d28 	.word	0x20000d28

08005608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005608:	b538      	push	{r3, r4, r5, lr}
 800560a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800560c:	f7ff fff6 	bl	80055fc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005610:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8005612:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8005614:	d002      	beq.n	800561c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8005616:	4b04      	ldr	r3, [pc, #16]	; (8005628 <HAL_Delay+0x20>)
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800561c:	f7ff ffee 	bl	80055fc <HAL_GetTick>
 8005620:	1b40      	subs	r0, r0, r5
 8005622:	42a0      	cmp	r0, r4
 8005624:	d3fa      	bcc.n	800561c <HAL_Delay+0x14>
  {
  }
}
 8005626:	bd38      	pop	{r3, r4, r5, pc}
 8005628:	2000003d 	.word	0x2000003d

0800562c <HAL_NVIC_SetPriorityGrouping>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800562c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005630:	4a06      	ldr	r2, [pc, #24]	; (800564c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005632:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005634:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005636:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800563a:	400b      	ands	r3, r1
 800563c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8005644:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8005646:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	e000ed00 	.word	0xe000ed00

08005650 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005650:	4b18      	ldr	r3, [pc, #96]	; (80056b4 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005652:	b430      	push	{r4, r5}
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800565a:	f1c3 0507 	rsb	r5, r3, #7
 800565e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005660:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005664:	bf28      	it	cs
 8005666:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005668:	2c06      	cmp	r4, #6
 800566a:	d919      	bls.n	80056a0 <HAL_NVIC_SetPriority+0x50>
 800566c:	f04f 34ff 	mov.w	r4, #4294967295
 8005670:	3b03      	subs	r3, #3
 8005672:	409c      	lsls	r4, r3
 8005674:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005678:	f04f 32ff 	mov.w	r2, #4294967295
 800567c:	40aa      	lsls	r2, r5
 800567e:	ea21 0102 	bic.w	r1, r1, r2
 8005682:	fa01 f203 	lsl.w	r2, r1, r3
 8005686:	4322      	orrs	r2, r4
 8005688:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 800568a:	2800      	cmp	r0, #0
 800568c:	b2d2      	uxtb	r2, r2
 800568e:	db0a      	blt.n	80056a6 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005690:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005694:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005698:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800569c:	bc30      	pop	{r4, r5}
 800569e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056a0:	2400      	movs	r4, #0
 80056a2:	4623      	mov	r3, r4
 80056a4:	e7e8      	b.n	8005678 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056a6:	4b04      	ldr	r3, [pc, #16]	; (80056b8 <HAL_NVIC_SetPriority+0x68>)
 80056a8:	f000 000f 	and.w	r0, r0, #15
 80056ac:	4403      	add	r3, r0
 80056ae:	761a      	strb	r2, [r3, #24]
 80056b0:	bc30      	pop	{r4, r5}
 80056b2:	4770      	bx	lr
 80056b4:	e000ed00 	.word	0xe000ed00
 80056b8:	e000ecfc 	.word	0xe000ecfc

080056bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80056bc:	2800      	cmp	r0, #0
 80056be:	db07      	blt.n	80056d0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056c0:	2301      	movs	r3, #1
 80056c2:	f000 011f 	and.w	r1, r0, #31
 80056c6:	4a03      	ldr	r2, [pc, #12]	; (80056d4 <HAL_NVIC_EnableIRQ+0x18>)
 80056c8:	408b      	lsls	r3, r1
 80056ca:	0940      	lsrs	r0, r0, #5
 80056cc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	e000e100 	.word	0xe000e100

080056d8 <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056d8:	3801      	subs	r0, #1
 80056da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80056de:	d20d      	bcs.n	80056fc <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056e0:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056e2:	25f0      	movs	r5, #240	; 0xf0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056e4:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056e6:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056e8:	4b05      	ldr	r3, [pc, #20]	; (8005700 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056ea:	4c06      	ldr	r4, [pc, #24]	; (8005704 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056ec:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056ee:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056f2:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 80056f4:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056f6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056f8:	6019      	str	r1, [r3, #0]
 80056fa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80056fc:	2001      	movs	r0, #1
 80056fe:	4770      	bx	lr
 8005700:	e000e010 	.word	0xe000e010
 8005704:	e000ed00 	.word	0xe000ed00

08005708 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005708:	b350      	cbz	r0, 8005760 <HAL_DMA_Init+0x58>
 800570a:	4602      	mov	r2, r0
{
 800570c:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800570e:	e9d0 3601 	ldrd	r3, r6, [r0, #4]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005712:	2400      	movs	r4, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005714:	2501      	movs	r5, #1
  tmp |=  hdma->Init.Direction        |
 8005716:	4333      	orrs	r3, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005718:	68d6      	ldr	r6, [r2, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800571a:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800571c:	4333      	orrs	r3, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800571e:	4911      	ldr	r1, [pc, #68]	; (8005764 <HAL_DMA_Init+0x5c>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005720:	6916      	ldr	r6, [r2, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005722:	4f11      	ldr	r7, [pc, #68]	; (8005768 <HAL_DMA_Init+0x60>)
 8005724:	4401      	add	r1, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005726:	4333      	orrs	r3, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005728:	6956      	ldr	r6, [r2, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800572a:	fba7 7101 	umull	r7, r1, r7, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800572e:	4333      	orrs	r3, r6
 8005730:	6996      	ldr	r6, [r2, #24]
          hdma->Init.Mode                | hdma->Init.Priority;
 8005732:	69d7      	ldr	r7, [r2, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005734:	4333      	orrs	r3, r6
  tmp = hdma->Instance->CCR;
 8005736:	6806      	ldr	r6, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005738:	0909      	lsrs	r1, r1, #4
 800573a:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800573c:	f426 567f 	bic.w	r6, r6, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 8005740:	433b      	orrs	r3, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005742:	f026 0630 	bic.w	r6, r6, #48	; 0x30
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005746:	6411      	str	r1, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005748:	4908      	ldr	r1, [pc, #32]	; (800576c <HAL_DMA_Init+0x64>)
  tmp |=  hdma->Init.Direction        |
 800574a:	4333      	orrs	r3, r6
  hdma->DmaBaseAddress = DMA1;
 800574c:	63d1      	str	r1, [r2, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 800574e:	6003      	str	r3, [r0, #0]
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;

  return HAL_OK;
 8005750:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005752:	6394      	str	r4, [r2, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8005754:	f882 4020 	strb.w	r4, [r2, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8005758:	f882 5021 	strb.w	r5, [r2, #33]	; 0x21
}
 800575c:	bcf0      	pop	{r4, r5, r6, r7}
 800575e:	4770      	bx	lr
    return HAL_ERROR;
 8005760:	2001      	movs	r0, #1
}
 8005762:	4770      	bx	lr
 8005764:	bffdfff8 	.word	0xbffdfff8
 8005768:	cccccccd 	.word	0xcccccccd
 800576c:	40020000 	.word	0x40020000

08005770 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005770:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005772:	f890 4020 	ldrb.w	r4, [r0, #32]
 8005776:	2c01      	cmp	r4, #1
 8005778:	d032      	beq.n	80057e0 <HAL_DMA_Start_IT+0x70>
 800577a:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800577c:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8005780:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8005784:	42a5      	cmp	r5, r4
 8005786:	d125      	bne.n	80057d4 <HAL_DMA_Start_IT+0x64>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005788:	2600      	movs	r6, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800578a:	f04f 0e02 	mov.w	lr, #2
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800578e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005790:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8005792:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005794:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8005796:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 800579a:	40bd      	lsls	r5, r7
    __HAL_DMA_DISABLE(hdma);
 800579c:	f026 0601 	bic.w	r6, r6, #1

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057a0:	6847      	ldr	r7, [r0, #4]
    hdma->State = HAL_DMA_STATE_BUSY;
 80057a2:	f880 e021 	strb.w	lr, [r0, #33]	; 0x21
    __HAL_DMA_DISABLE(hdma);
 80057a6:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80057a8:	f8cc 5004 	str.w	r5, [ip, #4]
  hdma->Instance->CNDTR = DataLength;
 80057ac:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 80057ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057b0:	2f10      	cmp	r7, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80057b2:	bf0b      	itete	eq
 80057b4:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80057b6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80057b8:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80057ba:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80057bc:	b19b      	cbz	r3, 80057e6 <HAL_DMA_Start_IT+0x76>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	f043 030e 	orr.w	r3, r3, #14
 80057c4:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057c6:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 80057c8:	6822      	ldr	r2, [r4, #0]
}
 80057ca:	4618      	mov	r0, r3
    __HAL_DMA_ENABLE(hdma);
 80057cc:	f042 0201 	orr.w	r2, r2, #1
 80057d0:	6022      	str	r2, [r4, #0]
}
 80057d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hdma); 
 80057d4:	2200      	movs	r2, #0
    status = HAL_BUSY;
 80057d6:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma); 
 80057d8:	f880 2020 	strb.w	r2, [r0, #32]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 80057e0:	2302      	movs	r3, #2
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	f023 0304 	bic.w	r3, r3, #4
 80057ec:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	f043 030a 	orr.w	r3, r3, #10
 80057f4:	6023      	str	r3, [r4, #0]
 80057f6:	e7e6      	b.n	80057c6 <HAL_DMA_Start_IT+0x56>

080057f8 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80057f8:	2204      	movs	r2, #4
{
 80057fa:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80057fc:	e9d0 610f 	ldrd	r6, r1, [r0, #60]	; 0x3c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005800:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005802:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005804:	408a      	lsls	r2, r1
 8005806:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 8005808:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800580a:	d01f      	beq.n	800584c <HAL_DMA_IRQHandler+0x54>
 800580c:	076a      	lsls	r2, r5, #29
 800580e:	d51d      	bpl.n	800584c <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	0691      	lsls	r1, r2, #26
 8005814:	d403      	bmi.n	800581e <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	f022 0204 	bic.w	r2, r2, #4
 800581c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800581e:	4a3f      	ldr	r2, [pc, #252]	; (800591c <HAL_DMA_IRQHandler+0x124>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d05c      	beq.n	80058de <HAL_DMA_IRQHandler+0xe6>
 8005824:	3214      	adds	r2, #20
 8005826:	4293      	cmp	r3, r2
 8005828:	d061      	beq.n	80058ee <HAL_DMA_IRQHandler+0xf6>
 800582a:	3214      	adds	r2, #20
 800582c:	4293      	cmp	r3, r2
 800582e:	d068      	beq.n	8005902 <HAL_DMA_IRQHandler+0x10a>
 8005830:	3214      	adds	r2, #20
 8005832:	4293      	cmp	r3, r2
 8005834:	d06b      	beq.n	800590e <HAL_DMA_IRQHandler+0x116>
 8005836:	3214      	adds	r2, #20
 8005838:	4293      	cmp	r3, r2
 800583a:	d05d      	beq.n	80058f8 <HAL_DMA_IRQHandler+0x100>
 800583c:	3214      	adds	r2, #20
 800583e:	4293      	cmp	r3, r2
 8005840:	bf0c      	ite	eq
 8005842:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8005846:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800584a:	e049      	b.n	80058e0 <HAL_DMA_IRQHandler+0xe8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800584c:	2202      	movs	r2, #2
 800584e:	408a      	lsls	r2, r1
 8005850:	4222      	tst	r2, r4
 8005852:	d022      	beq.n	800589a <HAL_DMA_IRQHandler+0xa2>
 8005854:	07aa      	lsls	r2, r5, #30
 8005856:	d520      	bpl.n	800589a <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	0691      	lsls	r1, r2, #26
 800585c:	d406      	bmi.n	800586c <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 800585e:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	f022 020a 	bic.w	r2, r2, #10
 8005866:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005868:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800586c:	4a2b      	ldr	r2, [pc, #172]	; (800591c <HAL_DMA_IRQHandler+0x124>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d02b      	beq.n	80058ca <HAL_DMA_IRQHandler+0xd2>
 8005872:	3214      	adds	r2, #20
 8005874:	4293      	cmp	r3, r2
 8005876:	d042      	beq.n	80058fe <HAL_DMA_IRQHandler+0x106>
 8005878:	3214      	adds	r2, #20
 800587a:	4293      	cmp	r3, r2
 800587c:	d044      	beq.n	8005908 <HAL_DMA_IRQHandler+0x110>
 800587e:	3214      	adds	r2, #20
 8005880:	4293      	cmp	r3, r2
 8005882:	d036      	beq.n	80058f2 <HAL_DMA_IRQHandler+0xfa>
 8005884:	3214      	adds	r2, #20
 8005886:	4293      	cmp	r3, r2
 8005888:	d044      	beq.n	8005914 <HAL_DMA_IRQHandler+0x11c>
 800588a:	3214      	adds	r2, #20
 800588c:	4293      	cmp	r3, r2
 800588e:	bf0c      	ite	eq
 8005890:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8005894:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8005898:	e018      	b.n	80058cc <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800589a:	2208      	movs	r2, #8
 800589c:	408a      	lsls	r2, r1
 800589e:	4222      	tst	r2, r4
 80058a0:	d01b      	beq.n	80058da <HAL_DMA_IRQHandler+0xe2>
 80058a2:	072a      	lsls	r2, r5, #28
 80058a4:	d519      	bpl.n	80058da <HAL_DMA_IRQHandler+0xe2>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80058a6:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 80058a8:	2500      	movs	r5, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058aa:	681c      	ldr	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80058ac:	fa02 f101 	lsl.w	r1, r2, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058b0:	f024 040e 	bic.w	r4, r4, #14
 80058b4:	601c      	str	r4, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 80058b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80058b8:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80058ba:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80058bc:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80058c0:	f880 5020 	strb.w	r5, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80058c4:	b14b      	cbz	r3, 80058da <HAL_DMA_IRQHandler+0xe2>
}
 80058c6:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80058c8:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80058ca:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 80058cc:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80058ce:	4c14      	ldr	r4, [pc, #80]	; (8005920 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferCpltCallback != NULL)
 80058d0:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80058d2:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 80058d4:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80058d8:	b93a      	cbnz	r2, 80058ea <HAL_DMA_IRQHandler+0xf2>
}
 80058da:	bc70      	pop	{r4, r5, r6}
 80058dc:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80058de:	2304      	movs	r3, #4
 80058e0:	490f      	ldr	r1, [pc, #60]	; (8005920 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferHalfCpltCallback != NULL)
 80058e2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80058e4:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80058e6:	2a00      	cmp	r2, #0
 80058e8:	d0f7      	beq.n	80058da <HAL_DMA_IRQHandler+0xe2>
}
 80058ea:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 80058ec:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80058ee:	2340      	movs	r3, #64	; 0x40
 80058f0:	e7f6      	b.n	80058e0 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80058f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058f6:	e7e9      	b.n	80058cc <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80058f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80058fc:	e7f0      	b.n	80058e0 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80058fe:	2320      	movs	r3, #32
 8005900:	e7e4      	b.n	80058cc <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005906:	e7eb      	b.n	80058e0 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800590c:	e7de      	b.n	80058cc <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800590e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005912:	e7e5      	b.n	80058e0 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005914:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005918:	e7d8      	b.n	80058cc <HAL_DMA_IRQHandler+0xd4>
 800591a:	bf00      	nop
 800591c:	40020008 	.word	0x40020008
 8005920:	40020000 	.word	0x40020000

08005924 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005924:	680a      	ldr	r2, [r1, #0]
 8005926:	2a00      	cmp	r2, #0
 8005928:	f000 80db 	beq.w	8005ae2 <HAL_GPIO_Init+0x1be>
{
 800592c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00u;
 8005930:	f04f 0a00 	mov.w	sl, #0
{
 8005934:	b085      	sub	sp, #20
  uint32_t position = 0x00u;
 8005936:	4655      	mov	r5, sl
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005938:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 8005b0c <HAL_GPIO_Init+0x1e8>
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800593c:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 8005b10 <HAL_GPIO_Init+0x1ec>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005940:	4f6d      	ldr	r7, [pc, #436]	; (8005af8 <HAL_GPIO_Init+0x1d4>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005942:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8005b14 <HAL_GPIO_Init+0x1f0>
 8005946:	e003      	b.n	8005950 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8005948:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800594a:	fa32 f305 	lsrs.w	r3, r2, r5
 800594e:	d078      	beq.n	8005a42 <HAL_GPIO_Init+0x11e>
    ioposition = (0x01uL << position);
 8005950:	2301      	movs	r3, #1
 8005952:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005954:	ea02 0403 	and.w	r4, r2, r3
    if (iocurrent == ioposition)
 8005958:	42a3      	cmp	r3, r4
 800595a:	d1f5      	bne.n	8005948 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 800595c:	684a      	ldr	r2, [r1, #4]
 800595e:	2a12      	cmp	r2, #18
 8005960:	f000 809e 	beq.w	8005aa0 <HAL_GPIO_Init+0x17c>
 8005964:	f200 8087 	bhi.w	8005a76 <HAL_GPIO_Init+0x152>
 8005968:	2a02      	cmp	r2, #2
 800596a:	f000 809d 	beq.w	8005aa8 <HAL_GPIO_Init+0x184>
 800596e:	d97c      	bls.n	8005a6a <HAL_GPIO_Init+0x146>
 8005970:	2a03      	cmp	r2, #3
 8005972:	d069      	beq.n	8005a48 <HAL_GPIO_Init+0x124>
 8005974:	2a11      	cmp	r2, #17
 8005976:	d102      	bne.n	800597e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005978:	68cb      	ldr	r3, [r1, #12]
 800597a:	f103 0a04 	add.w	sl, r3, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800597e:	2cff      	cmp	r4, #255	; 0xff
 8005980:	d866      	bhi.n	8005a50 <HAL_GPIO_Init+0x12c>
 8005982:	4681      	mov	r9, r0
 8005984:	6803      	ldr	r3, [r0, #0]
 8005986:	00aa      	lsls	r2, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005988:	260f      	movs	r6, #15
 800598a:	fa06 fb02 	lsl.w	fp, r6, r2
 800598e:	ea23 030b 	bic.w	r3, r3, fp
 8005992:	fa0a f202 	lsl.w	r2, sl, r2
 8005996:	4313      	orrs	r3, r2
 8005998:	f8c9 3000 	str.w	r3, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800599c:	684a      	ldr	r2, [r1, #4]
 800599e:	00d3      	lsls	r3, r2, #3
 80059a0:	d561      	bpl.n	8005a66 <HAL_GPIO_Init+0x142>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80059a2:	f8dc 9018 	ldr.w	r9, [ip, #24]
 80059a6:	f025 0303 	bic.w	r3, r5, #3
 80059aa:	f049 0901 	orr.w	r9, r9, #1
 80059ae:	f8cc 9018 	str.w	r9, [ip, #24]
 80059b2:	f8dc 9018 	ldr.w	r9, [ip, #24]
 80059b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80059ba:	f009 0901 	and.w	r9, r9, #1
 80059be:	f8cd 900c 	str.w	r9, [sp, #12]
 80059c2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80059c6:	f005 0903 	and.w	r9, r5, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80059ca:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80059ce:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80059d2:	f8d3 b008 	ldr.w	fp, [r3, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80059d6:	fa06 f609 	lsl.w	r6, r6, r9
 80059da:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80059de:	4570      	cmp	r0, lr
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80059e0:	9601      	str	r6, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80059e2:	d011      	beq.n	8005a08 <HAL_GPIO_Init+0xe4>
 80059e4:	4540      	cmp	r0, r8
 80059e6:	d063      	beq.n	8005ab0 <HAL_GPIO_Init+0x18c>
 80059e8:	4e44      	ldr	r6, [pc, #272]	; (8005afc <HAL_GPIO_Init+0x1d8>)
 80059ea:	42b0      	cmp	r0, r6
 80059ec:	d07a      	beq.n	8005ae4 <HAL_GPIO_Init+0x1c0>
 80059ee:	4e44      	ldr	r6, [pc, #272]	; (8005b00 <HAL_GPIO_Init+0x1dc>)
 80059f0:	42b0      	cmp	r0, r6
 80059f2:	bf0c      	ite	eq
 80059f4:	f04f 0b03 	moveq.w	fp, #3
 80059f8:	f04f 0b04 	movne.w	fp, #4
 80059fc:	9e01      	ldr	r6, [sp, #4]
 80059fe:	fa0b f909 	lsl.w	r9, fp, r9
 8005a02:	ea46 0609 	orr.w	r6, r6, r9
 8005a06:	9601      	str	r6, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 8005a08:	609e      	str	r6, [r3, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8005a0a:	683b      	ldr	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a0c:	03d6      	lsls	r6, r2, #15
          SET_BIT(EXTI->IMR, iocurrent);
 8005a0e:	bf4c      	ite	mi
 8005a10:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005a12:	43a3      	bicpl	r3, r4
 8005a14:	603b      	str	r3, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8005a16:	687b      	ldr	r3, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a18:	0396      	lsls	r6, r2, #14
          SET_BIT(EXTI->EMR, iocurrent);
 8005a1a:	bf4c      	ite	mi
 8005a1c:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005a1e:	43a3      	bicpl	r3, r4
 8005a20:	607b      	str	r3, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8005a22:	68bb      	ldr	r3, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a24:	02d6      	lsls	r6, r2, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 8005a26:	bf4c      	ite	mi
 8005a28:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005a2a:	43a3      	bicpl	r3, r4
 8005a2c:	60bb      	str	r3, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a2e:	0292      	lsls	r2, r2, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 8005a30:	68fb      	ldr	r3, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a32:	d515      	bpl.n	8005a60 <HAL_GPIO_Init+0x13c>
          SET_BIT(EXTI->FTSR, iocurrent);
 8005a34:	431c      	orrs	r4, r3
 8005a36:	60fc      	str	r4, [r7, #12]
 8005a38:	680a      	ldr	r2, [r1, #0]
	position++;
 8005a3a:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a3c:	fa32 f305 	lsrs.w	r3, r2, r5
 8005a40:	d186      	bne.n	8005950 <HAL_GPIO_Init+0x2c>
  }
}
 8005a42:	b005      	add	sp, #20
 8005a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005a48:	2cff      	cmp	r4, #255	; 0xff
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005a4a:	f04f 0a00 	mov.w	sl, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005a4e:	d998      	bls.n	8005982 <HAL_GPIO_Init+0x5e>
 8005a50:	f105 4280 	add.w	r2, r5, #1073741824	; 0x40000000
 8005a54:	3a08      	subs	r2, #8
 8005a56:	6843      	ldr	r3, [r0, #4]
 8005a58:	0092      	lsls	r2, r2, #2
 8005a5a:	f100 0904 	add.w	r9, r0, #4
 8005a5e:	e793      	b.n	8005988 <HAL_GPIO_Init+0x64>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005a60:	ea23 0404 	bic.w	r4, r3, r4
 8005a64:	60fc      	str	r4, [r7, #12]
 8005a66:	680a      	ldr	r2, [r1, #0]
 8005a68:	e76e      	b.n	8005948 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8005a6a:	b1a2      	cbz	r2, 8005a96 <HAL_GPIO_Init+0x172>
 8005a6c:	2a01      	cmp	r2, #1
 8005a6e:	d186      	bne.n	800597e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005a70:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8005a74:	e783      	b.n	800597e <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8005a76:	4e23      	ldr	r6, [pc, #140]	; (8005b04 <HAL_GPIO_Init+0x1e0>)
 8005a78:	42b2      	cmp	r2, r6
 8005a7a:	d00c      	beq.n	8005a96 <HAL_GPIO_Init+0x172>
 8005a7c:	d920      	bls.n	8005ac0 <HAL_GPIO_Init+0x19c>
 8005a7e:	4e22      	ldr	r6, [pc, #136]	; (8005b08 <HAL_GPIO_Init+0x1e4>)
 8005a80:	42b2      	cmp	r2, r6
 8005a82:	d008      	beq.n	8005a96 <HAL_GPIO_Init+0x172>
 8005a84:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8005a88:	42b2      	cmp	r2, r6
 8005a8a:	d004      	beq.n	8005a96 <HAL_GPIO_Init+0x172>
 8005a8c:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8005a90:	42b2      	cmp	r2, r6
 8005a92:	f47f af74 	bne.w	800597e <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005a96:	688a      	ldr	r2, [r1, #8]
 8005a98:	b9e2      	cbnz	r2, 8005ad4 <HAL_GPIO_Init+0x1b0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005a9a:	f04f 0a04 	mov.w	sl, #4
 8005a9e:	e76e      	b.n	800597e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005aa0:	68cb      	ldr	r3, [r1, #12]
 8005aa2:	f103 0a0c 	add.w	sl, r3, #12
          break;
 8005aa6:	e76a      	b.n	800597e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005aa8:	68cb      	ldr	r3, [r1, #12]
 8005aaa:	f103 0a08 	add.w	sl, r3, #8
          break;
 8005aae:	e766      	b.n	800597e <HAL_GPIO_Init+0x5a>
 8005ab0:	f04f 0b01 	mov.w	fp, #1
 8005ab4:	fa0b f909 	lsl.w	r9, fp, r9
 8005ab8:	ea46 0609 	orr.w	r6, r6, r9
 8005abc:	9601      	str	r6, [sp, #4]
 8005abe:	e7a3      	b.n	8005a08 <HAL_GPIO_Init+0xe4>
      switch (GPIO_Init->Mode)
 8005ac0:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8005ac4:	42b2      	cmp	r2, r6
 8005ac6:	d0e6      	beq.n	8005a96 <HAL_GPIO_Init+0x172>
 8005ac8:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8005acc:	42b2      	cmp	r2, r6
 8005ace:	f47f af56 	bne.w	800597e <HAL_GPIO_Init+0x5a>
 8005ad2:	e7e0      	b.n	8005a96 <HAL_GPIO_Init+0x172>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005ad4:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8005ad6:	bf0c      	ite	eq
 8005ad8:	6103      	streq	r3, [r0, #16]
            GPIOx->BRR = ioposition;
 8005ada:	6143      	strne	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005adc:	f04f 0a08 	mov.w	sl, #8
 8005ae0:	e74d      	b.n	800597e <HAL_GPIO_Init+0x5a>
 8005ae2:	4770      	bx	lr
 8005ae4:	f04f 0b02 	mov.w	fp, #2
 8005ae8:	9e01      	ldr	r6, [sp, #4]
 8005aea:	fa0b f909 	lsl.w	r9, fp, r9
 8005aee:	ea46 0609 	orr.w	r6, r6, r9
 8005af2:	9601      	str	r6, [sp, #4]
 8005af4:	e788      	b.n	8005a08 <HAL_GPIO_Init+0xe4>
 8005af6:	bf00      	nop
 8005af8:	40010400 	.word	0x40010400
 8005afc:	40011000 	.word	0x40011000
 8005b00:	40011400 	.word	0x40011400
 8005b04:	10210000 	.word	0x10210000
 8005b08:	10310000 	.word	0x10310000
 8005b0c:	40021000 	.word	0x40021000
 8005b10:	40010800 	.word	0x40010800
 8005b14:	40010c00 	.word	0x40010c00

08005b18 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b18:	b902      	cbnz	r2, 8005b1c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005b1a:	0409      	lsls	r1, r1, #16
 8005b1c:	6101      	str	r1, [r0, #16]
  }
}
 8005b1e:	4770      	bx	lr

08005b20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b20:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8005b24:	4689      	mov	r9, r1
 8005b26:	4616      	mov	r6, r2
 8005b28:	461f      	mov	r7, r3
 8005b2a:	4605      	mov	r5, r0
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b2c:	6800      	ldr	r0, [r0, #0]
{
 8005b2e:	b082      	sub	sp, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b30:	6804      	ldr	r4, [r0, #0]
 8005b32:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8005b36:	6004      	str	r4, [r0, #0]
{
 8005b38:	9c08      	ldr	r4, [sp, #32]
 8005b3a:	1c62      	adds	r2, r4, #1
 8005b3c:	d140      	bne.n	8005bc0 <I2C_RequestMemoryWrite+0xa0>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b3e:	6943      	ldr	r3, [r0, #20]
 8005b40:	07db      	lsls	r3, r3, #31
 8005b42:	d5fc      	bpl.n	8005b3e <I2C_RequestMemoryWrite+0x1e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b44:	f009 01fe 	and.w	r1, r9, #254	; 0xfe
 8005b48:	6101      	str	r1, [r0, #16]
 8005b4a:	1c63      	adds	r3, r4, #1
 8005b4c:	d012      	beq.n	8005b74 <I2C_RequestMemoryWrite+0x54>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b4e:	6943      	ldr	r3, [r0, #20]
 8005b50:	079b      	lsls	r3, r3, #30
 8005b52:	d412      	bmi.n	8005b7a <I2C_RequestMemoryWrite+0x5a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b54:	6943      	ldr	r3, [r0, #20]
 8005b56:	055a      	lsls	r2, r3, #21
 8005b58:	d43e      	bmi.n	8005bd8 <I2C_RequestMemoryWrite+0xb8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b5a:	f7ff fd4f 	bl	80055fc <HAL_GetTick>
 8005b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b60:	1ac0      	subs	r0, r0, r3
 8005b62:	4284      	cmp	r4, r0
 8005b64:	d350      	bcc.n	8005c08 <I2C_RequestMemoryWrite+0xe8>
 8005b66:	2c00      	cmp	r4, #0
 8005b68:	d04e      	beq.n	8005c08 <I2C_RequestMemoryWrite+0xe8>
 8005b6a:	6828      	ldr	r0, [r5, #0]
 8005b6c:	e7ed      	b.n	8005b4a <I2C_RequestMemoryWrite+0x2a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b6e:	6943      	ldr	r3, [r0, #20]
 8005b70:	055a      	lsls	r2, r3, #21
 8005b72:	d431      	bmi.n	8005bd8 <I2C_RequestMemoryWrite+0xb8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b74:	6943      	ldr	r3, [r0, #20]
 8005b76:	0799      	lsls	r1, r3, #30
 8005b78:	d5f9      	bpl.n	8005b6e <I2C_RequestMemoryWrite+0x4e>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	9301      	str	r3, [sp, #4]
 8005b7e:	6943      	ldr	r3, [r0, #20]
 8005b80:	9301      	str	r3, [sp, #4]
 8005b82:	6983      	ldr	r3, [r0, #24]
 8005b84:	9301      	str	r3, [sp, #4]
 8005b86:	9b01      	ldr	r3, [sp, #4]
 8005b88:	1c62      	adds	r2, r4, #1
 8005b8a:	d003      	beq.n	8005b94 <I2C_RequestMemoryWrite+0x74>
 8005b8c:	e04b      	b.n	8005c26 <I2C_RequestMemoryWrite+0x106>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b8e:	6943      	ldr	r3, [r0, #20]
 8005b90:	0559      	lsls	r1, r3, #21
 8005b92:	d458      	bmi.n	8005c46 <I2C_RequestMemoryWrite+0x126>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b94:	6943      	ldr	r3, [r0, #20]
 8005b96:	061b      	lsls	r3, r3, #24
 8005b98:	d5f9      	bpl.n	8005b8e <I2C_RequestMemoryWrite+0x6e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b9a:	2f01      	cmp	r7, #1
 8005b9c:	d00a      	beq.n	8005bb4 <I2C_RequestMemoryWrite+0x94>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b9e:	0a33      	lsrs	r3, r6, #8
 8005ba0:	6103      	str	r3, [r0, #16]
 8005ba2:	1c67      	adds	r7, r4, #1
 8005ba4:	d003      	beq.n	8005bae <I2C_RequestMemoryWrite+0x8e>
 8005ba6:	e084      	b.n	8005cb2 <I2C_RequestMemoryWrite+0x192>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ba8:	6943      	ldr	r3, [r0, #20]
 8005baa:	055a      	lsls	r2, r3, #21
 8005bac:	d467      	bmi.n	8005c7e <I2C_RequestMemoryWrite+0x15e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bae:	6943      	ldr	r3, [r0, #20]
 8005bb0:	0619      	lsls	r1, r3, #24
 8005bb2:	d5f9      	bpl.n	8005ba8 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bb4:	b2f6      	uxtb	r6, r6
 8005bb6:	6106      	str	r6, [r0, #16]
  return HAL_OK;
 8005bb8:	2000      	movs	r0, #0
}
 8005bba:	b002      	add	sp, #8
 8005bbc:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bc0:	6943      	ldr	r3, [r0, #20]
 8005bc2:	07d9      	lsls	r1, r3, #31
 8005bc4:	d4be      	bmi.n	8005b44 <I2C_RequestMemoryWrite+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bc6:	f7ff fd19 	bl	80055fc <HAL_GetTick>
 8005bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bcc:	1ac0      	subs	r0, r0, r3
 8005bce:	4284      	cmp	r4, r0
 8005bd0:	d31a      	bcc.n	8005c08 <I2C_RequestMemoryWrite+0xe8>
 8005bd2:	b1cc      	cbz	r4, 8005c08 <I2C_RequestMemoryWrite+0xe8>
 8005bd4:	6828      	ldr	r0, [r5, #0]
 8005bd6:	e7b0      	b.n	8005b3a <I2C_RequestMemoryWrite+0x1a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bd8:	f46f 6480 	mvn.w	r4, #1024	; 0x400
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bdc:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bde:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005be0:	6803      	ldr	r3, [r0, #0]
 8005be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005be6:	6003      	str	r3, [r0, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005be8:	6144      	str	r4, [r0, #20]
    return HAL_ERROR;
 8005bea:	2001      	movs	r0, #1
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bec:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bee:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bf2:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bf6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005bf8:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bfc:	f043 0304 	orr.w	r3, r3, #4
 8005c00:	642b      	str	r3, [r5, #64]	; 0x40
}
 8005c02:	b002      	add	sp, #8
 8005c04:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c08:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c0a:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c0c:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c0e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c12:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c16:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005c18:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c1c:	f043 0320 	orr.w	r3, r3, #32
 8005c20:	642b      	str	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8005c22:	2001      	movs	r0, #1
 8005c24:	e7c9      	b.n	8005bba <I2C_RequestMemoryWrite+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c26:	6943      	ldr	r3, [r0, #20]
 8005c28:	061a      	lsls	r2, r3, #24
 8005c2a:	d4b6      	bmi.n	8005b9a <I2C_RequestMemoryWrite+0x7a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c2c:	6943      	ldr	r3, [r0, #20]
 8005c2e:	0559      	lsls	r1, r3, #21
 8005c30:	d409      	bmi.n	8005c46 <I2C_RequestMemoryWrite+0x126>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c32:	f7ff fce3 	bl	80055fc <HAL_GetTick>
 8005c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c38:	1ac0      	subs	r0, r0, r3
 8005c3a:	4284      	cmp	r4, r0
 8005c3c:	d349      	bcc.n	8005cd2 <I2C_RequestMemoryWrite+0x1b2>
 8005c3e:	2c00      	cmp	r4, #0
 8005c40:	d047      	beq.n	8005cd2 <I2C_RequestMemoryWrite+0x1b2>
 8005c42:	6828      	ldr	r0, [r5, #0]
 8005c44:	e7a0      	b.n	8005b88 <I2C_RequestMemoryWrite+0x68>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c46:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c48:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c4a:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8005c4e:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c50:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c52:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c56:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c5a:	6c2b      	ldr	r3, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c5c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c60:	f043 0304 	orr.w	r3, r3, #4
 8005c64:	642b      	str	r3, [r5, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c66:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	d001      	beq.n	8005c70 <I2C_RequestMemoryWrite+0x150>
    return HAL_ERROR;
 8005c6c:	2001      	movs	r0, #1
 8005c6e:	e7a4      	b.n	8005bba <I2C_RequestMemoryWrite+0x9a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c70:	682a      	ldr	r2, [r5, #0]
    return HAL_ERROR;
 8005c72:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c74:	6813      	ldr	r3, [r2, #0]
 8005c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	e79d      	b.n	8005bba <I2C_RequestMemoryWrite+0x9a>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c7e:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c80:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c82:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8005c86:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c88:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c8a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c8e:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c92:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8005c94:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c98:	f043 0304 	orr.w	r3, r3, #4
 8005c9c:	642b      	str	r3, [r5, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c9e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d1e3      	bne.n	8005c6c <I2C_RequestMemoryWrite+0x14c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ca4:	682a      	ldr	r2, [r5, #0]
      return HAL_ERROR;
 8005ca6:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ca8:	6813      	ldr	r3, [r2, #0]
 8005caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	e783      	b.n	8005bba <I2C_RequestMemoryWrite+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cb2:	6943      	ldr	r3, [r0, #20]
 8005cb4:	061b      	lsls	r3, r3, #24
 8005cb6:	f53f af7d 	bmi.w	8005bb4 <I2C_RequestMemoryWrite+0x94>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cba:	6943      	ldr	r3, [r0, #20]
 8005cbc:	055b      	lsls	r3, r3, #21
 8005cbe:	d4de      	bmi.n	8005c7e <I2C_RequestMemoryWrite+0x15e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc0:	f7ff fc9c 	bl	80055fc <HAL_GetTick>
 8005cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cc6:	1ac0      	subs	r0, r0, r3
 8005cc8:	4284      	cmp	r4, r0
 8005cca:	d310      	bcc.n	8005cee <I2C_RequestMemoryWrite+0x1ce>
 8005ccc:	b17c      	cbz	r4, 8005cee <I2C_RequestMemoryWrite+0x1ce>
 8005cce:	6828      	ldr	r0, [r5, #0]
 8005cd0:	e767      	b.n	8005ba2 <I2C_RequestMemoryWrite+0x82>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005cd2:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005cd4:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005cd6:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005cd8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005cdc:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ce0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005ce2:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ce6:	f043 0320 	orr.w	r3, r3, #32
 8005cea:	642b      	str	r3, [r5, #64]	; 0x40
 8005cec:	e7bb      	b.n	8005c66 <I2C_RequestMemoryWrite+0x146>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005cee:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005cf0:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005cf2:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005cf4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005cf8:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005cfc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005cfe:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d02:	f043 0320 	orr.w	r3, r3, #32
 8005d06:	642b      	str	r3, [r5, #64]	; 0x40
 8005d08:	e7c9      	b.n	8005c9e <I2C_RequestMemoryWrite+0x17e>
 8005d0a:	bf00      	nop

08005d0c <I2C_RequestMemoryRead>:
{
 8005d0c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8005d10:	461f      	mov	r7, r3
 8005d12:	4605      	mov	r5, r0
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d14:	6800      	ldr	r0, [r0, #0]
{
 8005d16:	4689      	mov	r9, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d18:	6801      	ldr	r1, [r0, #0]
{
 8005d1a:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d1c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8005d20:	6001      	str	r1, [r0, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d22:	6802      	ldr	r2, [r0, #0]
{
 8005d24:	b082      	sub	sp, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
{
 8005d2a:	9c08      	ldr	r4, [sp, #32]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d2c:	6002      	str	r2, [r0, #0]
 8005d2e:	1c61      	adds	r1, r4, #1
 8005d30:	d157      	bne.n	8005de2 <I2C_RequestMemoryRead+0xd6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d32:	6943      	ldr	r3, [r0, #20]
 8005d34:	07da      	lsls	r2, r3, #31
 8005d36:	d5fc      	bpl.n	8005d32 <I2C_RequestMemoryRead+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d38:	fa5f f989 	uxtb.w	r9, r9
 8005d3c:	f009 03fe 	and.w	r3, r9, #254	; 0xfe
 8005d40:	6103      	str	r3, [r0, #16]
 8005d42:	1c62      	adds	r2, r4, #1
 8005d44:	d012      	beq.n	8005d6c <I2C_RequestMemoryRead+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d46:	6943      	ldr	r3, [r0, #20]
 8005d48:	079a      	lsls	r2, r3, #30
 8005d4a:	d412      	bmi.n	8005d72 <I2C_RequestMemoryRead+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d4c:	6943      	ldr	r3, [r0, #20]
 8005d4e:	0559      	lsls	r1, r3, #21
 8005d50:	d453      	bmi.n	8005dfa <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d52:	f7ff fc53 	bl	80055fc <HAL_GetTick>
 8005d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d58:	1ac0      	subs	r0, r0, r3
 8005d5a:	4284      	cmp	r4, r0
 8005d5c:	d37c      	bcc.n	8005e58 <I2C_RequestMemoryRead+0x14c>
 8005d5e:	2c00      	cmp	r4, #0
 8005d60:	d07a      	beq.n	8005e58 <I2C_RequestMemoryRead+0x14c>
 8005d62:	6828      	ldr	r0, [r5, #0]
 8005d64:	e7ed      	b.n	8005d42 <I2C_RequestMemoryRead+0x36>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d66:	6943      	ldr	r3, [r0, #20]
 8005d68:	0559      	lsls	r1, r3, #21
 8005d6a:	d446      	bmi.n	8005dfa <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d6c:	6943      	ldr	r3, [r0, #20]
 8005d6e:	079b      	lsls	r3, r3, #30
 8005d70:	d5f9      	bpl.n	8005d66 <I2C_RequestMemoryRead+0x5a>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d72:	2300      	movs	r3, #0
 8005d74:	9301      	str	r3, [sp, #4]
 8005d76:	6943      	ldr	r3, [r0, #20]
 8005d78:	9301      	str	r3, [sp, #4]
 8005d7a:	6983      	ldr	r3, [r0, #24]
 8005d7c:	9301      	str	r3, [sp, #4]
 8005d7e:	9b01      	ldr	r3, [sp, #4]
 8005d80:	1c61      	adds	r1, r4, #1
 8005d82:	d003      	beq.n	8005d8c <I2C_RequestMemoryRead+0x80>
 8005d84:	e076      	b.n	8005e74 <I2C_RequestMemoryRead+0x168>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d86:	6943      	ldr	r3, [r0, #20]
 8005d88:	055b      	lsls	r3, r3, #21
 8005d8a:	d44e      	bmi.n	8005e2a <I2C_RequestMemoryRead+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d8c:	6943      	ldr	r3, [r0, #20]
 8005d8e:	061a      	lsls	r2, r3, #24
 8005d90:	d5f9      	bpl.n	8005d86 <I2C_RequestMemoryRead+0x7a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d92:	2f01      	cmp	r7, #1
 8005d94:	d17e      	bne.n	8005e94 <I2C_RequestMemoryRead+0x188>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d96:	b2f6      	uxtb	r6, r6
 8005d98:	6106      	str	r6, [r0, #16]
 8005d9a:	1c67      	adds	r7, r4, #1
 8005d9c:	d003      	beq.n	8005da6 <I2C_RequestMemoryRead+0x9a>
 8005d9e:	e08d      	b.n	8005ebc <I2C_RequestMemoryRead+0x1b0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005da0:	6943      	ldr	r3, [r0, #20]
 8005da2:	0559      	lsls	r1, r3, #21
 8005da4:	d441      	bmi.n	8005e2a <I2C_RequestMemoryRead+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005da6:	6943      	ldr	r3, [r0, #20]
 8005da8:	061e      	lsls	r6, r3, #24
 8005daa:	d5f9      	bpl.n	8005da0 <I2C_RequestMemoryRead+0x94>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dac:	6803      	ldr	r3, [r0, #0]
 8005dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005db2:	6003      	str	r3, [r0, #0]
 8005db4:	1c63      	adds	r3, r4, #1
 8005db6:	f040 80a1 	bne.w	8005efc <I2C_RequestMemoryRead+0x1f0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dba:	6943      	ldr	r3, [r0, #20]
 8005dbc:	07df      	lsls	r7, r3, #31
 8005dbe:	d5fc      	bpl.n	8005dba <I2C_RequestMemoryRead+0xae>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005dc0:	f049 0901 	orr.w	r9, r9, #1
 8005dc4:	f8c0 9010 	str.w	r9, [r0, #16]
 8005dc8:	1c62      	adds	r2, r4, #1
 8005dca:	d003      	beq.n	8005dd4 <I2C_RequestMemoryRead+0xc8>
 8005dcc:	e0b2      	b.n	8005f34 <I2C_RequestMemoryRead+0x228>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dce:	6943      	ldr	r3, [r0, #20]
 8005dd0:	055b      	lsls	r3, r3, #21
 8005dd2:	d412      	bmi.n	8005dfa <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005dd4:	6943      	ldr	r3, [r0, #20]
 8005dd6:	43db      	mvns	r3, r3
 8005dd8:	f013 0302 	ands.w	r3, r3, #2
 8005ddc:	d1f7      	bne.n	8005dce <I2C_RequestMemoryRead+0xc2>
  return HAL_OK;
 8005dde:	4618      	mov	r0, r3
 8005de0:	e020      	b.n	8005e24 <I2C_RequestMemoryRead+0x118>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005de2:	6943      	ldr	r3, [r0, #20]
 8005de4:	07db      	lsls	r3, r3, #31
 8005de6:	d4a7      	bmi.n	8005d38 <I2C_RequestMemoryRead+0x2c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005de8:	f7ff fc08 	bl	80055fc <HAL_GetTick>
 8005dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dee:	1ac0      	subs	r0, r0, r3
 8005df0:	4284      	cmp	r4, r0
 8005df2:	d331      	bcc.n	8005e58 <I2C_RequestMemoryRead+0x14c>
 8005df4:	b384      	cbz	r4, 8005e58 <I2C_RequestMemoryRead+0x14c>
 8005df6:	6828      	ldr	r0, [r5, #0]
 8005df8:	e799      	b.n	8005d2e <I2C_RequestMemoryRead+0x22>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dfa:	f46f 6480 	mvn.w	r4, #1024	; 0x400
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005dfe:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e00:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e02:	6803      	ldr	r3, [r0, #0]
 8005e04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e08:	6003      	str	r3, [r0, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e0a:	6144      	str	r4, [r0, #20]
    return HAL_ERROR;
 8005e0c:	2001      	movs	r0, #1
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e0e:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e10:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e14:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e18:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005e1a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e1e:	f043 0304 	orr.w	r3, r3, #4
 8005e22:	642b      	str	r3, [r5, #64]	; 0x40
}
 8005e24:	b002      	add	sp, #8
 8005e26:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e2a:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e2c:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e2e:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8005e32:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e34:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e36:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e3a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e3e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8005e40:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e44:	f043 0304 	orr.w	r3, r3, #4
 8005e48:	642b      	str	r3, [r5, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e4a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8005e4c:	2b04      	cmp	r3, #4
 8005e4e:	d02e      	beq.n	8005eae <I2C_RequestMemoryRead+0x1a2>
    return HAL_ERROR;
 8005e50:	2001      	movs	r0, #1
}
 8005e52:	b002      	add	sp, #8
 8005e54:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e58:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e5a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e5c:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e5e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e62:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e66:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005e68:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e6c:	f043 0320 	orr.w	r3, r3, #32
 8005e70:	642b      	str	r3, [r5, #64]	; 0x40
 8005e72:	e7ed      	b.n	8005e50 <I2C_RequestMemoryRead+0x144>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e74:	6943      	ldr	r3, [r0, #20]
 8005e76:	0619      	lsls	r1, r3, #24
 8005e78:	d48b      	bmi.n	8005d92 <I2C_RequestMemoryRead+0x86>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e7a:	6943      	ldr	r3, [r0, #20]
 8005e7c:	055b      	lsls	r3, r3, #21
 8005e7e:	d4d4      	bmi.n	8005e2a <I2C_RequestMemoryRead+0x11e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e80:	f7ff fbbc 	bl	80055fc <HAL_GetTick>
 8005e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e86:	1ac0      	subs	r0, r0, r3
 8005e88:	4284      	cmp	r4, r0
 8005e8a:	d345      	bcc.n	8005f18 <I2C_RequestMemoryRead+0x20c>
 8005e8c:	2c00      	cmp	r4, #0
 8005e8e:	d043      	beq.n	8005f18 <I2C_RequestMemoryRead+0x20c>
 8005e90:	6828      	ldr	r0, [r5, #0]
 8005e92:	e775      	b.n	8005d80 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e94:	0a33      	lsrs	r3, r6, #8
 8005e96:	6103      	str	r3, [r0, #16]
 8005e98:	1c63      	adds	r3, r4, #1
 8005e9a:	d003      	beq.n	8005ea4 <I2C_RequestMemoryRead+0x198>
 8005e9c:	e01e      	b.n	8005edc <I2C_RequestMemoryRead+0x1d0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e9e:	6943      	ldr	r3, [r0, #20]
 8005ea0:	0559      	lsls	r1, r3, #21
 8005ea2:	d4c2      	bmi.n	8005e2a <I2C_RequestMemoryRead+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ea4:	6943      	ldr	r3, [r0, #20]
 8005ea6:	061f      	lsls	r7, r3, #24
 8005ea8:	f53f af75 	bmi.w	8005d96 <I2C_RequestMemoryRead+0x8a>
 8005eac:	e7f7      	b.n	8005e9e <I2C_RequestMemoryRead+0x192>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eae:	682a      	ldr	r2, [r5, #0]
    return HAL_ERROR;
 8005eb0:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb2:	6813      	ldr	r3, [r2, #0]
 8005eb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	e7b3      	b.n	8005e24 <I2C_RequestMemoryRead+0x118>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ebc:	6943      	ldr	r3, [r0, #20]
 8005ebe:	061a      	lsls	r2, r3, #24
 8005ec0:	f53f af74 	bmi.w	8005dac <I2C_RequestMemoryRead+0xa0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ec4:	6943      	ldr	r3, [r0, #20]
 8005ec6:	055b      	lsls	r3, r3, #21
 8005ec8:	d4af      	bmi.n	8005e2a <I2C_RequestMemoryRead+0x11e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eca:	f7ff fb97 	bl	80055fc <HAL_GetTick>
 8005ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ed0:	1ac0      	subs	r0, r0, r3
 8005ed2:	4284      	cmp	r4, r0
 8005ed4:	d320      	bcc.n	8005f18 <I2C_RequestMemoryRead+0x20c>
 8005ed6:	b1fc      	cbz	r4, 8005f18 <I2C_RequestMemoryRead+0x20c>
 8005ed8:	6828      	ldr	r0, [r5, #0]
 8005eda:	e75e      	b.n	8005d9a <I2C_RequestMemoryRead+0x8e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005edc:	6943      	ldr	r3, [r0, #20]
 8005ede:	061a      	lsls	r2, r3, #24
 8005ee0:	f53f af59 	bmi.w	8005d96 <I2C_RequestMemoryRead+0x8a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ee4:	6943      	ldr	r3, [r0, #20]
 8005ee6:	055a      	lsls	r2, r3, #21
 8005ee8:	d49f      	bmi.n	8005e2a <I2C_RequestMemoryRead+0x11e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eea:	f7ff fb87 	bl	80055fc <HAL_GetTick>
 8005eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ef0:	1ac0      	subs	r0, r0, r3
 8005ef2:	4284      	cmp	r4, r0
 8005ef4:	d310      	bcc.n	8005f18 <I2C_RequestMemoryRead+0x20c>
 8005ef6:	b17c      	cbz	r4, 8005f18 <I2C_RequestMemoryRead+0x20c>
 8005ef8:	6828      	ldr	r0, [r5, #0]
 8005efa:	e7cd      	b.n	8005e98 <I2C_RequestMemoryRead+0x18c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005efc:	6943      	ldr	r3, [r0, #20]
 8005efe:	07de      	lsls	r6, r3, #31
 8005f00:	f53f af5e 	bmi.w	8005dc0 <I2C_RequestMemoryRead+0xb4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f04:	f7ff fb7a 	bl	80055fc <HAL_GetTick>
 8005f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f0a:	1ac0      	subs	r0, r0, r3
 8005f0c:	4284      	cmp	r4, r0
 8005f0e:	d3a3      	bcc.n	8005e58 <I2C_RequestMemoryRead+0x14c>
 8005f10:	2c00      	cmp	r4, #0
 8005f12:	d0a1      	beq.n	8005e58 <I2C_RequestMemoryRead+0x14c>
 8005f14:	6828      	ldr	r0, [r5, #0]
 8005f16:	e74d      	b.n	8005db4 <I2C_RequestMemoryRead+0xa8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005f18:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005f1a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005f1c:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005f1e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f22:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f26:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005f28:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f2c:	f043 0320 	orr.w	r3, r3, #32
 8005f30:	642b      	str	r3, [r5, #64]	; 0x40
 8005f32:	e78a      	b.n	8005e4a <I2C_RequestMemoryRead+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f34:	6943      	ldr	r3, [r0, #20]
 8005f36:	43db      	mvns	r3, r3
 8005f38:	f013 0302 	ands.w	r3, r3, #2
 8005f3c:	f43f af4f 	beq.w	8005dde <I2C_RequestMemoryRead+0xd2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f40:	6943      	ldr	r3, [r0, #20]
 8005f42:	0559      	lsls	r1, r3, #21
 8005f44:	f53f af59 	bmi.w	8005dfa <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f48:	f7ff fb58 	bl	80055fc <HAL_GetTick>
 8005f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f4e:	1ac0      	subs	r0, r0, r3
 8005f50:	4284      	cmp	r4, r0
 8005f52:	d381      	bcc.n	8005e58 <I2C_RequestMemoryRead+0x14c>
 8005f54:	2c00      	cmp	r4, #0
 8005f56:	f43f af7f 	beq.w	8005e58 <I2C_RequestMemoryRead+0x14c>
 8005f5a:	6828      	ldr	r0, [r5, #0]
 8005f5c:	e734      	b.n	8005dc8 <I2C_RequestMemoryRead+0xbc>
 8005f5e:	bf00      	nop

08005f60 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005f60:	2800      	cmp	r0, #0
 8005f62:	f000 8097 	beq.w	8006094 <HAL_I2C_Init+0x134>
{
 8005f66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f68:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 8087 	beq.w	8006086 <HAL_I2C_Init+0x126>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f78:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8005f7a:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8005f80:	6813      	ldr	r3, [r2, #0]
 8005f82:	f023 0301 	bic.w	r3, r3, #1
 8005f86:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f88:	f001 fa6c 	bl	8007464 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f8c:	6862      	ldr	r2, [r4, #4]
 8005f8e:	4b4b      	ldr	r3, [pc, #300]	; (80060bc <HAL_I2C_Init+0x15c>)
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d84b      	bhi.n	800602c <HAL_I2C_Init+0xcc>
 8005f94:	4b4a      	ldr	r3, [pc, #296]	; (80060c0 <HAL_I2C_Init+0x160>)
 8005f96:	4298      	cmp	r0, r3
 8005f98:	d97a      	bls.n	8006090 <HAL_I2C_Init+0x130>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005f9a:	1e43      	subs	r3, r0, #1
 8005f9c:	0052      	lsls	r2, r2, #1
 8005f9e:	fbb3 f2f2 	udiv	r2, r3, r2
  freqrange = I2C_FREQRANGE(pclk1);
 8005fa2:	4948      	ldr	r1, [pc, #288]	; (80060c4 <HAL_I2C_Init+0x164>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005fa4:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8005fa6:	fba1 1000 	umull	r1, r0, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005faa:	6859      	ldr	r1, [r3, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8005fac:	0c80      	lsrs	r0, r0, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005fae:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8005fb2:	4301      	orrs	r1, r0
 8005fb4:	6059      	str	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005fb6:	6a19      	ldr	r1, [r3, #32]
 8005fb8:	3001      	adds	r0, #1
 8005fba:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8005fbe:	4308      	orrs	r0, r1
 8005fc0:	6218      	str	r0, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005fc2:	1c50      	adds	r0, r2, #1
 8005fc4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8005fc8:	2804      	cmp	r0, #4
 8005fca:	bf38      	it	cc
 8005fcc:	2004      	movcc	r0, #4
 8005fce:	69d9      	ldr	r1, [r3, #28]
 8005fd0:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8005fd4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fd8:	2500      	movs	r5, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8005fda:	2620      	movs	r6, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005fdc:	4308      	orrs	r0, r1
 8005fde:	61d8      	str	r0, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005fe0:	6819      	ldr	r1, [r3, #0]
 8005fe2:	e9d4 2007 	ldrd	r2, r0, [r4, #28]
 8005fe6:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8005fea:	4302      	orrs	r2, r0
 8005fec:	430a      	orrs	r2, r1
 8005fee:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ff0:	6899      	ldr	r1, [r3, #8]
 8005ff2:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 8005ff6:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8005ffa:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005ffe:	4302      	orrs	r2, r0
 8006000:	430a      	orrs	r2, r1
 8006002:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006004:	68d9      	ldr	r1, [r3, #12]
 8006006:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 800600a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800600e:	4302      	orrs	r2, r0
 8006010:	430a      	orrs	r2, r1
 8006012:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 8006014:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8006016:	4628      	mov	r0, r5
  __HAL_I2C_ENABLE(hi2c);
 8006018:	f042 0201 	orr.w	r2, r2, #1
 800601c:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800601e:	6425      	str	r5, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006020:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006024:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006026:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 800602a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800602c:	4b26      	ldr	r3, [pc, #152]	; (80060c8 <HAL_I2C_Init+0x168>)
 800602e:	4298      	cmp	r0, r3
 8006030:	d92e      	bls.n	8006090 <HAL_I2C_Init+0x130>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006032:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8006036:	4d23      	ldr	r5, [pc, #140]	; (80060c4 <HAL_I2C_Init+0x164>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006038:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800603a:	fba5 6500 	umull	r6, r5, r5, r0
 800603e:	0cad      	lsrs	r5, r5, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006040:	fb01 f105 	mul.w	r1, r1, r5
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006044:	685e      	ldr	r6, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006046:	4f21      	ldr	r7, [pc, #132]	; (80060cc <HAL_I2C_Init+0x16c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006048:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800604c:	fba7 7101 	umull	r7, r1, r7, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006050:	4335      	orrs	r5, r6
 8006052:	605d      	str	r5, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006054:	6a1d      	ldr	r5, [r3, #32]
 8006056:	0989      	lsrs	r1, r1, #6
 8006058:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800605c:	3101      	adds	r1, #1
 800605e:	4329      	orrs	r1, r5
 8006060:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006062:	69d9      	ldr	r1, [r3, #28]
 8006064:	68a5      	ldr	r5, [r4, #8]
 8006066:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800606a:	3801      	subs	r0, #1
 800606c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006070:	b995      	cbnz	r5, 8006098 <HAL_I2C_Init+0x138>
 8006072:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006076:	fbb0 f0f2 	udiv	r0, r0, r2
 800607a:	3001      	adds	r0, #1
 800607c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8006080:	b9c0      	cbnz	r0, 80060b4 <HAL_I2C_Init+0x154>
 8006082:	2001      	movs	r0, #1
 8006084:	e7a8      	b.n	8005fd8 <HAL_I2C_Init+0x78>
    hi2c->Lock = HAL_UNLOCKED;
 8006086:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800608a:	f7fc fc71 	bl	8002970 <HAL_I2C_MspInit>
 800608e:	e773      	b.n	8005f78 <HAL_I2C_Init+0x18>
    return HAL_ERROR;
 8006090:	2001      	movs	r0, #1
}
 8006092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8006094:	2001      	movs	r0, #1
}
 8006096:	4770      	bx	lr
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006098:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800609c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80060a0:	fbb0 f0f2 	udiv	r0, r0, r2
 80060a4:	3001      	adds	r0, #1
 80060a6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80060aa:	2800      	cmp	r0, #0
 80060ac:	d0e9      	beq.n	8006082 <HAL_I2C_Init+0x122>
 80060ae:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80060b2:	e791      	b.n	8005fd8 <HAL_I2C_Init+0x78>
 80060b4:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80060b8:	e78e      	b.n	8005fd8 <HAL_I2C_Init+0x78>
 80060ba:	bf00      	nop
 80060bc:	000186a0 	.word	0x000186a0
 80060c0:	001e847f 	.word	0x001e847f
 80060c4:	431bde83 	.word	0x431bde83
 80060c8:	003d08ff 	.word	0x003d08ff
 80060cc:	10624dd3 	.word	0x10624dd3

080060d0 <HAL_I2C_Mem_Write>:
{
 80060d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d4:	4604      	mov	r4, r0
 80060d6:	b083      	sub	sp, #12
 80060d8:	469a      	mov	sl, r3
 80060da:	460f      	mov	r7, r1
 80060dc:	4690      	mov	r8, r2
 80060de:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 80060e2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 80060e4:	f7ff fa8a 	bl	80055fc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80060e8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80060ec:	2b20      	cmp	r3, #32
 80060ee:	d004      	beq.n	80060fa <HAL_I2C_Mem_Write+0x2a>
      return HAL_BUSY;
 80060f0:	2702      	movs	r7, #2
}
 80060f2:	4638      	mov	r0, r7
 80060f4:	b003      	add	sp, #12
 80060f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060fa:	4605      	mov	r5, r0
 80060fc:	e005      	b.n	800610a <HAL_I2C_Mem_Write+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060fe:	f7ff fa7d 	bl	80055fc <HAL_GetTick>
 8006102:	1b40      	subs	r0, r0, r5
 8006104:	2819      	cmp	r0, #25
 8006106:	f200 80a6 	bhi.w	8006256 <HAL_I2C_Mem_Write+0x186>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800610a:	6822      	ldr	r2, [r4, #0]
 800610c:	6993      	ldr	r3, [r2, #24]
 800610e:	43db      	mvns	r3, r3
 8006110:	f013 0b02 	ands.w	fp, r3, #2
 8006114:	d0f3      	beq.n	80060fe <HAL_I2C_Mem_Write+0x2e>
    __HAL_LOCK(hi2c);
 8006116:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800611a:	2b01      	cmp	r3, #1
 800611c:	d0e8      	beq.n	80060f0 <HAL_I2C_Mem_Write+0x20>
 800611e:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006120:	6813      	ldr	r3, [r2, #0]
    __HAL_LOCK(hi2c);
 8006122:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006126:	07d8      	lsls	r0, r3, #31
 8006128:	d402      	bmi.n	8006130 <HAL_I2C_Mem_Write+0x60>
      __HAL_I2C_ENABLE(hi2c);
 800612a:	6813      	ldr	r3, [r2, #0]
 800612c:	430b      	orrs	r3, r1
 800612e:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006130:	f04f 0e21 	mov.w	lr, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006134:	f04f 0c40 	mov.w	ip, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006138:	2000      	movs	r0, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800613a:	6811      	ldr	r1, [r2, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800613c:	4653      	mov	r3, sl
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800613e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8006142:	6011      	str	r1, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006144:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006148:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800614c:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800614e:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006152:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006156:	4639      	mov	r1, r7
    hi2c->pBuffPtr    = pData;
 8006158:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800615a:	f5a0 3080 	sub.w	r0, r0, #65536	; 0x10000
    hi2c->pBuffPtr    = pData;
 800615e:	6267      	str	r7, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006160:	4642      	mov	r2, r8
 8006162:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006166:	62e0      	str	r0, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8006168:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800616c:	4620      	mov	r0, r4
 800616e:	f7ff fcd7 	bl	8005b20 <I2C_RequestMemoryWrite>
 8006172:	4607      	mov	r7, r0
 8006174:	2800      	cmp	r0, #0
 8006176:	d14b      	bne.n	8006210 <HAL_I2C_Mem_Write+0x140>
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 800617c:	b1fa      	cbz	r2, 80061be <HAL_I2C_Mem_Write+0xee>
 800617e:	1c72      	adds	r2, r6, #1
 8006180:	d003      	beq.n	800618a <HAL_I2C_Mem_Write+0xba>
 8006182:	e04a      	b.n	800621a <HAL_I2C_Mem_Write+0x14a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006184:	695a      	ldr	r2, [r3, #20]
 8006186:	0551      	lsls	r1, r2, #21
 8006188:	d42f      	bmi.n	80061ea <HAL_I2C_Mem_Write+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800618a:	695a      	ldr	r2, [r3, #20]
 800618c:	0610      	lsls	r0, r2, #24
 800618e:	d5f9      	bpl.n	8006184 <HAL_I2C_Mem_Write+0xb4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006190:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006194:	f8b4 8028 	ldrh.w	r8, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006198:	46f4      	mov	ip, lr
 800619a:	f81c 1b01 	ldrb.w	r1, [ip], #1
      hi2c->XferSize--;
 800619e:	f108 32ff 	add.w	r2, r8, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061a2:	6119      	str	r1, [r3, #16]
      hi2c->XferCount--;
 80061a4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80061a6:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80061a8:	3901      	subs	r1, #1
 80061aa:	b289      	uxth	r1, r1
 80061ac:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061ae:	6958      	ldr	r0, [r3, #20]
      hi2c->pBuffPtr++;
 80061b0:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061b4:	0740      	lsls	r0, r0, #29
      hi2c->XferSize--;
 80061b6:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061b8:	d5e0      	bpl.n	800617c <HAL_I2C_Mem_Write+0xac>
 80061ba:	2a00      	cmp	r2, #0
 80061bc:	d13c      	bne.n	8006238 <HAL_I2C_Mem_Write+0x168>
 80061be:	1c72      	adds	r2, r6, #1
 80061c0:	d003      	beq.n	80061ca <HAL_I2C_Mem_Write+0xfa>
 80061c2:	e05d      	b.n	8006280 <HAL_I2C_Mem_Write+0x1b0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061c4:	695a      	ldr	r2, [r3, #20]
 80061c6:	0551      	lsls	r1, r2, #21
 80061c8:	d468      	bmi.n	800629c <HAL_I2C_Mem_Write+0x1cc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061ca:	695a      	ldr	r2, [r3, #20]
 80061cc:	0750      	lsls	r0, r2, #29
 80061ce:	d5f9      	bpl.n	80061c4 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061d0:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80061d2:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061da:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80061dc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80061e0:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e4:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 80061e8:	e783      	b.n	80060f2 <HAL_I2C_Mem_Write+0x22>
    hi2c->PreviousState       = I2C_STATE_NONE;
 80061ea:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061ec:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 80061f0:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061f2:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80061f4:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80061f6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061fa:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8006200:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006204:	f043 0304 	orr.w	r3, r3, #4
 8006208:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800620a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800620c:	2b04      	cmp	r3, #4
 800620e:	d030      	beq.n	8006272 <HAL_I2C_Mem_Write+0x1a2>
      return HAL_ERROR;
 8006210:	2701      	movs	r7, #1
}
 8006212:	4638      	mov	r0, r7
 8006214:	b003      	add	sp, #12
 8006216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800621a:	695a      	ldr	r2, [r3, #20]
 800621c:	0612      	lsls	r2, r2, #24
 800621e:	d4b7      	bmi.n	8006190 <HAL_I2C_Mem_Write+0xc0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006220:	695a      	ldr	r2, [r3, #20]
 8006222:	0551      	lsls	r1, r2, #21
 8006224:	d4e1      	bmi.n	80061ea <HAL_I2C_Mem_Write+0x11a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006226:	f7ff f9e9 	bl	80055fc <HAL_GetTick>
 800622a:	1b40      	subs	r0, r0, r5
 800622c:	4286      	cmp	r6, r0
 800622e:	d34f      	bcc.n	80062d0 <HAL_I2C_Mem_Write+0x200>
 8006230:	2e00      	cmp	r6, #0
 8006232:	d04d      	beq.n	80062d0 <HAL_I2C_Mem_Write+0x200>
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	e7a2      	b.n	800617e <HAL_I2C_Mem_Write+0xae>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006238:	f89e 1001 	ldrb.w	r1, [lr, #1]
        hi2c->XferSize--;
 800623c:	f1a8 0202 	sub.w	r2, r8, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006240:	6119      	str	r1, [r3, #16]
        hi2c->XferCount--;
 8006242:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8006244:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 8006246:	3801      	subs	r0, #1
        hi2c->pBuffPtr++;
 8006248:	f10e 0102 	add.w	r1, lr, #2
        hi2c->XferCount--;
 800624c:	b280      	uxth	r0, r0
        hi2c->XferSize--;
 800624e:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8006250:	6261      	str	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8006252:	8560      	strh	r0, [r4, #42]	; 0x2a
 8006254:	e792      	b.n	800617c <HAL_I2C_Mem_Write+0xac>
        hi2c->State             = HAL_I2C_STATE_READY;
 8006256:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006258:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800625c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006260:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006264:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006266:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800626a:	f043 0320 	orr.w	r3, r3, #32
 800626e:	6423      	str	r3, [r4, #64]	; 0x40
 8006270:	e73e      	b.n	80060f0 <HAL_I2C_Mem_Write+0x20>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006272:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR;
 8006274:	2701      	movs	r7, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006276:	6813      	ldr	r3, [r2, #0]
 8006278:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800627c:	6013      	str	r3, [r2, #0]
 800627e:	e738      	b.n	80060f2 <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006280:	695a      	ldr	r2, [r3, #20]
 8006282:	0752      	lsls	r2, r2, #29
 8006284:	d4a4      	bmi.n	80061d0 <HAL_I2C_Mem_Write+0x100>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006286:	695a      	ldr	r2, [r3, #20]
 8006288:	0551      	lsls	r1, r2, #21
 800628a:	d407      	bmi.n	800629c <HAL_I2C_Mem_Write+0x1cc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800628c:	f7ff f9b6 	bl	80055fc <HAL_GetTick>
 8006290:	1b40      	subs	r0, r0, r5
 8006292:	4286      	cmp	r6, r0
 8006294:	d32a      	bcc.n	80062ec <HAL_I2C_Mem_Write+0x21c>
 8006296:	b34e      	cbz	r6, 80062ec <HAL_I2C_Mem_Write+0x21c>
 8006298:	6823      	ldr	r3, [r4, #0]
 800629a:	e790      	b.n	80061be <HAL_I2C_Mem_Write+0xee>
    hi2c->PreviousState       = I2C_STATE_NONE;
 800629c:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800629e:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 80062a2:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062a4:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80062a6:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80062a8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062ac:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80062b2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062b6:	f043 0304 	orr.w	r3, r3, #4
 80062ba:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062be:	2b04      	cmp	r3, #4
 80062c0:	d1a6      	bne.n	8006210 <HAL_I2C_Mem_Write+0x140>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c2:	6822      	ldr	r2, [r4, #0]
      return HAL_ERROR;
 80062c4:	2701      	movs	r7, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c6:	6813      	ldr	r3, [r2, #0]
 80062c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062cc:	6013      	str	r3, [r2, #0]
 80062ce:	e710      	b.n	80060f2 <HAL_I2C_Mem_Write+0x22>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80062d0:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80062d2:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80062d4:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80062d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80062da:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80062de:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80062e0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80062e4:	f043 0320 	orr.w	r3, r3, #32
 80062e8:	6423      	str	r3, [r4, #64]	; 0x40
 80062ea:	e78e      	b.n	800620a <HAL_I2C_Mem_Write+0x13a>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80062ec:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80062ee:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80062f0:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80062f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80062f6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80062fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80062fc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006300:	f043 0320 	orr.w	r3, r3, #32
 8006304:	6423      	str	r3, [r4, #64]	; 0x40
 8006306:	e7d9      	b.n	80062bc <HAL_I2C_Mem_Write+0x1ec>

08006308 <HAL_I2C_Mem_Read>:
{
 8006308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630c:	4604      	mov	r4, r0
 800630e:	b087      	sub	sp, #28
 8006310:	469a      	mov	sl, r3
 8006312:	460f      	mov	r7, r1
 8006314:	4690      	mov	r8, r2
 8006316:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
 800631a:	9d12      	ldr	r5, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 800631c:	f7ff f96e 	bl	80055fc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006320:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006324:	2b20      	cmp	r3, #32
 8006326:	d004      	beq.n	8006332 <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 8006328:	2702      	movs	r7, #2
}
 800632a:	4638      	mov	r0, r7
 800632c:	b007      	add	sp, #28
 800632e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006332:	4606      	mov	r6, r0
 8006334:	e004      	b.n	8006340 <HAL_I2C_Mem_Read+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006336:	f7ff f961 	bl	80055fc <HAL_GetTick>
 800633a:	1b80      	subs	r0, r0, r6
 800633c:	2819      	cmp	r0, #25
 800633e:	d84d      	bhi.n	80063dc <HAL_I2C_Mem_Read+0xd4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006340:	6822      	ldr	r2, [r4, #0]
 8006342:	6993      	ldr	r3, [r2, #24]
 8006344:	43db      	mvns	r3, r3
 8006346:	f013 0b02 	ands.w	fp, r3, #2
 800634a:	d0f4      	beq.n	8006336 <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 800634c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006350:	2b01      	cmp	r3, #1
 8006352:	d0e9      	beq.n	8006328 <HAL_I2C_Mem_Read+0x20>
 8006354:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006356:	6813      	ldr	r3, [r2, #0]
    __HAL_LOCK(hi2c);
 8006358:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800635c:	07db      	lsls	r3, r3, #31
 800635e:	d402      	bmi.n	8006366 <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8006360:	6813      	ldr	r3, [r2, #0]
 8006362:	430b      	orrs	r3, r1
 8006364:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006366:	f04f 0e22 	mov.w	lr, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800636a:	f04f 0c40 	mov.w	ip, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800636e:	2000      	movs	r0, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006370:	6811      	ldr	r1, [r2, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006372:	4653      	mov	r3, sl
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006374:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8006378:	6011      	str	r1, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800637a:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800637e:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006382:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8006384:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006388:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800638c:	4639      	mov	r1, r7
    hi2c->pBuffPtr    = pData;
 800638e:	9f10      	ldr	r7, [sp, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006390:	f5a0 3080 	sub.w	r0, r0, #65536	; 0x10000
    hi2c->pBuffPtr    = pData;
 8006394:	6267      	str	r7, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006396:	4642      	mov	r2, r8
 8006398:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800639c:	62e0      	str	r0, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800639e:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063a2:	4620      	mov	r0, r4
 80063a4:	f7ff fcb2 	bl	8005d0c <I2C_RequestMemoryRead>
 80063a8:	4607      	mov	r7, r0
 80063aa:	b9a8      	cbnz	r0, 80063d8 <HAL_I2C_Mem_Read+0xd0>
    if (hi2c->XferSize == 0U)
 80063ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80063ae:	6822      	ldr	r2, [r4, #0]
 80063b0:	bb13      	cbnz	r3, 80063f8 <HAL_I2C_Mem_Read+0xf0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063b2:	9002      	str	r0, [sp, #8]
 80063b4:	6953      	ldr	r3, [r2, #20]
 80063b6:	9302      	str	r3, [sp, #8]
 80063b8:	6993      	ldr	r3, [r2, #24]
 80063ba:	9302      	str	r3, [sp, #8]
 80063bc:	9b02      	ldr	r3, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063be:	6813      	ldr	r3, [r2, #0]
 80063c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063c4:	6013      	str	r3, [r2, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80063c8:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80063ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80063ce:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80063d6:	e7a8      	b.n	800632a <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 80063d8:	2701      	movs	r7, #1
 80063da:	e7a6      	b.n	800632a <HAL_I2C_Mem_Read+0x22>
        hi2c->State             = HAL_I2C_STATE_READY;
 80063dc:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80063de:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80063e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80063e6:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80063ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80063ec:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80063f0:	f043 0320 	orr.w	r3, r3, #32
 80063f4:	6423      	str	r3, [r4, #64]	; 0x40
 80063f6:	e797      	b.n	8006328 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d07c      	beq.n	80064f6 <HAL_I2C_Mem_Read+0x1ee>
    else if (hi2c->XferSize == 2U)
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	f000 811d 	beq.w	800663c <HAL_I2C_Mem_Read+0x334>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006402:	6811      	ldr	r1, [r2, #0]
 8006404:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8006408:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800640a:	9005      	str	r0, [sp, #20]
 800640c:	6951      	ldr	r1, [r2, #20]
 800640e:	9105      	str	r1, [sp, #20]
 8006410:	6992      	ldr	r2, [r2, #24]
 8006412:	9205      	str	r2, [sp, #20]
 8006414:	9a05      	ldr	r2, [sp, #20]
    while (hi2c->XferSize > 0U)
 8006416:	2b00      	cmp	r3, #0
 8006418:	d0d5      	beq.n	80063c6 <HAL_I2C_Mem_Read+0xbe>
      if (hi2c->XferSize <= 3U)
 800641a:	2b03      	cmp	r3, #3
 800641c:	d87e      	bhi.n	800651c <HAL_I2C_Mem_Read+0x214>
        if (hi2c->XferSize == 1U)
 800641e:	2b01      	cmp	r3, #1
 8006420:	f000 80d8 	beq.w	80065d4 <HAL_I2C_Mem_Read+0x2cc>
        else if (hi2c->XferSize == 2U)
 8006424:	2b02      	cmp	r3, #2
 8006426:	d04c      	beq.n	80064c2 <HAL_I2C_Mem_Read+0x1ba>
 8006428:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800642a:	6822      	ldr	r2, [r4, #0]
 800642c:	f040 80a7 	bne.w	800657e <HAL_I2C_Mem_Read+0x276>
 8006430:	6953      	ldr	r3, [r2, #20]
 8006432:	0759      	lsls	r1, r3, #29
 8006434:	d5fc      	bpl.n	8006430 <HAL_I2C_Mem_Read+0x128>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006436:	6813      	ldr	r3, [r2, #0]
 8006438:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800643c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800643e:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006440:	6822      	ldr	r2, [r4, #0]
 8006442:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006444:	6912      	ldr	r2, [r2, #16]
 8006446:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8006448:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800644a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800644c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800644e:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8006450:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8006452:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8006454:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8006456:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006458:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800645a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800645c:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800645e:	6822      	ldr	r2, [r4, #0]
 8006460:	f040 80ab 	bne.w	80065ba <HAL_I2C_Mem_Read+0x2b2>
 8006464:	6953      	ldr	r3, [r2, #20]
 8006466:	0759      	lsls	r1, r3, #29
 8006468:	d5fc      	bpl.n	8006464 <HAL_I2C_Mem_Read+0x15c>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800646a:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800646c:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800646e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006472:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006474:	6913      	ldr	r3, [r2, #16]
 8006476:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8006478:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800647a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800647c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800647e:	3b01      	subs	r3, #1
 8006480:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8006482:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8006484:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8006486:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8006488:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800648a:	8522      	strh	r2, [r4, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800648c:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800648e:	6822      	ldr	r2, [r4, #0]
 8006490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006492:	6912      	ldr	r2, [r2, #16]
 8006494:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8006496:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8006498:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 800649a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 800649c:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 800649e:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 80064a0:	3101      	adds	r1, #1
          hi2c->XferCount--;
 80064a2:	b292      	uxth	r2, r2
          hi2c->XferSize--;
 80064a4:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80064a6:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 80064a8:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 80064aa:	8523      	strh	r3, [r4, #40]	; 0x28
 80064ac:	e7b3      	b.n	8006416 <HAL_I2C_Mem_Read+0x10e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064ae:	6953      	ldr	r3, [r2, #20]
 80064b0:	075b      	lsls	r3, r3, #29
 80064b2:	d40c      	bmi.n	80064ce <HAL_I2C_Mem_Read+0x1c6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064b4:	f7ff f8a2 	bl	80055fc <HAL_GetTick>
 80064b8:	1b80      	subs	r0, r0, r6
 80064ba:	4285      	cmp	r5, r0
 80064bc:	d36b      	bcc.n	8006596 <HAL_I2C_Mem_Read+0x28e>
 80064be:	2d00      	cmp	r5, #0
 80064c0:	d069      	beq.n	8006596 <HAL_I2C_Mem_Read+0x28e>
 80064c2:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064c4:	6822      	ldr	r2, [r4, #0]
 80064c6:	d1f2      	bne.n	80064ae <HAL_I2C_Mem_Read+0x1a6>
 80064c8:	6953      	ldr	r3, [r2, #20]
 80064ca:	0759      	lsls	r1, r3, #29
 80064cc:	d5fc      	bpl.n	80064c8 <HAL_I2C_Mem_Read+0x1c0>
  __ASM volatile ("cpsid i" : : : "memory");
 80064ce:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064d0:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064da:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80064e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80064e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80064e4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80064e6:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 80064e8:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80064ea:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80064ec:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80064ee:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80064f0:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80064f2:	8563      	strh	r3, [r4, #42]	; 0x2a
 80064f4:	e7ca      	b.n	800648c <HAL_I2C_Mem_Read+0x184>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064f6:	6813      	ldr	r3, [r2, #0]
 80064f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	9003      	str	r0, [sp, #12]
 8006504:	695a      	ldr	r2, [r3, #20]
 8006506:	9203      	str	r2, [sp, #12]
 8006508:	699a      	ldr	r2, [r3, #24]
 800650a:	9203      	str	r2, [sp, #12]
 800650c:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006514:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006516:	b662      	cpsie	i
 8006518:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800651a:	e77c      	b.n	8006416 <HAL_I2C_Mem_Read+0x10e>
 800651c:	b945      	cbnz	r5, 8006530 <HAL_I2C_Mem_Read+0x228>
 800651e:	e07e      	b.n	800661e <HAL_I2C_Mem_Read+0x316>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006520:	695a      	ldr	r2, [r3, #20]
 8006522:	06d1      	lsls	r1, r2, #27
 8006524:	d468      	bmi.n	80065f8 <HAL_I2C_Mem_Read+0x2f0>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006526:	f7ff f869 	bl	80055fc <HAL_GetTick>
 800652a:	1b80      	subs	r0, r0, r6
 800652c:	4285      	cmp	r5, r0
 800652e:	d332      	bcc.n	8006596 <HAL_I2C_Mem_Read+0x28e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006530:	6823      	ldr	r3, [r4, #0]
 8006532:	695a      	ldr	r2, [r3, #20]
 8006534:	0650      	lsls	r0, r2, #25
 8006536:	d5f3      	bpl.n	8006520 <HAL_I2C_Mem_Read+0x218>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006538:	691a      	ldr	r2, [r3, #16]
 800653a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800653c:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 800653e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006540:	6821      	ldr	r1, [r4, #0]
        hi2c->XferCount--;
 8006542:	3a01      	subs	r2, #1
 8006544:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 8006546:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8006548:	8562      	strh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800654a:	6948      	ldr	r0, [r1, #20]
        hi2c->pBuffPtr++;
 800654c:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800654e:	3b01      	subs	r3, #1
 8006550:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8006552:	f102 0c01 	add.w	ip, r2, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006556:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 8006558:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 800655a:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800655e:	f57f af5a 	bpl.w	8006416 <HAL_I2C_Mem_Read+0x10e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006562:	690b      	ldr	r3, [r1, #16]
 8006564:	7053      	strb	r3, [r2, #1]
          hi2c->XferSize--;
 8006566:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006568:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800656a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800656c:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 800656e:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 8006570:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 8006572:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 8006574:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8006576:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006578:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800657a:	6261      	str	r1, [r4, #36]	; 0x24
 800657c:	e74b      	b.n	8006416 <HAL_I2C_Mem_Read+0x10e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800657e:	6953      	ldr	r3, [r2, #20]
 8006580:	075b      	lsls	r3, r3, #29
 8006582:	f53f af58 	bmi.w	8006436 <HAL_I2C_Mem_Read+0x12e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006586:	f7ff f839 	bl	80055fc <HAL_GetTick>
 800658a:	1b80      	subs	r0, r0, r6
 800658c:	4285      	cmp	r5, r0
 800658e:	d302      	bcc.n	8006596 <HAL_I2C_Mem_Read+0x28e>
 8006590:	2d00      	cmp	r5, #0
 8006592:	f47f af49 	bne.w	8006428 <HAL_I2C_Mem_Read+0x120>
          return HAL_ERROR;
 8006596:	2701      	movs	r7, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006598:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800659a:	2320      	movs	r3, #32
}
 800659c:	4638      	mov	r0, r7
        hi2c->PreviousState     = I2C_STATE_NONE;
 800659e:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80065a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80065a4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80065a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80065aa:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80065ae:	f043 0320 	orr.w	r3, r3, #32
 80065b2:	6423      	str	r3, [r4, #64]	; 0x40
}
 80065b4:	b007      	add	sp, #28
 80065b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065ba:	6953      	ldr	r3, [r2, #20]
 80065bc:	075b      	lsls	r3, r3, #29
 80065be:	f53f af54 	bmi.w	800646a <HAL_I2C_Mem_Read+0x162>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065c2:	f7ff f81b 	bl	80055fc <HAL_GetTick>
 80065c6:	1b80      	subs	r0, r0, r6
 80065c8:	4285      	cmp	r5, r0
 80065ca:	d3e4      	bcc.n	8006596 <HAL_I2C_Mem_Read+0x28e>
 80065cc:	2d00      	cmp	r5, #0
 80065ce:	f47f af45 	bne.w	800645c <HAL_I2C_Mem_Read+0x154>
 80065d2:	e7e0      	b.n	8006596 <HAL_I2C_Mem_Read+0x28e>
 80065d4:	b945      	cbnz	r5, 80065e8 <HAL_I2C_Mem_Read+0x2e0>
 80065d6:	e02c      	b.n	8006632 <HAL_I2C_Mem_Read+0x32a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80065d8:	695a      	ldr	r2, [r3, #20]
 80065da:	06d1      	lsls	r1, r2, #27
 80065dc:	d40c      	bmi.n	80065f8 <HAL_I2C_Mem_Read+0x2f0>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065de:	f7ff f80d 	bl	80055fc <HAL_GetTick>
 80065e2:	1b80      	subs	r0, r0, r6
 80065e4:	4285      	cmp	r5, r0
 80065e6:	d3d6      	bcc.n	8006596 <HAL_I2C_Mem_Read+0x28e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065e8:	6823      	ldr	r3, [r4, #0]
 80065ea:	695a      	ldr	r2, [r3, #20]
 80065ec:	0650      	lsls	r0, r2, #25
 80065ee:	d5f3      	bpl.n	80065d8 <HAL_I2C_Mem_Read+0x2d0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065f0:	691a      	ldr	r2, [r3, #16]
 80065f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065f4:	701a      	strb	r2, [r3, #0]
 80065f6:	e7b6      	b.n	8006566 <HAL_I2C_Mem_Read+0x25e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065f8:	f06f 0010 	mvn.w	r0, #16
          return HAL_ERROR;
 80065fc:	2701      	movs	r7, #1
      hi2c->PreviousState       = I2C_STATE_NONE;
 80065fe:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8006600:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006602:	6158      	str	r0, [r3, #20]
}
 8006604:	4638      	mov	r0, r7
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006606:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006608:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800660c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006610:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006612:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006616:	6423      	str	r3, [r4, #64]	; 0x40
}
 8006618:	b007      	add	sp, #28
 800661a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	695a      	ldr	r2, [r3, #20]
 8006622:	0652      	lsls	r2, r2, #25
 8006624:	d488      	bmi.n	8006538 <HAL_I2C_Mem_Read+0x230>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006626:	695a      	ldr	r2, [r3, #20]
 8006628:	06d5      	lsls	r5, r2, #27
 800662a:	d4e5      	bmi.n	80065f8 <HAL_I2C_Mem_Read+0x2f0>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800662c:	f7fe ffe6 	bl	80055fc <HAL_GetTick>
 8006630:	e7b1      	b.n	8006596 <HAL_I2C_Mem_Read+0x28e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	695a      	ldr	r2, [r3, #20]
 8006636:	0652      	lsls	r2, r2, #25
 8006638:	d5f5      	bpl.n	8006626 <HAL_I2C_Mem_Read+0x31e>
 800663a:	e7d9      	b.n	80065f0 <HAL_I2C_Mem_Read+0x2e8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800663c:	6813      	ldr	r3, [r2, #0]
 800663e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006642:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006644:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	9004      	str	r0, [sp, #16]
 800664a:	695a      	ldr	r2, [r3, #20]
 800664c:	9204      	str	r2, [sp, #16]
 800664e:	699a      	ldr	r2, [r3, #24]
 8006650:	9204      	str	r2, [sp, #16]
 8006652:	9a04      	ldr	r2, [sp, #16]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800665a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800665c:	b662      	cpsie	i
 800665e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006660:	e6d9      	b.n	8006416 <HAL_I2C_Mem_Read+0x10e>
 8006662:	bf00      	nop

08006664 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006666:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006668:	2800      	cmp	r0, #0
 800666a:	d074      	beq.n	8006756 <HAL_PCD_Init+0xf2>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800666c:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8006670:	4604      	mov	r4, r0
 8006672:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006676:	2b00      	cmp	r3, #0
 8006678:	d068      	beq.n	800674c <HAL_PCD_Init+0xe8>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800667a:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800667c:	4626      	mov	r6, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800667e:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 8006682:	6820      	ldr	r0, [r4, #0]
 8006684:	f001 fa90 	bl	8007ba8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006688:	f856 cb10 	ldr.w	ip, [r6], #16
 800668c:	466d      	mov	r5, sp
 800668e:	4637      	mov	r7, r6
 8006690:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	1d27      	adds	r7, r4, #4
 8006698:	602b      	str	r3, [r5, #0]
 800669a:	4660      	mov	r0, ip
 800669c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80066a0:	f001 fa70 	bl	8007b84 <USB_CoreInit>
 80066a4:	4605      	mov	r5, r0
 80066a6:	b130      	cbz	r0, 80066b6 <HAL_PCD_Init+0x52>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80066a8:	2302      	movs	r3, #2
    return HAL_ERROR;
 80066aa:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 80066ac:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 80066b0:	4628      	mov	r0, r5
 80066b2:	b007      	add	sp, #28
 80066b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80066b6:	4601      	mov	r1, r0
 80066b8:	6820      	ldr	r0, [r4, #0]
 80066ba:	f001 fa7f 	bl	8007bbc <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066be:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80066c2:	f1bc 0f00 	cmp.w	ip, #0
 80066c6:	d029      	beq.n	800671c <HAL_PCD_Init+0xb8>
 80066c8:	4628      	mov	r0, r5
    hpcd->IN_ep[i].is_in = 1U;
 80066ca:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80066ce:	462a      	mov	r2, r5
    hpcd->IN_ep[i].is_in = 1U;
 80066d0:	eb04 1340 	add.w	r3, r4, r0, lsl #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066d4:	1c45      	adds	r5, r0, #1
    hpcd->IN_ep[i].num = i;
 80066d6:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80066da:	86d8      	strh	r0, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066dc:	b2e8      	uxtb	r0, r5
 80066de:	4560      	cmp	r0, ip
    hpcd->IN_ep[i].is_in = 1U;
 80066e0:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80066e4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 80066e8:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 80066ec:	641a      	str	r2, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066ee:	d3ef      	bcc.n	80066d0 <HAL_PCD_Init+0x6c>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066f0:	2300      	movs	r3, #0
    hpcd->OUT_ep[i].is_in = 0U;
 80066f2:	4619      	mov	r1, r3
 80066f4:	eb04 1243 	add.w	r2, r4, r3, lsl #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066f8:	1c5d      	adds	r5, r3, #1
    hpcd->OUT_ep[i].xfer_len = 0U;
 80066fa:	f103 000a 	add.w	r0, r3, #10
    hpcd->OUT_ep[i].num = i;
 80066fe:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006702:	b2eb      	uxtb	r3, r5
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006704:	0140      	lsls	r0, r0, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006706:	4563      	cmp	r3, ip
    hpcd->OUT_ep[i].is_in = 0U;
 8006708:	f882 1129 	strb.w	r1, [r2, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800670c:	f882 112b 	strb.w	r1, [r2, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006710:	f8c2 1138 	str.w	r1, [r2, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006714:	f8c2 113c 	str.w	r1, [r2, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006718:	5021      	str	r1, [r4, r0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800671a:	d3eb      	bcc.n	80066f4 <HAL_PCD_Init+0x90>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800671c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800671e:	466d      	mov	r5, sp
 8006720:	f8d4 c000 	ldr.w	ip, [r4]
 8006724:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006726:	6833      	ldr	r3, [r6, #0]
 8006728:	4660      	mov	r0, ip
 800672a:	602b      	str	r3, [r5, #0]
 800672c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8006730:	f001 fa46 	bl	8007bc0 <USB_DevInit>
 8006734:	4605      	mov	r5, r0
 8006736:	2800      	cmp	r0, #0
 8006738:	d1b6      	bne.n	80066a8 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_READY;
 800673a:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800673c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  (void)USB_DevDisconnect(hpcd->Instance);
 8006740:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8006742:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8006746:	f001 fe59 	bl	80083fc <USB_DevDisconnect>
  return HAL_OK;
 800674a:	e7b1      	b.n	80066b0 <HAL_PCD_Init+0x4c>
    hpcd->Lock = HAL_UNLOCKED;
 800674c:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
    HAL_PCD_MspInit(hpcd);
 8006750:	f002 fd6c 	bl	800922c <HAL_PCD_MspInit>
 8006754:	e791      	b.n	800667a <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 8006756:	2501      	movs	r5, #1
}
 8006758:	4628      	mov	r0, r5
 800675a:	b007      	add	sp, #28
 800675c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800675e:	bf00      	nop

08006760 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8006760:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8006764:	2b01      	cmp	r3, #1
 8006766:	d010      	beq.n	800678a <HAL_PCD_Start+0x2a>
 8006768:	2101      	movs	r1, #1
{
 800676a:	b510      	push	{r4, lr}
 800676c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800676e:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8006772:	f002 fe89 	bl	8009488 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8006776:	6820      	ldr	r0, [r4, #0]
 8006778:	f001 fe3e 	bl	80083f8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800677c:	6820      	ldr	r0, [r4, #0]
 800677e:	f001 fa09 	bl	8007b94 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8006782:	2000      	movs	r0, #0
 8006784:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8006788:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800678a:	2002      	movs	r0, #2
}
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop

08006790 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006794:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8006796:	6800      	ldr	r0, [r0, #0]
 8006798:	f001 fe32 	bl	8008400 <USB_ReadInterrupts>
 800679c:	0401      	lsls	r1, r0, #16
 800679e:	6822      	ldr	r2, [r4, #0]
 80067a0:	d443      	bmi.n	800682a <HAL_PCD_IRQHandler+0x9a>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80067a2:	4610      	mov	r0, r2
 80067a4:	f001 fe2c 	bl	8008400 <USB_ReadInterrupts>
 80067a8:	0546      	lsls	r6, r0, #21
 80067aa:	f100 8171 	bmi.w	8006a90 <HAL_PCD_IRQHandler+0x300>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80067ae:	6820      	ldr	r0, [r4, #0]
 80067b0:	f001 fe26 	bl	8008400 <USB_ReadInterrupts>
 80067b4:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80067b8:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80067ba:	d007      	beq.n	80067cc <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80067bc:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80067c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067c4:	041b      	lsls	r3, r3, #16
 80067c6:	0c1b      	lsrs	r3, r3, #16
 80067c8:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80067cc:	f001 fe18 	bl	8008400 <USB_ReadInterrupts>
 80067d0:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80067d4:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80067d6:	d007      	beq.n	80067e8 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80067d8:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80067dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067e0:	041b      	lsls	r3, r3, #16
 80067e2:	0c1b      	lsrs	r3, r3, #16
 80067e4:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80067e8:	f001 fe0a 	bl	8008400 <USB_ReadInterrupts>
 80067ec:	04c5      	lsls	r5, r0, #19
 80067ee:	f100 8131 	bmi.w	8006a54 <HAL_PCD_IRQHandler+0x2c4>
 80067f2:	6820      	ldr	r0, [r4, #0]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80067f4:	f001 fe04 	bl	8008400 <USB_ReadInterrupts>
 80067f8:	0500      	lsls	r0, r0, #20
 80067fa:	f100 8104 	bmi.w	8006a06 <HAL_PCD_IRQHandler+0x276>
#else
    HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80067fe:	6820      	ldr	r0, [r4, #0]
 8006800:	f001 fdfe 	bl	8008400 <USB_ReadInterrupts>
 8006804:	0582      	lsls	r2, r0, #22
 8006806:	f100 80f1 	bmi.w	80069ec <HAL_PCD_IRQHandler+0x25c>
#else
    HAL_PCD_SOFCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800680a:	6820      	ldr	r0, [r4, #0]
 800680c:	f001 fdf8 	bl	8008400 <USB_ReadInterrupts>
 8006810:	05c3      	lsls	r3, r0, #23
 8006812:	d508      	bpl.n	8006826 <HAL_PCD_IRQHandler+0x96>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006814:	6822      	ldr	r2, [r4, #0]
 8006816:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800681a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800681e:	041b      	lsls	r3, r3, #16
 8006820:	0c1b      	lsrs	r3, r3, #16
 8006822:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 8006826:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800682a:	f8df a414 	ldr.w	sl, [pc, #1044]	; 8006c40 <HAL_PCD_IRQHandler+0x4b0>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800682e:	f8df b414 	ldr.w	fp, [pc, #1044]	; 8006c44 <HAL_PCD_IRQHandler+0x4b4>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006832:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8006836:	041f      	lsls	r7, r3, #16
 8006838:	d5b3      	bpl.n	80067a2 <HAL_PCD_IRQHandler+0x12>
    wIstr = hpcd->Instance->ISTR;
 800683a:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
 800683e:	b289      	uxth	r1, r1
    if (epindex == 0U)
 8006840:	f011 050f 	ands.w	r5, r1, #15
 8006844:	d157      	bne.n	80068f6 <HAL_PCD_IRQHandler+0x166>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006846:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800684a:	8813      	ldrh	r3, [r2, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800684c:	f000 813e 	beq.w	8006acc <HAL_PCD_IRQHandler+0x33c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006850:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006852:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 8006856:	f040 817a 	bne.w	8006b4e <HAL_PCD_IRQHandler+0x3be>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800685a:	041b      	lsls	r3, r3, #16
 800685c:	d5e9      	bpl.n	8006832 <HAL_PCD_IRQHandler+0xa2>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800685e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006862:	8811      	ldrh	r1, [r2, #0]
 8006864:	400b      	ands	r3, r1
 8006866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800686a:	8013      	strh	r3, [r2, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800686c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8006870:	f894 1128 	ldrb.w	r1, [r4, #296]	; 0x128
 8006874:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006878:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800687c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8006880:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006884:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006888:	b19b      	cbz	r3, 80068b2 <HAL_PCD_IRQHandler+0x122>
 800688a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800688e:	b181      	cbz	r1, 80068b2 <HAL_PCD_IRQHandler+0x122>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006890:	4610      	mov	r0, r2
 8006892:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8006896:	f001 fdb9 	bl	800840c <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 800689a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800689e:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80068a2:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 80068a4:	4413      	add	r3, r2
 80068a6:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80068aa:	4620      	mov	r0, r4
 80068ac:	f002 fce4 	bl	8009278 <HAL_PCD_DataOutStageCallback>
 80068b0:	6822      	ldr	r2, [r4, #0]
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80068b2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80068b6:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 80068c0:	2900      	cmp	r1, #0
 80068c2:	f040 8198 	bne.w	8006bf6 <HAL_PCD_IRQHandler+0x466>
 80068c6:	5ac1      	ldrh	r1, [r0, r3]
 80068c8:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80068cc:	0409      	lsls	r1, r1, #16
 80068ce:	0c09      	lsrs	r1, r1, #16
 80068d0:	52c1      	strh	r1, [r0, r3]
 80068d2:	5ac1      	ldrh	r1, [r0, r3]
 80068d4:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80068d8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80068dc:	b289      	uxth	r1, r1
 80068de:	52c1      	strh	r1, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80068e0:	8811      	ldrh	r1, [r2, #0]
 80068e2:	4bd6      	ldr	r3, [pc, #856]	; (8006c3c <HAL_PCD_IRQHandler+0x4ac>)
 80068e4:	400b      	ands	r3, r1
 80068e6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80068ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f2:	8013      	strh	r3, [r2, #0]
 80068f4:	e79d      	b.n	8006832 <HAL_PCD_IRQHandler+0xa2>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80068f6:	f832 6025 	ldrh.w	r6, [r2, r5, lsl #2]
 80068fa:	b2b6      	uxth	r6, r6
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80068fc:	0431      	lsls	r1, r6, #16
 80068fe:	d426      	bmi.n	800694e <HAL_PCD_IRQHandler+0x1be>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006900:	0633      	lsls	r3, r6, #24
 8006902:	d596      	bpl.n	8006832 <HAL_PCD_IRQHandler+0xa2>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006904:	f832 1025 	ldrh.w	r1, [r2, r5, lsl #2]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006908:	eb04 1345 	add.w	r3, r4, r5, lsl #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800690c:	ea0a 0101 	and.w	r1, sl, r1
 8006910:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8006914:	f822 1025 	strh.w	r1, [r2, r5, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006918:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 800691c:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
        ep->xfer_buff += ep->xfer_count;
 8006920:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006922:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8006926:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800692a:	f8b1 1404 	ldrh.w	r1, [r1, #1028]	; 0x404

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800692e:	6c1d      	ldr	r5, [r3, #64]	; 0x40
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006930:	f3c1 0109 	ubfx	r1, r1, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8006934:	1846      	adds	r6, r0, r1
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006936:	6459      	str	r1, [r3, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8006938:	63de      	str	r6, [r3, #60]	; 0x3c
        if (ep->xfer_len == 0U)
 800693a:	2d00      	cmp	r5, #0
 800693c:	f040 80ef 	bne.w	8006b1e <HAL_PCD_IRQHandler+0x38e>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006940:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8006944:	4620      	mov	r0, r4
 8006946:	f002 fc9f 	bl	8009288 <HAL_PCD_DataInStageCallback>
 800694a:	6822      	ldr	r2, [r4, #0]
 800694c:	e771      	b.n	8006832 <HAL_PCD_IRQHandler+0xa2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800694e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006952:	f832 1025 	ldrh.w	r1, [r2, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8006956:	016f      	lsls	r7, r5, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006958:	400b      	ands	r3, r1
 800695a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800695e:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8006962:	eb04 0907 	add.w	r9, r4, r7
 8006966:	f899 3134 	ldrb.w	r3, [r9, #308]	; 0x134
 800696a:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 810f 	beq.w	8006b92 <HAL_PCD_IRQHandler+0x402>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006974:	f899 3128 	ldrb.w	r3, [r9, #296]	; 0x128
 8006978:	f832 c023 	ldrh.w	ip, [r2, r3, lsl #2]
 800697c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8006980:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006984:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
 8006988:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800698c:	4463      	add	r3, ip
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800698e:	f000 811b 	beq.w	8006bc8 <HAL_PCD_IRQHandler+0x438>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006992:	3302      	adds	r3, #2
 8006994:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 8006998:	f3c8 0809 	ubfx	r8, r8, #0, #10
            if (count != 0U)
 800699c:	f1b8 0f00 	cmp.w	r8, #0
 80069a0:	f040 815d 	bne.w	8006c5e <HAL_PCD_IRQHandler+0x4ce>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80069a4:	880b      	ldrh	r3, [r1, #0]
 80069a6:	ea0b 0303 	and.w	r3, fp, r3
 80069aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069b2:	800b      	strh	r3, [r1, #0]
 80069b4:	4427      	add	r7, r4
        ep->xfer_count += count;
 80069b6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
        ep->xfer_buff += count;
 80069ba:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80069be:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
        ep->xfer_count += count;
 80069c2:	4442      	add	r2, r8
        ep->xfer_buff += count;
 80069c4:	4443      	add	r3, r8
        ep->xfer_count += count;
 80069c6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
        ep->xfer_buff += count;
 80069ca:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80069ce:	2800      	cmp	r0, #0
 80069d0:	f000 80f7 	beq.w	8006bc2 <HAL_PCD_IRQHandler+0x432>
 80069d4:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80069d8:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 80069dc:	4590      	cmp	r8, r2
 80069de:	f080 8114 	bcs.w	8006c0a <HAL_PCD_IRQHandler+0x47a>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80069e2:	4620      	mov	r0, r4
 80069e4:	f002 fc48 	bl	8009278 <HAL_PCD_DataOutStageCallback>
 80069e8:	6822      	ldr	r2, [r4, #0]
 80069ea:	e789      	b.n	8006900 <HAL_PCD_IRQHandler+0x170>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80069ec:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80069ee:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80069f0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80069f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069f8:	041b      	lsls	r3, r3, #16
 80069fa:	0c1b      	lsrs	r3, r3, #16
 80069fc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8006a00:	f002 fc4a 	bl	8009298 <HAL_PCD_SOFCallback>
 8006a04:	e701      	b.n	800680a <HAL_PCD_IRQHandler+0x7a>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8006a06:	6823      	ldr	r3, [r4, #0]
 8006a08:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8006a0c:	4618      	mov	r0, r3
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8006a0e:	f042 0208 	orr.w	r2, r2, #8
 8006a12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006a16:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8006a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a1e:	0412      	lsls	r2, r2, #16
 8006a20:	0c12      	lsrs	r2, r2, #16
 8006a22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8006a26:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8006a2a:	f042 0204 	orr.w	r2, r2, #4
 8006a2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8006a32:	f001 fce5 	bl	8008400 <USB_ReadInterrupts>
 8006a36:	04c1      	lsls	r1, r0, #19
 8006a38:	d508      	bpl.n	8006a4c <HAL_PCD_IRQHandler+0x2bc>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006a3a:	6822      	ldr	r2, [r4, #0]
 8006a3c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8006a40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a44:	041b      	lsls	r3, r3, #16
 8006a46:	0c1b      	lsrs	r3, r3, #16
 8006a48:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	f002 fc39 	bl	80092c4 <HAL_PCD_SuspendCallback>
 8006a52:	e6d4      	b.n	80067fe <HAL_PCD_IRQHandler+0x6e>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8006a54:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8006a56:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8006a58:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8006a5c:	f023 0304 	bic.w	r3, r3, #4
 8006a60:	041b      	lsls	r3, r3, #16
 8006a62:	0c1b      	lsrs	r3, r3, #16
 8006a64:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006a68:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8006a6c:	f023 0308 	bic.w	r3, r3, #8
 8006a70:	041b      	lsls	r3, r3, #16
 8006a72:	0c1b      	lsrs	r3, r3, #16
 8006a74:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8006a78:	f002 fc34 	bl	80092e4 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006a7c:	6820      	ldr	r0, [r4, #0]
 8006a7e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8006a82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a86:	041b      	lsls	r3, r3, #16
 8006a88:	0c1b      	lsrs	r3, r3, #16
 8006a8a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8006a8e:	e6b1      	b.n	80067f4 <HAL_PCD_IRQHandler+0x64>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006a90:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8006a92:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006a94:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8006a98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a9c:	041b      	lsls	r3, r3, #16
 8006a9e:	0c1b      	lsrs	r3, r3, #16
 8006aa0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8006aa4:	f002 fbfc 	bl	80092a0 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 8006aa8:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	f43f ae7e 	beq.w	80067ae <HAL_PCD_IRQHandler+0x1e>
  hpcd->USB_Address = address;
 8006ab2:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 8006ab4:	2301      	movs	r3, #1
  hpcd->USB_Address = address;
 8006ab6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8006aba:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006abe:	4629      	mov	r1, r5
 8006ac0:	6820      	ldr	r0, [r4, #0]
 8006ac2:	f001 fc93 	bl	80083ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006ac6:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
 8006aca:	e670      	b.n	80067ae <HAL_PCD_IRQHandler+0x1e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006acc:	ea0a 0303 	and.w	r3, sl, r3
 8006ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad4:	8013      	strh	r3, [r2, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006ad6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8006ada:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
        ep->xfer_buff += ep->xfer_count;
 8006ade:	6be5      	ldr	r5, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006ae0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8006ae4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8006ae8:	f8b2 3404 	ldrh.w	r3, [r2, #1028]	; 0x404
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006aec:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006aee:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8006af2:	441d      	add	r5, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006af4:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8006af6:	63e5      	str	r5, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006af8:	f002 fbc6 	bl	8009288 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006afc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8006b00:	b31b      	cbz	r3, 8006b4a <HAL_PCD_IRQHandler+0x3ba>
 8006b02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b04:	6822      	ldr	r2, [r4, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f47f ae93 	bne.w	8006832 <HAL_PCD_IRQHandler+0xa2>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006b0c:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8006b10:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8006b14:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006b18:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8006b1c:	e689      	b.n	8006832 <HAL_PCD_IRQHandler+0xa2>
  ep->xfer_count = 0U;
 8006b1e:	f04f 0c00 	mov.w	ip, #0
  ep->is_in = 1U;
 8006b22:	2701      	movs	r7, #1
 8006b24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006b28:	4610      	mov	r0, r2
 8006b2a:	f003 0207 	and.w	r2, r3, #7
 8006b2e:	0151      	lsls	r1, r2, #5
  ep->xfer_buff = pBuf;
 8006b30:	1863      	adds	r3, r4, r1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b32:	3128      	adds	r1, #40	; 0x28
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  ep->xfer_len = len;
 8006b38:	e9c3 650f 	strd	r6, r5, [r3, #60]	; 0x3c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006b3c:	4421      	add	r1, r4
  ep->xfer_count = 0U;
 8006b3e:	f8c3 c044 	str.w	ip, [r3, #68]	; 0x44
  ep->is_in = 1U;
 8006b42:	f883 7029 	strb.w	r7, [r3, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006b46:	f001 fab3 	bl	80080b0 <USB_EPStartXfer>
 8006b4a:	6822      	ldr	r2, [r4, #0]
 8006b4c:	e671      	b.n	8006832 <HAL_PCD_IRQHandler+0xa2>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006b4e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8006b52:	f894 1128 	ldrb.w	r1, [r4, #296]	; 0x128
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006b56:	4610      	mov	r0, r2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006b58:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006b5c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8006b60:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006b64:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8006b68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b6c:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006b70:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006b74:	f001 fc4a 	bl	800840c <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006b78:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006b7c:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8006b7e:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006b80:	8811      	ldrh	r1, [r2, #0]
 8006b82:	400b      	ands	r3, r1
 8006b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b88:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8006b8a:	f002 fb6f 	bl	800926c <HAL_PCD_SetupStageCallback>
 8006b8e:	6822      	ldr	r2, [r4, #0]
 8006b90:	e64f      	b.n	8006832 <HAL_PCD_IRQHandler+0xa2>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006b92:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8006b96:	f899 1128 	ldrb.w	r1, [r9, #296]	; 0x128
 8006b9a:	3306      	adds	r3, #6
 8006b9c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006ba0:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 8006ba4:	f3c8 0809 	ubfx	r8, r8, #0, #10
          if (count != 0U)
 8006ba8:	f1b8 0f00 	cmp.w	r8, #0
 8006bac:	f43f af02 	beq.w	80069b4 <HAL_PCD_IRQHandler+0x224>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006bb0:	4610      	mov	r0, r2
 8006bb2:	4643      	mov	r3, r8
 8006bb4:	f8b9 212e 	ldrh.w	r2, [r9, #302]	; 0x12e
 8006bb8:	f8d9 113c 	ldr.w	r1, [r9, #316]	; 0x13c
 8006bbc:	f001 fc26 	bl	800840c <USB_ReadPMA>
 8006bc0:	e6f8      	b.n	80069b4 <HAL_PCD_IRQHandler+0x224>
 8006bc2:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 8006bc6:	e70c      	b.n	80069e2 <HAL_PCD_IRQHandler+0x252>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006bc8:	3306      	adds	r3, #6
 8006bca:	f830 8013 	ldrh.w	r8, [r0, r3, lsl #1]
 8006bce:	f3c8 0809 	ubfx	r8, r8, #0, #10
            if (count != 0U)
 8006bd2:	f1b8 0f00 	cmp.w	r8, #0
 8006bd6:	f43f aee5 	beq.w	80069a4 <HAL_PCD_IRQHandler+0x214>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006bda:	4643      	mov	r3, r8
 8006bdc:	4610      	mov	r0, r2
 8006bde:	f8b9 2132 	ldrh.w	r2, [r9, #306]	; 0x132
 8006be2:	f8d9 113c 	ldr.w	r1, [r9, #316]	; 0x13c
 8006be6:	f001 fc11 	bl	800840c <USB_ReadPMA>
 8006bea:	f899 3128 	ldrb.w	r3, [r9, #296]	; 0x128
 8006bee:	6821      	ldr	r1, [r4, #0]
 8006bf0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8006bf4:	e6d6      	b.n	80069a4 <HAL_PCD_IRQHandler+0x214>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006bf6:	293e      	cmp	r1, #62	; 0x3e
 8006bf8:	d826      	bhi.n	8006c48 <HAL_PCD_IRQHandler+0x4b8>
 8006bfa:	084d      	lsrs	r5, r1, #1
 8006bfc:	07cf      	lsls	r7, r1, #31
 8006bfe:	bf48      	it	mi
 8006c00:	3501      	addmi	r5, #1
 8006c02:	02ad      	lsls	r5, r5, #10
 8006c04:	b2ad      	uxth	r5, r5
 8006c06:	52c5      	strh	r5, [r0, r3]
 8006c08:	e66a      	b.n	80068e0 <HAL_PCD_IRQHandler+0x150>
  ep->xfer_count = 0U;
 8006c0a:	f04f 0c00 	mov.w	ip, #0
 8006c0e:	f001 0107 	and.w	r1, r1, #7
 8006c12:	014f      	lsls	r7, r1, #5
  ep->xfer_buff = pBuf;
 8006c14:	19e2      	adds	r2, r4, r7
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c16:	f507 7794 	add.w	r7, r7, #296	; 0x128
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c1a:	f882 1128 	strb.w	r1, [r2, #296]	; 0x128
  ep->xfer_len = len;
 8006c1e:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140
  ep->xfer_buff = pBuf;
 8006c22:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
  ep->xfer_count = 0U;
 8006c26:	f8c2 c144 	str.w	ip, [r2, #324]	; 0x144
  ep->is_in = 0U;
 8006c2a:	f882 c129 	strb.w	ip, [r2, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006c2e:	19e1      	adds	r1, r4, r7
 8006c30:	6820      	ldr	r0, [r4, #0]
 8006c32:	f001 fa3d 	bl	80080b0 <USB_EPStartXfer>
 8006c36:	6822      	ldr	r2, [r4, #0]
 8006c38:	e662      	b.n	8006900 <HAL_PCD_IRQHandler+0x170>
 8006c3a:	bf00      	nop
 8006c3c:	ffffbf8f 	.word	0xffffbf8f
 8006c40:	ffff8f0f 	.word	0xffff8f0f
 8006c44:	ffff8f8f 	.word	0xffff8f8f
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006c48:	094d      	lsrs	r5, r1, #5
 8006c4a:	06ce      	lsls	r6, r1, #27
 8006c4c:	4906      	ldr	r1, [pc, #24]	; (8006c68 <HAL_PCD_IRQHandler+0x4d8>)
 8006c4e:	bf08      	it	eq
 8006c50:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8006c54:	ea41 2585 	orr.w	r5, r1, r5, lsl #10
 8006c58:	b2ad      	uxth	r5, r5
 8006c5a:	52c5      	strh	r5, [r0, r3]
 8006c5c:	e640      	b.n	80068e0 <HAL_PCD_IRQHandler+0x150>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006c5e:	4610      	mov	r0, r2
 8006c60:	4643      	mov	r3, r8
 8006c62:	f8b9 2130 	ldrh.w	r2, [r9, #304]	; 0x130
 8006c66:	e7bc      	b.n	8006be2 <HAL_PCD_IRQHandler+0x452>
 8006c68:	ffff8000 	.word	0xffff8000

08006c6c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8006c6c:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
 8006c70:	2a01      	cmp	r2, #1
 8006c72:	d00d      	beq.n	8006c90 <HAL_PCD_SetAddress+0x24>
{
 8006c74:	b510      	push	{r4, lr}
 8006c76:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8006c78:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8006c7a:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8006c7e:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006c82:	6800      	ldr	r0, [r0, #0]
 8006c84:	f001 fbb2 	bl	80083ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006c88:	2000      	movs	r0, #0
 8006c8a:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 8006c8e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8006c90:	2002      	movs	r0, #2
}
 8006c92:	4770      	bx	lr

08006c94 <HAL_PCD_EP_Open>:
{
 8006c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c96:	f001 0507 	and.w	r5, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 8006c9a:	0609      	lsls	r1, r1, #24
 8006c9c:	ea4f 1445 	mov.w	r4, r5, lsl #5
 8006ca0:	d41f      	bmi.n	8006ce2 <HAL_PCD_EP_Open+0x4e>
    ep->is_in = 0U;
 8006ca2:	2700      	movs	r7, #0
 8006ca4:	1906      	adds	r6, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ca6:	f504 7194 	add.w	r1, r4, #296	; 0x128
    ep->is_in = 0U;
 8006caa:	f886 7129 	strb.w	r7, [r6, #297]	; 0x129
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006cae:	4401      	add	r1, r0
  if (ep->is_in != 0U)
 8006cb0:	784c      	ldrb	r4, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006cb2:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 8006cb4:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8006cb6:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8006cb8:	b104      	cbz	r4, 8006cbc <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 8006cba:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8006cbc:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8006cbe:	bf04      	itt	eq
 8006cc0:	2300      	moveq	r3, #0
 8006cc2:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8006cc4:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d012      	beq.n	8006cf2 <HAL_PCD_EP_Open+0x5e>
 8006ccc:	2301      	movs	r3, #1
 8006cce:	4604      	mov	r4, r0
 8006cd0:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006cd4:	6800      	ldr	r0, [r0, #0]
 8006cd6:	f000 ff8d 	bl	8007bf4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006cda:	2000      	movs	r0, #0
 8006cdc:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 8006ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->is_in = 1U;
 8006ce2:	2701      	movs	r7, #1
 8006ce4:	1906      	adds	r6, r0, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ce6:	f104 0128 	add.w	r1, r4, #40	; 0x28
    ep->is_in = 1U;
 8006cea:	f886 7029 	strb.w	r7, [r6, #41]	; 0x29
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cee:	4401      	add	r1, r0
 8006cf0:	e7de      	b.n	8006cb0 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 8006cf2:	2002      	movs	r0, #2
}
 8006cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cf6:	bf00      	nop

08006cf8 <HAL_PCD_EP_Close>:
{
 8006cf8:	f001 0207 	and.w	r2, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 8006cfc:	0609      	lsls	r1, r1, #24
{
 8006cfe:	b510      	push	{r4, lr}
 8006d00:	ea4f 1342 	mov.w	r3, r2, lsl #5
  if ((ep_addr & 0x80U) == 0x80U)
 8006d04:	d416      	bmi.n	8006d34 <HAL_PCD_EP_Close+0x3c>
    ep->is_in = 0U;
 8006d06:	2400      	movs	r4, #0
 8006d08:	18c1      	adds	r1, r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d0a:	f503 7394 	add.w	r3, r3, #296	; 0x128
    ep->is_in = 0U;
 8006d0e:	f881 4129 	strb.w	r4, [r1, #297]	; 0x129
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d12:	18c1      	adds	r1, r0, r3
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006d14:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8006d16:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d015      	beq.n	8006d4a <HAL_PCD_EP_Close+0x52>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	4604      	mov	r4, r0
 8006d22:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006d26:	6800      	ldr	r0, [r0, #0]
 8006d28:	f001 f8ec 	bl	8007f04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006d2c:	2000      	movs	r0, #0
 8006d2e:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 8006d32:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 8006d34:	2401      	movs	r4, #1
 8006d36:	18c1      	adds	r1, r0, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d38:	3328      	adds	r3, #40	; 0x28
    ep->is_in = 1U;
 8006d3a:	f881 4029 	strb.w	r4, [r1, #41]	; 0x29
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d3e:	18c1      	adds	r1, r0, r3
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006d40:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8006d42:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d1e9      	bne.n	8006d1e <HAL_PCD_EP_Close+0x26>
 8006d4a:	2002      	movs	r0, #2
}
 8006d4c:	bd10      	pop	{r4, pc}
 8006d4e:	bf00      	nop

08006d50 <HAL_PCD_EP_Receive>:
{
 8006d50:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_count = 0U;
 8006d52:	2600      	movs	r6, #0
 8006d54:	f001 0107 	and.w	r1, r1, #7
 8006d58:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 8006d5a:	1944      	adds	r4, r0, r5
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d5c:	f505 7594 	add.w	r5, r5, #296	; 0x128
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d60:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep->xfer_buff = pBuf;
 8006d64:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006d68:	1941      	adds	r1, r0, r5
  ep->xfer_len = len;
 8006d6a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006d6e:	6800      	ldr	r0, [r0, #0]
  ep->xfer_count = 0U;
 8006d70:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 8006d74:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006d78:	f001 f99a 	bl	80080b0 <USB_EPStartXfer>
}
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	bd70      	pop	{r4, r5, r6, pc}

08006d80 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006d80:	f001 0107 	and.w	r1, r1, #7
 8006d84:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8006d88:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop

08006d90 <HAL_PCD_EP_Transmit>:
{
 8006d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ep->xfer_count = 0U;
 8006d92:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8006d94:	2701      	movs	r7, #1
 8006d96:	f001 0107 	and.w	r1, r1, #7
 8006d9a:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 8006d9c:	1944      	adds	r4, r0, r5
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d9e:	3528      	adds	r5, #40	; 0x28
  ep->num = ep_addr & EP_ADDR_MSK;
 8006da0:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep->xfer_len = len;
 8006da4:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006da8:	1941      	adds	r1, r0, r5
 8006daa:	6800      	ldr	r0, [r0, #0]
  ep->is_in = 1U;
 8006dac:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
  ep->xfer_count = 0U;
 8006db0:	6466      	str	r6, [r4, #68]	; 0x44
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006db2:	f001 f97d 	bl	80080b0 <USB_EPStartXfer>
}
 8006db6:	4630      	mov	r0, r6
 8006db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dba:	bf00      	nop

08006dbc <HAL_PCD_EP_SetStall>:
{
 8006dbc:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006dbe:	6843      	ldr	r3, [r0, #4]
 8006dc0:	f001 0507 	and.w	r5, r1, #7
 8006dc4:	429d      	cmp	r5, r3
 8006dc6:	d81b      	bhi.n	8006e00 <HAL_PCD_EP_SetStall+0x44>
  if ((0x80U & ep_addr) == 0x80U)
 8006dc8:	060b      	lsls	r3, r1, #24
 8006dca:	d41b      	bmi.n	8006e04 <HAL_PCD_EP_SetStall+0x48>
    ep->is_in = 0U;
 8006dcc:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8006dce:	0149      	lsls	r1, r1, #5
    ep->is_in = 0U;
 8006dd0:	1843      	adds	r3, r0, r1
 8006dd2:	f883 4129 	strb.w	r4, [r3, #297]	; 0x129
  ep->is_stall = 1U;
 8006dd6:	2301      	movs	r3, #1
    ep = &hpcd->OUT_ep[ep_addr];
 8006dd8:	f501 7294 	add.w	r2, r1, #296	; 0x128
 8006ddc:	1881      	adds	r1, r0, r2
  ep->num = ep_addr & EP_ADDR_MSK;
 8006dde:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8006de0:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8006de2:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d01b      	beq.n	8006e22 <HAL_PCD_EP_SetStall+0x66>
 8006dea:	4604      	mov	r4, r0
 8006dec:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006df0:	6800      	ldr	r0, [r0, #0]
 8006df2:	f001 fa85 	bl	8008300 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006df6:	b1b5      	cbz	r5, 8006e26 <HAL_PCD_EP_SetStall+0x6a>
  __HAL_UNLOCK(hpcd);
 8006df8:	2000      	movs	r0, #0
 8006dfa:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 8006dfe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006e00:	2001      	movs	r0, #1
}
 8006e02:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8006e04:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e06:	016b      	lsls	r3, r5, #5
 8006e08:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 8006e0c:	4403      	add	r3, r0
 8006e0e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 8006e12:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e14:	4401      	add	r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e16:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8006e18:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8006e1a:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d1e3      	bne.n	8006dea <HAL_PCD_EP_SetStall+0x2e>
 8006e22:	2002      	movs	r0, #2
}
 8006e24:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006e26:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8006e2a:	6820      	ldr	r0, [r4, #0]
 8006e2c:	f001 faec 	bl	8008408 <USB_EP0_OutStart>
 8006e30:	e7e2      	b.n	8006df8 <HAL_PCD_EP_SetStall+0x3c>
 8006e32:	bf00      	nop

08006e34 <HAL_PCD_EP_ClrStall>:
{
 8006e34:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006e36:	6843      	ldr	r3, [r0, #4]
 8006e38:	f001 020f 	and.w	r2, r1, #15
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d81e      	bhi.n	8006e7e <HAL_PCD_EP_ClrStall+0x4a>
 8006e40:	f001 0207 	and.w	r2, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 8006e44:	0609      	lsls	r1, r1, #24
 8006e46:	ea4f 1342 	mov.w	r3, r2, lsl #5
 8006e4a:	d41a      	bmi.n	8006e82 <HAL_PCD_EP_ClrStall+0x4e>
    ep->is_in = 0U;
 8006e4c:	2500      	movs	r5, #0
 8006e4e:	18c4      	adds	r4, r0, r3
 8006e50:	f884 5129 	strb.w	r5, [r4, #297]	; 0x129
  ep->is_stall = 0U;
 8006e54:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e56:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8006e5a:	4401      	add	r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e5c:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8006e5e:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8006e60:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d01a      	beq.n	8006e9e <HAL_PCD_EP_ClrStall+0x6a>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006e70:	6800      	ldr	r0, [r0, #0]
 8006e72:	f001 fa67 	bl	8008344 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006e76:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
  return HAL_OK;
 8006e7a:	4628      	mov	r0, r5
}
 8006e7c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006e7e:	2001      	movs	r0, #1
}
 8006e80:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8006e82:	2501      	movs	r5, #1
 8006e84:	18c4      	adds	r4, r0, r3
 8006e86:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
  ep->is_stall = 0U;
 8006e8a:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e8c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8006e90:	4401      	add	r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e92:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8006e94:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8006e96:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d1e4      	bne.n	8006e68 <HAL_PCD_EP_ClrStall+0x34>
 8006e9e:	2002      	movs	r0, #2
}
 8006ea0:	bd38      	pop	{r3, r4, r5, pc}
 8006ea2:	bf00      	nop

08006ea4 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006ea4:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006ea8:	d00d      	beq.n	8006ec6 <HAL_PCDEx_PMAConfig+0x22>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006eaa:	f001 0107 	and.w	r1, r1, #7
 8006eae:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8006eb2:	3028      	adds	r0, #40	; 0x28
 8006eb4:	b299      	uxth	r1, r3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006eb6:	b16a      	cbz	r2, 8006ed4 <HAL_PCDEx_PMAConfig+0x30>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006eb8:	2201      	movs	r2, #1
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006eba:	0c1b      	lsrs	r3, r3, #16
 8006ebc:	8143      	strh	r3, [r0, #10]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006ebe:	8101      	strh	r1, [r0, #8]
 8006ec0:	7302      	strb	r2, [r0, #12]
  }

  return HAL_OK;
}
 8006ec2:	2000      	movs	r0, #0
 8006ec4:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8006ec6:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8006eca:	f500 7094 	add.w	r0, r0, #296	; 0x128
 8006ece:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8006ed0:	2a00      	cmp	r2, #0
 8006ed2:	d1f1      	bne.n	8006eb8 <HAL_PCDEx_PMAConfig+0x14>
    ep->pmaadress = (uint16_t)pmaadress;
 8006ed4:	80c1      	strh	r1, [r0, #6]
 8006ed6:	7302      	strb	r2, [r0, #12]
}
 8006ed8:	2000      	movs	r0, #0
 8006eda:	4770      	bx	lr

08006edc <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006edc:	2800      	cmp	r0, #0
 8006ede:	f000 8155 	beq.w	800718c <HAL_RCC_OscConfig+0x2b0>
{
 8006ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ee6:	6803      	ldr	r3, [r0, #0]
{
 8006ee8:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006eea:	07dd      	lsls	r5, r3, #31
 8006eec:	4604      	mov	r4, r0
 8006eee:	d535      	bpl.n	8006f5c <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ef0:	49a8      	ldr	r1, [pc, #672]	; (8007194 <HAL_RCC_OscConfig+0x2b8>)
 8006ef2:	684a      	ldr	r2, [r1, #4]
 8006ef4:	f002 020c 	and.w	r2, r2, #12
 8006ef8:	2a04      	cmp	r2, #4
 8006efa:	f000 8105 	beq.w	8007108 <HAL_RCC_OscConfig+0x22c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006efe:	684a      	ldr	r2, [r1, #4]
 8006f00:	f002 020c 	and.w	r2, r2, #12
 8006f04:	2a08      	cmp	r2, #8
 8006f06:	f000 80fb 	beq.w	8007100 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f0a:	6863      	ldr	r3, [r4, #4]
 8006f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f10:	d010      	beq.n	8006f34 <HAL_RCC_OscConfig+0x58>
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 8120 	beq.w	8007158 <HAL_RCC_OscConfig+0x27c>
 8006f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f1c:	f000 8178 	beq.w	8007210 <HAL_RCC_OscConfig+0x334>
 8006f20:	4b9c      	ldr	r3, [pc, #624]	; (8007194 <HAL_RCC_OscConfig+0x2b8>)
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f30:	601a      	str	r2, [r3, #0]
 8006f32:	e004      	b.n	8006f3e <HAL_RCC_OscConfig+0x62>
 8006f34:	4a97      	ldr	r2, [pc, #604]	; (8007194 <HAL_RCC_OscConfig+0x2b8>)
 8006f36:	6813      	ldr	r3, [r2, #0]
 8006f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f3c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f3e:	f7fe fb5d 	bl	80055fc <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f42:	4d94      	ldr	r5, [pc, #592]	; (8007194 <HAL_RCC_OscConfig+0x2b8>)
        tickstart = HAL_GetTick();
 8006f44:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f46:	e005      	b.n	8006f54 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f48:	f7fe fb58 	bl	80055fc <HAL_GetTick>
 8006f4c:	1b80      	subs	r0, r0, r6
 8006f4e:	2864      	cmp	r0, #100	; 0x64
 8006f50:	f200 80f5 	bhi.w	800713e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	039a      	lsls	r2, r3, #14
 8006f58:	d5f6      	bpl.n	8006f48 <HAL_RCC_OscConfig+0x6c>
 8006f5a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f5c:	079f      	lsls	r7, r3, #30
 8006f5e:	d44d      	bmi.n	8006ffc <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f60:	071a      	lsls	r2, r3, #28
 8006f62:	d522      	bpl.n	8006faa <HAL_RCC_OscConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f64:	69a3      	ldr	r3, [r4, #24]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f000 80ba 	beq.w	80070e0 <HAL_RCC_OscConfig+0x204>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	4b8a      	ldr	r3, [pc, #552]	; (8007198 <HAL_RCC_OscConfig+0x2bc>)

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f70:	4d88      	ldr	r5, [pc, #544]	; (8007194 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_ENABLE();
 8006f72:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006f74:	f7fe fb42 	bl	80055fc <HAL_GetTick>
 8006f78:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f7a:	e005      	b.n	8006f88 <HAL_RCC_OscConfig+0xac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f7c:	f7fe fb3e 	bl	80055fc <HAL_GetTick>
 8006f80:	1b80      	subs	r0, r0, r6
 8006f82:	2802      	cmp	r0, #2
 8006f84:	f200 80db 	bhi.w	800713e <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f88:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f8a:	079b      	lsls	r3, r3, #30
 8006f8c:	d5f6      	bpl.n	8006f7c <HAL_RCC_OscConfig+0xa0>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006f8e:	4b83      	ldr	r3, [pc, #524]	; (800719c <HAL_RCC_OscConfig+0x2c0>)
 8006f90:	4a83      	ldr	r2, [pc, #524]	; (80071a0 <HAL_RCC_OscConfig+0x2c4>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	fba2 2303 	umull	r2, r3, r2, r3
 8006f98:	0a5b      	lsrs	r3, r3, #9
 8006f9a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8006f9c:	bf00      	nop
  }
  while (Delay --);
 8006f9e:	9b01      	ldr	r3, [sp, #4]
 8006fa0:	1e5a      	subs	r2, r3, #1
 8006fa2:	9201      	str	r2, [sp, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1f9      	bne.n	8006f9c <HAL_RCC_OscConfig+0xc0>
 8006fa8:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006faa:	075d      	lsls	r5, r3, #29
 8006fac:	d569      	bpl.n	8007082 <HAL_RCC_OscConfig+0x1a6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fae:	4b79      	ldr	r3, [pc, #484]	; (8007194 <HAL_RCC_OscConfig+0x2b8>)
 8006fb0:	69da      	ldr	r2, [r3, #28]
 8006fb2:	00d0      	lsls	r0, r2, #3
 8006fb4:	f100 80ec 	bmi.w	8007190 <HAL_RCC_OscConfig+0x2b4>
      pwrclkchanged = SET;
 8006fb8:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fba:	69da      	ldr	r2, [r3, #28]
 8006fbc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006fc0:	61da      	str	r2, [r3, #28]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fcc:	4b75      	ldr	r3, [pc, #468]	; (80071a4 <HAL_RCC_OscConfig+0x2c8>)
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	05d1      	lsls	r1, r2, #23
 8006fd2:	f140 80a3 	bpl.w	800711c <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fd6:	68e3      	ldr	r3, [r4, #12]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d037      	beq.n	800704c <HAL_RCC_OscConfig+0x170>
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 80e7 	beq.w	80071b0 <HAL_RCC_OscConfig+0x2d4>
 8006fe2:	2b05      	cmp	r3, #5
 8006fe4:	4b6b      	ldr	r3, [pc, #428]	; (8007194 <HAL_RCC_OscConfig+0x2b8>)
 8006fe6:	6a1a      	ldr	r2, [r3, #32]
 8006fe8:	f000 811f 	beq.w	800722a <HAL_RCC_OscConfig+0x34e>
 8006fec:	f022 0201 	bic.w	r2, r2, #1
 8006ff0:	621a      	str	r2, [r3, #32]
 8006ff2:	6a1a      	ldr	r2, [r3, #32]
 8006ff4:	f022 0204 	bic.w	r2, r2, #4
 8006ff8:	621a      	str	r2, [r3, #32]
 8006ffa:	e02c      	b.n	8007056 <HAL_RCC_OscConfig+0x17a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ffc:	4a65      	ldr	r2, [pc, #404]	; (8007194 <HAL_RCC_OscConfig+0x2b8>)
 8006ffe:	6851      	ldr	r1, [r2, #4]
 8007000:	f011 0f0c 	tst.w	r1, #12
 8007004:	d061      	beq.n	80070ca <HAL_RCC_OscConfig+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007006:	6851      	ldr	r1, [r2, #4]
 8007008:	f001 010c 	and.w	r1, r1, #12
 800700c:	2908      	cmp	r1, #8
 800700e:	d059      	beq.n	80070c4 <HAL_RCC_OscConfig+0x1e8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007010:	6923      	ldr	r3, [r4, #16]
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 80eb 	beq.w	80071ee <HAL_RCC_OscConfig+0x312>
        __HAL_RCC_HSI_ENABLE();
 8007018:	2201      	movs	r2, #1
 800701a:	4b63      	ldr	r3, [pc, #396]	; (80071a8 <HAL_RCC_OscConfig+0x2cc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800701c:	4d5d      	ldr	r5, [pc, #372]	; (8007194 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_ENABLE();
 800701e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007020:	f7fe faec 	bl	80055fc <HAL_GetTick>
 8007024:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007026:	e005      	b.n	8007034 <HAL_RCC_OscConfig+0x158>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007028:	f7fe fae8 	bl	80055fc <HAL_GetTick>
 800702c:	1b80      	subs	r0, r0, r6
 800702e:	2802      	cmp	r0, #2
 8007030:	f200 8085 	bhi.w	800713e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	0798      	lsls	r0, r3, #30
 8007038:	d5f6      	bpl.n	8007028 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800703a:	682b      	ldr	r3, [r5, #0]
 800703c:	6962      	ldr	r2, [r4, #20]
 800703e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007042:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007046:	602b      	str	r3, [r5, #0]
 8007048:	6823      	ldr	r3, [r4, #0]
 800704a:	e789      	b.n	8006f60 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800704c:	4a51      	ldr	r2, [pc, #324]	; (8007194 <HAL_RCC_OscConfig+0x2b8>)
 800704e:	6a13      	ldr	r3, [r2, #32]
 8007050:	f043 0301 	orr.w	r3, r3, #1
 8007054:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8007056:	f7fe fad1 	bl	80055fc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800705a:	4e4e      	ldr	r6, [pc, #312]	; (8007194 <HAL_RCC_OscConfig+0x2b8>)
      tickstart = HAL_GetTick();
 800705c:	4680      	mov	r8, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800705e:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007062:	e005      	b.n	8007070 <HAL_RCC_OscConfig+0x194>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007064:	f7fe faca 	bl	80055fc <HAL_GetTick>
 8007068:	eba0 0008 	sub.w	r0, r0, r8
 800706c:	42b8      	cmp	r0, r7
 800706e:	d866      	bhi.n	800713e <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007070:	6a33      	ldr	r3, [r6, #32]
 8007072:	079b      	lsls	r3, r3, #30
 8007074:	d5f6      	bpl.n	8007064 <HAL_RCC_OscConfig+0x188>
    if (pwrclkchanged == SET)
 8007076:	b125      	cbz	r5, 8007082 <HAL_RCC_OscConfig+0x1a6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007078:	4a46      	ldr	r2, [pc, #280]	; (8007194 <HAL_RCC_OscConfig+0x2b8>)
 800707a:	69d3      	ldr	r3, [r2, #28]
 800707c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007080:	61d3      	str	r3, [r2, #28]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007082:	69e0      	ldr	r0, [r4, #28]
 8007084:	b1d0      	cbz	r0, 80070bc <HAL_RCC_OscConfig+0x1e0>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007086:	4d43      	ldr	r5, [pc, #268]	; (8007194 <HAL_RCC_OscConfig+0x2b8>)
 8007088:	686a      	ldr	r2, [r5, #4]
 800708a:	f002 020c 	and.w	r2, r2, #12
 800708e:	2a08      	cmp	r2, #8
 8007090:	f000 80d3 	beq.w	800723a <HAL_RCC_OscConfig+0x35e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007094:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8007096:	f04f 0100 	mov.w	r1, #0
 800709a:	4a44      	ldr	r2, [pc, #272]	; (80071ac <HAL_RCC_OscConfig+0x2d0>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800709c:	f000 80de 	beq.w	800725c <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_PLL_DISABLE();
 80070a0:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80070a2:	f7fe faab 	bl	80055fc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070a6:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80070a8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070aa:	e004      	b.n	80070b6 <HAL_RCC_OscConfig+0x1da>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070ac:	f7fe faa6 	bl	80055fc <HAL_GetTick>
 80070b0:	1b40      	subs	r0, r0, r5
 80070b2:	2802      	cmp	r0, #2
 80070b4:	d843      	bhi.n	800713e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	019b      	lsls	r3, r3, #6
 80070ba:	d4f7      	bmi.n	80070ac <HAL_RCC_OscConfig+0x1d0>
  return HAL_OK;
 80070bc:	2000      	movs	r0, #0
}
 80070be:	b002      	add	sp, #8
 80070c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80070c4:	6852      	ldr	r2, [r2, #4]
 80070c6:	03d6      	lsls	r6, r2, #15
 80070c8:	d4a2      	bmi.n	8007010 <HAL_RCC_OscConfig+0x134>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070ca:	4a32      	ldr	r2, [pc, #200]	; (8007194 <HAL_RCC_OscConfig+0x2b8>)
 80070cc:	6812      	ldr	r2, [r2, #0]
 80070ce:	0795      	lsls	r5, r2, #30
 80070d0:	d539      	bpl.n	8007146 <HAL_RCC_OscConfig+0x26a>
 80070d2:	6922      	ldr	r2, [r4, #16]
 80070d4:	2a01      	cmp	r2, #1
 80070d6:	d036      	beq.n	8007146 <HAL_RCC_OscConfig+0x26a>
        return HAL_ERROR;
 80070d8:	2001      	movs	r0, #1
}
 80070da:	b002      	add	sp, #8
 80070dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80070e0:	4a2d      	ldr	r2, [pc, #180]	; (8007198 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070e2:	4d2c      	ldr	r5, [pc, #176]	; (8007194 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_DISABLE();
 80070e4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80070e6:	f7fe fa89 	bl	80055fc <HAL_GetTick>
 80070ea:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070ec:	e004      	b.n	80070f8 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070ee:	f7fe fa85 	bl	80055fc <HAL_GetTick>
 80070f2:	1b80      	subs	r0, r0, r6
 80070f4:	2802      	cmp	r0, #2
 80070f6:	d822      	bhi.n	800713e <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80070fa:	079f      	lsls	r7, r3, #30
 80070fc:	d4f7      	bmi.n	80070ee <HAL_RCC_OscConfig+0x212>
 80070fe:	e753      	b.n	8006fa8 <HAL_RCC_OscConfig+0xcc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007100:	684a      	ldr	r2, [r1, #4]
 8007102:	03d0      	lsls	r0, r2, #15
 8007104:	f57f af01 	bpl.w	8006f0a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007108:	4a22      	ldr	r2, [pc, #136]	; (8007194 <HAL_RCC_OscConfig+0x2b8>)
 800710a:	6812      	ldr	r2, [r2, #0]
 800710c:	0391      	lsls	r1, r2, #14
 800710e:	f57f af25 	bpl.w	8006f5c <HAL_RCC_OscConfig+0x80>
 8007112:	6862      	ldr	r2, [r4, #4]
 8007114:	2a00      	cmp	r2, #0
 8007116:	f47f af21 	bne.w	8006f5c <HAL_RCC_OscConfig+0x80>
 800711a:	e7dd      	b.n	80070d8 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800711c:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800711e:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007124:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8007126:	f7fe fa69 	bl	80055fc <HAL_GetTick>
 800712a:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800712c:	6833      	ldr	r3, [r6, #0]
 800712e:	05da      	lsls	r2, r3, #23
 8007130:	f53f af51 	bmi.w	8006fd6 <HAL_RCC_OscConfig+0xfa>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007134:	f7fe fa62 	bl	80055fc <HAL_GetTick>
 8007138:	1bc0      	subs	r0, r0, r7
 800713a:	2864      	cmp	r0, #100	; 0x64
 800713c:	d9f6      	bls.n	800712c <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 800713e:	2003      	movs	r0, #3
}
 8007140:	b002      	add	sp, #8
 8007142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007146:	4913      	ldr	r1, [pc, #76]	; (8007194 <HAL_RCC_OscConfig+0x2b8>)
 8007148:	6960      	ldr	r0, [r4, #20]
 800714a:	680a      	ldr	r2, [r1, #0]
 800714c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8007150:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8007154:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007156:	e703      	b.n	8006f60 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007158:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800715c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8007160:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007162:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007164:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007170:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007172:	f7fe fa43 	bl	80055fc <HAL_GetTick>
 8007176:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007178:	e004      	b.n	8007184 <HAL_RCC_OscConfig+0x2a8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800717a:	f7fe fa3f 	bl	80055fc <HAL_GetTick>
 800717e:	1b80      	subs	r0, r0, r6
 8007180:	2864      	cmp	r0, #100	; 0x64
 8007182:	d8dc      	bhi.n	800713e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007184:	682b      	ldr	r3, [r5, #0]
 8007186:	039b      	lsls	r3, r3, #14
 8007188:	d4f7      	bmi.n	800717a <HAL_RCC_OscConfig+0x29e>
 800718a:	e6e6      	b.n	8006f5a <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 800718c:	2001      	movs	r0, #1
}
 800718e:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8007190:	2500      	movs	r5, #0
 8007192:	e71b      	b.n	8006fcc <HAL_RCC_OscConfig+0xf0>
 8007194:	40021000 	.word	0x40021000
 8007198:	42420480 	.word	0x42420480
 800719c:	20000038 	.word	0x20000038
 80071a0:	10624dd3 	.word	0x10624dd3
 80071a4:	40007000 	.word	0x40007000
 80071a8:	42420000 	.word	0x42420000
 80071ac:	42420060 	.word	0x42420060
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80071b4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80071b8:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071ba:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071bc:	f022 0201 	bic.w	r2, r2, #1
 80071c0:	621a      	str	r2, [r3, #32]
 80071c2:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071c4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071c8:	f022 0204 	bic.w	r2, r2, #4
 80071cc:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 80071ce:	f7fe fa15 	bl	80055fc <HAL_GetTick>
 80071d2:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071d4:	e004      	b.n	80071e0 <HAL_RCC_OscConfig+0x304>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071d6:	f7fe fa11 	bl	80055fc <HAL_GetTick>
 80071da:	1bc0      	subs	r0, r0, r7
 80071dc:	4540      	cmp	r0, r8
 80071de:	d8ae      	bhi.n	800713e <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071e0:	6a33      	ldr	r3, [r6, #32]
 80071e2:	0798      	lsls	r0, r3, #30
 80071e4:	d4f7      	bmi.n	80071d6 <HAL_RCC_OscConfig+0x2fa>
    if (pwrclkchanged == SET)
 80071e6:	2d00      	cmp	r5, #0
 80071e8:	f43f af4b 	beq.w	8007082 <HAL_RCC_OscConfig+0x1a6>
 80071ec:	e744      	b.n	8007078 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_DISABLE();
 80071ee:	4a34      	ldr	r2, [pc, #208]	; (80072c0 <HAL_RCC_OscConfig+0x3e4>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071f0:	4d34      	ldr	r5, [pc, #208]	; (80072c4 <HAL_RCC_OscConfig+0x3e8>)
        __HAL_RCC_HSI_DISABLE();
 80071f2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80071f4:	f7fe fa02 	bl	80055fc <HAL_GetTick>
 80071f8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071fa:	e004      	b.n	8007206 <HAL_RCC_OscConfig+0x32a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071fc:	f7fe f9fe 	bl	80055fc <HAL_GetTick>
 8007200:	1b80      	subs	r0, r0, r6
 8007202:	2802      	cmp	r0, #2
 8007204:	d89b      	bhi.n	800713e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007206:	682b      	ldr	r3, [r5, #0]
 8007208:	0799      	lsls	r1, r3, #30
 800720a:	d4f7      	bmi.n	80071fc <HAL_RCC_OscConfig+0x320>
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	e6a7      	b.n	8006f60 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007210:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007214:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007226:	601a      	str	r2, [r3, #0]
 8007228:	e689      	b.n	8006f3e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800722a:	f042 0204 	orr.w	r2, r2, #4
 800722e:	621a      	str	r2, [r3, #32]
 8007230:	6a1a      	ldr	r2, [r3, #32]
 8007232:	f042 0201 	orr.w	r2, r2, #1
 8007236:	621a      	str	r2, [r3, #32]
 8007238:	e70d      	b.n	8007056 <HAL_RCC_OscConfig+0x17a>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800723a:	2801      	cmp	r0, #1
 800723c:	f43f af4d 	beq.w	80070da <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 8007240:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007242:	6a22      	ldr	r2, [r4, #32]
 8007244:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8007248:	4291      	cmp	r1, r2
 800724a:	f47f af45 	bne.w	80070d8 <HAL_RCC_OscConfig+0x1fc>
 800724e:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007250:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 8007254:	1a18      	subs	r0, r3, r0
 8007256:	bf18      	it	ne
 8007258:	2001      	movne	r0, #1
 800725a:	e73e      	b.n	80070da <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_PLL_DISABLE();
 800725c:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 800725e:	f7fe f9cd 	bl	80055fc <HAL_GetTick>
 8007262:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007264:	e005      	b.n	8007272 <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007266:	f7fe f9c9 	bl	80055fc <HAL_GetTick>
 800726a:	1b80      	subs	r0, r0, r6
 800726c:	2802      	cmp	r0, #2
 800726e:	f63f af66 	bhi.w	800713e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007272:	682b      	ldr	r3, [r5, #0]
 8007274:	0199      	lsls	r1, r3, #6
 8007276:	d4f6      	bmi.n	8007266 <HAL_RCC_OscConfig+0x38a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007278:	6a22      	ldr	r2, [r4, #32]
 800727a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800727e:	d105      	bne.n	800728c <HAL_RCC_OscConfig+0x3b0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007280:	686b      	ldr	r3, [r5, #4]
 8007282:	68a1      	ldr	r1, [r4, #8]
 8007284:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007288:	430b      	orrs	r3, r1
 800728a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800728c:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800728e:	4b0d      	ldr	r3, [pc, #52]	; (80072c4 <HAL_RCC_OscConfig+0x3e8>)
 8007290:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007292:	6859      	ldr	r1, [r3, #4]
 8007294:	4302      	orrs	r2, r0
 8007296:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 800729a:	480b      	ldr	r0, [pc, #44]	; (80072c8 <HAL_RCC_OscConfig+0x3ec>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800729c:	430a      	orrs	r2, r1
 800729e:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80072a0:	6005      	str	r5, [r0, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072a2:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 80072a4:	f7fe f9aa 	bl	80055fc <HAL_GetTick>
 80072a8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072aa:	e005      	b.n	80072b8 <HAL_RCC_OscConfig+0x3dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072ac:	f7fe f9a6 	bl	80055fc <HAL_GetTick>
 80072b0:	1b40      	subs	r0, r0, r5
 80072b2:	2802      	cmp	r0, #2
 80072b4:	f63f af43 	bhi.w	800713e <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	019a      	lsls	r2, r3, #6
 80072bc:	d5f6      	bpl.n	80072ac <HAL_RCC_OscConfig+0x3d0>
 80072be:	e6fd      	b.n	80070bc <HAL_RCC_OscConfig+0x1e0>
 80072c0:	42420000 	.word	0x42420000
 80072c4:	40021000 	.word	0x40021000
 80072c8:	42420060 	.word	0x42420060

080072cc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80072cc:	b178      	cbz	r0, 80072ee <HAL_RCC_ClockConfig+0x22>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072ce:	4a5d      	ldr	r2, [pc, #372]	; (8007444 <HAL_RCC_ClockConfig+0x178>)
 80072d0:	6813      	ldr	r3, [r2, #0]
 80072d2:	f003 0307 	and.w	r3, r3, #7
 80072d6:	428b      	cmp	r3, r1
 80072d8:	d20b      	bcs.n	80072f2 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072da:	6813      	ldr	r3, [r2, #0]
 80072dc:	f023 0307 	bic.w	r3, r3, #7
 80072e0:	430b      	orrs	r3, r1
 80072e2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072e4:	6813      	ldr	r3, [r2, #0]
 80072e6:	f003 0307 	and.w	r3, r3, #7
 80072ea:	428b      	cmp	r3, r1
 80072ec:	d001      	beq.n	80072f2 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 80072ee:	2001      	movs	r0, #1
}
 80072f0:	4770      	bx	lr
{
 80072f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072f6:	6803      	ldr	r3, [r0, #0]
{
 80072f8:	b086      	sub	sp, #24
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072fa:	079d      	lsls	r5, r3, #30
 80072fc:	d514      	bpl.n	8007328 <HAL_RCC_ClockConfig+0x5c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072fe:	075c      	lsls	r4, r3, #29
 8007300:	d504      	bpl.n	800730c <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007302:	4c51      	ldr	r4, [pc, #324]	; (8007448 <HAL_RCC_ClockConfig+0x17c>)
 8007304:	6862      	ldr	r2, [r4, #4]
 8007306:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800730a:	6062      	str	r2, [r4, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800730c:	071a      	lsls	r2, r3, #28
 800730e:	d504      	bpl.n	800731a <HAL_RCC_ClockConfig+0x4e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007310:	4c4d      	ldr	r4, [pc, #308]	; (8007448 <HAL_RCC_ClockConfig+0x17c>)
 8007312:	6862      	ldr	r2, [r4, #4]
 8007314:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8007318:	6062      	str	r2, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800731a:	4c4b      	ldr	r4, [pc, #300]	; (8007448 <HAL_RCC_ClockConfig+0x17c>)
 800731c:	6885      	ldr	r5, [r0, #8]
 800731e:	6862      	ldr	r2, [r4, #4]
 8007320:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007324:	432a      	orrs	r2, r5
 8007326:	6062      	str	r2, [r4, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007328:	07db      	lsls	r3, r3, #31
 800732a:	4604      	mov	r4, r0
 800732c:	460d      	mov	r5, r1
 800732e:	d520      	bpl.n	8007372 <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007330:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007332:	4b45      	ldr	r3, [pc, #276]	; (8007448 <HAL_RCC_ClockConfig+0x17c>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007334:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007336:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007338:	d06f      	beq.n	800741a <HAL_RCC_ClockConfig+0x14e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800733a:	2a02      	cmp	r2, #2
 800733c:	d07e      	beq.n	800743c <HAL_RCC_ClockConfig+0x170>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800733e:	0798      	lsls	r0, r3, #30
 8007340:	d527      	bpl.n	8007392 <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007342:	4e41      	ldr	r6, [pc, #260]	; (8007448 <HAL_RCC_ClockConfig+0x17c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007344:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007348:	6873      	ldr	r3, [r6, #4]
 800734a:	f023 0303 	bic.w	r3, r3, #3
 800734e:	4313      	orrs	r3, r2
 8007350:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8007352:	f7fe f953 	bl	80055fc <HAL_GetTick>
 8007356:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007358:	e004      	b.n	8007364 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800735a:	f7fe f94f 	bl	80055fc <HAL_GetTick>
 800735e:	1bc0      	subs	r0, r0, r7
 8007360:	4540      	cmp	r0, r8
 8007362:	d869      	bhi.n	8007438 <HAL_RCC_ClockConfig+0x16c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007364:	6873      	ldr	r3, [r6, #4]
 8007366:	6862      	ldr	r2, [r4, #4]
 8007368:	f003 030c 	and.w	r3, r3, #12
 800736c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007370:	d1f3      	bne.n	800735a <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007372:	4a34      	ldr	r2, [pc, #208]	; (8007444 <HAL_RCC_ClockConfig+0x178>)
 8007374:	6813      	ldr	r3, [r2, #0]
 8007376:	f003 0307 	and.w	r3, r3, #7
 800737a:	42ab      	cmp	r3, r5
 800737c:	d90d      	bls.n	800739a <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800737e:	6813      	ldr	r3, [r2, #0]
 8007380:	f023 0307 	bic.w	r3, r3, #7
 8007384:	432b      	orrs	r3, r5
 8007386:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007388:	6813      	ldr	r3, [r2, #0]
 800738a:	f003 0307 	and.w	r3, r3, #7
 800738e:	42ab      	cmp	r3, r5
 8007390:	d003      	beq.n	800739a <HAL_RCC_ClockConfig+0xce>
    return HAL_ERROR;
 8007392:	2001      	movs	r0, #1
}
 8007394:	b006      	add	sp, #24
 8007396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800739a:	6823      	ldr	r3, [r4, #0]
 800739c:	0759      	lsls	r1, r3, #29
 800739e:	d506      	bpl.n	80073ae <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073a0:	4929      	ldr	r1, [pc, #164]	; (8007448 <HAL_RCC_ClockConfig+0x17c>)
 80073a2:	68e0      	ldr	r0, [r4, #12]
 80073a4:	684a      	ldr	r2, [r1, #4]
 80073a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073aa:	4302      	orrs	r2, r0
 80073ac:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073ae:	071a      	lsls	r2, r3, #28
 80073b0:	d507      	bpl.n	80073c2 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80073b2:	4a25      	ldr	r2, [pc, #148]	; (8007448 <HAL_RCC_ClockConfig+0x17c>)
 80073b4:	6921      	ldr	r1, [r4, #16]
 80073b6:	6853      	ldr	r3, [r2, #4]
 80073b8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80073bc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80073c0:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80073c2:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80073c6:	4b21      	ldr	r3, [pc, #132]	; (800744c <HAL_RCC_ClockConfig+0x180>)
 80073c8:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80073ca:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80073ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80073d0:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 80073d4:	491c      	ldr	r1, [pc, #112]	; (8007448 <HAL_RCC_ClockConfig+0x17c>)
 80073d6:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80073d8:	f002 030c 	and.w	r3, r2, #12
 80073dc:	2b08      	cmp	r3, #8
 80073de:	d11a      	bne.n	8007416 <HAL_RCC_ClockConfig+0x14a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80073e0:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80073e4:	4423      	add	r3, r4
 80073e6:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80073ea:	03d3      	lsls	r3, r2, #15
 80073ec:	d418      	bmi.n	8007420 <HAL_RCC_ClockConfig+0x154>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80073ee:	4b18      	ldr	r3, [pc, #96]	; (8007450 <HAL_RCC_ClockConfig+0x184>)
 80073f0:	fb03 f300 	mul.w	r3, r3, r0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80073f4:	4a14      	ldr	r2, [pc, #80]	; (8007448 <HAL_RCC_ClockConfig+0x17c>)
 80073f6:	4817      	ldr	r0, [pc, #92]	; (8007454 <HAL_RCC_ClockConfig+0x188>)
 80073f8:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 80073fa:	4917      	ldr	r1, [pc, #92]	; (8007458 <HAL_RCC_ClockConfig+0x18c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80073fc:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007400:	5c80      	ldrb	r0, [r0, r2]
 8007402:	4a16      	ldr	r2, [pc, #88]	; (800745c <HAL_RCC_ClockConfig+0x190>)
 8007404:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8007406:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007408:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 800740a:	f7fe f8b5 	bl	8005578 <HAL_InitTick>
  return HAL_OK;
 800740e:	2000      	movs	r0, #0
}
 8007410:	b006      	add	sp, #24
 8007412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSE_VALUE;
 8007416:	4b12      	ldr	r3, [pc, #72]	; (8007460 <HAL_RCC_ClockConfig+0x194>)
 8007418:	e7ec      	b.n	80073f4 <HAL_RCC_ClockConfig+0x128>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800741a:	039f      	lsls	r7, r3, #14
 800741c:	d491      	bmi.n	8007342 <HAL_RCC_ClockConfig+0x76>
 800741e:	e7b8      	b.n	8007392 <HAL_RCC_ClockConfig+0xc6>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007420:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007422:	4b0f      	ldr	r3, [pc, #60]	; (8007460 <HAL_RCC_ClockConfig+0x194>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007424:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007428:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800742c:	4422      	add	r2, r4
 800742e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007432:	fbb3 f3f2 	udiv	r3, r3, r2
 8007436:	e7dd      	b.n	80073f4 <HAL_RCC_ClockConfig+0x128>
        return HAL_TIMEOUT;
 8007438:	2003      	movs	r0, #3
 800743a:	e7ab      	b.n	8007394 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800743c:	019e      	lsls	r6, r3, #6
 800743e:	d480      	bmi.n	8007342 <HAL_RCC_ClockConfig+0x76>
 8007440:	e7a7      	b.n	8007392 <HAL_RCC_ClockConfig+0xc6>
 8007442:	bf00      	nop
 8007444:	40022000 	.word	0x40022000
 8007448:	40021000 	.word	0x40021000
 800744c:	0800d75c 	.word	0x0800d75c
 8007450:	003d0900 	.word	0x003d0900
 8007454:	0800e3dc 	.word	0x0800e3dc
 8007458:	20000040 	.word	0x20000040
 800745c:	20000038 	.word	0x20000038
 8007460:	007a1200 	.word	0x007a1200

08007464 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007464:	4b04      	ldr	r3, [pc, #16]	; (8007478 <HAL_RCC_GetPCLK1Freq+0x14>)
 8007466:	4905      	ldr	r1, [pc, #20]	; (800747c <HAL_RCC_GetPCLK1Freq+0x18>)
 8007468:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 800746a:	4a05      	ldr	r2, [pc, #20]	; (8007480 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800746c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007470:	5ccb      	ldrb	r3, [r1, r3]
 8007472:	6810      	ldr	r0, [r2, #0]
}
 8007474:	40d8      	lsrs	r0, r3
 8007476:	4770      	bx	lr
 8007478:	40021000 	.word	0x40021000
 800747c:	0800e3ec 	.word	0x0800e3ec
 8007480:	20000038 	.word	0x20000038

08007484 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007484:	4b04      	ldr	r3, [pc, #16]	; (8007498 <HAL_RCC_GetPCLK2Freq+0x14>)
 8007486:	4905      	ldr	r1, [pc, #20]	; (800749c <HAL_RCC_GetPCLK2Freq+0x18>)
 8007488:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 800748a:	4a05      	ldr	r2, [pc, #20]	; (80074a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800748c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007490:	5ccb      	ldrb	r3, [r1, r3]
 8007492:	6810      	ldr	r0, [r2, #0]
}
 8007494:	40d8      	lsrs	r0, r3
 8007496:	4770      	bx	lr
 8007498:	40021000 	.word	0x40021000
 800749c:	0800e3ec 	.word	0x0800e3ec
 80074a0:	20000038 	.word	0x20000038

080074a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074a8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80074aa:	6800      	ldr	r0, [r0, #0]
{
 80074ac:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80074ae:	07c5      	lsls	r5, r0, #31
 80074b0:	d52a      	bpl.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074b2:	4b3a      	ldr	r3, [pc, #232]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80074b4:	69da      	ldr	r2, [r3, #28]
 80074b6:	00d1      	lsls	r1, r2, #3
 80074b8:	d53d      	bpl.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074ba:	4b39      	ldr	r3, [pc, #228]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus       pwrclkchanged = RESET;
 80074bc:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	05d2      	lsls	r2, r2, #23
 80074c2:	d546      	bpl.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80074c4:	4935      	ldr	r1, [pc, #212]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80074c6:	6860      	ldr	r0, [r4, #4]
 80074c8:	6a0a      	ldr	r2, [r1, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80074ca:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 80074ce:	d00f      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 80074d0:	f400 7340 	and.w	r3, r0, #768	; 0x300
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d00b      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80074d8:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074da:	2600      	movs	r6, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074dc:	6a0b      	ldr	r3, [r1, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80074de:	4a31      	ldr	r2, [pc, #196]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074e0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80074e4:	6017      	str	r7, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074e6:	6016      	str	r6, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80074e8:	6208      	str	r0, [r1, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80074ea:	07d8      	lsls	r0, r3, #31
 80074ec:	d445      	bmi.n	800757a <HAL_RCCEx_PeriphCLKConfig+0xd6>
 80074ee:	6860      	ldr	r0, [r4, #4]
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074f0:	4a2a      	ldr	r2, [pc, #168]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80074f2:	6a13      	ldr	r3, [r2, #32]
 80074f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074f8:	4303      	orrs	r3, r0
 80074fa:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80074fc:	b11d      	cbz	r5, 8007506 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074fe:	69d3      	ldr	r3, [r2, #28]
 8007500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007504:	61d3      	str	r3, [r2, #28]
 8007506:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007508:	0783      	lsls	r3, r0, #30
 800750a:	d506      	bpl.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800750c:	4a23      	ldr	r2, [pc, #140]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800750e:	68a1      	ldr	r1, [r4, #8]
 8007510:	6853      	ldr	r3, [r2, #4]
 8007512:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007516:	430b      	orrs	r3, r1
 8007518:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800751a:	f010 0010 	ands.w	r0, r0, #16
 800751e:	d007      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007520:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007522:	4a1e      	ldr	r2, [pc, #120]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8007524:	68e1      	ldr	r1, [r4, #12]
 8007526:	6853      	ldr	r3, [r2, #4]
 8007528:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800752c:	430b      	orrs	r3, r1
 800752e:	6053      	str	r3, [r2, #4]
}
 8007530:	b002      	add	sp, #8
 8007532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8007536:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8007538:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800753a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800753e:	61da      	str	r2, [r3, #28]
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007546:	9301      	str	r3, [sp, #4]
 8007548:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800754a:	4b15      	ldr	r3, [pc, #84]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	05d2      	lsls	r2, r2, #23
 8007550:	d4b8      	bmi.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007552:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007554:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800755a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800755c:	f7fe f84e 	bl	80055fc <HAL_GetTick>
 8007560:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007562:	6833      	ldr	r3, [r6, #0]
 8007564:	05db      	lsls	r3, r3, #23
 8007566:	d4ad      	bmi.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007568:	f7fe f848 	bl	80055fc <HAL_GetTick>
 800756c:	1bc0      	subs	r0, r0, r7
 800756e:	2864      	cmp	r0, #100	; 0x64
 8007570:	d9f7      	bls.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8007572:	2003      	movs	r0, #3
}
 8007574:	b002      	add	sp, #8
 8007576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800757a:	460e      	mov	r6, r1
        tickstart = HAL_GetTick();
 800757c:	f7fe f83e 	bl	80055fc <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007580:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8007584:	4680      	mov	r8, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007586:	6a33      	ldr	r3, [r6, #32]
 8007588:	079a      	lsls	r2, r3, #30
 800758a:	d4b0      	bmi.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800758c:	f7fe f836 	bl	80055fc <HAL_GetTick>
 8007590:	eba0 0008 	sub.w	r0, r0, r8
 8007594:	42b8      	cmp	r0, r7
 8007596:	d9f6      	bls.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007598:	e7eb      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0xce>
 800759a:	bf00      	nop
 800759c:	40021000 	.word	0x40021000
 80075a0:	40007000 	.word	0x40007000
 80075a4:	42420440 	.word	0x42420440

080075a8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075a8:	2800      	cmp	r0, #0
 80075aa:	d036      	beq.n	800761a <HAL_TIM_Base_Init+0x72>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075ac:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80075b0:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80075b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80075b6:	4604      	mov	r4, r0
 80075b8:	b30b      	cbz	r3, 80075fe <HAL_TIM_Base_Init+0x56>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075ba:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075bc:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075be:	4e20      	ldr	r6, [pc, #128]	; (8007640 <HAL_TIM_Base_Init+0x98>)
  htim->State = HAL_TIM_STATE_BUSY;
 80075c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075c4:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 80075c6:	6813      	ldr	r3, [r2, #0]
 80075c8:	69a5      	ldr	r5, [r4, #24]
 80075ca:	68e0      	ldr	r0, [r4, #12]
 80075cc:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075ce:	d026      	beq.n	800761e <HAL_TIM_Base_Init+0x76>
 80075d0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80075d4:	d018      	beq.n	8007608 <HAL_TIM_Base_Init+0x60>
 80075d6:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80075da:	42b2      	cmp	r2, r6
 80075dc:	d014      	beq.n	8007608 <HAL_TIM_Base_Init+0x60>
 80075de:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80075e2:	42b2      	cmp	r2, r6
 80075e4:	d010      	beq.n	8007608 <HAL_TIM_Base_Init+0x60>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075ea:	432b      	orrs	r3, r5

  TIMx->CR1 = tmpcr1;
 80075ec:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075ee:	62d0      	str	r0, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075f0:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075f2:	2301      	movs	r3, #1
  return HAL_OK;
 80075f4:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 80075f6:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 80075f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80075fc:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80075fe:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007602:	f7fb f9e7 	bl	80029d4 <HAL_TIM_Base_MspInit>
 8007606:	e7d8      	b.n	80075ba <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 8007608:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800760a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800760e:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007610:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007616:	4333      	orrs	r3, r6
 8007618:	e7e5      	b.n	80075e6 <HAL_TIM_Base_Init+0x3e>
    return HAL_ERROR;
 800761a:	2001      	movs	r0, #1
}
 800761c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800761e:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007624:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007626:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800762c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800762e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007632:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8007634:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007636:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007638:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800763a:	6963      	ldr	r3, [r4, #20]
 800763c:	6313      	str	r3, [r2, #48]	; 0x30
 800763e:	e7d8      	b.n	80075f2 <HAL_TIM_Base_Init+0x4a>
 8007640:	40012c00 	.word	0x40012c00

08007644 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007644:	6803      	ldr	r3, [r0, #0]
 8007646:	68da      	ldr	r2, [r3, #12]
 8007648:	f042 0201 	orr.w	r2, r2, #1
 800764c:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800764e:	689a      	ldr	r2, [r3, #8]
 8007650:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007654:	2a06      	cmp	r2, #6
 8007656:	d003      	beq.n	8007660 <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	f042 0201 	orr.w	r2, r2, #1
 800765e:	601a      	str	r2, [r3, #0]
}
 8007660:	2000      	movs	r0, #0
 8007662:	4770      	bx	lr

08007664 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007664:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007668:	2b01      	cmp	r3, #1
 800766a:	d05a      	beq.n	8007722 <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 800766c:	2202      	movs	r2, #2
{
 800766e:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8007670:	2501      	movs	r5, #1
  tmpsmcr = htim->Instance->SMCR;
 8007672:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007674:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007678:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800767a:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800767c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8007680:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8007684:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 8007686:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 800768a:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800768c:	d074      	beq.n	8007778 <HAL_TIM_ConfigClockSource+0x114>
 800768e:	d94a      	bls.n	8007726 <HAL_TIM_ConfigClockSource+0xc2>
 8007690:	2c60      	cmp	r4, #96	; 0x60
 8007692:	d02d      	beq.n	80076f0 <HAL_TIM_ConfigClockSource+0x8c>
 8007694:	d956      	bls.n	8007744 <HAL_TIM_ConfigClockSource+0xe0>
 8007696:	2c70      	cmp	r4, #112	; 0x70
 8007698:	d01a      	beq.n	80076d0 <HAL_TIM_ConfigClockSource+0x6c>
 800769a:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 800769e:	d10e      	bne.n	80076be <HAL_TIM_ConfigClockSource+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076a0:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 80076a4:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80076a6:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076a8:	432a      	orrs	r2, r5
 80076aa:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076ae:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076b2:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076b4:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076bc:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 80076be:	2300      	movs	r3, #0
}
 80076c0:	bcf0      	pop	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_READY;
 80076c2:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 80076c4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80076c8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  return HAL_OK;
 80076cc:	4618      	mov	r0, r3
}
 80076ce:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076d0:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 80076d4:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80076d6:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076d8:	432a      	orrs	r2, r5
 80076da:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076de:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076e2:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80076e4:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80076e6:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076e8:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80076ec:	609a      	str	r2, [r3, #8]
      break;
 80076ee:	e7e6      	b.n	80076be <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076f0:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076f2:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076f4:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076f8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076fa:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076fc:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80076fe:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007700:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007704:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007708:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800770c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8007710:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8007712:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8007714:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007716:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800771a:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800771e:	609a      	str	r2, [r3, #8]
 8007720:	e7cd      	b.n	80076be <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8007722:	2002      	movs	r0, #2
}
 8007724:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8007726:	2c10      	cmp	r4, #16
 8007728:	d004      	beq.n	8007734 <HAL_TIM_ConfigClockSource+0xd0>
 800772a:	d93d      	bls.n	80077a8 <HAL_TIM_ConfigClockSource+0x144>
 800772c:	2c20      	cmp	r4, #32
 800772e:	d001      	beq.n	8007734 <HAL_TIM_ConfigClockSource+0xd0>
 8007730:	2c30      	cmp	r4, #48	; 0x30
 8007732:	d1c4      	bne.n	80076be <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 8007734:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007736:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800773a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800773e:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 8007740:	609c      	str	r4, [r3, #8]
 8007742:	e7bc      	b.n	80076be <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8007744:	2c50      	cmp	r4, #80	; 0x50
 8007746:	d1ba      	bne.n	80076be <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8007748:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800774a:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800774c:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800774e:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007752:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007754:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007756:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007758:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800775c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007760:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8007764:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8007766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007768:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800776a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800776c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007770:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8007774:	609a      	str	r2, [r3, #8]
 8007776:	e7a2      	b.n	80076be <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8007778:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800777a:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800777c:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800777e:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007782:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007784:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007786:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007788:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800778c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007790:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8007794:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8007796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007798:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800779a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800779c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077a0:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80077a4:	609a      	str	r2, [r3, #8]
 80077a6:	e78a      	b.n	80076be <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80077a8:	2c00      	cmp	r4, #0
 80077aa:	d0c3      	beq.n	8007734 <HAL_TIM_ConfigClockSource+0xd0>
 80077ac:	e787      	b.n	80076be <HAL_TIM_ConfigClockSource+0x5a>
 80077ae:	bf00      	nop

080077b0 <HAL_TIM_PeriodElapsedCallback>:
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop

080077b4 <HAL_TIM_OC_DelayElapsedCallback>:
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop

080077b8 <HAL_TIM_IC_CaptureCallback>:
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop

080077bc <HAL_TIM_PWM_PulseFinishedCallback>:
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop

080077c0 <HAL_TIM_TriggerCallback>:
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop

080077c4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077c4:	6803      	ldr	r3, [r0, #0]
{
 80077c6:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077c8:	691a      	ldr	r2, [r3, #16]
{
 80077ca:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077cc:	0791      	lsls	r1, r2, #30
 80077ce:	d502      	bpl.n	80077d6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077d0:	68da      	ldr	r2, [r3, #12]
 80077d2:	0792      	lsls	r2, r2, #30
 80077d4:	d45f      	bmi.n	8007896 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077d6:	691a      	ldr	r2, [r3, #16]
 80077d8:	0750      	lsls	r0, r2, #29
 80077da:	d502      	bpl.n	80077e2 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077dc:	68da      	ldr	r2, [r3, #12]
 80077de:	0751      	lsls	r1, r2, #29
 80077e0:	d446      	bmi.n	8007870 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077e2:	691a      	ldr	r2, [r3, #16]
 80077e4:	0712      	lsls	r2, r2, #28
 80077e6:	d502      	bpl.n	80077ee <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077e8:	68da      	ldr	r2, [r3, #12]
 80077ea:	0710      	lsls	r0, r2, #28
 80077ec:	d42e      	bmi.n	800784c <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077ee:	691a      	ldr	r2, [r3, #16]
 80077f0:	06d2      	lsls	r2, r2, #27
 80077f2:	d502      	bpl.n	80077fa <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077f4:	68da      	ldr	r2, [r3, #12]
 80077f6:	06d0      	lsls	r0, r2, #27
 80077f8:	d418      	bmi.n	800782c <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077fa:	691a      	ldr	r2, [r3, #16]
 80077fc:	07d1      	lsls	r1, r2, #31
 80077fe:	d502      	bpl.n	8007806 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007800:	68da      	ldr	r2, [r3, #12]
 8007802:	07d2      	lsls	r2, r2, #31
 8007804:	d45d      	bmi.n	80078c2 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007806:	691a      	ldr	r2, [r3, #16]
 8007808:	0610      	lsls	r0, r2, #24
 800780a:	d502      	bpl.n	8007812 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800780c:	68da      	ldr	r2, [r3, #12]
 800780e:	0611      	lsls	r1, r2, #24
 8007810:	d45f      	bmi.n	80078d2 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007812:	691a      	ldr	r2, [r3, #16]
 8007814:	0652      	lsls	r2, r2, #25
 8007816:	d502      	bpl.n	800781e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007818:	68da      	ldr	r2, [r3, #12]
 800781a:	0650      	lsls	r0, r2, #25
 800781c:	d461      	bmi.n	80078e2 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800781e:	691a      	ldr	r2, [r3, #16]
 8007820:	0691      	lsls	r1, r2, #26
 8007822:	d502      	bpl.n	800782a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007824:	68da      	ldr	r2, [r3, #12]
 8007826:	0692      	lsls	r2, r2, #26
 8007828:	d443      	bmi.n	80078b2 <HAL_TIM_IRQHandler+0xee>
}
 800782a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800782c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007830:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007832:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007834:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8007836:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007838:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800783c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800783e:	d064      	beq.n	800790a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8007840:	f7ff ffba 	bl	80077b8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007844:	2200      	movs	r2, #0
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	7722      	strb	r2, [r4, #28]
 800784a:	e7d6      	b.n	80077fa <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800784c:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007850:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007852:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007854:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8007856:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007858:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800785a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800785c:	d152      	bne.n	8007904 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800785e:	f7ff ffa9 	bl	80077b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007862:	4620      	mov	r0, r4
 8007864:	f7ff ffaa 	bl	80077bc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007868:	2200      	movs	r2, #0
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	7722      	strb	r2, [r4, #28]
 800786e:	e7be      	b.n	80077ee <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007870:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007874:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007876:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007878:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800787a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800787c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007880:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007882:	d13c      	bne.n	80078fe <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007884:	f7ff ff96 	bl	80077b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007888:	4620      	mov	r0, r4
 800788a:	f7ff ff97 	bl	80077bc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800788e:	2200      	movs	r2, #0
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	7722      	strb	r2, [r4, #28]
 8007894:	e7a5      	b.n	80077e2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007896:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800789a:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800789c:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800789e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078a0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078a2:	079b      	lsls	r3, r3, #30
 80078a4:	d025      	beq.n	80078f2 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80078a6:	f7ff ff87 	bl	80077b8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078aa:	2200      	movs	r2, #0
 80078ac:	6823      	ldr	r3, [r4, #0]
 80078ae:	7722      	strb	r2, [r4, #28]
 80078b0:	e791      	b.n	80077d6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078b2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80078b6:	4620      	mov	r0, r4
}
 80078b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078bc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80078be:	f000 b84d 	b.w	800795c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078c2:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80078c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078c8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80078ca:	f7ff ff71 	bl	80077b0 <HAL_TIM_PeriodElapsedCallback>
 80078ce:	6823      	ldr	r3, [r4, #0]
 80078d0:	e799      	b.n	8007806 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80078d6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078d8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80078da:	f000 f841 	bl	8007960 <HAL_TIMEx_BreakCallback>
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	e797      	b.n	8007812 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80078e6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078e8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80078ea:	f7ff ff69 	bl	80077c0 <HAL_TIM_TriggerCallback>
 80078ee:	6823      	ldr	r3, [r4, #0]
 80078f0:	e795      	b.n	800781e <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078f2:	f7ff ff5f 	bl	80077b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078f6:	4620      	mov	r0, r4
 80078f8:	f7ff ff60 	bl	80077bc <HAL_TIM_PWM_PulseFinishedCallback>
 80078fc:	e7d5      	b.n	80078aa <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 80078fe:	f7ff ff5b 	bl	80077b8 <HAL_TIM_IC_CaptureCallback>
 8007902:	e7c4      	b.n	800788e <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8007904:	f7ff ff58 	bl	80077b8 <HAL_TIM_IC_CaptureCallback>
 8007908:	e7ae      	b.n	8007868 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800790a:	f7ff ff53 	bl	80077b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800790e:	4620      	mov	r0, r4
 8007910:	f7ff ff54 	bl	80077bc <HAL_TIM_PWM_PulseFinishedCallback>
 8007914:	e796      	b.n	8007844 <HAL_TIM_IRQHandler+0x80>
 8007916:	bf00      	nop

08007918 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007918:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800791c:	2a01      	cmp	r2, #1
 800791e:	d01a      	beq.n	8007956 <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007920:	2202      	movs	r2, #2
{
 8007922:	b4f0      	push	{r4, r5, r6, r7}
 8007924:	4603      	mov	r3, r0
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8007926:	2500      	movs	r5, #0
  htim->State = HAL_TIM_STATE_READY;
 8007928:	2601      	movs	r6, #1
  tmpcr2 = htim->Instance->CR2;
 800792a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800792c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8007930:	6860      	ldr	r0, [r4, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007932:	e9d1 2700 	ldrd	r2, r7, [r1]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007936:	f020 0170 	bic.w	r1, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800793a:	4311      	orrs	r1, r2
  tmpsmcr = htim->Instance->SMCR;
 800793c:	68a2      	ldr	r2, [r4, #8]

  return HAL_OK;
 800793e:	4628      	mov	r0, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007944:	433a      	orrs	r2, r7
  htim->Instance->CR2 = tmpcr2;
 8007946:	6061      	str	r1, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8007948:	60a2      	str	r2, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 800794a:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800794e:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
}
 8007952:	bcf0      	pop	{r4, r5, r6, r7}
 8007954:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007956:	2002      	movs	r0, #2
}
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop

0800795c <HAL_TIMEx_CommutCallback>:
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop

08007960 <HAL_TIMEx_BreakCallback>:
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop

08007964 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007964:	2800      	cmp	r0, #0
 8007966:	d05e      	beq.n	8007a26 <HAL_UART_Init+0xc2>
{
 8007968:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800796a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800796e:	4604      	mov	r4, r0
 8007970:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007974:	2b00      	cmp	r3, #0
 8007976:	d051      	beq.n	8007a1c <HAL_UART_Init+0xb8>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007978:	2224      	movs	r2, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800797a:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800797c:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8007980:	68da      	ldr	r2, [r3, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007982:	68e0      	ldr	r0, [r4, #12]
  __HAL_UART_DISABLE(huart);
 8007984:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007988:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800798a:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800798c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800798e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8007992:	4301      	orrs	r1, r0
 8007994:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8007996:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007998:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 800799c:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80079a0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80079a2:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80079a6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80079a8:	430a      	orrs	r2, r1
 80079aa:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079ac:	695a      	ldr	r2, [r3, #20]
 80079ae:	69a0      	ldr	r0, [r4, #24]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80079b0:	491f      	ldr	r1, [pc, #124]	; (8007a30 <HAL_UART_Init+0xcc>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80079b6:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 80079b8:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079ba:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 80079bc:	d035      	beq.n	8007a2a <HAL_UART_Init+0xc6>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80079be:	f7ff fd51 	bl	8007464 <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079c2:	6862      	ldr	r2, [r4, #4]
 80079c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80079c8:	0092      	lsls	r2, r2, #2
 80079ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80079ce:	fbb0 f0f2 	udiv	r0, r0, r2
 80079d2:	2264      	movs	r2, #100	; 0x64
 80079d4:	4d17      	ldr	r5, [pc, #92]	; (8007a34 <HAL_UART_Init+0xd0>)
 80079d6:	6823      	ldr	r3, [r4, #0]
 80079d8:	fba5 c100 	umull	ip, r1, r5, r0
 80079dc:	0949      	lsrs	r1, r1, #5
 80079de:	fb02 0211 	mls	r2, r2, r1, r0
 80079e2:	0112      	lsls	r2, r2, #4
 80079e4:	3232      	adds	r2, #50	; 0x32
 80079e6:	fba5 0202 	umull	r0, r2, r5, r2
 80079ea:	0109      	lsls	r1, r1, #4
 80079ec:	eb01 1252 	add.w	r2, r1, r2, lsr #5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f0:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80079f2:	2120      	movs	r1, #32
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079f4:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079f6:	691a      	ldr	r2, [r3, #16]
  return HAL_OK;
 80079f8:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a00:	695a      	ldr	r2, [r3, #20]
 8007a02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a06:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8007a08:	68da      	ldr	r2, [r3, #12]
 8007a0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a0e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a10:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007a12:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007a16:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8007a1a:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8007a1c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8007a20:	f7fb f812 	bl	8002a48 <HAL_UART_MspInit>
 8007a24:	e7a8      	b.n	8007978 <HAL_UART_Init+0x14>
    return HAL_ERROR;
 8007a26:	2001      	movs	r0, #1
}
 8007a28:	4770      	bx	lr
    pclk = HAL_RCC_GetPCLK2Freq();
 8007a2a:	f7ff fd2b 	bl	8007484 <HAL_RCC_GetPCLK2Freq>
 8007a2e:	e7c8      	b.n	80079c2 <HAL_UART_Init+0x5e>
 8007a30:	40013800 	.word	0x40013800
 8007a34:	51eb851f 	.word	0x51eb851f

08007a38 <HAL_UART_Receive_DMA>:
{
 8007a38:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a3a:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
{
 8007a3e:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a40:	2c20      	cmp	r4, #32
 8007a42:	d138      	bne.n	8007ab6 <HAL_UART_Receive_DMA+0x7e>
    if ((pData == NULL) || (Size == 0U))
 8007a44:	2900      	cmp	r1, #0
 8007a46:	d039      	beq.n	8007abc <HAL_UART_Receive_DMA+0x84>
 8007a48:	2a00      	cmp	r2, #0
 8007a4a:	d037      	beq.n	8007abc <HAL_UART_Receive_DMA+0x84>
    __HAL_LOCK(huart);
 8007a4c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d030      	beq.n	8007ab6 <HAL_UART_Receive_DMA+0x7e>
 8007a54:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a56:	2500      	movs	r5, #0
 8007a58:	4613      	mov	r3, r2
    __HAL_LOCK(huart);
 8007a5a:	2601      	movs	r6, #1
 8007a5c:	460a      	mov	r2, r1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a5e:	2122      	movs	r1, #34	; 0x22
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007a60:	6b40      	ldr	r0, [r0, #52]	; 0x34
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a62:	63e5      	str	r5, [r4, #60]	; 0x3c
    __HAL_LOCK(huart);
 8007a64:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a68:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007a6c:	4e15      	ldr	r6, [pc, #84]	; (8007ac4 <HAL_UART_Receive_DMA+0x8c>)
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007a6e:	4916      	ldr	r1, [pc, #88]	; (8007ac8 <HAL_UART_Receive_DMA+0x90>)
    huart->pRxBuffPtr = pData;
 8007a70:	62a2      	str	r2, [r4, #40]	; 0x28
    huart->RxXferSize = Size;
 8007a72:	85a3      	strh	r3, [r4, #44]	; 0x2c
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007a74:	6286      	str	r6, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007a76:	62c1      	str	r1, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007a78:	4e14      	ldr	r6, [pc, #80]	; (8007acc <HAL_UART_Receive_DMA+0x94>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007a7a:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferAbortCallback = NULL;
 8007a7c:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007a7e:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007a80:	3104      	adds	r1, #4
 8007a82:	f7fd fe75 	bl	8005770 <HAL_DMA_Start_IT>
    return HAL_OK;
 8007a86:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007a88:	6823      	ldr	r3, [r4, #0]
 8007a8a:	9501      	str	r5, [sp, #4]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	9201      	str	r2, [sp, #4]
 8007a90:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 8007a92:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007a96:	9201      	str	r2, [sp, #4]
 8007a98:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a9a:	68da      	ldr	r2, [r3, #12]
 8007a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007aa0:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa2:	695a      	ldr	r2, [r3, #20]
 8007aa4:	f042 0201 	orr.w	r2, r2, #1
 8007aa8:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aaa:	695a      	ldr	r2, [r3, #20]
 8007aac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ab0:	615a      	str	r2, [r3, #20]
}
 8007ab2:	b002      	add	sp, #8
 8007ab4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8007ab6:	2002      	movs	r0, #2
}
 8007ab8:	b002      	add	sp, #8
 8007aba:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8007abc:	2001      	movs	r0, #1
}
 8007abe:	b002      	add	sp, #8
 8007ac0:	bd70      	pop	{r4, r5, r6, pc}
 8007ac2:	bf00      	nop
 8007ac4:	08007ad5 	.word	0x08007ad5
 8007ac8:	08007b11 	.word	0x08007b11
 8007acc:	08007b21 	.word	0x08007b21

08007ad0 <HAL_UART_RxCpltCallback>:
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop

08007ad4 <UART_DMAReceiveCplt>:
{
 8007ad4:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ad6:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ad8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f013 0320 	ands.w	r3, r3, #32
 8007ae0:	d110      	bne.n	8007b04 <UART_DMAReceiveCplt+0x30>
    huart->RxState = HAL_UART_STATE_READY;
 8007ae2:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ae4:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 8007ae6:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ae8:	68d3      	ldr	r3, [r2, #12]
 8007aea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007aee:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007af0:	6953      	ldr	r3, [r2, #20]
 8007af2:	f023 0301 	bic.w	r3, r3, #1
 8007af6:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007af8:	6953      	ldr	r3, [r2, #20]
 8007afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007afe:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8007b00:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8007b04:	f7ff ffe4 	bl	8007ad0 <HAL_UART_RxCpltCallback>
}
 8007b08:	bd08      	pop	{r3, pc}
 8007b0a:	bf00      	nop

08007b0c <HAL_UART_RxHalfCpltCallback>:
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop

08007b10 <UART_DMARxHalfCplt>:
{
 8007b10:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8007b12:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007b14:	f7ff fffa 	bl	8007b0c <HAL_UART_RxHalfCpltCallback>
}
 8007b18:	bd08      	pop	{r3, pc}
 8007b1a:	bf00      	nop

08007b1c <HAL_UART_ErrorCallback>:
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop

08007b20 <UART_DMAError>:
{
 8007b20:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b22:	6a43      	ldr	r3, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	6950      	ldr	r0, [r2, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007b28:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
 8007b2c:	2921      	cmp	r1, #33	; 0x21
 8007b2e:	d01c      	beq.n	8007b6a <UART_DMAError+0x4a>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b30:	6950      	ldr	r0, [r2, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007b32:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 8007b36:	2922      	cmp	r1, #34	; 0x22
 8007b38:	d007      	beq.n	8007b4a <UART_DMAError+0x2a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007b3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8007b3c:	4618      	mov	r0, r3
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007b3e:	f042 0210 	orr.w	r2, r2, #16
 8007b42:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8007b44:	f7ff ffea 	bl	8007b1c <HAL_UART_ErrorCallback>
}
 8007b48:	bd08      	pop	{r3, pc}
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007b4a:	0641      	lsls	r1, r0, #25
 8007b4c:	d5f5      	bpl.n	8007b3a <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 8007b4e:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007b50:	2020      	movs	r0, #32
    huart->RxXferCount = 0x00U;
 8007b52:	85d9      	strh	r1, [r3, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b54:	68d1      	ldr	r1, [r2, #12]
 8007b56:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8007b5a:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b5c:	6951      	ldr	r1, [r2, #20]
 8007b5e:	f021 0101 	bic.w	r1, r1, #1
 8007b62:	6151      	str	r1, [r2, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8007b64:	f883 003a 	strb.w	r0, [r3, #58]	; 0x3a
 8007b68:	e7e7      	b.n	8007b3a <UART_DMAError+0x1a>
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007b6a:	0600      	lsls	r0, r0, #24
 8007b6c:	d5e0      	bpl.n	8007b30 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 8007b6e:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8007b70:	2020      	movs	r0, #32
    huart->TxXferCount = 0x00U;
 8007b72:	84d9      	strh	r1, [r3, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007b74:	68d1      	ldr	r1, [r2, #12]
 8007b76:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8007b7a:	60d1      	str	r1, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007b7c:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
 8007b80:	e7d6      	b.n	8007b30 <UART_DMAError+0x10>
 8007b82:	bf00      	nop

08007b84 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007b84:	b084      	sub	sp, #16
 8007b86:	a801      	add	r0, sp, #4
 8007b88:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8007b8c:	b004      	add	sp, #16
 8007b8e:	2000      	movs	r0, #0
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop

08007b94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007b94:	4602      	mov	r2, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8007b96:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8007b9a:	2000      	movs	r0, #0
  USBx->CNTR |= winterruptmask;
 8007b9c:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8007ba0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
}
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop

08007ba8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8007ba8:	f244 03ff 	movw	r3, #16639	; 0x40ff
{
 8007bac:	4602      	mov	r2, r0
  USBx->CNTR &= ~winterruptmask;
 8007bae:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40

  return HAL_OK;
}
 8007bb2:	2000      	movs	r0, #0
  USBx->CNTR &= ~winterruptmask;
 8007bb4:	400b      	ands	r3, r1
 8007bb6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
}
 8007bba:	4770      	bx	lr

08007bbc <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8007bbc:	2000      	movs	r0, #0
 8007bbe:	4770      	bx	lr

08007bc0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007bc0:	b084      	sub	sp, #16
 8007bc2:	b470      	push	{r4, r5, r6}
 8007bc4:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8007bc6:	2501      	movs	r5, #1

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8007bc8:	2000      	movs	r0, #0
  USBx->CNTR = USB_CNTR_FRES;
 8007bca:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
  USBx->CNTR = 0;
 8007bce:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8007bd2:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007bd6:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8007bda:	f8b4 6040 	ldrh.w	r6, [r4, #64]	; 0x40
{
 8007bde:	ad04      	add	r5, sp, #16
  USBx->CNTR |= winterruptmask;
 8007be0:	f446 463f 	orr.w	r6, r6, #48896	; 0xbf00
 8007be4:	f8a4 6040 	strh.w	r6, [r4, #64]	; 0x40
{
 8007be8:	e885 000e 	stmia.w	r5, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8007bec:	bc70      	pop	{r4, r5, r6}
 8007bee:	b004      	add	sp, #16
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop

08007bf4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007bf4:	b470      	push	{r4, r5, r6}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007bf6:	780d      	ldrb	r5, [r1, #0]
{
 8007bf8:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007bfa:	f830 4025 	ldrh.w	r4, [r0, r5, lsl #2]
 8007bfe:	4abc      	ldr	r2, [pc, #752]	; (8007ef0 <USB_ActivateEndpoint+0x2fc>)

  /* initialize Endpoint */
  switch (ep->type)
 8007c00:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007c02:	4022      	ands	r2, r4
  switch (ep->type)
 8007c04:	2803      	cmp	r0, #3
 8007c06:	f200 8142 	bhi.w	8007e8e <USB_ActivateEndpoint+0x29a>
 8007c0a:	e8df f000 	tbb	[pc, r0]
 8007c0e:	464e      	.short	0x464e
 8007c10:	4a02      	.short	0x4a02
  HAL_StatusTypeDef ret = HAL_OK;
 8007c12:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8007c14:	f248 0480 	movw	r4, #32896	; 0x8080
 8007c18:	4322      	orrs	r2, r4
 8007c1a:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007c1e:	780d      	ldrb	r5, [r1, #0]
 8007c20:	4eb4      	ldr	r6, [pc, #720]	; (8007ef4 <USB_ActivateEndpoint+0x300>)
 8007c22:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8007c26:	432c      	orrs	r4, r5
 8007c28:	4032      	ands	r2, r6
 8007c2a:	4322      	orrs	r2, r4
 8007c2c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  if (ep->doublebuffer == 0U)
 8007c30:	7b0a      	ldrb	r2, [r1, #12]
 8007c32:	2a00      	cmp	r2, #0
 8007c34:	d13d      	bne.n	8007cb2 <USB_ActivateEndpoint+0xbe>
 8007c36:	88cc      	ldrh	r4, [r1, #6]
 8007c38:	780a      	ldrb	r2, [r1, #0]
  {
    if (ep->is_in != 0U)
 8007c3a:	784d      	ldrb	r5, [r1, #1]
 8007c3c:	0864      	lsrs	r4, r4, #1
 8007c3e:	0064      	lsls	r4, r4, #1
 8007c40:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8007c44:	2d00      	cmp	r5, #0
 8007c46:	f000 80e8 	beq.w	8007e1a <USB_ActivateEndpoint+0x226>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007c4a:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8007c4e:	442a      	add	r2, r5
 8007c50:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c54:	780a      	ldrb	r2, [r1, #0]
 8007c56:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8007c5a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007c5e:	066d      	lsls	r5, r5, #25
 8007c60:	d50b      	bpl.n	8007c7a <USB_ActivateEndpoint+0x86>
 8007c62:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8007c66:	4026      	ands	r6, r4
 8007c68:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
 8007c6c:	f046 06c0 	orr.w	r6, r6, #192	; 0xc0
 8007c70:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8007c74:	780c      	ldrb	r4, [r1, #0]
 8007c76:	eb03 0484 	add.w	r4, r3, r4, lsl #2

      if (ep->type != EP_TYPE_ISOC)
 8007c7a:	78cb      	ldrb	r3, [r1, #3]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	f000 8120 	beq.w	8007ec2 <USB_ActivateEndpoint+0x2ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c82:	8822      	ldrh	r2, [r4, #0]
 8007c84:	4b9c      	ldr	r3, [pc, #624]	; (8007ef8 <USB_ActivateEndpoint+0x304>)
 8007c86:	4013      	ands	r3, r2
 8007c88:	f083 0320 	eor.w	r3, r3, #32
 8007c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c94:	8023      	strh	r3, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8007c96:	bc70      	pop	{r4, r5, r6}
 8007c98:	4770      	bx	lr
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007c9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8007c9e:	2000      	movs	r0, #0
      break;
 8007ca0:	e7b8      	b.n	8007c14 <USB_ActivateEndpoint+0x20>
      wEpRegVal |= USB_EP_INTERRUPT;
 8007ca2:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8007ca6:	2000      	movs	r0, #0
      break;
 8007ca8:	e7b4      	b.n	8007c14 <USB_ActivateEndpoint+0x20>
      wEpRegVal |= USB_EP_CONTROL;
 8007caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8007cae:	2000      	movs	r0, #0
      break;
 8007cb0:	e7b0      	b.n	8007c14 <USB_ActivateEndpoint+0x20>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007cb2:	780c      	ldrb	r4, [r1, #0]
 8007cb4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007cb8:	4032      	ands	r2, r6
 8007cba:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8007cbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007cc2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007cc6:	780a      	ldrb	r2, [r1, #0]
 8007cc8:	890c      	ldrh	r4, [r1, #8]
 8007cca:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8007cce:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8007cd2:	0864      	lsrs	r4, r4, #1
 8007cd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007cd8:	0064      	lsls	r4, r4, #1
 8007cda:	b2ad      	uxth	r5, r5
 8007cdc:	5354      	strh	r4, [r2, r5]
 8007cde:	780a      	ldrb	r2, [r1, #0]
 8007ce0:	894c      	ldrh	r4, [r1, #10]
 8007ce2:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8007ce6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8007cea:	0864      	lsrs	r4, r4, #1
 8007cec:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8007cf0:	0064      	lsls	r4, r4, #1
 8007cf2:	b2ad      	uxth	r5, r5
 8007cf4:	5354      	strh	r4, [r2, r5]
    if (ep->is_in == 0U)
 8007cf6:	784a      	ldrb	r2, [r1, #1]
 8007cf8:	2a00      	cmp	r2, #0
 8007cfa:	d142      	bne.n	8007d82 <USB_ActivateEndpoint+0x18e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cfc:	780a      	ldrb	r2, [r1, #0]
 8007cfe:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8007d02:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d06:	046d      	lsls	r5, r5, #17
 8007d08:	d50b      	bpl.n	8007d22 <USB_ActivateEndpoint+0x12e>
 8007d0a:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8007d0e:	4026      	ands	r6, r4
 8007d10:	f446 4640 	orr.w	r6, r6, #49152	; 0xc000
 8007d14:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8007d18:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8007d1c:	780c      	ldrb	r4, [r1, #0]
 8007d1e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d22:	8822      	ldrh	r2, [r4, #0]
 8007d24:	0656      	lsls	r6, r2, #25
 8007d26:	d50c      	bpl.n	8007d42 <USB_ActivateEndpoint+0x14e>
 8007d28:	8822      	ldrh	r2, [r4, #0]
 8007d2a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007d2e:	0512      	lsls	r2, r2, #20
 8007d30:	0d12      	lsrs	r2, r2, #20
 8007d32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d36:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8007d3a:	8022      	strh	r2, [r4, #0]
 8007d3c:	780c      	ldrb	r4, [r1, #0]
 8007d3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d42:	f248 0680 	movw	r6, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8007d46:	8822      	ldrh	r2, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d48:	4d6c      	ldr	r5, [pc, #432]	; (8007efc <USB_ActivateEndpoint+0x308>)
      PCD_TX_DTOG(USBx, ep->num);
 8007d4a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007d4e:	0512      	lsls	r2, r2, #20
 8007d50:	0d12      	lsrs	r2, r2, #20
 8007d52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d56:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8007d5a:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d5c:	780c      	ldrb	r4, [r1, #0]
 8007d5e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007d62:	402a      	ands	r2, r5
 8007d64:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8007d68:	4332      	orrs	r2, r6
 8007d6a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d6e:	7809      	ldrb	r1, [r1, #0]
 8007d70:	4a61      	ldr	r2, [pc, #388]	; (8007ef8 <USB_ActivateEndpoint+0x304>)
 8007d72:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
 8007d76:	4022      	ands	r2, r4
 8007d78:	4332      	orrs	r2, r6
 8007d7a:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
}
 8007d7e:	bc70      	pop	{r4, r5, r6}
 8007d80:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d82:	780a      	ldrb	r2, [r1, #0]
 8007d84:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8007d88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d8c:	046d      	lsls	r5, r5, #17
 8007d8e:	d50b      	bpl.n	8007da8 <USB_ActivateEndpoint+0x1b4>
 8007d90:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8007d94:	4026      	ands	r6, r4
 8007d96:	f446 4640 	orr.w	r6, r6, #49152	; 0xc000
 8007d9a:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8007d9e:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8007da2:	780c      	ldrb	r4, [r1, #0]
 8007da4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007da8:	8822      	ldrh	r2, [r4, #0]
 8007daa:	0652      	lsls	r2, r2, #25
 8007dac:	d50c      	bpl.n	8007dc8 <USB_ActivateEndpoint+0x1d4>
 8007dae:	8822      	ldrh	r2, [r4, #0]
 8007db0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007db4:	0512      	lsls	r2, r2, #20
 8007db6:	0d12      	lsrs	r2, r2, #20
 8007db8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007dbc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8007dc0:	8022      	strh	r2, [r4, #0]
 8007dc2:	780c      	ldrb	r4, [r1, #0]
 8007dc4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
      PCD_RX_DTOG(USBx, ep->num);
 8007dc8:	8822      	ldrh	r2, [r4, #0]
 8007dca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007dce:	0512      	lsls	r2, r2, #20
 8007dd0:	0d12      	lsrs	r2, r2, #20
 8007dd2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007dd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007dda:	8022      	strh	r2, [r4, #0]
      if (ep->type != EP_TYPE_ISOC)
 8007ddc:	78ca      	ldrb	r2, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007dde:	780c      	ldrb	r4, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 8007de0:	2a01      	cmp	r2, #1
 8007de2:	d061      	beq.n	8007ea8 <USB_ActivateEndpoint+0x2b4>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007de4:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8007de8:	4a43      	ldr	r2, [pc, #268]	; (8007ef8 <USB_ActivateEndpoint+0x304>)
 8007dea:	402a      	ands	r2, r5
 8007dec:	f082 0220 	eor.w	r2, r2, #32
 8007df0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007df4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007df8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007dfc:	7809      	ldrb	r1, [r1, #0]
}
 8007dfe:	bc70      	pop	{r4, r5, r6}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e00:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8007e04:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007e08:	0492      	lsls	r2, r2, #18
 8007e0a:	0c92      	lsrs	r2, r2, #18
 8007e0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e14:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
}
 8007e18:	4770      	bx	lr
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007e1a:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007e1e:	690d      	ldr	r5, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007e20:	4432      	add	r2, r6
 8007e22:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007e26:	780a      	ldrb	r2, [r1, #0]
 8007e28:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8007e2c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8007e30:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8007e34:	b2a4      	uxth	r4, r4
 8007e36:	b365      	cbz	r5, 8007e92 <USB_ActivateEndpoint+0x29e>
 8007e38:	2d3e      	cmp	r5, #62	; 0x3e
 8007e3a:	d84d      	bhi.n	8007ed8 <USB_ActivateEndpoint+0x2e4>
 8007e3c:	086e      	lsrs	r6, r5, #1
 8007e3e:	07ed      	lsls	r5, r5, #31
 8007e40:	bf48      	it	mi
 8007e42:	3601      	addmi	r6, #1
 8007e44:	02b6      	lsls	r6, r6, #10
 8007e46:	b2b6      	uxth	r6, r6
 8007e48:	5316      	strh	r6, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e4a:	780c      	ldrb	r4, [r1, #0]
 8007e4c:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8007e50:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8007e54:	046e      	lsls	r6, r5, #17
 8007e56:	d50e      	bpl.n	8007e76 <USB_ActivateEndpoint+0x282>
 8007e58:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007e5c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007e60:	0512      	lsls	r2, r2, #20
 8007e62:	0d12      	lsrs	r2, r2, #20
 8007e64:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007e68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e6c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8007e70:	780a      	ldrb	r2, [r1, #0]
 8007e72:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e76:	8811      	ldrh	r1, [r2, #0]
 8007e78:	4b20      	ldr	r3, [pc, #128]	; (8007efc <USB_ActivateEndpoint+0x308>)
}
 8007e7a:	bc70      	pop	{r4, r5, r6}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e7c:	400b      	ands	r3, r1
 8007e7e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8007e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e8a:	8013      	strh	r3, [r2, #0]
}
 8007e8c:	4770      	bx	lr
      ret = HAL_ERROR;
 8007e8e:	2001      	movs	r0, #1
 8007e90:	e6c0      	b.n	8007c14 <USB_ActivateEndpoint+0x20>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007e92:	5b15      	ldrh	r5, [r2, r4]
 8007e94:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8007e98:	042d      	lsls	r5, r5, #16
 8007e9a:	0c2d      	lsrs	r5, r5, #16
 8007e9c:	5315      	strh	r5, [r2, r4]
 8007e9e:	5b15      	ldrh	r5, [r2, r4]
 8007ea0:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8007ea4:	5315      	strh	r5, [r2, r4]
 8007ea6:	e7d0      	b.n	8007e4a <USB_ActivateEndpoint+0x256>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ea8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007eac:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007eb0:	0512      	lsls	r2, r2, #20
 8007eb2:	0d12      	lsrs	r2, r2, #20
 8007eb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007eb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007ebc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8007ec0:	e79c      	b.n	8007dfc <USB_ActivateEndpoint+0x208>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ec2:	8823      	ldrh	r3, [r4, #0]
 8007ec4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007ec8:	051b      	lsls	r3, r3, #20
 8007eca:	0d1b      	lsrs	r3, r3, #20
 8007ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ed4:	8023      	strh	r3, [r4, #0]
 8007ed6:	e752      	b.n	8007d7e <USB_ActivateEndpoint+0x18a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007ed8:	096e      	lsrs	r6, r5, #5
 8007eda:	06ed      	lsls	r5, r5, #27
 8007edc:	4d08      	ldr	r5, [pc, #32]	; (8007f00 <USB_ActivateEndpoint+0x30c>)
 8007ede:	bf08      	it	eq
 8007ee0:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8007ee4:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 8007ee8:	b2ad      	uxth	r5, r5
 8007eea:	5315      	strh	r5, [r2, r4]
 8007eec:	e7ad      	b.n	8007e4a <USB_ActivateEndpoint+0x256>
 8007eee:	bf00      	nop
 8007ef0:	ffff898f 	.word	0xffff898f
 8007ef4:	ffff8f8f 	.word	0xffff8f8f
 8007ef8:	ffff8fbf 	.word	0xffff8fbf
 8007efc:	ffffbf8f 	.word	0xffffbf8f
 8007f00:	ffff8000 	.word	0xffff8000

08007f04 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f04:	b430      	push	{r4, r5}
 8007f06:	780a      	ldrb	r2, [r1, #0]
  if (ep->doublebuffer == 0U)
 8007f08:	7b0d      	ldrb	r5, [r1, #12]
 8007f0a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8007f0e:	784c      	ldrb	r4, [r1, #1]
 8007f10:	bb15      	cbnz	r5, 8007f58 <USB_DeactivateEndpoint+0x54>
  {
    if (ep->is_in != 0U)
 8007f12:	2c00      	cmp	r4, #0
 8007f14:	f000 8099 	beq.w	800804a <USB_DeactivateEndpoint+0x146>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f18:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 8007f1c:	0664      	lsls	r4, r4, #25
 8007f1e:	d50e      	bpl.n	8007f3e <USB_DeactivateEndpoint+0x3a>
 8007f20:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007f24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f28:	051b      	lsls	r3, r3, #20
 8007f2a:	0d1b      	lsrs	r3, r3, #20
 8007f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f34:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8007f38:	780b      	ldrb	r3, [r1, #0]
 8007f3a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f3e:	881a      	ldrh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8007f40:	2000      	movs	r0, #0
 8007f42:	bc30      	pop	{r4, r5}
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f44:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007f48:	0512      	lsls	r2, r2, #20
 8007f4a:	0d12      	lsrs	r2, r2, #20
 8007f4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007f54:	801a      	strh	r2, [r3, #0]
}
 8007f56:	4770      	bx	lr
    if (ep->is_in == 0U)
 8007f58:	2c00      	cmp	r4, #0
 8007f5a:	d141      	bne.n	8007fe0 <USB_DeactivateEndpoint+0xdc>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f5c:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 8007f60:	0464      	lsls	r4, r4, #17
 8007f62:	d50e      	bpl.n	8007f82 <USB_DeactivateEndpoint+0x7e>
 8007f64:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007f68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f6c:	051b      	lsls	r3, r3, #20
 8007f6e:	0d1b      	lsrs	r3, r3, #20
 8007f70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f78:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8007f7c:	780b      	ldrb	r3, [r1, #0]
 8007f7e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f82:	881a      	ldrh	r2, [r3, #0]
 8007f84:	0655      	lsls	r5, r2, #25
 8007f86:	d50c      	bpl.n	8007fa2 <USB_DeactivateEndpoint+0x9e>
 8007f88:	881a      	ldrh	r2, [r3, #0]
 8007f8a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007f8e:	0512      	lsls	r2, r2, #20
 8007f90:	0d12      	lsrs	r2, r2, #20
 8007f92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f96:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8007f9a:	801a      	strh	r2, [r3, #0]
 8007f9c:	780b      	ldrb	r3, [r1, #0]
 8007f9e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007fa2:	f248 0580 	movw	r5, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8007fa6:	881a      	ldrh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007fa8:	4c3f      	ldr	r4, [pc, #252]	; (80080a8 <USB_DeactivateEndpoint+0x1a4>)
      PCD_TX_DTOG(USBx, ep->num);
 8007faa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007fae:	0512      	lsls	r2, r2, #20
 8007fb0:	0d12      	lsrs	r2, r2, #20
 8007fb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fb6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8007fba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007fbc:	780a      	ldrb	r2, [r1, #0]
 8007fbe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007fc2:	4023      	ands	r3, r4
 8007fc4:	432b      	orrs	r3, r5
 8007fc6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fca:	780a      	ldrb	r2, [r1, #0]
 8007fcc:	4b37      	ldr	r3, [pc, #220]	; (80080ac <USB_DeactivateEndpoint+0x1a8>)
 8007fce:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8007fd2:	400b      	ands	r3, r1
 8007fd4:	431d      	orrs	r5, r3
 8007fd6:	f820 5022 	strh.w	r5, [r0, r2, lsl #2]
}
 8007fda:	2000      	movs	r0, #0
 8007fdc:	bc30      	pop	{r4, r5}
 8007fde:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fe0:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 8007fe4:	0464      	lsls	r4, r4, #17
 8007fe6:	d50e      	bpl.n	8008006 <USB_DeactivateEndpoint+0x102>
 8007fe8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007fec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ff0:	051b      	lsls	r3, r3, #20
 8007ff2:	0d1b      	lsrs	r3, r3, #20
 8007ff4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ffc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8008000:	780b      	ldrb	r3, [r1, #0]
 8008002:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008006:	881a      	ldrh	r2, [r3, #0]
 8008008:	0652      	lsls	r2, r2, #25
 800800a:	d43e      	bmi.n	800808a <USB_DeactivateEndpoint+0x186>
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800800c:	f248 0580 	movw	r5, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8008010:	881a      	ldrh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008012:	4c26      	ldr	r4, [pc, #152]	; (80080ac <USB_DeactivateEndpoint+0x1a8>)
      PCD_RX_DTOG(USBx, ep->num);
 8008014:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008018:	0512      	lsls	r2, r2, #20
 800801a:	0d12      	lsrs	r2, r2, #20
 800801c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008020:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008024:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008026:	780a      	ldrb	r2, [r1, #0]
 8008028:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800802c:	4023      	ands	r3, r4
 800802e:	432b      	orrs	r3, r5
 8008030:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008034:	780a      	ldrb	r2, [r1, #0]
 8008036:	4b1c      	ldr	r3, [pc, #112]	; (80080a8 <USB_DeactivateEndpoint+0x1a4>)
 8008038:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 800803c:	400b      	ands	r3, r1
 800803e:	431d      	orrs	r5, r3
 8008040:	f820 5022 	strh.w	r5, [r0, r2, lsl #2]
}
 8008044:	2000      	movs	r0, #0
 8008046:	bc30      	pop	{r4, r5}
 8008048:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800804a:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 800804e:	0465      	lsls	r5, r4, #17
 8008050:	d50e      	bpl.n	8008070 <USB_DeactivateEndpoint+0x16c>
 8008052:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008056:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800805a:	051b      	lsls	r3, r3, #20
 800805c:	0d1b      	lsrs	r3, r3, #20
 800805e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008066:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800806a:	780b      	ldrb	r3, [r1, #0]
 800806c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008070:	881a      	ldrh	r2, [r3, #0]
}
 8008072:	2000      	movs	r0, #0
 8008074:	bc30      	pop	{r4, r5}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008076:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800807a:	0492      	lsls	r2, r2, #18
 800807c:	0c92      	lsrs	r2, r2, #18
 800807e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008082:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008086:	801a      	strh	r2, [r3, #0]
}
 8008088:	4770      	bx	lr
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800808a:	881a      	ldrh	r2, [r3, #0]
 800808c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008090:	0512      	lsls	r2, r2, #20
 8008092:	0d12      	lsrs	r2, r2, #20
 8008094:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008098:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800809c:	801a      	strh	r2, [r3, #0]
 800809e:	780b      	ldrb	r3, [r1, #0]
 80080a0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80080a4:	e7b2      	b.n	800800c <USB_DeactivateEndpoint+0x108>
 80080a6:	bf00      	nop
 80080a8:	ffffbf8f 	.word	0xffffbf8f
 80080ac:	ffff8fbf 	.word	0xffff8fbf

080080b0 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80080b0:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080b2:	784c      	ldrb	r4, [r1, #1]
 80080b4:	698b      	ldr	r3, [r1, #24]
 80080b6:	2c01      	cmp	r4, #1
 80080b8:	690a      	ldr	r2, [r1, #16]
 80080ba:	d05a      	beq.n	8008172 <USB_EPStartXfer+0xc2>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80080bc:	4293      	cmp	r3, r2
      ep->xfer_len -= len;
    }
    else
    {
      len = ep->xfer_len;
      ep->xfer_len = 0U;
 80080be:	bf98      	it	ls
 80080c0:	2600      	movls	r6, #0
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80080c2:	7b0d      	ldrb	r5, [r1, #12]
      ep->xfer_len -= len;
 80080c4:	bf88      	it	hi
 80080c6:	1a9e      	subhi	r6, r3, r2
 80080c8:	618e      	str	r6, [r1, #24]
 80080ca:	bf88      	it	hi
 80080cc:	4613      	movhi	r3, r2
 80080ce:	780a      	ldrb	r2, [r1, #0]
    if (ep->doublebuffer == 0U)
 80080d0:	bb15      	cbnz	r5, 8008118 <USB_EPStartXfer+0x68>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80080d2:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 80080d6:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 80080da:	0112      	lsls	r2, r2, #4
 80080dc:	442c      	add	r4, r5
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f000 80a8 	beq.w	8008234 <USB_EPStartXfer+0x184>
 80080e4:	2b3e      	cmp	r3, #62	; 0x3e
 80080e6:	f200 80c9 	bhi.w	800827c <USB_EPStartXfer+0x1cc>
 80080ea:	085d      	lsrs	r5, r3, #1
 80080ec:	07db      	lsls	r3, r3, #31
 80080ee:	bf48      	it	mi
 80080f0:	3501      	addmi	r5, #1
 80080f2:	02ad      	lsls	r5, r5, #10
 80080f4:	b2ad      	uxth	r5, r5
 80080f6:	52a5      	strh	r5, [r4, r2]
 80080f8:	780a      	ldrb	r2, [r1, #0]
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080fa:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 80080fe:	4b7d      	ldr	r3, [pc, #500]	; (80082f4 <USB_EPStartXfer+0x244>)
  }

  return HAL_OK;
}
 8008100:	bcf0      	pop	{r4, r5, r6, r7}
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008102:	400b      	ands	r3, r1
 8008104:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8008108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800810c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008110:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8008114:	2000      	movs	r0, #0
 8008116:	4770      	bx	lr
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008118:	2c00      	cmp	r4, #0
 800811a:	d1ee      	bne.n	80080fa <USB_EPStartXfer+0x4a>
 800811c:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8008120:	f200 4404 	addw	r4, r0, #1028	; 0x404
 8008124:	0112      	lsls	r2, r2, #4
 8008126:	442c      	add	r4, r5
 8008128:	2b00      	cmp	r3, #0
 800812a:	f040 80b3 	bne.w	8008294 <USB_EPStartXfer+0x1e4>
 800812e:	5aa5      	ldrh	r5, [r4, r2]
 8008130:	4e71      	ldr	r6, [pc, #452]	; (80082f8 <USB_EPStartXfer+0x248>)
 8008132:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8008136:	042d      	lsls	r5, r5, #16
 8008138:	0c2d      	lsrs	r5, r5, #16
 800813a:	52a5      	strh	r5, [r4, r2]
 800813c:	5aa5      	ldrh	r5, [r4, r2]
 800813e:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8008142:	52a5      	strh	r5, [r4, r2]
 8008144:	784c      	ldrb	r4, [r1, #1]
 8008146:	2c00      	cmp	r4, #0
 8008148:	f040 80af 	bne.w	80082aa <USB_EPStartXfer+0x1fa>
 800814c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8008150:	780a      	ldrb	r2, [r1, #0]
 8008152:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 8008156:	0112      	lsls	r2, r2, #4
 8008158:	441c      	add	r4, r3
 800815a:	5aa3      	ldrh	r3, [r4, r2]
 800815c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008160:	041b      	lsls	r3, r3, #16
 8008162:	0c1b      	lsrs	r3, r3, #16
 8008164:	52a3      	strh	r3, [r4, r2]
 8008166:	5aa3      	ldrh	r3, [r4, r2]
 8008168:	4333      	orrs	r3, r6
 800816a:	b29b      	uxth	r3, r3
 800816c:	52a3      	strh	r3, [r4, r2]
 800816e:	780a      	ldrb	r2, [r1, #0]
 8008170:	e7c3      	b.n	80080fa <USB_EPStartXfer+0x4a>
    if (ep->xfer_len > ep->maxpacket)
 8008172:	4293      	cmp	r3, r2
      ep->xfer_len -= len;
 8008174:	bf86      	itte	hi
 8008176:	1a9c      	subhi	r4, r3, r2
 8008178:	4613      	movhi	r3, r2
      ep->xfer_len = 0U;
 800817a:	2400      	movls	r4, #0
 800817c:	b29a      	uxth	r2, r3
    if (ep->doublebuffer == 0U)
 800817e:	7b0d      	ldrb	r5, [r1, #12]
 8008180:	3201      	adds	r2, #1
 8008182:	0856      	lsrs	r6, r2, #1
 8008184:	618c      	str	r4, [r1, #24]
 8008186:	b29b      	uxth	r3, r3
 8008188:	694a      	ldr	r2, [r1, #20]
 800818a:	f500 6780 	add.w	r7, r0, #1024	; 0x400
 800818e:	b36d      	cbz	r5, 80081ec <USB_EPStartXfer+0x13c>
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008190:	780d      	ldrb	r5, [r1, #0]
 8008192:	f830 4025 	ldrh.w	r4, [r0, r5, lsl #2]
 8008196:	012d      	lsls	r5, r5, #4
 8008198:	0664      	lsls	r4, r4, #25
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800819a:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800819e:	d555      	bpl.n	800824c <USB_EPStartXfer+0x19c>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80081a0:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 80081a4:	4464      	add	r4, ip
 80081a6:	5363      	strh	r3, [r4, r5]
        pmabuffer = ep->pmaaddr1;
 80081a8:	894c      	ldrh	r4, [r1, #10]
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80081aa:	eb07 0444 	add.w	r4, r7, r4, lsl #1

  for (i = n; i != 0U; i--)
 80081ae:	b13e      	cbz	r6, 80081c0 <USB_EPStartXfer+0x110>
 80081b0:	eb02 0346 	add.w	r3, r2, r6, lsl #1
 80081b4:	f832 5b02 	ldrh.w	r5, [r2], #2
 80081b8:	4293      	cmp	r3, r2
  {
    temp1 = *pBuf;
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
    *pdwVal = (uint16_t)temp2;
 80081ba:	f824 5b04 	strh.w	r5, [r4], #4
  for (i = n; i != 0U; i--)
 80081be:	d1f9      	bne.n	80081b4 <USB_EPStartXfer+0x104>
 80081c0:	780c      	ldrb	r4, [r1, #0]
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80081c2:	784b      	ldrb	r3, [r1, #1]
 80081c4:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d145      	bne.n	8008258 <USB_EPStartXfer+0x1a8>
 80081cc:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80081d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081d4:	051b      	lsls	r3, r3, #20
 80081d6:	0d1b      	lsrs	r3, r3, #20
 80081d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081e0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 80081e4:	780a      	ldrb	r2, [r1, #0]
 80081e6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80081ea:	e016      	b.n	800821a <USB_EPStartXfer+0x16a>
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80081ec:	88cc      	ldrh	r4, [r1, #6]
 80081ee:	eb07 0444 	add.w	r4, r7, r4, lsl #1
  for (i = n; i != 0U; i--)
 80081f2:	b13e      	cbz	r6, 8008204 <USB_EPStartXfer+0x154>
 80081f4:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80081f8:	f832 5b02 	ldrh.w	r5, [r2], #2
    *pdwVal = (uint16_t)temp2;
 80081fc:	f824 5b04 	strh.w	r5, [r4], #4
  for (i = n; i != 0U; i--)
 8008200:	42a6      	cmp	r6, r4
 8008202:	d1f9      	bne.n	80081f8 <USB_EPStartXfer+0x148>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008204:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8008208:	780c      	ldrb	r4, [r1, #0]
 800820a:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800820e:	442a      	add	r2, r5
 8008210:	0124      	lsls	r4, r4, #4
 8008212:	52a3      	strh	r3, [r4, r2]
 8008214:	780a      	ldrb	r2, [r1, #0]
 8008216:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800821a:	8811      	ldrh	r1, [r2, #0]
 800821c:	4b37      	ldr	r3, [pc, #220]	; (80082fc <USB_EPStartXfer+0x24c>)
}
 800821e:	2000      	movs	r0, #0
 8008220:	bcf0      	pop	{r4, r5, r6, r7}
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008222:	400b      	ands	r3, r1
 8008224:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8008228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800822c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008230:	8013      	strh	r3, [r2, #0]
}
 8008232:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008234:	5aa3      	ldrh	r3, [r4, r2]
 8008236:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800823a:	041b      	lsls	r3, r3, #16
 800823c:	0c1b      	lsrs	r3, r3, #16
 800823e:	52a3      	strh	r3, [r4, r2]
 8008240:	5aa3      	ldrh	r3, [r4, r2]
 8008242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008246:	52a3      	strh	r3, [r4, r2]
 8008248:	780a      	ldrb	r2, [r1, #0]
 800824a:	e756      	b.n	80080fa <USB_EPStartXfer+0x4a>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800824c:	f200 4404 	addw	r4, r0, #1028	; 0x404
 8008250:	4464      	add	r4, ip
 8008252:	5363      	strh	r3, [r4, r5]
        pmabuffer = ep->pmaaddr0;
 8008254:	890c      	ldrh	r4, [r1, #8]
 8008256:	e7a8      	b.n	80081aa <USB_EPStartXfer+0xfa>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8008258:	2b01      	cmp	r3, #1
 800825a:	d1de      	bne.n	800821a <USB_EPStartXfer+0x16a>
 800825c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8008260:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008264:	051b      	lsls	r3, r3, #20
 8008266:	0d1b      	lsrs	r3, r3, #20
 8008268:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800826c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008270:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8008274:	780a      	ldrb	r2, [r1, #0]
 8008276:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800827a:	e7ce      	b.n	800821a <USB_EPStartXfer+0x16a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800827c:	095d      	lsrs	r5, r3, #5
 800827e:	06df      	lsls	r7, r3, #27
 8008280:	4b1d      	ldr	r3, [pc, #116]	; (80082f8 <USB_EPStartXfer+0x248>)
 8008282:	bf08      	it	eq
 8008284:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8008288:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
 800828c:	b29b      	uxth	r3, r3
 800828e:	52a3      	strh	r3, [r4, r2]
 8008290:	780a      	ldrb	r2, [r1, #0]
 8008292:	e732      	b.n	80080fa <USB_EPStartXfer+0x4a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008294:	2b3e      	cmp	r3, #62	; 0x3e
 8008296:	d816      	bhi.n	80082c6 <USB_EPStartXfer+0x216>
 8008298:	085d      	lsrs	r5, r3, #1
 800829a:	07de      	lsls	r6, r3, #31
 800829c:	bf48      	it	mi
 800829e:	3501      	addmi	r5, #1
 80082a0:	02ad      	lsls	r5, r5, #10
 80082a2:	b2ad      	uxth	r5, r5
 80082a4:	52a5      	strh	r5, [r4, r2]
 80082a6:	784c      	ldrb	r4, [r1, #1]
 80082a8:	b1d4      	cbz	r4, 80082e0 <USB_EPStartXfer+0x230>
 80082aa:	2c01      	cmp	r4, #1
 80082ac:	780a      	ldrb	r2, [r1, #0]
 80082ae:	f47f af24 	bne.w	80080fa <USB_EPStartXfer+0x4a>
 80082b2:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 80082b6:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 80082ba:	0112      	lsls	r2, r2, #4
 80082bc:	b29b      	uxth	r3, r3
 80082be:	442c      	add	r4, r5
 80082c0:	52a3      	strh	r3, [r4, r2]
 80082c2:	780a      	ldrb	r2, [r1, #0]
 80082c4:	e719      	b.n	80080fa <USB_EPStartXfer+0x4a>
 80082c6:	095e      	lsrs	r6, r3, #5
 80082c8:	06dd      	lsls	r5, r3, #27
 80082ca:	4d0b      	ldr	r5, [pc, #44]	; (80082f8 <USB_EPStartXfer+0x248>)
 80082cc:	bf08      	it	eq
 80082ce:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80082d2:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 80082d6:	b2ad      	uxth	r5, r5
 80082d8:	52a5      	strh	r5, [r4, r2]
 80082da:	784c      	ldrb	r4, [r1, #1]
 80082dc:	2c00      	cmp	r4, #0
 80082de:	d1e4      	bne.n	80082aa <USB_EPStartXfer+0x1fa>
 80082e0:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 80082e4:	780b      	ldrb	r3, [r1, #0]
 80082e6:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 80082ea:	4422      	add	r2, r4
 80082ec:	011b      	lsls	r3, r3, #4
 80082ee:	52d5      	strh	r5, [r2, r3]
 80082f0:	780a      	ldrb	r2, [r1, #0]
 80082f2:	e702      	b.n	80080fa <USB_EPStartXfer+0x4a>
 80082f4:	ffffbf8f 	.word	0xffffbf8f
 80082f8:	ffff8000 	.word	0xffff8000
 80082fc:	ffff8fbf 	.word	0xffff8fbf

08008300 <USB_EPSetStall>:
  if (ep->is_in != 0U)
 8008300:	784b      	ldrb	r3, [r1, #1]
 8008302:	780a      	ldrb	r2, [r1, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008304:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
  if (ep->is_in != 0U)
 8008308:	b95b      	cbnz	r3, 8008322 <USB_EPSetStall+0x22>
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800830a:	4b0c      	ldr	r3, [pc, #48]	; (800833c <USB_EPSetStall+0x3c>)
 800830c:	400b      	ands	r3, r1
 800830e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800831a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800831e:	2000      	movs	r0, #0
 8008320:	4770      	bx	lr
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008322:	4b07      	ldr	r3, [pc, #28]	; (8008340 <USB_EPSetStall+0x40>)
 8008324:	400b      	ands	r3, r1
 8008326:	f083 0310 	eor.w	r3, r3, #16
 800832a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800832e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008332:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8008336:	2000      	movs	r0, #0
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	ffffbf8f 	.word	0xffffbf8f
 8008340:	ffff8fbf 	.word	0xffff8fbf

08008344 <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 8008344:	7b0b      	ldrb	r3, [r1, #12]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d139      	bne.n	80083be <USB_EPClearStall+0x7a>
{
 800834a:	b410      	push	{r4}
 800834c:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in != 0U)
 800834e:	784c      	ldrb	r4, [r1, #1]
 8008350:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8008354:	b314      	cbz	r4, 800839c <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008356:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800835a:	0652      	lsls	r2, r2, #25
 800835c:	d50b      	bpl.n	8008376 <USB_EPClearStall+0x32>
 800835e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8008362:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008366:	0512      	lsls	r2, r2, #20
 8008368:	0d12      	lsrs	r2, r2, #20
 800836a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800836e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8008372:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8008376:	78cb      	ldrb	r3, [r1, #3]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d01d      	beq.n	80083b8 <USB_EPClearStall+0x74>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800837c:	780a      	ldrb	r2, [r1, #0]
 800837e:	4b19      	ldr	r3, [pc, #100]	; (80083e4 <USB_EPClearStall+0xa0>)
 8008380:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
}
 8008384:	bc10      	pop	{r4}
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008386:	400b      	ands	r3, r1
 8008388:	f083 0320 	eor.w	r3, r3, #32
 800838c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008394:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8008398:	2000      	movs	r0, #0
 800839a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800839c:	f830 4023 	ldrh.w	r4, [r0, r3, lsl #2]
 80083a0:	0464      	lsls	r4, r4, #17
 80083a2:	d40e      	bmi.n	80083c2 <USB_EPClearStall+0x7e>
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80083a4:	8811      	ldrh	r1, [r2, #0]
 80083a6:	4b10      	ldr	r3, [pc, #64]	; (80083e8 <USB_EPClearStall+0xa4>)
 80083a8:	400b      	ands	r3, r1
 80083aa:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80083ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083b6:	8013      	strh	r3, [r2, #0]
}
 80083b8:	2000      	movs	r0, #0
 80083ba:	bc10      	pop	{r4}
 80083bc:	4770      	bx	lr
 80083be:	2000      	movs	r0, #0
 80083c0:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083c2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80083c6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80083ca:	0512      	lsls	r2, r2, #20
 80083cc:	0d12      	lsrs	r2, r2, #20
 80083ce:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80083d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083d6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 80083da:	780a      	ldrb	r2, [r1, #0]
 80083dc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80083e0:	e7e0      	b.n	80083a4 <USB_EPClearStall+0x60>
 80083e2:	bf00      	nop
 80083e4:	ffff8fbf 	.word	0xffff8fbf
 80083e8:	ffffbf8f 	.word	0xffffbf8f

080083ec <USB_SetDevAddress>:
  if (address == 0U)
 80083ec:	b911      	cbnz	r1, 80083f4 <USB_SetDevAddress+0x8>
    USBx->DADDR = USB_DADDR_EF;
 80083ee:	2380      	movs	r3, #128	; 0x80
 80083f0:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 80083f4:	2000      	movs	r0, #0
 80083f6:	4770      	bx	lr

080083f8 <USB_DevConnect>:
 80083f8:	2000      	movs	r0, #0
 80083fa:	4770      	bx	lr

080083fc <USB_DevDisconnect>:
 80083fc:	2000      	movs	r0, #0
 80083fe:	4770      	bx	lr

08008400 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 8008400:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop

08008408 <USB_EP0_OutStart>:
}
 8008408:	2000      	movs	r0, #0
 800840a:	4770      	bx	lr

0800840c <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800840c:	eb00 0242 	add.w	r2, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 8008410:	0858      	lsrs	r0, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008412:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8008416:	d01a      	beq.n	800844e <USB_ReadPMA+0x42>
{
 8008418:	b4f0      	push	{r4, r5, r6, r7}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800841a:	4617      	mov	r7, r2
  for (i = n; i != 0U; i--)
 800841c:	4606      	mov	r6, r0
 800841e:	1c8d      	adds	r5, r1, #2
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008420:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8008424:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8008426:	b2a4      	uxth	r4, r4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008428:	ea4f 2c14 	mov.w	ip, r4, lsr #8
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800842c:	f805 4c02 	strb.w	r4, [r5, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008430:	f805 cc01 	strb.w	ip, [r5, #-1]
 8008434:	f105 0502 	add.w	r5, r5, #2
  for (i = n; i != 0U; i--)
 8008438:	d1f2      	bne.n	8008420 <USB_ReadPMA+0x14>
  if ((wNBytes % 2U) != 0U)
  {
    temp = *pdwVal;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
  }
}
 800843a:	bcf0      	pop	{r4, r5, r6, r7}
 800843c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8008440:	eb02 0280 	add.w	r2, r2, r0, lsl #2
  if ((wNBytes % 2U) != 0U)
 8008444:	07d8      	lsls	r0, r3, #31
    temp = *pdwVal;
 8008446:	bf44      	itt	mi
 8008448:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800844a:	700b      	strbmi	r3, [r1, #0]
}
 800844c:	4770      	bx	lr
  if ((wNBytes % 2U) != 0U)
 800844e:	07db      	lsls	r3, r3, #31
    temp = *pdwVal;
 8008450:	bf44      	itt	mi
 8008452:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008454:	700b      	strbmi	r3, [r1, #0]
 8008456:	4770      	bx	lr

08008458 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008458:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800845c:	b183      	cbz	r3, 8008480 <USBD_CDC_EP0_RxReady+0x28>
{
 800845e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008460:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008464:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8008468:	28ff      	cmp	r0, #255	; 0xff
 800846a:	d007      	beq.n	800847c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8008472:	4621      	mov	r1, r4
 8008474:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8008476:	23ff      	movs	r3, #255	; 0xff
 8008478:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 800847c:	2000      	movs	r0, #0
 800847e:	bd10      	pop	{r4, pc}
 8008480:	2000      	movs	r0, #0
 8008482:	4770      	bx	lr

08008484 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008484:	2343      	movs	r3, #67	; 0x43
 8008486:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8008488:	4800      	ldr	r0, [pc, #0]	; (800848c <USBD_CDC_GetFSCfgDesc+0x8>)
 800848a:	4770      	bx	lr
 800848c:	2000007c 	.word	0x2000007c

08008490 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008490:	2343      	movs	r3, #67	; 0x43
 8008492:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8008494:	4800      	ldr	r0, [pc, #0]	; (8008498 <USBD_CDC_GetHSCfgDesc+0x8>)
 8008496:	4770      	bx	lr
 8008498:	200000c0 	.word	0x200000c0

0800849c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800849c:	2343      	movs	r3, #67	; 0x43
 800849e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80084a0:	4800      	ldr	r0, [pc, #0]	; (80084a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80084a2:	4770      	bx	lr
 80084a4:	20000110 	.word	0x20000110

080084a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80084a8:	230a      	movs	r3, #10
 80084aa:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80084ac:	4800      	ldr	r0, [pc, #0]	; (80084b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80084ae:	4770      	bx	lr
 80084b0:	20000104 	.word	0x20000104

080084b4 <USBD_CDC_DataOut>:
{
 80084b4:	b538      	push	{r3, r4, r5, lr}
 80084b6:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084b8:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80084bc:	f000 ffda 	bl	8009474 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 80084c0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80084c4:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 80084c8:	b14b      	cbz	r3, 80084de <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80084ca:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80084ce:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80084d8:	4798      	blx	r3
    return USBD_OK;
 80084da:	2000      	movs	r0, #0
}
 80084dc:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80084de:	2002      	movs	r0, #2
}
 80084e0:	bd38      	pop	{r3, r4, r5, pc}
 80084e2:	bf00      	nop

080084e4 <USBD_CDC_DataIn>:
{
 80084e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80084e6:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 80084ea:	b1d6      	cbz	r6, 8008522 <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80084ec:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80084f0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80084f4:	69df      	ldr	r7, [r3, #28]
 80084f6:	b14f      	cbz	r7, 800850c <USBD_CDC_DataIn+0x28>
 80084f8:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 80084fc:	eb02 1541 	add.w	r5, r2, r1, lsl #5
 8008500:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8008502:	fbb7 f4f2 	udiv	r4, r7, r2
 8008506:	fb02 7414 	mls	r4, r2, r4, r7
 800850a:	b11c      	cbz	r4, 8008514 <USBD_CDC_DataIn+0x30>
      hcdc->TxState = 0U;
 800850c:	2000      	movs	r0, #0
 800850e:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
}
 8008512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8008514:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008516:	4622      	mov	r2, r4
 8008518:	4623      	mov	r3, r4
 800851a:	f000 ff8f 	bl	800943c <USBD_LL_Transmit>
    return USBD_OK;
 800851e:	4620      	mov	r0, r4
}
 8008520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 8008522:	2002      	movs	r0, #2
}
 8008524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008526:	bf00      	nop

08008528 <USBD_CDC_Setup>:
{
 8008528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t ifalt = 0U;
 800852c:	2700      	movs	r7, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800852e:	780b      	ldrb	r3, [r1, #0]
{
 8008530:	b082      	sub	sp, #8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008532:	f013 0460 	ands.w	r4, r3, #96	; 0x60
{
 8008536:	460d      	mov	r5, r1
 8008538:	4606      	mov	r6, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800853a:	f8d0 82b8 	ldr.w	r8, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 800853e:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 8008542:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008546:	d00f      	beq.n	8008568 <USBD_CDC_Setup+0x40>
 8008548:	2c20      	cmp	r4, #32
 800854a:	d117      	bne.n	800857c <USBD_CDC_Setup+0x54>
      if (req->wLength)
 800854c:	88cc      	ldrh	r4, [r1, #6]
 800854e:	f891 c001 	ldrb.w	ip, [r1, #1]
 8008552:	bb64      	cbnz	r4, 80085ae <USBD_CDC_Setup+0x86>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008554:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8008558:	4622      	mov	r2, r4
 800855a:	4660      	mov	r0, ip
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8008560:	4620      	mov	r0, r4
}
 8008562:	b002      	add	sp, #8
 8008564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      switch (req->bRequest)
 8008568:	784f      	ldrb	r7, [r1, #1]
 800856a:	2f0a      	cmp	r7, #10
 800856c:	d014      	beq.n	8008598 <USBD_CDC_Setup+0x70>
 800856e:	2f0b      	cmp	r7, #11
 8008570:	d00c      	beq.n	800858c <USBD_CDC_Setup+0x64>
 8008572:	b91f      	cbnz	r7, 800857c <USBD_CDC_Setup+0x54>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008574:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008578:	2b03      	cmp	r3, #3
 800857a:	d028      	beq.n	80085ce <USBD_CDC_Setup+0xa6>
          USBD_CtlError(pdev, req);
 800857c:	4630      	mov	r0, r6
 800857e:	4629      	mov	r1, r5
 8008580:	f000 fc9e 	bl	8008ec0 <USBD_CtlError>
          ret = USBD_FAIL;
 8008584:	2002      	movs	r0, #2
}
 8008586:	b002      	add	sp, #8
 8008588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800858c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008590:	2b03      	cmp	r3, #3
 8008592:	d1f3      	bne.n	800857c <USBD_CDC_Setup+0x54>
  uint8_t ret = USBD_OK;
 8008594:	4620      	mov	r0, r4
 8008596:	e7f6      	b.n	8008586 <USBD_CDC_Setup+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008598:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800859c:	2b03      	cmp	r3, #3
 800859e:	d1ed      	bne.n	800857c <USBD_CDC_Setup+0x54>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80085a0:	2201      	movs	r2, #1
 80085a2:	f10d 0105 	add.w	r1, sp, #5
 80085a6:	f000 fcbd 	bl	8008f24 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80085aa:	4620      	mov	r0, r4
 80085ac:	e7eb      	b.n	8008586 <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 80085ae:	061b      	lsls	r3, r3, #24
 80085b0:	d514      	bpl.n	80085dc <USBD_CDC_Setup+0xb4>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80085b2:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80085b6:	4622      	mov	r2, r4
 80085b8:	4660      	mov	r0, ip
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	4641      	mov	r1, r8
 80085be:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80085c0:	88ea      	ldrh	r2, [r5, #6]
 80085c2:	4641      	mov	r1, r8
 80085c4:	4630      	mov	r0, r6
 80085c6:	f000 fcad 	bl	8008f24 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80085ca:	4638      	mov	r0, r7
 80085cc:	e7db      	b.n	8008586 <USBD_CDC_Setup+0x5e>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80085ce:	2202      	movs	r2, #2
 80085d0:	f10d 0106 	add.w	r1, sp, #6
 80085d4:	f000 fca6 	bl	8008f24 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80085d8:	4638      	mov	r0, r7
 80085da:	e7d4      	b.n	8008586 <USBD_CDC_Setup+0x5e>
          hcdc->CmdOpCode = req->bRequest;
 80085dc:	f888 c200 	strb.w	ip, [r8, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80085e0:	f888 4201 	strb.w	r4, [r8, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80085e4:	4622      	mov	r2, r4
 80085e6:	4641      	mov	r1, r8
 80085e8:	f000 fcb2 	bl	8008f50 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 80085ec:	4638      	mov	r0, r7
 80085ee:	e7ca      	b.n	8008586 <USBD_CDC_Setup+0x5e>

080085f0 <USBD_CDC_DeInit>:
{
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80085f4:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80085f6:	2181      	movs	r1, #129	; 0x81
 80085f8:	f000 fed8 	bl	80093ac <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80085fc:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80085fe:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008600:	4620      	mov	r0, r4
 8008602:	f000 fed3 	bl	80093ac <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008606:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800860a:	4620      	mov	r0, r4
 800860c:	2182      	movs	r1, #130	; 0x82
 800860e:	f000 fecd 	bl	80093ac <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8008612:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008616:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8008618:	b14b      	cbz	r3, 800862e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800861a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008622:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8008626:	f000 ff2d 	bl	8009484 <USBD_static_free>
    pdev->pClassData = NULL;
 800862a:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 800862e:	2000      	movs	r0, #0
 8008630:	bd38      	pop	{r3, r4, r5, pc}
 8008632:	bf00      	nop

08008634 <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008634:	7c03      	ldrb	r3, [r0, #16]
{
 8008636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800863a:	4604      	mov	r4, r0
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800863c:	2501      	movs	r5, #1
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800863e:	bbbb      	cbnz	r3, 80086b0 <USBD_CDC_Init+0x7c>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008644:	2202      	movs	r2, #2
 8008646:	2181      	movs	r1, #129	; 0x81
 8008648:	f000 fea0 	bl	800938c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800864c:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800864e:	4629      	mov	r1, r5
 8008650:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008654:	2202      	movs	r2, #2
 8008656:	4620      	mov	r0, r4
 8008658:	f000 fe98 	bl	800938c <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800865c:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008660:	2701      	movs	r7, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008662:	2308      	movs	r3, #8
 8008664:	2203      	movs	r2, #3
 8008666:	2182      	movs	r1, #130	; 0x82
 8008668:	4620      	mov	r0, r4
 800866a:	f000 fe8f 	bl	800938c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800866e:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008670:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008674:	f000 ff02 	bl	800947c <USBD_static_malloc>
 8008678:	4605      	mov	r5, r0
 800867a:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 800867e:	b368      	cbz	r0, 80086dc <USBD_CDC_Init+0xa8>
    hcdc->TxState = 0U;
 8008680:	2600      	movs	r6, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008682:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800868a:	f894 8010 	ldrb.w	r8, [r4, #16]
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800868e:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
    hcdc->TxState = 0U;
 8008692:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008696:	4639      	mov	r1, r7
    hcdc->RxState = 0U;
 8008698:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800869c:	4620      	mov	r0, r4
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800869e:	f1b8 0f00 	cmp.w	r8, #0
 80086a2:	d014      	beq.n	80086ce <USBD_CDC_Init+0x9a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80086a4:	2340      	movs	r3, #64	; 0x40
 80086a6:	f000 fed7 	bl	8009458 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80086aa:	4630      	mov	r0, r6
}
 80086ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80086b0:	2340      	movs	r3, #64	; 0x40
 80086b2:	2202      	movs	r2, #2
 80086b4:	2181      	movs	r1, #129	; 0x81
 80086b6:	f000 fe69 	bl	800938c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80086ba:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80086bc:	4629      	mov	r1, r5
 80086be:	2340      	movs	r3, #64	; 0x40
 80086c0:	2202      	movs	r2, #2
 80086c2:	4620      	mov	r0, r4
 80086c4:	f000 fe62 	bl	800938c <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80086c8:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 80086cc:	e7c8      	b.n	8008660 <USBD_CDC_Init+0x2c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80086ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086d2:	f000 fec1 	bl	8009458 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80086d6:	4640      	mov	r0, r8
}
 80086d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 80086dc:	4638      	mov	r0, r7
 80086de:	e7e5      	b.n	80086ac <USBD_CDC_Init+0x78>

080086e0 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80086e0:	b119      	cbz	r1, 80086ea <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 80086e2:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 80086e6:	2000      	movs	r0, #0
 80086e8:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80086ea:	2002      	movs	r0, #2
  }

  return ret;
}
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop

080086f0 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80086f0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 80086f4:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80086f6:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80086fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80086fe:	4770      	bx	lr

08008700 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8008700:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8008704:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8008706:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800870a:	4770      	bx	lr

0800870c <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800870c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  if (pdev->pClassData != NULL)
 8008710:	b19a      	cbz	r2, 800873a <USBD_CDC_TransmitPacket+0x2e>
{
 8008712:	b538      	push	{r3, r4, r5, lr}
  {
    if (hcdc->TxState == 0U)
 8008714:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8008718:	b10c      	cbz	r4, 800871e <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 800871a:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 800871c:	bd38      	pop	{r3, r4, r5, pc}
      hcdc->TxState = 1U;
 800871e:	2501      	movs	r5, #1
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008720:	f8d2 1210 	ldr.w	r1, [r2, #528]	; 0x210
      hcdc->TxState = 1U;
 8008724:	f8c2 5214 	str.w	r5, [r2, #532]	; 0x214
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008728:	b28b      	uxth	r3, r1
 800872a:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800872e:	6301      	str	r1, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008730:	2181      	movs	r1, #129	; 0x81
 8008732:	f000 fe83 	bl	800943c <USBD_LL_Transmit>
      return USBD_OK;
 8008736:	4620      	mov	r0, r4
}
 8008738:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800873a:	2002      	movs	r0, #2
}
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop

08008740 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008740:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008744:	b18a      	cbz	r2, 800876a <USBD_CDC_ReceivePacket+0x2a>
{
 8008746:	b510      	push	{r4, lr}
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008748:	7c04      	ldrb	r4, [r0, #16]
 800874a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800874e:	b12c      	cbz	r4, 800875c <USBD_CDC_ReceivePacket+0x1c>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008750:	2340      	movs	r3, #64	; 0x40
 8008752:	2101      	movs	r1, #1
 8008754:	f000 fe80 	bl	8009458 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008758:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 800875a:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800875c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008760:	2101      	movs	r1, #1
 8008762:	f000 fe79 	bl	8009458 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8008766:	4620      	mov	r0, r4
}
 8008768:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800876a:	2002      	movs	r0, #2
}
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop

08008770 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008770:	b188      	cbz	r0, 8008796 <USBD_Init+0x26>
{
 8008772:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008774:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008778:	b113      	cbz	r3, 8008780 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800877a:	2300      	movs	r3, #0
 800877c:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008780:	b109      	cbz	r1, 8008786 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8008782:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008786:	2301      	movs	r3, #1
  pdev->id = id;
 8008788:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800878a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800878e:	f000 fdad 	bl	80092ec <USBD_LL_Init>

  return USBD_OK;
 8008792:	2000      	movs	r0, #0
}
 8008794:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8008796:	2002      	movs	r0, #2
}
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop

0800879c <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 800879c:	b119      	cbz	r1, 80087a6 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800879e:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 80087a2:	2000      	movs	r0, #0
 80087a4:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80087a6:	2002      	movs	r0, #2
  }

  return status;
}
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop

080087ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80087ac:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80087ae:	f000 fddf 	bl	8009370 <USBD_LL_Start>

  return USBD_OK;
}
 80087b2:	2000      	movs	r0, #0
 80087b4:	bd08      	pop	{r3, pc}
 80087b6:	bf00      	nop

080087b8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80087b8:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80087ba:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80087be:	b11b      	cbz	r3, 80087c8 <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4798      	blx	r3
 80087c4:	b900      	cbnz	r0, 80087c8 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 80087c6:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 80087c8:	2002      	movs	r0, #2
}
 80087ca:	bd08      	pop	{r3, pc}

080087cc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80087cc:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80087ce:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	4798      	blx	r3

  return USBD_OK;
}
 80087d6:	2000      	movs	r0, #0
 80087d8:	bd08      	pop	{r3, pc}
 80087da:	bf00      	nop

080087dc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80087dc:	b538      	push	{r3, r4, r5, lr}
 80087de:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80087e0:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 80087e4:	4628      	mov	r0, r5
 80087e6:	f000 fb57 	bl	8008e98 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80087ea:	2001      	movs	r0, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80087ec:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_data_len = pdev->request.wLength;
 80087f0:	f8b4 22ae 	ldrh.w	r2, [r4, #686]	; 0x2ae
  switch (pdev->request.bmRequest & 0x1FU)
 80087f4:	f001 031f 	and.w	r3, r1, #31
 80087f8:	4283      	cmp	r3, r0
  pdev->ep0_state = USBD_EP0_SETUP;
 80087fa:	f8c4 0294 	str.w	r0, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 80087fe:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8008802:	d015      	beq.n	8008830 <USBD_LL_SetupStage+0x54>
 8008804:	d30e      	bcc.n	8008824 <USBD_LL_SetupStage+0x48>
 8008806:	2b02      	cmp	r3, #2
 8008808:	d006      	beq.n	8008818 <USBD_LL_SetupStage+0x3c>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800880a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800880e:	4620      	mov	r0, r4
 8008810:	f000 fdda 	bl	80093c8 <USBD_LL_StallEP>
      break;
  }

  return USBD_OK;
}
 8008814:	2000      	movs	r0, #0
 8008816:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdEPReq(pdev, &pdev->request);
 8008818:	4629      	mov	r1, r5
 800881a:	4620      	mov	r0, r4
 800881c:	f000 faa6 	bl	8008d6c <USBD_StdEPReq>
}
 8008820:	2000      	movs	r0, #0
 8008822:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdDevReq(pdev, &pdev->request);
 8008824:	4629      	mov	r1, r5
 8008826:	4620      	mov	r0, r4
 8008828:	f000 f8f6 	bl	8008a18 <USBD_StdDevReq>
}
 800882c:	2000      	movs	r0, #0
 800882e:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8008830:	4629      	mov	r1, r5
 8008832:	4620      	mov	r0, r4
 8008834:	f000 fa6e 	bl	8008d14 <USBD_StdItfReq>
}
 8008838:	2000      	movs	r0, #0
 800883a:	bd38      	pop	{r3, r4, r5, pc}

0800883c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800883c:	b570      	push	{r4, r5, r6, lr}
 800883e:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008840:	b941      	cbnz	r1, 8008854 <USBD_LL_DataOutStage+0x18>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008842:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8008846:	2b03      	cmp	r3, #3
 8008848:	d00f      	beq.n	800886a <USBD_LL_DataOutStage+0x2e>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800884a:	2b05      	cmp	r3, #5
 800884c:	460c      	mov	r4, r1
 800884e:	d02e      	beq.n	80088ae <USBD_LL_DataOutStage+0x72>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8008850:	2000      	movs	r0, #0
}
 8008852:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 8008854:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008858:	699b      	ldr	r3, [r3, #24]
 800885a:	b1c3      	cbz	r3, 800888e <USBD_LL_DataOutStage+0x52>
 800885c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008860:	2a03      	cmp	r2, #3
 8008862:	d114      	bne.n	800888e <USBD_LL_DataOutStage+0x52>
    pdev->pClass->DataOut(pdev, epnum);
 8008864:	4798      	blx	r3
  return USBD_OK;
 8008866:	2000      	movs	r0, #0
}
 8008868:	bd70      	pop	{r4, r5, r6, pc}
 800886a:	4616      	mov	r6, r2
      if (pep->rem_length > pep->maxpacket)
 800886c:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8008870:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8008874:	4293      	cmp	r3, r2
 8008876:	d90c      	bls.n	8008892 <USBD_LL_DataOutStage+0x56>
        pep->rem_length -= pep->maxpacket;
 8008878:	1a9b      	subs	r3, r3, r2
        USBD_CtlContinueRx(pdev, pdata,
 800887a:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 800887c:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8008880:	bf8c      	ite	hi
 8008882:	b29a      	uxthhi	r2, r3
 8008884:	b292      	uxthls	r2, r2
 8008886:	4631      	mov	r1, r6
 8008888:	f000 fb72 	bl	8008f70 <USBD_CtlContinueRx>
 800888c:	e7e0      	b.n	8008850 <USBD_LL_DataOutStage+0x14>
    return USBD_FAIL;
 800888e:	2002      	movs	r0, #2
}
 8008890:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008892:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	b123      	cbz	r3, 80088a4 <USBD_LL_DataOutStage+0x68>
 800889a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800889e:	2a03      	cmp	r2, #3
 80088a0:	d100      	bne.n	80088a4 <USBD_LL_DataOutStage+0x68>
          pdev->pClass->EP0_RxReady(pdev);
 80088a2:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80088a4:	4628      	mov	r0, r5
 80088a6:	f000 fb6b 	bl	8008f80 <USBD_CtlSendStatus>
  return USBD_OK;
 80088aa:	2000      	movs	r0, #0
}
 80088ac:	bd70      	pop	{r4, r5, r6, pc}
        pdev->ep0_state = USBD_EP0_IDLE;
 80088ae:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80088b2:	f000 fd89 	bl	80093c8 <USBD_LL_StallEP>
  return USBD_OK;
 80088b6:	4620      	mov	r0, r4
}
 80088b8:	bd70      	pop	{r4, r5, r6, pc}
 80088ba:	bf00      	nop

080088bc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80088bc:	b570      	push	{r4, r5, r6, lr}
 80088be:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80088c0:	b981      	cbnz	r1, 80088e4 <USBD_LL_DataInStage+0x28>
 80088c2:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80088c4:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80088c8:	2a02      	cmp	r2, #2
 80088ca:	d019      	beq.n	8008900 <USBD_LL_DataInStage+0x44>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80088cc:	f032 0304 	bics.w	r3, r2, #4
 80088d0:	d102      	bne.n	80088d8 <USBD_LL_DataInStage+0x1c>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80088d2:	2180      	movs	r1, #128	; 0x80
 80088d4:	f000 fd78 	bl	80093c8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80088d8:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80088dc:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d00b      	beq.n	80088fa <USBD_LL_DataInStage+0x3e>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80088e2:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 80088e4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80088e8:	695b      	ldr	r3, [r3, #20]
 80088ea:	b363      	cbz	r3, 8008946 <USBD_LL_DataInStage+0x8a>
 80088ec:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80088f0:	2a03      	cmp	r2, #3
 80088f2:	d128      	bne.n	8008946 <USBD_LL_DataInStage+0x8a>
    pdev->pClass->DataIn(pdev, epnum);
 80088f4:	4798      	blx	r3
  return USBD_OK;
 80088f6:	2000      	movs	r0, #0
}
 80088f8:	bd70      	pop	{r4, r5, r6, pc}
      pdev->dev_test_mode = 0U;
 80088fa:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
}
 80088fe:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8008900:	e9d0 6208 	ldrd	r6, r2, [r0, #32]
 8008904:	4296      	cmp	r6, r2
 8008906:	d820      	bhi.n	800894a <USBD_LL_DataInStage+0x8e>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008908:	69c3      	ldr	r3, [r0, #28]
 800890a:	fbb3 f5f2 	udiv	r5, r3, r2
 800890e:	fb02 3515 	mls	r5, r2, r5, r3
 8008912:	b90d      	cbnz	r5, 8008918 <USBD_LL_DataInStage+0x5c>
 8008914:	429a      	cmp	r2, r3
 8008916:	d926      	bls.n	8008966 <USBD_LL_DataInStage+0xaa>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008918:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	b12b      	cbz	r3, 800892c <USBD_LL_DataInStage+0x70>
 8008920:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8008924:	2a03      	cmp	r2, #3
 8008926:	d101      	bne.n	800892c <USBD_LL_DataInStage+0x70>
            pdev->pClass->EP0_TxSent(pdev);
 8008928:	4620      	mov	r0, r4
 800892a:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800892c:	2180      	movs	r1, #128	; 0x80
 800892e:	4620      	mov	r0, r4
 8008930:	f000 fd4a 	bl	80093c8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008934:	4620      	mov	r0, r4
 8008936:	f000 fb2f 	bl	8008f98 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 800893a:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
      pdev->dev_test_mode = 0U;
 800893e:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 8008940:	2b01      	cmp	r3, #1
 8008942:	d1ce      	bne.n	80088e2 <USBD_LL_DataInStage+0x26>
 8008944:	e7d9      	b.n	80088fa <USBD_LL_DataInStage+0x3e>
    return USBD_FAIL;
 8008946:	2002      	movs	r0, #2
}
 8008948:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 800894a:	1ab2      	subs	r2, r6, r2
 800894c:	460d      	mov	r5, r1
 800894e:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008950:	4619      	mov	r1, r3
 8008952:	b292      	uxth	r2, r2
 8008954:	f000 faf4 	bl	8008f40 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008958:	462b      	mov	r3, r5
 800895a:	462a      	mov	r2, r5
 800895c:	4629      	mov	r1, r5
 800895e:	4620      	mov	r0, r4
 8008960:	f000 fd7a 	bl	8009458 <USBD_LL_PrepareReceive>
 8008964:	e7b8      	b.n	80088d8 <USBD_LL_DataInStage+0x1c>
            (pep->total_length >= pep->maxpacket) &&
 8008966:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 800896a:	4293      	cmp	r3, r2
 800896c:	d2d4      	bcs.n	8008918 <USBD_LL_DataInStage+0x5c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800896e:	462a      	mov	r2, r5
 8008970:	f000 fae6 	bl	8008f40 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008974:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8008978:	e7ee      	b.n	8008958 <USBD_LL_DataInStage+0x9c>
 800897a:	bf00      	nop

0800897c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800897c:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800897e:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008980:	2640      	movs	r6, #64	; 0x40
{
 8008982:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008984:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008986:	4611      	mov	r1, r2
 8008988:	4633      	mov	r3, r6
 800898a:	f000 fcff 	bl	800938c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800898e:	4633      	mov	r3, r6
 8008990:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008992:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008996:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800899a:	4620      	mov	r0, r4
 800899c:	2200      	movs	r2, #0
 800899e:	f000 fcf5 	bl	800938c <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 80089a2:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80089a4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089a8:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089aa:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089ac:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80089b0:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 80089b4:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80089b6:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 80089ba:	b123      	cbz	r3, 80089c6 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80089bc:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80089c0:	4620      	mov	r0, r4
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	4798      	blx	r3
  }

  return USBD_OK;
}
 80089c6:	2000      	movs	r0, #0
 80089c8:	bd70      	pop	{r4, r5, r6, pc}
 80089ca:	bf00      	nop

080089cc <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80089cc:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80089ce:	2000      	movs	r0, #0
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop

080089d4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80089d4:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80089d6:	2204      	movs	r2, #4
  pdev->dev_old_state =  pdev->dev_state;
 80089d8:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80089dc:	2000      	movs	r0, #0
  pdev->dev_old_state =  pdev->dev_state;
 80089de:	f883 129d 	strb.w	r1, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80089e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
}
 80089e6:	4770      	bx	lr

080089e8 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80089e8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80089ec:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80089ee:	bf04      	itt	eq
 80089f0:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80089f4:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80089f8:	2000      	movs	r0, #0
 80089fa:	4770      	bx	lr

080089fc <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089fc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8008a00:	2a03      	cmp	r2, #3
 8008a02:	d001      	beq.n	8008a08 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8008a04:	2000      	movs	r0, #0
 8008a06:	4770      	bx	lr
{
 8008a08:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 8008a0a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008a0e:	69db      	ldr	r3, [r3, #28]
 8008a10:	b103      	cbz	r3, 8008a14 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 8008a12:	4798      	blx	r3
}
 8008a14:	2000      	movs	r0, #0
 8008a16:	bd08      	pop	{r3, pc}

08008a18 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008a18:	b530      	push	{r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a1a:	780b      	ldrb	r3, [r1, #0]
{
 8008a1c:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a22:	2b20      	cmp	r3, #32
{
 8008a24:	460d      	mov	r5, r1
 8008a26:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a28:	d028      	beq.n	8008a7c <USBD_StdDevReq+0x64>
 8008a2a:	2b40      	cmp	r3, #64	; 0x40
 8008a2c:	d026      	beq.n	8008a7c <USBD_StdDevReq+0x64>
 8008a2e:	b153      	cbz	r3, 8008a46 <USBD_StdDevReq+0x2e>
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8008a30:	2180      	movs	r1, #128	; 0x80
 8008a32:	4620      	mov	r0, r4
 8008a34:	f000 fcc8 	bl	80093c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008a38:	4620      	mov	r0, r4
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	f000 fcc4 	bl	80093c8 <USBD_LL_StallEP>
}
 8008a40:	2000      	movs	r0, #0
 8008a42:	b003      	add	sp, #12
 8008a44:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8008a46:	784b      	ldrb	r3, [r1, #1]
 8008a48:	2b09      	cmp	r3, #9
 8008a4a:	d8f1      	bhi.n	8008a30 <USBD_StdDevReq+0x18>
 8008a4c:	a201      	add	r2, pc, #4	; (adr r2, 8008a54 <USBD_StdDevReq+0x3c>)
 8008a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a52:	bf00      	nop
 8008a54:	08008ad1 	.word	0x08008ad1
 8008a58:	08008afd 	.word	0x08008afd
 8008a5c:	08008a31 	.word	0x08008a31
 8008a60:	08008b19 	.word	0x08008b19
 8008a64:	08008a31 	.word	0x08008a31
 8008a68:	08008b25 	.word	0x08008b25
 8008a6c:	08008b63 	.word	0x08008b63
 8008a70:	08008a31 	.word	0x08008a31
 8008a74:	08008b99 	.word	0x08008b99
 8008a78:	08008a8f 	.word	0x08008a8f
      pdev->pClass->Setup(pdev, req);
 8008a7c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8008a80:	4629      	mov	r1, r5
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	4620      	mov	r0, r4
 8008a86:	4798      	blx	r3
}
 8008a88:	2000      	movs	r0, #0
 8008a8a:	b003      	add	sp, #12
 8008a8c:	bd30      	pop	{r4, r5, pc}
  cfgidx = (uint8_t)(req->wValue);
 8008a8e:	7889      	ldrb	r1, [r1, #2]
 8008a90:	4d9f      	ldr	r5, [pc, #636]	; (8008d10 <USBD_StdDevReq+0x2f8>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a92:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8008a94:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a96:	d8cb      	bhi.n	8008a30 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8008a98:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	f000 810d 	beq.w	8008cbc <USBD_StdDevReq+0x2a4>
 8008aa2:	2b03      	cmp	r3, #3
 8008aa4:	f040 80fe 	bne.w	8008ca4 <USBD_StdDevReq+0x28c>
        if (cfgidx == 0U)
 8008aa8:	2900      	cmp	r1, #0
 8008aaa:	f000 8127 	beq.w	8008cfc <USBD_StdDevReq+0x2e4>
        else if (cfgidx != pdev->dev_config)
 8008aae:	6841      	ldr	r1, [r0, #4]
 8008ab0:	2901      	cmp	r1, #1
 8008ab2:	d009      	beq.n	8008ac8 <USBD_StdDevReq+0xb0>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ab4:	b2c9      	uxtb	r1, r1
 8008ab6:	f7ff fe89 	bl	80087cc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008aba:	7829      	ldrb	r1, [r5, #0]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008abc:	4620      	mov	r0, r4
          pdev->dev_config = cfgidx;
 8008abe:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ac0:	f7ff fe7a 	bl	80087b8 <USBD_SetClassConfig>
 8008ac4:	2802      	cmp	r0, #2
 8008ac6:	d0b3      	beq.n	8008a30 <USBD_StdDevReq+0x18>
    USBD_CtlSendStatus(pdev);
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f000 fa59 	bl	8008f80 <USBD_CtlSendStatus>
 8008ace:	e7b7      	b.n	8008a40 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 8008ad0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008ad4:	2203      	movs	r2, #3
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d8a9      	bhi.n	8008a30 <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 8008adc:	88cb      	ldrh	r3, [r1, #6]
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d1a6      	bne.n	8008a30 <USBD_StdDevReq+0x18>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008ae2:	2101      	movs	r1, #1
      if (pdev->dev_remote_wakeup)
 8008ae4:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008ae8:	60c1      	str	r1, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8008aea:	b103      	cbz	r3, 8008aee <USBD_StdDevReq+0xd6>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008aec:	60c2      	str	r2, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008aee:	2202      	movs	r2, #2
 8008af0:	f104 010c 	add.w	r1, r4, #12
 8008af4:	4620      	mov	r0, r4
 8008af6:	f000 fa15 	bl	8008f24 <USBD_CtlSendData>
 8008afa:	e7a1      	b.n	8008a40 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 8008afc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008b00:	3b01      	subs	r3, #1
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d894      	bhi.n	8008a30 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b06:	884b      	ldrh	r3, [r1, #2]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d199      	bne.n	8008a40 <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008b12:	f000 fa35 	bl	8008f80 <USBD_CtlSendStatus>
 8008b16:	e793      	b.n	8008a40 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b18:	884b      	ldrh	r3, [r1, #2]
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d190      	bne.n	8008a40 <USBD_StdDevReq+0x28>
    pdev->dev_remote_wakeup = 1U;
 8008b1e:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
 8008b22:	e7d1      	b.n	8008ac8 <USBD_StdDevReq+0xb0>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b24:	888b      	ldrh	r3, [r1, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d182      	bne.n	8008a30 <USBD_StdDevReq+0x18>
 8008b2a:	88cb      	ldrh	r3, [r1, #6]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f47f af7f 	bne.w	8008a30 <USBD_StdDevReq+0x18>
 8008b32:	884d      	ldrh	r5, [r1, #2]
 8008b34:	2d7f      	cmp	r5, #127	; 0x7f
 8008b36:	f63f af7b 	bhi.w	8008a30 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b3a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008b3e:	2b03      	cmp	r3, #3
 8008b40:	f43f af76 	beq.w	8008a30 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b44:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8008b46:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b4a:	f000 fc69 	bl	8009420 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f000 fa16 	bl	8008f80 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8008b54:	2d00      	cmp	r5, #0
 8008b56:	f000 80cd 	beq.w	8008cf4 <USBD_StdDevReq+0x2dc>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b5a:	2302      	movs	r3, #2
 8008b5c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8008b60:	e76e      	b.n	8008a40 <USBD_StdDevReq+0x28>
  uint16_t len = 0U;
 8008b62:	2300      	movs	r3, #0
          USBD_GetDescriptor(pdev, req);
 8008b64:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8008b66:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8008b6a:	0a13      	lsrs	r3, r2, #8
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	2b06      	cmp	r3, #6
 8008b70:	f63f af5e 	bhi.w	8008a30 <USBD_StdDevReq+0x18>
 8008b74:	a101      	add	r1, pc, #4	; (adr r1, 8008b7c <USBD_StdDevReq+0x164>)
 8008b76:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b7a:	bf00      	nop
 8008b7c:	08008c31 	.word	0x08008c31
 8008b80:	08008c19 	.word	0x08008c19
 8008b84:	08008c41 	.word	0x08008c41
 8008b88:	08008a31 	.word	0x08008a31
 8008b8c:	08008a31 	.word	0x08008a31
 8008b90:	08008c03 	.word	0x08008c03
 8008b94:	08008bbf 	.word	0x08008bbf
  if (req->wLength != 1U)
 8008b98:	88ca      	ldrh	r2, [r1, #6]
 8008b9a:	2a01      	cmp	r2, #1
 8008b9c:	f47f af48 	bne.w	8008a30 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8008ba0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	f43f af43 	beq.w	8008a30 <USBD_StdDevReq+0x18>
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	f240 8094 	bls.w	8008cd8 <USBD_StdDevReq+0x2c0>
 8008bb0:	2b03      	cmp	r3, #3
 8008bb2:	f47f af3d 	bne.w	8008a30 <USBD_StdDevReq+0x18>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008bb6:	1d01      	adds	r1, r0, #4
 8008bb8:	f000 f9b4 	bl	8008f24 <USBD_CtlSendData>
 8008bbc:	e740      	b.n	8008a40 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bbe:	7c03      	ldrb	r3, [r0, #16]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f47f af35 	bne.w	8008a30 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008bc6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008bca:	f10d 0006 	add.w	r0, sp, #6
 8008bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008bd2:	2307      	movs	r3, #7
 8008bd4:	7043      	strb	r3, [r0, #1]
    if ((len != 0U) && (req->wLength != 0U))
 8008bd6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008bda:	88ea      	ldrh	r2, [r5, #6]
 8008bdc:	b16b      	cbz	r3, 8008bfa <USBD_StdDevReq+0x1e2>
 8008bde:	2a00      	cmp	r2, #0
 8008be0:	f43f af72 	beq.w	8008ac8 <USBD_StdDevReq+0xb0>
      len = MIN(len, req->wLength);
 8008be4:	4293      	cmp	r3, r2
 8008be6:	bf28      	it	cs
 8008be8:	4613      	movcs	r3, r2
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008bea:	4601      	mov	r1, r0
 8008bec:	461a      	mov	r2, r3
 8008bee:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8008bf0:	f8ad 3006 	strh.w	r3, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008bf4:	f000 f996 	bl	8008f24 <USBD_CtlSendData>
 8008bf8:	88ea      	ldrh	r2, [r5, #6]
    if (req->wLength == 0U)
 8008bfa:	2a00      	cmp	r2, #0
 8008bfc:	f47f af20 	bne.w	8008a40 <USBD_StdDevReq+0x28>
 8008c00:	e762      	b.n	8008ac8 <USBD_StdDevReq+0xb0>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c02:	7c03      	ldrb	r3, [r0, #16]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f47f af13 	bne.w	8008a30 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008c0a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008c0e:	f10d 0006 	add.w	r0, sp, #6
 8008c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c14:	4798      	blx	r3
 8008c16:	e7de      	b.n	8008bd6 <USBD_StdDevReq+0x1be>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c18:	7c02      	ldrb	r2, [r0, #16]
 8008c1a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008c1e:	2a00      	cmp	r2, #0
 8008c20:	d161      	bne.n	8008ce6 <USBD_StdDevReq+0x2ce>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c24:	f10d 0006 	add.w	r0, sp, #6
 8008c28:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c2a:	2302      	movs	r3, #2
 8008c2c:	7043      	strb	r3, [r0, #1]
 8008c2e:	e7d2      	b.n	8008bd6 <USBD_StdDevReq+0x1be>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c30:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008c34:	f10d 0106 	add.w	r1, sp, #6
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	7c00      	ldrb	r0, [r0, #16]
 8008c3c:	4798      	blx	r3
 8008c3e:	e7ca      	b.n	8008bd6 <USBD_StdDevReq+0x1be>
      switch ((uint8_t)(req->wValue))
 8008c40:	b2d2      	uxtb	r2, r2
 8008c42:	2a05      	cmp	r2, #5
 8008c44:	f63f aef4 	bhi.w	8008a30 <USBD_StdDevReq+0x18>
 8008c48:	e8df f002 	tbb	[pc, r2]
 8008c4c:	141a2026 	.word	0x141a2026
 8008c50:	030e      	.short	0x030e
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008c52:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f43f aee9 	beq.w	8008a30 <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008c5e:	f10d 0106 	add.w	r1, sp, #6
 8008c62:	7c20      	ldrb	r0, [r4, #16]
 8008c64:	4798      	blx	r3
 8008c66:	e7b6      	b.n	8008bd6 <USBD_StdDevReq+0x1be>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008c68:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008c6c:	695b      	ldr	r3, [r3, #20]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1f5      	bne.n	8008c5e <USBD_StdDevReq+0x246>
 8008c72:	e6dd      	b.n	8008a30 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008c74:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1ef      	bne.n	8008c5e <USBD_StdDevReq+0x246>
 8008c7e:	e6d7      	b.n	8008a30 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c80:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1e9      	bne.n	8008c5e <USBD_StdDevReq+0x246>
 8008c8a:	e6d1      	b.n	8008a30 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c8c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1e3      	bne.n	8008c5e <USBD_StdDevReq+0x246>
 8008c96:	e6cb      	b.n	8008a30 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c98:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d1dd      	bne.n	8008c5e <USBD_StdDevReq+0x246>
 8008ca2:	e6c5      	b.n	8008a30 <USBD_StdDevReq+0x18>
  USBD_LL_StallEP(pdev, 0x80U);
 8008ca4:	2180      	movs	r1, #128	; 0x80
 8008ca6:	f000 fb8f 	bl	80093c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008caa:	2100      	movs	r1, #0
 8008cac:	4620      	mov	r0, r4
 8008cae:	f000 fb8b 	bl	80093c8 <USBD_LL_StallEP>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008cb2:	7829      	ldrb	r1, [r5, #0]
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	f7ff fd89 	bl	80087cc <USBD_ClrClassConfig>
 8008cba:	e6c1      	b.n	8008a40 <USBD_StdDevReq+0x28>
        if (cfgidx)
 8008cbc:	2900      	cmp	r1, #0
 8008cbe:	f43f af03 	beq.w	8008ac8 <USBD_StdDevReq+0xb0>
          pdev->dev_config = cfgidx;
 8008cc2:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008cc4:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8008cc6:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008cc8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ccc:	f7ff fd74 	bl	80087b8 <USBD_SetClassConfig>
 8008cd0:	2802      	cmp	r0, #2
 8008cd2:	f47f aef9 	bne.w	8008ac8 <USBD_StdDevReq+0xb0>
 8008cd6:	e6ab      	b.n	8008a30 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	4601      	mov	r1, r0
 8008cdc:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008ce0:	f000 f920 	bl	8008f24 <USBD_CtlSendData>
 8008ce4:	e6ac      	b.n	8008a40 <USBD_StdDevReq+0x28>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce8:	f10d 0006 	add.w	r0, sp, #6
 8008cec:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cee:	2302      	movs	r3, #2
 8008cf0:	7043      	strb	r3, [r0, #1]
 8008cf2:	e770      	b.n	8008bd6 <USBD_StdDevReq+0x1be>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8008cfa:	e6a1      	b.n	8008a40 <USBD_StdDevReq+0x28>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cfc:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8008cfe:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d00:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8008d04:	f7ff fd62 	bl	80087cc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008d08:	4620      	mov	r0, r4
 8008d0a:	f000 f939 	bl	8008f80 <USBD_CtlSendStatus>
 8008d0e:	e697      	b.n	8008a40 <USBD_StdDevReq+0x28>
 8008d10:	200003c4 	.word	0x200003c4

08008d14 <USBD_StdItfReq>:
{
 8008d14:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d16:	780b      	ldrb	r3, [r1, #0]
{
 8008d18:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d1e:	2b20      	cmp	r3, #32
{
 8008d20:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d22:	d00c      	beq.n	8008d3e <USBD_StdItfReq+0x2a>
 8008d24:	2b40      	cmp	r3, #64	; 0x40
 8008d26:	d00a      	beq.n	8008d3e <USBD_StdItfReq+0x2a>
 8008d28:	b14b      	cbz	r3, 8008d3e <USBD_StdItfReq+0x2a>
  USBD_LL_StallEP(pdev, 0x80U);
 8008d2a:	2180      	movs	r1, #128	; 0x80
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	f000 fb4b 	bl	80093c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008d32:	4620      	mov	r0, r4
 8008d34:	2100      	movs	r1, #0
 8008d36:	f000 fb47 	bl	80093c8 <USBD_LL_StallEP>
}
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8008d3e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8008d42:	3b01      	subs	r3, #1
 8008d44:	2b02      	cmp	r3, #2
 8008d46:	d8f0      	bhi.n	8008d2a <USBD_StdItfReq+0x16>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008d48:	792b      	ldrb	r3, [r5, #4]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d8ed      	bhi.n	8008d2a <USBD_StdItfReq+0x16>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d4e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8008d52:	4629      	mov	r1, r5
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	4620      	mov	r0, r4
 8008d58:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d5a:	88eb      	ldrh	r3, [r5, #6]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1ec      	bne.n	8008d3a <USBD_StdItfReq+0x26>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d1ea      	bne.n	8008d3a <USBD_StdItfReq+0x26>
              USBD_CtlSendStatus(pdev);
 8008d64:	4620      	mov	r0, r4
 8008d66:	f000 f90b 	bl	8008f80 <USBD_CtlSendStatus>
 8008d6a:	e7e6      	b.n	8008d3a <USBD_StdItfReq+0x26>

08008d6c <USBD_StdEPReq>:
{
 8008d6c:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d6e:	780b      	ldrb	r3, [r1, #0]
{
 8008d70:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d76:	2b20      	cmp	r3, #32
 8008d78:	d00c      	beq.n	8008d94 <USBD_StdEPReq+0x28>
 8008d7a:	2b40      	cmp	r3, #64	; 0x40
 8008d7c:	d00a      	beq.n	8008d94 <USBD_StdEPReq+0x28>
 8008d7e:	b183      	cbz	r3, 8008da2 <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev, 0x80U);
 8008d80:	2180      	movs	r1, #128	; 0x80
 8008d82:	4620      	mov	r0, r4
 8008d84:	f000 fb20 	bl	80093c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008d88:	4620      	mov	r0, r4
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	f000 fb1c 	bl	80093c8 <USBD_LL_StallEP>
}
 8008d90:	2000      	movs	r0, #0
 8008d92:	bd70      	pop	{r4, r5, r6, pc}
      pdev->pClass->Setup(pdev, req);
 8008d94:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8008d98:	4620      	mov	r0, r4
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	4798      	blx	r3
}
 8008d9e:	2000      	movs	r0, #0
 8008da0:	bd70      	pop	{r4, r5, r6, pc}
      switch (req->bRequest)
 8008da2:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8008da4:	888a      	ldrh	r2, [r1, #4]
      switch (req->bRequest)
 8008da6:	2b01      	cmp	r3, #1
  ep_addr  = LOBYTE(req->wIndex);
 8008da8:	b2d5      	uxtb	r5, r2
      switch (req->bRequest)
 8008daa:	d03e      	beq.n	8008e2a <USBD_StdEPReq+0xbe>
 8008dac:	d314      	bcc.n	8008dd8 <USBD_StdEPReq+0x6c>
 8008dae:	2b03      	cmp	r3, #3
 8008db0:	d1e6      	bne.n	8008d80 <USBD_StdEPReq+0x14>
          switch (pdev->dev_state)
 8008db2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d046      	beq.n	8008e48 <USBD_StdEPReq+0xdc>
 8008dba:	2b03      	cmp	r3, #3
 8008dbc:	d1e0      	bne.n	8008d80 <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008dbe:	884b      	ldrh	r3, [r1, #2]
 8008dc0:	b933      	cbnz	r3, 8008dd0 <USBD_StdEPReq+0x64>
                if ((ep_addr != 0x00U) &&
 8008dc2:	066a      	lsls	r2, r5, #25
 8008dc4:	d004      	beq.n	8008dd0 <USBD_StdEPReq+0x64>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008dc6:	88cb      	ldrh	r3, [r1, #6]
 8008dc8:	b913      	cbnz	r3, 8008dd0 <USBD_StdEPReq+0x64>
                  USBD_LL_StallEP(pdev, ep_addr);
 8008dca:	4629      	mov	r1, r5
 8008dcc:	f000 fafc 	bl	80093c8 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f000 f8d5 	bl	8008f80 <USBD_CtlSendStatus>
              break;
 8008dd6:	e7db      	b.n	8008d90 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 8008dd8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d03d      	beq.n	8008e5c <USBD_StdEPReq+0xf0>
 8008de0:	2b03      	cmp	r3, #3
 8008de2:	d1cd      	bne.n	8008d80 <USBD_StdEPReq+0x14>
 8008de4:	f005 030f 	and.w	r3, r5, #15
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008de8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8008dec:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008dee:	eb00 0383 	add.w	r3, r0, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8008df2:	d442      	bmi.n	8008e7a <USBD_StdEPReq+0x10e>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008df4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d0c1      	beq.n	8008d80 <USBD_StdEPReq+0x14>
 8008dfc:	f005 037f 	and.w	r3, r5, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e00:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 8008e04:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8008e08:	f506 76aa 	add.w	r6, r6, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e0c:	b133      	cbz	r3, 8008e1c <USBD_StdEPReq+0xb0>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008e0e:	4629      	mov	r1, r5
 8008e10:	4620      	mov	r0, r4
 8008e12:	f000 faf5 	bl	8009400 <USBD_LL_IsStallEP>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d03b      	beq.n	8008e92 <USBD_StdEPReq+0x126>
                pep->status = 0x0001U;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	6033      	str	r3, [r6, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e1e:	4631      	mov	r1, r6
 8008e20:	4620      	mov	r0, r4
 8008e22:	2202      	movs	r2, #2
 8008e24:	f000 f87e 	bl	8008f24 <USBD_CtlSendData>
              break;
 8008e28:	e7b2      	b.n	8008d90 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 8008e2a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d00a      	beq.n	8008e48 <USBD_StdEPReq+0xdc>
 8008e32:	2b03      	cmp	r3, #3
 8008e34:	d1a4      	bne.n	8008d80 <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e36:	884b      	ldrh	r3, [r1, #2]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1a9      	bne.n	8008d90 <USBD_StdEPReq+0x24>
                if ((ep_addr & 0x7FU) != 0x00U)
 8008e3c:	066e      	lsls	r6, r5, #25
 8008e3e:	d0c7      	beq.n	8008dd0 <USBD_StdEPReq+0x64>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008e40:	4629      	mov	r1, r5
 8008e42:	f000 facf 	bl	80093e4 <USBD_LL_ClearStallEP>
 8008e46:	e7c3      	b.n	8008dd0 <USBD_StdEPReq+0x64>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e48:	066b      	lsls	r3, r5, #25
 8008e4a:	d099      	beq.n	8008d80 <USBD_StdEPReq+0x14>
                USBD_LL_StallEP(pdev, ep_addr);
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	f000 fabb 	bl	80093c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008e52:	4620      	mov	r0, r4
 8008e54:	2180      	movs	r1, #128	; 0x80
 8008e56:	f000 fab7 	bl	80093c8 <USBD_LL_StallEP>
 8008e5a:	e799      	b.n	8008d90 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e5c:	0668      	lsls	r0, r5, #25
 8008e5e:	d18f      	bne.n	8008d80 <USBD_StdEPReq+0x14>
              pep->status = 0x0000U;
 8008e60:	2300      	movs	r3, #0
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e62:	0611      	lsls	r1, r2, #24
 8008e64:	bf4c      	ite	mi
 8008e66:	f104 0114 	addmi.w	r1, r4, #20
 8008e6a:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e6e:	4620      	mov	r0, r4
              pep->status = 0x0000U;
 8008e70:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e72:	2202      	movs	r2, #2
 8008e74:	f000 f856 	bl	8008f24 <USBD_CtlSendData>
              break;
 8008e78:	e78a      	b.n	8008d90 <USBD_StdEPReq+0x24>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e7a:	699b      	ldr	r3, [r3, #24]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f43f af7f 	beq.w	8008d80 <USBD_StdEPReq+0x14>
 8008e82:	f005 037f 	and.w	r3, r5, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e86:	1c5e      	adds	r6, r3, #1
 8008e88:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8008e8c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8008e90:	e7bc      	b.n	8008e0c <USBD_StdEPReq+0xa0>
                pep->status = 0x0000U;
 8008e92:	6030      	str	r0, [r6, #0]
 8008e94:	e7c3      	b.n	8008e1e <USBD_StdEPReq+0xb2>
 8008e96:	bf00      	nop

08008e98 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8008e98:	780b      	ldrb	r3, [r1, #0]
 8008e9a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008e9c:	784b      	ldrb	r3, [r1, #1]
 8008e9e:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008ea0:	78ca      	ldrb	r2, [r1, #3]
 8008ea2:	788b      	ldrb	r3, [r1, #2]
 8008ea4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008ea8:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008eaa:	794a      	ldrb	r2, [r1, #5]
 8008eac:	790b      	ldrb	r3, [r1, #4]
 8008eae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008eb2:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008eb4:	79ca      	ldrb	r2, [r1, #7]
 8008eb6:	798b      	ldrb	r3, [r1, #6]
 8008eb8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008ebc:	80c3      	strh	r3, [r0, #6]
}
 8008ebe:	4770      	bx	lr

08008ec0 <USBD_CtlError>:
{
 8008ec0:	b510      	push	{r4, lr}
 8008ec2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8008ec4:	2180      	movs	r1, #128	; 0x80
 8008ec6:	f000 fa7f 	bl	80093c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008eca:	4620      	mov	r0, r4
}
 8008ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	f000 ba79 	b.w	80093c8 <USBD_LL_StallEP>
 8008ed6:	bf00      	nop

08008ed8 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 8008ed8:	b300      	cbz	r0, 8008f1c <USBD_GetString+0x44>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8008eda:	7803      	ldrb	r3, [r0, #0]
{
 8008edc:	b430      	push	{r4, r5}
  while (*buf != '\0')
 8008ede:	b1f3      	cbz	r3, 8008f1e <USBD_GetString+0x46>
 8008ee0:	4604      	mov	r4, r0
  uint8_t  len = 0U;
 8008ee2:	2300      	movs	r3, #0
  while (*buf != '\0')
 8008ee4:	f814 5f01 	ldrb.w	r5, [r4, #1]!
  {
    len++;
 8008ee8:	3301      	adds	r3, #1
 8008eea:	b2db      	uxtb	r3, r3
  while (*buf != '\0')
 8008eec:	2d00      	cmp	r5, #0
 8008eee:	d1f9      	bne.n	8008ee4 <USBD_GetString+0xc>
 8008ef0:	005b      	lsls	r3, r3, #1
 8008ef2:	3302      	adds	r3, #2
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008ef4:	2403      	movs	r4, #3
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008ef6:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008ef8:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008efa:	704c      	strb	r4, [r1, #1]
    while (*desc != '\0')
 8008efc:	7804      	ldrb	r4, [r0, #0]
 8008efe:	b15c      	cbz	r4, 8008f18 <USBD_GetString+0x40>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008f00:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 8008f02:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 8008f04:	1c5a      	adds	r2, r3, #1
 8008f06:	b2d2      	uxtb	r2, r2
 8008f08:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 8008f0a:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 8008f0c:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 8008f10:	3302      	adds	r3, #2
 8008f12:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 8008f14:	2c00      	cmp	r4, #0
 8008f16:	d1f5      	bne.n	8008f04 <USBD_GetString+0x2c>
}
 8008f18:	bc30      	pop	{r4, r5}
 8008f1a:	4770      	bx	lr
 8008f1c:	4770      	bx	lr
  while (*buf != '\0')
 8008f1e:	2302      	movs	r3, #2
 8008f20:	e7e8      	b.n	8008ef4 <USBD_GetString+0x1c>
 8008f22:	bf00      	nop

08008f24 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008f24:	b538      	push	{r3, r4, r5, lr}
 8008f26:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f28:	2502      	movs	r5, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f2a:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8008f2c:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f30:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f34:	2100      	movs	r1, #0
 8008f36:	f000 fa81 	bl	800943c <USBD_LL_Transmit>

  return USBD_OK;
}
 8008f3a:	2000      	movs	r0, #0
 8008f3c:	bd38      	pop	{r3, r4, r5, pc}
 8008f3e:	bf00      	nop

08008f40 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008f40:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f42:	4613      	mov	r3, r2
 8008f44:	460a      	mov	r2, r1
 8008f46:	2100      	movs	r1, #0
 8008f48:	f000 fa78 	bl	800943c <USBD_LL_Transmit>

  return USBD_OK;
}
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	bd08      	pop	{r3, pc}

08008f50 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008f50:	b538      	push	{r3, r4, r5, lr}
 8008f52:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f54:	2503      	movs	r5, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f56:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
 8008f58:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008f5c:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f60:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f64:	2100      	movs	r1, #0
 8008f66:	f000 fa77 	bl	8009458 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008f6a:	2000      	movs	r0, #0
 8008f6c:	bd38      	pop	{r3, r4, r5, pc}
 8008f6e:	bf00      	nop

08008f70 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008f70:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f72:	4613      	mov	r3, r2
 8008f74:	460a      	mov	r2, r1
 8008f76:	2100      	movs	r1, #0
 8008f78:	f000 fa6e 	bl	8009458 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	bd08      	pop	{r3, pc}

08008f80 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008f80:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008f82:	2204      	movs	r2, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f84:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008f86:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	f000 fa55 	bl	800943c <USBD_LL_Transmit>

  return USBD_OK;
}
 8008f92:	2000      	movs	r0, #0
 8008f94:	bd08      	pop	{r3, pc}
 8008f96:	bf00      	nop

08008f98 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008f98:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f9a:	2205      	movs	r2, #5

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f9c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f9e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	f000 fa57 	bl	8009458 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008faa:	2000      	movs	r0, #0
 8008fac:	bd08      	pop	{r3, pc}
 8008fae:	bf00      	nop

08008fb0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008fb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	4910      	ldr	r1, [pc, #64]	; (8008ff8 <MX_USB_DEVICE_Init+0x48>)
 8008fb6:	4811      	ldr	r0, [pc, #68]	; (8008ffc <MX_USB_DEVICE_Init+0x4c>)
 8008fb8:	f7ff fbda 	bl	8008770 <USBD_Init>
 8008fbc:	b9c0      	cbnz	r0, 8008ff0 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008fbe:	4910      	ldr	r1, [pc, #64]	; (8009000 <MX_USB_DEVICE_Init+0x50>)
 8008fc0:	480e      	ldr	r0, [pc, #56]	; (8008ffc <MX_USB_DEVICE_Init+0x4c>)
 8008fc2:	f7ff fbeb 	bl	800879c <USBD_RegisterClass>
 8008fc6:	b980      	cbnz	r0, 8008fea <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008fc8:	490e      	ldr	r1, [pc, #56]	; (8009004 <MX_USB_DEVICE_Init+0x54>)
 8008fca:	480c      	ldr	r0, [pc, #48]	; (8008ffc <MX_USB_DEVICE_Init+0x4c>)
 8008fcc:	f7ff fb88 	bl	80086e0 <USBD_CDC_RegisterInterface>
 8008fd0:	b940      	cbnz	r0, 8008fe4 <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008fd2:	480a      	ldr	r0, [pc, #40]	; (8008ffc <MX_USB_DEVICE_Init+0x4c>)
 8008fd4:	f7ff fbea 	bl	80087ac <USBD_Start>
 8008fd8:	b900      	cbnz	r0, 8008fdc <MX_USB_DEVICE_Init+0x2c>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008fda:	bd08      	pop	{r3, pc}
 8008fdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8008fe0:	f7f9 bca2 	b.w	8002928 <Error_Handler>
    Error_Handler();
 8008fe4:	f7f9 fca0 	bl	8002928 <Error_Handler>
 8008fe8:	e7f3      	b.n	8008fd2 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8008fea:	f7f9 fc9d 	bl	8002928 <Error_Handler>
 8008fee:	e7eb      	b.n	8008fc8 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8008ff0:	f7f9 fc9a 	bl	8002928 <Error_Handler>
 8008ff4:	e7e3      	b.n	8008fbe <MX_USB_DEVICE_Init+0xe>
 8008ff6:	bf00      	nop
 8008ff8:	20000164 	.word	0x20000164
 8008ffc:	20000d2c 	.word	0x20000d2c
 8009000:	20000044 	.word	0x20000044
 8009004:	20000154 	.word	0x20000154

08009008 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8009008:	2000      	movs	r0, #0
 800900a:	4770      	bx	lr

0800900c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800900c:	2000      	movs	r0, #0
 800900e:	4770      	bx	lr

08009010 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009010:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009012:	4c05      	ldr	r4, [pc, #20]	; (8009028 <CDC_Receive_FS+0x18>)
 8009014:	4601      	mov	r1, r0
 8009016:	4620      	mov	r0, r4
 8009018:	f7ff fb72 	bl	8008700 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800901c:	4620      	mov	r0, r4
 800901e:	f7ff fb8f 	bl	8008740 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8009022:	2000      	movs	r0, #0
 8009024:	bd10      	pop	{r4, pc}
 8009026:	bf00      	nop
 8009028:	20000d2c 	.word	0x20000d2c

0800902c <CDC_Init_FS>:
{
 800902c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800902e:	4c06      	ldr	r4, [pc, #24]	; (8009048 <CDC_Init_FS+0x1c>)
 8009030:	2200      	movs	r2, #0
 8009032:	4620      	mov	r0, r4
 8009034:	4905      	ldr	r1, [pc, #20]	; (800904c <CDC_Init_FS+0x20>)
 8009036:	f7ff fb5b 	bl	80086f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800903a:	4620      	mov	r0, r4
 800903c:	4904      	ldr	r1, [pc, #16]	; (8009050 <CDC_Init_FS+0x24>)
 800903e:	f7ff fb5f 	bl	8008700 <USBD_CDC_SetRxBuffer>
}
 8009042:	2000      	movs	r0, #0
 8009044:	bd10      	pop	{r4, pc}
 8009046:	bf00      	nop
 8009048:	20000d2c 	.word	0x20000d2c
 800904c:	200013d8 	.word	0x200013d8
 8009050:	20000ff0 	.word	0x20000ff0

08009054 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009054:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009056:	4c09      	ldr	r4, [pc, #36]	; (800907c <CDC_Transmit_FS+0x28>)
 8009058:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 800905c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009060:	b10b      	cbz	r3, 8009066 <CDC_Transmit_FS+0x12>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 8009062:	2001      	movs	r0, #1
 8009064:	bd10      	pop	{r4, pc}
 8009066:	460a      	mov	r2, r1
 8009068:	4601      	mov	r1, r0
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800906a:	4620      	mov	r0, r4
 800906c:	f7ff fb40 	bl	80086f0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009070:	4620      	mov	r0, r4
}
 8009072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009076:	f7ff bb49 	b.w	800870c <USBD_CDC_TransmitPacket>
 800907a:	bf00      	nop
 800907c:	20000d2c 	.word	0x20000d2c

08009080 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009080:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8009082:	4801      	ldr	r0, [pc, #4]	; (8009088 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8009084:	800b      	strh	r3, [r1, #0]
}
 8009086:	4770      	bx	lr
 8009088:	20000180 	.word	0x20000180

0800908c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800908c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800908e:	4801      	ldr	r0, [pc, #4]	; (8009094 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8009090:	800b      	strh	r3, [r1, #0]
}
 8009092:	4770      	bx	lr
 8009094:	20000194 	.word	0x20000194

08009098 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009098:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800909a:	4c04      	ldr	r4, [pc, #16]	; (80090ac <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800909c:	460a      	mov	r2, r1
 800909e:	4804      	ldr	r0, [pc, #16]	; (80090b0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80090a0:	4621      	mov	r1, r4
 80090a2:	f7ff ff19 	bl	8008ed8 <USBD_GetString>
  return USBD_StrDesc;
}
 80090a6:	4620      	mov	r0, r4
 80090a8:	bd10      	pop	{r4, pc}
 80090aa:	bf00      	nop
 80090ac:	200017c0 	.word	0x200017c0
 80090b0:	0800e428 	.word	0x0800e428

080090b4 <USBD_FS_ProductStrDescriptor>:
{
 80090b4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090b6:	4c04      	ldr	r4, [pc, #16]	; (80090c8 <USBD_FS_ProductStrDescriptor+0x14>)
 80090b8:	460a      	mov	r2, r1
 80090ba:	4804      	ldr	r0, [pc, #16]	; (80090cc <USBD_FS_ProductStrDescriptor+0x18>)
 80090bc:	4621      	mov	r1, r4
 80090be:	f7ff ff0b 	bl	8008ed8 <USBD_GetString>
}
 80090c2:	4620      	mov	r0, r4
 80090c4:	bd10      	pop	{r4, pc}
 80090c6:	bf00      	nop
 80090c8:	200017c0 	.word	0x200017c0
 80090cc:	0800e43c 	.word	0x0800e43c

080090d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090d0:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090d2:	4c04      	ldr	r4, [pc, #16]	; (80090e4 <USBD_FS_ConfigStrDescriptor+0x14>)
 80090d4:	460a      	mov	r2, r1
 80090d6:	4804      	ldr	r0, [pc, #16]	; (80090e8 <USBD_FS_ConfigStrDescriptor+0x18>)
 80090d8:	4621      	mov	r1, r4
 80090da:	f7ff fefd 	bl	8008ed8 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80090de:	4620      	mov	r0, r4
 80090e0:	bd10      	pop	{r4, pc}
 80090e2:	bf00      	nop
 80090e4:	200017c0 	.word	0x200017c0
 80090e8:	0800e40c 	.word	0x0800e40c

080090ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090ec:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090ee:	4c04      	ldr	r4, [pc, #16]	; (8009100 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80090f0:	460a      	mov	r2, r1
 80090f2:	4804      	ldr	r0, [pc, #16]	; (8009104 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80090f4:	4621      	mov	r1, r4
 80090f6:	f7ff feef 	bl	8008ed8 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80090fa:	4620      	mov	r0, r4
 80090fc:	bd10      	pop	{r4, pc}
 80090fe:	bf00      	nop
 8009100:	200017c0 	.word	0x200017c0
 8009104:	0800e418 	.word	0x0800e418

08009108 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8009108:	201a      	movs	r0, #26
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800910a:	4a44      	ldr	r2, [pc, #272]	; (800921c <USBD_FS_SerialStrDescriptor+0x114>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800910c:	4b44      	ldr	r3, [pc, #272]	; (8009220 <USBD_FS_SerialStrDescriptor+0x118>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800910e:	6812      	ldr	r2, [r2, #0]

  deviceserial0 += deviceserial2;
 8009110:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 8009112:	8008      	strh	r0, [r1, #0]

  if (deviceserial0 != 0)
 8009114:	18d2      	adds	r2, r2, r3
 8009116:	d101      	bne.n	800911c <USBD_FS_SerialStrDescriptor+0x14>
}
 8009118:	4842      	ldr	r0, [pc, #264]	; (8009224 <USBD_FS_SerialStrDescriptor+0x11c>)
 800911a:	4770      	bx	lr
{
 800911c:	b410      	push	{r4}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800911e:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8009120:	0f13      	lsrs	r3, r2, #28
 8009122:	b2d8      	uxtb	r0, r3
 8009124:	2b09      	cmp	r3, #9
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009126:	4940      	ldr	r1, [pc, #256]	; (8009228 <USBD_FS_SerialStrDescriptor+0x120>)
      pbuf[2 * idx] = (value >> 28) + '0';
 8009128:	4b3e      	ldr	r3, [pc, #248]	; (8009224 <USBD_FS_SerialStrDescriptor+0x11c>)
 800912a:	bf94      	ite	ls
 800912c:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800912e:	3037      	addhi	r0, #55	; 0x37
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009130:	6809      	ldr	r1, [r1, #0]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009132:	7098      	strb	r0, [r3, #2]
    if (((value >> 28)) < 0xA)
 8009134:	f3c2 6003 	ubfx	r0, r2, #24, #4
 8009138:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800913a:	70dc      	strb	r4, [r3, #3]
 800913c:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 800913e:	bf94      	ite	ls
 8009140:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009142:	3437      	addhi	r4, #55	; 0x37
 8009144:	711c      	strb	r4, [r3, #4]
    pbuf[2 * idx + 1] = 0;
 8009146:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8009148:	f3c2 5003 	ubfx	r0, r2, #20, #4
 800914c:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800914e:	715c      	strb	r4, [r3, #5]
 8009150:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8009152:	bf94      	ite	ls
 8009154:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009156:	3437      	addhi	r4, #55	; 0x37
 8009158:	719c      	strb	r4, [r3, #6]
    pbuf[2 * idx + 1] = 0;
 800915a:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 800915c:	f3c2 4003 	ubfx	r0, r2, #16, #4
 8009160:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8009162:	71dc      	strb	r4, [r3, #7]
 8009164:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8009166:	bf94      	ite	ls
 8009168:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800916a:	3437      	addhi	r4, #55	; 0x37
 800916c:	721c      	strb	r4, [r3, #8]
    pbuf[2 * idx + 1] = 0;
 800916e:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8009170:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8009174:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8009176:	725c      	strb	r4, [r3, #9]
 8009178:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 800917a:	bf94      	ite	ls
 800917c:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800917e:	3437      	addhi	r4, #55	; 0x37
 8009180:	729c      	strb	r4, [r3, #10]
    pbuf[2 * idx + 1] = 0;
 8009182:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8009184:	f3c2 2003 	ubfx	r0, r2, #8, #4
 8009188:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800918a:	72dc      	strb	r4, [r3, #11]
 800918c:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 800918e:	bf94      	ite	ls
 8009190:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009192:	3437      	addhi	r4, #55	; 0x37
 8009194:	731c      	strb	r4, [r3, #12]
    pbuf[2 * idx + 1] = 0;
 8009196:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8009198:	f3c2 1003 	ubfx	r0, r2, #4, #4
 800919c:	2809      	cmp	r0, #9
 800919e:	f002 020f 	and.w	r2, r2, #15
    pbuf[2 * idx + 1] = 0;
 80091a2:	735c      	strb	r4, [r3, #13]
 80091a4:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 80091a6:	bf98      	it	ls
 80091a8:	3430      	addls	r4, #48	; 0x30
 80091aa:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80091ac:	bf88      	it	hi
 80091ae:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 80091b0:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 80091b2:	bf94      	ite	ls
 80091b4:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80091b6:	3037      	addhi	r0, #55	; 0x37
 80091b8:	7418      	strb	r0, [r3, #16]
    pbuf[2 * idx + 1] = 0;
 80091ba:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 80091bc:	0f0a      	lsrs	r2, r1, #28
 80091be:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 80091c0:	7458      	strb	r0, [r3, #17]
 80091c2:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 80091c4:	bf94      	ite	ls
 80091c6:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80091c8:	3037      	addhi	r0, #55	; 0x37
 80091ca:	7498      	strb	r0, [r3, #18]
    pbuf[2 * idx + 1] = 0;
 80091cc:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 80091ce:	f3c1 6203 	ubfx	r2, r1, #24, #4
 80091d2:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 80091d4:	74d8      	strb	r0, [r3, #19]
 80091d6:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 80091d8:	bf94      	ite	ls
 80091da:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80091dc:	3037      	addhi	r0, #55	; 0x37
 80091de:	7518      	strb	r0, [r3, #20]
    pbuf[2 * idx + 1] = 0;
 80091e0:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 80091e2:	f3c1 5203 	ubfx	r2, r1, #20, #4
 80091e6:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 80091e8:	7558      	strb	r0, [r3, #21]
    if (((value >> 28)) < 0xA)
 80091ea:	f3c1 4103 	ubfx	r1, r1, #16, #4
 80091ee:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 80091f0:	bf98      	it	ls
 80091f2:	3030      	addls	r0, #48	; 0x30
 80091f4:	b2ca      	uxtb	r2, r1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80091f6:	bf88      	it	hi
 80091f8:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 80091fa:	2909      	cmp	r1, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 80091fc:	bf94      	ite	ls
 80091fe:	3230      	addls	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009200:	3237      	addhi	r2, #55	; 0x37
 8009202:	739c      	strb	r4, [r3, #14]
 8009204:	7598      	strb	r0, [r3, #22]
    pbuf[2 * idx + 1] = 0;
 8009206:	2400      	movs	r4, #0
 8009208:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800920a:	761a      	strb	r2, [r3, #24]
    pbuf[2 * idx + 1] = 0;
 800920c:	2200      	movs	r2, #0
 800920e:	75d8      	strb	r0, [r3, #23]
 8009210:	73dc      	strb	r4, [r3, #15]
 8009212:	765a      	strb	r2, [r3, #25]
}
 8009214:	4803      	ldr	r0, [pc, #12]	; (8009224 <USBD_FS_SerialStrDescriptor+0x11c>)
 8009216:	bc10      	pop	{r4}
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	1ffff7e8 	.word	0x1ffff7e8
 8009220:	1ffff7f0 	.word	0x1ffff7f0
 8009224:	20000198 	.word	0x20000198
 8009228:	1ffff7ec 	.word	0x1ffff7ec

0800922c <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 800922c:	6802      	ldr	r2, [r0, #0]
 800922e:	4b0e      	ldr	r3, [pc, #56]	; (8009268 <HAL_PCD_MspInit+0x3c>)
 8009230:	429a      	cmp	r2, r3
 8009232:	d000      	beq.n	8009236 <HAL_PCD_MspInit+0xa>
 8009234:	4770      	bx	lr
  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009236:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8009238:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
{
 800923c:	b510      	push	{r4, lr}
    __HAL_RCC_USB_CLK_ENABLE();
 800923e:	69dc      	ldr	r4, [r3, #28]
{
 8009240:	b082      	sub	sp, #8
    __HAL_RCC_USB_CLK_ENABLE();
 8009242:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8009246:	61dc      	str	r4, [r3, #28]
 8009248:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800924a:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800924c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009250:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009252:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8009254:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009256:	f7fc f9fb 	bl	8005650 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800925a:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800925c:	b002      	add	sp, #8
 800925e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009262:	f7fc ba2b 	b.w	80056bc <HAL_NVIC_EnableIRQ>
 8009266:	bf00      	nop
 8009268:	40005c00 	.word	0x40005c00

0800926c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800926c:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8009270:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8009274:	f7ff bab2 	b.w	80087dc <USBD_LL_SetupStage>

08009278 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009278:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800927c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8009280:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8009284:	f7ff bada 	b.w	800883c <USBD_LL_DataOutStage>

08009288 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009288:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800928c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800928e:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8009292:	f7ff bb13 	b.w	80088bc <USBD_LL_DataInStage>
 8009296:	bf00      	nop

08009298 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009298:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 800929c:	f7ff bbae 	b.w	80089fc <USBD_LL_SOF>

080092a0 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80092a0:	6883      	ldr	r3, [r0, #8]
{ 
 80092a2:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80092a4:	2b02      	cmp	r3, #2
{ 
 80092a6:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80092a8:	d001      	beq.n	80092ae <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 80092aa:	f7f9 fb3d 	bl	8002928 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80092ae:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 80092b2:	2101      	movs	r1, #1
 80092b4:	f7ff fb8a 	bl	80089cc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80092b8:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 80092bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80092c0:	f7ff bb5c 	b.w	800897c <USBD_LL_Reset>

080092c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092c4:	b510      	push	{r4, lr}
 80092c6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80092c8:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80092cc:	f7ff fb82 	bl	80089d4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80092d0:	69a3      	ldr	r3, [r4, #24]
 80092d2:	b123      	cbz	r3, 80092de <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092d4:	4a02      	ldr	r2, [pc, #8]	; (80092e0 <HAL_PCD_SuspendCallback+0x1c>)
 80092d6:	6913      	ldr	r3, [r2, #16]
 80092d8:	f043 0306 	orr.w	r3, r3, #6
 80092dc:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80092de:	bd10      	pop	{r4, pc}
 80092e0:	e000ed00 	.word	0xe000ed00

080092e4 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80092e4:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80092e8:	f7ff bb7e 	b.w	80089e8 <USBD_LL_Resume>

080092ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80092ec:	b538      	push	{r3, r4, r5, lr}
 80092ee:	4604      	mov	r4, r0
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80092f0:	2200      	movs	r2, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80092f2:	2508      	movs	r5, #8
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80092f4:	2102      	movs	r1, #2
  hpcd_USB_FS.pData = pdev;
 80092f6:	4b1c      	ldr	r3, [pc, #112]	; (8009368 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Instance = USB;
 80092f8:	481c      	ldr	r0, [pc, #112]	; (800936c <USBD_LL_Init+0x80>)
  pdev->pData = &hpcd_USB_FS;
 80092fa:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 80092fe:	6018      	str	r0, [r3, #0]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009300:	4618      	mov	r0, r3
  hpcd_USB_FS.pData = pdev;
 8009302:	f8c3 4268 	str.w	r4, [r3, #616]	; 0x268
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009306:	e9c3 5101 	strd	r5, r1, [r3, #4]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800930a:	e9c3 2206 	strd	r2, r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800930e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009310:	f7fd f9a8 	bl	8006664 <HAL_PCD_Init>
 8009314:	b108      	cbz	r0, 800931a <USBD_LL_Init+0x2e>
  {
    Error_Handler( );
 8009316:	f7f9 fb07 	bl	8002928 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800931a:	2200      	movs	r2, #0
 800931c:	2318      	movs	r3, #24
 800931e:	4611      	mov	r1, r2
 8009320:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009324:	f7fd fdbe 	bl	8006ea4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009328:	2358      	movs	r3, #88	; 0x58
 800932a:	2200      	movs	r2, #0
 800932c:	2180      	movs	r1, #128	; 0x80
 800932e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009332:	f7fd fdb7 	bl	8006ea4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009336:	23c0      	movs	r3, #192	; 0xc0
 8009338:	2200      	movs	r2, #0
 800933a:	2181      	movs	r1, #129	; 0x81
 800933c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009340:	f7fd fdb0 	bl	8006ea4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009344:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009348:	2200      	movs	r2, #0
 800934a:	2101      	movs	r1, #1
 800934c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009350:	f7fd fda8 	bl	8006ea4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009354:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009358:	f44f 7380 	mov.w	r3, #256	; 0x100
 800935c:	2200      	movs	r2, #0
 800935e:	2182      	movs	r1, #130	; 0x82
 8009360:	f7fd fda0 	bl	8006ea4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8009364:	2000      	movs	r0, #0
 8009366:	bd38      	pop	{r3, r4, r5, pc}
 8009368:	200019c0 	.word	0x200019c0
 800936c:	40005c00 	.word	0x40005c00

08009370 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009370:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009372:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009376:	f7fd f9f3 	bl	8006760 <HAL_PCD_Start>
 800937a:	2803      	cmp	r0, #3
 800937c:	bf96      	itet	ls
 800937e:	4b02      	ldrls	r3, [pc, #8]	; (8009388 <USBD_LL_Start+0x18>)
 8009380:	2002      	movhi	r0, #2
 8009382:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8009384:	bd08      	pop	{r3, pc}
 8009386:	bf00      	nop
 8009388:	0800e448 	.word	0x0800e448

0800938c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800938c:	b510      	push	{r4, lr}
 800938e:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009390:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009394:	4613      	mov	r3, r2
 8009396:	4622      	mov	r2, r4
 8009398:	f7fd fc7c 	bl	8006c94 <HAL_PCD_EP_Open>
 800939c:	2803      	cmp	r0, #3
 800939e:	bf96      	itet	ls
 80093a0:	4b01      	ldrls	r3, [pc, #4]	; (80093a8 <USBD_LL_OpenEP+0x1c>)
 80093a2:	2002      	movhi	r0, #2
 80093a4:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 80093a6:	bd10      	pop	{r4, pc}
 80093a8:	0800e448 	.word	0x0800e448

080093ac <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093ac:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80093ae:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80093b2:	f7fd fca1 	bl	8006cf8 <HAL_PCD_EP_Close>
 80093b6:	2803      	cmp	r0, #3
 80093b8:	bf96      	itet	ls
 80093ba:	4b02      	ldrls	r3, [pc, #8]	; (80093c4 <USBD_LL_CloseEP+0x18>)
 80093bc:	2002      	movhi	r0, #2
 80093be:	5c18      	ldrbls	r0, [r3, r0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 80093c0:	bd08      	pop	{r3, pc}
 80093c2:	bf00      	nop
 80093c4:	0800e448 	.word	0x0800e448

080093c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093c8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80093ca:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80093ce:	f7fd fcf5 	bl	8006dbc <HAL_PCD_EP_SetStall>
 80093d2:	2803      	cmp	r0, #3
 80093d4:	bf96      	itet	ls
 80093d6:	4b02      	ldrls	r3, [pc, #8]	; (80093e0 <USBD_LL_StallEP+0x18>)
 80093d8:	2002      	movhi	r0, #2
 80093da:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 80093dc:	bd08      	pop	{r3, pc}
 80093de:	bf00      	nop
 80093e0:	0800e448 	.word	0x0800e448

080093e4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093e4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80093e6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80093ea:	f7fd fd23 	bl	8006e34 <HAL_PCD_EP_ClrStall>
 80093ee:	2803      	cmp	r0, #3
 80093f0:	bf96      	itet	ls
 80093f2:	4b02      	ldrls	r3, [pc, #8]	; (80093fc <USBD_LL_ClearStallEP+0x18>)
 80093f4:	2002      	movhi	r0, #2
 80093f6:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 80093f8:	bd08      	pop	{r3, pc}
 80093fa:	bf00      	nop
 80093fc:	0800e448 	.word	0x0800e448

08009400 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8009400:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009402:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8009406:	d404      	bmi.n	8009412 <USBD_LL_IsStallEP+0x12>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009408:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800940c:	f893 012a 	ldrb.w	r0, [r3, #298]	; 0x12a
  }
}
 8009410:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009412:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8009416:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800941a:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 800941e:	4770      	bx	lr

08009420 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009420:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009422:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009426:	f7fd fc21 	bl	8006c6c <HAL_PCD_SetAddress>
 800942a:	2803      	cmp	r0, #3
 800942c:	bf96      	itet	ls
 800942e:	4b02      	ldrls	r3, [pc, #8]	; (8009438 <USBD_LL_SetUSBAddress+0x18>)
 8009430:	2002      	movhi	r0, #2
 8009432:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8009434:	bd08      	pop	{r3, pc}
 8009436:	bf00      	nop
 8009438:	0800e448 	.word	0x0800e448

0800943c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800943c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800943e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009442:	f7fd fca5 	bl	8006d90 <HAL_PCD_EP_Transmit>
 8009446:	2803      	cmp	r0, #3
 8009448:	bf96      	itet	ls
 800944a:	4b02      	ldrls	r3, [pc, #8]	; (8009454 <USBD_LL_Transmit+0x18>)
 800944c:	2002      	movhi	r0, #2
 800944e:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8009450:	bd08      	pop	{r3, pc}
 8009452:	bf00      	nop
 8009454:	0800e448 	.word	0x0800e448

08009458 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009458:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800945a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800945e:	f7fd fc77 	bl	8006d50 <HAL_PCD_EP_Receive>
 8009462:	2803      	cmp	r0, #3
 8009464:	bf96      	itet	ls
 8009466:	4b02      	ldrls	r3, [pc, #8]	; (8009470 <USBD_LL_PrepareReceive+0x18>)
 8009468:	2002      	movhi	r0, #2
 800946a:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 800946c:	bd08      	pop	{r3, pc}
 800946e:	bf00      	nop
 8009470:	0800e448 	.word	0x0800e448

08009474 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009474:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009478:	f7fd bc82 	b.w	8006d80 <HAL_PCD_EP_GetRxCount>

0800947c <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 800947c:	4800      	ldr	r0, [pc, #0]	; (8009480 <USBD_static_malloc+0x4>)
 800947e:	4770      	bx	lr
 8009480:	200003c8 	.word	0x200003c8

08009484 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop

08009488 <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop

0800948c <arm_mat_trans_f32>:
 800948c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009490:	8803      	ldrh	r3, [r0, #0]
 8009492:	884d      	ldrh	r5, [r1, #2]
 8009494:	6847      	ldr	r7, [r0, #4]
 8009496:	429d      	cmp	r5, r3
 8009498:	b083      	sub	sp, #12
 800949a:	8840      	ldrh	r0, [r0, #2]
 800949c:	684a      	ldr	r2, [r1, #4]
 800949e:	d149      	bne.n	8009534 <arm_mat_trans_f32+0xa8>
 80094a0:	f8b1 e000 	ldrh.w	lr, [r1]
 80094a4:	4586      	cmp	lr, r0
 80094a6:	d145      	bne.n	8009534 <arm_mat_trans_f32+0xa8>
 80094a8:	4694      	mov	ip, r2
 80094aa:	ea4f 089e 	mov.w	r8, lr, lsr #2
 80094ae:	00a9      	lsls	r1, r5, #2
 80094b0:	fb08 f901 	mul.w	r9, r8, r1
 80094b4:	f00e 0e03 	and.w	lr, lr, #3
 80094b8:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 80094bc:	ea4f 038e 	mov.w	r3, lr, lsl #2
 80094c0:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80094c4:	eb02 0a01 	add.w	sl, r2, r1
 80094c8:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 80094cc:	9301      	str	r3, [sp, #4]
 80094ce:	00b6      	lsls	r6, r6, #2
 80094d0:	012d      	lsls	r5, r5, #4
 80094d2:	4663      	mov	r3, ip
 80094d4:	f1b8 0f00 	cmp.w	r8, #0
 80094d8:	d017      	beq.n	800950a <arm_mat_trans_f32+0x7e>
 80094da:	4640      	mov	r0, r8
 80094dc:	f107 0210 	add.w	r2, r7, #16
 80094e0:	f852 4c10 	ldr.w	r4, [r2, #-16]
 80094e4:	3801      	subs	r0, #1
 80094e6:	601c      	str	r4, [r3, #0]
 80094e8:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 80094ec:	f102 0210 	add.w	r2, r2, #16
 80094f0:	505c      	str	r4, [r3, r1]
 80094f2:	f852 4c18 	ldr.w	r4, [r2, #-24]
 80094f6:	f843 4011 	str.w	r4, [r3, r1, lsl #1]
 80094fa:	f852 4c14 	ldr.w	r4, [r2, #-20]
 80094fe:	519c      	str	r4, [r3, r6]
 8009500:	442b      	add	r3, r5
 8009502:	d1ed      	bne.n	80094e0 <arm_mat_trans_f32+0x54>
 8009504:	445f      	add	r7, fp
 8009506:	eb09 030c 	add.w	r3, r9, ip
 800950a:	f1be 0f00 	cmp.w	lr, #0
 800950e:	d009      	beq.n	8009524 <arm_mat_trans_f32+0x98>
 8009510:	4672      	mov	r2, lr
 8009512:	4638      	mov	r0, r7
 8009514:	f850 4b04 	ldr.w	r4, [r0], #4
 8009518:	3a01      	subs	r2, #1
 800951a:	601c      	str	r4, [r3, #0]
 800951c:	440b      	add	r3, r1
 800951e:	d1f9      	bne.n	8009514 <arm_mat_trans_f32+0x88>
 8009520:	9b01      	ldr	r3, [sp, #4]
 8009522:	441f      	add	r7, r3
 8009524:	f10c 0c04 	add.w	ip, ip, #4
 8009528:	45d4      	cmp	ip, sl
 800952a:	d1d2      	bne.n	80094d2 <arm_mat_trans_f32+0x46>
 800952c:	2000      	movs	r0, #0
 800952e:	b003      	add	sp, #12
 8009530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009534:	f06f 0002 	mvn.w	r0, #2
 8009538:	e7f9      	b.n	800952e <arm_mat_trans_f32+0xa2>
 800953a:	bf00      	nop

0800953c <arm_mat_sub_f32>:
 800953c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009540:	6803      	ldr	r3, [r0, #0]
 8009542:	e9d1 4b00 	ldrd	r4, fp, [r1]
 8009546:	42a3      	cmp	r3, r4
 8009548:	b083      	sub	sp, #12
 800954a:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800954e:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8009552:	d162      	bne.n	800961a <arm_mat_sub_f32+0xde>
 8009554:	6812      	ldr	r2, [r2, #0]
 8009556:	4293      	cmp	r3, r2
 8009558:	d15f      	bne.n	800961a <arm_mat_sub_f32+0xde>
 800955a:	8803      	ldrh	r3, [r0, #0]
 800955c:	8847      	ldrh	r7, [r0, #2]
 800955e:	fb07 f703 	mul.w	r7, r7, r3
 8009562:	08bb      	lsrs	r3, r7, #2
 8009564:	9301      	str	r3, [sp, #4]
 8009566:	d035      	beq.n	80095d4 <arm_mat_sub_f32+0x98>
 8009568:	4698      	mov	r8, r3
 800956a:	f10a 0610 	add.w	r6, sl, #16
 800956e:	f10b 0510 	add.w	r5, fp, #16
 8009572:	f109 0410 	add.w	r4, r9, #16
 8009576:	f855 1c10 	ldr.w	r1, [r5, #-16]
 800957a:	f856 0c10 	ldr.w	r0, [r6, #-16]
 800957e:	f7f7 faf7 	bl	8000b70 <__aeabi_fsub>
 8009582:	f844 0c10 	str.w	r0, [r4, #-16]
 8009586:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 800958a:	f856 0c0c 	ldr.w	r0, [r6, #-12]
 800958e:	f7f7 faef 	bl	8000b70 <__aeabi_fsub>
 8009592:	f844 0c0c 	str.w	r0, [r4, #-12]
 8009596:	f855 1c08 	ldr.w	r1, [r5, #-8]
 800959a:	f856 0c08 	ldr.w	r0, [r6, #-8]
 800959e:	f7f7 fae7 	bl	8000b70 <__aeabi_fsub>
 80095a2:	f844 0c08 	str.w	r0, [r4, #-8]
 80095a6:	f855 1c04 	ldr.w	r1, [r5, #-4]
 80095aa:	f856 0c04 	ldr.w	r0, [r6, #-4]
 80095ae:	f7f7 fadf 	bl	8000b70 <__aeabi_fsub>
 80095b2:	f1b8 0801 	subs.w	r8, r8, #1
 80095b6:	f844 0c04 	str.w	r0, [r4, #-4]
 80095ba:	f105 0510 	add.w	r5, r5, #16
 80095be:	f106 0610 	add.w	r6, r6, #16
 80095c2:	f104 0410 	add.w	r4, r4, #16
 80095c6:	d1d6      	bne.n	8009576 <arm_mat_sub_f32+0x3a>
 80095c8:	9b01      	ldr	r3, [sp, #4]
 80095ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80095ce:	44c2      	add	sl, r8
 80095d0:	44c3      	add	fp, r8
 80095d2:	44c1      	add	r9, r8
 80095d4:	f017 0703 	ands.w	r7, r7, #3
 80095d8:	d01b      	beq.n	8009612 <arm_mat_sub_f32+0xd6>
 80095da:	f8db 1000 	ldr.w	r1, [fp]
 80095de:	f8da 0000 	ldr.w	r0, [sl]
 80095e2:	f7f7 fac5 	bl	8000b70 <__aeabi_fsub>
 80095e6:	3f01      	subs	r7, #1
 80095e8:	f8c9 0000 	str.w	r0, [r9]
 80095ec:	d011      	beq.n	8009612 <arm_mat_sub_f32+0xd6>
 80095ee:	f8db 1004 	ldr.w	r1, [fp, #4]
 80095f2:	f8da 0004 	ldr.w	r0, [sl, #4]
 80095f6:	f7f7 fabb 	bl	8000b70 <__aeabi_fsub>
 80095fa:	2f01      	cmp	r7, #1
 80095fc:	f8c9 0004 	str.w	r0, [r9, #4]
 8009600:	d007      	beq.n	8009612 <arm_mat_sub_f32+0xd6>
 8009602:	f8db 1008 	ldr.w	r1, [fp, #8]
 8009606:	f8da 0008 	ldr.w	r0, [sl, #8]
 800960a:	f7f7 fab1 	bl	8000b70 <__aeabi_fsub>
 800960e:	f8c9 0008 	str.w	r0, [r9, #8]
 8009612:	2000      	movs	r0, #0
 8009614:	b003      	add	sp, #12
 8009616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800961a:	f06f 0002 	mvn.w	r0, #2
 800961e:	e7f9      	b.n	8009614 <arm_mat_sub_f32+0xd8>

08009620 <arm_mat_scale_f32>:
 8009620:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009624:	e9d2 3900 	ldrd	r3, r9, [r2]
 8009628:	6804      	ldr	r4, [r0, #0]
 800962a:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800962e:	429c      	cmp	r4, r3
 8009630:	d154      	bne.n	80096dc <arm_mat_scale_f32+0xbc>
 8009632:	8803      	ldrh	r3, [r0, #0]
 8009634:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 8009638:	460e      	mov	r6, r1
 800963a:	fb08 f803 	mul.w	r8, r8, r3
 800963e:	ea5f 0b98 	movs.w	fp, r8, lsr #2
 8009642:	d02a      	beq.n	800969a <arm_mat_scale_f32+0x7a>
 8009644:	465f      	mov	r7, fp
 8009646:	f10a 0510 	add.w	r5, sl, #16
 800964a:	f109 0410 	add.w	r4, r9, #16
 800964e:	f855 0c10 	ldr.w	r0, [r5, #-16]
 8009652:	4631      	mov	r1, r6
 8009654:	f7f7 fb96 	bl	8000d84 <__aeabi_fmul>
 8009658:	f844 0c10 	str.w	r0, [r4, #-16]
 800965c:	f855 0c0c 	ldr.w	r0, [r5, #-12]
 8009660:	4631      	mov	r1, r6
 8009662:	f7f7 fb8f 	bl	8000d84 <__aeabi_fmul>
 8009666:	f844 0c0c 	str.w	r0, [r4, #-12]
 800966a:	f855 0c08 	ldr.w	r0, [r5, #-8]
 800966e:	4631      	mov	r1, r6
 8009670:	f7f7 fb88 	bl	8000d84 <__aeabi_fmul>
 8009674:	f844 0c08 	str.w	r0, [r4, #-8]
 8009678:	f855 0c04 	ldr.w	r0, [r5, #-4]
 800967c:	4631      	mov	r1, r6
 800967e:	f7f7 fb81 	bl	8000d84 <__aeabi_fmul>
 8009682:	3f01      	subs	r7, #1
 8009684:	f844 0c04 	str.w	r0, [r4, #-4]
 8009688:	f105 0510 	add.w	r5, r5, #16
 800968c:	f104 0410 	add.w	r4, r4, #16
 8009690:	d1dd      	bne.n	800964e <arm_mat_scale_f32+0x2e>
 8009692:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
 8009696:	44da      	add	sl, fp
 8009698:	44d9      	add	r9, fp
 800969a:	f018 0803 	ands.w	r8, r8, #3
 800969e:	d01a      	beq.n	80096d6 <arm_mat_scale_f32+0xb6>
 80096a0:	f8da 0000 	ldr.w	r0, [sl]
 80096a4:	4631      	mov	r1, r6
 80096a6:	f7f7 fb6d 	bl	8000d84 <__aeabi_fmul>
 80096aa:	f1b8 0801 	subs.w	r8, r8, #1
 80096ae:	f8c9 0000 	str.w	r0, [r9]
 80096b2:	d010      	beq.n	80096d6 <arm_mat_scale_f32+0xb6>
 80096b4:	f8da 0004 	ldr.w	r0, [sl, #4]
 80096b8:	4631      	mov	r1, r6
 80096ba:	f7f7 fb63 	bl	8000d84 <__aeabi_fmul>
 80096be:	f1b8 0f01 	cmp.w	r8, #1
 80096c2:	f8c9 0004 	str.w	r0, [r9, #4]
 80096c6:	d006      	beq.n	80096d6 <arm_mat_scale_f32+0xb6>
 80096c8:	f8da 0008 	ldr.w	r0, [sl, #8]
 80096cc:	4631      	mov	r1, r6
 80096ce:	f7f7 fb59 	bl	8000d84 <__aeabi_fmul>
 80096d2:	f8c9 0008 	str.w	r0, [r9, #8]
 80096d6:	2000      	movs	r0, #0
 80096d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096dc:	f06f 0002 	mvn.w	r0, #2
 80096e0:	e7fa      	b.n	80096d8 <arm_mat_scale_f32+0xb8>
 80096e2:	bf00      	nop

080096e4 <arm_mat_mult_f32>:
 80096e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e8:	8847      	ldrh	r7, [r0, #2]
 80096ea:	880b      	ldrh	r3, [r1, #0]
 80096ec:	6844      	ldr	r4, [r0, #4]
 80096ee:	8800      	ldrh	r0, [r0, #0]
 80096f0:	b08f      	sub	sp, #60	; 0x3c
 80096f2:	42bb      	cmp	r3, r7
 80096f4:	9008      	str	r0, [sp, #32]
 80096f6:	684e      	ldr	r6, [r1, #4]
 80096f8:	f8d2 c004 	ldr.w	ip, [r2, #4]
 80096fc:	884d      	ldrh	r5, [r1, #2]
 80096fe:	f040 809f 	bne.w	8009840 <arm_mat_mult_f32+0x15c>
 8009702:	8817      	ldrh	r7, [r2, #0]
 8009704:	4287      	cmp	r7, r0
 8009706:	f040 809b 	bne.w	8009840 <arm_mat_mult_f32+0x15c>
 800970a:	f8b2 8002 	ldrh.w	r8, [r2, #2]
 800970e:	45a8      	cmp	r8, r5
 8009710:	f040 8096 	bne.w	8009840 <arm_mat_mult_f32+0x15c>
 8009714:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8009718:	910d      	str	r1, [sp, #52]	; 0x34
 800971a:	0899      	lsrs	r1, r3, #2
 800971c:	fb0b f201 	mul.w	r2, fp, r1
 8009720:	9105      	str	r1, [sp, #20]
 8009722:	9207      	str	r2, [sp, #28]
 8009724:	eb04 1101 	add.w	r1, r4, r1, lsl #4
 8009728:	ebc8 7288 	rsb	r2, r8, r8, lsl #30
 800972c:	ea4f 0788 	mov.w	r7, r8, lsl #2
 8009730:	0092      	lsls	r2, r2, #2
 8009732:	9104      	str	r1, [sp, #16]
 8009734:	f104 0110 	add.w	r1, r4, #16
 8009738:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 800973c:	1d30      	adds	r0, r6, #4
 800973e:	9103      	str	r1, [sp, #12]
 8009740:	920b      	str	r2, [sp, #44]	; 0x2c
 8009742:	eb0c 0107 	add.w	r1, ip, r7
 8009746:	f003 0203 	and.w	r2, r3, #3
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	900c      	str	r0, [sp, #48]	; 0x30
 800974e:	9102      	str	r1, [sp, #8]
 8009750:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8009754:	9206      	str	r2, [sp, #24]
 8009756:	930a      	str	r3, [sp, #40]	; 0x28
 8009758:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800975a:	9a02      	ldr	r2, [sp, #8]
 800975c:	9301      	str	r3, [sp, #4]
 800975e:	9b03      	ldr	r3, [sp, #12]
 8009760:	3b10      	subs	r3, #16
 8009762:	9309      	str	r3, [sp, #36]	; 0x24
 8009764:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009766:	4413      	add	r3, r2
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	9b05      	ldr	r3, [sp, #20]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d05f      	beq.n	8009830 <arm_mat_mult_f32+0x14c>
 8009770:	4699      	mov	r9, r3
 8009772:	4634      	mov	r4, r6
 8009774:	f04f 0a00 	mov.w	sl, #0
 8009778:	9d03      	ldr	r5, [sp, #12]
 800977a:	6821      	ldr	r1, [r4, #0]
 800977c:	f855 0c10 	ldr.w	r0, [r5, #-16]
 8009780:	f7f7 fb00 	bl	8000d84 <__aeabi_fmul>
 8009784:	4651      	mov	r1, sl
 8009786:	f7f7 f9f5 	bl	8000b74 <__addsf3>
 800978a:	4682      	mov	sl, r0
 800978c:	59e1      	ldr	r1, [r4, r7]
 800978e:	f855 0c0c 	ldr.w	r0, [r5, #-12]
 8009792:	f7f7 faf7 	bl	8000d84 <__aeabi_fmul>
 8009796:	4651      	mov	r1, sl
 8009798:	f7f7 f9ec 	bl	8000b74 <__addsf3>
 800979c:	4682      	mov	sl, r0
 800979e:	f854 1017 	ldr.w	r1, [r4, r7, lsl #1]
 80097a2:	f855 0c08 	ldr.w	r0, [r5, #-8]
 80097a6:	f7f7 faed 	bl	8000d84 <__aeabi_fmul>
 80097aa:	4651      	mov	r1, sl
 80097ac:	f7f7 f9e2 	bl	8000b74 <__addsf3>
 80097b0:	4682      	mov	sl, r0
 80097b2:	f854 1008 	ldr.w	r1, [r4, r8]
 80097b6:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80097ba:	f7f7 fae3 	bl	8000d84 <__aeabi_fmul>
 80097be:	4651      	mov	r1, sl
 80097c0:	f7f7 f9d8 	bl	8000b74 <__addsf3>
 80097c4:	f1b9 0901 	subs.w	r9, r9, #1
 80097c8:	445c      	add	r4, fp
 80097ca:	4682      	mov	sl, r0
 80097cc:	f105 0510 	add.w	r5, r5, #16
 80097d0:	d1d3      	bne.n	800977a <arm_mat_mult_f32+0x96>
 80097d2:	9b07      	ldr	r3, [sp, #28]
 80097d4:	9d04      	ldr	r5, [sp, #16]
 80097d6:	441e      	add	r6, r3
 80097d8:	9b06      	ldr	r3, [sp, #24]
 80097da:	b16b      	cbz	r3, 80097f8 <arm_mat_mult_f32+0x114>
 80097dc:	461c      	mov	r4, r3
 80097de:	6831      	ldr	r1, [r6, #0]
 80097e0:	f855 0b04 	ldr.w	r0, [r5], #4
 80097e4:	f7f7 face 	bl	8000d84 <__aeabi_fmul>
 80097e8:	4601      	mov	r1, r0
 80097ea:	4650      	mov	r0, sl
 80097ec:	f7f7 f9c2 	bl	8000b74 <__addsf3>
 80097f0:	3c01      	subs	r4, #1
 80097f2:	443e      	add	r6, r7
 80097f4:	4682      	mov	sl, r0
 80097f6:	d1f2      	bne.n	80097de <arm_mat_mult_f32+0xfa>
 80097f8:	e9dd 3600 	ldrd	r3, r6, [sp]
 80097fc:	1d32      	adds	r2, r6, #4
 80097fe:	9201      	str	r2, [sp, #4]
 8009800:	9a02      	ldr	r2, [sp, #8]
 8009802:	f843 ab04 	str.w	sl, [r3], #4
 8009806:	4293      	cmp	r3, r2
 8009808:	9300      	str	r3, [sp, #0]
 800980a:	d1ae      	bne.n	800976a <arm_mat_mult_f32+0x86>
 800980c:	4613      	mov	r3, r2
 800980e:	9a04      	ldr	r2, [sp, #16]
 8009810:	443b      	add	r3, r7
 8009812:	4611      	mov	r1, r2
 8009814:	9302      	str	r3, [sp, #8]
 8009816:	9a03      	ldr	r2, [sp, #12]
 8009818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800981a:	4419      	add	r1, r3
 800981c:	441a      	add	r2, r3
 800981e:	9b08      	ldr	r3, [sp, #32]
 8009820:	9104      	str	r1, [sp, #16]
 8009822:	3b01      	subs	r3, #1
 8009824:	9203      	str	r2, [sp, #12]
 8009826:	9308      	str	r3, [sp, #32]
 8009828:	d006      	beq.n	8009838 <arm_mat_mult_f32+0x154>
 800982a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800982c:	685e      	ldr	r6, [r3, #4]
 800982e:	e793      	b.n	8009758 <arm_mat_mult_f32+0x74>
 8009830:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009832:	f04f 0a00 	mov.w	sl, #0
 8009836:	e7cf      	b.n	80097d8 <arm_mat_mult_f32+0xf4>
 8009838:	4618      	mov	r0, r3
 800983a:	b00f      	add	sp, #60	; 0x3c
 800983c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009840:	f06f 0002 	mvn.w	r0, #2
 8009844:	b00f      	add	sp, #60	; 0x3c
 8009846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800984a:	bf00      	nop

0800984c <arm_mat_init_f32>:
 800984c:	8001      	strh	r1, [r0, #0]
 800984e:	8042      	strh	r2, [r0, #2]
 8009850:	6043      	str	r3, [r0, #4]
 8009852:	4770      	bx	lr

08009854 <arm_mat_add_f32>:
 8009854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009858:	6803      	ldr	r3, [r0, #0]
 800985a:	e9d1 4b00 	ldrd	r4, fp, [r1]
 800985e:	42a3      	cmp	r3, r4
 8009860:	b083      	sub	sp, #12
 8009862:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8009866:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800986a:	d162      	bne.n	8009932 <arm_mat_add_f32+0xde>
 800986c:	6812      	ldr	r2, [r2, #0]
 800986e:	4293      	cmp	r3, r2
 8009870:	d15f      	bne.n	8009932 <arm_mat_add_f32+0xde>
 8009872:	8803      	ldrh	r3, [r0, #0]
 8009874:	8847      	ldrh	r7, [r0, #2]
 8009876:	fb07 f703 	mul.w	r7, r7, r3
 800987a:	08bb      	lsrs	r3, r7, #2
 800987c:	9301      	str	r3, [sp, #4]
 800987e:	d035      	beq.n	80098ec <arm_mat_add_f32+0x98>
 8009880:	4698      	mov	r8, r3
 8009882:	f10a 0610 	add.w	r6, sl, #16
 8009886:	f10b 0510 	add.w	r5, fp, #16
 800988a:	f109 0410 	add.w	r4, r9, #16
 800988e:	f855 1c10 	ldr.w	r1, [r5, #-16]
 8009892:	f856 0c10 	ldr.w	r0, [r6, #-16]
 8009896:	f7f7 f96d 	bl	8000b74 <__addsf3>
 800989a:	f844 0c10 	str.w	r0, [r4, #-16]
 800989e:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 80098a2:	f856 0c0c 	ldr.w	r0, [r6, #-12]
 80098a6:	f7f7 f965 	bl	8000b74 <__addsf3>
 80098aa:	f844 0c0c 	str.w	r0, [r4, #-12]
 80098ae:	f855 1c08 	ldr.w	r1, [r5, #-8]
 80098b2:	f856 0c08 	ldr.w	r0, [r6, #-8]
 80098b6:	f7f7 f95d 	bl	8000b74 <__addsf3>
 80098ba:	f844 0c08 	str.w	r0, [r4, #-8]
 80098be:	f855 1c04 	ldr.w	r1, [r5, #-4]
 80098c2:	f856 0c04 	ldr.w	r0, [r6, #-4]
 80098c6:	f7f7 f955 	bl	8000b74 <__addsf3>
 80098ca:	f1b8 0801 	subs.w	r8, r8, #1
 80098ce:	f844 0c04 	str.w	r0, [r4, #-4]
 80098d2:	f105 0510 	add.w	r5, r5, #16
 80098d6:	f106 0610 	add.w	r6, r6, #16
 80098da:	f104 0410 	add.w	r4, r4, #16
 80098de:	d1d6      	bne.n	800988e <arm_mat_add_f32+0x3a>
 80098e0:	9b01      	ldr	r3, [sp, #4]
 80098e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80098e6:	44c2      	add	sl, r8
 80098e8:	44c3      	add	fp, r8
 80098ea:	44c1      	add	r9, r8
 80098ec:	f017 0703 	ands.w	r7, r7, #3
 80098f0:	d01b      	beq.n	800992a <arm_mat_add_f32+0xd6>
 80098f2:	f8da 1000 	ldr.w	r1, [sl]
 80098f6:	f8db 0000 	ldr.w	r0, [fp]
 80098fa:	f7f7 f93b 	bl	8000b74 <__addsf3>
 80098fe:	3f01      	subs	r7, #1
 8009900:	f8c9 0000 	str.w	r0, [r9]
 8009904:	d011      	beq.n	800992a <arm_mat_add_f32+0xd6>
 8009906:	f8db 1004 	ldr.w	r1, [fp, #4]
 800990a:	f8da 0004 	ldr.w	r0, [sl, #4]
 800990e:	f7f7 f931 	bl	8000b74 <__addsf3>
 8009912:	2f01      	cmp	r7, #1
 8009914:	f8c9 0004 	str.w	r0, [r9, #4]
 8009918:	d007      	beq.n	800992a <arm_mat_add_f32+0xd6>
 800991a:	f8db 1008 	ldr.w	r1, [fp, #8]
 800991e:	f8da 0008 	ldr.w	r0, [sl, #8]
 8009922:	f7f7 f927 	bl	8000b74 <__addsf3>
 8009926:	f8c9 0008 	str.w	r0, [r9, #8]
 800992a:	2000      	movs	r0, #0
 800992c:	b003      	add	sp, #12
 800992e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009932:	f06f 0002 	mvn.w	r0, #2
 8009936:	e7f9      	b.n	800992c <arm_mat_add_f32+0xd8>

08009938 <atof>:
 8009938:	2100      	movs	r1, #0
 800993a:	f000 bee5 	b.w	800a708 <strtod>

0800993e <atoi>:
 800993e:	220a      	movs	r2, #10
 8009940:	2100      	movs	r1, #0
 8009942:	f000 bf81 	b.w	800a848 <strtol>
	...

08009948 <__errno>:
 8009948:	4b01      	ldr	r3, [pc, #4]	; (8009950 <__errno+0x8>)
 800994a:	6818      	ldr	r0, [r3, #0]
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop
 8009950:	200001b4 	.word	0x200001b4

08009954 <__libc_init_array>:
 8009954:	b570      	push	{r4, r5, r6, lr}
 8009956:	2500      	movs	r5, #0
 8009958:	4e0c      	ldr	r6, [pc, #48]	; (800998c <__libc_init_array+0x38>)
 800995a:	4c0d      	ldr	r4, [pc, #52]	; (8009990 <__libc_init_array+0x3c>)
 800995c:	1ba4      	subs	r4, r4, r6
 800995e:	10a4      	asrs	r4, r4, #2
 8009960:	42a5      	cmp	r5, r4
 8009962:	d109      	bne.n	8009978 <__libc_init_array+0x24>
 8009964:	f003 feb8 	bl	800d6d8 <_init>
 8009968:	2500      	movs	r5, #0
 800996a:	4e0a      	ldr	r6, [pc, #40]	; (8009994 <__libc_init_array+0x40>)
 800996c:	4c0a      	ldr	r4, [pc, #40]	; (8009998 <__libc_init_array+0x44>)
 800996e:	1ba4      	subs	r4, r4, r6
 8009970:	10a4      	asrs	r4, r4, #2
 8009972:	42a5      	cmp	r5, r4
 8009974:	d105      	bne.n	8009982 <__libc_init_array+0x2e>
 8009976:	bd70      	pop	{r4, r5, r6, pc}
 8009978:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800997c:	4798      	blx	r3
 800997e:	3501      	adds	r5, #1
 8009980:	e7ee      	b.n	8009960 <__libc_init_array+0xc>
 8009982:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009986:	4798      	blx	r3
 8009988:	3501      	adds	r5, #1
 800998a:	e7f2      	b.n	8009972 <__libc_init_array+0x1e>
 800998c:	0800e948 	.word	0x0800e948
 8009990:	0800e948 	.word	0x0800e948
 8009994:	0800e948 	.word	0x0800e948
 8009998:	0800e94c 	.word	0x0800e94c

0800999c <__itoa>:
 800999c:	1e93      	subs	r3, r2, #2
 800999e:	2b22      	cmp	r3, #34	; 0x22
 80099a0:	b510      	push	{r4, lr}
 80099a2:	460c      	mov	r4, r1
 80099a4:	d904      	bls.n	80099b0 <__itoa+0x14>
 80099a6:	2300      	movs	r3, #0
 80099a8:	461c      	mov	r4, r3
 80099aa:	700b      	strb	r3, [r1, #0]
 80099ac:	4620      	mov	r0, r4
 80099ae:	bd10      	pop	{r4, pc}
 80099b0:	2a0a      	cmp	r2, #10
 80099b2:	d109      	bne.n	80099c8 <__itoa+0x2c>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	da07      	bge.n	80099c8 <__itoa+0x2c>
 80099b8:	232d      	movs	r3, #45	; 0x2d
 80099ba:	700b      	strb	r3, [r1, #0]
 80099bc:	2101      	movs	r1, #1
 80099be:	4240      	negs	r0, r0
 80099c0:	4421      	add	r1, r4
 80099c2:	f000 ff57 	bl	800a874 <__utoa>
 80099c6:	e7f1      	b.n	80099ac <__itoa+0x10>
 80099c8:	2100      	movs	r1, #0
 80099ca:	e7f9      	b.n	80099c0 <__itoa+0x24>

080099cc <itoa>:
 80099cc:	f7ff bfe6 	b.w	800999c <__itoa>

080099d0 <memcmp>:
 80099d0:	b530      	push	{r4, r5, lr}
 80099d2:	2400      	movs	r4, #0
 80099d4:	42a2      	cmp	r2, r4
 80099d6:	d101      	bne.n	80099dc <memcmp+0xc>
 80099d8:	2000      	movs	r0, #0
 80099da:	e007      	b.n	80099ec <memcmp+0x1c>
 80099dc:	5d03      	ldrb	r3, [r0, r4]
 80099de:	3401      	adds	r4, #1
 80099e0:	190d      	adds	r5, r1, r4
 80099e2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80099e6:	42ab      	cmp	r3, r5
 80099e8:	d0f4      	beq.n	80099d4 <memcmp+0x4>
 80099ea:	1b58      	subs	r0, r3, r5
 80099ec:	bd30      	pop	{r4, r5, pc}

080099ee <memcpy>:
 80099ee:	b510      	push	{r4, lr}
 80099f0:	1e43      	subs	r3, r0, #1
 80099f2:	440a      	add	r2, r1
 80099f4:	4291      	cmp	r1, r2
 80099f6:	d100      	bne.n	80099fa <memcpy+0xc>
 80099f8:	bd10      	pop	{r4, pc}
 80099fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a02:	e7f7      	b.n	80099f4 <memcpy+0x6>

08009a04 <memset>:
 8009a04:	4603      	mov	r3, r0
 8009a06:	4402      	add	r2, r0
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d100      	bne.n	8009a0e <memset+0xa>
 8009a0c:	4770      	bx	lr
 8009a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8009a12:	e7f9      	b.n	8009a08 <memset+0x4>

08009a14 <siscanf>:
 8009a14:	b40e      	push	{r1, r2, r3}
 8009a16:	f44f 7201 	mov.w	r2, #516	; 0x204
 8009a1a:	b530      	push	{r4, r5, lr}
 8009a1c:	b09c      	sub	sp, #112	; 0x70
 8009a1e:	ac1f      	add	r4, sp, #124	; 0x7c
 8009a20:	f854 5b04 	ldr.w	r5, [r4], #4
 8009a24:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009a28:	9002      	str	r0, [sp, #8]
 8009a2a:	9006      	str	r0, [sp, #24]
 8009a2c:	f7f6 fb90 	bl	8000150 <strlen>
 8009a30:	4b0b      	ldr	r3, [pc, #44]	; (8009a60 <siscanf+0x4c>)
 8009a32:	9003      	str	r0, [sp, #12]
 8009a34:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a36:	2300      	movs	r3, #0
 8009a38:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a3a:	9314      	str	r3, [sp, #80]	; 0x50
 8009a3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a40:	9007      	str	r0, [sp, #28]
 8009a42:	4808      	ldr	r0, [pc, #32]	; (8009a64 <siscanf+0x50>)
 8009a44:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009a48:	462a      	mov	r2, r5
 8009a4a:	4623      	mov	r3, r4
 8009a4c:	a902      	add	r1, sp, #8
 8009a4e:	6800      	ldr	r0, [r0, #0]
 8009a50:	9401      	str	r4, [sp, #4]
 8009a52:	f001 ff55 	bl	800b900 <__ssvfiscanf_r>
 8009a56:	b01c      	add	sp, #112	; 0x70
 8009a58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a5c:	b003      	add	sp, #12
 8009a5e:	4770      	bx	lr
 8009a60:	08009a69 	.word	0x08009a69
 8009a64:	200001b4 	.word	0x200001b4

08009a68 <__seofread>:
 8009a68:	2000      	movs	r0, #0
 8009a6a:	4770      	bx	lr

08009a6c <stpcpy>:
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a72:	4618      	mov	r0, r3
 8009a74:	f803 2b01 	strb.w	r2, [r3], #1
 8009a78:	2a00      	cmp	r2, #0
 8009a7a:	d1f8      	bne.n	8009a6e <stpcpy+0x2>
 8009a7c:	4770      	bx	lr

08009a7e <strcpy>:
 8009a7e:	4603      	mov	r3, r0
 8009a80:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a84:	f803 2b01 	strb.w	r2, [r3], #1
 8009a88:	2a00      	cmp	r2, #0
 8009a8a:	d1f9      	bne.n	8009a80 <strcpy+0x2>
 8009a8c:	4770      	bx	lr

08009a8e <strstr>:
 8009a8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a90:	7803      	ldrb	r3, [r0, #0]
 8009a92:	b17b      	cbz	r3, 8009ab4 <strstr+0x26>
 8009a94:	4604      	mov	r4, r0
 8009a96:	7823      	ldrb	r3, [r4, #0]
 8009a98:	4620      	mov	r0, r4
 8009a9a:	1c66      	adds	r6, r4, #1
 8009a9c:	b17b      	cbz	r3, 8009abe <strstr+0x30>
 8009a9e:	1e4a      	subs	r2, r1, #1
 8009aa0:	1e63      	subs	r3, r4, #1
 8009aa2:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8009aa6:	b14d      	cbz	r5, 8009abc <strstr+0x2e>
 8009aa8:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8009aac:	4634      	mov	r4, r6
 8009aae:	42af      	cmp	r7, r5
 8009ab0:	d0f7      	beq.n	8009aa2 <strstr+0x14>
 8009ab2:	e7f0      	b.n	8009a96 <strstr+0x8>
 8009ab4:	780b      	ldrb	r3, [r1, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	bf18      	it	ne
 8009aba:	2000      	movne	r0, #0
 8009abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	e7fc      	b.n	8009abc <strstr+0x2e>

08009ac2 <sulp>:
 8009ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac6:	460f      	mov	r7, r1
 8009ac8:	4690      	mov	r8, r2
 8009aca:	f001 fd29 	bl	800b520 <__ulp>
 8009ace:	4604      	mov	r4, r0
 8009ad0:	460d      	mov	r5, r1
 8009ad2:	f1b8 0f00 	cmp.w	r8, #0
 8009ad6:	d011      	beq.n	8009afc <sulp+0x3a>
 8009ad8:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009adc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	dd0b      	ble.n	8009afc <sulp+0x3a>
 8009ae4:	2400      	movs	r4, #0
 8009ae6:	051b      	lsls	r3, r3, #20
 8009ae8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009aec:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009af0:	4622      	mov	r2, r4
 8009af2:	462b      	mov	r3, r5
 8009af4:	f7f6 fcf0 	bl	80004d8 <__aeabi_dmul>
 8009af8:	4604      	mov	r4, r0
 8009afa:	460d      	mov	r5, r1
 8009afc:	4620      	mov	r0, r4
 8009afe:	4629      	mov	r1, r5
 8009b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b04:	0000      	movs	r0, r0
	...

08009b08 <_strtod_l>:
 8009b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b0c:	461f      	mov	r7, r3
 8009b0e:	2300      	movs	r3, #0
 8009b10:	b0a1      	sub	sp, #132	; 0x84
 8009b12:	4683      	mov	fp, r0
 8009b14:	4638      	mov	r0, r7
 8009b16:	460e      	mov	r6, r1
 8009b18:	9217      	str	r2, [sp, #92]	; 0x5c
 8009b1a:	931c      	str	r3, [sp, #112]	; 0x70
 8009b1c:	f001 fa22 	bl	800af64 <__localeconv_l>
 8009b20:	4680      	mov	r8, r0
 8009b22:	6800      	ldr	r0, [r0, #0]
 8009b24:	f7f6 fb14 	bl	8000150 <strlen>
 8009b28:	f04f 0900 	mov.w	r9, #0
 8009b2c:	4604      	mov	r4, r0
 8009b2e:	f04f 0a00 	mov.w	sl, #0
 8009b32:	961b      	str	r6, [sp, #108]	; 0x6c
 8009b34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009b36:	781a      	ldrb	r2, [r3, #0]
 8009b38:	2a0d      	cmp	r2, #13
 8009b3a:	d832      	bhi.n	8009ba2 <_strtod_l+0x9a>
 8009b3c:	2a09      	cmp	r2, #9
 8009b3e:	d236      	bcs.n	8009bae <_strtod_l+0xa6>
 8009b40:	2a00      	cmp	r2, #0
 8009b42:	d03e      	beq.n	8009bc2 <_strtod_l+0xba>
 8009b44:	2300      	movs	r3, #0
 8009b46:	930d      	str	r3, [sp, #52]	; 0x34
 8009b48:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009b4a:	782b      	ldrb	r3, [r5, #0]
 8009b4c:	2b30      	cmp	r3, #48	; 0x30
 8009b4e:	f040 80ac 	bne.w	8009caa <_strtod_l+0x1a2>
 8009b52:	786b      	ldrb	r3, [r5, #1]
 8009b54:	2b58      	cmp	r3, #88	; 0x58
 8009b56:	d001      	beq.n	8009b5c <_strtod_l+0x54>
 8009b58:	2b78      	cmp	r3, #120	; 0x78
 8009b5a:	d167      	bne.n	8009c2c <_strtod_l+0x124>
 8009b5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b5e:	9702      	str	r7, [sp, #8]
 8009b60:	9301      	str	r3, [sp, #4]
 8009b62:	ab1c      	add	r3, sp, #112	; 0x70
 8009b64:	9300      	str	r3, [sp, #0]
 8009b66:	4a89      	ldr	r2, [pc, #548]	; (8009d8c <_strtod_l+0x284>)
 8009b68:	ab1d      	add	r3, sp, #116	; 0x74
 8009b6a:	a91b      	add	r1, sp, #108	; 0x6c
 8009b6c:	4658      	mov	r0, fp
 8009b6e:	f000 ff0f 	bl	800a990 <__gethex>
 8009b72:	f010 0407 	ands.w	r4, r0, #7
 8009b76:	4606      	mov	r6, r0
 8009b78:	d005      	beq.n	8009b86 <_strtod_l+0x7e>
 8009b7a:	2c06      	cmp	r4, #6
 8009b7c:	d12b      	bne.n	8009bd6 <_strtod_l+0xce>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	3501      	adds	r5, #1
 8009b82:	951b      	str	r5, [sp, #108]	; 0x6c
 8009b84:	930d      	str	r3, [sp, #52]	; 0x34
 8009b86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f040 85a6 	bne.w	800a6da <_strtod_l+0xbd2>
 8009b8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b90:	b1e3      	cbz	r3, 8009bcc <_strtod_l+0xc4>
 8009b92:	464a      	mov	r2, r9
 8009b94:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8009b98:	4610      	mov	r0, r2
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	b021      	add	sp, #132	; 0x84
 8009b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba2:	2a2b      	cmp	r2, #43	; 0x2b
 8009ba4:	d015      	beq.n	8009bd2 <_strtod_l+0xca>
 8009ba6:	2a2d      	cmp	r2, #45	; 0x2d
 8009ba8:	d004      	beq.n	8009bb4 <_strtod_l+0xac>
 8009baa:	2a20      	cmp	r2, #32
 8009bac:	d1ca      	bne.n	8009b44 <_strtod_l+0x3c>
 8009bae:	3301      	adds	r3, #1
 8009bb0:	931b      	str	r3, [sp, #108]	; 0x6c
 8009bb2:	e7bf      	b.n	8009b34 <_strtod_l+0x2c>
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	920d      	str	r2, [sp, #52]	; 0x34
 8009bb8:	1c5a      	adds	r2, r3, #1
 8009bba:	921b      	str	r2, [sp, #108]	; 0x6c
 8009bbc:	785b      	ldrb	r3, [r3, #1]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1c2      	bne.n	8009b48 <_strtod_l+0x40>
 8009bc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bc4:	961b      	str	r6, [sp, #108]	; 0x6c
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f040 8585 	bne.w	800a6d6 <_strtod_l+0xbce>
 8009bcc:	464a      	mov	r2, r9
 8009bce:	4653      	mov	r3, sl
 8009bd0:	e7e2      	b.n	8009b98 <_strtod_l+0x90>
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	e7ef      	b.n	8009bb6 <_strtod_l+0xae>
 8009bd6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009bd8:	b13a      	cbz	r2, 8009bea <_strtod_l+0xe2>
 8009bda:	2135      	movs	r1, #53	; 0x35
 8009bdc:	a81e      	add	r0, sp, #120	; 0x78
 8009bde:	f001 fd92 	bl	800b706 <__copybits>
 8009be2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009be4:	4658      	mov	r0, fp
 8009be6:	f001 fa05 	bl	800aff4 <_Bfree>
 8009bea:	3c01      	subs	r4, #1
 8009bec:	2c04      	cmp	r4, #4
 8009bee:	d806      	bhi.n	8009bfe <_strtod_l+0xf6>
 8009bf0:	e8df f004 	tbb	[pc, r4]
 8009bf4:	1714030a 	.word	0x1714030a
 8009bf8:	0a          	.byte	0x0a
 8009bf9:	00          	.byte	0x00
 8009bfa:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8009bfe:	0731      	lsls	r1, r6, #28
 8009c00:	d5c1      	bpl.n	8009b86 <_strtod_l+0x7e>
 8009c02:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8009c06:	e7be      	b.n	8009b86 <_strtod_l+0x7e>
 8009c08:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009c0a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8009c0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009c12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009c16:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8009c1a:	e7f0      	b.n	8009bfe <_strtod_l+0xf6>
 8009c1c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8009d90 <_strtod_l+0x288>
 8009c20:	e7ed      	b.n	8009bfe <_strtod_l+0xf6>
 8009c22:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8009c26:	f04f 39ff 	mov.w	r9, #4294967295
 8009c2a:	e7e8      	b.n	8009bfe <_strtod_l+0xf6>
 8009c2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c2e:	1c5a      	adds	r2, r3, #1
 8009c30:	921b      	str	r2, [sp, #108]	; 0x6c
 8009c32:	785b      	ldrb	r3, [r3, #1]
 8009c34:	2b30      	cmp	r3, #48	; 0x30
 8009c36:	d0f9      	beq.n	8009c2c <_strtod_l+0x124>
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d0a4      	beq.n	8009b86 <_strtod_l+0x7e>
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	2500      	movs	r5, #0
 8009c40:	220a      	movs	r2, #10
 8009c42:	9307      	str	r3, [sp, #28]
 8009c44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c46:	9506      	str	r5, [sp, #24]
 8009c48:	9308      	str	r3, [sp, #32]
 8009c4a:	9504      	str	r5, [sp, #16]
 8009c4c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009c4e:	7807      	ldrb	r7, [r0, #0]
 8009c50:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8009c54:	b2d9      	uxtb	r1, r3
 8009c56:	2909      	cmp	r1, #9
 8009c58:	d929      	bls.n	8009cae <_strtod_l+0x1a6>
 8009c5a:	4622      	mov	r2, r4
 8009c5c:	f8d8 1000 	ldr.w	r1, [r8]
 8009c60:	f002 f937 	bl	800bed2 <strncmp>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	d031      	beq.n	8009ccc <_strtod_l+0x1c4>
 8009c68:	2000      	movs	r0, #0
 8009c6a:	463b      	mov	r3, r7
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	9c04      	ldr	r4, [sp, #16]
 8009c70:	9005      	str	r0, [sp, #20]
 8009c72:	2b65      	cmp	r3, #101	; 0x65
 8009c74:	d001      	beq.n	8009c7a <_strtod_l+0x172>
 8009c76:	2b45      	cmp	r3, #69	; 0x45
 8009c78:	d114      	bne.n	8009ca4 <_strtod_l+0x19c>
 8009c7a:	b924      	cbnz	r4, 8009c86 <_strtod_l+0x17e>
 8009c7c:	b910      	cbnz	r0, 8009c84 <_strtod_l+0x17c>
 8009c7e:	9b07      	ldr	r3, [sp, #28]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d09e      	beq.n	8009bc2 <_strtod_l+0xba>
 8009c84:	2400      	movs	r4, #0
 8009c86:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009c88:	1c73      	adds	r3, r6, #1
 8009c8a:	931b      	str	r3, [sp, #108]	; 0x6c
 8009c8c:	7873      	ldrb	r3, [r6, #1]
 8009c8e:	2b2b      	cmp	r3, #43	; 0x2b
 8009c90:	d078      	beq.n	8009d84 <_strtod_l+0x27c>
 8009c92:	2b2d      	cmp	r3, #45	; 0x2d
 8009c94:	d070      	beq.n	8009d78 <_strtod_l+0x270>
 8009c96:	f04f 0c00 	mov.w	ip, #0
 8009c9a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8009c9e:	2f09      	cmp	r7, #9
 8009ca0:	d97c      	bls.n	8009d9c <_strtod_l+0x294>
 8009ca2:	961b      	str	r6, [sp, #108]	; 0x6c
 8009ca4:	f04f 0e00 	mov.w	lr, #0
 8009ca8:	e09a      	b.n	8009de0 <_strtod_l+0x2d8>
 8009caa:	2300      	movs	r3, #0
 8009cac:	e7c7      	b.n	8009c3e <_strtod_l+0x136>
 8009cae:	9904      	ldr	r1, [sp, #16]
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	2908      	cmp	r1, #8
 8009cb4:	bfd7      	itett	le
 8009cb6:	9906      	ldrle	r1, [sp, #24]
 8009cb8:	fb02 3505 	mlagt	r5, r2, r5, r3
 8009cbc:	fb02 3301 	mlale	r3, r2, r1, r3
 8009cc0:	9306      	strle	r3, [sp, #24]
 8009cc2:	9b04      	ldr	r3, [sp, #16]
 8009cc4:	901b      	str	r0, [sp, #108]	; 0x6c
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	9304      	str	r3, [sp, #16]
 8009cca:	e7bf      	b.n	8009c4c <_strtod_l+0x144>
 8009ccc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009cce:	191a      	adds	r2, r3, r4
 8009cd0:	921b      	str	r2, [sp, #108]	; 0x6c
 8009cd2:	9a04      	ldr	r2, [sp, #16]
 8009cd4:	5d1b      	ldrb	r3, [r3, r4]
 8009cd6:	2a00      	cmp	r2, #0
 8009cd8:	d037      	beq.n	8009d4a <_strtod_l+0x242>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	9c04      	ldr	r4, [sp, #16]
 8009cde:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009ce2:	2909      	cmp	r1, #9
 8009ce4:	d913      	bls.n	8009d0e <_strtod_l+0x206>
 8009ce6:	2101      	movs	r1, #1
 8009ce8:	9105      	str	r1, [sp, #20]
 8009cea:	e7c2      	b.n	8009c72 <_strtod_l+0x16a>
 8009cec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009cee:	3001      	adds	r0, #1
 8009cf0:	1c5a      	adds	r2, r3, #1
 8009cf2:	921b      	str	r2, [sp, #108]	; 0x6c
 8009cf4:	785b      	ldrb	r3, [r3, #1]
 8009cf6:	2b30      	cmp	r3, #48	; 0x30
 8009cf8:	d0f8      	beq.n	8009cec <_strtod_l+0x1e4>
 8009cfa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009cfe:	2a08      	cmp	r2, #8
 8009d00:	f200 84f0 	bhi.w	800a6e4 <_strtod_l+0xbdc>
 8009d04:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009d06:	9208      	str	r2, [sp, #32]
 8009d08:	4602      	mov	r2, r0
 8009d0a:	2000      	movs	r0, #0
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8009d12:	f100 0101 	add.w	r1, r0, #1
 8009d16:	d012      	beq.n	8009d3e <_strtod_l+0x236>
 8009d18:	440a      	add	r2, r1
 8009d1a:	270a      	movs	r7, #10
 8009d1c:	4621      	mov	r1, r4
 8009d1e:	eb00 0c04 	add.w	ip, r0, r4
 8009d22:	458c      	cmp	ip, r1
 8009d24:	d113      	bne.n	8009d4e <_strtod_l+0x246>
 8009d26:	1821      	adds	r1, r4, r0
 8009d28:	2908      	cmp	r1, #8
 8009d2a:	f104 0401 	add.w	r4, r4, #1
 8009d2e:	4404      	add	r4, r0
 8009d30:	dc19      	bgt.n	8009d66 <_strtod_l+0x25e>
 8009d32:	210a      	movs	r1, #10
 8009d34:	9b06      	ldr	r3, [sp, #24]
 8009d36:	fb01 e303 	mla	r3, r1, r3, lr
 8009d3a:	9306      	str	r3, [sp, #24]
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d40:	1c58      	adds	r0, r3, #1
 8009d42:	901b      	str	r0, [sp, #108]	; 0x6c
 8009d44:	785b      	ldrb	r3, [r3, #1]
 8009d46:	4608      	mov	r0, r1
 8009d48:	e7c9      	b.n	8009cde <_strtod_l+0x1d6>
 8009d4a:	9804      	ldr	r0, [sp, #16]
 8009d4c:	e7d3      	b.n	8009cf6 <_strtod_l+0x1ee>
 8009d4e:	2908      	cmp	r1, #8
 8009d50:	f101 0101 	add.w	r1, r1, #1
 8009d54:	dc03      	bgt.n	8009d5e <_strtod_l+0x256>
 8009d56:	9b06      	ldr	r3, [sp, #24]
 8009d58:	437b      	muls	r3, r7
 8009d5a:	9306      	str	r3, [sp, #24]
 8009d5c:	e7e1      	b.n	8009d22 <_strtod_l+0x21a>
 8009d5e:	2910      	cmp	r1, #16
 8009d60:	bfd8      	it	le
 8009d62:	437d      	mulle	r5, r7
 8009d64:	e7dd      	b.n	8009d22 <_strtod_l+0x21a>
 8009d66:	2c10      	cmp	r4, #16
 8009d68:	bfdc      	itt	le
 8009d6a:	210a      	movle	r1, #10
 8009d6c:	fb01 e505 	mlale	r5, r1, r5, lr
 8009d70:	e7e4      	b.n	8009d3c <_strtod_l+0x234>
 8009d72:	2301      	movs	r3, #1
 8009d74:	9305      	str	r3, [sp, #20]
 8009d76:	e781      	b.n	8009c7c <_strtod_l+0x174>
 8009d78:	f04f 0c01 	mov.w	ip, #1
 8009d7c:	1cb3      	adds	r3, r6, #2
 8009d7e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009d80:	78b3      	ldrb	r3, [r6, #2]
 8009d82:	e78a      	b.n	8009c9a <_strtod_l+0x192>
 8009d84:	f04f 0c00 	mov.w	ip, #0
 8009d88:	e7f8      	b.n	8009d7c <_strtod_l+0x274>
 8009d8a:	bf00      	nop
 8009d8c:	0800e458 	.word	0x0800e458
 8009d90:	7ff00000 	.word	0x7ff00000
 8009d94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d96:	1c5f      	adds	r7, r3, #1
 8009d98:	971b      	str	r7, [sp, #108]	; 0x6c
 8009d9a:	785b      	ldrb	r3, [r3, #1]
 8009d9c:	2b30      	cmp	r3, #48	; 0x30
 8009d9e:	d0f9      	beq.n	8009d94 <_strtod_l+0x28c>
 8009da0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8009da4:	2f08      	cmp	r7, #8
 8009da6:	f63f af7d 	bhi.w	8009ca4 <_strtod_l+0x19c>
 8009daa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009dae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009db0:	9309      	str	r3, [sp, #36]	; 0x24
 8009db2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009db4:	1c5f      	adds	r7, r3, #1
 8009db6:	971b      	str	r7, [sp, #108]	; 0x6c
 8009db8:	785b      	ldrb	r3, [r3, #1]
 8009dba:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8009dbe:	f1b8 0f09 	cmp.w	r8, #9
 8009dc2:	d937      	bls.n	8009e34 <_strtod_l+0x32c>
 8009dc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dc6:	1a7f      	subs	r7, r7, r1
 8009dc8:	2f08      	cmp	r7, #8
 8009dca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009dce:	dc37      	bgt.n	8009e40 <_strtod_l+0x338>
 8009dd0:	45be      	cmp	lr, r7
 8009dd2:	bfa8      	it	ge
 8009dd4:	46be      	movge	lr, r7
 8009dd6:	f1bc 0f00 	cmp.w	ip, #0
 8009dda:	d001      	beq.n	8009de0 <_strtod_l+0x2d8>
 8009ddc:	f1ce 0e00 	rsb	lr, lr, #0
 8009de0:	2c00      	cmp	r4, #0
 8009de2:	d151      	bne.n	8009e88 <_strtod_l+0x380>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	f47f aece 	bne.w	8009b86 <_strtod_l+0x7e>
 8009dea:	9a07      	ldr	r2, [sp, #28]
 8009dec:	2a00      	cmp	r2, #0
 8009dee:	f47f aeca 	bne.w	8009b86 <_strtod_l+0x7e>
 8009df2:	9a05      	ldr	r2, [sp, #20]
 8009df4:	2a00      	cmp	r2, #0
 8009df6:	f47f aee4 	bne.w	8009bc2 <_strtod_l+0xba>
 8009dfa:	2b4e      	cmp	r3, #78	; 0x4e
 8009dfc:	d027      	beq.n	8009e4e <_strtod_l+0x346>
 8009dfe:	dc21      	bgt.n	8009e44 <_strtod_l+0x33c>
 8009e00:	2b49      	cmp	r3, #73	; 0x49
 8009e02:	f47f aede 	bne.w	8009bc2 <_strtod_l+0xba>
 8009e06:	49a4      	ldr	r1, [pc, #656]	; (800a098 <_strtod_l+0x590>)
 8009e08:	a81b      	add	r0, sp, #108	; 0x6c
 8009e0a:	f000 fff5 	bl	800adf8 <__match>
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	f43f aed7 	beq.w	8009bc2 <_strtod_l+0xba>
 8009e14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e16:	49a1      	ldr	r1, [pc, #644]	; (800a09c <_strtod_l+0x594>)
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	a81b      	add	r0, sp, #108	; 0x6c
 8009e1c:	931b      	str	r3, [sp, #108]	; 0x6c
 8009e1e:	f000 ffeb 	bl	800adf8 <__match>
 8009e22:	b910      	cbnz	r0, 8009e2a <_strtod_l+0x322>
 8009e24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e26:	3301      	adds	r3, #1
 8009e28:	931b      	str	r3, [sp, #108]	; 0x6c
 8009e2a:	f8df a284 	ldr.w	sl, [pc, #644]	; 800a0b0 <_strtod_l+0x5a8>
 8009e2e:	f04f 0900 	mov.w	r9, #0
 8009e32:	e6a8      	b.n	8009b86 <_strtod_l+0x7e>
 8009e34:	210a      	movs	r1, #10
 8009e36:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009e3a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009e3e:	e7b8      	b.n	8009db2 <_strtod_l+0x2aa>
 8009e40:	46be      	mov	lr, r7
 8009e42:	e7c8      	b.n	8009dd6 <_strtod_l+0x2ce>
 8009e44:	2b69      	cmp	r3, #105	; 0x69
 8009e46:	d0de      	beq.n	8009e06 <_strtod_l+0x2fe>
 8009e48:	2b6e      	cmp	r3, #110	; 0x6e
 8009e4a:	f47f aeba 	bne.w	8009bc2 <_strtod_l+0xba>
 8009e4e:	4994      	ldr	r1, [pc, #592]	; (800a0a0 <_strtod_l+0x598>)
 8009e50:	a81b      	add	r0, sp, #108	; 0x6c
 8009e52:	f000 ffd1 	bl	800adf8 <__match>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	f43f aeb3 	beq.w	8009bc2 <_strtod_l+0xba>
 8009e5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	2b28      	cmp	r3, #40	; 0x28
 8009e62:	d10e      	bne.n	8009e82 <_strtod_l+0x37a>
 8009e64:	aa1e      	add	r2, sp, #120	; 0x78
 8009e66:	498f      	ldr	r1, [pc, #572]	; (800a0a4 <_strtod_l+0x59c>)
 8009e68:	a81b      	add	r0, sp, #108	; 0x6c
 8009e6a:	f000 ffd9 	bl	800ae20 <__hexnan>
 8009e6e:	2805      	cmp	r0, #5
 8009e70:	d107      	bne.n	8009e82 <_strtod_l+0x37a>
 8009e72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009e74:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8009e78:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8009e7c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8009e80:	e681      	b.n	8009b86 <_strtod_l+0x7e>
 8009e82:	f8df a234 	ldr.w	sl, [pc, #564]	; 800a0b8 <_strtod_l+0x5b0>
 8009e86:	e7d2      	b.n	8009e2e <_strtod_l+0x326>
 8009e88:	ebae 0302 	sub.w	r3, lr, r2
 8009e8c:	9307      	str	r3, [sp, #28]
 8009e8e:	9b04      	ldr	r3, [sp, #16]
 8009e90:	9806      	ldr	r0, [sp, #24]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	bf08      	it	eq
 8009e96:	4623      	moveq	r3, r4
 8009e98:	2c10      	cmp	r4, #16
 8009e9a:	9304      	str	r3, [sp, #16]
 8009e9c:	46a0      	mov	r8, r4
 8009e9e:	bfa8      	it	ge
 8009ea0:	f04f 0810 	movge.w	r8, #16
 8009ea4:	f7f6 fa9e 	bl	80003e4 <__aeabi_ui2d>
 8009ea8:	2c09      	cmp	r4, #9
 8009eaa:	4681      	mov	r9, r0
 8009eac:	468a      	mov	sl, r1
 8009eae:	dc13      	bgt.n	8009ed8 <_strtod_l+0x3d0>
 8009eb0:	9b07      	ldr	r3, [sp, #28]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	f43f ae67 	beq.w	8009b86 <_strtod_l+0x7e>
 8009eb8:	9b07      	ldr	r3, [sp, #28]
 8009eba:	dd7e      	ble.n	8009fba <_strtod_l+0x4b2>
 8009ebc:	2b16      	cmp	r3, #22
 8009ebe:	dc65      	bgt.n	8009f8c <_strtod_l+0x484>
 8009ec0:	4a79      	ldr	r2, [pc, #484]	; (800a0a8 <_strtod_l+0x5a0>)
 8009ec2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8009ec6:	464a      	mov	r2, r9
 8009ec8:	e9de 0100 	ldrd	r0, r1, [lr]
 8009ecc:	4653      	mov	r3, sl
 8009ece:	f7f6 fb03 	bl	80004d8 <__aeabi_dmul>
 8009ed2:	4681      	mov	r9, r0
 8009ed4:	468a      	mov	sl, r1
 8009ed6:	e656      	b.n	8009b86 <_strtod_l+0x7e>
 8009ed8:	4b73      	ldr	r3, [pc, #460]	; (800a0a8 <_strtod_l+0x5a0>)
 8009eda:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009ede:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009ee2:	f7f6 faf9 	bl	80004d8 <__aeabi_dmul>
 8009ee6:	4606      	mov	r6, r0
 8009ee8:	4628      	mov	r0, r5
 8009eea:	460f      	mov	r7, r1
 8009eec:	f7f6 fa7a 	bl	80003e4 <__aeabi_ui2d>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	f7f6 f938 	bl	800016c <__adddf3>
 8009efc:	2c0f      	cmp	r4, #15
 8009efe:	4681      	mov	r9, r0
 8009f00:	468a      	mov	sl, r1
 8009f02:	ddd5      	ble.n	8009eb0 <_strtod_l+0x3a8>
 8009f04:	9b07      	ldr	r3, [sp, #28]
 8009f06:	eba4 0808 	sub.w	r8, r4, r8
 8009f0a:	4498      	add	r8, r3
 8009f0c:	f1b8 0f00 	cmp.w	r8, #0
 8009f10:	f340 809a 	ble.w	800a048 <_strtod_l+0x540>
 8009f14:	f018 030f 	ands.w	r3, r8, #15
 8009f18:	d00a      	beq.n	8009f30 <_strtod_l+0x428>
 8009f1a:	4963      	ldr	r1, [pc, #396]	; (800a0a8 <_strtod_l+0x5a0>)
 8009f1c:	464a      	mov	r2, r9
 8009f1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009f22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f26:	4653      	mov	r3, sl
 8009f28:	f7f6 fad6 	bl	80004d8 <__aeabi_dmul>
 8009f2c:	4681      	mov	r9, r0
 8009f2e:	468a      	mov	sl, r1
 8009f30:	f038 080f 	bics.w	r8, r8, #15
 8009f34:	d077      	beq.n	800a026 <_strtod_l+0x51e>
 8009f36:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009f3a:	dd4b      	ble.n	8009fd4 <_strtod_l+0x4cc>
 8009f3c:	f04f 0800 	mov.w	r8, #0
 8009f40:	f8cd 8010 	str.w	r8, [sp, #16]
 8009f44:	f8cd 8020 	str.w	r8, [sp, #32]
 8009f48:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f4c:	2322      	movs	r3, #34	; 0x22
 8009f4e:	f04f 0900 	mov.w	r9, #0
 8009f52:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800a0b0 <_strtod_l+0x5a8>
 8009f56:	f8cb 3000 	str.w	r3, [fp]
 8009f5a:	9b08      	ldr	r3, [sp, #32]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f43f ae12 	beq.w	8009b86 <_strtod_l+0x7e>
 8009f62:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009f64:	4658      	mov	r0, fp
 8009f66:	f001 f845 	bl	800aff4 <_Bfree>
 8009f6a:	9906      	ldr	r1, [sp, #24]
 8009f6c:	4658      	mov	r0, fp
 8009f6e:	f001 f841 	bl	800aff4 <_Bfree>
 8009f72:	9904      	ldr	r1, [sp, #16]
 8009f74:	4658      	mov	r0, fp
 8009f76:	f001 f83d 	bl	800aff4 <_Bfree>
 8009f7a:	9908      	ldr	r1, [sp, #32]
 8009f7c:	4658      	mov	r0, fp
 8009f7e:	f001 f839 	bl	800aff4 <_Bfree>
 8009f82:	4641      	mov	r1, r8
 8009f84:	4658      	mov	r0, fp
 8009f86:	f001 f835 	bl	800aff4 <_Bfree>
 8009f8a:	e5fc      	b.n	8009b86 <_strtod_l+0x7e>
 8009f8c:	9a07      	ldr	r2, [sp, #28]
 8009f8e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009f92:	4293      	cmp	r3, r2
 8009f94:	dbb6      	blt.n	8009f04 <_strtod_l+0x3fc>
 8009f96:	4d44      	ldr	r5, [pc, #272]	; (800a0a8 <_strtod_l+0x5a0>)
 8009f98:	f1c4 040f 	rsb	r4, r4, #15
 8009f9c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009fa0:	464a      	mov	r2, r9
 8009fa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fa6:	4653      	mov	r3, sl
 8009fa8:	f7f6 fa96 	bl	80004d8 <__aeabi_dmul>
 8009fac:	9b07      	ldr	r3, [sp, #28]
 8009fae:	1b1c      	subs	r4, r3, r4
 8009fb0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009fb4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009fb8:	e789      	b.n	8009ece <_strtod_l+0x3c6>
 8009fba:	f113 0f16 	cmn.w	r3, #22
 8009fbe:	dba1      	blt.n	8009f04 <_strtod_l+0x3fc>
 8009fc0:	4a39      	ldr	r2, [pc, #228]	; (800a0a8 <_strtod_l+0x5a0>)
 8009fc2:	4648      	mov	r0, r9
 8009fc4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8009fc8:	e9d2 2300 	ldrd	r2, r3, [r2]
 8009fcc:	4651      	mov	r1, sl
 8009fce:	f7f6 fbad 	bl	800072c <__aeabi_ddiv>
 8009fd2:	e77e      	b.n	8009ed2 <_strtod_l+0x3ca>
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	4648      	mov	r0, r9
 8009fd8:	4651      	mov	r1, sl
 8009fda:	461d      	mov	r5, r3
 8009fdc:	4e33      	ldr	r6, [pc, #204]	; (800a0ac <_strtod_l+0x5a4>)
 8009fde:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009fe2:	f1b8 0f01 	cmp.w	r8, #1
 8009fe6:	dc21      	bgt.n	800a02c <_strtod_l+0x524>
 8009fe8:	b10b      	cbz	r3, 8009fee <_strtod_l+0x4e6>
 8009fea:	4681      	mov	r9, r0
 8009fec:	468a      	mov	sl, r1
 8009fee:	4b2f      	ldr	r3, [pc, #188]	; (800a0ac <_strtod_l+0x5a4>)
 8009ff0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8009ff4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009ff8:	464a      	mov	r2, r9
 8009ffa:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009ffe:	4653      	mov	r3, sl
 800a000:	f7f6 fa6a 	bl	80004d8 <__aeabi_dmul>
 800a004:	4b2a      	ldr	r3, [pc, #168]	; (800a0b0 <_strtod_l+0x5a8>)
 800a006:	460a      	mov	r2, r1
 800a008:	400b      	ands	r3, r1
 800a00a:	492a      	ldr	r1, [pc, #168]	; (800a0b4 <_strtod_l+0x5ac>)
 800a00c:	4681      	mov	r9, r0
 800a00e:	428b      	cmp	r3, r1
 800a010:	d894      	bhi.n	8009f3c <_strtod_l+0x434>
 800a012:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a016:	428b      	cmp	r3, r1
 800a018:	bf86      	itte	hi
 800a01a:	f04f 39ff 	movhi.w	r9, #4294967295
 800a01e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800a0bc <_strtod_l+0x5b4>
 800a022:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800a026:	2300      	movs	r3, #0
 800a028:	9305      	str	r3, [sp, #20]
 800a02a:	e07b      	b.n	800a124 <_strtod_l+0x61c>
 800a02c:	f018 0f01 	tst.w	r8, #1
 800a030:	d006      	beq.n	800a040 <_strtod_l+0x538>
 800a032:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800a036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03a:	f7f6 fa4d 	bl	80004d8 <__aeabi_dmul>
 800a03e:	2301      	movs	r3, #1
 800a040:	3501      	adds	r5, #1
 800a042:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a046:	e7cc      	b.n	8009fe2 <_strtod_l+0x4da>
 800a048:	d0ed      	beq.n	800a026 <_strtod_l+0x51e>
 800a04a:	f1c8 0800 	rsb	r8, r8, #0
 800a04e:	f018 020f 	ands.w	r2, r8, #15
 800a052:	d00a      	beq.n	800a06a <_strtod_l+0x562>
 800a054:	4b14      	ldr	r3, [pc, #80]	; (800a0a8 <_strtod_l+0x5a0>)
 800a056:	4648      	mov	r0, r9
 800a058:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a05c:	4651      	mov	r1, sl
 800a05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a062:	f7f6 fb63 	bl	800072c <__aeabi_ddiv>
 800a066:	4681      	mov	r9, r0
 800a068:	468a      	mov	sl, r1
 800a06a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a06e:	d0da      	beq.n	800a026 <_strtod_l+0x51e>
 800a070:	f1b8 0f1f 	cmp.w	r8, #31
 800a074:	dd24      	ble.n	800a0c0 <_strtod_l+0x5b8>
 800a076:	f04f 0800 	mov.w	r8, #0
 800a07a:	f8cd 8010 	str.w	r8, [sp, #16]
 800a07e:	f8cd 8020 	str.w	r8, [sp, #32]
 800a082:	f8cd 8018 	str.w	r8, [sp, #24]
 800a086:	2322      	movs	r3, #34	; 0x22
 800a088:	f04f 0900 	mov.w	r9, #0
 800a08c:	f04f 0a00 	mov.w	sl, #0
 800a090:	f8cb 3000 	str.w	r3, [fp]
 800a094:	e761      	b.n	8009f5a <_strtod_l+0x452>
 800a096:	bf00      	nop
 800a098:	0800e44c 	.word	0x0800e44c
 800a09c:	0800e44f 	.word	0x0800e44f
 800a0a0:	0800e455 	.word	0x0800e455
 800a0a4:	0800e46c 	.word	0x0800e46c
 800a0a8:	0800e500 	.word	0x0800e500
 800a0ac:	0800e4d8 	.word	0x0800e4d8
 800a0b0:	7ff00000 	.word	0x7ff00000
 800a0b4:	7ca00000 	.word	0x7ca00000
 800a0b8:	fff80000 	.word	0xfff80000
 800a0bc:	7fefffff 	.word	0x7fefffff
 800a0c0:	f018 0310 	ands.w	r3, r8, #16
 800a0c4:	bf18      	it	ne
 800a0c6:	236a      	movne	r3, #106	; 0x6a
 800a0c8:	4648      	mov	r0, r9
 800a0ca:	9305      	str	r3, [sp, #20]
 800a0cc:	4651      	mov	r1, sl
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	4da1      	ldr	r5, [pc, #644]	; (800a358 <_strtod_l+0x850>)
 800a0d2:	f1b8 0f00 	cmp.w	r8, #0
 800a0d6:	f300 8113 	bgt.w	800a300 <_strtod_l+0x7f8>
 800a0da:	b10b      	cbz	r3, 800a0e0 <_strtod_l+0x5d8>
 800a0dc:	4681      	mov	r9, r0
 800a0de:	468a      	mov	sl, r1
 800a0e0:	9b05      	ldr	r3, [sp, #20]
 800a0e2:	b1bb      	cbz	r3, 800a114 <_strtod_l+0x60c>
 800a0e4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800a0e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	4651      	mov	r1, sl
 800a0f0:	dd10      	ble.n	800a114 <_strtod_l+0x60c>
 800a0f2:	2b1f      	cmp	r3, #31
 800a0f4:	f340 8110 	ble.w	800a318 <_strtod_l+0x810>
 800a0f8:	2b34      	cmp	r3, #52	; 0x34
 800a0fa:	bfd8      	it	le
 800a0fc:	f04f 32ff 	movle.w	r2, #4294967295
 800a100:	f04f 0900 	mov.w	r9, #0
 800a104:	bfcf      	iteee	gt
 800a106:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800a10a:	3b20      	suble	r3, #32
 800a10c:	fa02 f303 	lslle.w	r3, r2, r3
 800a110:	ea03 0a01 	andle.w	sl, r3, r1
 800a114:	2200      	movs	r2, #0
 800a116:	2300      	movs	r3, #0
 800a118:	4648      	mov	r0, r9
 800a11a:	4651      	mov	r1, sl
 800a11c:	f7f6 fc44 	bl	80009a8 <__aeabi_dcmpeq>
 800a120:	2800      	cmp	r0, #0
 800a122:	d1a8      	bne.n	800a076 <_strtod_l+0x56e>
 800a124:	9b06      	ldr	r3, [sp, #24]
 800a126:	9a04      	ldr	r2, [sp, #16]
 800a128:	9300      	str	r3, [sp, #0]
 800a12a:	9908      	ldr	r1, [sp, #32]
 800a12c:	4623      	mov	r3, r4
 800a12e:	4658      	mov	r0, fp
 800a130:	f000 ffb2 	bl	800b098 <__s2b>
 800a134:	9008      	str	r0, [sp, #32]
 800a136:	2800      	cmp	r0, #0
 800a138:	f43f af00 	beq.w	8009f3c <_strtod_l+0x434>
 800a13c:	9a07      	ldr	r2, [sp, #28]
 800a13e:	9b07      	ldr	r3, [sp, #28]
 800a140:	2a00      	cmp	r2, #0
 800a142:	f1c3 0300 	rsb	r3, r3, #0
 800a146:	bfa8      	it	ge
 800a148:	2300      	movge	r3, #0
 800a14a:	f04f 0800 	mov.w	r8, #0
 800a14e:	930e      	str	r3, [sp, #56]	; 0x38
 800a150:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a154:	9316      	str	r3, [sp, #88]	; 0x58
 800a156:	f8cd 8010 	str.w	r8, [sp, #16]
 800a15a:	9b08      	ldr	r3, [sp, #32]
 800a15c:	4658      	mov	r0, fp
 800a15e:	6859      	ldr	r1, [r3, #4]
 800a160:	f000 ff14 	bl	800af8c <_Balloc>
 800a164:	9006      	str	r0, [sp, #24]
 800a166:	2800      	cmp	r0, #0
 800a168:	f43f aef0 	beq.w	8009f4c <_strtod_l+0x444>
 800a16c:	9b08      	ldr	r3, [sp, #32]
 800a16e:	300c      	adds	r0, #12
 800a170:	691a      	ldr	r2, [r3, #16]
 800a172:	f103 010c 	add.w	r1, r3, #12
 800a176:	3202      	adds	r2, #2
 800a178:	0092      	lsls	r2, r2, #2
 800a17a:	f7ff fc38 	bl	80099ee <memcpy>
 800a17e:	ab1e      	add	r3, sp, #120	; 0x78
 800a180:	9301      	str	r3, [sp, #4]
 800a182:	ab1d      	add	r3, sp, #116	; 0x74
 800a184:	9300      	str	r3, [sp, #0]
 800a186:	464a      	mov	r2, r9
 800a188:	4653      	mov	r3, sl
 800a18a:	4658      	mov	r0, fp
 800a18c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800a190:	f001 fa3c 	bl	800b60c <__d2b>
 800a194:	901c      	str	r0, [sp, #112]	; 0x70
 800a196:	2800      	cmp	r0, #0
 800a198:	f43f aed8 	beq.w	8009f4c <_strtod_l+0x444>
 800a19c:	2101      	movs	r1, #1
 800a19e:	4658      	mov	r0, fp
 800a1a0:	f001 f806 	bl	800b1b0 <__i2b>
 800a1a4:	9004      	str	r0, [sp, #16]
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	f43f aecf 	beq.w	8009f4c <_strtod_l+0x444>
 800a1ae:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800a1b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a1b2:	2d00      	cmp	r5, #0
 800a1b4:	bfab      	itete	ge
 800a1b6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a1b8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a1ba:	18ee      	addge	r6, r5, r3
 800a1bc:	1b5c      	sublt	r4, r3, r5
 800a1be:	9b05      	ldr	r3, [sp, #20]
 800a1c0:	bfa8      	it	ge
 800a1c2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800a1c4:	eba5 0503 	sub.w	r5, r5, r3
 800a1c8:	4415      	add	r5, r2
 800a1ca:	4b64      	ldr	r3, [pc, #400]	; (800a35c <_strtod_l+0x854>)
 800a1cc:	f105 35ff 	add.w	r5, r5, #4294967295
 800a1d0:	bfb8      	it	lt
 800a1d2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a1d4:	429d      	cmp	r5, r3
 800a1d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a1da:	f280 80af 	bge.w	800a33c <_strtod_l+0x834>
 800a1de:	1b5b      	subs	r3, r3, r5
 800a1e0:	2b1f      	cmp	r3, #31
 800a1e2:	eba2 0203 	sub.w	r2, r2, r3
 800a1e6:	f04f 0701 	mov.w	r7, #1
 800a1ea:	f300 809c 	bgt.w	800a326 <_strtod_l+0x81e>
 800a1ee:	2500      	movs	r5, #0
 800a1f0:	fa07 f303 	lsl.w	r3, r7, r3
 800a1f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1f6:	18b7      	adds	r7, r6, r2
 800a1f8:	9b05      	ldr	r3, [sp, #20]
 800a1fa:	42be      	cmp	r6, r7
 800a1fc:	4414      	add	r4, r2
 800a1fe:	441c      	add	r4, r3
 800a200:	4633      	mov	r3, r6
 800a202:	bfa8      	it	ge
 800a204:	463b      	movge	r3, r7
 800a206:	42a3      	cmp	r3, r4
 800a208:	bfa8      	it	ge
 800a20a:	4623      	movge	r3, r4
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	bfc2      	ittt	gt
 800a210:	1aff      	subgt	r7, r7, r3
 800a212:	1ae4      	subgt	r4, r4, r3
 800a214:	1af6      	subgt	r6, r6, r3
 800a216:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a218:	b1bb      	cbz	r3, 800a24a <_strtod_l+0x742>
 800a21a:	461a      	mov	r2, r3
 800a21c:	9904      	ldr	r1, [sp, #16]
 800a21e:	4658      	mov	r0, fp
 800a220:	f001 f864 	bl	800b2ec <__pow5mult>
 800a224:	9004      	str	r0, [sp, #16]
 800a226:	2800      	cmp	r0, #0
 800a228:	f43f ae90 	beq.w	8009f4c <_strtod_l+0x444>
 800a22c:	4601      	mov	r1, r0
 800a22e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a230:	4658      	mov	r0, fp
 800a232:	f000 ffc6 	bl	800b1c2 <__multiply>
 800a236:	9009      	str	r0, [sp, #36]	; 0x24
 800a238:	2800      	cmp	r0, #0
 800a23a:	f43f ae87 	beq.w	8009f4c <_strtod_l+0x444>
 800a23e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a240:	4658      	mov	r0, fp
 800a242:	f000 fed7 	bl	800aff4 <_Bfree>
 800a246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a248:	931c      	str	r3, [sp, #112]	; 0x70
 800a24a:	2f00      	cmp	r7, #0
 800a24c:	dc7a      	bgt.n	800a344 <_strtod_l+0x83c>
 800a24e:	9b07      	ldr	r3, [sp, #28]
 800a250:	2b00      	cmp	r3, #0
 800a252:	dd08      	ble.n	800a266 <_strtod_l+0x75e>
 800a254:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a256:	9906      	ldr	r1, [sp, #24]
 800a258:	4658      	mov	r0, fp
 800a25a:	f001 f847 	bl	800b2ec <__pow5mult>
 800a25e:	9006      	str	r0, [sp, #24]
 800a260:	2800      	cmp	r0, #0
 800a262:	f43f ae73 	beq.w	8009f4c <_strtod_l+0x444>
 800a266:	2c00      	cmp	r4, #0
 800a268:	dd08      	ble.n	800a27c <_strtod_l+0x774>
 800a26a:	4622      	mov	r2, r4
 800a26c:	9906      	ldr	r1, [sp, #24]
 800a26e:	4658      	mov	r0, fp
 800a270:	f001 f88a 	bl	800b388 <__lshift>
 800a274:	9006      	str	r0, [sp, #24]
 800a276:	2800      	cmp	r0, #0
 800a278:	f43f ae68 	beq.w	8009f4c <_strtod_l+0x444>
 800a27c:	2e00      	cmp	r6, #0
 800a27e:	dd08      	ble.n	800a292 <_strtod_l+0x78a>
 800a280:	4632      	mov	r2, r6
 800a282:	9904      	ldr	r1, [sp, #16]
 800a284:	4658      	mov	r0, fp
 800a286:	f001 f87f 	bl	800b388 <__lshift>
 800a28a:	9004      	str	r0, [sp, #16]
 800a28c:	2800      	cmp	r0, #0
 800a28e:	f43f ae5d 	beq.w	8009f4c <_strtod_l+0x444>
 800a292:	9a06      	ldr	r2, [sp, #24]
 800a294:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a296:	4658      	mov	r0, fp
 800a298:	f001 f8e4 	bl	800b464 <__mdiff>
 800a29c:	4680      	mov	r8, r0
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	f43f ae54 	beq.w	8009f4c <_strtod_l+0x444>
 800a2a4:	2400      	movs	r4, #0
 800a2a6:	68c3      	ldr	r3, [r0, #12]
 800a2a8:	9904      	ldr	r1, [sp, #16]
 800a2aa:	60c4      	str	r4, [r0, #12]
 800a2ac:	930c      	str	r3, [sp, #48]	; 0x30
 800a2ae:	f001 f8bf 	bl	800b430 <__mcmp>
 800a2b2:	42a0      	cmp	r0, r4
 800a2b4:	da54      	bge.n	800a360 <_strtod_l+0x858>
 800a2b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2b8:	b9f3      	cbnz	r3, 800a2f8 <_strtod_l+0x7f0>
 800a2ba:	f1b9 0f00 	cmp.w	r9, #0
 800a2be:	d11b      	bne.n	800a2f8 <_strtod_l+0x7f0>
 800a2c0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800a2c4:	b9c3      	cbnz	r3, 800a2f8 <_strtod_l+0x7f0>
 800a2c6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a2ca:	0d1b      	lsrs	r3, r3, #20
 800a2cc:	051b      	lsls	r3, r3, #20
 800a2ce:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a2d2:	d911      	bls.n	800a2f8 <_strtod_l+0x7f0>
 800a2d4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a2d8:	b91b      	cbnz	r3, 800a2e2 <_strtod_l+0x7da>
 800a2da:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	dd0a      	ble.n	800a2f8 <_strtod_l+0x7f0>
 800a2e2:	4641      	mov	r1, r8
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	4658      	mov	r0, fp
 800a2e8:	f001 f84e 	bl	800b388 <__lshift>
 800a2ec:	9904      	ldr	r1, [sp, #16]
 800a2ee:	4680      	mov	r8, r0
 800a2f0:	f001 f89e 	bl	800b430 <__mcmp>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	dc68      	bgt.n	800a3ca <_strtod_l+0x8c2>
 800a2f8:	9b05      	ldr	r3, [sp, #20]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d172      	bne.n	800a3e4 <_strtod_l+0x8dc>
 800a2fe:	e630      	b.n	8009f62 <_strtod_l+0x45a>
 800a300:	f018 0f01 	tst.w	r8, #1
 800a304:	d004      	beq.n	800a310 <_strtod_l+0x808>
 800a306:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a30a:	f7f6 f8e5 	bl	80004d8 <__aeabi_dmul>
 800a30e:	2301      	movs	r3, #1
 800a310:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a314:	3508      	adds	r5, #8
 800a316:	e6dc      	b.n	800a0d2 <_strtod_l+0x5ca>
 800a318:	f04f 32ff 	mov.w	r2, #4294967295
 800a31c:	fa02 f303 	lsl.w	r3, r2, r3
 800a320:	ea03 0909 	and.w	r9, r3, r9
 800a324:	e6f6      	b.n	800a114 <_strtod_l+0x60c>
 800a326:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a32a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a32e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a332:	35e2      	adds	r5, #226	; 0xe2
 800a334:	fa07 f505 	lsl.w	r5, r7, r5
 800a338:	970f      	str	r7, [sp, #60]	; 0x3c
 800a33a:	e75c      	b.n	800a1f6 <_strtod_l+0x6ee>
 800a33c:	2301      	movs	r3, #1
 800a33e:	2500      	movs	r5, #0
 800a340:	930f      	str	r3, [sp, #60]	; 0x3c
 800a342:	e758      	b.n	800a1f6 <_strtod_l+0x6ee>
 800a344:	463a      	mov	r2, r7
 800a346:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a348:	4658      	mov	r0, fp
 800a34a:	f001 f81d 	bl	800b388 <__lshift>
 800a34e:	901c      	str	r0, [sp, #112]	; 0x70
 800a350:	2800      	cmp	r0, #0
 800a352:	f47f af7c 	bne.w	800a24e <_strtod_l+0x746>
 800a356:	e5f9      	b.n	8009f4c <_strtod_l+0x444>
 800a358:	0800e480 	.word	0x0800e480
 800a35c:	fffffc02 	.word	0xfffffc02
 800a360:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a364:	f040 8089 	bne.w	800a47a <_strtod_l+0x972>
 800a368:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a36a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800a36e:	b342      	cbz	r2, 800a3c2 <_strtod_l+0x8ba>
 800a370:	4aaf      	ldr	r2, [pc, #700]	; (800a630 <_strtod_l+0xb28>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d156      	bne.n	800a424 <_strtod_l+0x91c>
 800a376:	9b05      	ldr	r3, [sp, #20]
 800a378:	4648      	mov	r0, r9
 800a37a:	b1eb      	cbz	r3, 800a3b8 <_strtod_l+0x8b0>
 800a37c:	4653      	mov	r3, sl
 800a37e:	4aad      	ldr	r2, [pc, #692]	; (800a634 <_strtod_l+0xb2c>)
 800a380:	f04f 31ff 	mov.w	r1, #4294967295
 800a384:	401a      	ands	r2, r3
 800a386:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a38a:	d818      	bhi.n	800a3be <_strtod_l+0x8b6>
 800a38c:	0d12      	lsrs	r2, r2, #20
 800a38e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a392:	fa01 f303 	lsl.w	r3, r1, r3
 800a396:	4298      	cmp	r0, r3
 800a398:	d144      	bne.n	800a424 <_strtod_l+0x91c>
 800a39a:	4ba7      	ldr	r3, [pc, #668]	; (800a638 <_strtod_l+0xb30>)
 800a39c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d102      	bne.n	800a3a8 <_strtod_l+0x8a0>
 800a3a2:	3001      	adds	r0, #1
 800a3a4:	f43f add2 	beq.w	8009f4c <_strtod_l+0x444>
 800a3a8:	4ba2      	ldr	r3, [pc, #648]	; (800a634 <_strtod_l+0xb2c>)
 800a3aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3ac:	f04f 0900 	mov.w	r9, #0
 800a3b0:	401a      	ands	r2, r3
 800a3b2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800a3b6:	e79f      	b.n	800a2f8 <_strtod_l+0x7f0>
 800a3b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3bc:	e7eb      	b.n	800a396 <_strtod_l+0x88e>
 800a3be:	460b      	mov	r3, r1
 800a3c0:	e7e9      	b.n	800a396 <_strtod_l+0x88e>
 800a3c2:	bb7b      	cbnz	r3, 800a424 <_strtod_l+0x91c>
 800a3c4:	f1b9 0f00 	cmp.w	r9, #0
 800a3c8:	d12c      	bne.n	800a424 <_strtod_l+0x91c>
 800a3ca:	9905      	ldr	r1, [sp, #20]
 800a3cc:	4653      	mov	r3, sl
 800a3ce:	4a99      	ldr	r2, [pc, #612]	; (800a634 <_strtod_l+0xb2c>)
 800a3d0:	b1f1      	cbz	r1, 800a410 <_strtod_l+0x908>
 800a3d2:	ea02 010a 	and.w	r1, r2, sl
 800a3d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a3da:	dc19      	bgt.n	800a410 <_strtod_l+0x908>
 800a3dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a3e0:	f77f ae51 	ble.w	800a086 <_strtod_l+0x57e>
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	4a95      	ldr	r2, [pc, #596]	; (800a63c <_strtod_l+0xb34>)
 800a3e8:	4648      	mov	r0, r9
 800a3ea:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800a3ee:	4651      	mov	r1, sl
 800a3f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a3f4:	f7f6 f870 	bl	80004d8 <__aeabi_dmul>
 800a3f8:	4681      	mov	r9, r0
 800a3fa:	468a      	mov	sl, r1
 800a3fc:	2900      	cmp	r1, #0
 800a3fe:	f47f adb0 	bne.w	8009f62 <_strtod_l+0x45a>
 800a402:	2800      	cmp	r0, #0
 800a404:	f47f adad 	bne.w	8009f62 <_strtod_l+0x45a>
 800a408:	2322      	movs	r3, #34	; 0x22
 800a40a:	f8cb 3000 	str.w	r3, [fp]
 800a40e:	e5a8      	b.n	8009f62 <_strtod_l+0x45a>
 800a410:	4013      	ands	r3, r2
 800a412:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a416:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800a41a:	f04f 39ff 	mov.w	r9, #4294967295
 800a41e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800a422:	e769      	b.n	800a2f8 <_strtod_l+0x7f0>
 800a424:	b19d      	cbz	r5, 800a44e <_strtod_l+0x946>
 800a426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a428:	421d      	tst	r5, r3
 800a42a:	f43f af65 	beq.w	800a2f8 <_strtod_l+0x7f0>
 800a42e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a430:	9a05      	ldr	r2, [sp, #20]
 800a432:	4648      	mov	r0, r9
 800a434:	4651      	mov	r1, sl
 800a436:	b173      	cbz	r3, 800a456 <_strtod_l+0x94e>
 800a438:	f7ff fb43 	bl	8009ac2 <sulp>
 800a43c:	4602      	mov	r2, r0
 800a43e:	460b      	mov	r3, r1
 800a440:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a444:	f7f5 fe92 	bl	800016c <__adddf3>
 800a448:	4681      	mov	r9, r0
 800a44a:	468a      	mov	sl, r1
 800a44c:	e754      	b.n	800a2f8 <_strtod_l+0x7f0>
 800a44e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a450:	ea13 0f09 	tst.w	r3, r9
 800a454:	e7e9      	b.n	800a42a <_strtod_l+0x922>
 800a456:	f7ff fb34 	bl	8009ac2 <sulp>
 800a45a:	4602      	mov	r2, r0
 800a45c:	460b      	mov	r3, r1
 800a45e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a462:	f7f5 fe81 	bl	8000168 <__aeabi_dsub>
 800a466:	2200      	movs	r2, #0
 800a468:	2300      	movs	r3, #0
 800a46a:	4681      	mov	r9, r0
 800a46c:	468a      	mov	sl, r1
 800a46e:	f7f6 fa9b 	bl	80009a8 <__aeabi_dcmpeq>
 800a472:	2800      	cmp	r0, #0
 800a474:	f47f ae07 	bne.w	800a086 <_strtod_l+0x57e>
 800a478:	e73e      	b.n	800a2f8 <_strtod_l+0x7f0>
 800a47a:	9904      	ldr	r1, [sp, #16]
 800a47c:	4640      	mov	r0, r8
 800a47e:	f001 f914 	bl	800b6aa <__ratio>
 800a482:	2200      	movs	r2, #0
 800a484:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a488:	4606      	mov	r6, r0
 800a48a:	460f      	mov	r7, r1
 800a48c:	f7f6 faa0 	bl	80009d0 <__aeabi_dcmple>
 800a490:	2800      	cmp	r0, #0
 800a492:	d075      	beq.n	800a580 <_strtod_l+0xa78>
 800a494:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a496:	2b00      	cmp	r3, #0
 800a498:	d047      	beq.n	800a52a <_strtod_l+0xa22>
 800a49a:	2600      	movs	r6, #0
 800a49c:	4f68      	ldr	r7, [pc, #416]	; (800a640 <_strtod_l+0xb38>)
 800a49e:	4d68      	ldr	r5, [pc, #416]	; (800a640 <_strtod_l+0xb38>)
 800a4a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4a6:	0d1b      	lsrs	r3, r3, #20
 800a4a8:	051b      	lsls	r3, r3, #20
 800a4aa:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a4ae:	4b65      	ldr	r3, [pc, #404]	; (800a644 <_strtod_l+0xb3c>)
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	f040 80cf 	bne.w	800a654 <_strtod_l+0xb4c>
 800a4b6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a4ba:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a4be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c0:	4648      	mov	r0, r9
 800a4c2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800a4c6:	4651      	mov	r1, sl
 800a4c8:	f001 f82a 	bl	800b520 <__ulp>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	4639      	mov	r1, r7
 800a4d4:	f7f6 f800 	bl	80004d8 <__aeabi_dmul>
 800a4d8:	464a      	mov	r2, r9
 800a4da:	4653      	mov	r3, sl
 800a4dc:	f7f5 fe46 	bl	800016c <__adddf3>
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	4954      	ldr	r1, [pc, #336]	; (800a634 <_strtod_l+0xb2c>)
 800a4e4:	4a58      	ldr	r2, [pc, #352]	; (800a648 <_strtod_l+0xb40>)
 800a4e6:	4019      	ands	r1, r3
 800a4e8:	4291      	cmp	r1, r2
 800a4ea:	4681      	mov	r9, r0
 800a4ec:	d95e      	bls.n	800a5ac <_strtod_l+0xaa4>
 800a4ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4f0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d103      	bne.n	800a500 <_strtod_l+0x9f8>
 800a4f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	f43f ad26 	beq.w	8009f4c <_strtod_l+0x444>
 800a500:	f04f 39ff 	mov.w	r9, #4294967295
 800a504:	f8df a130 	ldr.w	sl, [pc, #304]	; 800a638 <_strtod_l+0xb30>
 800a508:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a50a:	4658      	mov	r0, fp
 800a50c:	f000 fd72 	bl	800aff4 <_Bfree>
 800a510:	9906      	ldr	r1, [sp, #24]
 800a512:	4658      	mov	r0, fp
 800a514:	f000 fd6e 	bl	800aff4 <_Bfree>
 800a518:	9904      	ldr	r1, [sp, #16]
 800a51a:	4658      	mov	r0, fp
 800a51c:	f000 fd6a 	bl	800aff4 <_Bfree>
 800a520:	4641      	mov	r1, r8
 800a522:	4658      	mov	r0, fp
 800a524:	f000 fd66 	bl	800aff4 <_Bfree>
 800a528:	e617      	b.n	800a15a <_strtod_l+0x652>
 800a52a:	f1b9 0f00 	cmp.w	r9, #0
 800a52e:	d119      	bne.n	800a564 <_strtod_l+0xa5c>
 800a530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a532:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a536:	b9e3      	cbnz	r3, 800a572 <_strtod_l+0xa6a>
 800a538:	2200      	movs	r2, #0
 800a53a:	4b41      	ldr	r3, [pc, #260]	; (800a640 <_strtod_l+0xb38>)
 800a53c:	4630      	mov	r0, r6
 800a53e:	4639      	mov	r1, r7
 800a540:	f7f6 fa3c 	bl	80009bc <__aeabi_dcmplt>
 800a544:	b9c8      	cbnz	r0, 800a57a <_strtod_l+0xa72>
 800a546:	2200      	movs	r2, #0
 800a548:	4b40      	ldr	r3, [pc, #256]	; (800a64c <_strtod_l+0xb44>)
 800a54a:	4630      	mov	r0, r6
 800a54c:	4639      	mov	r1, r7
 800a54e:	f7f5 ffc3 	bl	80004d8 <__aeabi_dmul>
 800a552:	4604      	mov	r4, r0
 800a554:	460d      	mov	r5, r1
 800a556:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a55a:	9418      	str	r4, [sp, #96]	; 0x60
 800a55c:	9319      	str	r3, [sp, #100]	; 0x64
 800a55e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800a562:	e79d      	b.n	800a4a0 <_strtod_l+0x998>
 800a564:	f1b9 0f01 	cmp.w	r9, #1
 800a568:	d103      	bne.n	800a572 <_strtod_l+0xa6a>
 800a56a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f43f ad8a 	beq.w	800a086 <_strtod_l+0x57e>
 800a572:	2600      	movs	r6, #0
 800a574:	4f36      	ldr	r7, [pc, #216]	; (800a650 <_strtod_l+0xb48>)
 800a576:	2400      	movs	r4, #0
 800a578:	e791      	b.n	800a49e <_strtod_l+0x996>
 800a57a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a57c:	4d33      	ldr	r5, [pc, #204]	; (800a64c <_strtod_l+0xb44>)
 800a57e:	e7ea      	b.n	800a556 <_strtod_l+0xa4e>
 800a580:	4b32      	ldr	r3, [pc, #200]	; (800a64c <_strtod_l+0xb44>)
 800a582:	2200      	movs	r2, #0
 800a584:	4630      	mov	r0, r6
 800a586:	4639      	mov	r1, r7
 800a588:	f7f5 ffa6 	bl	80004d8 <__aeabi_dmul>
 800a58c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a58e:	4604      	mov	r4, r0
 800a590:	460d      	mov	r5, r1
 800a592:	b933      	cbnz	r3, 800a5a2 <_strtod_l+0xa9a>
 800a594:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a598:	9010      	str	r0, [sp, #64]	; 0x40
 800a59a:	9311      	str	r3, [sp, #68]	; 0x44
 800a59c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a5a0:	e77e      	b.n	800a4a0 <_strtod_l+0x998>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a5aa:	e7f7      	b.n	800a59c <_strtod_l+0xa94>
 800a5ac:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 800a5b0:	9b05      	ldr	r3, [sp, #20]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1a8      	bne.n	800a508 <_strtod_l+0xa00>
 800a5b6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a5ba:	0d1b      	lsrs	r3, r3, #20
 800a5bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a5be:	051b      	lsls	r3, r3, #20
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	4656      	mov	r6, sl
 800a5c4:	d1a0      	bne.n	800a508 <_strtod_l+0xa00>
 800a5c6:	4629      	mov	r1, r5
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	f7f6 fa35 	bl	8000a38 <__aeabi_d2iz>
 800a5ce:	f7f5 ff19 	bl	8000404 <__aeabi_i2d>
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	4629      	mov	r1, r5
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f7f5 fdc5 	bl	8000168 <__aeabi_dsub>
 800a5de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5e0:	4604      	mov	r4, r0
 800a5e2:	460d      	mov	r5, r1
 800a5e4:	b933      	cbnz	r3, 800a5f4 <_strtod_l+0xaec>
 800a5e6:	f1b9 0f00 	cmp.w	r9, #0
 800a5ea:	d103      	bne.n	800a5f4 <_strtod_l+0xaec>
 800a5ec:	f3ca 0613 	ubfx	r6, sl, #0, #20
 800a5f0:	2e00      	cmp	r6, #0
 800a5f2:	d06a      	beq.n	800a6ca <_strtod_l+0xbc2>
 800a5f4:	a30a      	add	r3, pc, #40	; (adr r3, 800a620 <_strtod_l+0xb18>)
 800a5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	4629      	mov	r1, r5
 800a5fe:	f7f6 f9dd 	bl	80009bc <__aeabi_dcmplt>
 800a602:	2800      	cmp	r0, #0
 800a604:	f47f acad 	bne.w	8009f62 <_strtod_l+0x45a>
 800a608:	a307      	add	r3, pc, #28	; (adr r3, 800a628 <_strtod_l+0xb20>)
 800a60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60e:	4620      	mov	r0, r4
 800a610:	4629      	mov	r1, r5
 800a612:	f7f6 f9f1 	bl	80009f8 <__aeabi_dcmpgt>
 800a616:	2800      	cmp	r0, #0
 800a618:	f43f af76 	beq.w	800a508 <_strtod_l+0xa00>
 800a61c:	e4a1      	b.n	8009f62 <_strtod_l+0x45a>
 800a61e:	bf00      	nop
 800a620:	94a03595 	.word	0x94a03595
 800a624:	3fdfffff 	.word	0x3fdfffff
 800a628:	35afe535 	.word	0x35afe535
 800a62c:	3fe00000 	.word	0x3fe00000
 800a630:	000fffff 	.word	0x000fffff
 800a634:	7ff00000 	.word	0x7ff00000
 800a638:	7fefffff 	.word	0x7fefffff
 800a63c:	39500000 	.word	0x39500000
 800a640:	3ff00000 	.word	0x3ff00000
 800a644:	7fe00000 	.word	0x7fe00000
 800a648:	7c9fffff 	.word	0x7c9fffff
 800a64c:	3fe00000 	.word	0x3fe00000
 800a650:	bff00000 	.word	0xbff00000
 800a654:	9b05      	ldr	r3, [sp, #20]
 800a656:	b313      	cbz	r3, 800a69e <_strtod_l+0xb96>
 800a658:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a65a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a65e:	d81e      	bhi.n	800a69e <_strtod_l+0xb96>
 800a660:	a325      	add	r3, pc, #148	; (adr r3, 800a6f8 <_strtod_l+0xbf0>)
 800a662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a666:	4620      	mov	r0, r4
 800a668:	4629      	mov	r1, r5
 800a66a:	f7f6 f9b1 	bl	80009d0 <__aeabi_dcmple>
 800a66e:	b190      	cbz	r0, 800a696 <_strtod_l+0xb8e>
 800a670:	4629      	mov	r1, r5
 800a672:	4620      	mov	r0, r4
 800a674:	f7f6 fa08 	bl	8000a88 <__aeabi_d2uiz>
 800a678:	2800      	cmp	r0, #0
 800a67a:	bf08      	it	eq
 800a67c:	2001      	moveq	r0, #1
 800a67e:	f7f5 feb1 	bl	80003e4 <__aeabi_ui2d>
 800a682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a684:	4604      	mov	r4, r0
 800a686:	460d      	mov	r5, r1
 800a688:	b9d3      	cbnz	r3, 800a6c0 <_strtod_l+0xbb8>
 800a68a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a68e:	9012      	str	r0, [sp, #72]	; 0x48
 800a690:	9313      	str	r3, [sp, #76]	; 0x4c
 800a692:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a696:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a698:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a69c:	1a9f      	subs	r7, r3, r2
 800a69e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a6a2:	f000 ff3d 	bl	800b520 <__ulp>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	4639      	mov	r1, r7
 800a6ae:	f7f5 ff13 	bl	80004d8 <__aeabi_dmul>
 800a6b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a6b6:	f7f5 fd59 	bl	800016c <__adddf3>
 800a6ba:	4681      	mov	r9, r0
 800a6bc:	468a      	mov	sl, r1
 800a6be:	e777      	b.n	800a5b0 <_strtod_l+0xaa8>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a6c8:	e7e3      	b.n	800a692 <_strtod_l+0xb8a>
 800a6ca:	a30d      	add	r3, pc, #52	; (adr r3, 800a700 <_strtod_l+0xbf8>)
 800a6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d0:	f7f6 f974 	bl	80009bc <__aeabi_dcmplt>
 800a6d4:	e79f      	b.n	800a616 <_strtod_l+0xb0e>
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	930d      	str	r3, [sp, #52]	; 0x34
 800a6da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a6dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a6de:	6013      	str	r3, [r2, #0]
 800a6e0:	f7ff ba55 	b.w	8009b8e <_strtod_l+0x86>
 800a6e4:	2b65      	cmp	r3, #101	; 0x65
 800a6e6:	f04f 0200 	mov.w	r2, #0
 800a6ea:	f43f ab42 	beq.w	8009d72 <_strtod_l+0x26a>
 800a6ee:	2101      	movs	r1, #1
 800a6f0:	4614      	mov	r4, r2
 800a6f2:	9105      	str	r1, [sp, #20]
 800a6f4:	f7ff babf 	b.w	8009c76 <_strtod_l+0x16e>
 800a6f8:	ffc00000 	.word	0xffc00000
 800a6fc:	41dfffff 	.word	0x41dfffff
 800a700:	94a03595 	.word	0x94a03595
 800a704:	3fcfffff 	.word	0x3fcfffff

0800a708 <strtod>:
 800a708:	4b06      	ldr	r3, [pc, #24]	; (800a724 <strtod+0x1c>)
 800a70a:	b410      	push	{r4}
 800a70c:	681c      	ldr	r4, [r3, #0]
 800a70e:	4a06      	ldr	r2, [pc, #24]	; (800a728 <strtod+0x20>)
 800a710:	6a23      	ldr	r3, [r4, #32]
 800a712:	2b00      	cmp	r3, #0
 800a714:	bf08      	it	eq
 800a716:	4613      	moveq	r3, r2
 800a718:	460a      	mov	r2, r1
 800a71a:	4601      	mov	r1, r0
 800a71c:	4620      	mov	r0, r4
 800a71e:	bc10      	pop	{r4}
 800a720:	f7ff b9f2 	b.w	8009b08 <_strtod_l>
 800a724:	200001b4 	.word	0x200001b4
 800a728:	20000218 	.word	0x20000218

0800a72c <_strtol_l.isra.0>:
 800a72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a730:	4680      	mov	r8, r0
 800a732:	4689      	mov	r9, r1
 800a734:	4692      	mov	sl, r2
 800a736:	461e      	mov	r6, r3
 800a738:	460f      	mov	r7, r1
 800a73a:	463d      	mov	r5, r7
 800a73c:	9808      	ldr	r0, [sp, #32]
 800a73e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a742:	f000 fbfd 	bl	800af40 <__locale_ctype_ptr_l>
 800a746:	4420      	add	r0, r4
 800a748:	7843      	ldrb	r3, [r0, #1]
 800a74a:	f013 0308 	ands.w	r3, r3, #8
 800a74e:	d132      	bne.n	800a7b6 <_strtol_l.isra.0+0x8a>
 800a750:	2c2d      	cmp	r4, #45	; 0x2d
 800a752:	d132      	bne.n	800a7ba <_strtol_l.isra.0+0x8e>
 800a754:	2201      	movs	r2, #1
 800a756:	787c      	ldrb	r4, [r7, #1]
 800a758:	1cbd      	adds	r5, r7, #2
 800a75a:	2e00      	cmp	r6, #0
 800a75c:	d05d      	beq.n	800a81a <_strtol_l.isra.0+0xee>
 800a75e:	2e10      	cmp	r6, #16
 800a760:	d109      	bne.n	800a776 <_strtol_l.isra.0+0x4a>
 800a762:	2c30      	cmp	r4, #48	; 0x30
 800a764:	d107      	bne.n	800a776 <_strtol_l.isra.0+0x4a>
 800a766:	782b      	ldrb	r3, [r5, #0]
 800a768:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a76c:	2b58      	cmp	r3, #88	; 0x58
 800a76e:	d14f      	bne.n	800a810 <_strtol_l.isra.0+0xe4>
 800a770:	2610      	movs	r6, #16
 800a772:	786c      	ldrb	r4, [r5, #1]
 800a774:	3502      	adds	r5, #2
 800a776:	2a00      	cmp	r2, #0
 800a778:	bf14      	ite	ne
 800a77a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a77e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a782:	2700      	movs	r7, #0
 800a784:	fbb1 fcf6 	udiv	ip, r1, r6
 800a788:	4638      	mov	r0, r7
 800a78a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a78e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a792:	2b09      	cmp	r3, #9
 800a794:	d817      	bhi.n	800a7c6 <_strtol_l.isra.0+0x9a>
 800a796:	461c      	mov	r4, r3
 800a798:	42a6      	cmp	r6, r4
 800a79a:	dd23      	ble.n	800a7e4 <_strtol_l.isra.0+0xb8>
 800a79c:	1c7b      	adds	r3, r7, #1
 800a79e:	d007      	beq.n	800a7b0 <_strtol_l.isra.0+0x84>
 800a7a0:	4584      	cmp	ip, r0
 800a7a2:	d31c      	bcc.n	800a7de <_strtol_l.isra.0+0xb2>
 800a7a4:	d101      	bne.n	800a7aa <_strtol_l.isra.0+0x7e>
 800a7a6:	45a6      	cmp	lr, r4
 800a7a8:	db19      	blt.n	800a7de <_strtol_l.isra.0+0xb2>
 800a7aa:	2701      	movs	r7, #1
 800a7ac:	fb00 4006 	mla	r0, r0, r6, r4
 800a7b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7b4:	e7eb      	b.n	800a78e <_strtol_l.isra.0+0x62>
 800a7b6:	462f      	mov	r7, r5
 800a7b8:	e7bf      	b.n	800a73a <_strtol_l.isra.0+0xe>
 800a7ba:	2c2b      	cmp	r4, #43	; 0x2b
 800a7bc:	bf04      	itt	eq
 800a7be:	1cbd      	addeq	r5, r7, #2
 800a7c0:	787c      	ldrbeq	r4, [r7, #1]
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	e7c9      	b.n	800a75a <_strtol_l.isra.0+0x2e>
 800a7c6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a7ca:	2b19      	cmp	r3, #25
 800a7cc:	d801      	bhi.n	800a7d2 <_strtol_l.isra.0+0xa6>
 800a7ce:	3c37      	subs	r4, #55	; 0x37
 800a7d0:	e7e2      	b.n	800a798 <_strtol_l.isra.0+0x6c>
 800a7d2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a7d6:	2b19      	cmp	r3, #25
 800a7d8:	d804      	bhi.n	800a7e4 <_strtol_l.isra.0+0xb8>
 800a7da:	3c57      	subs	r4, #87	; 0x57
 800a7dc:	e7dc      	b.n	800a798 <_strtol_l.isra.0+0x6c>
 800a7de:	f04f 37ff 	mov.w	r7, #4294967295
 800a7e2:	e7e5      	b.n	800a7b0 <_strtol_l.isra.0+0x84>
 800a7e4:	1c7b      	adds	r3, r7, #1
 800a7e6:	d108      	bne.n	800a7fa <_strtol_l.isra.0+0xce>
 800a7e8:	2322      	movs	r3, #34	; 0x22
 800a7ea:	4608      	mov	r0, r1
 800a7ec:	f8c8 3000 	str.w	r3, [r8]
 800a7f0:	f1ba 0f00 	cmp.w	sl, #0
 800a7f4:	d107      	bne.n	800a806 <_strtol_l.isra.0+0xda>
 800a7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7fa:	b102      	cbz	r2, 800a7fe <_strtol_l.isra.0+0xd2>
 800a7fc:	4240      	negs	r0, r0
 800a7fe:	f1ba 0f00 	cmp.w	sl, #0
 800a802:	d0f8      	beq.n	800a7f6 <_strtol_l.isra.0+0xca>
 800a804:	b10f      	cbz	r7, 800a80a <_strtol_l.isra.0+0xde>
 800a806:	f105 39ff 	add.w	r9, r5, #4294967295
 800a80a:	f8ca 9000 	str.w	r9, [sl]
 800a80e:	e7f2      	b.n	800a7f6 <_strtol_l.isra.0+0xca>
 800a810:	2430      	movs	r4, #48	; 0x30
 800a812:	2e00      	cmp	r6, #0
 800a814:	d1af      	bne.n	800a776 <_strtol_l.isra.0+0x4a>
 800a816:	2608      	movs	r6, #8
 800a818:	e7ad      	b.n	800a776 <_strtol_l.isra.0+0x4a>
 800a81a:	2c30      	cmp	r4, #48	; 0x30
 800a81c:	d0a3      	beq.n	800a766 <_strtol_l.isra.0+0x3a>
 800a81e:	260a      	movs	r6, #10
 800a820:	e7a9      	b.n	800a776 <_strtol_l.isra.0+0x4a>
	...

0800a824 <_strtol_r>:
 800a824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a826:	4c06      	ldr	r4, [pc, #24]	; (800a840 <_strtol_r+0x1c>)
 800a828:	4d06      	ldr	r5, [pc, #24]	; (800a844 <_strtol_r+0x20>)
 800a82a:	6824      	ldr	r4, [r4, #0]
 800a82c:	6a24      	ldr	r4, [r4, #32]
 800a82e:	2c00      	cmp	r4, #0
 800a830:	bf08      	it	eq
 800a832:	462c      	moveq	r4, r5
 800a834:	9400      	str	r4, [sp, #0]
 800a836:	f7ff ff79 	bl	800a72c <_strtol_l.isra.0>
 800a83a:	b003      	add	sp, #12
 800a83c:	bd30      	pop	{r4, r5, pc}
 800a83e:	bf00      	nop
 800a840:	200001b4 	.word	0x200001b4
 800a844:	20000218 	.word	0x20000218

0800a848 <strtol>:
 800a848:	4b08      	ldr	r3, [pc, #32]	; (800a86c <strtol+0x24>)
 800a84a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a84c:	681c      	ldr	r4, [r3, #0]
 800a84e:	4d08      	ldr	r5, [pc, #32]	; (800a870 <strtol+0x28>)
 800a850:	6a23      	ldr	r3, [r4, #32]
 800a852:	2b00      	cmp	r3, #0
 800a854:	bf08      	it	eq
 800a856:	462b      	moveq	r3, r5
 800a858:	9300      	str	r3, [sp, #0]
 800a85a:	4613      	mov	r3, r2
 800a85c:	460a      	mov	r2, r1
 800a85e:	4601      	mov	r1, r0
 800a860:	4620      	mov	r0, r4
 800a862:	f7ff ff63 	bl	800a72c <_strtol_l.isra.0>
 800a866:	b003      	add	sp, #12
 800a868:	bd30      	pop	{r4, r5, pc}
 800a86a:	bf00      	nop
 800a86c:	200001b4 	.word	0x200001b4
 800a870:	20000218 	.word	0x20000218

0800a874 <__utoa>:
 800a874:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a876:	b08b      	sub	sp, #44	; 0x2c
 800a878:	4605      	mov	r5, r0
 800a87a:	460c      	mov	r4, r1
 800a87c:	466e      	mov	r6, sp
 800a87e:	4b1b      	ldr	r3, [pc, #108]	; (800a8ec <__utoa+0x78>)
 800a880:	f103 0c20 	add.w	ip, r3, #32
 800a884:	4637      	mov	r7, r6
 800a886:	6818      	ldr	r0, [r3, #0]
 800a888:	6859      	ldr	r1, [r3, #4]
 800a88a:	3308      	adds	r3, #8
 800a88c:	c703      	stmia	r7!, {r0, r1}
 800a88e:	4563      	cmp	r3, ip
 800a890:	463e      	mov	r6, r7
 800a892:	d1f7      	bne.n	800a884 <__utoa+0x10>
 800a894:	6818      	ldr	r0, [r3, #0]
 800a896:	791b      	ldrb	r3, [r3, #4]
 800a898:	6038      	str	r0, [r7, #0]
 800a89a:	713b      	strb	r3, [r7, #4]
 800a89c:	1e93      	subs	r3, r2, #2
 800a89e:	2b22      	cmp	r3, #34	; 0x22
 800a8a0:	f04f 0300 	mov.w	r3, #0
 800a8a4:	d904      	bls.n	800a8b0 <__utoa+0x3c>
 800a8a6:	7023      	strb	r3, [r4, #0]
 800a8a8:	461c      	mov	r4, r3
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	b00b      	add	sp, #44	; 0x2c
 800a8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8b0:	1e66      	subs	r6, r4, #1
 800a8b2:	fbb5 f0f2 	udiv	r0, r5, r2
 800a8b6:	fb02 5510 	mls	r5, r2, r0, r5
 800a8ba:	af0a      	add	r7, sp, #40	; 0x28
 800a8bc:	443d      	add	r5, r7
 800a8be:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800a8c2:	1c59      	adds	r1, r3, #1
 800a8c4:	f806 5f01 	strb.w	r5, [r6, #1]!
 800a8c8:	4605      	mov	r5, r0
 800a8ca:	b968      	cbnz	r0, 800a8e8 <__utoa+0x74>
 800a8cc:	4622      	mov	r2, r4
 800a8ce:	5460      	strb	r0, [r4, r1]
 800a8d0:	4423      	add	r3, r4
 800a8d2:	1b19      	subs	r1, r3, r4
 800a8d4:	1b10      	subs	r0, r2, r4
 800a8d6:	4281      	cmp	r1, r0
 800a8d8:	dde7      	ble.n	800a8aa <__utoa+0x36>
 800a8da:	7811      	ldrb	r1, [r2, #0]
 800a8dc:	7818      	ldrb	r0, [r3, #0]
 800a8de:	f802 0b01 	strb.w	r0, [r2], #1
 800a8e2:	f803 1901 	strb.w	r1, [r3], #-1
 800a8e6:	e7f4      	b.n	800a8d2 <__utoa+0x5e>
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	e7e2      	b.n	800a8b2 <__utoa+0x3e>
 800a8ec:	0800e4a8 	.word	0x0800e4a8

0800a8f0 <rshift>:
 800a8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8f2:	6906      	ldr	r6, [r0, #16]
 800a8f4:	114b      	asrs	r3, r1, #5
 800a8f6:	429e      	cmp	r6, r3
 800a8f8:	f100 0414 	add.w	r4, r0, #20
 800a8fc:	dd31      	ble.n	800a962 <rshift+0x72>
 800a8fe:	f011 011f 	ands.w	r1, r1, #31
 800a902:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a906:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a90a:	d108      	bne.n	800a91e <rshift+0x2e>
 800a90c:	4621      	mov	r1, r4
 800a90e:	42b2      	cmp	r2, r6
 800a910:	460b      	mov	r3, r1
 800a912:	d211      	bcs.n	800a938 <rshift+0x48>
 800a914:	f852 3b04 	ldr.w	r3, [r2], #4
 800a918:	f841 3b04 	str.w	r3, [r1], #4
 800a91c:	e7f7      	b.n	800a90e <rshift+0x1e>
 800a91e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a922:	4623      	mov	r3, r4
 800a924:	f1c1 0c20 	rsb	ip, r1, #32
 800a928:	40cd      	lsrs	r5, r1
 800a92a:	3204      	adds	r2, #4
 800a92c:	42b2      	cmp	r2, r6
 800a92e:	4617      	mov	r7, r2
 800a930:	d30d      	bcc.n	800a94e <rshift+0x5e>
 800a932:	601d      	str	r5, [r3, #0]
 800a934:	b105      	cbz	r5, 800a938 <rshift+0x48>
 800a936:	3304      	adds	r3, #4
 800a938:	42a3      	cmp	r3, r4
 800a93a:	eba3 0204 	sub.w	r2, r3, r4
 800a93e:	bf08      	it	eq
 800a940:	2300      	moveq	r3, #0
 800a942:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a946:	6102      	str	r2, [r0, #16]
 800a948:	bf08      	it	eq
 800a94a:	6143      	streq	r3, [r0, #20]
 800a94c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a94e:	683f      	ldr	r7, [r7, #0]
 800a950:	fa07 f70c 	lsl.w	r7, r7, ip
 800a954:	433d      	orrs	r5, r7
 800a956:	f843 5b04 	str.w	r5, [r3], #4
 800a95a:	f852 5b04 	ldr.w	r5, [r2], #4
 800a95e:	40cd      	lsrs	r5, r1
 800a960:	e7e4      	b.n	800a92c <rshift+0x3c>
 800a962:	4623      	mov	r3, r4
 800a964:	e7e8      	b.n	800a938 <rshift+0x48>

0800a966 <__hexdig_fun>:
 800a966:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a96a:	2b09      	cmp	r3, #9
 800a96c:	d802      	bhi.n	800a974 <__hexdig_fun+0xe>
 800a96e:	3820      	subs	r0, #32
 800a970:	b2c0      	uxtb	r0, r0
 800a972:	4770      	bx	lr
 800a974:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a978:	2b05      	cmp	r3, #5
 800a97a:	d801      	bhi.n	800a980 <__hexdig_fun+0x1a>
 800a97c:	3847      	subs	r0, #71	; 0x47
 800a97e:	e7f7      	b.n	800a970 <__hexdig_fun+0xa>
 800a980:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a984:	2b05      	cmp	r3, #5
 800a986:	d801      	bhi.n	800a98c <__hexdig_fun+0x26>
 800a988:	3827      	subs	r0, #39	; 0x27
 800a98a:	e7f1      	b.n	800a970 <__hexdig_fun+0xa>
 800a98c:	2000      	movs	r0, #0
 800a98e:	4770      	bx	lr

0800a990 <__gethex>:
 800a990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a994:	b08b      	sub	sp, #44	; 0x2c
 800a996:	9002      	str	r0, [sp, #8]
 800a998:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a99a:	468a      	mov	sl, r1
 800a99c:	4690      	mov	r8, r2
 800a99e:	9306      	str	r3, [sp, #24]
 800a9a0:	f000 fae0 	bl	800af64 <__localeconv_l>
 800a9a4:	6803      	ldr	r3, [r0, #0]
 800a9a6:	f04f 0b00 	mov.w	fp, #0
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	9303      	str	r3, [sp, #12]
 800a9ae:	f7f5 fbcf 	bl	8000150 <strlen>
 800a9b2:	9b03      	ldr	r3, [sp, #12]
 800a9b4:	9001      	str	r0, [sp, #4]
 800a9b6:	4403      	add	r3, r0
 800a9b8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a9bc:	9307      	str	r3, [sp, #28]
 800a9be:	f8da 3000 	ldr.w	r3, [sl]
 800a9c2:	3302      	adds	r3, #2
 800a9c4:	461f      	mov	r7, r3
 800a9c6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a9ca:	2830      	cmp	r0, #48	; 0x30
 800a9cc:	d06c      	beq.n	800aaa8 <__gethex+0x118>
 800a9ce:	f7ff ffca 	bl	800a966 <__hexdig_fun>
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	d16a      	bne.n	800aaae <__gethex+0x11e>
 800a9d8:	9a01      	ldr	r2, [sp, #4]
 800a9da:	9903      	ldr	r1, [sp, #12]
 800a9dc:	4638      	mov	r0, r7
 800a9de:	f001 fa78 	bl	800bed2 <strncmp>
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	d166      	bne.n	800aab4 <__gethex+0x124>
 800a9e6:	9b01      	ldr	r3, [sp, #4]
 800a9e8:	5cf8      	ldrb	r0, [r7, r3]
 800a9ea:	18fe      	adds	r6, r7, r3
 800a9ec:	f7ff ffbb 	bl	800a966 <__hexdig_fun>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	d062      	beq.n	800aaba <__gethex+0x12a>
 800a9f4:	4633      	mov	r3, r6
 800a9f6:	7818      	ldrb	r0, [r3, #0]
 800a9f8:	461f      	mov	r7, r3
 800a9fa:	2830      	cmp	r0, #48	; 0x30
 800a9fc:	f103 0301 	add.w	r3, r3, #1
 800aa00:	d0f9      	beq.n	800a9f6 <__gethex+0x66>
 800aa02:	f7ff ffb0 	bl	800a966 <__hexdig_fun>
 800aa06:	fab0 f580 	clz	r5, r0
 800aa0a:	4634      	mov	r4, r6
 800aa0c:	f04f 0b01 	mov.w	fp, #1
 800aa10:	096d      	lsrs	r5, r5, #5
 800aa12:	463a      	mov	r2, r7
 800aa14:	4616      	mov	r6, r2
 800aa16:	7830      	ldrb	r0, [r6, #0]
 800aa18:	3201      	adds	r2, #1
 800aa1a:	f7ff ffa4 	bl	800a966 <__hexdig_fun>
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	d1f8      	bne.n	800aa14 <__gethex+0x84>
 800aa22:	9a01      	ldr	r2, [sp, #4]
 800aa24:	9903      	ldr	r1, [sp, #12]
 800aa26:	4630      	mov	r0, r6
 800aa28:	f001 fa53 	bl	800bed2 <strncmp>
 800aa2c:	b950      	cbnz	r0, 800aa44 <__gethex+0xb4>
 800aa2e:	b954      	cbnz	r4, 800aa46 <__gethex+0xb6>
 800aa30:	9b01      	ldr	r3, [sp, #4]
 800aa32:	18f4      	adds	r4, r6, r3
 800aa34:	4622      	mov	r2, r4
 800aa36:	4616      	mov	r6, r2
 800aa38:	7830      	ldrb	r0, [r6, #0]
 800aa3a:	3201      	adds	r2, #1
 800aa3c:	f7ff ff93 	bl	800a966 <__hexdig_fun>
 800aa40:	2800      	cmp	r0, #0
 800aa42:	d1f8      	bne.n	800aa36 <__gethex+0xa6>
 800aa44:	b10c      	cbz	r4, 800aa4a <__gethex+0xba>
 800aa46:	1ba4      	subs	r4, r4, r6
 800aa48:	00a4      	lsls	r4, r4, #2
 800aa4a:	7833      	ldrb	r3, [r6, #0]
 800aa4c:	2b50      	cmp	r3, #80	; 0x50
 800aa4e:	d001      	beq.n	800aa54 <__gethex+0xc4>
 800aa50:	2b70      	cmp	r3, #112	; 0x70
 800aa52:	d140      	bne.n	800aad6 <__gethex+0x146>
 800aa54:	7873      	ldrb	r3, [r6, #1]
 800aa56:	2b2b      	cmp	r3, #43	; 0x2b
 800aa58:	d031      	beq.n	800aabe <__gethex+0x12e>
 800aa5a:	2b2d      	cmp	r3, #45	; 0x2d
 800aa5c:	d033      	beq.n	800aac6 <__gethex+0x136>
 800aa5e:	f04f 0900 	mov.w	r9, #0
 800aa62:	1c71      	adds	r1, r6, #1
 800aa64:	7808      	ldrb	r0, [r1, #0]
 800aa66:	f7ff ff7e 	bl	800a966 <__hexdig_fun>
 800aa6a:	1e43      	subs	r3, r0, #1
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	2b18      	cmp	r3, #24
 800aa70:	d831      	bhi.n	800aad6 <__gethex+0x146>
 800aa72:	f1a0 0210 	sub.w	r2, r0, #16
 800aa76:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aa7a:	f7ff ff74 	bl	800a966 <__hexdig_fun>
 800aa7e:	1e43      	subs	r3, r0, #1
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	2b18      	cmp	r3, #24
 800aa84:	d922      	bls.n	800aacc <__gethex+0x13c>
 800aa86:	f1b9 0f00 	cmp.w	r9, #0
 800aa8a:	d000      	beq.n	800aa8e <__gethex+0xfe>
 800aa8c:	4252      	negs	r2, r2
 800aa8e:	4414      	add	r4, r2
 800aa90:	f8ca 1000 	str.w	r1, [sl]
 800aa94:	b30d      	cbz	r5, 800aada <__gethex+0x14a>
 800aa96:	f1bb 0f00 	cmp.w	fp, #0
 800aa9a:	bf0c      	ite	eq
 800aa9c:	2706      	moveq	r7, #6
 800aa9e:	2700      	movne	r7, #0
 800aaa0:	4638      	mov	r0, r7
 800aaa2:	b00b      	add	sp, #44	; 0x2c
 800aaa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa8:	f10b 0b01 	add.w	fp, fp, #1
 800aaac:	e78a      	b.n	800a9c4 <__gethex+0x34>
 800aaae:	2500      	movs	r5, #0
 800aab0:	462c      	mov	r4, r5
 800aab2:	e7ae      	b.n	800aa12 <__gethex+0x82>
 800aab4:	463e      	mov	r6, r7
 800aab6:	2501      	movs	r5, #1
 800aab8:	e7c7      	b.n	800aa4a <__gethex+0xba>
 800aaba:	4604      	mov	r4, r0
 800aabc:	e7fb      	b.n	800aab6 <__gethex+0x126>
 800aabe:	f04f 0900 	mov.w	r9, #0
 800aac2:	1cb1      	adds	r1, r6, #2
 800aac4:	e7ce      	b.n	800aa64 <__gethex+0xd4>
 800aac6:	f04f 0901 	mov.w	r9, #1
 800aaca:	e7fa      	b.n	800aac2 <__gethex+0x132>
 800aacc:	230a      	movs	r3, #10
 800aace:	fb03 0202 	mla	r2, r3, r2, r0
 800aad2:	3a10      	subs	r2, #16
 800aad4:	e7cf      	b.n	800aa76 <__gethex+0xe6>
 800aad6:	4631      	mov	r1, r6
 800aad8:	e7da      	b.n	800aa90 <__gethex+0x100>
 800aada:	4629      	mov	r1, r5
 800aadc:	1bf3      	subs	r3, r6, r7
 800aade:	3b01      	subs	r3, #1
 800aae0:	2b07      	cmp	r3, #7
 800aae2:	dc49      	bgt.n	800ab78 <__gethex+0x1e8>
 800aae4:	9802      	ldr	r0, [sp, #8]
 800aae6:	f000 fa51 	bl	800af8c <_Balloc>
 800aaea:	f04f 0b00 	mov.w	fp, #0
 800aaee:	4605      	mov	r5, r0
 800aaf0:	46da      	mov	sl, fp
 800aaf2:	9b01      	ldr	r3, [sp, #4]
 800aaf4:	f100 0914 	add.w	r9, r0, #20
 800aaf8:	f1c3 0301 	rsb	r3, r3, #1
 800aafc:	f8cd 9010 	str.w	r9, [sp, #16]
 800ab00:	9308      	str	r3, [sp, #32]
 800ab02:	42b7      	cmp	r7, r6
 800ab04:	d33b      	bcc.n	800ab7e <__gethex+0x1ee>
 800ab06:	9804      	ldr	r0, [sp, #16]
 800ab08:	f840 ab04 	str.w	sl, [r0], #4
 800ab0c:	eba0 0009 	sub.w	r0, r0, r9
 800ab10:	1080      	asrs	r0, r0, #2
 800ab12:	6128      	str	r0, [r5, #16]
 800ab14:	0147      	lsls	r7, r0, #5
 800ab16:	4650      	mov	r0, sl
 800ab18:	f000 fafc 	bl	800b114 <__hi0bits>
 800ab1c:	f8d8 6000 	ldr.w	r6, [r8]
 800ab20:	1a3f      	subs	r7, r7, r0
 800ab22:	42b7      	cmp	r7, r6
 800ab24:	dd64      	ble.n	800abf0 <__gethex+0x260>
 800ab26:	1bbf      	subs	r7, r7, r6
 800ab28:	4639      	mov	r1, r7
 800ab2a:	4628      	mov	r0, r5
 800ab2c:	f000 fe05 	bl	800b73a <__any_on>
 800ab30:	4682      	mov	sl, r0
 800ab32:	b178      	cbz	r0, 800ab54 <__gethex+0x1c4>
 800ab34:	f04f 0a01 	mov.w	sl, #1
 800ab38:	1e7b      	subs	r3, r7, #1
 800ab3a:	1159      	asrs	r1, r3, #5
 800ab3c:	f003 021f 	and.w	r2, r3, #31
 800ab40:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ab44:	fa0a f202 	lsl.w	r2, sl, r2
 800ab48:	420a      	tst	r2, r1
 800ab4a:	d003      	beq.n	800ab54 <__gethex+0x1c4>
 800ab4c:	4553      	cmp	r3, sl
 800ab4e:	dc46      	bgt.n	800abde <__gethex+0x24e>
 800ab50:	f04f 0a02 	mov.w	sl, #2
 800ab54:	4639      	mov	r1, r7
 800ab56:	4628      	mov	r0, r5
 800ab58:	f7ff feca 	bl	800a8f0 <rshift>
 800ab5c:	443c      	add	r4, r7
 800ab5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab62:	42a3      	cmp	r3, r4
 800ab64:	da52      	bge.n	800ac0c <__gethex+0x27c>
 800ab66:	4629      	mov	r1, r5
 800ab68:	9802      	ldr	r0, [sp, #8]
 800ab6a:	f000 fa43 	bl	800aff4 <_Bfree>
 800ab6e:	2300      	movs	r3, #0
 800ab70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab72:	27a3      	movs	r7, #163	; 0xa3
 800ab74:	6013      	str	r3, [r2, #0]
 800ab76:	e793      	b.n	800aaa0 <__gethex+0x110>
 800ab78:	3101      	adds	r1, #1
 800ab7a:	105b      	asrs	r3, r3, #1
 800ab7c:	e7b0      	b.n	800aae0 <__gethex+0x150>
 800ab7e:	1e73      	subs	r3, r6, #1
 800ab80:	9305      	str	r3, [sp, #20]
 800ab82:	9a07      	ldr	r2, [sp, #28]
 800ab84:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d018      	beq.n	800abbe <__gethex+0x22e>
 800ab8c:	f1bb 0f20 	cmp.w	fp, #32
 800ab90:	d107      	bne.n	800aba2 <__gethex+0x212>
 800ab92:	9b04      	ldr	r3, [sp, #16]
 800ab94:	f8c3 a000 	str.w	sl, [r3]
 800ab98:	f04f 0a00 	mov.w	sl, #0
 800ab9c:	46d3      	mov	fp, sl
 800ab9e:	3304      	adds	r3, #4
 800aba0:	9304      	str	r3, [sp, #16]
 800aba2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800aba6:	f7ff fede 	bl	800a966 <__hexdig_fun>
 800abaa:	f000 000f 	and.w	r0, r0, #15
 800abae:	fa00 f00b 	lsl.w	r0, r0, fp
 800abb2:	ea4a 0a00 	orr.w	sl, sl, r0
 800abb6:	f10b 0b04 	add.w	fp, fp, #4
 800abba:	9b05      	ldr	r3, [sp, #20]
 800abbc:	e00d      	b.n	800abda <__gethex+0x24a>
 800abbe:	9b05      	ldr	r3, [sp, #20]
 800abc0:	9a08      	ldr	r2, [sp, #32]
 800abc2:	4413      	add	r3, r2
 800abc4:	42bb      	cmp	r3, r7
 800abc6:	d3e1      	bcc.n	800ab8c <__gethex+0x1fc>
 800abc8:	4618      	mov	r0, r3
 800abca:	9a01      	ldr	r2, [sp, #4]
 800abcc:	9903      	ldr	r1, [sp, #12]
 800abce:	9309      	str	r3, [sp, #36]	; 0x24
 800abd0:	f001 f97f 	bl	800bed2 <strncmp>
 800abd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abd6:	2800      	cmp	r0, #0
 800abd8:	d1d8      	bne.n	800ab8c <__gethex+0x1fc>
 800abda:	461e      	mov	r6, r3
 800abdc:	e791      	b.n	800ab02 <__gethex+0x172>
 800abde:	1eb9      	subs	r1, r7, #2
 800abe0:	4628      	mov	r0, r5
 800abe2:	f000 fdaa 	bl	800b73a <__any_on>
 800abe6:	2800      	cmp	r0, #0
 800abe8:	d0b2      	beq.n	800ab50 <__gethex+0x1c0>
 800abea:	f04f 0a03 	mov.w	sl, #3
 800abee:	e7b1      	b.n	800ab54 <__gethex+0x1c4>
 800abf0:	da09      	bge.n	800ac06 <__gethex+0x276>
 800abf2:	1bf7      	subs	r7, r6, r7
 800abf4:	4629      	mov	r1, r5
 800abf6:	463a      	mov	r2, r7
 800abf8:	9802      	ldr	r0, [sp, #8]
 800abfa:	f000 fbc5 	bl	800b388 <__lshift>
 800abfe:	4605      	mov	r5, r0
 800ac00:	1be4      	subs	r4, r4, r7
 800ac02:	f100 0914 	add.w	r9, r0, #20
 800ac06:	f04f 0a00 	mov.w	sl, #0
 800ac0a:	e7a8      	b.n	800ab5e <__gethex+0x1ce>
 800ac0c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ac10:	42a0      	cmp	r0, r4
 800ac12:	dd6b      	ble.n	800acec <__gethex+0x35c>
 800ac14:	1b04      	subs	r4, r0, r4
 800ac16:	42a6      	cmp	r6, r4
 800ac18:	dc2e      	bgt.n	800ac78 <__gethex+0x2e8>
 800ac1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac1e:	2b02      	cmp	r3, #2
 800ac20:	d022      	beq.n	800ac68 <__gethex+0x2d8>
 800ac22:	2b03      	cmp	r3, #3
 800ac24:	d024      	beq.n	800ac70 <__gethex+0x2e0>
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d115      	bne.n	800ac56 <__gethex+0x2c6>
 800ac2a:	42a6      	cmp	r6, r4
 800ac2c:	d113      	bne.n	800ac56 <__gethex+0x2c6>
 800ac2e:	2e01      	cmp	r6, #1
 800ac30:	dc0b      	bgt.n	800ac4a <__gethex+0x2ba>
 800ac32:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ac36:	9a06      	ldr	r2, [sp, #24]
 800ac38:	2762      	movs	r7, #98	; 0x62
 800ac3a:	6013      	str	r3, [r2, #0]
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	612b      	str	r3, [r5, #16]
 800ac40:	f8c9 3000 	str.w	r3, [r9]
 800ac44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac46:	601d      	str	r5, [r3, #0]
 800ac48:	e72a      	b.n	800aaa0 <__gethex+0x110>
 800ac4a:	1e71      	subs	r1, r6, #1
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	f000 fd74 	bl	800b73a <__any_on>
 800ac52:	2800      	cmp	r0, #0
 800ac54:	d1ed      	bne.n	800ac32 <__gethex+0x2a2>
 800ac56:	4629      	mov	r1, r5
 800ac58:	9802      	ldr	r0, [sp, #8]
 800ac5a:	f000 f9cb 	bl	800aff4 <_Bfree>
 800ac5e:	2300      	movs	r3, #0
 800ac60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac62:	2750      	movs	r7, #80	; 0x50
 800ac64:	6013      	str	r3, [r2, #0]
 800ac66:	e71b      	b.n	800aaa0 <__gethex+0x110>
 800ac68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d0e1      	beq.n	800ac32 <__gethex+0x2a2>
 800ac6e:	e7f2      	b.n	800ac56 <__gethex+0x2c6>
 800ac70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d1dd      	bne.n	800ac32 <__gethex+0x2a2>
 800ac76:	e7ee      	b.n	800ac56 <__gethex+0x2c6>
 800ac78:	1e67      	subs	r7, r4, #1
 800ac7a:	f1ba 0f00 	cmp.w	sl, #0
 800ac7e:	d132      	bne.n	800ace6 <__gethex+0x356>
 800ac80:	b127      	cbz	r7, 800ac8c <__gethex+0x2fc>
 800ac82:	4639      	mov	r1, r7
 800ac84:	4628      	mov	r0, r5
 800ac86:	f000 fd58 	bl	800b73a <__any_on>
 800ac8a:	4682      	mov	sl, r0
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	117a      	asrs	r2, r7, #5
 800ac90:	f007 071f 	and.w	r7, r7, #31
 800ac94:	fa03 f707 	lsl.w	r7, r3, r7
 800ac98:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800ac9c:	4621      	mov	r1, r4
 800ac9e:	421f      	tst	r7, r3
 800aca0:	f04f 0702 	mov.w	r7, #2
 800aca4:	4628      	mov	r0, r5
 800aca6:	bf18      	it	ne
 800aca8:	f04a 0a02 	orrne.w	sl, sl, #2
 800acac:	1b36      	subs	r6, r6, r4
 800acae:	f7ff fe1f 	bl	800a8f0 <rshift>
 800acb2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800acb6:	f1ba 0f00 	cmp.w	sl, #0
 800acba:	d048      	beq.n	800ad4e <__gethex+0x3be>
 800acbc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800acc0:	2b02      	cmp	r3, #2
 800acc2:	d015      	beq.n	800acf0 <__gethex+0x360>
 800acc4:	2b03      	cmp	r3, #3
 800acc6:	d017      	beq.n	800acf8 <__gethex+0x368>
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d109      	bne.n	800ace0 <__gethex+0x350>
 800accc:	f01a 0f02 	tst.w	sl, #2
 800acd0:	d006      	beq.n	800ace0 <__gethex+0x350>
 800acd2:	f8d9 3000 	ldr.w	r3, [r9]
 800acd6:	ea4a 0a03 	orr.w	sl, sl, r3
 800acda:	f01a 0f01 	tst.w	sl, #1
 800acde:	d10e      	bne.n	800acfe <__gethex+0x36e>
 800ace0:	f047 0710 	orr.w	r7, r7, #16
 800ace4:	e033      	b.n	800ad4e <__gethex+0x3be>
 800ace6:	f04f 0a01 	mov.w	sl, #1
 800acea:	e7cf      	b.n	800ac8c <__gethex+0x2fc>
 800acec:	2701      	movs	r7, #1
 800acee:	e7e2      	b.n	800acb6 <__gethex+0x326>
 800acf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acf2:	f1c3 0301 	rsb	r3, r3, #1
 800acf6:	9315      	str	r3, [sp, #84]	; 0x54
 800acf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d0f0      	beq.n	800ace0 <__gethex+0x350>
 800acfe:	f04f 0c00 	mov.w	ip, #0
 800ad02:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800ad06:	f105 0314 	add.w	r3, r5, #20
 800ad0a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800ad0e:	eb03 010a 	add.w	r1, r3, sl
 800ad12:	4618      	mov	r0, r3
 800ad14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad18:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ad1c:	d01c      	beq.n	800ad58 <__gethex+0x3c8>
 800ad1e:	3201      	adds	r2, #1
 800ad20:	6002      	str	r2, [r0, #0]
 800ad22:	2f02      	cmp	r7, #2
 800ad24:	f105 0314 	add.w	r3, r5, #20
 800ad28:	d138      	bne.n	800ad9c <__gethex+0x40c>
 800ad2a:	f8d8 2000 	ldr.w	r2, [r8]
 800ad2e:	3a01      	subs	r2, #1
 800ad30:	42b2      	cmp	r2, r6
 800ad32:	d10a      	bne.n	800ad4a <__gethex+0x3ba>
 800ad34:	2201      	movs	r2, #1
 800ad36:	1171      	asrs	r1, r6, #5
 800ad38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ad3c:	f006 061f 	and.w	r6, r6, #31
 800ad40:	fa02 f606 	lsl.w	r6, r2, r6
 800ad44:	421e      	tst	r6, r3
 800ad46:	bf18      	it	ne
 800ad48:	4617      	movne	r7, r2
 800ad4a:	f047 0720 	orr.w	r7, r7, #32
 800ad4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad50:	601d      	str	r5, [r3, #0]
 800ad52:	9b06      	ldr	r3, [sp, #24]
 800ad54:	601c      	str	r4, [r3, #0]
 800ad56:	e6a3      	b.n	800aaa0 <__gethex+0x110>
 800ad58:	4299      	cmp	r1, r3
 800ad5a:	f843 cc04 	str.w	ip, [r3, #-4]
 800ad5e:	d8d8      	bhi.n	800ad12 <__gethex+0x382>
 800ad60:	68ab      	ldr	r3, [r5, #8]
 800ad62:	4599      	cmp	r9, r3
 800ad64:	db12      	blt.n	800ad8c <__gethex+0x3fc>
 800ad66:	6869      	ldr	r1, [r5, #4]
 800ad68:	9802      	ldr	r0, [sp, #8]
 800ad6a:	3101      	adds	r1, #1
 800ad6c:	f000 f90e 	bl	800af8c <_Balloc>
 800ad70:	4683      	mov	fp, r0
 800ad72:	692a      	ldr	r2, [r5, #16]
 800ad74:	f105 010c 	add.w	r1, r5, #12
 800ad78:	3202      	adds	r2, #2
 800ad7a:	0092      	lsls	r2, r2, #2
 800ad7c:	300c      	adds	r0, #12
 800ad7e:	f7fe fe36 	bl	80099ee <memcpy>
 800ad82:	4629      	mov	r1, r5
 800ad84:	9802      	ldr	r0, [sp, #8]
 800ad86:	f000 f935 	bl	800aff4 <_Bfree>
 800ad8a:	465d      	mov	r5, fp
 800ad8c:	692b      	ldr	r3, [r5, #16]
 800ad8e:	1c5a      	adds	r2, r3, #1
 800ad90:	612a      	str	r2, [r5, #16]
 800ad92:	2201      	movs	r2, #1
 800ad94:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ad98:	615a      	str	r2, [r3, #20]
 800ad9a:	e7c2      	b.n	800ad22 <__gethex+0x392>
 800ad9c:	692a      	ldr	r2, [r5, #16]
 800ad9e:	454a      	cmp	r2, r9
 800ada0:	dd0b      	ble.n	800adba <__gethex+0x42a>
 800ada2:	2101      	movs	r1, #1
 800ada4:	4628      	mov	r0, r5
 800ada6:	f7ff fda3 	bl	800a8f0 <rshift>
 800adaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800adae:	3401      	adds	r4, #1
 800adb0:	42a3      	cmp	r3, r4
 800adb2:	f6ff aed8 	blt.w	800ab66 <__gethex+0x1d6>
 800adb6:	2701      	movs	r7, #1
 800adb8:	e7c7      	b.n	800ad4a <__gethex+0x3ba>
 800adba:	f016 061f 	ands.w	r6, r6, #31
 800adbe:	d0fa      	beq.n	800adb6 <__gethex+0x426>
 800adc0:	449a      	add	sl, r3
 800adc2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800adc6:	f000 f9a5 	bl	800b114 <__hi0bits>
 800adca:	f1c6 0620 	rsb	r6, r6, #32
 800adce:	42b0      	cmp	r0, r6
 800add0:	dbe7      	blt.n	800ada2 <__gethex+0x412>
 800add2:	e7f0      	b.n	800adb6 <__gethex+0x426>

0800add4 <L_shift>:
 800add4:	f1c2 0208 	rsb	r2, r2, #8
 800add8:	0092      	lsls	r2, r2, #2
 800adda:	b570      	push	{r4, r5, r6, lr}
 800addc:	f1c2 0620 	rsb	r6, r2, #32
 800ade0:	6843      	ldr	r3, [r0, #4]
 800ade2:	6804      	ldr	r4, [r0, #0]
 800ade4:	fa03 f506 	lsl.w	r5, r3, r6
 800ade8:	432c      	orrs	r4, r5
 800adea:	40d3      	lsrs	r3, r2
 800adec:	6004      	str	r4, [r0, #0]
 800adee:	f840 3f04 	str.w	r3, [r0, #4]!
 800adf2:	4288      	cmp	r0, r1
 800adf4:	d3f4      	bcc.n	800ade0 <L_shift+0xc>
 800adf6:	bd70      	pop	{r4, r5, r6, pc}

0800adf8 <__match>:
 800adf8:	b530      	push	{r4, r5, lr}
 800adfa:	6803      	ldr	r3, [r0, #0]
 800adfc:	3301      	adds	r3, #1
 800adfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae02:	b914      	cbnz	r4, 800ae0a <__match+0x12>
 800ae04:	6003      	str	r3, [r0, #0]
 800ae06:	2001      	movs	r0, #1
 800ae08:	bd30      	pop	{r4, r5, pc}
 800ae0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae0e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ae12:	2d19      	cmp	r5, #25
 800ae14:	bf98      	it	ls
 800ae16:	3220      	addls	r2, #32
 800ae18:	42a2      	cmp	r2, r4
 800ae1a:	d0f0      	beq.n	800adfe <__match+0x6>
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	e7f3      	b.n	800ae08 <__match+0x10>

0800ae20 <__hexnan>:
 800ae20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae24:	2500      	movs	r5, #0
 800ae26:	680b      	ldr	r3, [r1, #0]
 800ae28:	4682      	mov	sl, r0
 800ae2a:	115f      	asrs	r7, r3, #5
 800ae2c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800ae30:	f013 031f 	ands.w	r3, r3, #31
 800ae34:	bf18      	it	ne
 800ae36:	3704      	addne	r7, #4
 800ae38:	1f3e      	subs	r6, r7, #4
 800ae3a:	4690      	mov	r8, r2
 800ae3c:	46b1      	mov	r9, r6
 800ae3e:	4634      	mov	r4, r6
 800ae40:	46ab      	mov	fp, r5
 800ae42:	b087      	sub	sp, #28
 800ae44:	6801      	ldr	r1, [r0, #0]
 800ae46:	9301      	str	r3, [sp, #4]
 800ae48:	f847 5c04 	str.w	r5, [r7, #-4]
 800ae4c:	9502      	str	r5, [sp, #8]
 800ae4e:	784a      	ldrb	r2, [r1, #1]
 800ae50:	1c4b      	adds	r3, r1, #1
 800ae52:	9303      	str	r3, [sp, #12]
 800ae54:	b342      	cbz	r2, 800aea8 <__hexnan+0x88>
 800ae56:	4610      	mov	r0, r2
 800ae58:	9105      	str	r1, [sp, #20]
 800ae5a:	9204      	str	r2, [sp, #16]
 800ae5c:	f7ff fd83 	bl	800a966 <__hexdig_fun>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	d143      	bne.n	800aeec <__hexnan+0xcc>
 800ae64:	9a04      	ldr	r2, [sp, #16]
 800ae66:	9905      	ldr	r1, [sp, #20]
 800ae68:	2a20      	cmp	r2, #32
 800ae6a:	d818      	bhi.n	800ae9e <__hexnan+0x7e>
 800ae6c:	9b02      	ldr	r3, [sp, #8]
 800ae6e:	459b      	cmp	fp, r3
 800ae70:	dd13      	ble.n	800ae9a <__hexnan+0x7a>
 800ae72:	454c      	cmp	r4, r9
 800ae74:	d206      	bcs.n	800ae84 <__hexnan+0x64>
 800ae76:	2d07      	cmp	r5, #7
 800ae78:	dc04      	bgt.n	800ae84 <__hexnan+0x64>
 800ae7a:	462a      	mov	r2, r5
 800ae7c:	4649      	mov	r1, r9
 800ae7e:	4620      	mov	r0, r4
 800ae80:	f7ff ffa8 	bl	800add4 <L_shift>
 800ae84:	4544      	cmp	r4, r8
 800ae86:	d944      	bls.n	800af12 <__hexnan+0xf2>
 800ae88:	2300      	movs	r3, #0
 800ae8a:	f1a4 0904 	sub.w	r9, r4, #4
 800ae8e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae92:	461d      	mov	r5, r3
 800ae94:	464c      	mov	r4, r9
 800ae96:	f8cd b008 	str.w	fp, [sp, #8]
 800ae9a:	9903      	ldr	r1, [sp, #12]
 800ae9c:	e7d7      	b.n	800ae4e <__hexnan+0x2e>
 800ae9e:	2a29      	cmp	r2, #41	; 0x29
 800aea0:	d14a      	bne.n	800af38 <__hexnan+0x118>
 800aea2:	3102      	adds	r1, #2
 800aea4:	f8ca 1000 	str.w	r1, [sl]
 800aea8:	f1bb 0f00 	cmp.w	fp, #0
 800aeac:	d044      	beq.n	800af38 <__hexnan+0x118>
 800aeae:	454c      	cmp	r4, r9
 800aeb0:	d206      	bcs.n	800aec0 <__hexnan+0xa0>
 800aeb2:	2d07      	cmp	r5, #7
 800aeb4:	dc04      	bgt.n	800aec0 <__hexnan+0xa0>
 800aeb6:	462a      	mov	r2, r5
 800aeb8:	4649      	mov	r1, r9
 800aeba:	4620      	mov	r0, r4
 800aebc:	f7ff ff8a 	bl	800add4 <L_shift>
 800aec0:	4544      	cmp	r4, r8
 800aec2:	d928      	bls.n	800af16 <__hexnan+0xf6>
 800aec4:	4643      	mov	r3, r8
 800aec6:	f854 2b04 	ldr.w	r2, [r4], #4
 800aeca:	42a6      	cmp	r6, r4
 800aecc:	f843 2b04 	str.w	r2, [r3], #4
 800aed0:	d2f9      	bcs.n	800aec6 <__hexnan+0xa6>
 800aed2:	2200      	movs	r2, #0
 800aed4:	f843 2b04 	str.w	r2, [r3], #4
 800aed8:	429e      	cmp	r6, r3
 800aeda:	d2fb      	bcs.n	800aed4 <__hexnan+0xb4>
 800aedc:	6833      	ldr	r3, [r6, #0]
 800aede:	b91b      	cbnz	r3, 800aee8 <__hexnan+0xc8>
 800aee0:	4546      	cmp	r6, r8
 800aee2:	d127      	bne.n	800af34 <__hexnan+0x114>
 800aee4:	2301      	movs	r3, #1
 800aee6:	6033      	str	r3, [r6, #0]
 800aee8:	2005      	movs	r0, #5
 800aeea:	e026      	b.n	800af3a <__hexnan+0x11a>
 800aeec:	3501      	adds	r5, #1
 800aeee:	2d08      	cmp	r5, #8
 800aef0:	f10b 0b01 	add.w	fp, fp, #1
 800aef4:	dd06      	ble.n	800af04 <__hexnan+0xe4>
 800aef6:	4544      	cmp	r4, r8
 800aef8:	d9cf      	bls.n	800ae9a <__hexnan+0x7a>
 800aefa:	2300      	movs	r3, #0
 800aefc:	2501      	movs	r5, #1
 800aefe:	f844 3c04 	str.w	r3, [r4, #-4]
 800af02:	3c04      	subs	r4, #4
 800af04:	6822      	ldr	r2, [r4, #0]
 800af06:	f000 000f 	and.w	r0, r0, #15
 800af0a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800af0e:	6020      	str	r0, [r4, #0]
 800af10:	e7c3      	b.n	800ae9a <__hexnan+0x7a>
 800af12:	2508      	movs	r5, #8
 800af14:	e7c1      	b.n	800ae9a <__hexnan+0x7a>
 800af16:	9b01      	ldr	r3, [sp, #4]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d0df      	beq.n	800aedc <__hexnan+0xbc>
 800af1c:	f04f 32ff 	mov.w	r2, #4294967295
 800af20:	f1c3 0320 	rsb	r3, r3, #32
 800af24:	fa22 f303 	lsr.w	r3, r2, r3
 800af28:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800af2c:	401a      	ands	r2, r3
 800af2e:	f847 2c04 	str.w	r2, [r7, #-4]
 800af32:	e7d3      	b.n	800aedc <__hexnan+0xbc>
 800af34:	3e04      	subs	r6, #4
 800af36:	e7d1      	b.n	800aedc <__hexnan+0xbc>
 800af38:	2004      	movs	r0, #4
 800af3a:	b007      	add	sp, #28
 800af3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af40 <__locale_ctype_ptr_l>:
 800af40:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800af44:	4770      	bx	lr
	...

0800af48 <__locale_ctype_ptr>:
 800af48:	4b04      	ldr	r3, [pc, #16]	; (800af5c <__locale_ctype_ptr+0x14>)
 800af4a:	4a05      	ldr	r2, [pc, #20]	; (800af60 <__locale_ctype_ptr+0x18>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	6a1b      	ldr	r3, [r3, #32]
 800af50:	2b00      	cmp	r3, #0
 800af52:	bf08      	it	eq
 800af54:	4613      	moveq	r3, r2
 800af56:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800af5a:	4770      	bx	lr
 800af5c:	200001b4 	.word	0x200001b4
 800af60:	20000218 	.word	0x20000218

0800af64 <__localeconv_l>:
 800af64:	30f0      	adds	r0, #240	; 0xf0
 800af66:	4770      	bx	lr

0800af68 <__ascii_mbtowc>:
 800af68:	b082      	sub	sp, #8
 800af6a:	b901      	cbnz	r1, 800af6e <__ascii_mbtowc+0x6>
 800af6c:	a901      	add	r1, sp, #4
 800af6e:	b142      	cbz	r2, 800af82 <__ascii_mbtowc+0x1a>
 800af70:	b14b      	cbz	r3, 800af86 <__ascii_mbtowc+0x1e>
 800af72:	7813      	ldrb	r3, [r2, #0]
 800af74:	600b      	str	r3, [r1, #0]
 800af76:	7812      	ldrb	r2, [r2, #0]
 800af78:	1c10      	adds	r0, r2, #0
 800af7a:	bf18      	it	ne
 800af7c:	2001      	movne	r0, #1
 800af7e:	b002      	add	sp, #8
 800af80:	4770      	bx	lr
 800af82:	4610      	mov	r0, r2
 800af84:	e7fb      	b.n	800af7e <__ascii_mbtowc+0x16>
 800af86:	f06f 0001 	mvn.w	r0, #1
 800af8a:	e7f8      	b.n	800af7e <__ascii_mbtowc+0x16>

0800af8c <_Balloc>:
 800af8c:	b570      	push	{r4, r5, r6, lr}
 800af8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800af90:	4604      	mov	r4, r0
 800af92:	460e      	mov	r6, r1
 800af94:	b93d      	cbnz	r5, 800afa6 <_Balloc+0x1a>
 800af96:	2010      	movs	r0, #16
 800af98:	f001 f880 	bl	800c09c <malloc>
 800af9c:	6260      	str	r0, [r4, #36]	; 0x24
 800af9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800afa2:	6005      	str	r5, [r0, #0]
 800afa4:	60c5      	str	r5, [r0, #12]
 800afa6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800afa8:	68eb      	ldr	r3, [r5, #12]
 800afaa:	b183      	cbz	r3, 800afce <_Balloc+0x42>
 800afac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800afb4:	b9b8      	cbnz	r0, 800afe6 <_Balloc+0x5a>
 800afb6:	2101      	movs	r1, #1
 800afb8:	fa01 f506 	lsl.w	r5, r1, r6
 800afbc:	1d6a      	adds	r2, r5, #5
 800afbe:	0092      	lsls	r2, r2, #2
 800afc0:	4620      	mov	r0, r4
 800afc2:	f000 fbdb 	bl	800b77c <_calloc_r>
 800afc6:	b160      	cbz	r0, 800afe2 <_Balloc+0x56>
 800afc8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800afcc:	e00e      	b.n	800afec <_Balloc+0x60>
 800afce:	2221      	movs	r2, #33	; 0x21
 800afd0:	2104      	movs	r1, #4
 800afd2:	4620      	mov	r0, r4
 800afd4:	f000 fbd2 	bl	800b77c <_calloc_r>
 800afd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afda:	60e8      	str	r0, [r5, #12]
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d1e4      	bne.n	800afac <_Balloc+0x20>
 800afe2:	2000      	movs	r0, #0
 800afe4:	bd70      	pop	{r4, r5, r6, pc}
 800afe6:	6802      	ldr	r2, [r0, #0]
 800afe8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800afec:	2300      	movs	r3, #0
 800afee:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aff2:	e7f7      	b.n	800afe4 <_Balloc+0x58>

0800aff4 <_Bfree>:
 800aff4:	b570      	push	{r4, r5, r6, lr}
 800aff6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800aff8:	4606      	mov	r6, r0
 800affa:	460d      	mov	r5, r1
 800affc:	b93c      	cbnz	r4, 800b00e <_Bfree+0x1a>
 800affe:	2010      	movs	r0, #16
 800b000:	f001 f84c 	bl	800c09c <malloc>
 800b004:	6270      	str	r0, [r6, #36]	; 0x24
 800b006:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b00a:	6004      	str	r4, [r0, #0]
 800b00c:	60c4      	str	r4, [r0, #12]
 800b00e:	b13d      	cbz	r5, 800b020 <_Bfree+0x2c>
 800b010:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b012:	686a      	ldr	r2, [r5, #4]
 800b014:	68db      	ldr	r3, [r3, #12]
 800b016:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b01a:	6029      	str	r1, [r5, #0]
 800b01c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b020:	bd70      	pop	{r4, r5, r6, pc}

0800b022 <__multadd>:
 800b022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b026:	461f      	mov	r7, r3
 800b028:	4606      	mov	r6, r0
 800b02a:	460c      	mov	r4, r1
 800b02c:	2300      	movs	r3, #0
 800b02e:	690d      	ldr	r5, [r1, #16]
 800b030:	f101 0c14 	add.w	ip, r1, #20
 800b034:	f8dc 0000 	ldr.w	r0, [ip]
 800b038:	3301      	adds	r3, #1
 800b03a:	b281      	uxth	r1, r0
 800b03c:	fb02 7101 	mla	r1, r2, r1, r7
 800b040:	0c00      	lsrs	r0, r0, #16
 800b042:	0c0f      	lsrs	r7, r1, #16
 800b044:	fb02 7000 	mla	r0, r2, r0, r7
 800b048:	b289      	uxth	r1, r1
 800b04a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b04e:	429d      	cmp	r5, r3
 800b050:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b054:	f84c 1b04 	str.w	r1, [ip], #4
 800b058:	dcec      	bgt.n	800b034 <__multadd+0x12>
 800b05a:	b1d7      	cbz	r7, 800b092 <__multadd+0x70>
 800b05c:	68a3      	ldr	r3, [r4, #8]
 800b05e:	42ab      	cmp	r3, r5
 800b060:	dc12      	bgt.n	800b088 <__multadd+0x66>
 800b062:	6861      	ldr	r1, [r4, #4]
 800b064:	4630      	mov	r0, r6
 800b066:	3101      	adds	r1, #1
 800b068:	f7ff ff90 	bl	800af8c <_Balloc>
 800b06c:	4680      	mov	r8, r0
 800b06e:	6922      	ldr	r2, [r4, #16]
 800b070:	f104 010c 	add.w	r1, r4, #12
 800b074:	3202      	adds	r2, #2
 800b076:	0092      	lsls	r2, r2, #2
 800b078:	300c      	adds	r0, #12
 800b07a:	f7fe fcb8 	bl	80099ee <memcpy>
 800b07e:	4621      	mov	r1, r4
 800b080:	4630      	mov	r0, r6
 800b082:	f7ff ffb7 	bl	800aff4 <_Bfree>
 800b086:	4644      	mov	r4, r8
 800b088:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b08c:	3501      	adds	r5, #1
 800b08e:	615f      	str	r7, [r3, #20]
 800b090:	6125      	str	r5, [r4, #16]
 800b092:	4620      	mov	r0, r4
 800b094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b098 <__s2b>:
 800b098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b09c:	4615      	mov	r5, r2
 800b09e:	2209      	movs	r2, #9
 800b0a0:	461f      	mov	r7, r3
 800b0a2:	3308      	adds	r3, #8
 800b0a4:	460c      	mov	r4, r1
 800b0a6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0aa:	4606      	mov	r6, r0
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	db20      	blt.n	800b0f6 <__s2b+0x5e>
 800b0b4:	4630      	mov	r0, r6
 800b0b6:	f7ff ff69 	bl	800af8c <_Balloc>
 800b0ba:	9b08      	ldr	r3, [sp, #32]
 800b0bc:	2d09      	cmp	r5, #9
 800b0be:	6143      	str	r3, [r0, #20]
 800b0c0:	f04f 0301 	mov.w	r3, #1
 800b0c4:	6103      	str	r3, [r0, #16]
 800b0c6:	dd19      	ble.n	800b0fc <__s2b+0x64>
 800b0c8:	f104 0809 	add.w	r8, r4, #9
 800b0cc:	46c1      	mov	r9, r8
 800b0ce:	442c      	add	r4, r5
 800b0d0:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b0d4:	4601      	mov	r1, r0
 800b0d6:	3b30      	subs	r3, #48	; 0x30
 800b0d8:	220a      	movs	r2, #10
 800b0da:	4630      	mov	r0, r6
 800b0dc:	f7ff ffa1 	bl	800b022 <__multadd>
 800b0e0:	45a1      	cmp	r9, r4
 800b0e2:	d1f5      	bne.n	800b0d0 <__s2b+0x38>
 800b0e4:	eb08 0405 	add.w	r4, r8, r5
 800b0e8:	3c08      	subs	r4, #8
 800b0ea:	1b2d      	subs	r5, r5, r4
 800b0ec:	1963      	adds	r3, r4, r5
 800b0ee:	42bb      	cmp	r3, r7
 800b0f0:	db07      	blt.n	800b102 <__s2b+0x6a>
 800b0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0f6:	0052      	lsls	r2, r2, #1
 800b0f8:	3101      	adds	r1, #1
 800b0fa:	e7d9      	b.n	800b0b0 <__s2b+0x18>
 800b0fc:	340a      	adds	r4, #10
 800b0fe:	2509      	movs	r5, #9
 800b100:	e7f3      	b.n	800b0ea <__s2b+0x52>
 800b102:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b106:	4601      	mov	r1, r0
 800b108:	3b30      	subs	r3, #48	; 0x30
 800b10a:	220a      	movs	r2, #10
 800b10c:	4630      	mov	r0, r6
 800b10e:	f7ff ff88 	bl	800b022 <__multadd>
 800b112:	e7eb      	b.n	800b0ec <__s2b+0x54>

0800b114 <__hi0bits>:
 800b114:	0c02      	lsrs	r2, r0, #16
 800b116:	0412      	lsls	r2, r2, #16
 800b118:	4603      	mov	r3, r0
 800b11a:	b9b2      	cbnz	r2, 800b14a <__hi0bits+0x36>
 800b11c:	0403      	lsls	r3, r0, #16
 800b11e:	2010      	movs	r0, #16
 800b120:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b124:	bf04      	itt	eq
 800b126:	021b      	lsleq	r3, r3, #8
 800b128:	3008      	addeq	r0, #8
 800b12a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b12e:	bf04      	itt	eq
 800b130:	011b      	lsleq	r3, r3, #4
 800b132:	3004      	addeq	r0, #4
 800b134:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b138:	bf04      	itt	eq
 800b13a:	009b      	lsleq	r3, r3, #2
 800b13c:	3002      	addeq	r0, #2
 800b13e:	2b00      	cmp	r3, #0
 800b140:	db06      	blt.n	800b150 <__hi0bits+0x3c>
 800b142:	005b      	lsls	r3, r3, #1
 800b144:	d503      	bpl.n	800b14e <__hi0bits+0x3a>
 800b146:	3001      	adds	r0, #1
 800b148:	4770      	bx	lr
 800b14a:	2000      	movs	r0, #0
 800b14c:	e7e8      	b.n	800b120 <__hi0bits+0xc>
 800b14e:	2020      	movs	r0, #32
 800b150:	4770      	bx	lr

0800b152 <__lo0bits>:
 800b152:	6803      	ldr	r3, [r0, #0]
 800b154:	4601      	mov	r1, r0
 800b156:	f013 0207 	ands.w	r2, r3, #7
 800b15a:	d00b      	beq.n	800b174 <__lo0bits+0x22>
 800b15c:	07da      	lsls	r2, r3, #31
 800b15e:	d423      	bmi.n	800b1a8 <__lo0bits+0x56>
 800b160:	0798      	lsls	r0, r3, #30
 800b162:	bf49      	itett	mi
 800b164:	085b      	lsrmi	r3, r3, #1
 800b166:	089b      	lsrpl	r3, r3, #2
 800b168:	2001      	movmi	r0, #1
 800b16a:	600b      	strmi	r3, [r1, #0]
 800b16c:	bf5c      	itt	pl
 800b16e:	600b      	strpl	r3, [r1, #0]
 800b170:	2002      	movpl	r0, #2
 800b172:	4770      	bx	lr
 800b174:	b298      	uxth	r0, r3
 800b176:	b9a8      	cbnz	r0, 800b1a4 <__lo0bits+0x52>
 800b178:	2010      	movs	r0, #16
 800b17a:	0c1b      	lsrs	r3, r3, #16
 800b17c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b180:	bf04      	itt	eq
 800b182:	0a1b      	lsreq	r3, r3, #8
 800b184:	3008      	addeq	r0, #8
 800b186:	071a      	lsls	r2, r3, #28
 800b188:	bf04      	itt	eq
 800b18a:	091b      	lsreq	r3, r3, #4
 800b18c:	3004      	addeq	r0, #4
 800b18e:	079a      	lsls	r2, r3, #30
 800b190:	bf04      	itt	eq
 800b192:	089b      	lsreq	r3, r3, #2
 800b194:	3002      	addeq	r0, #2
 800b196:	07da      	lsls	r2, r3, #31
 800b198:	d402      	bmi.n	800b1a0 <__lo0bits+0x4e>
 800b19a:	085b      	lsrs	r3, r3, #1
 800b19c:	d006      	beq.n	800b1ac <__lo0bits+0x5a>
 800b19e:	3001      	adds	r0, #1
 800b1a0:	600b      	str	r3, [r1, #0]
 800b1a2:	4770      	bx	lr
 800b1a4:	4610      	mov	r0, r2
 800b1a6:	e7e9      	b.n	800b17c <__lo0bits+0x2a>
 800b1a8:	2000      	movs	r0, #0
 800b1aa:	4770      	bx	lr
 800b1ac:	2020      	movs	r0, #32
 800b1ae:	4770      	bx	lr

0800b1b0 <__i2b>:
 800b1b0:	b510      	push	{r4, lr}
 800b1b2:	460c      	mov	r4, r1
 800b1b4:	2101      	movs	r1, #1
 800b1b6:	f7ff fee9 	bl	800af8c <_Balloc>
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	6144      	str	r4, [r0, #20]
 800b1be:	6102      	str	r2, [r0, #16]
 800b1c0:	bd10      	pop	{r4, pc}

0800b1c2 <__multiply>:
 800b1c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c6:	4614      	mov	r4, r2
 800b1c8:	690a      	ldr	r2, [r1, #16]
 800b1ca:	6923      	ldr	r3, [r4, #16]
 800b1cc:	4688      	mov	r8, r1
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	bfbe      	ittt	lt
 800b1d2:	460b      	movlt	r3, r1
 800b1d4:	46a0      	movlt	r8, r4
 800b1d6:	461c      	movlt	r4, r3
 800b1d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b1dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b1e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b1e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b1e8:	eb07 0609 	add.w	r6, r7, r9
 800b1ec:	42b3      	cmp	r3, r6
 800b1ee:	bfb8      	it	lt
 800b1f0:	3101      	addlt	r1, #1
 800b1f2:	f7ff fecb 	bl	800af8c <_Balloc>
 800b1f6:	f100 0514 	add.w	r5, r0, #20
 800b1fa:	462b      	mov	r3, r5
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b202:	4573      	cmp	r3, lr
 800b204:	d316      	bcc.n	800b234 <__multiply+0x72>
 800b206:	f104 0214 	add.w	r2, r4, #20
 800b20a:	f108 0114 	add.w	r1, r8, #20
 800b20e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b212:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b216:	9300      	str	r3, [sp, #0]
 800b218:	9b00      	ldr	r3, [sp, #0]
 800b21a:	9201      	str	r2, [sp, #4]
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d80c      	bhi.n	800b23a <__multiply+0x78>
 800b220:	2e00      	cmp	r6, #0
 800b222:	dd03      	ble.n	800b22c <__multiply+0x6a>
 800b224:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d05d      	beq.n	800b2e8 <__multiply+0x126>
 800b22c:	6106      	str	r6, [r0, #16]
 800b22e:	b003      	add	sp, #12
 800b230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b234:	f843 2b04 	str.w	r2, [r3], #4
 800b238:	e7e3      	b.n	800b202 <__multiply+0x40>
 800b23a:	f8b2 b000 	ldrh.w	fp, [r2]
 800b23e:	f1bb 0f00 	cmp.w	fp, #0
 800b242:	d023      	beq.n	800b28c <__multiply+0xca>
 800b244:	4689      	mov	r9, r1
 800b246:	46ac      	mov	ip, r5
 800b248:	f04f 0800 	mov.w	r8, #0
 800b24c:	f859 4b04 	ldr.w	r4, [r9], #4
 800b250:	f8dc a000 	ldr.w	sl, [ip]
 800b254:	b2a3      	uxth	r3, r4
 800b256:	fa1f fa8a 	uxth.w	sl, sl
 800b25a:	fb0b a303 	mla	r3, fp, r3, sl
 800b25e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b262:	f8dc 4000 	ldr.w	r4, [ip]
 800b266:	4443      	add	r3, r8
 800b268:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b26c:	fb0b 840a 	mla	r4, fp, sl, r8
 800b270:	46e2      	mov	sl, ip
 800b272:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b276:	b29b      	uxth	r3, r3
 800b278:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b27c:	454f      	cmp	r7, r9
 800b27e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b282:	f84a 3b04 	str.w	r3, [sl], #4
 800b286:	d82b      	bhi.n	800b2e0 <__multiply+0x11e>
 800b288:	f8cc 8004 	str.w	r8, [ip, #4]
 800b28c:	9b01      	ldr	r3, [sp, #4]
 800b28e:	3204      	adds	r2, #4
 800b290:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b294:	f1ba 0f00 	cmp.w	sl, #0
 800b298:	d020      	beq.n	800b2dc <__multiply+0x11a>
 800b29a:	4689      	mov	r9, r1
 800b29c:	46a8      	mov	r8, r5
 800b29e:	f04f 0b00 	mov.w	fp, #0
 800b2a2:	682b      	ldr	r3, [r5, #0]
 800b2a4:	f8b9 c000 	ldrh.w	ip, [r9]
 800b2a8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	fb0a 440c 	mla	r4, sl, ip, r4
 800b2b2:	46c4      	mov	ip, r8
 800b2b4:	445c      	add	r4, fp
 800b2b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b2ba:	f84c 3b04 	str.w	r3, [ip], #4
 800b2be:	f859 3b04 	ldr.w	r3, [r9], #4
 800b2c2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b2c6:	0c1b      	lsrs	r3, r3, #16
 800b2c8:	fb0a b303 	mla	r3, sl, r3, fp
 800b2cc:	454f      	cmp	r7, r9
 800b2ce:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b2d2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b2d6:	d805      	bhi.n	800b2e4 <__multiply+0x122>
 800b2d8:	f8c8 3004 	str.w	r3, [r8, #4]
 800b2dc:	3504      	adds	r5, #4
 800b2de:	e79b      	b.n	800b218 <__multiply+0x56>
 800b2e0:	46d4      	mov	ip, sl
 800b2e2:	e7b3      	b.n	800b24c <__multiply+0x8a>
 800b2e4:	46e0      	mov	r8, ip
 800b2e6:	e7dd      	b.n	800b2a4 <__multiply+0xe2>
 800b2e8:	3e01      	subs	r6, #1
 800b2ea:	e799      	b.n	800b220 <__multiply+0x5e>

0800b2ec <__pow5mult>:
 800b2ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2f0:	4615      	mov	r5, r2
 800b2f2:	f012 0203 	ands.w	r2, r2, #3
 800b2f6:	4606      	mov	r6, r0
 800b2f8:	460f      	mov	r7, r1
 800b2fa:	d007      	beq.n	800b30c <__pow5mult+0x20>
 800b2fc:	4c21      	ldr	r4, [pc, #132]	; (800b384 <__pow5mult+0x98>)
 800b2fe:	3a01      	subs	r2, #1
 800b300:	2300      	movs	r3, #0
 800b302:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b306:	f7ff fe8c 	bl	800b022 <__multadd>
 800b30a:	4607      	mov	r7, r0
 800b30c:	10ad      	asrs	r5, r5, #2
 800b30e:	d035      	beq.n	800b37c <__pow5mult+0x90>
 800b310:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b312:	b93c      	cbnz	r4, 800b324 <__pow5mult+0x38>
 800b314:	2010      	movs	r0, #16
 800b316:	f000 fec1 	bl	800c09c <malloc>
 800b31a:	6270      	str	r0, [r6, #36]	; 0x24
 800b31c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b320:	6004      	str	r4, [r0, #0]
 800b322:	60c4      	str	r4, [r0, #12]
 800b324:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b328:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b32c:	b94c      	cbnz	r4, 800b342 <__pow5mult+0x56>
 800b32e:	f240 2171 	movw	r1, #625	; 0x271
 800b332:	4630      	mov	r0, r6
 800b334:	f7ff ff3c 	bl	800b1b0 <__i2b>
 800b338:	2300      	movs	r3, #0
 800b33a:	4604      	mov	r4, r0
 800b33c:	f8c8 0008 	str.w	r0, [r8, #8]
 800b340:	6003      	str	r3, [r0, #0]
 800b342:	f04f 0800 	mov.w	r8, #0
 800b346:	07eb      	lsls	r3, r5, #31
 800b348:	d50a      	bpl.n	800b360 <__pow5mult+0x74>
 800b34a:	4639      	mov	r1, r7
 800b34c:	4622      	mov	r2, r4
 800b34e:	4630      	mov	r0, r6
 800b350:	f7ff ff37 	bl	800b1c2 <__multiply>
 800b354:	4681      	mov	r9, r0
 800b356:	4639      	mov	r1, r7
 800b358:	4630      	mov	r0, r6
 800b35a:	f7ff fe4b 	bl	800aff4 <_Bfree>
 800b35e:	464f      	mov	r7, r9
 800b360:	106d      	asrs	r5, r5, #1
 800b362:	d00b      	beq.n	800b37c <__pow5mult+0x90>
 800b364:	6820      	ldr	r0, [r4, #0]
 800b366:	b938      	cbnz	r0, 800b378 <__pow5mult+0x8c>
 800b368:	4622      	mov	r2, r4
 800b36a:	4621      	mov	r1, r4
 800b36c:	4630      	mov	r0, r6
 800b36e:	f7ff ff28 	bl	800b1c2 <__multiply>
 800b372:	6020      	str	r0, [r4, #0]
 800b374:	f8c0 8000 	str.w	r8, [r0]
 800b378:	4604      	mov	r4, r0
 800b37a:	e7e4      	b.n	800b346 <__pow5mult+0x5a>
 800b37c:	4638      	mov	r0, r7
 800b37e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b382:	bf00      	nop
 800b384:	0800e5c8 	.word	0x0800e5c8

0800b388 <__lshift>:
 800b388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b38c:	460c      	mov	r4, r1
 800b38e:	4607      	mov	r7, r0
 800b390:	4616      	mov	r6, r2
 800b392:	6923      	ldr	r3, [r4, #16]
 800b394:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b398:	eb0a 0903 	add.w	r9, sl, r3
 800b39c:	6849      	ldr	r1, [r1, #4]
 800b39e:	68a3      	ldr	r3, [r4, #8]
 800b3a0:	f109 0501 	add.w	r5, r9, #1
 800b3a4:	42ab      	cmp	r3, r5
 800b3a6:	db32      	blt.n	800b40e <__lshift+0x86>
 800b3a8:	4638      	mov	r0, r7
 800b3aa:	f7ff fdef 	bl	800af8c <_Balloc>
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	4680      	mov	r8, r0
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	f100 0114 	add.w	r1, r0, #20
 800b3b8:	4553      	cmp	r3, sl
 800b3ba:	db2b      	blt.n	800b414 <__lshift+0x8c>
 800b3bc:	6920      	ldr	r0, [r4, #16]
 800b3be:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3c2:	f104 0314 	add.w	r3, r4, #20
 800b3c6:	f016 021f 	ands.w	r2, r6, #31
 800b3ca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3ce:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b3d2:	d025      	beq.n	800b420 <__lshift+0x98>
 800b3d4:	2000      	movs	r0, #0
 800b3d6:	f1c2 0e20 	rsb	lr, r2, #32
 800b3da:	468a      	mov	sl, r1
 800b3dc:	681e      	ldr	r6, [r3, #0]
 800b3de:	4096      	lsls	r6, r2
 800b3e0:	4330      	orrs	r0, r6
 800b3e2:	f84a 0b04 	str.w	r0, [sl], #4
 800b3e6:	f853 0b04 	ldr.w	r0, [r3], #4
 800b3ea:	459c      	cmp	ip, r3
 800b3ec:	fa20 f00e 	lsr.w	r0, r0, lr
 800b3f0:	d814      	bhi.n	800b41c <__lshift+0x94>
 800b3f2:	6048      	str	r0, [r1, #4]
 800b3f4:	b108      	cbz	r0, 800b3fa <__lshift+0x72>
 800b3f6:	f109 0502 	add.w	r5, r9, #2
 800b3fa:	3d01      	subs	r5, #1
 800b3fc:	4638      	mov	r0, r7
 800b3fe:	f8c8 5010 	str.w	r5, [r8, #16]
 800b402:	4621      	mov	r1, r4
 800b404:	f7ff fdf6 	bl	800aff4 <_Bfree>
 800b408:	4640      	mov	r0, r8
 800b40a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b40e:	3101      	adds	r1, #1
 800b410:	005b      	lsls	r3, r3, #1
 800b412:	e7c7      	b.n	800b3a4 <__lshift+0x1c>
 800b414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b418:	3301      	adds	r3, #1
 800b41a:	e7cd      	b.n	800b3b8 <__lshift+0x30>
 800b41c:	4651      	mov	r1, sl
 800b41e:	e7dc      	b.n	800b3da <__lshift+0x52>
 800b420:	3904      	subs	r1, #4
 800b422:	f853 2b04 	ldr.w	r2, [r3], #4
 800b426:	459c      	cmp	ip, r3
 800b428:	f841 2f04 	str.w	r2, [r1, #4]!
 800b42c:	d8f9      	bhi.n	800b422 <__lshift+0x9a>
 800b42e:	e7e4      	b.n	800b3fa <__lshift+0x72>

0800b430 <__mcmp>:
 800b430:	6903      	ldr	r3, [r0, #16]
 800b432:	690a      	ldr	r2, [r1, #16]
 800b434:	b530      	push	{r4, r5, lr}
 800b436:	1a9b      	subs	r3, r3, r2
 800b438:	d10c      	bne.n	800b454 <__mcmp+0x24>
 800b43a:	0092      	lsls	r2, r2, #2
 800b43c:	3014      	adds	r0, #20
 800b43e:	3114      	adds	r1, #20
 800b440:	1884      	adds	r4, r0, r2
 800b442:	4411      	add	r1, r2
 800b444:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b448:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b44c:	4295      	cmp	r5, r2
 800b44e:	d003      	beq.n	800b458 <__mcmp+0x28>
 800b450:	d305      	bcc.n	800b45e <__mcmp+0x2e>
 800b452:	2301      	movs	r3, #1
 800b454:	4618      	mov	r0, r3
 800b456:	bd30      	pop	{r4, r5, pc}
 800b458:	42a0      	cmp	r0, r4
 800b45a:	d3f3      	bcc.n	800b444 <__mcmp+0x14>
 800b45c:	e7fa      	b.n	800b454 <__mcmp+0x24>
 800b45e:	f04f 33ff 	mov.w	r3, #4294967295
 800b462:	e7f7      	b.n	800b454 <__mcmp+0x24>

0800b464 <__mdiff>:
 800b464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b468:	460d      	mov	r5, r1
 800b46a:	4607      	mov	r7, r0
 800b46c:	4611      	mov	r1, r2
 800b46e:	4628      	mov	r0, r5
 800b470:	4614      	mov	r4, r2
 800b472:	f7ff ffdd 	bl	800b430 <__mcmp>
 800b476:	1e06      	subs	r6, r0, #0
 800b478:	d108      	bne.n	800b48c <__mdiff+0x28>
 800b47a:	4631      	mov	r1, r6
 800b47c:	4638      	mov	r0, r7
 800b47e:	f7ff fd85 	bl	800af8c <_Balloc>
 800b482:	2301      	movs	r3, #1
 800b484:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b48c:	bfa4      	itt	ge
 800b48e:	4623      	movge	r3, r4
 800b490:	462c      	movge	r4, r5
 800b492:	4638      	mov	r0, r7
 800b494:	6861      	ldr	r1, [r4, #4]
 800b496:	bfa6      	itte	ge
 800b498:	461d      	movge	r5, r3
 800b49a:	2600      	movge	r6, #0
 800b49c:	2601      	movlt	r6, #1
 800b49e:	f7ff fd75 	bl	800af8c <_Balloc>
 800b4a2:	f04f 0e00 	mov.w	lr, #0
 800b4a6:	60c6      	str	r6, [r0, #12]
 800b4a8:	692b      	ldr	r3, [r5, #16]
 800b4aa:	6926      	ldr	r6, [r4, #16]
 800b4ac:	f104 0214 	add.w	r2, r4, #20
 800b4b0:	f105 0914 	add.w	r9, r5, #20
 800b4b4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b4b8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b4bc:	f100 0114 	add.w	r1, r0, #20
 800b4c0:	f852 ab04 	ldr.w	sl, [r2], #4
 800b4c4:	f859 5b04 	ldr.w	r5, [r9], #4
 800b4c8:	fa1f f38a 	uxth.w	r3, sl
 800b4cc:	4473      	add	r3, lr
 800b4ce:	b2ac      	uxth	r4, r5
 800b4d0:	1b1b      	subs	r3, r3, r4
 800b4d2:	0c2c      	lsrs	r4, r5, #16
 800b4d4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800b4d8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800b4e2:	45c8      	cmp	r8, r9
 800b4e4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800b4e8:	4694      	mov	ip, r2
 800b4ea:	f841 4b04 	str.w	r4, [r1], #4
 800b4ee:	d8e7      	bhi.n	800b4c0 <__mdiff+0x5c>
 800b4f0:	45bc      	cmp	ip, r7
 800b4f2:	d304      	bcc.n	800b4fe <__mdiff+0x9a>
 800b4f4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b4f8:	b183      	cbz	r3, 800b51c <__mdiff+0xb8>
 800b4fa:	6106      	str	r6, [r0, #16]
 800b4fc:	e7c4      	b.n	800b488 <__mdiff+0x24>
 800b4fe:	f85c 4b04 	ldr.w	r4, [ip], #4
 800b502:	b2a2      	uxth	r2, r4
 800b504:	4472      	add	r2, lr
 800b506:	1413      	asrs	r3, r2, #16
 800b508:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b50c:	b292      	uxth	r2, r2
 800b50e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b512:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b516:	f841 2b04 	str.w	r2, [r1], #4
 800b51a:	e7e9      	b.n	800b4f0 <__mdiff+0x8c>
 800b51c:	3e01      	subs	r6, #1
 800b51e:	e7e9      	b.n	800b4f4 <__mdiff+0x90>

0800b520 <__ulp>:
 800b520:	4b10      	ldr	r3, [pc, #64]	; (800b564 <__ulp+0x44>)
 800b522:	400b      	ands	r3, r1
 800b524:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b528:	2b00      	cmp	r3, #0
 800b52a:	dd02      	ble.n	800b532 <__ulp+0x12>
 800b52c:	2000      	movs	r0, #0
 800b52e:	4619      	mov	r1, r3
 800b530:	4770      	bx	lr
 800b532:	425b      	negs	r3, r3
 800b534:	151b      	asrs	r3, r3, #20
 800b536:	2b13      	cmp	r3, #19
 800b538:	f04f 0000 	mov.w	r0, #0
 800b53c:	f04f 0100 	mov.w	r1, #0
 800b540:	dc04      	bgt.n	800b54c <__ulp+0x2c>
 800b542:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b546:	fa42 f103 	asr.w	r1, r2, r3
 800b54a:	4770      	bx	lr
 800b54c:	2201      	movs	r2, #1
 800b54e:	3b14      	subs	r3, #20
 800b550:	2b1e      	cmp	r3, #30
 800b552:	bfce      	itee	gt
 800b554:	4613      	movgt	r3, r2
 800b556:	f1c3 031f 	rsble	r3, r3, #31
 800b55a:	fa02 f303 	lslle.w	r3, r2, r3
 800b55e:	4618      	mov	r0, r3
 800b560:	4770      	bx	lr
 800b562:	bf00      	nop
 800b564:	7ff00000 	.word	0x7ff00000

0800b568 <__b2d>:
 800b568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b56c:	6907      	ldr	r7, [r0, #16]
 800b56e:	f100 0914 	add.w	r9, r0, #20
 800b572:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b576:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b57a:	f1a7 0804 	sub.w	r8, r7, #4
 800b57e:	4630      	mov	r0, r6
 800b580:	f7ff fdc8 	bl	800b114 <__hi0bits>
 800b584:	f1c0 0320 	rsb	r3, r0, #32
 800b588:	280a      	cmp	r0, #10
 800b58a:	600b      	str	r3, [r1, #0]
 800b58c:	491e      	ldr	r1, [pc, #120]	; (800b608 <__b2d+0xa0>)
 800b58e:	dc17      	bgt.n	800b5c0 <__b2d+0x58>
 800b590:	45c1      	cmp	r9, r8
 800b592:	bf28      	it	cs
 800b594:	2200      	movcs	r2, #0
 800b596:	f1c0 0c0b 	rsb	ip, r0, #11
 800b59a:	fa26 f30c 	lsr.w	r3, r6, ip
 800b59e:	bf38      	it	cc
 800b5a0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b5a4:	ea43 0501 	orr.w	r5, r3, r1
 800b5a8:	f100 0315 	add.w	r3, r0, #21
 800b5ac:	fa06 f303 	lsl.w	r3, r6, r3
 800b5b0:	fa22 f20c 	lsr.w	r2, r2, ip
 800b5b4:	ea43 0402 	orr.w	r4, r3, r2
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	4629      	mov	r1, r5
 800b5bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5c0:	45c1      	cmp	r9, r8
 800b5c2:	bf3a      	itte	cc
 800b5c4:	f1a7 0808 	subcc.w	r8, r7, #8
 800b5c8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b5cc:	2200      	movcs	r2, #0
 800b5ce:	f1b0 030b 	subs.w	r3, r0, #11
 800b5d2:	d015      	beq.n	800b600 <__b2d+0x98>
 800b5d4:	409e      	lsls	r6, r3
 800b5d6:	f1c3 0720 	rsb	r7, r3, #32
 800b5da:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800b5de:	fa22 f107 	lsr.w	r1, r2, r7
 800b5e2:	45c8      	cmp	r8, r9
 800b5e4:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800b5e8:	ea46 0501 	orr.w	r5, r6, r1
 800b5ec:	bf94      	ite	ls
 800b5ee:	2100      	movls	r1, #0
 800b5f0:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b5f4:	fa02 f003 	lsl.w	r0, r2, r3
 800b5f8:	40f9      	lsrs	r1, r7
 800b5fa:	ea40 0401 	orr.w	r4, r0, r1
 800b5fe:	e7db      	b.n	800b5b8 <__b2d+0x50>
 800b600:	ea46 0501 	orr.w	r5, r6, r1
 800b604:	4614      	mov	r4, r2
 800b606:	e7d7      	b.n	800b5b8 <__b2d+0x50>
 800b608:	3ff00000 	.word	0x3ff00000

0800b60c <__d2b>:
 800b60c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b610:	461c      	mov	r4, r3
 800b612:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800b616:	2101      	movs	r1, #1
 800b618:	4690      	mov	r8, r2
 800b61a:	f7ff fcb7 	bl	800af8c <_Balloc>
 800b61e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800b622:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b626:	4607      	mov	r7, r0
 800b628:	bb34      	cbnz	r4, 800b678 <__d2b+0x6c>
 800b62a:	9201      	str	r2, [sp, #4]
 800b62c:	f1b8 0200 	subs.w	r2, r8, #0
 800b630:	d027      	beq.n	800b682 <__d2b+0x76>
 800b632:	a802      	add	r0, sp, #8
 800b634:	f840 2d08 	str.w	r2, [r0, #-8]!
 800b638:	f7ff fd8b 	bl	800b152 <__lo0bits>
 800b63c:	9900      	ldr	r1, [sp, #0]
 800b63e:	b1f0      	cbz	r0, 800b67e <__d2b+0x72>
 800b640:	9a01      	ldr	r2, [sp, #4]
 800b642:	f1c0 0320 	rsb	r3, r0, #32
 800b646:	fa02 f303 	lsl.w	r3, r2, r3
 800b64a:	430b      	orrs	r3, r1
 800b64c:	40c2      	lsrs	r2, r0
 800b64e:	617b      	str	r3, [r7, #20]
 800b650:	9201      	str	r2, [sp, #4]
 800b652:	9b01      	ldr	r3, [sp, #4]
 800b654:	2b00      	cmp	r3, #0
 800b656:	bf14      	ite	ne
 800b658:	2102      	movne	r1, #2
 800b65a:	2101      	moveq	r1, #1
 800b65c:	61bb      	str	r3, [r7, #24]
 800b65e:	6139      	str	r1, [r7, #16]
 800b660:	b1c4      	cbz	r4, 800b694 <__d2b+0x88>
 800b662:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b666:	4404      	add	r4, r0
 800b668:	6034      	str	r4, [r6, #0]
 800b66a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b66e:	6028      	str	r0, [r5, #0]
 800b670:	4638      	mov	r0, r7
 800b672:	b002      	add	sp, #8
 800b674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b678:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b67c:	e7d5      	b.n	800b62a <__d2b+0x1e>
 800b67e:	6179      	str	r1, [r7, #20]
 800b680:	e7e7      	b.n	800b652 <__d2b+0x46>
 800b682:	a801      	add	r0, sp, #4
 800b684:	f7ff fd65 	bl	800b152 <__lo0bits>
 800b688:	2101      	movs	r1, #1
 800b68a:	9b01      	ldr	r3, [sp, #4]
 800b68c:	6139      	str	r1, [r7, #16]
 800b68e:	617b      	str	r3, [r7, #20]
 800b690:	3020      	adds	r0, #32
 800b692:	e7e5      	b.n	800b660 <__d2b+0x54>
 800b694:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b698:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b69c:	6030      	str	r0, [r6, #0]
 800b69e:	6918      	ldr	r0, [r3, #16]
 800b6a0:	f7ff fd38 	bl	800b114 <__hi0bits>
 800b6a4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b6a8:	e7e1      	b.n	800b66e <__d2b+0x62>

0800b6aa <__ratio>:
 800b6aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ae:	4688      	mov	r8, r1
 800b6b0:	4669      	mov	r1, sp
 800b6b2:	4681      	mov	r9, r0
 800b6b4:	f7ff ff58 	bl	800b568 <__b2d>
 800b6b8:	468b      	mov	fp, r1
 800b6ba:	4606      	mov	r6, r0
 800b6bc:	460f      	mov	r7, r1
 800b6be:	4640      	mov	r0, r8
 800b6c0:	a901      	add	r1, sp, #4
 800b6c2:	f7ff ff51 	bl	800b568 <__b2d>
 800b6c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b6ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b6ce:	460d      	mov	r5, r1
 800b6d0:	eba3 0c02 	sub.w	ip, r3, r2
 800b6d4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b6d8:	1a9b      	subs	r3, r3, r2
 800b6da:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	bfd5      	itete	le
 800b6e2:	460a      	movle	r2, r1
 800b6e4:	463a      	movgt	r2, r7
 800b6e6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b6ea:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b6ee:	bfd8      	it	le
 800b6f0:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800b6f4:	462b      	mov	r3, r5
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	4659      	mov	r1, fp
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	f7f5 f816 	bl	800072c <__aeabi_ddiv>
 800b700:	b003      	add	sp, #12
 800b702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b706 <__copybits>:
 800b706:	3901      	subs	r1, #1
 800b708:	b510      	push	{r4, lr}
 800b70a:	1149      	asrs	r1, r1, #5
 800b70c:	6914      	ldr	r4, [r2, #16]
 800b70e:	3101      	adds	r1, #1
 800b710:	f102 0314 	add.w	r3, r2, #20
 800b714:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b718:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b71c:	42a3      	cmp	r3, r4
 800b71e:	4602      	mov	r2, r0
 800b720:	d303      	bcc.n	800b72a <__copybits+0x24>
 800b722:	2300      	movs	r3, #0
 800b724:	428a      	cmp	r2, r1
 800b726:	d305      	bcc.n	800b734 <__copybits+0x2e>
 800b728:	bd10      	pop	{r4, pc}
 800b72a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b72e:	f840 2b04 	str.w	r2, [r0], #4
 800b732:	e7f3      	b.n	800b71c <__copybits+0x16>
 800b734:	f842 3b04 	str.w	r3, [r2], #4
 800b738:	e7f4      	b.n	800b724 <__copybits+0x1e>

0800b73a <__any_on>:
 800b73a:	f100 0214 	add.w	r2, r0, #20
 800b73e:	6900      	ldr	r0, [r0, #16]
 800b740:	114b      	asrs	r3, r1, #5
 800b742:	4298      	cmp	r0, r3
 800b744:	b510      	push	{r4, lr}
 800b746:	db11      	blt.n	800b76c <__any_on+0x32>
 800b748:	dd0a      	ble.n	800b760 <__any_on+0x26>
 800b74a:	f011 011f 	ands.w	r1, r1, #31
 800b74e:	d007      	beq.n	800b760 <__any_on+0x26>
 800b750:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b754:	fa24 f001 	lsr.w	r0, r4, r1
 800b758:	fa00 f101 	lsl.w	r1, r0, r1
 800b75c:	428c      	cmp	r4, r1
 800b75e:	d10b      	bne.n	800b778 <__any_on+0x3e>
 800b760:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b764:	4293      	cmp	r3, r2
 800b766:	d803      	bhi.n	800b770 <__any_on+0x36>
 800b768:	2000      	movs	r0, #0
 800b76a:	bd10      	pop	{r4, pc}
 800b76c:	4603      	mov	r3, r0
 800b76e:	e7f7      	b.n	800b760 <__any_on+0x26>
 800b770:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b774:	2900      	cmp	r1, #0
 800b776:	d0f5      	beq.n	800b764 <__any_on+0x2a>
 800b778:	2001      	movs	r0, #1
 800b77a:	e7f6      	b.n	800b76a <__any_on+0x30>

0800b77c <_calloc_r>:
 800b77c:	b538      	push	{r3, r4, r5, lr}
 800b77e:	fb02 f401 	mul.w	r4, r2, r1
 800b782:	4621      	mov	r1, r4
 800b784:	f000 f808 	bl	800b798 <_malloc_r>
 800b788:	4605      	mov	r5, r0
 800b78a:	b118      	cbz	r0, 800b794 <_calloc_r+0x18>
 800b78c:	4622      	mov	r2, r4
 800b78e:	2100      	movs	r1, #0
 800b790:	f7fe f938 	bl	8009a04 <memset>
 800b794:	4628      	mov	r0, r5
 800b796:	bd38      	pop	{r3, r4, r5, pc}

0800b798 <_malloc_r>:
 800b798:	b570      	push	{r4, r5, r6, lr}
 800b79a:	1ccd      	adds	r5, r1, #3
 800b79c:	f025 0503 	bic.w	r5, r5, #3
 800b7a0:	3508      	adds	r5, #8
 800b7a2:	2d0c      	cmp	r5, #12
 800b7a4:	bf38      	it	cc
 800b7a6:	250c      	movcc	r5, #12
 800b7a8:	2d00      	cmp	r5, #0
 800b7aa:	4606      	mov	r6, r0
 800b7ac:	db01      	blt.n	800b7b2 <_malloc_r+0x1a>
 800b7ae:	42a9      	cmp	r1, r5
 800b7b0:	d903      	bls.n	800b7ba <_malloc_r+0x22>
 800b7b2:	230c      	movs	r3, #12
 800b7b4:	6033      	str	r3, [r6, #0]
 800b7b6:	2000      	movs	r0, #0
 800b7b8:	bd70      	pop	{r4, r5, r6, pc}
 800b7ba:	f000 fc85 	bl	800c0c8 <__malloc_lock>
 800b7be:	4a21      	ldr	r2, [pc, #132]	; (800b844 <_malloc_r+0xac>)
 800b7c0:	6814      	ldr	r4, [r2, #0]
 800b7c2:	4621      	mov	r1, r4
 800b7c4:	b991      	cbnz	r1, 800b7ec <_malloc_r+0x54>
 800b7c6:	4c20      	ldr	r4, [pc, #128]	; (800b848 <_malloc_r+0xb0>)
 800b7c8:	6823      	ldr	r3, [r4, #0]
 800b7ca:	b91b      	cbnz	r3, 800b7d4 <_malloc_r+0x3c>
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	f000 fb3f 	bl	800be50 <_sbrk_r>
 800b7d2:	6020      	str	r0, [r4, #0]
 800b7d4:	4629      	mov	r1, r5
 800b7d6:	4630      	mov	r0, r6
 800b7d8:	f000 fb3a 	bl	800be50 <_sbrk_r>
 800b7dc:	1c43      	adds	r3, r0, #1
 800b7de:	d124      	bne.n	800b82a <_malloc_r+0x92>
 800b7e0:	230c      	movs	r3, #12
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	6033      	str	r3, [r6, #0]
 800b7e6:	f000 fc70 	bl	800c0ca <__malloc_unlock>
 800b7ea:	e7e4      	b.n	800b7b6 <_malloc_r+0x1e>
 800b7ec:	680b      	ldr	r3, [r1, #0]
 800b7ee:	1b5b      	subs	r3, r3, r5
 800b7f0:	d418      	bmi.n	800b824 <_malloc_r+0x8c>
 800b7f2:	2b0b      	cmp	r3, #11
 800b7f4:	d90f      	bls.n	800b816 <_malloc_r+0x7e>
 800b7f6:	600b      	str	r3, [r1, #0]
 800b7f8:	18cc      	adds	r4, r1, r3
 800b7fa:	50cd      	str	r5, [r1, r3]
 800b7fc:	4630      	mov	r0, r6
 800b7fe:	f000 fc64 	bl	800c0ca <__malloc_unlock>
 800b802:	f104 000b 	add.w	r0, r4, #11
 800b806:	1d23      	adds	r3, r4, #4
 800b808:	f020 0007 	bic.w	r0, r0, #7
 800b80c:	1ac3      	subs	r3, r0, r3
 800b80e:	d0d3      	beq.n	800b7b8 <_malloc_r+0x20>
 800b810:	425a      	negs	r2, r3
 800b812:	50e2      	str	r2, [r4, r3]
 800b814:	e7d0      	b.n	800b7b8 <_malloc_r+0x20>
 800b816:	684b      	ldr	r3, [r1, #4]
 800b818:	428c      	cmp	r4, r1
 800b81a:	bf16      	itet	ne
 800b81c:	6063      	strne	r3, [r4, #4]
 800b81e:	6013      	streq	r3, [r2, #0]
 800b820:	460c      	movne	r4, r1
 800b822:	e7eb      	b.n	800b7fc <_malloc_r+0x64>
 800b824:	460c      	mov	r4, r1
 800b826:	6849      	ldr	r1, [r1, #4]
 800b828:	e7cc      	b.n	800b7c4 <_malloc_r+0x2c>
 800b82a:	1cc4      	adds	r4, r0, #3
 800b82c:	f024 0403 	bic.w	r4, r4, #3
 800b830:	42a0      	cmp	r0, r4
 800b832:	d005      	beq.n	800b840 <_malloc_r+0xa8>
 800b834:	1a21      	subs	r1, r4, r0
 800b836:	4630      	mov	r0, r6
 800b838:	f000 fb0a 	bl	800be50 <_sbrk_r>
 800b83c:	3001      	adds	r0, #1
 800b83e:	d0cf      	beq.n	800b7e0 <_malloc_r+0x48>
 800b840:	6025      	str	r5, [r4, #0]
 800b842:	e7db      	b.n	800b7fc <_malloc_r+0x64>
 800b844:	200005e8 	.word	0x200005e8
 800b848:	200005ec 	.word	0x200005ec

0800b84c <_sungetc_r>:
 800b84c:	b538      	push	{r3, r4, r5, lr}
 800b84e:	1c4b      	adds	r3, r1, #1
 800b850:	4614      	mov	r4, r2
 800b852:	d103      	bne.n	800b85c <_sungetc_r+0x10>
 800b854:	f04f 35ff 	mov.w	r5, #4294967295
 800b858:	4628      	mov	r0, r5
 800b85a:	bd38      	pop	{r3, r4, r5, pc}
 800b85c:	8993      	ldrh	r3, [r2, #12]
 800b85e:	b2cd      	uxtb	r5, r1
 800b860:	f023 0320 	bic.w	r3, r3, #32
 800b864:	8193      	strh	r3, [r2, #12]
 800b866:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b868:	6852      	ldr	r2, [r2, #4]
 800b86a:	b18b      	cbz	r3, 800b890 <_sungetc_r+0x44>
 800b86c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b86e:	4293      	cmp	r3, r2
 800b870:	dd08      	ble.n	800b884 <_sungetc_r+0x38>
 800b872:	6823      	ldr	r3, [r4, #0]
 800b874:	1e5a      	subs	r2, r3, #1
 800b876:	6022      	str	r2, [r4, #0]
 800b878:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b87c:	6863      	ldr	r3, [r4, #4]
 800b87e:	3301      	adds	r3, #1
 800b880:	6063      	str	r3, [r4, #4]
 800b882:	e7e9      	b.n	800b858 <_sungetc_r+0xc>
 800b884:	4621      	mov	r1, r4
 800b886:	f000 fbc3 	bl	800c010 <__submore>
 800b88a:	2800      	cmp	r0, #0
 800b88c:	d0f1      	beq.n	800b872 <_sungetc_r+0x26>
 800b88e:	e7e1      	b.n	800b854 <_sungetc_r+0x8>
 800b890:	6921      	ldr	r1, [r4, #16]
 800b892:	6823      	ldr	r3, [r4, #0]
 800b894:	b151      	cbz	r1, 800b8ac <_sungetc_r+0x60>
 800b896:	4299      	cmp	r1, r3
 800b898:	d208      	bcs.n	800b8ac <_sungetc_r+0x60>
 800b89a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b89e:	42a9      	cmp	r1, r5
 800b8a0:	d104      	bne.n	800b8ac <_sungetc_r+0x60>
 800b8a2:	3b01      	subs	r3, #1
 800b8a4:	3201      	adds	r2, #1
 800b8a6:	6023      	str	r3, [r4, #0]
 800b8a8:	6062      	str	r2, [r4, #4]
 800b8aa:	e7d5      	b.n	800b858 <_sungetc_r+0xc>
 800b8ac:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b8b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8b4:	6363      	str	r3, [r4, #52]	; 0x34
 800b8b6:	2303      	movs	r3, #3
 800b8b8:	63a3      	str	r3, [r4, #56]	; 0x38
 800b8ba:	4623      	mov	r3, r4
 800b8bc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b8c0:	6023      	str	r3, [r4, #0]
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	e7dc      	b.n	800b880 <_sungetc_r+0x34>

0800b8c6 <__ssrefill_r>:
 800b8c6:	b510      	push	{r4, lr}
 800b8c8:	460c      	mov	r4, r1
 800b8ca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b8cc:	b169      	cbz	r1, 800b8ea <__ssrefill_r+0x24>
 800b8ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8d2:	4299      	cmp	r1, r3
 800b8d4:	d001      	beq.n	800b8da <__ssrefill_r+0x14>
 800b8d6:	f000 fbf9 	bl	800c0cc <_free_r>
 800b8da:	2000      	movs	r0, #0
 800b8dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8de:	6360      	str	r0, [r4, #52]	; 0x34
 800b8e0:	6063      	str	r3, [r4, #4]
 800b8e2:	b113      	cbz	r3, 800b8ea <__ssrefill_r+0x24>
 800b8e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b8e6:	6023      	str	r3, [r4, #0]
 800b8e8:	bd10      	pop	{r4, pc}
 800b8ea:	6923      	ldr	r3, [r4, #16]
 800b8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b8f0:	6023      	str	r3, [r4, #0]
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	6063      	str	r3, [r4, #4]
 800b8f6:	89a3      	ldrh	r3, [r4, #12]
 800b8f8:	f043 0320 	orr.w	r3, r3, #32
 800b8fc:	81a3      	strh	r3, [r4, #12]
 800b8fe:	e7f3      	b.n	800b8e8 <__ssrefill_r+0x22>

0800b900 <__ssvfiscanf_r>:
 800b900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b904:	460c      	mov	r4, r1
 800b906:	2100      	movs	r1, #0
 800b908:	4606      	mov	r6, r0
 800b90a:	4692      	mov	sl, r2
 800b90c:	270a      	movs	r7, #10
 800b90e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800b912:	9144      	str	r1, [sp, #272]	; 0x110
 800b914:	9145      	str	r1, [sp, #276]	; 0x114
 800b916:	499e      	ldr	r1, [pc, #632]	; (800bb90 <__ssvfiscanf_r+0x290>)
 800b918:	f10d 0804 	add.w	r8, sp, #4
 800b91c:	91a0      	str	r1, [sp, #640]	; 0x280
 800b91e:	499d      	ldr	r1, [pc, #628]	; (800bb94 <__ssvfiscanf_r+0x294>)
 800b920:	f8df 9274 	ldr.w	r9, [pc, #628]	; 800bb98 <__ssvfiscanf_r+0x298>
 800b924:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b928:	91a1      	str	r1, [sp, #644]	; 0x284
 800b92a:	9300      	str	r3, [sp, #0]
 800b92c:	f89a 3000 	ldrb.w	r3, [sl]
 800b930:	2b00      	cmp	r3, #0
 800b932:	f000 812a 	beq.w	800bb8a <__ssvfiscanf_r+0x28a>
 800b936:	4655      	mov	r5, sl
 800b938:	f7ff fb06 	bl	800af48 <__locale_ctype_ptr>
 800b93c:	f815 bb01 	ldrb.w	fp, [r5], #1
 800b940:	4458      	add	r0, fp
 800b942:	7843      	ldrb	r3, [r0, #1]
 800b944:	f013 0308 	ands.w	r3, r3, #8
 800b948:	d01c      	beq.n	800b984 <__ssvfiscanf_r+0x84>
 800b94a:	6863      	ldr	r3, [r4, #4]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	dd12      	ble.n	800b976 <__ssvfiscanf_r+0x76>
 800b950:	f7ff fafa 	bl	800af48 <__locale_ctype_ptr>
 800b954:	6823      	ldr	r3, [r4, #0]
 800b956:	781a      	ldrb	r2, [r3, #0]
 800b958:	4410      	add	r0, r2
 800b95a:	7842      	ldrb	r2, [r0, #1]
 800b95c:	0712      	lsls	r2, r2, #28
 800b95e:	d401      	bmi.n	800b964 <__ssvfiscanf_r+0x64>
 800b960:	46aa      	mov	sl, r5
 800b962:	e7e3      	b.n	800b92c <__ssvfiscanf_r+0x2c>
 800b964:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b966:	3301      	adds	r3, #1
 800b968:	3201      	adds	r2, #1
 800b96a:	9245      	str	r2, [sp, #276]	; 0x114
 800b96c:	6862      	ldr	r2, [r4, #4]
 800b96e:	6023      	str	r3, [r4, #0]
 800b970:	3a01      	subs	r2, #1
 800b972:	6062      	str	r2, [r4, #4]
 800b974:	e7e9      	b.n	800b94a <__ssvfiscanf_r+0x4a>
 800b976:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b978:	4621      	mov	r1, r4
 800b97a:	4630      	mov	r0, r6
 800b97c:	4798      	blx	r3
 800b97e:	2800      	cmp	r0, #0
 800b980:	d0e6      	beq.n	800b950 <__ssvfiscanf_r+0x50>
 800b982:	e7ed      	b.n	800b960 <__ssvfiscanf_r+0x60>
 800b984:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800b988:	f040 8082 	bne.w	800ba90 <__ssvfiscanf_r+0x190>
 800b98c:	9343      	str	r3, [sp, #268]	; 0x10c
 800b98e:	9341      	str	r3, [sp, #260]	; 0x104
 800b990:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800b994:	2b2a      	cmp	r3, #42	; 0x2a
 800b996:	d103      	bne.n	800b9a0 <__ssvfiscanf_r+0xa0>
 800b998:	2310      	movs	r3, #16
 800b99a:	f10a 0502 	add.w	r5, sl, #2
 800b99e:	9341      	str	r3, [sp, #260]	; 0x104
 800b9a0:	46aa      	mov	sl, r5
 800b9a2:	f815 1b01 	ldrb.w	r1, [r5], #1
 800b9a6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b9aa:	2a09      	cmp	r2, #9
 800b9ac:	d922      	bls.n	800b9f4 <__ssvfiscanf_r+0xf4>
 800b9ae:	2203      	movs	r2, #3
 800b9b0:	4879      	ldr	r0, [pc, #484]	; (800bb98 <__ssvfiscanf_r+0x298>)
 800b9b2:	f000 fb7b 	bl	800c0ac <memchr>
 800b9b6:	b138      	cbz	r0, 800b9c8 <__ssvfiscanf_r+0xc8>
 800b9b8:	eba0 0309 	sub.w	r3, r0, r9
 800b9bc:	2001      	movs	r0, #1
 800b9be:	46aa      	mov	sl, r5
 800b9c0:	4098      	lsls	r0, r3
 800b9c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b9c4:	4318      	orrs	r0, r3
 800b9c6:	9041      	str	r0, [sp, #260]	; 0x104
 800b9c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b9cc:	f10a 0501 	add.w	r5, sl, #1
 800b9d0:	2b67      	cmp	r3, #103	; 0x67
 800b9d2:	d82b      	bhi.n	800ba2c <__ssvfiscanf_r+0x12c>
 800b9d4:	2b65      	cmp	r3, #101	; 0x65
 800b9d6:	f080 809f 	bcs.w	800bb18 <__ssvfiscanf_r+0x218>
 800b9da:	2b47      	cmp	r3, #71	; 0x47
 800b9dc:	d810      	bhi.n	800ba00 <__ssvfiscanf_r+0x100>
 800b9de:	2b45      	cmp	r3, #69	; 0x45
 800b9e0:	f080 809a 	bcs.w	800bb18 <__ssvfiscanf_r+0x218>
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d06c      	beq.n	800bac2 <__ssvfiscanf_r+0x1c2>
 800b9e8:	2b25      	cmp	r3, #37	; 0x25
 800b9ea:	d051      	beq.n	800ba90 <__ssvfiscanf_r+0x190>
 800b9ec:	2303      	movs	r3, #3
 800b9ee:	9742      	str	r7, [sp, #264]	; 0x108
 800b9f0:	9347      	str	r3, [sp, #284]	; 0x11c
 800b9f2:	e027      	b.n	800ba44 <__ssvfiscanf_r+0x144>
 800b9f4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b9f6:	fb07 1303 	mla	r3, r7, r3, r1
 800b9fa:	3b30      	subs	r3, #48	; 0x30
 800b9fc:	9343      	str	r3, [sp, #268]	; 0x10c
 800b9fe:	e7cf      	b.n	800b9a0 <__ssvfiscanf_r+0xa0>
 800ba00:	2b5b      	cmp	r3, #91	; 0x5b
 800ba02:	d06a      	beq.n	800bada <__ssvfiscanf_r+0x1da>
 800ba04:	d80c      	bhi.n	800ba20 <__ssvfiscanf_r+0x120>
 800ba06:	2b58      	cmp	r3, #88	; 0x58
 800ba08:	d1f0      	bne.n	800b9ec <__ssvfiscanf_r+0xec>
 800ba0a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ba0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba10:	9241      	str	r2, [sp, #260]	; 0x104
 800ba12:	2210      	movs	r2, #16
 800ba14:	9242      	str	r2, [sp, #264]	; 0x108
 800ba16:	2b6e      	cmp	r3, #110	; 0x6e
 800ba18:	bf8c      	ite	hi
 800ba1a:	2304      	movhi	r3, #4
 800ba1c:	2303      	movls	r3, #3
 800ba1e:	e010      	b.n	800ba42 <__ssvfiscanf_r+0x142>
 800ba20:	2b63      	cmp	r3, #99	; 0x63
 800ba22:	d065      	beq.n	800baf0 <__ssvfiscanf_r+0x1f0>
 800ba24:	2b64      	cmp	r3, #100	; 0x64
 800ba26:	d1e1      	bne.n	800b9ec <__ssvfiscanf_r+0xec>
 800ba28:	9742      	str	r7, [sp, #264]	; 0x108
 800ba2a:	e7f4      	b.n	800ba16 <__ssvfiscanf_r+0x116>
 800ba2c:	2b70      	cmp	r3, #112	; 0x70
 800ba2e:	d04b      	beq.n	800bac8 <__ssvfiscanf_r+0x1c8>
 800ba30:	d826      	bhi.n	800ba80 <__ssvfiscanf_r+0x180>
 800ba32:	2b6e      	cmp	r3, #110	; 0x6e
 800ba34:	d062      	beq.n	800bafc <__ssvfiscanf_r+0x1fc>
 800ba36:	d84c      	bhi.n	800bad2 <__ssvfiscanf_r+0x1d2>
 800ba38:	2b69      	cmp	r3, #105	; 0x69
 800ba3a:	d1d7      	bne.n	800b9ec <__ssvfiscanf_r+0xec>
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	9342      	str	r3, [sp, #264]	; 0x108
 800ba40:	2303      	movs	r3, #3
 800ba42:	9347      	str	r3, [sp, #284]	; 0x11c
 800ba44:	6863      	ldr	r3, [r4, #4]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	dd68      	ble.n	800bb1c <__ssvfiscanf_r+0x21c>
 800ba4a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ba4c:	0659      	lsls	r1, r3, #25
 800ba4e:	d407      	bmi.n	800ba60 <__ssvfiscanf_r+0x160>
 800ba50:	f7ff fa7a 	bl	800af48 <__locale_ctype_ptr>
 800ba54:	6823      	ldr	r3, [r4, #0]
 800ba56:	781a      	ldrb	r2, [r3, #0]
 800ba58:	4410      	add	r0, r2
 800ba5a:	7842      	ldrb	r2, [r0, #1]
 800ba5c:	0712      	lsls	r2, r2, #28
 800ba5e:	d464      	bmi.n	800bb2a <__ssvfiscanf_r+0x22a>
 800ba60:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ba62:	2b02      	cmp	r3, #2
 800ba64:	dc73      	bgt.n	800bb4e <__ssvfiscanf_r+0x24e>
 800ba66:	466b      	mov	r3, sp
 800ba68:	4622      	mov	r2, r4
 800ba6a:	a941      	add	r1, sp, #260	; 0x104
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	f000 f897 	bl	800bba0 <_scanf_chars>
 800ba72:	2801      	cmp	r0, #1
 800ba74:	f000 8089 	beq.w	800bb8a <__ssvfiscanf_r+0x28a>
 800ba78:	2802      	cmp	r0, #2
 800ba7a:	f47f af71 	bne.w	800b960 <__ssvfiscanf_r+0x60>
 800ba7e:	e01d      	b.n	800babc <__ssvfiscanf_r+0x1bc>
 800ba80:	2b75      	cmp	r3, #117	; 0x75
 800ba82:	d0d1      	beq.n	800ba28 <__ssvfiscanf_r+0x128>
 800ba84:	2b78      	cmp	r3, #120	; 0x78
 800ba86:	d0c0      	beq.n	800ba0a <__ssvfiscanf_r+0x10a>
 800ba88:	2b73      	cmp	r3, #115	; 0x73
 800ba8a:	d1af      	bne.n	800b9ec <__ssvfiscanf_r+0xec>
 800ba8c:	2302      	movs	r3, #2
 800ba8e:	e7d8      	b.n	800ba42 <__ssvfiscanf_r+0x142>
 800ba90:	6863      	ldr	r3, [r4, #4]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	dd0c      	ble.n	800bab0 <__ssvfiscanf_r+0x1b0>
 800ba96:	6823      	ldr	r3, [r4, #0]
 800ba98:	781a      	ldrb	r2, [r3, #0]
 800ba9a:	455a      	cmp	r2, fp
 800ba9c:	d175      	bne.n	800bb8a <__ssvfiscanf_r+0x28a>
 800ba9e:	3301      	adds	r3, #1
 800baa0:	6862      	ldr	r2, [r4, #4]
 800baa2:	6023      	str	r3, [r4, #0]
 800baa4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800baa6:	3a01      	subs	r2, #1
 800baa8:	3301      	adds	r3, #1
 800baaa:	6062      	str	r2, [r4, #4]
 800baac:	9345      	str	r3, [sp, #276]	; 0x114
 800baae:	e757      	b.n	800b960 <__ssvfiscanf_r+0x60>
 800bab0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bab2:	4621      	mov	r1, r4
 800bab4:	4630      	mov	r0, r6
 800bab6:	4798      	blx	r3
 800bab8:	2800      	cmp	r0, #0
 800baba:	d0ec      	beq.n	800ba96 <__ssvfiscanf_r+0x196>
 800babc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800babe:	2800      	cmp	r0, #0
 800bac0:	d159      	bne.n	800bb76 <__ssvfiscanf_r+0x276>
 800bac2:	f04f 30ff 	mov.w	r0, #4294967295
 800bac6:	e05c      	b.n	800bb82 <__ssvfiscanf_r+0x282>
 800bac8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800baca:	f042 0220 	orr.w	r2, r2, #32
 800bace:	9241      	str	r2, [sp, #260]	; 0x104
 800bad0:	e79b      	b.n	800ba0a <__ssvfiscanf_r+0x10a>
 800bad2:	2308      	movs	r3, #8
 800bad4:	9342      	str	r3, [sp, #264]	; 0x108
 800bad6:	2304      	movs	r3, #4
 800bad8:	e7b3      	b.n	800ba42 <__ssvfiscanf_r+0x142>
 800bada:	4629      	mov	r1, r5
 800badc:	4640      	mov	r0, r8
 800bade:	f000 f9c7 	bl	800be70 <__sccl>
 800bae2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bae4:	4605      	mov	r5, r0
 800bae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800baea:	9341      	str	r3, [sp, #260]	; 0x104
 800baec:	2301      	movs	r3, #1
 800baee:	e7a8      	b.n	800ba42 <__ssvfiscanf_r+0x142>
 800baf0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800baf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800baf6:	9341      	str	r3, [sp, #260]	; 0x104
 800baf8:	2300      	movs	r3, #0
 800bafa:	e7a2      	b.n	800ba42 <__ssvfiscanf_r+0x142>
 800bafc:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bafe:	06c3      	lsls	r3, r0, #27
 800bb00:	f53f af2e 	bmi.w	800b960 <__ssvfiscanf_r+0x60>
 800bb04:	9b00      	ldr	r3, [sp, #0]
 800bb06:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bb08:	1d19      	adds	r1, r3, #4
 800bb0a:	9100      	str	r1, [sp, #0]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	07c0      	lsls	r0, r0, #31
 800bb10:	bf4c      	ite	mi
 800bb12:	801a      	strhmi	r2, [r3, #0]
 800bb14:	601a      	strpl	r2, [r3, #0]
 800bb16:	e723      	b.n	800b960 <__ssvfiscanf_r+0x60>
 800bb18:	2305      	movs	r3, #5
 800bb1a:	e792      	b.n	800ba42 <__ssvfiscanf_r+0x142>
 800bb1c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bb1e:	4621      	mov	r1, r4
 800bb20:	4630      	mov	r0, r6
 800bb22:	4798      	blx	r3
 800bb24:	2800      	cmp	r0, #0
 800bb26:	d090      	beq.n	800ba4a <__ssvfiscanf_r+0x14a>
 800bb28:	e7c8      	b.n	800babc <__ssvfiscanf_r+0x1bc>
 800bb2a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bb2c:	3201      	adds	r2, #1
 800bb2e:	9245      	str	r2, [sp, #276]	; 0x114
 800bb30:	6862      	ldr	r2, [r4, #4]
 800bb32:	3a01      	subs	r2, #1
 800bb34:	2a00      	cmp	r2, #0
 800bb36:	6062      	str	r2, [r4, #4]
 800bb38:	dd02      	ble.n	800bb40 <__ssvfiscanf_r+0x240>
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	6023      	str	r3, [r4, #0]
 800bb3e:	e787      	b.n	800ba50 <__ssvfiscanf_r+0x150>
 800bb40:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bb42:	4621      	mov	r1, r4
 800bb44:	4630      	mov	r0, r6
 800bb46:	4798      	blx	r3
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	d081      	beq.n	800ba50 <__ssvfiscanf_r+0x150>
 800bb4c:	e7b6      	b.n	800babc <__ssvfiscanf_r+0x1bc>
 800bb4e:	2b04      	cmp	r3, #4
 800bb50:	dc06      	bgt.n	800bb60 <__ssvfiscanf_r+0x260>
 800bb52:	466b      	mov	r3, sp
 800bb54:	4622      	mov	r2, r4
 800bb56:	a941      	add	r1, sp, #260	; 0x104
 800bb58:	4630      	mov	r0, r6
 800bb5a:	f000 f883 	bl	800bc64 <_scanf_i>
 800bb5e:	e788      	b.n	800ba72 <__ssvfiscanf_r+0x172>
 800bb60:	4b0e      	ldr	r3, [pc, #56]	; (800bb9c <__ssvfiscanf_r+0x29c>)
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	f43f aefc 	beq.w	800b960 <__ssvfiscanf_r+0x60>
 800bb68:	466b      	mov	r3, sp
 800bb6a:	4622      	mov	r2, r4
 800bb6c:	a941      	add	r1, sp, #260	; 0x104
 800bb6e:	4630      	mov	r0, r6
 800bb70:	f3af 8000 	nop.w
 800bb74:	e77d      	b.n	800ba72 <__ssvfiscanf_r+0x172>
 800bb76:	89a3      	ldrh	r3, [r4, #12]
 800bb78:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bb7c:	bf18      	it	ne
 800bb7e:	f04f 30ff 	movne.w	r0, #4294967295
 800bb82:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800bb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb8a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bb8c:	e7f9      	b.n	800bb82 <__ssvfiscanf_r+0x282>
 800bb8e:	bf00      	nop
 800bb90:	0800b84d 	.word	0x0800b84d
 800bb94:	0800b8c7 	.word	0x0800b8c7
 800bb98:	0800e5d4 	.word	0x0800e5d4
 800bb9c:	00000000 	.word	0x00000000

0800bba0 <_scanf_chars>:
 800bba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba4:	4615      	mov	r5, r2
 800bba6:	688a      	ldr	r2, [r1, #8]
 800bba8:	4680      	mov	r8, r0
 800bbaa:	460c      	mov	r4, r1
 800bbac:	b932      	cbnz	r2, 800bbbc <_scanf_chars+0x1c>
 800bbae:	698a      	ldr	r2, [r1, #24]
 800bbb0:	2a00      	cmp	r2, #0
 800bbb2:	bf14      	ite	ne
 800bbb4:	f04f 32ff 	movne.w	r2, #4294967295
 800bbb8:	2201      	moveq	r2, #1
 800bbba:	608a      	str	r2, [r1, #8]
 800bbbc:	2600      	movs	r6, #0
 800bbbe:	6822      	ldr	r2, [r4, #0]
 800bbc0:	06d1      	lsls	r1, r2, #27
 800bbc2:	bf5f      	itttt	pl
 800bbc4:	681a      	ldrpl	r2, [r3, #0]
 800bbc6:	1d11      	addpl	r1, r2, #4
 800bbc8:	6019      	strpl	r1, [r3, #0]
 800bbca:	6817      	ldrpl	r7, [r2, #0]
 800bbcc:	69a3      	ldr	r3, [r4, #24]
 800bbce:	b1db      	cbz	r3, 800bc08 <_scanf_chars+0x68>
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d107      	bne.n	800bbe4 <_scanf_chars+0x44>
 800bbd4:	682b      	ldr	r3, [r5, #0]
 800bbd6:	6962      	ldr	r2, [r4, #20]
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	5cd3      	ldrb	r3, [r2, r3]
 800bbdc:	b9a3      	cbnz	r3, 800bc08 <_scanf_chars+0x68>
 800bbde:	2e00      	cmp	r6, #0
 800bbe0:	d131      	bne.n	800bc46 <_scanf_chars+0xa6>
 800bbe2:	e006      	b.n	800bbf2 <_scanf_chars+0x52>
 800bbe4:	2b02      	cmp	r3, #2
 800bbe6:	d007      	beq.n	800bbf8 <_scanf_chars+0x58>
 800bbe8:	2e00      	cmp	r6, #0
 800bbea:	d12c      	bne.n	800bc46 <_scanf_chars+0xa6>
 800bbec:	69a3      	ldr	r3, [r4, #24]
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d129      	bne.n	800bc46 <_scanf_chars+0xa6>
 800bbf2:	2001      	movs	r0, #1
 800bbf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbf8:	f7ff f9a6 	bl	800af48 <__locale_ctype_ptr>
 800bbfc:	682b      	ldr	r3, [r5, #0]
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	4418      	add	r0, r3
 800bc02:	7843      	ldrb	r3, [r0, #1]
 800bc04:	071b      	lsls	r3, r3, #28
 800bc06:	d4ef      	bmi.n	800bbe8 <_scanf_chars+0x48>
 800bc08:	6823      	ldr	r3, [r4, #0]
 800bc0a:	3601      	adds	r6, #1
 800bc0c:	06da      	lsls	r2, r3, #27
 800bc0e:	bf5e      	ittt	pl
 800bc10:	682b      	ldrpl	r3, [r5, #0]
 800bc12:	781b      	ldrbpl	r3, [r3, #0]
 800bc14:	703b      	strbpl	r3, [r7, #0]
 800bc16:	682a      	ldr	r2, [r5, #0]
 800bc18:	686b      	ldr	r3, [r5, #4]
 800bc1a:	f102 0201 	add.w	r2, r2, #1
 800bc1e:	602a      	str	r2, [r5, #0]
 800bc20:	68a2      	ldr	r2, [r4, #8]
 800bc22:	f103 33ff 	add.w	r3, r3, #4294967295
 800bc26:	f102 32ff 	add.w	r2, r2, #4294967295
 800bc2a:	606b      	str	r3, [r5, #4]
 800bc2c:	bf58      	it	pl
 800bc2e:	3701      	addpl	r7, #1
 800bc30:	60a2      	str	r2, [r4, #8]
 800bc32:	b142      	cbz	r2, 800bc46 <_scanf_chars+0xa6>
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	dcc9      	bgt.n	800bbcc <_scanf_chars+0x2c>
 800bc38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bc3c:	4629      	mov	r1, r5
 800bc3e:	4640      	mov	r0, r8
 800bc40:	4798      	blx	r3
 800bc42:	2800      	cmp	r0, #0
 800bc44:	d0c2      	beq.n	800bbcc <_scanf_chars+0x2c>
 800bc46:	6823      	ldr	r3, [r4, #0]
 800bc48:	f013 0310 	ands.w	r3, r3, #16
 800bc4c:	d105      	bne.n	800bc5a <_scanf_chars+0xba>
 800bc4e:	68e2      	ldr	r2, [r4, #12]
 800bc50:	3201      	adds	r2, #1
 800bc52:	60e2      	str	r2, [r4, #12]
 800bc54:	69a2      	ldr	r2, [r4, #24]
 800bc56:	b102      	cbz	r2, 800bc5a <_scanf_chars+0xba>
 800bc58:	703b      	strb	r3, [r7, #0]
 800bc5a:	6923      	ldr	r3, [r4, #16]
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	441e      	add	r6, r3
 800bc60:	6126      	str	r6, [r4, #16]
 800bc62:	e7c7      	b.n	800bbf4 <_scanf_chars+0x54>

0800bc64 <_scanf_i>:
 800bc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc68:	460c      	mov	r4, r1
 800bc6a:	469a      	mov	sl, r3
 800bc6c:	4b74      	ldr	r3, [pc, #464]	; (800be40 <_scanf_i+0x1dc>)
 800bc6e:	b087      	sub	sp, #28
 800bc70:	4683      	mov	fp, r0
 800bc72:	4616      	mov	r6, r2
 800bc74:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bc78:	ab03      	add	r3, sp, #12
 800bc7a:	68a7      	ldr	r7, [r4, #8]
 800bc7c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bc80:	4b70      	ldr	r3, [pc, #448]	; (800be44 <_scanf_i+0x1e0>)
 800bc82:	69a1      	ldr	r1, [r4, #24]
 800bc84:	4a70      	ldr	r2, [pc, #448]	; (800be48 <_scanf_i+0x1e4>)
 800bc86:	f104 091c 	add.w	r9, r4, #28
 800bc8a:	2903      	cmp	r1, #3
 800bc8c:	bf08      	it	eq
 800bc8e:	461a      	moveq	r2, r3
 800bc90:	1e7b      	subs	r3, r7, #1
 800bc92:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800bc96:	bf84      	itt	hi
 800bc98:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bc9c:	60a3      	strhi	r3, [r4, #8]
 800bc9e:	6823      	ldr	r3, [r4, #0]
 800bca0:	bf88      	it	hi
 800bca2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bca6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800bcaa:	6023      	str	r3, [r4, #0]
 800bcac:	bf98      	it	ls
 800bcae:	2700      	movls	r7, #0
 800bcb0:	464b      	mov	r3, r9
 800bcb2:	f04f 0800 	mov.w	r8, #0
 800bcb6:	9200      	str	r2, [sp, #0]
 800bcb8:	bf88      	it	hi
 800bcba:	197f      	addhi	r7, r7, r5
 800bcbc:	6831      	ldr	r1, [r6, #0]
 800bcbe:	9301      	str	r3, [sp, #4]
 800bcc0:	ab03      	add	r3, sp, #12
 800bcc2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bcc6:	2202      	movs	r2, #2
 800bcc8:	7809      	ldrb	r1, [r1, #0]
 800bcca:	f000 f9ef 	bl	800c0ac <memchr>
 800bcce:	9b01      	ldr	r3, [sp, #4]
 800bcd0:	b330      	cbz	r0, 800bd20 <_scanf_i+0xbc>
 800bcd2:	f1b8 0f01 	cmp.w	r8, #1
 800bcd6:	d15a      	bne.n	800bd8e <_scanf_i+0x12a>
 800bcd8:	6862      	ldr	r2, [r4, #4]
 800bcda:	b92a      	cbnz	r2, 800bce8 <_scanf_i+0x84>
 800bcdc:	2108      	movs	r1, #8
 800bcde:	6822      	ldr	r2, [r4, #0]
 800bce0:	6061      	str	r1, [r4, #4]
 800bce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bce6:	6022      	str	r2, [r4, #0]
 800bce8:	6822      	ldr	r2, [r4, #0]
 800bcea:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800bcee:	6022      	str	r2, [r4, #0]
 800bcf0:	68a2      	ldr	r2, [r4, #8]
 800bcf2:	1e51      	subs	r1, r2, #1
 800bcf4:	60a1      	str	r1, [r4, #8]
 800bcf6:	b19a      	cbz	r2, 800bd20 <_scanf_i+0xbc>
 800bcf8:	6832      	ldr	r2, [r6, #0]
 800bcfa:	1c5d      	adds	r5, r3, #1
 800bcfc:	1c51      	adds	r1, r2, #1
 800bcfe:	6031      	str	r1, [r6, #0]
 800bd00:	7812      	ldrb	r2, [r2, #0]
 800bd02:	701a      	strb	r2, [r3, #0]
 800bd04:	6873      	ldr	r3, [r6, #4]
 800bd06:	3b01      	subs	r3, #1
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	6073      	str	r3, [r6, #4]
 800bd0c:	dc07      	bgt.n	800bd1e <_scanf_i+0xba>
 800bd0e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bd12:	4631      	mov	r1, r6
 800bd14:	4658      	mov	r0, fp
 800bd16:	4798      	blx	r3
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	f040 8087 	bne.w	800be2c <_scanf_i+0x1c8>
 800bd1e:	462b      	mov	r3, r5
 800bd20:	f108 0801 	add.w	r8, r8, #1
 800bd24:	f1b8 0f03 	cmp.w	r8, #3
 800bd28:	d1c8      	bne.n	800bcbc <_scanf_i+0x58>
 800bd2a:	6862      	ldr	r2, [r4, #4]
 800bd2c:	b90a      	cbnz	r2, 800bd32 <_scanf_i+0xce>
 800bd2e:	220a      	movs	r2, #10
 800bd30:	6062      	str	r2, [r4, #4]
 800bd32:	6862      	ldr	r2, [r4, #4]
 800bd34:	4945      	ldr	r1, [pc, #276]	; (800be4c <_scanf_i+0x1e8>)
 800bd36:	6960      	ldr	r0, [r4, #20]
 800bd38:	1a89      	subs	r1, r1, r2
 800bd3a:	9301      	str	r3, [sp, #4]
 800bd3c:	f000 f898 	bl	800be70 <__sccl>
 800bd40:	9b01      	ldr	r3, [sp, #4]
 800bd42:	f04f 0800 	mov.w	r8, #0
 800bd46:	461d      	mov	r5, r3
 800bd48:	68a3      	ldr	r3, [r4, #8]
 800bd4a:	6822      	ldr	r2, [r4, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d03b      	beq.n	800bdc8 <_scanf_i+0x164>
 800bd50:	6831      	ldr	r1, [r6, #0]
 800bd52:	6960      	ldr	r0, [r4, #20]
 800bd54:	f891 c000 	ldrb.w	ip, [r1]
 800bd58:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	d033      	beq.n	800bdc8 <_scanf_i+0x164>
 800bd60:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800bd64:	d121      	bne.n	800bdaa <_scanf_i+0x146>
 800bd66:	0510      	lsls	r0, r2, #20
 800bd68:	d51f      	bpl.n	800bdaa <_scanf_i+0x146>
 800bd6a:	f108 0801 	add.w	r8, r8, #1
 800bd6e:	b117      	cbz	r7, 800bd76 <_scanf_i+0x112>
 800bd70:	3301      	adds	r3, #1
 800bd72:	3f01      	subs	r7, #1
 800bd74:	60a3      	str	r3, [r4, #8]
 800bd76:	6873      	ldr	r3, [r6, #4]
 800bd78:	3b01      	subs	r3, #1
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	6073      	str	r3, [r6, #4]
 800bd7e:	dd1c      	ble.n	800bdba <_scanf_i+0x156>
 800bd80:	6833      	ldr	r3, [r6, #0]
 800bd82:	3301      	adds	r3, #1
 800bd84:	6033      	str	r3, [r6, #0]
 800bd86:	68a3      	ldr	r3, [r4, #8]
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	60a3      	str	r3, [r4, #8]
 800bd8c:	e7dc      	b.n	800bd48 <_scanf_i+0xe4>
 800bd8e:	f1b8 0f02 	cmp.w	r8, #2
 800bd92:	d1ad      	bne.n	800bcf0 <_scanf_i+0x8c>
 800bd94:	6822      	ldr	r2, [r4, #0]
 800bd96:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800bd9a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bd9e:	d1bf      	bne.n	800bd20 <_scanf_i+0xbc>
 800bda0:	2110      	movs	r1, #16
 800bda2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bda6:	6061      	str	r1, [r4, #4]
 800bda8:	e7a1      	b.n	800bcee <_scanf_i+0x8a>
 800bdaa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800bdae:	6022      	str	r2, [r4, #0]
 800bdb0:	780b      	ldrb	r3, [r1, #0]
 800bdb2:	3501      	adds	r5, #1
 800bdb4:	f805 3c01 	strb.w	r3, [r5, #-1]
 800bdb8:	e7dd      	b.n	800bd76 <_scanf_i+0x112>
 800bdba:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bdbe:	4631      	mov	r1, r6
 800bdc0:	4658      	mov	r0, fp
 800bdc2:	4798      	blx	r3
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	d0de      	beq.n	800bd86 <_scanf_i+0x122>
 800bdc8:	6823      	ldr	r3, [r4, #0]
 800bdca:	05d9      	lsls	r1, r3, #23
 800bdcc:	d50c      	bpl.n	800bde8 <_scanf_i+0x184>
 800bdce:	454d      	cmp	r5, r9
 800bdd0:	d908      	bls.n	800bde4 <_scanf_i+0x180>
 800bdd2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bdd6:	1e6f      	subs	r7, r5, #1
 800bdd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bddc:	4632      	mov	r2, r6
 800bdde:	4658      	mov	r0, fp
 800bde0:	4798      	blx	r3
 800bde2:	463d      	mov	r5, r7
 800bde4:	454d      	cmp	r5, r9
 800bde6:	d029      	beq.n	800be3c <_scanf_i+0x1d8>
 800bde8:	6822      	ldr	r2, [r4, #0]
 800bdea:	f012 0210 	ands.w	r2, r2, #16
 800bdee:	d113      	bne.n	800be18 <_scanf_i+0x1b4>
 800bdf0:	702a      	strb	r2, [r5, #0]
 800bdf2:	6863      	ldr	r3, [r4, #4]
 800bdf4:	4649      	mov	r1, r9
 800bdf6:	4658      	mov	r0, fp
 800bdf8:	9e00      	ldr	r6, [sp, #0]
 800bdfa:	47b0      	blx	r6
 800bdfc:	f8da 3000 	ldr.w	r3, [sl]
 800be00:	6821      	ldr	r1, [r4, #0]
 800be02:	1d1a      	adds	r2, r3, #4
 800be04:	f8ca 2000 	str.w	r2, [sl]
 800be08:	f011 0f20 	tst.w	r1, #32
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	d010      	beq.n	800be32 <_scanf_i+0x1ce>
 800be10:	6018      	str	r0, [r3, #0]
 800be12:	68e3      	ldr	r3, [r4, #12]
 800be14:	3301      	adds	r3, #1
 800be16:	60e3      	str	r3, [r4, #12]
 800be18:	2000      	movs	r0, #0
 800be1a:	eba5 0509 	sub.w	r5, r5, r9
 800be1e:	44a8      	add	r8, r5
 800be20:	6925      	ldr	r5, [r4, #16]
 800be22:	4445      	add	r5, r8
 800be24:	6125      	str	r5, [r4, #16]
 800be26:	b007      	add	sp, #28
 800be28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be2c:	f04f 0800 	mov.w	r8, #0
 800be30:	e7ca      	b.n	800bdc8 <_scanf_i+0x164>
 800be32:	07ca      	lsls	r2, r1, #31
 800be34:	bf4c      	ite	mi
 800be36:	8018      	strhmi	r0, [r3, #0]
 800be38:	6018      	strpl	r0, [r3, #0]
 800be3a:	e7ea      	b.n	800be12 <_scanf_i+0x1ae>
 800be3c:	2001      	movs	r0, #1
 800be3e:	e7f2      	b.n	800be26 <_scanf_i+0x1c2>
 800be40:	0800d76c 	.word	0x0800d76c
 800be44:	0800a825 	.word	0x0800a825
 800be48:	0800bfed 	.word	0x0800bfed
 800be4c:	0800e5e8 	.word	0x0800e5e8

0800be50 <_sbrk_r>:
 800be50:	b538      	push	{r3, r4, r5, lr}
 800be52:	2300      	movs	r3, #0
 800be54:	4c05      	ldr	r4, [pc, #20]	; (800be6c <_sbrk_r+0x1c>)
 800be56:	4605      	mov	r5, r0
 800be58:	4608      	mov	r0, r1
 800be5a:	6023      	str	r3, [r4, #0]
 800be5c:	f7f6 ff50 	bl	8002d00 <_sbrk>
 800be60:	1c43      	adds	r3, r0, #1
 800be62:	d102      	bne.n	800be6a <_sbrk_r+0x1a>
 800be64:	6823      	ldr	r3, [r4, #0]
 800be66:	b103      	cbz	r3, 800be6a <_sbrk_r+0x1a>
 800be68:	602b      	str	r3, [r5, #0]
 800be6a:	bd38      	pop	{r3, r4, r5, pc}
 800be6c:	20001c2c 	.word	0x20001c2c

0800be70 <__sccl>:
 800be70:	b570      	push	{r4, r5, r6, lr}
 800be72:	780b      	ldrb	r3, [r1, #0]
 800be74:	1e44      	subs	r4, r0, #1
 800be76:	2b5e      	cmp	r3, #94	; 0x5e
 800be78:	bf13      	iteet	ne
 800be7a:	1c4a      	addne	r2, r1, #1
 800be7c:	1c8a      	addeq	r2, r1, #2
 800be7e:	784b      	ldrbeq	r3, [r1, #1]
 800be80:	2100      	movne	r1, #0
 800be82:	bf08      	it	eq
 800be84:	2101      	moveq	r1, #1
 800be86:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800be8a:	f804 1f01 	strb.w	r1, [r4, #1]!
 800be8e:	42ac      	cmp	r4, r5
 800be90:	d1fb      	bne.n	800be8a <__sccl+0x1a>
 800be92:	b913      	cbnz	r3, 800be9a <__sccl+0x2a>
 800be94:	3a01      	subs	r2, #1
 800be96:	4610      	mov	r0, r2
 800be98:	bd70      	pop	{r4, r5, r6, pc}
 800be9a:	f081 0401 	eor.w	r4, r1, #1
 800be9e:	54c4      	strb	r4, [r0, r3]
 800bea0:	1c51      	adds	r1, r2, #1
 800bea2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800bea6:	1e4e      	subs	r6, r1, #1
 800bea8:	2d2d      	cmp	r5, #45	; 0x2d
 800beaa:	460a      	mov	r2, r1
 800beac:	d006      	beq.n	800bebc <__sccl+0x4c>
 800beae:	2d5d      	cmp	r5, #93	; 0x5d
 800beb0:	d0f1      	beq.n	800be96 <__sccl+0x26>
 800beb2:	b90d      	cbnz	r5, 800beb8 <__sccl+0x48>
 800beb4:	4632      	mov	r2, r6
 800beb6:	e7ee      	b.n	800be96 <__sccl+0x26>
 800beb8:	462b      	mov	r3, r5
 800beba:	e7f0      	b.n	800be9e <__sccl+0x2e>
 800bebc:	780e      	ldrb	r6, [r1, #0]
 800bebe:	2e5d      	cmp	r6, #93	; 0x5d
 800bec0:	d0fa      	beq.n	800beb8 <__sccl+0x48>
 800bec2:	42b3      	cmp	r3, r6
 800bec4:	dcf8      	bgt.n	800beb8 <__sccl+0x48>
 800bec6:	3301      	adds	r3, #1
 800bec8:	429e      	cmp	r6, r3
 800beca:	54c4      	strb	r4, [r0, r3]
 800becc:	dcfb      	bgt.n	800bec6 <__sccl+0x56>
 800bece:	3102      	adds	r1, #2
 800bed0:	e7e7      	b.n	800bea2 <__sccl+0x32>

0800bed2 <strncmp>:
 800bed2:	b510      	push	{r4, lr}
 800bed4:	b16a      	cbz	r2, 800bef2 <strncmp+0x20>
 800bed6:	3901      	subs	r1, #1
 800bed8:	1884      	adds	r4, r0, r2
 800beda:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bede:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d103      	bne.n	800beee <strncmp+0x1c>
 800bee6:	42a0      	cmp	r0, r4
 800bee8:	d001      	beq.n	800beee <strncmp+0x1c>
 800beea:	2b00      	cmp	r3, #0
 800beec:	d1f5      	bne.n	800beda <strncmp+0x8>
 800beee:	1a98      	subs	r0, r3, r2
 800bef0:	bd10      	pop	{r4, pc}
 800bef2:	4610      	mov	r0, r2
 800bef4:	e7fc      	b.n	800bef0 <strncmp+0x1e>

0800bef6 <_strtoul_l.isra.0>:
 800bef6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800befa:	4680      	mov	r8, r0
 800befc:	4689      	mov	r9, r1
 800befe:	4692      	mov	sl, r2
 800bf00:	461e      	mov	r6, r3
 800bf02:	460f      	mov	r7, r1
 800bf04:	463d      	mov	r5, r7
 800bf06:	9808      	ldr	r0, [sp, #32]
 800bf08:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf0c:	f7ff f818 	bl	800af40 <__locale_ctype_ptr_l>
 800bf10:	4420      	add	r0, r4
 800bf12:	7843      	ldrb	r3, [r0, #1]
 800bf14:	f013 0308 	ands.w	r3, r3, #8
 800bf18:	d130      	bne.n	800bf7c <_strtoul_l.isra.0+0x86>
 800bf1a:	2c2d      	cmp	r4, #45	; 0x2d
 800bf1c:	d130      	bne.n	800bf80 <_strtoul_l.isra.0+0x8a>
 800bf1e:	2101      	movs	r1, #1
 800bf20:	787c      	ldrb	r4, [r7, #1]
 800bf22:	1cbd      	adds	r5, r7, #2
 800bf24:	2e00      	cmp	r6, #0
 800bf26:	d05c      	beq.n	800bfe2 <_strtoul_l.isra.0+0xec>
 800bf28:	2e10      	cmp	r6, #16
 800bf2a:	d109      	bne.n	800bf40 <_strtoul_l.isra.0+0x4a>
 800bf2c:	2c30      	cmp	r4, #48	; 0x30
 800bf2e:	d107      	bne.n	800bf40 <_strtoul_l.isra.0+0x4a>
 800bf30:	782b      	ldrb	r3, [r5, #0]
 800bf32:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bf36:	2b58      	cmp	r3, #88	; 0x58
 800bf38:	d14e      	bne.n	800bfd8 <_strtoul_l.isra.0+0xe2>
 800bf3a:	2610      	movs	r6, #16
 800bf3c:	786c      	ldrb	r4, [r5, #1]
 800bf3e:	3502      	adds	r5, #2
 800bf40:	f04f 32ff 	mov.w	r2, #4294967295
 800bf44:	fbb2 f2f6 	udiv	r2, r2, r6
 800bf48:	2300      	movs	r3, #0
 800bf4a:	fb06 fc02 	mul.w	ip, r6, r2
 800bf4e:	4618      	mov	r0, r3
 800bf50:	ea6f 0c0c 	mvn.w	ip, ip
 800bf54:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800bf58:	2f09      	cmp	r7, #9
 800bf5a:	d817      	bhi.n	800bf8c <_strtoul_l.isra.0+0x96>
 800bf5c:	463c      	mov	r4, r7
 800bf5e:	42a6      	cmp	r6, r4
 800bf60:	dd23      	ble.n	800bfaa <_strtoul_l.isra.0+0xb4>
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	db1e      	blt.n	800bfa4 <_strtoul_l.isra.0+0xae>
 800bf66:	4282      	cmp	r2, r0
 800bf68:	d31c      	bcc.n	800bfa4 <_strtoul_l.isra.0+0xae>
 800bf6a:	d101      	bne.n	800bf70 <_strtoul_l.isra.0+0x7a>
 800bf6c:	45a4      	cmp	ip, r4
 800bf6e:	db19      	blt.n	800bfa4 <_strtoul_l.isra.0+0xae>
 800bf70:	2301      	movs	r3, #1
 800bf72:	fb00 4006 	mla	r0, r0, r6, r4
 800bf76:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf7a:	e7eb      	b.n	800bf54 <_strtoul_l.isra.0+0x5e>
 800bf7c:	462f      	mov	r7, r5
 800bf7e:	e7c1      	b.n	800bf04 <_strtoul_l.isra.0+0xe>
 800bf80:	2c2b      	cmp	r4, #43	; 0x2b
 800bf82:	bf04      	itt	eq
 800bf84:	1cbd      	addeq	r5, r7, #2
 800bf86:	787c      	ldrbeq	r4, [r7, #1]
 800bf88:	4619      	mov	r1, r3
 800bf8a:	e7cb      	b.n	800bf24 <_strtoul_l.isra.0+0x2e>
 800bf8c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800bf90:	2f19      	cmp	r7, #25
 800bf92:	d801      	bhi.n	800bf98 <_strtoul_l.isra.0+0xa2>
 800bf94:	3c37      	subs	r4, #55	; 0x37
 800bf96:	e7e2      	b.n	800bf5e <_strtoul_l.isra.0+0x68>
 800bf98:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800bf9c:	2f19      	cmp	r7, #25
 800bf9e:	d804      	bhi.n	800bfaa <_strtoul_l.isra.0+0xb4>
 800bfa0:	3c57      	subs	r4, #87	; 0x57
 800bfa2:	e7dc      	b.n	800bf5e <_strtoul_l.isra.0+0x68>
 800bfa4:	f04f 33ff 	mov.w	r3, #4294967295
 800bfa8:	e7e5      	b.n	800bf76 <_strtoul_l.isra.0+0x80>
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	da09      	bge.n	800bfc2 <_strtoul_l.isra.0+0xcc>
 800bfae:	2322      	movs	r3, #34	; 0x22
 800bfb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb4:	f8c8 3000 	str.w	r3, [r8]
 800bfb8:	f1ba 0f00 	cmp.w	sl, #0
 800bfbc:	d107      	bne.n	800bfce <_strtoul_l.isra.0+0xd8>
 800bfbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfc2:	b101      	cbz	r1, 800bfc6 <_strtoul_l.isra.0+0xd0>
 800bfc4:	4240      	negs	r0, r0
 800bfc6:	f1ba 0f00 	cmp.w	sl, #0
 800bfca:	d0f8      	beq.n	800bfbe <_strtoul_l.isra.0+0xc8>
 800bfcc:	b10b      	cbz	r3, 800bfd2 <_strtoul_l.isra.0+0xdc>
 800bfce:	f105 39ff 	add.w	r9, r5, #4294967295
 800bfd2:	f8ca 9000 	str.w	r9, [sl]
 800bfd6:	e7f2      	b.n	800bfbe <_strtoul_l.isra.0+0xc8>
 800bfd8:	2430      	movs	r4, #48	; 0x30
 800bfda:	2e00      	cmp	r6, #0
 800bfdc:	d1b0      	bne.n	800bf40 <_strtoul_l.isra.0+0x4a>
 800bfde:	2608      	movs	r6, #8
 800bfe0:	e7ae      	b.n	800bf40 <_strtoul_l.isra.0+0x4a>
 800bfe2:	2c30      	cmp	r4, #48	; 0x30
 800bfe4:	d0a4      	beq.n	800bf30 <_strtoul_l.isra.0+0x3a>
 800bfe6:	260a      	movs	r6, #10
 800bfe8:	e7aa      	b.n	800bf40 <_strtoul_l.isra.0+0x4a>
	...

0800bfec <_strtoul_r>:
 800bfec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfee:	4c06      	ldr	r4, [pc, #24]	; (800c008 <_strtoul_r+0x1c>)
 800bff0:	4d06      	ldr	r5, [pc, #24]	; (800c00c <_strtoul_r+0x20>)
 800bff2:	6824      	ldr	r4, [r4, #0]
 800bff4:	6a24      	ldr	r4, [r4, #32]
 800bff6:	2c00      	cmp	r4, #0
 800bff8:	bf08      	it	eq
 800bffa:	462c      	moveq	r4, r5
 800bffc:	9400      	str	r4, [sp, #0]
 800bffe:	f7ff ff7a 	bl	800bef6 <_strtoul_l.isra.0>
 800c002:	b003      	add	sp, #12
 800c004:	bd30      	pop	{r4, r5, pc}
 800c006:	bf00      	nop
 800c008:	200001b4 	.word	0x200001b4
 800c00c:	20000218 	.word	0x20000218

0800c010 <__submore>:
 800c010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c014:	460c      	mov	r4, r1
 800c016:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c018:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c01c:	4299      	cmp	r1, r3
 800c01e:	d11b      	bne.n	800c058 <__submore+0x48>
 800c020:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c024:	f7ff fbb8 	bl	800b798 <_malloc_r>
 800c028:	b918      	cbnz	r0, 800c032 <__submore+0x22>
 800c02a:	f04f 30ff 	mov.w	r0, #4294967295
 800c02e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c036:	63a3      	str	r3, [r4, #56]	; 0x38
 800c038:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c03c:	6360      	str	r0, [r4, #52]	; 0x34
 800c03e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c042:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c046:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c04a:	7043      	strb	r3, [r0, #1]
 800c04c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c050:	7003      	strb	r3, [r0, #0]
 800c052:	6020      	str	r0, [r4, #0]
 800c054:	2000      	movs	r0, #0
 800c056:	e7ea      	b.n	800c02e <__submore+0x1e>
 800c058:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c05a:	0077      	lsls	r7, r6, #1
 800c05c:	463a      	mov	r2, r7
 800c05e:	f000 f881 	bl	800c164 <_realloc_r>
 800c062:	4605      	mov	r5, r0
 800c064:	2800      	cmp	r0, #0
 800c066:	d0e0      	beq.n	800c02a <__submore+0x1a>
 800c068:	eb00 0806 	add.w	r8, r0, r6
 800c06c:	4601      	mov	r1, r0
 800c06e:	4632      	mov	r2, r6
 800c070:	4640      	mov	r0, r8
 800c072:	f7fd fcbc 	bl	80099ee <memcpy>
 800c076:	f8c4 8000 	str.w	r8, [r4]
 800c07a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c07e:	e7e9      	b.n	800c054 <__submore+0x44>

0800c080 <__ascii_wctomb>:
 800c080:	b149      	cbz	r1, 800c096 <__ascii_wctomb+0x16>
 800c082:	2aff      	cmp	r2, #255	; 0xff
 800c084:	bf8b      	itete	hi
 800c086:	238a      	movhi	r3, #138	; 0x8a
 800c088:	700a      	strbls	r2, [r1, #0]
 800c08a:	6003      	strhi	r3, [r0, #0]
 800c08c:	2001      	movls	r0, #1
 800c08e:	bf88      	it	hi
 800c090:	f04f 30ff 	movhi.w	r0, #4294967295
 800c094:	4770      	bx	lr
 800c096:	4608      	mov	r0, r1
 800c098:	4770      	bx	lr
	...

0800c09c <malloc>:
 800c09c:	4b02      	ldr	r3, [pc, #8]	; (800c0a8 <malloc+0xc>)
 800c09e:	4601      	mov	r1, r0
 800c0a0:	6818      	ldr	r0, [r3, #0]
 800c0a2:	f7ff bb79 	b.w	800b798 <_malloc_r>
 800c0a6:	bf00      	nop
 800c0a8:	200001b4 	.word	0x200001b4

0800c0ac <memchr>:
 800c0ac:	b510      	push	{r4, lr}
 800c0ae:	b2c9      	uxtb	r1, r1
 800c0b0:	4402      	add	r2, r0
 800c0b2:	4290      	cmp	r0, r2
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	d101      	bne.n	800c0bc <memchr+0x10>
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	e003      	b.n	800c0c4 <memchr+0x18>
 800c0bc:	781c      	ldrb	r4, [r3, #0]
 800c0be:	3001      	adds	r0, #1
 800c0c0:	428c      	cmp	r4, r1
 800c0c2:	d1f6      	bne.n	800c0b2 <memchr+0x6>
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	bd10      	pop	{r4, pc}

0800c0c8 <__malloc_lock>:
 800c0c8:	4770      	bx	lr

0800c0ca <__malloc_unlock>:
 800c0ca:	4770      	bx	lr

0800c0cc <_free_r>:
 800c0cc:	b538      	push	{r3, r4, r5, lr}
 800c0ce:	4605      	mov	r5, r0
 800c0d0:	2900      	cmp	r1, #0
 800c0d2:	d043      	beq.n	800c15c <_free_r+0x90>
 800c0d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0d8:	1f0c      	subs	r4, r1, #4
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	bfb8      	it	lt
 800c0de:	18e4      	addlt	r4, r4, r3
 800c0e0:	f7ff fff2 	bl	800c0c8 <__malloc_lock>
 800c0e4:	4a1e      	ldr	r2, [pc, #120]	; (800c160 <_free_r+0x94>)
 800c0e6:	6813      	ldr	r3, [r2, #0]
 800c0e8:	4610      	mov	r0, r2
 800c0ea:	b933      	cbnz	r3, 800c0fa <_free_r+0x2e>
 800c0ec:	6063      	str	r3, [r4, #4]
 800c0ee:	6014      	str	r4, [r2, #0]
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0f6:	f7ff bfe8 	b.w	800c0ca <__malloc_unlock>
 800c0fa:	42a3      	cmp	r3, r4
 800c0fc:	d90b      	bls.n	800c116 <_free_r+0x4a>
 800c0fe:	6821      	ldr	r1, [r4, #0]
 800c100:	1862      	adds	r2, r4, r1
 800c102:	4293      	cmp	r3, r2
 800c104:	bf01      	itttt	eq
 800c106:	681a      	ldreq	r2, [r3, #0]
 800c108:	685b      	ldreq	r3, [r3, #4]
 800c10a:	1852      	addeq	r2, r2, r1
 800c10c:	6022      	streq	r2, [r4, #0]
 800c10e:	6063      	str	r3, [r4, #4]
 800c110:	6004      	str	r4, [r0, #0]
 800c112:	e7ed      	b.n	800c0f0 <_free_r+0x24>
 800c114:	4613      	mov	r3, r2
 800c116:	685a      	ldr	r2, [r3, #4]
 800c118:	b10a      	cbz	r2, 800c11e <_free_r+0x52>
 800c11a:	42a2      	cmp	r2, r4
 800c11c:	d9fa      	bls.n	800c114 <_free_r+0x48>
 800c11e:	6819      	ldr	r1, [r3, #0]
 800c120:	1858      	adds	r0, r3, r1
 800c122:	42a0      	cmp	r0, r4
 800c124:	d10b      	bne.n	800c13e <_free_r+0x72>
 800c126:	6820      	ldr	r0, [r4, #0]
 800c128:	4401      	add	r1, r0
 800c12a:	1858      	adds	r0, r3, r1
 800c12c:	4282      	cmp	r2, r0
 800c12e:	6019      	str	r1, [r3, #0]
 800c130:	d1de      	bne.n	800c0f0 <_free_r+0x24>
 800c132:	6810      	ldr	r0, [r2, #0]
 800c134:	6852      	ldr	r2, [r2, #4]
 800c136:	4401      	add	r1, r0
 800c138:	6019      	str	r1, [r3, #0]
 800c13a:	605a      	str	r2, [r3, #4]
 800c13c:	e7d8      	b.n	800c0f0 <_free_r+0x24>
 800c13e:	d902      	bls.n	800c146 <_free_r+0x7a>
 800c140:	230c      	movs	r3, #12
 800c142:	602b      	str	r3, [r5, #0]
 800c144:	e7d4      	b.n	800c0f0 <_free_r+0x24>
 800c146:	6820      	ldr	r0, [r4, #0]
 800c148:	1821      	adds	r1, r4, r0
 800c14a:	428a      	cmp	r2, r1
 800c14c:	bf01      	itttt	eq
 800c14e:	6811      	ldreq	r1, [r2, #0]
 800c150:	6852      	ldreq	r2, [r2, #4]
 800c152:	1809      	addeq	r1, r1, r0
 800c154:	6021      	streq	r1, [r4, #0]
 800c156:	6062      	str	r2, [r4, #4]
 800c158:	605c      	str	r4, [r3, #4]
 800c15a:	e7c9      	b.n	800c0f0 <_free_r+0x24>
 800c15c:	bd38      	pop	{r3, r4, r5, pc}
 800c15e:	bf00      	nop
 800c160:	200005e8 	.word	0x200005e8

0800c164 <_realloc_r>:
 800c164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c166:	4607      	mov	r7, r0
 800c168:	4614      	mov	r4, r2
 800c16a:	460e      	mov	r6, r1
 800c16c:	b921      	cbnz	r1, 800c178 <_realloc_r+0x14>
 800c16e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c172:	4611      	mov	r1, r2
 800c174:	f7ff bb10 	b.w	800b798 <_malloc_r>
 800c178:	b922      	cbnz	r2, 800c184 <_realloc_r+0x20>
 800c17a:	f7ff ffa7 	bl	800c0cc <_free_r>
 800c17e:	4625      	mov	r5, r4
 800c180:	4628      	mov	r0, r5
 800c182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c184:	f000 f814 	bl	800c1b0 <_malloc_usable_size_r>
 800c188:	42a0      	cmp	r0, r4
 800c18a:	d20f      	bcs.n	800c1ac <_realloc_r+0x48>
 800c18c:	4621      	mov	r1, r4
 800c18e:	4638      	mov	r0, r7
 800c190:	f7ff fb02 	bl	800b798 <_malloc_r>
 800c194:	4605      	mov	r5, r0
 800c196:	2800      	cmp	r0, #0
 800c198:	d0f2      	beq.n	800c180 <_realloc_r+0x1c>
 800c19a:	4631      	mov	r1, r6
 800c19c:	4622      	mov	r2, r4
 800c19e:	f7fd fc26 	bl	80099ee <memcpy>
 800c1a2:	4631      	mov	r1, r6
 800c1a4:	4638      	mov	r0, r7
 800c1a6:	f7ff ff91 	bl	800c0cc <_free_r>
 800c1aa:	e7e9      	b.n	800c180 <_realloc_r+0x1c>
 800c1ac:	4635      	mov	r5, r6
 800c1ae:	e7e7      	b.n	800c180 <_realloc_r+0x1c>

0800c1b0 <_malloc_usable_size_r>:
 800c1b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1b4:	1f18      	subs	r0, r3, #4
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	bfbc      	itt	lt
 800c1ba:	580b      	ldrlt	r3, [r1, r0]
 800c1bc:	18c0      	addlt	r0, r0, r3
 800c1be:	4770      	bx	lr

0800c1c0 <cos>:
 800c1c0:	b530      	push	{r4, r5, lr}
 800c1c2:	4a18      	ldr	r2, [pc, #96]	; (800c224 <cos+0x64>)
 800c1c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	b087      	sub	sp, #28
 800c1cc:	dc04      	bgt.n	800c1d8 <cos+0x18>
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	f000 fcbd 	bl	800cb50 <__kernel_cos>
 800c1d6:	e006      	b.n	800c1e6 <cos+0x26>
 800c1d8:	4a13      	ldr	r2, [pc, #76]	; (800c228 <cos+0x68>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	dd05      	ble.n	800c1ea <cos+0x2a>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	f7f3 ffc1 	bl	8000168 <__aeabi_dsub>
 800c1e6:	b007      	add	sp, #28
 800c1e8:	bd30      	pop	{r4, r5, pc}
 800c1ea:	aa02      	add	r2, sp, #8
 800c1ec:	f000 fa14 	bl	800c618 <__ieee754_rem_pio2>
 800c1f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1f4:	f000 0403 	and.w	r4, r0, #3
 800c1f8:	2c01      	cmp	r4, #1
 800c1fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1fe:	d008      	beq.n	800c212 <cos+0x52>
 800c200:	2c02      	cmp	r4, #2
 800c202:	d00c      	beq.n	800c21e <cos+0x5e>
 800c204:	2c00      	cmp	r4, #0
 800c206:	d0e4      	beq.n	800c1d2 <cos+0x12>
 800c208:	2401      	movs	r4, #1
 800c20a:	9400      	str	r4, [sp, #0]
 800c20c:	f001 f8a8 	bl	800d360 <__kernel_sin>
 800c210:	e7e9      	b.n	800c1e6 <cos+0x26>
 800c212:	9400      	str	r4, [sp, #0]
 800c214:	f001 f8a4 	bl	800d360 <__kernel_sin>
 800c218:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c21c:	e7e3      	b.n	800c1e6 <cos+0x26>
 800c21e:	f000 fc97 	bl	800cb50 <__kernel_cos>
 800c222:	e7f9      	b.n	800c218 <cos+0x58>
 800c224:	3fe921fb 	.word	0x3fe921fb
 800c228:	7fefffff 	.word	0x7fefffff

0800c22c <sin>:
 800c22c:	b530      	push	{r4, r5, lr}
 800c22e:	4a1a      	ldr	r2, [pc, #104]	; (800c298 <sin+0x6c>)
 800c230:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c234:	4293      	cmp	r3, r2
 800c236:	b087      	sub	sp, #28
 800c238:	dc06      	bgt.n	800c248 <sin+0x1c>
 800c23a:	2300      	movs	r3, #0
 800c23c:	2200      	movs	r2, #0
 800c23e:	9300      	str	r3, [sp, #0]
 800c240:	2300      	movs	r3, #0
 800c242:	f001 f88d 	bl	800d360 <__kernel_sin>
 800c246:	e006      	b.n	800c256 <sin+0x2a>
 800c248:	4a14      	ldr	r2, [pc, #80]	; (800c29c <sin+0x70>)
 800c24a:	4293      	cmp	r3, r2
 800c24c:	dd05      	ble.n	800c25a <sin+0x2e>
 800c24e:	4602      	mov	r2, r0
 800c250:	460b      	mov	r3, r1
 800c252:	f7f3 ff89 	bl	8000168 <__aeabi_dsub>
 800c256:	b007      	add	sp, #28
 800c258:	bd30      	pop	{r4, r5, pc}
 800c25a:	aa02      	add	r2, sp, #8
 800c25c:	f000 f9dc 	bl	800c618 <__ieee754_rem_pio2>
 800c260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c264:	f000 0403 	and.w	r4, r0, #3
 800c268:	2c01      	cmp	r4, #1
 800c26a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c26e:	d005      	beq.n	800c27c <sin+0x50>
 800c270:	2c02      	cmp	r4, #2
 800c272:	d006      	beq.n	800c282 <sin+0x56>
 800c274:	b964      	cbnz	r4, 800c290 <sin+0x64>
 800c276:	2401      	movs	r4, #1
 800c278:	9400      	str	r4, [sp, #0]
 800c27a:	e7e2      	b.n	800c242 <sin+0x16>
 800c27c:	f000 fc68 	bl	800cb50 <__kernel_cos>
 800c280:	e7e9      	b.n	800c256 <sin+0x2a>
 800c282:	2401      	movs	r4, #1
 800c284:	9400      	str	r4, [sp, #0]
 800c286:	f001 f86b 	bl	800d360 <__kernel_sin>
 800c28a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c28e:	e7e2      	b.n	800c256 <sin+0x2a>
 800c290:	f000 fc5e 	bl	800cb50 <__kernel_cos>
 800c294:	e7f9      	b.n	800c28a <sin+0x5e>
 800c296:	bf00      	nop
 800c298:	3fe921fb 	.word	0x3fe921fb
 800c29c:	7fefffff 	.word	0x7fefffff

0800c2a0 <fmod>:
 800c2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a4:	b08b      	sub	sp, #44	; 0x2c
 800c2a6:	461f      	mov	r7, r3
 800c2a8:	4604      	mov	r4, r0
 800c2aa:	460d      	mov	r5, r1
 800c2ac:	4616      	mov	r6, r2
 800c2ae:	f000 f8a7 	bl	800c400 <__ieee754_fmod>
 800c2b2:	4b27      	ldr	r3, [pc, #156]	; (800c350 <fmod+0xb0>)
 800c2b4:	4680      	mov	r8, r0
 800c2b6:	f993 a000 	ldrsb.w	sl, [r3]
 800c2ba:	4689      	mov	r9, r1
 800c2bc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c2c0:	d030      	beq.n	800c324 <fmod+0x84>
 800c2c2:	4632      	mov	r2, r6
 800c2c4:	463b      	mov	r3, r7
 800c2c6:	4630      	mov	r0, r6
 800c2c8:	4639      	mov	r1, r7
 800c2ca:	f7f4 fb9f 	bl	8000a0c <__aeabi_dcmpun>
 800c2ce:	bb48      	cbnz	r0, 800c324 <fmod+0x84>
 800c2d0:	4622      	mov	r2, r4
 800c2d2:	462b      	mov	r3, r5
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	4629      	mov	r1, r5
 800c2d8:	f7f4 fb98 	bl	8000a0c <__aeabi_dcmpun>
 800c2dc:	4683      	mov	fp, r0
 800c2de:	bb08      	cbnz	r0, 800c324 <fmod+0x84>
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	4630      	mov	r0, r6
 800c2e6:	4639      	mov	r1, r7
 800c2e8:	f7f4 fb5e 	bl	80009a8 <__aeabi_dcmpeq>
 800c2ec:	b1d0      	cbz	r0, 800c324 <fmod+0x84>
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	9300      	str	r3, [sp, #0]
 800c2f2:	4b18      	ldr	r3, [pc, #96]	; (800c354 <fmod+0xb4>)
 800c2f4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c2f8:	9301      	str	r3, [sp, #4]
 800c2fa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c2fe:	f8cd b020 	str.w	fp, [sp, #32]
 800c302:	f1ba 0f00 	cmp.w	sl, #0
 800c306:	d112      	bne.n	800c32e <fmod+0x8e>
 800c308:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c30c:	4668      	mov	r0, sp
 800c30e:	f001 f967 	bl	800d5e0 <matherr>
 800c312:	b1b8      	cbz	r0, 800c344 <fmod+0xa4>
 800c314:	9b08      	ldr	r3, [sp, #32]
 800c316:	b11b      	cbz	r3, 800c320 <fmod+0x80>
 800c318:	f7fd fb16 	bl	8009948 <__errno>
 800c31c:	9b08      	ldr	r3, [sp, #32]
 800c31e:	6003      	str	r3, [r0, #0]
 800c320:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800c324:	4640      	mov	r0, r8
 800c326:	4649      	mov	r1, r9
 800c328:	b00b      	add	sp, #44	; 0x2c
 800c32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c32e:	2200      	movs	r2, #0
 800c330:	2300      	movs	r3, #0
 800c332:	4610      	mov	r0, r2
 800c334:	4619      	mov	r1, r3
 800c336:	f7f4 f9f9 	bl	800072c <__aeabi_ddiv>
 800c33a:	f1ba 0f02 	cmp.w	sl, #2
 800c33e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c342:	d1e3      	bne.n	800c30c <fmod+0x6c>
 800c344:	f7fd fb00 	bl	8009948 <__errno>
 800c348:	2321      	movs	r3, #33	; 0x21
 800c34a:	6003      	str	r3, [r0, #0]
 800c34c:	e7e2      	b.n	800c314 <fmod+0x74>
 800c34e:	bf00      	nop
 800c350:	20000384 	.word	0x20000384
 800c354:	0800e754 	.word	0x0800e754

0800c358 <sqrt>:
 800c358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c35c:	b08b      	sub	sp, #44	; 0x2c
 800c35e:	4604      	mov	r4, r0
 800c360:	460d      	mov	r5, r1
 800c362:	f000 fb49 	bl	800c9f8 <__ieee754_sqrt>
 800c366:	4b24      	ldr	r3, [pc, #144]	; (800c3f8 <sqrt+0xa0>)
 800c368:	4680      	mov	r8, r0
 800c36a:	f993 a000 	ldrsb.w	sl, [r3]
 800c36e:	4689      	mov	r9, r1
 800c370:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c374:	d02b      	beq.n	800c3ce <sqrt+0x76>
 800c376:	4622      	mov	r2, r4
 800c378:	462b      	mov	r3, r5
 800c37a:	4620      	mov	r0, r4
 800c37c:	4629      	mov	r1, r5
 800c37e:	f7f4 fb45 	bl	8000a0c <__aeabi_dcmpun>
 800c382:	4683      	mov	fp, r0
 800c384:	bb18      	cbnz	r0, 800c3ce <sqrt+0x76>
 800c386:	2600      	movs	r6, #0
 800c388:	2700      	movs	r7, #0
 800c38a:	4632      	mov	r2, r6
 800c38c:	463b      	mov	r3, r7
 800c38e:	4620      	mov	r0, r4
 800c390:	4629      	mov	r1, r5
 800c392:	f7f4 fb13 	bl	80009bc <__aeabi_dcmplt>
 800c396:	b1d0      	cbz	r0, 800c3ce <sqrt+0x76>
 800c398:	2301      	movs	r3, #1
 800c39a:	9300      	str	r3, [sp, #0]
 800c39c:	4b17      	ldr	r3, [pc, #92]	; (800c3fc <sqrt+0xa4>)
 800c39e:	f8cd b020 	str.w	fp, [sp, #32]
 800c3a2:	9301      	str	r3, [sp, #4]
 800c3a4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c3a8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c3ac:	f1ba 0f00 	cmp.w	sl, #0
 800c3b0:	d112      	bne.n	800c3d8 <sqrt+0x80>
 800c3b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c3b6:	4668      	mov	r0, sp
 800c3b8:	f001 f912 	bl	800d5e0 <matherr>
 800c3bc:	b1b8      	cbz	r0, 800c3ee <sqrt+0x96>
 800c3be:	9b08      	ldr	r3, [sp, #32]
 800c3c0:	b11b      	cbz	r3, 800c3ca <sqrt+0x72>
 800c3c2:	f7fd fac1 	bl	8009948 <__errno>
 800c3c6:	9b08      	ldr	r3, [sp, #32]
 800c3c8:	6003      	str	r3, [r0, #0]
 800c3ca:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800c3ce:	4640      	mov	r0, r8
 800c3d0:	4649      	mov	r1, r9
 800c3d2:	b00b      	add	sp, #44	; 0x2c
 800c3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3d8:	4632      	mov	r2, r6
 800c3da:	463b      	mov	r3, r7
 800c3dc:	4630      	mov	r0, r6
 800c3de:	4639      	mov	r1, r7
 800c3e0:	f7f4 f9a4 	bl	800072c <__aeabi_ddiv>
 800c3e4:	f1ba 0f02 	cmp.w	sl, #2
 800c3e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c3ec:	d1e3      	bne.n	800c3b6 <sqrt+0x5e>
 800c3ee:	f7fd faab 	bl	8009948 <__errno>
 800c3f2:	2321      	movs	r3, #33	; 0x21
 800c3f4:	6003      	str	r3, [r0, #0]
 800c3f6:	e7e2      	b.n	800c3be <sqrt+0x66>
 800c3f8:	20000384 	.word	0x20000384
 800c3fc:	0800e759 	.word	0x0800e759

0800c400 <__ieee754_fmod>:
 800c400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c404:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800c408:	4682      	mov	sl, r0
 800c40a:	ea54 0002 	orrs.w	r0, r4, r2
 800c40e:	461e      	mov	r6, r3
 800c410:	4694      	mov	ip, r2
 800c412:	4696      	mov	lr, r2
 800c414:	d00c      	beq.n	800c430 <__ieee754_fmod+0x30>
 800c416:	4d78      	ldr	r5, [pc, #480]	; (800c5f8 <__ieee754_fmod+0x1f8>)
 800c418:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800c41c:	45a8      	cmp	r8, r5
 800c41e:	4689      	mov	r9, r1
 800c420:	dc06      	bgt.n	800c430 <__ieee754_fmod+0x30>
 800c422:	4255      	negs	r5, r2
 800c424:	4315      	orrs	r5, r2
 800c426:	4f75      	ldr	r7, [pc, #468]	; (800c5fc <__ieee754_fmod+0x1fc>)
 800c428:	ea44 75d5 	orr.w	r5, r4, r5, lsr #31
 800c42c:	42bd      	cmp	r5, r7
 800c42e:	d908      	bls.n	800c442 <__ieee754_fmod+0x42>
 800c430:	4650      	mov	r0, sl
 800c432:	f7f4 f851 	bl	80004d8 <__aeabi_dmul>
 800c436:	4602      	mov	r2, r0
 800c438:	460b      	mov	r3, r1
 800c43a:	f7f4 f977 	bl	800072c <__aeabi_ddiv>
 800c43e:	4682      	mov	sl, r0
 800c440:	e00f      	b.n	800c462 <__ieee754_fmod+0x62>
 800c442:	45a0      	cmp	r8, r4
 800c444:	4652      	mov	r2, sl
 800c446:	4657      	mov	r7, sl
 800c448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c44c:	dc0c      	bgt.n	800c468 <__ieee754_fmod+0x68>
 800c44e:	db08      	blt.n	800c462 <__ieee754_fmod+0x62>
 800c450:	45e2      	cmp	sl, ip
 800c452:	d306      	bcc.n	800c462 <__ieee754_fmod+0x62>
 800c454:	d108      	bne.n	800c468 <__ieee754_fmod+0x68>
 800c456:	496a      	ldr	r1, [pc, #424]	; (800c600 <__ieee754_fmod+0x200>)
 800c458:	0fed      	lsrs	r5, r5, #31
 800c45a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800c45e:	e9d5 a100 	ldrd	sl, r1, [r5]
 800c462:	4650      	mov	r0, sl
 800c464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c468:	4b66      	ldr	r3, [pc, #408]	; (800c604 <__ieee754_fmod+0x204>)
 800c46a:	4598      	cmp	r8, r3
 800c46c:	dc48      	bgt.n	800c500 <__ieee754_fmod+0x100>
 800c46e:	f1b8 0f00 	cmp.w	r8, #0
 800c472:	d13c      	bne.n	800c4ee <__ieee754_fmod+0xee>
 800c474:	4611      	mov	r1, r2
 800c476:	4864      	ldr	r0, [pc, #400]	; (800c608 <__ieee754_fmod+0x208>)
 800c478:	2900      	cmp	r1, #0
 800c47a:	dc35      	bgt.n	800c4e8 <__ieee754_fmod+0xe8>
 800c47c:	429c      	cmp	r4, r3
 800c47e:	dc4f      	bgt.n	800c520 <__ieee754_fmod+0x120>
 800c480:	2c00      	cmp	r4, #0
 800c482:	d145      	bne.n	800c510 <__ieee754_fmod+0x110>
 800c484:	4661      	mov	r1, ip
 800c486:	4b60      	ldr	r3, [pc, #384]	; (800c608 <__ieee754_fmod+0x208>)
 800c488:	2900      	cmp	r1, #0
 800c48a:	dc3e      	bgt.n	800c50a <__ieee754_fmod+0x10a>
 800c48c:	495f      	ldr	r1, [pc, #380]	; (800c60c <__ieee754_fmod+0x20c>)
 800c48e:	4288      	cmp	r0, r1
 800c490:	db4a      	blt.n	800c528 <__ieee754_fmod+0x128>
 800c492:	f3c9 0113 	ubfx	r1, r9, #0, #20
 800c496:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c49a:	4a5c      	ldr	r2, [pc, #368]	; (800c60c <__ieee754_fmod+0x20c>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	db57      	blt.n	800c550 <__ieee754_fmod+0x150>
 800c4a0:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800c4a4:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800c4a8:	1ac0      	subs	r0, r0, r3
 800c4aa:	1b8a      	subs	r2, r1, r6
 800c4ac:	eba7 040e 	sub.w	r4, r7, lr
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	d163      	bne.n	800c57c <__ieee754_fmod+0x17c>
 800c4b4:	4577      	cmp	r7, lr
 800c4b6:	bf38      	it	cc
 800c4b8:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800c4bc:	2a00      	cmp	r2, #0
 800c4be:	bfbc      	itt	lt
 800c4c0:	463c      	movlt	r4, r7
 800c4c2:	460a      	movlt	r2, r1
 800c4c4:	ea52 0104 	orrs.w	r1, r2, r4
 800c4c8:	d0c5      	beq.n	800c456 <__ieee754_fmod+0x56>
 800c4ca:	494e      	ldr	r1, [pc, #312]	; (800c604 <__ieee754_fmod+0x204>)
 800c4cc:	428a      	cmp	r2, r1
 800c4ce:	dd6a      	ble.n	800c5a6 <__ieee754_fmod+0x1a6>
 800c4d0:	494e      	ldr	r1, [pc, #312]	; (800c60c <__ieee754_fmod+0x20c>)
 800c4d2:	428b      	cmp	r3, r1
 800c4d4:	db6d      	blt.n	800c5b2 <__ieee754_fmod+0x1b2>
 800c4d6:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 800c4da:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800c4de:	4315      	orrs	r5, r2
 800c4e0:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	e7aa      	b.n	800c43e <__ieee754_fmod+0x3e>
 800c4e8:	3801      	subs	r0, #1
 800c4ea:	0049      	lsls	r1, r1, #1
 800c4ec:	e7c4      	b.n	800c478 <__ieee754_fmod+0x78>
 800c4ee:	4847      	ldr	r0, [pc, #284]	; (800c60c <__ieee754_fmod+0x20c>)
 800c4f0:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800c4f4:	0049      	lsls	r1, r1, #1
 800c4f6:	2900      	cmp	r1, #0
 800c4f8:	f100 30ff 	add.w	r0, r0, #4294967295
 800c4fc:	dcfa      	bgt.n	800c4f4 <__ieee754_fmod+0xf4>
 800c4fe:	e7bd      	b.n	800c47c <__ieee754_fmod+0x7c>
 800c500:	ea4f 5028 	mov.w	r0, r8, asr #20
 800c504:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800c508:	e7b8      	b.n	800c47c <__ieee754_fmod+0x7c>
 800c50a:	3b01      	subs	r3, #1
 800c50c:	0049      	lsls	r1, r1, #1
 800c50e:	e7bb      	b.n	800c488 <__ieee754_fmod+0x88>
 800c510:	4b3e      	ldr	r3, [pc, #248]	; (800c60c <__ieee754_fmod+0x20c>)
 800c512:	02e1      	lsls	r1, r4, #11
 800c514:	0049      	lsls	r1, r1, #1
 800c516:	2900      	cmp	r1, #0
 800c518:	f103 33ff 	add.w	r3, r3, #4294967295
 800c51c:	dcfa      	bgt.n	800c514 <__ieee754_fmod+0x114>
 800c51e:	e7b5      	b.n	800c48c <__ieee754_fmod+0x8c>
 800c520:	1523      	asrs	r3, r4, #20
 800c522:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c526:	e7b1      	b.n	800c48c <__ieee754_fmod+0x8c>
 800c528:	1a0f      	subs	r7, r1, r0
 800c52a:	2f1f      	cmp	r7, #31
 800c52c:	dc0a      	bgt.n	800c544 <__ieee754_fmod+0x144>
 800c52e:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 800c532:	fa08 f807 	lsl.w	r8, r8, r7
 800c536:	fa22 f101 	lsr.w	r1, r2, r1
 800c53a:	ea41 0108 	orr.w	r1, r1, r8
 800c53e:	fa02 f707 	lsl.w	r7, r2, r7
 800c542:	e7aa      	b.n	800c49a <__ieee754_fmod+0x9a>
 800c544:	4932      	ldr	r1, [pc, #200]	; (800c610 <__ieee754_fmod+0x210>)
 800c546:	2700      	movs	r7, #0
 800c548:	1a09      	subs	r1, r1, r0
 800c54a:	fa02 f101 	lsl.w	r1, r2, r1
 800c54e:	e7a4      	b.n	800c49a <__ieee754_fmod+0x9a>
 800c550:	eba2 0e03 	sub.w	lr, r2, r3
 800c554:	f1be 0f1f 	cmp.w	lr, #31
 800c558:	dc09      	bgt.n	800c56e <__ieee754_fmod+0x16e>
 800c55a:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 800c55e:	fa04 f40e 	lsl.w	r4, r4, lr
 800c562:	fa2c f606 	lsr.w	r6, ip, r6
 800c566:	4326      	orrs	r6, r4
 800c568:	fa0c fe0e 	lsl.w	lr, ip, lr
 800c56c:	e79c      	b.n	800c4a8 <__ieee754_fmod+0xa8>
 800c56e:	4e28      	ldr	r6, [pc, #160]	; (800c610 <__ieee754_fmod+0x210>)
 800c570:	f04f 0e00 	mov.w	lr, #0
 800c574:	1af6      	subs	r6, r6, r3
 800c576:	fa0c f606 	lsl.w	r6, ip, r6
 800c57a:	e795      	b.n	800c4a8 <__ieee754_fmod+0xa8>
 800c57c:	4577      	cmp	r7, lr
 800c57e:	bf38      	it	cc
 800c580:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800c584:	2a00      	cmp	r2, #0
 800c586:	da05      	bge.n	800c594 <__ieee754_fmod+0x194>
 800c588:	0ffa      	lsrs	r2, r7, #31
 800c58a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c58e:	007f      	lsls	r7, r7, #1
 800c590:	3801      	subs	r0, #1
 800c592:	e78a      	b.n	800c4aa <__ieee754_fmod+0xaa>
 800c594:	ea52 0104 	orrs.w	r1, r2, r4
 800c598:	f43f af5d 	beq.w	800c456 <__ieee754_fmod+0x56>
 800c59c:	0fe1      	lsrs	r1, r4, #31
 800c59e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800c5a2:	0067      	lsls	r7, r4, #1
 800c5a4:	e7f4      	b.n	800c590 <__ieee754_fmod+0x190>
 800c5a6:	0fe0      	lsrs	r0, r4, #31
 800c5a8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800c5ac:	0064      	lsls	r4, r4, #1
 800c5ae:	3b01      	subs	r3, #1
 800c5b0:	e78c      	b.n	800c4cc <__ieee754_fmod+0xcc>
 800c5b2:	1ac9      	subs	r1, r1, r3
 800c5b4:	2914      	cmp	r1, #20
 800c5b6:	dc0a      	bgt.n	800c5ce <__ieee754_fmod+0x1ce>
 800c5b8:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800c5bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c5c0:	40cc      	lsrs	r4, r1
 800c5c2:	4323      	orrs	r3, r4
 800c5c4:	410a      	asrs	r2, r1
 800c5c6:	ea42 0105 	orr.w	r1, r2, r5
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	e737      	b.n	800c43e <__ieee754_fmod+0x3e>
 800c5ce:	291f      	cmp	r1, #31
 800c5d0:	dc07      	bgt.n	800c5e2 <__ieee754_fmod+0x1e2>
 800c5d2:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800c5d6:	40cc      	lsrs	r4, r1
 800c5d8:	fa02 f303 	lsl.w	r3, r2, r3
 800c5dc:	4323      	orrs	r3, r4
 800c5de:	462a      	mov	r2, r5
 800c5e0:	e7f1      	b.n	800c5c6 <__ieee754_fmod+0x1c6>
 800c5e2:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800c5e6:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800c5ea:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800c5ee:	33e2      	adds	r3, #226	; 0xe2
 800c5f0:	fa42 f303 	asr.w	r3, r2, r3
 800c5f4:	e7f3      	b.n	800c5de <__ieee754_fmod+0x1de>
 800c5f6:	bf00      	nop
 800c5f8:	7fefffff 	.word	0x7fefffff
 800c5fc:	7ff00000 	.word	0x7ff00000
 800c600:	0800e760 	.word	0x0800e760
 800c604:	000fffff 	.word	0x000fffff
 800c608:	fffffbed 	.word	0xfffffbed
 800c60c:	fffffc02 	.word	0xfffffc02
 800c610:	fffffbe2 	.word	0xfffffbe2
 800c614:	00000000 	.word	0x00000000

0800c618 <__ieee754_rem_pio2>:
 800c618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61c:	4614      	mov	r4, r2
 800c61e:	4ac2      	ldr	r2, [pc, #776]	; (800c928 <__ieee754_rem_pio2+0x310>)
 800c620:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800c624:	4592      	cmp	sl, r2
 800c626:	b08d      	sub	sp, #52	; 0x34
 800c628:	468b      	mov	fp, r1
 800c62a:	dc07      	bgt.n	800c63c <__ieee754_rem_pio2+0x24>
 800c62c:	2200      	movs	r2, #0
 800c62e:	2300      	movs	r3, #0
 800c630:	e9c4 0100 	strd	r0, r1, [r4]
 800c634:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c638:	2500      	movs	r5, #0
 800c63a:	e023      	b.n	800c684 <__ieee754_rem_pio2+0x6c>
 800c63c:	4abb      	ldr	r2, [pc, #748]	; (800c92c <__ieee754_rem_pio2+0x314>)
 800c63e:	4592      	cmp	sl, r2
 800c640:	dc71      	bgt.n	800c726 <__ieee754_rem_pio2+0x10e>
 800c642:	a3ab      	add	r3, pc, #684	; (adr r3, 800c8f0 <__ieee754_rem_pio2+0x2d8>)
 800c644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c648:	2900      	cmp	r1, #0
 800c64a:	4db9      	ldr	r5, [pc, #740]	; (800c930 <__ieee754_rem_pio2+0x318>)
 800c64c:	dd36      	ble.n	800c6bc <__ieee754_rem_pio2+0xa4>
 800c64e:	f7f3 fd8b 	bl	8000168 <__aeabi_dsub>
 800c652:	45aa      	cmp	sl, r5
 800c654:	4606      	mov	r6, r0
 800c656:	460f      	mov	r7, r1
 800c658:	d018      	beq.n	800c68c <__ieee754_rem_pio2+0x74>
 800c65a:	a3a7      	add	r3, pc, #668	; (adr r3, 800c8f8 <__ieee754_rem_pio2+0x2e0>)
 800c65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c660:	f7f3 fd82 	bl	8000168 <__aeabi_dsub>
 800c664:	4602      	mov	r2, r0
 800c666:	460b      	mov	r3, r1
 800c668:	4630      	mov	r0, r6
 800c66a:	e9c4 2300 	strd	r2, r3, [r4]
 800c66e:	4639      	mov	r1, r7
 800c670:	f7f3 fd7a 	bl	8000168 <__aeabi_dsub>
 800c674:	a3a0      	add	r3, pc, #640	; (adr r3, 800c8f8 <__ieee754_rem_pio2+0x2e0>)
 800c676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67a:	f7f3 fd75 	bl	8000168 <__aeabi_dsub>
 800c67e:	2501      	movs	r5, #1
 800c680:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c684:	4628      	mov	r0, r5
 800c686:	b00d      	add	sp, #52	; 0x34
 800c688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c68c:	a39c      	add	r3, pc, #624	; (adr r3, 800c900 <__ieee754_rem_pio2+0x2e8>)
 800c68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c692:	f7f3 fd69 	bl	8000168 <__aeabi_dsub>
 800c696:	a39c      	add	r3, pc, #624	; (adr r3, 800c908 <__ieee754_rem_pio2+0x2f0>)
 800c698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69c:	4606      	mov	r6, r0
 800c69e:	460f      	mov	r7, r1
 800c6a0:	f7f3 fd62 	bl	8000168 <__aeabi_dsub>
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	4630      	mov	r0, r6
 800c6aa:	e9c4 2300 	strd	r2, r3, [r4]
 800c6ae:	4639      	mov	r1, r7
 800c6b0:	f7f3 fd5a 	bl	8000168 <__aeabi_dsub>
 800c6b4:	a394      	add	r3, pc, #592	; (adr r3, 800c908 <__ieee754_rem_pio2+0x2f0>)
 800c6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ba:	e7de      	b.n	800c67a <__ieee754_rem_pio2+0x62>
 800c6bc:	f7f3 fd56 	bl	800016c <__adddf3>
 800c6c0:	45aa      	cmp	sl, r5
 800c6c2:	4606      	mov	r6, r0
 800c6c4:	460f      	mov	r7, r1
 800c6c6:	d016      	beq.n	800c6f6 <__ieee754_rem_pio2+0xde>
 800c6c8:	a38b      	add	r3, pc, #556	; (adr r3, 800c8f8 <__ieee754_rem_pio2+0x2e0>)
 800c6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ce:	f7f3 fd4d 	bl	800016c <__adddf3>
 800c6d2:	4602      	mov	r2, r0
 800c6d4:	460b      	mov	r3, r1
 800c6d6:	4630      	mov	r0, r6
 800c6d8:	e9c4 2300 	strd	r2, r3, [r4]
 800c6dc:	4639      	mov	r1, r7
 800c6de:	f7f3 fd43 	bl	8000168 <__aeabi_dsub>
 800c6e2:	a385      	add	r3, pc, #532	; (adr r3, 800c8f8 <__ieee754_rem_pio2+0x2e0>)
 800c6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e8:	f7f3 fd40 	bl	800016c <__adddf3>
 800c6ec:	f04f 35ff 	mov.w	r5, #4294967295
 800c6f0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c6f4:	e7c6      	b.n	800c684 <__ieee754_rem_pio2+0x6c>
 800c6f6:	a382      	add	r3, pc, #520	; (adr r3, 800c900 <__ieee754_rem_pio2+0x2e8>)
 800c6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fc:	f7f3 fd36 	bl	800016c <__adddf3>
 800c700:	a381      	add	r3, pc, #516	; (adr r3, 800c908 <__ieee754_rem_pio2+0x2f0>)
 800c702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c706:	4606      	mov	r6, r0
 800c708:	460f      	mov	r7, r1
 800c70a:	f7f3 fd2f 	bl	800016c <__adddf3>
 800c70e:	4602      	mov	r2, r0
 800c710:	460b      	mov	r3, r1
 800c712:	4630      	mov	r0, r6
 800c714:	e9c4 2300 	strd	r2, r3, [r4]
 800c718:	4639      	mov	r1, r7
 800c71a:	f7f3 fd25 	bl	8000168 <__aeabi_dsub>
 800c71e:	a37a      	add	r3, pc, #488	; (adr r3, 800c908 <__ieee754_rem_pio2+0x2f0>)
 800c720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c724:	e7e0      	b.n	800c6e8 <__ieee754_rem_pio2+0xd0>
 800c726:	4a83      	ldr	r2, [pc, #524]	; (800c934 <__ieee754_rem_pio2+0x31c>)
 800c728:	4592      	cmp	sl, r2
 800c72a:	f300 80d2 	bgt.w	800c8d2 <__ieee754_rem_pio2+0x2ba>
 800c72e:	f000 fecd 	bl	800d4cc <fabs>
 800c732:	a377      	add	r3, pc, #476	; (adr r3, 800c910 <__ieee754_rem_pio2+0x2f8>)
 800c734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c738:	4606      	mov	r6, r0
 800c73a:	460f      	mov	r7, r1
 800c73c:	f7f3 fecc 	bl	80004d8 <__aeabi_dmul>
 800c740:	2200      	movs	r2, #0
 800c742:	4b7d      	ldr	r3, [pc, #500]	; (800c938 <__ieee754_rem_pio2+0x320>)
 800c744:	f7f3 fd12 	bl	800016c <__adddf3>
 800c748:	f7f4 f976 	bl	8000a38 <__aeabi_d2iz>
 800c74c:	4605      	mov	r5, r0
 800c74e:	f7f3 fe59 	bl	8000404 <__aeabi_i2d>
 800c752:	a367      	add	r3, pc, #412	; (adr r3, 800c8f0 <__ieee754_rem_pio2+0x2d8>)
 800c754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c758:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c75c:	f7f3 febc 	bl	80004d8 <__aeabi_dmul>
 800c760:	4602      	mov	r2, r0
 800c762:	460b      	mov	r3, r1
 800c764:	4630      	mov	r0, r6
 800c766:	4639      	mov	r1, r7
 800c768:	f7f3 fcfe 	bl	8000168 <__aeabi_dsub>
 800c76c:	a362      	add	r3, pc, #392	; (adr r3, 800c8f8 <__ieee754_rem_pio2+0x2e0>)
 800c76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c772:	4606      	mov	r6, r0
 800c774:	460f      	mov	r7, r1
 800c776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c77a:	f7f3 fead 	bl	80004d8 <__aeabi_dmul>
 800c77e:	2d1f      	cmp	r5, #31
 800c780:	4680      	mov	r8, r0
 800c782:	4689      	mov	r9, r1
 800c784:	dc0e      	bgt.n	800c7a4 <__ieee754_rem_pio2+0x18c>
 800c786:	4b6d      	ldr	r3, [pc, #436]	; (800c93c <__ieee754_rem_pio2+0x324>)
 800c788:	1e6a      	subs	r2, r5, #1
 800c78a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c78e:	4553      	cmp	r3, sl
 800c790:	d008      	beq.n	800c7a4 <__ieee754_rem_pio2+0x18c>
 800c792:	4642      	mov	r2, r8
 800c794:	464b      	mov	r3, r9
 800c796:	4630      	mov	r0, r6
 800c798:	4639      	mov	r1, r7
 800c79a:	f7f3 fce5 	bl	8000168 <__aeabi_dsub>
 800c79e:	e9c4 0100 	strd	r0, r1, [r4]
 800c7a2:	e011      	b.n	800c7c8 <__ieee754_rem_pio2+0x1b0>
 800c7a4:	464b      	mov	r3, r9
 800c7a6:	4642      	mov	r2, r8
 800c7a8:	4630      	mov	r0, r6
 800c7aa:	4639      	mov	r1, r7
 800c7ac:	f7f3 fcdc 	bl	8000168 <__aeabi_dsub>
 800c7b0:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800c7b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c7b8:	ebaa 0303 	sub.w	r3, sl, r3
 800c7bc:	2b10      	cmp	r3, #16
 800c7be:	dc1f      	bgt.n	800c800 <__ieee754_rem_pio2+0x1e8>
 800c7c0:	4602      	mov	r2, r0
 800c7c2:	460b      	mov	r3, r1
 800c7c4:	e9c4 2300 	strd	r2, r3, [r4]
 800c7c8:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800c7cc:	4630      	mov	r0, r6
 800c7ce:	4653      	mov	r3, sl
 800c7d0:	4639      	mov	r1, r7
 800c7d2:	f7f3 fcc9 	bl	8000168 <__aeabi_dsub>
 800c7d6:	4642      	mov	r2, r8
 800c7d8:	464b      	mov	r3, r9
 800c7da:	f7f3 fcc5 	bl	8000168 <__aeabi_dsub>
 800c7de:	4602      	mov	r2, r0
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	f1bb 0f00 	cmp.w	fp, #0
 800c7e6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c7ea:	f6bf af4b 	bge.w	800c684 <__ieee754_rem_pio2+0x6c>
 800c7ee:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800c7f2:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800c7f6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c7fa:	60e1      	str	r1, [r4, #12]
 800c7fc:	426d      	negs	r5, r5
 800c7fe:	e741      	b.n	800c684 <__ieee754_rem_pio2+0x6c>
 800c800:	a33f      	add	r3, pc, #252	; (adr r3, 800c900 <__ieee754_rem_pio2+0x2e8>)
 800c802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c80a:	f7f3 fe65 	bl	80004d8 <__aeabi_dmul>
 800c80e:	4680      	mov	r8, r0
 800c810:	4689      	mov	r9, r1
 800c812:	4602      	mov	r2, r0
 800c814:	460b      	mov	r3, r1
 800c816:	4630      	mov	r0, r6
 800c818:	4639      	mov	r1, r7
 800c81a:	f7f3 fca5 	bl	8000168 <__aeabi_dsub>
 800c81e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c822:	4602      	mov	r2, r0
 800c824:	460b      	mov	r3, r1
 800c826:	4630      	mov	r0, r6
 800c828:	4639      	mov	r1, r7
 800c82a:	f7f3 fc9d 	bl	8000168 <__aeabi_dsub>
 800c82e:	4642      	mov	r2, r8
 800c830:	464b      	mov	r3, r9
 800c832:	f7f3 fc99 	bl	8000168 <__aeabi_dsub>
 800c836:	a334      	add	r3, pc, #208	; (adr r3, 800c908 <__ieee754_rem_pio2+0x2f0>)
 800c838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83c:	4606      	mov	r6, r0
 800c83e:	460f      	mov	r7, r1
 800c840:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c844:	f7f3 fe48 	bl	80004d8 <__aeabi_dmul>
 800c848:	4632      	mov	r2, r6
 800c84a:	463b      	mov	r3, r7
 800c84c:	f7f3 fc8c 	bl	8000168 <__aeabi_dsub>
 800c850:	460b      	mov	r3, r1
 800c852:	4602      	mov	r2, r0
 800c854:	4680      	mov	r8, r0
 800c856:	4689      	mov	r9, r1
 800c858:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c85c:	f7f3 fc84 	bl	8000168 <__aeabi_dsub>
 800c860:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c864:	ebaa 0a03 	sub.w	sl, sl, r3
 800c868:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800c86c:	dc06      	bgt.n	800c87c <__ieee754_rem_pio2+0x264>
 800c86e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800c872:	4602      	mov	r2, r0
 800c874:	460b      	mov	r3, r1
 800c876:	e9c4 2300 	strd	r2, r3, [r4]
 800c87a:	e7a5      	b.n	800c7c8 <__ieee754_rem_pio2+0x1b0>
 800c87c:	a326      	add	r3, pc, #152	; (adr r3, 800c918 <__ieee754_rem_pio2+0x300>)
 800c87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c886:	f7f3 fe27 	bl	80004d8 <__aeabi_dmul>
 800c88a:	4680      	mov	r8, r0
 800c88c:	4689      	mov	r9, r1
 800c88e:	4602      	mov	r2, r0
 800c890:	460b      	mov	r3, r1
 800c892:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c896:	f7f3 fc67 	bl	8000168 <__aeabi_dsub>
 800c89a:	4602      	mov	r2, r0
 800c89c:	460b      	mov	r3, r1
 800c89e:	4606      	mov	r6, r0
 800c8a0:	460f      	mov	r7, r1
 800c8a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8a6:	f7f3 fc5f 	bl	8000168 <__aeabi_dsub>
 800c8aa:	4642      	mov	r2, r8
 800c8ac:	464b      	mov	r3, r9
 800c8ae:	f7f3 fc5b 	bl	8000168 <__aeabi_dsub>
 800c8b2:	a31b      	add	r3, pc, #108	; (adr r3, 800c920 <__ieee754_rem_pio2+0x308>)
 800c8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b8:	4680      	mov	r8, r0
 800c8ba:	4689      	mov	r9, r1
 800c8bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8c0:	f7f3 fe0a 	bl	80004d8 <__aeabi_dmul>
 800c8c4:	4642      	mov	r2, r8
 800c8c6:	464b      	mov	r3, r9
 800c8c8:	f7f3 fc4e 	bl	8000168 <__aeabi_dsub>
 800c8cc:	4680      	mov	r8, r0
 800c8ce:	4689      	mov	r9, r1
 800c8d0:	e75f      	b.n	800c792 <__ieee754_rem_pio2+0x17a>
 800c8d2:	4a1b      	ldr	r2, [pc, #108]	; (800c940 <__ieee754_rem_pio2+0x328>)
 800c8d4:	4592      	cmp	sl, r2
 800c8d6:	dd35      	ble.n	800c944 <__ieee754_rem_pio2+0x32c>
 800c8d8:	4602      	mov	r2, r0
 800c8da:	460b      	mov	r3, r1
 800c8dc:	f7f3 fc44 	bl	8000168 <__aeabi_dsub>
 800c8e0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c8e4:	e9c4 0100 	strd	r0, r1, [r4]
 800c8e8:	e6a6      	b.n	800c638 <__ieee754_rem_pio2+0x20>
 800c8ea:	bf00      	nop
 800c8ec:	f3af 8000 	nop.w
 800c8f0:	54400000 	.word	0x54400000
 800c8f4:	3ff921fb 	.word	0x3ff921fb
 800c8f8:	1a626331 	.word	0x1a626331
 800c8fc:	3dd0b461 	.word	0x3dd0b461
 800c900:	1a600000 	.word	0x1a600000
 800c904:	3dd0b461 	.word	0x3dd0b461
 800c908:	2e037073 	.word	0x2e037073
 800c90c:	3ba3198a 	.word	0x3ba3198a
 800c910:	6dc9c883 	.word	0x6dc9c883
 800c914:	3fe45f30 	.word	0x3fe45f30
 800c918:	2e000000 	.word	0x2e000000
 800c91c:	3ba3198a 	.word	0x3ba3198a
 800c920:	252049c1 	.word	0x252049c1
 800c924:	397b839a 	.word	0x397b839a
 800c928:	3fe921fb 	.word	0x3fe921fb
 800c92c:	4002d97b 	.word	0x4002d97b
 800c930:	3ff921fb 	.word	0x3ff921fb
 800c934:	413921fb 	.word	0x413921fb
 800c938:	3fe00000 	.word	0x3fe00000
 800c93c:	0800e770 	.word	0x0800e770
 800c940:	7fefffff 	.word	0x7fefffff
 800c944:	ea4f 552a 	mov.w	r5, sl, asr #20
 800c948:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c94c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800c950:	460f      	mov	r7, r1
 800c952:	4606      	mov	r6, r0
 800c954:	f7f4 f870 	bl	8000a38 <__aeabi_d2iz>
 800c958:	f7f3 fd54 	bl	8000404 <__aeabi_i2d>
 800c95c:	4602      	mov	r2, r0
 800c95e:	460b      	mov	r3, r1
 800c960:	4630      	mov	r0, r6
 800c962:	4639      	mov	r1, r7
 800c964:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c968:	f7f3 fbfe 	bl	8000168 <__aeabi_dsub>
 800c96c:	2200      	movs	r2, #0
 800c96e:	4b20      	ldr	r3, [pc, #128]	; (800c9f0 <__ieee754_rem_pio2+0x3d8>)
 800c970:	f7f3 fdb2 	bl	80004d8 <__aeabi_dmul>
 800c974:	460f      	mov	r7, r1
 800c976:	4606      	mov	r6, r0
 800c978:	f7f4 f85e 	bl	8000a38 <__aeabi_d2iz>
 800c97c:	f7f3 fd42 	bl	8000404 <__aeabi_i2d>
 800c980:	4602      	mov	r2, r0
 800c982:	460b      	mov	r3, r1
 800c984:	4630      	mov	r0, r6
 800c986:	4639      	mov	r1, r7
 800c988:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c98c:	f7f3 fbec 	bl	8000168 <__aeabi_dsub>
 800c990:	2200      	movs	r2, #0
 800c992:	4b17      	ldr	r3, [pc, #92]	; (800c9f0 <__ieee754_rem_pio2+0x3d8>)
 800c994:	f7f3 fda0 	bl	80004d8 <__aeabi_dmul>
 800c998:	f04f 0803 	mov.w	r8, #3
 800c99c:	2600      	movs	r6, #0
 800c99e:	2700      	movs	r7, #0
 800c9a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c9a4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800c9a8:	4632      	mov	r2, r6
 800c9aa:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c9ae:	463b      	mov	r3, r7
 800c9b0:	f108 3aff 	add.w	sl, r8, #4294967295
 800c9b4:	f7f3 fff8 	bl	80009a8 <__aeabi_dcmpeq>
 800c9b8:	b9b8      	cbnz	r0, 800c9ea <__ieee754_rem_pio2+0x3d2>
 800c9ba:	4b0e      	ldr	r3, [pc, #56]	; (800c9f4 <__ieee754_rem_pio2+0x3dc>)
 800c9bc:	462a      	mov	r2, r5
 800c9be:	9301      	str	r3, [sp, #4]
 800c9c0:	2302      	movs	r3, #2
 800c9c2:	4621      	mov	r1, r4
 800c9c4:	9300      	str	r3, [sp, #0]
 800c9c6:	a806      	add	r0, sp, #24
 800c9c8:	4643      	mov	r3, r8
 800c9ca:	f000 f97f 	bl	800cccc <__kernel_rem_pio2>
 800c9ce:	f1bb 0f00 	cmp.w	fp, #0
 800c9d2:	4605      	mov	r5, r0
 800c9d4:	f6bf ae56 	bge.w	800c684 <__ieee754_rem_pio2+0x6c>
 800c9d8:	6863      	ldr	r3, [r4, #4]
 800c9da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c9de:	6063      	str	r3, [r4, #4]
 800c9e0:	68e3      	ldr	r3, [r4, #12]
 800c9e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c9e6:	60e3      	str	r3, [r4, #12]
 800c9e8:	e708      	b.n	800c7fc <__ieee754_rem_pio2+0x1e4>
 800c9ea:	46d0      	mov	r8, sl
 800c9ec:	e7dc      	b.n	800c9a8 <__ieee754_rem_pio2+0x390>
 800c9ee:	bf00      	nop
 800c9f0:	41700000 	.word	0x41700000
 800c9f4:	0800e7f0 	.word	0x0800e7f0

0800c9f8 <__ieee754_sqrt>:
 800c9f8:	4b54      	ldr	r3, [pc, #336]	; (800cb4c <__ieee754_sqrt+0x154>)
 800c9fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9fe:	438b      	bics	r3, r1
 800ca00:	4606      	mov	r6, r0
 800ca02:	460d      	mov	r5, r1
 800ca04:	460a      	mov	r2, r1
 800ca06:	460c      	mov	r4, r1
 800ca08:	d10f      	bne.n	800ca2a <__ieee754_sqrt+0x32>
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	f7f3 fd63 	bl	80004d8 <__aeabi_dmul>
 800ca12:	4602      	mov	r2, r0
 800ca14:	460b      	mov	r3, r1
 800ca16:	4630      	mov	r0, r6
 800ca18:	4629      	mov	r1, r5
 800ca1a:	f7f3 fba7 	bl	800016c <__adddf3>
 800ca1e:	4606      	mov	r6, r0
 800ca20:	460d      	mov	r5, r1
 800ca22:	4630      	mov	r0, r6
 800ca24:	4629      	mov	r1, r5
 800ca26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca2a:	2900      	cmp	r1, #0
 800ca2c:	4607      	mov	r7, r0
 800ca2e:	4603      	mov	r3, r0
 800ca30:	dc0e      	bgt.n	800ca50 <__ieee754_sqrt+0x58>
 800ca32:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800ca36:	ea5c 0707 	orrs.w	r7, ip, r7
 800ca3a:	d0f2      	beq.n	800ca22 <__ieee754_sqrt+0x2a>
 800ca3c:	b141      	cbz	r1, 800ca50 <__ieee754_sqrt+0x58>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	460b      	mov	r3, r1
 800ca42:	f7f3 fb91 	bl	8000168 <__aeabi_dsub>
 800ca46:	4602      	mov	r2, r0
 800ca48:	460b      	mov	r3, r1
 800ca4a:	f7f3 fe6f 	bl	800072c <__aeabi_ddiv>
 800ca4e:	e7e6      	b.n	800ca1e <__ieee754_sqrt+0x26>
 800ca50:	1512      	asrs	r2, r2, #20
 800ca52:	d074      	beq.n	800cb3e <__ieee754_sqrt+0x146>
 800ca54:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ca58:	07d5      	lsls	r5, r2, #31
 800ca5a:	f04f 0500 	mov.w	r5, #0
 800ca5e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ca62:	bf48      	it	mi
 800ca64:	0fd9      	lsrmi	r1, r3, #31
 800ca66:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800ca6a:	bf44      	itt	mi
 800ca6c:	005b      	lslmi	r3, r3, #1
 800ca6e:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800ca72:	1051      	asrs	r1, r2, #1
 800ca74:	0fda      	lsrs	r2, r3, #31
 800ca76:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800ca7a:	4628      	mov	r0, r5
 800ca7c:	2216      	movs	r2, #22
 800ca7e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800ca82:	005b      	lsls	r3, r3, #1
 800ca84:	1987      	adds	r7, r0, r6
 800ca86:	42a7      	cmp	r7, r4
 800ca88:	bfde      	ittt	le
 800ca8a:	19b8      	addle	r0, r7, r6
 800ca8c:	1be4      	suble	r4, r4, r7
 800ca8e:	19ad      	addle	r5, r5, r6
 800ca90:	0fdf      	lsrs	r7, r3, #31
 800ca92:	3a01      	subs	r2, #1
 800ca94:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800ca98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ca9c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800caa0:	d1f0      	bne.n	800ca84 <__ieee754_sqrt+0x8c>
 800caa2:	f04f 0c20 	mov.w	ip, #32
 800caa6:	4696      	mov	lr, r2
 800caa8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800caac:	4284      	cmp	r4, r0
 800caae:	eb06 070e 	add.w	r7, r6, lr
 800cab2:	dc02      	bgt.n	800caba <__ieee754_sqrt+0xc2>
 800cab4:	d112      	bne.n	800cadc <__ieee754_sqrt+0xe4>
 800cab6:	429f      	cmp	r7, r3
 800cab8:	d810      	bhi.n	800cadc <__ieee754_sqrt+0xe4>
 800caba:	2f00      	cmp	r7, #0
 800cabc:	eb07 0e06 	add.w	lr, r7, r6
 800cac0:	da42      	bge.n	800cb48 <__ieee754_sqrt+0x150>
 800cac2:	f1be 0f00 	cmp.w	lr, #0
 800cac6:	db3f      	blt.n	800cb48 <__ieee754_sqrt+0x150>
 800cac8:	f100 0801 	add.w	r8, r0, #1
 800cacc:	1a24      	subs	r4, r4, r0
 800cace:	4640      	mov	r0, r8
 800cad0:	429f      	cmp	r7, r3
 800cad2:	bf88      	it	hi
 800cad4:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800cad8:	1bdb      	subs	r3, r3, r7
 800cada:	4432      	add	r2, r6
 800cadc:	0064      	lsls	r4, r4, #1
 800cade:	f1bc 0c01 	subs.w	ip, ip, #1
 800cae2:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800cae6:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800caea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800caee:	d1dd      	bne.n	800caac <__ieee754_sqrt+0xb4>
 800caf0:	4323      	orrs	r3, r4
 800caf2:	d006      	beq.n	800cb02 <__ieee754_sqrt+0x10a>
 800caf4:	1c54      	adds	r4, r2, #1
 800caf6:	bf0b      	itete	eq
 800caf8:	4662      	moveq	r2, ip
 800cafa:	3201      	addne	r2, #1
 800cafc:	3501      	addeq	r5, #1
 800cafe:	f022 0201 	bicne.w	r2, r2, #1
 800cb02:	106b      	asrs	r3, r5, #1
 800cb04:	0852      	lsrs	r2, r2, #1
 800cb06:	07e8      	lsls	r0, r5, #31
 800cb08:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cb0c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cb10:	bf48      	it	mi
 800cb12:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800cb16:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800cb1a:	4616      	mov	r6, r2
 800cb1c:	e781      	b.n	800ca22 <__ieee754_sqrt+0x2a>
 800cb1e:	0adc      	lsrs	r4, r3, #11
 800cb20:	3915      	subs	r1, #21
 800cb22:	055b      	lsls	r3, r3, #21
 800cb24:	2c00      	cmp	r4, #0
 800cb26:	d0fa      	beq.n	800cb1e <__ieee754_sqrt+0x126>
 800cb28:	02e6      	lsls	r6, r4, #11
 800cb2a:	d50a      	bpl.n	800cb42 <__ieee754_sqrt+0x14a>
 800cb2c:	f1c2 0020 	rsb	r0, r2, #32
 800cb30:	fa23 f000 	lsr.w	r0, r3, r0
 800cb34:	1e55      	subs	r5, r2, #1
 800cb36:	4093      	lsls	r3, r2
 800cb38:	4304      	orrs	r4, r0
 800cb3a:	1b4a      	subs	r2, r1, r5
 800cb3c:	e78a      	b.n	800ca54 <__ieee754_sqrt+0x5c>
 800cb3e:	4611      	mov	r1, r2
 800cb40:	e7f0      	b.n	800cb24 <__ieee754_sqrt+0x12c>
 800cb42:	0064      	lsls	r4, r4, #1
 800cb44:	3201      	adds	r2, #1
 800cb46:	e7ef      	b.n	800cb28 <__ieee754_sqrt+0x130>
 800cb48:	4680      	mov	r8, r0
 800cb4a:	e7bf      	b.n	800cacc <__ieee754_sqrt+0xd4>
 800cb4c:	7ff00000 	.word	0x7ff00000

0800cb50 <__kernel_cos>:
 800cb50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb54:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cb58:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800cb5c:	4680      	mov	r8, r0
 800cb5e:	460f      	mov	r7, r1
 800cb60:	e9cd 2300 	strd	r2, r3, [sp]
 800cb64:	da04      	bge.n	800cb70 <__kernel_cos+0x20>
 800cb66:	f7f3 ff67 	bl	8000a38 <__aeabi_d2iz>
 800cb6a:	2800      	cmp	r0, #0
 800cb6c:	f000 8086 	beq.w	800cc7c <__kernel_cos+0x12c>
 800cb70:	4642      	mov	r2, r8
 800cb72:	463b      	mov	r3, r7
 800cb74:	4640      	mov	r0, r8
 800cb76:	4639      	mov	r1, r7
 800cb78:	f7f3 fcae 	bl	80004d8 <__aeabi_dmul>
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	4b4e      	ldr	r3, [pc, #312]	; (800ccb8 <__kernel_cos+0x168>)
 800cb80:	4604      	mov	r4, r0
 800cb82:	460d      	mov	r5, r1
 800cb84:	f7f3 fca8 	bl	80004d8 <__aeabi_dmul>
 800cb88:	a33f      	add	r3, pc, #252	; (adr r3, 800cc88 <__kernel_cos+0x138>)
 800cb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8e:	4682      	mov	sl, r0
 800cb90:	468b      	mov	fp, r1
 800cb92:	4620      	mov	r0, r4
 800cb94:	4629      	mov	r1, r5
 800cb96:	f7f3 fc9f 	bl	80004d8 <__aeabi_dmul>
 800cb9a:	a33d      	add	r3, pc, #244	; (adr r3, 800cc90 <__kernel_cos+0x140>)
 800cb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba0:	f7f3 fae4 	bl	800016c <__adddf3>
 800cba4:	4622      	mov	r2, r4
 800cba6:	462b      	mov	r3, r5
 800cba8:	f7f3 fc96 	bl	80004d8 <__aeabi_dmul>
 800cbac:	a33a      	add	r3, pc, #232	; (adr r3, 800cc98 <__kernel_cos+0x148>)
 800cbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb2:	f7f3 fad9 	bl	8000168 <__aeabi_dsub>
 800cbb6:	4622      	mov	r2, r4
 800cbb8:	462b      	mov	r3, r5
 800cbba:	f7f3 fc8d 	bl	80004d8 <__aeabi_dmul>
 800cbbe:	a338      	add	r3, pc, #224	; (adr r3, 800cca0 <__kernel_cos+0x150>)
 800cbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc4:	f7f3 fad2 	bl	800016c <__adddf3>
 800cbc8:	4622      	mov	r2, r4
 800cbca:	462b      	mov	r3, r5
 800cbcc:	f7f3 fc84 	bl	80004d8 <__aeabi_dmul>
 800cbd0:	a335      	add	r3, pc, #212	; (adr r3, 800cca8 <__kernel_cos+0x158>)
 800cbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd6:	f7f3 fac7 	bl	8000168 <__aeabi_dsub>
 800cbda:	4622      	mov	r2, r4
 800cbdc:	462b      	mov	r3, r5
 800cbde:	f7f3 fc7b 	bl	80004d8 <__aeabi_dmul>
 800cbe2:	a333      	add	r3, pc, #204	; (adr r3, 800ccb0 <__kernel_cos+0x160>)
 800cbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe8:	f7f3 fac0 	bl	800016c <__adddf3>
 800cbec:	4622      	mov	r2, r4
 800cbee:	462b      	mov	r3, r5
 800cbf0:	f7f3 fc72 	bl	80004d8 <__aeabi_dmul>
 800cbf4:	4622      	mov	r2, r4
 800cbf6:	462b      	mov	r3, r5
 800cbf8:	f7f3 fc6e 	bl	80004d8 <__aeabi_dmul>
 800cbfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc00:	4604      	mov	r4, r0
 800cc02:	460d      	mov	r5, r1
 800cc04:	4640      	mov	r0, r8
 800cc06:	4639      	mov	r1, r7
 800cc08:	f7f3 fc66 	bl	80004d8 <__aeabi_dmul>
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	4602      	mov	r2, r0
 800cc10:	4629      	mov	r1, r5
 800cc12:	4620      	mov	r0, r4
 800cc14:	f7f3 faa8 	bl	8000168 <__aeabi_dsub>
 800cc18:	4b28      	ldr	r3, [pc, #160]	; (800ccbc <__kernel_cos+0x16c>)
 800cc1a:	4680      	mov	r8, r0
 800cc1c:	429e      	cmp	r6, r3
 800cc1e:	4689      	mov	r9, r1
 800cc20:	dc0e      	bgt.n	800cc40 <__kernel_cos+0xf0>
 800cc22:	4602      	mov	r2, r0
 800cc24:	460b      	mov	r3, r1
 800cc26:	4650      	mov	r0, sl
 800cc28:	4659      	mov	r1, fp
 800cc2a:	f7f3 fa9d 	bl	8000168 <__aeabi_dsub>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	2000      	movs	r0, #0
 800cc32:	460b      	mov	r3, r1
 800cc34:	4922      	ldr	r1, [pc, #136]	; (800ccc0 <__kernel_cos+0x170>)
 800cc36:	f7f3 fa97 	bl	8000168 <__aeabi_dsub>
 800cc3a:	b003      	add	sp, #12
 800cc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc40:	2400      	movs	r4, #0
 800cc42:	4b20      	ldr	r3, [pc, #128]	; (800ccc4 <__kernel_cos+0x174>)
 800cc44:	4622      	mov	r2, r4
 800cc46:	429e      	cmp	r6, r3
 800cc48:	bfcc      	ite	gt
 800cc4a:	4d1f      	ldrgt	r5, [pc, #124]	; (800ccc8 <__kernel_cos+0x178>)
 800cc4c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800cc50:	462b      	mov	r3, r5
 800cc52:	2000      	movs	r0, #0
 800cc54:	491a      	ldr	r1, [pc, #104]	; (800ccc0 <__kernel_cos+0x170>)
 800cc56:	f7f3 fa87 	bl	8000168 <__aeabi_dsub>
 800cc5a:	4622      	mov	r2, r4
 800cc5c:	4606      	mov	r6, r0
 800cc5e:	460f      	mov	r7, r1
 800cc60:	462b      	mov	r3, r5
 800cc62:	4650      	mov	r0, sl
 800cc64:	4659      	mov	r1, fp
 800cc66:	f7f3 fa7f 	bl	8000168 <__aeabi_dsub>
 800cc6a:	4642      	mov	r2, r8
 800cc6c:	464b      	mov	r3, r9
 800cc6e:	f7f3 fa7b 	bl	8000168 <__aeabi_dsub>
 800cc72:	4602      	mov	r2, r0
 800cc74:	460b      	mov	r3, r1
 800cc76:	4630      	mov	r0, r6
 800cc78:	4639      	mov	r1, r7
 800cc7a:	e7dc      	b.n	800cc36 <__kernel_cos+0xe6>
 800cc7c:	2000      	movs	r0, #0
 800cc7e:	4910      	ldr	r1, [pc, #64]	; (800ccc0 <__kernel_cos+0x170>)
 800cc80:	e7db      	b.n	800cc3a <__kernel_cos+0xea>
 800cc82:	bf00      	nop
 800cc84:	f3af 8000 	nop.w
 800cc88:	be8838d4 	.word	0xbe8838d4
 800cc8c:	bda8fae9 	.word	0xbda8fae9
 800cc90:	bdb4b1c4 	.word	0xbdb4b1c4
 800cc94:	3e21ee9e 	.word	0x3e21ee9e
 800cc98:	809c52ad 	.word	0x809c52ad
 800cc9c:	3e927e4f 	.word	0x3e927e4f
 800cca0:	19cb1590 	.word	0x19cb1590
 800cca4:	3efa01a0 	.word	0x3efa01a0
 800cca8:	16c15177 	.word	0x16c15177
 800ccac:	3f56c16c 	.word	0x3f56c16c
 800ccb0:	5555554c 	.word	0x5555554c
 800ccb4:	3fa55555 	.word	0x3fa55555
 800ccb8:	3fe00000 	.word	0x3fe00000
 800ccbc:	3fd33332 	.word	0x3fd33332
 800ccc0:	3ff00000 	.word	0x3ff00000
 800ccc4:	3fe90000 	.word	0x3fe90000
 800ccc8:	3fd20000 	.word	0x3fd20000

0800cccc <__kernel_rem_pio2>:
 800cccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ccd4:	9307      	str	r3, [sp, #28]
 800ccd6:	9104      	str	r1, [sp, #16]
 800ccd8:	4bbf      	ldr	r3, [pc, #764]	; (800cfd8 <__kernel_rem_pio2+0x30c>)
 800ccda:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800ccdc:	1ed4      	subs	r4, r2, #3
 800ccde:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cce2:	2500      	movs	r5, #0
 800cce4:	9302      	str	r3, [sp, #8]
 800cce6:	9b07      	ldr	r3, [sp, #28]
 800cce8:	9008      	str	r0, [sp, #32]
 800ccea:	3b01      	subs	r3, #1
 800ccec:	9306      	str	r3, [sp, #24]
 800ccee:	2318      	movs	r3, #24
 800ccf0:	fb94 f4f3 	sdiv	r4, r4, r3
 800ccf4:	f06f 0317 	mvn.w	r3, #23
 800ccf8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800ccfc:	fb04 3303 	mla	r3, r4, r3, r3
 800cd00:	eb03 0a02 	add.w	sl, r3, r2
 800cd04:	9a06      	ldr	r2, [sp, #24]
 800cd06:	9b02      	ldr	r3, [sp, #8]
 800cd08:	1aa7      	subs	r7, r4, r2
 800cd0a:	eb03 0802 	add.w	r8, r3, r2
 800cd0e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800cd10:	2200      	movs	r2, #0
 800cd12:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cd16:	2300      	movs	r3, #0
 800cd18:	ae1e      	add	r6, sp, #120	; 0x78
 800cd1a:	4545      	cmp	r5, r8
 800cd1c:	dd14      	ble.n	800cd48 <__kernel_rem_pio2+0x7c>
 800cd1e:	2600      	movs	r6, #0
 800cd20:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800cd24:	9b02      	ldr	r3, [sp, #8]
 800cd26:	429e      	cmp	r6, r3
 800cd28:	dc39      	bgt.n	800cd9e <__kernel_rem_pio2+0xd2>
 800cd2a:	9b08      	ldr	r3, [sp, #32]
 800cd2c:	f04f 0800 	mov.w	r8, #0
 800cd30:	3b08      	subs	r3, #8
 800cd32:	9300      	str	r3, [sp, #0]
 800cd34:	9b07      	ldr	r3, [sp, #28]
 800cd36:	f04f 0900 	mov.w	r9, #0
 800cd3a:	199d      	adds	r5, r3, r6
 800cd3c:	ab20      	add	r3, sp, #128	; 0x80
 800cd3e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cd42:	9305      	str	r3, [sp, #20]
 800cd44:	2700      	movs	r7, #0
 800cd46:	e023      	b.n	800cd90 <__kernel_rem_pio2+0xc4>
 800cd48:	42ef      	cmn	r7, r5
 800cd4a:	d40b      	bmi.n	800cd64 <__kernel_rem_pio2+0x98>
 800cd4c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800cd50:	e9cd 2300 	strd	r2, r3, [sp]
 800cd54:	f7f3 fb56 	bl	8000404 <__aeabi_i2d>
 800cd58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd5c:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800cd60:	3501      	adds	r5, #1
 800cd62:	e7da      	b.n	800cd1a <__kernel_rem_pio2+0x4e>
 800cd64:	4610      	mov	r0, r2
 800cd66:	4619      	mov	r1, r3
 800cd68:	e7f8      	b.n	800cd5c <__kernel_rem_pio2+0x90>
 800cd6a:	9905      	ldr	r1, [sp, #20]
 800cd6c:	9d00      	ldr	r5, [sp, #0]
 800cd6e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800cd72:	9105      	str	r1, [sp, #20]
 800cd74:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800cd78:	9500      	str	r5, [sp, #0]
 800cd7a:	f7f3 fbad 	bl	80004d8 <__aeabi_dmul>
 800cd7e:	4602      	mov	r2, r0
 800cd80:	460b      	mov	r3, r1
 800cd82:	4640      	mov	r0, r8
 800cd84:	4649      	mov	r1, r9
 800cd86:	f7f3 f9f1 	bl	800016c <__adddf3>
 800cd8a:	4680      	mov	r8, r0
 800cd8c:	4689      	mov	r9, r1
 800cd8e:	3701      	adds	r7, #1
 800cd90:	9b06      	ldr	r3, [sp, #24]
 800cd92:	429f      	cmp	r7, r3
 800cd94:	dde9      	ble.n	800cd6a <__kernel_rem_pio2+0x9e>
 800cd96:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800cd9a:	3601      	adds	r6, #1
 800cd9c:	e7c2      	b.n	800cd24 <__kernel_rem_pio2+0x58>
 800cd9e:	9b02      	ldr	r3, [sp, #8]
 800cda0:	aa0c      	add	r2, sp, #48	; 0x30
 800cda2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cda6:	930b      	str	r3, [sp, #44]	; 0x2c
 800cda8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800cdaa:	9f02      	ldr	r7, [sp, #8]
 800cdac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cdb0:	930a      	str	r3, [sp, #40]	; 0x28
 800cdb2:	2600      	movs	r6, #0
 800cdb4:	ab98      	add	r3, sp, #608	; 0x260
 800cdb6:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800cdba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cdbe:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cdc2:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800cdc6:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800cdca:	ab98      	add	r3, sp, #608	; 0x260
 800cdcc:	445b      	add	r3, fp
 800cdce:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800cdd2:	1bbb      	subs	r3, r7, r6
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	dc71      	bgt.n	800cebc <__kernel_rem_pio2+0x1f0>
 800cdd8:	4652      	mov	r2, sl
 800cdda:	4640      	mov	r0, r8
 800cddc:	4649      	mov	r1, r9
 800cdde:	f000 fc03 	bl	800d5e8 <scalbn>
 800cde2:	2200      	movs	r2, #0
 800cde4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cde8:	4604      	mov	r4, r0
 800cdea:	460d      	mov	r5, r1
 800cdec:	f7f3 fb74 	bl	80004d8 <__aeabi_dmul>
 800cdf0:	f000 fb72 	bl	800d4d8 <floor>
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	4b79      	ldr	r3, [pc, #484]	; (800cfdc <__kernel_rem_pio2+0x310>)
 800cdf8:	f7f3 fb6e 	bl	80004d8 <__aeabi_dmul>
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	460b      	mov	r3, r1
 800ce00:	4620      	mov	r0, r4
 800ce02:	4629      	mov	r1, r5
 800ce04:	f7f3 f9b0 	bl	8000168 <__aeabi_dsub>
 800ce08:	460d      	mov	r5, r1
 800ce0a:	4604      	mov	r4, r0
 800ce0c:	f7f3 fe14 	bl	8000a38 <__aeabi_d2iz>
 800ce10:	9005      	str	r0, [sp, #20]
 800ce12:	f7f3 faf7 	bl	8000404 <__aeabi_i2d>
 800ce16:	4602      	mov	r2, r0
 800ce18:	460b      	mov	r3, r1
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	4629      	mov	r1, r5
 800ce1e:	f7f3 f9a3 	bl	8000168 <__aeabi_dsub>
 800ce22:	f1ba 0f00 	cmp.w	sl, #0
 800ce26:	4680      	mov	r8, r0
 800ce28:	4689      	mov	r9, r1
 800ce2a:	dd6c      	ble.n	800cf06 <__kernel_rem_pio2+0x23a>
 800ce2c:	1e7a      	subs	r2, r7, #1
 800ce2e:	ab0c      	add	r3, sp, #48	; 0x30
 800ce30:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ce34:	f1ca 0118 	rsb	r1, sl, #24
 800ce38:	9c05      	ldr	r4, [sp, #20]
 800ce3a:	fa40 f301 	asr.w	r3, r0, r1
 800ce3e:	441c      	add	r4, r3
 800ce40:	408b      	lsls	r3, r1
 800ce42:	1ac0      	subs	r0, r0, r3
 800ce44:	ab0c      	add	r3, sp, #48	; 0x30
 800ce46:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ce4a:	f1ca 0317 	rsb	r3, sl, #23
 800ce4e:	9405      	str	r4, [sp, #20]
 800ce50:	fa40 f303 	asr.w	r3, r0, r3
 800ce54:	9300      	str	r3, [sp, #0]
 800ce56:	9b00      	ldr	r3, [sp, #0]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	dd62      	ble.n	800cf22 <__kernel_rem_pio2+0x256>
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ce62:	4614      	mov	r4, r2
 800ce64:	9b05      	ldr	r3, [sp, #20]
 800ce66:	3301      	adds	r3, #1
 800ce68:	9305      	str	r3, [sp, #20]
 800ce6a:	4297      	cmp	r7, r2
 800ce6c:	f300 809f 	bgt.w	800cfae <__kernel_rem_pio2+0x2e2>
 800ce70:	f1ba 0f00 	cmp.w	sl, #0
 800ce74:	dd07      	ble.n	800ce86 <__kernel_rem_pio2+0x1ba>
 800ce76:	f1ba 0f01 	cmp.w	sl, #1
 800ce7a:	f000 80bb 	beq.w	800cff4 <__kernel_rem_pio2+0x328>
 800ce7e:	f1ba 0f02 	cmp.w	sl, #2
 800ce82:	f000 80c1 	beq.w	800d008 <__kernel_rem_pio2+0x33c>
 800ce86:	9b00      	ldr	r3, [sp, #0]
 800ce88:	2b02      	cmp	r3, #2
 800ce8a:	d14a      	bne.n	800cf22 <__kernel_rem_pio2+0x256>
 800ce8c:	4642      	mov	r2, r8
 800ce8e:	464b      	mov	r3, r9
 800ce90:	2000      	movs	r0, #0
 800ce92:	4953      	ldr	r1, [pc, #332]	; (800cfe0 <__kernel_rem_pio2+0x314>)
 800ce94:	f7f3 f968 	bl	8000168 <__aeabi_dsub>
 800ce98:	4680      	mov	r8, r0
 800ce9a:	4689      	mov	r9, r1
 800ce9c:	2c00      	cmp	r4, #0
 800ce9e:	d040      	beq.n	800cf22 <__kernel_rem_pio2+0x256>
 800cea0:	4652      	mov	r2, sl
 800cea2:	2000      	movs	r0, #0
 800cea4:	494e      	ldr	r1, [pc, #312]	; (800cfe0 <__kernel_rem_pio2+0x314>)
 800cea6:	f000 fb9f 	bl	800d5e8 <scalbn>
 800ceaa:	4602      	mov	r2, r0
 800ceac:	460b      	mov	r3, r1
 800ceae:	4640      	mov	r0, r8
 800ceb0:	4649      	mov	r1, r9
 800ceb2:	f7f3 f959 	bl	8000168 <__aeabi_dsub>
 800ceb6:	4680      	mov	r8, r0
 800ceb8:	4689      	mov	r9, r1
 800ceba:	e032      	b.n	800cf22 <__kernel_rem_pio2+0x256>
 800cebc:	2200      	movs	r2, #0
 800cebe:	4b49      	ldr	r3, [pc, #292]	; (800cfe4 <__kernel_rem_pio2+0x318>)
 800cec0:	4640      	mov	r0, r8
 800cec2:	4649      	mov	r1, r9
 800cec4:	f7f3 fb08 	bl	80004d8 <__aeabi_dmul>
 800cec8:	f7f3 fdb6 	bl	8000a38 <__aeabi_d2iz>
 800cecc:	f7f3 fa9a 	bl	8000404 <__aeabi_i2d>
 800ced0:	2200      	movs	r2, #0
 800ced2:	4b45      	ldr	r3, [pc, #276]	; (800cfe8 <__kernel_rem_pio2+0x31c>)
 800ced4:	e9cd 0100 	strd	r0, r1, [sp]
 800ced8:	f7f3 fafe 	bl	80004d8 <__aeabi_dmul>
 800cedc:	4602      	mov	r2, r0
 800cede:	460b      	mov	r3, r1
 800cee0:	4640      	mov	r0, r8
 800cee2:	4649      	mov	r1, r9
 800cee4:	f7f3 f940 	bl	8000168 <__aeabi_dsub>
 800cee8:	f7f3 fda6 	bl	8000a38 <__aeabi_d2iz>
 800ceec:	ab0c      	add	r3, sp, #48	; 0x30
 800ceee:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800cef2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cef6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cefa:	f7f3 f937 	bl	800016c <__adddf3>
 800cefe:	3601      	adds	r6, #1
 800cf00:	4680      	mov	r8, r0
 800cf02:	4689      	mov	r9, r1
 800cf04:	e765      	b.n	800cdd2 <__kernel_rem_pio2+0x106>
 800cf06:	d105      	bne.n	800cf14 <__kernel_rem_pio2+0x248>
 800cf08:	1e7b      	subs	r3, r7, #1
 800cf0a:	aa0c      	add	r2, sp, #48	; 0x30
 800cf0c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cf10:	15c3      	asrs	r3, r0, #23
 800cf12:	e79f      	b.n	800ce54 <__kernel_rem_pio2+0x188>
 800cf14:	2200      	movs	r2, #0
 800cf16:	4b35      	ldr	r3, [pc, #212]	; (800cfec <__kernel_rem_pio2+0x320>)
 800cf18:	f7f3 fd64 	bl	80009e4 <__aeabi_dcmpge>
 800cf1c:	2800      	cmp	r0, #0
 800cf1e:	d143      	bne.n	800cfa8 <__kernel_rem_pio2+0x2dc>
 800cf20:	9000      	str	r0, [sp, #0]
 800cf22:	2200      	movs	r2, #0
 800cf24:	2300      	movs	r3, #0
 800cf26:	4640      	mov	r0, r8
 800cf28:	4649      	mov	r1, r9
 800cf2a:	f7f3 fd3d 	bl	80009a8 <__aeabi_dcmpeq>
 800cf2e:	2800      	cmp	r0, #0
 800cf30:	f000 80c3 	beq.w	800d0ba <__kernel_rem_pio2+0x3ee>
 800cf34:	1e7c      	subs	r4, r7, #1
 800cf36:	4623      	mov	r3, r4
 800cf38:	2200      	movs	r2, #0
 800cf3a:	9902      	ldr	r1, [sp, #8]
 800cf3c:	428b      	cmp	r3, r1
 800cf3e:	da6a      	bge.n	800d016 <__kernel_rem_pio2+0x34a>
 800cf40:	2a00      	cmp	r2, #0
 800cf42:	f000 8084 	beq.w	800d04e <__kernel_rem_pio2+0x382>
 800cf46:	ab0c      	add	r3, sp, #48	; 0x30
 800cf48:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800cf4c:	f1aa 0a18 	sub.w	sl, sl, #24
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	f000 80b0 	beq.w	800d0b6 <__kernel_rem_pio2+0x3ea>
 800cf56:	4652      	mov	r2, sl
 800cf58:	2000      	movs	r0, #0
 800cf5a:	4921      	ldr	r1, [pc, #132]	; (800cfe0 <__kernel_rem_pio2+0x314>)
 800cf5c:	f000 fb44 	bl	800d5e8 <scalbn>
 800cf60:	4625      	mov	r5, r4
 800cf62:	4606      	mov	r6, r0
 800cf64:	460f      	mov	r7, r1
 800cf66:	f04f 0a00 	mov.w	sl, #0
 800cf6a:	00e3      	lsls	r3, r4, #3
 800cf6c:	aa98      	add	r2, sp, #608	; 0x260
 800cf6e:	eb02 0803 	add.w	r8, r2, r3
 800cf72:	f8df b070 	ldr.w	fp, [pc, #112]	; 800cfe4 <__kernel_rem_pio2+0x318>
 800cf76:	9306      	str	r3, [sp, #24]
 800cf78:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800cf7c:	2d00      	cmp	r5, #0
 800cf7e:	f280 80d2 	bge.w	800d126 <__kernel_rem_pio2+0x45a>
 800cf82:	2500      	movs	r5, #0
 800cf84:	9a06      	ldr	r2, [sp, #24]
 800cf86:	ab98      	add	r3, sp, #608	; 0x260
 800cf88:	189e      	adds	r6, r3, r2
 800cf8a:	3ea8      	subs	r6, #168	; 0xa8
 800cf8c:	1b63      	subs	r3, r4, r5
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	f2c0 80f9 	blt.w	800d186 <__kernel_rem_pio2+0x4ba>
 800cf94:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800cff0 <__kernel_rem_pio2+0x324>
 800cf98:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800cf9c:	f04f 0a00 	mov.w	sl, #0
 800cfa0:	f04f 0b00 	mov.w	fp, #0
 800cfa4:	2700      	movs	r7, #0
 800cfa6:	e0e2      	b.n	800d16e <__kernel_rem_pio2+0x4a2>
 800cfa8:	2302      	movs	r3, #2
 800cfaa:	9300      	str	r3, [sp, #0]
 800cfac:	e756      	b.n	800ce5c <__kernel_rem_pio2+0x190>
 800cfae:	ab0c      	add	r3, sp, #48	; 0x30
 800cfb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfb4:	b94c      	cbnz	r4, 800cfca <__kernel_rem_pio2+0x2fe>
 800cfb6:	b12b      	cbz	r3, 800cfc4 <__kernel_rem_pio2+0x2f8>
 800cfb8:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800cfbc:	a80c      	add	r0, sp, #48	; 0x30
 800cfbe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	3201      	adds	r2, #1
 800cfc6:	461c      	mov	r4, r3
 800cfc8:	e74f      	b.n	800ce6a <__kernel_rem_pio2+0x19e>
 800cfca:	1acb      	subs	r3, r1, r3
 800cfcc:	a80c      	add	r0, sp, #48	; 0x30
 800cfce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800cfd2:	4623      	mov	r3, r4
 800cfd4:	e7f6      	b.n	800cfc4 <__kernel_rem_pio2+0x2f8>
 800cfd6:	bf00      	nop
 800cfd8:	0800e938 	.word	0x0800e938
 800cfdc:	40200000 	.word	0x40200000
 800cfe0:	3ff00000 	.word	0x3ff00000
 800cfe4:	3e700000 	.word	0x3e700000
 800cfe8:	41700000 	.word	0x41700000
 800cfec:	3fe00000 	.word	0x3fe00000
 800cff0:	0800e8f0 	.word	0x0800e8f0
 800cff4:	1e7a      	subs	r2, r7, #1
 800cff6:	ab0c      	add	r3, sp, #48	; 0x30
 800cff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cffc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d000:	a90c      	add	r1, sp, #48	; 0x30
 800d002:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d006:	e73e      	b.n	800ce86 <__kernel_rem_pio2+0x1ba>
 800d008:	1e7a      	subs	r2, r7, #1
 800d00a:	ab0c      	add	r3, sp, #48	; 0x30
 800d00c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d010:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d014:	e7f4      	b.n	800d000 <__kernel_rem_pio2+0x334>
 800d016:	a90c      	add	r1, sp, #48	; 0x30
 800d018:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d01c:	3b01      	subs	r3, #1
 800d01e:	430a      	orrs	r2, r1
 800d020:	e78b      	b.n	800cf3a <__kernel_rem_pio2+0x26e>
 800d022:	3401      	adds	r4, #1
 800d024:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d028:	2a00      	cmp	r2, #0
 800d02a:	d0fa      	beq.n	800d022 <__kernel_rem_pio2+0x356>
 800d02c:	ab98      	add	r3, sp, #608	; 0x260
 800d02e:	449b      	add	fp, r3
 800d030:	9b07      	ldr	r3, [sp, #28]
 800d032:	1c7e      	adds	r6, r7, #1
 800d034:	19dd      	adds	r5, r3, r7
 800d036:	ab98      	add	r3, sp, #608	; 0x260
 800d038:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d03c:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800d040:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800d044:	443c      	add	r4, r7
 800d046:	42b4      	cmp	r4, r6
 800d048:	da04      	bge.n	800d054 <__kernel_rem_pio2+0x388>
 800d04a:	4627      	mov	r7, r4
 800d04c:	e6b1      	b.n	800cdb2 <__kernel_rem_pio2+0xe6>
 800d04e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d050:	2401      	movs	r4, #1
 800d052:	e7e7      	b.n	800d024 <__kernel_rem_pio2+0x358>
 800d054:	f105 0308 	add.w	r3, r5, #8
 800d058:	9309      	str	r3, [sp, #36]	; 0x24
 800d05a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d05c:	2700      	movs	r7, #0
 800d05e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d062:	f7f3 f9cf 	bl	8000404 <__aeabi_i2d>
 800d066:	f04f 0800 	mov.w	r8, #0
 800d06a:	f04f 0900 	mov.w	r9, #0
 800d06e:	9b08      	ldr	r3, [sp, #32]
 800d070:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800d074:	3b08      	subs	r3, #8
 800d076:	9300      	str	r3, [sp, #0]
 800d078:	f105 0310 	add.w	r3, r5, #16
 800d07c:	9305      	str	r3, [sp, #20]
 800d07e:	9b06      	ldr	r3, [sp, #24]
 800d080:	429f      	cmp	r7, r3
 800d082:	dd04      	ble.n	800d08e <__kernel_rem_pio2+0x3c2>
 800d084:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800d088:	3601      	adds	r6, #1
 800d08a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d08c:	e7db      	b.n	800d046 <__kernel_rem_pio2+0x37a>
 800d08e:	9905      	ldr	r1, [sp, #20]
 800d090:	9d00      	ldr	r5, [sp, #0]
 800d092:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800d096:	9105      	str	r1, [sp, #20]
 800d098:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800d09c:	9500      	str	r5, [sp, #0]
 800d09e:	f7f3 fa1b 	bl	80004d8 <__aeabi_dmul>
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	460b      	mov	r3, r1
 800d0a6:	4640      	mov	r0, r8
 800d0a8:	4649      	mov	r1, r9
 800d0aa:	f7f3 f85f 	bl	800016c <__adddf3>
 800d0ae:	3701      	adds	r7, #1
 800d0b0:	4680      	mov	r8, r0
 800d0b2:	4689      	mov	r9, r1
 800d0b4:	e7e3      	b.n	800d07e <__kernel_rem_pio2+0x3b2>
 800d0b6:	3c01      	subs	r4, #1
 800d0b8:	e745      	b.n	800cf46 <__kernel_rem_pio2+0x27a>
 800d0ba:	f1ca 0200 	rsb	r2, sl, #0
 800d0be:	4640      	mov	r0, r8
 800d0c0:	4649      	mov	r1, r9
 800d0c2:	f000 fa91 	bl	800d5e8 <scalbn>
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	4ba3      	ldr	r3, [pc, #652]	; (800d358 <__kernel_rem_pio2+0x68c>)
 800d0ca:	4604      	mov	r4, r0
 800d0cc:	460d      	mov	r5, r1
 800d0ce:	f7f3 fc89 	bl	80009e4 <__aeabi_dcmpge>
 800d0d2:	b1f8      	cbz	r0, 800d114 <__kernel_rem_pio2+0x448>
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	4ba1      	ldr	r3, [pc, #644]	; (800d35c <__kernel_rem_pio2+0x690>)
 800d0d8:	4620      	mov	r0, r4
 800d0da:	4629      	mov	r1, r5
 800d0dc:	f7f3 f9fc 	bl	80004d8 <__aeabi_dmul>
 800d0e0:	f7f3 fcaa 	bl	8000a38 <__aeabi_d2iz>
 800d0e4:	4606      	mov	r6, r0
 800d0e6:	f7f3 f98d 	bl	8000404 <__aeabi_i2d>
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	4b9a      	ldr	r3, [pc, #616]	; (800d358 <__kernel_rem_pio2+0x68c>)
 800d0ee:	f7f3 f9f3 	bl	80004d8 <__aeabi_dmul>
 800d0f2:	460b      	mov	r3, r1
 800d0f4:	4602      	mov	r2, r0
 800d0f6:	4629      	mov	r1, r5
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	f7f3 f835 	bl	8000168 <__aeabi_dsub>
 800d0fe:	f7f3 fc9b 	bl	8000a38 <__aeabi_d2iz>
 800d102:	1c7c      	adds	r4, r7, #1
 800d104:	ab0c      	add	r3, sp, #48	; 0x30
 800d106:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800d10a:	f10a 0a18 	add.w	sl, sl, #24
 800d10e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800d112:	e720      	b.n	800cf56 <__kernel_rem_pio2+0x28a>
 800d114:	4620      	mov	r0, r4
 800d116:	4629      	mov	r1, r5
 800d118:	f7f3 fc8e 	bl	8000a38 <__aeabi_d2iz>
 800d11c:	ab0c      	add	r3, sp, #48	; 0x30
 800d11e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800d122:	463c      	mov	r4, r7
 800d124:	e717      	b.n	800cf56 <__kernel_rem_pio2+0x28a>
 800d126:	ab0c      	add	r3, sp, #48	; 0x30
 800d128:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d12c:	f7f3 f96a 	bl	8000404 <__aeabi_i2d>
 800d130:	4632      	mov	r2, r6
 800d132:	463b      	mov	r3, r7
 800d134:	f7f3 f9d0 	bl	80004d8 <__aeabi_dmul>
 800d138:	4652      	mov	r2, sl
 800d13a:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800d13e:	465b      	mov	r3, fp
 800d140:	4630      	mov	r0, r6
 800d142:	4639      	mov	r1, r7
 800d144:	f7f3 f9c8 	bl	80004d8 <__aeabi_dmul>
 800d148:	3d01      	subs	r5, #1
 800d14a:	4606      	mov	r6, r0
 800d14c:	460f      	mov	r7, r1
 800d14e:	e715      	b.n	800cf7c <__kernel_rem_pio2+0x2b0>
 800d150:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800d154:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800d158:	f7f3 f9be 	bl	80004d8 <__aeabi_dmul>
 800d15c:	4602      	mov	r2, r0
 800d15e:	460b      	mov	r3, r1
 800d160:	4650      	mov	r0, sl
 800d162:	4659      	mov	r1, fp
 800d164:	f7f3 f802 	bl	800016c <__adddf3>
 800d168:	4682      	mov	sl, r0
 800d16a:	468b      	mov	fp, r1
 800d16c:	3701      	adds	r7, #1
 800d16e:	9b02      	ldr	r3, [sp, #8]
 800d170:	429f      	cmp	r7, r3
 800d172:	dc01      	bgt.n	800d178 <__kernel_rem_pio2+0x4ac>
 800d174:	42bd      	cmp	r5, r7
 800d176:	daeb      	bge.n	800d150 <__kernel_rem_pio2+0x484>
 800d178:	ab48      	add	r3, sp, #288	; 0x120
 800d17a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d17e:	e9c3 ab00 	strd	sl, fp, [r3]
 800d182:	3501      	adds	r5, #1
 800d184:	e702      	b.n	800cf8c <__kernel_rem_pio2+0x2c0>
 800d186:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800d188:	2b03      	cmp	r3, #3
 800d18a:	d86c      	bhi.n	800d266 <__kernel_rem_pio2+0x59a>
 800d18c:	e8df f003 	tbb	[pc, r3]
 800d190:	022f2f59 	.word	0x022f2f59
 800d194:	9a06      	ldr	r2, [sp, #24]
 800d196:	ab48      	add	r3, sp, #288	; 0x120
 800d198:	189d      	adds	r5, r3, r2
 800d19a:	46aa      	mov	sl, r5
 800d19c:	46a3      	mov	fp, r4
 800d19e:	f1bb 0f00 	cmp.w	fp, #0
 800d1a2:	f300 8087 	bgt.w	800d2b4 <__kernel_rem_pio2+0x5e8>
 800d1a6:	46a2      	mov	sl, r4
 800d1a8:	f1ba 0f01 	cmp.w	sl, #1
 800d1ac:	f300 809f 	bgt.w	800d2ee <__kernel_rem_pio2+0x622>
 800d1b0:	2700      	movs	r7, #0
 800d1b2:	463e      	mov	r6, r7
 800d1b4:	9d06      	ldr	r5, [sp, #24]
 800d1b6:	ab48      	add	r3, sp, #288	; 0x120
 800d1b8:	3508      	adds	r5, #8
 800d1ba:	441d      	add	r5, r3
 800d1bc:	2c01      	cmp	r4, #1
 800d1be:	f300 80b3 	bgt.w	800d328 <__kernel_rem_pio2+0x65c>
 800d1c2:	9b00      	ldr	r3, [sp, #0]
 800d1c4:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800d1c6:	9849      	ldr	r0, [sp, #292]	; 0x124
 800d1c8:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800d1ca:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	f040 80b5 	bne.w	800d33c <__kernel_rem_pio2+0x670>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	462a      	mov	r2, r5
 800d1d6:	9804      	ldr	r0, [sp, #16]
 800d1d8:	e9c0 2300 	strd	r2, r3, [r0]
 800d1dc:	4622      	mov	r2, r4
 800d1de:	460b      	mov	r3, r1
 800d1e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d1e4:	463a      	mov	r2, r7
 800d1e6:	4633      	mov	r3, r6
 800d1e8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800d1ec:	e03b      	b.n	800d266 <__kernel_rem_pio2+0x59a>
 800d1ee:	f04f 0c00 	mov.w	ip, #0
 800d1f2:	4626      	mov	r6, r4
 800d1f4:	4667      	mov	r7, ip
 800d1f6:	9d06      	ldr	r5, [sp, #24]
 800d1f8:	ab48      	add	r3, sp, #288	; 0x120
 800d1fa:	3508      	adds	r5, #8
 800d1fc:	441d      	add	r5, r3
 800d1fe:	2e00      	cmp	r6, #0
 800d200:	da42      	bge.n	800d288 <__kernel_rem_pio2+0x5bc>
 800d202:	9b00      	ldr	r3, [sp, #0]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d049      	beq.n	800d29c <__kernel_rem_pio2+0x5d0>
 800d208:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800d20c:	4662      	mov	r2, ip
 800d20e:	460b      	mov	r3, r1
 800d210:	9904      	ldr	r1, [sp, #16]
 800d212:	2601      	movs	r6, #1
 800d214:	e9c1 2300 	strd	r2, r3, [r1]
 800d218:	a948      	add	r1, sp, #288	; 0x120
 800d21a:	463b      	mov	r3, r7
 800d21c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d220:	f7f2 ffa2 	bl	8000168 <__aeabi_dsub>
 800d224:	4684      	mov	ip, r0
 800d226:	460f      	mov	r7, r1
 800d228:	ad48      	add	r5, sp, #288	; 0x120
 800d22a:	42b4      	cmp	r4, r6
 800d22c:	da38      	bge.n	800d2a0 <__kernel_rem_pio2+0x5d4>
 800d22e:	9b00      	ldr	r3, [sp, #0]
 800d230:	b10b      	cbz	r3, 800d236 <__kernel_rem_pio2+0x56a>
 800d232:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800d236:	4662      	mov	r2, ip
 800d238:	463b      	mov	r3, r7
 800d23a:	9904      	ldr	r1, [sp, #16]
 800d23c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800d240:	e011      	b.n	800d266 <__kernel_rem_pio2+0x59a>
 800d242:	2700      	movs	r7, #0
 800d244:	463d      	mov	r5, r7
 800d246:	9b06      	ldr	r3, [sp, #24]
 800d248:	aa98      	add	r2, sp, #608	; 0x260
 800d24a:	4413      	add	r3, r2
 800d24c:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800d250:	2c00      	cmp	r4, #0
 800d252:	da0f      	bge.n	800d274 <__kernel_rem_pio2+0x5a8>
 800d254:	9b00      	ldr	r3, [sp, #0]
 800d256:	b10b      	cbz	r3, 800d25c <__kernel_rem_pio2+0x590>
 800d258:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800d25c:	463a      	mov	r2, r7
 800d25e:	462b      	mov	r3, r5
 800d260:	9904      	ldr	r1, [sp, #16]
 800d262:	e9c1 2300 	strd	r2, r3, [r1]
 800d266:	9b05      	ldr	r3, [sp, #20]
 800d268:	f003 0007 	and.w	r0, r3, #7
 800d26c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d274:	4638      	mov	r0, r7
 800d276:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800d27a:	4629      	mov	r1, r5
 800d27c:	f7f2 ff76 	bl	800016c <__adddf3>
 800d280:	3c01      	subs	r4, #1
 800d282:	4607      	mov	r7, r0
 800d284:	460d      	mov	r5, r1
 800d286:	e7e3      	b.n	800d250 <__kernel_rem_pio2+0x584>
 800d288:	4660      	mov	r0, ip
 800d28a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800d28e:	4639      	mov	r1, r7
 800d290:	f7f2 ff6c 	bl	800016c <__adddf3>
 800d294:	3e01      	subs	r6, #1
 800d296:	4684      	mov	ip, r0
 800d298:	460f      	mov	r7, r1
 800d29a:	e7b0      	b.n	800d1fe <__kernel_rem_pio2+0x532>
 800d29c:	4639      	mov	r1, r7
 800d29e:	e7b5      	b.n	800d20c <__kernel_rem_pio2+0x540>
 800d2a0:	4660      	mov	r0, ip
 800d2a2:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800d2a6:	4639      	mov	r1, r7
 800d2a8:	f7f2 ff60 	bl	800016c <__adddf3>
 800d2ac:	3601      	adds	r6, #1
 800d2ae:	4684      	mov	ip, r0
 800d2b0:	460f      	mov	r7, r1
 800d2b2:	e7ba      	b.n	800d22a <__kernel_rem_pio2+0x55e>
 800d2b4:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800d2b8:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800d2bc:	4640      	mov	r0, r8
 800d2be:	4649      	mov	r1, r9
 800d2c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d2c4:	f7f2 ff52 	bl	800016c <__adddf3>
 800d2c8:	4602      	mov	r2, r0
 800d2ca:	460b      	mov	r3, r1
 800d2cc:	4606      	mov	r6, r0
 800d2ce:	460f      	mov	r7, r1
 800d2d0:	4640      	mov	r0, r8
 800d2d2:	4649      	mov	r1, r9
 800d2d4:	f7f2 ff48 	bl	8000168 <__aeabi_dsub>
 800d2d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d2dc:	f7f2 ff46 	bl	800016c <__adddf3>
 800d2e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d2e4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d2e8:	e9ca 6700 	strd	r6, r7, [sl]
 800d2ec:	e757      	b.n	800d19e <__kernel_rem_pio2+0x4d2>
 800d2ee:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800d2f2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	4639      	mov	r1, r7
 800d2fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d2fe:	f7f2 ff35 	bl	800016c <__adddf3>
 800d302:	4602      	mov	r2, r0
 800d304:	460b      	mov	r3, r1
 800d306:	4680      	mov	r8, r0
 800d308:	4689      	mov	r9, r1
 800d30a:	4630      	mov	r0, r6
 800d30c:	4639      	mov	r1, r7
 800d30e:	f7f2 ff2b 	bl	8000168 <__aeabi_dsub>
 800d312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d316:	f7f2 ff29 	bl	800016c <__adddf3>
 800d31a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d31e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800d322:	e9c5 8900 	strd	r8, r9, [r5]
 800d326:	e73f      	b.n	800d1a8 <__kernel_rem_pio2+0x4dc>
 800d328:	4638      	mov	r0, r7
 800d32a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800d32e:	4631      	mov	r1, r6
 800d330:	f7f2 ff1c 	bl	800016c <__adddf3>
 800d334:	3c01      	subs	r4, #1
 800d336:	4607      	mov	r7, r0
 800d338:	460e      	mov	r6, r1
 800d33a:	e73f      	b.n	800d1bc <__kernel_rem_pio2+0x4f0>
 800d33c:	9b04      	ldr	r3, [sp, #16]
 800d33e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d342:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d346:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800d34a:	601d      	str	r5, [r3, #0]
 800d34c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800d350:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800d354:	615e      	str	r6, [r3, #20]
 800d356:	e786      	b.n	800d266 <__kernel_rem_pio2+0x59a>
 800d358:	41700000 	.word	0x41700000
 800d35c:	3e700000 	.word	0x3e700000

0800d360 <__kernel_sin>:
 800d360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d364:	b086      	sub	sp, #24
 800d366:	e9cd 2300 	strd	r2, r3, [sp]
 800d36a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d36e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d372:	4682      	mov	sl, r0
 800d374:	460c      	mov	r4, r1
 800d376:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800d378:	da03      	bge.n	800d382 <__kernel_sin+0x22>
 800d37a:	f7f3 fb5d 	bl	8000a38 <__aeabi_d2iz>
 800d37e:	2800      	cmp	r0, #0
 800d380:	d050      	beq.n	800d424 <__kernel_sin+0xc4>
 800d382:	4652      	mov	r2, sl
 800d384:	4623      	mov	r3, r4
 800d386:	4650      	mov	r0, sl
 800d388:	4621      	mov	r1, r4
 800d38a:	f7f3 f8a5 	bl	80004d8 <__aeabi_dmul>
 800d38e:	4606      	mov	r6, r0
 800d390:	460f      	mov	r7, r1
 800d392:	4602      	mov	r2, r0
 800d394:	460b      	mov	r3, r1
 800d396:	4650      	mov	r0, sl
 800d398:	4621      	mov	r1, r4
 800d39a:	f7f3 f89d 	bl	80004d8 <__aeabi_dmul>
 800d39e:	a33e      	add	r3, pc, #248	; (adr r3, 800d498 <__kernel_sin+0x138>)
 800d3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3a4:	4680      	mov	r8, r0
 800d3a6:	4689      	mov	r9, r1
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	4639      	mov	r1, r7
 800d3ac:	f7f3 f894 	bl	80004d8 <__aeabi_dmul>
 800d3b0:	a33b      	add	r3, pc, #236	; (adr r3, 800d4a0 <__kernel_sin+0x140>)
 800d3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b6:	f7f2 fed7 	bl	8000168 <__aeabi_dsub>
 800d3ba:	4632      	mov	r2, r6
 800d3bc:	463b      	mov	r3, r7
 800d3be:	f7f3 f88b 	bl	80004d8 <__aeabi_dmul>
 800d3c2:	a339      	add	r3, pc, #228	; (adr r3, 800d4a8 <__kernel_sin+0x148>)
 800d3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c8:	f7f2 fed0 	bl	800016c <__adddf3>
 800d3cc:	4632      	mov	r2, r6
 800d3ce:	463b      	mov	r3, r7
 800d3d0:	f7f3 f882 	bl	80004d8 <__aeabi_dmul>
 800d3d4:	a336      	add	r3, pc, #216	; (adr r3, 800d4b0 <__kernel_sin+0x150>)
 800d3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3da:	f7f2 fec5 	bl	8000168 <__aeabi_dsub>
 800d3de:	4632      	mov	r2, r6
 800d3e0:	463b      	mov	r3, r7
 800d3e2:	f7f3 f879 	bl	80004d8 <__aeabi_dmul>
 800d3e6:	a334      	add	r3, pc, #208	; (adr r3, 800d4b8 <__kernel_sin+0x158>)
 800d3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ec:	f7f2 febe 	bl	800016c <__adddf3>
 800d3f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3f4:	b9dd      	cbnz	r5, 800d42e <__kernel_sin+0xce>
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	4630      	mov	r0, r6
 800d3fc:	4639      	mov	r1, r7
 800d3fe:	f7f3 f86b 	bl	80004d8 <__aeabi_dmul>
 800d402:	a32f      	add	r3, pc, #188	; (adr r3, 800d4c0 <__kernel_sin+0x160>)
 800d404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d408:	f7f2 feae 	bl	8000168 <__aeabi_dsub>
 800d40c:	4642      	mov	r2, r8
 800d40e:	464b      	mov	r3, r9
 800d410:	f7f3 f862 	bl	80004d8 <__aeabi_dmul>
 800d414:	4602      	mov	r2, r0
 800d416:	460b      	mov	r3, r1
 800d418:	4650      	mov	r0, sl
 800d41a:	4621      	mov	r1, r4
 800d41c:	f7f2 fea6 	bl	800016c <__adddf3>
 800d420:	4682      	mov	sl, r0
 800d422:	460c      	mov	r4, r1
 800d424:	4650      	mov	r0, sl
 800d426:	4621      	mov	r1, r4
 800d428:	b006      	add	sp, #24
 800d42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d42e:	2200      	movs	r2, #0
 800d430:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d434:	4b24      	ldr	r3, [pc, #144]	; (800d4c8 <__kernel_sin+0x168>)
 800d436:	f7f3 f84f 	bl	80004d8 <__aeabi_dmul>
 800d43a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d43e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d442:	4640      	mov	r0, r8
 800d444:	4649      	mov	r1, r9
 800d446:	f7f3 f847 	bl	80004d8 <__aeabi_dmul>
 800d44a:	4602      	mov	r2, r0
 800d44c:	460b      	mov	r3, r1
 800d44e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d452:	f7f2 fe89 	bl	8000168 <__aeabi_dsub>
 800d456:	4632      	mov	r2, r6
 800d458:	463b      	mov	r3, r7
 800d45a:	f7f3 f83d 	bl	80004d8 <__aeabi_dmul>
 800d45e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d462:	f7f2 fe81 	bl	8000168 <__aeabi_dsub>
 800d466:	a316      	add	r3, pc, #88	; (adr r3, 800d4c0 <__kernel_sin+0x160>)
 800d468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d46c:	4606      	mov	r6, r0
 800d46e:	460f      	mov	r7, r1
 800d470:	4640      	mov	r0, r8
 800d472:	4649      	mov	r1, r9
 800d474:	f7f3 f830 	bl	80004d8 <__aeabi_dmul>
 800d478:	4602      	mov	r2, r0
 800d47a:	460b      	mov	r3, r1
 800d47c:	4630      	mov	r0, r6
 800d47e:	4639      	mov	r1, r7
 800d480:	f7f2 fe74 	bl	800016c <__adddf3>
 800d484:	4602      	mov	r2, r0
 800d486:	460b      	mov	r3, r1
 800d488:	4650      	mov	r0, sl
 800d48a:	4621      	mov	r1, r4
 800d48c:	f7f2 fe6c 	bl	8000168 <__aeabi_dsub>
 800d490:	e7c6      	b.n	800d420 <__kernel_sin+0xc0>
 800d492:	bf00      	nop
 800d494:	f3af 8000 	nop.w
 800d498:	5acfd57c 	.word	0x5acfd57c
 800d49c:	3de5d93a 	.word	0x3de5d93a
 800d4a0:	8a2b9ceb 	.word	0x8a2b9ceb
 800d4a4:	3e5ae5e6 	.word	0x3e5ae5e6
 800d4a8:	57b1fe7d 	.word	0x57b1fe7d
 800d4ac:	3ec71de3 	.word	0x3ec71de3
 800d4b0:	19c161d5 	.word	0x19c161d5
 800d4b4:	3f2a01a0 	.word	0x3f2a01a0
 800d4b8:	1110f8a6 	.word	0x1110f8a6
 800d4bc:	3f811111 	.word	0x3f811111
 800d4c0:	55555549 	.word	0x55555549
 800d4c4:	3fc55555 	.word	0x3fc55555
 800d4c8:	3fe00000 	.word	0x3fe00000

0800d4cc <fabs>:
 800d4cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	4770      	bx	lr
 800d4d4:	0000      	movs	r0, r0
	...

0800d4d8 <floor>:
 800d4d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4dc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800d4e0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800d4e4:	2e13      	cmp	r6, #19
 800d4e6:	4607      	mov	r7, r0
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	460c      	mov	r4, r1
 800d4ec:	4605      	mov	r5, r0
 800d4ee:	dc35      	bgt.n	800d55c <floor+0x84>
 800d4f0:	2e00      	cmp	r6, #0
 800d4f2:	da16      	bge.n	800d522 <floor+0x4a>
 800d4f4:	a336      	add	r3, pc, #216	; (adr r3, 800d5d0 <floor+0xf8>)
 800d4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fa:	f7f2 fe37 	bl	800016c <__adddf3>
 800d4fe:	2200      	movs	r2, #0
 800d500:	2300      	movs	r3, #0
 800d502:	f7f3 fa79 	bl	80009f8 <__aeabi_dcmpgt>
 800d506:	b148      	cbz	r0, 800d51c <floor+0x44>
 800d508:	2c00      	cmp	r4, #0
 800d50a:	da5b      	bge.n	800d5c4 <floor+0xec>
 800d50c:	2500      	movs	r5, #0
 800d50e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d512:	4a31      	ldr	r2, [pc, #196]	; (800d5d8 <floor+0x100>)
 800d514:	433b      	orrs	r3, r7
 800d516:	42ab      	cmp	r3, r5
 800d518:	bf18      	it	ne
 800d51a:	4614      	movne	r4, r2
 800d51c:	4623      	mov	r3, r4
 800d51e:	462f      	mov	r7, r5
 800d520:	e026      	b.n	800d570 <floor+0x98>
 800d522:	4a2e      	ldr	r2, [pc, #184]	; (800d5dc <floor+0x104>)
 800d524:	fa42 f806 	asr.w	r8, r2, r6
 800d528:	ea01 0208 	and.w	r2, r1, r8
 800d52c:	4302      	orrs	r2, r0
 800d52e:	d01f      	beq.n	800d570 <floor+0x98>
 800d530:	a327      	add	r3, pc, #156	; (adr r3, 800d5d0 <floor+0xf8>)
 800d532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d536:	f7f2 fe19 	bl	800016c <__adddf3>
 800d53a:	2200      	movs	r2, #0
 800d53c:	2300      	movs	r3, #0
 800d53e:	f7f3 fa5b 	bl	80009f8 <__aeabi_dcmpgt>
 800d542:	2800      	cmp	r0, #0
 800d544:	d0ea      	beq.n	800d51c <floor+0x44>
 800d546:	2c00      	cmp	r4, #0
 800d548:	bfbe      	ittt	lt
 800d54a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d54e:	fa43 f606 	asrlt.w	r6, r3, r6
 800d552:	19a4      	addlt	r4, r4, r6
 800d554:	ea24 0408 	bic.w	r4, r4, r8
 800d558:	2500      	movs	r5, #0
 800d55a:	e7df      	b.n	800d51c <floor+0x44>
 800d55c:	2e33      	cmp	r6, #51	; 0x33
 800d55e:	dd0b      	ble.n	800d578 <floor+0xa0>
 800d560:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d564:	d104      	bne.n	800d570 <floor+0x98>
 800d566:	4602      	mov	r2, r0
 800d568:	f7f2 fe00 	bl	800016c <__adddf3>
 800d56c:	4607      	mov	r7, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	4638      	mov	r0, r7
 800d572:	4619      	mov	r1, r3
 800d574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d578:	f04f 32ff 	mov.w	r2, #4294967295
 800d57c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800d580:	fa22 f808 	lsr.w	r8, r2, r8
 800d584:	ea18 0f00 	tst.w	r8, r0
 800d588:	d0f2      	beq.n	800d570 <floor+0x98>
 800d58a:	a311      	add	r3, pc, #68	; (adr r3, 800d5d0 <floor+0xf8>)
 800d58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d590:	f7f2 fdec 	bl	800016c <__adddf3>
 800d594:	2200      	movs	r2, #0
 800d596:	2300      	movs	r3, #0
 800d598:	f7f3 fa2e 	bl	80009f8 <__aeabi_dcmpgt>
 800d59c:	2800      	cmp	r0, #0
 800d59e:	d0bd      	beq.n	800d51c <floor+0x44>
 800d5a0:	2c00      	cmp	r4, #0
 800d5a2:	da02      	bge.n	800d5aa <floor+0xd2>
 800d5a4:	2e14      	cmp	r6, #20
 800d5a6:	d103      	bne.n	800d5b0 <floor+0xd8>
 800d5a8:	3401      	adds	r4, #1
 800d5aa:	ea25 0508 	bic.w	r5, r5, r8
 800d5ae:	e7b5      	b.n	800d51c <floor+0x44>
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d5b6:	fa03 f606 	lsl.w	r6, r3, r6
 800d5ba:	4435      	add	r5, r6
 800d5bc:	42bd      	cmp	r5, r7
 800d5be:	bf38      	it	cc
 800d5c0:	18e4      	addcc	r4, r4, r3
 800d5c2:	e7f2      	b.n	800d5aa <floor+0xd2>
 800d5c4:	2500      	movs	r5, #0
 800d5c6:	462c      	mov	r4, r5
 800d5c8:	e7a8      	b.n	800d51c <floor+0x44>
 800d5ca:	bf00      	nop
 800d5cc:	f3af 8000 	nop.w
 800d5d0:	8800759c 	.word	0x8800759c
 800d5d4:	7e37e43c 	.word	0x7e37e43c
 800d5d8:	bff00000 	.word	0xbff00000
 800d5dc:	000fffff 	.word	0x000fffff

0800d5e0 <matherr>:
 800d5e0:	2000      	movs	r0, #0
 800d5e2:	4770      	bx	lr
 800d5e4:	0000      	movs	r0, r0
	...

0800d5e8 <scalbn>:
 800d5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ea:	4616      	mov	r6, r2
 800d5ec:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d5f0:	4604      	mov	r4, r0
 800d5f2:	460d      	mov	r5, r1
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	b982      	cbnz	r2, 800d61a <scalbn+0x32>
 800d5f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d5fc:	4303      	orrs	r3, r0
 800d5fe:	d034      	beq.n	800d66a <scalbn+0x82>
 800d600:	4b2d      	ldr	r3, [pc, #180]	; (800d6b8 <scalbn+0xd0>)
 800d602:	2200      	movs	r2, #0
 800d604:	f7f2 ff68 	bl	80004d8 <__aeabi_dmul>
 800d608:	4b2c      	ldr	r3, [pc, #176]	; (800d6bc <scalbn+0xd4>)
 800d60a:	4604      	mov	r4, r0
 800d60c:	429e      	cmp	r6, r3
 800d60e:	460d      	mov	r5, r1
 800d610:	da0d      	bge.n	800d62e <scalbn+0x46>
 800d612:	a325      	add	r3, pc, #148	; (adr r3, 800d6a8 <scalbn+0xc0>)
 800d614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d618:	e01c      	b.n	800d654 <scalbn+0x6c>
 800d61a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800d61e:	42ba      	cmp	r2, r7
 800d620:	d109      	bne.n	800d636 <scalbn+0x4e>
 800d622:	4602      	mov	r2, r0
 800d624:	f7f2 fda2 	bl	800016c <__adddf3>
 800d628:	4604      	mov	r4, r0
 800d62a:	460d      	mov	r5, r1
 800d62c:	e01d      	b.n	800d66a <scalbn+0x82>
 800d62e:	460b      	mov	r3, r1
 800d630:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d634:	3a36      	subs	r2, #54	; 0x36
 800d636:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d63a:	4432      	add	r2, r6
 800d63c:	428a      	cmp	r2, r1
 800d63e:	dd0c      	ble.n	800d65a <scalbn+0x72>
 800d640:	4622      	mov	r2, r4
 800d642:	462b      	mov	r3, r5
 800d644:	a11a      	add	r1, pc, #104	; (adr r1, 800d6b0 <scalbn+0xc8>)
 800d646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d64a:	f000 f83b 	bl	800d6c4 <copysign>
 800d64e:	a318      	add	r3, pc, #96	; (adr r3, 800d6b0 <scalbn+0xc8>)
 800d650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d654:	f7f2 ff40 	bl	80004d8 <__aeabi_dmul>
 800d658:	e7e6      	b.n	800d628 <scalbn+0x40>
 800d65a:	2a00      	cmp	r2, #0
 800d65c:	dd08      	ble.n	800d670 <scalbn+0x88>
 800d65e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d662:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d666:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d66a:	4620      	mov	r0, r4
 800d66c:	4629      	mov	r1, r5
 800d66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d670:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d674:	da0b      	bge.n	800d68e <scalbn+0xa6>
 800d676:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d67a:	429e      	cmp	r6, r3
 800d67c:	4622      	mov	r2, r4
 800d67e:	462b      	mov	r3, r5
 800d680:	dce0      	bgt.n	800d644 <scalbn+0x5c>
 800d682:	a109      	add	r1, pc, #36	; (adr r1, 800d6a8 <scalbn+0xc0>)
 800d684:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d688:	f000 f81c 	bl	800d6c4 <copysign>
 800d68c:	e7c1      	b.n	800d612 <scalbn+0x2a>
 800d68e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d692:	3236      	adds	r2, #54	; 0x36
 800d694:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d698:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d69c:	4620      	mov	r0, r4
 800d69e:	4629      	mov	r1, r5
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	4b07      	ldr	r3, [pc, #28]	; (800d6c0 <scalbn+0xd8>)
 800d6a4:	e7d6      	b.n	800d654 <scalbn+0x6c>
 800d6a6:	bf00      	nop
 800d6a8:	c2f8f359 	.word	0xc2f8f359
 800d6ac:	01a56e1f 	.word	0x01a56e1f
 800d6b0:	8800759c 	.word	0x8800759c
 800d6b4:	7e37e43c 	.word	0x7e37e43c
 800d6b8:	43500000 	.word	0x43500000
 800d6bc:	ffff3cb0 	.word	0xffff3cb0
 800d6c0:	3c900000 	.word	0x3c900000

0800d6c4 <copysign>:
 800d6c4:	b530      	push	{r4, r5, lr}
 800d6c6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800d6ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d6ce:	ea42 0503 	orr.w	r5, r2, r3
 800d6d2:	4629      	mov	r1, r5
 800d6d4:	bd30      	pop	{r4, r5, pc}
	...

0800d6d8 <_init>:
 800d6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6da:	bf00      	nop
 800d6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6de:	bc08      	pop	{r3}
 800d6e0:	469e      	mov	lr, r3
 800d6e2:	4770      	bx	lr

0800d6e4 <_fini>:
 800d6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6e6:	bf00      	nop
 800d6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6ea:	bc08      	pop	{r3}
 800d6ec:	469e      	mov	lr, r3
 800d6ee:	4770      	bx	lr
